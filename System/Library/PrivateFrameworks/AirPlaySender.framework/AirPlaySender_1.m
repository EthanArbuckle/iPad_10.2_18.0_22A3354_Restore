uint64_t bufferedAudioEngine_startRemoteMediaTimebaseWithReceiverAnchor(const void *a1, uint64_t a2, CMTime *a3)
{
  uint64_t DerivedStorage;
  __int128 v7;
  CMTimeEpoch v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, CMTime *, uint64_t *);
  uint64_t v12;
  int64_t v13;
  int32_t SampleRateFromTransportAudioFormat;
  CMTimeScale v15;
  int v16;
  uint64_t v17;
  const __CFAllocator *v18;
  uint64_t v19;
  CMClockRef HostTimeClock;
  const void *v21;
  OpaqueCMTimebase *v22;
  uint64_t v23;
  const __CFAllocator *v24;
  CFDictionaryRef v25;
  __int128 *v26;
  OpaqueCMClock *v27;
  __int128 *v28;
  CMTime *v29;
  const void *v30;
  CMClockRef v31;
  OpaqueCMClock *v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  Float64 Seconds;
  uint64_t v37;
  void (*v38)(uint64_t, _QWORD, _QWORD);
  __int128 v39;
  CMTimeValue value;
  CMTimeScale timescale;
  __int128 v42;
  __int128 v43;
  const void *v44;
  CFDictionaryRef cf;
  __int128 v47;
  CMTimeValue v48;
  CMTime v49;
  CMTime v50;
  CMTime rhs;
  CMTime lhs;
  CMTime v53;
  CMTime v54;
  CMTime v55;
  uint64_t hostTime;
  CMTime v57;
  CMTime v58;
  CMTime v59;
  CMTime time;
  void *values;
  void *keys;
  CMTime immediateSourceTime;
  uint64_t v64;
  int epoch_high;
  uint64_t v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v59.value = v7;
  v8 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v59.epoch = v8;
  *(_OWORD *)&v58.value = v7;
  v58.epoch = v8;
  v64 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 12);
  epoch_high = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 20);
  *(_OWORD *)&v57.value = v7;
  v57.epoch = v8;
  v55.epoch = v8;
  hostTime = 0;
  *(_OWORD *)&v55.value = v7;
  if (*(_DWORD *)(DerivedStorage + 804) != 1937207905)
    return 0;
  v9 = DerivedStorage;
  v47 = v7;
  v10 = *(_QWORD *)(DerivedStorage + 328);
  immediateSourceTime = *a3;
  v11 = *(uint64_t (**)(uint64_t, CMTime *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v11)
  {
    v17 = 4294954514;
LABEL_8:
    APSLogErrorAt();
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    return v17;
  }
  time = immediateSourceTime;
  v12 = v11(v10, &time, &hostTime);
  if ((_DWORD)v12)
  {
    v17 = v12;
    goto LABEL_8;
  }
  CMClockMakeHostTimeFromSystemUnits(&v59, hostTime);
  if (*(_DWORD *)a2 == 2)
  {
    v48 = *(_QWORD *)(a2 + 4);
    v15 = *(_DWORD *)(a2 + 12);
    v66 = *(_QWORD *)(a2 + 16);
    v16 = *(_DWORD *)(a2 + 24);
LABEL_13:
    v67 = v16;
    v18 = CFGetAllocator(a1);
    v19 = CMTimebaseCreateWithSourceClock(v18, *(CMClockRef *)(v9 + 448), (CMTimebaseRef *)(v9 + 792));
    if ((_DWORD)v19)
    {
      v17 = v19;
    }
    else
    {
      APSTimedInfoManagerResume();
      bufferedAudioEngine_recordStartTimebaseTimeStampForRTC((uint64_t)a1, hostTime);
      HostTimeClock = CMClockGetHostTimeClock();
      v21 = *(const void **)(v9 + 448);
      time = v59;
      CMSyncConvertTime(&v58, &time, HostTimeClock, v21);
      v22 = *(OpaqueCMTimebase **)(v9 + 792);
      time.value = v48;
      *(_QWORD *)&time.flags = v66;
      time.timescale = v15;
      HIDWORD(time.epoch) = v67;
      immediateSourceTime = v58;
      v23 = CMTimebaseSetRateAndAnchorTime(v22, 1.0, &time, &immediateSourceTime);
      if (!(_DWORD)v23)
      {
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1)
            CMBaseObjectGetDerivedStorage();
          time.value = v48;
          *(_QWORD *)&time.flags = v66;
          time.timescale = v15;
          HIDWORD(time.epoch) = v67;
          CMTimeGetSeconds(&time);
          LogPrintF();
        }
        v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        values = *(void **)(v9 + 952);
        keys = CFSTR("ContentType");
        v25 = CFDictionaryCreate(v24, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!v25)
        {
          APSLogErrorAt();
          return 4294951816;
        }
        v26 = (__int128 *)(v9 + 700);
        time.value = v48;
        *(_QWORD *)&time.flags = v66;
        time.timescale = v15;
        HIDWORD(time.epoch) = v67;
        cf = v25;
        APSTimedInfoManagerAddTimedInfo();
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1)
            CMBaseObjectGetDerivedStorage();
          time.value = v48;
          *(_QWORD *)&time.flags = v66;
          time.timescale = v15;
          HIDWORD(time.epoch) = v67;
          CMTimeGetSeconds(&time);
          time = v59;
          CMTimeGetSeconds(&time);
          v27 = CMClockGetHostTimeClock();
          CMClockGetTime(&v54, v27);
          CMTimeGetSeconds(&v54);
          time = v58;
          CMTimeGetSeconds(&time);
          CMClockGetTime(&v53, *(CMClockRef *)(v9 + 448));
          CMTimeGetSeconds(&v53);
          LogPrintF();
        }
        v28 = (__int128 *)(v9 + 724);
        if ((*(_DWORD *)(v9 + 736) & 1) != 0)
          v29 = (CMTime *)(v9 + 724);
        else
          v29 = (CMTime *)(v9 + 700);
        time = *v29;
        v30 = *(const void **)(v9 + 792);
        v31 = CMClockGetHostTimeClock();
        immediateSourceTime = time;
        CMSyncConvertTime(&lhs, &immediateSourceTime, v30, v31);
        v32 = CMClockGetHostTimeClock();
        CMClockGetTime(&rhs, v32);
        CMTimeSubtract(&v57, &lhs, &rhs);
        bufferedAudioEngine_getPlaybackStartupTime(&v55);
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1)
            CMBaseObjectGetDerivedStorage();
          immediateSourceTime = v57;
          CMTimeGetSeconds(&immediateSourceTime);
          immediateSourceTime = v55;
          CMTimeGetSeconds(&immediateSourceTime);
          LogPrintF();
        }
        v33 = LogCategoryCopyOSLogHandle();
        v34 = (void *)v33;
        if (v33)
          v35 = v33;
        else
          v35 = MEMORY[0x1E0C81028];
        if (os_signpost_enabled(v35))
        {
          immediateSourceTime = v57;
          Seconds = CMTimeGetSeconds(&immediateSourceTime);
          LODWORD(immediateSourceTime.value) = 134217984;
          *(Float64 *)((char *)&immediateSourceTime.value + 4) = Seconds;
          _os_signpost_emit_with_name_impl(&dword_1C943B000, v35, OS_SIGNPOST_EVENT, 0x2B1605C4uLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_FIRST_AUDIBLE_TIME_RELATIVE_TO_NOW_MS", "First audible time relative to now: %1.6f \n", (uint8_t *)&immediateSourceTime, 0xCu);
        }
        if (v34)
          os_release(v34);
        bufferedAudioEngine_logStartupTime((uint64_t)a1);
        *(_QWORD *)(v9 + 808) = *(_QWORD *)(v9 + 816);
        *(_QWORD *)(v9 + 816) = 0xBFF0000000000000;
        *v28 = v47;
        *(_QWORD *)(v9 + 740) = v8;
        v37 = *(_QWORD *)(v9 + 864);
        v38 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v38)
          v38(v37, *MEMORY[0x1E0CF7380], *MEMORY[0x1E0C9AE50]);
        bufferedAudioEngine_updatePlaybackState((uint64_t)a1, 1937011316);
        v50.value = v48;
        v50.timescale = v15;
        *(_QWORD *)&v50.flags = v66;
        HIDWORD(v50.epoch) = v67;
        v39 = *v26;
        v49.epoch = *(_QWORD *)(v9 + 716);
        *(_OWORD *)&v49.value = v39;
        CMTimeSubtract(&immediateSourceTime, &v50, &v49);
        value = immediateSourceTime.value;
        v64 = *(_QWORD *)&immediateSourceTime.flags;
        timescale = immediateSourceTime.timescale;
        epoch_high = HIDWORD(immediateSourceTime.epoch);
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1)
            CMBaseObjectGetDerivedStorage();
          immediateSourceTime.value = value;
          *(_QWORD *)&immediateSourceTime.flags = v64;
          immediateSourceTime.timescale = timescale;
          HIDWORD(immediateSourceTime.epoch) = epoch_high;
          CMTimeGetSeconds(&immediateSourceTime);
          immediateSourceTime.value = v48;
          *(_QWORD *)&immediateSourceTime.flags = v66;
          immediateSourceTime.timescale = v15;
          HIDWORD(immediateSourceTime.epoch) = v67;
          CMTimeGetSeconds(&immediateSourceTime);
          v42 = *v26;
          immediateSourceTime.epoch = *(_QWORD *)(v9 + 716);
          *(_OWORD *)&immediateSourceTime.value = v42;
          CMTimeGetSeconds(&immediateSourceTime);
          v43 = *v28;
          immediateSourceTime.epoch = *(_QWORD *)(v9 + 740);
          *(_OWORD *)&immediateSourceTime.value = v43;
          CMTimeGetSeconds(&immediateSourceTime);
          LogPrintF();
        }
        v44 = *(const void **)(v9 + 888);
        immediateSourceTime.value = value;
        *(_QWORD *)&immediateSourceTime.flags = v64;
        immediateSourceTime.timescale = timescale;
        HIDWORD(immediateSourceTime.epoch) = epoch_high;
        v50 = v59;
        bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(a1, 0, (uint64_t)&immediateSourceTime, (uint64_t)&v50, v44);
        *(_QWORD *)(v9 + 880) = 0;
        *(_QWORD *)(v9 + 872) = 0;
        CFRelease(cf);
        return 0;
      }
      v17 = v23;
    }
    APSLogErrorAt();
    return v17;
  }
  if (*(_DWORD *)a2 == 1)
  {
    v13 = *(unsigned int *)(a2 + 4);
    SampleRateFromTransportAudioFormat = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
    CMTimeMake(&time, v13, SampleRateFromTransportAudioFormat);
    v48 = time.value;
    v66 = *(_QWORD *)&time.flags;
    v15 = time.timescale;
    v16 = HIDWORD(time.epoch);
    goto LABEL_13;
  }
  return 4294960587;
}

void bufferedAudioEngine_handleTerminalSetRateErrorForHoseManager(uint64_t a1, uint64_t a2, int a3, int a4)
{
  const __CFString *v8;
  __CFDictionary *Mutable;
  const __CFString *v10;

  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (a4)
    {
      if (gLogCategory_APAudioEngineBuffered <= 90
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      v8 = CFSTR("Too many retries setting the rate to 1");
    }
    else
    {
      if (gLogCategory_APAudioEngineBuffered <= 90
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      v8 = CFSTR("SetRate encountered terminal error");
    }
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      FigCFDictionarySetInt32();
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA46E8], v8);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (a3 == -71976)
      v10 = CFSTR("SetRate 1 failed due to not agreeing on grandmaster");
    else
      v10 = CFSTR("SetRate 1 failed due to error");
    bufferedAudioEngine_sendSessionFailureEvent(a1, v10);
    bufferedAudioEngine_maybeTriggerTTR(a1, 0, 0, a3);
    if (Mutable)
      CFRelease(Mutable);
  }
  else if (gLogCategory_APAudioEngineBuffered <= 90
         && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
}

uint64_t bufferedAudioEngine_hoseSetRateAndAnchorTimeCallbackCompletionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7)
{
  CMBaseObjectGetDerivedStorage();
  APSPriorityDispatcherSyncF();
  if (a7)
    CFRelease(a7);
  return 0;
}

void bufferedAudioEngine_hoseSetRateAndAnchorTimeCallbackCompletionHandlerInternal(uint64_t a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v3;
  _QWORD *HoseDecriptorFromHose;
  _QWORD *v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  __int128 v24;
  _BYTE buf[28];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v3 = DerivedStorage;
    HoseDecriptorFromHose = bufferedAudioEngine_getHoseDecriptorFromHose();
    if (HoseDecriptorFromHose)
    {
      v5 = HoseDecriptorFromHose;
      if (*(_DWORD *)(a1 + 16))
      {
        v6 = MEMORY[0x1E0CF72D8];
        *((_OWORD *)HoseDecriptorFromHose + 11) = *MEMORY[0x1E0CF72D8];
        *(_OWORD *)((char *)HoseDecriptorFromHose + 188) = *(_OWORD *)(v6 + 12);
        if (*(_DWORD *)(a1 + 100))
        {
          ++*((_DWORD *)HoseDecriptorFromHose + 41);
          if (gLogCategory_APAudioEngineBuffered <= 90
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (*(_QWORD *)a1)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          v8 = LogCategoryCopyOSLogHandle();
          v9 = (void *)v8;
          if (v8)
            v10 = v8;
          else
            v10 = MEMORY[0x1E0C81028];
          if (os_signpost_enabled(v10))
          {
            v11 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v11;
            _os_signpost_emit_with_name_impl(&dword_1C943B000, v10, OS_SIGNPOST_INTERVAL_END, 0x2B160578uLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_HOSE_SETRATE_1", "FAILURE hose=0x%x", buf, 8u);
          }
          if (v9)
            os_release(v9);
          if (*((_DWORD *)v5 + 41) < 0x32u)
          {
            if (*((double *)v3 + 101) == 1.0 && *((double *)v5 + 8) == 1.0)
            {
              v5[8] = 0;
              *((_DWORD *)v5 + 35) = 2;
              if (!v3[856])
              {
                v12 = MicrosecondsToUpTicks();
                *((_QWORD *)v3 + 106) = mach_absolute_time() + v12;
                v3[856] = 1;
              }
            }
          }
          else
          {
            bufferedAudioEngine_handleTerminalSetRateError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 100));
          }
        }
        else
        {
          *((_DWORD *)HoseDecriptorFromHose + 41) = 0;
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (*(_QWORD *)a1)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          v17 = LogCategoryCopyOSLogHandle();
          v18 = (void *)v17;
          if (v17)
            v19 = v17;
          else
            v19 = MEMORY[0x1E0C81028];
          if (os_signpost_enabled(v19))
          {
            v20 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v20;
            _os_signpost_emit_with_name_impl(&dword_1C943B000, v19, OS_SIGNPOST_INTERVAL_END, 0x2B160578uLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_HOSE_SETRATE_1", "SUCCESS hose=0x%x", buf, 8u);
          }
          if (v18)
            os_release(v18);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 100))
        {
          if (gLogCategory_APAudioEngineBuffered <= 90
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (*(_QWORD *)a1)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          v13 = LogCategoryCopyOSLogHandle();
          v14 = (void *)v13;
          if (v13)
            v15 = v13;
          else
            v15 = MEMORY[0x1E0C81028];
          if (os_signpost_enabled(v15))
          {
            v16 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v16;
            _os_signpost_emit_with_name_impl(&dword_1C943B000, v15, OS_SIGNPOST_INTERVAL_END, 0x2B16057CuLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_HOSE_SETRATE_0", "REQUEST hose=0x%x", buf, 8u);
          }
          v7 = 0;
        }
        else
        {
          *(_OWORD *)buf = *(_OWORD *)(a1 + 72);
          *(_OWORD *)&buf[12] = *(_OWORD *)(a1 + 84);
          v7 = (const void *)APSAudioTransportTimeCopyDebugDesc();
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (*(_QWORD *)a1)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          v21 = LogCategoryCopyOSLogHandle();
          v14 = (void *)v21;
          if (v21)
            v22 = v21;
          else
            v22 = MEMORY[0x1E0C81028];
          if (os_signpost_enabled(v22))
          {
            v23 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v23;
            _os_signpost_emit_with_name_impl(&dword_1C943B000, v22, OS_SIGNPOST_INTERVAL_END, 0x2B16057CuLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_HOSE_SETRATE_0", "SUCCESS hose=0x%x", buf, 8u);
          }
        }
        if (v14)
          os_release(v14);
        if (!*((_DWORD *)v5 + 43))
        {
          v24 = *(_OWORD *)(a1 + 72);
          *(_OWORD *)((char *)v5 + 188) = *(_OWORD *)(a1 + 84);
          *((_OWORD *)v5 + 11) = v24;
        }
        if (v7)
          CFRelease(v7);
      }
    }
    else if (gLogCategory_APAudioEngineBuffered <= 90
           && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(_QWORD *)a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
  }
  **(_DWORD **)(a1 + 104) = 0;
}

void bufferedAudioEngine_handleTerminalSetRateError(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *HoseDecriptorFromHose;
  _QWORD *v7;
  __CFDictionary *Mutable;
  const __CFString *v9;

  CMBaseObjectGetDerivedStorage();
  HoseDecriptorFromHose = bufferedAudioEngine_getHoseDecriptorFromHose();
  if (HoseDecriptorFromHose)
  {
    v7 = HoseDecriptorFromHose;
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      FigCFDictionarySetInt32();
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA46E8], CFSTR("Too many retries setting the rate to 1"));
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (a3 == -71976)
      v9 = CFSTR("SetRate 1 failed due to not agreeing on grandmaster");
    else
      v9 = CFSTR("SetRate 1 failed due to error");
    bufferedAudioEngine_sendSessionFailureEvent(a1, v9);
    bufferedAudioEngine_maybeTriggerTTR(a1, a2, v7[31], a3);
    if (Mutable)
      CFRelease(Mutable);
  }
  else if (gLogCategory_APAudioEngineBuffered <= 90
         && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
}

void bufferedAudioEngine_maybeTriggerTTR(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFMutableStringRef Mutable;
  CFMutableStringRef v14;
  const void *v15;
  uint64_t v16;
  _QWORD *v17;
  const void *v18;
  CFTypeRef cf;
  int v20;

  v20 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v8 = mach_absolute_time();
  if (v8 < bufferedAudioEngine_maybeTriggerTTR_nextDialogTicks)
  {
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    goto LABEL_34;
  }
  v9 = v8;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (*(_QWORD *)(DerivedStorage + 536))
  {
    CMBaseObject = FigEndpointStreamGetCMBaseObject();
    v12 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v12)
    {
      v20 = v12(CMBaseObject, CFSTR("EndpointIDs"), v10, &cf);
      if (!v20)
        goto LABEL_9;
    }
    else
    {
      v20 = -12782;
    }
    APSLogErrorAt();
    goto LABEL_34;
  }
LABEL_9:
  Mutable = CFStringCreateMutable(v10, 0);
  if (!Mutable)
  {
LABEL_34:
    v15 = 0;
    goto LABEL_53;
  }
  v14 = Mutable;
  v20 = CFStringAppendF();
  if (v20)
  {
    APSLogErrorAt();
    v15 = 0;
LABEL_64:
    v18 = v14;
    goto LABEL_52;
  }
  if (a4 == -6722)
  {
    v15 = (const void *)CFStringCreateF();
    if (!v20)
      goto LABEL_23;
    goto LABEL_63;
  }
  if (a4 != -71974)
  {
    if (a4 == -71976)
    {
      v15 = (const void *)CFStringCreateF();
      if (!v20)
        goto LABEL_23;
    }
    else
    {
      v15 = (const void *)CFStringCreateF();
      if (!v20)
        goto LABEL_23;
    }
    goto LABEL_63;
  }
  v15 = (const void *)CFStringCreateF();
  if (v20)
  {
LABEL_63:
    APSLogErrorAt();
    goto LABEL_64;
  }
LABEL_23:
  v16 = CFStringCreateF();
  if (!v20)
  {
    if (a2)
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      v20 = CFStringAppendF();
      if (v20)
        goto LABEL_41;
    }
    else
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      v20 = CFStringAppendF();
      if (v20)
        goto LABEL_41;
    }
    v20 = CFStringAppendF();
    if (!v20)
    {
      v20 = CFStringAppendF();
      if (!v20)
      {
        v17 = (_QWORD *)(DerivedStorage + 584);
        while (1)
        {
          v17 = (_QWORD *)*v17;
          if (!v17)
            break;
          v20 = CFStringAppendF();
          if (v20)
            goto LABEL_41;
        }
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1)
            CMBaseObjectGetDerivedStorage();
          LogPrintF();
        }
        bufferedAudioEngine_maybeTriggerTTR_nextDialogTicks = v9 + 36000 * UpTicksPerSecond();
        APSTapToRadarInvoke();
        goto LABEL_50;
      }
    }
  }
LABEL_41:
  APSLogErrorAt();
LABEL_50:
  CFRelease(v14);
  if (!v16)
    goto LABEL_53;
  v18 = (const void *)v16;
LABEL_52:
  CFRelease(v18);
LABEL_53:
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
}

void bufferedAudioEngine_recordStartTimebaseTimeStampForRTC(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v5;
  const void *v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[147])
  {
    v5 = DerivedStorage;
    if (DerivedStorage[173])
    {
      FigCFDictionarySetInt64();
      v6 = (const void *)v5[111];
      if (v6)
      {
        CFRelease(v6);
        v5[111] = 0;
      }
      v5[111] = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFDictionaryRef)v5[173]);
      FigCFDictionarySetInt64();
      APSAudioFormatDescriptionCopyDebugString();
      APSLogErrorAt();
    }
    else
    {
      DerivedStorage[175] = a2;
      bufferedAudioEngine_updateActiveAudioEngineCount(a1, 1);
      bufferedAudioEngine_reportPlayingAudioEngineEvent(a1);
    }
  }
}

CMTime *bufferedAudioEngine_getPlaybackStartupTime@<X0>(CMTime *a1@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  CMTime *result;
  int64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a1->value = *MEMORY[0x1E0CA2E18];
  a1->epoch = *(_QWORD *)(v3 + 16);
  result = *(CMTime **)(DerivedStorage + 888);
  if (result)
  {
    result = (CMTime *)FigCFDictionaryGetInt64IfPresent();
    if ((_DWORD)result)
    {
      result = (CMTime *)FigCFDictionaryGetInt64IfPresent();
      if ((_DWORD)result)
      {
        v5 = UpTicksToMilliseconds();
        return CMTimeMake(a1, v5, 1000);
      }
    }
  }
  return result;
}

void bufferedAudioEngine_logStartupTime(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t AudioFormatIndex;
  const char *v4;
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  CMTime rhs;
  CMTime lhs;
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  AudioFormatIndex = APSAudioFormatDescriptionGetAudioFormatIndex();
  v4 = "PCM/24000/16/1";
  switch(AudioFormatIndex)
  {
    case 2:
      v4 = "PCM/8000/16/1";
      break;
    case 3:
      v4 = "PCM/8000/16/2";
      break;
    case 4:
      v4 = "PCM/16000/16/1";
      break;
    case 5:
      v4 = "PCM/16000/16/2";
      break;
    case 6:
      break;
    case 7:
      v4 = "PCM/24000/16/2";
      break;
    case 8:
      v4 = "PCM/32000/16/1";
      break;
    case 9:
      v4 = "PCM/32000/16/2";
      break;
    case 10:
      v4 = "PCM/44100/16/1";
      break;
    case 11:
      v4 = "PCM/44100/16/2";
      break;
    case 12:
      v4 = "PCM/44100/24/1";
      break;
    case 13:
      v4 = "PCM/44100/24/2";
      break;
    case 14:
      v4 = "PCM/48000/16/1";
      break;
    case 15:
      v4 = "PCM/48000/16/2";
      break;
    case 16:
      v4 = "PCM/48000/24/1";
      break;
    case 17:
      v4 = "PCM/48000/24/2";
      break;
    case 18:
      v4 = "ALAC/44100/16/2";
      break;
    case 19:
      v4 = "ALAC/44100/24/2";
      break;
    case 20:
      v4 = "ALAC/48000/16/2";
      break;
    case 21:
      v4 = "ALAC/48000/24/2";
      break;
    case 22:
      v4 = "AAC-LC/44100/2";
      break;
    case 23:
      v4 = "AAC-LC/48000/2";
      break;
    case 24:
      v4 = "AAC-ELD/44100/2";
      break;
    case 25:
      v4 = "AAC-ELD/48000/2";
      break;
    case 26:
      v4 = "AAC-ELD/16000/1";
      break;
    case 27:
      v4 = "AAC-ELD/24000/1";
      break;
    case 28:
      v4 = "OPUS/16000/1";
      break;
    case 29:
      v4 = "OPUS/24000/1";
      break;
    case 30:
      v4 = "OPUS/48000/1";
      break;
    case 31:
      v4 = "AAC-ELD/44100/1";
      break;
    case 32:
      v4 = "AAC-ELD/48000/1";
      break;
    case 33:
      v4 = "QC3/48000/5.1.2";
      break;
    case 34:
      v4 = "QC3/48000/7.1.4";
      break;
    case 35:
      v4 = "QC3/48000/9.1.6";
      break;
    case 38:
      v4 = "PCM/48000/16/5.1.2";
      break;
    case 39:
      v4 = "AAC_LC/48000/5.1";
      break;
    case 40:
      v4 = "AAC_LC/48000/5.1.2";
      break;
    case 41:
      v4 = "AAC_ELD/48000/5.1";
      break;
    case 42:
      v4 = "AAC_ELD/48000/5.1.2";
      break;
    case 43:
      v4 = "AAC-ELD/32000/1";
      break;
    case 44:
      v4 = "PCM/48000/16/5.1";
      break;
    case 45:
      v4 = "PCM/48000/32f/1";
      break;
    case 46:
      v4 = "PCM/48000/32f/2";
      break;
    case 47:
      v4 = "PCM/48000/32f/5.1";
      break;
    case 48:
      v4 = "PCM/48000/32f/5.1.2";
      break;
    case 49:
      v4 = "DDPLUS/48000/2";
      break;
    case 50:
      v4 = "DDPLUS/48000/5.1";
      break;
    case 51:
      v4 = "DDPLUS/48000/5.1.2";
      break;
    case 52:
      v4 = "DDPLUS/48000/7.1.4";
      break;
    case 53:
      v4 = "DDPLUS/48000/9.1.6";
      break;
    case 54:
      v4 = "QAAC/48000/2";
      break;
    case 55:
      v4 = "QAAC/48000/5.1";
      break;
    case 56:
      v4 = "QAAC/48000/5.1.2";
      break;
    case 57:
      v4 = "QAACHE/48000/2";
      break;
    case 58:
      v4 = "QAACHE/48000/5.1";
      break;
    case 60:
      v4 = "QAACHE/48000/5.1.2";
      break;
    case 61:
      v4 = "QLAC/48000/24/2";
      break;
    case 62:
      v4 = "QC3/48000/2";
      break;
    case 63:
      v4 = "QC3/48000/5.1";
      break;
    case 64:
      v4 = "APAC/48000/2";
      break;
    case 65:
      v4 = "APAC/48000/5.1";
      break;
    case 66:
      v4 = "APAC/48000/5.1.2";
      break;
    case 67:
      v4 = "APAC/48000/7.1";
      break;
    case 68:
      v4 = "APAC/48000/7.1.4";
      break;
    case 69:
      v4 = "PCM/48000/32f/7.1.4";
      break;
    case 70:
      v4 = "QAAC/44100/2";
      break;
    case 71:
      v4 = "QAACHE/44100/2";
      break;
    case 72:
      v4 = "QAACHEV2/44100/2";
      break;
    case 73:
      v4 = "QLAC/44100/24/2";
      break;
    case 74:
      v4 = "MP3/44100/2";
      break;
    case 76:
      v4 = "APAC/48000/5.1.4";
      break;
    case 77:
      v4 = "APAC/48000/7.1.2";
      break;
    case 78:
      v4 = "PCM/48000/16/7.1";
      break;
    case 79:
      v4 = "PCM/48000/32f/7.1";
      break;
    case 80:
      v4 = "PCM/48000/16/5.1.4";
      break;
    case 81:
      v4 = "PCM/48000/32f/5.1.4";
      break;
    case 82:
      v4 = "PCM/48000/16/7.1.2";
      break;
    case 83:
      v4 = "PCM/48000/32f/7.1.2";
      break;
    case 84:
      v4 = "PCM/48000/16/7.1.4";
      break;
    case 85:
      v4 = "ALAC/44100/20/2";
      break;
    case 86:
      v4 = "ALAC/48000/20/2";
      break;
    case 87:
      v4 = "QAC3/48000/5.1";
      break;
    case 88:
      v4 = "QEC3/48000/7.1";
      break;
    case 89:
      v4 = "PAAC/44100/2";
      break;
    case 90:
      v4 = "AAC_LC/48000/7.1";
      break;
    default:
      if (AudioFormatIndex == 75)
        v4 = "MP3/48000/2";
      else
        v4 = "";
      break;
  }
  lhs = *(CMTime *)(DerivedStorage + 1620);
  rhs = *(CMTime *)(DerivedStorage + 1568);
  CMTimeSubtract(&time, &lhs, &rhs);
  CMTimeGetSeconds(&time);
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  if (*(_QWORD *)(DerivedStorage + 1176))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v6 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("sessionType"), CFSTR("AudioBuffered"));
      strlen(v4);
      CFDictionarySetCString();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      APSRTCReportingAgentSendEvent();
      CFRelease(v6);
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

void bufferedAudioEngine_hoseSetRateCallbackCompletionHandlerInternal(uint64_t a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v3;
  _QWORD *HoseDecriptorFromHose;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  const void *v16;
  uint64_t started;
  const void *v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  CMTime v23;
  _BYTE buf[28];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    goto LABEL_71;
  v3 = DerivedStorage;
  HoseDecriptorFromHose = bufferedAudioEngine_getHoseDecriptorFromHose();
  if (!HoseDecriptorFromHose)
  {
    if (gLogCategory_APAudioEngineBuffered > 90
      || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_71;
    }
    if (!*(_QWORD *)a1)
      goto LABEL_46;
    goto LABEL_20;
  }
  v5 = HoseDecriptorFromHose;
  if (v3[802])
  {
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(_QWORD *)a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    bufferedAudioEngine_updatePlaybackState(*(_QWORD *)a1, 1937010793);
    v7 = LogCategoryCopyOSLogHandle();
    if (v7)
      v8 = v7;
    else
      v8 = MEMORY[0x1E0C81028];
    if (os_signpost_enabled(v8))
    {
      v9 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v9;
      _os_signpost_emit_with_name_impl(&dword_1C943B000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0x2B16057CuLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_HOSE_SETRATE_0", "REQUEST hose=0x%x", buf, 8u);
    }
    LODWORD(v10) = bufferedAudioEngine_handleSetRateToZero(*(const void **)a1);
    v3[802] = 0;
    goto LABEL_76;
  }
  v6 = *(_DWORD *)(a1 + 80);
  if (v6 == -17580)
  {
    if (gLogCategory_APAudioEngineBuffered > 50
      || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_71;
    }
    if (!*(_QWORD *)a1)
      goto LABEL_46;
LABEL_20:
    CMBaseObjectGetDerivedStorage();
LABEL_46:
    LogPrintF();
    goto LABEL_71;
  }
  if (v6)
  {
    if (v6 == 200501)
    {
      if (gLogCategory_APAudioEngineBuffered <= 90
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*(_QWORD *)a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      bufferedAudioEngine_updatePlaybackState(*(_QWORD *)a1, 1937011305);
      *((_DWORD *)v5 + 35) = 2;
      LODWORD(v10) = bufferedAudioEngine_handleSetRateToOne(*(const void **)a1);
      goto LABEL_76;
    }
    ++*((_DWORD *)HoseDecriptorFromHose + 41);
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(_QWORD *)a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    v19 = LogCategoryCopyOSLogHandle();
    v20 = (void *)v19;
    if (v19)
      v21 = v19;
    else
      v21 = MEMORY[0x1E0C81028];
    if (os_signpost_enabled(v21))
    {
      v22 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v22;
      _os_signpost_emit_with_name_impl(&dword_1C943B000, v21, OS_SIGNPOST_INTERVAL_END, 0x2B160578uLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_HOSE_SETRATE_1", "FAILURE hose=0x%x", buf, 8u);
    }
    if (v20)
      os_release(v20);
    *((_DWORD *)v5 + 35) = 2;
    bufferedAudioEngine_handleErrorWithReceiverAnchor(*(const void **)a1, *(_QWORD *)(a1 + 8), 0);
LABEL_71:
    LODWORD(v10) = 0;
    goto LABEL_76;
  }
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(_QWORD *)a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  *((_DWORD *)v5 + 41) = 0;
  *((_BYTE *)v5 + 168) = 1;
  v5[8] = *((_QWORD *)v3 + 102);
  v11 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(v3 + 1000) = *MEMORY[0x1E0CA2E18];
  *((_QWORD *)v3 + 127) = *(_QWORD *)(v11 + 16);
  v12 = LogCategoryCopyOSLogHandle();
  v13 = (void *)v12;
  if (v12)
    v14 = v12;
  else
    v14 = MEMORY[0x1E0C81028];
  if (os_signpost_enabled(v14))
  {
    v15 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v15;
    _os_signpost_emit_with_name_impl(&dword_1C943B000, v14, OS_SIGNPOST_INTERVAL_END, 0x2B160578uLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_HOSE_SETRATE_1", "SUCCESS hose=0x%x", buf, 8u);
  }
  if (v13)
    os_release(v13);
  v16 = *(const void **)a1;
  *(_OWORD *)buf = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&buf[12] = *(_OWORD *)(a1 + 36);
  v23 = *(CMTime *)(a1 + 56);
  started = bufferedAudioEngine_startRemoteMediaTimebaseWithReceiverAnchor(v16, (uint64_t)buf, &v23);
  if (!(_DWORD)started)
  {
    *((_DWORD *)v5 + 41) = 0;
    v18 = (const void *)*((_QWORD *)v3 + 108);
    if (v18)
    {
      CFRelease(v18);
      LODWORD(v10) = 0;
      *((_QWORD *)v3 + 108) = 0;
      goto LABEL_76;
    }
    goto LABEL_71;
  }
  v10 = started;
  ++*((_DWORD *)v5 + 41);
  if (gLogCategory_APAudioEngineBuffered <= 90
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(_QWORD *)a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  bufferedAudioEngine_handleErrorWithReceiverAnchor(*(const void **)a1, *(_QWORD *)(a1 + 8), v10);
LABEL_76:
  **(_DWORD **)(a1 + 88) = v10;
}

void bufferedAudioEngine_handleErrorWithReceiverAnchor(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  _QWORD *HoseDecriptorFromHose;
  const void *v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  HoseDecriptorFromHose = bufferedAudioEngine_getHoseDecriptorFromHose();
  if (HoseDecriptorFromHose)
  {
    if (*((_DWORD *)HoseDecriptorFromHose + 41) < 0x32u)
    {
      if (*(_DWORD *)(DerivedStorage + 804) == 1937207905 && !*(_BYTE *)(DerivedStorage + 856))
      {
        v9 = MicrosecondsToUpTicks();
        *(_QWORD *)(DerivedStorage + 848) = mach_absolute_time() + v9;
        *(_BYTE *)(DerivedStorage + 856) = 1;
      }
    }
    else
    {
      *((_DWORD *)HoseDecriptorFromHose + 41) = 0;
      bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(a1, a3, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], 0);
      *(_QWORD *)(DerivedStorage + 880) = 0;
      *(_QWORD *)(DerivedStorage + 872) = 0;
      bufferedAudioEngine_handleTerminalSetRateError((uint64_t)a1, a2, a3);
      v8 = *(const void **)(DerivedStorage + 864);
      if (v8)
      {
        CFRelease(v8);
        *(_QWORD *)(DerivedStorage + 864) = 0;
      }
    }
  }
  else if (gLogCategory_APAudioEngineBuffered <= 90
         && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
}

uint64_t bufferedAudioEngine_getMaxFirstAvailableTransportTimestampForStartUp(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t i;

  v3 = *MEMORY[0x1E0CF72D8];
  v8 = *(_OWORD *)(MEMORY[0x1E0CF72D8] + 4);
  v9 = v8;
  v4 = *(_QWORD *)(MEMORY[0x1E0CF72D8] + 20);
  v10 = v4;
  if (!bufferedAudioEngine_isSpeakerPlayingBySelf())
  {
    v5 = *(uint64_t **)(CMBaseObjectGetDerivedStorage() + 584);
    v11 = v8;
    for (i = v4; v5; v5 = (uint64_t *)*v5)
    {
      if (APSAudioTransportTimeIsValid())
      {
        if (APSAudioTransportTimeIsValid())
        {
          if (*((_DWORD *)v5 + 44) != v3)
          {
            APSLogErrorAt();
            v6 = 4294960540;
            APSLogErrorAt();
            return v6;
          }
          APSAudioTransportTimeMax();
        }
        else
        {
          v11 = *(_OWORD *)((char *)v5 + 180);
          i = *(uint64_t *)((char *)v5 + 196);
          v3 = *((_DWORD *)v5 + 44);
        }
      }
    }
    v9 = v11;
    v10 = i;
  }
  v6 = 0;
  if (a2)
  {
    *(_DWORD *)a2 = v3;
    *(_OWORD *)(a2 + 4) = v9;
    *(_QWORD *)(a2 + 20) = v10;
  }
  return v6;
}

void bufferedAudioEngine_getStreamInfoForStartup(uint64_t a1, float *a2, float *a3, float *a4, _WORD *a5, char *a6, _WORD *a7, _WORD *a8)
{
  uint64_t DerivedStorage;
  uint64_t *v9;
  float v10;
  __int16 v11;
  __CFDictionary *Mutable;
  char v13;
  int v14;
  CMTime *v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float Seconds;
  unsigned int v21;
  _BOOL4 isHoseInStereoPair;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  unsigned int v25;
  uint64_t v26;
  CMTime time2;
  CMTime time;
  CFTypeRef cf[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = *(uint64_t **)(DerivedStorage + 584);
  cf[0] = 0;
  v10 = 0.0;
  v26 = DerivedStorage;
  if (v9)
  {
    v11 = 0;
    Mutable = 0;
    v13 = 0;
    v14 = 0;
    v15 = (CMTime *)(DerivedStorage + 156);
    v16 = *MEMORY[0x1E0CF7358];
    v17 = 0.0;
    v18 = 99999.0;
    v19 = -99999.0;
    do
    {
      time = *(CMTime *)(v9 + 11);
      Seconds = CMTimeGetSeconds(&time);
      time = *(CMTime *)(v9 + 11);
      time2 = *v15;
      v21 = CMTimeCompare(&time, &time2);
      if (v18 >= Seconds)
        v18 = Seconds;
      if (v19 <= Seconds)
        v19 = Seconds;
      if (*((_BYTE *)v9 + 24))
        v13 = 1;
      isHoseInStereoPair = bufferedAudioEngine_isHoseInStereoPair(v9[2]);
      if (cf[0])
      {
        CFRelease(cf[0]);
        cf[0] = 0;
      }
      v23 = v9[2];
      v24 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v24)
        v24(v23, v16, 0, cf);
      if (isHoseInStereoPair)
      {
        if (!Mutable)
          Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], 0);
        if (CFDictionaryContainsKey(Mutable, cf[0]))
        {
          CFDictionarySetValue(Mutable, cf[0], (const void *)2);
          ++v11;
        }
        else
        {
          CFDictionarySetValue(Mutable, cf[0], (const void *)1);
        }
      }
      v17 = v17 + Seconds;
      v14 += v21 >> 31;
      v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  else
  {
    LOWORD(v14) = 0;
    v13 = 0;
    Mutable = 0;
    v11 = 0;
    v19 = -99999.0;
    v18 = 99999.0;
    v17 = 0.0;
  }
  v25 = *(_DWORD *)(v26 + 592);
  if (v25)
    v10 = v17 / (float)v25;
  *a2 = v10;
  *a3 = v18;
  *a4 = v19;
  *a5 = v14;
  *a6 = v13;
  *a7 = FigCFDictionaryGetCount();
  *a8 = FigCFDictionaryGetCount() - v11;
  if (cf[0])
    CFRelease(cf[0]);
  if (Mutable)
    CFRelease(Mutable);
}

BOOL bufferedAudioEngine_isHoseInStereoPair(uint64_t a1)
{
  unsigned int (*v2)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  unsigned int (*v3)(uint64_t, _QWORD, _QWORD, CFNumberRef *);
  _BOOL8 v4;
  unsigned int (*v6)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  unsigned int (*v7)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  int valuePtr;
  CFTypeRef v9;
  CFTypeRef cf;
  CFNumberRef number;
  CFTypeRef v12;

  v12 = 0;
  cf = 0;
  number = 0;
  v9 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
  valuePtr = 0;
  v2 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (!v2)
    goto LABEL_10;
  if (v2(a1, *MEMORY[0x1E0CF7358], 0, &v12))
    goto LABEL_10;
  v3 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
  if (!v3 || v3(a1, *MEMORY[0x1E0CF7350], 0, &number))
    goto LABEL_10;
  v4 = 0;
  if (v12 && number)
  {
    CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
    if (valuePtr != 2)
    {
      if (valuePtr == 1)
      {
        v4 = 1;
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    v6 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v6 && !v6(a1, *MEMORY[0x1E0CF7348], 0, &cf))
    {
      if (FigCFNumberGetUInt32() != 3)
        goto LABEL_11;
      v7 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
      if (v7 && !v7(a1, *MEMORY[0x1E0CF7368], 0, &v9))
      {
        v4 = CFBooleanGetValue((CFBooleanRef)v9) == 0;
        goto LABEL_12;
      }
    }
LABEL_10:
    APSLogErrorAt();
LABEL_11:
    v4 = 0;
  }
LABEL_12:
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  if (number)
    CFRelease(number);
  if (v9)
    CFRelease(v9);
  return v4;
}

void bufferedAudioEngine_hoseGetAnchorCallbackCompletionHandlerInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  _QWORD *HoseDecriptorFromHose;
  _QWORD *v5;
  int v6;
  const void *v7;
  uint64_t started;
  uint64_t v9;
  const void *v10;
  CMTime v11;
  _OWORD v12[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12[0] = *(_OWORD *)(a1 + 16);
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)(a1 + 28);
  v3 = (const void *)APSAudioTransportTimeCopyDebugDesc();
  if (!*(_BYTE *)DerivedStorage)
  {
    HoseDecriptorFromHose = bufferedAudioEngine_getHoseDecriptorFromHose();
    if (HoseDecriptorFromHose)
    {
      v5 = HoseDecriptorFromHose;
      v6 = *(_DWORD *)(a1 + 72);
      if (v6)
      {
        if (v6 == 200501)
        {
          if (gLogCategory_APAudioEngineBuffered <= 90
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (!*(_QWORD *)a1)
            {
LABEL_23:
              LogPrintF();
              goto LABEL_35;
            }
LABEL_8:
            CMBaseObjectGetDerivedStorage();
            goto LABEL_23;
          }
        }
        else
        {
          if (gLogCategory_APAudioEngineBuffered <= 90
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (*(_QWORD *)a1)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          ++*((_DWORD *)v5 + 41);
          bufferedAudioEngine_handleErrorWithReceiverAnchor(*(const void **)a1, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 72));
        }
      }
      else
      {
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (*(_QWORD *)a1)
            CMBaseObjectGetDerivedStorage();
          LogPrintF();
        }
        v7 = *(const void **)a1;
        v12[0] = *(_OWORD *)(a1 + 16);
        *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)(a1 + 28);
        v11 = *(CMTime *)(a1 + 48);
        started = bufferedAudioEngine_startRemoteMediaTimebaseWithReceiverAnchor(v7, (uint64_t)v12, &v11);
        if ((_DWORD)started)
        {
          v9 = started;
          ++*((_DWORD *)v5 + 41);
          if (gLogCategory_APAudioEngineBuffered <= 90
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (*(_QWORD *)a1)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          bufferedAudioEngine_handleErrorWithReceiverAnchor(*(const void **)a1, *(_QWORD *)(a1 + 8), v9);
          if (v3)
            goto LABEL_36;
          goto LABEL_37;
        }
        v5[8] = *(_QWORD *)(DerivedStorage + 808);
        *((_DWORD *)v5 + 41) = 0;
        v10 = *(const void **)(DerivedStorage + 864);
        if (v10)
        {
          CFRelease(v10);
          LODWORD(v9) = 0;
          *(_QWORD *)(DerivedStorage + 864) = 0;
          if (!v3)
            goto LABEL_37;
          goto LABEL_36;
        }
      }
    }
    else if (gLogCategory_APAudioEngineBuffered <= 90
           && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (!*(_QWORD *)a1)
        goto LABEL_23;
      goto LABEL_8;
    }
  }
LABEL_35:
  LODWORD(v9) = 0;
  if (v3)
LABEL_36:
    CFRelease(v3);
LABEL_37:
  **(_DWORD **)(a1 + 80) = v9;
}

void bufferedAudioEngine_getBufferLevelTimeEstimateForHose(uint64_t a1@<X1>, int a2@<W2>, CMTime *a3@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeFlags v10;
  CMTimeEpoch v11;
  CMTime v12;
  CMTime time1;
  int v14;
  CMTimeValue v15;
  CMTimeScale v16;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)&a3->value = *MEMORY[0x1E0CA2E68];
  a3->epoch = *(_QWORD *)(v7 + 16);
  bufferedAudioEngine_getCurrentRemoteMediaTimeInternal(&v14, &time1);
  value = time1.value;
  timescale = time1.timescale;
  if (v14)
  {
    APSLogErrorAt();
    return;
  }
  flags = time1.flags;
  if ((time1.flags & 1) != 0)
  {
    epoch = time1.epoch;
    if (a2)
    {
      if (!*(_BYTE *)(DerivedStorage + 326))
        goto LABEL_9;
    }
    else if (!*(_BYTE *)(DerivedStorage + 325))
    {
      goto LABEL_9;
    }
    if (*(_BYTE *)(a1 + 25))
    {
      bufferedAudioEngine_getLastDeliveredRemoteMediaTimeForHose(a1, (__n128 *)&time1);
      v15 = time1.value;
      v10 = time1.flags;
      v16 = time1.timescale;
      v11 = time1.epoch;
      goto LABEL_10;
    }
LABEL_9:
    v15 = *(_QWORD *)(a1 + 32);
    v10 = *(_DWORD *)(a1 + 44);
    v16 = *(_DWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 48);
LABEL_10:
    if ((v10 & 1) != 0)
    {
      v12.epoch = v11;
      time1.value = value;
      time1.timescale = timescale;
      time1.flags = flags;
      time1.epoch = epoch;
      v12.value = v15;
      v12.timescale = v16;
      v12.flags = v10;
      if (CMTimeCompare(&time1, &v12) <= 0)
      {
        v12.epoch = epoch;
        time1.value = v15;
        time1.timescale = v16;
        time1.flags = v10;
        time1.epoch = v11;
        v12.value = value;
        v12.timescale = timescale;
        v12.flags = flags;
        CMTimeSubtract(a3, &time1, &v12);
      }
    }
  }
}

void bufferedAudioEngine_suspendInternal(void **a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFAllocator *v4;
  CFDictionaryRef v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  void *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  char *v17;
  uint64_t v18;
  void *v19;
  void (*v20)(uint64_t, void *);
  void (*v21)(void *, _QWORD, void *);
  const void *v22;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  if (!*(_BYTE *)(DerivedStorage + 464))
  {
    v5 = 0;
    goto LABEL_39;
  }
  if (*(_QWORD *)(DerivedStorage + 536))
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    values = *a1;
    keys[0] = CFSTR("HoseRegistrar");
    v5 = CFDictionaryCreate(v4, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v5)
      goto LABEL_49;
    if (APSSettingsIsFeatureEnabled())
    {
      v6 = *(_QWORD *)(v3 + 1680);
      v7 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
      if (v7)
        v7(v6);
    }
    else
    {
      v8 = *a1;
      v9 = CMBaseObjectGetDerivedStorage();
      if (*(_DWORD *)(v9 + 592))
      {
        v10 = v9;
        while (*(_QWORD *)(v10 + 584))
          bufferedAudioEngine_removeHose((uint64_t)v8);
      }
      else
      {
        APSLogErrorAt();
      }
    }
    if (FigEndpointStreamSuspend())
    {
LABEL_49:
      APSLogErrorAt();
      goto LABEL_39;
    }
  }
  else
  {
    v5 = 0;
  }
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  bufferedAudioEngine_tearDownResumedStateAndStructuresInternal(*a1, 1);
  v11 = *(const void **)(v3 + 512);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(v3 + 512) = 0;
  }
  v12 = *(const void **)(v3 + 544);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(v3 + 544) = 0;
  }
  v13 = *(const void **)(v3 + 552);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(v3 + 552) = 0;
  }
  v14 = *(const void **)(v3 + 536);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(v3 + 536) = 0;
  }
  v15 = *(const void **)(v3 + 1152);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(v3 + 1152) = 0;
  }
  v16 = *(const void **)(v3 + 944);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(v3 + 944) = 0;
  }
  APSOasisCPUFloorRaiserReleaseAssertion();
  if (*(_BYTE *)(v3 + 392))
  {
    v17 = strstr((char *)(v3 + 392), "-SP");
    if (v17)
      *(_WORD *)v17 = 32;
  }
  v18 = *(_QWORD *)(v3 + 328);
  v19 = *a1;
  v20 = *(void (**)(uint64_t, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
  if (v20)
    v20(v18, v19);
  *(_BYTE *)(v3 + 464) = 0;
LABEL_39:
  v21 = (void (*)(void *, _QWORD, void *))a1[2];
  if (v21)
    v21(*a1, *((unsigned int *)a1 + 8), a1[3]);
  APSDispatchSectionLeave();
  if (v5)
    CFRelease(v5);
  v22 = a1[1];
  if (v22)
    CFRelease(v22);
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

void bufferedAudioEngine_setEndpointStreamInternalStage1(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  __CFDictionary *Mutable;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, __CFDictionary *, void (*)(uint64_t, int, _DWORD *), uint64_t);
  int v20;
  int v21;
  int v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(_QWORD *)a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  if (!*(_BYTE *)(DerivedStorage + 464))
  {
    APSLogErrorAt();
    v22 = -15485;
LABEL_75:
    *(_DWORD *)(a1 + 32) = v22;
    goto LABEL_76;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(DerivedStorage + 536) == v3)
  {
LABEL_76:
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 344), (void *)a1, (dispatch_function_t)bufferedAudioEngine_setEndpointStreamInternalStageEnd);
    return;
  }
  if (v3)
  {
    v4 = FigEndpointStreamSuspend();
    if (v4)
    {
      v22 = v4;
LABEL_74:
      APSLogErrorAt();
      goto LABEL_75;
    }
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(_QWORD *)a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  if (*(_QWORD *)(DerivedStorage + 536))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    v5 = FigNotificationCenterRemoveWeakListeners();
    if (v5)
    {
      v22 = v5;
    }
    else
    {
      v6 = FigEndpointStreamSuspend();
      if (!v6)
      {
        v7 = *(const void **)(DerivedStorage + 536);
        if (v7)
        {
          CFRelease(v7);
          *(_QWORD *)(DerivedStorage + 536) = 0;
        }
        goto LABEL_24;
      }
      v22 = v6;
    }
    goto LABEL_74;
  }
LABEL_24:
  v8 = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(_QWORD *)a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  if (!*(_QWORD *)(a1 + 8))
  {
    bufferedAudioEngine_setEndpointStreamInternalStage5((_QWORD *)a1);
    return;
  }
  v9 = APSGetFBOPropertyInt64();
  v10 = *(unsigned __int8 *)(v8 + 520);
  if (APSSettingsGetIntWithDefault())
    v11 = v9 == 0;
  else
    v11 = 1;
  v12 = !v11;
  if (v10 != v12)
  {
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(_QWORD *)a1)
        CMBaseObjectGetDerivedStorage();
      APSSettingsGetIntWithDefault();
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    Mutable = 0;
    v21 = -6734;
LABEL_67:
    *(_DWORD *)(a1 + 32) = v21;
    dispatch_async_f(*(dispatch_queue_t *)(v8 + 344), (void *)a1, (dispatch_function_t)bufferedAudioEngine_setEndpointStreamInternalStageEnd);
    if (!Mutable)
      return;
    goto LABEL_68;
  }
  APSAudioFormatDescriptionCopyDebugString();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(_QWORD *)a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v21 = -12786;
    goto LABEL_67;
  }
  APSSettingsIsFeatureEnabled();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  v14 = (const void *)*MEMORY[0x1E0C9AE50];
  v15 = (const void *)*MEMORY[0x1E0C9AE40];
  if (*(_BYTE *)(v8 + 520))
    v16 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v16 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(Mutable, CFSTR("UseAPAP"), v16);
  if (APSSettingsGetIntWithDefault())
    v17 = v14;
  else
    v17 = v15;
  CFDictionarySetValue(Mutable, CFSTR("PrefersAPAP"), v17);
  FigCFDictionarySetValue();
  kdebug_trace();
  v18 = *(_QWORD *)(a1 + 8);
  v19 = *(uint64_t (**)(uint64_t, __CFDictionary *, void (*)(uint64_t, int, _DWORD *), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v19)
  {
    v21 = -12782;
    goto LABEL_64;
  }
  v20 = v19(v18, Mutable, bufferedAudioEngine_setEndpointStreamInternalStage4, a1);
  if (v20)
  {
    v21 = v20;
LABEL_64:
    APSLogErrorAt();
    goto LABEL_67;
  }
LABEL_68:
  CFRelease(Mutable);
}

void bufferedAudioEngine_setEndpointStreamInternalStageEnd(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD, _QWORD);
  const void *v3;

  CMBaseObjectGetDerivedStorage();
  kdebug_trace();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(_QWORD *)a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  v2 = *(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 16);
  if (v2)
    v2(*(_QWORD *)a1, *(unsigned int *)(a1 + 32), *(_QWORD *)(a1 + 24));
  APSDispatchSectionLeave();
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
  free((void *)a1);
}

void bufferedAudioEngine_setEndpointStreamInternalStage4(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  kdebug_trace();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(_QWORD *)a3)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
    if (a2)
      goto LABEL_7;
  }
  else if (a2)
  {
LABEL_7:
    a3[8] = a2;
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 344), a3, (dispatch_function_t)bufferedAudioEngine_setEndpointStreamInternalStageEnd);
    return;
  }
  APSPriorityDispatcherAsyncF();
}

void bufferedAudioEngine_setEndpointStreamInternalStage5(_QWORD *a1)
{
  uint64_t DerivedStorage;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  const void *v8;
  _QWORD *v9;
  const void *v10;
  int v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  if (!a1[1])
  {
    v9 = (_QWORD *)(DerivedStorage + 536);
    v10 = *(const void **)(DerivedStorage + 536);
    *(_QWORD *)(DerivedStorage + 536) = 0;
LABEL_20:
    if (v10)
      CFRelease(v10);
    if (*v9
      && APSGetFBOPropertyInt64()
      && *(_BYTE *)(DerivedStorage + 392)
      && !strstr((char *)(DerivedStorage + 392), "-SP"))
    {
      *(_BYTE *)(strlen((const char *)(DerivedStorage + 392)) + DerivedStorage + 391) = 0;
      __strlcat_chk();
      __strlcat_chk();
    }
    v11 = 0;
    goto LABEL_36;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  v3 = FigNotificationCenterAddWeakListeners();
  if (v3)
  {
    v11 = v3;
    APSLogErrorAt();
    goto LABEL_36;
  }
  v4 = APSGetFBOPropertyInt64();
  v5 = *(unsigned __int8 *)(DerivedStorage + 520);
  if (APSSettingsGetIntWithDefault())
    v6 = v4 == 0;
  else
    v6 = 1;
  v7 = !v6;
  if (v5 == v7)
  {
    v8 = (const void *)a1[1];
    v9 = (_QWORD *)(DerivedStorage + 536);
    v10 = *(const void **)(DerivedStorage + 536);
    *(_QWORD *)(DerivedStorage + 536) = v8;
    if (v8)
      CFRetain(v8);
    goto LABEL_20;
  }
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1)
      CMBaseObjectGetDerivedStorage();
    APSSettingsGetIntWithDefault();
    LogPrintF();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListeners();
  FigEndpointStreamSuspend();
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  v11 = -6734;
LABEL_36:
  *((_DWORD *)a1 + 8) = v11;
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 344), a1, (dispatch_function_t)bufferedAudioEngine_setEndpointStreamInternalStageEnd);
}

uint64_t bufferedAudioEngine_flushInternal(uint64_t *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  opaqueCMBufferQueue *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t *v16;
  const void *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  const void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t SampleRateFromTransportAudioFormat;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  const void *v45;
  uint64_t v46;
  _BOOL4 v47;
  int v48;
  uint64_t v49;
  uint64_t ProtocolVTable;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, _BYTE *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, const void *), const void *);
  int32_t v53;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  unsigned __int16 v65;
  unsigned int v66;
  _BYTE v67[28];
  _OWORD v68[2];
  _BYTE time[28];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v66 = 0;
  v65 = 0;
  if (*(_BYTE *)DerivedStorage)
    return 0;
  v3 = DerivedStorage;
  if (!*(_QWORD *)(DerivedStorage + 472))
    return 0;
  v4 = *(_DWORD *)(DerivedStorage + 804);
  v5 = *a1;
  v6 = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(v6 + 1176))
  {
    for (i = *(_QWORD **)(v6 + 584); i; i = (_QWORD *)*i)
      bufferedAudioEngine_cancelRTCUnderrunForHose(v5, (uint64_t)i);
  }
  *(_QWORD *)(v3 + 808) = 0;
  v8 = *(opaqueCMBufferQueue **)(v3 + 1112);
  if (v8)
  {
    v9 = CMBufferQueueReset(v8);
    if ((_DWORD)v9)
    {
      v41 = v9;
      goto LABEL_95;
    }
    *(_QWORD *)(v3 + 1128) = 0;
  }
  *(_WORD *)(v3 + 800) = 0;
  *(_BYTE *)(v3 + 596) = 0;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v3 + 1024));
  v10 = bufferedAudioEngine_releaseCryptors(*a1, 0);
  if ((_DWORD)v10)
  {
    v41 = v10;
    goto LABEL_95;
  }
  *(_QWORD *)(v3 + 1144) = 0;
  v11 = bufferedAudioEngine_releaseMagicCookies(*a1, 0);
  if ((_DWORD)v11)
  {
    v41 = v11;
    goto LABEL_95;
  }
  v12 = *(const void **)(v3 + 968);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(v3 + 968) = 0;
  }
  *(_BYTE *)(v3 + 760) = 0;
  *(_QWORD *)(v3 + 816) = 0xBFF0000000000000;
  v13 = MEMORY[0x1E0CA2E18];
  v63 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(v3 + 1084) = *MEMORY[0x1E0CA2E18];
  v14 = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(v3 + 1100) = v14;
  bufferedAudioEngine_updatePlaybackState(*a1, 1937010544);
  if (v4 > 1937011304)
  {
    if (v4 != 1937207905)
    {
      v15 = 29289;
LABEL_18:
      if (v4 != (v15 | 0x73740000))
        goto LABEL_27;
    }
  }
  else if (v4 != 1886614642)
  {
    v15 = 28777;
    goto LABEL_18;
  }
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback((const void *)*a1, 4294949716, MEMORY[0x1E0CA2E68], MEMORY[0x1E0CA2E18], 0);
  *(_QWORD *)(v3 + 880) = 0;
  *(_QWORD *)(v3 + 872) = 0;
LABEL_27:
  v16 = (uint64_t *)(v3 + 676);
  *(_QWORD *)(v3 + 904) = 0;
  *(_QWORD *)(v3 + 896) = 0;
  APSTimedInfoManagerFlush();
  APSTimedInfoManagerSuspend();
  v17 = *(const void **)(v3 + 792);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(v3 + 792) = 0;
  }
  v18 = *v16;
  v19 = *(_DWORD *)(v3 + 684);
  v20 = *(_DWORD *)(v3 + 688);
  v59 = *(_QWORD *)(v3 + 692);
  bufferedAudioEngine_generateNewFirstRemoteMediaTime(*a1, (CMTime *)time);
  v21 = *(_QWORD *)time;
  v22 = *(_DWORD *)&time[8];
  v23 = *(_DWORD *)&time[12];
  if ((time[12] & 0x1D) != 1)
  {
    APSLogErrorAt();
    if (gLogCategory_APAudioEngineBuffered > 90
      || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
    {
      return 4294951815;
    }
    if (!*a1)
      goto LABEL_113;
    goto LABEL_102;
  }
  if ((v20 & 0x1D) != 1)
  {
    APSLogErrorAt();
    if (gLogCategory_APAudioEngineBuffered > 90
      || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
    {
      return 4294951815;
    }
    if (!*a1)
    {
LABEL_113:
      LogPrintF();
      return 4294951815;
    }
LABEL_102:
    CMBaseObjectGetDerivedStorage();
    goto LABEL_113;
  }
  v58 = v20;
  v24 = *(_QWORD *)&time[16];
  *(_BYTE *)(v3 + 912) = 1;
  *v16 = v21;
  *(_DWORD *)(v3 + 684) = v22;
  *(_DWORD *)(v3 + 688) = v23;
  *(_QWORD *)(v3 + 692) = v24;
  *(_QWORD *)(v3 + 700) = v21;
  *(_DWORD *)(v3 + 708) = v22;
  *(_DWORD *)(v3 + 712) = v23;
  *(_QWORD *)(v3 + 716) = v24;
  *(_OWORD *)(v3 + 724) = v63;
  *(_QWORD *)(v3 + 740) = v14;
  *(_OWORD *)(v3 + 652) = v63;
  *(_QWORD *)(v3 + 668) = v14;
  v25 = *(const void **)(v3 + 1152);
  if (v25)
  {
    CFRelease(v25);
    *(_QWORD *)(v3 + 1152) = 0;
  }
  v26 = *a1;
  *(_QWORD *)time = v21;
  *(_DWORD *)&time[8] = v22;
  *(_DWORD *)&time[12] = v23;
  *(_QWORD *)&time[16] = v24;
  bufferedAudioEngine_updateNextTranscodeBurstTimeAndUnRest(v26, (CMTime *)time);
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  if (!APSSettingsIsFeatureEnabled())
  {
    v27 = *(_QWORD **)(v3 + 584);
    if (v27)
    {
      v28 = *MEMORY[0x1E0CF7380];
      v29 = *MEMORY[0x1E0C9AE40];
      do
      {
        v30 = v27[2];
        v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v31)
          v31(v30, v28, v29);
        v27 = (_QWORD *)*v27;
      }
      while (v27);
    }
  }
  v32 = APMessageRingBufferedFlush(*(_QWORD *)(v3 + 560), &v65, &v66);
  if ((_DWORD)v32)
  {
    v41 = v32;
    goto LABEL_95;
  }
  v33 = *(const void **)(v3 + 568);
  if (v33)
  {
    CFRelease(v33);
    *(_QWORD *)(v3 + 568) = 0;
  }
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v3 + 1168));
  v34 = 0x1ED52E000uLL;
  if (APSSettingsIsFeatureEnabled())
  {
    v35 = *(_QWORD *)(v3 + 1680);
    v36 = v65;
    v37 = v66;
    SampleRateFromTransportAudioFormat = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
    v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 8);
    if (!v39)
    {
      v41 = 4294954514;
      goto LABEL_95;
    }
    *(_QWORD *)time = v18;
    *(_DWORD *)&time[8] = v19;
    *(_DWORD *)&time[12] = v58;
    *(_QWORD *)&time[16] = v59;
    v40 = v39(v35, v36, v37, time, SampleRateFromTransportAudioFormat);
    if ((_DWORD)v40)
    {
      v41 = v40;
LABEL_95:
      APSLogErrorAt();
      return v41;
    }
    goto LABEL_92;
  }
  v42 = *(uint64_t **)(v3 + 584);
  if (v42)
  {
    v64 = *MEMORY[0x1E0CF72D8];
    v61 = *MEMORY[0x1E0CA2E68];
    v62 = *(_OWORD *)(MEMORY[0x1E0CF72D8] + 12);
    v43 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    v56 = v18;
    v57 = a1;
    v55 = v19;
    while (1)
    {
      v44 = *(_DWORD *)(v34 + 3936);
      if (v44 <= 50 && (v44 != -1 || _LogCategory_Initialize()))
      {
        if (*a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
        v34 = 0x1ED52E000uLL;
      }
      *((_WORD *)v42 + 13) = v65;
      v45 = (const void *)*a1;
      v60 = v66;
      v46 = CMBaseObjectGetDerivedStorage();
      v47 = *((double *)v42 + 8) != 0.0 || v42[18] != 0;
      v68[0] = v64;
      *(_OWORD *)((char *)v68 + 12) = v62;
      v42[8] = 0;
      v42[17] = 0;
      v42[18] = 0;
      *(_OWORD *)(v42 + 11) = v61;
      v42[13] = v43;
      *((_OWORD *)v42 + 2) = v61;
      v42[6] = v43;
      *((_WORD *)v42 + 28) = 256;
      v42[10] = 0;
      v42[9] = mach_absolute_time();
      *((_OWORD *)v42 + 11) = v64;
      *(_OWORD *)((char *)v42 + 188) = v62;
      *((_BYTE *)v42 + 204) = 0;
      *((_BYTE *)v42 + 256) = 0;
      *((_OWORD *)v42 + 7) = v61;
      v42[16] = v43;
      *((_BYTE *)v42 + 168) = 0;
      v48 = *(_DWORD *)(v34 + 3936);
      if (!v47)
      {
        if (v48 <= 50 && (v48 != -1 || _LogCategory_Initialize()))
        {
          if (v45)
            CMBaseObjectGetDerivedStorage();
          LogPrintF();
        }
        goto LABEL_91;
      }
      if (v48 <= 50 && (v48 != -1 || _LogCategory_Initialize()))
      {
        if (v45)
          CMBaseObjectGetDerivedStorage();
        v19 = v55;
        v18 = v56;
        *(_QWORD *)time = v56;
        *(_DWORD *)&time[8] = v55;
        *(_DWORD *)&time[12] = v58;
        *(_QWORD *)&time[16] = v59;
        CMTimeGetSeconds((CMTime *)time);
        LogPrintF();
        a1 = v57;
        v34 = 0x1ED52E000;
      }
      if (*(_BYTE *)(v46 + 520))
        break;
      v53 = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
      *(_QWORD *)v67 = v18;
      *(_DWORD *)&v67[8] = v19;
      *(_DWORD *)&v67[12] = v58;
      *(_QWORD *)&v67[16] = v59;
      CMTimeConvertScale((CMTime *)time, (CMTime *)v67, v53, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      APSAudioTransportTimeMakeWithRTPTime();
      if (v45)
        goto LABEL_81;
LABEL_82:
      v49 = v42[2];
      *(_OWORD *)v67 = v68[0];
      *(_OWORD *)&v67[12] = *(_OWORD *)((char *)v68 + 12);
      APSEndpointStreamAudioHoseProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        v51 = *(_QWORD *)(ProtocolVTable + 16);
        if (v51)
        {
          v52 = *(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, const void *), const void *))(v51 + 24);
          if (v52)
          {
            *(_OWORD *)time = *(_OWORD *)v67;
            *(_OWORD *)&time[12] = *(_OWORD *)&v67[12];
            v52(v49, v60, time, bufferedAudioEngine_hoseFlushCallbackCompletionHandler, v45);
          }
          else
          {
            bufferedAudioEngine_hoseFlushCallbackCompletionHandler(v49, 0, MEMORY[0x1E0CF72D8], 4294954514, v45);
          }
        }
      }
      ++*((_DWORD *)v42 + 43);
LABEL_91:
      v42 = (uint64_t *)*v42;
      if (!v42)
        goto LABEL_92;
    }
    *(_QWORD *)time = v18;
    *(_DWORD *)&time[8] = v19;
    *(_DWORD *)&time[12] = v58;
    *(_QWORD *)&time[16] = v59;
    APSAudioTransportTimeMakeWithMediaTime();
    if (!v45)
      goto LABEL_82;
LABEL_81:
    CFRetain(v45);
    goto LABEL_82;
  }
LABEL_92:
  bufferedAudioEngine_wakeUpHosesAndAudioTimer(*a1);
  return 0;
}

uint64_t bufferedAudioEngine_hoseFlushCallbackCompletionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  CMBaseObjectGetDerivedStorage();
  APSPriorityDispatcherSyncF();
  if (a5)
    CFRelease(a5);
  return 0;
}

uint64_t bufferedAudioEngine_hoseFlushCallbackCompletionHandlerInternal(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)result)
  {
    v3 = result;
    result = (uint64_t)bufferedAudioEngine_getHoseDecriptorFromHose();
    if (result)
    {
      v4 = result;
      --*(_DWORD *)(result + 172);
      if (*(_DWORD *)(a1 + 48))
      {
        if (gLogCategory_APAudioEngineBuffered <= 90)
        {
          if (gLogCategory_APAudioEngineBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
          {
            if (!*(_QWORD *)a1)
            {
LABEL_14:
              result = LogPrintF();
              goto LABEL_19;
            }
LABEL_7:
            CMBaseObjectGetDerivedStorage();
            goto LABEL_14;
          }
        }
      }
      else
      {
        if (gLogCategory_APAudioEngineBuffered <= 50)
        {
          if (gLogCategory_APAudioEngineBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
          {
            if (*(_QWORD *)a1)
              CMBaseObjectGetDerivedStorage();
            result = LogPrintF();
          }
        }
        v5 = MEMORY[0x1E0CA2E18];
        *(_OWORD *)(v3 + 724) = *MEMORY[0x1E0CA2E18];
        *(_QWORD *)(v3 + 740) = *(_QWORD *)(v5 + 16);
        v6 = MEMORY[0x1E0CF72D8];
        *(_OWORD *)(v4 + 176) = *MEMORY[0x1E0CF72D8];
        *(_OWORD *)(v4 + 188) = *(_OWORD *)(v6 + 12);
      }
    }
    else if (gLogCategory_APAudioEngineBuffered <= 90)
    {
      if (gLogCategory_APAudioEngineBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      {
        if (!*(_QWORD *)a1)
          goto LABEL_14;
        goto LABEL_7;
      }
    }
  }
LABEL_19:
  **(_DWORD **)(a1 + 56) = 0;
  return result;
}

void bufferedAudioEngine_flushWithinSampleRangeInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  CMTimeValue v6;
  CMTimeEpoch epoch;
  CMTimeValue v8;
  __int128 v9;
  int32_t v10;
  uint64_t v11;
  const __CFAllocator *v12;
  CFDictionaryRef v13;
  CFDictionaryRef v14;
  __int128 v15;
  CMTimeFlags v16;
  int v17;
  CMTimeValue v18;
  CMTimeScale v19;
  int v20;
  __int128 v21;
  CFDictionaryRef v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  opaqueCMSampleBuffer *v29;
  opaqueCMSampleBuffer *v30;
  const opaqueCMFormatDescription *FormatDescription;
  const AudioStreamBasicDescription *StreamBasicDescription;
  double *p_mSampleRate;
  int64_t v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  const void *v39;
  CMTimeFlags v40;
  uint64_t v41;
  uint64_t SampleRateFromTransportAudioFormat;
  void (*v43)(uint64_t, _QWORD, uint64_t, CMTimeRange *, uint64_t, _BYTE *, uint64_t);
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t ProtocolVTable;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, CMTimeRange *, uint64_t, _BYTE *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *), const void *);
  int32_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  CFDictionaryRef v58;
  uint64_t v59;
  uint64_t v60;
  CMTimeValue v61;
  __int128 v62;
  CMTimeEpoch v63;
  __int128 v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  CMTimeScale v68;
  CMTimeEpoch v69;
  int v70;
  CMTimeScale v71;
  CMTimeFlags v72;
  CMTimeValue v73;
  CMTimeFlags v74;
  uint64_t v75;
  CMTimeEpoch v76;
  CMTimeScale v77;
  __int128 v78;
  CMTimeValue v79;
  uint64_t v80;
  CMTimeEpoch v81;
  CMTimeFlags flags;
  CMTimeScale v83;
  CMTime v84;
  CMTime v85;
  CMTime v86;
  CMTime v87;
  CMTimeRange time1;
  BOOL v89;
  unsigned __int16 v90;
  unsigned int v91;
  uint64_t v92;
  _OWORD v93[2];
  _BYTE time2[28];
  _BYTE rhs[28];
  CMTime v96;
  _BYTE lhs[28];
  void *values;
  void *keys;
  uint64_t v100;
  int v101;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v104;
  int epoch_high;
  _BYTE v106[28];
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  v92 = 0;
  v104 = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 36);
  epoch_high = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 44);
  v4 = MEMORY[0x1E0CA2E18];
  value = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v91 = 0;
  v90 = 0;
  v89 = 0;
  v100 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 12);
  v101 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 20);
  v5 = 0x1ED52E000uLL;
  if (*(_BYTE *)DerivedStorage || !*(_QWORD *)(DerivedStorage + 472))
    goto LABEL_213;
  v75 = DerivedStorage + 676;
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(_QWORD *)a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  *(_OWORD *)lhs = *(_OWORD *)(v3 + 700);
  *(_QWORD *)&lhs[16] = *(_QWORD *)(v3 + 716);
  *(_OWORD *)rhs = *(_OWORD *)(a1 + 8);
  *(_QWORD *)&rhs[16] = *(_QWORD *)(a1 + 24);
  CMTimeAdd(&time1.start, (CMTime *)lhs, (CMTime *)rhs);
  value = time1.start.value;
  timescale = time1.start.timescale;
  if ((time1.start.flags & 0x1D) != 1)
  {
    APSLogErrorAt();
    v54 = APSSignalErrorAt();
    v22 = 0;
    goto LABEL_211;
  }
  *(_QWORD *)lhs = value;
  *(_DWORD *)&lhs[8] = timescale;
  *(_DWORD *)&lhs[12] = time1.start.flags;
  *(_QWORD *)&lhs[16] = time1.start.epoch;
  *(_OWORD *)rhs = *(_OWORD *)(a1 + 32);
  *(_QWORD *)&rhs[16] = *(_QWORD *)(a1 + 48);
  CMTimeRangeMake(&time1, (CMTime *)lhs, (CMTime *)rhs);
  v6 = time1.start.value;
  epoch = time1.start.epoch;
  v104 = *(_QWORD *)&time1.duration.flags;
  epoch_high = HIDWORD(time1.duration.epoch);
  v83 = time1.start.timescale;
  flags = time1.start.flags;
  v79 = time1.duration.value;
  v77 = time1.duration.timescale;
  APSTimedInfoManagerFlushWithinTimeRange();
  HIDWORD(v92) = 0;
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(_QWORD *)a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  bufferedAudioEngine_getCurrentRemoteMediaTimeInternal((int *)&v92 + 1, &time1.start);
  if (HIDWORD(v92))
  {
LABEL_212:
    APSLogErrorAt();
LABEL_213:
    v22 = 0;
    goto LABEL_186;
  }
  v8 = time1.start.value;
  v68 = time1.start.timescale;
  v72 = time1.start.flags;
  v63 = time1.start.epoch;
  v9 = *(_OWORD *)v75;
  time1.start.epoch = *(_QWORD *)(v75 + 16);
  *(_OWORD *)&time1.start.value = v9;
  *(_QWORD *)lhs = v6;
  *(_DWORD *)&lhs[8] = v83;
  *(_DWORD *)&lhs[12] = flags;
  *(_QWORD *)&lhs[16] = epoch;
  v10 = CMTimeCompare(&time1.start, (CMTime *)lhs);
  if (v10 >= 1)
  {
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(_QWORD *)a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    v11 = *(_QWORD *)(v3 + 560);
    time1.start.value = v6;
    time1.start.timescale = v83;
    time1.start.flags = flags;
    time1.start.epoch = epoch;
    HIDWORD(v92) = APMessageRingBufferedPruneMessagesFromTimestamp(v11, (uint64_t)&time1, &v90, &v91, &v92);
    if (!HIDWORD(v92))
    {
      *(_DWORD *)(v3 + 896) = 0;
      goto LABEL_29;
    }
    goto LABEL_212;
  }
LABEL_29:
  v61 = v8;
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  keys = (void *)*MEMORY[0x1E0CC4070];
  values = (void *)*MEMORY[0x1E0CC4058];
  v13 = CFDictionaryCreate(v12, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v13)
  {
    APSLogErrorAt();
    v22 = 0;
    HIDWORD(v92) = -15480;
    goto LABEL_188;
  }
  v14 = v13;
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  if (*(_BYTE *)(v3 + 1032))
    bufferedAudioEngine_setTranscodeIsRestingAndUpdateConsumer(*(_QWORD *)a1, 0);
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(_QWORD *)a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  v66 = v10;
  v58 = v14;
  v65 = v3;
  v15 = *(_OWORD *)v75;
  time1.start.epoch = *(_QWORD *)(v75 + 16);
  *(_OWORD *)&time1.start.value = v15;
  *(_QWORD *)lhs = v6;
  v16 = flags;
  *(_DWORD *)&lhs[8] = v83;
  *(_DWORD *)&lhs[12] = flags;
  *(_QWORD *)&lhs[16] = epoch;
  v17 = 0;
  if ((CMTimeCompare(&time1.start, (CMTime *)lhs) & 0x80000000) == 0)
    goto LABEL_40;
  v20 = 0;
  while (1)
  {
    HIDWORD(v92) = bufferedAudioEngine_prepareOneMessageForSending(*(const void **)a1, 1, &v89);
    if (HIDWORD(v92) == -72095)
    {
      v22 = v58;
      goto LABEL_188;
    }
    if (!v89)
      break;
    v20 = 0;
    ++v17;
LABEL_52:
    v21 = *(_OWORD *)v75;
    time1.start.epoch = *(_QWORD *)(v75 + 16);
    *(_OWORD *)&time1.start.value = v21;
    *(_QWORD *)lhs = v6;
    *(_DWORD *)&lhs[8] = v83;
    *(_DWORD *)&lhs[12] = flags;
    *(_QWORD *)&lhs[16] = epoch;
    if ((CMTimeCompare(&time1.start, (CMTime *)lhs) & 0x80000000) == 0)
      goto LABEL_40;
  }
  if ((unsigned __int16)++v20 < 0xAu)
  {
    usleep(0x186A0u);
    goto LABEL_52;
  }
  CMTimeMake(&v87, 10, 1000);
  *(_QWORD *)v106 = *(_QWORD *)v75;
  *(_DWORD *)&v106[8] = *(_DWORD *)(v75 + 8);
  v23 = *(_DWORD *)(v65 + 688);
  v24 = *(_QWORD *)(v75 + 16);
  *(_OWORD *)&time1.start.value = *(_OWORD *)v4;
  time1.start.epoch = *(_QWORD *)(v4 + 16);
  *(_OWORD *)lhs = *(_OWORD *)&time1.start.value;
  *(_QWORD *)&lhs[16] = time1.start.epoch;
  if ((v23 & 1) == 0 || (flags & 1) == 0 || (v87.flags & 1) == 0)
  {
    APSLogErrorAt();
    goto LABEL_69;
  }
  *(_QWORD *)rhs = v6;
  *(_DWORD *)&rhs[8] = v83;
  *(_DWORD *)&rhs[12] = flags;
  *(_QWORD *)&rhs[16] = epoch;
  *(CMTime *)time2 = v87;
  CMTimeSubtract(&time1.start, (CMTime *)rhs, (CMTime *)time2);
  *(_QWORD *)rhs = v6;
  *(_DWORD *)&rhs[8] = v83;
  *(_DWORD *)&rhs[12] = flags;
  *(_QWORD *)&rhs[16] = epoch;
  *(CMTime *)time2 = v87;
  CMTimeAdd((CMTime *)lhs, (CMTime *)rhs, (CMTime *)time2);
  *(_QWORD *)rhs = *(_QWORD *)v106;
  *(_DWORD *)&rhs[8] = *(_DWORD *)&v106[8];
  *(_DWORD *)&rhs[12] = v23;
  *(_QWORD *)&rhs[16] = v24;
  *(_OWORD *)time2 = *(_OWORD *)&time1.start.value;
  *(_QWORD *)&time2[16] = time1.start.epoch;
  if ((CMTimeCompare((CMTime *)rhs, (CMTime *)time2) & 0x80000000) == 0)
  {
    *(_QWORD *)rhs = *(_QWORD *)v106;
    *(_DWORD *)&rhs[8] = *(_DWORD *)&v106[8];
    *(_DWORD *)&rhs[12] = v23;
    *(_QWORD *)&rhs[16] = v24;
    *(_OWORD *)time2 = *(_OWORD *)lhs;
    *(_QWORD *)&time2[16] = *(_QWORD *)&lhs[16];
    if (CMTimeCompare((CMTime *)rhs, (CMTime *)time2) < 1)
    {
LABEL_40:
      if (HIDWORD(v92))
        goto LABEL_205;
      if (gLogCategory_APAudioEngineBuffered >= 51)
      {
        v18 = *(_QWORD *)v75;
        v19 = *(_DWORD *)(v65 + 684);
        v100 = *(_QWORD *)(v65 + 688);
        v101 = *(_DWORD *)(v65 + 696);
      }
      else
      {
        if (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize())
        {
          if (*(_QWORD *)a1)
            CMBaseObjectGetDerivedStorage();
          LogPrintF();
        }
        v18 = *(_QWORD *)v75;
        v19 = *(_DWORD *)(v65 + 684);
        v100 = *(_QWORD *)(v65 + 688);
        v101 = *(_DWORD *)(v65 + 696);
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (*(_QWORD *)a1)
            CMBaseObjectGetDerivedStorage();
          time1.start.value = v6;
          time1.start.timescale = v83;
          time1.start.flags = flags;
          time1.start.epoch = epoch;
          time1.duration.value = v79;
          *(_QWORD *)&time1.duration.flags = v104;
          time1.duration.timescale = v77;
          HIDWORD(time1.duration.epoch) = epoch_high;
          CMTimeRangeGetEnd(&v86, &time1);
          time1.start.value = v6;
          time1.start.timescale = v83;
          time1.start.flags = flags;
          time1.start.epoch = epoch;
          time1.duration.value = v79;
          *(_QWORD *)&time1.duration.flags = v104;
          v16 = flags;
          time1.duration.timescale = v77;
          HIDWORD(time1.duration.epoch) = epoch_high;
          CMTimeRangeGetEnd(&v85, &time1);
          LogPrintF();
        }
      }
      v70 = 0;
      v81 = epoch;
LABEL_75:
      v25 = 0;
      while (1)
      {
        time1.start.value = v6;
        time1.start.timescale = v83;
        time1.start.flags = v16;
        time1.start.epoch = epoch;
        time1.duration.value = v79;
        time1.duration.timescale = v77;
        *(_QWORD *)&time1.duration.flags = v104;
        HIDWORD(time1.duration.epoch) = epoch_high;
        CMTimeRangeGetEnd(&v84, &time1);
        time1.start.value = v18;
        time1.start.timescale = v19;
        *(_QWORD *)&time1.start.flags = v100;
        HIDWORD(time1.start.epoch) = v101;
        if ((CMTimeCompare(&time1.start, &v84) & 0x80000000) == 0)
          break;
        v26 = *(_QWORD *)a1;
        v27 = CMBaseObjectGetDerivedStorage();
        if (!*(_BYTE *)v27 && CMBufferQueueGetBufferCount(*(CMBufferQueueRef *)(v27 + 1112)))
        {
          v28 = a1;
          v29 = bufferedAudioEngine_processAndRetainSBufFromBufferQueue(v26);
          if (v29)
          {
            v30 = v29;
            FormatDescription = CMSampleBufferGetFormatDescription(v29);
            StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(FormatDescription);
            if (StreamBasicDescription)
            {
              p_mSampleRate = &StreamBasicDescription->mSampleRate;
              v34 = CMSampleBufferGetNumSamples(v30) * StreamBasicDescription->mFramesPerPacket;
              epoch = v81;
              if (v34)
              {
                CMTimeMake((CMTime *)lhs, v34, (int)*p_mSampleRate);
                *(_QWORD *)rhs = v18;
                *(_DWORD *)&rhs[8] = v19;
                *(_QWORD *)&rhs[12] = v100;
                *(_DWORD *)&rhs[20] = v101;
                CMTimeAdd(&time1.start, (CMTime *)rhs, (CMTime *)lhs);
                v35 = 0;
                v18 = time1.start.value;
                v19 = time1.start.timescale;
                v100 = *(_QWORD *)&time1.start.flags;
                v101 = HIDWORD(time1.start.epoch);
              }
              else
              {
                v35 = 0;
              }
            }
            else
            {
              APSLogErrorAt();
              v35 = -72091;
              epoch = v81;
            }
            CFRelease(v30);
            HIDWORD(v92) = v35;
            ++v70;
            a1 = v28;
            v16 = flags;
            goto LABEL_75;
          }
          v16 = flags;
          if (gLogCategory_APAudioEngineBuffered <= 30
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (v26)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
        }
        HIDWORD(v92) = 0;
        if ((unsigned __int16)++v25 >= 0xAu)
        {
          v5 = 0x1ED52E000uLL;
          epoch = v81;
          if (gLogCategory_APAudioEngineBuffered > 90)
            goto LABEL_109;
          if (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize())
          {
            if (*(_QWORD *)a1)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          break;
        }
        usleep(0x186A0u);
        epoch = v81;
      }
      v5 = 0x1ED52E000uLL;
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*(_QWORD *)a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
LABEL_109:
      if ((v72 & 0x1D) != 1)
      {
        APSLogErrorAt();
        v54 = APSSignalErrorAt();
        HIDWORD(v92) = v54;
        v22 = v58;
        goto LABEL_187;
      }
      v22 = v58;
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*(_QWORD *)a1)
          CMBaseObjectGetDerivedStorage();
        time1.start.value = v61;
        time1.start.timescale = v68;
        time1.start.flags = v72;
        time1.start.epoch = v63;
        CMTimeGetSeconds(&time1.start);
        v36 = *(_OWORD *)v75;
        time1.start.epoch = *(_QWORD *)(v75 + 16);
        *(_OWORD *)&time1.start.value = v36;
        CMTimeGetSeconds(&time1.start);
        time1.start.value = v6;
        time1.start.timescale = v83;
        time1.start.flags = flags;
        time1.start.epoch = epoch;
        CMTimeGetSeconds(&time1.start);
        LogPrintF();
        v5 = 0x1ED52E000uLL;
      }
      if ((flags & 0x1D) == 1)
      {
        v74 = *(_DWORD *)(v65 + 688);
        if ((v74 & 0x1D) == 1)
        {
          v71 = *(_DWORD *)(v65 + 684);
          v73 = *(_QWORD *)v75;
          v69 = *(_QWORD *)(v75 + 16);
          *(_BYTE *)(v65 + 912) = 1;
          *(_QWORD *)v75 = v6;
          *(_DWORD *)(v65 + 684) = v83;
          *(_DWORD *)(v65 + 688) = flags;
          *(_QWORD *)(v75 + 16) = epoch;
          v37 = *(_QWORD *)a1;
          time1.start.value = v6;
          time1.start.timescale = v83;
          time1.start.flags = flags;
          time1.start.epoch = epoch;
          bufferedAudioEngine_updateNextTranscodeBurstTimeAndUnRest(v37, &time1.start);
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (*(_QWORD *)a1)
              CMBaseObjectGetDerivedStorage();
            time1.start.value = v73;
            time1.start.timescale = v71;
            time1.start.flags = v74;
            time1.start.epoch = v69;
            CMTimeGetSeconds(&time1.start);
            v38 = *(_OWORD *)v75;
            time1.start.epoch = *(_QWORD *)(v75 + 16);
            *(_OWORD *)&time1.start.value = v38;
            CMTimeGetSeconds(&time1.start);
            LogPrintF();
            v5 = 0x1ED52E000uLL;
          }
          if (v66 < 1)
            goto LABEL_185;
          v39 = *(const void **)a1;
          v67 = v90;
          v60 = v91;
          v59 = v92;
          v57 = CMBaseObjectGetDerivedStorage();
          v40 = flags;
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (v39)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          v56 = a1;
          if (APSSettingsIsFeatureEnabled())
          {
            v41 = *(_QWORD *)(v57 + 1680);
            SampleRateFromTransportAudioFormat = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
            v43 = *(void (**)(uint64_t, _QWORD, uint64_t, CMTimeRange *, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
            if (v43)
            {
              time1.start.value = v6;
              time1.start.timescale = v83;
              time1.start.flags = flags;
              time1.start.epoch = epoch;
              *(_QWORD *)lhs = v73;
              *(_DWORD *)&lhs[8] = v71;
              *(_DWORD *)&lhs[12] = v74;
              *(_QWORD *)&lhs[16] = v69;
              v43(v41, v67, v60, &time1, v59, lhs, SampleRateFromTransportAudioFormat);
            }
            goto LABEL_184;
          }
          v44 = *(_QWORD *)(v57 + 584);
          if (!v44)
          {
LABEL_184:
            HIDWORD(v92) = 0;
            a1 = v56;
            v22 = v58;
LABEL_185:
            bufferedAudioEngine_wakeUpHosesAndAudioTimer(*(_QWORD *)a1);
            goto LABEL_186;
          }
          v78 = *MEMORY[0x1E0CA2E68];
          v76 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
          v62 = *(_OWORD *)(MEMORY[0x1E0CF72D8] + 12);
          v64 = *MEMORY[0x1E0CF72D8];
          while (1)
          {
            if ((__int16)(*(_WORD *)(v44 + 26) - v67) >= 1)
              *(_WORD *)(v44 + 26) = v67;
            v45 = *(_DWORD *)(v5 + 3936);
            if (v45 <= 50 && (v45 != -1 || _LogCategory_Initialize()))
            {
              if (v39)
                CMBaseObjectGetDerivedStorage();
              *(_OWORD *)&time1.start.value = *(_OWORD *)(v44 + 88);
              time1.start.epoch = *(_QWORD *)(v44 + 104);
              CMTimeGetSeconds(&time1.start);
              LogPrintF();
              v5 = 0x1ED52E000uLL;
              epoch = v81;
              v40 = flags;
            }
            v80 = CMBaseObjectGetDerivedStorage();
            *(_OWORD *)&v96.value = v78;
            v96.epoch = v76;
            *(_OWORD *)rhs = v64;
            *(_OWORD *)&rhs[12] = v62;
            *(_OWORD *)time2 = v64;
            *(_OWORD *)&time2[12] = v62;
            *(_OWORD *)&time1.start.value = *(_OWORD *)(v44 + 32);
            time1.start.epoch = *(_QWORD *)(v44 + 48);
            *(_QWORD *)lhs = v6;
            *(_DWORD *)&lhs[8] = v83;
            *(_DWORD *)&lhs[12] = v40;
            *(_QWORD *)&lhs[16] = epoch;
            CMTimeSubtract(&v96, &time1.start, (CMTime *)lhs);
            v46 = *(_DWORD *)(v5 + 3936);
            if (v46 <= 50 && (v46 != -1 || _LogCategory_Initialize()))
            {
              if (v39)
                CMBaseObjectGetDerivedStorage();
              *(_OWORD *)&time1.start.value = *(_OWORD *)(v44 + 88);
              time1.start.epoch = *(_QWORD *)(v44 + 104);
              CMTimeGetSeconds(&time1.start);
              LogPrintF();
              v5 = 0x1ED52E000uLL;
              epoch = v81;
              v40 = flags;
            }
            *(_OWORD *)lhs = *(_OWORD *)(v44 + 88);
            *(_QWORD *)&lhs[16] = *(_QWORD *)(v44 + 104);
            *(CMTime *)v106 = v96;
            CMTimeSubtract(&time1.start, (CMTime *)lhs, (CMTime *)v106);
            *(_OWORD *)(v44 + 88) = *(_OWORD *)&time1.start.value;
            *(_QWORD *)(v44 + 104) = time1.start.epoch;
            v47 = *(_DWORD *)(v5 + 3936);
            if (v47 <= 50 && (v47 != -1 || _LogCategory_Initialize()))
            {
              if (v39)
                CMBaseObjectGetDerivedStorage();
              time1.start = v96;
              CMTimeGetSeconds(&time1.start);
              *(_OWORD *)&time1.start.value = *(_OWORD *)(v44 + 88);
              time1.start.epoch = *(_QWORD *)(v44 + 104);
              CMTimeGetSeconds(&time1.start);
              LogPrintF();
              v5 = 0x1ED52E000uLL;
              epoch = v81;
              v40 = flags;
            }
            *(_WORD *)(v44 + 56) = 256;
            *(_QWORD *)(v44 + 80) = 0;
            *(_QWORD *)(v44 + 72) = mach_absolute_time();
            *(_BYTE *)(v44 + 256) = 0;
            *(_OWORD *)(v44 + 112) = v78;
            *(_QWORD *)(v44 + 128) = v76;
            bufferedAudioEngine_cancelRTCUnderrunForHose((uint64_t)v39, v44);
            time1.start.value = v6;
            time1.start.timescale = v83;
            time1.start.flags = v40;
            time1.start.epoch = epoch;
            *(_OWORD *)lhs = *(_OWORD *)(v44 + 32);
            *(_QWORD *)&lhs[16] = *(_QWORD *)(v44 + 48);
            if (CMTimeCompare(&time1.start, (CMTime *)lhs) < 0)
            {
              *(_QWORD *)(v44 + 32) = v6;
              *(_DWORD *)(v44 + 40) = v83;
              *(_DWORD *)(v44 + 44) = v40;
              *(_QWORD *)(v44 + 48) = epoch;
            }
            v48 = *(_DWORD *)(v5 + 3936);
            if (v48 <= 50 && (v48 != -1 || _LogCategory_Initialize()))
            {
              if (v39)
                CMBaseObjectGetDerivedStorage();
              time1.start.value = v6;
              time1.start.timescale = v83;
              v40 = flags;
              time1.start.flags = flags;
              time1.start.epoch = epoch;
              CMTimeGetSeconds(&time1.start);
              time1.start.value = v73;
              time1.start.timescale = v71;
              time1.start.flags = v74;
              time1.start.epoch = v69;
              CMTimeGetSeconds(&time1.start);
              LogPrintF();
              v5 = 0x1ED52E000;
            }
            if (*(_BYTE *)(v80 + 520))
              break;
            v53 = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
            *(_QWORD *)lhs = v6;
            *(_DWORD *)&lhs[8] = v83;
            *(_DWORD *)&lhs[12] = v40;
            *(_QWORD *)&lhs[16] = epoch;
            CMTimeConvertScale(&time1.start, (CMTime *)lhs, v53, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
            APSAudioTransportTimeMakeWithRTPTime();
            *(_QWORD *)lhs = v73;
            *(_DWORD *)&lhs[8] = v71;
            *(_DWORD *)&lhs[12] = v74;
            *(_QWORD *)&lhs[16] = v69;
            CMTimeConvertScale(&time1.start, (CMTime *)lhs, v53, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
            APSAudioTransportTimeMakeWithRTPTime();
            if (v39)
              goto LABEL_173;
LABEL_174:
            v49 = *(_QWORD *)(v44 + 16);
            *(_OWORD *)v106 = *(_OWORD *)rhs;
            *(_OWORD *)&v106[12] = *(_OWORD *)&rhs[12];
            v93[0] = *(_OWORD *)time2;
            *(_OWORD *)((char *)v93 + 12) = *(_OWORD *)&time2[12];
            APSEndpointStreamAudioHoseProtocolGetProtocolID();
            ProtocolVTable = CMBaseObjectGetProtocolVTable();
            if (ProtocolVTable)
            {
              v51 = *(_QWORD *)(ProtocolVTable + 16);
              if (v51)
              {
                v52 = *(void (**)(uint64_t, uint64_t, CMTimeRange *, uint64_t, _BYTE *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *), const void *))(v51 + 32);
                if (v52)
                {
                  *(_OWORD *)&time1.start.value = *(_OWORD *)v106;
                  *(_OWORD *)&time1.start.flags = *(_OWORD *)&v106[12];
                  *(_OWORD *)lhs = v93[0];
                  *(_OWORD *)&lhs[12] = *(_OWORD *)((char *)v93 + 12);
                  v52(v49, v60, &time1, v59, lhs, bufferedAudioEngine_hoseFlushWithinSampleRangeCallbackCompletionHandler, v39);
                }
                else
                {
                  bufferedAudioEngine_hoseFlushWithinSampleRangeCallbackCompletionHandler(v49, 0, MEMORY[0x1E0CF72D8], 0, MEMORY[0x1E0CF72D8], 4294954514, v39);
                }
              }
            }
            ++*(_DWORD *)(v44 + 172);
            if (APMessageRingBufferedGetByteCountAtIndex(*(_QWORD *)(v80 + 560), (unsigned __int16)(*(_WORD *)(v44 + 26) + 1), (int *)(v44 + 136)))APSLogErrorAt();
            v44 = *(_QWORD *)v44;
            if (!v44)
              goto LABEL_184;
          }
          time1.start.value = v6;
          time1.start.timescale = v83;
          time1.start.flags = v40;
          time1.start.epoch = epoch;
          APSAudioTransportTimeMakeWithMediaTime();
          time1.start.value = v73;
          time1.start.timescale = v71;
          time1.start.flags = v74;
          time1.start.epoch = v69;
          APSAudioTransportTimeMakeWithMediaTime();
          if (!v39)
            goto LABEL_174;
LABEL_173:
          CFRetain(v39);
          goto LABEL_174;
        }
      }
      APSLogErrorAt();
      v54 = APSSignalErrorAt();
LABEL_211:
      HIDWORD(v92) = v54;
      goto LABEL_187;
    }
  }
LABEL_69:
  if (gLogCategory_APAudioEngineBuffered <= 90
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(_QWORD *)a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  HIDWORD(v92) = -17583;
LABEL_205:
  APSLogErrorAt();
  v22 = v58;
LABEL_186:
  v54 = HIDWORD(v92);
LABEL_187:
  if (v54)
  {
LABEL_188:
    v55 = *(_DWORD *)(v5 + 3936);
    if (v55 <= 90 && (v55 != -1 || _LogCategory_Initialize()))
    {
      if (*(_QWORD *)a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  if (v22)
    CFRelease(v22);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  free((void *)a1);
}

uint64_t bufferedAudioEngine_hoseFlushWithinSampleRangeCallbackCompletionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7)
{
  CMBaseObjectGetDerivedStorage();
  APSPriorityDispatcherSyncF();
  if (a7)
    CFRelease(a7);
  return 0;
}

uint64_t bufferedAudioEngine_hoseFlushWithinSampleRangeCallbackCompletionHandlerInternal(uint64_t a1)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)result)
    goto LABEL_18;
  result = (uint64_t)bufferedAudioEngine_getHoseDecriptorFromHose();
  if (!result)
  {
    if (gLogCategory_APAudioEngineBuffered > 90)
      goto LABEL_18;
    if (gLogCategory_APAudioEngineBuffered == -1)
    {
      result = _LogCategory_Initialize();
      if (!(_DWORD)result)
        goto LABEL_18;
    }
    if (!*(_QWORD *)a1)
      goto LABEL_17;
LABEL_22:
    CMBaseObjectGetDerivedStorage();
    goto LABEL_17;
  }
  --*(_DWORD *)(result + 172);
  if (!*(_DWORD *)(a1 + 80))
  {
    if (gLogCategory_APAudioEngineBuffered > 50)
      goto LABEL_18;
    if (gLogCategory_APAudioEngineBuffered == -1)
    {
      result = _LogCategory_Initialize();
      if (!(_DWORD)result)
        goto LABEL_18;
    }
    if (!*(_QWORD *)a1)
    {
LABEL_17:
      result = LogPrintF();
      goto LABEL_18;
    }
    goto LABEL_22;
  }
  if (gLogCategory_APAudioEngineBuffered <= 90)
  {
    if (gLogCategory_APAudioEngineBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
    {
      if (!*(_QWORD *)a1)
        goto LABEL_17;
      goto LABEL_22;
    }
  }
LABEL_18:
  **(_DWORD **)(a1 + 88) = 0;
  return result;
}

void bufferedAudioEngine_setRateAndAnchorTimeInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  int v3;
  int v4;
  const void *v5;
  double v6;
  int v7;
  const void *v8;
  uint64_t v9;
  OpaqueCMClock *HostTimeClock;
  uint64_t v11;
  float Seconds;
  __int128 v13;
  const void *Value;
  const void *v15;
  const void *v16;
  const void *v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  const void *v21;
  CMTime *p_lhs;
  uint64_t v23;
  uint64_t v24;
  CMTime v25;
  CMTime time;
  CMTime rhs;
  CMTime lhs;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v25 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(_QWORD *)a1)
      CMBaseObjectGetDerivedStorage();
    bufferedAudioEngine_playbackStateGetCString(*(_DWORD *)(DerivedStorage + 804));
    LogPrintF();
  }
  if (*(_QWORD *)(DerivedStorage + 472))
    v3 = 0;
  else
    v3 = -72094;
  if (*(_BYTE *)DerivedStorage)
    v4 = -15487;
  else
    v4 = v3;
  if (v4)
  {
    bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(*(const void **)a1, 4294949714, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], 0);
LABEL_16:
    APSLogErrorAt();
    goto LABEL_17;
  }
  if ((*(_BYTE *)(DerivedStorage + 736) & 1) != 0)
  {
    lhs = *(CMTime *)(DerivedStorage + 724);
    rhs = *(CMTime *)(DerivedStorage + 700);
    CMTimeSubtract(&v25, &lhs, &rhs);
  }
  else
  {
    v25 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  }
  CMBaseObjectGetDerivedStorage();
  v6 = *(double *)(a1 + 8);
  if (v6 == 1.0)
    *(_BYTE *)(DerivedStorage + 802) = 0;
  v7 = *(_DWORD *)(DerivedStorage + 804);
  if (v7 <= 1937011304)
  {
    if (v7 == 1886547820)
    {
LABEL_31:
      if (v6 == 1.0)
      {
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (*(_QWORD *)a1)
            CMBaseObjectGetDerivedStorage();
          LogPrintF();
        }
        v8 = *(const void **)a1;
        v9 = CMBaseObjectGetDerivedStorage();
        HostTimeClock = CMClockGetHostTimeClock();
        CMClockGetTime(&lhs, HostTimeClock);
        *(CMTime *)(v9 + 1568) = lhs;
        *(_DWORD *)(v9 + 1592) = *(_DWORD *)(v9 + 592);
        v11 = CMBaseObjectGetDerivedStorage();
        lhs = *(CMTime *)(v11 + 676);
        rhs = *(CMTime *)(v11 + 700);
        CMTimeSubtract(&time, &lhs, &rhs);
        Seconds = CMTimeGetSeconds(&time);
        *(float *)(v9 + 1596) = Seconds;
        bufferedAudioEngine_getStreamInfoForStartup((uint64_t)v8, (float *)(v9 + 1600), (float *)(v9 + 1604), (float *)(v9 + 1608), (_WORD *)(v9 + 1612), (char *)(v9 + 1618), (_WORD *)(v9 + 1614), (_WORD *)(v9 + 1616));
        kdebug_trace();
        goto LABEL_63;
      }
      if (v6 == 0.0)
      {
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (*(_QWORD *)a1)
            CMBaseObjectGetDerivedStorage();
          bufferedAudioEngine_playbackStateGetCString(*(_DWORD *)(DerivedStorage + 804));
          LogPrintF();
        }
        v21 = *(const void **)a1;
        lhs = v25;
        v24 = MEMORY[0x1E0CA2E18];
        p_lhs = &lhs;
        v23 = 0;
LABEL_120:
        bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(v21, v23, (uint64_t)p_lhs, v24, 0);
        goto LABEL_17;
      }
      goto LABEL_89;
    }
    if (v7 != 1886614642)
    {
      if (v7 != 1937010544)
        goto LABEL_89;
      goto LABEL_31;
    }
    goto LABEL_79;
  }
  if (v7 == 1937011305)
  {
LABEL_79:
    if (v6 == 0.0)
    {
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*(_QWORD *)a1)
          CMBaseObjectGetDerivedStorage();
        lhs = v25;
        CMTimeGetSeconds(&lhs);
        LogPrintF();
      }
      v17 = *(const void **)a1;
      lhs = v25;
      v18 = MEMORY[0x1E0CA2E18];
      bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(v17, 4294949716, (uint64_t)&lhs, MEMORY[0x1E0CA2E18], 0);
      v19 = *(const void **)a1;
      lhs = v25;
      bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(v19, 0, (uint64_t)&lhs, v18, 0);
      *(_BYTE *)(DerivedStorage + 760) = 0;
      *(_QWORD *)(DerivedStorage + 816) = 0xBFF0000000000000;
      *(_QWORD *)(DerivedStorage + 880) = 0;
      *(_QWORD *)(DerivedStorage + 872) = 0;
      bufferedAudioEngine_updatePlaybackState(*(_QWORD *)a1, 1937010544);
      goto LABEL_17;
    }
LABEL_84:
    if (v6 == 1.0)
    {
      if (gLogCategory_APAudioEngineBuffered <= 90
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*(_QWORD *)a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      v21 = *(const void **)a1;
      lhs = v25;
      v24 = MEMORY[0x1E0CA2E18];
      p_lhs = &lhs;
      v23 = 4294949715;
      goto LABEL_120;
    }
LABEL_89:
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(_QWORD *)a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    goto LABEL_17;
  }
  if (v7 != 1937011316)
  {
    if (v7 != 1937207905)
      goto LABEL_89;
    if (v6 == 0.0)
    {
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*(_QWORD *)a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      *(_BYTE *)(DerivedStorage + 802) = 1;
      v20 = *(const void **)a1;
      lhs = v25;
      bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(v20, 4294949716, (uint64_t)&lhs, MEMORY[0x1E0CA2E18], 0);
      *(_QWORD *)(DerivedStorage + 816) = *(_QWORD *)(a1 + 8);
      *(_OWORD *)(DerivedStorage + 872) = *(_OWORD *)(a1 + 64);
      goto LABEL_17;
    }
    goto LABEL_84;
  }
  if (v6 == 1.0)
  {
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(_QWORD *)a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    v21 = *(const void **)a1;
    p_lhs = (CMTime *)MEMORY[0x1E0CA2E18];
    v23 = 4294949715;
    v24 = MEMORY[0x1E0CA2E18];
    goto LABEL_120;
  }
  if (v6 != 0.0)
    goto LABEL_89;
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(_QWORD *)a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  if (*(_QWORD *)(DerivedStorage + 1400))
  {
    mach_absolute_time();
    *(_QWORD *)(DerivedStorage + 1408) += UpTicksToMilliseconds();
    *(_QWORD *)(DerivedStorage + 1400) = 0;
  }
LABEL_63:
  *(_QWORD *)(DerivedStorage + 816) = *(_QWORD *)(a1 + 8);
  v13 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(DerivedStorage + 840) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(DerivedStorage + 824) = v13;
  *(_OWORD *)(DerivedStorage + 872) = *(_OWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 80))
  {
    Value = (const void *)FigCFDictionaryGetValue();
    v15 = *(const void **)(DerivedStorage + 1384);
    *(_QWORD *)(DerivedStorage + 1384) = Value;
    if (Value)
      CFRetain(Value);
    if (v15)
      CFRelease(v15);
  }
  v16 = *(const void **)a1;
  if (*(double *)(DerivedStorage + 816) == 0.0)
  {
    bufferedAudioEngine_updatePlaybackState((uint64_t)v16, 1937010793);
    if (bufferedAudioEngine_handleSetRateToZero(*(const void **)a1))
      goto LABEL_16;
  }
  else
  {
    bufferedAudioEngine_wakeUpHosesAndAudioTimer((uint64_t)v16);
    bufferedAudioEngine_updatePlaybackState(*(_QWORD *)a1, 1886614642);
    if (*(_QWORD *)(DerivedStorage + 536))
    {
      if (bufferedAudioEngine_startPlaybackIfNecessary(*(const void **)a1, 0))
        goto LABEL_16;
    }
    else
    {
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*(_QWORD *)a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      bufferedAudioEngine_updatePlaybackState(*(_QWORD *)a1, 1937011305);
      if (bufferedAudioEngine_handleSetRateToOne(*(const void **)a1))
        goto LABEL_16;
    }
  }
LABEL_17:
  bufferedAudioEngine_updateDataProcessingTargetQueueInternal(*(_QWORD *)a1);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v5 = *(const void **)(a1 + 80);
  if (v5)
    CFRelease(v5);
  free((void *)a1);
}

uint64_t bufferedAudioEngine_setEndOfSiriTTSUtteranceMediaTimeInternal(uint64_t a1)
{
  _BYTE *DerivedStorage;
  __int128 v3;
  CMTimeEpoch v4;
  CMTimeValue v5;
  CMTimeFlags v6;
  _BYTE *v7;
  CMTimeEpoch v8;
  CMTimeEpoch v9;
  int64_t FramesPerPacket;
  double v11;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  const __CFAllocator *v14;
  CFDictionaryRef v15;
  CFDictionaryRef v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  size_t EncodeMessageBackingSize;
  uint64_t NextFreeBacking;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t CryptorIDForCryptor;
  uint64_t MagicCookieIDForMagicCookieData;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  _QWORD v36[2];
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  CMTimeEpoch v42;
  __int128 v43;
  CMTimeEpoch v44;
  __int128 v45;
  _BYTE v46[25];
  __int128 v47;
  CMTimeEpoch v48;
  uint64_t v49;
  CMTime rhs;
  CMTime time2;
  CMTime time1;
  OpaqueCMBlockBuffer *v53;
  CMBlockBufferRef blockBufferOut;
  CMTime v55;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v55.value = *MEMORY[0x1E0CA2E18];
  v4 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v53 = 0;
  blockBufferOut = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v55.epoch = v4;
  value = v5;
  timescale = *(_DWORD *)(a1 + 16);
  if (*DerivedStorage)
    goto LABEL_8;
  v6 = *(_DWORD *)(a1 + 20);
  if ((v6 & 1) == 0)
    goto LABEL_33;
  v7 = DerivedStorage;
  v35 = v3;
  v8 = *(_QWORD *)(a1 + 24);
  time1.value = *(_QWORD *)(a1 + 8);
  time1.timescale = *(_DWORD *)(a1 + 16);
  time1.flags = v6;
  time1.epoch = v8;
  v34 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
  v9 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  time2.epoch = v9;
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
LABEL_33:
    APSLogErrorAt();
    v17 = 4294951815;
    goto LABEL_9;
  }
  time1 = *(CMTime *)(v7 + 676);
  time2 = *(CMTime *)(v7 + 700);
  CMTimeSubtract(&v55, &time1, &time2);
  FramesPerPacket = APSAudioFormatDescriptionGetFramesPerPacket();
  APSAudioFormatDescriptionGetSampleRate();
  CMTimeMake(&rhs, FramesPerPacket, (int)v11);
  time2.value = value;
  time2.timescale = timescale;
  time2.flags = v6;
  time2.epoch = v8;
  CMTimeSubtract(&time1, &time2, &rhs);
  value = time1.value;
  flags = time1.flags;
  timescale = time1.timescale;
  epoch = time1.epoch;
  if (*((_DWORD *)v7 + 201) == 1852990835
    || (time1.value = value, time1.timescale = timescale, time2 = v55, CMTimeCompare(&time1, &time2) >= 1))
  {
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    time1.value = value;
    time1.timescale = timescale;
    time1.flags = flags;
    time1.epoch = epoch;
    v15 = CMTimeCopyAsDictionary(&time1, v14);
    if (v15)
    {
      v16 = v15;
      CFArrayAppendValue(*((CFMutableArrayRef *)v7 + 128), v15);
      CFRelease(v16);
LABEL_8:
      v17 = 0;
      goto LABEL_9;
    }
    APSLogErrorAt();
    v17 = 4294951816;
    goto LABEL_9;
  }
  if (gLogCategory_APAudioEngineBuffered <= 90
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(_QWORD *)a1)
      CMBaseObjectGetDerivedStorage();
    time1.value = value;
    time1.timescale = timescale;
    time1.flags = flags;
    time1.epoch = epoch;
    CMTimeGetSeconds(&time1);
    time1 = v55;
    CMTimeGetSeconds(&time1);
    LogPrintF();
  }
  v19 = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, &blockBufferOut);
  if ((_DWORD)v19)
  {
    v17 = v19;
    goto LABEL_36;
  }
  v20 = *((_QWORD *)v7 + 70);
  EncodeMessageBackingSize = bufferedAudioEngine_getEncodeMessageBackingSize(*(_QWORD *)a1, 0);
  NextFreeBacking = APMessageRingBufferedGetNextFreeBacking(v20, EncodeMessageBackingSize);
  if (!NextFreeBacking)
  {
    APSLogErrorAt();
    v17 = 4294895201;
    goto LABEL_9;
  }
  v23 = NextFreeBacking;
  v55 = *(CMTime *)(v7 + 676);
  if (APSSettingsIsFeatureEnabled())
  {
    v24 = *((_QWORD *)v7 + 210);
    v25 = *((_QWORD *)v7 + 143);
    v26 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (*(_QWORD *)(v26 + 64))
      CryptorIDForCryptor = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 80))(v24, v25);
    else
      CryptorIDForCryptor = -12782;
    v29 = *((_QWORD *)v7 + 210);
    v30 = *((_QWORD *)v7 + 121);
    v31 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
    if (v31)
      MagicCookieIDForMagicCookieData = v31(v29, v30);
    else
      MagicCookieIDForMagicCookieData = -12782;
  }
  else
  {
    CryptorIDForCryptor = bufferedAudioEngine_getCryptorIDForCryptor(*((_QWORD *)v7 + 143));
    MagicCookieIDForMagicCookieData = bufferedAudioEngine_getMagicCookieIDForMagicCookieData(*((CFDataRef *)v7 + 121));
  }
  v32 = *(_QWORD *)a1;
  v36[0] = 0;
  v36[1] = 0;
  v37 = 1;
  v38 = CryptorIDForCryptor;
  v39 = MagicCookieIDForMagicCookieData;
  v40 = 0;
  v41 = v35;
  v42 = v4;
  v43 = v35;
  v44 = v4;
  v45 = 0u;
  memset(v46, 0, sizeof(v46));
  v47 = v35;
  v48 = v4;
  v49 = 0;
  time1 = v55;
  bufferedAudioEngine_encodeMessage(v32, v23, (uint64_t)&time1, (uint64_t)v36, blockBufferOut, &v53);
  v33 = *((_QWORD *)v7 + 70);
  time1 = v55;
  *(_OWORD *)&time2.value = v34;
  time2.epoch = v9;
  v17 = APMessageRingBufferedEnqueueMessageForSending(v33, v53, (__int128 *)&time1.value, (__int128 *)&time2.value);
  if ((_DWORD)v17)
LABEL_36:
    APSLogErrorAt();
LABEL_9:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v53)
    CFRelease(v53);
  return v17;
}

uint64_t bufferedAudioEngine_applyVolumeFadeInternal(uint64_t a1)
{
  _BYTE *DerivedStorage;
  uint64_t v3;
  _BYTE *v4;
  CMTimeFlags v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, CMTime *);
  uint64_t *v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t ProtocolVTable;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, CMTime *);
  uint64_t v15;
  CMTimeFlags v17;
  CMTimeEpoch v18;
  CMTime time;
  CMTimeValue v20;
  CMTimeScale v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = *(unsigned int *)(a1 + 8);
  v20 = *(_QWORD *)(a1 + 12);
  v21 = *(_DWORD *)(a1 + 20);
  if (*DerivedStorage)
    return 0;
  v4 = DerivedStorage;
  if (!DerivedStorage[1080])
    return 0;
  v5 = *(_DWORD *)(a1 + 24);
  if ((v5 & 1) == 0)
  {
    APSLogErrorAt();
    return 4294951815;
  }
  if ((v3 - 1) < 2)
  {
    v18 = *(_QWORD *)(a1 + 28);
    if (APSSettingsIsFeatureEnabled())
    {
      v6 = *((_QWORD *)v4 + 210);
      v7 = *(void (**)(uint64_t, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
      if (v7)
      {
        time.value = v20;
        time.timescale = v21;
        time.flags = v5;
        time.epoch = v18;
        v7(v6, v3, &time);
      }
    }
    else
    {
      v8 = (uint64_t *)*((_QWORD *)v4 + 73);
      if (v8)
      {
        v17 = v5;
        v9 = 0x1ED52E000uLL;
        do
        {
          v10 = *(_DWORD *)(v9 + 3936);
          if (*((_BYTE *)v8 + 24))
          {
            if (v10 <= 50 && (v10 != -1 || _LogCategory_Initialize()))
            {
              if (*(_QWORD *)a1)
                CMBaseObjectGetDerivedStorage();
              LogPrintF();
            }
          }
          else
          {
            if (v10 <= 50 && (v10 != -1 || _LogCategory_Initialize()))
            {
              if (*(_QWORD *)a1)
                CMBaseObjectGetDerivedStorage();
              APSGetVolumeFadeTypeName();
              time.value = v20;
              time.timescale = v21;
              time.flags = v17;
              time.epoch = v18;
              CMTimeGetSeconds(&time);
              LogPrintF();
              v9 = 0x1ED52E000;
            }
            v11 = v8[2];
            APSEndpointStreamAudioHoseProtocolGetProtocolID();
            ProtocolVTable = CMBaseObjectGetProtocolVTable();
            if (ProtocolVTable)
            {
              v13 = *(_QWORD *)(ProtocolVTable + 16);
              if (v13)
              {
                v14 = *(void (**)(uint64_t, uint64_t, CMTime *))(v13 + 72);
                if (v14)
                {
                  time.value = v20;
                  time.timescale = v21;
                  time.flags = v17;
                  time.epoch = v18;
                  v14(v11, v3, &time);
                }
              }
            }
          }
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
    }
    return 0;
  }
  if (gLogCategory_APAudioEngineBuffered <= 90
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(_QWORD *)a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  v15 = 4294951815;
  APSLogErrorAt();
  return v15;
}

void bufferedAudioEngine_handleClockLockStateChangedInternal(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v3 = DerivedStorage;
    if (*(_QWORD *)(DerivedStorage + 328) && !*(_BYTE *)DerivedStorage)
    {
      v4 = APSGetFBOPropertyInt64();
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      if (v4 && *(_BYTE *)(v3 + 760) && *(_DWORD *)(v3 + 804) == 1937011316 && *(_BYTE *)(v3 + 801))
      {
        CMBaseObjectGetDerivedStorage();
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          CMBaseObjectGetDerivedStorage();
          LogPrintF();
        }
        bufferedAudioEngine_handleSetRateToOne_sendAnchorToAllHoses(a1);
      }
    }
    CFRelease(a1);
  }
}

uint64_t hidClient_getTypeID(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APHIDClientCreate(const __CFAllocator *a1, const __CFArray *a2, _QWORD *a3)
{
  _QWORD *Instance;
  _QWORD *v7;
  const CFDictionaryKeyCallBacks *v8;
  const CFDictionaryValueCallBacks *v9;
  uint64_t v10;

  if (a2)
  {
    if (APHIDClientGetTypeID_sInitOnce != -1)
      dispatch_once_f(&APHIDClientGetTypeID_sInitOnce, &APHIDClientGetTypeID_sTypeID, (dispatch_function_t)hidClient_getTypeID);
    Instance = (_QWORD *)_CFRuntimeCreateInstance();
    if (Instance)
    {
      v7 = Instance;
      Instance[2] = 0;
      Instance[3] = 0;
      Instance[4] = 0;
      Instance[2] = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
      v8 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      v7[3] = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v7[4] = CFDictionaryCreateMutable(a1, 0, v8, v9);
      CFArrayGetCount(a2);
      CFArrayApplyBlock();
      if (gLogCategory_APHIDClient <= 30 && (gLogCategory_APHIDClient != -1 || _LogCategory_Initialize()))
        LogPrintF();
      v10 = 0;
      *a3 = v7;
    }
    else
    {
      APSLogErrorAt();
      return 4294895256;
    }
  }
  else
  {
    v10 = 4294895253;
    APSLogErrorAt();
  }
  return v10;
}

uint64_t APHIDClientCopyHIDs(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  CFTypeRef v4;

  v4 = *(CFTypeRef *)(a1 + 16);
  if (v4)
    v4 = CFRetain(v4);
  *a3 = v4;
  return 0;
}

uint64_t APHIDClientHandleHIDReport(uint64_t a1)
{
  int v2;
  const __CFData *TypedValue;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __IOHIDUserDevice *Value;
  __IOHIDUserDevice *v13;
  const uint8_t *BytePtr;
  CFIndex Length;
  unsigned int v17;

  v2 = gLogCategory_APHIDClient;
  if (gLogCategory_APHIDClient <= 20)
  {
    if (gLogCategory_APHIDClient == -1)
    {
      if (!_LogCategory_Initialize())
        goto LABEL_10;
      v2 = gLogCategory_APHIDClient;
    }
    if (v2 == -1)
      _LogCategory_Initialize();
    if (gLogCategory_APHIDClient == -1)
      _LogCategory_Initialize();
    LogPrintF();
  }
LABEL_10:
  CFDataGetTypeID();
  TypedValue = (const __CFData *)CFDictionaryGetTypedValue();
  CFStringGetTypeID();
  v4 = (const void *)CFDictionaryGetTypedValue();
  v5 = mach_absolute_time();
  v6 = v5;
  if (APHIDClientHandleHIDReport_lastLogTime
    && (v7 = (float)(v5 - APHIDClientHandleHIDReport_lastLogTime),
        (float)(v7 / (float)(unint64_t)UpTicksPerSecond()) < 1.0))
  {
    v8 = 0;
  }
  else
  {
    APHIDClientHandleHIDReport_lastLogTime = v6;
    v8 = 1;
  }
  CFDictionaryGetInt64();
  v9 = NTPtoUpTicks();
  v10 = v9;
  if (v9 <= v6)
    v11 = v6 - v9;
  else
    v11 = v9 - v6;
  if (v11 <= UpTicksPerSecond())
  {
    v6 = v10;
  }
  else if (gLogCategory_APHIDClient <= 50
         && (gLogCategory_APHIDClient != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  Value = (__IOHIDUserDevice *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), v4);
  if (Value)
  {
    v13 = Value;
    BytePtr = CFDataGetBytePtr(TypedValue);
    Length = CFDataGetLength(TypedValue);
    v17 = IOHIDUserDeviceHandleReportWithTimeStamp(v13, v6, BytePtr, Length);
    if (!v17)
    {
      if (!v8
        || gLogCategory_APHIDClient > 50
        || gLogCategory_APHIDClient == -1 && !_LogCategory_Initialize())
      {
        return v17;
      }
LABEL_27:
      LogPrintF();
      return v17;
    }
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    v17 = -72042;
  }
  if (gLogCategory_APHIDClient <= 50 && (gLogCategory_APHIDClient != -1 || _LogCategory_Initialize()))
    goto LABEL_27;
  return v17;
}

uint64_t APHIDClientCopyInputModeForUUID(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  const void *TypedValue;
  unsigned int v6;

  v6 = 0;
  CFNumberGetTypeID();
  TypedValue = (const void *)CFDictionaryGetTypedValue();
  if (TypedValue)
  {
    *a3 = CFRetain(TypedValue);
  }
  else
  {
    APSLogErrorAt();
    return -72042;
  }
  return v6;
}

uint64_t APHIDClientSetInputModeForUUID(uint64_t a1, const void *a2, const void *a3)
{
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 32), a2))
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, a3);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294895254;
  }
}

void hidClient_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  if (gLogCategory_APHIDClient <= 30 && (gLogCategory_APHIDClient != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
}

uint64_t APCarPlayBTPairingInfoHelperGetTypeID()
{
  if (APCarPlayBTPairingInfoHelperGetTypeID_initOnce != -1)
    dispatch_once(&APCarPlayBTPairingInfoHelperGetTypeID_initOnce, &__block_literal_global_19);
  return APCarPlayBTPairingInfoHelperGetTypeID_typeID;
}

void _APCarPlayBTPairingInfoHelperFinalize(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

uint64_t *APCarPlayBTPairingInfoHelperCreate()
{
  uint64_t *Instance;
  uint64_t *v1;
  uint64_t *v2;
  dispatch_queue_t v3;
  uint64_t v4;

  if (APCarPlayBTPairingInfoHelperGetTypeID_initOnce != -1)
    dispatch_once(&APCarPlayBTPairingInfoHelperGetTypeID_initOnce, &__block_literal_global_19);
  Instance = (uint64_t *)_CFRuntimeCreateInstance();
  v1 = Instance;
  if (!Instance)
  {
    APSLogErrorAt();
    goto LABEL_7;
  }
  Instance[2] = 0;
  Instance[3] = 0;
  v2 = Instance + 2;
  Instance[4] = 0;
  v3 = dispatch_queue_create("APCarPlayBTPairingInfoHelper", 0);
  *v2 = (uint64_t)v3;
  if (!v3)
  {
LABEL_15:
    APSLogErrorAt();
    CFRelease(v1);
    v1 = 0;
    goto LABEL_7;
  }
  v4 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v4)
  {
    APSLogErrorAt();
    goto LABEL_15;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTSessionAttachWithQueue[0])((uint64_t)"APCarPlayBTPairingInfoHelper", (uint64_t)&callbacks, v4, *v2);
LABEL_7:
  if (gLogCategory_APCarPlayBTPairingInfoHelper <= 30
    && (gLogCategory_APCarPlayBTPairingInfoHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v1;
}

uint64_t APCarPlayBTPairingInfoHelperIsPaired(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD v8[8];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 0;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  if (a1 && a2 && a3)
  {
    v4 = *(NSObject **)(a1 + 16);
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = __APCarPlayBTPairingInfoHelperIsPaired_block_invoke;
    v8[3] = &unk_1E826BA38;
    v8[6] = a1;
    v8[7] = a2;
    v8[4] = &v9;
    v8[5] = &v13;
    dispatch_sync(v4, v8);
    v5 = v14;
    v6 = *((unsigned int *)v14 + 6);
    if (!(_DWORD)v6)
    {
      *a3 = *((_BYTE *)v10 + 24);
      v6 = *((unsigned int *)v5 + 6);
    }
  }
  else
  {
    APSLogErrorAt();
    v6 = 4294960591;
    *((_DWORD *)v14 + 6) = -6705;
  }
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  return v6;
}

uint64_t APCarPlayBTPairingInfoHelperDissociate(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  if (a1)
  {
    v1 = (_QWORD *)(a1 + 24);
    if (*(_QWORD *)(a1 + 24))
      softLinkBTSessionDetachWithQueue(a1 + 24);
    result = 0;
    *v1 = 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return result;
}

uint64_t initBTSessionAttachWithQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_10);
  softLinkBTSessionAttachWithQueue[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTSessionAttachWithQueue");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTSessionAttachWithQueue[0])(a1, a2, a3, a4);
}

void BluetoothSessionEvent(uint64_t a1, int a2, int a3, const void *a4)
{
  uint64_t v8;
  const void *v9;

  v8 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v8)
  {
    v9 = (const void *)v8;
    if ((a2 - 1) >= 3)
    {
      if (a2)
      {
LABEL_20:
        CFRelease(v9);
        return;
      }
      if (!a3)
      {
        if (*(_QWORD *)(v8 + 24) != a1)
        {
          *(_QWORD *)(v8 + 24) = a1;
          if (((unsigned int (*)(uint64_t, uint64_t))softLinkBTLocalDeviceGetDefault[0])(a1, v8 + 32))
          {
            if (gLogCategory_APCarPlayBTPairingInfoHelper <= 90
              && (gLogCategory_APCarPlayBTPairingInfoHelper != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
          }
        }
        goto LABEL_20;
      }
      if (gLogCategory_APCarPlayBTPairingInfoHelper <= 90
        && (gLogCategory_APCarPlayBTPairingInfoHelper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
    }
    if (a4)
      CFRelease(a4);
    goto LABEL_20;
  }
}

uint64_t initBTLocalDeviceGetDefault(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_10);
  softLinkBTLocalDeviceGetDefault[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTLocalDeviceGetDefault");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTLocalDeviceGetDefault[0])(a1, a2);
}

uint64_t initBTLocalDeviceGetPairedDevices(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_10);
  softLinkBTLocalDeviceGetPairedDevices[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTLocalDeviceGetPairedDevices");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTLocalDeviceGetPairedDevices[0])(a1, a2, a3, a4);
}

uint64_t initBTDeviceGetAddressString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_10);
  softLinkBTDeviceGetAddressString[0] = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTDeviceGetAddressString");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetAddressString[0])(a1, a2, a3);
}

uint64_t initBTSessionDetachWithQueue(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce != -1)
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_10);
  softLinkBTSessionDetachWithQueue = (uint64_t (*)())dlsym((void *)MobileBluetoothLibrary_sLib, "BTSessionDetachWithQueue");
  return ((uint64_t (*)(uint64_t))softLinkBTSessionDetachWithQueue)(a1);
}

uint64_t APEndpointPlaybackSessionAirPlayCreate(uint64_t a1, const void *a2, const void *a3, const __CFDictionary *a4, _QWORD *a5)
{
  uint64_t v10;
  _QWORD *DerivedStorage;
  uint64_t v12;
  uint64_t v13;
  CFMutableDictionaryRef Mutable;
  dispatch_queue_t v15;
  dispatch_queue_t v16;
  dispatch_queue_t v17;
  const __CFString *v18;
  const void *TypedValue;
  const void *Value;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  char label[16];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v27 = 0u;
  v28 = 0u;
  *(_OWORD *)label = 0u;
  v26 = 0u;
  if (!a2 || !a3)
  {
    APSLogErrorAt();
    return 4294950556;
  }
  FigEndpointPlaybackSessionGetClassID();
  v10 = CMDerivedObjectCreate();
  if ((_DWORD)v10)
  {
    v23 = v10;
LABEL_30:
    APSLogErrorAt();
    return v23;
  }
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v12 = FigSimpleMutexCreate();
  DerivedStorage[6] = v12;
  if (!v12)
    goto LABEL_28;
  v13 = FigSimpleMutexCreate();
  DerivedStorage[21] = v13;
  if (!v13)
    goto LABEL_28;
  DerivedStorage[19] = 1;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  DerivedStorage[20] = Mutable;
  if (!Mutable)
    goto LABEL_28;
  SNPrintF();
  v15 = dispatch_queue_create(label, 0);
  DerivedStorage[15] = v15;
  if (!v15
    || (SNPrintF(), v16 = dispatch_queue_create(label, 0), (DerivedStorage[22] = v16) == 0)
    || (SNPrintF(), v17 = dispatch_queue_create(label, 0), (DerivedStorage[5] = v17) == 0))
  {
LABEL_28:
    APSLogErrorAt();
    return 4294950555;
  }
  if (a1)
    v18 = (const __CFString *)a1;
  else
    v18 = CFSTR("unnamed APEndpointPlaybackSessionAirPlay");
  *DerivedStorage = v18;
  CFRetain(v18);
  if (CFDictionaryContainsKey(a4, CFSTR("VolumeDB")))
  {
    CFNumberGetTypeID();
    TypedValue = (const void *)CFDictionaryGetTypedValue();
    apPlayback_setPropertyInternal(0, CFSTR("VolumeDB"), TypedValue);
  }
  DerivedStorage[2] = CFRetain(a2);
  DerivedStorage[4] = CFRetain(a3);
  if (CFDictionaryContainsKey(a4, CFSTR("MetadataSource")))
  {
    Value = CFDictionaryGetValue(a4, CFSTR("MetadataSource"));
    DerivedStorage[12] = CFRetain(Value);
  }
  if (CFDictionaryContainsKey(a4, CFSTR("NetworkClock")))
  {
    v21 = CFDictionaryGetValue(a4, CFSTR("NetworkClock"));
    DerivedStorage[3] = CFRetain(v21);
  }
  v22 = APEndpointPlaybackSessionStatsCreate(CFSTR("AP"), a1, (uint64_t)a4, DerivedStorage + 28);
  if ((_DWORD)v22)
  {
    v23 = v22;
    goto LABEL_30;
  }
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v23 = 0;
  *a5 = 0;
  return v23;
}

void apPlayback_setPropertyInternal(void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  double v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  const __CFString *v12;
  int Value;
  _QWORD *v14;
  CMTime v15;
  CMTime v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("VolumeDB")))
  {
    CFGetDouble();
    v8 = v7;
    v9 = CMBaseObjectGetDerivedStorage();
    if (*(float *)(v9 + 88) != v8)
    {
      v10 = v9;
      *(float *)(v9 + 88) = v8;
      *(_BYTE *)(v9 + 92) = 1;
      if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
        && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (*(_BYTE *)(v10 + 72))
      {
        CFRetain(a1);
        dispatch_async_f(*(dispatch_queue_t *)(v10 + 176), a1, (dispatch_function_t)apPlayback_processPendingAudioVolumeChanges);
      }
    }
  }
  else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F58]))
  {
    v11 = *(const void **)(DerivedStorage + 80);
    *(_QWORD *)(DerivedStorage + 80) = a3;
    if (a3)
      CFRetain(a3);
    if (v11)
      CFRelease(v11);
    if (FigCFEqual())
      v12 = CFSTR("moviePlayback");
    else
      v12 = CFSTR("default");
    apPlayback_SetProxiedProperty(a1, CFSTR("audioMode"), 0, v12);
  }
  else
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F68]))
    {
      Value = CFBooleanGetValue((CFBooleanRef)a3);
      APEndpointPlaybackSessionSetIsParticipatingInCoordinatedPlayback(*(_QWORD *)(DerivedStorage + 224), Value);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3FA0]))
    {
      memset(&v16, 0, sizeof(v16));
      CMTimeMakeFromDictionary(&v16, (CFDictionaryRef)a3);
      v14 = *(_QWORD **)(DerivedStorage + 224);
      v15 = v16;
      APEndpointPlaybackSessionSetVideoSyncTime(v14, (uint64_t)&v15);
    }
    else if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
           && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
}

void apPlayback_Invalidate()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  APEndpointPlaybackSessionStatsUpdateAtInvalidate(*(_QWORD *)(DerivedStorage + 224));
}

void sub_1C94F6040()
{
  apPlayback_unsubscribeMetadataEvents();
}

uint64_t sub_1C94F6048()
{
  uint64_t v0;
  void *v1;

  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  v1 = *(void **)(v0 + 8);
  if (v1)
  {

    *(_QWORD *)(v0 + 8) = 0;
  }
  return 0;
}

void apPlayback_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  _QWORD *v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  NSObject *v14;
  const void *v15;
  NSObject *v16;
  NSObject *v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 50
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_BYTE *)(DerivedStorage + 72) = 0;
  *(_BYTE *)(DerivedStorage + 92) = 0;
  v1 = *(const void **)(DerivedStorage + 80);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 96);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 112);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v5 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v5[23])
  {
    v6 = (const void *)v5[25];
    if (v6)
      CFRetain(v6);
    v7 = (const void *)v5[2];
    if (v7)
      CFRetain(v7);
    v5[23] = 0;
    APSDispatchAsyncFHelper();
  }
  if (v5[24])
  {
    v5[24] = 0;
    v5[26] = 0;
    APSDispatchAsyncFHelper();
  }
  v8 = *(_QWORD *)(DerivedStorage + 216);
  if (v8)
  {
    APLocalPlaybackServerDestroy(v8);
    *(_QWORD *)(DerivedStorage + 216) = 0;
  }
  *(_QWORD *)(DerivedStorage + 128) = 0;
  *(_QWORD *)(DerivedStorage + 136) = 0;
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v9 = *(const void **)(DerivedStorage + 16);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 24);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 32);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 200);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 200) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 144);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 144) = 0;
  }
  v14 = *(NSObject **)(DerivedStorage + 120);
  if (v14)
  {
    dispatch_release(v14);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
  FigSimpleMutexDestroy();
  v15 = *(const void **)(DerivedStorage + 160);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(DerivedStorage + 160) = 0;
  }
  v16 = *(NSObject **)(DerivedStorage + 176);
  if (v16)
  {
    dispatch_release(v16);
    *(_QWORD *)(DerivedStorage + 176) = 0;
  }
  v17 = *(NSObject **)(DerivedStorage + 40);
  if (v17)
  {
    dispatch_release(v17);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  FigSimpleMutexDestroy();
  APEndpointPlaybackSessionStatsDestroy((uint64_t *)(DerivedStorage + 224));
}

CFStringRef apPlayback_CopyDebugDesc()
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat(0, 0, CFSTR("<APEndpointPlaybackSessionAirPlay '%@'>"), *DerivedStorage);
}

uint64_t apPlayback_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef *v7;
  BOOL v9;
  char v10;
  int v11;
  unsigned int v12;

  v12 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F78]))
    goto LABEL_2;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F98]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F90]))
  {
LABEL_5:
    v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    goto LABEL_6;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F80]))
  {
    if (!*(_QWORD *)(DerivedStorage + 32) || !APSGetFBOPropertyInt64())
    {
LABEL_2:
      v7 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
LABEL_6:
      *a4 = (CFDictionaryRef)CFRetain(*v7);
      return v12;
    }
    goto LABEL_5;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F88]))
    goto LABEL_5;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F70]))
  {
    if (*(_QWORD *)(DerivedStorage + 32))
    {
      v9 = APSGetFBOPropertyInt64() <= 2413299;
      v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      v10 = !v9;
      if ((v10 & 1) == 0)
        v7 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      goto LABEL_6;
    }
    goto LABEL_2;
  }
  if (CFEqual(a2, CFSTR("Activated")))
  {
    v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(DerivedStorage + 56);
    goto LABEL_27;
  }
  if (CFEqual(a2, CFSTR("IsPlaying")))
  {
    v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(DerivedStorage + 57);
    goto LABEL_27;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F60]))
  {
    v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(DerivedStorage + 72);
LABEL_27:
    if (!v11)
      v7 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_6;
  }
  if (CFEqual(a2, CFSTR("RTCStats")))
    APEndpointPlaybackSessionCopyRTCStats(*(_QWORD *)(DerivedStorage + 224), a4);
  return -12787;
}

uint64_t apPlayback_SetProperty(void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 48));
  apPlayback_setPropertyInternal(a1, a2, a3);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 48));
  return 0;
}

void apPlayback_unsubscribeMetadataEvents()
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](DerivedStorage[6]);
  if (DerivedStorage[12] && DerivedStorage[13])
  {
    if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
      && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    APMetadataSourceRemoveEventCallback(DerivedStorage[12], DerivedStorage[13]);
    DerivedStorage[13] = 0;
  }
  JUMPOUT(0x1CAA400E4);
}

void apPlayback_teardownTransportStream(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v4;
  CFTypeRef v5;
  void (*v6)(uint64_t, uint64_t, CFTypeRef);
  uint64_t CMBaseObject;
  uint64_t v8;
  void (*v9)(uint64_t);
  const void *v10;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v3)
    v3(v2, 1937010544, 0, 0);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(CFTypeRef *)a1;
    v6 = *(void (**)(uint64_t, uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v6)
      v6(v4, 120, v5);
  }
  CMBaseObject = FigTransportStreamGetCMBaseObject();
  if (CMBaseObject)
  {
    v8 = CMBaseObject;
    v9 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v9)
      v9(v8);
  }
  CFRelease(*(CFTypeRef *)(a1 + 16));
  v10 = *(const void **)(a1 + 8);
  if (v10)
    CFRelease(v10);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

void apPlayback_invalidateTransportEventStream(uint64_t a1)
{
  CFTypeRef v2;
  void (*v3)(CFTypeRef, _QWORD, _QWORD, _QWORD);
  uint64_t CMBaseObject;
  uint64_t v5;
  void (*v6)(uint64_t);
  const void *v7;

  v2 = *(CFTypeRef *)a1;
  v3 = *(void (**)(CFTypeRef, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v3)
    v3(v2, 0, 0, 0);
  CMBaseObject = FigTransportStreamGetCMBaseObject();
  if (CMBaseObject)
  {
    v5 = CMBaseObject;
    v6 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v6)
      v6(v5);
  }
  v7 = *(const void **)(a1 + 8);
  if (v7)
    CFRelease(v7);
  CFRelease(*(CFTypeRef *)a1);
}

uint64_t apPlayback_AuthorizeItem(const void *a1, const void *a2, const void *a3)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  if (a3)
    CFRetain(a3);
  APSDispatchAsyncFHelper();
  return 0;
}

void apPlayback_Play(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 50
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3EA8]);
    CFDictionaryContainsKey(a2, (const void *)*MEMORY[0x1E0CA3E08]);
    LogPrintF();
  }
  if (!*(_QWORD *)(DerivedStorage + 8))
  {
    SNPrintF();
    *(_QWORD *)(DerivedStorage + 8) = os_transaction_create();
  }
  APEndpointPlaybackSessionStatsUpdateAtPlay(*(_QWORD *)(DerivedStorage + 224), a2);
}

uint64_t sub_1C94F6A78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  const void *v34;
  const __CFDictionary *v35;
  CFMutableDictionaryRef v37;

  CFRetain(v34);
  APEndpointPlaybackSessionCreatePlayParamsWithTimesInSeconds(v35, &v37);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_InsertPlayQueueItem(const void *a1, const __CFDictionary *a2, const __CFDictionary *a3)
{
  const void *v6;
  CFMutableDictionaryRef v8;

  CMBaseObjectGetDerivedStorage();
  v8 = 0;
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 50
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    v6 = (const void *)*MEMORY[0x1E0CA3EA8];
    CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3EA8]);
    CFDictionaryContainsKey(a2, (const void *)*MEMORY[0x1E0CA3E08]);
    if (a3)
      CFDictionaryGetValue(a3, v6);
    LogPrintF();
  }
  APEndpointPlaybackSessionCreatePlayParamsWithTimesInSeconds(a2, &v8);
  if (a1)
    CFRetain(a1);
  if (a3)
    CFRetain(a3);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_RemovePlayQueueItem(const void *a1, const __CFDictionary *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 50
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3EA8]);
    LogPrintF();
  }
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_Stop(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 50
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_GetPlaybackInfo(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_SeekToTime(const void *a1, CMTime *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  CMTime time;
  const void *v12;
  __int128 v13;
  CMTimeEpoch epoch;
  const void *v15;
  uint64_t v16;
  uint64_t v17;

  CMBaseObjectGetDerivedStorage();
  v12 = a1;
  v13 = *(_OWORD *)&a2->value;
  epoch = a2->epoch;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 50
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    time = *a2;
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  CFRetain(a1);
  if (a3)
    CFRetain(a3);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_SeekToDate(const void *a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_SetRate(const void *a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 50
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_GetProxiedProperty(const void *a1, const void *a2, const void *a3)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  if (a3)
    CFRetain(a3);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_SetProxiedProperty(const void *a1, const void *a2, const void *a3, const void *a4)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  if (a3)
    CFRetain(a3);
  if (a4)
    CFRetain(a4);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_PerformRemoteAction(const void *a1, const void *a2, const void *a3)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  if (a3)
    CFRetain(a3);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t apPlayback_SetEventHandler(const void *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  if (a4)
    CFRetain(a4);
  APSDispatchAsyncFHelper();
  return 0;
}

void apPlayback_authorizeItemInternal(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD, _QWORD, uint64_t, _QWORD);
  const void *v5;
  const void *v6;
  uint64_t v7;

  CMBaseObjectGetDerivedStorage();
  v2 = apPlayback_ensureTransportStreamsCreated();
  if ((_DWORD)v2)
  {
    v7 = v2;
  }
  else
  {
    CFDataGetBytePtr(*(CFDataRef *)(a1 + 8));
    CFDataGetLength(*(CFDataRef *)(a1 + 8));
    v3 = Base64EncodeCopyEx();
    if (!(_DWORD)v3)
    {
      ASPrintF();
      APSLogErrorAt();
      v7 = 4294950555;
      goto LABEL_4;
    }
    v7 = v3;
  }
  APSLogErrorAt();
LABEL_4:
  v4 = *(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(a1 + 24);
  if (v4)
    v4(0, 0, v7, *(_QWORD *)(a1 + 32));
  free(0);
  free(0);
  CFRelease(*(CFTypeRef *)a1);
  v5 = *(const void **)(a1 + 8);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 16);
  if (v6)
    CFRelease(v6);
}

uint64_t apPlayback_ensureTransportStreamsCreated()
{
  _QWORD *DerivedStorage;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, _QWORD, CFTypeRef *, _QWORD, _QWORD);
  CFTypeRef v6;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, CFMutableDictionaryRef, uint64_t *);
  CFMutableDictionaryRef v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, CFMutableDictionaryRef, uint64_t *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, _QWORD, uint64_t (*)(uint64_t, int, uint64_t, uint64_t, _QWORD *), uint64_t);
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  void (*v25)(uint64_t);
  CFTypeRef cf;
  unsigned int v28;

  v28 = 0;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  v1 = DerivedStorage + 23;
  if (DerivedStorage[23])
    return v28;
  v2 = DerivedStorage;
  v3 = DerivedStorage + 24;
  if (DerivedStorage[24])
    goto LABEL_9;
  v4 = DerivedStorage[2];
  v5 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 40);
  if (!v5)
  {
    v28 = -12782;
LABEL_8:
    APSLogErrorAt();
LABEL_9:
    Mutable = 0;
LABEL_31:
    v11 = 0;
    goto LABEL_36;
  }
  v28 = v5(v4, 120, 0, &cf, 0, 0);
  if (v28)
    goto LABEL_8;
  v6 = cf ? CFRetain(cf) : 0;
  v2[25] = v6;
  CFDictionaryGetInt64();
  if (v28)
    goto LABEL_8;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v11 = 0;
LABEL_46:
    v28 = -16741;
    goto LABEL_36;
  }
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  v9 = v2[2];
  v10 = *(uint64_t (**)(uint64_t, CFMutableDictionaryRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 56);
  if (!v10)
  {
    v28 = -12782;
    goto LABEL_30;
  }
  v28 = v10(v9, Mutable, v1);
  if (v28)
  {
LABEL_30:
    APSLogErrorAt();
    goto LABEL_31;
  }
  v11 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v11)
  {
    APSLogErrorAt();
    goto LABEL_46;
  }
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  v12 = v2[2];
  v13 = *(uint64_t (**)(uint64_t, CFMutableDictionaryRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 56);
  if (!v13)
  {
    v28 = -12782;
    goto LABEL_35;
  }
  v28 = v13(v12, v11, v3);
  if (v28)
  {
LABEL_35:
    APSLogErrorAt();
    goto LABEL_36;
  }
  v14 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  v2[26] = v14;
  if (v14)
  {
    v15 = v14;
    v16 = *v3;
    v17 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(uint64_t, int, uint64_t, uint64_t, _QWORD *), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v17)
    {
      v28 = v17(v16, 0, apPlayback_handleMessageCreatingReply, v15);
      if (!v28)
      {
        v18 = *v1;
        v19 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v19)
          v19(v18);
        v20 = *v3;
        v21 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v21)
          v21(v20);
        v22 = *v1;
        v23 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v23)
          v23(v22);
        v24 = *v3;
        v25 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v25)
          v25(v24);
        goto LABEL_36;
      }
    }
    else
    {
      v28 = -12782;
    }
    goto LABEL_35;
  }
LABEL_36:
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (v11)
    CFRelease(v11);
  return v28;
}

uint64_t apPlayback_sendSpecialMessageCreatingReply(uint64_t a1, uint64_t a2, __CFDictionary *a3, const void *a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  CFDataRef Data;
  CFDataRef v12;
  uint64_t BlockBufferWithCFDataNoCopy;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    APSLogErrorAt();
    return 4294950556;
  }
  v10 = DerivedStorage;
  if (a4)
    CFDictionarySetValue(a3, (const void *)*MEMORY[0x1E0CF75B8], a4);
  Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (!Data)
  {
    APSLogErrorAt();
    return 4294950555;
  }
  v12 = Data;
  BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
  if ((_DWORD)BlockBufferWithCFDataNoCopy)
  {
    v16 = BlockBufferWithCFDataNoCopy;
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(v10 + 184);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v15)
  {
    v16 = 4294954514;
LABEL_10:
    APSLogErrorAt();
    goto LABEL_11;
  }
  v16 = v15(v14, a2, 0, a5);
  if ((_DWORD)v16)
    goto LABEL_10;
LABEL_11:
  CFRelease(v12);
  return v16;
}

uint64_t apPlayback_handleMessageCreatingReply(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  const void *v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  const __CFAllocator *v10;
  int CFDataWithBlockBufferNoCopy;
  CFPropertyListRef v12;
  const void *v13;
  CFTypeID v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD block[8];
  CFDataRef data;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;

  v20 = 0;
  v21 = &v20;
  v22 = 0x2020000000;
  v23 = 0;
  data = 0;
  v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v7)
    goto LABEL_15;
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 50
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 != 1702260340)
    goto LABEL_18;
  v9 = DerivedStorage;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
  *((_DWORD *)v21 + 6) = CFDataWithBlockBufferNoCopy;
  if (CFDataWithBlockBufferNoCopy)
  {
    APSLogErrorAt();
    v13 = 0;
    goto LABEL_11;
  }
  v12 = CFPropertyListCreateWithData(v10, data, 0, 0, 0);
  v13 = v12;
  if (!v12)
  {
LABEL_18:
    APSLogErrorAt();
    v13 = 0;
LABEL_20:
    *((_DWORD *)v21 + 6) = -16740;
    goto LABEL_11;
  }
  v14 = CFGetTypeID(v12);
  if (v14 != CFDictionaryGetTypeID())
  {
    APSLogErrorAt();
    goto LABEL_20;
  }
  v15 = *(NSObject **)(v9 + 120);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __apPlayback_handleMessageCreatingReply_block_invoke;
  block[3] = &unk_1E826BC18;
  block[4] = &v20;
  block[5] = v7;
  block[6] = v13;
  block[7] = v9;
  dispatch_sync(v15, block);
  *a5 = 0;
LABEL_11:
  CFRelease(v7);
  if (data)
    CFRelease(data);
  if (v13)
    CFRelease(v13);
LABEL_15:
  v16 = *((unsigned int *)v21 + 6);
  _Block_object_dispose(&v20, 8);
  return v16;
}

void sub_1C94F80E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void __apPlayback_handleMessageCreatingReply_block_invoke(_QWORD *a1)
{
  const __CFDictionary *v2;
  uint64_t v3;
  uint64_t DerivedStorage;
  _DWORD *v5;
  const void *TypedValue;
  int v7;
  CFAllocatorRef *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const __CFAllocator *v12;
  CFMutableArrayRef Mutable;
  __CFArray *v14;
  const void *v15;
  uint64_t v16;
  CFMutableArrayRef v17;
  int64_t Count;
  const void **v19;
  const void **v20;
  uint64_t i;
  const void *v22;
  const void *v23;
  __CFArray *v24;
  int v25;
  uint64_t v26;
  int v27;
  const __CFDictionary *MutableCopy;
  void *v29;
  const void *v30;
  const __CFDictionary *v31;
  int PlayPlaybackInfoTimesInCMTime;
  _QWORD *v33;
  void (*v34)(_QWORD, void *, _QWORD, _QWORD);
  uint64_t v35;
  __CFArray *v36;
  uint64_t v37;
  void *value;
  unsigned int v39;

  v3 = a1[5];
  v2 = (const __CFDictionary *)a1[6];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  v5 = &unk_1EF906000;
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFStringGetTypeID();
  TypedValue = (const void *)CFDictionaryGetTypedValue();
  if (TypedValue)
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 48));
    apPlayback_handlePlaybackStateChanged(v3, TypedValue);
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 48));
  }
  v7 = CFDictionaryContainsKey(v2, CFSTR("messageID"));
  v8 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v7)
  {
    v39 = 0;
    v37 = DerivedStorage;
    if (!v2)
      goto LABEL_84;
    v9 = CFDictionaryGetValue(v2, CFSTR("messageID"));
    if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 50
      && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!v9)
      goto LABEL_49;
    if (!CFDictionaryGetValue(v2, CFSTR("type")))
    {
LABEL_84:
      APSLogErrorAt();
      goto LABEL_49;
    }
    if (!FigCFEqual())
    {
LABEL_49:
      DerivedStorage = v37;
      goto LABEL_50;
    }
    if (CFDictionaryGetValue(v2, CFSTR("error")))
    {
      FigCFDictionaryGetInt32IfPresent();
      v10 = v39;
    }
    else
    {
      v10 = 0;
    }
    v11 = CMBaseObjectGetDerivedStorage();
    if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
      && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v12 = *v8;
    Mutable = CFArrayCreateMutable(*v8, 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
    {
      APSLogErrorAt();
      v5 = (_DWORD *)&unk_1EF906000;
      goto LABEL_49;
    }
    v14 = Mutable;
    MEMORY[0x1CAA400CC](*(_QWORD *)(v11 + 168));
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v11 + 160), v9))
    {
      v15 = CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 160), v9);
      CFArrayAppendValue(v14, v15);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v11 + 160), v9);
    }
    if (CFDictionaryGetCount(*(CFDictionaryRef *)(v11 + 160)) < 1)
    {
      MEMORY[0x1CAA400E4](*(_QWORD *)(v11 + 168));
      v5 = (_DWORD *)&unk_1EF906000;
      if (apPlayback_sendResultsSeekToTimeRequests(v14, v10, (uint64_t)v2))
      {
        v17 = 0;
        goto LABEL_92;
      }
LABEL_36:
      v24 = v14;
LABEL_48:
      CFRelease(v24);
      goto LABEL_49;
    }
    v35 = v10;
    v36 = v14;
    v16 = CMBaseObjectGetDerivedStorage();
    v17 = CFArrayCreateMutable(v12, 0, MEMORY[0x1E0C9B378]);
    if (v17)
    {
      Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v16 + 160));
      v19 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
      if (!v19)
      {
        APSLogErrorAt();
        CFRelease(v17);
        MEMORY[0x1CAA400E4](*(_QWORD *)(v11 + 168));
        v8 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
LABEL_90:
        APSLogErrorAt();
        v5 = (_DWORD *)&unk_1EF906000;
        v14 = v36;
        goto LABEL_36;
      }
      v20 = v19;
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v16 + 160), v19, 0);
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          v22 = v20[i];
          if (CFNumberCompare((CFNumberRef)v22, (CFNumberRef)v9, 0) == kCFCompareLessThan)
          {
            v23 = CFDictionaryGetValue(*(CFDictionaryRef *)(v16 + 160), v22);
            CFArrayAppendValue(v17, v23);
            CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v16 + 160), v22);
          }
        }
      }
    }
    else
    {
      APSLogErrorAt();
      v20 = 0;
    }
    free(v20);
    MEMORY[0x1CAA400E4](*(_QWORD *)(v11 + 168));
    v8 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (v17)
    {
      v14 = v36;
      v5 = &unk_1EF906000;
      if (!apPlayback_sendResultsSeekToTimeRequests(v36, v35, (uint64_t)v2))
      {
        if (CFArrayGetCount(v17) >= 1)
        {
          if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
            && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
          {
            CFArrayGetCount(v17);
            LogPrintF();
          }
          if (apPlayback_sendResultsSeekToTimeRequests(v17, 4294960574, (uint64_t)v2))
            APSLogErrorAt();
        }
        CFRelease(v36);
LABEL_47:
        v24 = v17;
        goto LABEL_48;
      }
LABEL_92:
      APSLogErrorAt();
      CFRelease(v14);
      if (!v17)
        goto LABEL_49;
      goto LABEL_47;
    }
    goto LABEL_90;
  }
LABEL_50:
  CFDictionaryGetValue(v2, (const void *)*MEMORY[0x1E0CA3C60]);
  if (FigCFDictionaryGetInt32IfPresent())
    APEndpointPlaybackSessionStatsSetLastError(*(_QWORD **)(DerivedStorage + 224));
  CFStringGetTypeID();
  CFDictionaryGetTypedValue();
  if (FigCFEqual())
  {
    v25 = v5[184];
    if (v25 > 30)
    {
      v26 = 5;
      goto LABEL_66;
    }
    if (v25 == -1)
    {
      v26 = 5;
      if (!_LogCategory_Initialize())
        goto LABEL_66;
    }
    else
    {
      v26 = 5;
    }
  }
  else
  {
    if (!FigCFEqual())
      goto LABEL_67;
    v27 = v5[184];
    if (v27 > 30)
    {
      v26 = 4;
      goto LABEL_66;
    }
    if (v27 == -1)
    {
      v26 = 4;
      if (!_LogCategory_Initialize())
        goto LABEL_66;
    }
    else
    {
      v26 = 4;
    }
  }
  LogPrintF();
LABEL_66:
  softLinkMRMediaRemoteSendCommand(v26, 0);
LABEL_67:
  if (!FigCFEqual())
  {
    v29 = (void *)CFRetain(v2);
    goto LABEL_73;
  }
  MutableCopy = CFDictionaryCreateMutableCopy(*v8, 0, v2);
  v29 = MutableCopy;
  if (!MutableCopy)
  {
    APSLogErrorAt();
    PlayPlaybackInfoTimesInCMTime = -16741;
    goto LABEL_74;
  }
  v30 = (const void *)*MEMORY[0x1E0CA3BD8];
  v31 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA3BD8]);
  if (!v31)
  {
LABEL_73:
    PlayPlaybackInfoTimesInCMTime = 0;
    goto LABEL_74;
  }
  PlayPlaybackInfoTimesInCMTime = APEndpointPlaybackSessionCreatePlayPlaybackInfoTimesInCMTime(v31, (__CFDictionary **)&value);
  if (PlayPlaybackInfoTimesInCMTime)
  {
    APSLogErrorAt();
    CFRelease(v29);
    v29 = 0;
  }
  else
  {
    CFDictionarySetValue((CFMutableDictionaryRef)v29, v30, value);
  }
LABEL_74:
  if (value)
    CFRelease(value);
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = PlayPlaybackInfoTimesInCMTime;
  if (*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    APSLogErrorAt();
    if (v29)
LABEL_80:
      CFRelease(v29);
  }
  else
  {
    v33 = (_QWORD *)a1[7];
    v34 = (void (*)(_QWORD, void *, _QWORD, _QWORD))v33[16];
    if (v34)
      v34(a1[5], v29, v33[17], v33[18]);
    if (v29)
      goto LABEL_80;
  }
}

void apPlayback_handlePlaybackStateChanged(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  int v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  int v9;
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  const void **v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4078]);
  v6 = CMBaseObjectGetDerivedStorage();
  v7 = *(const void **)(v6 + 112);
  if (v5)
  {
    if (v7)
    {
      if (gLogCategory_APEndpointPlaybackSessionAirPlay > 30
        || gLogCategory_APEndpointPlaybackSessionAirPlay == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_19;
      }
      goto LABEL_13;
    }
    v8 = APSPowerAssertionCreate();
    *(_QWORD *)(v6 + 112) = v8;
    if (v8)
    {
      APSPowerAssertionRaiseTemporary();
      if (gLogCategory_APEndpointPlaybackSessionAirPlay > 30
        || gLogCategory_APEndpointPlaybackSessionAirPlay == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_19;
      }
LABEL_13:
      LogPrintF();
      goto LABEL_19;
    }
    APSLogErrorAt();
  }
  else if (v7)
  {
    if (gLogCategory_APEndpointPlaybackSessionAirPlay > 30)
      goto LABEL_18;
    if (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize())
      LogPrintF();
    v7 = *(const void **)(v6 + 112);
    if (v7)
    {
LABEL_18:
      CFRelease(v7);
      *(_QWORD *)(v6 + 112) = 0;
    }
  }
LABEL_19:
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4070]))
    v9 = 1;
  else
    v9 = CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4080]) != 0;
  if (*(unsigned __int8 *)(DerivedStorage + 57) != v9)
  {
    APEndpointPlaybackSessionUpdateNowPlayingTransaction(a1, v9, &gLogCategory_APEndpointPlaybackSessionAirPlay, (const void **)(DerivedStorage + 64));
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v11 = Mutable;
    v12 = (const void **)MEMORY[0x1E0C9AE40];
    if (v9)
      v12 = (const void **)MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, CFSTR("Playing"), *v12);
    *(_BYTE *)(DerivedStorage + 57) = v9;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v11);
  }
}

uint64_t apPlayback_sendResultsSeekToTimeRequests(const __CFArray *a1, uint64_t a2, uint64_t a3)
{
  CFIndex v6;
  const __CFData *ValueAtIndex;
  const UInt8 *BytePtr;

  if (a1)
  {
    if (CFArrayGetCount(a1) < 1)
      return 0;
    v6 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(a1, v6);
      BytePtr = CFDataGetBytePtr(ValueAtIndex);
      if (!BytePtr || !*(_QWORD *)BytePtr)
        break;
      (*(void (**)(uint64_t, uint64_t, _QWORD))BytePtr)(a3, a2, *((_QWORD *)BytePtr + 1));
      if (++v6 >= CFArrayGetCount(a1))
        return 0;
    }
  }
  APSLogErrorAt();
  return 4294950556;
}

uint64_t initMRMediaRemoteSendCommand(uint64_t a1, uint64_t a2)
{
  if (MediaRemoteLibrary_sOnce_0 != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce_0, &__block_literal_global_20);
  softLinkMRMediaRemoteSendCommand = (uint64_t (*)())dlsym((void *)MediaRemoteLibrary_sLib_0, "MRMediaRemoteSendCommand");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkMRMediaRemoteSendCommand)(a1, a2);
}

void apPlayback_playInternal(uint64_t *a1)
{
  uint64_t DerivedStorage;
  uint64_t Int64;
  const __CFString *v4;
  int v5;
  const void *v6;
  uint64_t TypedValue;
  uint64_t v8;
  const __CFDictionary *v9;
  const __CFString *v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  const __CFString *v16;
  __CFDictionary *MutableCopy;
  uint64_t v18;
  __CFDictionary *v19;
  const __CFData *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  void (*v24)(_QWORD, uint64_t);
  const void *v25;
  unsigned int MediaTypeFromPlayParams;
  const __CFString *v27;
  uint64_t v28;
  int v29;
  CFTypeRef cf;
  void *value;
  int v32;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Int64 = CFDictionaryGetInt64();
  if (apPlayback_ensureTransportStreamsCreated())
  {
    APSLogErrorAt();
LABEL_49:
    APEndpointPlaybackSessionStatsSetLastError(*(_QWORD **)(DerivedStorage + 224));
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 48));
  *(_BYTE *)(DerivedStorage + 72) = Int64 != 0;
  v28 = Int64;
  if (FigCFEqual())
  {
    v4 = CFSTR("default");
  }
  else
  {
    v5 = FigCFEqual();
    v4 = CFSTR("moviePlayback");
    if (!v5)
      v4 = 0;
  }
  v27 = v4;
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 48));
  v6 = (const void *)*MEMORY[0x1E0CA3E08];
  CFStringGetTypeID();
  TypedValue = CFDictionaryGetTypedValue();
  v8 = *a1;
  v9 = (const __CFDictionary *)a1[1];
  if (TypedValue)
  {
    v10 = (const __CFString *)TypedValue;
    v11 = CMBaseObjectGetDerivedStorage();
    cf = 0;
    value = 0;
    MediaTypeFromPlayParams = APEndpointPlaybackSessionGetMediaTypeFromPlayParams(v9);
    v12 = CFDictionaryGetInt64() != 0;
    if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
      && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v32 = apPlayback_ensureLocalPlaybackServerCreated();
    if (v32
      || (CFStringGetTypeID(),
          v16 = (const __CFString *)CFDictionaryGetTypedValue(),
          (v32 = APLocalPlaybackServerRegisterPathCreatingHostAndURL(*(_QWORD *)(v11 + 216), v10, v16, (CFTypeRef *)&value, (CFStringRef *)&cf)) != 0))
    {
      APSLogErrorAt();
      MutableCopy = 0;
      v18 = v28;
      v15 = (_DWORD *)&unk_1EF906000;
    }
    else
    {
      v15 = &unk_1EF906000;
      if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
        && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v9);
      if (MutableCopy)
      {
        apPlayback_appendCommonPlayParamsToMessage(v8, v12, MediaTypeFromPlayParams, v27, MutableCopy);
        v32 = 0;
        CFDictionarySetValue(MutableCopy, CFSTR("host"), value);
        CFDictionarySetValue(MutableCopy, v6, cf);
        if (apPlayback_isTLSEnabled())
          CFDictionarySetValue(MutableCopy, CFSTR("tlsPSKEnabled"), (const void *)*MEMORY[0x1E0C9AE50]);
        v32 = apPlayback_sendPlistMessageCreatingReply(v8, 1886151033, MutableCopy, 0);
        if (v32)
          APSLogErrorAt();
      }
      else
      {
        APSLogErrorAt();
        v32 = -16741;
      }
      v18 = v28;
    }
    if (cf)
      CFRelease(cf);
    if (value)
      CFRelease(value);
    if (MutableCopy)
      CFRelease(MutableCopy);
    v29 = v32;
    if (v32)
      goto LABEL_59;
  }
  else
  {
    LODWORD(value) = 0;
    CMBaseObjectGetDerivedStorage();
    v13 = APEndpointPlaybackSessionGetMediaTypeFromPlayParams(v9);
    v14 = CFDictionaryGetInt64();
    CFStringGetTypeID();
    CFDictionaryGetTypedValue();
    v15 = &unk_1EF906000;
    if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
      && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v19 = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v9);
    if (!v19)
    {
      APSLogErrorAt();
      v29 = -16741;
LABEL_59:
      APSLogErrorAt();
      goto LABEL_48;
    }
    v20 = v19;
    apPlayback_appendCommonPlayParamsToMessage(v8, v14 != 0, v13, v27, v19);
    LODWORD(value) = apPlayback_sendPlistMessageCreatingReply(v8, 1886151033, v20, 0);
    if ((_DWORD)value)
      APSLogErrorAt();
    CFRelease(v20);
    v18 = v28;
    v29 = (int)value;
    if ((_DWORD)value)
      goto LABEL_59;
  }
  if (v18)
  {
    v21 = *a1;
    v22 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    MEMORY[0x1CAA400CC](v22[6]);
    if (v22[12])
    {
      v23 = v15[184];
      if (v23 <= 30 && (v23 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      v22[13] = APMetadataSourceAddEventCallback(v22[12], v21, (uint64_t)apPlayback_handleMetadataEvent);
    }
    MEMORY[0x1CAA400E4](v22[6]);
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 48));
  *(_BYTE *)(DerivedStorage + 56) = 1;
  apPlayback_handlePlaybackStateChanged(*a1, (const void *)*MEMORY[0x1E0CA4080]);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 48));
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
LABEL_48:
  if (v29)
    goto LABEL_49;
  v24 = (void (*)(_QWORD, uint64_t))a1[2];
  if (v24)
    v24(0, a1[3]);
  CFRelease((CFTypeRef)*a1);
  v25 = (const void *)a1[1];
  if (v25)
    CFRelease(v25);
}

uint64_t apPlayback_ensureLocalPlaybackServerCreated()
{
  _QWORD *v0;
  uint64_t CMBaseObject;
  uint64_t (*v2)(uint64_t, _QWORD, _QWORD, CFDataRef *);
  uint64_t v3;
  char v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v8;
  unsigned int (*v9)(CFTypeRef, const char *, uint64_t, _QWORD, _QWORD, uint64_t, const void **);
  const void *v10;
  CFTypeRef cf[4];
  CFDataRef theData;
  UInt8 buffer[28];
  unsigned int v15;
  const void *v16;
  CFRange v17;

  v15 = 0;
  theData = 0;
  v0 = (_QWORD *)(CMBaseObjectGetDerivedStorage() + 216);
  if (*v0)
    return v15;
  memset(buffer, 0, sizeof(buffer));
  CMBaseObject = FigTransportStreamGetCMBaseObject();
  v2 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFDataRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v2)
  {
    v15 = -12782;
LABEL_13:
    APSLogErrorAt();
    goto LABEL_22;
  }
  v3 = *MEMORY[0x1E0C9AE00];
  v15 = v2(CMBaseObject, *MEMORY[0x1E0CF1F68], *MEMORY[0x1E0C9AE00], &theData);
  if (v15)
    goto LABEL_13;
  v17.location = 0;
  v17.length = 28;
  CFDataGetBytes(theData, v17, buffer);
  v4 = APSGetFBOPropertyInt64() != 0;
  if (v15)
    goto LABEL_13;
  if (!apPlayback_isTLSEnabled())
  {
    v10 = 0;
    goto LABEL_19;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  v16 = 0;
  v6 = APSenderSessionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 16));
  v7 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (!v7 || v7(v6, CFSTR("KeyHolder"), v3, cf))
    goto LABEL_15;
  v8 = cf[0];
  if (cf[0])
  {
    v9 = *(unsigned int (**)(CFTypeRef, const char *, uint64_t, _QWORD, _QWORD, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v9 && !v9(v8, "Pair-TLS-PSK", 12, 0, 0, 16, &v16))
    {
LABEL_16:
      if (cf[0])
        CFRelease(cf[0]);
      goto LABEL_18;
    }
LABEL_15:
    APSLogErrorAt();
    goto LABEL_16;
  }
LABEL_18:
  v10 = v16;
LABEL_19:
  *(_OWORD *)cf = *(_OWORD *)buffer;
  *(_OWORD *)((char *)&cf[1] + 4) = *(_OWORD *)&buffer[12];
  v15 = APLocalPlaybackServerMake(cf, v4, v10, v0);
  if (!v15)
  {
    if (!v10)
      goto LABEL_22;
    goto LABEL_21;
  }
  APSLogErrorAt();
  if (v10)
LABEL_21:
    CFRelease(v10);
LABEL_22:
  if (theData)
    CFRelease(theData);
  return v15;
}

void apPlayback_appendCommonPlayParamsToMessage(uint64_t a1, int a2, uint64_t a3, const void *a4, __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v9 = DerivedStorage;
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 48));
    MEMORY[0x1CAA400E4](*(_QWORD *)(v9 + 48));
    APSVolumeConvertDBToClampedSliderValue();
  }
  CFDictionarySetDouble();
  GetDeviceModelString();
  CFDictionarySetCString();
  GetSystemBuildVersionString();
  CFDictionarySetCString();
  CFDictionarySetInt64();
  if (a4)
    CFDictionarySetValue(a5, CFSTR("audioMode"), a4);
}

BOOL apPlayback_isTLSEnabled()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  unsigned int (*v2)(uint64_t, uint64_t);
  uint64_t CMBaseObject;
  uint64_t (*v4)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  _BOOL8 v5;
  CFTypeRef cf;
  int v8;

  v8 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v1 = *(_QWORD *)(DerivedStorage + 32);
  v2 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v2 || !v2(v1, 35))
    goto LABEL_10;
  CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 16));
  v4 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v4)
  {
    v8 = -12782;
    goto LABEL_9;
  }
  v8 = v4(CMBaseObject, CFSTR("KeyHolder"), *MEMORY[0x1E0C9AE00], &cf);
  if (v8)
  {
LABEL_9:
    APSLogErrorAt();
LABEL_10:
    v5 = 0;
    goto LABEL_11;
  }
  if (!cf)
    return 0;
  v5 = APSGetFBOPropertyInt64() != 0;
  if (v8)
    APSLogErrorAt();
LABEL_11:
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t apPlayback_sendPlistMessageCreatingReply(uint64_t a1, uint64_t a2, CFDataRef a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  CFDataRef Data;
  uint64_t BlockBufferWithCFDataNoCopy;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, CFTypeRef, CFTypeRef *);
  uint64_t v13;
  const void *v14;
  const __CFAllocator *v15;
  uint64_t CFDataWithBlockBufferNoCopy;
  CFPropertyListRef v17;
  CFTypeID v18;
  CFTypeRef v20;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v20 = 0;
  cf = 0;
  if (a3)
  {
    Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (!Data)
    {
      APSLogErrorAt();
      v14 = 0;
      v13 = 4294950555;
      goto LABEL_19;
    }
    a3 = Data;
    BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
    if ((_DWORD)BlockBufferWithCFDataNoCopy)
    {
      v13 = BlockBufferWithCFDataNoCopy;
      APSLogErrorAt();
      v14 = 0;
      goto LABEL_18;
    }
    v10 = cf;
  }
  else
  {
    v10 = 0;
  }
  v11 = *(_QWORD *)(DerivedStorage + 184);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 56);
  if (!v12)
  {
    v13 = 4294954514;
    goto LABEL_15;
  }
  v13 = v12(v11, a2, v10, &v20);
  if ((_DWORD)v13)
  {
LABEL_15:
    APSLogErrorAt();
    goto LABEL_16;
  }
  v14 = 0;
  if (!a4 || !v20)
  {
LABEL_17:
    if (!a3)
      goto LABEL_19;
    goto LABEL_18;
  }
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
  if ((_DWORD)CFDataWithBlockBufferNoCopy)
  {
    v13 = CFDataWithBlockBufferNoCopy;
    goto LABEL_15;
  }
  v17 = CFPropertyListCreateWithData(v15, 0, 0, 0, 0);
  v14 = v17;
  if (v17)
  {
    v18 = CFGetTypeID(v17);
    if (v18 == CFDictionaryGetTypeID())
    {
      v13 = 0;
      *a4 = v14;
LABEL_16:
      v14 = 0;
      goto LABEL_17;
    }
  }
  APSLogErrorAt();
  v13 = 4294950556;
  if (a3)
LABEL_18:
    CFRelease(a3);
LABEL_19:
  if (cf)
    CFRelease(cf);
  if (v20)
    CFRelease(v20);
  if (v14)
    CFRelease(v14);
  return v13;
}

void apPlayback_handleMetadataEvent(uint64_t a1, const void *a2, int a3, const void *a4)
{
  int v4;

  if (!a4)
  {
    APSLogErrorAt();
    return;
  }
  if (a3 > 1836217186)
  {
    if (a3 > 1886547814)
    {
      if (a3 == 1886547815)
        return;
      v4 = 1952807028;
    }
    else
    {
      if (a3 == 1836217187)
        return;
      v4 = 1852860704;
    }
    goto LABEL_11;
  }
  if (a3 == 1634629920)
  {
    apPlayback_SetProxiedProperty(a2, CFSTR("metaData"), 0, a4);
    return;
  }
  if (a3 != 1634890784)
  {
    v4 = 1836216435;
LABEL_11:
    if (a3 != v4
      && gLogCategory_APEndpointPlaybackSessionAirPlay <= 90
      && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
}

void apPlayback_insertPlayQueueItemInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFString *v3;
  const __CFString *v4;
  const __CFAllocator *v5;
  __CFDictionary *MutableCopy;
  const void *v7;
  uint64_t TypedValue;
  const __CFString *v9;
  const __CFString *v10;
  __CFDictionary *Mutable;
  __CFDictionary *v12;
  const void *v13;
  void (*v14)(_QWORD, _QWORD);
  const void *v15;
  const void *v16;
  int v17;
  CFTypeRef cf;
  void *value;
  unsigned int v20;

  v20 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  value = 0;
  APEndpointPlaybackSessionGetMediaTypeFromPlayParams(*(const __CFDictionary **)(a1 + 8));
  if (!*(_QWORD *)(DerivedStorage + 184))
  {
    v12 = 0;
    MutableCopy = 0;
    goto LABEL_16;
  }
  v3 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), (const void *)*MEMORY[0x1E0CA3EA8]);
  if (!v3)
  {
    APSLogErrorAt();
    v12 = 0;
    MutableCopy = 0;
    v17 = -16740;
LABEL_38:
    v20 = v17;
    goto LABEL_16;
  }
  v4 = v3;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFDictionaryRef *)(a1 + 8));
  if (!MutableCopy)
  {
    APSLogErrorAt();
    v12 = 0;
LABEL_37:
    v17 = -16741;
    goto LABEL_38;
  }
  v7 = (const void *)*MEMORY[0x1E0CA3E08];
  CFStringGetTypeID();
  TypedValue = CFDictionaryGetTypedValue();
  if (TypedValue)
  {
    v9 = (const __CFString *)TypedValue;
    if (apPlayback_isTLSEnabled())
      CFDictionarySetValue(MutableCopy, CFSTR("tlsPSKEnabled"), (const void *)*MEMORY[0x1E0C9AE50]);
    v20 = apPlayback_ensureLocalPlaybackServerCreated();
    if (v20
      || (CFStringGetTypeID(),
          v10 = (const __CFString *)CFDictionaryGetTypedValue(),
          (v20 = APLocalPlaybackServerRegisterPathWithUUIDCreatingHostAndURL(*(_QWORD *)(DerivedStorage + 216), v4, v9, v10, (CFTypeRef *)&value, (CFStringRef *)&cf)) != 0))
    {
      APSLogErrorAt();
      v12 = 0;
      goto LABEL_16;
    }
    CFDictionarySetInt64();
    CFDictionarySetValue(MutableCopy, CFSTR("host"), value);
    CFDictionarySetValue(MutableCopy, v7, cf);
  }
  else
  {
    CFDictionarySetInt64();
  }
  Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v12 = Mutable;
  if (!Mutable)
  {
    APSLogErrorAt();
    goto LABEL_37;
  }
  CFDictionarySetValue(Mutable, CFSTR("item"), MutableCopy);
  v13 = *(const void **)(a1 + 16);
  if (v13)
    CFDictionarySetValue(v12, CFSTR("afterItem"), v13);
  v20 = apPlayback_performRemoteActionInternal(*(_QWORD *)a1, CFSTR("playlistInsert"), v12, 0, 0);
  if (v20)
    APSLogErrorAt();
LABEL_16:
  v14 = *(void (**)(_QWORD, _QWORD))(a1 + 24);
  if (v14)
    v14(v20, *(_QWORD *)(a1 + 32));
  if (value)
    CFRelease(value);
  if (cf)
    CFRelease(cf);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v12)
    CFRelease(v12);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v15 = *(const void **)(a1 + 8);
  if (v15)
    CFRelease(v15);
  v16 = *(const void **)(a1 + 16);
  if (v16)
    CFRelease(v16);
}

uint64_t apPlayback_performRemoteActionInternal(uint64_t a1, const void *a2, const void *a3, void (*a4)(uint64_t, const void *, uint64_t), uint64_t a5)
{
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  uint64_t v12;
  uint64_t Int64;
  const void *Value;
  CFDictionaryRef theDict;

  theDict = 0;
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 184))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v11 = Mutable;
    if (!Mutable)
    {
      APSLogErrorAt();
      Value = 0;
      Int64 = 4294950555;
      goto LABEL_7;
    }
    CFDictionarySetValue(Mutable, CFSTR("type"), a2);
    if (a3)
      CFDictionarySetValue(v11, CFSTR("params"), a3);
    v12 = apPlayback_sendPlistMessageCreatingReply(a1, 1633907822, v11, &theDict);
    if (!(_DWORD)v12)
    {
      Int64 = CFDictionaryGetInt64();
      Value = CFDictionaryGetValue(theDict, CFSTR("params"));
      goto LABEL_7;
    }
    Int64 = v12;
    APSLogErrorAt();
  }
  else
  {
    Int64 = 0;
    v11 = 0;
  }
  Value = 0;
LABEL_7:
  if (a4)
    a4(Int64, Value, a5);
  if (v11)
    CFRelease(v11);
  if (theDict)
    CFRelease(theDict);
  return Int64;
}

void apPlayback_removePlayQueueItemInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *Value;
  const void *v5;
  uint64_t v6;
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD);
  const void *v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 184))
  {
    v3 = DerivedStorage;
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), (const void *)*MEMORY[0x1E0CA3EA8]);
    if (Value)
    {
      v5 = Value;
      v6 = *(_QWORD *)(v3 + 216);
      if (v6)
        APLocalPlaybackServerUnRegisterUUID(v6, v5);
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v8 = Mutable;
      if (Mutable)
      {
        CFDictionarySetValue(Mutable, CFSTR("item"), *(const void **)(a1 + 8));
        v9 = apPlayback_performRemoteActionInternal(*(_QWORD *)a1, CFSTR("playlistRemove"), v8, 0, 0);
        if ((_DWORD)v9)
          APSLogErrorAt();
      }
      else
      {
        APSLogErrorAt();
        v9 = 4294950555;
      }
    }
    else
    {
      APSLogErrorAt();
      v8 = 0;
      v9 = 4294950556;
    }
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = *(void (**)(uint64_t, _QWORD))(a1 + 16);
  if (v10)
    v10(v9, *(_QWORD *)(a1 + 24));
  if (v8)
    CFRelease(v8);
  v11 = *(const void **)(a1 + 8);
  if (v11)
    CFRelease(v11);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

void apPlayback_stopInternal(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  void (*v4)(uint64_t, _QWORD);

  v2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 184);
  if (v2)
  {
    v3 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (v3)
    {
      v2 = v3(v2, 1937010544, 0, 0);
      if (!(_DWORD)v2)
        apPlayback_unsubscribeMetadataEvents();
    }
    else
    {
      v2 = 4294954514;
    }
    APSLogErrorAt();
  }
  v4 = *(void (**)(uint64_t, _QWORD))(a1 + 8);
  if (v4)
    v4(v2, *(_QWORD *)(a1 + 16));
  CFRelease(*(CFTypeRef *)a1);
}

void apPlayback_getPlaybackInfoInternal(uint64_t a1)
{
  uint64_t Value;
  uint64_t (*v3)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  uint64_t v4;
  CFTypeRef v5;
  const __CFAllocator *v6;
  uint64_t CFDataWithBlockBufferNoCopy;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  CFTypeID v10;
  const __CFDictionary *v11;
  double v12;
  Float64 Seconds;
  CFDateRef v14;
  const __CFDictionary *v15;
  void (*v16)(CFTypeRef, uint64_t, _QWORD);
  CFTypeRef v17;
  CFTypeRef cf;
  CMTime time;
  CMTime v20;
  CFDataRef data;

  v17 = 0;
  cf = 0;
  Value = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 184);
  if (!Value)
    goto LABEL_13;
  v3 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v3)
  {
    Value = 4294954514;
LABEL_12:
    APSLogErrorAt();
LABEL_13:
    v15 = 0;
    goto LABEL_25;
  }
  v4 = v3(Value, 1886283375, 0, &cf);
  if ((_DWORD)v4)
  {
    Value = v4;
    goto LABEL_12;
  }
  v5 = cf;
  data = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
  if ((_DWORD)CFDataWithBlockBufferNoCopy)
  {
    Value = CFDataWithBlockBufferNoCopy;
    APSLogErrorAt();
    v15 = 0;
    v9 = 0;
    v14 = 0;
    goto LABEL_17;
  }
  v8 = (const __CFDictionary *)CFPropertyListCreateWithData(v6, data, 1uLL, 0, 0);
  v9 = v8;
  if (!v8 || (v10 = CFGetTypeID(v8), v10 != CFDictionaryGetTypeID()))
  {
    APSLogErrorAt();
    v15 = 0;
    v14 = 0;
    Value = 4294950556;
    goto LABEL_17;
  }
  Value = (uint64_t)CFDictionaryGetValue(v9, (const void *)*MEMORY[0x1E0CA3F00]);
  if (Value)
  {
    v11 = (const __CFDictionary *)CMGetAttachment(v5, (CFStringRef)*MEMORY[0x1E0CF75B0], 0);
    if (v11)
    {
      memset(&v20, 0, sizeof(v20));
      CMTimeMakeFromDictionary(&v20, v11);
      v12 = MEMORY[0x1CAA3ED94](Value);
      time = v20;
      Seconds = CMTimeGetSeconds(&time);
      v14 = CFDateCreate(0, v12 + Seconds);
      if (!v14)
      {
        APSLogErrorAt();
        v15 = 0;
        Value = 4294950555;
        goto LABEL_17;
      }
      CFDictionarySetValue(v9, CFSTR("Start-Estimated-Date"), v14);
      Value = 0;
      goto LABEL_16;
    }
    Value = 0;
  }
  v14 = 0;
LABEL_16:
  v15 = v9;
  v9 = 0;
LABEL_17:
  if (data)
    CFRelease(data);
  if (v9)
    CFRelease(v9);
  if (v14)
    CFRelease(v14);
  if ((_DWORD)Value
    || (Value = APEndpointPlaybackSessionCreatePlayPlaybackInfoTimesInCMTime(v15, (__CFDictionary **)&v17), (_DWORD)Value))
  {
    APSLogErrorAt();
  }
LABEL_25:
  v16 = *(void (**)(CFTypeRef, uint64_t, _QWORD))(a1 + 8);
  if (v16)
    v16(v17, Value, *(_QWORD *)(a1 + 16));
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  if (v17)
    CFRelease(v17);
  CFRelease(*(CFTypeRef *)a1);
}

void apPlayback_seekToTimeInternal(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  const __CFDictionary *v4;
  __CFDictionary *MutableCopy;
  uint64_t DerivedStorage;
  const void *v7;
  uint64_t UInt64;
  CFDataRef v9;
  CFDataRef v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void (*v14)(_QWORD, uint64_t, _QWORD);
  const void *v15;
  uint64_t v16;
  __int128 v17;
  CMTime time;
  void *v19;

  v19 = 0;
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 184))
  {
    MutableCopy = 0;
    Mutable = 0;
    v13 = 0;
LABEL_48:
    v7 = 0;
    goto LABEL_27;
  }
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable || (time = *(CMTime *)(a1 + 8), CMTimeGetSeconds(&time), ASPrintF(), !v19))
  {
    APSLogErrorAt();
    MutableCopy = 0;
LABEL_50:
    v7 = 0;
    v13 = 4294950555;
    goto LABEL_27;
  }
  CFDictionarySetCString();
  v4 = *(const __CFDictionary **)(a1 + 32);
  if (v4)
  {
    MutableCopy = CFDictionaryCreateMutableCopy(v2, 0, v4);
    if (!MutableCopy)
    {
LABEL_49:
      APSLogErrorAt();
      goto LABEL_50;
    }
  }
  else
  {
    MutableCopy = 0;
  }
  if (!APSGetFBOPropertyInt64())
  {
    v7 = 0;
    goto LABEL_23;
  }
  if (!MutableCopy)
  {
    MutableCopy = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!MutableCopy)
      goto LABEL_49;
  }
  v17 = *(_OWORD *)(a1 + 40);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  UInt64 = FigCFNumberCreateUInt64();
  if (!UInt64)
  {
    APSLogErrorAt();
LABEL_47:
    v13 = 4294950555;
    APSLogErrorAt();
    goto LABEL_48;
  }
  v7 = (const void *)UInt64;
  ++*(_QWORD *)(DerivedStorage + 152);
  *(_OWORD *)&time.value = v17;
  v9 = CFDataCreate(v2, (const UInt8 *)&time, 16);
  if (!v9)
  {
    APSLogErrorAt();
    CFRelease(v7);
    goto LABEL_47;
  }
  v10 = v9;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 160), v7, v10);
  CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 160));
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 50
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRelease(v10);
  CFDictionarySetValue(MutableCopy, CFSTR("messageID"), v7);
LABEL_23:
  v11 = apPlayback_sendSpecialPlistMessageCreatingReply(*(_QWORD *)a1, 1936024939, Mutable, MutableCopy, 0);
  if (!(_DWORD)v11)
  {
    if (v7)
    {
      free(v19);
      v12 = 0;
LABEL_31:
      CFRelease(Mutable);
      goto LABEL_32;
    }
    v13 = 0;
    goto LABEL_27;
  }
  v13 = v11;
  APSLogErrorAt();
  if (!v7)
  {
LABEL_27:
    v12 = 1;
    goto LABEL_28;
  }
  v16 = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
    && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(v16 + 168));
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v16 + 160), v7);
  MEMORY[0x1CAA400E4](*(_QWORD *)(v16 + 168));
  v12 = 0;
LABEL_28:
  v14 = *(void (**)(_QWORD, uint64_t, _QWORD))(a1 + 40);
  if (v14)
    v14(0, v13, *(_QWORD *)(a1 + 48));
  free(v19);
  if (Mutable)
    goto LABEL_31;
LABEL_32:
  CFRelease(*(CFTypeRef *)a1);
  v15 = *(const void **)(a1 + 32);
  if (v15)
    CFRelease(v15);
  if ((v12 & 1) == 0)
    CFRelease(v7);
  if (MutableCopy)
    CFRelease(MutableCopy);
}

uint64_t apPlayback_sendSpecialPlistMessageCreatingReply(uint64_t a1, uint64_t a2, __CFDictionary *a3, CFDataRef Data, _QWORD *a5)
{
  const __CFAllocator **v10;
  uint64_t v11;
  const void *v12;
  const __CFAllocator *v13;
  uint64_t CFDataWithBlockBufferNoCopy;
  CFPropertyListRef v15;
  CFTypeID v16;
  CFTypeRef cf;

  CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!a3)
  {
    APSLogErrorAt();
    v12 = 0;
    v11 = 4294950556;
    goto LABEL_14;
  }
  v10 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (Data)
  {
    Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Data, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (!Data)
    {
      APSLogErrorAt();
      v12 = 0;
      v11 = 4294950555;
      goto LABEL_14;
    }
  }
  v11 = apPlayback_sendSpecialMessageCreatingReply(a1, a2, a3, Data, (uint64_t)&cf);
  if ((_DWORD)v11)
  {
LABEL_23:
    APSLogErrorAt();
    goto LABEL_11;
  }
  v12 = 0;
  if (!a5 || !cf)
  {
LABEL_12:
    if (!Data)
      goto LABEL_14;
    goto LABEL_13;
  }
  v13 = *v10;
  CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
  if ((_DWORD)CFDataWithBlockBufferNoCopy)
  {
    v11 = CFDataWithBlockBufferNoCopy;
    goto LABEL_23;
  }
  v15 = CFPropertyListCreateWithData(v13, 0, 0, 0, 0);
  v12 = v15;
  if (v15)
  {
    v16 = CFGetTypeID(v15);
    if (v16 == CFDictionaryGetTypeID())
    {
      v11 = 0;
      *a5 = v12;
LABEL_11:
      v12 = 0;
      goto LABEL_12;
    }
  }
  APSLogErrorAt();
  v11 = 4294950556;
  if (Data)
LABEL_13:
    CFRelease(Data);
LABEL_14:
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  return v11;
}

void apPlayback_setProxiedPropertyInternal(uint64_t a1)
{
  CFMutableDictionaryRef Mutable;
  void (*v3)(_QWORD, uint64_t, _QWORD);
  const void *v4;
  const void *v5;
  const void *v6;
  uint64_t v7;

  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 184))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
      ASPrintF();
    APSLogErrorAt();
    v7 = 4294950555;
  }
  else
  {
    Mutable = 0;
    v7 = 0;
  }
  v3 = *(void (**)(_QWORD, uint64_t, _QWORD))(a1 + 32);
  if (v3)
    v3(0, v7, *(_QWORD *)(a1 + 40));
  free(0);
  if (Mutable)
    CFRelease(Mutable);
  v4 = *(const void **)(a1 + 8);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 16);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 24);
  if (v6)
    CFRelease(v6);
  CFRelease(*(CFTypeRef *)a1);
}

void apPlayback_setRateInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  __int128 v3;
  CMTimeEpoch v4;
  _QWORD *v5;
  __CFDictionary *Mutable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  int v9;
  const void *v10;
  uint64_t Int64;
  unint64_t Value;
  const __CFDictionary *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, CMTime *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  void (*v21)(uint64_t, _QWORD);
  const void *v22;
  __int128 v23;
  CMTime hostTime;
  CMTime v25;
  CMTime v26;
  _OWORD v27[2];
  char __str[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  *(_OWORD *)__str = 0u;
  v29 = 0u;
  memset(v27, 0, sizeof(v27));
  v26 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v3 = *MEMORY[0x1E0CF7500];
  *(_OWORD *)&v25.value = *MEMORY[0x1E0CF7500];
  v4 = *(_QWORD *)(MEMORY[0x1E0CF7500] + 16);
  v25.epoch = v4;
  if (!*(_QWORD *)(DerivedStorage + 184))
  {
    v18 = 0;
    Mutable = 0;
    goto LABEL_47;
  }
  v5 = (_QWORD *)DerivedStorage;
  v23 = v3;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v14 = 0;
    v18 = 4294950555;
    goto LABEL_37;
  }
  v7 = v5[4];
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v8)
    v9 = v8(v7, 69);
  else
    v9 = 0;
  if (*(_QWORD *)(a1 + 16))
  {
    v10 = (const void *)*MEMORY[0x1E0CA3D70];
    Int64 = CFDictionaryGetInt64();
    Value = 0;
    v13 = *(const __CFDictionary **)(a1 + 16);
    if (v13)
    {
      v14 = 0;
      if (v9)
      {
        Value = (unint64_t)CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E0CA3DC0]);
        if (FigCFDictionaryGetCMTimeIfPresent())
        {
          v14 = v5[3];
          if (!v14)
          {
            APSLogErrorAt();
            v18 = 4294950553;
            goto LABEL_37;
          }
          if ((v26.flags & 1) != 0)
          {
            hostTime = v26;
            v15 = CMClockConvertHostTimeToSystemUnits(&hostTime);
            v16 = *(unsigned int (**)(uint64_t, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 16);
            if (!v16 || v16(v14, v15, &v25))
            {
              if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 90
                && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
              {
                hostTime = v26;
                CMTimeGetSeconds(&hostTime);
                LogPrintF();
              }
              *(_OWORD *)&v25.value = v23;
              v25.epoch = v4;
            }
          }
          hostTime = v25;
          v14 = APSNetworkTimeCopyAsDictionary();
        }
        else
        {
          v14 = 0;
        }
      }
    }
    else
    {
      v14 = 0;
    }
    if (Value | v14)
    {
      FigCFDictionarySetFloat32();
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      if (Int64)
        CFDictionarySetValue(Mutable, v10, (const void *)*MEMORY[0x1E0C9AE50]);
      if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
        && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v19 = apPlayback_sendPlistMessageCreatingReply(*(_QWORD *)a1, 1918984564, Mutable, 0);
      if ((_DWORD)v19)
      {
        v18 = v19;
        APSLogErrorAt();
        goto LABEL_37;
      }
      goto LABEL_34;
    }
    if (Int64)
    {
      strcpy((char *)v27, "&forInterstitial=1");
      BYTE3(v27[1]) = unk_1C964DBCB;
      DWORD1(v27[1]) = unk_1C964DBCC;
      *((_QWORD *)&v27[1] + 1) = unk_1C964DBD0;
    }
  }
  snprintf(__str, 0x80uLL, "/rate?value=%f%s", *(float *)(a1 + 8), (const char *)v27);
  CFDictionarySetCString();
  v17 = apPlayback_sendSpecialPlistMessageCreatingReply(*(_QWORD *)a1, 1918989413, Mutable, 0, 0);
  v14 = 0;
  if ((_DWORD)v17)
  {
    v18 = v17;
    APSLogErrorAt();
LABEL_47:
    v14 = 0;
    goto LABEL_37;
  }
LABEL_34:
  MEMORY[0x1CAA400CC](v5[6]);
  v20 = (const void **)MEMORY[0x1E0CA4078];
  if (*(float *)(a1 + 8) != 0.0)
    v20 = (const void **)MEMORY[0x1E0CA4080];
  apPlayback_handlePlaybackStateChanged(*(_QWORD *)a1, *v20);
  MEMORY[0x1CAA400E4](v5[6]);
  v18 = 0;
LABEL_37:
  v21 = *(void (**)(uint64_t, _QWORD))(a1 + 24);
  if (v21)
    v21(v18, *(_QWORD *)(a1 + 32));
  if (Mutable)
    CFRelease(Mutable);
  CFRelease(*(CFTypeRef *)a1);
  v22 = *(const void **)(a1 + 16);
  if (v22)
    CFRelease(v22);
  if (v14)
    CFRelease((CFTypeRef)v14);
}

void apPlayback_getProxiedPropertyInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  uint64_t v7;
  uint64_t Int64;
  const void *Value;
  void (*v10)(_QWORD, const void *, uint64_t, _QWORD);
  const void *v11;
  const void *v12;
  CFDictionaryRef theDict;
  void *v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theDict = 0;
  v14 = 0;
  if (!*(_QWORD *)(DerivedStorage + 184))
  {
    Mutable = 0;
    v6 = 0;
    Value = 0;
    Int64 = 0;
    goto LABEL_12;
  }
  v3 = DerivedStorage;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v6 = 0;
    goto LABEL_29;
  }
  ASPrintF();
  CFDictionarySetCString();
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v6)
    {
      if (FigCFEqual() && APEndpointDescriptionIsSourceVersionOlderThan(*(_QWORD *)(v3 + 32), 0x657DA5u))
      {
        FigCFDictionaryGetValue();
        FigCFDictionarySetValue();
      }
      else
      {
        CFDictionarySetValue(v6, CFSTR("qualifier"), *(const void **)(a1 + 16));
      }
      goto LABEL_10;
    }
    APSLogErrorAt();
LABEL_29:
    Value = 0;
    Int64 = 4294950555;
    goto LABEL_12;
  }
  v6 = 0;
LABEL_10:
  v7 = apPlayback_sendSpecialPlistMessageCreatingReply(*(_QWORD *)a1, 1735422066, Mutable, v6, &theDict);
  if ((_DWORD)v7)
  {
    Int64 = v7;
    APSLogErrorAt();
    Value = 0;
  }
  else
  {
    Int64 = CFDictionaryGetInt64();
    Value = CFDictionaryGetValue(theDict, CFSTR("value"));
  }
LABEL_12:
  v10 = *(void (**)(_QWORD, const void *, uint64_t, _QWORD))(a1 + 24);
  if (v10)
    v10(*(_QWORD *)(a1 + 8), Value, Int64, *(_QWORD *)(a1 + 32));
  free(v14);
  if (Mutable)
    CFRelease(Mutable);
  if (v6)
    CFRelease(v6);
  if (theDict)
    CFRelease(theDict);
  CFRelease(*(CFTypeRef *)a1);
  v11 = *(const void **)(a1 + 8);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(a1 + 16);
  if (v12)
    CFRelease(v12);
}

void apPlayback_deferredPerformRemoteActionInternal(uint64_t a1)
{
  const void *v2;
  const void *v3;

  apPlayback_performRemoteActionInternal(*(_QWORD *)a1, *(const void **)(a1 + 8), *(const void **)(a1 + 16), *(void (**)(uint64_t, const void *, uint64_t))(a1 + 24), *(_QWORD *)(a1 + 32));
  CFRelease(*(CFTypeRef *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 16);
  if (v3)
    CFRelease(v3);
}

void apPlayback_SetEventHandlerInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)(DerivedStorage + 128) = *(_OWORD *)(a1 + 8);
  v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    v4 = *(const void **)(DerivedStorage + 144);
    *(_QWORD *)(DerivedStorage + 144) = v3;
    CFRetain(v3);
    if (v4)
      CFRelease(v4);
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v5 = *(const void **)(a1 + 24);
  if (v5)
    CFRelease(v5);
}

void apPlayback_processPendingAudioVolumeChanges(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  float v7;
  char __str[16];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  *(_OWORD *)__str = 0u;
  v9 = 0u;
  if (*(_QWORD *)(DerivedStorage + 184))
  {
    v3 = DerivedStorage;
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 48));
    v4 = *(unsigned __int8 *)(v3 + 92);
    *(_BYTE *)(v3 + 92) = 0;
    MEMORY[0x1CAA400E4](*(_QWORD *)(v3 + 48));
    if (v4)
    {
      if (gLogCategory_APEndpointPlaybackSessionAirPlay <= 30
        && (gLogCategory_APEndpointPlaybackSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v6 = Mutable;
        APSVolumeConvertDBToClampedSliderValue();
        snprintf(__str, 0x80uLL, "/volume?volume=%f", v7);
        CFDictionarySetCString();
        if (apPlayback_sendSpecialPlistMessageCreatingReply((uint64_t)a1, 1886809964, v6, 0, 0))
          APSLogErrorAt();
        CFRelease(v6);
      }
      else
      {
        APSLogErrorAt();
      }
    }
  }
  CFRelease(a1);
}

uint64_t APSRTPPacketHandlerCreate(const __CFAllocator *a1, int a2, unsigned int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t Instance;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  void (*v22)(_QWORD);
  uint64_t *v23;

  if (APSRTPPacketHandlerGetTypeID_once != -1)
    dispatch_once(&APSRTPPacketHandlerGetTypeID_once, &__block_literal_global_21);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt();
    if (a4)
    {
      v22 = *(void (**)(_QWORD))(a4 + 8);
      if (v22)
        v22(*(_QWORD *)a4);
    }
    v11 = 0;
    v14 = 4294960568;
    goto LABEL_32;
  }
  v11 = Instance;
  bzero((void *)(Instance + 16), 0x6A8uLL);
  *(_DWORD *)(v11 + 24) = a2;
  *(_DWORD *)(v11 + 28) = a3;
  if (!a4)
  {
    if ((a2 & 1) == 0)
      goto LABEL_29;
LABEL_11:
    APSLogErrorAt();
    v14 = 4294960591;
    goto LABEL_12;
  }
  v12 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v11 + 32) = *(_OWORD *)a4;
  *(_OWORD *)(v11 + 48) = v12;
  if ((a2 & 1) == 0)
    goto LABEL_29;
  if (!*(_QWORD *)(a4 + 16))
    goto LABEL_11;
  if (a3 < 2)
  {
    *(_QWORD *)(v11 + 96) = 0;
LABEL_14:
    v15 = a3 + 20;
    v16 = CFAllocatorAllocate(a1, 8 * (v15 + 2 * v15), 0);
    *(_QWORD *)(v11 + 64) = v16;
    if (!v16)
    {
LABEL_30:
      v14 = 0;
      goto LABEL_32;
    }
    *(_QWORD *)(v11 + 72) = v15;
    bzero(v16, 8 * (v15 + 2 * v15));
    v17 = CMSimpleQueueCreate(a1, v15, (CMSimpleQueueRef *)(v11 + 80));
    if ((_DWORD)v17)
    {
      v14 = v17;
    }
    else
    {
      v23 = a5;
      if ((_DWORD)v15)
      {
        for (i = 0; 24 * v15 != i; i += 24)
        {
          v14 = (*(uint64_t (**)(_QWORD, uint64_t))(v11 + 48))(*(_QWORD *)(v11 + 32), *(_QWORD *)(v11 + 64) + i + 8);
          if ((_DWORD)v14 || (v19 = *(_QWORD *)(v11 + 64), !*(_QWORD *)(v19 + i + 8)))
          {
            if (gLogCategory_APSRTPPacketHandler <= 90
              && (gLogCategory_APSRTPPacketHandler != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            if ((_DWORD)v14)
            {
              APSLogErrorAt();
              a5 = v23;
              goto LABEL_12;
            }
            v19 = *(_QWORD *)(v11 + 64);
          }
          CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(v11 + 80), (const void *)(v19 + i));
        }
      }
      v20 = CMSimpleQueueCreate(a1, v15, (CMSimpleQueueRef *)(v11 + 88));
      a5 = v23;
      if (!(_DWORD)v20)
      {
LABEL_29:
        if ((a2 & 2) != 0)
        {
          QueueInit(a1, v11 + 1664, *(_DWORD *)(v11 + 28) - 1);
          v14 = 0;
          *(_QWORD *)(v11 + 1656) = 0;
          *(_QWORD *)(v11 + 160) = 0;
          *(_QWORD *)(v11 + 168) = v11 + 176;
          goto LABEL_32;
        }
        goto LABEL_30;
      }
      v14 = v20;
    }
    goto LABEL_41;
  }
  v13 = CMSimpleQueueCreate(a1, a3 - 1, (CMSimpleQueueRef *)(v11 + 96));
  if (!(_DWORD)v13)
  {
    QueueInit(a1, v11 + 104, *(_DWORD *)(v11 + 28) - 1);
    goto LABEL_14;
  }
  v14 = v13;
LABEL_41:
  APSLogErrorAt();
LABEL_12:
  CFRelease((CFTypeRef)v11);
  v11 = 0;
LABEL_32:
  *a5 = v11;
  return v14;
}

uint64_t QueueInit(const __CFAllocator *a1, uint64_t a2, unsigned int a3)
{
  void *v5;

  *(_QWORD *)a2 = a1;
  if (a3)
    v5 = CFAllocatorAllocate(a1, 4 * a3, 0);
  else
    v5 = 0;
  *(_QWORD *)(a2 + 32) = v5;
  *(_DWORD *)(a2 + 44) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 40) = a3;
  return __strlcpy_chk();
}

void APSRTPPacketHandlerFinalize(CFTypeRef cf)
{
  const void *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  const void *v8;
  void (*v9)(_QWORD);
  const __CFAllocator *v10;
  void *v11;
  void *v12;
  const void *v13;
  void (*v14)(_QWORD);

  if (gLogCategory_APSRTPPacketHandler <= 30
    && (gLogCategory_APSRTPPacketHandler != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = (const void *)*((_QWORD *)cf + 12);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)cf + 12) = 0;
  v3 = (const void *)*((_QWORD *)cf + 10);
  if (v3)
    CFRelease(v3);
  *((_QWORD *)cf + 10) = 0;
  v4 = (const void *)*((_QWORD *)cf + 11);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)cf + 11) = 0;
  v5 = *((_QWORD *)cf + 8);
  if (v5)
  {
    if (*((_QWORD *)cf + 9))
    {
      v6 = 0;
      v7 = 0;
      do
      {
        v8 = *(const void **)(v5 + v6 + 16);
        if (v8)
        {
          CFRelease(v8);
          v5 = *((_QWORD *)cf + 8);
          *(_QWORD *)(v5 + v6 + 16) = 0;
        }
        if (*(_QWORD *)(v5 + v6 + 8))
        {
          v9 = (void (*)(_QWORD))*((_QWORD *)cf + 7);
          if (v9)
          {
            v9(*((_QWORD *)cf + 4));
            v5 = *((_QWORD *)cf + 8);
          }
          *(_QWORD *)(v5 + v6 + 8) = 0;
        }
        ++v7;
        v6 += 24;
      }
      while (v7 < *((_QWORD *)cf + 9));
    }
    v10 = CFGetAllocator(cf);
    CFAllocatorDeallocate(v10, *((void **)cf + 8));
  }
  *((_QWORD *)cf + 8) = 0;
  v11 = (void *)*((_QWORD *)cf + 212);
  if (v11)
  {
    CFAllocatorDeallocate(*((CFAllocatorRef *)cf + 208), v11);
    *((_QWORD *)cf + 212) = 0;
  }
  *((_DWORD *)cf + 428) = 0;
  *((_QWORD *)cf + 213) = 0;
  v12 = (void *)*((_QWORD *)cf + 17);
  if (v12)
  {
    CFAllocatorDeallocate(*((CFAllocatorRef *)cf + 13), v12);
    *((_QWORD *)cf + 17) = 0;
  }
  *((_DWORD *)cf + 38) = 0;
  *((_QWORD *)cf + 18) = 0;
  v13 = (const void *)*((_QWORD *)cf + 20);
  if (v13)
  {
    CFRelease(v13);
    *((_QWORD *)cf + 20) = 0;
  }
  *((_DWORD *)cf + 7) = 0;
  v14 = (void (*)(_QWORD))*((_QWORD *)cf + 5);
  if (v14)
    v14(*((_QWORD *)cf + 4));
  if (gLogCategory_APSRTPPacketHandler <= 30
    && (gLogCategory_APSRTPPacketHandler != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

_QWORD *APSRTPPacketHandlerGetEmptyBBuf(uint64_t a1)
{
  int32_t Count;
  int32_t v3;
  const void *v4;
  _QWORD *v5;
  _QWORD *v6;
  const void *v7;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if (CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(a1 + 88)) >= 1)
    {
      Count = CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(a1 + 88));
      if (Count)
      {
        v3 = Count;
        do
        {
          v4 = CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 88));
          if (v4)
            CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 80), v4);
          --v3;
        }
        while (v3);
      }
    }
    v5 = CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 80));
    v6 = v5;
    if (v5)
    {
      v7 = (const void *)v5[2];
      v6[2] = 0;
      if (v7)
        CFRelease(v7);
      *(_DWORD *)v6 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 0;
  }
  return v6;
}

uint64_t APSRTPPacketHandlerReturnBBuf(uint64_t a1, _QWORD *element)
{
  const void *v4;

  if ((*(_BYTE *)(a1 + 24) & 1) == 0 || !element)
    return APSLogErrorAt();
  v4 = (const void *)element[2];
  element[2] = 0;
  if (v4)
    CFRelease(v4);
  return CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 80), element);
}

uint64_t APSRTPPacketHandlerReturnComposedBBuf(uint64_t a1, _QWORD *element)
{
  const void *v4;

  if ((*(_BYTE *)(a1 + 24) & 1) == 0 || !element)
    return APSLogErrorAt();
  v4 = (const void *)element[2];
  element[2] = 0;
  if (v4)
    CFRelease(v4);
  return CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 88), element);
}

uint64_t APSRTPPacketHandlerComposeRTPPacketWithBBuf(uint64_t a1, _QWORD *a2, unsigned int a3, int *a4, _DWORD *a5)
{
  int32_t Count;
  int32_t v11;
  uint64_t AudioDataHeader;
  uint64_t v13;
  uint64_t AudioDataTimestamp;
  uint64_t AudioDataPointer;
  _BYTE *v16;
  int v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v32;
  _BYTE *element;

  Count = CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(a1 + 96));
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    APSLogErrorAt();
    v32 = 4294960561;
    goto LABEL_62;
  }
  if (!a4 || !a2 || !a5)
  {
    APSLogErrorAt();
    v32 = 4294960591;
    goto LABEL_62;
  }
  v11 = Count;
  *a5 = 0;
  AudioDataHeader = APSTransportMessageGetAudioDataHeader();
  if ((_DWORD)AudioDataHeader)
  {
    v32 = AudioDataHeader;
LABEL_61:
    APSLogErrorAt();
    goto LABEL_62;
  }
  v13 = APSTransportMessageSetAudioDataHeader();
  if ((_DWORD)v13)
  {
    v32 = v13;
    goto LABEL_61;
  }
  *a4 = *(_DWORD *)a2;
  AudioDataTimestamp = APSTransportMessageGetAudioDataTimestamp();
  if ((_DWORD)AudioDataTimestamp)
  {
    v32 = AudioDataTimestamp;
    goto LABEL_61;
  }
  AudioDataPointer = APSTransportMessageGetAudioDataPointer();
  if ((_DWORD)AudioDataPointer)
  {
    v32 = AudioDataPointer;
    goto LABEL_61;
  }
  if (*(_DWORD *)(a1 + 28) < 2u)
    goto LABEL_47;
  v16 = 0;
  v17 = *(_DWORD *)a2;
  if (*(int *)a2 > 100)
  {
    if (v17 == 101)
    {
      v17 = 105;
    }
    else if (v17 == 106)
    {
      v17 = 108;
    }
  }
  else if (v17 == 96)
  {
    v17 = 97;
  }
  else if (v17 == 100)
  {
    v17 = 104;
  }
  element = a2;
  *a4 = v17;
  if (*(_DWORD *)(a1 + 152))
  {
    APSTransportMessageGetAudioDataPointer();
    APSTransportMessageGetAudioDataPointer();
    v19 = *(_DWORD *)(a1 + 148);
    v18 = *(_DWORD *)(a1 + 152);
    if (v18)
      v19 = (v18 + v19 - 1) % *(_DWORD *)(a1 + 144);
    QueueIsIndexInRange((_DWORD *)(a1 + 104), v19);
    v20 = a3 + (unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 136) + 4 * v19) + 5;
    if (a3 + (unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 136) + 4 * v19) == -5)
    {
      v22 = 1;
      do
      {
        v21 = v22;
        if (!QueueIsIndexInRange((_DWORD *)(a1 + 104), v19) || v19 == *(_DWORD *)(a1 + 148))
          break;
        if (!v19)
          v19 = *(_DWORD *)(a1 + 144);
        QueueIsIndexInRange((_DWORD *)(a1 + 104), --v19);
        v20 += *(unsigned int *)(*(_QWORD *)(a1 + 136) + 4 * v19) + 4;
        v22 = v21 + 1;
      }
      while (!v20);
    }
    else
    {
      v21 = 0;
    }
  }
  else
  {
    v21 = 0;
  }
  v23 = 1;
  if (!v11)
  {
LABEL_46:
    a2 = element;
    *v16 = *element & 0x7F;
LABEL_47:
    v30 = APSTransportMessageGetAudioDataPointer();
    if (!(_DWORD)v30)
    {
      APSLogErrorAt();
      v32 = 4294960569;
      goto LABEL_62;
    }
    v32 = v30;
    goto LABEL_61;
  }
  v24 = 0;
  while (1)
  {
    v25 = CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 96));
    if (!v25)
    {
      APSLogErrorAt();
      return 0;
    }
    v26 = v25;
    if (v24 >= v11 - v21)
      break;
LABEL_39:
    if (v24 || v11 != *(_DWORD *)(a1 + 28) - 1)
    {
      CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 96), v26);
    }
    else
    {
      APSRTPPacketHandlerReturnBBuf(a1, v26);
      v29 = *(_DWORD *)(a1 + 152);
      if (v29 && v29 == *(_DWORD *)(a1 + 144))
      {
        *(_DWORD *)(a1 + 148) = (*(_DWORD *)(a1 + 148) + 1) % v29;
        *(_DWORD *)(a1 + 152) = v29 - 1;
      }
    }
    if (v11 == ++v24)
      goto LABEL_46;
  }
  v27 = APSTransportMessageGetAudioDataPointer();
  if ((_DWORD)v27)
  {
    v32 = v27;
    goto LABEL_53;
  }
  v28 = APSTransportMessageGetAudioDataTimestamp();
  if (!(_DWORD)v28)
  {
    *(_DWORD *)v16 = bswap32((*v26 << 24) | 0x80000000);
    v16 += 4;
    ++v23;
    goto LABEL_39;
  }
  v32 = v28;
LABEL_53:
  APSLogErrorAt();
  a2 = element;
LABEL_62:
  if (gLogCategory_APSRTPPacketHandler <= 90
    && (gLogCategory_APSRTPPacketHandler != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
    APSRTPPacketHandlerReturnBBuf(a1, a2);
  return v32;
}

uint64_t QueueAddEntry(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(result + 48);
  v3 = *(_DWORD *)(result + 40);
  if (v2 >= v3)
  {
    if (v3)
    {
      if (gLogCategory_APSRTPPacketHandler <= 90)
      {
        if (gLogCategory_APSRTPPacketHandler != -1)
          return LogPrintF();
        result = _LogCategory_Initialize();
        if ((_DWORD)result)
          return LogPrintF();
      }
    }
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(result + 32) + 4 * ((*(_DWORD *)(result + 44) + v2) % v3)) = a2;
    ++*(_DWORD *)(result + 48);
  }
  return result;
}

uint64_t APSRTPPacketHandlerReadNewMessage(uint64_t a1, void *cf, char a3)
{
  uint64_t DataPointer;
  size_t DataLength;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  unsigned int *v16;
  int v17;

  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if (cf)
    {
      if (*(_QWORD *)(a1 + 160))
      {
        if (gLogCategory_APSRTPPacketHandler <= 60
          && (gLogCategory_APSRTPPacketHandler != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CFRelease(*(CFTypeRef *)(a1 + 160));
      }
      *(_QWORD *)(a1 + 160) = CFRetain(cf);
      DataPointer = CMBlockBufferGetDataPointer((CMBlockBufferRef)cf, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
      if (lengthAtOffsetOut >= 0x5C9)
      {
        APSLogErrorAt();
        APSSignalErrorAt();
      }
      else
      {
        memcpy((void *)(*(_QWORD *)(a1 + 168) + 2), dataPointerOut, lengthAtOffsetOut);
        *(_BYTE *)(*(_QWORD *)(a1 + 168) + 1) = a3;
        DataLength = CMBlockBufferGetDataLength((CMBlockBufferRef)cf);
        v8 = *(_QWORD *)(a1 + 168);
        *(_QWORD *)(v8 + 1472) = DataLength + 2;
        *(_DWORD *)(a1 + 1660) = 0;
        v9 = 1;
        v10 = (*(_BYTE *)(v8 + 1) & 0x7F) - 96;
        if (v10 <= 0xD
          && (((1 << v10) & 0x3302) != 0 || (*(_BYTE *)(v8 + 1) & 0x7F) == 0x60 && *(_DWORD *)(a1 + 28) >= 2u))
        {
          v17 = 0;
          v16 = (unsigned int *)(v8 + 12);
          while (1)
          {
            APSRTPPacketHandlerReadExtendedHeader(v16, &v17, &v16);
            if ((v17 & 0x80) == 0)
              break;
            if (++v9 > *(_DWORD *)(a1 + 28))
            {
              if (gLogCategory_APSRTPPacketHandler <= 90
                && (gLogCategory_APSRTPPacketHandler != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              v9 = 0;
              break;
            }
          }
        }
        *(_DWORD *)(a1 + 1656) = v9;
        v11 = *(_DWORD *)(a1 + 1712);
        if (v11)
        {
          v12 = (v11 + *(_DWORD *)(a1 + 1708) - 1) % *(_DWORD *)(a1 + 1704);
          QueueIsIndexInRange((_DWORD *)(a1 + 1664), v12);
          if (bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 168) + 2)) >> 16 != (unsigned __int16)(*(_WORD *)(*(_QWORD *)(a1 + 1696) + 4 * v12) + 1)
            && gLogCategory_APSRTPPacketHandler <= 30
            && (gLogCategory_APSRTPPacketHandler != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
      }
    }
    else
    {
      APSLogErrorAt();
      return 4294960591;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960561;
  }
  return DataPointer;
}

uint64_t APSRTPPacketHandlerDecryptCurrentMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AudioAADPointer;
  uint64_t (*v10)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v11;
  uint64_t v13;

  v13 = 0;
  if ((*(_BYTE *)(a1 + 24) & 2) == 0)
  {
    APSLogErrorAt();
    return 4294960561;
  }
  if (!*(_QWORD *)(a1 + 160) || (v3 = *(_QWORD *)(a1 + 168)) == 0)
  {
    APSLogErrorAt();
    return 0;
  }
  v5 = (*(_BYTE *)(v3 + 1) & 0x7F) - 96;
  if (v5 <= 0xD && (((1 << v5) & 0x3302) != 0 || (*(_BYTE *)(v3 + 1) & 0x7F) == 0x60 && *(_DWORD *)(a1 + 28) >= 2u))
  {
    v6 = (4 * *(_DWORD *)(a1 + 1656) - 3);
    v7 = v3 + v6 + 12;
    v8 = *(_QWORD *)(v3 + 1472) - v6;
  }
  else
  {
    v7 = v3 + 12;
    v8 = *(_QWORD *)(v3 + 1472);
  }
  AudioAADPointer = APSTransportMessageGetAudioAADPointer();
  if ((_DWORD)AudioAADPointer)
  {
    v11 = AudioAADPointer;
    goto LABEL_15;
  }
  v10 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v10)
  {
    v11 = 4294954514;
    goto LABEL_15;
  }
  v11 = v10(a2, 0, 0, v7, v8 - 12, v7, 1472, &v13);
  if ((_DWORD)v11)
  {
LABEL_15:
    APSLogErrorAt();
    return v11;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 168) + 1472) += v13 - v8 + 12;
  return v11;
}

uint64_t APSRTPPacketHandlerGetNextPacket(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int SeqNumOfPacket;
  int v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  uint64_t v19;
  unsigned int i;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  const void *v29;
  unsigned int v31;
  int v32;
  unsigned int v33;

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    v4 = a1 + 1664;
    while (1)
    {
      v5 = *(_DWORD *)(a1 + 1660);
      if (v5 >= *(_DWORD *)(a1 + 1656))
        return 0;
      v6 = *(_QWORD *)(a1 + 168);
      if (!v6)
        goto LABEL_59;
      v7 = (*(_BYTE *)(v6 + 1) & 0x7F) - 96;
      if (v7 <= 0xD && (((1 << v7) & 0x3302) != 0 || !v7 && *(_DWORD *)(a1 + 28) >= 2u))
      {
        SeqNumOfPacket = APSRTPPacketHandlerGetSeqNumOfPacket(a1, *(_DWORD *)(a1 + 1660));
        v9 = *(_DWORD *)(a1 + 1712);
        if (v9)
        {
          v10 = *(_DWORD *)(a1 + 1708);
          while (*(_DWORD *)(*(_QWORD *)(a1 + 1696) + 4 * (v10 % *(_DWORD *)(a1 + 1704))) != SeqNumOfPacket)
          {
            ++v10;
            if (!--v9)
              goto LABEL_15;
          }
          v11 = 1;
          goto LABEL_47;
        }
      }
LABEL_15:
      v12 = *(_DWORD *)(a1 + 1656);
      if (v12 > v5)
      {
        v13 = *(_QWORD *)(a1 + 168);
        if (v13)
          break;
      }
      APSLogErrorAt();
LABEL_35:
      if (*(_DWORD *)(a1 + 1656) > v5 && (v22 = *(_QWORD *)(a1 + 168)) != 0)
      {
        v32 = 0;
        v23 = *(_DWORD *)(v22 + 8);
        *(_QWORD *)a2 = *(_QWORD *)v22;
        *(_DWORD *)(a2 + 8) = v23;
        v24 = *(_QWORD *)(a1 + 168);
        v25 = (*(_BYTE *)(v24 + 1) & 0x7F) - 96;
        if (v25 <= 0xD
          && (((1 << v25) & 0x3302) != 0 || (*(_BYTE *)(v24 + 1) & 0x7F) == 0x60 && *(_DWORD *)(a1 + 28) >= 2u))
        {
          if (*(_DWORD *)(a1 + 1656) - 1 <= v5)
          {
            v26 = bswap32(*(_DWORD *)(v24 + 4));
          }
          else
          {
            v33 = 0;
            APSRTPPacketHandlerGetExtendedHeaderOfPacket(a1, v5, &v33);
            v26 = bswap32(*(_DWORD *)(*(_QWORD *)(a1 + 168) + 4)) - ((v33 >> 8) & 0x3FFF);
          }
          *(_DWORD *)(a2 + 4) = bswap32(v26);
          *(_WORD *)(a2 + 2) = __rev16(APSRTPPacketHandlerGetSeqNumOfPacket(a1, v5));
          APSRTPPacketHandlerGetExtendedHeaderOfPacket(a1, v5, &v32);
          *(_BYTE *)(a2 + 1) = v32 & 0x7F;
        }
      }
      else
      {
        APSLogErrorAt();
      }
      v27 = *(_DWORD *)(a1 + 1712);
      if (v27 && v27 == *(_DWORD *)(a1 + 1704))
      {
        *(_DWORD *)(a1 + 1708) = (*(_DWORD *)(a1 + 1708) + 1) % v27;
        *(_DWORD *)(a1 + 1712) = v27 - 1;
      }
      QueueAddEntry(v4, bswap32(*(unsigned __int16 *)(a2 + 2)) >> 16);
      v11 = 0;
LABEL_47:
      v28 = *(_DWORD *)(a1 + 1660) + 1;
      *(_DWORD *)(a1 + 1660) = v28;
      if (v28 == *(_DWORD *)(a1 + 1656))
      {
        v29 = *(const void **)(a1 + 160);
        if (v29)
          CFRelease(v29);
        *(_QWORD *)(a1 + 160) = 0;
      }
      if ((v11 & 1) == 0)
        return 1;
    }
    v14 = *(_BYTE *)(v13 + 1) & 0x7F;
    if ((v14 - 96) <= 0xD)
    {
      if (((1 << (v14 - 96)) & 0x3302) != 0)
      {
        v31 = 0;
        v15 = v14 - 97;
        v16 = v15 > 0xC;
        v17 = (1 << v15) & 0x1981;
        if (v16 || v17 == 0)
          goto LABEL_24;
        goto LABEL_23;
      }
      if (v14 == 96 && *(_DWORD *)(a1 + 28) >= 2u)
      {
        v31 = 0;
LABEL_23:
        v13 += 4 * v12 - 3;
LABEL_24:
        v19 = v13 + 12;
        if (v5)
        {
          for (i = 0; i != v5; ++i)
          {
            APSRTPPacketHandlerGetExtendedHeaderOfPacket(a1, i, &v31);
            v19 += (unint64_t)v31 >> 22;
          }
          v12 = *(_DWORD *)(a1 + 1656);
        }
        *(_QWORD *)(a2 + 16) = v19;
        if (v12 - 1 <= v5)
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 1472) - (v19 - *(_QWORD *)(a1 + 168));
        }
        else
        {
          APSRTPPacketHandlerGetExtendedHeaderOfPacket(a1, v5, &v31);
          v21 = (unint64_t)v31 >> 22;
        }
        goto LABEL_34;
      }
    }
    *(_QWORD *)(a2 + 16) = v13 + 12;
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 1472) - 12;
LABEL_34:
    *(_QWORD *)(a2 + 24) = v21;
    goto LABEL_35;
  }
LABEL_59:
  APSLogErrorAt();
  return 0;
}

uint64_t QueueIsIndexInRange(_DWORD *a1, unsigned int a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  uint64_t result;

  v2 = a1[11];
  v3 = a1[12];
  v4 = v2;
  if (!v3 || (v4 = (v3 + v2 - 1) % a1[10], v2 <= v4))
  {
    if (v2 <= a2 && v4 >= a2)
      return 1;
    if (gLogCategory_APSRTPPacketHandler <= 90)
    {
      if (gLogCategory_APSRTPPacketHandler != -1)
        goto LABEL_14;
      result = _LogCategory_Initialize();
      if ((_DWORD)result)
        goto LABEL_14;
      return result;
    }
    return 0;
  }
  result = 1;
  if (v2 <= a2 || v4 >= a2)
    return result;
  if (gLogCategory_APSRTPPacketHandler > 90)
    return 0;
  if (gLogCategory_APSRTPPacketHandler != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
  {
LABEL_14:
    LogPrintF();
    return 0;
  }
  return result;
}

unsigned int *APSRTPPacketHandlerReadExtendedHeader(unsigned int *result, _DWORD *a2, unsigned int **a3)
{
  int v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int *v7;

  if (!a2)
    return (unsigned int *)APSLogErrorAt();
  v3 = *(char *)result;
  v4 = *(unsigned __int8 *)result;
  *a2 = v4;
  if (v3 < 0)
  {
    v5 = bswap32(*result);
    v4 |= (v5 >> 2) & 0x3FFF00 | (v5 << 22);
    *a2 = v4;
  }
  if (a3)
  {
    v6 = (v4 & 0x80) == 0;
    v7 = result + 1;
    if (v6)
      v7 = (unsigned int *)((char *)result + 1);
    *a3 = v7;
  }
  return result;
}

uint64_t APSRTPPacketHandlerGetSeqNumOfPacket(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    return (unsigned __int16)(a2 - *(_DWORD *)(a1 + 1656) + (bswap32(*(unsigned __int16 *)(v2 + 2)) >> 16) + 1);
  }
  else
  {
    APSLogErrorAt();
    LOWORD(v3) = 0;
  }
  return (unsigned __int16)v3;
}

unsigned int *APSRTPPacketHandlerGetExtendedHeaderOfPacket(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 168);
  if (v3)
    return APSRTPPacketHandlerReadExtendedHeader((unsigned int *)(v3 + 4 * a2 + 12), a3, 0);
  else
    return (unsigned int *)APSLogErrorAt();
}

uint64_t APAuthenticationClientFairPlayCreate(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
  {
    APAuthenticationClientGetClassID();
    v5 = CMDerivedObjectCreate();
    if ((_DWORD)v5)
    {
      v6 = v5;
      APSLogErrorAt();
    }
    else
    {
      *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8) = a2;
      CFRetain(a2);
      if (gLogCategory_APAuthenticationClientFairPlay <= 30
        && (gLogCategory_APAuthenticationClientFairPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v6 = 0;
      *a3 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294895495;
  }
  return v6;
}

void fpAuthentication_Finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAuthenticationClientFairPlay <= 30
    && (gLogCategory_APAuthenticationClientFairPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*DerivedStorage)
  {
    IPaI1oem5iL();
    *DerivedStorage = 0;
  }
  v1 = (const void *)DerivedStorage[1];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[1] = 0;
  }
}

__CFString *fpAuthentication_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APAuthenticationClientFairPlay %p>"), a1);
  return Mutable;
}

uint64_t fpAuthentication_GetAuthenticationType()
{
  return 4;
}

uint64_t fpAuthentication_AuthenticateEndpoint()
{
  _QWORD *DerivedStorage;
  uint64_t FairPlayHWInfo;
  uint64_t v2;
  uint64_t v3;
  uint64_t BlockBufferCopyingMemoryBlock;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t (*v7)(uint64_t, uint64_t, CFTypeRef, CFTypeRef *);
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v11;
  CFTypeRef cf;
  char v13;
  int v14;
  uint64_t v15;
  size_t lengthAtOffsetOut;
  char *dataPointerOut[5];

  dataPointerOut[4] = *(char **)MEMORY[0x1E0C80C00];
  lengthAtOffsetOut = 0;
  dataPointerOut[0] = 0;
  v14 = 0;
  v13 = -1;
  v11 = 0;
  cf = 0;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v15 = 0;
  if (gLogCategory_APAuthenticationClientFairPlay <= 40
    && (gLogCategory_APAuthenticationClientFairPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  memset(&dataPointerOut[1], 0, 24);
  FairPlayHWInfo = GetFairPlayHWInfo();
  if ((_DWORD)FairPlayHWInfo)
  {
    v9 = FairPlayHWInfo;
  }
  else
  {
    if (*DerivedStorage)
    {
      IPaI1oem5iL();
      *DerivedStorage = 0;
    }
    cp2g1b9ro();
    if ((_DWORD)v2)
    {
      v9 = v2;
    }
    else
    {
      lengthAtOffsetOut = 0;
      dataPointerOut[0] = 0;
      Mib5yocT();
      if ((_DWORD)v3)
      {
LABEL_22:
        v9 = v3;
      }
      else
      {
        while (1)
        {
          if (!v13)
          {
            v9 = 0;
            goto LABEL_24;
          }
          if (v13 != 1)
          {
            APSLogErrorAt();
            v9 = 4294895494;
            goto LABEL_24;
          }
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          if (v11)
          {
            CFRelease(v11);
            v11 = 0;
          }
          BlockBufferCopyingMemoryBlock = FigCreateBlockBufferCopyingMemoryBlock();
          if ((_DWORD)BlockBufferCopyingMemoryBlock)
          {
            v9 = BlockBufferCopyingMemoryBlock;
            goto LABEL_39;
          }
          if (v15)
          {
            jEHf8Xzsv8K(v15);
            v15 = 0;
          }
          v5 = DerivedStorage[1];
          v6 = cf;
          v7 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 56);
          if (!v7)
          {
            v9 = 4294954514;
            goto LABEL_39;
          }
          v8 = v7(v5, 1718628917, v6, &v11);
          if ((_DWORD)v8)
            break;
          CMBlockBufferGetDataPointer((CMBlockBufferRef)v11, 0, &lengthAtOffsetOut, 0, dataPointerOut);
          Mib5yocT();
          if ((_DWORD)v3)
            goto LABEL_22;
        }
        v9 = v8;
      }
    }
  }
LABEL_39:
  APSLogErrorAt();
LABEL_24:
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  if (v15)
  {
    jEHf8Xzsv8K(v15);
    v15 = 0;
  }
  if ((_DWORD)v9)
  {
    if (*DerivedStorage)
    {
      IPaI1oem5iL();
      *DerivedStorage = 0;
    }
    if (gLogCategory_APAuthenticationClientFairPlay <= 60
      && (gLogCategory_APAuthenticationClientFairPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  return v9;
}

uint64_t fpAuthentication_CreateEncryptedKey(uint64_t a1, const __CFData *a2, const __CFAllocator *a3, CFDataRef *a4)
{
  uint64_t v7;
  CFDataRef v8;
  uint64_t v9;
  uint64_t i;
  UInt8 buffer[16];
  uint64_t v13;
  CFRange v14;

  v13 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)CMBaseObjectGetDerivedStorage())
  {
    v9 = 4294895493;
LABEL_10:
    APSLogErrorAt();
    goto LABEL_5;
  }
  v14.location = 0;
  v14.length = 16;
  CFDataGetBytes(a2, v14, buffer);
  U4HBs();
  if ((_DWORD)v7)
  {
    v9 = v7;
    goto LABEL_10;
  }
  v8 = CFDataCreate(a3, 0, 0);
  if (v8)
  {
    v9 = 0;
    *a4 = v8;
  }
  else
  {
    APSLogErrorAt();
    v9 = 4294895496;
  }
LABEL_5:
  jEHf8Xzsv8K(0);
  for (i = 0; i != 16; ++i)
    buffer[i] = 0;
  return v9;
}

uint64_t APEndpointStreamAggregateAudioCreate(const __CFAllocator *a1, const void *a2, uint64_t a3, const void *a4, const void *a5, uint64_t a6, char a7, char a8, char a9, char a10, char a11, const void *a12, _QWORD *a13)
{
  uint64_t v19;
  uint64_t DerivedStorage;
  CFTypeRef v21;
  uint64_t v22;
  uint64_t UpTimeNanoseconds;
  CFStringRef v24;
  const __CFAllocator *v25;
  CFMutableDictionaryRef Mutable;
  CFMutableArrayRef v27;
  CFMutableDictionaryRef v28;
  CFMutableDictionaryRef v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CFMutableDictionaryRef v33;
  uint64_t v34;
  uint64_t v35;
  dispatch_queue_t v36;
  const void *v37;
  const void *v38;
  NSObject *v39;
  void *v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  char v47;
  _QWORD handler[5];
  char label[64];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (!a2 || !a5)
    goto LABEL_42;
  FigEndpointStreamAirPlayGetClassID();
  v19 = CMDerivedObjectCreate();
  if ((_DWORD)v19)
  {
    v44 = v19;
LABEL_60:
    APSLogErrorAt();
    return v44;
  }
  v47 = a7;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 192) = CFRetain(a2);
  *(_BYTE *)(DerivedStorage + 200) = a8;
  *(_BYTE *)(DerivedStorage + 201) = a9;
  *(_BYTE *)(DerivedStorage + 202) = a10;
  *(_BYTE *)(DerivedStorage + 203) = a11;
  if (a12)
    v21 = CFRetain(a12);
  else
    v21 = 0;
  *(_QWORD *)(DerivedStorage + 216) = v21;
  v22 = FigSimpleMutexCreate();
  *(_QWORD *)DerivedStorage = v22;
  if (!v22)
    goto LABEL_54;
  if (!a4)
  {
LABEL_42:
    APSLogErrorAt();
    return 4294950536;
  }
  *(_QWORD *)(DerivedStorage + 176) = CFRetain(a4);
  *(_QWORD *)(DerivedStorage + 184) = CFRetain(a5);
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  v24 = CFStringCreateWithFormat(a1, 0, CFSTR("%@-%llu-%@"), a3, UpTimeNanoseconds, a2);
  *(_QWORD *)(DerivedStorage + 24) = v24;
  if (!v24)
    goto LABEL_54;
  v25 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 32) = Mutable;
  if (!Mutable)
    goto LABEL_54;
  v27 = CFArrayCreateMutable(v25, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 40) = v27;
  if (!v27)
    goto LABEL_54;
  v28 = CFDictionaryCreateMutable(v25, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 112) = v28;
  if (!v28)
    goto LABEL_54;
  v29 = CFDictionaryCreateMutable(v25, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 120) = v29;
  if (!v29)
    goto LABEL_54;
  *(_DWORD *)(DerivedStorage + 48) = 0;
  v30 = CMSimpleQueueCreate(v25, 32, (CMSimpleQueueRef *)(DerivedStorage + 88));
  if ((_DWORD)v30)
  {
    v44 = v30;
    goto LABEL_60;
  }
  SNPrintF();
  v31 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 208) = v31;
  if (!v31
    || (SNPrintF(), v32 = FigDispatchQueueCreateWithPriority(), (*(_QWORD *)(DerivedStorage + 96) = v32) == 0)
    || (v33 = CFDictionaryCreateMutable(v25, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
        (*(_QWORD *)(DerivedStorage + 104) = v33) == 0))
  {
LABEL_54:
    APSLogErrorAt();
    return 4294950535;
  }
  *(_DWORD *)(DerivedStorage + 144) = 1065353216;
  *(_DWORD *)(DerivedStorage + 148) = FigGetCFPreferenceNumberWithDefault();
  *(_BYTE *)(DerivedStorage + 153) = 0;
  if (*(_BYTE *)(DerivedStorage + 203))
    *(_BYTE *)(DerivedStorage + 153) = APSSettingsIsFeatureEnabled();
  v34 = APSAudioFormatDescriptionListCreate();
  if ((_DWORD)v34)
  {
    v44 = v34;
    goto LABEL_60;
  }
  *(_BYTE *)(DerivedStorage + 17) = FigCFEqual();
  *(_BYTE *)(DerivedStorage + 18) = FigCFEqual();
  *(_BYTE *)(DerivedStorage + 152) = FigCFEqual();
  if (a6)
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)DerivedStorage);
    streamAggregateAudio_addSubStreamFromEndpoint();
    MEMORY[0x1CAA400E4](*(_QWORD *)DerivedStorage);
    goto LABEL_25;
  }
  if (!*(_BYTE *)(DerivedStorage + 202))
  {
LABEL_57:
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  v35 = streamAggregateAudio_enableLocalPlayback(0, v47);
  if ((_DWORD)v35)
  {
    v44 = v35;
    goto LABEL_60;
  }
LABEL_25:
  if (!FigCFDictionaryGetCount())
    goto LABEL_57;
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  SNPrintF();
  v36 = dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 160) = v36;
  if (!v36)
    goto LABEL_54;
  v37 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v37)
  {
    APSLogErrorAt();
    return FigSignalErrorAt();
  }
  v38 = v37;
  v39 = *(NSObject **)(DerivedStorage + 160);
  v40 = (void *)CFRetain(v37);
  dispatch_set_context(v39, v40);
  dispatch_set_finalizer_f(*(dispatch_object_t *)(DerivedStorage + 160), (dispatch_function_t)streamAggregateAudio_darwinQueueFinalizer);
  *(_DWORD *)(DerivedStorage + 168) = -1;
  v41 = CMBaseObjectGetDerivedStorage();
  if ((APSIsAPMSpeaker() || IsAppleTV())
    && (v42 = *(NSObject **)(v41 + 160),
        handler[0] = MEMORY[0x1E0C809B0],
        handler[1] = 0x40000000,
        handler[2] = __streamAggregateAudio_registerForAirPlayPrefsChangedNotification_block_invoke,
        handler[3] = &__block_descriptor_tmp_103,
        handler[4] = v42,
        v43 = notify_register_dispatch("com.apple.airplay.prefsChanged", (int *)(v41 + 168), v42, handler),
        (_DWORD)v43))
  {
    v44 = v43;
    APSLogErrorAt();
  }
  else
  {
    v44 = 0;
    *a13 = 0;
  }
  CFRelease(v38);
  return v44;
}

void streamAggregateAudio_addSubStreamFromEndpoint()
{
  CMBaseObjectGetDerivedStorage();
  if (FigEndpointCopyFirstStreamOfType())
    APSLogErrorAt();
}

uint64_t streamAggregateAudio_enableLocalPlayback(void *a1, char a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (FigCFEqual())
  {
    APSLogErrorAt();
    v5 = APSSignalErrorAt();
  }
  else if (*(_QWORD *)(DerivedStorage + 128))
  {
    v5 = 0;
  }
  else
  {
    v5 = APEndpointStreamLocalCreate(0, CFSTR("Local Playback Stream"), *(const void **)(DerivedStorage + 192), 0, *(const void **)(DerivedStorage + 184), a2, &cf);
    if ((_DWORD)v5)
    {
      APSLogErrorAt();
    }
    else
    {
      streamAggregateAudio_addSubStream(a1, CFSTR("localEndpointKey"), (void *)cf);
      streamAggregateAudio_updateDynamicProperties((uint64_t)a1, 0);
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 120), (CFDictionaryApplierFunction)streamAggregateAudio_setPropertyForLocalSubStreamIterator, a1);
    }
  }
  if (cf)
    CFRelease(cf);
  return v5;
}

void streamAggregateAudio_darwinQueueFinalizer(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t streamAggregateAudio_Finalize()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  opaqueCMSimpleQueue *v15;
  CMSimpleQueueRef *v16;
  void *v17;
  void *v18;
  const void *v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 208);
  if (v1)
  {
    dispatch_release(v1);
    *(_QWORD *)(DerivedStorage + 208) = 0;
  }
  FigSimpleMutexDestroy();
  v2 = *(const void **)(DerivedStorage + 176);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 176) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 184);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 184) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 216);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 216) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 24);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 32);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 40);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 56);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 112);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 120);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 128);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 128) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 136);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 136) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 80);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v14 = *(const void **)(DerivedStorage + 8);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v16 = (CMSimpleQueueRef *)(DerivedStorage + 88);
  v15 = *(opaqueCMSimpleQueue **)(DerivedStorage + 88);
  if (v15)
  {
    v17 = (void *)CMSimpleQueueDequeue(v15);
    if (v17)
    {
      v18 = v17;
      do
      {
        if (gLogCategory_APEndpointStreamAggregateAudio <= 50
          && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        free(v18);
        v18 = (void *)CMSimpleQueueDequeue(*v16);
      }
      while (v18);
    }
    if (*v16)
    {
      CFRelease(*v16);
      *v16 = 0;
    }
    v19 = *(const void **)(DerivedStorage + 104);
    if (v19)
    {
      CFRelease(v19);
      *(_QWORD *)(DerivedStorage + 104) = 0;
    }
  }
  v20 = *(NSObject **)(DerivedStorage + 96);
  if (v20)
  {
    dispatch_release(v20);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  v21 = *(NSObject **)(DerivedStorage + 160);
  if (v21)
  {
    dispatch_release(v21);
    *(_QWORD *)(DerivedStorage + 160) = 0;
  }
  result = *(unsigned int *)(DerivedStorage + 168);
  if ((_DWORD)result != -1)
  {
    result = notify_cancel(result);
    *(_DWORD *)(DerivedStorage + 168) = -1;
  }
  return result;
}

CFStringRef streamAggregateAudio_CopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<APEndpointStreamAggregateAudio %p>"), a1);
}

uint64_t streamAggregateAudio_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  _QWORD *DerivedStorage;
  const void *v9;
  const void *v10;
  uint64_t FigEndpointStreamAudioFormatDescriptionArray;
  int v12;
  const void **v13;
  int v14;
  const __CFDictionary *UInt32;
  uint64_t IntersectionList;
  uint64_t ASRDArrayPCM;
  uint64_t v18;
  uint64_t appended;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CFNumberRef v23;
  int IsCluster;
  const void **v26;
  const void **v27;
  int v28;
  uint64_t valuePtr;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef cf;

  v32 = 0;
  cf = 0;
  v30 = 0;
  v31 = 0;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (gLogCategory_APEndpointStreamAggregateAudio <= 10
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4820]))
  {
    v9 = (const void *)DerivedStorage[24];
    if (!v9)
    {
      APSLogErrorAt();
      v10 = 0;
      FigEndpointStreamAudioFormatDescriptionArray = 4294954516;
      goto LABEL_50;
    }
LABEL_18:
    UInt32 = (const __CFDictionary *)CFRetain(v9);
    if (UInt32)
    {
LABEL_19:
      FigEndpointStreamAudioFormatDescriptionArray = 0;
      v10 = 0;
      *a4 = UInt32;
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4790]))
  {
    v12 = *((_DWORD *)DerivedStorage + 12);
    if (v12 == 4 || v12 == 2)
      v13 = (const void **)MEMORY[0x1E0C9AE50];
    else
      v13 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_17:
    v9 = *v13;
    goto LABEL_18;
  }
  if (CFEqual(a2, CFSTR("IsInUse")))
  {
    v14 = streamAggregateAudio_isInUse(*((_DWORD *)DerivedStorage + 12));
    v13 = (const void **)MEMORY[0x1E0C9AE50];
    if (!v14)
      v13 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_17;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4788]))
  {
    v9 = (const void *)DerivedStorage[3];
    goto LABEL_18;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA47E0]))
  {
    if (CFEqual((CFTypeRef)DerivedStorage[24], (CFTypeRef)*MEMORY[0x1E0CA4890]))
    {
      v10 = (const void *)APSAudioFormatDescriptionListCreateForLowLatencySender();
      IntersectionList = APSAudioFormatDescriptionListCreateIntersectionList();
      if ((_DWORD)IntersectionList)
      {
        FigEndpointStreamAudioFormatDescriptionArray = IntersectionList;
        goto LABEL_71;
      }
      ASRDArrayPCM = APSAudioFormatDescriptionListCreateASRDArrayPCM();
      if ((_DWORD)ASRDArrayPCM)
      {
        FigEndpointStreamAudioFormatDescriptionArray = ASRDArrayPCM;
LABEL_71:
        APSLogErrorAt();
        goto LABEL_50;
      }
LABEL_34:
      FigEndpointStreamAudioFormatDescriptionArray = 0;
      *a4 = (CFDictionaryRef)cf;
      cf = 0;
      goto LABEL_50;
    }
    v18 = APSAudioFormatDescriptionListCreate();
    if ((_DWORD)v18)
    {
      FigEndpointStreamAudioFormatDescriptionArray = v18;
    }
    else
    {
      appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList();
      if ((_DWORD)appended)
      {
        FigEndpointStreamAudioFormatDescriptionArray = appended;
      }
      else
      {
        v20 = APSAudioFormatDescriptionListCreateASRDArrayPCM();
        if (!(_DWORD)v20)
        {
          v10 = 0;
          goto LABEL_34;
        }
        FigEndpointStreamAudioFormatDescriptionArray = v20;
      }
    }
LABEL_90:
    APSLogErrorAt();
    goto LABEL_49;
  }
  if (FigCFEqual())
  {
    APSAudioFormatDescriptionListGetMaxChannelCount();
LABEL_29:
    UInt32 = (const __CFDictionary *)FigCFNumberCreateUInt32();
    goto LABEL_19;
  }
  if (FigCFEqual())
  {
    v21 = streamAggregateAudio_copySupportedAudioFormats(a1, &v31);
    if ((_DWORD)v21)
    {
      FigEndpointStreamAudioFormatDescriptionArray = v21;
    }
    else
    {
      FigEndpointStreamAudioFormatDescriptionArray = APSAudioFormatDescriptionListCreateFigEndpointStreamAudioFormatDescriptionArray();
      if (!(_DWORD)FigEndpointStreamAudioFormatDescriptionArray)
      {
        v10 = 0;
        *a4 = (CFDictionaryRef)v32;
        v32 = 0;
        goto LABEL_50;
      }
    }
    goto LABEL_90;
  }
  if (FigCFEqual())
  {
    v22 = streamAggregateAudio_copySupportedAudioFormats(a1, &v31);
    if ((_DWORD)v22)
    {
      FigEndpointStreamAudioFormatDescriptionArray = v22;
    }
    else
    {
      FigEndpointStreamAudioFormatDescriptionArray = APSAudioFormatDescriptionListCopyRichestFormatAsFigEndpointStreamAudioFormatDescription();
      if (!(_DWORD)FigEndpointStreamAudioFormatDescriptionArray)
      {
        v10 = 0;
        *a4 = (CFDictionaryRef)v30;
        v30 = 0;
        goto LABEL_50;
      }
    }
    goto LABEL_90;
  }
  if (FigCFEqual())
  {
    UInt32 = (const __CFDictionary *)DerivedStorage[1];
    if (!UInt32)
      goto LABEL_19;
LABEL_45:
    UInt32 = (const __CFDictionary *)CFRetain(UInt32);
    goto LABEL_19;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      FigEndpointStreamAudioFormatDescriptionArray = streamAggregateAudio_copySupportedAudioCapabilities(a1, a4);
      if (!(_DWORD)FigEndpointStreamAudioFormatDescriptionArray)
        goto LABEL_49;
      goto LABEL_90;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4748]))
    {
      FigEndpointStreamAudioFormatDescriptionArray = APAudioEngineVendorVend((_QWORD *)DerivedStorage[22], (uint64_t)a4);
      if (!(_DWORD)FigEndpointStreamAudioFormatDescriptionArray)
        goto LABEL_49;
      goto LABEL_90;
    }
    if (CFEqual(a2, CFSTR("HoseRegistrar")))
    {
      UInt32 = (const __CFDictionary *)DerivedStorage[10];
      if (!UInt32)
        goto LABEL_19;
      goto LABEL_45;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4778]))
    {
      IsCluster = streamAggregateAudio_subStreamHasRemoteStreamOrIsCluster();
      v26 = (const void **)MEMORY[0x1E0C9AE40];
      if (IsCluster)
        v26 = (const void **)MEMORY[0x1E0C9AE50];
      goto LABEL_75;
    }
    if (CFEqual(a2, CFSTR("SupportAPAP")))
    {
      v27 = (const void **)MEMORY[0x1E0C9AE50];
      v28 = *((unsigned __int8 *)DerivedStorage + 17);
      goto LABEL_85;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA47F8]))
    {
      v27 = (const void **)MEMORY[0x1E0C9AE50];
      v28 = *((unsigned __int8 *)DerivedStorage + 18);
      goto LABEL_85;
    }
    if (CFEqual(a2, CFSTR("EndpointIDs")))
    {
      FigEndpointStreamAudioFormatDescriptionArray = streamAggregateAudio_copyNonLocalEndpointIDs(a1, (CFTypeRef *)a4);
      if (!(_DWORD)FigEndpointStreamAudioFormatDescriptionArray)
        goto LABEL_49;
      goto LABEL_90;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA47F0]))
    {
      if (APSSettingsIsFeatureEnabled())
      {
        v27 = (const void **)MEMORY[0x1E0C9AE50];
        v28 = *((unsigned __int8 *)DerivedStorage + 152);
LABEL_85:
        if (!v28)
          v27 = (const void **)MEMORY[0x1E0C9AE40];
        UInt32 = (const __CFDictionary *)*v27;
        if (!*v27)
          goto LABEL_19;
        goto LABEL_45;
      }
    }
    else if (!CFEqual(a2, CFSTR("IsSidePlayStream")))
    {
      if (CFEqual(a2, CFSTR("NumberOfSubStreams")))
      {
        streamAggregateAudio_getTotalNumberOfAudioStreams();
        goto LABEL_29;
      }
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4740]))
      {
        v10 = 0;
        FigEndpointStreamAudioFormatDescriptionArray = 4294954512;
        goto LABEL_50;
      }
      if (!*((_BYTE *)DerivedStorage + 153) || streamAggregateAudio_getTotalNumberOfAudioStreams() < 3)
      {
        v26 = (const void **)MEMORY[0x1E0C9AE50];
        goto LABEL_75;
      }
    }
    v26 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_75:
    UInt32 = (const __CFDictionary *)*v26;
    goto LABEL_45;
  }
  valuePtr = APSAudioFormatDescriptionListGetLegacyFormatMask();
  v23 = CFNumberCreate(a3, kCFNumberSInt64Type, &valuePtr);
  *a4 = v23;
  if (v23)
  {
LABEL_48:
    FigEndpointStreamAudioFormatDescriptionArray = 0;
LABEL_49:
    v10 = 0;
    goto LABEL_50;
  }
  APSLogErrorAt();
  v10 = 0;
  FigEndpointStreamAudioFormatDescriptionArray = 4294950535;
LABEL_50:
  MEMORY[0x1CAA400E4](*DerivedStorage);
  if (cf)
    CFRelease(cf);
  if (v32)
    CFRelease(v32);
  if (v31)
    CFRelease(v31);
  if (v10)
    CFRelease(v10);
  if (v30)
    CFRelease(v30);
  return FigEndpointStreamAudioFormatDescriptionArray;
}

uint64_t streamAggregateAudio_SetProperty(void *a1, uint64_t a2, const void *a3)
{
  _QWORD *DerivedStorage;
  CFTypeID v7;
  CFTypeID v8;
  CFTypeID v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  const void *v16;
  CFTypeID v18;
  uint64_t v19;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (FigCFEqual())
  {
    if (a3)
    {
      v7 = CFGetTypeID(a3);
      if (v7 == CFBooleanGetTypeID())
      {
        if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 202))
        {
          v8 = CFGetTypeID(a3);
          if (v8 == CFBooleanGetTypeID())
          {
            if (gLogCategory_APEndpointStreamAggregateAudio <= 50
              && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            if (CFBooleanGetValue((CFBooleanRef)a3))
            {
              v12 = streamAggregateAudio_enableLocalPlayback(a1, 1);
              if ((_DWORD)v12)
              {
                v10 = v12;
LABEL_44:
                APSLogErrorAt();
                goto LABEL_45;
              }
            }
            else
            {
              v13 = CMBaseObjectGetDerivedStorage();
              if (*(_QWORD *)(v13 + 128))
              {
                FigEndpointStreamSuspend();
                v14 = *(_QWORD *)(v13 + 128);
                v15 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
                v10 = v15 ? v15(v14) : 4294954514;
                CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v13 + 32), CFSTR("localEndpointKey"));
                streamAggregateAudio_removeSubStreamNotificationListeners();
                streamAggregateAudio_updateDynamicProperties((uint64_t)a1, 0);
                v16 = *(const void **)(v13 + 128);
                if (v16)
                {
                  CFRelease(v16);
                  *(_QWORD *)(v13 + 128) = 0;
                }
                if ((_DWORD)v10)
                  goto LABEL_44;
              }
            }
            FigCFDictionarySetValue();
            goto LABEL_31;
          }
          APSLogErrorAt();
          v10 = 4294950536;
        }
        else
        {
          APSLogErrorAt();
          v19 = APSSignalErrorAt();
          v10 = 0;
          if (!(_DWORD)v19)
            goto LABEL_32;
          v10 = v19;
        }
LABEL_45:
        APSLogErrorAt();
        goto LABEL_32;
      }
    }
LABEL_43:
    APSLogErrorAt();
    v10 = 4294950536;
    goto LABEL_32;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v11 = (const void *)DerivedStorage[17];
      DerivedStorage[17] = a3;
      if (a3)
        CFRetain(a3);
      if (v11)
        CFRelease(v11);
    }
    else
    {
      if (!FigCFEqual())
      {
        v10 = streamAggregateAudio_setPropertyForAllSubStreamsInternal((uint64_t)a1, a2, (uint64_t)a3);
        if ((_DWORD)v10)
          goto LABEL_45;
        goto LABEL_32;
      }
      if (!a3)
        goto LABEL_43;
      v18 = CFGetTypeID(a3);
      if (v18 != CFNumberGetTypeID())
        goto LABEL_43;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (char *)DerivedStorage + 148);
    }
LABEL_31:
    v10 = 0;
    goto LABEL_32;
  }
  if (!a3)
    goto LABEL_43;
  v9 = CFGetTypeID(a3);
  if (v9 != CFNumberGetTypeID())
    goto LABEL_43;
  v10 = streamAggregateAudio_setAndCacheBufferedLocalVolume((uint64_t)a1, a3);
  if ((_DWORD)v10)
    goto LABEL_45;
LABEL_32:
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return v10;
}

uint64_t streamAggregateAudio_isInUse(unsigned int a1)
{
  uint64_t v1;

  if (a1 >= 5)
  {
    if (gLogCategory_APEndpointStreamAggregateAudio <= 90
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    LOBYTE(v1) = 0;
  }
  else
  {
    return (0x101010000uLL >> (8 * a1));
  }
  return v1;
}

uint64_t streamAggregateAudio_copySupportedAudioFormats(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t IntersectionList;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = 0;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294950536;
  }
  v5 = DerivedStorage;
  if (!CFEqual(*(CFTypeRef *)(DerivedStorage + 192), (CFTypeRef)*MEMORY[0x1E0CA4888]))
  {
    if (CFEqual(*(CFTypeRef *)(v5 + 192), (CFTypeRef)*MEMORY[0x1E0CA4880]))
    {
      v7 = (const void *)APSAudioFormatDescriptionListCreateForRealTimeSender();
      IntersectionList = APSAudioFormatDescriptionListCreateIntersectionList();
      if ((_DWORD)IntersectionList)
      {
        v9 = IntersectionList;
LABEL_13:
        APSLogErrorAt();
        goto LABEL_17;
      }
    }
    else
    {
      if (!CFEqual(*(CFTypeRef *)(v5 + 192), (CFTypeRef)*MEMORY[0x1E0CA4890]))
      {
LABEL_15:
        v7 = 0;
        goto LABEL_16;
      }
      v7 = (const void *)APSAudioFormatDescriptionListCreateForLowLatencySender();
      v10 = APSAudioFormatDescriptionListCreateIntersectionList();
      if ((_DWORD)v10)
      {
        v9 = v10;
        goto LABEL_13;
      }
    }
LABEL_16:
    v9 = 0;
    *a2 = v12;
    v12 = 0;
LABEL_17:
    if (v7)
      CFRelease(v7);
    goto LABEL_19;
  }
  v6 = streamAggregateAudio_copySupportedAudioFormatForBufferAudio(a1, (uint64_t)&v12);
  if (!(_DWORD)v6)
  {
    APSAudioFormatDescriptionListCopyDebugString();
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_15;
  }
  v9 = v6;
  APSLogErrorAt();
LABEL_19:
  if (v12)
    CFRelease(v12);
  return v9;
}

uint64_t streamAggregateAudio_copySupportedAudioCapabilities(uint64_t a1, CFDictionaryRef *a2)
{
  uint64_t v4;
  uint64_t FilteredListWithTranscodeFormats;
  uint64_t v6;
  void *v7;
  const __CFAllocator *v8;
  void *v9;
  CFDictionaryRef v10;
  CFDictionaryRef v11;
  uint64_t v12;
  CFTypeRef cf;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!FigCFEqual())
  {
    v12 = 0;
LABEL_21:
    v7 = 0;
    goto LABEL_11;
  }
  v4 = streamAggregateAudio_copySupportedAudioFormatForBufferAudio(a1, (uint64_t)&cf);
  if ((_DWORD)v4)
  {
    v12 = v4;
LABEL_20:
    APSLogErrorAt();
    goto LABEL_21;
  }
  FilteredListWithTranscodeFormats = APSAudioFormatDescriptionListCreateFilteredListWithTranscodeFormats();
  if ((_DWORD)FilteredListWithTranscodeFormats)
  {
    v12 = FilteredListWithTranscodeFormats;
    goto LABEL_20;
  }
  v6 = APSAudioFormatDescriptionListCopyChannelLayoutTags();
  if ((_DWORD)v6)
  {
    v12 = v6;
    goto LABEL_20;
  }
  v7 = (void *)FigCFDictionaryCopyArrayOfValues();
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = (void *)*MEMORY[0x1E0CA4878];
  values = v7;
  keys[0] = v9;
  v10 = CFDictionaryCreate(v8, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v10)
  {
    v11 = v10;
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v12 = 0;
    *a2 = v11;
  }
  else
  {
    APSLogErrorAt();
    v12 = 4294951816;
  }
LABEL_11:
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
  return v12;
}

uint64_t streamAggregateAudio_subStreamHasRemoteStreamOrIsCluster()
{
  uint64_t v0;
  const __CFArray *v1;
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 200))
    return 1;
  v1 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
  if (!v1)
    return 0;
  v2 = v1;
  Count = CFArrayGetCount(v1);
  if (Count < 1)
  {
LABEL_8:
    v0 = 0;
  }
  else
  {
    v4 = Count;
    v5 = 0;
    while (1)
    {
      CFArrayGetValueAtIndex(v2, v5);
      if (APSGetFBOPropertyInt64())
        break;
      if (v4 == ++v5)
        goto LABEL_8;
    }
    v0 = 1;
  }
  CFRelease(v2);
  return v0;
}

uint64_t streamAggregateAudio_copyNonLocalEndpointIDs(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v5;
  const __CFArray *v6;
  CFIndex v7;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  uint64_t v10;
  const __CFArray *v11;
  uint64_t v12;
  CFArrayRef theArray;
  CFRange v15;

  CMBaseObjectGetDerivedStorage();
  theArray = 0;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294950536;
  }
  v3 = *MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    APSLogErrorAt();
    return 4294950535;
  }
  v5 = Mutable;
  v6 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
  if (CFArrayGetCount(v6) < 1)
  {
LABEL_11:
    v12 = 0;
    *a2 = CFRetain(v5);
    if (!v6)
      goto LABEL_13;
    goto LABEL_12;
  }
  v7 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(v6, v7);
    if (!APSGetFBOPropertyInt64())
      break;
LABEL_10:
    if (++v7 >= CFArrayGetCount(v6))
      goto LABEL_11;
  }
  CMBaseObject = FigEndpointStreamGetCMBaseObject();
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v9)
  {
    v12 = 4294954514;
    goto LABEL_17;
  }
  v10 = v9(CMBaseObject, CFSTR("EndpointIDs"), v3, &theArray);
  if (!(_DWORD)v10)
  {
    v11 = theArray;
    v15.length = CFArrayGetCount(theArray);
    v15.location = 0;
    CFArrayAppendArray(v5, v11, v15);
    if (theArray)
    {
      CFRelease(theArray);
      theArray = 0;
    }
    goto LABEL_10;
  }
  v12 = v10;
LABEL_17:
  APSLogErrorAt();
  if (v6)
LABEL_12:
    CFRelease(v6);
LABEL_13:
  CFRelease(v5);
  if (theArray)
    CFRelease(theArray);
  return v12;
}

uint64_t streamAggregateAudio_getTotalNumberOfAudioStreams()
{
  const __CFArray *v0;
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  uint64_t v4;
  CFIndex i;
  int v6;

  CMBaseObjectGetDerivedStorage();
  v0 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
  if (!v0)
    return 0;
  v1 = v0;
  Count = CFArrayGetCount(v0);
  if (Count < 1)
  {
    v4 = 0;
  }
  else
  {
    v3 = Count;
    v4 = 0;
    for (i = 0; i != v3; ++i)
    {
      CFArrayGetValueAtIndex(v1, i);
      if (APSGetFBOPropertyInt64())
      {
        v4 = (v4 + 1);
      }
      else if (APSGetFBOPropertyInt64())
      {
        v6 = APSGetFBOPropertyInt64();
        v4 = (v4 + v6);
      }
    }
  }
  CFRelease(v1);
  return v4;
}

uint64_t streamAggregateAudio_copySupportedAudioFormatForBufferAudio(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[3];
  char v6;
  _QWORD v7[3];
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x2000000000;
  v8 = 0;
  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x2000000000;
  v6 = 0;
  CMBaseObjectGetDerivedStorage();
  FigGetCFPreferenceNumberWithDefault();
  CFDictionaryApplyBlock();
  if (*((_DWORD *)v10 + 6))
  {
    APSLogErrorAt();
  }
  else if (a2)
  {
    APSAudioFormatDescriptionListCopyFilterFormatsForCurrentBufferedSenderWithEndpointStreamsInfo();
  }
  v3 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(v5, 8);
  _Block_object_dispose(v7, 8);
  _Block_object_dispose(&v9, 8);
  return v3;
}

void __streamAggregateAudio_copySupportedAudioFormatForBufferAudio_block_invoke(_QWORD *a1, CFTypeRef cf)
{
  CFTypeID v3;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  int v6;
  CFTypeRef v7;
  CFTypeRef cfa;

  cfa = 0;
  if (!*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    if (cf)
    {
      v3 = CFGetTypeID(cf);
      if (v3 == FigEndpointGetTypeID())
      {
        CMBaseObject = FigEndpointGetCMBaseObject();
        v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
        if (v5)
        {
          v6 = v5(CMBaseObject, *MEMORY[0x1E0CA41A0], *MEMORY[0x1E0C9AE00], &cfa);
          v7 = cfa;
        }
        else
        {
          v7 = 0;
          v6 = -12782;
        }
        *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v6;
        *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
        if (v7)
        {
          if (APEndpointFigEndpointClusterTypeToAPSClusterType(v7) == 2)
            *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = 2;
        }
      }
    }
    if (APSGetFBOPropertyInt64())
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
  }
  if (cfa)
    CFRelease(cfa);
}

uint64_t streamAggregateAudio_setAndCacheBufferedLocalVolume(uint64_t a1, const void *a2)
{
  CFTypeID v3;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, _QWORD, const void *);
  uint64_t v6;

  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 128) || !FigCFEqual())
    return 0;
  if (!a2 || (v3 = CFGetTypeID(a2), v3 != CFNumberGetTypeID()))
  {
    APSLogErrorAt();
    return 4294950536;
  }
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMBaseObject = FigEndpointStreamGetCMBaseObject();
  v5 = *(uint64_t (**)(uint64_t, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v5)
  {
    v6 = 4294954514;
    goto LABEL_13;
  }
  v6 = v5(CMBaseObject, *MEMORY[0x1E0CA46B8], a2);
  if ((_DWORD)v6)
  {
LABEL_13:
    APSLogErrorAt();
    return v6;
  }
  FigCFDictionarySetValue();
  return v6;
}

uint64_t streamAggregateAudio_setPropertyForAllSubStreamsInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  _QWORD context[2];
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigCFDictionarySetValue();
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  context[1] = a3;
  v8 = 0;
  context[0] = a2;
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 32), (CFDictionaryApplierFunction)streamAggregateAudio_setPropertyForSubStreamsIterator, context);
  return v8;
}

uint64_t streamAggregateAudio_removeSubStreamNotificationListeners()
{
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterRemoveWeakListener();
}

void streamAggregateAudio_updateDynamicProperties(uint64_t a1, _BYTE *a2)
{
  uint64_t DerivedStorage;
  int v4;
  int v5;
  int v6;
  int v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  int v11;
  uint64_t v12;
  uint64_t CMBaseObject;
  unsigned int (*v14)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v15;
  uint64_t v16;
  void (*v17)(uint64_t, const __CFString *, uint64_t, const __CFNumber **);
  BOOL v18;
  char v19;
  int v20;
  int v21;
  int v22;
  _BOOL4 v23;
  const void *v24;
  const __CFArray *v25;
  const void *v26;
  char v27;
  int v28;
  uint64_t v29;
  _BYTE *v30;
  const __CFArray *v31;
  CFTypeRef v32;
  CFTypeRef cf;
  uint64_t valuePtr;
  const __CFNumber *v35;
  CFTypeRef v36;
  CFTypeRef v37;
  CFTypeRef v38;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  valuePtr = 0;
  v35 = 0;
  cf = 0;
  v4 = FigCFEqual();
  v5 = FigCFEqual();
  v6 = FigCFEqual();
  v7 = FigCFEqual();
  if (*(_BYTE *)(DerivedStorage + 52))
  {
    APSLogErrorAt();
    v25 = 0;
    v26 = 0;
    goto LABEL_148;
  }
  v28 = v7;
  v29 = DerivedStorage;
  v30 = a2;
  v8 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
  Count = CFArrayGetCount(v8);
  v31 = v8;
  if (Count >= 1)
  {
    v10 = 0;
    v11 = 0;
    v32 = 0;
    v12 = *MEMORY[0x1E0C9AE00];
    while (1)
    {
      CFArrayGetValueAtIndex(v8, v10);
      CMBaseObject = FigEndpointStreamGetCMBaseObject();
      v14 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
      if ((!v14 || v14(CMBaseObject, CFSTR("SupportedAudioFormatList"), v12, &cf))
        && gLogCategory_APEndpointStreamAggregateAudio <= 30
        && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v15 = cf;
      if (!cf)
      {
        v16 = FigEndpointStreamGetCMBaseObject();
        v17 = *(void (**)(uint64_t, const __CFString *, uint64_t, const __CFNumber **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
        if (v17)
          v17(v16, CFSTR("SupportedAPAudioFormats"), v12, &v35);
        if (v35)
        {
          CFNumberGetValue(v35, kCFNumberSInt64Type, &valuePtr);
          APSAudioFormatDescriptionListCreateWithLegacyAudioFormatMask();
        }
        v15 = cf;
        if (!cf)
        {
          if (gLogCategory_APEndpointStreamAggregateAudio <= 50
            && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          goto LABEL_35;
        }
      }
      if (v11)
      {
        if (!APSAudioFormatDescriptionListCreateIntersectionList())
        {
          if (APSAudioFormatDescriptionListGetFormatCount() >= 1)
          {
            v38 = 0;
            APSAudioFormatDescriptionListCopyDebugString();
            if (gLogCategory_APEndpointStreamAggregateAudio <= 50
              && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            if (v38)
              CFRelease(v38);
          }
          if (v32)
            CFRelease(v32);
          v11 = 1;
          v32 = 0;
          goto LABEL_35;
        }
      }
      else
      {
        v32 = CFRetain(v15);
      }
      v11 = 1;
LABEL_35:
      if ((_BYTE)v4)
        v4 = APSGetFBOPropertyInt64() != 0;
      else
        v4 = 0;
      if ((_BYTE)v5)
        v5 = APSGetFBOPropertyInt64() != 0;
      else
        v5 = 0;
      if ((_BYTE)v6)
        v6 = APSGetFBOPropertyInt64() != 0;
      else
        v6 = 0;
      v8 = v31;
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if (v35)
      {
        CFRelease(v35);
        v35 = 0;
      }
      if (Count == ++v10)
        goto LABEL_51;
    }
  }
  v32 = 0;
LABEL_51:
  v38 = 0;
  APSAudioFormatDescriptionListCopyDebugString();
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v38)
    CFRelease(v38);
  v38 = 0;
  APSAudioFormatDescriptionListCopyDebugString();
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v38)
    CFRelease(v38);
  if (v4 == *(unsigned __int8 *)(v29 + 17)
    || (*(_BYTE *)(v29 + 17) = v4, (*(_DWORD *)(v29 + 48) - 2) > 2))
  {
    v20 = 0;
  }
  else
  {
    if (*(_BYTE *)(v29 + 16))
      v18 = v4 == 0;
    else
      v18 = 0;
    v19 = v18;
    if (v18)
    {
      if (gLogCategory_APEndpointStreamAggregateAudio <= 50
        && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      v20 = 1;
    }
    else
    {
      v20 = 0;
    }
    if (CFDictionaryGetInt64() && !*(_BYTE *)(v29 + 16))
    {
      v27 = *(_BYTE *)(v29 + 17) ? v19 : 1;
      if ((v27 & 1) == 0)
      {
        if (gLogCategory_APEndpointStreamAggregateAudio <= 50
          && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
        v20 = 1;
      }
    }
  }
  if (v5 != *(unsigned __int8 *)(v29 + 18))
  {
    *(_BYTE *)(v29 + 18) = v5;
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v21 = *(_DWORD *)(v29 + 48);
    if ((v21 & 0xFFFFFFFE) == 2)
    {
      if (v20)
      {
LABEL_92:
        v20 = 1;
        goto LABEL_93;
      }
LABEL_87:
      if (gLogCategory_APEndpointStreamAggregateAudio <= 50
        && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      goto LABEL_92;
    }
    if (!v20 && v21 == 4)
      goto LABEL_87;
  }
LABEL_93:
  if (v6 != *(unsigned __int8 *)(v29 + 152))
  {
    *(_BYTE *)(v29 + 152) = v6;
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v22 = *(_DWORD *)(v29 + 48);
    if ((v22 & 0xFFFFFFFE) == 2)
    {
      if (v20)
      {
LABEL_108:
        LOBYTE(v20) = 1;
        goto LABEL_109;
      }
    }
    else if (v20 || v22 != 4)
    {
      goto LABEL_109;
    }
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    goto LABEL_108;
  }
LABEL_109:
  if (!FigCFEqual())
  {
    v37 = 0;
    v38 = 0;
    v36 = 0;
    if (APSAudioFormatDescriptionListCreateFilteredListWithTranscodeFormats()
      || APSAudioFormatDescriptionListCopyChannelLayoutTags())
    {
      goto LABEL_169;
    }
    if (v38)
    {
      CFRelease(v38);
      v38 = 0;
    }
    if (APSAudioFormatDescriptionListCreateFilteredListWithTranscodeFormats()
      || APSAudioFormatDescriptionListCopyChannelLayoutTags())
    {
LABEL_169:
      APSLogErrorAt();
      v23 = 0;
    }
    else
    {
      v23 = FigCFEqual() == 0;
    }
    if (v38)
      CFRelease(v38);
    if (v37)
      CFRelease(v37);
    if (v36)
      CFRelease(v36);
    if (v23)
    {
      if (gLogCategory_APEndpointStreamAggregateAudio <= 50
        && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
    v24 = *(const void **)(v29 + 8);
    *(_QWORD *)(v29 + 8) = v32;
    if (v32)
      CFRetain(v32);
    if (v24)
      CFRelease(v24);
    v38 = 0;
    APSAudioFormatDescriptionListCopyDebugString();
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (v38)
      CFRelease(v38);
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    LOBYTE(v20) = 1;
  }
  if (v30 && v28)
    *v30 = v20;
  v25 = v31;
  v26 = v32;
LABEL_148:
  if (v35)
    CFRelease(v35);
  if (v26)
    CFRelease(v26);
  if (v25)
    CFRelease(v25);
}

void streamAggregateAudio_supportedAudioFormatsChangedNotificationListener(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*DerivedStorage);
  streamAggregateAudio_updateDynamicProperties(a2, 0);
  JUMPOUT(0x1CAA400E4);
}

void streamAggregateAudio_activeConfigurationDidBecomeInvalidNotificationListener(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*DerivedStorage);
  streamAggregateAudio_updateDynamicProperties(a2, 0);
  JUMPOUT(0x1CAA400E4);
}

uint64_t streamAggregateAudio_PerformanceReportNotificationListener()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDispatchAsyncPostNotification();
}

uint64_t streamAggregateAudio_GlitchReportNotificationListener()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDispatchAsyncPostNotification();
}

uint64_t streamAggregateAudio_setPropertyForSubStreamsIterator(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t result;

  v4 = *a3;
  v5 = a3[1];
  CMBaseObject = FigEndpointStreamGetCMBaseObject();
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v7)
  {
    result = 4294954514;
    goto LABEL_5;
  }
  result = v7(CMBaseObject, v4, v5);
  if ((_DWORD)result)
LABEL_5:
    *((_DWORD *)a3 + 4) = result;
  return result;
}

__CFString *streamAggregateAudio_subEndpointAddRemoveObservingProtocolCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("APEndpointStreamAggregateAudio <APSubEndpointAddRemoveObservingProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t streamAggregateAudio_NotifySubEndpointAdded()
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  streamAggregateAudio_addSubStreamFromEndpoint();
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return 0;
}

uint64_t streamAggregateAudio_NotifySubEndpointRemoved(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;
  const void *Value;
  const __CFArray *v6;
  CFIndex FirstIndexOfValue;
  CFIndex v8;
  const void *v9;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v12;
  CFRange v14;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  Value = CFDictionaryGetValue((CFDictionaryRef)DerivedStorage[4], a2);
  if (Value)
  {
    v6 = (const __CFArray *)DerivedStorage[5];
    v14.length = CFArrayGetCount(v6);
    v14.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v6, v14, Value);
    if (FirstIndexOfValue != -1)
    {
      v8 = FirstIndexOfValue;
      FigEndpointStreamSuspend();
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)DerivedStorage[5], v8);
      if (gLogCategory_APEndpointStreamAggregateAudio > 50)
        goto LABEL_11;
      if (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize())
        LogPrintF();
    }
  }
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_11:
  CFDictionaryRemoveValue((CFMutableDictionaryRef)DerivedStorage[4], a2);
  streamAggregateAudio_removeSubStreamNotificationListeners();
  streamAggregateAudio_updateDynamicProperties(a1, 0);
  v9 = (const void *)DerivedStorage[16];
  if (Value == v9 && v9 != 0)
  {
    CFRelease(Value);
    DerivedStorage[16] = 0;
  }
  if (!*((_BYTE *)DerivedStorage + 153) || streamAggregateAudio_getTotalNumberOfAudioStreams() > 2)
    goto LABEL_25;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
LABEL_25:
    MEMORY[0x1CAA400E4](*DerivedStorage);
    return 0;
  }
  v12 = Mutable;
  FigCFDictionarySetBoolean();
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  MEMORY[0x1CAA400E4](*DerivedStorage);
  CFRelease(v12);
  return 0;
}

uint64_t streamAggregateAudio_Suspend(const void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *DerivedStorage;
  _QWORD *v9;
  _QWORD *v10;
  CFTypeRef v11;
  uint64_t v12;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v9 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E0040B3C43913uLL);
  v10 = malloc_type_calloc(1uLL, 0x18uLL, 0x1020040EDCEB4C7uLL);
  MEMORY[0x1CAA400CC](*DerivedStorage);
  *v9 = CFRetain(a1);
  if (a2)
    v11 = CFRetain(a2);
  else
    v11 = 0;
  v9[1] = v11;
  *((_DWORD *)v9 + 14) = 0;
  v9[8] = a4;
  v9[9] = a3;
  v12 = APSWrapperCreate();
  if ((_DWORD)v12)
  {
    APSLogErrorAt();
    streamAggregateAudio_finalizeSharedContextWrapper(0);
  }
  else
  {
    v10[1] = 0;
    *((_DWORD *)v10 + 4) = 1;
    if (FigCFDictionaryGetValue())
    {
      CFDictionaryGetInt64Ranged();
      CFDictionarySetInt64();
    }
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMSimpleQueueEnqueue((CMSimpleQueueRef)DerivedStorage[11], v10);
    streamAggregateAudio_triggerSuspendOrResumeIfNecessary((const void *)*v9);
  }
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return v12;
}

uint64_t streamAggregateAudio_Resume(const void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *DerivedStorage;
  void *v9;
  _QWORD *v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  dispatch_time_t v18;
  uint64_t v19;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v9 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E0040B3C43913uLL);
  v10 = malloc_type_calloc(1uLL, 0x18uLL, 0x1020040EDCEB4C7uLL);
  MEMORY[0x1CAA400CC](*DerivedStorage);
  *(_QWORD *)v9 = CFRetain(a1);
  if (a2)
    v11 = CFRetain(a2);
  else
    v11 = 0;
  *((_QWORD *)v9 + 1) = v11;
  *((_QWORD *)v9 + 4) = 1;
  *((_BYTE *)v9 + 41) = 0;
  *((_DWORD *)v9 + 14) = 0;
  *((_QWORD *)v9 + 8) = a4;
  *((_QWORD *)v9 + 9) = a3;
  v12 = APSWrapperCreate();
  if ((_DWORD)v12)
  {
    v19 = v12;
    APSLogErrorAt();
    streamAggregateAudio_finalizeSharedContextWrapper(0);
LABEL_16:
    MEMORY[0x1CAA400E4](*DerivedStorage);
    return v19;
  }
  v13 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v13)
  {
    APSLogErrorAt();
    v19 = 4294950535;
    goto LABEL_16;
  }
  v14 = (const void *)v13;
  if (*((_DWORD *)DerivedStorage + 37))
  {
    v15 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, (dispatch_queue_t)DerivedStorage[12]);
    *((_QWORD *)v9 + 6) = v15;
    v16 = (void *)CFRetain(v14);
    dispatch_set_context(v15, v16);
    dispatch_source_set_event_handler_f(*((dispatch_source_t *)v9 + 6), (dispatch_function_t)streamAggregateAudio_resumeTimerCallback);
    dispatch_source_set_cancel_handler_f(*((dispatch_source_t *)v9 + 6), (dispatch_function_t)streamAggregateAudio_resumerTimerCancelled);
    v17 = *((_QWORD *)v9 + 6);
    v18 = dispatch_time(0, 1000000 * *((unsigned int *)DerivedStorage + 37));
    dispatch_source_set_timer(v17, v18, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_resume(*((dispatch_object_t *)v9 + 6));
  }
  v10[1] = 0;
  *((_DWORD *)v10 + 4) = 2;
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMSimpleQueueEnqueue((CMSimpleQueueRef)DerivedStorage[11], v10);
  streamAggregateAudio_triggerSuspendOrResumeIfNecessary(*(const void **)v9);
  MEMORY[0x1CAA400E4](*DerivedStorage);
  CFRelease(v14);
  return 0;
}

uint64_t streamAggregateAudio_Dissociate()
{
  _QWORD *DerivedStorage;
  const __CFArray *v1;
  uint64_t v2;
  const void *v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v1 = (const __CFArray *)DerivedStorage[5];
  if (v1
    && CFArrayGetCount(v1) >= 1
    && gLogCategory_APEndpointStreamAggregateAudio <= 90
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = DerivedStorage[8];
  if (v2)
  {
    APEndpointStreamAudioHoseAggregateDeregisterWithParentRegistrar(v2);
    v3 = (const void *)DerivedStorage[8];
    if (v3)
    {
      CFRelease(v3);
      DerivedStorage[8] = 0;
    }
  }
  *((_BYTE *)DerivedStorage + 52) = 1;
  MEMORY[0x1CAA400E4](*DerivedStorage);
  if (DerivedStorage[26])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  return 0;
}

uint64_t streamAggregateAudio_Control(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  _QWORD context[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual() || FigCFEqual() || FigCFEqual())
  {
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    context[0] = a2;
    context[1] = a3;
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 32), (CFDictionaryApplierFunction)streamAggregateAudio_genericCoreCaptureIterator, context);
    return 0;
  }
  else
  {
    if (gLogCategory_APEndpointStreamAggregateAudio <= 90
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 4294950536;
  }
}

void streamAggregateAudio_finalizeSharedContextWrapper(const void **a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  v3 = a1[1];
  if (v3)
    CFRelease(v3);
  v4 = a1[2];
  if (v4)
    CFRelease(v4);
  v5 = a1[6];
  if (v5)
    dispatch_release(v5);
  free(a1);
}

uint64_t streamAggregateAudio_triggerSuspendOrResumeIfNecessary(const void *a1)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if ((*(_DWORD *)(result + 48) | 2) == 2)
  {
    result = (uint64_t)CMSimpleQueueGetHead(*(CMSimpleQueueRef *)(result + 88));
    if (result)
    {
      if (a1)
        CFRetain(a1);
      return APSDispatchAsyncFHelper();
    }
  }
  return result;
}

void streamAggregateAudio_triggerSuspendOrResume(CFTypeRef *a1)
{
  _QWORD *DerivedStorage;
  _DWORD *v3;
  _DWORD *v4;
  CFTypeRef v5;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const __CFDictionary *v10;
  int Int64Ranged;
  void *v12;
  uint64_t v13;
  uint64_t Value;
  int v15;
  uint64_t v16;
  const __CFDictionary *MutableCopy;
  const __CFDictionary *v18;
  const void *v19;
  const void *v20;
  uint64_t v21;
  void (*v22)(uint64_t, const __CFString *, uint64_t, UInt8 *);
  const void *v23;
  const void *v24;
  const __CFDictionary *v25;
  uint64_t Int64;
  int v27;
  uint64_t v28;
  const void *v29;
  int v30;
  const void *v31;
  int v32;
  int v33;
  uint64_t v34;
  const __CFDictionary *Mutable;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  CFDataRef v41;
  const void *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  const void *v47;
  uint64_t v48;
  const __CFDictionary *theDict;
  void *v50;
  CFDataRef v51;
  const __CFAllocator *context;
  void *contexta;
  CFTypeRef cf[2];
  UInt8 bytes[32];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if ((*((_DWORD *)DerivedStorage + 12) | 2) != 2)
    goto LABEL_93;
  v3 = CMSimpleQueueDequeue((CMSimpleQueueRef)DerivedStorage[11]);
  if (!v3)
    goto LABEL_93;
  v4 = v3;
  v5 = *a1;
  CMBaseObjectGetDerivedStorage();
  APSWrapperGetValue();
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v6 = v4[4];
  if (v6 == 1)
  {
    v12 = (void *)*((_QWORD *)v4 + 1);
    v13 = CMBaseObjectGetDerivedStorage();
    Value = APSWrapperGetValue();
    *(_QWORD *)bytes = 0;
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_QWORD *)(Value + 24) = FigCFDictionaryGetCount();
    v15 = *(_DWORD *)(v13 + 48);
    if (v15)
    {
      v16 = *MEMORY[0x1E0C9AE00];
      MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
      if (MutableCopy)
      {
        v18 = MutableCopy;
        contexta = v12;
        v19 = CFDictionaryGetValue(MutableCopy, CFSTR("HoseRegistrar"));
        CFDictionaryGetInt64();
        v20 = *(const void **)(v13 + 80);
        if (v20 && v19 && !CFEqual(v20, v19))
        {
          if (gLogCategory_APEndpointStreamAggregateAudio <= 50
            && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        else
        {
          streamAggregateAudio_setResumptionStageAndNotifyIfNeeded((uint64_t)v5, 1u);
          if (*(_BYTE *)(v13 + 52))
          {
            APSLogErrorAt();
            v46 = -16762;
LABEL_134:
            *(_DWORD *)(Value + 56) = v46;
            streamAggregateAudio_suspendCompletion();
LABEL_38:
            CFRelease(v18);
            v25 = *(const __CFDictionary **)bytes;
            if (!*(_QWORD *)bytes)
              goto LABEL_90;
            goto LABEL_89;
          }
          v21 = *(_QWORD *)(v13 + 64);
          if (v21)
          {
            v22 = *(void (**)(uint64_t, const __CFString *, uint64_t, UInt8 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
            if (v22)
              v22(v21, CFSTR("PrimaryPacketDropCount"), v16, bytes);
            CFGetInt64();
            APEndpointStreamAudioHoseAggregateDeregisterWithParentRegistrar(*(_QWORD *)(v13 + 64));
            v23 = *(const void **)(v13 + 64);
            if (v23)
            {
              CFRelease(v23);
              *(_QWORD *)(v13 + 64) = 0;
            }
          }
          CFDictionarySetInt64();
          v24 = *(const void **)(Value + 8);
          *(_QWORD *)(Value + 8) = v18;
          CFRetain(v18);
          if (v24)
            CFRelease(v24);
          *(_BYTE *)(v13 + 16) = 0;
          if (*(uint64_t *)(Value + 24) >= 1)
          {
            CFDictionaryApplyFunction(*(CFDictionaryRef *)(v13 + 32), (CFDictionaryApplierFunction)streamAggregateAudio_suspendSubStreamIterator, contexta);
            goto LABEL_38;
          }
        }
        v46 = 0;
        goto LABEL_134;
      }
      APSLogErrorAt();
      v15 = -16761;
    }
    *(_DWORD *)(Value + 56) = v15;
    streamAggregateAudio_suspendCompletion();
    goto LABEL_90;
  }
  if (v6 != 2)
  {
    if (gLogCategory_APEndpointStreamAggregateAudio <= 90
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    streamAggregateAudio_triggerSuspendOrResumeIfNecessary(v5);
    goto LABEL_90;
  }
  v7 = (void *)*((_QWORD *)v4 + 1);
  v8 = CMBaseObjectGetDerivedStorage();
  v9 = APSWrapperGetValue();
  cf[0] = 0;
  if (*(_DWORD *)(v8 + 48) == 2)
  {
    v41 = 0;
    v45 = 0;
    v10 = 0;
LABEL_119:
    Mutable = 0;
    goto LABEL_130;
  }
  streamAggregateAudio_setResumptionStageAndNotifyIfNeeded((uint64_t)v5, 3u);
  context = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v10 = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  v47 = CFDictionaryGetValue(v10, CFSTR("HoseRegistrar"));
  if (v47)
    Int64Ranged = CFDictionaryGetInt64Ranged();
  else
    Int64Ranged = 0;
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  Int64 = CFDictionaryGetInt64();
  if (Int64 && !*(_BYTE *)(v8 + 17))
  {
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v41 = 0;
    Mutable = 0;
    v45 = -6735;
LABEL_130:
    *(_DWORD *)(v9 + 56) = v45;
    streamAggregateAudio_resumeCallClientCallback();
    streamAggregateAudio_resumeCompletion(v7);
    if (!v10)
      goto LABEL_83;
    goto LABEL_82;
  }
  *(_BYTE *)(v8 + 16) = Int64 != 0;
  if (Int64Ranged)
  {
    v41 = 0;
    v45 = 0;
    goto LABEL_119;
  }
  *(_QWORD *)(v9 + 24) = FigCFDictionaryGetCount();
  *(_QWORD *)(v9 + 32) = 1;
  if (*(_BYTE *)(v8 + 52))
  {
    APSLogErrorAt();
    v41 = 0;
    Mutable = 0;
    v45 = -16762;
    goto LABEL_130;
  }
  cf[1] = 0;
  RandomBytes();
  v51 = CFDataCreate(context, bytes, 32);
  v27 = APSCryptorChaCha20Poly1305Create();
  if (v27)
  {
    v45 = v27;
    APSLogErrorAt();
    if (v51)
      CFRelease(v51);
    APSLogErrorAt();
    v41 = 0;
    goto LABEL_119;
  }
  v48 = v9;
  theDict = v10;
  v50 = v7;
  if (gLogCategory_APEndpointStreamAggregateAudio <= 40
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v28 = CMBaseObjectGetDerivedStorage();
  v29 = (const void *)*MEMORY[0x1E0CA4880];
  v30 = FigCFEqual();
  v31 = (const void *)*MEMORY[0x1E0CA4888];
  v32 = FigCFEqual();
  v33 = FigCFEqual();
  if (*(_BYTE *)(v28 + 200)
    && *(_BYTE *)(v28 + 201)
    && (v30 || v32 && !v33)
    && gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v34 = CMBaseObjectGetDerivedStorage();
  if (CFEqual(*(CFTypeRef *)(v34 + 192), v29)
    || CFEqual(*(CFTypeRef *)(v34 + 192), v31)
    || !CFEqual(*(CFTypeRef *)(v34 + 192), (CFTypeRef)*MEMORY[0x1E0CA4890])
    || !*(_BYTE *)(v34 + 203)
    || !APSSettingsGetIntWithDefault()
    || !APSSettingsGetIntWithDefault()
    || APSGetAllowPersistentGroupsOnInfra()
    || APSIsVirtualMachine())
  {
    Mutable = 0;
    v10 = theDict;
    v7 = v50;
    v9 = v48;
    goto LABEL_64;
  }
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  Mutable = CFDictionaryCreateMutable(context, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v45 = -16761;
    v10 = theDict;
    v7 = v50;
    v9 = v48;
    goto LABEL_121;
  }
  v10 = theDict;
  CFDictionaryGetValue(theDict, CFSTR("BBufBackingProvider"));
  FigCFDictionarySetValue();
  v43 = APEndpointStreamAudioHoseAggregateCreate(context, v47, Mutable, cf);
  v7 = v50;
  v9 = v48;
  if (v43)
  {
    v45 = v43;
LABEL_138:
    APSLogErrorAt();
    goto LABEL_121;
  }
  v44 = APEndpointStreamAudioHoseAggregateRegisterWithParentRegistrar((uint64_t)cf[0]);
  if (v44)
  {
    v45 = v44;
    goto LABEL_138;
  }
  CFDictionarySetValue(theDict, CFSTR("IsAudioDataAggregated"), (const void *)*MEMORY[0x1E0C9AE50]);
  CFDictionarySetValue(theDict, CFSTR("HoseRegistrar"), cf[0]);
  *(CFTypeRef *)(v8 + 64) = cf[0];
  cf[0] = 0;
LABEL_64:
  v36 = *(const void **)(v8 + 56);
  *(_QWORD *)(v8 + 56) = v10;
  if (v10)
    CFRetain(v10);
  if (v36)
    CFRelease(v36);
  v37 = *(const void **)(v9 + 8);
  *(_QWORD *)(v9 + 8) = v10;
  if (v10)
    CFRetain(v10);
  if (v37)
    CFRelease(v37);
  v38 = *(const void **)(v9 + 16);
  v39 = *(const void **)(v8 + 136);
  *(_QWORD *)(v9 + 16) = v39;
  if (v39)
    CFRetain(v39);
  if (v38)
    CFRelease(v38);
  v40 = *(const void **)(v8 + 72);
  *(_QWORD *)(v8 + 72) = v7;
  if (v7)
    CFRetain(v7);
  if (v40)
    CFRelease(v40);
  if (*(uint64_t *)(v9 + 24) < 1)
  {
    v45 = 0;
LABEL_121:
    v41 = v51;
    goto LABEL_130;
  }
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(v8 + 32), (CFDictionaryApplierFunction)streamAggregateAudio_resumeSubStreamIterator, v7);
  v41 = v51;
  if (v10)
LABEL_82:
    CFRelease(v10);
LABEL_83:
  if (v41)
    CFRelease(v41);
  if (cf[0])
    CFRelease(cf[0]);
  if (!Mutable)
    goto LABEL_90;
  v25 = Mutable;
LABEL_89:
  CFRelease(v25);
LABEL_90:
  v42 = (const void *)*((_QWORD *)v4 + 1);
  if (v42)
    CFRelease(v42);
  free(v4);
LABEL_93:
  MEMORY[0x1CAA400E4](*DerivedStorage);
  if (*a1)
    CFRelease(*a1);
}

void streamAggregateAudio_setResumptionStageAndNotifyIfNeeded(uint64_t a1, unsigned int a2)
{
  uint64_t DerivedStorage;
  int v4;
  int v5;
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  const void **v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = streamAggregateAudio_isInUse(a2);
  v5 = streamAggregateAudio_isInUse(*(_DWORD *)(DerivedStorage + 48));
  if (*(_DWORD *)(DerivedStorage + 48) == 3 && (a2 == 4 || a2 == 2))
  {
    if (gLogCategory_APEndpointStreamAggregateAudio <= 30
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  if (v5 == v4)
    goto LABEL_18;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v7 = Mutable;
    v8 = (const void **)MEMORY[0x1E0C9AE40];
    if (v4)
      v8 = (const void **)MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, CFSTR("IsInUse"), *v8);
    if (gLogCategory_APEndpointStreamAggregateAudio <= 30
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v7);
LABEL_18:
    *(_DWORD *)(DerivedStorage + 48) = a2;
    return;
  }
  APSLogErrorAt();
}

uint64_t streamAggregateAudio_resumeSubStreamIterator(uint64_t a1, uint64_t a2, CFTypeRef a3)
{
  uint64_t Value;
  uint64_t v6;
  uint64_t CMBaseObject;
  void (*v8)(uint64_t, _QWORD, uint64_t);
  uint64_t v9;
  uint64_t result;
  uint64_t (*v11)(uint64_t, uint64_t, void (*)(const void *, int, const void *), CFTypeRef);

  Value = APSWrapperGetValue();
  v6 = *(_QWORD *)(Value + 16);
  CMBaseObject = FigEndpointStreamGetCMBaseObject();
  v8 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v8)
    v8(CMBaseObject, *MEMORY[0x1E0CA4770], v6);
  v9 = *(_QWORD *)(Value + 8);
  if (a3)
    a3 = CFRetain(a3);
  result = CMBaseObjectGetVTable();
  v11 = *(uint64_t (**)(uint64_t, uint64_t, void (*)(const void *, int, const void *), CFTypeRef))(*(_QWORD *)(result + 16) + 16);
  if (v11)
    return v11(a2, v9, streamAggregateAudio_resumeSubStreamCallback, a3);
  return result;
}

void streamAggregateAudio_resumeCallClientCallback()
{
  CFTypeRef *Value;
  uint64_t DerivedStorage;
  const __CFDictionary *v2;
  const void *v3;
  const void *v4;

  Value = (CFTypeRef *)APSWrapperGetValue();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(const __CFDictionary **)(DerivedStorage + 56);
  if (v2)
  {
    v3 = *(const void **)(DerivedStorage + 80);
    v4 = CFDictionaryGetValue(v2, CFSTR("HoseRegistrar"));
    *(_QWORD *)(DerivedStorage + 80) = v4;
    if (v4)
      CFRetain(v4);
    if (v3)
      CFRelease(v3);
  }
  CFRetain(*Value);
  APSDispatchAsyncFHelper();
  streamAggregateAudio_setResumptionStageAndNotifyIfNeeded((uint64_t)*Value, 4u);
}

void streamAggregateAudio_resumeCompletion()
{
  uint64_t Value;
  uint64_t DerivedStorage;
  uint64_t v2;
  const void *v3;
  unsigned int v4;
  const void *v5;
  NSObject *v6;

  Value = APSWrapperGetValue();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(Value + 56))
  {
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v2 = *(_QWORD *)(DerivedStorage + 64);
    if (v2
      && (APEndpointStreamAudioHoseAggregateDeregisterWithParentRegistrar(v2),
          (v3 = *(const void **)(DerivedStorage + 64)) != 0))
    {
      CFRelease(v3);
      v4 = 0;
      *(_QWORD *)(DerivedStorage + 64) = 0;
    }
    else
    {
      v4 = 0;
    }
  }
  else
  {
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v4 = 2;
  }
  streamAggregateAudio_setResumptionStageAndNotifyIfNeeded(*(_QWORD *)Value, v4);
  v5 = *(const void **)(DerivedStorage + 72);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  streamAggregateAudio_triggerSuspendOrResumeIfNecessary(*(const void **)Value);
  v6 = *(NSObject **)(Value + 48);
  if (v6)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(Value + 48));
    dispatch_release(v6);
    *(_QWORD *)(Value + 48) = 0;
  }
}

void streamAggregateAudio_resumeSubStreamCallback(const void *a1, int a2, const void *a3)
{
  uint64_t Value;
  _QWORD *DerivedStorage;
  int64x2_t v8;
  const __CFArray *v9;
  CFRange v10;

  Value = APSWrapperGetValue();
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  *(int64x2_t *)(Value + 24) = vaddq_s64(*(int64x2_t *)(Value + 24), v8);
  if (a2)
  {
    if (gLogCategory_APEndpointStreamAggregateAudio > 90
      || gLogCategory_APEndpointStreamAggregateAudio == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_13;
    }
    goto LABEL_8;
  }
  v9 = (const __CFArray *)DerivedStorage[5];
  v10.length = CFArrayGetCount(v9);
  v10.location = 0;
  if (CFArrayGetFirstIndexOfValue(v9, v10, a1) != -1)
  {
    if (gLogCategory_APEndpointStreamAggregateAudio > 50
      || gLogCategory_APEndpointStreamAggregateAudio == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_13;
    }
LABEL_8:
    LogPrintF();
    goto LABEL_13;
  }
  CFArrayAppendValue((CFMutableArrayRef)DerivedStorage[5], a1);
LABEL_13:
  if (*(_BYTE *)(Value + 41) && *(uint64_t *)(Value + 32) < 1 || *(uint64_t *)(Value + 24) <= 0)
  {
    if (!*(_BYTE *)(Value + 40))
    {
      streamAggregateAudio_resumeCallClientCallback();
      *(_BYTE *)(Value + 40) = 1;
    }
    if (*(uint64_t *)(Value + 24) <= 0)
      streamAggregateAudio_resumeCompletion();
  }
  MEMORY[0x1CAA400E4](*DerivedStorage);
  if (a3)
    CFRelease(a3);
}

void streamAggregateAudio_streamNotificationQueueCallback(CFTypeRef *a1)
{
  void (*v2)(CFTypeRef, _QWORD, CFTypeRef);

  v2 = (void (*)(CFTypeRef, _QWORD, CFTypeRef))a1[3];
  if (v2)
    v2(*a1, *((unsigned int *)a1 + 2), a1[2]);
  CFRelease(*a1);
}

uint64_t streamAggregateAudio_suspendSubStreamIterator(uint64_t a1, uint64_t a2, CFTypeRef a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t (*v7)(uint64_t, uint64_t, void (*)(const void *, int, const void *), CFTypeRef);

  v5 = *(_QWORD *)(APSWrapperGetValue() + 8);
  if (a3)
    a3 = CFRetain(a3);
  result = CMBaseObjectGetVTable();
  v7 = *(uint64_t (**)(uint64_t, uint64_t, void (*)(const void *, int, const void *), CFTypeRef))(*(_QWORD *)(result + 16) + 8);
  if (v7)
    return v7(a2, v5, streamAggregateAudio_suspendSubStreamCallback, a3);
  return result;
}

uint64_t streamAggregateAudio_suspendCompletion()
{
  uint64_t *Value;
  uint64_t DerivedStorage;
  const void *v2;
  const void *v3;
  uint64_t v4;
  const void *v5;

  Value = (uint64_t *)APSWrapperGetValue();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_DWORD *)(DerivedStorage + 48) == 1)
  {
    streamAggregateAudio_setResumptionStageAndNotifyIfNeeded(*Value, 0);
    v2 = *(const void **)(DerivedStorage + 56);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(DerivedStorage + 56) = 0;
    }
    v3 = *(const void **)(DerivedStorage + 80);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(DerivedStorage + 80) = 0;
    }
  }
  CFRetain((CFTypeRef)*Value);
  APSDispatchAsyncFHelper();
  if (!*(_DWORD *)(DerivedStorage + 48) && !*((_DWORD *)Value + 14))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  v4 = FigCFDictionaryGetValue();
  if (v4)
  {
    v5 = (const void *)v4;
    if ((int)CFDictionaryGetInt64Ranged() > 1)
      CFDictionarySetInt64();
    else
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 104), v5);
  }
  return streamAggregateAudio_triggerSuspendOrResumeIfNecessary(*Value);
}

void streamAggregateAudio_suspendSubStreamCallback(const void *a1, int a2, const void *a3)
{
  uint64_t Value;
  _QWORD *DerivedStorage;
  const __CFArray *v8;
  CFIndex FirstIndexOfValue;
  CFRange v10;

  Value = APSWrapperGetValue();
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  --*(_QWORD *)(Value + 24);
  v8 = (const __CFArray *)DerivedStorage[5];
  v10.length = CFArrayGetCount(v8);
  v10.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v8, v10, a1);
  if (FirstIndexOfValue != -1)
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)DerivedStorage[5], FirstIndexOfValue);
  if (a2 != -16762)
    *(_DWORD *)(Value + 56) = a2;
  if (*(uint64_t *)(Value + 24) <= 0)
    streamAggregateAudio_suspendCompletion();
  MEMORY[0x1CAA400E4](*DerivedStorage);
  if (a3)
    CFRelease(a3);
}

void streamAggregateAudio_resumeTimerCallback()
{
  uint64_t v0;
  const void *v1;
  uint64_t Value;
  _QWORD *DerivedStorage;
  NSObject *v4;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    Value = APSWrapperGetValue();
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    MEMORY[0x1CAA400CC](*DerivedStorage);
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_BYTE *)(Value + 41) = 1;
    v4 = *(NSObject **)(Value + 48);
    if (v4)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(Value + 48));
      dispatch_release(v4);
      *(_QWORD *)(Value + 48) = 0;
    }
    if (!*(_BYTE *)(Value + 40) && *(uint64_t *)(Value + 32) <= 0)
    {
      streamAggregateAudio_resumeCallClientCallback();
      *(_BYTE *)(Value + 40) = 1;
    }
    MEMORY[0x1CAA400E4](*DerivedStorage);
    CFRelease(v1);
  }
}

void streamAggregateAudio_resumerTimerCancelled(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t streamAggregateAudio_genericCoreCaptureIterator(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  v4 = *a3;
  v5 = a3[1];
  result = CMBaseObjectGetVTable();
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 40);
  if (v7)
    return v7(a2, v4, v5);
  return result;
}

uint64_t streamAggregateAudio_copyTransportFormatDescriptionForSourceContentFormatDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigEndpointStream;
  _QWORD *DerivedStorage;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t RelativeComplementList;
  uint64_t v12;
  CFTypeRef v14;

  FigEndpointStream = FigEndpointStreamAirPlayGetFigEndpointStream();
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v6 = DerivedStorage;
  v14 = 0;
  if (!a3)
  {
    APSLogErrorAt();
    v12 = 4294950536;
    goto LABEL_21;
  }
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (!CFEqual((CFTypeRef)v6[24], (CFTypeRef)*MEMORY[0x1E0CA4888]))
  {
    APSLogErrorAt();
    v12 = 4294954514;
    goto LABEL_21;
  }
  v7 = streamAggregateAudio_copySupportedAudioFormatForBufferAudio(FigEndpointStream, (uint64_t)&v14);
  if ((_DWORD)v7)
  {
    v12 = v7;
    goto LABEL_31;
  }
  if (*((_BYTE *)v6 + 153) && streamAggregateAudio_getTotalNumberOfAudioStreams() >= 3)
  {
    v8 = APSAudioFormatDescriptionListCreate();
    if ((_DWORD)v8)
    {
      v12 = v8;
    }
    else
    {
      v9 = APSAudioFormatDescriptionListAddSupportedFormatsForALACToList();
      if ((_DWORD)v9)
      {
        v12 = v9;
      }
      else
      {
        v10 = APSAudioFormatDescriptionListAddSupportedEncryptedALACFormatsForPassthrough();
        if ((_DWORD)v10)
        {
          v12 = v10;
        }
        else
        {
          RelativeComplementList = APSAudioFormatDescriptionListCreateRelativeComplementList();
          if ((_DWORD)RelativeComplementList)
          {
            v12 = RelativeComplementList;
          }
          else
          {
            APSAudioFormatDescriptionListCopyDebugString();
            if (gLogCategory_APEndpointStreamAggregateAudio <= 50
              && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v12 = APSAudioFormatDescriptionListCopyTransportFormatDescriptionForSourceFormatDescription();
            if (!(_DWORD)v12)
              goto LABEL_21;
          }
        }
      }
    }
LABEL_31:
    APSLogErrorAt();
    goto LABEL_21;
  }
  APSAudioFormatDescriptionListCopyDebugString();
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v12 = APSAudioFormatDescriptionListCopyTransportFormatDescriptionForSourceFormatDescription();
  if ((_DWORD)v12)
    goto LABEL_31;
LABEL_21:
  MEMORY[0x1CAA400E4](*v6);
  if (v14)
    CFRelease(v14);
  return v12;
}

uint64_t streamAggregateAudio_isPassthroughSupportedForFormatDescription(uint64_t a1, uint64_t a2, char *a3)
{
  _QWORD *DerivedStorage;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  const void *ValueAtIndex;
  unsigned int (*v11)(const void *, uint64_t, char *);
  char v13;

  FigEndpointStreamAirPlayGetFigEndpointStream();
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v13 = 1;
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (a3)
  {
    v6 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
    Count = CFArrayGetCount(v6);
    if (Count >= 1)
    {
      v8 = Count;
      v9 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v6, v9);
        FigEndpointStreamAirPlayGetClassID();
        if (!CMBaseObjectIsMemberOfClass() || !ValueAtIndex)
          break;
        v11 = *(unsigned int (**)(const void *, uint64_t, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24)
                                                                           + 32);
        if (!v11 || v11(ValueAtIndex, a2, &v13))
        {
          if (gLogCategory_APEndpointStreamAggregateAudio <= 50
            && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v13 = 0;
LABEL_19:
          if (gLogCategory_APEndpointStreamAggregateAudio <= 50
            && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          goto LABEL_26;
        }
        if (!v13)
          goto LABEL_19;
        if (v8 == ++v9)
          goto LABEL_26;
      }
      if (gLogCategory_APEndpointStreamAggregateAudio <= 50
        && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v13 = 0;
    }
LABEL_26:
    *a3 = v13;
    MEMORY[0x1CAA400E4](*DerivedStorage);
    if (v6)
      CFRelease(v6);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    MEMORY[0x1CAA400E4](*DerivedStorage);
    return 4294950536;
  }
}

void __streamAggregateAudio_registerForAirPlayPrefsChangedNotification_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const void *v2;

  dispatch_get_context(*(dispatch_object_t *)(a1 + 32));
  v1 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v1)
  {
    v2 = (const void *)v1;
    CMBaseObjectGetDerivedStorage();
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v2);
  }
}

void streamAggregateAudio_addSubStream(void *a1, const void *a2, void *a3)
{
  uint64_t DerivedStorage;
  const void *v7;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v9;
  int v10;
  _QWORD *v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;
  _QWORD *Value;
  const void *v16;
  char v17;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v17 = 0;
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 32), a2))
  {
    if (gLogCategory_APEndpointStreamAggregateAudio <= 30
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return;
  }
  if (APSGetFBOPropertyInt64())
  {
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v7 = *(const void **)(DerivedStorage + 128);
    if (v7 && gLogCategory_APEndpointStreamAggregateAudio <= 90)
    {
      if (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize())
        LogPrintF();
      v7 = *(const void **)(DerivedStorage + 128);
    }
    *(_QWORD *)(DerivedStorage + 128) = a3;
    if (a3)
      CFRetain(a3);
    if (v7)
      CFRelease(v7);
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 120), (CFDictionaryApplierFunction)streamAggregateAudio_setPropertyForLocalSubStreamIterator, a1);
  }
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  FigCFDictionarySetValue();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  streamAggregateAudio_updateDynamicProperties((uint64_t)a1, &v17);
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 112), (CFDictionaryApplierFunction)streamAggregateAudio_setPropertiesForSubStreamIterator, a3);
  if (*(_BYTE *)(DerivedStorage + 153) && streamAggregateAudio_getTotalNumberOfAudioStreams() >= 3)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      APSLogErrorAt();
      goto LABEL_61;
    }
    v9 = Mutable;
    FigCFDictionarySetBoolean();
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50
      && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  else
  {
    v9 = 0;
  }
  v10 = *(_DWORD *)(DerivedStorage + 48);
  if (v10 != 2 || v17)
  {
    if ((v10 - 3) > 1)
      return;
    v14 = *(CFTypeRef *)(DerivedStorage + 72);
    if (v14)
      v14 = CFRetain(v14);
    cf = v14;
    Value = (_QWORD *)APSWrapperGetValue();
    ++Value[3];
    if (gLogCategory_APEndpointStreamAggregateAudio <= 50)
    {
      if (gLogCategory_APEndpointStreamAggregateAudio != -1
        || (Value = (_QWORD *)_LogCategory_Initialize(), (_DWORD)Value))
      {
        Value = (_QWORD *)LogPrintF();
      }
    }
LABEL_57:
    if (cf)
      streamAggregateAudio_resumeSubStreamIterator((uint64_t)Value, (uint64_t)a3, cf);
    if (!v9)
      goto LABEL_61;
    goto LABEL_60;
  }
  v11 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E0040B3C43913uLL);
  *v11 = CFRetain(a1);
  v12 = *(CFTypeRef *)(DerivedStorage + 56);
  if (v12)
    v12 = CFRetain(v12);
  v11[1] = v12;
  v13 = *(CFTypeRef *)(DerivedStorage + 136);
  if (v13)
    v13 = CFRetain(v13);
  v11[2] = v13;
  v11[3] = 1;
  *((_DWORD *)v11 + 14) = 0;
  v11[8] = 0;
  v11[9] = 0;
  streamAggregateAudio_setResumptionStageAndNotifyIfNeeded((uint64_t)a1, 4u);
  if (gLogCategory_APEndpointStreamAggregateAudio <= 50
    && (gLogCategory_APEndpointStreamAggregateAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!APSWrapperCreate())
  {
    v16 = *(const void **)(DerivedStorage + 72);
    Value = cf;
    *(_QWORD *)(DerivedStorage + 72) = cf;
    if (Value)
      Value = CFRetain(Value);
    if (v16)
      CFRelease(v16);
    goto LABEL_57;
  }
  APSLogErrorAt();
  streamAggregateAudio_finalizeSharedContextWrapper((const void **)cf);
  if (v9)
LABEL_60:
    CFRelease(v9);
LABEL_61:
  if (cf)
    CFRelease(cf);
}

uint64_t streamAggregateAudio_setPropertyForLocalSubStreamIterator(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(result + 128))
  {
    result = FigCFEqual();
    if (!(_DWORD)result)
    {
      result = FigCFEqual();
      if ((_DWORD)result)
      {
        result = streamAggregateAudio_setAndCacheBufferedLocalVolume(a3, a2);
        if ((_DWORD)result)
          return APSLogErrorAt();
      }
    }
  }
  return result;
}

uint64_t streamAggregateAudio_setPropertiesForSubStreamIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4[3];

  v4[1] = a2;
  v4[2] = 0;
  v4[0] = a1;
  return streamAggregateAudio_setPropertyForSubStreamsIterator(a1, a3, v4);
}

uint64_t SPHubbedDevicesProviderHomeHubCreate(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  return 4294960561;
}

CFStringRef carPlayAnalytics_createAnalyticsKeyForStreamType(int a1, CFStringRef format, uint64_t a3)
{
  uint64_t v3;
  const char *v4;

  v3 = a3 - 96;
  if ((unint64_t)(a3 - 96) < 0x19 && ((0x100FCF1u >> v3) & 1) != 0)
  {
    v4 = off_1E826C060[v3];
  }
  else
  {
    v4 = "?";
    if (a3 == 130)
      v4 = "RemoteControl";
  }
  return CFStringCreateStringWithValidatedFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%s"), format, 0, v4);
}

uint64_t APCarPlayAnalyticsGetTypeID()
{
  if (gAPCarPlayAnalyticsInitOnce != -1)
    dispatch_once_f(&gAPCarPlayAnalyticsInitOnce, 0, (dispatch_function_t)_APCarPlayAnalyticsGetTypeID);
  return gAPCarPlayAnalyticsTypeID;
}

uint64_t _APCarPlayAnalyticsGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPCarPlayAnalyticsTypeID = result;
  return result;
}

uint64_t APCarPlayAnalyticsCreate(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;
  uint64_t v4;
  uint64_t result;

  if (gAPCarPlayAnalyticsInitOnce != -1)
    dispatch_once_f(&gAPCarPlayAnalyticsInitOnce, 0, (dispatch_function_t)_APCarPlayAnalyticsGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v4 = Instance;
    *(_QWORD *)(Instance + 400) = 0;
    *(_OWORD *)(Instance + 368) = 0u;
    *(_OWORD *)(Instance + 384) = 0u;
    *(_OWORD *)(Instance + 336) = 0u;
    *(_OWORD *)(Instance + 352) = 0u;
    *(_OWORD *)(Instance + 304) = 0u;
    *(_OWORD *)(Instance + 320) = 0u;
    *(_OWORD *)(Instance + 272) = 0u;
    *(_OWORD *)(Instance + 288) = 0u;
    *(_OWORD *)(Instance + 240) = 0u;
    *(_OWORD *)(Instance + 256) = 0u;
    *(_OWORD *)(Instance + 208) = 0u;
    *(_OWORD *)(Instance + 224) = 0u;
    *(_OWORD *)(Instance + 176) = 0u;
    *(_OWORD *)(Instance + 192) = 0u;
    *(_OWORD *)(Instance + 144) = 0u;
    *(_OWORD *)(Instance + 160) = 0u;
    *(_OWORD *)(Instance + 112) = 0u;
    *(_OWORD *)(Instance + 128) = 0u;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 96) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_QWORD *)(Instance + 16) = dispatch_queue_create("com.apple.APCarPlayAnalytics", 0);
    if (gLogCategory_APCarPlayAnalytics <= 40
      && (gLogCategory_APCarPlayAnalytics != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    result = 0;
    *a2 = v4;
  }
  else
  {
    APSLogErrorAt();
    return 4294960568;
  }
  return result;
}

uint64_t APCarPlayAnalyticsSubmitToCarPlay(NSObject **cf)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  if (cf)
    CFRetain(cf);
  v2 = cf[2];
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __APCarPlayAnalyticsSubmitToCarPlay_block_invoke;
  v5[3] = &unk_1E826BEE8;
  v5[4] = &v6;
  v5[5] = cf;
  dispatch_async(v2, v5);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t APCarPlayAnalyticsInitASRCollection(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD block[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  if (gLogCategory_APCarPlayAnalytics <= 50
    && (gLogCategory_APCarPlayAnalytics != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2 <= 0.0)
  {
    APSLogErrorAt();
    v5 = 4294960591;
    *((_DWORD *)v9 + 6) = -6705;
  }
  else
  {
    v4 = *(NSObject **)(a1 + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __APCarPlayAnalyticsInitASRCollection_block_invoke;
    block[3] = &unk_1E826BF10;
    block[4] = &v8;
    block[5] = a1;
    *(double *)&block[6] = a2;
    dispatch_sync(v4, block);
    v5 = *((unsigned int *)v9 + 6);
  }
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t APCarPlayAnalyticsInitAudioAnomaliesCollection(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  if (gLogCategory_APCarPlayAnalytics <= 50
    && (gLogCategory_APCarPlayAnalytics != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __APCarPlayAnalyticsInitAudioAnomaliesCollection_block_invoke;
  block[3] = &unk_1E826BF38;
  block[4] = &v6;
  block[5] = a1;
  dispatch_sync(v2, block);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t APCarPlayAnalyticsInitAudioFormatsCollection(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  if (gLogCategory_APCarPlayAnalytics <= 50
    && (gLogCategory_APCarPlayAnalytics != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __APCarPlayAnalyticsInitAudioFormatsCollection_block_invoke;
  block[3] = &unk_1E826BF60;
  block[4] = &v6;
  block[5] = a1;
  dispatch_sync(v2, block);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t APCarPlayAnalyticsCollectFromFeedbackResponse(_QWORD *a1, CFTypeRef cf, const void *a3)
{
  CFTypeID v6;
  NSObject *v7;
  _QWORD block[7];

  if (cf && (v6 = CFGetTypeID(cf), v6 == CFDictionaryGetTypeID()))
  {
    if (a1)
      CFRetain(a1);
    CFRetain(cf);
    if (a3)
      CFRetain(a3);
    v7 = a1[2];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __APCarPlayAnalyticsCollectFromFeedbackResponse_block_invoke;
    block[3] = &__block_descriptor_tmp_26_1;
    block[4] = a1;
    block[5] = cf;
    block[6] = a3;
    dispatch_async(v7, block);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
}

void APCarPlayAnalyticsStartCollections(uint64_t a1, int a2, uint64_t a3, char a4)
{
  NSObject *v8;
  _QWORD block[6];
  int v10;
  char v11;

  if (gLogCategory_APCarPlayAnalytics <= 50
    && (gLogCategory_APCarPlayAnalytics != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v8 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __APCarPlayAnalyticsStartCollections_block_invoke;
  block[3] = &__block_descriptor_tmp_28_1;
  v10 = a2;
  block[4] = a1;
  block[5] = a3;
  v11 = a4;
  dispatch_sync(v8, block);
}

void APCarPlayAnalyticsStopCollections(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  if (gLogCategory_APCarPlayAnalytics <= 50
    && (gLogCategory_APCarPlayAnalytics != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __APCarPlayAnalyticsStopCollections_block_invoke;
  block[3] = &__block_descriptor_tmp_30_0;
  block[4] = a1;
  dispatch_sync(v2, block);
}

void _APCarPlayAnalyticsFinalize(uint64_t a1)
{
  const void *v2;
  NSObject *v3;

  if (gLogCategory_APCarPlayAnalytics <= 40
    && (gLogCategory_APCarPlayAnalytics != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(const void **)(a1 + 400);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 400) = 0;
  }
  v3 = *(NSObject **)(a1 + 16);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void carPlayAnalytics_addValueToReportingString(uint64_t a1, __CFString *theString, double a3)
{
  CFIndex Length;
  const char *v7;

  if (a1 && theString)
  {
    Length = CFStringGetLength(theString);
    v7 = " ";
    if (!Length)
      v7 = "";
    CFStringAppendFormat(theString, 0, CFSTR("%s%@:%.3lf"), v7, a1, *(_QWORD *)&a3);
  }
  else
  {
    APSLogErrorAt();
  }
}

void carPlayAnalytics_addAnomalyToReportingStringIfExists(uint64_t a1, unint64_t a2, __CFString *theString)
{
  unsigned int v3;

  if (a1 && theString)
  {
    if (*(_BYTE *)(a1 + 8))
    {
      if (*(_DWORD *)(a1 + 16) < *(_DWORD *)(a1 + 24))
        v3 = *(_DWORD *)(a1 + 20);
      else
        v3 = *(_DWORD *)(a1 + 20) + 1;
      *(_DWORD *)(a1 + 20) = v3;
      carPlayAnalytics_addValueToReportingString(*(_QWORD *)a1, theString, (double)v3 * 100.0 / (double)a2);
    }
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t __carPlayAnalytics_collectFromFeedbackResponseInternal_block_invoke(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2;
  CFTypeID v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 48))
    return APSLogErrorAt();
  if (!cf)
    return APSLogErrorAt();
  v3 = CFGetTypeID(cf);
  if (v3 != CFDictionaryGetTypeID())
    return APSLogErrorAt();
  result = CFDictionaryGetInt64();
  v5 = result;
  v6 = *(_QWORD *)(v2 + 40);
  if (gLogCategory_APCarPlayAnalytics <= 30)
  {
    if (gLogCategory_APCarPlayAnalytics != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      result = LogPrintF();
  }
  if (v5 == v6)
  {
    result = FigCFDictionaryGetDoubleIfPresent();
    if ((_DWORD)result)
    {
      if (*(_DWORD *)(v2 + 24) > 3u)
      {
        result = APSDataSetStatisticsAddValue();
        if (*(_DWORD *)(v2 + 24) <= 0xAu)
          result = APSDataSetStatisticsAddValue();
        if (gLogCategory_APCarPlayAnalytics <= 40)
        {
          if (gLogCategory_APCarPlayAnalytics != -1)
            return LogPrintF();
          result = _LogCategory_Initialize();
          if ((_DWORD)result)
            return LogPrintF();
        }
      }
      else if (gLogCategory_APCarPlayAnalytics <= 40)
      {
        if (gLogCategory_APCarPlayAnalytics != -1)
          return LogPrintF();
        result = _LogCategory_Initialize();
        if ((_DWORD)result)
          return LogPrintF();
      }
    }
  }
  return result;
}

const void *carPlayAnalytics_collectAudioAnomaliesFromStreamIfPresent(const void *result, const void *a2, uint64_t a3)
{
  CFTypeID v5;
  CFTypeID v6;
  const void *v7;
  const void *v8;

  if (result)
  {
    v5 = CFGetTypeID(result);
    result = (const void *)CFStringGetTypeID();
    if (a2)
    {
      if ((const void *)v5 == result)
      {
        v6 = CFGetTypeID(a2);
        result = (const void *)CFDictionaryGetTypeID();
        if ((const void *)v6 == result)
        {
          FigCFDictionaryGetInt32IfPresent();
          result = (const void *)carPlayAnalytics_convertCFStringToUint64();
          v7 = result;
          v8 = *(const void **)(a3 + 40);
          if (gLogCategory_APCarPlayAnalytics <= 30)
          {
            if (gLogCategory_APCarPlayAnalytics != -1
              || (result = (const void *)_LogCategory_Initialize(), (_DWORD)result))
            {
              result = (const void *)LogPrintF();
            }
          }
          if (v7 == v8)
          {
            carPlayAnalytics_updateAnomalyCounter(a3, (uint64_t)a2, a3 + 200);
            carPlayAnalytics_updateAnomalyCounter(a3, (uint64_t)a2, a3 + 232);
            carPlayAnalytics_updateAnomalyCounter(a3, (uint64_t)a2, a3 + 296);
            return (const void *)carPlayAnalytics_updateAnomalyCounter(a3, (uint64_t)a2, a3 + 264);
          }
        }
      }
    }
  }
  return result;
}

unint64_t carPlayAnalytics_convertCFStringToUint64()
{
  const char *CStringPtrAndBufferToFree;
  unint64_t v1;

  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  v1 = strtoull(CStringPtrAndBufferToFree, 0, 0);
  free(0);
  return v1;
}

uint64_t carPlayAnalytics_updateAnomalyCounter(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  int v6;

  if (a3)
  {
    v4 = result;
    result = FigCFDictionaryGetInt32IfPresent();
    if ((_DWORD)result)
    {
      *(_BYTE *)(a3 + 8) = 1;
      if (-*(_DWORD *)(a3 + 12) >= 1)
        *(_DWORD *)(a3 + 16) -= *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a3 + 12) = 0;
      HIDWORD(v5) = -286331153 * *(_DWORD *)(v4 + 24);
      LODWORD(v5) = HIDWORD(v5);
      if ((v5 >> 1) <= 0x8888888)
      {
        if (*(_DWORD *)(a3 + 16) < *(_DWORD *)(a3 + 24))
          v6 = *(_DWORD *)(a3 + 20);
        else
          v6 = *(_DWORD *)(a3 + 20) + 1;
        *(_DWORD *)(a3 + 16) = 0;
        *(_DWORD *)(a3 + 20) = v6;
      }
      if (gLogCategory_APCarPlayAnalytics <= 40)
      {
        if (gLogCategory_APCarPlayAnalytics != -1)
          return LogPrintF();
        result = _LogCategory_Initialize();
        if ((_DWORD)result)
          return LogPrintF();
      }
    }
  }
  return result;
}

void carPlayAnalytics_collectAudioFormatsFromStreamIfPresent(const void *a1, const void *a2, uint64_t a3)
{
  CFTypeID v5;
  CFTypeID TypeID;
  CFTypeID v7;
  unint64_t v8;
  uint64_t v9;
  const void *SInt32;

  if (a1)
  {
    v5 = CFGetTypeID(a1);
    TypeID = CFStringGetTypeID();
    if (a2)
    {
      if (v5 == TypeID)
      {
        v7 = CFGetTypeID(a2);
        if (v7 == CFDictionaryGetTypeID())
        {
          FigCFDictionaryGetInt32IfPresent();
          v8 = carPlayAnalytics_convertCFStringToUint64();
          v9 = *(_QWORD *)(a3 + 40);
          if (gLogCategory_APCarPlayAnalytics <= 30
            && (gLogCategory_APCarPlayAnalytics != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          if (v8 == v9 && FigCFDictionaryGetInt32IfPresent())
          {
            SInt32 = (const void *)FigCFNumberCreateSInt32();
            CFSetAddValue(*(CFMutableSetRef *)(a3 + 400), SInt32);
            if (gLogCategory_APCarPlayAnalytics <= 40
              && (gLogCategory_APCarPlayAnalytics != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            if (SInt32)
              CFRelease(SInt32);
          }
        }
      }
    }
  }
}

uint64_t APEndpointStreamInterruptibleWrapperCreate(uint64_t a1, const void *a2, const void *a3, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *DerivedStorage;
  dispatch_queue_t v9;
  dispatch_queue_t v10;
  uint64_t v11;
  char label[64];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2 && a3)
  {
    FigEndpointStreamAirPlayGetClassID();
    v7 = CMDerivedObjectCreate();
    if ((_DWORD)v7)
    {
      v11 = v7;
      APSLogErrorAt();
    }
    else
    {
      DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
      *DerivedStorage = CFRetain(a2);
      SNPrintF();
      v9 = dispatch_queue_create(label, 0);
      DerivedStorage[2] = v9;
      if (v9 && (SNPrintF(), v10 = dispatch_queue_create(label, 0), (DerivedStorage[1] = v10) != 0))
      {
        if (*(_QWORD *)CMBaseObjectGetDerivedStorage())
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
        }
        DerivedStorage[5] = CFRetain(a3);
        CMNotificationCenterGetDefaultLocalCenter();
        FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
        FigNotificationCenterAddWeakListener();
        if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
          && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v11 = 0;
        *a4 = 0;
      }
      else
      {
        APSLogErrorAt();
        return 4294950535;
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950536;
  }
  return v11;
}

void interruptibleStreamWrapper_bufferedClientUpdateNotificationCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  if (a2)
  {
    if (!a5)
    {
LABEL_15:
      APSLogErrorAt();
      return;
    }
    CMBaseObjectGetDerivedStorage();
    if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
      && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFDictionaryGetValue(a5, CFSTR("RoutingContextUUID"));
    if (FigCFEqual())
    {
      if (interruptibleStreamWrapper_resumeOrSuspendSubstreamAsNecessary())
        goto LABEL_15;
    }
    else if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
           && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
}

uint64_t APEndpointStreamInterruptibleWrapperBeginInterruption()
{
  CMBaseObjectGetDerivedStorage();
  if (*(_UNKNOWN **)(CMBaseObjectGetVTable() + 16) == &kAPEndpointStreamInterruptibleWrapper_FigEndpointStreamClassWrapper)
    return APSDispatchSyncTask();
  APSLogErrorAt();
  return 4294954514;
}

uint64_t interruptibleStreamWrapper_beginInterruptionSync()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_BYTE *)(DerivedStorage + 32) = 1;
  v1 = interruptibleStreamWrapper_resumeOrSuspendSubstreamAsNecessary();
  if ((_DWORD)v1)
  {
    APSLogErrorAt();
    *(_BYTE *)(DerivedStorage + 32) = 0;
  }
  return v1;
}

uint64_t APEndpointStreamInterruptibleWrapperEndInterruption()
{
  CMBaseObjectGetDerivedStorage();
  if (*(_UNKNOWN **)(CMBaseObjectGetVTable() + 16) == &kAPEndpointStreamInterruptibleWrapper_FigEndpointStreamClassWrapper)
    return APSDispatchSyncTask();
  APSLogErrorAt();
  return 4294954514;
}

uint64_t interruptibleStreamWrapper_endInterruptionSync()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_BYTE *)(DerivedStorage + 32) = 0;
  v1 = interruptibleStreamWrapper_resumeOrSuspendSubstreamAsNecessary();
  if ((_DWORD)v1)
  {
    APSLogErrorAt();
    *(_BYTE *)(DerivedStorage + 32) = 1;
  }
  return v1;
}

void interruptibleStreamWrapper_Finalize()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  const void *v2;
  const void *v3;
  NSObject *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_QWORD *)CMBaseObjectGetDerivedStorage())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
  FigNotificationCenterRemoveWeakListener();
  v1 = *(NSObject **)(DerivedStorage + 8);
  if (v1)
  {
    dispatch_release(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v2 = *(const void **)(DerivedStorage + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 40);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v4 = *(NSObject **)(DerivedStorage + 16);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
}

CFStringRef interruptibleStreamWrapper_CopyDebugDescription(const void *a1)
{
  _QWORD *DerivedStorage;
  const __CFAllocator *v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v3, 0, CFSTR("<APEndpointStreamInterruptibleWrapper %p; sub: %p>"),
           a1,
           *DerivedStorage);
}

uint64_t interruptibleStreamWrapper_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef *v8;
  CFTypeRef v9;
  uint64_t result;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, _QWORD *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (FigCFEqual())
  {
    if (a4)
    {
      v8 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      if (!*(_BYTE *)(DerivedStorage + 48))
        v8 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      v9 = CFRetain(*v8);
      result = 0;
      *a4 = v9;
    }
    else
    {
      APSLogErrorAt();
      return 4294950536;
    }
  }
  else
  {
    CMBaseObject = FigEndpointStreamGetCMBaseObject();
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v12)
      return v12(CMBaseObject, a2, a3, a4);
    else
      return 4294954514;
  }
  return result;
}

uint64_t interruptibleStreamWrapper_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 48) && FigCFEqual())
    return APSSignalErrorAt();
  CMBaseObject = FigEndpointStreamGetCMBaseObject();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v8)
    return v8(CMBaseObject, a2, a3);
  else
    return 4294954514;
}

uint64_t interruptibleStreamWrapper_subStreamNotificationCallback()
{
  uint64_t result;

  result = FigCFEqual();
  if (!(_DWORD)result)
  {
    result = FigCFEqual();
    if (!(_DWORD)result)
    {
      if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
        && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      return CMNotificationCenterPostNotification();
    }
  }
  return result;
}

__CFString *interruptibleStreamWrapper_subEndpointAddRemoveObservingProtocolCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("APEndpointStreamInterruptibleWrapper <APSubEndpointAddRemoveObservingProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t interruptibleStreamWrapper_NotifySubEndpointAdded(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v4 = *DerivedStorage;
  APSubEndpointAddRemoveObservingProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  if (v7)
    return v7(v4, a2);
  else
    return 4294954514;
}

uint64_t interruptibleStreamWrapper_NotifySubEndpointRemoved(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v4 = *DerivedStorage;
  APSubEndpointAddRemoveObservingProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 16);
  if (v7)
    return v7(v4, a2);
  else
    return 4294954514;
}

uint64_t interruptibleStreamWrapper_Suspend(const void *a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t interruptibleStreamWrapper_Resume(const void *a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t interruptibleStreamWrapper_Flush()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t interruptibleStreamWrapper_Dissociate()
{
  uint64_t *DerivedStorage;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v1 = *DerivedStorage;
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v2)
    return v2(v1);
  else
    return 4294954514;
}

void interruptibleStreamWrapper_suspendAsync(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  const void *v5;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 30
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 48))
  {
    v3 = DerivedStorage;
    if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
      && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v4 = *(const void **)(v3 + 24);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(v3 + 24) = 0;
    }
    *(_BYTE *)(v3 + 48) = 0;
    if (interruptibleStreamWrapper_resumeOrSuspendSubstreamAsNecessary())
    {
      APSLogErrorAt();
      *(_BYTE *)(v3 + 48) = 1;
    }
    else
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
  }
  if (*(_QWORD *)(a1 + 16))
  {
    CFRetain(*(CFTypeRef *)a1);
    APSDispatchAsyncFHelper();
  }
  CFRelease(*(CFTypeRef *)a1);
  v5 = *(const void **)(a1 + 8);
  if (v5)
    CFRelease(v5);
}

void interruptibleStreamWrapper_completionCallback(CFTypeRef *a1)
{
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  ((void (*)(CFTypeRef, _QWORD, CFTypeRef))a1[2])(*a1, *((unsigned int *)a1 + 2), a1[3]);
  CFRelease(*a1);
}

uint64_t interruptibleStreamWrapper_resumeOrSuspendSubstreamAsNecessary()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t SharedInstance;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t *);
  BOOL v5;
  uint64_t v6;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  v8 = 0;
  SharedInstance = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v4 || v4(SharedInstance, v3, &v8))
  {
    APSLogErrorAt();
    if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
      && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    v5 = !*(_BYTE *)(v1 + 32) && v8 <= 0 && *(_BYTE *)(v1 + 48);
    if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
      && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!v5)
    {
      if (*(_BYTE *)(DerivedStorage + 49))
      {
        if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
          && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v6 = FigEndpointStreamSuspendSync();
        if (!(_DWORD)v6)
        {
          *(_BYTE *)(DerivedStorage + 49) = 0;
          return v6;
        }
LABEL_40:
        APSLogErrorAt();
        return v6;
      }
      if (gLogCategory_APEndpointStreamInterruptibleWrapper > 50
        || gLogCategory_APEndpointStreamInterruptibleWrapper == -1 && !_LogCategory_Initialize())
      {
        return 0;
      }
LABEL_39:
      LogPrintF();
      return 0;
    }
  }
  if (*(_BYTE *)(DerivedStorage + 49))
  {
    if (gLogCategory_APEndpointStreamInterruptibleWrapper > 50
      || gLogCategory_APEndpointStreamInterruptibleWrapper == -1 && !_LogCategory_Initialize())
    {
      return 0;
    }
    goto LABEL_39;
  }
  if (!*(_BYTE *)(DerivedStorage + 48))
    return 0;
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v6 = FigEndpointStreamResumeSync();
  if ((_DWORD)v6)
    goto LABEL_40;
  *(_BYTE *)(DerivedStorage + 49) = 1;
  return v6;
}

void interruptibleStreamWrapper_resumeAsync(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;
  const void *v6;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 30
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(const void **)(a1 + 8);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 48))
  {
    v4 = DerivedStorage;
    if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
      && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v5 = *(const void **)(v4 + 24);
    *(_QWORD *)(v4 + 24) = v2;
    if (v2)
      CFRetain(v2);
    if (v5)
      CFRelease(v5);
    *(_BYTE *)(v4 + 48) = 1;
    if (interruptibleStreamWrapper_resumeOrSuspendSubstreamAsNecessary())
    {
      APSLogErrorAt();
      *(_BYTE *)(v4 + 48) = 0;
    }
    else
    {
      if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 50
        && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
  }
  if (*(_QWORD *)(a1 + 16))
  {
    CFRetain(*(CFTypeRef *)a1);
    APSDispatchAsyncFHelper();
  }
  CFRelease(*(CFTypeRef *)a1);
  v6 = *(const void **)(a1 + 8);
  if (v6)
    CFRelease(v6);
}

uint64_t interruptibleStreamWrapper_flushSync(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *DerivedStorage;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v4 = *DerivedStorage;
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v5)
    return v5(v4, v1, v2);
  else
    return 4294954514;
}

uint64_t interruptibleStreamWrapper_FlushAudioDataWithinSampleRange()
{
  uint64_t v0;

  FigEndpointStreamAirPlayGetFigEndpointStream();
  CMBaseObjectGetDerivedStorage();
  v0 = APSDispatchSyncTask();
  if ((_DWORD)v0)
    APSLogErrorAt();
  return v0;
}

uint64_t interruptibleStreamWrapper_SetRateAndAnchorTimeWithCompletionCallback(const void *a1)
{
  FigEndpointStreamAirPlayGetFigEndpointStream();
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t interruptibleStreamWrapper_copyTransportFormatDescriptionForSourceContentFormatDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  FigEndpointStreamAirPlayGetFigEndpointStream();
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v6 = *DerivedStorage;
  FigEndpointStreamAirPlayGetClassID();
  if (!CMBaseObjectIsMemberOfClass())
    v6 = 0;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 24);
  if (v7)
    return v7(v6, a2, a3);
  else
    return 4294954514;
}

uint64_t interruptibleStreamWrapper_isPassthroughSupportedForFormatDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  FigEndpointStreamAirPlayGetFigEndpointStream();
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v6 = *DerivedStorage;
  FigEndpointStreamAirPlayGetClassID();
  if (!CMBaseObjectIsMemberOfClass())
    v6 = 0;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 32);
  if (v7)
    return v7(v6, a2, a3);
  else
    return 4294954514;
}

uint64_t interruptibleStreamWrapper_flushAudioDataWithinSampleRangeSync(uint64_t a1)
{
  uint64_t *DerivedStorage;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, _OWORD *);
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[3];

  v5 = *(_OWORD *)(a1 + 8);
  v6 = *(_OWORD *)(a1 + 24);
  v7 = *(_OWORD *)(a1 + 40);
  FigEndpointStreamAirPlayGetFigEndpointStream();
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *DerivedStorage;
  v3 = *(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 8);
  if (!v3)
    return 4294954514;
  v8[0] = v5;
  v8[1] = v6;
  v8[2] = v7;
  return v3(v2, v8);
}

void interruptibleStreamWrapper_setRateAndAnchorTimeWithCompletionCallbackAsync(uint64_t a1)
{
  CFTypeRef v2;
  double v3;
  uint64_t *DerivedStorage;
  char *v5;
  CFTypeRef v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, __int128 *, __int128 *, void (*)(double, uint64_t, uint64_t, __int128 *, __int128 *, uint64_t), char *, double);
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(CFTypeRef *)a1;
  v3 = *(double *)(a1 + 8);
  v13 = *(_OWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 64);
  v11 = *(_OWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 56);
  FigEndpointStreamAirPlayGetFigEndpointStream();
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v5 = (char *)malloc_type_calloc(1uLL, 0x18uLL, 0xA00402214FCE6uLL);
  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v2)
    v6 = CFRetain(v2);
  else
    v6 = 0;
  *(_QWORD *)v5 = v6;
  *(_OWORD *)(v5 + 8) = v10;
  v7 = *DerivedStorage;
  v8 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
  if (v8)
  {
    v9 = *(void (**)(uint64_t, __int128 *, __int128 *, void (*)(double, uint64_t, uint64_t, __int128 *, __int128 *, uint64_t), char *, double))(v8 + 16);
    if (v9)
    {
      v17 = v13;
      v18 = v14;
      v15 = v11;
      v16 = v12;
      v9(v7, &v17, &v15, interruptibleStreamWrapper_setRateCompletionCallback, v5, v3);
    }
  }
  CFRelease(*(CFTypeRef *)a1);
}

void interruptibleStreamWrapper_setRateCompletionCallback(double a1, uint64_t a2, uint64_t a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  CFTypeRef v11;
  void (*v12)(CFTypeRef, uint64_t, __int128 *, __int128 *, uint64_t, double);
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  if (gLogCategory_APEndpointStreamInterruptibleWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptibleWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v11 = *(CFTypeRef *)a6;
  v12 = *(void (**)(CFTypeRef, uint64_t, __int128 *, __int128 *, uint64_t, double))(a6 + 8);
  v13 = *(_QWORD *)(a6 + 16);
  v16 = *a4;
  v17 = *((_QWORD *)a4 + 2);
  v14 = *a5;
  v15 = *((_QWORD *)a5 + 2);
  v12(v11, a3, &v16, &v14, v13, a1);
  CFRelease(*(CFTypeRef *)a6);
  free((void *)a6);
}

uint64_t APSenderSessionFactoryGetTypeID()
{
  if (gAPSenderSessionFactoryInitOnce != -1)
    dispatch_once_f(&gAPSenderSessionFactoryInitOnce, 0, (dispatch_function_t)_APSenderSessionFactoryGetTypeID);
  return gAPSenderSessionFactoryTypeID;
}

uint64_t _APSenderSessionFactoryGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSenderSessionFactoryTypeID = result;
  return result;
}

uint64_t APSenderSessionFactoryCreate(uint64_t a1, uint64_t a2, const void *a3, _QWORD *a4)
{
  _QWORD *Instance;
  _QWORD *v9;
  CFTypeRef v10;
  uint64_t v11;

  if (a1)
  {
    if (a4)
    {
      if (gAPSenderSessionFactoryInitOnce != -1)
        dispatch_once_f(&gAPSenderSessionFactoryInitOnce, 0, (dispatch_function_t)_APSenderSessionFactoryGetTypeID);
      Instance = (_QWORD *)_CFRuntimeCreateInstance();
      if (Instance)
      {
        v9 = Instance;
        Instance[2] = 0;
        Instance[3] = 0;
        Instance[4] = 0;
        if (gLogCategory_APSenderSessionFactory <= 50
          && (gLogCategory_APSenderSessionFactory != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v9[2] = a1;
        v9[3] = a2;
        if (a3)
          v10 = CFRetain(a3);
        else
          v10 = 0;
        v11 = 0;
        v9[4] = v10;
        *a4 = v9;
        return v11;
      }
      v11 = 4294960568;
    }
    else
    {
      v11 = 4294960591;
    }
  }
  else
  {
    v11 = 4294960591;
  }
  APSLogErrorAt();
  if (gLogCategory_APSenderSessionFactory <= 90
    && (gLogCategory_APSenderSessionFactory != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v11;
}

uint64_t APSenderSessionFactoryCreateAirPlaySession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, __int16 a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17)
{
  int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;

  if (a1)
  {
    if (gLogCategory_APSenderSessionFactory <= 50)
    {
      v29 = a8;
      v27 = a6;
      v28 = a7;
      v25 = a4;
      v26 = a5;
      v23 = a2;
      v24 = a3;
      if (gLogCategory_APSenderSessionFactory != -1)
        goto LABEL_4;
      v19 = _LogCategory_Initialize();
      a2 = v23;
      a3 = v24;
      a4 = v25;
      a5 = v26;
      a6 = v27;
      a7 = v28;
      a8 = v29;
      if (v19)
      {
LABEL_4:
        v22 = a1;
        LogPrintF();
        a2 = v23;
        a3 = v24;
        a4 = v25;
        a5 = v26;
        a6 = v27;
        a7 = v28;
        a8 = v29;
      }
    }
    BYTE2(v22) = a11;
    LOWORD(v22) = a10;
    v20 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 32), a2, a3, a4, a5, a6, a7, a8, a9, v22, a12, a13, a14, a15, a16, a17);
    if ((_DWORD)v20)
      APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v20;
}

uint64_t APSenderSessionFactoryCreateLegacySession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v8)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  int v16;
  uint64_t v17;

  if (a1)
  {
    v8 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24);
    if (v8)
    {
      if (gLogCategory_APSenderSessionFactory <= 50
        && (gLogCategory_APSenderSessionFactory != -1
         || (v16 = _LogCategory_Initialize(),
             v8 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24),
             v16)))
      {
        LogPrintF();
        v15 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24))(*(_QWORD *)(a1 + 32), a2, a3, a4, a5, a6, a7);
      }
      else
      {
        v15 = v8(*(_QWORD *)(a1 + 32), a2, a3, a4, a5, a6, a7);
      }
      v17 = v15;
      if ((_DWORD)v15)
        APSLogErrorAt();
    }
    else
    {
      return 4294960561;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v17;
}

void _APSenderSessionFactoryFinalize(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    CFRelease(v1);
  if (gLogCategory_APSenderSessionFactory <= 50
    && (gLogCategory_APSenderSessionFactory != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

uint64_t APSubEndpointAddRemoveObservingProtocolGetProtocolID()
{
  MEMORY[0x1CAA4012C](&APSubEndpointAddRemoveObservingProtocolGetProtocolID_sRegisterAPSubEndpointAddRemoveObservingProtocolTypeOnce, registerAPSubEndpointAddRemoveObservingProtocolType);
  return sAPSubEndpointAddRemoveObservingProtocolID;
}

uint64_t registerAPSubEndpointAddRemoveObservingProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t APEndpointStreamCarPlayAudioRemote_ServerDied()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t APEndpointStreamCarPlayAudioRemoteCreate(uint64_t a1, uint64_t a2, const void *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  CFTypeRef cf1;
  CFTypeRef cf;
  xpc_object_t xdict;
  uint64_t v16;

  FigEndpointStreamGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
    v12 = v7;
    goto LABEL_22;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 8) = a2;
  *(_BYTE *)(DerivedStorage + 16) = 0;
  *(_QWORD *)(DerivedStorage + 24) = CFRetain(a3);
  CMBaseObjectGetDerivedStorage();
  xdict = 0;
  v16 = 0;
  cf1 = 0;
  cf = 0;
  v9 = FigXPCCreateBasicMessage();
  if ((_DWORD)v9)
  {
    v12 = v9;
LABEL_5:
    APSLogErrorAt();
    goto LABEL_6;
  }
  v10 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)v10)
  {
    APSLogErrorAt();
    v12 = 0;
    goto LABEL_6;
  }
  v12 = v10;
  if ((_DWORD)v10 != -6720)
    goto LABEL_5;
LABEL_6:
  if (cf)
    CFRelease(cf);
  if (cf1)
    CFRelease(cf1);
  if ((_DWORD)v12)
  {
    if ((_DWORD)v12 == -6720)
      return v12;
LABEL_22:
    APSLogErrorAt();
    return v12;
  }
  if (gLogCategory_APEndpointStreamCarPlayAudioRemote <= 50
    && (gLogCategory_APEndpointStreamCarPlayAudioRemote != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v12 = 0;
  *a4 = 0;
  return v12;
}

void carRemoteAudioStream_finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  uint64_t v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamCarPlayAudioRemote <= 30
    && (gLogCategory_APEndpointStreamCarPlayAudioRemote != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v1 = (const void *)DerivedStorage[3];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[3] = 0;
  }
  v2 = (const void *)DerivedStorage[4];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[4] = 0;
  }
  if (*DerivedStorage)
  {
    v3 = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(v3 + 16)
      && (FigXPCCreateBasicMessage() || FigXPCRemoteClientSendSyncMessage()))
    {
      APSLogErrorAt();
      *(_BYTE *)(v3 + 16) = 0;
      APSLogErrorAt();
    }
    else
    {
      FigXPCRemoteClientDisassociateObject();
      *(_BYTE *)(v3 + 16) = 0;
      *DerivedStorage = 0;
    }
  }
}

CFMutableStringRef carRemoteAudioStream_copyDebugDescription()
{
  CFMutableStringRef Mutable;

  CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendF();
  CFStringAppendF();
  CFStringAppendF();
  return Mutable;
}

uint64_t carRemoteAudioStream_copyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    v7 = DerivedStorage;
    if (*(_BYTE *)(DerivedStorage + 16))
    {
      if (CFEqual(CFSTR("CarPlayAudioFormats"), a2))
      {
        v8 = 0;
        *a4 = CFRetain(*(CFTypeRef *)(v7 + 32));
      }
      else
      {
        v8 = FigXPCSendStdCopyPropertyMessage();
        if ((_DWORD)v8)
          APSLogErrorAt();
      }
    }
    else
    {
      APSLogErrorAt();
      return 4294960587;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960578;
  }
  return v8;
}

uint64_t carRemoteAudioStream_setProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t ObjectID;
  uint64_t v8;
  uint64_t Description;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294960578;
  }
  if (!*(_BYTE *)(DerivedStorage + 16))
  {
    APSLogErrorAt();
    return 4294960587;
  }
  if (CFEqual((CFTypeRef)*MEMORY[0x1E0CA4760], a2))
  {
    v6 = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)v6)
    {
      if (*(_BYTE *)(v6 + 16))
      {
        if (a3)
          ObjectID = APAudioSinkSharedMemRemote_GetObjectID();
        else
          ObjectID = 0;
        v13 = FigXPCCreateBasicMessage();
        if ((_DWORD)v13)
        {
          v12 = v13;
        }
        else
        {
          xpc_dictionary_set_uint64(0, kAPCarPlayAVVCMsgParam_XPCSinkObjectID[0], ObjectID);
          v12 = FigXPCRemoteClientSendSyncMessage();
          if (!(_DWORD)v12)
            return v12;
        }
        goto LABEL_31;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (!CFEqual(CFSTR("AudioFormatInfo"), a2))
  {
    v12 = FigXPCSendStdSetPropertyMessage();
    if (!(_DWORD)v12)
      return v12;
LABEL_32:
    APSLogErrorAt();
    return v12;
  }
  v8 = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)v8)
  {
LABEL_27:
    APSLogErrorAt();
    v12 = 4294960578;
    goto LABEL_32;
  }
  if (!*(_BYTE *)(v8 + 16))
  {
LABEL_28:
    APSLogErrorAt();
    v12 = 4294960587;
    goto LABEL_32;
  }
  Description = APCarPlayAudioFormatInfoGetDescription(a3);
  if (!Description)
  {
    APSLogErrorAt();
    v12 = 4294960591;
    goto LABEL_32;
  }
  v10 = (const void *)Description;
  v11 = FigXPCCreateBasicMessage();
  if ((_DWORD)v11)
  {
    v12 = v11;
LABEL_31:
    APSLogErrorAt();
    goto LABEL_32;
  }
  xpc_dictionary_set_data(0, kAPCarPlayAVVCMsgParam_Format[0], v10, 0x28uLL);
  v12 = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)v12)
    goto LABEL_31;
  return v12;
}

uint64_t carRemoteAudioStream_suspend(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    if (*(_BYTE *)(DerivedStorage + 16))
    {
      v8 = FigXPCCreateBasicMessage();
      if ((_DWORD)v8)
      {
        v9 = v8;
      }
      else
      {
        v9 = FigXPCRemoteClientSendSyncMessage();
        if (!(_DWORD)v9)
          goto LABEL_5;
      }
      APSLogErrorAt();
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    v9 = 4294960578;
  }
LABEL_5:
  if (a3)
    a3(a1, v9, a4);
  return v9;
}

uint64_t carRemoteAudioStream_resume(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _QWORD, uint64_t), uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294960578;
  }
  if (!*(_BYTE *)(DerivedStorage + 16))
  {
    APSLogErrorAt();
    return 4294960587;
  }
  v8 = FigXPCCreateBasicMessage();
  if ((_DWORD)v8)
  {
    v11 = v8;
LABEL_15:
    APSLogErrorAt();
    return v11;
  }
  v9 = FigXPCMessageSetCFDictionary();
  if ((_DWORD)v9)
  {
    v11 = v9;
    goto LABEL_15;
  }
  v10 = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)v10)
  {
    v11 = v10;
    goto LABEL_15;
  }
  if (a3)
    a3(a1, 0, a4);
  return 0;
}

uint64_t APCarPlayAudioFormatInfoGetTypeID()
{
  if (APCarPlayAudioFormatInfoGetTypeID_initOnce != -1)
    dispatch_once(&APCarPlayAudioFormatInfoGetTypeID_initOnce, &__block_literal_global_22);
  return APCarPlayAudioFormatInfoGetTypeID_typeID;
}

void _APCarPlayAudioFormatInfoFinalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 112);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 112) = 0;
  }
}

CFStringRef _APCarPlayAudioFormatInfoCopyFormattingDesc(const void *a1)
{
  const __CFAllocator *v2;
  CFStringRef v3;

  AppendPrintF();
  v2 = CFGetAllocator(a1);
  v3 = CFStringCreateWithCString(v2, 0, 0x8000100u);
  free(0);
  return v3;
}

uint64_t APCarPlayAudioFormatInfoGetDescription(uint64_t a1)
{
  if (a1)
    return a1 + 16;
  else
    return 0;
}

uint64_t APCarPlayAudioFormatInfoGetHALDescription(uint64_t a1)
{
  if (a1)
    return a1 + 56;
  else
    return 0;
}

uint64_t APCarPlayAudioFormatInfoGetStreamType(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 104);
  return result;
}

uint64_t APCarPlayAudioFormatInfoGetAudioType(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 112);
  return result;
}

uint64_t APCarPlayAudioFormatInfoGetAudioFormat(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 96);
  return result;
}

uint64_t APCarPlayAudioFormatInfoGetLatencyInfo(uint64_t a1)
{
  if (a1)
    return a1 + 120;
  else
    return 0;
}

uint64_t APCarPlayAudioFormatsCopyFormatsForAudioType(_BYTE *a1, int a2, const __CFString *a3, unint64_t *a4, CFArrayRef *a5, char *a6)
{
  const __CFArray *TypedValue;
  CFIndex Count;
  CFIndex v14;
  const __CFString *v15;
  uint64_t v16;
  const __CFDictionary *TypedValueAtIndex;
  const __CFString *v18;
  uint64_t v19;
  char v20;
  CFArrayRef Copy;
  _BYTE *v22;
  const __CFArray *v23;
  const __CFAllocator *v24;
  const __CFString *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v29;
  _BYTE *v30;
  uint64_t Int64;
  unsigned int v32;

  v32 = 0;
  if (!a2 || !a3 || (CFArrayGetTypeID(), (TypedValue = (const __CFArray *)CFDictionaryGetTypedValue()) == 0))
  {
    APSLogErrorAt();
    Copy = 0;
    goto LABEL_59;
  }
  v30 = a1;
  Count = CFArrayGetCount(TypedValue);
  if (Count < 1)
  {
    Copy = 0;
    v19 = 0;
    v20 = 0;
    v22 = v30;
    goto LABEL_34;
  }
  v14 = Count;
  v29 = a4;
  v15 = a3;
  Int64 = 0;
  v16 = 0;
  while (1)
  {
    CFDictionaryGetTypeID();
    TypedValueAtIndex = (const __CFDictionary *)CFArrayGetTypedValueAtIndex();
    if (CFDictionaryGetInt64() == a2)
      break;
LABEL_11:
    if (v14 == ++v16)
    {
      v19 = 0;
      v20 = 0;
      Copy = 0;
      a4 = v29;
      v22 = v30;
      goto LABEL_25;
    }
  }
  CFStringGetTypeID();
  v18 = (const __CFString *)CFDictionaryGetTypedValue();
  if (v18 && CFStringCompare(v15, v18, 0))
  {
    if (FigCFEqual())
    {
      carPlayAudioFormat_getFormatsKeyForAudioType(a2, CFSTR("default"));
      Int64 = CFDictionaryGetInt64();
    }
    goto LABEL_11;
  }
  carPlayAudioFormat_getFormatsKeyForAudioType(a2, v15);
  v19 = CFDictionaryGetInt64();
  if (v18)
  {
    v20 = 0;
    a4 = v29;
    v22 = v30;
  }
  else
  {
    a4 = v29;
    v22 = a1;
    if (gLogCategory_APCarPlayAudioFormat <= 30
      && (gLogCategory_APCarPlayAudioFormat != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v20 = 1;
  }
  if (CFDictionaryContainsKey(TypedValueAtIndex, CFSTR("audioOutputFormatsExtended")))
  {
    CFArrayGetTypeID();
    v23 = (const __CFArray *)CFDictionaryGetTypedValue();
    v24 = CFGetAllocator(v22);
    Copy = CFArrayCreateCopy(v24, v23);
    if (v19)
      goto LABEL_34;
  }
  else
  {
    Copy = 0;
    if (v19)
      goto LABEL_34;
  }
LABEL_25:
  if (Int64)
  {
    CFStringGetTypeID();
    v25 = (const __CFString *)CFDictionaryGetTypedValue();
    if (CFStringHasPrefix(v25, CFSTR("Apple")))
    {
      if (gLogCategory_APCarPlayAudioFormat > 30)
      {
        v20 = 1;
        v19 = Int64;
      }
      else
      {
        v19 = Int64;
        if (gLogCategory_APCarPlayAudioFormat != -1 || _LogCategory_Initialize())
          LogPrintF();
        v20 = 1;
      }
    }
    else
    {
      v19 = 0;
    }
  }
LABEL_34:
  if (v22[28])
  {
    v26 = v19 & 0xF7FE0F8FFFFC0000;
    if ((v19 & 0xF7FE0F8FFFFC0000) != 0)
      goto LABEL_36;
LABEL_53:
    APSLogErrorAt();
LABEL_59:
    v32 = -6705;
    if (gLogCategory_APCarPlayAudioFormat <= 50
      && (gLogCategory_APCarPlayAudioFormat != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    v27 = 0x41F04000C3FFFCLL;
    if (!v22[31])
      v27 = 0x1F0400003FFFCLL;
    v26 = v27 & v19;
    if ((v27 & v19) == 0)
      goto LABEL_53;
LABEL_36:
    if (v22[30] && FigCFEqual())
      v26 &= 0x80014000114uLL;
    if (a4)
      *a4 = v26;
    if (a5 && Copy)
    {
      *a5 = Copy;
      Copy = 0;
    }
    if (a6)
      *a6 = v20;
  }
  if (Copy)
    CFRelease(Copy);
  return v32;
}

const __CFString *carPlayAudioFormat_getFormatsKeyForAudioType(int a1, CFTypeRef cf1)
{
  const __CFString *v3;

  if (a1 == 107)
    return CFSTR("audioInputFormats");
  if (a1 != 100)
    return CFSTR("audioOutputFormats");
  if (CFEqual(cf1, CFSTR("default")))
    return CFSTR("audioInputFormats");
  v3 = CFSTR("audioInputFormats");
  if (!CFEqual(cf1, CFSTR("telephony")) && !CFEqual(cf1, CFSTR("speechRecognition")))
    return CFSTR("audioOutputFormats");
  return v3;
}

uint64_t APCarPlayAudioFormatsGetTypeID()
{
  if (APCarPlayAudioFormatsGetTypeID_initOnce != -1)
    dispatch_once(&APCarPlayAudioFormatsGetTypeID_initOnce, &__block_literal_global_36);
  return APCarPlayAudioFormatsGetTypeID_typeID;
}

void _APCarPlayAudioFormatsFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = (const void *)a1[7];
  if (v3)
  {
    CFRelease(v3);
    a1[7] = 0;
  }
  v4 = (const void *)a1[8];
  if (v4)
  {
    CFRelease(v4);
    a1[8] = 0;
  }
  v5 = (const void *)a1[9];
  if (v5)
  {
    CFRelease(v5);
    a1[9] = 0;
  }
}

CFStringRef _APCarPlayAudioFormatsCopyFormattingDesc(const void *a1)
{
  const __CFAllocator *v2;
  CFStringRef v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  AppendPrintF();
  CFDictionaryApplyBlock();
  AppendPrintF();
  v2 = CFGetAllocator(a1);
  v3 = CFStringCreateWithCString(v2, (const char *)v6[3], 0x8000100u);
  free((void *)v6[3]);
  _Block_object_dispose(&v5, 8);
  return v3;
}

void sub_1C95094FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t APCarPlayAudioFormatsCreate(const __CFAllocator *a1, const void *a2, int a3, char a4, char a5, int a6)
{
  _OWORD *Instance;
  uint64_t v13;
  const __CFAllocator *v14;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v16;
  CFMutableDictionaryRef v17;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFAllocatorRef allocator;
  void *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v37 = 0u;
  v38 = 0u;
  if (a2)
  {
    if (APCarPlayAudioFormatsGetTypeID_initOnce != -1)
      dispatch_once(&APCarPlayAudioFormatsGetTypeID_initOnce, &__block_literal_global_36);
    Instance = (_OWORD *)_CFRuntimeCreateInstance();
    v13 = (uint64_t)Instance;
    if (Instance)
    {
      Instance[3] = 0u;
      Instance[4] = 0u;
      Instance[1] = 0u;
      Instance[2] = 0u;
      *((_QWORD *)Instance + 2) = CFRetain(a2);
      *(_BYTE *)(v13 + 28) = a3;
      *(_BYTE *)(v13 + 29) = a4;
      *(_BYTE *)(v13 + 31) = a5;
      CFDictionaryGetCString();
      allocator = a1;
      *(_DWORD *)(v13 + 24) = TextToSourceVersion();
      if (!*(_BYTE *)(v13 + 28))
      {
        if (APSSettingsGetInt64())
        {
          if (a6)
          {
            if (gLogCategory_APCarPlayAudioFormat <= 50
              && (gLogCategory_APCarPlayAudioFormat != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            *(_BYTE *)(v13 + 30) = 1;
          }
        }
        else
        {
          v35 = 0u;
          v36 = 0u;
          v33 = 0u;
          v34 = 0u;
          v19 = (void *)objc_msgSend((id)-[objc_class sharedAccessoryManager](getEAAccessoryManagerClass(), "sharedAccessoryManager"), "connectedAccessories");
          v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v33, v39, 16);
          if (v20)
          {
            v21 = v20;
            v22 = *(_QWORD *)v34;
            v31 = v19;
            do
            {
              for (i = 0; i != v21; ++i)
              {
                if (*(_QWORD *)v34 != v22)
                  objc_enumerationMutation(v19);
                v24 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
                if (objc_msgSend(v24, "supportsCarPlay", v26, v27, v28, v29)
                  && (!objc_msgSend((id)objc_msgSend(v24, "manufacturer"), "compare:options:", CFSTR("TOYOTA MOTOR CORPORATION"), 1)&& !objc_msgSend((id)objc_msgSend(v24, "modelNumber"), "compare:options:", CFSTR("172611123"), 1)&& (!objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("010600"), 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("011400"), 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("2012800"),
                          1)
                    || !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("2013400"), 1))|| !objc_msgSend((id)objc_msgSend(v24, "manufacturer"), "compare:options:", CFSTR("TOYOTA MOTOR CORPORATION"), 1)&& !objc_msgSend((id)objc_msgSend(v24, "modelNumber"), "compare:options:", CFSTR("172611251"), 1)&& (!objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("010600"), 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("011400"),
                          1)
                    || !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("200700"), 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("200960"), 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("201100"), 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("2012800"), 1))
                   || !objc_msgSend((id)objc_msgSend(v24, "manufacturer"), "compare:options:", CFSTR("TOYOTA MOTOR CORPORATION"), 1)&& !objc_msgSend((id)objc_msgSend(v24, "modelNumber"), "compare:options:", CFSTR("172611252"), 1)&& (!objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("2000700"), 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("2000960"), 1))|| !objc_msgSend((id)objc_msgSend(v24, "manufacturer"), "compare:options:", CFSTR("Toyota Multimedia"),
                         1)
                   && (!objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("1.0.2"), 1)
                    || !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("1.0.3"), 1)
                    || !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("19.1.18"), 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("19.4.18"), 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("19.8.29"), 1))|| !objc_msgSend((id)objc_msgSend(v24, "manufacturer"), "compare:options:", CFSTR("Harley-Davidson"), 1)
                   && (!objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("M19.18.26.03"), 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("M19.18.32.01"), 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("M19.18.42.01"), 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("M19.19.02.01"), 1)
                    || !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("M19.19.03.00"), 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("M20.19.20.01"), 1)|| !objc_msgSend((id)objc_msgSend(v24, "firmwareRevision"), "compare:options:", CFSTR("M20.19.39.00"), 1))))
                {
                  if (gLogCategory_APCarPlayAudioFormat <= 50
                    && (gLogCategory_APCarPlayAudioFormat != -1 || _LogCategory_Initialize()))
                  {
                    v32 = objc_msgSend(v24, "name");
                    v25 = objc_msgSend(v24, "manufacturer");
                    v28 = objc_msgSend(v24, "modelNumber");
                    v29 = objc_msgSend(v24, "firmwareRevision");
                    v27 = v25;
                    v19 = v31;
                    v26 = v32;
                    LogPrintF();
                  }
                  *(_BYTE *)(v13 + 30) = 1;
                }
              }
              v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v33, v39, 16);
            }
            while (v21);
          }
        }
      }
      if (a3)
      {
        *(_DWORD *)(v13 + 32) = FigGetCFPreferenceNumberWithDefault();
        *(_DWORD *)(v13 + 36) = FigGetCFPreferenceNumberWithDefault();
        v14 = allocator;
      }
      else
      {
        v14 = allocator;
        *(_QWORD *)(v13 + 32) = FigGetCFPreferenceNumberWithDefault();
      }
      if (gLogCategory_APCarPlayAudioFormat <= 50
        && (gLogCategory_APCarPlayAudioFormat != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_QWORD *)(v13 + 56) = Mutable;
      if (Mutable
        && (v16 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
            (*(_QWORD *)(v13 + 64) = v16) != 0)
        && (v17 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
            (*(_QWORD *)(v13 + 72) = v17) != 0))
      {
        if (!carPlayAudioFormat_repackageFormatsForStream(v13, 100, (uint64_t)&kMainAudioTypes, 5uLL)
          && !carPlayAudioFormat_repackageFormatsForStream(v13, 101, (uint64_t)&kAltAudioTypes, 1uLL)
          && (!*(_BYTE *)(v13 + 29)
           || !carPlayAudioFormat_repackageFormatsForStream(v13, 106, (uint64_t)&kAuxAudioTypes, 1uLL)
           && !carPlayAudioFormat_repackageFormatsForStream(v13, 107, (uint64_t)&kOutOfBandAVVCAudioTypes, 1uLL))&& (!*(_BYTE *)(v13 + 31)|| !carPlayAudioFormat_repackageFormatsForStream(v13, 103, (uint64_t)&kMainBufferedAudioTypes, 1uLL)))
        {
          goto LABEL_28;
        }
        APSLogErrorAt();
        APSLogErrorAt();
      }
      else
      {
        APSLogErrorAt();
      }
      CFRelease((CFTypeRef)v13);
      v13 = 0;
    }
    else
    {
      APSLogErrorAt();
    }
  }
  else
  {
    APSLogErrorAt();
    v13 = 0;
  }
LABEL_28:
  if (gLogCategory_APCarPlayAudioFormat <= 30
    && (gLogCategory_APCarPlayAudioFormat != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v13;
}

uint64_t APCarPlayAudioFormatsGetHALDescriptions(uint64_t a1, int a2, int a3, const UInt8 **a4, unint64_t *a5)
{
  const __CFString *v7;
  const __CFString *v8;
  const __CFDictionary *Value;
  const __CFData *v10;
  const __CFData *v11;
  unint64_t Length;
  uint64_t result;

  if (a2 > 1937010029)
  {
    if (a2 == 1937010030)
    {
      v7 = CFSTR("main");
    }
    else
    {
      if (a2 != 1937012579)
        goto LABEL_25;
      v7 = CFSTR("oovc");
    }
  }
  else if (a2 == 1937006956)
  {
    v7 = CFSTR("alt");
  }
  else
  {
    if (a2 != 1937006968)
      goto LABEL_25;
    v7 = CFSTR("auxo");
  }
  if (a3 <= 1635020132)
  {
    if (a3 == 1635017068)
    {
      v8 = CFSTR("alert");
      goto LABEL_22;
    }
    if (a3 == 1635017830)
    {
      v8 = CFSTR("default");
      goto LABEL_22;
    }
LABEL_25:
    APSLogErrorAt();
    return 4294960591;
  }
  if (a3 == 1635021925)
  {
    v8 = CFSTR("telephony");
    goto LABEL_22;
  }
  if (a3 == 1635021682)
  {
    v8 = CFSTR("speechRecognition");
    goto LABEL_22;
  }
  if (a3 != 1635020133)
    goto LABEL_25;
  v8 = CFSTR("media");
LABEL_22:
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), v7);
  if (Value && (v10 = (const __CFData *)CFDictionaryGetValue(Value, v8)) != 0)
  {
    v11 = v10;
    *a4 = CFDataGetBytePtr(v10);
    Length = CFDataGetLength(v11);
    result = 0;
    *a5 = Length / 0x38;
  }
  else
  {
    APSLogErrorAt();
    return 4294960569;
  }
  return result;
}

uint64_t APCarPlayAudioFormatsCopyAudioFormatInfosForStreamAndType(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  const __CFString *v5;
  const __CFString *v6;
  const __CFDictionary *Value;
  const void *v8;
  CFTypeRef v9;
  uint64_t result;

  if (a2 > 1937010029)
  {
    if (a2 == 1937010030)
    {
      v5 = CFSTR("main");
    }
    else
    {
      if (a2 != 1937012579)
        goto LABEL_25;
      v5 = CFSTR("oovc");
    }
  }
  else if (a2 == 1937006956)
  {
    v5 = CFSTR("alt");
  }
  else
  {
    if (a2 != 1937006968)
      goto LABEL_25;
    v5 = CFSTR("auxo");
  }
  if (a3 <= 1635020132)
  {
    if (a3 == 1635017068)
    {
      v6 = CFSTR("alert");
      goto LABEL_22;
    }
    if (a3 == 1635017830)
    {
      v6 = CFSTR("default");
      goto LABEL_22;
    }
LABEL_25:
    APSLogErrorAt();
    return 4294960591;
  }
  if (a3 == 1635021925)
  {
    v6 = CFSTR("telephony");
    goto LABEL_22;
  }
  if (a3 == 1635021682)
  {
    v6 = CFSTR("speechRecognition");
    goto LABEL_22;
  }
  if (a3 != 1635020133)
    goto LABEL_25;
  v6 = CFSTR("media");
LABEL_22:
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), v5);
  if (Value && (v8 = CFDictionaryGetValue(Value, v6)) != 0)
  {
    v9 = CFRetain(v8);
    result = 0;
    *a4 = v9;
  }
  else
  {
    APSLogErrorAt();
    return 4294960569;
  }
  return result;
}

uint64_t APCarPlayAudioFormatsCopyFormatInfoForHALDescription(uint64_t a1, int a2, int a3, const void *a4, CFTypeRef *a5)
{
  uint64_t HALDescriptions;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *ValueAtIndex;
  CFIndex v15;
  char *v16;
  const __CFArray *v17;
  CFTypeRef cf;
  uint64_t v20;
  void *__s1;

  v20 = 0;
  __s1 = 0;
  cf = 0;
  HALDescriptions = APCarPlayAudioFormatsGetHALDescriptions(a1, a2, a3, (const UInt8 **)&__s1, (unint64_t *)&v20);
  if ((_DWORD)HALDescriptions)
  {
    v13 = HALDescriptions;
    APSLogErrorAt();
  }
  else
  {
    v11 = APCarPlayAudioFormatsCopyAudioFormatInfosForStreamAndType(a1, a2, a3, &cf);
    v12 = v20;
    if (v20 < 1)
      goto LABEL_9;
    v13 = v11;
    ValueAtIndex = 0;
    v15 = 0;
    v16 = (char *)__s1;
    v17 = (const __CFArray *)cf;
    do
    {
      if (!memcmp(v16, a4, 0x28uLL))
        ValueAtIndex = CFArrayGetValueAtIndex(v17, v15);
      ++v15;
      v16 += 56;
    }
    while (v12 != v15);
    if (ValueAtIndex)
    {
      *a5 = CFRetain(ValueAtIndex);
    }
    else
    {
LABEL_9:
      APSLogErrorAt();
      v13 = 4294960591;
    }
    if (cf)
      CFRelease(cf);
  }
  return v13;
}

uint64_t APCarPlayAudioFormatsCopyFormatInfoForStreamDescription(uint64_t a1, int a2, int a3, const void *a4, CFTypeRef *a5)
{
  uint64_t v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  char *ValueAtIndex;
  const void *v13;
  char *v14;
  uint64_t v15;
  CFTypeRef v16;
  CFArrayRef theArray;

  theArray = 0;
  v7 = APCarPlayAudioFormatsCopyAudioFormatInfosForStreamAndType(a1, a2, a3, &theArray);
  if ((_DWORD)v7)
  {
    v15 = v7;
    APSLogErrorAt();
    v8 = theArray;
    if (!theArray)
      return v15;
    goto LABEL_13;
  }
  v8 = theArray;
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
    goto LABEL_9;
  v10 = Count;
  v11 = 0;
  while (1)
  {
    ValueAtIndex = (char *)CFArrayGetValueAtIndex(v8, v11);
    v13 = ValueAtIndex;
    v14 = ValueAtIndex ? ValueAtIndex + 16 : 0;
    if (!memcmp(v14, a4, 0x28uLL))
      break;
    if (v10 == ++v11)
      goto LABEL_9;
  }
  v16 = CFRetain(v13);
  if (!v16)
  {
LABEL_9:
    APSLogErrorAt();
    v15 = 4294960591;
    if (!v8)
      return v15;
    goto LABEL_13;
  }
  v15 = 0;
  *a5 = CFRetain(v16);
  if (v8)
LABEL_13:
    CFRelease(v8);
  return v15;
}

Class initEAAccessoryManager()
{
  Class result;

  if (ExternalAccessoryLibrary_sOnce != -1)
    dispatch_once(&ExternalAccessoryLibrary_sOnce, &__block_literal_global_127);
  result = objc_getClass("EAAccessoryManager");
  classEAAccessoryManager = (uint64_t)result;
  getEAAccessoryManagerClass = EAAccessoryManagerFunction;
  return result;
}

uint64_t EAAccessoryManagerFunction()
{
  return classEAAccessoryManager;
}

uint64_t carPlayAudioFormat_repackageFormatsForStream(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  int v4;
  uint64_t v5;
  int v7;
  void *v9;
  const __CFAllocator *v10;
  const __CFAllocator *v11;
  CFMutableDictionaryRef v12;
  const __CFAllocator *v13;
  CFMutableDictionaryRef v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  const __CFAllocator *v22;
  __CFData *v23;
  __CFData *v24;
  const __CFAllocator *v25;
  __CFData *v26;
  __CFData *v27;
  UInt8 *v28;
  const __CFAllocator *v29;
  CFMutableArrayRef v30;
  CFMutableArrayRef v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const __CFString *v35;
  BOOL v36;
  char v37;
  uint64_t v38;
  _DWORD *v39;
  int v40;
  UInt8 *v41;
  uint64_t v42;
  UInt8 *v43;
  int v44;
  const __CFArray *TypedValue;
  CFIndex Count;
  CFIndex v47;
  int v48;
  int v49;
  int Int64Ranged;
  uint64_t v51;
  int Int64;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  double v58;
  UInt8 *v59;
  uint64_t Instance;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __CFData *v64;
  __CFData *v65;
  int v66;
  int v67;
  void *v68;
  __CFDictionary *v69;
  __CFDictionary *v70;
  __CFData *v72;
  CFTypeRef cf;
  int v74;
  uint64_t v75;
  int v76;
  __CFDictionary *theDict;
  __CFDictionary *v78;
  CFMutableDictionaryRef Mutable;
  __CFString **v81;
  int v82;
  __CFData *theData;
  __CFData *v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  UInt8 *MutableBytePtr;
  __CFArray *v89;
  UInt8 *v90;
  uint64_t v91;
  UInt8 *v92;
  const __CFString *v93;
  int v94;
  char v95;
  unint64_t v96;
  unsigned int v97;

  v4 = a2 - 100;
  if ((a2 - 100) > 9 || ((0x3CBu >> v4) & 1) == 0)
  {
    APSLogErrorAt();
    return 0;
  }
  v7 = a2;
  v9 = (void *)*((_QWORD *)&off_1E826C568 + v4);
  CFRetain(v9);
  v10 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v70 = (__CFDictionary *)v9;
    v5 = 4294960568;
    goto LABEL_149;
  }
  v11 = CFGetAllocator((CFTypeRef)a1);
  v12 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v12
    || (v13 = CFGetAllocator((CFTypeRef)a1),
        (v14 = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0))
  {
    APSLogErrorAt();
    CFRelease(v9);
    v69 = 0;
    v5 = 4294960568;
    goto LABEL_141;
  }
  theDict = v14;
  v78 = v12;
  cf = v9;
  if (!a4)
  {
    v18 = *(unsigned __int8 *)(a1 + 28);
LABEL_128:
    v67 = *(_DWORD *)(a1 + 40);
    if (v18)
    {
      v68 = (void *)cf;
      v69 = theDict;
      v12 = v78;
      if (v67 != 1633772389 && v67 != 1869641075)
        goto LABEL_139;
      if (v7 != 103)
      {
        if (v7 == 100 && *(_DWORD *)(a1 + 44) != 1633772320)
          goto LABEL_139;
        goto LABEL_148;
      }
      if (*(_DWORD *)(a1 + 48) != 1633772320)
      {
LABEL_139:
        APSLogErrorAt();
        v5 = 4294960591;
        goto LABEL_140;
      }
    }
    else
    {
      v68 = (void *)cf;
      v69 = theDict;
      v12 = v78;
      if (v67 != 1819304813)
        goto LABEL_139;
      if (v7 == 103)
      {
        if (*(_DWORD *)(a1 + 48) != 1633772320)
          goto LABEL_139;
      }
      else if (v7 == 100 && *(_DWORD *)(a1 + 44))
      {
        goto LABEL_139;
      }
    }
LABEL_148:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), v68, Mutable);
    CFRelease(Mutable);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), v68, v12);
    CFRelease(v12);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 72), v68, v69);
    CFRelease(v69);
    v70 = (__CFDictionary *)v68;
    v5 = 0;
LABEL_149:
    CFRelease(v70);
    return v5;
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = *(unsigned __int8 *)(a1 + 28);
  v86 = a1;
  v76 = v7;
  v75 = a3;
  while (2)
  {
    if (v7 == 100)
    {
      if (!v18)
      {
        v93 = *(const __CFString **)(a3 + 16 * v15);
        v81 = (__CFString **)(a3 + 16 * v15);
        v19 = 100;
        goto LABEL_19;
      }
      if (CFEqual(*(CFTypeRef *)(a3 + 16 * v15), CFSTR("media")))
        v19 = 102;
      else
        v19 = 100;
      v18 = *(unsigned __int8 *)(a1 + 28);
    }
    else
    {
      v19 = v7;
    }
    v93 = *(const __CFString **)(a3 + 16 * v15);
    v81 = (__CFString **)(a3 + 16 * v15);
    if (!v18)
    {
LABEL_19:
      v20 = *(_QWORD *)(a3 + 16 * v15 + 8);
      goto LABEL_20;
    }
    v20 = 0;
LABEL_20:
    v96 = 0;
    v95 = 0;
    v21 = APCarPlayAudioFormatsCopyFormatsForAudioType((_BYTE *)a1, v19, v93, &v96, 0, &v95);
    if ((_DWORD)v21)
    {
      v5 = v21;
      APSLogErrorAt();
      goto LABEL_157;
    }
    if (v20 && v95 && (v96 & v20) != 0)
    {
      if (gLogCategory_APCarPlayAudioFormat <= 30
        && (gLogCategory_APCarPlayAudioFormat != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v96 &= v20;
    }
    v22 = CFGetAllocator((CFTypeRef)a1);
    v23 = CFDataCreateMutable(v22, 3584);
    if (!v23)
    {
      APSLogErrorAt();
      goto LABEL_156;
    }
    v24 = v23;
    CFDataSetLength(v23, 3584);
    MutableBytePtr = CFDataGetMutableBytePtr(v24);
    v25 = CFGetAllocator((CFTypeRef)a1);
    v26 = CFDataCreateMutable(v25, 3584);
    if (!v26)
    {
      APSLogErrorAt();
      v72 = v24;
LABEL_155:
      CFRelease(v72);
LABEL_156:
      v5 = 4294960568;
LABEL_157:
      APSLogErrorAt();
      goto LABEL_158;
    }
    v27 = v26;
    CFDataSetLength(v26, 768);
    v84 = v27;
    v28 = CFDataGetMutableBytePtr(v27);
    v29 = CFGetAllocator((CFTypeRef)a1);
    v30 = CFArrayCreateMutable(v29, 64, MEMORY[0x1E0C9B378]);
    if (!v30)
    {
      APSLogErrorAt();
      CFRelease(v24);
      v72 = v27;
      goto LABEL_155;
    }
    v31 = v30;
    theData = v24;
    v74 = v17;
    v82 = v16;
    v32 = 0;
    v33 = 0;
    v34 = 32;
    if (v19 == 102)
      v34 = 36;
    v85 = v34;
    v35 = v93;
    v90 = v28;
    if (v93)
      v36 = v28 == 0;
    else
      v36 = 1;
    v37 = v36;
    v87 = v37;
    v94 = v19;
    v38 = 1;
    v39 = &unk_1EF906000;
    v89 = v30;
    do
    {
      if ((v96 & v38) == 0)
        goto LABEL_101;
      if (APAudioFormatToASBD())
      {
        v40 = v39[426];
        if (v40 <= 50 && (v40 != -1 || _LogCategory_Initialize()))
          LogPrintF();
        goto LABEL_101;
      }
      v41 = &MutableBytePtr[56 * v32];
      *(_QWORD *)v41 = 0;
      *((_DWORD *)v41 + 2) = 1819304813;
      *((_DWORD *)v41 + 4) = 0;
      *((_DWORD *)v41 + 5) = 1;
      *((_DWORD *)v41 + 6) = 0;
      *((_DWORD *)v41 + 7) = 0;
      *((_QWORD *)v41 + 4) = 0;
      v42 = v32;
      v43 = v41;
      *((_DWORD *)v41 + 3) = 12;
      *(int64x2_t *)(v41 + 40) = vdupq_lane_s64(0, 0);
      v97 = 0;
      if ((v87 & 1) != 0)
      {
        APSLogErrorAt();
        v5 = 4294960591;
LABEL_122:
        APSLogErrorAt();
LABEL_124:
        v7 = v76;
        a3 = v75;
        v66 = v82;
        v17 = v74;
        v64 = theData;
        v65 = v84;
        v31 = v89;
        goto LABEL_107;
      }
      v91 = v42;
      v92 = &v90[12 * v42];
      if (*(_DWORD *)(a1 + 24) <= 0x24D2F3u
        && (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), CFSTR("manufacturer")), FigCFEqual()))
      {
        v44 = v39[426];
        if (v44 <= 60 && (v44 != -1 || _LogCategory_Initialize()))
          LogPrintF();
      }
      else
      {
        CFArrayGetTypeID();
        TypedValue = (const __CFArray *)CFDictionaryGetTypedValue();
        if (v97)
        {
          APSLogErrorAt();
          v39 = (_DWORD *)&unk_1EF906000;
          goto LABEL_96;
        }
        Count = CFArrayGetCount(TypedValue);
        if (Count >= 1)
        {
          v47 = Count;
          v48 = 0;
          v49 = 0;
          Int64Ranged = 0;
          v51 = 0;
          while (1)
          {
            CFDictionaryGetTypeID();
            CFArrayGetTypedValueAtIndex();
            if (v97)
              break;
            Int64 = CFDictionaryGetInt64();
            if (v97 != -6727)
            {
              if (v97)
                break;
              if (v94 != Int64)
                goto LABEL_72;
            }
            v97 = 0;
            CFStringGetTypeID();
            v53 = (const void *)CFDictionaryGetTypedValue();
            if (v97 != -6727)
            {
              if (v97)
                break;
              if (!CFEqual(v93, v53))
                goto LABEL_72;
            }
            v97 = 0;
            v54 = CFDictionaryGetInt64();
            if (v97 != -6727)
            {
              if (v97)
                break;
              if (v54 != (unint64_t)*(double *)v43)
                goto LABEL_72;
            }
            v97 = 0;
            v55 = CFDictionaryGetInt64();
            if (v97 != -6727)
            {
              if (v97)
                break;
              if (v55 != *((_DWORD *)v43 + 8))
                goto LABEL_72;
            }
            v97 = 0;
            v56 = CFDictionaryGetInt64();
            if (v97 == -6727)
              goto LABEL_71;
            if (v97)
              break;
            if (v56 == *((_DWORD *)v43 + 7))
            {
LABEL_71:
              v97 = 0;
              Int64Ranged = CFDictionaryGetInt64Ranged();
              v49 = CFDictionaryGetInt64Ranged();
              v48 = 1;
            }
            else
            {
LABEL_72:
              v97 = 0;
            }
            if (v47 == ++v51)
              goto LABEL_81;
          }
          APSLogErrorAt();
          a1 = v86;
          v39 = (_DWORD *)&unk_1EF906000;
          v35 = v93;
          goto LABEL_96;
        }
      }
      Int64Ranged = 0;
      v49 = 0;
      v48 = 0;
LABEL_81:
      a1 = v86;
      v57 = *(_DWORD *)(v86 + v85);
      *(_DWORD *)v92 = v57;
      v58 = *(double *)v43;
      v57 *= 1000;
      v59 = &v90[12 * v91];
      *((_DWORD *)v59 + 1) = (*(double *)v43 * (double)(v57 + Int64Ranged) / 1000000.0);
      *((_DWORD *)v59 + 2) = (v58 * (double)(v57 + v49) / 1000000.0);
      v39 = &unk_1EF906000;
      if (v48)
      {
        v35 = v93;
        if (gLogCategory_APCarPlayAudioFormat > 30
          || gLogCategory_APCarPlayAudioFormat == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_96;
        }
      }
      else
      {
        v35 = v93;
        if (gLogCategory_APCarPlayAudioFormat > 60
          || gLogCategory_APCarPlayAudioFormat == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_96;
        }
      }
      LogPrintF();
LABEL_96:
      v5 = v97;
      if (v97)
        goto LABEL_122;
      CFGetAllocator((CFTypeRef)a1);
      v31 = v89;
      if (APCarPlayAudioFormatInfoGetTypeID_initOnce != -1)
        dispatch_once(&APCarPlayAudioFormatInfoGetTypeID_initOnce, &__block_literal_global_22);
      Instance = _CFRuntimeCreateInstance();
      if (!Instance)
      {
        APSLogErrorAt();
        APSLogErrorAt();
        v5 = 4294960568;
        goto LABEL_124;
      }
      v61 = Instance;
      *(_QWORD *)(Instance + 128) = 0;
      *(_OWORD *)(Instance + 96) = 0u;
      *(_OWORD *)(Instance + 112) = 0u;
      *(_OWORD *)(Instance + 64) = 0u;
      *(_OWORD *)(Instance + 80) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      *(_OWORD *)(Instance + 48) = 0u;
      *(_OWORD *)(Instance + 16) = 0u;
      *(_DWORD *)(Instance + 104) = v94;
      *(_QWORD *)(Instance + 112) = CFRetain(v35);
      *(_OWORD *)(v61 + 16) = 0u;
      *(_OWORD *)(v61 + 32) = 0u;
      *(_QWORD *)(v61 + 48) = 0;
      v62 = *((_QWORD *)v43 + 4);
      v63 = *((_OWORD *)v43 + 1);
      *(_OWORD *)(v61 + 56) = *(_OWORD *)v43;
      *(_OWORD *)(v61 + 72) = v63;
      *(_QWORD *)(v61 + 88) = v62;
      *(_QWORD *)(v61 + 96) = v38;
      LODWORD(v62) = *((_DWORD *)v92 + 2);
      *(_QWORD *)(v61 + 120) = *(_QWORD *)v92;
      *(_DWORD *)(v61 + 128) = v62;
      CFArrayAppendValue(v89, (const void *)v61);
      CFRelease((CFTypeRef)v61);
      v32 = v91 + 1;
LABEL_101:
      ++v33;
      v38 *= 2;
    }
    while (v33 != 64);
    if (CFArrayGetCount(v31) == v32)
    {
      CFDictionarySetValue(theDict, v35, v31);
      v64 = theData;
      CFDataSetLength(theData, 56 * v32);
      CFDictionarySetValue(Mutable, v35, theData);
      v65 = v84;
      CFDataSetLength(v84, 12 * v32);
      CFDictionarySetValue(v78, v35, v84);
      v5 = 0;
      v17 = 0;
      v7 = v76;
      a3 = v75;
      v66 = v82;
    }
    else
    {
      APSLogErrorAt();
      v5 = 4294960534;
      v7 = v76;
      a3 = v75;
      v66 = v82;
      v17 = v74;
      v64 = theData;
      v65 = v84;
    }
LABEL_107:
    CFRelease(v64);
    CFRelease(v65);
    CFRelease(v31);
    if ((_DWORD)v5)
      goto LABEL_157;
    v18 = *(unsigned __int8 *)(a1 + 28);
    if (v7 != 100 || !*(_BYTE *)(a1 + 28))
    {
      if (v7 == 103 && *v81 == CFSTR("media"))
      {
        if (*(_DWORD *)(a1 + 48))
          goto LABEL_159;
        *(_DWORD *)(a1 + 48) = v17;
      }
      else
      {
LABEL_115:
        if (*(_DWORD *)(a1 + 40))
          goto LABEL_159;
        *(_DWORD *)(a1 + 40) = v17;
      }
LABEL_117:
      v15 = (v66 + 1);
      v16 = v66 + 1;
      if (v15 >= a4)
        goto LABEL_128;
      continue;
    }
    break;
  }
  if (*v81 != CFSTR("media"))
    goto LABEL_115;
  if (!*(_DWORD *)(a1 + 44))
  {
    *(_DWORD *)(a1 + 44) = v17;
    goto LABEL_117;
  }
LABEL_159:
  APSLogErrorAt();
  v5 = 4294960591;
LABEL_158:
  v69 = theDict;
  v12 = v78;
LABEL_140:
  CFRelease(cf);
LABEL_141:
  CFRelease(Mutable);
  if (v12)
    CFRelease(v12);
  if (v69)
  {
    v70 = v69;
    goto LABEL_149;
  }
  return v5;
}

uint64_t browserController_registerCMBaseClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPBrowserControllerTypeID = result;
  return result;
}

uint64_t APBrowserControllerCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _OWORD *Instance;
  _QWORD *v6;
  dispatch_queue_t v7;
  dispatch_queue_t v8;
  const void *v9;
  CFTypeRef v10;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v12;
  CFMutableSetRef v13;
  CFMutableDictionaryRef v14;
  CFMutableDictionaryRef v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t (*)(const void *, int, const void *, CFTypeRef), _QWORD *);
  uint64_t v19;
  uint64_t v20;

  if (gLogCategory_APBrowserController <= 30
    && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (gAPBrowserControllerInitOnce != -1)
    dispatch_once_f(&gAPBrowserControllerInitOnce, 0, (dispatch_function_t)browserController_registerCMBaseClass);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    v20 = 4294895486;
    APSLogErrorAt();
    return v20;
  }
  v6 = Instance;
  Instance[7] = 0u;
  Instance[8] = 0u;
  Instance[5] = 0u;
  Instance[6] = 0u;
  Instance[3] = 0u;
  Instance[4] = 0u;
  Instance[1] = 0u;
  Instance[2] = 0u;
  v7 = dispatch_queue_create("com.apple.airplay.APBrowserController.events", 0);
  v6[4] = v7;
  if (!v7)
  {
    v20 = 4294895486;
LABEL_36:
    APSLogErrorAt();
    goto LABEL_26;
  }
  v8 = dispatch_queue_create("com.apple.airplay.APBrowserController", 0);
  v6[3] = v8;
  if (!v8)
  {
    v20 = 4294895486;
    goto LABEL_36;
  }
  v9 = (const void *)*MEMORY[0x1E0CA39F0];
  if (*MEMORY[0x1E0CA39F0])
  {
    v6[7] = CFRetain((CFTypeRef)*MEMORY[0x1E0CA39F0]);
    v10 = CFRetain(v9);
  }
  else
  {
    v10 = 0;
    v6[7] = 0;
  }
  v6[8] = v10;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], 0);
  v6[16] = Mutable;
  if (!Mutable)
  {
    v20 = 4294895486;
    goto LABEL_36;
  }
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v13 = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  v6[17] = v13;
  if (!v13)
  {
    v20 = 4294895486;
    goto LABEL_36;
  }
  v14 = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v14)
  {
    v20 = 4294895486;
    goto LABEL_36;
  }
  v15 = v14;
  if (a2)
  {
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
  }
  v16 = APBrowserCreate();
  if ((_DWORD)v16)
  {
    v20 = v16;
    goto LABEL_25;
  }
  v17 = v6[5];
  v18 = *(uint64_t (**)(uint64_t, uint64_t (*)(const void *, int, const void *, CFTypeRef), _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v18)
  {
    v20 = 4294954514;
LABEL_25:
    APSLogErrorAt();
    CFRelease(v15);
LABEL_26:
    CFRelease(v6);
    return v20;
  }
  v19 = v18(v17, browserController_browserEventHandler, v6);
  if ((_DWORD)v19)
  {
    v20 = v19;
    goto LABEL_25;
  }
  if (gLogCategory_APBrowserController <= 50
    && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *a3 = v6;
  CFRetain(v6);
  CFRelease(v15);
  return 0;
}

uint64_t browserController_browserEventHandler(const void *a1, int a2, const void *a3, CFTypeRef cf)
{
  CFRetain(cf);
  CFRetain(a1);
  if (a3)
    CFRetain(a3);
  return APSDispatchAsyncFHelper();
}

uint64_t APBrowserControllerInvalidate(uint64_t a1)
{
  uint64_t v1;

  if (a1)
  {
    v1 = APSDispatchSyncTask();
    APSDispatchSyncFlush();
    return v1;
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
}

uint64_t browserController_invalidateInternal(uint64_t a1)
{
  uint64_t CMBaseObject;
  uint64_t v3;
  void (*v4)(uint64_t);
  const void *v5;

  if (gLogCategory_APBrowserController <= 50
    && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_BYTE *)(a1 + 16) = 1;
  CMBaseObject = APBrowserGetCMBaseObject();
  if (CMBaseObject)
  {
    v3 = CMBaseObject;
    v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v4)
      v4(v3);
  }
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v5 = *(const void **)(a1 + 72);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 72) = 0;
  }
  return 0;
}

uint64_t APBrowserControllerRegisterClusterNeedsDiscovery()
{
  return APSDispatchSyncTask();
}

uint64_t browserController_registerClusterNeedsDiscovery(uint64_t *a1)
{
  int v2;
  const void *v3;
  __CFSet *v4;

  v2 = *((unsigned __int8 *)a1 + 16);
  v3 = (const void *)a1[1];
  v4 = *(__CFSet **)(*a1 + 136);
  if (v2)
    CFSetAddValue(v4, v3);
  else
    CFSetRemoveValue(v4, v3);
  browserController_updateDiscoveryMode(*a1);
  return 0;
}

uint64_t APBrowserControllerRegisterEndpointActivating()
{
  return APSDispatchSyncTask();
}

uint64_t browserController_registerEndpointActivating(uint64_t *a1)
{
  const __CFAllocator *v2;
  uint64_t DiscoveryID;
  const char *v4;
  CFStringRef v5;
  int v6;
  const __CFString *v7;
  CFTypeRef cf;

  cf = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  browserController_copyDeviceName(a1[1], (uint64_t *)&cf);
  DiscoveryID = APTransportDeviceGetDiscoveryID();
  if (*((_BYTE *)a1 + 16))
    v4 = "-remote";
  else
    v4 = "";
  v5 = CFStringCreateWithFormat(v2, 0, CFSTR("%@%s"), DiscoveryID, v4);
  v6 = gLogCategory_APBrowserController;
  if (gLogCategory_APBrowserController <= 40)
  {
    if (gLogCategory_APBrowserController == -1)
    {
      if (!_LogCategory_Initialize())
        goto LABEL_12;
      v6 = gLogCategory_APBrowserController;
    }
    if (v6 == -1)
      _LogCategory_Initialize();
    LogPrintF();
  }
LABEL_12:
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(*a1 + 128), v5))
  {
    if (gLogCategory_APBrowserController <= 40
      && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    if (*((_BYTE *)a1 + 16))
      v7 = CFSTR("Presence");
    else
      v7 = CFSTR("Detailed");
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(*a1 + 128), v5, v7);
    browserController_updateDiscoveryMode(*a1);
  }
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
  return 0;
}

uint64_t APBrowserControllerRegisterEndpointActivated()
{
  return APSDispatchSyncTask();
}

uint64_t browserController_registerEndpointActivated(uint64_t *a1)
{
  const __CFAllocator *v2;
  uint64_t DiscoveryID;
  const char *v4;
  CFStringRef v5;
  int v6;
  const __CFString *v7;
  uint64_t started;
  CFTypeRef cf;

  cf = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  browserController_copyDeviceName(a1[1], (uint64_t *)&cf);
  DiscoveryID = APTransportDeviceGetDiscoveryID();
  if (*((_BYTE *)a1 + 16))
    v4 = "-remote";
  else
    v4 = "";
  v5 = CFStringCreateWithFormat(v2, 0, CFSTR("%@%s"), DiscoveryID, v4);
  v6 = gLogCategory_APBrowserController;
  if (gLogCategory_APBrowserController <= 40)
  {
    if (gLogCategory_APBrowserController == -1)
    {
      if (!_LogCategory_Initialize())
        goto LABEL_12;
      v6 = gLogCategory_APBrowserController;
    }
    if (v6 == -1)
      _LogCategory_Initialize();
    LogPrintF();
  }
LABEL_12:
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(*a1 + 128), v5))
  {
    if (*((_BYTE *)a1 + 16))
      v7 = CFSTR("None");
    else
      v7 = CFSTR("Presence");
    CFDictionaryReplaceValue(*(CFMutableDictionaryRef *)(*a1 + 128), v5, v7);
    started = APTransportDeviceStartTracking();
    if ((_DWORD)started)
      APSLogErrorAt();
    else
      browserController_updateDiscoveryMode(*a1);
  }
  else
  {
    started = 0;
  }
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
  return started;
}

uint64_t APBrowserControllerDeregisterEndpoint()
{
  return APSDispatchSyncTask();
}

uint64_t browserController_deregisterEndpoint(uint64_t *a1)
{
  const __CFAllocator *v2;
  uint64_t DiscoveryID;
  const char *v4;
  CFStringRef v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  const void *v10;

  v10 = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  browserController_copyDeviceName(a1[1], (uint64_t *)&v10);
  DiscoveryID = APTransportDeviceGetDiscoveryID();
  if (*((_BYTE *)a1 + 16))
    v4 = "-remote";
  else
    v4 = "";
  v5 = CFStringCreateWithFormat(v2, 0, CFSTR("%@%s"), DiscoveryID, v4);
  if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(*a1 + 128), v5))
    goto LABEL_11;
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*a1 + 128), v5);
  v6 = APTransportDeviceStopTracking();
  if ((_DWORD)v6)
  {
    v8 = v6;
    APSLogErrorAt();
LABEL_12:
    v7 = v10;
    if (!v10)
      goto LABEL_14;
    goto LABEL_13;
  }
  browserController_updateDiscoveryMode(*a1);
  if (gLogCategory_APBrowserController > 40
    || gLogCategory_APBrowserController == -1 && !_LogCategory_Initialize())
  {
LABEL_11:
    v8 = 0;
    goto LABEL_12;
  }
  v7 = v10;
  LogPrintF();
  v8 = 0;
  if (v7)
LABEL_13:
    CFRelease(v7);
LABEL_14:
  if (v5)
    CFRelease(v5);
  return v8;
}

uint64_t APBrowserControllerCopyProperty()
{
  return FigDispatchSyncCopyPropertyImplementation();
}

uint64_t browserController_copyProperty(uint64_t a1, CFTypeRef cf1, const __CFAllocator *a3, __CFDictionary **a4)
{
  __CFDictionary *v8;
  uint64_t v9;
  CFIndex Count;
  const void *DiscoveryModeRequiredByEndpoints;
  __CFString *Mutable;
  __CFString *v13;
  const char *v14;
  const char *StringForMode;
  const char *v16;
  const char *v17;
  const char *v18;
  CFIndex v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, _QWORD, const __CFAllocator *, CFDictionaryRef *);
  const void *Value;
  uint64_t CMBaseObject;
  uint64_t (*v24)(uint64_t, _QWORD, const __CFAllocator *, __CFDictionary **);
  __CFDictionary *v25;
  __CFDictionary *v26;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, _QWORD, const __CFAllocator *, __CFDictionary **);
  _QWORD context[3];
  CFDictionaryRef theDict;
  CFMutableStringRef theString;

  if (!cf1)
  {
    APSLogErrorAt();
    return 4294895485;
  }
  if (!CFEqual(cf1, CFSTR("Browser")))
  {
    if (!CFEqual(cf1, CFSTR("showInfo")))
    {
      if (CFEqual(cf1, CFSTR("isConfiguredForMaximumDiscovery")))
      {
        CMBaseObject = APBrowserGetCMBaseObject();
        v24 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
        if (v24)
        {
          v9 = v24(CMBaseObject, *MEMORY[0x1E0CF1E18], a3, a4);
          if (!(_DWORD)v9)
            return v9;
        }
        else
        {
          v9 = 4294954514;
        }
      }
      else
      {
        if (!CFEqual(cf1, CFSTR("radiosNeededForMaximumDiscovery")))
          return 4294954509;
        v28 = APBrowserGetCMBaseObject();
        v29 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
        if (v29)
        {
          v9 = v29(v28, *MEMORY[0x1E0CF1E20], a3, a4);
          if (!(_DWORD)v9)
            return v9;
        }
        else
        {
          v9 = 4294954514;
        }
      }
LABEL_40:
      APSLogErrorAt();
      return v9;
    }
    theDict = 0;
    Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 128));
    DiscoveryModeRequiredByEndpoints = (const void *)browserController_getDiscoveryModeRequiredByEndpoints(a1);
    Mutable = CFStringCreateMutable(a3, 0);
    v13 = Mutable;
    theString = Mutable;
    if (Mutable)
    {
      CFStringAppend(Mutable, CFSTR("+-+ APBrowserController state +-+\n"));
      CFStringAppend(v13, CFSTR("\n"));
      if (*(_BYTE *)(a1 + 16))
        v14 = "yes";
      else
        v14 = "no";
      CFStringAppendFormat(v13, 0, CFSTR("invalidated=%s "), v14);
      StringForMode = browserController_getStringForMode(*(const void **)(a1 + 64));
      v16 = browserController_getStringForMode(*(const void **)(a1 + 56));
      CFStringAppendFormat(v13, 0, CFSTR("currentDiscoveryMode=%s requestedDiscoveryMode=%s (seed %llu)\n"), StringForMode, v16, *(_QWORD *)(a1 + 48));
      if (Count <= 0)
        v17 = "no";
      else
        v17 = "yes";
      v18 = browserController_getStringForMode(DiscoveryModeRequiredByEndpoints);
      v19 = CFSetGetCount(*(CFSetRef *)(a1 + 136));
      CFStringAppendFormat(v13, 0, CFSTR("forcedMode=%@ endpointsActivated=%s endpointRequiredDiscoveryMode=%s clustersRequiringDiscovery=%d\n"), 0, v17, v18, v19);
      if (CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 128)) >= 1)
      {
        context[1] = a3;
        context[2] = 0;
        context[0] = &theString;
        CFStringAppend(v13, CFSTR("Active devices:\n"));
        CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 128), (CFDictionaryApplierFunction)browserController_copyDescriptionForDevice, context);
        v13 = theString;
      }
      CFStringAppend(v13, CFSTR("\n"));
      v20 = APBrowserGetCMBaseObject();
      v21 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
      if (v21)
      {
        v9 = v21(v20, *MEMORY[0x1E0CF1E28], a3, &theDict);
        if (!(_DWORD)v9)
        {
          Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CF1E30]);
          CFStringAppendFormat(theString, 0, CFSTR("%@"), Value);
          v13 = theString;
          theString = 0;
          goto LABEL_25;
        }
      }
      else
      {
        v9 = 4294954514;
      }
      APSLogErrorAt();
      if (theString)
        CFRelease(theString);
      v13 = 0;
    }
    else
    {
      v9 = 4294895486;
      APSLogErrorAt();
    }
LABEL_25:
    if (theDict)
      CFRelease(theDict);
    if (!(_DWORD)v9)
    {
      v25 = CFDictionaryCreateMutable(a3, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v25)
      {
        v26 = v25;
        CFDictionaryAddValue(v25, CFSTR("detailedDescription"), v13);
        v9 = 0;
        *a4 = v26;
        if (!v13)
          goto LABEL_31;
        goto LABEL_30;
      }
      v9 = 4294895486;
    }
    APSLogErrorAt();
    if (!v13)
    {
LABEL_31:
      if (!(_DWORD)v9)
        return v9;
      goto LABEL_40;
    }
LABEL_30:
    CFRelease(v13);
    goto LABEL_31;
  }
  v8 = (__CFDictionary *)CFRetain(*(CFTypeRef *)(a1 + 40));
  v9 = 0;
  *a4 = v8;
  return v9;
}

uint64_t APBrowserControllerReconfirmEndpoint(const void *a1, const void *a2)
{
  CFRetain(a1);
  CFRetain(a2);
  return APSDispatchAsyncFHelper();
}

void browserController_reconfirmEndpointInternal(CFTypeRef *a1)
{
  if (gLogCategory_APBrowserController <= 40
    && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (APTransportDeviceReconfirm())
    APSLogErrorAt();
  CFRelease(*a1);
  CFRelease(a1[1]);
}

uint64_t APBrowserControllerDiscoverAndInjectEndpoint()
{
  uint64_t v0;

  v0 = APBrowserDiscoverAndInjectDevice();
  if ((_DWORD)v0)
    APSLogErrorAt();
  return v0;
}

uint64_t APBrowserControllerRemoveInjectedEndpoint()
{
  uint64_t v0;

  APTransportDeviceGetDiscoveryID();
  v0 = APBrowserRemoveInjectedDevice();
  if ((_DWORD)v0)
    APSLogErrorAt();
  return v0;
}

uint64_t APBrowserControllerConfigureForMaximumDiscovery()
{
  return APSDispatchSyncTask();
}

uint64_t browserController_configureForMaximumDiscovery(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  if (gLogCategory_APBrowserController <= 40
    && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (!v3)
  {
    v4 = 4294954514;
LABEL_9:
    APSLogErrorAt();
    return v4;
  }
  v4 = v3(v2);
  if ((_DWORD)v4)
    goto LABEL_9;
  return v4;
}

uint64_t APBrowserControllerSetEventHandlers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[20];

  v13[19] = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v13[0] = a2;
  v10 = a5;
  v11 = a4;
  v8 = a7;
  v9 = a6;
  v13[1] = a1 + 80;
  v13[2] = v13;
  v13[3] = 8;
  v13[4] = a1 + 88;
  v13[5] = &v12;
  v13[6] = 8;
  v13[7] = a1 + 96;
  v13[8] = &v11;
  v13[9] = 8;
  v13[10] = a1 + 104;
  v13[11] = &v10;
  v13[12] = 8;
  v13[13] = a1 + 120;
  v13[14] = &v8;
  v13[15] = 8;
  v13[16] = a1 + 112;
  v13[17] = &v9;
  v13[18] = 8;
  return APSDispatchSyncBatchAssignment();
}

void browserController_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  NSObject *v7;
  NSObject *v8;

  browserController_invalidateInternal((uint64_t)a1);
  v2 = (const void *)a1[16];
  if (v2)
  {
    CFRelease(v2);
    a1[16] = 0;
  }
  v3 = (const void *)a1[17];
  if (v3)
  {
    CFRelease(v3);
    a1[17] = 0;
  }
  v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
    a1[7] = 0;
  }
  v5 = (const void *)a1[8];
  if (v5)
  {
    CFRelease(v5);
    a1[8] = 0;
  }
  v6 = (const void *)a1[5];
  if (v6)
  {
    CFRelease(v6);
    a1[5] = 0;
  }
  v7 = a1[3];
  if (v7)
  {
    dispatch_release(v7);
    a1[3] = 0;
  }
  v8 = a1[4];
  if (v8)
  {
    dispatch_release(v8);
    a1[4] = 0;
  }
}

void browserController_browserModeAlreadySet(_QWORD *a1)
{
  _QWORD *v2;
  void (*v3)(_QWORD, _QWORD, _QWORD);
  const void *v4;
  const void *v5;

  if (gLogCategory_APBrowserController <= 40
    && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = (_QWORD *)*a1;
  if (!*(_BYTE *)(*a1 + 16))
  {
    v3 = (void (*)(_QWORD, _QWORD, _QWORD))v2[13];
    if (v3)
    {
      v3(a1[1], a1[2], v2[15]);
      v2 = (_QWORD *)*a1;
    }
  }
  CFRelease(v2);
  v4 = (const void *)a1[1];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[3];
  if (v5)
    CFRelease(v5);
}

void browserController_copyDeviceName(uint64_t a1, uint64_t *a2)
{
  if (APTransportDeviceGetAdvertiserInfo())
    *a2 = APAdvertiserInfoCopyProperty();
  else
    APSLogErrorAt();
}

const char *browserController_getStringForMode(const void *a1)
{
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA39F0]))
    return "None";
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA39F8]))
    return "Presence";
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA39E0]))
    return "Background";
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA39E8]))
    return "Detailed";
  if (gLogCategory_APBrowserController <= 60
    && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return "Unrecognized";
}

void browserController_copyDescriptionForDevice(uint64_t a1, uint64_t a2, CFMutableStringRef **a3)
{
  CFMutableStringRef *v4;
  const char *v5;

  v4 = *a3;
  CFStringAppendFormat(**a3, 0, CFSTR("    %@"), a1);
  if (*MEMORY[0x1E0C9AE50] == a2)
    v5 = "- Requires Detailed";
  else
    v5 = "";
  CFStringAppendFormat(*v4, 0, CFSTR(" %s"), v5);
  CFStringAppend(*v4, CFSTR("\n"));
}

void browserController_tickleDetailedMode(const void *a1)
{
  if (APBrowserTickleDetailedMode())
    APSLogErrorAt();
  CFRelease(a1);
}

void browserController_browserEventHandlerInternal(_QWORD *a1)
{
  uint64_t v2;
  void (*v3)(_QWORD, _QWORD);
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD);
  const void *v8;

  if (gLogCategory_APBrowserController <= 30
    && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  switch(*((_DWORD *)a1 + 4))
  {
    case 1:
      v4 = *(void (**)(uint64_t, uint64_t))(*a1 + 80);
      if (v4)
      {
        v5 = *(_QWORD *)(*a1 + 120);
        v6 = 1;
        goto LABEL_14;
      }
      break;
    case 2:
      v4 = *(void (**)(uint64_t, uint64_t))(*a1 + 80);
      if (v4)
      {
        v5 = *(_QWORD *)(*a1 + 120);
        v6 = 0;
LABEL_14:
        v4(v6, v5);
      }
      break;
    case 3:
    case 4:
      if (!a1[3])
        goto LABEL_31;
      if (APTransportDeviceCreate())
        goto LABEL_32;
      v2 = *a1;
      v3 = *(void (**)(_QWORD, _QWORD))(*a1 + 88);
      if (v3)
        goto LABEL_18;
      break;
    case 5:
      if (a1[3])
      {
        if (APTransportDeviceCreate())
        {
LABEL_32:
          APSLogErrorAt();
        }
        else
        {
          v2 = *a1;
          v3 = *(void (**)(_QWORD, _QWORD))(*a1 + 96);
          if (v3)
LABEL_18:
            v3(0, *(_QWORD *)(v2 + 120));
        }
      }
      else
      {
LABEL_31:
        APSLogErrorAt();
        APSSignalErrorAt();
      }
      break;
    case 7:
      break;
    case 8:
      CFRelease((CFTypeRef)*a1);
      break;
    case 9:
      v7 = *(void (**)(_QWORD))(*a1 + 112);
      if (v7)
        v7(*(_QWORD *)(*a1 + 120));
      break;
    default:
      if (gLogCategory_APBrowserController <= 60
        && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      break;
  }
  CFRelease((CFTypeRef)*a1);
  CFRelease((CFTypeRef)a1[1]);
  v8 = (const void *)a1[3];
  if (v8)
    CFRelease(v8);
}

uint64_t APEndpointCarPlayCreateWithTransportDevice(uint64_t a1, const void *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef v8;
  uint64_t CMBaseObject;
  uint64_t (*v10)(uint64_t, const __CFString *, uint64_t, uint64_t);
  const void *v11;
  const __CFAllocator *v12;
  const __CFURL *v13;
  __CFBundle *v14;
  __CFBundle *v15;
  int v16;
  dispatch_queue_t v17;
  dispatch_queue_t v18;
  dispatch_queue_t v19;
  dispatch_queue_t v20;
  CFMutableDictionaryRef Mutable;
  uint64_t v22;
  CFAllocatorRef v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t);
  uint64_t Int64;
  BOOL v27;
  size_t v28;
  const void *v29;
  const void *Value;
  const void *v31;
  const void *v32;
  int v34;
  CFTypeRef cf;
  CFTypeRef v36;
  unsigned int LoggingCaches;
  char label[16];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  LoggingCaches = 0;
  cf = 0;
  v36 = 0;
  v40 = 0u;
  v41 = 0u;
  *(_OWORD *)label = 0u;
  v39 = 0u;
  if (!a2 || !a4)
  {
    APSLogErrorAt();
    v34 = -16720;
LABEL_78:
    LoggingCaches = v34;
    goto LABEL_62;
  }
  LoggingCaches = APEndpointDescriptionAirPlayCreateWithTransportDevice(a1, a2, 0, &cf);
  if (LoggingCaches)
    goto LABEL_17;
  if (!APSGetFBOPropertyInt64() || !APSGetFBOPropertyInt64() && !APSGetFBOPropertyInt64())
  {
    APSLogErrorAt();
    v34 = -71754;
    goto LABEL_78;
  }
  FigEndpointExtendedGetClassID();
  LoggingCaches = CMDerivedObjectCreate();
  if (LoggingCaches)
    goto LABEL_17;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = CFRetain(cf);
  *(_QWORD *)(DerivedStorage + 8) = v8;
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(v8);
  v10 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (!v10)
  {
    LoggingCaches = -12782;
    goto LABEL_17;
  }
  LoggingCaches = v10(CMBaseObject, CFSTR("Name"), a1, DerivedStorage + 16);
  if (LoggingCaches)
  {
LABEL_17:
    APSLogErrorAt();
    goto LABEL_62;
  }
  if (!FigCFEqual())
  {
    v13 = 0;
LABEL_19:
    v15 = 0;
    goto LABEL_20;
  }
  v11 = *(const void **)(DerivedStorage + 24);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v13 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("/System/Library/PrivateFrameworks/CarKit.framework"), kCFURLPOSIXPathStyle, 1u);
  if (!v13)
    goto LABEL_19;
  v14 = CFBundleCreate(v12, v13);
  v15 = v14;
  if (v14)
    *(_QWORD *)(DerivedStorage + 24) = CFBundleCopyLocalizedString(v14, CFSTR("CARPLAY_LOCKSCREEN_TITLE"), CFSTR("CARPLAY_LOCKSCREEN_TITLE"), CFSTR("Localizable"));
LABEL_20:
  *(_BYTE *)(DerivedStorage + 40) = APSGetFBOPropertyInt64() == 0;
  if (LoggingCaches || (v16 = APSGetFBOPropertyInt64(), LoggingCaches))
  {
    APSLogErrorAt();
    Mutable = 0;
    goto LABEL_56;
  }
  if (v16 == 32)
    *(_BYTE *)(DerivedStorage + 41) = 1;
  SNPrintF();
  v17 = dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 144) = v17;
  if (!v17)
    goto LABEL_72;
  SNPrintF();
  v18 = dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 472) = v18;
  if (!v18
    || (SNPrintF(), v19 = dispatch_queue_create(label, 0), (*(_QWORD *)(DerivedStorage + 456) = v19) == 0)
    || (SNPrintF(), v20 = dispatch_queue_create(label, 0), (*(_QWORD *)DerivedStorage = v20) == 0))
  {
LABEL_72:
    APSLogErrorAt();
    Mutable = 0;
LABEL_74:
    LoggingCaches = -16721;
    goto LABEL_56;
  }
  CFPrefs_GetInt64();
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable
    || (CFDictionarySetInt64(),
        LoggingCaches = APAudioEngineCarPlayCreate(0, (uint64_t)Mutable, (_QWORD *)(DerivedStorage + 256)),
        !*(_QWORD *)(DerivedStorage + 256)))
  {
    APSLogErrorAt();
    goto LABEL_74;
  }
  v22 = *(_QWORD *)(DerivedStorage + 8);
  v23 = CFGetAllocator(v36);
  v24 = APEndpointDescriptionGetCMBaseObject(v22);
  v25 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (v25)
  {
    LoggingCaches = v25(v24, CFSTR("DeviceID"), v23, DerivedStorage + 32);
    if (!LoggingCaches)
    {
      *(_DWORD *)(DerivedStorage + 320) = -1;
      *(_QWORD *)(DerivedStorage + 392) = -1;
      *(_QWORD *)(DerivedStorage + 400) = -1;
      *(_DWORD *)(DerivedStorage + 408) = -1;
      if (CFPrefs_GetInt64() <= 0)
      {
        *(_QWORD *)(DerivedStorage + 336) = 0;
        *(_QWORD *)(DerivedStorage + 344) = 0;
        if (!a3)
          goto LABEL_49;
      }
      else
      {
        Int64 = CFPrefs_GetInt64();
        v27 = 60 * Int64 == 0;
        v28 = (unint64_t)(60 * Int64) >> 1;
        *(_QWORD *)(DerivedStorage + 336) = 0;
        *(_QWORD *)(DerivedStorage + 344) = v28;
        if (!v27)
          *(_QWORD *)(DerivedStorage + 328) = malloc_type_calloc(v28, 8uLL, 0x6004044C4A2DFuLL);
        if (!a3)
        {
LABEL_49:
          LoggingCaches = APSEventRecorderCreate();
          if (!LoggingCaches)
          {
            APSEventRecorderAddSignPostForEvent();
            APSEventRecorderAddSignPostForEvent();
            APSEventRecorderAddSignPostForEvent();
            APSEventRecorderAddSignPostForEvent();
            APSEventRecorderAddSignPostForEvent();
            APSEventRecorderAddSignPostForEvent();
            APSEventRecorderAddSignPostForEvent();
            APSEventRecorderAddSignPostForEvent();
            LoggingCaches = carEndpoint_createLoggingCaches();
            if (!LoggingCaches)
            {
              if (gLogCategory_APEndpointCarPlay <= 50
                && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              *a4 = v36;
              v36 = 0;
              goto LABEL_56;
            }
          }
          goto LABEL_38;
        }
      }
      *(_BYTE *)(DerivedStorage + 136) = CFDictionaryGetInt64() != 0;
      if (CFDictionaryContainsKey(a3, CFSTR("sessionHostInfo")))
      {
        v29 = *(const void **)(DerivedStorage + 48);
        Value = CFDictionaryGetValue(a3, CFSTR("sessionHostInfo"));
        *(_QWORD *)(DerivedStorage + 48) = Value;
        if (Value)
          CFRetain(Value);
        if (v29)
          CFRelease(v29);
      }
      v31 = CFDictionaryGetValue(a3, CFSTR("EventRecorder"));
      v32 = *(const void **)(DerivedStorage + 488);
      *(_QWORD *)(DerivedStorage + 488) = v31;
      if (v31)
        CFRetain(v31);
      if (v32)
        CFRelease(v32);
      goto LABEL_49;
    }
  }
  else
  {
    LoggingCaches = -12782;
  }
LABEL_38:
  APSLogErrorAt();
LABEL_56:
  if (v15)
    CFRelease(v15);
  if (v13)
    CFRelease(v13);
  if (Mutable)
    CFRelease(Mutable);
LABEL_62:
  if (v36)
    CFRelease(v36);
  if (cf)
    CFRelease(cf);
  return LoggingCaches;
}

uint64_t carEndpoint_createLoggingCaches()
{
  uint64_t DerivedStorage;
  unsigned int AppIntegerValue;
  BOOL v2;
  const __CFAllocator *v3;
  CFMutableArrayRef Mutable;
  unsigned int v5;
  CFMutableArrayRef v6;
  uint64_t result;
  Boolean keyExistsAndHasValidFormat;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  keyExistsAndHasValidFormat = 0;
  *(_DWORD *)(DerivedStorage + 504) = 20;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("sendCommandCacheSize"), CFSTR("com.apple.airplay"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v2 = AppIntegerValue == 0;
  else
    v2 = 1;
  if (v2)
    AppIntegerValue = *(_DWORD *)(DerivedStorage + 504);
  else
    *(_DWORD *)(DerivedStorage + 504) = AppIntegerValue;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], AppIntegerValue, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 496) = Mutable;
  if (!Mutable)
    goto LABEL_24;
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_DWORD *)(DerivedStorage + 520) = 10;
  keyExistsAndHasValidFormat = 0;
  v5 = CFPreferencesGetAppIntegerValue(CFSTR("receivedCommandCacheSize"), CFSTR("com.apple.airplay"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat && v5)
    *(_DWORD *)(DerivedStorage + 520) = v5;
  else
    v5 = *(_DWORD *)(DerivedStorage + 520);
  v6 = CFArrayCreateMutable(v3, v5, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 512) = v6;
  if (!v6)
  {
LABEL_24:
    APSLogErrorAt();
    return 4294950575;
  }
  if (gLogCategory_APEndpointCarPlay > 50)
    return 0;
  if (gLogCategory_APEndpointCarPlay != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
  {
    LogPrintF();
    return 0;
  }
  return result;
}

void carEndpoint_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  NSObject *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  NSObject *v29;
  unint64_t v30;
  const void *v31;
  NSObject *v32;
  _QWORD block[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCarPlay <= 30
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (introspector_getCollectionOfActiveCarPlayEndpoints_once != -1)
    dispatch_once(&introspector_getCollectionOfActiveCarPlayEndpoints_once, &__block_literal_global_23);
  if (introspector_getCollectionOfActiveCarPlayEndpoints_coll)
  {
    v3 = *(NSObject **)introspector_getCollectionOfActiveCarPlayEndpoints_coll;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __carEndpoint_Finalize_block_invoke;
    block[3] = &__block_descriptor_tmp_24;
    block[4] = introspector_getCollectionOfActiveCarPlayEndpoints_coll;
    block[5] = a1;
    dispatch_sync(v3, block);
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v4 = *(const void **)(DerivedStorage + 8);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 16);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 24);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 32);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 48);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 488);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 488) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 480);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 480) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 496);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 496) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 512);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 512) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 192);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 192) = 0;
  }
  v14 = *(NSObject **)(DerivedStorage + 456);
  if (v14)
  {
    dispatch_release(v14);
    *(_QWORD *)(DerivedStorage + 456) = 0;
  }
  v15 = *(const void **)(DerivedStorage + 464);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(DerivedStorage + 464) = 0;
  }
  v16 = *(const void **)(DerivedStorage + 216);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(DerivedStorage + 216) = 0;
  }
  v17 = *(const void **)(DerivedStorage + 232);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(DerivedStorage + 232) = 0;
  }
  v18 = *(const void **)(DerivedStorage + 240);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(DerivedStorage + 240) = 0;
  }
  v19 = *(const void **)(DerivedStorage + 248);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(DerivedStorage + 248) = 0;
  }
  v20 = *(const void **)(DerivedStorage + 256);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(DerivedStorage + 256) = 0;
  }
  v21 = *(const void **)(DerivedStorage + 264);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(DerivedStorage + 264) = 0;
  }
  v22 = *(const void **)(DerivedStorage + 272);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(DerivedStorage + 272) = 0;
  }
  v23 = *(const void **)(DerivedStorage + 280);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(DerivedStorage + 280) = 0;
  }
  v24 = *(const void **)(DerivedStorage + 296);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(DerivedStorage + 296) = 0;
  }
  v25 = *(const void **)(DerivedStorage + 312);
  if (v25)
  {
    CFRelease(v25);
    *(_QWORD *)(DerivedStorage + 312) = 0;
  }
  v26 = *(const void **)(DerivedStorage + 432);
  if (v26)
  {
    CFRelease(v26);
    *(_QWORD *)(DerivedStorage + 432) = 0;
  }
  v27 = *(const void **)(DerivedStorage + 448);
  if (v27)
  {
    CFRelease(v27);
    *(_QWORD *)(DerivedStorage + 448) = 0;
  }
  v28 = *(const void **)(DerivedStorage + 440);
  if (v28)
  {
    CFRelease(v28);
    *(_QWORD *)(DerivedStorage + 440) = 0;
  }
  v29 = *(NSObject **)(DerivedStorage + 144);
  if (v29)
  {
    dispatch_release(v29);
    *(_QWORD *)(DerivedStorage + 144) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 344))
  {
    v30 = 0;
    do
    {
      v31 = *(const void **)(*(_QWORD *)(DerivedStorage + 328) + 8 * v30);
      if (!v31)
        break;
      CFRelease(v31);
      *(_QWORD *)(*(_QWORD *)(DerivedStorage + 328) + 8 * v30++) = 0;
    }
    while (v30 < *(_QWORD *)(DerivedStorage + 344));
  }
  free(*(void **)(DerivedStorage + 328));
  v32 = *(NSObject **)(DerivedStorage + 472);
  if (v32)
  {
    dispatch_release(v32);
    *(_QWORD *)(DerivedStorage + 472) = 0;
  }
}

uint64_t carEndpoint_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  const void *v4;
  uint64_t v5;
  _QWORD block[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  CFMutableStringRef Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  Mutable = 0;
  Mutable = CFStringCreateMutable(0, 0);
  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v3 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_CopyDebugDescription_block_invoke;
  block[3] = &unk_1E826C928;
  block[5] = &v8;
  block[6] = a1;
  block[4] = &v12;
  dispatch_sync(v3, block);
  v4 = (const void *)v9[3];
  if (v4)
    CFRelease(v4);
  v5 = v13[3];
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(&v12, 8);
  return v5;
}

uint64_t carEndpoint_CopyProperty(const void *a1, const void *a2, const __CFAllocator *a3, CFMutableDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef *v9;
  void *Value;
  uint64_t Address;
  uint64_t v12;
  CFMutableDictionaryRef Mutable;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v16;
  uint64_t CMBaseObject;
  uint64_t (*v18)(uint64_t, const __CFString *, const __CFAllocator *, CFMutableDictionaryRef *);
  uint64_t v20;
  unsigned int (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  NSObject *v23;
  int isEndpointConnected;
  uint64_t v25;
  uint64_t v26;
  CFTypeRef *v27;
  const __CFDictionary *v28;
  CFTypeRef cf;
  CFTypeRef *p_cf;
  uint64_t v31;
  int v32;
  __int128 block;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (gLogCategory_APEndpointCarPlay <= 10
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4468]))
  {
    v9 = (CFTypeRef *)MEMORY[0x1E0CA4978];
LABEL_7:
    Value = (void *)*v9;
LABEL_8:
    Value = (void *)CFRetain(Value);
LABEL_9:
    Address = 0;
    *a4 = (CFMutableDictionaryRef)Value;
    return Address;
  }
  if (!CFEqual(a2, CFSTR("AirPlayDiagnosticsTargetInfo")))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4140]))
    {
      CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 8));
      v18 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFMutableDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v18)
      {
        Address = v18(CMBaseObject, CFSTR("BluetoothDeviceIDs"), a3, a4);
        if (!(_DWORD)Address)
          return Address;
      }
      else
      {
        Address = 4294954514;
      }
LABEL_32:
      APSLogErrorAt();
      if ((_DWORD)Address != -12784)
        goto LABEL_34;
      goto LABEL_33;
    }
    if (CFEqual(a2, CFSTR("CarPlayControlSupported")))
    {
      v20 = *(_QWORD *)(DerivedStorage + 8);
      v21 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v21 && v21(v20, 37))
      {
        v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
        goto LABEL_7;
      }
      goto LABEL_125;
    }
    if (CFEqual(a2, CFSTR("EndpointDescription")))
    {
      Value = *(void **)(DerivedStorage + 8);
      if (!Value)
        goto LABEL_9;
      goto LABEL_8;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4258]))
    {
      Value = *(void **)(DerivedStorage + 32);
      if (!Value)
        goto LABEL_9;
      goto LABEL_8;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4280]))
    {
      isEndpointConnected = carEndpoint_isEndpointConnected();
      v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      if (!isEndpointConnected)
        v9 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      goto LABEL_7;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4300]))
    {
      Address = APEndpointDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 8), (uint64_t)CFSTR("LimitedUIElements"), 0, (uint64_t)a4);
      if (!(_DWORD)Address)
        return Address;
      goto LABEL_32;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4338]))
    {
      Address = APEndpointDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 8), (uint64_t)CFSTR("Model"), (uint64_t)a3, (uint64_t)a4);
      if (!(_DWORD)Address)
        return Address;
      goto LABEL_32;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4318]))
    {
      v25 = APEndpointDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 8), (uint64_t)CFSTR("Manufacturer"), (uint64_t)a3, (uint64_t)a4);
      v26 = DerivedStorage;
      Address = v25;
      if (!*(_QWORD *)(v26 + 48) || (_DWORD)v25 != -12784)
      {
        if (!(_DWORD)v25)
          return Address;
        goto LABEL_32;
      }
    }
    else
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4210]))
      {
        Address = APEndpointDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 8), (uint64_t)CFSTR("FirmwareVersion"), (uint64_t)a3, (uint64_t)a4);
        if (!(_DWORD)Address)
          return Address;
        goto LABEL_32;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4460]))
      {
        v27 = (CFTypeRef *)MEMORY[0x1E0CA4958];
        if (!*(_BYTE *)(DerivedStorage + 40))
          v27 = (CFTypeRef *)MEMORY[0x1E0CA4950];
        Value = (void *)*v27;
        if (!*v27)
          goto LABEL_9;
        goto LABEL_8;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4348]))
      {
        Value = *(void **)(DerivedStorage + 24);
        if (!Value)
        {
          Value = *(void **)(DerivedStorage + 16);
          if (!Value)
            goto LABEL_9;
        }
        goto LABEL_8;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43F8]))
      {
        Address = APEndpointDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 8), (uint64_t)CFSTR("SupportsDCXForSpatialAudio"), (uint64_t)a3, (uint64_t)a4);
        if (!(_DWORD)Address)
          return Address;
        goto LABEL_32;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4358]))
      {
        Address = APEndpointDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 8), (uint64_t)CFSTR("OEMIconLabel"), (uint64_t)a3, (uint64_t)a4);
        if (!(_DWORD)Address)
          return Address;
        goto LABEL_32;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4368]))
      {
        Address = APEndpointDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 8), (uint64_t)CFSTR("OEMIcons"), (uint64_t)a3, (uint64_t)a4);
        if (!(_DWORD)Address)
          return Address;
        goto LABEL_32;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4480]))
      {
        Address = APEndpointDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 8), (uint64_t)CFSTR("UseLegacyStarkModeActions"), (uint64_t)a3, (uint64_t)a4);
        if (!(_DWORD)Address)
          return Address;
        goto LABEL_32;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4478]))
      {
        Address = APEndpointDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 8), (uint64_t)CFSTR("UseIndirectStarkSpeechModeTransitions"), (uint64_t)a3, (uint64_t)a4);
        if (!(_DWORD)Address)
          return Address;
        goto LABEL_32;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40F8]))
      {
        Address = APEndpointDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 8), (uint64_t)CFSTR("AllowCarPlaySpeechStateForMediaAudioType"), (uint64_t)a3, (uint64_t)a4);
        if (!(_DWORD)Address)
          return Address;
        goto LABEL_32;
      }
      if (CFEqual(a2, CFSTR("ScreenIsOverscanned")))
      {
        Address = carEndpoint_copyPropertyForDisplay(a1, (uint64_t)CFSTR("IsOverscanned"), (uint64_t)a3, (uint64_t)a4);
        if (!(_DWORD)Address)
          return Address;
        goto LABEL_32;
      }
      if (CFEqual(a2, CFSTR("ScreenSize")))
      {
        Address = carEndpoint_copyPropertyForDisplay(a1, (uint64_t)CFSTR("PixelSize"), (uint64_t)a3, (uint64_t)a4);
        if (!(_DWORD)Address)
          return Address;
        goto LABEL_32;
      }
      if (CFEqual(a2, CFSTR("SourceVersion")))
      {
        Address = APEndpointDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 8), (uint64_t)CFSTR("SourceVersion"), (uint64_t)a3, (uint64_t)a4);
        if (!(_DWORD)Address)
          return Address;
        goto LABEL_32;
      }
      if (CFEqual(a2, CFSTR("StatusFlags")) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4438]))
      {
        Address = APEndpointDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 8), (uint64_t)CFSTR("StatusFlags"), (uint64_t)a3, (uint64_t)a4);
        if (!(_DWORD)Address)
          return Address;
        goto LABEL_32;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA41D0]))
      {
        Address = APEndpointDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 8), (uint64_t)CFSTR("ExtendedFeatures"), (uint64_t)a3, (uint64_t)a4);
        if (!(_DWORD)Address)
          return Address;
        goto LABEL_32;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4420]))
      {
        Address = APEndpointDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 8), (uint64_t)CFSTR("SupportsMixableSiriAudio"), (uint64_t)a3, (uint64_t)a4);
        if (!(_DWORD)Address)
          return Address;
        goto LABEL_32;
      }
      if (CFEqual(a2, CFSTR("EndpointInfo")))
      {
        Address = APEndpointDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 8), (uint64_t)CFSTR("EndpointInfo"), (uint64_t)a3, (uint64_t)a4);
        if (!(_DWORD)Address)
          return Address;
        goto LABEL_32;
      }
      if (CFEqual(a2, CFSTR("CornerMasksSupported")))
      {
        v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
        if (!*(_BYTE *)(DerivedStorage + 62))
          v9 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
        goto LABEL_7;
      }
      if (CFEqual(a2, CFSTR("VoiceTriggerSupported")))
      {
        Address = APEndpointDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 8), (uint64_t)CFSTR("SupportsJarvisVoice"), (uint64_t)a3, (uint64_t)a4);
        if (!(_DWORD)Address)
          return Address;
        goto LABEL_32;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44A8]))
      {
LABEL_125:
        v9 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
        goto LABEL_7;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43C0]))
      {
        v28 = *(const __CFDictionary **)(DerivedStorage + 48);
        if (!v28)
        {
          Address = 0;
          *a4 = 0;
          return Address;
        }
        Value = (void *)CFDictionaryGetValue(v28, CFSTR("requestIdentifier"));
        if (!Value)
          goto LABEL_9;
        goto LABEL_8;
      }
    }
LABEL_33:
    cf = 0;
    p_cf = &cf;
    v31 = 0x2000000000;
    v32 = 0;
    v22 = CMBaseObjectGetDerivedStorage();
    v23 = *(NSObject **)(v22 + 144);
    *(_QWORD *)&block = MEMORY[0x1E0C809B0];
    *((_QWORD *)&block + 1) = 0x40000000;
    *(_QWORD *)&v34 = __carEndpoint_copyStateProperty_block_invoke;
    *((_QWORD *)&v34 + 1) = &unk_1E826C998;
    *(_QWORD *)&v35 = &cf;
    *((_QWORD *)&v35 + 1) = v22;
    *(_QWORD *)&v36 = a2;
    *((_QWORD *)&v36 + 1) = a4;
    *(_QWORD *)&v37 = a3;
    *((_QWORD *)&v37 + 1) = a1;
    dispatch_sync(v23, &block);
    Address = *((unsigned int *)p_cf + 6);
    _Block_object_dispose(&cf, 8);
LABEL_34:
    if ((_DWORD)Address == -12784)
    {
      if (gLogCategory_APEndpointCarPlay <= 30
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return 4294954512;
    }
    return Address;
  }
  v12 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  block = 0u;
  v34 = 0u;
  Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v14 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v12 + 8));
    v15 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v15)
    {
      v16 = v15(v14, CFSTR("TransportDevice"), a3, &cf);
      if ((_DWORD)v16)
      {
        Address = v16;
      }
      else
      {
        Address = APTransportDeviceGetAddress();
        if ((_DWORD)Address)
        {
          APSLogErrorAt();
        }
        else
        {
          CFDictionarySetCString();
          *a4 = Mutable;
          Mutable = 0;
        }
      }
    }
    else
    {
      Address = 4294954514;
    }
  }
  else
  {
    APSLogErrorAt();
    Address = 4294950575;
  }
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if ((_DWORD)Address)
    goto LABEL_32;
  return Address;
}

uint64_t carEndpoint_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  uint64_t v8;
  _QWORD block[9];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCarPlay <= 10
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v7 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_SetProperty_block_invoke;
  block[3] = &unk_1E826CA10;
  block[4] = &v11;
  block[5] = DerivedStorage;
  block[6] = a2;
  block[7] = a3;
  block[8] = a1;
  dispatch_sync(v7, block);
  v8 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v8;
}

uint64_t __introspector_getCollectionOfActiveCarPlayEndpoints_block_invoke()
{
  uint64_t result;
  CFMutableSetRef Mutable;
  uint64_t v2;

  result = IsAppleInternalBuild();
  if ((_DWORD)result)
  {
    introspector_getCollectionOfActiveCarPlayEndpoints_coll = (uint64_t)malloc_type_calloc(1uLL, 0x18uLL, 0x70040EA3A3B56uLL);
    *(_QWORD *)introspector_getCollectionOfActiveCarPlayEndpoints_coll = dispatch_queue_create("CollectionOfActiveCarPlayEndpoints", 0);
    Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    v2 = introspector_getCollectionOfActiveCarPlayEndpoints_coll;
    *(_QWORD *)(introspector_getCollectionOfActiveCarPlayEndpoints_coll + 8) = Mutable;
    *(_QWORD *)(v2 + 16) = "ActiveCarPlayEndpoints";
    return APSIntrospectorAddCommand();
  }
  return result;
}

void carEndpoint_copyShowInfoDictionary(uint64_t a1, const __CFAllocator *a2, __CFDictionary **a3)
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  const void *DiscoveryID;
  uint64_t v11;
  void (*v12)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v13;
  uint64_t v14;
  void (*v15)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v16;
  void (*v17)(uint64_t, CFTypeRef *);
  CFTypeRef v18;
  uint64_t v19;
  void (*v20)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  const void **v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v25;
  CFTypeRef cf;
  CFTypeRef v27;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v27 = 0;
  v25 = 0;
  cf = 0;
  Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v7 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("Name"), *(const void **)(DerivedStorage + 16));
    CFDictionarySetValue(v7, CFSTR("DeviceID"), *(const void **)(DerivedStorage + 32));
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 8));
    v9 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
    if (v9)
    {
      v9(CMBaseObject, CFSTR("TransportDevice"), a2, &v27);
      if (v27)
      {
        DiscoveryID = (const void *)APTransportDeviceGetDiscoveryID();
        CFDictionarySetValue(v7, CFSTR("DiscoveryID"), DiscoveryID);
        if (v27)
        {
          CFRelease(v27);
          v27 = 0;
        }
      }
    }
    v11 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 8));
    v12 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
    if (v12)
    {
      v12(v11, CFSTR("Model"), a2, &cf);
      v13 = cf;
    }
    else
    {
      v13 = 0;
    }
    CFDictionarySetValue(v7, CFSTR("Model"), v13);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    v14 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 8));
    v15 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
    if (v15)
      v15(v14, CFSTR("SourceVersion"), a2, &cf);
    CFDictionarySetValue(v7, CFSTR("SourceVersion"), cf);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    v16 = *(_QWORD *)(DerivedStorage + 8);
    v17 = *(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v17)
    {
      v17(v16, &v25);
      v18 = v25;
    }
    else
    {
      v18 = 0;
    }
    CFDictionarySetValue(v7, CFSTR("AirPlayFeatures"), v18);
    if (v25)
    {
      CFRelease(v25);
      v25 = 0;
    }
    v19 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 8));
    v20 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
    if (v20)
      v20(v19, CFSTR("StatusFlags"), a2, &cf);
    CFDictionarySetValue(v7, CFSTR("StatusFlags"), cf);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    v21 = (const void **)MEMORY[0x1E0C9AE50];
    if (!*(_QWORD *)(DerivedStorage + 216))
      v21 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(v7, CFSTR("Activated"), *v21);
    v22 = *(_QWORD *)(DerivedStorage + 216);
    if (v22)
    {
      v23 = APSenderSessionGetCMBaseObject(v22);
      v24 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
      if (v24)
        v24(v23, CFSTR("ShowInfo"), *MEMORY[0x1E0C9AE00], &cf);
      if (cf)
      {
        CFDictionarySetValue(v7, CFSTR("SenderSessionInfo"), cf);
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
      }
    }
    if (*(_QWORD *)(DerivedStorage + 240))
    {
      CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 240));
      CFArrayApplyBlock();
    }
    if (*(_DWORD *)(DerivedStorage + 212))
      CFDictionarySetInt64();
    *a3 = v7;
    if (cf)
      CFRelease(cf);
  }
  else
  {
    APSLogErrorAt();
  }
}

void __carEndpoint_copyShowInfoDictionary_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, const __CFString *, uint64_t, void **);
  void *value;

  value = 0;
  v4 = *(_QWORD *)(a1 + 32);
  CMBaseObject = FigEndpointStreamGetCMBaseObject();
  v6 = *(void (**)(uint64_t, const __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
  if (v6)
  {
    v6(CMBaseObject, CFSTR("EndpointStreamShowInfo"), v4, &value);
    if (value)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), *(const void **)(a2 + 24), value);
      CFRelease(value);
    }
  }
}

uint64_t carEndpoint_isEndpointConnected()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v1 = *(NSObject **)(DerivedStorage + 144);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __carEndpoint_isEndpointConnected_block_invoke;
  v4[3] = &unk_1E826C970;
  v4[4] = &v5;
  v4[5] = DerivedStorage;
  dispatch_sync(v1, v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t carEndpoint_copyPropertyForDisplay(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  CFAllocatorRef v9;
  uint64_t CMBaseObject;
  uint64_t (*v11)(uint64_t, const __CFString *, CFAllocatorRef, CFArrayRef *);
  uint64_t v12;
  const void *ValueAtIndex;
  uint64_t v14;
  CFArrayRef theArray;

  theArray = 0;
  v8 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  v9 = CFGetAllocator(a1);
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(v8);
  v11 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
  if (!v11)
  {
    v14 = 4294954514;
LABEL_7:
    APSLogErrorAt();
    goto LABEL_8;
  }
  v12 = v11(CMBaseObject, CFSTR("DisplayDescriptionArray"), v9, &theArray);
  if ((_DWORD)v12)
  {
    v14 = v12;
    goto LABEL_7;
  }
  if (CFArrayGetCount(theArray) > 0)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
    v14 = APEndpointDisplayDescriptionCopyProperty((uint64_t)ValueAtIndex, a2, a3, a4);
    if (!(_DWORD)v14)
      goto LABEL_8;
    goto LABEL_7;
  }
  APSLogErrorAt();
  v14 = 4294950576;
LABEL_8:
  if (theArray)
    CFRelease(theArray);
  return v14;
}

uint64_t __carEndpoint_isEndpointConnected_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v1 = *(_QWORD *)(result + 40);
  if (!*(_BYTE *)(v1 + 152))
  {
    v2 = *(_QWORD *)(v1 + 216);
    if (v2)
    {
      v3 = result;
      v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v4)
        result = v4(v2);
      else
        result = 0;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24) = result;
    }
  }
  return result;
}

void __carEndpoint_copyStateProperty_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t CMBaseObject;
  uint64_t (*v10)(uint64_t, const __CFString *, uint64_t, uint64_t);
  int v11;
  CFTypeRef *v12;
  int v13;
  CFTypeRef *v14;
  CFTypeRef *v15;
  int v16;
  CFTypeRef *v17;
  int v18;
  CFTypeRef v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  uint64_t v25;
  CFMutableArrayRef Mutable;
  __CFArray *v27;
  _QWORD *v28;
  unint64_t v29;
  const void *v30;
  uint64_t v31;
  unint64_t i;
  uint64_t v33;
  _DWORD *v34;
  const void *v35;
  unint64_t valuePtr;
  int v37;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 152))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v4 = -16723;
    goto LABEL_14;
  }
  if (!CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0CA40B0]))
  {
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0CA4118]))
    {
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(_QWORD *)(v5 + 216);
      if (!v6 || !*(_BYTE *)(v5 + 224))
      {
        v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v4 = -12783;
        goto LABEL_14;
      }
      v8 = *(_QWORD *)(a1 + 56);
      v7 = *(_QWORD *)(a1 + 64);
      CMBaseObject = APSenderSessionGetCMBaseObject(v6);
      v10 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
      if (v10)
        v11 = v10(CMBaseObject, CFSTR("AuthenticationData"), v7, v8);
      else
        v11 = -12782;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v11;
      return;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0CA4120]))
    {
      v12 = *(CFTypeRef **)(a1 + 56);
      v37 = 0;
      CMBaseObjectGetDerivedStorage();
      v13 = APSGetFBOPropertyInt64();
      if (v13)
      {
        if (v13 == 8)
        {
          v14 = (CFTypeRef *)MEMORY[0x1E0CA37E0];
          goto LABEL_25;
        }
        if (v13 == 32)
        {
          v14 = (CFTypeRef *)MEMORY[0x1E0CA37D8];
LABEL_25:
          *v12 = CFRetain(*v14);
          if (gLogCategory_APEndpointCarPlay <= 30
            && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
LABEL_31:
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v37;
          if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
            return;
          goto LABEL_32;
        }
        v16 = -12782;
      }
      else
      {
        v16 = -12783;
      }
      v37 = v16;
      APSLogErrorAt();
      goto LABEL_31;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0CA4128]))
    {
      v15 = (CFTypeRef *)MEMORY[0x1E0CA37E8];
LABEL_38:
      v19 = *v15;
      goto LABEL_39;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0CA4130]))
    {
      v17 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      v18 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 324);
      goto LABEL_35;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), CFSTR("EndpointStatus")))
    {
      **(_QWORD **)(a1 + 56) = CFNumberCreate(*(CFAllocatorRef *)(a1 + 64), kCFNumberSInt32Type, (const void *)(*(_QWORD *)(a1 + 40) + 212));
      if (!**(_QWORD **)(a1 + 56))
        goto LABEL_5;
      return;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), CFSTR("Features")))
    {
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v22)
        v23 = v22(v20, v21);
      else
        v23 = -12782;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v23;
      if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
        return;
LABEL_12:
      APSLogErrorAt();
      return;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0CA4230]))
    {
      v24 = *(_QWORD *)(a1 + 40);
      if (*(_QWORD *)(v24 + 216) && (v25 = *(_QWORD *)(v24 + 272)) != 0)
      {
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = APHIDClientCopyHIDs(v25, *(_QWORD *)(a1 + 64), *(_QWORD **)(a1 + 56));
        if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
          return;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -12783;
      }
      goto LABEL_12;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), CFSTR("Statistics")))
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(_QWORD *)(*(_QWORD *)(a1 + 40) + 344), MEMORY[0x1E0C9B378]);
      if (!Mutable)
        goto LABEL_5;
      v27 = Mutable;
      v28 = *(_QWORD **)(a1 + 40);
      v29 = v28[43];
      if (v28[42] >= v29)
      {
        if (v29)
        {
          for (i = 0; i < v29; ++i)
          {
            CFArrayAppendValue(v27, *(const void **)(v28[41] + 8 * ((i + v28[42]) % v29)));
            v28 = *(_QWORD **)(a1 + 40);
            v29 = v28[43];
          }
        }
      }
      else
      {
        v30 = *(const void **)v28[41];
        if (v30)
        {
          v31 = 8;
          do
          {
            CFArrayAppendValue(v27, v30);
            v30 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 328) + v31);
            v31 += 8;
          }
          while (v30);
        }
      }
      **(_QWORD **)(a1 + 56) = v27;
      return;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0CA4260]))
    {
      v17 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      v18 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 204);
      goto LABEL_35;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0CA42F8]))
    {
      v17 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      v18 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 305);
LABEL_35:
      if (v18)
        v15 = v17;
      else
        v15 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      goto LABEL_38;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0CA4350]))
    {
      if (!APSGetFBOPropertyInt64())
      {
        v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v4 = -12782;
        goto LABEL_14;
      }
      v17 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      v18 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 306);
      goto LABEL_35;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0CA4360]))
      goto LABEL_79;
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0CA4388]))
    {
      v15 = (CFTypeRef *)MEMORY[0x1E0CA40A0];
      goto LABEL_38;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0CA4390]))
    {
LABEL_79:
      v33 = APSGetFBOPropertyInt64();
      v15 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      if (!v33)
        v15 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      goto LABEL_38;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0CA43A0]))
    {
      v19 = *(CFTypeRef *)(*(_QWORD *)(a1 + 40) + 248);
      if (!v19)
        goto LABEL_40;
      goto LABEL_39;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), CFSTR("EndpointShowInfo")))
    {
      carEndpoint_copyShowInfoDictionary(*(_QWORD *)(a1 + 72), *(const __CFAllocator **)(a1 + 64), *(__CFDictionary ***)(a1 + 56));
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
      if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
        return;
      goto LABEL_12;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0CA43C8]))
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = carEndpoint_copyStreams(*(_QWORD *)(a1 + 72), *(const __CFAllocator **)(a1 + 64), *(CFMutableArrayRef **)(a1 + 56));
      if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
        return;
      goto LABEL_12;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0CA43E0]))
    {
      valuePtr = 0;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = carEndpoint_getSupportedFeatures(*(_QWORD *)(a1 + 72), &valuePtr);
      if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      {
        **(_QWORD **)(a1 + 56) = CFNumberCreate(*(CFAllocatorRef *)(a1 + 64), kCFNumberSInt64Type, &valuePtr);
        if (!**(_QWORD **)(a1 + 56))
          goto LABEL_5;
        return;
      }
LABEL_32:
      APSLogErrorAt();
      return;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0CA4490]))
    {
      v19 = *(CFTypeRef *)(*(_QWORD *)(a1 + 40) + 312);
      if (!v19)
        goto LABEL_40;
      goto LABEL_39;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 48), CFSTR("IsCarInSpeechState")))
    {
      v34 = *(_DWORD **)(a1 + 40);
      if (v34[92] != 1)
        goto LABEL_110;
    }
    else
    {
      if (!CFEqual(*(CFTypeRef *)(a1 + 48), CFSTR("IsiOSInSpeechState")))
      {
        if (CFEqual(*(CFTypeRef *)(a1 + 48), CFSTR("VoiceTriggerTimestamp")))
        {
          **(_QWORD **)(a1 + 56) = CFNumberCreateInt64();
          if (!**(_QWORD **)(a1 + 56))
            goto LABEL_5;
          return;
        }
        if (!CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0CA4108]))
        {
          if (CFEqual(*(CFTypeRef *)(a1 + 48), CFSTR("VoiceActivationType")))
          {
            CFNumberGetTypeID();
            **(_QWORD **)(a1 + 56) = CFDictionaryGetTypedValue();
            v35 = **(const void ***)(a1 + 56);
            if (v35)
              CFRetain(v35);
            return;
          }
          if (!CFEqual(*(CFTypeRef *)(a1 + 48), CFSTR("DisplayCornerMasks")))
          {
            v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
            v4 = -12784;
            goto LABEL_14;
          }
          v19 = *(CFTypeRef *)(*(_QWORD *)(a1 + 40) + 432);
          if (!v19)
          {
LABEL_40:
            **(_QWORD **)(a1 + 56) = v19;
            return;
          }
LABEL_39:
          v19 = CFRetain(v19);
          goto LABEL_40;
        }
        v17 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
        v18 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 412);
        goto LABEL_35;
      }
      v34 = *(_DWORD **)(a1 + 40);
      if (v34[94] || v34[92] != 2)
      {
LABEL_110:
        v15 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
        goto LABEL_38;
      }
    }
    if (v34[93])
    {
      v15 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      goto LABEL_38;
    }
    goto LABEL_110;
  }
  v2 = *(_QWORD *)(a1 + 40);
  if (!*(_QWORD *)(v2 + 216))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -12783;
    goto LABEL_12;
  }
  **(_QWORD **)(a1 + 56) = CFNumberCreate(*(CFAllocatorRef *)(a1 + 64), kCFNumberSInt32Type, (const void *)(v2 + 204));
  if (!**(_QWORD **)(a1 + 56))
  {
LABEL_5:
    APSLogErrorAt();
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v4 = -16721;
LABEL_14:
    *(_DWORD *)(v3 + 24) = v4;
  }
}

uint64_t carEndpoint_copyStreams(uint64_t a1, const __CFAllocator *a2, CFMutableArrayRef *a3)
{
  uint64_t DerivedStorage;
  CFMutableArrayRef Mutable;
  uint64_t *v7;
  const __CFArray *v8;
  uint64_t v9;
  const void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  Mutable = CFArrayCreateMutable(a2, 0, MEMORY[0x1E0C9B378]);
  v7 = v13;
  v13[3] = (uint64_t)Mutable;
  if (Mutable)
  {
    v8 = *(const __CFArray **)(DerivedStorage + 240);
    if (v8)
    {
      CFArrayGetCount(v8);
      CFArrayApplyBlock();
      v7 = v13;
      Mutable = (CFMutableArrayRef)v13[3];
    }
    v9 = 0;
    *a3 = Mutable;
    v7[3] = 0;
  }
  else
  {
    APSLogErrorAt();
    v11 = (const void *)v13[3];
    if (v11)
      CFRelease(v11);
    v9 = 4294950575;
  }
  _Block_object_dispose(&v12, 8);
  return v9;
}

uint64_t carEndpoint_getSupportedFeatures(uint64_t a1, unint64_t *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, CFTypeRef *);
  uint64_t v7;
  _BOOL8 v8;
  unint64_t v9;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  v4 = DerivedStorage;
  v5 = *(_QWORD *)(DerivedStorage + 8);
  v6 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v6)
  {
    v7 = v6(v5, &cf);
    if (!(_DWORD)v7)
    {
      v8 = APSFeaturesHasFeature() != 0;
      v9 = (APSFeaturesHasFeature() != 0) | (unint64_t)(2 * v8);
      if (*(_BYTE *)(v4 + 58))
        v9 |= 8uLL;
      *a2 = v9;
      goto LABEL_9;
    }
  }
  else
  {
    v7 = 4294954514;
  }
  APSLogErrorAt();
LABEL_9:
  if (cf)
    CFRelease(cf);
  return v7;
}

void __carEndpoint_copyStreams_block_invoke(uint64_t a1, uint64_t a2)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(const void **)(a2 + 16));
}

uint64_t carEndpoint_updateDisplayCornerMasks()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(result + 62))
  {
    result = *(_QWORD *)(result + 432);
    if (result)
      return CFDictionaryApplyBlock();
  }
  return result;
}

void __carEndpoint_updateDisplayCornerMasks_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t ScreenStreamForDisplayUUID;
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, _QWORD, _QWORD);
  const __CFAllocator *v15;
  CFDictionaryRef v16;
  CFDictionaryRef v17;
  uint64_t CMBaseObject;
  void (*v19)(uint64_t, const __CFString *, CFDictionaryRef);
  void (*v20)(uint64_t, _QWORD, _QWORD, _QWORD);
  void *values;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;

  values = a3;
  if (!*(_QWORD *)(a1 + 32) || FigCFEqual())
  {
    v29 = 0;
    v30 = &v29;
    v31 = 0x2000000000;
    LOBYTE(v32) = 0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v7 = MEMORY[0x1E0C809B0];
    if (*(_QWORD *)(DerivedStorage + 240))
    {
      CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 240));
      v22 = v7;
      v23 = 0x40000000;
      v24 = __carEndpoint_getStreamIsResumedForDisplayUUID_block_invoke;
      v25 = &unk_1E826CA60;
      v26 = &v29;
      v27 = a2;
      CFArrayApplyBlock();
    }
    v8 = *((unsigned __int8 *)v30 + 24);
    _Block_object_dispose(&v29, 8);
    v9 = *(_QWORD *)(a1 + 40);
    v29 = 0;
    v30 = &v29;
    v31 = 0x2000000000;
    v32 = 0;
    v10 = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(v10 + 240))
    {
      CFArrayGetCount(*(CFArrayRef *)(v10 + 240));
      v22 = v7;
      v23 = 0x40000000;
      v24 = __carEndpoint_copyStreamSubtypeForDisplayUUID_block_invoke;
      v25 = &unk_1E826CA88;
      v27 = a2;
      v28 = v9;
      v26 = &v29;
      CFArrayApplyBlock();
    }
    v11 = (const void *)v30[3];
    _Block_object_dispose(&v29, 8);
    ScreenStreamForDisplayUUID = carEndpoint_getScreenStreamForDisplayUUID();
    if (ScreenStreamForDisplayUUID)
    {
      v13 = ScreenStreamForDisplayUUID;
      if (FigCFEqual() && v8)
      {
        v14 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v14)
          v14(v13, 0, 0, 0);
        if (gLogCategory_APEndpointCarPlay <= 50
          && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      if (!a3 || (void *)*MEMORY[0x1E0C9B0D0] == a3)
      {
        if (gLogCategory_APEndpointCarPlay <= 50
          && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      else
      {
        v15 = CFGetAllocator(*(CFTypeRef *)(a1 + 40));
        v16 = CFDictionaryCreate(v15, (const void **)&kAPEndpointStreamCornerMaskKey_TopLeftCornerMask, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v16)
        {
          v17 = v16;
          if (gLogCategory_APEndpointCarPlay <= 50
            && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          CMBaseObject = FigEndpointStreamGetCMBaseObject();
          v19 = *(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56);
          if (v19)
            v19(CMBaseObject, CFSTR("ExtraStreamOptions"), v17);
          CFRelease(v17);
        }
      }
      if (FigCFEqual())
      {
        v20 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v20)
          v20(v13, 0, 0, 0);
      }
    }
    if (v11)
      CFRelease(v11);
  }
}

uint64_t carEndpoint_getScreenStreamForDisplayUUID()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 240))
  {
    CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 240));
    CFArrayApplyBlock();
  }
  v1 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v1;
}

uint64_t __carEndpoint_getStreamIsResumedForDisplayUUID_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  carEndpoint_getDisplayUUIDForStream();
  result = FigCFEqual();
  if ((_DWORD)result)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 48);
  return result;
}

const void *carEndpoint_getDisplayUUIDForStream()
{
  uint64_t CMBaseObject;
  void (*v1)(uint64_t, _QWORD, _QWORD, CFDictionaryRef *);
  const void *Value;
  CFDictionaryRef theDict;

  theDict = 0;
  CMBaseObject = FigEndpointStreamGetCMBaseObject();
  v1 = *(void (**)(uint64_t, _QWORD, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
  if (!v1)
    return 0;
  v1(CMBaseObject, *MEMORY[0x1E0CC66F0], 0, &theDict);
  if (!theDict)
    return 0;
  Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CC6650]);
  if (theDict)
    CFRelease(theDict);
  return Value;
}

uint64_t __carEndpoint_copyStreamSubtypeForDisplayUUID_block_invoke(uint64_t a1)
{
  uint64_t result;
  CFAllocatorRef v3;
  uint64_t v4;
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, _QWORD, CFAllocatorRef, uint64_t);

  carEndpoint_getDisplayUUIDForStream();
  result = FigCFEqual();
  if ((_DWORD)result)
  {
    v3 = CFGetAllocator(*(CFTypeRef *)(a1 + 48));
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    CMBaseObject = FigEndpointStreamGetCMBaseObject();
    result = CMBaseObjectGetVTable();
    v6 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, uint64_t))(*(_QWORD *)(result + 8) + 48);
    if (v6)
      return v6(CMBaseObject, *MEMORY[0x1E0CA47C8], v3, v4 + 24);
  }
  return result;
}

uint64_t __carEndpoint_getScreenStreamForDisplayUUID_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  carEndpoint_getDisplayUUIDForStream();
  result = FigCFEqual();
  if ((_DWORD)result)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a2 + 16);
  return result;
}

uint64_t carEndpoint_Activate(const void *a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  NSObject *v11;
  _QWORD v13[10];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  if (a3)
    CFRetain(a3);
  v11 = *(NSObject **)(DerivedStorage + 472);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 0x40000000;
  v13[2] = __carEndpoint_Activate_block_invoke;
  v13[3] = &__block_descriptor_tmp_86;
  v13[4] = DerivedStorage;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a2;
  v13[9] = a5;
  dispatch_async(v11, v13);
  return 0;
}

uint64_t carEndpoint_Deactivate(const void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  NSObject *v9;
  _QWORD block[10];
  unint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = 0;
  carEndpoint_getSupportedFeatures((uint64_t)a1, &v12);
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  v9 = *(NSObject **)(DerivedStorage + 472);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_Deactivate_block_invoke;
  block[3] = &__block_descriptor_tmp_763;
  block[4] = DerivedStorage;
  block[5] = a2;
  block[6] = a1;
  block[7] = a3;
  block[8] = v12;
  block[9] = a4;
  dispatch_async(v9, block);
  return 0;
}

uint64_t carEndpoint_Dissociate(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD v7[6];
  _QWORD block[6];
  _QWORD v9[3];
  char v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2000000000;
  v10 = 0;
  v3 = *(NSObject **)(DerivedStorage + 144);
  v4 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_Dissociate_block_invoke;
  block[3] = &unk_1E826D7C0;
  block[4] = v9;
  block[5] = DerivedStorage;
  dispatch_sync(v3, block);
  CFRetain(a1);
  v5 = *(NSObject **)(DerivedStorage + 472);
  v7[0] = v4;
  v7[1] = 0x40000000;
  v7[2] = __carEndpoint_Dissociate_block_invoke_2;
  v7[3] = &unk_1E826D7E8;
  v7[4] = v9;
  v7[5] = a1;
  dispatch_async(v5, v7);
  _Block_object_dispose(v9, 8);
  return 0;
}

uint64_t carEndpoint_SetDelegateRemoteControl(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  NSObject *v5;
  _QWORD block[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 152))
  {
    APSLogErrorAt();
    return 4294950573;
  }
  else
  {
    v4 = DerivedStorage;
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v5 = *(NSObject **)(v4 + 144);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __carEndpoint_SetDelegateRemoteControl_block_invoke;
    block[3] = &__block_descriptor_tmp_770;
    block[4] = v4;
    block[5] = a2;
    dispatch_sync(v5, block);
    return 0;
  }
}

uint64_t carEndpoint_isDissociated(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v1 = *(NSObject **)(a1 + 144);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __carEndpoint_isDissociated_block_invoke;
  v4[3] = &unk_1E826CB38;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void carEndpoint_deactivateInternal(const void *a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  const __CFArray *v9;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  uint64_t v12;
  const __CFArray *v13;
  CFIndex j;
  const __CFDictionary *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  const void *v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  uint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  NSObject *v32;
  int v33;
  int v34;
  _QWORD v35[11];
  _QWORD v36[5];
  _QWORD v37[10];
  _QWORD block[7];
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  _QWORD v63[6];
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  void *v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t *v70;
  _QWORD *v71;
  const void *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  CFMutableDictionaryRef Mutable;
  _QWORD v86[3];
  int v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[3];
  int v97;
  _QWORD v98[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v59 = 0;
  v60 = &v59;
  v61 = 0x2000000000;
  v62 = 0;
  v55 = 0;
  v56 = &v55;
  v57 = 0x2000000000;
  v58 = 0;
  v51 = 0;
  v52 = &v51;
  v53 = 0x2000000000;
  v54 = 0;
  v47 = 0;
  v48 = &v47;
  v49 = 0x2000000000;
  v50 = 0;
  v43 = 0;
  v44 = &v43;
  v45 = 0x2000000000;
  v46 = 0;
  v39 = 0;
  v40 = &v39;
  v41 = 0x2000000000;
  v42 = 0;
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v8 = CMBaseObjectGetDerivedStorage();
  v73 = 0;
  LODWORD(v64) = 0;
  LODWORD(v63[0]) = 0;
  v9 = *(const __CFArray **)(v8 + 496);
  if (v9 && CFArrayGetCount(v9) >= 1)
  {
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (CFArrayGetCount(*(CFArrayRef *)(v8 + 496)) >= 1)
    {
      for (i = 0; i < CFArrayGetCount(*(CFArrayRef *)(v8 + 496)); ++i)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v8 + 496), i);
        CFDictionaryGetValue(ValueAtIndex, CFSTR("CarPlaySendCommandCache_Command"));
        CFDictionaryGetValue(ValueAtIndex, CFSTR("CarPlaySendCommandCache_TimestampBefore"));
        FigCFDictionaryGetDoubleIfPresent();
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
        if (LODWORD(v63[0]))
        {
          if (gLogCategory_APEndpointCarPlay > 90
            || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
          {
            continue;
          }
        }
        else if (gLogCategory_APEndpointCarPlay > 50
               || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
        {
          continue;
        }
        LogPrintF();
      }
    }
    if (gLogCategory_APEndpointCarPlay < 51
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  v12 = CMBaseObjectGetDerivedStorage();
  LODWORD(v73) = 0;
  LODWORD(v64) = 0;
  v13 = *(const __CFArray **)(v12 + 512);
  if (v13 && CFArrayGetCount(v13) >= 1)
  {
    v34 = a2;
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (CFArrayGetCount(*(CFArrayRef *)(v12 + 512)) >= 1)
    {
      for (j = 0; j < CFArrayGetCount(*(CFArrayRef *)(v12 + 512)); ++j)
      {
        v15 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v12 + 512), j);
        CFDictionaryGetValue(v15, CFSTR("CarPlayReceivedCommandCache_Command"));
        CFDictionaryGetValue(v15, CFSTR("CarPlayReceivedCommandCache_Timestamp"));
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
        if ((_DWORD)v64)
        {
          if (gLogCategory_APEndpointCarPlay > 90
            || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
          {
            continue;
          }
        }
        else if (gLogCategory_APEndpointCarPlay > 50
               || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
        {
          continue;
        }
        LogPrintF();
      }
    }
    a2 = v34;
    if (gLogCategory_APEndpointCarPlay < 51
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  v16 = CMBaseObjectGetDerivedStorage();
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v16 + 496));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v16 + 512));
  v17 = *(NSObject **)(DerivedStorage + 144);
  v18 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_deactivateInternal_block_invoke;
  block[3] = &unk_1E826D5C0;
  block[4] = &v59;
  block[5] = &v55;
  block[6] = DerivedStorage;
  dispatch_sync(v17, block);
  if (*((_DWORD *)v60 + 6))
  {
    APSEventRecorderRecordEvent();
    v19 = CMBaseObjectGetDerivedStorage();
    v98[0] = 0;
    v98[1] = v98;
    v98[2] = 0x2000000000;
    v98[3] = 0;
    v96[0] = 0;
    v96[1] = v96;
    v96[2] = 0x2000000000;
    v97 = 0;
    v92 = 0;
    v93 = &v92;
    v94 = 0x2000000000;
    v95 = 0;
    v88 = 0;
    v89 = &v88;
    v90 = 0x2000000000;
    v91 = 0;
    v86[0] = 0;
    v86[1] = v86;
    v86[2] = 0x2000000000;
    v87 = 0;
    v82 = 0;
    v83 = &v82;
    v84 = 0x2000000000;
    Mutable = 0;
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v20 = *(NSObject **)(v19 + 144);
    v73 = v18;
    v74 = 0x40000000;
    v75 = __carEndpoint_postSessionStatistics_block_invoke;
    v76 = &unk_1E826D670;
    v81 = v19;
    v77 = v98;
    v78 = v96;
    v79 = &v82;
    v80 = &v92;
    dispatch_sync(v20, &v73);
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      AppendPrintF();
    }
    if (v93[3])
    {
      CFArrayGetCount(*(CFArrayRef *)(v19 + 240));
      v64 = v18;
      v65 = 0x40000000;
      v66 = __carEndpoint_postSessionStatistics_block_invoke_2;
      v67 = &unk_1E826D698;
      v72 = a1;
      v68 = v96;
      v69 = &v88;
      v70 = &v82;
      v71 = v86;
      CFArrayApplyBlock();
      CFDictionarySetInt64();
      v21 = *(NSObject **)(v19 + 144);
      v63[0] = v18;
      v63[1] = 0x40000000;
      v63[2] = __carEndpoint_postSessionStatistics_block_invoke_3;
      v63[3] = &unk_1E826D6E8;
      v63[5] = v19;
      v63[4] = &v82;
      dispatch_sync(v21, v63);
      APCarPlay_AddAnalyticsValues((const void *)v83[3], CFSTR("SessionEnded"));
      CFRelease((CFTypeRef)v93[3]);
    }
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    free((void *)v89[3]);
    v22 = (const void *)v83[3];
    if (v22)
      CFRelease(v22);
    _Block_object_dispose(&v82, 8);
    _Block_object_dispose(v86, 8);
    _Block_object_dispose(&v88, 8);
    _Block_object_dispose(&v92, 8);
    _Block_object_dispose(v96, 8);
    _Block_object_dispose(v98, 8);
    carEndpoint_powerLogActivation((uint64_t)a1, 0);
    v23 = CMBaseObjectGetDerivedStorage();
    APSEventRecorderReset();
    v24 = *(NSObject **)(v23 + 144);
    v73 = v18;
    v74 = 0x40000000;
    v75 = __carEndpoint_resetEventRecorderEventsAndStatistics_block_invoke;
    v76 = &__block_descriptor_tmp_755;
    v77 = (_QWORD *)v23;
    dispatch_sync(v24, &v73);
  }
  v25 = *(NSObject **)(DerivedStorage + 144);
  v37[0] = v18;
  v37[1] = 0x40000000;
  v37[2] = __carEndpoint_deactivateInternal_block_invoke_2;
  v37[3] = &unk_1E826D5E8;
  v37[4] = &v51;
  v37[5] = &v47;
  v37[8] = DerivedStorage;
  v37[9] = a1;
  v37[6] = &v39;
  v37[7] = &v43;
  dispatch_sync(v25, v37);
  if (!FigServer_IsAirplayd())
  {
    v26 = *(NSObject **)(DerivedStorage + 456);
    v36[0] = v18;
    v36[1] = 0x40000000;
    v36[2] = __carEndpoint_deactivateInternal_block_invoke_3;
    v36[3] = &__block_descriptor_tmp_716;
    v36[4] = DerivedStorage;
    dispatch_sync(v26, v36);
  }
  v27 = v40[3];
  if (v27)
  {
    APAccTransportClientConnectionInvalidateEndpoint(v44[3], v27);
    CFRelease((CFTypeRef)v40[3]);
    CFRelease(a1);
  }
  if (v48[3])
  {
    CFArrayGetCount((CFArrayRef)v48[3]);
    v35[6] = v18;
    v35[7] = 0x40000000;
    v35[8] = __carEndpoint_deactivateInternal_block_invoke_4;
    v35[9] = &__block_descriptor_tmp_717;
    v35[10] = a1;
    CFArrayApplyBlock();
    v28 = (const void *)v48[3];
    if (v28)
    {
      CFRelease(v28);
      v48[3] = 0;
    }
  }
  v29 = v44[3];
  if (v29)
  {
    APAccTransportClientConnectionClose(v29);
    CFRelease((CFTypeRef)v44[3]);
  }
  v30 = v52[3];
  if (v30)
  {
    carEndpoint_teardownSenderSession((uint64_t)a1, v30, a2 == 0);
    v31 = (const void *)v52[3];
    if (v31)
      CFRelease(v31);
  }
  *(_DWORD *)(DerivedStorage + 212) = 0;
  if (*(_BYTE *)(DerivedStorage + 57))
    APCarPlayAVVCServerRemoveEndpoint(a1);
  if (a2)
  {
    if (introspector_getCollectionOfActiveCarPlayEndpoints_once != -1)
      dispatch_once(&introspector_getCollectionOfActiveCarPlayEndpoints_once, &__block_literal_global_23);
    if (introspector_getCollectionOfActiveCarPlayEndpoints_coll)
    {
      v32 = *(NSObject **)introspector_getCollectionOfActiveCarPlayEndpoints_coll;
      v35[0] = v18;
      v35[1] = 0x40000000;
      v35[2] = __carEndpoint_deactivateInternal_block_invoke_5;
      v35[3] = &__block_descriptor_tmp_718;
      v35[4] = introspector_getCollectionOfActiveCarPlayEndpoints_coll;
      v35[5] = a1;
      dispatch_sync(v32, v35);
    }
  }
  carEndpoint_setFeatureFlagsToDefaultValues(a1, 1, *((_DWORD *)v60 + 6));
  if (a4)
  {
    v33 = *((_DWORD *)v56 + 6);
    if (!v33)
      v33 = *((_DWORD *)v60 + 6);
    *a4 = v33;
  }
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v43, 8);
  _Block_object_dispose(&v47, 8);
  _Block_object_dispose(&v51, 8);
  _Block_object_dispose(&v55, 8);
  _Block_object_dispose(&v59, 8);
}

void carEndpoint_postActivationNotification(const void *a1, const void *a2, int a3)
{
  const __CFAllocator *v6;
  CFMutableDictionaryRef Mutable;
  unint64_t v8;

  v8 = 0;
  carEndpoint_getSupportedFeatures((uint64_t)a1, &v8);
  v6 = CFGetAllocator(a1);
  Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt64();
  carEndpoint_postNotification(a1, a2, a3, Mutable);
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t __carEndpoint_isDissociated_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 40) + 152);
  return result;
}

void carEndpoint_setFeatureFlagsToDefaultValues(const void *a1, int a2, int a3)
{
  uint64_t DerivedStorage;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 57) = 0;
  *(_DWORD *)(DerivedStorage + 59) = 0;
  *(_DWORD *)(DerivedStorage + 62) = 0;
  v7 = *(const void **)(DerivedStorage + 72);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  *(_BYTE *)(DerivedStorage + 80) = 0;
  v8 = *(const void **)(DerivedStorage + 88);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 96);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  *(_BYTE *)(DerivedStorage + 104) = 0;
  v10 = *(const void **)(DerivedStorage + 112);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  *(_BYTE *)(DerivedStorage + 120) = 0;
  v11 = *(const void **)(DerivedStorage + 128);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 128) = 0;
  }
  *(_BYTE *)(DerivedStorage + 58) = 0;
  if (a2)
    carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E0CA3B48], a3, 0);
}

uint64_t __carEndpoint_activateInternal_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  const void *v4;
  const void *v5;
  NSObject *v6;
  uint64_t v7;
  const void *v8;
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  unsigned int v12;
  int v13;
  const void **v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t (*)(uint64_t, int, uint64_t, const void *, _QWORD *));
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t CMBaseObject;
  uint64_t (*v25)(uint64_t, const __CFString *, const void *);
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  int v32;
  _QWORD block[4];
  int8x16_t v34;
  uint64_t v35;
  __int128 v36;
  const void *v37;

  v1 = result;
  v2 = *(_QWORD *)(result + 56);
  if (*(_BYTE *)(v2 + 152))
  {
    v31 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
    v32 = -16723;
LABEL_67:
    *(_DWORD *)(v31 + 24) = v32;
    return result;
  }
  if (*(_DWORD *)(v2 + 204))
  {
    result = APSLogErrorAt();
    v31 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8);
    v32 = -16727;
    goto LABEL_67;
  }
  v3 = *(_DWORD *)(v2 + 200) + 1;
  *(_DWORD *)(v2 + 200) = v3;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = v3;
  if (FigServer_IsAirplayd())
  {
    v4 = *(const void **)(*(_QWORD *)(v1 + 56) + 296);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(*(_QWORD *)(v1 + 56) + 296) = 0;
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = FigStarkModeCopyController();
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24))
      return APSLogErrorAt();
  }
  v5 = *(const void **)(*(_QWORD *)(v1 + 56) + 296);
  if (!v5)
  {
    result = APSLogErrorAt();
    v31 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8);
    v32 = -16726;
    goto LABEL_67;
  }
  CFRetain(*(CFTypeRef *)(v1 + 64));
  dispatch_retain(*(dispatch_object_t *)(v1 + 72));
  CFRetain(v5);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_activateInternal_block_invoke_2;
  block[3] = &unk_1E826CBA8;
  v35 = *(_QWORD *)(v1 + 72);
  v36 = *(_OWORD *)(v1 + 56);
  v6 = *(NSObject **)(v36 + 456);
  v37 = v5;
  v34 = vextq_s8(*(int8x16_t *)(v1 + 32), *(int8x16_t *)(v1 + 32), 8uLL);
  dispatch_async(v6, block);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = APSNetworkClockNTPServerCreate();
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24))
    return APSLogErrorAt();
  v7 = *(_QWORD *)(v1 + 64);
  v8 = *(const void **)(*(_QWORD *)(v1 + 56) + 8);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 480))
  {
    v11 = 0;
    goto LABEL_17;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v11 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("eventRecorder"), *(const void **)(DerivedStorage + 480));
LABEL_17:
    v12 = APSGetFBOPropertyInt64();
    v13 = IsAppleInternalBuild();
    v14 = (const void **)MEMORY[0x1E0C9AE50];
    if (v13 || v12 > 0x44AF98 || v12 - 3651004 <= 0xCF463)
    {
      CFDictionarySetValue(v11, CFSTR("statsCollectionEnabled"), (const void *)*MEMORY[0x1E0C9AE50]);
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_25;
      }
    }
    else
    {
      CFDictionarySetValue(v11, CFSTR("statsCollectionEnabled"), (const void *)*MEMORY[0x1E0C9AE40]);
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
LABEL_25:
        LogPrintF();
      }
    }
    if (IsAppleInternalBuild() && APSSettingsGetInt64())
      CFDictionarySetValue(v11, CFSTR("highFreqStatsCollectionEnabled"), *v14);
    v15 = (_QWORD *)(DerivedStorage + 216);
    v16 = APSenderSessionAirPlayCreate(0, *(const void **)(DerivedStorage + 16), v8, 0, 5, 0, *(NSObject **)(DerivedStorage + 456), 0, 0.0, 0, 0, *(CFTypeRef *)(DerivedStorage + 232), 0, 0, 0, v11, (CFTypeRef *)(DerivedStorage + 216));
    if (v16)
    {
      v26 = v16;
    }
    else
    {
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v17 = *v15;
      v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t (*)(uint64_t, int, uint64_t, const void *, _QWORD *)))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
      if (v18)
        v18(v17, v7, v7, carEndpoint_handleEvent, carEndpoint_handleEventCreatingReply);
      CMNotificationCenterGetDefaultLocalCenter();
      v19 = CMNotificationCenterAddListener();
      if (v19)
      {
        v26 = v19;
      }
      else
      {
        CMNotificationCenterGetDefaultLocalCenter();
        v20 = CMNotificationCenterAddListener();
        if (v20)
        {
          v26 = v20;
        }
        else
        {
          CMNotificationCenterGetDefaultLocalCenter();
          v21 = CMNotificationCenterAddListener();
          if (v21)
          {
            v26 = v21;
          }
          else
          {
            CMNotificationCenterGetDefaultLocalCenter();
            v22 = CMNotificationCenterAddListener();
            if (v22)
            {
              v26 = v22;
            }
            else
            {
              CMNotificationCenterGetDefaultLocalCenter();
              v23 = CMNotificationCenterAddListener();
              if (v23)
              {
                v26 = v23;
              }
              else
              {
                if (!CFPrefs_GetInt64())
                {
                  v26 = 0;
                  if (!v11)
                    goto LABEL_49;
                  goto LABEL_48;
                }
                CMBaseObject = APSenderSessionGetCMBaseObject(*v15);
                v25 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 56);
                if (v25)
                {
                  v26 = v25(CMBaseObject, CFSTR("PublishEncryptionKeyDiagnosticMode"), *v14);
                  if (!v26)
                  {
                    if (!v11)
                      goto LABEL_49;
                    goto LABEL_48;
                  }
                }
                else
                {
                  v26 = -12782;
                }
              }
            }
          }
        }
      }
    }
    APSLogErrorAt();
    if (!v11)
    {
LABEL_49:
      if (!v26)
        goto LABEL_55;
      goto LABEL_50;
    }
LABEL_48:
    CFRelease(v11);
    goto LABEL_49;
  }
  APSLogErrorAt();
  v26 = -16721;
LABEL_50:
  carEndpoint_teardownSenderSession(v7, *(_QWORD *)(DerivedStorage + 216), 0);
  v27 = *(_QWORD *)(DerivedStorage + 216);
  if (v27)
  {
    v28 = APSenderSessionGetCMBaseObject(v27);
    if (v28)
    {
      v29 = v28;
      v30 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v30)
        v30(v29);
    }
    CFRelease(*(CFTypeRef *)(DerivedStorage + 216));
    *(_QWORD *)(DerivedStorage + 216) = 0;
  }
LABEL_55:
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = v26;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24))
    return APSLogErrorAt();
  result = (uint64_t)CFRetain(*(CFTypeRef *)(*(_QWORD *)(v1 + 56) + 216));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 48) + 8) + 24) = result;
  if (*(_BYTE *)(*(_QWORD *)(v1 + 56) + 41))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = carEndpoint_createAccConnectionIfNeeded();
    result = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24);
    if ((_DWORD)result)
      return APSLogErrorAt();
  }
  return result;
}

void __carEndpoint_activateInternal_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t DerivedStorage;
  unsigned int v6;
  uint64_t CMBaseObject;
  unsigned int (*v8)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  int v9;
  unsigned int v10;
  void *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  const __CFAllocator *v19;
  __CFDictionary *Mutable;
  _QWORD v21[11];
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  CFTypeRef cf;
  _BYTE v34[256];
  __int128 block;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL);
  v2 = MEMORY[0x1E0C809B0];
  v3 = "eRemoteControlSessionEventInternal";
  if (*(_DWORD *)(*(_QWORD *)(a1 + 56) + 204) == *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    if (gLogCategory_APEndpointCarPlay <= 30
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 464) = CFRetain(*(CFTypeRef *)(a1 + 72));
    if (!FigServer_IsAirplayd())
    {
      v4 = *(_QWORD *)(a1 + 64);
      v21[6] = v2;
      v21[7] = 0x40000000;
      v21[8] = __carEndpoint_activateInternal_block_invoke_3;
      v21[9] = &__block_descriptor_tmp_92;
      v21[10] = v4;
      FigStarkModeControllerSetExecuteChangeHandler();
    }
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v32 = 0;
    cf = 0;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v27 = 0;
    v26 = 0;
    v25 = 0;
    v24 = 0;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    block = 0u;
    v36 = 0u;
    memset(v34, 0, sizeof(v34));
    v22 = 0u;
    v23 = 0u;
    if (!*(_QWORD *)(DerivedStorage + 464))
    {
      APSLogErrorAt();
      v11 = 0;
LABEL_24:
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (!*(_QWORD *)(DerivedStorage + 464))
      {
LABEL_48:
        v12 = 0;
        goto LABEL_49;
      }
      v12 = FigStarkModeControllerRequestInitialModeChange();
LABEL_49:
      if (cf)
        CFRelease(cf);
      free(v11);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v12;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      {
        APSLogErrorAt();
      }
      else
      {
        v14 = *(_QWORD *)(a1 + 64);
        v15 = CMBaseObjectGetDerivedStorage();
        if (CFPreferencesGetAppBooleanValue(CFSTR("airPlayCarPlayReceiverLogs"), CFSTR("com.apple.airplay"), 0)
          || CFPreferencesGetAppBooleanValue(CFSTR("dpCarPlayReceiverLogs"), CFSTR("com.apple.airplay"), 0)
          || CFPreferencesGetAppBooleanValue(CFSTR("OEMCarPlayReceiverLogs"), CFSTR("com.apple.airplay"), 0))
        {
          v16 = *(NSObject **)(v15 + 456);
          *(_QWORD *)&block = v2;
          *((_QWORD *)&block + 1) = *((_QWORD *)v3 + 227);
          *(_QWORD *)&v36 = __carEndpoint_configureAccessoryLogs_block_invoke;
          *((_QWORD *)&v36 + 1) = &__block_descriptor_tmp_179;
          *(_QWORD *)&v37 = v14;
          dispatch_async(v16, &block);
        }
      }
      goto LABEL_56;
    }
    v6 = APSGetFBOPropertyInt64();
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 8));
    v8 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
    if (!v8 || v8(CMBaseObject, CFSTR("InitialMode"), 0, &cf))
    {
      v12 = -71960;
    }
    else if (cf)
    {
      v9 = APStarkModeChangeRequestMakeFromDictionary((uint64_t)cf, v6 > 0x3567DF, (uint64_t)&v28);
      if (v9)
      {
        v12 = v9;
      }
      else
      {
        v10 = APStarkModeInitialOwnerRequestMakeFromDictionary((uint64_t)cf, v6 > 0x3567DF, (uint64_t)&v26, (uint64_t)&v24);
        if (!v10)
        {
          v11 = (void *)CFDictionaryCopyCString();
          if (gLogCategory_APEndpointCarPlay <= 50
            && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
          {
            APStarkModeChangeRequestToString(&v28, (uint64_t)&block);
            APStarkInitialOwnerRequestToString((uint64_t)&v26, (uint64_t)&v24, (uint64_t)v34);
            v2 = MEMORY[0x1E0C809B0];
            v3 = "session_handleRemoteControlSessionEventInternal" + 13;
            LogPrintF();
          }
          v13 = FigStarkModeControllerRequestInitialModeChange();
          v12 = v13;
          if (!v13)
            goto LABEL_49;
          if (v13 == -16739 && v6 < 0x3567E0)
          {
            if (gLogCategory_APEndpointCarPlay <= 90
              && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            if (HIDWORD(v28) == 100)
              *((_QWORD *)&v29 + 1) = 0x6400000064;
            if (DWORD1(v30) == 100)
              *(_QWORD *)&v31 = 0x6400000064;
            if (!FigStarkModeControllerRequestInitialModeChange())
              goto LABEL_48;
            APSLogErrorAt();
            goto LABEL_24;
          }
          if (gLogCategory_APEndpointCarPlay <= 90
            && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          APSLogErrorAt();
LABEL_23:
          if (v6 >= 0x3567E0)
            goto LABEL_49;
          goto LABEL_24;
        }
        v12 = v10;
      }
    }
    else
    {
      v12 = -71960;
    }
    APSLogErrorAt();
    v11 = 0;
    goto LABEL_23;
  }
  if (gLogCategory_APEndpointCarPlay <= 30
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_56:
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    *(_QWORD *)&block = 0;
    *((_QWORD *)&block + 1) = &block;
    *(_QWORD *)&v36 = 0x2000000000;
    DWORD2(v36) = 0;
    v17 = *(_QWORD *)(a1 + 56);
    v18 = *(NSObject **)(v17 + 144);
    v21[0] = v2;
    v21[1] = *((_QWORD *)v3 + 227);
    v21[2] = __carEndpoint_activateInternal_block_invoke_4;
    v21[3] = &unk_1E826CB80;
    v21[4] = &block;
    v21[5] = v17;
    dispatch_sync(v18, v21);
    v19 = CFGetAllocator(*(CFTypeRef *)(a1 + 64));
    Mutable = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetInt64();
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA3AC0], (const void *)*MEMORY[0x1E0CA3AA0]);
    carEndpoint_postNotification(*(const void **)(a1 + 64), (const void *)*MEMORY[0x1E0CA3B50], *(_DWORD *)(*((_QWORD *)&block + 1) + 24), Mutable);
    CFRelease(Mutable);
    _Block_object_dispose(&block, 8);
  }
  CFRelease(*(CFTypeRef *)(a1 + 72));
  dispatch_release(*(dispatch_object_t *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 64));
}

void __carEndpoint_activateInternal_block_invoke_3(uint64_t a1, _DWORD *a2)
{
  NSObject *v4;
  const void *v5;
  dispatch_time_t v6;
  __CFDictionary *v7;

  v4 = dispatch_semaphore_create(0);
  v5 = *(const void **)(a1 + 32);
  CMBaseObjectGetDerivedStorage();
  v7 = 0;
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  carEndpoint_takeActionOnModeChanges(v5, a2);
  if (APStarkModeCreateDictionaryRepresentation((uint64_t)a2, &v7)
    || carEndpoint_sendCommandInternal(v5, CFSTR("modesChanged"), v7, 1, v4))
  {
    APSLogErrorAt();
  }
  else if (gLogCategory_APEndpointCarPlay <= 20
         && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v7)
    CFRelease(v7);
  v6 = dispatch_time(0, 250000000);
  if (dispatch_semaphore_wait(v4, v6)
    && gLogCategory_APEndpointCarPlay <= 60
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  dispatch_release(v4);
}

uint64_t __carEndpoint_activateInternal_block_invoke_4(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 40) + 204);
  return result;
}

void carEndpoint_postNotification(const void *a1, const void *a2, int a3, const void *a4)
{
  NSObject **DerivedStorage;
  NSObject *v9;
  _QWORD block[8];
  int v11;

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  if (a4)
    CFRetain(a4);
  v9 = *DerivedStorage;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_postNotification_block_invoke;
  block[3] = &__block_descriptor_tmp_212;
  block[4] = DerivedStorage;
  block[5] = a2;
  v11 = a3;
  block[6] = a4;
  block[7] = a1;
  dispatch_async(v9, block);
}

uint64_t carEndpoint_createAccConnectionIfNeeded()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t *v2;
  const __CFDictionary *v3;
  const void *Value;
  const void *v5;
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 280))
    return 0;
  v2 = (uint64_t *)(DerivedStorage + 280);
  v3 = *(const __CFDictionary **)(DerivedStorage + 48);
  if (v3 && (Value = CFDictionaryGetValue(v3, CFSTR("authenticationCertificateSerial"))) != 0)
  {
    v5 = Value;
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v7 = Mutable;
    if (!Mutable)
    {
      APSLogErrorAt();
      v1 = 4294960568;
      goto LABEL_15;
    }
    CFDictionarySetValue(Mutable, CFSTR("authenticationCertificateSerial"), v5);
  }
  else
  {
    v7 = 0;
  }
  v8 = APAccTransportClientConnectionCreate(v7, v2);
  if ((_DWORD)v8)
  {
    v1 = v8;
    goto LABEL_14;
  }
  v1 = APAccTransportClientConnectionOpen(*v2);
  if ((_DWORD)v1)
  {
LABEL_14:
    APSLogErrorAt();
LABEL_15:
    if (*v2)
    {
      APAccTransportClientConnectionClose(*v2);
      if (*v2)
      {
        CFRelease((CFTypeRef)*v2);
        *v2 = 0;
      }
    }
  }
  if (v7)
    CFRelease(v7);
  return v1;
}

uint64_t __carEndpoint_activateInternal_block_invoke_98(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  const void *v3;
  uint64_t DerivedStorage;
  int AccConnectionIfNeeded;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  _QWORD v12[5];

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 40);
  if (*(_BYTE *)(v2 + 152))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = -16723;
    return result;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = APHIDClientCreate(0, *(const __CFArray **)(result + 48), (_QWORD *)(v2 + 272));
  result = *(unsigned int *)(*(_QWORD *)(v1[4] + 8) + 24);
  if ((_DWORD)result)
    return APSLogErrorAt();
  if (*(_BYTE *)(v1[5] + 40))
  {
    v3 = (const void *)v1[7];
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    AccConnectionIfNeeded = carEndpoint_createAccConnectionIfNeeded();
    if (AccConnectionIfNeeded)
    {
      v6 = AccConnectionIfNeeded;
    }
    else
    {
      if (CFStringCompare(CFSTR("com.apple.APAccClientEndpoint"), CFSTR("com.apple.APAccClientEndpoint"), 0))
      {
        v6 = 0;
        goto LABEL_10;
      }
      v7 = *(_QWORD *)(DerivedStorage + 280);
      v8 = (uint64_t *)(DerivedStorage + 288);
      v6 = APAccTransportClientConnectionCopyEndpoint(v7, (uint64_t)"com.apple.APAccClientEndpoint", (uint64_t)v8);
      if (!v6)
      {
        CFRetain(v3);
        v9 = *v8;
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 0x40000000;
        v12[2] = __carEndpoint_setUpAPAccClientEndpointForIdType_block_invoke;
        v12[3] = &__block_descriptor_tmp_505;
        v12[4] = v3;
        v10 = APAccTransportClientEndpointActivate(v9, 0, 0, (uint64_t)v12);
        if (v10)
        {
          v11 = v10;
          APSLogErrorAt();
          v6 = v11;
        }
        goto LABEL_10;
      }
    }
    APSLogErrorAt();
LABEL_10:
    *(_DWORD *)(*(_QWORD *)(v1[4] + 8) + 24) = v6;
    result = *(unsigned int *)(*(_QWORD *)(v1[4] + 8) + 24);
    if ((_DWORD)result)
      return APSLogErrorAt();
  }
  return result;
}

uint64_t __carEndpoint_activateInternal_block_invoke_2_102(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  const __CFDictionary *v6;
  const void *v7;
  uint64_t DerivedStorage;
  CFMutableArrayRef Mutable;
  __CFDictionary *v10;
  __CFDictionary *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  CFAllocatorRef v25;
  uint64_t v26;
  CFMutableArrayRef v27;
  uint64_t CMBaseObject;
  uint64_t (*v29)(uint64_t, const __CFString *, CFAllocatorRef, CFArrayRef *);
  int v30;
  CFIndex Count;
  CFMutableArrayRef v32;
  const __CFArray *v33;
  CFIndex v34;
  const void *v35;
  CFIndex v36;
  const void *ValueAtIndex;
  __CFDictionary *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  __CFDictionary *v43;
  int v44;
  CFMutableArrayRef v45;
  CFMutableArrayRef v46;
  __CFArray *v47;
  CFIndex v48;
  const void *v49;
  CFIndex v50;
  CFTypeRef v51;
  const void *v52;
  const __CFDictionary *v53;
  uint64_t v54;
  __CFDictionary *v55;
  __CFArray *v56;
  int v57;
  const __CFDictionary *v58;
  CFTypeRef v59;
  CFTypeRef v60;
  const void *v61;
  const __CFString *v62;
  __CFDictionary *v63;
  const void *v64;
  const void *v65;
  const void *v66;
  const void *v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const void *v70;
  CFTypeRef v71;
  const void **v72;
  __CFDictionary *v73;
  __CFArray *v74;
  CFURLRef v75;
  const __CFAllocator *v76;
  CFDictionaryRef v77;
  const __CFAllocator *v78;
  __CFDictionary *v79;
  __CFDictionary *v80;
  const void *v81;
  CFDictionaryRef v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  int v85;
  CFIndex v86;
  uint64_t v87;
  const void *v88;
  const __CFDictionary *v89;
  CFIndex v90;
  uint64_t v91;
  __CFDictionary *MutableCopy;
  uint64_t v93;
  CFIndex v94;
  CFIndex v95;
  CFIndex v96;
  uint64_t v97;
  CFIndex v98;
  CFIndex v99;
  CFIndex v100;
  const void *v101;
  const __CFAllocator *v102;
  int v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  int v106;
  const __CFAllocator *v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t, CFTypeRef, _QWORD, CFTypeRef *);
  int v110;
  int v111;
  int v112;
  const __CFString *v113;
  _QWORD *v114;
  const void *v115;
  CFTypeRef v116;
  void (*v117)(CFTypeRef, _QWORD, _QWORD, _QWORD);
  uint64_t v118;
  void *v119;
  NSObject *v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(uint64_t, const __CFString *, _QWORD, uint64_t);
  uint64_t v124;
  void *v125;
  _QWORD *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *value;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  const __CFAllocator *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  const __CFDictionary *theDict;
  void *v145;
  void *v146;
  __CFArray *v147;
  void *v148;
  void *v149;
  void *v150;
  CGSize v151;
  CFIndex v152;
  CFMutableArrayRef v153;
  uint64_t v154;
  uint64_t v155;
  const void *v156;
  uint64_t v157;
  CFDictionaryRef DictionaryRepresentation;
  CFTypeRef v159;
  CFTypeRef cf;
  void *key;
  CFTypeRef keya;
  void *keyb;
  CFTypeRef v164;
  CFTypeRef v165;
  CFTypeRef v166;
  CFArrayRef v167;
  CFArrayRef v168;
  CFArrayRef theArray;
  uint8_t buf[8];
  uint64_t v171;
  void (*v172)(uint64_t, CFTypeRef);
  void *v173;
  CGRect *v174;
  __int128 v175;
  CGSize v176;
  CFTypeRef v177;
  CGSize v178;
  __int128 v179;
  CGSize v180;
  __int128 v181;
  CGSize v182;
  __CFArray *v183;
  CGRect v184;
  __int128 v185;
  unsigned __int128 v186;
  CFBooleanRef v187;
  CFStringRef theString;
  CFBooleanRef v189;
  CFBooleanRef BOOLean;
  CFTypeRef v191;
  CFArrayRef v192;
  CFTypeRef v193;
  CGSize size;
  CFDictionaryRef dict;
  __int128 v196;
  CGSize v197;
  __int128 v198;
  unsigned __int128 v199;
  __int128 v200;
  unsigned __int128 v201;
  const void *v202;
  const void *v203;
  const void *v204;
  CFTypeRef v205;
  CFTypeRef v206;
  CFTypeRef v207;
  CFTypeRef v208;
  int v209;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 48);
  if (*(_BYTE *)(v2 + 152))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = -16723;
  }
  else
  {
    if (*(_QWORD *)(v2 + 480))
      APSEventRecorderRecordEvent();
    v3 = LogCategoryCopyOSLogHandle();
    v4 = (void *)v3;
    if (v3)
      v5 = v3;
    else
      v5 = MEMORY[0x1E0C81028];
    if (os_signpost_enabled(v5))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C943B000, v5, OS_SIGNPOST_EVENT, 0x2B8D08B8uLL, "AP_SIGNPOST_CAR_SETUPSTREAMS_START", (const char *)&unk_1C965D452, buf, 2u);
    }
    if (v4)
      os_release(v4);
    v7 = (const void *)v1[7];
    v6 = (const __CFDictionary *)v1[8];
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(DerivedStorage + 240) = Mutable;
    if (Mutable)
    {
      v10 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v10)
      {
        v11 = v10;
        v12 = *(const void **)(DerivedStorage + 480);
        if (v12)
        {
          CFDictionarySetValue(v10, CFSTR("EventRecorder"), v12);
          CFDictionarySetValue(v11, CFSTR("EventRecorder"), *(const void **)(DerivedStorage + 480));
        }
        if (*(_BYTE *)(DerivedStorage + 64))
          CFDictionarySetValue(v11, CFSTR("UseCarPlayHEVC"), (const void *)*MEMORY[0x1E0C9AE50]);
        if (v6)
        {
          v13 = CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E0CA3720]);
          if (v13)
            CFDictionarySetValue(v11, CFSTR("clientPID"), v13);
          v14 = CFDictionaryGetValue(v6, CFSTR("ScreenSource"));
          if (v14)
            CFDictionarySetValue(v11, CFSTR("ScreenSource"), v14);
          v15 = CFDictionaryGetValue(v6, CFSTR("ScreenProcessor"));
          if (v15)
            CFDictionarySetValue(v11, CFSTR("ScreenProcessor"), v15);
          v16 = (const void *)*MEMORY[0x1E0CA3760];
          v17 = CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E0CA3760]);
          if (v17)
            CFDictionarySetValue(v11, v16, v17);
        }
        if (APSGetFBOPropertyInt64())
        {
          v18 = (const void *)*MEMORY[0x1E0CA4880];
          v19 = carEndpoint_setupAudioStream(v7, (const void *)*MEMORY[0x1E0CA4880], (const void *)*MEMORY[0x1E0CA4858], v11);
          if (v19)
          {
            v42 = v19;
            goto LABEL_380;
          }
          if (*(_BYTE *)(DerivedStorage + 58))
          {
            v20 = carEndpoint_setupAudioStream(v7, (const void *)*MEMORY[0x1E0CA4888], (const void *)*MEMORY[0x1E0CA4848], v11);
            if (v20)
            {
              v42 = v20;
              goto LABEL_380;
            }
          }
          v21 = carEndpoint_setupAudioStream(v7, v18, (const void *)*MEMORY[0x1E0CA4838], v11);
          if (v21)
          {
            v42 = v21;
            goto LABEL_380;
          }
          if (*(_BYTE *)(DerivedStorage + 57))
          {
            v22 = carEndpoint_setupAudioStream(v7, v18, (const void *)*MEMORY[0x1E0CA4840], v11);
            if (v22)
            {
              v42 = v22;
              goto LABEL_380;
            }
            v23 = carEndpoint_setupAudioStream(v7, (const void *)*MEMORY[0x1E0CA4898], (const void *)*MEMORY[0x1E0CA4860], v11);
            if (v23)
            {
              v42 = v23;
              goto LABEL_380;
            }
          }
        }
        theDict = v11;
        v24 = CMBaseObjectGetDerivedStorage();
        v167 = 0;
        v166 = 0;
        v165 = 0;
        v164 = 0;
        v137 = (void *)CFStringCreateF();
        v25 = CFGetAllocator(v7);
        v26 = CMBaseObjectGetDerivedStorage();
        theArray = 0;
        v168 = 0;
        v27 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        cf = v7;
        v157 = v24;
        v126 = v1;
        if (!v27)
          goto LABEL_376;
        CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v26 + 8));
        v29 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
        if (v29)
        {
          v30 = v29(CMBaseObject, CFSTR("DisplayDescriptionArray"), v25, &theArray);
          if (!v30)
          {
            v147 = v27;
            if (theArray)
            {
              Count = CFArrayGetCount(theArray);
              v32 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
              if (v32)
              {
                v33 = v32;
                if (Count < 1)
                {
                  v44 = 0;
                  goto LABEL_76;
                }
                v154 = v26;
                v153 = v32;
                v34 = 0;
                key = (void *)*MEMORY[0x1E0CA45C0];
                v35 = (const void *)*MEMORY[0x1E0CA45C8];
                while (1)
                {
                  v36 = Count;
                  ValueAtIndex = CFArrayGetValueAtIndex(theArray, v34);
                  *(_QWORD *)buf = 0;
                  *(_QWORD *)&v200 = 0;
                  *(_QWORD *)&v198 = 0;
                  v38 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  if (v38)
                  {
                    v39 = APEndpointDisplayDescriptionCopyProperty((uint64_t)ValueAtIndex, (uint64_t)CFSTR("PhysicalSize"), (uint64_t)v25, (uint64_t)&v200);
                    if (v39)
                    {
                      v42 = v39;
                      goto LABEL_69;
                    }
                    if ((_QWORD)v200)
                      CFDictionarySetValue(v38, key, (const void *)v200);
                    v40 = APEndpointDisplayDescriptionCopyProperty((uint64_t)ValueAtIndex, (uint64_t)CFSTR("PixelSize"), (uint64_t)v25, (uint64_t)buf);
                    if (v40)
                    {
                      v42 = v40;
                      goto LABEL_69;
                    }
                    if (*(_QWORD *)buf)
                      CFDictionarySetValue(v38, v35, *(const void **)buf);
                    v41 = APEndpointDisplayDescriptionCopyProperty((uint64_t)ValueAtIndex, (uint64_t)CFSTR("ViewAreas"), (uint64_t)v25, (uint64_t)&v198);
                    if (v41)
                    {
                      v42 = v41;
LABEL_69:
                      APSLogErrorAt();
                      v43 = 0;
LABEL_51:
                      if ((_QWORD)v198)
                        CFRelease((CFTypeRef)v198);
                      goto LABEL_54;
                    }
                    if ((_QWORD)v198)
                    {
                      CFDictionarySetValue(v38, CFSTR("ViewAreas"), (const void *)v198);
                      v42 = 0;
                      v43 = v38;
                      v38 = 0;
                      goto LABEL_51;
                    }
                    v42 = 0;
                    v43 = v38;
                    v38 = 0;
                  }
                  else
                  {
                    v42 = -71750;
                    APSLogErrorAt();
                    v43 = 0;
                  }
LABEL_54:
                  if (*(_QWORD *)buf)
                    CFRelease(*(CFTypeRef *)buf);
                  if ((_QWORD)v200)
                    CFRelease((CFTypeRef)v200);
                  if (v38)
                    CFRelease(v38);
                  if (v42)
                  {
                    APSLogErrorAt();
                    v1 = v126;
                    v11 = theDict;
LABEL_251:
                    if (theArray)
                      CFRelease(theArray);
                    if (v27)
                      CFRelease(v27);
                    if (v153)
                      CFRelease(v153);
                    if (v168)
                      CFRelease(v168);
                    if (v42)
                    {
                      APSLogErrorAt();
                      v89 = 0;
                      goto LABEL_322;
                    }
                    v83 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v24 + 8));
                    v84 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                    if (v84)
                    {
                      v85 = v84(v83, CFSTR("DisplayDescriptionArray"), *MEMORY[0x1E0C9AE00], &v167);
                      if (!v85)
                      {
                        if (v167)
                        {
                          v86 = CFArrayGetCount(v167);
                          if (v86 >= 2)
                          {
                            if (*(_BYTE *)(v24 + 60))
                              v87 = v86;
                            else
                              v87 = 1;
                            goto LABEL_271;
                          }
                          if (v86 == 1)
                          {
                            v87 = 1;
LABEL_271:
                            keyb = (void *)v87;
                            v90 = 0;
                            v91 = *MEMORY[0x1E0CA47C8];
                            v159 = (CFTypeRef)*MEMORY[0x1E0CA4828];
                            v156 = (const void *)*MEMORY[0x1E0CA3BB0];
                            while (1)
                            {
                              LODWORD(v200) = 0;
                              MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
                              v89 = MutableCopy;
                              if (!MutableCopy)
                              {
LABEL_366:
                                APSLogErrorAt();
                                v42 = -16721;
                                goto LABEL_321;
                              }
                              CFDictionarySetValue(MutableCopy, CFSTR("LogPrefix"), v137);
                              v93 = CMBaseObjectGetDerivedStorage();
                              *(_QWORD *)buf = 0x3FF0000000000000;
                              v94 = CFArrayGetCount(*(CFArrayRef *)(v93 + 248));
                              if (v94 >= 1)
                              {
                                v95 = v94;
                                v96 = 0;
                                while (1)
                                {
                                  CFArrayGetValueAtIndex(*(CFArrayRef *)(v93 + 248), v96);
                                  if (v90 == v96)
                                    break;
                                  if (v95 == ++v96)
                                    goto LABEL_279;
                                }
                                FigCFDictionaryGetDoubleIfPresent();
                              }
LABEL_279:
                              CFDictionarySetDouble();
                              v97 = CMBaseObjectGetDerivedStorage();
                              v98 = CFArrayGetCount(*(CFArrayRef *)(v97 + 248));
                              if (v98 >= 1)
                              {
                                v99 = v98;
                                v100 = 0;
                                while (1)
                                {
                                  CFArrayGetValueAtIndex(*(CFArrayRef *)(v97 + 248), v100);
                                  if (v90 == v100)
                                    break;
                                  if (v99 == ++v100)
                                    goto LABEL_286;
                                }
                                if (FigCFDictionaryGetInt32IfPresent())
                                  FigCFDictionarySetInt32();
                              }
LABEL_286:
                              v101 = CFArrayGetValueAtIndex(v167, v90);
                              v102 = CFGetAllocator(cf);
                              v103 = APEndpointStreamScreenCreate(v102, v89, *(CFTypeRef *)(v157 + 16), *(_QWORD *)(v157 + 216), *(const void **)(v157 + 8), v101, *(const void **)(v157 + 232), &v164);
                              if (v103)
                              {
                                v42 = v103;
                                goto LABEL_319;
                              }
                              carEndpoint_addEndpointStreamNotificationListeners();
                              v104 = FigEndpointStreamGetCMBaseObject();
                              v105 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                              if (!v105)
                              {
                                v42 = -12782;
LABEL_317:
                                v1 = v126;
                                v11 = theDict;
                                v88 = v137;
                                APSLogErrorAt();
                                goto LABEL_323;
                              }
                              v106 = v105(v104, v91, 0, &v165);
                              if (v106)
                              {
                                v42 = v106;
                                goto LABEL_317;
                              }
                              if (gLogCategory_APEndpointCarPlay <= 50
                                && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
                              {
                                LogPrintF();
                              }
                              if (*(_BYTE *)(v157 + 59))
                              {
                                v107 = CFGetAllocator(cf);
                                *(_QWORD *)(v157 + 264) = CFDictionaryCreateMutable(v107, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                                v108 = FigEndpointStreamGetCMBaseObject();
                                v109 = *(uint64_t (**)(uint64_t, CFTypeRef, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                                if (!v109)
                                {
                                  v42 = -12782;
                                  goto LABEL_319;
                                }
                                v110 = v109(v108, v159, 0, &v166);
                                if (v110)
                                {
                                  v42 = v110;
LABEL_319:
                                  APSLogErrorAt();
LABEL_321:
                                  v1 = v126;
                                  v11 = theDict;
LABEL_322:
                                  v88 = v137;
LABEL_323:
                                  if (v88)
                                    CFRelease(v88);
                                  if (v89)
                                    CFRelease(v89);
                                  if (v164)
                                    CFRelease(v164);
                                  if (v165)
                                    CFRelease(v165);
                                  if (v166)
                                    CFRelease(v166);
                                  if (v167)
                                    CFRelease(v167);
                                  if (!v42)
                                  {
LABEL_336:
                                    CFRelease(v11);
                                    goto LABEL_337;
                                  }
LABEL_380:
                                  APSLogErrorAt();
                                  goto LABEL_336;
                                }
                                carEndpoint_postNotification(cf, v156, *(_DWORD *)(v157 + 204), v166);
                              }
                              if (FigCFEqual())
                              {
                                v111 = 267386880;
                                v112 = 267386881;
                              }
                              else
                              {
                                if (!FigCFEqual())
                                {
                                  v42 = -6735;
                                  goto LABEL_321;
                                }
                                v111 = 267386882;
                                v112 = 267386883;
                              }
                              if (*(_BYTE *)(v157 + 40))
                                v113 = CFSTR("com.apple.airplay.car.wireless.sessionPercentageWithScreen");
                              else
                                v113 = CFSTR("com.apple.airplay.car.wired.sessionPercentageWithScreen");
                              v114 = (_QWORD *)APEndpointCarPlayStreamInfoCreate(v164, CFSTR("StreamInfo_Screen"), v111, v112, v113);
                              if (!v114)
                                goto LABEL_366;
                              v115 = v114;
                              v114[4] = v90;
                              CFArrayAppendValue(*(CFMutableArrayRef *)(v157 + 240), v114);
                              if (v90)
                              {
                                if (!*(_BYTE *)(v157 + 62))
                                {
                                  v116 = v164;
                                  v117 = *(void (**)(CFTypeRef, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 16);
                                  if (v117)
                                    v117(v116, 0, 0, 0);
                                }
                              }
                              CFRelease(v89);
                              if (v164)
                              {
                                CFRelease(v164);
                                v164 = 0;
                              }
                              CFRelease(v115);
                              if (v165)
                              {
                                CFRelease(v165);
                                v165 = 0;
                              }
                              if ((void *)++v90 == keyb)
                              {
                                carEndpoint_updateDisplayCornerMasks();
                                v42 = 0;
                                v89 = 0;
                                goto LABEL_321;
                              }
                            }
                          }
                        }
                        APSLogErrorAt();
                        v89 = 0;
                        v42 = -16760;
                        goto LABEL_322;
                      }
                      v42 = v85;
                    }
                    else
                    {
                      v42 = -12782;
                    }
                    v88 = v137;
                    APSLogErrorAt();
                    v89 = 0;
                    goto LABEL_323;
                  }
                  CFArrayAppendValue(v153, v43);
                  if (v43)
                    CFRelease(v43);
                  ++v34;
                  Count = v36;
                  if (v36 == v34)
                  {
                    v44 = 1;
                    v33 = v153;
                    v26 = v154;
LABEL_76:
                    if (gLogCategory_APEndpointCarPlay <= 50
                      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
                    {
                      LogPrintF();
                    }
                    v153 = v33;
                    if (APCarPlay_CRFetchScaledDisplays((uint64_t)v33, (CFTypeRef *)&v168) || !v168)
                    {
                      v46 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
                      if (v46)
                      {
                        v47 = v46;
                        if (v44)
                        {
                          v48 = 0;
                          do
                          {
                            v49 = CFArrayGetValueAtIndex(v33, v48);
                            CFArrayAppendValue(v47, v49);
                            ++v48;
                          }
                          while (Count != v48);
                        }
                        v168 = v47;
                        v24 = v157;
                        if (gLogCategory_APEndpointCarPlay <= 50
                          && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
                        {
                          LogPrintF();
                        }
                        goto LABEL_90;
                      }
                      APSLogErrorAt();
                      v42 = -16721;
                      v1 = v126;
LABEL_72:
                      v11 = theDict;
                      goto LABEL_251;
                    }
LABEL_90:
                    if (!v44)
                    {
LABEL_250:
                      v42 = 0;
                      *(_QWORD *)(v24 + 248) = v27;
                      v27 = 0;
                      v1 = v126;
                      v11 = theDict;
                      goto LABEL_251;
                    }
                    v50 = 0;
                    v51 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
                    keya = (CFTypeRef)*MEMORY[0x1E0C9AE50];
                    value = (void *)*MEMORY[0x1E0CA4620];
                    v129 = (void *)*MEMORY[0x1E0CA4628];
                    v131 = (void *)*MEMORY[0x1E0CA4618];
                    v130 = (void *)*MEMORY[0x1E0CA4630];
                    v150 = (void *)*MEMORY[0x1E0CA4598];
                    v125 = (void *)*MEMORY[0x1E0CA45D0];
                    v143 = (void *)*MEMORY[0x1E0CA4588];
                    v142 = (void *)*MEMORY[0x1E0CA45B8];
                    v141 = (void *)*MEMORY[0x1E0CA45C0];
                    v140 = (void *)*MEMORY[0x1E0CA45C8];
                    v139 = (void *)*MEMORY[0x1E0CA45D8];
                    v149 = (void *)*MEMORY[0x1E0CA45A8];
                    v151 = (CGSize)*MEMORY[0x1E0C9D820];
                    v148 = (void *)*MEMORY[0x1E0CA45A0];
                    v127 = (void *)*MEMORY[0x1E0CA4590];
                    v136 = (void *)*MEMORY[0x1E0CA4600];
                    v135 = (void *)*MEMORY[0x1E0CA45F0];
                    v134 = (void *)*MEMORY[0x1E0CA4610];
                    v133 = (void *)*MEMORY[0x1E0CA4608];
                    v146 = (void *)*MEMORY[0x1E0CA45E0];
                    v145 = (void *)*MEMORY[0x1E0CA4580];
                    v128 = (void *)*MEMORY[0x1E0CA45B0];
                    v155 = v26;
                    v152 = Count;
                    v138 = v25;
                    while (2)
                    {
                      v52 = CFArrayGetValueAtIndex(theArray, v50);
                      v53 = (const __CFDictionary *)CFArrayGetValueAtIndex(v168, v50);
                      v54 = *(_QWORD *)(v26 + 8);
                      v209 = 0;
                      v207 = v51;
                      v208 = v51;
                      v205 = v51;
                      v206 = v51;
                      v203 = 0;
                      v204 = 0;
                      v202 = 0;
                      v200 = 0u;
                      v201 = 0u;
                      v198 = 0u;
                      v199 = 0u;
                      v196 = 0u;
                      v197 = (CGSize)0;
                      dict = 0;
                      size = v151;
                      v193 = 0;
                      v192 = 0;
                      v191 = 0;
                      BOOLean = (CFBooleanRef)v51;
                      v189 = (CFBooleanRef)v51;
                      theString = 0;
                      v187 = (CFBooleanRef)v51;
                      v55 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                      if (v55)
                      {
                        v56 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
                        if (v56)
                        {
                          v209 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, (uint64_t)CFSTR("SupportsKnobInput"), (uint64_t)v25, (uint64_t)&v208);
                          if (v209)
                            goto LABEL_237;
                          if (v208 == keya)
                            CFArrayAppendValue(v56, value);
                          v209 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, (uint64_t)CFSTR("SupportsLowFidelityTouch"), (uint64_t)v25, (uint64_t)&v207);
                          if (v209)
                            goto LABEL_237;
                          if (v207 == keya)
                            CFArrayAppendValue(v56, v129);
                          v209 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, (uint64_t)CFSTR("SupportsHighFidelityTouch"), (uint64_t)v25, (uint64_t)&v206);
                          if (v209)
                            goto LABEL_237;
                          if (v206 == keya)
                            CFArrayAppendValue(v56, v131);
                          v209 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, (uint64_t)CFSTR("SupportsTouchpadInput"), (uint64_t)v25, (uint64_t)&v205);
                          if (v209)
                            goto LABEL_237;
                          if (v205 == keya)
                            CFArrayAppendValue(v56, v130);
                          CFDictionarySetValue(v55, v150, v56);
                          v209 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, (uint64_t)CFSTR("PrimaryInputDevice"), (uint64_t)v25, (uint64_t)&v193);
                          if (v209)
                            goto LABEL_237;
                          v57 = CFGetInt64();
                          if (v209)
                            goto LABEL_108;
                          if (v57 == 1)
                          {
                            if (v206 == keya)
                            {
                              v63 = v55;
                              v64 = v125;
                              v65 = v131;
                            }
                            else
                            {
                              if (v207 != keya)
                                goto LABEL_108;
                              v63 = v55;
                              v64 = v125;
                              v65 = v129;
                            }
LABEL_233:
                            CFDictionarySetValue(v63, v64, v65);
                            goto LABEL_108;
                          }
                          if (v57 == 2)
                          {
                            if (v205 == keya)
                            {
                              v63 = v55;
                              v64 = v125;
                              v65 = v130;
                              goto LABEL_233;
                            }
                          }
                          else if (v57 == 3 && v208 == keya)
                          {
                            v63 = v55;
                            v64 = v125;
                            v65 = value;
                            goto LABEL_233;
                          }
                          if (gLogCategory_APEndpointCarPlay <= 60
                            && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
                          {
                            LogPrintF();
                          }
LABEL_108:
                          v209 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, (uint64_t)CFSTR("UUID"), (uint64_t)v25, (uint64_t)&v204);
                          if (v209)
                            goto LABEL_237;
                          if (v204)
                            CFDictionarySetValue(v55, v143, v204);
                          v209 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, (uint64_t)CFSTR("MaxFPS"), (uint64_t)v25, (uint64_t)&v203);
                          if (v209)
                            goto LABEL_237;
                          if (v203)
                            CFDictionarySetValue(v55, v142, v203);
                          v209 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, (uint64_t)CFSTR("PhysicalSize"), (uint64_t)v25, (uint64_t)&dict);
                          if (v209)
                            goto LABEL_237;
                          if (dict)
                          {
                            CFDictionarySetValue(v55, v141, dict);
                            CGSizeMakeWithDictionaryRepresentation(dict, &size);
                          }
                          v209 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, (uint64_t)CFSTR("PixelSize"), (uint64_t)v25, (uint64_t)&v202);
                          if (v209)
                          {
LABEL_237:
                            APSLogErrorAt();
                            v73 = 0;
                            v74 = 0;
                            v70 = 0;
                            v82 = 0;
                            goto LABEL_184;
                          }
                          if (v202)
                          {
                            LODWORD(v185) = 0;
                            CFDictionarySetValue(v55, v140, v202);
                            CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)v202, (CGSize *)&v201);
                            v58 = (const __CFDictionary *)CFDictionaryGetValue(v53, v140);
                            CGSizeMakeWithDictionaryRepresentation(v58, (CGSize *)&v199);
                            FigDisplayModes_ConvertNonSquarePixelSizeToSquarePixelSize();
                            DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v197);
                            CFDictionarySetValue(v55, v139, DictionaryRepresentation);
                            CFDictionarySetDouble();
                            if (FigCFDictionaryGetInt32IfPresent())
                              FigCFDictionarySetInt32();
                            v25 = v138;
                            if (v50)
                            {
LABEL_122:
                              v209 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, (uint64_t)CFSTR("IsNightMode"), (uint64_t)v25, (uint64_t)&BOOLean);
                              if (!v209)
                              {
                                v59 = CFBooleanGetValue(BOOLean) ? keya : v51;
                                CFDictionarySetValue(v55, v149, v59);
                                v209 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, (uint64_t)CFSTR("IsLimitedUI"), (uint64_t)v25, (uint64_t)&v189);
                                if (!v209)
                                {
                                  v60 = CFBooleanGetValue(v189) ? keya : v51;
                                  CFDictionarySetValue(v55, v148, v60);
                                  v209 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, (uint64_t)CFSTR("LimitedUIElements"), (uint64_t)v25, (uint64_t)&v191);
                                  if (!v209)
                                  {
                                    if (v191)
                                      CFDictionarySetValue(v55, v128, v191);
                                    v209 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, (uint64_t)CFSTR("InitialUrl"), (uint64_t)v25, (uint64_t)&theString);
                                    v61 = cf;
                                    if (v209)
                                      goto LABEL_247;
                                    v62 = theString;
                                    if (!theString)
                                    {
                                      if (gLogCategory_APEndpointCarPlay <= 50
                                        && (gLogCategory_APEndpointCarPlay != -1
                                         || _LogCategory_Initialize()))
                                      {
                                        LogPrintF();
                                      }
                                      v209 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, (uint64_t)CFSTR("Url"), (uint64_t)v25, (uint64_t)&theString);
                                      if (!v209)
                                      {
                                        v62 = theString;
                                        if (theString)
                                          goto LABEL_166;
LABEL_170:
                                        v70 = 0;
LABEL_171:
                                        v76 = CFGetAllocator(v61);
                                        v74 = CFArrayCreateMutable(v76, 0, MEMORY[0x1E0C9B378]);
                                        if (v74)
                                        {
                                          APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, (uint64_t)CFSTR("ViewAreas"), (uint64_t)v25, (uint64_t)&v192);
                                          if (v192 && CFArrayGetCount(v192))
                                          {
                                            v185 = 0u;
                                            v186 = 0u;
                                            v184.origin.x = 0.0;
                                            *(_QWORD *)&v184.origin.y = &v184;
                                            *(_QWORD *)&v184.size.width = 0x2000000000;
                                            LODWORD(v184.size.height) = 0;
                                            CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)v202, (CGSize *)&v186);
                                            CFArrayGetCount(v192);
                                            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                                            v171 = 0x40000000;
                                            v172 = __carEndpoint_copyScreenInfoFromDisplayDescription_block_invoke;
                                            v173 = &unk_1E826D528;
                                            v175 = v185;
                                            v176 = (CGSize)v186;
                                            v174 = &v184;
                                            v177 = cf;
                                            v178 = size;
                                            v179 = v198;
                                            v180 = (CGSize)v199;
                                            v181 = v200;
                                            v182 = (CGSize)v201;
                                            v183 = v74;
                                            CFArrayApplyBlock();
                                            v27 = v147;
                                            if (!*(_DWORD *)(*(_QWORD *)&v184.origin.y + 24))
                                            {
                                              _Block_object_dispose(&v184, 8);
                                              goto LABEL_178;
                                            }
                                            APSLogErrorAt();
                                            v209 = -16720;
                                            _Block_object_dispose(&v184, 8);
LABEL_246:
                                            v73 = 0;
                                            goto LABEL_183;
                                          }
                                          v185 = 0u;
                                          v186 = 0u;
                                          memset(&v184, 0, sizeof(v184));
                                          CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)v202, (CGSize *)&v186);
                                          FigDisplayModes_ConvertNonSquarePixelSizeToSquarePixelSize();
                                          v77 = CGRectCreateDictionaryRepresentation(v184);
                                          v78 = CFGetAllocator(cf);
                                          v79 = CFDictionaryCreateMutable(v78, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                                          if (v79)
                                          {
                                            v80 = v79;
                                            CFDictionarySetValue(v79, v136, v77);
                                            CFDictionarySetValue(v80, v135, v77);
                                            CFDictionarySetValue(v80, v134, v51);
                                            CFDictionarySetValue(v80, v133, v51);
                                            CFDictionarySetInt64();
                                            CFArrayAppendValue(v74, v80);
                                            CFRelease(v77);
                                            CFRelease(v80);
                                            v27 = v147;
LABEL_178:
                                            CFDictionarySetValue(v55, v146, v74);
                                            v209 = APEndpointDisplayDescriptionCopyProperty((uint64_t)v52, (uint64_t)CFSTR("cornerMasks"), (uint64_t)v25, (uint64_t)&v187);
                                            if (v209)
                                            {
                                              APSLogErrorAt();
                                              goto LABEL_246;
                                            }
                                            if (CFBooleanGetValue(v187))
                                              v81 = keya;
                                            else
                                              v81 = v51;
                                            CFDictionarySetValue(v55, v145, v81);
                                            v73 = v55;
                                            v55 = 0;
LABEL_183:
                                            v82 = DictionaryRepresentation;
LABEL_184:
                                            if (theString)
                                              CFRelease(theString);
                                            if (v70)
                                              CFRelease(v70);
                                            if (v189)
                                              CFRelease(v189);
                                            if (BOOLean)
                                              CFRelease(BOOLean);
                                            if (v191)
                                              CFRelease(v191);
                                            if (v203)
                                              CFRelease(v203);
                                            if (v202)
                                              CFRelease(v202);
                                            if (v82)
                                              CFRelease(v82);
                                            if (dict)
                                              CFRelease(dict);
                                            if (v204)
                                              CFRelease(v204);
                                            if (v193)
                                              CFRelease(v193);
                                            if (v208)
                                              CFRelease(v208);
                                            if (v207)
                                              CFRelease(v207);
                                            if (v206)
                                              CFRelease(v206);
                                            if (v205)
                                              CFRelease(v205);
                                            if (v56)
                                              CFRelease(v56);
                                            if (v55)
                                              CFRelease(v55);
                                            if (v192)
                                              CFRelease(v192);
                                            v26 = v155;
                                            if (v187)
                                              CFRelease(v187);
                                            if (v74)
                                              CFRelease(v74);
                                            v42 = v209;
                                            if (v209)
                                            {
                                              APSLogErrorAt();
                                              v1 = v126;
                                              v11 = theDict;
                                              v24 = v157;
                                              goto LABEL_251;
                                            }
                                            CFArrayAppendValue(v27, v73);
                                            if (v73)
                                              CFRelease(v73);
                                            ++v50;
                                            v24 = v157;
                                            if (v152 == v50)
                                              goto LABEL_250;
                                            continue;
                                          }
                                        }
                                        APSLogErrorAt();
                                        v73 = 0;
                                        v209 = -16721;
LABEL_248:
                                        v27 = v147;
                                        goto LABEL_183;
                                      }
LABEL_247:
                                      APSLogErrorAt();
                                      v73 = 0;
                                      v74 = 0;
                                      v70 = 0;
                                      goto LABEL_248;
                                    }
LABEL_166:
                                    if (CFStringGetLength(v62) < 1)
                                      goto LABEL_170;
                                    v75 = CFURLCreateWithString(0, theString, 0);
                                    if (!v75)
                                      goto LABEL_170;
                                    v71 = v75;
                                    CFDictionarySetValue(v55, v127, v75);
                                    v72 = (const void **)MEMORY[0x1E0CA4578];
                                    v70 = v71;
LABEL_169:
                                    CFDictionarySetValue(v55, *v72, v71);
                                    goto LABEL_171;
                                  }
                                }
                              }
                              goto LABEL_155;
                            }
                          }
                          else
                          {
                            DictionaryRepresentation = 0;
                            if (v50)
                              goto LABEL_122;
                          }
                          if (APSGetFBOPropertyInt64())
                            v66 = keya;
                          else
                            v66 = v51;
                          CFDictionarySetValue(v55, v149, v66);
                          if (APSGetFBOPropertyInt64())
                            v67 = keya;
                          else
                            v67 = v51;
                          CFDictionarySetValue(v55, v148, v67);
                          v68 = APEndpointDescriptionGetCMBaseObject(v54);
                          v69 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                          if (v69)
                          {
                            v209 = v69(v68, CFSTR("LimitedUIElements"), 0, &v191);
                            v61 = cf;
                            if (!v209)
                            {
                              v70 = 0;
                              v71 = v191;
                              if (!v191)
                                goto LABEL_171;
                              v72 = (const void **)MEMORY[0x1E0CA45B0];
                              goto LABEL_169;
                            }
                            v27 = v147;
                          }
                          else
                          {
                            v209 = -12782;
                          }
LABEL_155:
                          APSLogErrorAt();
                          v73 = 0;
                          v74 = 0;
                          v70 = 0;
                          goto LABEL_183;
                        }
                        APSLogErrorAt();
                        v73 = 0;
                        v74 = 0;
                        v70 = 0;
                      }
                      else
                      {
                        APSLogErrorAt();
                        v73 = 0;
                        v74 = 0;
                        v70 = 0;
                        v56 = 0;
                      }
                      break;
                    }
                    v82 = 0;
                    v209 = -71750;
                    goto LABEL_184;
                  }
                }
              }
            }
            else
            {
              v45 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
              if (v45)
              {
                v33 = v45;
                v44 = 0;
                Count = 0;
                goto LABEL_76;
              }
            }
LABEL_376:
            APSLogErrorAt();
            v153 = 0;
            v42 = -16721;
            goto LABEL_72;
          }
          v42 = v30;
        }
        else
        {
          v42 = -12782;
        }
        APSLogErrorAt();
        v153 = 0;
        goto LABEL_72;
      }
    }
    APSLogErrorAt();
    v42 = -16721;
LABEL_337:
    *(_DWORD *)(*(_QWORD *)(v1[4] + 8) + 24) = v42;
    if (*(_QWORD *)(v1[6] + 480))
      APSEventRecorderRecordEvent();
    v118 = LogCategoryCopyOSLogHandle();
    v119 = (void *)v118;
    if (v118)
      v120 = v118;
    else
      v120 = MEMORY[0x1E0C81028];
    if (os_signpost_enabled(v120))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C943B000, v120, OS_SIGNPOST_EVENT, 0x2B8D08BCuLL, "AP_SIGNPOST_CAR_SETUPSTREAMS_COMPLETE", (const char *)&unk_1C965D452, buf, 2u);
    }
    if (v119)
      os_release(v119);
    if (*(_DWORD *)(*(_QWORD *)(v1[4] + 8) + 24))
    {
      return APSLogErrorAt();
    }
    else
    {
      v121 = v1[6];
      v122 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v121 + 8));
      v123 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
      if (v123)
        v123(v122, CFSTR("VehicleInformation"), 0, v121 + 312);
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_BYTE *)(v1[6] + 305) = APSGetFBOPropertyInt64() != 0;
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      result = APSGetFBOPropertyInt64();
      v124 = v1[6];
      *(_BYTE *)(v124 + 306) = result != 0;
      if (gLogCategory_APEndpointCarPlay <= 50)
      {
        if (gLogCategory_APEndpointCarPlay != -1 || (result = _LogCategory_Initialize(), v124 = v1[6], (_DWORD)result))
        {
          result = LogPrintF();
          v124 = v1[6];
        }
      }
      *(_DWORD *)(v124 + 204) = *(_DWORD *)(*(_QWORD *)(v1[5] + 8) + 24);
    }
  }
  return result;
}

void carEndpoint_powerLogActivation(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v4;
  uint64_t MutableCopy;
  __CFDictionary *v6;
  uint64_t v7;
  const void *v8;
  double v9;
  CFNumberRef v10;
  CFNumberRef v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  unint64_t valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    v6 = (__CFDictionary *)MutableCopy;
    valuePtr = 0;
    v7 = FigCFArrayCreateMutableCopy();
    if (v7)
    {
      v8 = (const void *)v7;
      APSEventRecorderGetEventTime();
      valuePtr = (unint64_t)v9;
      v10 = CFNumberCreate(v4, kCFNumberSInt64Type, &valuePtr);
      if (v10)
      {
        v11 = v10;
        CFDictionarySetValue(v6, CFSTR("SessionID"), v10);
        v12 = (const void *)*MEMORY[0x1E0C9AE50];
        v13 = (const void *)*MEMORY[0x1E0C9AE40];
        if (a2)
          v14 = (const void *)*MEMORY[0x1E0C9AE50];
        else
          v14 = (const void *)*MEMORY[0x1E0C9AE40];
        CFDictionarySetValue(v6, CFSTR("Activated"), v14);
        if (*(_BYTE *)(DerivedStorage + 40))
          v15 = v12;
        else
          v15 = v13;
        CFDictionarySetValue(v6, CFSTR("Wireless"), v15);
        PLLogRegisteredEvent();
        CFRelease(v11);
      }
      CFRelease(v8);
    }
    CFRelease(v6);
  }
}

void __carEndpoint_activateInternal_block_invoke_2_110(uint64_t a1)
{
  CFSetAddValue(*(CFMutableSetRef *)(*(_QWORD *)(a1 + 32) + 8), *(const void **)(a1 + 40));
}

uint64_t __carEndpoint_activateInternal_block_invoke_3_114(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t CMBaseObject;
  uint64_t result;
  uint64_t (*v6)(uint64_t, const __CFString *, uint64_t);
  uint64_t v7;

  v7 = 0;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = APCarPlayGetHeadUnitRestrictionsDictionary(&v7);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    return APSLogErrorAt();
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v3 = v7;
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(v2);
  result = CMBaseObjectGetVTable();
  v6 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v6)
    return v6(CMBaseObject, CFSTR("HeadUnitRestrictions"), v3);
  return result;
}

void carEndpoint_takeActionOnModeChanges(const void *a1, _DWORD *a2)
{
  uint64_t DerivedStorage;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD v10[7];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _QWORD block[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = 0;
  v12 = &v11;
  v13 = 0x3800000000;
  v14 = 0u;
  v15 = 0u;
  v5 = *(NSObject **)(DerivedStorage + 144);
  v6 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = __carEndpoint_takeActionOnModeChanges_block_invoke;
  v10[3] = &unk_1E826CC90;
  v10[4] = &v11;
  v10[5] = DerivedStorage;
  v10[6] = a2;
  dispatch_sync(v5, v10);
  if (*(_BYTE *)(DerivedStorage + 57))
  {
    if ((*((_DWORD *)v12 + 10) != 1 || !*((_DWORD *)v12 + 11)) && a2[4] == 1 && a2[5]
      || *((_DWORD *)v12 + 12) != 2 && a2[6] == 2)
    {
      APCarPlayAVVCServerStatesIncompatibleWithAuxIn();
    }
    v7 = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(v7 + 40) && !a2[6] && a2[4] == 2 && a2[5])
    {
      v8 = v7;
      CFRetain(a1);
      v9 = *(NSObject **)(v8 + 144);
      block[0] = v6;
      block[1] = 0x40000000;
      block[2] = __carEndpoint_resetBurstParamsIfSiriWakes_block_invoke;
      block[3] = &__block_descriptor_tmp_130;
      block[4] = a1;
      block[5] = v8;
      dispatch_async(v9, block);
    }
  }
  _Block_object_dispose(&v11, 8);
}

uint64_t carEndpoint_sendCommandInternal(const void *a1, const void *a2, const void *a3, char a4, NSObject *a5)
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  __CFDictionary *v12;
  CFDataRef Data;
  uint64_t BlockBufferWithCFDataNoCopy;
  NSObject *v15;
  uint64_t v16;
  _QWORD v18[10];
  char v19;
  CFTypeRef v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v20 = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v12 = Mutable;
  if (!Mutable)
  {
    APSLogErrorAt();
    Data = 0;
LABEL_19:
    v16 = 4294950575;
    goto LABEL_21;
  }
  CFDictionarySetValue(Mutable, CFSTR("type"), a2);
  if (a3)
    CFDictionarySetValue(v12, CFSTR("params"), a3);
  Data = CFPropertyListCreateData(0, v12, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (!Data)
  {
    APSLogErrorAt();
    goto LABEL_19;
  }
  BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
  if (!(_DWORD)BlockBufferWithCFDataNoCopy)
  {
    if (a5)
      dispatch_retain(a5);
    CFRetain(a1);
    CFRetain(v20);
    if (a2)
      CFRetain(a2);
    v15 = *(NSObject **)(DerivedStorage + 472);
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 0x40000000;
    v18[2] = __carEndpoint_sendCommandInternal_block_invoke;
    v18[3] = &__block_descriptor_tmp_155;
    v18[4] = DerivedStorage;
    v18[5] = a1;
    v18[6] = a2;
    v18[7] = v20;
    v19 = a4;
    v18[8] = Data;
    v18[9] = a5;
    dispatch_async(v15, v18);
    v16 = 0;
LABEL_11:
    CFRelease(v12);
    goto LABEL_12;
  }
  v16 = BlockBufferWithCFDataNoCopy;
  APSLogErrorAt();
LABEL_21:
  if (a5)
    dispatch_semaphore_signal(a5);
  if (v12)
    goto LABEL_11;
LABEL_12:
  if (Data)
    CFRelease(Data);
  if (v20)
    CFRelease(v20);
  return v16;
}

__n128 __carEndpoint_takeActionOnModeChanges_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v1 = a1[5];
  v2 = *(_QWORD *)(a1[4] + 8);
  v3 = *(_OWORD *)(v1 + 352);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(v1 + 368);
  *(_OWORD *)(v2 + 24) = v3;
  v4 = a1[5];
  v5 = a1[6];
  result = *(__n128 *)v5;
  v7 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)(v4 + 352) = *(_OWORD *)v5;
  *(_OWORD *)(v4 + 368) = v7;
  return result;
}

void __carEndpoint_resetBurstParamsIfSiriWakes_block_invoke(uint64_t a1)
{
  uint64_t StreamInfoForSubtype;
  const void *v3;
  uint64_t v4;
  NSObject *v5;
  const void *v6;
  _QWORD v7[6];

  StreamInfoForSubtype = carEndpoint_getStreamInfoForSubtype();
  if (StreamInfoForSubtype)
  {
    v3 = (const void *)StreamInfoForSubtype;
    CFRetain(*(CFTypeRef *)(a1 + 32));
    CFRetain(v3);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 472);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 0x40000000;
    v7[2] = __carEndpoint_resetBurstParamsIfSiriWakes_block_invoke_2;
    v7[3] = &__block_descriptor_tmp_129;
    v7[4] = v3;
    v7[5] = v4;
    dispatch_async(v5, v7);
  }
  else
  {
    APSLogErrorAt();
  }
  v6 = *(const void **)(a1 + 32);
  if (v6)
    CFRelease(v6);
}

uint64_t carEndpoint_getStreamInfoForSubtype()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x2000000000;
  v7[3] = 0;
  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  if (*(_QWORD *)(DerivedStorage + 240))
  {
    CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 240));
    CFArrayApplyBlock();
    v1 = v4[3];
  }
  else
  {
    v1 = 0;
  }
  _Block_object_dispose(&v3, 8);
  _Block_object_dispose(v7, 8);
  return v1;
}

void __carEndpoint_resetBurstParamsIfSiriWakes_block_invoke_2(uint64_t a1)
{
  _BYTE *v2;
  const void *v3;

  v2 = *(_BYTE **)(a1 + 32);
  if (!v2[48]
    || (carEndpoint_setParametersForJarvis(*(const void **)(a1 + 40), 1, 0, 0, 0), (v2 = *(_BYTE **)(a1 + 32)) != 0))
  {
    CFRelease(v2);
  }
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

void carEndpoint_setParametersForJarvis(const void *a1, int a2, int a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  const __CFAllocator *v11;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v13;
  const __CFAllocator *v14;
  __CFDictionary *v15;
  NSObject *v16;
  _QWORD block[8];
  char v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 57))
  {
    v10 = DerivedStorage;
    v11 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v13 = Mutable;
      v14 = CFGetAllocator(a1);
      v15 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (a2)
      {
        CFDictionarySetInt64();
      }
      else
      {
        CFDictionarySetInt64();
        CFDictionarySetInt64();
        CFDictionarySetInt64();
        if (a3 == 1 && a5)
          CFDictionarySetValue(v15, CFSTR("voiceModelLanguage"), a5);
      }
      CFDictionarySetValue(v13, CFSTR("enhancedSiriParameters"), v15);
      v16 = *(NSObject **)(v10 + 144);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __carEndpoint_setParametersForJarvis_block_invoke;
      block[3] = &__block_descriptor_tmp_146;
      block[4] = v10;
      block[5] = v13;
      v18 = a2;
      block[6] = v15;
      block[7] = a1;
      dispatch_sync(v16, block);
      CFRelease(v13);
      if (v15)
        CFRelease(v15);
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

uint64_t __carEndpoint_getStreamInfoForSubtype_block_invoke(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  CFAllocatorRef v4;
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, _QWORD, CFAllocatorRef, uint64_t *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24))
  {
    v3 = (_QWORD *)result;
    v9 = 0;
    v4 = CFGetAllocator(*(CFTypeRef *)(result + 48));
    CMBaseObject = FigEndpointStreamGetCMBaseObject();
    result = CMBaseObjectGetVTable();
    v6 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, uint64_t *))(*(_QWORD *)(result + 8) + 48);
    if (v6)
    {
      result = v6(CMBaseObject, *MEMORY[0x1E0CA47C8], v4, &v9);
      if (!(_DWORD)result)
      {
        result = FigCFEqual();
        if ((_DWORD)result)
        {
          v7 = *(_QWORD *)(v3[5] + 8);
          v8 = *(_QWORD *)(v7 + 24);
          *(_QWORD *)(v7 + 24) = v8 + 1;
          if (v8 == v3[8])
            *(_QWORD *)(*(_QWORD *)(v3[4] + 8) + 24) = a2;
        }
      }
    }
  }
  return result;
}

void __carEndpoint_setParametersForJarvis_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t CMBaseObject;
  unsigned int (*v5)(uint64_t, const __CFString *, _QWORD, uint64_t *);
  uint64_t v6;
  NSObject *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  _QWORD block[6];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 152) || !*(_DWORD *)(v2 + 204) || !*(_QWORD *)(v2 + 216))
  {
    if (gLogCategory_APEndpointCarPlay > 60
      || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_19;
    }
    goto LABEL_4;
  }
  if (!*(_BYTE *)(a1 + 64))
  {
    v8 = *(const void **)(v2 + 384);
    if (v8)
    {
      if (CFEqual(*(CFTypeRef *)(a1 + 48), v8))
      {
        if (gLogCategory_APEndpointCarPlay > 50
          || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_19;
        }
LABEL_4:
        LogPrintF();
        goto LABEL_19;
      }
      v2 = *(_QWORD *)(a1 + 32);
      v9 = *(const void **)(v2 + 384);
    }
    else
    {
      v9 = 0;
    }
    v10 = *(const void **)(a1 + 48);
    *(_QWORD *)(v2 + 384) = v10;
    if (v10)
      CFRetain(v10);
    if (v9)
      CFRelease(v9);
  }
  v3 = v13;
  CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 216));
  v5 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (!v5 || v5(CMBaseObject, CFSTR("TransportControlStream"), 0, v3 + 3))
  {
    APSLogErrorAt();
  }
  else
  {
    CFRetain(*(CFTypeRef *)(a1 + 40));
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 472);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __carEndpoint_setParametersForJarvis_block_invoke_2;
    block[3] = &unk_1E826CD20;
    block[4] = &v12;
    block[5] = v6;
    dispatch_async(v7, block);
  }
LABEL_19:
  _Block_object_dispose(&v12, 8);
}

void __carEndpoint_setParametersForJarvis_block_invoke_2(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APTransportStreamSendPlistMessage();
  v2 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

void __carEndpoint_sendCommandInternal_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  unsigned int (*v5)(uint64_t);
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, const void **);
  int v8;
  int v9;
  const void *v10;
  uint64_t v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  uint64_t (*v13)(const void *, uint64_t, uint64_t, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  _QWORD block[6];
  timeval v23;
  const void *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  v25 = 0;
  v26 = &v25;
  v27 = 0x2000000000;
  v28 = 0;
  v24 = 0;
  v23.tv_sec = 0;
  *(_QWORD *)&v23.tv_usec = 0;
  if (carEndpoint_isDissociated(*(_QWORD *)(a1 + 32)))
    goto LABEL_14;
  if (gLogCategory_APEndpointCarPlay <= 20
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 144);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_sendCommandInternal_block_invoke_2;
  block[3] = &unk_1E826CD68;
  block[4] = &v25;
  block[5] = v2;
  dispatch_sync(v3, block);
  v4 = v26[3];
  if (!v4)
    goto LABEL_28;
  v5 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v5 || !v5(v4))
  {
LABEL_14:
    LODWORD(v4) = 0;
    goto LABEL_28;
  }
  CMBaseObject = APSenderSessionGetCMBaseObject(v26[3]);
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v7)
  {
    LODWORD(v4) = -12782;
LABEL_16:
    APSLogErrorAt();
    goto LABEL_28;
  }
  v8 = v7(CMBaseObject, CFSTR("TransportControlStream"), 0, &v24);
  if (v8)
  {
    LODWORD(v4) = v8;
    goto LABEL_16;
  }
  if (gLogCategory_APEndpointCarPlay <= 30
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  gettimeofday(&v23, 0);
  v9 = *(unsigned __int8 *)(a1 + 80);
  v10 = v24;
  v4 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (v9)
  {
    v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v11 + 48);
    if (v12)
      LODWORD(v4) = v12(v10, 1668246893, v4);
    else
      LODWORD(v4) = -12782;
    v14 = *(_QWORD *)(a1 + 40);
    v15 = *(_QWORD *)(a1 + 48);
    CFDataGetLength(*(CFDataRef *)(a1 + 64));
    carEndpoint_sendCommandInfoAppend(v14, v15, (uint64_t)&v23);
    if ((_DWORD)v4)
      goto LABEL_16;
  }
  else
  {
    v13 = *(uint64_t (**)(const void *, uint64_t, uint64_t, _QWORD))(v11 + 56);
    if (v13)
      LODWORD(v4) = v13(v10, 1668246893, v4, 0);
    else
      LODWORD(v4) = -12782;
    v16 = *(_QWORD *)(a1 + 40);
    v17 = *(_QWORD *)(a1 + 48);
    CFDataGetLength(*(CFDataRef *)(a1 + 64));
    carEndpoint_sendCommandInfoAppend(v16, v17, (uint64_t)&v23);
    if ((_DWORD)v4)
      goto LABEL_16;
  }
LABEL_28:
  v18 = *(NSObject **)(a1 + 72);
  if (v18)
  {
    dispatch_semaphore_signal(v18);
    dispatch_release(*(dispatch_object_t *)(a1 + 72));
  }
  v19 = v24;
  if (v24 && (_DWORD)v4)
  {
    if (gLogCategory_APEndpointCarPlay <= 90
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v19 = v24;
  }
  if (v19)
    CFRelease(v19);
  v20 = (const void *)v26[3];
  if (v20)
    CFRelease(v20);
  CFRelease(*(CFTypeRef *)(a1 + 56));
  v21 = *(const void **)(a1 + 48);
  if (v21)
    CFRelease(v21);
  CFRelease(*(CFTypeRef *)(a1 + 40));
  _Block_object_dispose(&v25, 8);
}

CFTypeRef __carEndpoint_sendCommandInternal_block_invoke_2(uint64_t a1)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(*(_QWORD *)(a1 + 40) + 216);
  if (result)
    result = CFRetain(result);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void carEndpoint_sendCommandInfoAppend(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const __CFAllocator *v6;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v8;
  tm *v9;
  CFStringRef v10;
  timeval v11;
  char __str[20];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 496))
  {
    v5 = DerivedStorage;
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v8 = Mutable;
      v11.tv_sec = 0;
      *(_QWORD *)&v11.tv_usec = 0;
      gettimeofday(&v11, 0);
      v9 = localtime((const time_t *)a3);
      snprintf(__str, 0x14uLL, "%02d:%02d:%02d.%d", v9->tm_hour, v9->tm_min, v9->tm_sec, *(_DWORD *)(a3 + 8));
      v10 = CFStringCreateWithCString(v6, __str, 0x8000100u);
      FigCFDictionarySetValue();
      FigCFDictionarySetDouble();
      FigCFDictionarySetValue();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      if (CFArrayGetCount(*(CFArrayRef *)(v5 + 496)) >= *(unsigned int *)(v5 + 504))
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v5 + 496), 0);
      CFArrayAppendValue(*(CFMutableArrayRef *)(v5 + 496), v8);
      if (v10)
        CFRelease(v10);
      CFRelease(v8);
    }
  }
}

void __carEndpoint_configureAccessoryLogs_block_invoke(uint64_t a1)
{
  uint64_t v1;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v3;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  uint64_t DerivedStorage;
  __CFDictionary *v8;
  __CFDictionary *v9;
  CFDataRef Data;
  CFDataRef v11;
  NSObject *v12;
  __CFDictionary *v13;
  _QWORD block[8];
  __CFDictionary *v15;

  v1 = *(_QWORD *)(a1 + 32);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = Mutable;
    if (CFPreferencesGetAppBooleanValue(CFSTR("airPlayCarPlayReceiverLogs"), CFSTR("com.apple.airplay"), 0))
    {
      v4 = carEndpoint_prepareAccessoryLogAction();
      CFDictionarySetValue(v3, CFSTR("LogAction"), v4);
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v4)
        CFRelease(v4);
    }
    if (CFPreferencesGetAppBooleanValue(CFSTR("dpCarPlayReceiverLogs"), CFSTR("com.apple.airplay"), 0))
    {
      v5 = carEndpoint_prepareAccessoryLogAction();
      CFDictionarySetValue(v3, CFSTR("DPLogAction"), v5);
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v5)
        CFRelease(v5);
    }
    if (CFPreferencesGetAppBooleanValue(CFSTR("OEMCarPlayReceiverLogs"), CFSTR("com.apple.airplay"), 0))
    {
      v6 = carEndpoint_prepareAccessoryLogAction();
      CFDictionarySetValue(v3, CFSTR("OEMLogAction"), v6);
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v6)
        CFRelease(v6);
    }
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v15 = 0;
    if (gLogCategory_APEndpointCarPlay <= 30
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v8 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v8)
    {
      v9 = v8;
      CFDictionarySetValue(v8, CFSTR("params"), v3);
      Data = CFPropertyListCreateData(0, v9, kCFPropertyListBinaryFormat_v1_0, 0, 0);
      if (Data)
      {
        v11 = Data;
        if (FigCreateBlockBufferWithCFDataNoCopy())
        {
          APSLogErrorAt();
        }
        else
        {
          v12 = *(NSObject **)(DerivedStorage + 472);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 0x40000000;
          block[2] = __carEndpoint_sendAccessoryLogRequest_block_invoke;
          block[3] = &__block_descriptor_tmp_209;
          block[4] = DerivedStorage;
          block[5] = v15;
          block[6] = 0;
          block[7] = v1;
          dispatch_sync(v12, block);
        }
        CFRelease(v9);
        CFRelease(v11);
        v13 = v15;
        if (!v15)
          goto LABEL_33;
      }
      else
      {
        APSLogErrorAt();
        v13 = v9;
      }
      CFRelease(v13);
    }
    else
    {
      APSLogErrorAt();
    }
LABEL_33:
    CFRelease(v3);
    return;
  }
  APSLogErrorAt();
}

__CFString *carEndpoint_prepareAccessoryLogAction()
{
  const __CFAllocator *v0;
  __CFString *Mutable;
  __CFString *v2;
  _BYTE v4[30];
  char v5[100];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4[0] = 0;
  APSSettingsGetCString();
  __strlcpy_chk();
  v2 = CFStringCreateMutable(v0, 0);
  v5[0] = 0;
  APSSettingsGetCString();
  __strlcpy_chk();
  CFStringAppendFormat(v2, 0, CFSTR("%s"), v5);
  CFStringAppendFormat(Mutable, 0, CFSTR("?%@:level=%s"), v2, v4);
  if (v2)
    CFRelease(v2);
  return Mutable;
}

void __carEndpoint_sendAccessoryLogRequest_block_invoke(uint64_t *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  unsigned int (*v5)(uint64_t);
  uint64_t CMBaseObject;
  unsigned int (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(CFTypeRef, uint64_t, uint64_t, uint64_t);
  CFTypeRef v12;
  const void *v13;
  _QWORD block[6];
  CFTypeRef cf;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2000000000;
  v19 = 0;
  cf = 0;
  if (carEndpoint_isDissociated(a1[4]))
    goto LABEL_14;
  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 144);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_sendAccessoryLogRequest_block_invoke_2;
  block[3] = &unk_1E826CDD0;
  block[4] = &v16;
  block[5] = v2;
  dispatch_sync(v3, block);
  v4 = v17[3];
  if (!v4)
    goto LABEL_14;
  v5 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v5)
    goto LABEL_14;
  if (!v5(v4))
    goto LABEL_14;
  CMBaseObject = APSenderSessionGetCMBaseObject(v17[3]);
  v7 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (v7)
  {
    if (!v7(CMBaseObject, CFSTR("TransportControlStream"), 0, &cf))
    {
      v8 = cf;
      v9 = a1[5];
      v10 = a1[6];
      v11 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 56);
      if (v11)
      {
        if (!v11(v8, 1819240307, v9, v10))
          goto LABEL_14;
      }
    }
  }
  APSLogErrorAt();
  v12 = cf;
  if (!cf)
    goto LABEL_16;
  if (gLogCategory_APEndpointCarPlay <= 90)
  {
    if (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize())
      LogPrintF();
LABEL_14:
    v12 = cf;
    if (!cf)
      goto LABEL_16;
  }
  CFRelease(v12);
LABEL_16:
  v13 = (const void *)v17[3];
  if (v13)
    CFRelease(v13);
  _Block_object_dispose(&v16, 8);
}

CFTypeRef __carEndpoint_sendAccessoryLogRequest_block_invoke_2(uint64_t a1)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(*(_QWORD *)(a1 + 40) + 216);
  if (result)
    result = CFRetain(result);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void __carEndpoint_postNotification_block_invoke(uint64_t a1)
{
  CFTypeRef v2;
  const __CFAllocator *v3;
  CFMutableDictionaryRef MutableCopy;
  const void *v5;
  const void *v6;
  const void *v7;

  if (!carEndpoint_isDissociated(*(_QWORD *)(a1 + 32))
    || FigCFEqual()
    || *(_DWORD *)(a1 + 64) && FigCFEqual())
  {
    v2 = *(CFTypeRef *)(a1 + 48);
    if (*(_DWORD *)(a1 + 64))
    {
      v3 = CFGetAllocator(*(CFTypeRef *)(a1 + 56));
      if (v2)
        MutableCopy = CFDictionaryCreateMutableCopy(v3, 0, *(CFDictionaryRef *)(a1 + 48));
      else
        MutableCopy = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v2 = MutableCopy;
      FigCFDictionarySetInt64();
    }
    else if (v2)
    {
      v2 = CFRetain(*(CFTypeRef *)(a1 + 48));
    }
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v2)
      CFRelease(v2);
  }
  else if (gLogCategory_APEndpointCarPlay <= 50
         && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v5 = *(const void **)(a1 + 48);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 40);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 56);
  if (v7)
    CFRelease(v7);
}

uint64_t carEndpoint_handleEvent()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCarPlay <= 50)
  {
    if (gLogCategory_APEndpointCarPlay != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

uint64_t carEndpoint_handleEventCreatingReply(uint64_t a1, int a2, uint64_t a3, const void *a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t restarted;
  uint64_t CFDataWithBlockBufferNoCopy;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  CFTypeID v13;
  uint64_t v14;
  const __CFString *v15;
  uint64_t TypedValue;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  const __CFAllocator *v28;
  CFMutableDictionaryRef v29;
  CFMutableDictionaryRef v30;
  double Current;
  __CFCalendar *v32;
  __CFCalendar *v33;
  int v34;
  int v35;
  int v36;
  CFStringRef v37;
  CFDataRef Data;
  uint64_t BlockBufferWithCFDataNoCopy;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t updated;
  int v49;
  __CFDictionary *Mutable;
  uint64_t DictionaryRepresentation;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  void *value;
  _OWORD v59[2];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 block;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (carEndpoint_isDissociated(DerivedStorage))
    return 4294950573;
  if (a2 != 1668116068)
  {
    if (gLogCategory_APEndpointCarPlay <= 60
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v12 = 0;
    v17 = 0;
    goto LABEL_45;
  }
  CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
  if ((_DWORD)CFDataWithBlockBufferNoCopy)
  {
    restarted = CFDataWithBlockBufferNoCopy;
    APSLogErrorAt();
    v17 = 0;
    v12 = 0;
LABEL_95:
    Data = 0;
    goto LABEL_47;
  }
  v11 = (const __CFDictionary *)CFPropertyListCreateWithData(0, 0, 0, 0, 0);
  v12 = v11;
  if (!v11 || (v13 = CFGetTypeID(v11), v13 != CFDictionaryGetTypeID()))
  {
    APSLogErrorAt();
    v17 = 0;
    Data = 0;
    restarted = 4294950576;
    goto LABEL_47;
  }
  v14 = CMBaseObjectGetDerivedStorage();
  v54 = 0;
  v55 = &v54;
  v56 = 0x2000000000;
  v57 = 0;
  v15 = (const __CFString *)CFDictionaryGetValue(v12, CFSTR("type"));
  CFDictionaryGetTypeID();
  TypedValue = CFDictionaryGetTypedValue();
  if (!v15)
  {
    APSLogErrorAt();
    v17 = 0;
    restarted = 4294950576;
    goto LABEL_29;
  }
  v17 = (const __CFString *)TypedValue;
  if (gLogCategory_APEndpointCarPlay <= 30
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (CFEqual(v15, CFSTR("forceKeyFrame")))
  {
    v18 = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)&v60 = 0;
    *((_QWORD *)&v60 + 1) = &v60;
    v61 = 0x2000000000uLL;
    CFStringGetTypeID();
    v19 = CFDictionaryGetTypedValue();
    v20 = *(NSObject **)(v18 + 144);
    *(_QWORD *)&block = MEMORY[0x1E0C809B0];
    *((_QWORD *)&block + 1) = 0x40000000;
    *(_QWORD *)&v66 = __carEndpoint_forceKeyFrame_block_invoke;
    *((_QWORD *)&v66 + 1) = &unk_1E826CE60;
    *(_QWORD *)&v67 = &v60;
    *((_QWORD *)&v67 + 1) = v19;
    *(_QWORD *)&v68 = a4;
    *((_QWORD *)&v68 + 1) = v18;
    dispatch_sync(v20, &block);
    v21 = *(_QWORD *)(*((_QWORD *)&v60 + 1) + 24);
    if (v21)
    {
      restarted = APEndpointStreamScreenRestartBitstream(v21);
      if ((_DWORD)restarted)
        goto LABEL_106;
      goto LABEL_24;
    }
    goto LABEL_99;
  }
  if (CFEqual(v15, CFSTR("hidSendReport")))
  {
    v22 = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)&v60 = 0;
    *((_QWORD *)&v60 + 1) = &v60;
    v61 = 0x2000000000uLL;
    v23 = *(NSObject **)(v22 + 144);
    *(_QWORD *)&block = MEMORY[0x1E0C809B0];
    *((_QWORD *)&block + 1) = 0x40000000;
    *(_QWORD *)&v66 = __carEndpoint_sendHIDReport_block_invoke;
    *((_QWORD *)&v66 + 1) = &unk_1E826CE88;
    *(_QWORD *)&v67 = &v60;
    *((_QWORD *)&v67 + 1) = v22;
    dispatch_sync(v23, &block);
    v24 = *(_QWORD *)(*((_QWORD *)&v60 + 1) + 24);
    if (v24)
    {
      restarted = APHIDClientHandleHIDReport(v24);
      if ((_DWORD)restarted)
LABEL_106:
        APSLogErrorAt();
LABEL_24:
      v25 = *(const void **)(*((_QWORD *)&v60 + 1) + 24);
      if (v25)
        CFRelease(v25);
      _Block_object_dispose(&v60, 8);
      goto LABEL_27;
    }
LABEL_99:
    restarted = 0;
    goto LABEL_24;
  }
  if (CFEqual(v15, CFSTR("changeModes")))
  {
    v41 = CMBaseObjectGetDerivedStorage();
    v64 = 0;
    v63 = 0u;
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    block = 0u;
    v66 = 0u;
    memset(v59, 0, sizeof(v59));
    value = 0;
    if (v17)
    {
      if (*(_QWORD *)(v41 + 464))
      {
        v42 = APStarkModeChangeRequestMakeFromDictionary((uint64_t)v17, 1, (uint64_t)&v60);
        if ((_DWORD)v42)
        {
          restarted = v42;
          APSLogErrorAt();
          v17 = 0;
          v43 = 0;
        }
        else
        {
          v43 = (void *)CFDictionaryCopyCString();
          if (gLogCategory_APEndpointCarPlay <= 50
            && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
          {
            APStarkModeChangeRequestToString(&v60, (uint64_t)&block);
            LogPrintF();
          }
          v49 = FigStarkModeControllerRequestModeChange();
          Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (!Mutable)
          {
            APSLogErrorAt();
            v17 = 0;
            restarted = 4294950575;
            goto LABEL_78;
          }
          CFDictionarySetInt64();
          if (!v49)
          {
            DictionaryRepresentation = APStarkModeCreateDictionaryRepresentation((uint64_t)v59, (__CFDictionary **)&value);
            if ((_DWORD)DictionaryRepresentation)
            {
              restarted = DictionaryRepresentation;
              APSLogErrorAt();
              v17 = 0;
              goto LABEL_78;
            }
            if (value)
              CFDictionarySetValue(Mutable, CFSTR("params"), value);
          }
          restarted = 0;
          v17 = (const __CFString *)Mutable;
        }
        Mutable = 0;
      }
      else
      {
        APSLogErrorAt();
        v17 = 0;
        v43 = 0;
        Mutable = 0;
        restarted = 4294949690;
      }
    }
    else
    {
      APSLogErrorAt();
      v43 = 0;
      Mutable = 0;
      restarted = 4294950576;
    }
LABEL_78:
    free(v43);
    if (value)
      CFRelease(value);
    if (Mutable)
      CFRelease(Mutable);
LABEL_28:
    if ((_DWORD)restarted)
    {
      APSLogErrorAt();
      if (v17)
      {
        CFRelease(v17);
LABEL_98:
        v17 = 0;
        goto LABEL_29;
      }
    }
    goto LABEL_29;
  }
  if (CFEqual(v15, CFSTR("iAPSendMessage")))
  {
    v44 = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)&v60 = 0;
    *((_QWORD *)&v60 + 1) = &v60;
    v61 = 0x2000000000uLL;
    if (!v17)
    {
      APSLogErrorAt();
      restarted = 4294950576;
      goto LABEL_24;
    }
    v45 = *(NSObject **)(v44 + 144);
    *(_QWORD *)&block = MEMORY[0x1E0C809B0];
    *((_QWORD *)&block + 1) = 0x40000000;
    *(_QWORD *)&v66 = __carEndpoint_sendiAPMessage_block_invoke;
    *((_QWORD *)&v66 + 1) = &unk_1E826CEB0;
    *(_QWORD *)&v67 = &v60;
    *((_QWORD *)&v67 + 1) = v44;
    dispatch_sync(v45, &block);
    if (!*(_QWORD *)(*((_QWORD *)&v60 + 1) + 24))
    {
      restarted = 4294954514;
      goto LABEL_24;
    }
    CFDataGetTypeID();
    v46 = CFDictionaryGetTypedValue();
    if (!v46)
    {
      APSLogErrorAt();
      restarted = 4294954516;
      goto LABEL_24;
    }
    v47 = v46;
    if (gLogCategory_APEndpointCarPlay <= 30
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    restarted = APAccTransportClientEndpointForwardData(*(_QWORD *)(*((_QWORD *)&v60 + 1) + 24), v47);
    if (!(_DWORD)restarted)
      goto LABEL_24;
    goto LABEL_106;
  }
  if (CFEqual(v15, CFSTR("requestSiri")))
  {
    updated = carEndpoint_requestSiri(a4, (uint64_t)v17);
LABEL_105:
    restarted = updated;
LABEL_27:
    v17 = 0;
    goto LABEL_28;
  }
  if (CFEqual(v15, CFSTR("requestUI")))
  {
    updated = carEndpoint_requestUI(a4, v17);
    goto LABEL_105;
  }
  if (CFEqual(v15, CFSTR("updateViewArea")))
  {
    updated = carEndpoint_updateViewArea(a4, (const __CFDictionary *)v17);
    goto LABEL_105;
  }
  if (CFEqual(v15, CFSTR("setLimitedUI")))
  {
    updated = carEndpoint_setLimitedUI(a4, (uint64_t)v17);
    goto LABEL_105;
  }
  if (CFEqual(v15, CFSTR("setNightMode")))
  {
    updated = carEndpoint_setNightMode(a4, (uint64_t)v17);
    goto LABEL_105;
  }
  if (CFEqual(v15, CFSTR("updateVehicleInformation")))
  {
    updated = carEndpoint_updateVehicleInformation(a4, (uint64_t)v17);
    goto LABEL_105;
  }
  v52 = carEndpoint_validateRuntimeFeaturesWithAccessory((uint64_t)a4, v15, 0);
  if ((_DWORD)v52)
  {
    restarted = v52;
    APSLogErrorAt();
    goto LABEL_98;
  }
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v53 = *(NSObject **)(v14 + 144);
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  *(_QWORD *)&v66 = __carEndpoint_processEventCreatingResponse_block_invoke;
  *((_QWORD *)&v66 + 1) = &unk_1E826CE38;
  *(_QWORD *)&v67 = &v54;
  *((_QWORD *)&v67 + 1) = v14;
  dispatch_sync(v53, &block);
  carEndpoint_postNotification(a4, (const void *)*MEMORY[0x1E0CA3BA0], *((_DWORD *)v55 + 6), v12);
  v17 = 0;
  restarted = 0;
LABEL_29:
  _Block_object_dispose(&v54, 8);
  CFDictionaryGetValue(v12, CFSTR("type"));
  CFDataGetLength(0);
  v26 = CMBaseObjectGetDerivedStorage();
  LODWORD(v60) = 0;
  LODWORD(v59[0]) = 0;
  LODWORD(v54) = 0;
  if (*(_QWORD *)(v26 + 512))
  {
    v27 = v26;
    v28 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v29 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v29)
    {
      v30 = v29;
      Current = CFAbsoluteTimeGetCurrent();
      v32 = CFCalendarCreateWithIdentifier(v28, (CFCalendarIdentifier)*MEMORY[0x1E0C9B008]);
      v33 = v32;
      if (v32)
      {
        CFCalendarDecomposeAbsoluteTime(v32, Current, "Hms", &v60, v59, &v54);
        v34 = v60;
        v35 = v59[0];
        v36 = v54;
      }
      else
      {
        v36 = 0;
        v35 = 0;
        v34 = 0;
      }
      snprintf((char *)&block, 0x14uLL, "%02d:%02d:%02d.%d", v34, v35, v36, (int)((Current - floor(Current)) * 1000000.0));
      v37 = CFStringCreateWithCString(v28, (const char *)&block, 0x8000100u);
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      if (CFArrayGetCount(*(CFArrayRef *)(v27 + 512)) >= *(unsigned int *)(v27 + 520))
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v27 + 512), 0);
      CFArrayAppendValue(*(CFMutableArrayRef *)(v27 + 512), v30);
      if (v37)
        CFRelease(v37);
      CFRelease(v30);
      if (v33)
        CFRelease(v33);
    }
  }
  if ((_DWORD)restarted)
  {
    APSLogErrorAt();
    goto LABEL_95;
  }
  if (!v17)
  {
LABEL_45:
    Data = 0;
LABEL_46:
    restarted = 0;
    *a5 = 0;
    goto LABEL_47;
  }
  Data = CFPropertyListCreateData(0, v17, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (!Data)
  {
    APSLogErrorAt();
    restarted = 4294950575;
    goto LABEL_47;
  }
  BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
  if (!(_DWORD)BlockBufferWithCFDataNoCopy)
    goto LABEL_46;
  restarted = BlockBufferWithCFDataNoCopy;
  APSLogErrorAt();
LABEL_47:
  if (v12)
    CFRelease(v12);
  if (v17)
    CFRelease(v17);
  if (Data)
    CFRelease(Data);
  return restarted;
}

void carEndpoint_handleSenderSessionConnected(uint64_t a1, const void *a2)
{
  if (gLogCategory_APEndpointCarPlay <= 30
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  carEndpoint_handleConnectedStateChanged(a2);
}

void carEndpoint_handleSenderSessionDisconnected(uint64_t a1, const void *a2)
{
  if (gLogCategory_APEndpointCarPlay <= 30
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  carEndpoint_handleConnectedStateChanged(a2);
}

void carEndpoint_handleSenderSessionStarted(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  if (gLogCategory_APEndpointCarPlay <= 30
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v4 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_handleSenderSessionStarted_block_invoke;
  block[3] = &unk_1E826D200;
  block[5] = DerivedStorage;
  block[6] = a2;
  block[4] = &v6;
  dispatch_sync(v4, block);
  carEndpoint_postNotification(a2, (const void *)*MEMORY[0x1E0CA3AF8], *((_DWORD *)v7 + 6), 0);
  carEndpoint_postNotification(a2, (const void *)*MEMORY[0x1E0CA3B08], *((_DWORD *)v7 + 6), 0);
  _Block_object_dispose(&v6, 8);
}

void carEndpoint_handleSenderSessionFailed(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  int Int64;
  NSObject *v5;
  _QWORD block[6];
  int v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCarPlay <= 30
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  Int64 = CFDictionaryGetInt64();
  v5 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_handleSenderSessionFailed_block_invoke;
  block[3] = &__block_descriptor_tmp_371;
  v7 = Int64;
  block[4] = a2;
  block[5] = DerivedStorage;
  dispatch_sync(v5, block);
}

void carEndpoint_getMetrics(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  CFTypeID v9;
  unint64_t Value;
  unint64_t v11;
  const void *v12;
  NSObject *v13;
  _QWORD v14[8];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v18 = 0;
  if (a5)
  {
    v8 = DerivedStorage;
    v9 = CFGetTypeID(a5);
    if (v9 == CFDictionaryGetTypeID())
    {
      CFArrayGetTypeID();
      v16[3] = CFDictionaryGetTypedValue();
      Value = (unint64_t)CFDictionaryGetValue((CFDictionaryRef)a5, CFSTR("statsDictionary"));
      v20[3] = Value;
      v11 = v16[3];
      if (v11 | Value)
      {
        if (a2)
        {
          CFRetain(a2);
          v11 = v16[3];
        }
        if (v11)
          CFRetain((CFTypeRef)v11);
        v12 = (const void *)v20[3];
        if (v12)
          CFRetain(v12);
        v13 = *(NSObject **)(v8 + 144);
        v14[0] = MEMORY[0x1E0C809B0];
        v14[1] = 0x40000000;
        v14[2] = __carEndpoint_getMetrics_block_invoke;
        v14[3] = &unk_1E826D248;
        v14[4] = &v15;
        v14[5] = &v19;
        v14[6] = a2;
        v14[7] = v8;
        dispatch_async(v13, v14);
      }
    }
  }
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
}

void carEndpoint_teardownSenderSession(uint64_t a1, uint64_t a2, int a3)
{
  void (*v5)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  void (*v6)(uint64_t);
  uint64_t CMBaseObject;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  _QWORD *v11;
  void (*v12)(uint64_t);

  if (a2)
  {
    v5 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 96);
    if (v5)
      v5(a2, 0, 0, 0, 0);
    if (a3)
    {
      v6 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
      if (v6)
        v6(a2);
    }
    CMBaseObject = APSenderSessionGetCMBaseObject(a2);
    if (CMBaseObject)
    {
      v8 = CMBaseObject;
      v9 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v9)
        v9(v8);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    v10 = APSenderSessionGetCMBaseObject(a2);
    v11 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
    if (*v11 >= 2uLL)
    {
      v12 = (void (*)(uint64_t))v11[8];
      if (v12)
        v12(v10);
    }
  }
}

uint64_t carEndpoint_requestSiri(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  int Int64;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const __CFAllocator *v11;
  CFMutableDictionaryRef Mutable;
  CFDictionaryRef v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  int v21;
  _QWORD v22[5];
  _QWORD block[11];
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  void *values;
  _QWORD v42[6];

  v42[5] = *MEMORY[0x1E0C80C00];
  v37 = 0;
  v38 = &v37;
  v39 = 0x2000000000;
  v40 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v33 = 0;
  v34 = &v33;
  v35 = 0x2000000000;
  v36 = 0;
  v29 = 0;
  v30 = &v29;
  v31 = 0x2000000000;
  v32 = 0;
  v25 = 0;
  v26 = &v25;
  v27 = 0x2000000000;
  v28 = 0;
  if (!a2)
  {
    APSLogErrorAt();
    *((_DWORD *)v38 + 6) = -16720;
    goto LABEL_24;
  }
  v5 = DerivedStorage;
  Int64 = CFDictionaryGetInt64();
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v7 = *(NSObject **)(v5 + 144);
  v8 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_requestSiri_block_invoke;
  block[3] = &unk_1E826CED8;
  v24 = Int64;
  block[4] = &v37;
  block[5] = &v29;
  block[8] = a1;
  block[9] = v5;
  block[6] = &v25;
  block[7] = &v33;
  block[10] = a2;
  dispatch_sync(v7, block);
  if (!*((_DWORD *)v38 + 6))
  {
    v9 = *((unsigned __int8 *)v26 + 24);
    v10 = v34[3];
    CMBaseObjectGetDerivedStorage();
    if ((Int64 - 5) < 0xFFFFFFFC)
    {
      v21 = -16720;
    }
    else
    {
      if (Int64 == 4 && !v9)
      {
        v13 = 0;
        *((_DWORD *)v38 + 6) = 0;
        if (*((_BYTE *)v26 + 24))
        {
LABEL_16:
          carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E0CA3B18], *((_DWORD *)v30 + 6), v13);
          if (!v13)
            goto LABEL_24;
          goto LABEL_23;
        }
        goto LABEL_19;
      }
      v11 = CFGetAllocator(a1);
      Mutable = CFDictionaryCreateMutable(v11, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      values = Mutable;
      if (Mutable)
      {
        v13 = Mutable;
        v14 = *MEMORY[0x1E0CA4690];
        v42[0] = CFSTR("Invalid");
        v42[1] = v14;
        v15 = *MEMORY[0x1E0CA4688];
        v42[2] = *MEMORY[0x1E0CA4680];
        v42[3] = v15;
        v16 = (const void *)*MEMORY[0x1E0CA46A0];
        v42[4] = *MEMORY[0x1E0CA4698];
        CFDictionarySetValue(Mutable, v16, (const void *)v42[Int64]);
        if (v10)
        {
          CFAbsoluteTimeGetCurrent();
          mach_absolute_time();
          UpTicksToSecondsF();
          CFDictionarySetDouble();
        }
        if (!v9
          || (v13 = CFDictionaryCreate(0, MEMORY[0x1E0CA3820], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)
        {
          *((_DWORD *)v38 + 6) = 0;
          if (*((_BYTE *)v26 + 24))
            goto LABEL_16;
          if (Int64 != 4)
          {
            carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E0CA3B90], *((_DWORD *)v30 + 6), v13);
LABEL_23:
            CFRelease(v13);
            goto LABEL_24;
          }
LABEL_19:
          v17 = *(NSObject **)(v5 + 144);
          v22[0] = v8;
          v22[1] = 0x40000000;
          v22[2] = __carEndpoint_requestSiri_block_invoke_2;
          v22[3] = &__block_descriptor_tmp_260;
          v22[4] = v5;
          dispatch_sync(v17, v22);
          v18 = APCarPlayInitiateJarvisProcessing((uint64_t)a1, v34[3], (void (*)(uint64_t, _QWORD))carEndpoint_jarvisInitiationComplete);
          *((_DWORD *)v38 + 6) = v18;
          if (v18)
          {
            APSLogErrorAt();
            if (!v13)
              goto LABEL_24;
          }
          else if (!v13)
          {
            goto LABEL_24;
          }
          goto LABEL_23;
        }
        v21 = -16721;
      }
      else
      {
        v21 = -6728;
      }
    }
    APSLogErrorAt();
    *((_DWORD *)v38 + 6) = v21;
    APSLogErrorAt();
  }
LABEL_24:
  v19 = *((unsigned int *)v38 + 6);
  _Block_object_dispose(&v25, 8);
  _Block_object_dispose(&v29, 8);
  _Block_object_dispose(&v33, 8);
  _Block_object_dispose(&v37, 8);
  return v19;
}

uint64_t carEndpoint_requestUI(const void *a1, const __CFString *a2)
{
  uint64_t DerivedStorage;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const __CFString *TypedValue;
  CFURLRef v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD block[6];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 0;
  if (a2)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      APSLogErrorAt();
      v10 = 4294950575;
      goto LABEL_18;
    }
    v6 = Mutable;
    CFStringGetTypeID();
    TypedValue = (const __CFString *)CFDictionaryGetTypedValue();
    a2 = TypedValue;
    if (TypedValue && CFStringGetLength(TypedValue) >= 1)
    {
      v8 = CFURLCreateWithString(0, a2, 0);
      if (v8)
        CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E0CA49C0], v8);
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = 0;
    v6 = 0;
  }
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v9 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_requestUI_block_invoke;
  block[3] = &unk_1E826CF40;
  block[4] = &v13;
  block[5] = DerivedStorage;
  dispatch_sync(v9, block);
  carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E0CA3BD0], *((_DWORD *)v14 + 6), v6);
  carEndpoint_recordRequestUI((uint64_t)a1, a2, 1);
  if (v8)
    CFRelease(v8);
  if (v6)
    CFRelease(v6);
  v10 = 0;
LABEL_18:
  _Block_object_dispose(&v13, 8);
  return v10;
}

uint64_t carEndpoint_updateViewArea(const void *a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *Value;
  const void *v7;
  uint64_t Int64;
  const __CFArray *v9;
  const __CFArray *v10;
  NSObject *v11;
  uint64_t v12;
  int v14;
  _QWORD block[9];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;

  v20 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = 0;
  v17 = &v16;
  v18 = 0x2000000000;
  v19 = 0;
  if (!*(_BYTE *)(DerivedStorage + 59))
  {
    APSLogErrorAt();
    v14 = -16726;
LABEL_19:
    v20 = v14;
    goto LABEL_13;
  }
  if (!a2)
    goto LABEL_18;
  v5 = DerivedStorage;
  Value = CFDictionaryGetValue(a2, CFSTR("uuid"));
  if (!Value)
    goto LABEL_18;
  v7 = Value;
  Int64 = CFDictionaryGetInt64();
  if (v20)
  {
LABEL_20:
    APSLogErrorAt();
    goto LABEL_13;
  }
  v9 = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("adjacentViewAreas"));
  if (!v9)
  {
LABEL_18:
    APSLogErrorAt();
    v14 = -16720;
    goto LABEL_19;
  }
  v10 = v9;
  CFDictionaryGetInt64();
  if (v20)
    goto LABEL_20;
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v20 = carEndpoint_validateViewAreaParams((uint64_t)a1, v7, Int64, v10);
  if (v20)
    goto LABEL_20;
  v11 = *(NSObject **)(v5 + 144);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_updateViewArea_block_invoke;
  block[3] = &unk_1E826D0E8;
  block[6] = v7;
  block[7] = a2;
  block[8] = v5;
  block[4] = &v16;
  block[5] = a1;
  dispatch_sync(v11, block);
  carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E0CA3BB0], *((_DWORD *)v17 + 6), a2);
LABEL_13:
  v12 = v20;
  _Block_object_dispose(&v16, 8);
  return v12;
}

uint64_t carEndpoint_setLimitedUI(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  uint64_t v8;
  const __CFString *v9;
  const __CFString *TypedValue;
  const __CFString *v11;
  char v12;
  uint64_t Int64;
  const void **v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD block[6];
  char v19;
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v21 = 0;
  v22 = &v21;
  v23 = 0x2000000000;
  v24 = 0;
  if (a2)
  {
    v5 = DerivedStorage;
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v7 = Mutable;
      v8 = carEndpoint_copyMainDisplayUuid();
      if (v8)
      {
        v9 = (const __CFString *)v8;
        CFStringGetTypeID();
        TypedValue = (const __CFString *)CFDictionaryGetTypedValue();
        if (TypedValue && (v11 = TypedValue, CFStringGetLength(TypedValue)) && !FigCFEqual())
        {
          v12 = 0;
        }
        else
        {
          v12 = 1;
          v11 = v9;
        }
        CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E0CA39D0], v11);
        Int64 = CFDictionaryGetInt64();
        v14 = (const void **)MEMORY[0x1E0C9AE50];
        if (!Int64)
          v14 = (const void **)MEMORY[0x1E0C9AE40];
        CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E0CA39D8], *v14);
        v15 = *(NSObject **)(v5 + 144);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = __carEndpoint_setLimitedUI_block_invoke;
        block[3] = &unk_1E826D138;
        v19 = v12;
        v20 = Int64 != 0;
        block[4] = &v21;
        block[5] = v5;
        dispatch_sync(v15, block);
        carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E0CA3B68], *((_DWORD *)v22 + 6), v7);
        if (gLogCategory_APEndpointCarPlay <= 50
          && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CFRelease(v9);
        v16 = 0;
      }
      else
      {
        APSLogErrorAt();
        v16 = 4294950576;
      }
      CFRelease(v7);
    }
    else
    {
      APSLogErrorAt();
      v16 = 4294950575;
    }
  }
  else
  {
    APSLogErrorAt();
    v16 = 4294950576;
  }
  _Block_object_dispose(&v21, 8);
  return v16;
}

uint64_t carEndpoint_setNightMode(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  uint64_t v8;
  const __CFString *v9;
  const __CFString *TypedValue;
  const __CFString *v11;
  char v12;
  uint64_t Int64;
  const void **v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD block[6];
  char v19;
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v21 = 0;
  v22 = &v21;
  v23 = 0x2000000000;
  v24 = 0;
  if (a2)
  {
    v5 = DerivedStorage;
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v7 = Mutable;
      v8 = carEndpoint_copyMainDisplayUuid();
      if (v8)
      {
        v9 = (const __CFString *)v8;
        CFStringGetTypeID();
        TypedValue = (const __CFString *)CFDictionaryGetTypedValue();
        if (TypedValue && (v11 = TypedValue, CFStringGetLength(TypedValue)) && !FigCFEqual())
        {
          v12 = 0;
        }
        else
        {
          v12 = 1;
          v11 = v9;
        }
        CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E0CA3A88], v11);
        Int64 = CFDictionaryGetInt64();
        v14 = (const void **)MEMORY[0x1E0C9AE50];
        if (!Int64)
          v14 = (const void **)MEMORY[0x1E0C9AE40];
        CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E0CA3A90], *v14);
        v15 = *(NSObject **)(v5 + 144);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = __carEndpoint_setNightMode_block_invoke;
        block[3] = &unk_1E826D188;
        v19 = v12;
        v20 = Int64 != 0;
        block[4] = &v21;
        block[5] = v5;
        dispatch_sync(v15, block);
        carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E0CA3B78], *((_DWORD *)v22 + 6), v7);
        if (gLogCategory_APEndpointCarPlay <= 50
          && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CFRelease(v9);
        v16 = 0;
      }
      else
      {
        APSLogErrorAt();
        v16 = 4294950576;
      }
      CFRelease(v7);
    }
    else
    {
      APSLogErrorAt();
      v16 = 4294950575;
    }
  }
  else
  {
    APSLogErrorAt();
    v16 = 4294950576;
  }
  _Block_object_dispose(&v21, 8);
  return v16;
}

uint64_t carEndpoint_updateVehicleInformation(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CFDictionaryRef v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD block[8];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  void *values;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  values = 0;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  if (a2 && (v5 = DerivedStorage, CFDictionaryGetTypeID(), (values = (void *)CFDictionaryGetTypedValue()) != 0))
  {
    v6 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0CA49A8], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v7 = *(NSObject **)(v5 + 144);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __carEndpoint_updateVehicleInformation_block_invoke;
    block[3] = &unk_1E826D1B0;
    block[6] = values;
    block[7] = a1;
    block[4] = &v11;
    block[5] = v5;
    dispatch_sync(v7, block);
    carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E0CA3BA8], *((_DWORD *)v12 + 6), v6);
    if (v6)
      CFRelease(v6);
    v8 = 0;
  }
  else
  {
    APSLogErrorAt();
    v8 = 4294950576;
  }
  _Block_object_dispose(&v11, 8);
  return v8;
}

uint64_t carEndpoint_validateRuntimeFeaturesWithAccessory(uint64_t a1, const __CFString *a2, int a3)
{
  _BYTE *DerivedStorage;
  uint64_t v6;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (CFStringCompare(a2, CFSTR("suggestUI"), 0) && CFStringCompare(a2, CFSTR("showUI"), 0))
  {
    if (CFStringCompare(a2, CFSTR("changeUIContext"), 0))
    {
      if (CFStringCompare(a2, CFSTR("deviceOfferFocus"), 0)
        && CFStringCompare(a2, CFSTR("accessoryAcquireFocus"), 0)
        && CFStringCompare(a2, CFSTR("accessoryGiveFocus"), 0)
        || DerivedStorage[63])
      {
        return 0;
      }
    }
    else if (DerivedStorage[61])
    {
      return 0;
    }
  }
  else if (DerivedStorage[60])
  {
    return 0;
  }
  if (a3)
  {
    if (gLogCategory_APEndpointCarPlay > 90)
      return 4294950576;
    if (gLogCategory_APEndpointCarPlay == -1)
    {
      v6 = 4294950576;
      if (!_LogCategory_Initialize())
        return v6;
    }
    else
    {
      v6 = 4294950576;
    }
LABEL_21:
    LogPrintF();
    return v6;
  }
  if (gLogCategory_APEndpointCarPlay <= 90)
  {
    if (gLogCategory_APEndpointCarPlay == -1)
    {
      v6 = 0;
      if (!_LogCategory_Initialize())
        return v6;
    }
    else
    {
      v6 = 0;
    }
    goto LABEL_21;
  }
  return 0;
}

uint64_t __carEndpoint_processEventCreatingResponse_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 40) + 204);
  return result;
}

uint64_t __carEndpoint_forceKeyFrame_block_invoke(_QWORD *a1)
{
  uint64_t result;

  result = a1[5];
  if (result && (result = CFStringGetLength((CFStringRef)result), result >= 1))
  {
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = carEndpoint_getScreenStreamForDisplayUUID();
    result = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
    if (result)
      return (uint64_t)CFRetain((CFTypeRef)result);
  }
  else if (*(_QWORD *)(a1[7] + 240))
  {
    result = carEndpoint_getStreamInfoForSubtype();
    if (result)
    {
      result = *(_QWORD *)(result + 16);
      if (result)
        result = (uint64_t)CFRetain((CFTypeRef)result);
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
    }
  }
  return result;
}

CFTypeRef __carEndpoint_sendHIDReport_block_invoke(uint64_t a1)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(*(_QWORD *)(a1 + 40) + 272);
  if (result)
    result = CFRetain(result);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

CFTypeRef __carEndpoint_sendiAPMessage_block_invoke(uint64_t a1)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(*(_QWORD *)(a1 + 40) + 288);
  if (result)
    result = CFRetain(result);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t __carEndpoint_requestSiri_block_invoke(uint64_t a1)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t DerivedStorage;

  v2 = *(_DWORD *)(a1 + 88);
  result = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(result + 152) || (v4 = result, !*(_DWORD *)(result + 204)))
  {
    v6 = -16723;
    goto LABEL_21;
  }
  if (v2 != 4)
  {
LABEL_13:
    v6 = 0;
    goto LABEL_21;
  }
  if (!*(_BYTE *)(result + 57))
    goto LABEL_35;
  result = CFDictionaryGetInt64();
  if (!(_DWORD)result)
  {
    if (gLogCategory_APEndpointCarPlay <= 60)
    {
      if (gLogCategory_APEndpointCarPlay != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        result = LogPrintF();
    }
    goto LABEL_18;
  }
  if ((_DWORD)result == -1)
  {
LABEL_35:
    result = APSLogErrorAt();
LABEL_18:
    v6 = -16726;
    goto LABEL_21;
  }
  v5 = *(_DWORD *)(v4 + 368);
  if ((v5 != 1 || !*(_DWORD *)(v4 + 372)) && !*(_BYTE *)(v4 + 424))
    goto LABEL_13;
  if (gLogCategory_APEndpointCarPlay <= 50)
  {
    if (gLogCategory_APEndpointCarPlay != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      result = LogPrintF();
  }
  v6 = -16727;
LABEL_21:
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v7 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_DWORD *)(v7 + 204);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = *(_BYTE *)(v7 + 412);
    v8 = *(_DWORD *)(a1 + 88);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    result = CFDictionaryGetInt64();
    if (result)
      result = APSNetworkClockNTPConvertNTPToUpTicks();
    if (v8 <= 4 && ((1 << v8) & 0x16) != 0 && !*(_QWORD *)(DerivedStorage + 416))
    {
      if (gLogCategory_APEndpointCarPlay <= 50)
      {
        if (gLogCategory_APEndpointCarPlay != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        {
          mach_absolute_time();
          mach_absolute_time();
          UpTicksToMilliseconds();
          result = LogPrintF();
        }
      }
      *(_QWORD *)(DerivedStorage + 416) = 0;
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
  }
  return result;
}

uint64_t __carEndpoint_requestSiri_block_invoke_2(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 424) = 1;
  return result;
}

void carEndpoint_jarvisInitiationComplete(uint64_t a1, char a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  _QWORD v5[5];
  char v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(NSObject **)(DerivedStorage + 144);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __carEndpoint_jarvisInitiationComplete_block_invoke;
  v5[3] = &__block_descriptor_tmp_270;
  v5[4] = DerivedStorage;
  v6 = a2;
  dispatch_async(v4, v5);
}

uint64_t __carEndpoint_jarvisInitiationComplete_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  *(_BYTE *)(v1 + 424) = 0;
  if (!*(_BYTE *)(result + 40))
    *(_QWORD *)(v1 + 416) = 0;
  return result;
}

uint64_t __carEndpoint_requestUI_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 40) + 204);
  return result;
}

void carEndpoint_recordRequestUI(uint64_t a1, const __CFString *a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFStringRef *i;
  NSObject *v9;
  _QWORD v10[7];
  char v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  for (i = (CFStringRef *)off_1E826CF70;
        *((unsigned __int8 *)i - 16) != a3
     || !FigCFEqual()
     || ((0x740uLL >> v7) & 1) == 0 && (!a2 || (unint64_t)CFStringFind(a2, *i, 1uLL).location);
        i += 4)
  {
    if (++v7 == 11)
    {
      APSLogErrorAt();
      return;
    }
  }
  v9 = *(NSObject **)(DerivedStorage + 144);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = __carEndpoint_recordRequestUI_block_invoke;
  v10[3] = &__block_descriptor_tmp_297;
  v10[4] = DerivedStorage;
  v10[5] = a1;
  v10[6] = v7;
  v11 = a3;
  dispatch_sync(v9, v10);
}

uint64_t __carEndpoint_recordRequestUI_block_invoke(uint64_t result)
{
  uint64_t v1;
  _DWORD *v2;

  if (*(_QWORD *)(*(_QWORD *)(result + 32) + 240))
  {
    v1 = result;
    result = carEndpoint_getStreamInfoForSubtype();
    if (result)
    {
      v2 = (_DWORD *)result;
      if (*(_BYTE *)(v1 + 56))
        ++*(_DWORD *)(result + 68);
      else
        ++*(_DWORD *)(result + 104);
      result = FigCFEqual();
      if ((_DWORD)result)
      {
        ++v2[18];
      }
      else
      {
        result = FigCFEqual();
        if ((_DWORD)result)
        {
          ++v2[19];
        }
        else
        {
          result = FigCFEqual();
          if ((_DWORD)result)
          {
            ++v2[20];
          }
          else
          {
            result = FigCFEqual();
            if ((_DWORD)result)
            {
              ++v2[21];
            }
            else
            {
              result = FigCFEqual();
              if ((_DWORD)result)
              {
                ++v2[22];
              }
              else
              {
                result = FigCFEqual();
                if ((_DWORD)result)
                {
                  ++v2[23];
                }
                else
                {
                  result = FigCFEqual();
                  if ((_DWORD)result)
                  {
                    ++v2[24];
                  }
                  else
                  {
                    result = FigCFEqual();
                    if ((_DWORD)result)
                    {
                      ++v2[25];
                    }
                    else
                    {
                      result = FigCFEqual();
                      if ((_DWORD)result)
                      {
                        ++v2[27];
                      }
                      else
                      {
                        result = FigCFEqual();
                        if ((_DWORD)result)
                        {
                          ++v2[28];
                        }
                        else
                        {
                          result = FigCFEqual();
                          if ((_DWORD)result)
                            ++v2[29];
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t carEndpoint_validateViewAreaParams(uint64_t a1, const void *a2, uint64_t a3, const __CFArray *a4)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  const void *v11;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  CFIndex v14;
  const __CFArray *v15;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 248));
  if (Count < 1)
  {
LABEL_5:
    v14 = 0;
  }
  else
  {
    v9 = Count;
    v10 = 0;
    v11 = (const void *)*MEMORY[0x1E0CA4588];
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 248), v10);
      Value = CFDictionaryGetValue(ValueAtIndex, v11);
      if (CFEqual(a2, Value))
        break;
      if (v9 == ++v10)
        goto LABEL_5;
    }
    v15 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA45E0]);
    v14 = CFArrayGetCount(v15);
  }
  if (a3 >= 1 && v14 <= a3)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  else if (a4)
  {
    v17 = 0;
    v18 = &v17;
    v19 = 0x2000000000;
    v20 = 0;
    CFArrayGetCount(a4);
    CFArrayApplyBlock();
    a4 = (const __CFArray *)*((unsigned int *)v18 + 6);
    if ((_DWORD)a4)
      APSLogErrorAt();
    _Block_object_dispose(&v17, 8);
  }
  return (uint64_t)a4;
}

void __carEndpoint_updateViewArea_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, _QWORD, uint64_t);
  uint64_t v5;
  __CFDictionary *v6;

  if (carEndpoint_getScreenStreamForDisplayUUID())
  {
    v2 = *(_QWORD *)(a1 + 56);
    CMBaseObject = FigEndpointStreamGetCMBaseObject();
    v4 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v4)
      v4(CMBaseObject, *MEMORY[0x1E0CA4828], v2);
  }
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(__CFDictionary **)(v5 + 264);
  if (v6)
  {
    CFDictionarySetValue(v6, *(const void **)(a1 + 48), *(const void **)(a1 + 56));
    v5 = *(_QWORD *)(a1 + 64);
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(v5 + 204);
}

uint64_t __carEndpoint_validateViewAreaParams_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24))
  {
    v1 = result;
    result = CFGetInt64();
    v2 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8);
    if (result >= *(_QWORD *)(v1 + 40) || *(_DWORD *)(v2 + 24))
      *(_DWORD *)(v2 + 24) = -16720;
  }
  return result;
}

uint64_t carEndpoint_copyMainDisplayUuid()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v1 = *(NSObject **)(DerivedStorage + 144);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __carEndpoint_copyMainDisplayUuid_block_invoke;
  v4[3] = &unk_1E826D160;
  v4[4] = &v5;
  v4[5] = DerivedStorage;
  dispatch_sync(v1, v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t __carEndpoint_setLimitedUI_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 40);
  if (*(_BYTE *)(result + 48))
    *(_BYTE *)(v1 + 305) = *(_BYTE *)(result + 49);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(v1 + 204);
  return result;
}

const __CFArray *__carEndpoint_copyMainDisplayUuid_block_invoke(uint64_t a1)
{
  const __CFArray *result;

  result = *(const __CFArray **)(*(_QWORD *)(a1 + 40) + 248);
  if (result)
  {
    result = (const __CFArray *)CFArrayGetValueAtIndex(result, 0);
    if (result)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFDictionaryGetValue(result, (const void *)*MEMORY[0x1E0CA4588]);
      result = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      if (result)
        return (const __CFArray *)CFRetain(result);
    }
  }
  return result;
}

uint64_t __carEndpoint_setNightMode_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 40);
  if (*(_BYTE *)(result + 48))
    *(_BYTE *)(v1 + 306) = *(_BYTE *)(result + 49);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(v1 + 204);
  return result;
}

void __carEndpoint_updateVehicleInformation_block_invoke(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;
  const void *v4;

  v3 = a1[5];
  v2 = (const void *)a1[6];
  v4 = *(const void **)(v3 + 312);
  *(_QWORD *)(v3 + 312) = v2;
  if (v2)
    CFRetain(v2);
  if (v4)
    CFRelease(v4);
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = *(_DWORD *)(a1[5] + 204);
}

void carEndpoint_handleConnectedStateChanged(const void *a1)
{
  uint64_t DerivedStorage;
  int isEndpointConnected;
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  const void **v6;
  NSObject *v7;
  _QWORD block[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  isEndpointConnected = carEndpoint_isEndpointConnected();
  Mutable = CFDictionaryCreateMutable(0, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = Mutable;
  v6 = (const void **)MEMORY[0x1E0C9AE40];
  if (isEndpointConnected)
    v6 = (const void **)MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA3AB0], *v6);
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v7 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_handleConnectedStateChanged_block_invoke;
  block[3] = &unk_1E826D1D8;
  block[4] = &v9;
  block[5] = DerivedStorage;
  dispatch_sync(v7, block);
  carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E0CA3B28], *((_DWORD *)v10 + 6), v5);
  if (v5)
    CFRelease(v5);
  _Block_object_dispose(&v9, 8);
}

uint64_t __carEndpoint_handleConnectedStateChanged_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 40) + 204);
  return result;
}

uint64_t __carEndpoint_handleSenderSessionStarted_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result;
  v2 = *(_QWORD *)(result + 40);
  if (*(_DWORD *)(v2 + 212))
  {
    if (gLogCategory_APEndpointCarPlay <= 90)
    {
      if (gLogCategory_APEndpointCarPlay != -1
        || (result = _LogCategory_Initialize(), v2 = *(_QWORD *)(v1 + 40), (_DWORD)result))
      {
        result = LogPrintF();
        v2 = *(_QWORD *)(v1 + 40);
      }
    }
  }
  *(_BYTE *)(v2 + 224) = 1;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = *(_DWORD *)(v2 + 204);
  return result;
}

void __carEndpoint_handleSenderSessionFailed_block_invoke(uint64_t a1)
{
  carEndpoint_updateErrorStatusIfNotSet(*(const void **)(a1 + 32), *(_DWORD *)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 224) = 0;
}

void carEndpoint_updateErrorStatusIfNotSet(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const __CFAllocator *v6;
  __CFDictionary *Mutable;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t CMBaseObject;
  uint64_t v11;
  void (*v12)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v5 = DerivedStorage;
    if (!*(_BYTE *)(DerivedStorage + 152))
    {
      if (!*(_DWORD *)(DerivedStorage + 212))
        *(_DWORD *)(DerivedStorage + 212) = a2;
      if (a2 != -16603 || *(_BYTE *)(DerivedStorage + 40))
      {
        v6 = CFGetAllocator(a1);
        Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFDictionarySetInt64();
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA3AC0], (const void *)*MEMORY[0x1E0CA3AA0]);
        carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E0CA3B50], *(_DWORD *)(v5 + 204), Mutable);
        if (Mutable)
          CFRelease(Mutable);
      }
      else
      {
        if (gLogCategory_APEndpointCarPlay <= 30
          && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v8 = *(_QWORD *)(v5 + 216);
        if (v8)
        {
          v9 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 96);
          if (v9)
            v9(v8, 0, 0, 0, 0);
          CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(v5 + 216));
          if (CMBaseObject)
          {
            v11 = CMBaseObject;
            v12 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
            if (v12)
              v12(v11);
          }
        }
      }
    }
  }
}

void __carEndpoint_getMetrics_block_invoke(uint64_t a1)
{
  const __CFArray *v2;
  const void *v3;
  CFAllocatorRef v4;
  uint64_t CMBaseObject;
  unsigned int (*v6)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  CFAllocatorRef v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t *);
  const __CFAllocator *v10;
  const void *MutableCopy;
  CFStringRef v12;
  uint64_t v13;
  const void *v14;
  const __CFDictionary *v15;
  void *Value;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  uint64_t v25;
  CFTypeRef cf;

  v2 = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v2
    && CFArrayGetCount(v2) >= 1
    && gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v3 = *(const void **)(a1 + 48);
    CMBaseObjectGetDerivedStorage();
    v25 = 0;
    cf = 0;
    if (carEndpoint_getStreamInfoForSubtype()
      && (v4 = CFGetAllocator(v3),
          CMBaseObject = FigEndpointStreamGetCMBaseObject(),
          (v6 = *(unsigned int (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48)) != 0)
      && !v6(CMBaseObject, CFSTR("AudioInputStatistics"), v4, &cf)
      && (v7 = CFGetAllocator(v3),
          v8 = FigEndpointStreamGetCMBaseObject(),
          (v9 = *(unsigned int (**)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48)) != 0)
      && !v9(v8, CFSTR("ConnectionID"), v7, &v25))
    {
      if (!cf)
      {
        MutableCopy = 0;
LABEL_26:
        CFDictionaryApplyFunction(*(CFDictionaryRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), (CFDictionaryApplierFunction)carEndpoint_collectStreamAnalyticsFromStats, *(void **)(a1 + 48));
        v15 = *(const __CFDictionary **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
        Value = (void *)CFDictionaryGetValue(v15, CFSTR("showTime"));
        if (Value)
          CFDictionaryApplyFunction(v15, (CFDictionaryApplierFunction)carEndpoint_logStreamStats, Value);
        v17 = *(_QWORD **)(a1 + 56);
        v18 = v17[41];
        if (v18)
        {
          v19 = v17[42] % v17[43];
          v20 = *(const void **)(v18 + 8 * v19);
          v21 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
          *(_QWORD *)(v18 + 8 * v19) = v21;
          if (v21)
            CFRetain(v21);
          if (v20)
            CFRelease(v20);
          ++*(_QWORD *)(*(_QWORD *)(a1 + 56) + 336);
        }
        if (MutableCopy)
          CFRelease(MutableCopy);
        goto LABEL_36;
      }
      v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
      if (!MutableCopy)
      {
        v12 = 0;
        goto LABEL_19;
      }
      v12 = CFStringCreateWithFormat(v10, 0, CFSTR("%llu-AudioInput"), v25);
      if (v12)
      {
        FigCFDictionarySetValue();
LABEL_19:
        if (cf)
          CFRelease(cf);
        if (v12)
          CFRelease(v12);
        if (MutableCopy)
        {
          v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v14 = *(const void **)(v13 + 24);
          *(_QWORD *)(v13 + 24) = MutableCopy;
          CFRetain(MutableCopy);
          if (v14)
            CFRelease(v14);
        }
        goto LABEL_26;
      }
      CFRelease(MutableCopy);
    }
    else
    {
      v12 = 0;
    }
    MutableCopy = 0;
    goto LABEL_19;
  }
LABEL_36:
  v22 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (v22)
    CFRelease(v22);
  v23 = *(const void **)(a1 + 48);
  if (v23)
    CFRelease(v23);
  v24 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v24)
    CFRelease(v24);
}

void carEndpoint_collectStreamAnalyticsFromStats(uint64_t a1, const void *a2)
{
  CFTypeID v3;

  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v3 = CFGetTypeID(a2);
    if (v3 == CFDictionaryGetTypeID())
    {
      if (FigCFDictionaryGetInt32IfPresent())
      {
        if (FigCFDictionaryGetInt32IfPresent())
          FigCFDictionaryGetInt32IfPresent();
      }
    }
  }
}

uint64_t __carEndpoint_getStreamInfoForDisplayUUID_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24))
  {
    v3 = result;
    carEndpoint_getDisplayUUIDForStream();
    result = FigCFEqual();
    if ((_DWORD)result)
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24) = a2;
  }
  return result;
}

void carEndpoint_logStreamStats(const __CFString *a1, const void *a2, const void *a3)
{
  __CFDictionary *Mutable;
  __CFDictionary *v7;

  if (CFStringCompare(a1, CFSTR("showTime"), 0))
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v7 = Mutable;
      CFDictionaryAddValue(Mutable, CFSTR("showTime"), a3);
      CFDictionaryAddValue(v7, a1, a2);
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFRelease(v7);
    }
  }
}

void carEndpoint_overrideFeatureKeyWithPrefValue(int a1, CFArrayRef theArray, const void *a3)
{
  CFIndex CountOfValue;
  int v6;
  int IntWithDefault;
  CFIndex FirstIndexOfValue;
  CFRange v9;
  CFRange v10;

  v9.length = CFArrayGetCount(theArray);
  v9.location = 0;
  CountOfValue = CFArrayGetCountOfValue(theArray, v9, a3);
  if (CountOfValue >= 2)
  {
    APSLogErrorAt();
  }
  else
  {
    v6 = CountOfValue == 1;
    IntWithDefault = APSSettingsGetIntWithDefault();
    if (IntWithDefault != v6)
    {
      if (IntWithDefault)
      {
        CFArrayAppendValue(theArray, a3);
      }
      else
      {
        v10.length = CFArrayGetCount(theArray);
        v10.location = 0;
        FirstIndexOfValue = CFArrayGetFirstIndexOfValue(theArray, v10, a3);
        CFArrayRemoveValueAtIndex(theArray, FirstIndexOfValue);
      }
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
  }
}

void __carEndpoint_createInfoRequestFeatureList_block_invoke(uint64_t a1, CFURLRef anURL)
{
  __CFArray *v2;
  CFStringRef v3;

  v2 = *(__CFArray **)(a1 + 32);
  v3 = CFURLGetString(anURL);
  CFArrayAppendValue(v2, v3);
}

uint64_t __carEndpoint_validateEnabledFeaturesWithAccessory_block_invoke(_QWORD *a1, CFTypeRef cf)
{
  CFTypeID v4;
  uint64_t result;

  v4 = CFGetTypeID(cf);
  if (v4 == CFDictionaryGetTypeID())
  {
    if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("viewAreaSupportsFocusTransfer")) && CFDictionaryGetInt64())
      *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
    result = CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("safeArea"));
    if ((_DWORD)result)
    {
      CFDictionaryGetTypeID();
      result = CFDictionaryGetTypedValue();
      if (result)
        *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    }
  }
  else
  {
    result = APSLogErrorAt();
    ++*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  }
  return result;
}

uint64_t carEndpoint_validateInfoResponseKeyPresentForFeature(int a1, CFDictionaryRef theDict, void *key, int a4)
{
  int v5;
  uint64_t v6;

  v5 = CFDictionaryContainsKey(theDict, key);
  if (a4)
  {
    if (!v5)
    {
      if (gLogCategory_APEndpointCarPlay > 90
        || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_16;
      }
      goto LABEL_9;
    }
  }
  else if (v5 == 1)
  {
    if (gLogCategory_APEndpointCarPlay > 90
      || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_16;
    }
LABEL_9:
    LogPrintF();
LABEL_16:
    v6 = 4294950576;
    APSLogErrorAt();
    return v6;
  }
  return 0;
}

void __carEndpoint_setUpAPAccClientEndpointForIdType_block_invoke(uint64_t a1, void *a2)
{
  CFDictionaryRef v3;
  void *values;

  values = a2;
  v3 = CFDictionaryCreate(0, (const void **)&kAPEndpointCommandiAPSendMessageKey_Data, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (gLogCategory_APEndpointCarPlay <= 10
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  carEndpoint_sendCommandInternal(*(const void **)(a1 + 32), CFSTR("iAPSendMessage"), v3, 0, 0);
  if (v3)
    CFRelease(v3);
}

void carEndpoint_registerForGlobalNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  NSObject *v9;
  _QWORD block[9];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_registerForGlobalNotification_block_invoke;
  block[3] = &__block_descriptor_tmp_510;
  block[4] = a2;
  block[5] = a4;
  block[6] = DerivedStorage;
  block[7] = a3;
  block[8] = a1;
  dispatch_sync(v9, block);
}

uint64_t carEndpoint_handleOverrideTurnByTurnConfigurationChanged()
{
  uint64_t result;
  int v1;
  int v2;

  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 464))
    return APSLogErrorAt();
  FigStarkModeControllerGetCurrentMode();
  result = CFPreferencesGetAppBooleanValue(CFSTR("overrideTBTAppState"), CFSTR("com.apple.airplay"), 0);
  v1 = result;
  if (gLogCategory_APEndpointCarPlay <= 30)
  {
    if (gLogCategory_APEndpointCarPlay != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      result = LogPrintF();
  }
  if (v1)
  {
    result = CFPreferencesGetAppBooleanValue(CFSTR("iOSIsDoingTBT"), CFSTR("com.apple.airplay"), 0);
    v2 = result;
    if (gLogCategory_APEndpointCarPlay <= 50)
    {
      if (gLogCategory_APEndpointCarPlay != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        result = LogPrintF();
    }
    if (v2)
    {
      result = FigStarkModeControllerRequestModeChange();
      if ((_DWORD)result)
        return APSLogErrorAt();
    }
  }
  return result;
}

uint64_t __carEndpoint_registerForOverrideTurnByTurnConfigurationChangedNotification_block_invoke()
{
  return carEndpoint_handleOverrideTurnByTurnConfigurationChanged();
}

CFTypeRef __carEndpoint_registerForGlobalNotification_block_invoke(uint64_t a1)
{
  const char *v2;
  int *v3;
  NSObject *v4;
  CFTypeRef result;
  _QWORD v6[4];
  __int128 v7;

  v2 = *(const char **)(a1 + 32);
  v3 = *(int **)(a1 + 40);
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 48) + 456);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = __carEndpoint_registerForGlobalNotification_block_invoke_2;
  v6[3] = &__block_descriptor_tmp_509;
  v7 = *(_OWORD *)(a1 + 56);
  result = (CFTypeRef)notify_register_dispatch(v2, v3, v4, v6);
  if (**(_DWORD **)(a1 + 40) != -1)
    return CFRetain(*(CFTypeRef *)(a1 + 64));
  return result;
}

uint64_t __carEndpoint_registerForGlobalNotification_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40));
}

uint64_t carEndpoint_setupAudioStream(const void *a1, const void *a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  const void *v9;
  const __CFString *v10;
  const void *v11;
  uint64_t v12;
  __CFDictionary *Mutable;
  __CFDictionary *v14;
  uint64_t v15;
  CFAllocatorRef v16;
  uint64_t CMBaseObject;
  uint64_t (*v18)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeRef v22;
  int v23;
  int v24;
  __CFString **v25;
  const __CFAllocator *v26;
  uint64_t v27;
  const __CFString *v28;
  const __CFAllocator *v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  CFTypeRef v34;
  unint64_t v35;
  CFTypeRef cf;
  CFTypeRef v37;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v34 = 0;
  v9 = (const void *)*MEMORY[0x1E0CA4888];
  if (FigCFEqual())
  {
    if (*(_BYTE *)(DerivedStorage + 40))
      v10 = CFSTR("com.apple.airplay.car.wireless.sessionPercentageWithBufferedAudio");
    else
      v10 = CFSTR("com.apple.airplay.car.wired.sessionPercentageWithBufferedAudio");
    v11 = *(const void **)(DerivedStorage + 232);
    v12 = CMBaseObjectGetDerivedStorage();
    cf = 0;
    v37 = 0;
    v35 = 0;
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      APSLogErrorAt();
      v22 = 0;
      v21 = 4294950575;
      goto LABEL_62;
    }
    v14 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("streamType"), v9);
    v15 = *(_QWORD *)(v12 + 8);
    v16 = CFGetAllocator(a1);
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(v15);
    v18 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
    if (v18)
    {
      v19 = v18(CMBaseObject, CFSTR("CarPlayAudioFormats"), v16, &cf);
      if ((_DWORD)v19)
      {
        v21 = v19;
      }
      else
      {
        v20 = APCarPlayAudioFormatsCopyFormatsForAudioType(cf, 103, CFSTR("media"), &v35, 0, 0);
        if (!(_DWORD)v20)
        {
          CFDictionarySetInt64();
          v21 = APAudioEngineVendorCreate(v11, v14, (uint64_t (*)(CFAllocatorRef, _QWORD, _QWORD, _QWORD *))APAudioEngineBufferedCreate, &v37);
          if (!(_DWORD)v21)
          {
            v22 = v37;
            v37 = 0;
            goto LABEL_19;
          }
          APSLogErrorAt();
          if (v37)
            CFRelease(v37);
LABEL_18:
          v22 = 0;
LABEL_19:
          CFRelease(v14);
          if (cf)
            CFRelease(cf);
          if (!(_DWORD)v21)
          {
            v26 = CFGetAllocator(a1);
            v27 = APEndpointStreamBufferedAudioCreate(v26, *(CFTypeRef *)(DerivedStorage + 16), *(const void **)(DerivedStorage + 32), a4, *(const void **)(DerivedStorage + 216), v22, *(const void **)(DerivedStorage + 8), &v34);
            if (!(_DWORD)v27)
            {
              v28 = CFSTR("StreamInfo_BufferedAudio");
              v23 = 261095425;
              if (gLogCategory_APEndpointCarPlay <= 50
                && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              v24 = 261095424;
              goto LABEL_45;
            }
            v21 = v27;
          }
LABEL_62:
          APSLogErrorAt();
          goto LABEL_53;
        }
        v21 = v20;
      }
    }
    else
    {
      v21 = 4294954514;
    }
    APSLogErrorAt();
    goto LABEL_18;
  }
  if (FigCFEqual())
  {
    if (*(_BYTE *)(DerivedStorage + 40))
      v10 = CFSTR("com.apple.airplay.car.wireless.sessionPercentageWithMainAudio");
    else
      v10 = CFSTR("com.apple.airplay.car.wired.sessionPercentageWithMainAudio");
    v23 = 265289729;
    v24 = 265289728;
    v25 = kAPEndpointShowInfoKey_StreamInfo_MainAudio;
  }
  else if (FigCFEqual())
  {
    if (*(_BYTE *)(DerivedStorage + 40))
      v10 = CFSTR("com.apple.airplay.car.wireless.sessionPercentageWithAltAudio");
    else
      v10 = CFSTR("com.apple.airplay.car.wired.sessionPercentageWithAltAudio");
    v23 = 264241153;
    v24 = 264241152;
    v25 = kAPEndpointShowInfoKey_StreamInfo_AltAudio;
  }
  else if (FigCFEqual())
  {
    if (*(_BYTE *)(DerivedStorage + 40))
      v10 = CFSTR("com.apple.airplay.car.wireless.sessionPercentageWithAuxAudio");
    else
      v10 = CFSTR("com.apple.airplay.car.wired.sessionPercentageWithAuxAudio");
    v23 = 263192577;
    v24 = 263192576;
    v25 = kAPEndpointShowInfoKey_StreamInfo_AuxAudio;
  }
  else
  {
    if (!FigCFEqual())
    {
      v22 = 0;
      v21 = 4294960561;
      goto LABEL_53;
    }
    if (*(_BYTE *)(DerivedStorage + 40))
      v10 = CFSTR("com.apple.airplay.car.wireless.sessionPercentageWithOutOfBandAVVCAudio");
    else
      v10 = CFSTR("com.apple.airplay.car.wired.sessionPercentageWithOutOfBandAVVCAudio");
    v23 = 262144001;
    v24 = 262144000;
    v25 = kAPEndpointShowInfoKey_StreamInfo_OutOfBandAVVCAudio;
  }
  v28 = *v25;
  v29 = CFGetAllocator(a1);
  v30 = APEndpointStreamCarPlayAudioCreate(v29, (uint64_t)a1, *(const void **)(DerivedStorage + 16), a2, a3, (const __CFDictionary *)a4, *(const void **)(DerivedStorage + 8), *(const void **)(DerivedStorage + 216), *(const void **)(DerivedStorage + 232), *(const void **)(DerivedStorage + 256), &v34);
  if ((_DWORD)v30)
  {
    v21 = v30;
    APSLogErrorAt();
    v22 = 0;
    goto LABEL_53;
  }
  v22 = 0;
LABEL_45:
  carEndpoint_addEndpointStreamNotificationListeners();
  v31 = APEndpointCarPlayStreamInfoCreate(v34, v28, v24, v23, v10);
  if (v31)
  {
    v32 = (const void *)v31;
    if (v34)
    {
      CFRelease(v34);
      v34 = 0;
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 240), v32);
    CFRelease(v32);
    v21 = 0;
    goto LABEL_49;
  }
  APSLogErrorAt();
  v21 = 4294950575;
LABEL_53:
  if (gLogCategory_APEndpointCarPlay <= 90
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_49:
  if (v22)
    CFRelease(v22);
  return v21;
}

uint64_t carEndpoint_addEndpointStreamNotificationListeners()
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterAddListener();
}

uint64_t APEndpointCarPlayStreamInfoCreate(const void *a1, const void *a2, int a3, int a4, const void *a5)
{
  uint64_t Instance;
  uint64_t v11;

  if (APEndpointCarPlayStreamInfoGetTypeID_initOnce != -1)
    dispatch_once(&APEndpointCarPlayStreamInfoGetTypeID_initOnce, &__block_literal_global_566);
  Instance = _CFRuntimeCreateInstance();
  v11 = Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 112) = 0;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 96) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_QWORD *)(Instance + 32) = -1;
    *(_QWORD *)(Instance + 16) = CFRetain(a1);
    *(_QWORD *)(v11 + 24) = CFRetain(a2);
    *(_DWORD *)(v11 + 40) = a3;
    *(_DWORD *)(v11 + 44) = a4;
    *(_QWORD *)(v11 + 56) = CFRetain(a5);
  }
  else
  {
    APSLogErrorAt();
  }
  return v11;
}

void carEndpoint_handleStreamFailed(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5)
{
  int Int64;
  uint64_t DerivedStorage;
  NSObject *v10;
  _QWORD v11[7];
  int v12;
  int v13;

  Int64 = -71850;
  v13 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5)
    Int64 = CFDictionaryGetInt64();
  if (a2)
    CFRetain(a2);
  if (a4)
    CFRetain(a4);
  v10 = *(NSObject **)(DerivedStorage + 144);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = __carEndpoint_handleStreamFailed_block_invoke;
  v11[3] = &__block_descriptor_tmp_546;
  v11[4] = DerivedStorage;
  v11[5] = a4;
  v11[6] = a2;
  v12 = Int64;
  dispatch_async(v10, v11);
}

void carEndpoint_handleStreamResumed(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    CFRetain(a2);
  if (a4)
    CFRetain(a4);
  v7 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_handleStreamResumed_block_invoke;
  block[3] = &__block_descriptor_tmp_549;
  block[4] = DerivedStorage;
  block[5] = a4;
  block[6] = a2;
  dispatch_async(v7, block);
}

void carEndpoint_handleStreamSuspended(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    CFRetain(a2);
  if (a4)
    CFRetain(a4);
  v7 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_handleStreamSuspended_block_invoke;
  block[3] = &__block_descriptor_tmp_564;
  block[4] = DerivedStorage;
  block[5] = a4;
  block[6] = a2;
  dispatch_async(v7, block);
}

void __carEndpoint_handleStreamFailed_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;

  v2 = a1[4];
  if (*(_QWORD *)(v2 + 240))
  {
    CFArrayGetCount(*(CFArrayRef *)(v2 + 240));
    CFArrayApplyBlock();
  }
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
}

void __carEndpoint_handleStreamFailed_block_invoke_2(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[5];
  int v6;

  if (FigCFEqual())
  {
    v2 = *(const void **)(a1 + 40);
    if (v2)
    {
      CFRetain(v2);
      v3 = *(_QWORD *)(a1 + 40);
    }
    else
    {
      v3 = 0;
    }
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 48) + 144);
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 0x40000000;
    v5[2] = __carEndpoint_handleStreamFailed_block_invoke_3;
    v5[3] = &__block_descriptor_tmp_544;
    v5[4] = v3;
    v6 = *(_DWORD *)(a1 + 56);
    dispatch_async(v4, v5);
  }
}

void __carEndpoint_handleStreamFailed_block_invoke_3(uint64_t a1)
{
  const void *v2;

  carEndpoint_updateErrorStatusIfNotSet(*(const void **)(a1 + 32), *(_DWORD *)(a1 + 40));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

void __carEndpoint_handleStreamResumed_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;

  v2 = a1[4];
  if (*(_QWORD *)(v2 + 240))
  {
    CFArrayGetCount(*(CFArrayRef *)(v2 + 240));
    CFArrayApplyBlock();
  }
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
}

void __carEndpoint_handleStreamResumed_block_invoke_2(uint64_t a1, const void *a2)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD v6[6];

  if (FigCFEqual())
  {
    CFRetain(a2);
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 472);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 0x40000000;
    v6[2] = __carEndpoint_handleStreamResumed_block_invoke_3;
    v6[3] = &__block_descriptor_tmp_547;
    v6[4] = a2;
    v6[5] = v4;
    dispatch_async(v5, v6);
  }
}

void __carEndpoint_handleStreamResumed_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  CFComparisonResult v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v2 + 48) = 1;
  v3 = CFStringCompare(*(CFStringRef *)(v2 + 24), CFSTR("StreamInfo_Screen"), 0);
  v4 = *(_QWORD **)(a1 + 32);
  if (v3 == kCFCompareEqualTo && (v4[4] & 0x8000000000000000) == 0)
  {
    carEndpoint_powerLogDisplay(*(const void **)(a1 + 40), (uint64_t)v4, 1);
    v4 = *(_QWORD **)(a1 + 32);
  }
  CFRelease(v4);
}

void carEndpoint_powerLogDisplay(const void *a1, uint64_t a2, int a3)
{
  const __CFAllocator *v6;
  void *MutableCopy;
  CFAllocatorRef v8;
  uint64_t CMBaseObject;
  void (*v10)(uint64_t, _QWORD, CFAllocatorRef, void **);
  double v11;
  CFNumberRef v12;
  CFNumberRef v13;
  const void **v14;
  uint64_t v15;
  uint64_t DerivedStorage;
  CFIndex Count;
  CFIndex v18;
  CFIndex v19;
  CFNumberRef v20;
  CFNumberRef v21;
  int v22;
  unint64_t valuePtr;
  void *value;

  CMBaseObjectGetDerivedStorage();
  valuePtr = 0;
  value = 0;
  v22 = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = (void *)FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    v8 = CFGetAllocator(a1);
    CMBaseObject = FigEndpointStreamGetCMBaseObject();
    v10 = *(void (**)(uint64_t, _QWORD, CFAllocatorRef, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
    if (!v10 || (v10(CMBaseObject, *MEMORY[0x1E0CA4788], v8, &value), !value))
    {
LABEL_22:
      CFRelease(MutableCopy);
      return;
    }
    APSEventRecorderGetEventTime();
    valuePtr = (unint64_t)v11;
    v12 = CFNumberCreate(v6, kCFNumberSInt64Type, &valuePtr);
    if (v12)
    {
      v13 = v12;
      CFDictionarySetValue((CFMutableDictionaryRef)MutableCopy, CFSTR("SessionID"), v12);
      v14 = (const void **)MEMORY[0x1E0C9AE50];
      if (!a3)
        v14 = (const void **)MEMORY[0x1E0C9AE40];
      CFDictionarySetValue((CFMutableDictionaryRef)MutableCopy, CFSTR("Resume"), *v14);
      CFDictionarySetValue((CFMutableDictionaryRef)MutableCopy, CFSTR("ScreenUUID"), value);
      v15 = *(_QWORD *)(a2 + 32);
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 248));
      if (Count < 1)
        goto LABEL_17;
      v18 = Count;
      v19 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 248), v19);
        if (v15 == v19)
          break;
        if (v18 == ++v19)
          goto LABEL_17;
      }
      if (FigCFDictionaryGetValue())
      {
        LOWORD(v22) = CFDictionaryGetInt64();
        HIWORD(v22) = CFDictionaryGetInt64();
        v20 = CFNumberCreate(v6, kCFNumberSInt16Type, &v22);
        v21 = CFNumberCreate(v6, kCFNumberSInt16Type, (char *)&v22 + 2);
        CFDictionarySetValue((CFMutableDictionaryRef)MutableCopy, CFSTR("Width"), v20);
        CFDictionarySetValue((CFMutableDictionaryRef)MutableCopy, CFSTR("Height"), v21);
        PLLogRegisteredEvent();
        if (v21)
          CFRelease(v21);
        if (v20)
          CFRelease(v20);
      }
      else
      {
LABEL_17:
        PLLogRegisteredEvent();
      }
      CFRelease(v13);
    }
  }
  if (value)
    CFRelease(value);
  if (MutableCopy)
    goto LABEL_22;
}

void __carEndpoint_handleStreamSuspended_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;

  v2 = a1[4];
  if (*(_QWORD *)(v2 + 240))
  {
    CFArrayGetCount(*(CFArrayRef *)(v2 + 240));
    CFArrayApplyBlock();
  }
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
}

void __carEndpoint_handleStreamSuspended_block_invoke_2(uint64_t a1, const void *a2)
{
  const void *v4;
  uint64_t v5;
  NSObject *v6;
  CFAllocatorRef v7;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *);
  _QWORD block[6];
  CFTypeRef v11;

  v11 = 0;
  if (FigCFEqual())
  {
    v4 = *(const void **)(a1 + 40);
    if (v4)
      CFRetain(v4);
    CFRetain(a2);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(NSObject **)(*(_QWORD *)(a1 + 48) + 472);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __carEndpoint_handleStreamSuspended_block_invoke_3;
    block[3] = &__block_descriptor_tmp_562;
    block[4] = v5;
    block[5] = a2;
    dispatch_async(v6, block);
    v7 = CFGetAllocator(*(CFTypeRef *)(a1 + 40));
    CMBaseObject = FigEndpointStreamGetCMBaseObject();
    v9 = *(void (**)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v9)
      v9(CMBaseObject, *MEMORY[0x1E0CA47C8], v7, &v11);
    if (FigCFEqual())
      *(_QWORD *)(*(_QWORD *)(a1 + 48) + 416) = 0;
  }
  if (v11)
    CFRelease(v11);
}

void __carEndpoint_handleStreamSuspended_block_invoke_3(uint64_t a1)
{
  CFComparisonResult v2;
  _QWORD *v3;
  const void *v4;

  carEndpoint_updateStreamStatistics(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 1);
  v2 = CFStringCompare(*(CFStringRef *)(*(_QWORD *)(a1 + 40) + 24), CFSTR("StreamInfo_Screen"), 0);
  v3 = *(_QWORD **)(a1 + 40);
  if (v2 == kCFCompareEqualTo && (v3[4] & 0x8000000000000000) == 0)
  {
    carEndpoint_powerLogDisplay(*(const void **)(a1 + 32), (uint64_t)v3, 0);
    v3 = *(_QWORD **)(a1 + 40);
  }
  CFRelease(v3);
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
}

unint64_t carEndpoint_updateStreamStatistics(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    *(_BYTE *)(a2 + 48) = 0;
    result = APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursiveEx();
    if ((_DWORD)result)
      return result;
    result = 0;
  }
  else
  {
    if (!*(_BYTE *)(a2 + 48))
      return result;
    result = APSEventRecorderGetTimeSinceEventInMilliSecondRecursive();
  }
  *(_DWORD *)(a2 + 52) += result / 0x3E8;
  return result;
}

void _APEndpointCarPlayStreamInfoFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
    a1[7] = 0;
  }
}

void __carEndpoint_copyScreenInfoFromDisplayDescription_block_invoke(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v3;
  const void *TypedValue;
  CFTypeID v5;
  const __CFAllocator *v6;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v8;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t Int64;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  CFDictionaryRef v15;
  CGRect v16[3];
  int v17;

  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v3 = CFGetTypeID(cf);
  if (v3 != CFDictionaryGetTypeID())
    goto LABEL_22;
  FigCFDictionaryGetCGFloatIfPresent();
  FigCFDictionaryGetCGFloatIfPresent();
  FigCFDictionaryGetCGFloatIfPresent();
  FigCFDictionaryGetCGFloatIfPresent();
  if (!CGRectContainsRect(*(CGRect *)(a1 + 40), v16[2])
    || ((int)v16[2].origin.x & 1) != 0
    || ((int)v16[2].origin.y & 1) != 0
    || ((int)v16[2].size.width & 1) != 0
    || ((int)v16[2].size.height & 1) != 0)
  {
    goto LABEL_22;
  }
  CFDictionaryGetTypeID();
  TypedValue = (const void *)CFDictionaryGetTypedValue();
  if (TypedValue)
  {
    v5 = CFGetTypeID(TypedValue);
    if (v5 != CFDictionaryGetTypeID())
      goto LABEL_22;
    FigCFDictionaryGetCGFloatIfPresent();
    FigCFDictionaryGetCGFloatIfPresent();
    FigCFDictionaryGetCGFloatIfPresent();
    FigCFDictionaryGetCGFloatIfPresent();
    if (!CGRectContainsRect(v16[2], v16[1]))
      goto LABEL_22;
  }
  else
  {
    v16[1] = v16[2];
  }
  v6 = CFGetAllocator(*(CFTypeRef *)(a1 + 72));
  Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
LABEL_22:
    APSLogErrorAt();
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    return;
  }
  v8 = Mutable;
  carEndpoint_convertNonSquarePixelRectToSquarePixelRect((uint64_t)v16, v16[2].origin.x, v16[2].origin.y, v16[2].size.width, v16[2].size.height);
  DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v16[0]);
  CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CA4600], DictionaryRepresentation);
  CFRelease(DictionaryRepresentation);
  Int64 = CFDictionaryGetInt64();
  v11 = (const void *)*MEMORY[0x1E0C9AE50];
  v12 = (const void *)*MEMORY[0x1E0C9AE40];
  if (Int64)
    v13 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v13 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CA4610], v13);
  if (CFDictionaryGetInt64())
    v14 = v11;
  else
    v14 = v12;
  CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CA4608], v14);
  CFDictionaryGetInt64();
  CFDictionarySetInt64();
  carEndpoint_convertNonSquarePixelRectToSquarePixelRect((uint64_t)v16, v16[1].origin.x, v16[1].origin.y, v16[1].size.width, v16[1].size.height);
  v15 = CGRectCreateDictionaryRepresentation(v16[0]);
  CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CA45F0], v15);
  CFRelease(v15);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 160), v8);
  CFRelease(v8);
}

uint64_t carEndpoint_convertNonSquarePixelRectToSquarePixelRect(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t result;
  __int128 v11;

  v11 = *MEMORY[0x1E0C9D820];
  if (a4 <= 0.0 || a5 <= 0.0)
    return APSLogErrorAt();
  result = FigDisplayModes_ConvertNonSquarePixelSizeToSquarePixelSize();
  if (a1)
  {
    *(double *)a1 = (double)(int)(a2 * *(double *)&v11 / a4);
    *(double *)(a1 + 8) = (double)(int)(a3 * *((double *)&v11 + 1) / a5);
    *(_OWORD *)(a1 + 16) = v11;
  }
  return result;
}

void carEndpoint_handleJarvisParametersChangedNotification(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  uint64_t v4;
  uint64_t IntWithDefault;
  CFStringRef v6;
  int v7;
  int v8;
  const __CFAllocator *v9;
  const __CFAllocator *v10;
  CFMutableDictionaryRef Mutable;
  uint64_t v12;
  uint64_t v13;
  CFAllocatorRef v14;
  uint64_t CMBaseObject;
  unsigned int (*v16)(uint64_t, const __CFString *, CFAllocatorRef, char *);
  uint64_t v17;
  CFAllocatorRef v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t *);
  _QWORD block[7];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  int v30;
  const __CFString *v31;
  uint64_t v32;
  char cStr[8];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v30 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v26 = 0;
  v27 = &v26;
  v28 = 0x2000000000;
  v29 = 1;
  v22 = 0;
  v23 = &v22;
  v24 = 0x2000000000;
  v25 = 0;
  v3 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_handleJarvisParametersChangedNotification_block_invoke;
  block[3] = &unk_1E826D570;
  block[5] = &v22;
  block[6] = DerivedStorage;
  block[4] = &v26;
  dispatch_sync(v3, block);
  if (*((_BYTE *)v27 + 24))
  {
    v4 = APSGetFBOPropertyInt64();
    IntWithDefault = APSSettingsGetIntWithDefault();
    if ((_DWORD)IntWithDefault != 5000
      && gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (APCarPlayHasDeviceUnlockedSinceBoot() && APCarPlayHasSpringboardStarted())
    {
      v6 = 0;
      v7 = -1;
      if (APCarPlayIsSiriSwitchOn() && v4)
      {
        v8 = APSSettingsGetIntWithDefault();
        if (v8 != 1)
        {
          v7 = v8;
          if (gLogCategory_APEndpointCarPlay <= 50
            && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v6 = 0;
          goto LABEL_23;
        }
        if (APSSettingsGetInt64())
        {
          APSSettingsGetCString();
          if (v30)
          {
            APSLogErrorAt();
            goto LABEL_27;
          }
          v9 = CFGetAllocator(a1);
          v6 = CFStringCreateWithCString(v9, cStr, 0x8000100u);
          if (gLogCategory_APEndpointCarPlay <= 50
            && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        else
        {
          v12 = CMBaseObjectGetDerivedStorage();
          v32 = 0;
          *(_QWORD *)cStr = 0;
          v31 = 0;
          v13 = *(_QWORD *)(v12 + 8);
          v14 = CFGetAllocator(a1);
          CMBaseObject = APEndpointDescriptionGetCMBaseObject(v13);
          v16 = *(unsigned int (**)(uint64_t, const __CFString *, CFAllocatorRef, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v16)
          {
            if (!v16(CMBaseObject, CFSTR("VoiceModelLanguages"), v14, cStr))
            {
              if (*(_QWORD *)cStr)
              {
                v17 = *(_QWORD *)(v12 + 8);
                v18 = CFGetAllocator(a1);
                v19 = APEndpointDescriptionGetCMBaseObject(v17);
                v20 = *(unsigned int (**)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                if (v20)
                {
                  if (!v20(v19, CFSTR("CurrentVoiceModelLanguage"), v18, &v32)
                    && v32
                    && APCarPlayGetJarvisLanguageFromList(*(uint64_t *)cStr, v32, &v31))
                  {
                    APSLogErrorAt();
                  }
                }
              }
            }
          }
          v6 = v31;
          if (!v31)
          {
            if (gLogCategory_APEndpointCarPlay <= 50
              && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v6 = 0;
            v7 = 2;
            goto LABEL_23;
          }
        }
        v7 = 1;
      }
    }
    else
    {
      v6 = 0;
      v7 = -1;
    }
LABEL_23:
    carEndpoint_setParametersForJarvis(a1, 0, v7, IntWithDefault, v6);
    v10 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v10, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetInt64();
    carEndpoint_postNotification(a1, (const void *)*MEMORY[0x1E0CA3708], *((_DWORD *)v23 + 6), Mutable);
    if (Mutable)
      CFRelease(Mutable);
    if (v6)
      CFRelease(v6);
    goto LABEL_27;
  }
  if (gLogCategory_APEndpointCarPlay <= 60
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_27:
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v26, 8);
}

void __carEndpoint_setupNotificationsAndInitialParametersForJarvis_block_invoke(uint64_t a1)
{
  carEndpoint_handleJarvisParametersChangedNotification(*(const void **)(a1 + 32));
}

_QWORD *__carEndpoint_handleJarvisParametersChangedNotification_block_invoke(_QWORD *result)
{
  uint64_t v1;
  BOOL v2;

  v1 = result[6];
  if (*(_BYTE *)(v1 + 152))
    v2 = 0;
  else
    v2 = *(_DWORD *)(v1 + 204) != 0;
  *(_BYTE *)(*(_QWORD *)(result[4] + 8) + 24) = v2;
  *(_DWORD *)(*(_QWORD *)(result[5] + 8) + 24) = *(_DWORD *)(result[6] + 204);
  return result;
}

uint64_t carEndpoint_addEventIntervalToPerformanceDictionaryAndLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t TimeBetweenEventsInMilliSecondRecursive;

  TimeBetweenEventsInMilliSecondRecursive = APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  CFDictionarySetInt64();
  return carEndpoint_addIntervalToPerformanceDictionaryAndLog(TimeBetweenEventsInMilliSecondRecursive, a5, a6, a7);
}

void carEndpoint_addEventToPerformanceDictionaryAndLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v6;
  double v7;
  uint64_t StringWithEventRecorderTime;
  const void *v9;

  APSEventRecorderGetEventTimeRecursive();
  v7 = v6;
  CFDictionarySetDouble();
  if (a5)
  {
    if (v7 <= 0.0)
      StringWithEventRecorderTime = (uint64_t)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], "n/a", 0x8000100u);
    else
      StringWithEventRecorderTime = APSEventRecorderCreateStringWithEventRecorderTime();
    v9 = (const void *)StringWithEventRecorderTime;
    CPrintF();
    if (v9)
      CFRelease(v9);
  }
}

uint64_t carEndpoint_addIntervalToPerformanceDictionaryAndLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = CFDictionarySetInt64();
  if (a4)
    return CPrintF();
  return result;
}

uint64_t __carEndpoint_postPerformanceReport_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 40) + 204);
  return result;
}

uint64_t carEndpoint_logToMutableString(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  LODWORD(result) = CFStringAppendF();
  if ((_DWORD)result)
    return result;
  else
    return a2;
}

uint64_t carEndpoint_addSignPostTimeToDictionary()
{
  uint64_t result;
  double v1;

  result = APSEventRecorderGetEventTimeRecursive();
  if (v1 > 0.0)
  {
    result = CFDictionarySetDouble();
    if (gLogCategory_APEndpointCarPlay <= 30)
    {
      if (gLogCategory_APEndpointCarPlay != -1)
        return LogPrintF();
      result = _LogCategory_Initialize();
      if ((_DWORD)result)
        return LogPrintF();
    }
  }
  return result;
}

_QWORD *__carEndpoint_deactivateInternal_block_invoke(_QWORD *result)
{
  uint64_t v1;

  v1 = result[6];
  *(_DWORD *)(*(_QWORD *)(result[4] + 8) + 24) = *(_DWORD *)(v1 + 204);
  *(_DWORD *)(v1 + 204) = 0;
  if (!*(_DWORD *)(*(_QWORD *)(result[4] + 8) + 24))
    *(_DWORD *)(*(_QWORD *)(result[5] + 8) + 24) = *(_DWORD *)(v1 + 200);
  return result;
}

double __carEndpoint_deactivateInternal_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  _QWORD *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  void *v9;
  uint64_t DerivedStorage;
  const __CFDictionary *v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  double result;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 216);
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 216) = 0;
  v2 = *(_QWORD *)(a1 + 64);
  *(_BYTE *)(v2 + 224) = 0;
  v3 = *(const void **)(v2 + 232);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 232) = 0;
    v2 = *(_QWORD *)(a1 + 64);
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_QWORD *)(v2 + 240);
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 240) = 0;
  v4 = *(_QWORD **)(a1 + 64);
  v5 = (const void *)v4[33];
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 264) = 0;
    v4 = *(_QWORD **)(a1 + 64);
  }
  v6 = (const void *)v4[34];
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 272) = 0;
    v4 = *(_QWORD **)(a1 + 64);
  }
  v7 = (const void *)v4[54];
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 432) = 0;
    v4 = *(_QWORD **)(a1 + 64);
  }
  v8 = (const void *)v4[56];
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 448) = 0;
  }
  v9 = *(void **)(a1 + 72);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = *(const __CFDictionary **)(DerivedStorage + 440);
  if (v11)
  {
    CFDictionaryApplyFunction(v11, (CFDictionaryApplierFunction)carEndpoint_unsubscribeAndInvalidateRCS, v9);
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 440));
  }
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(const void **)(v12 + 440);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 440) = 0;
    v12 = *(_QWORD *)(a1 + 64);
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = *(_QWORD *)(v12 + 288);
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 288) = 0;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 280);
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 280) = 0;
  v15 = *(_QWORD *)(a1 + 64);
  v14 = *(const void **)(a1 + 72);
  *(_BYTE *)(v15 + 304) = 0;
  carEndpoint_deRegisterFromGlobalNotification(v14, (int *)(v15 + 320));
  v16 = *(_QWORD *)(a1 + 64);
  if (*(_BYTE *)(v16 + 57))
  {
    carEndpoint_deRegisterFromGlobalNotification(*(const void **)(a1 + 72), (int *)(v16 + 392));
    carEndpoint_deRegisterFromGlobalNotification(*(const void **)(a1 + 72), (int *)(*(_QWORD *)(a1 + 64) + 396));
    carEndpoint_deRegisterFromGlobalNotification(*(const void **)(a1 + 72), (int *)(*(_QWORD *)(a1 + 64) + 400));
    carEndpoint_deRegisterFromGlobalNotification(*(const void **)(a1 + 72), (int *)(*(_QWORD *)(a1 + 64) + 404));
    carEndpoint_deRegisterFromGlobalNotification(*(const void **)(a1 + 72), (int *)(*(_QWORD *)(a1 + 64) + 408));
    v16 = *(_QWORD *)(a1 + 64);
  }
  v17 = *(const void **)(v16 + 384);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 384) = 0;
    v16 = *(_QWORD *)(a1 + 64);
  }
  result = 0.0;
  *(_OWORD *)(v16 + 352) = 0u;
  *(_OWORD *)(v16 + 368) = 0u;
  return result;
}

void carEndpoint_deRegisterFromGlobalNotification(const void *a1, int *a2)
{
  if (*a2 != -1)
  {
    notify_cancel(*a2);
    *a2 = -1;
    CFRelease(a1);
    *a2 = -1;
  }
}

void __carEndpoint_deactivateInternal_block_invoke_3(uint64_t a1)
{
  const void *v2;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 464))
  {
    FigStarkModeControllerSetExecuteChangeHandler();
    v2 = *(const void **)(*(_QWORD *)(a1 + 32) + 464);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 464) = 0;
    }
  }
}

unint64_t __carEndpoint_deactivateInternal_block_invoke_4(uint64_t a1, uint64_t a2)
{
  uint64_t CMBaseObject;
  _QWORD *v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t);

  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterRemoveListener();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterRemoveListener();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterRemoveListener();
  CMBaseObject = FigEndpointStreamGetCMBaseObject();
  v5 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
  if (*v5 >= 2uLL)
  {
    v6 = (void (*)(uint64_t))v5[8];
    if (v6)
      v6(CMBaseObject);
  }
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v8)
    v8(v7);
  return carEndpoint_updateStreamStatistics(*(_QWORD *)(a1 + 32), a2, 0);
}

void __carEndpoint_deactivateInternal_block_invoke_5(uint64_t a1)
{
  CFSetRemoveValue(*(CFMutableSetRef *)(*(_QWORD *)(a1 + 32) + 8), *(const void **)(a1 + 40));
}

CFTypeRef __carEndpoint_postSessionStatistics_block_invoke(_QWORD *a1, double a2)
{
  const void **v3;
  CFTypeRef result;

  LODWORD(a2) = *(_DWORD *)(a1[8] + 428);
  *(double *)(*(_QWORD *)(a1[4] + 8) + 24) = (double)*(unint64_t *)&a2 / 1000.0;
  *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = APSEventRecorderGetTimeBetweenEventsInMilliSecond()
                                               / 0x3E8;
  if (*(_BYTE *)(a1[8] + 40))
    v3 = (const void **)MEMORY[0x1E0C9AE50];
  else
    v3 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1[6] + 8) + 24), CFSTR("APCarPlay_isWireless"), *v3);
  CFDictionarySetInt64();
  result = *(CFTypeRef *)(a1[8] + 240);
  if (result)
    result = CFRetain(result);
  *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = result;
  return result;
}

void __carEndpoint_postSessionStatistics_block_invoke_2(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v4;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *);
  CFAllocatorRef v7;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *);
  CFTypeRef v10;
  CFTypeRef cf;

  v10 = 0;
  cf = 0;
  v4 = CFGetAllocator(*(CFTypeRef *)(a1 + 64));
  CMBaseObject = FigEndpointStreamGetCMBaseObject();
  v6 = *(void (**)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (v6)
    v6(CMBaseObject, *MEMORY[0x1E0CA4788], v4, &cf);
  v7 = CFGetAllocator(*(CFTypeRef *)(a1 + 64));
  v8 = FigEndpointStreamGetCMBaseObject();
  v9 = *(void (**)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (v9)
    v9(v8, *MEMORY[0x1E0CA47C8], v7, &v10);
  if (*(_BYTE *)(a2 + 48) == 1
    && CFStringCompare(*(CFStringRef *)(a2 + 24), CFSTR("StreamInfo_Screen"), 0) == kCFCompareEqualTo
    && (*(_QWORD *)(a2 + 32) & 0x8000000000000000) == 0)
  {
    carEndpoint_powerLogDisplay(*(const void **)(a1 + 64), a2, 0);
  }
  if (!FigCFEqual())
  {
    carEndpoint_updateStreamStatistics(*(_QWORD *)(a1 + 64), a2, 0);
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      AppendPrintF();
    }
    if (FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual())
    {
      CFDictionarySetDouble();
    }
  }
  if (FigCFEqual())
  {
    CFDictionarySetInt64();
  }
  else if (FigCFEqual())
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) += *(_DWORD *)(a2 + 64);
  }
  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
}

uint64_t __carEndpoint_postSessionStatistics_block_invoke_3(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 448);
  if (result)
    return CFDictionaryApplyBlock();
  return result;
}

void __carEndpoint_postSessionStatistics_block_invoke_4(uint64_t a1, const void *a2, const void *a3)
{
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), a2, a3);
}

uint64_t __carEndpoint_resetEventRecorderEventsAndStatistics_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 428) = 0;
  return result;
}

uint64_t carEndpoint_unsubscribeAndInvalidateRCS()
{
  uint64_t result;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  result = FigEndpointRemoteControlSessionGetCMBaseObject();
  if (result)
  {
    v1 = result;
    result = CMBaseObjectGetVTable();
    v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 24);
    if (v2)
      return v2(v1);
  }
  return result;
}

void carEndpoint_handleRCSClosed(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  unsigned int (*v8)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v9;
  NSObject *v10;
  _QWORD v11[7];
  CFTypeRef v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = 0;
  CMBaseObject = FigEndpointRemoteControlSessionGetCMBaseObject();
  v8 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (!v8 || v8(CMBaseObject, CFSTR("SessionID"), *MEMORY[0x1E0C9AE00], &v12))
  {
    APSLogErrorAt();
  }
  else
  {
    if (a2)
      CFRetain(a2);
    if (v12)
    {
      CFRetain(v12);
      v9 = v12;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(NSObject **)(DerivedStorage + 144);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = __carEndpoint_handleRCSClosed_block_invoke;
    v11[3] = &__block_descriptor_tmp_757;
    v11[4] = v9;
    v11[5] = a4;
    v11[6] = a2;
    dispatch_async(v10, v11);
  }
  if (v12)
    CFRelease(v12);
}

void __carEndpoint_handleRCSClosed_block_invoke(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  const void **v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void **v8;

  v2 = *(const void **)(a1 + 32);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 440), v2);
  v4 = (const void **)(DerivedStorage + 72);
  if (FigCFEqual()
    || (v4 = (const void **)(DerivedStorage + 88), FigCFEqual())
    || (v4 = (const void **)(DerivedStorage + 96), FigCFEqual())
    || (v4 = (const void **)(DerivedStorage + 112), FigCFEqual()))
  {
    v5 = *v4;
    if (!*v4)
      goto LABEL_11;
    goto LABEL_10;
  }
  v8 = (const void **)(DerivedStorage + 128);
  if (FigCFEqual())
  {
    v5 = *v8;
    v4 = v8;
    if (*v8)
    {
LABEL_10:
      CFRelease(v5);
      *v4 = 0;
    }
  }
LABEL_11:
  v6 = *(const void **)(a1 + 48);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 32);
  if (v7)
    CFRelease(v7);
}

uint64_t carEndpoint_RequestCarUI(const void *a1, uint64_t a2, const __CFURL *a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  CFStringRef v7;
  __CFDictionary *v8;
  uint64_t v9;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    goto LABEL_17;
  v6 = Mutable;
  if (!a3)
    goto LABEL_10;
  v7 = CFURLGetString(a3);
  if (v7)
  {
    a3 = (const __CFURL *)v7;
    v8 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v8)
    {
      v6 = v8;
      CFDictionarySetValue(v8, CFSTR("url"), a3);
LABEL_10:
      v9 = carEndpoint_sendCommandInternal(a1, CFSTR("requestUI"), v6, 0, 0);
      if ((_DWORD)v9)
        APSLogErrorAt();
      else
        carEndpoint_recordRequestUI((uint64_t)a1, (const __CFString *)a3, 0);
      goto LABEL_12;
    }
LABEL_17:
    APSLogErrorAt();
    return 4294950575;
  }
  APSLogErrorAt();
  v9 = 4294950576;
LABEL_12:
  CFRelease(v6);
  return v9;
}

uint64_t carEndpoint_DisableBluetooth(const void *a1, const void *a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  uint64_t v6;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v5 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("deviceID"), a2);
      v6 = carEndpoint_sendCommandInternal(a1, CFSTR("disableBluetooth"), v5, 0, 0);
      if ((_DWORD)v6)
        APSLogErrorAt();
      CFRelease(v5);
    }
    else
    {
      APSLogErrorAt();
      return 4294950575;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950576;
  }
  return v6;
}

uint64_t carEndpoint_DuckAudio(const void *a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  const void *Value;
  const void *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  uint64_t *v16;
  _QWORD v17[9];
  _QWORD v18[7];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD block[9];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;

  v24 = 0;
  v25 = &v24;
  v26 = 0x2000000000;
  v27 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  block[8] = 0;
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a2)
  {
    APSLogErrorAt();
    v16 = v25;
    v14 = 4294950576;
LABEL_27:
    *((_DWORD *)v16 + 6) = v14;
    goto LABEL_24;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v16 = v25;
    v14 = 4294950575;
    goto LABEL_27;
  }
  v6 = Mutable;
  if (FigCFDictionaryGetDoubleIfPresent())
    CFDictionarySetDouble();
  if (FigCFDictionaryGetDoubleIfPresent())
    CFDictionarySetDouble();
  Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3980]);
  if (!Value)
  {
    APSLogErrorAt();
    *((_DWORD *)v25 + 6) = -16720;
    goto LABEL_23;
  }
  v8 = Value;
  if (!CFEqual(Value, (CFTypeRef)*MEMORY[0x1E0CA3970]))
  {
    if (CFEqual(v8, (CFTypeRef)*MEMORY[0x1E0CA3978]))
    {
      v19 = 0;
      v20 = &v19;
      v21 = 0x2000000000;
      v22 = 0;
      v10 = *(NSObject **)(DerivedStorage + 144);
      v11 = MEMORY[0x1E0C809B0];
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 0x40000000;
      v18[2] = __carEndpoint_DuckAudio_block_invoke_2;
      v18[3] = &unk_1E826D858;
      v18[5] = DerivedStorage;
      v18[6] = a1;
      v18[4] = &v19;
      dispatch_sync(v10, v18);
      if (v20[3])
      {
        v12 = *(NSObject **)(DerivedStorage + 144);
        v17[0] = v11;
        v17[1] = 0x40000000;
        v17[2] = __carEndpoint_DuckAudio_block_invoke_3;
        v17[3] = &unk_1E826D8A0;
        v17[6] = a1;
        v17[7] = v6;
        v17[4] = &v19;
        v17[5] = DerivedStorage;
        v17[8] = a1;
        dispatch_sync(v12, v17);
      }
      else
      {
        v13 = carEndpoint_sendCommandInternal(a1, CFSTR("unduckAudio"), v6, 0, 0);
        *((_DWORD *)v25 + 6) = v13;
        if (v13)
          APSLogErrorAt();
      }
      _Block_object_dispose(&v19, 8);
      goto LABEL_23;
    }
    *((_DWORD *)v25 + 6) = -16720;
    goto LABEL_19;
  }
  v9 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_DuckAudio_block_invoke;
  block[3] = &unk_1E826D830;
  block[4] = &v24;
  block[5] = DerivedStorage;
  block[6] = a1;
  block[7] = v6;
  dispatch_sync(v9, block);
  if (*((_DWORD *)v25 + 6))
LABEL_19:
    APSLogErrorAt();
LABEL_23:
  CFRelease(v6);
  v14 = *((unsigned int *)v25 + 6);
LABEL_24:
  _Block_object_dispose(&v24, 8);
  return v14;
}

uint64_t carEndpoint_SetHIDInputMode(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  _QWORD v9[8];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  if (a3)
    CFRetain(a3);
  v7 = *(NSObject **)(DerivedStorage + 144);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = __carEndpoint_SetHIDInputMode_block_invoke;
  v9[3] = &__block_descriptor_tmp_797;
  v9[4] = DerivedStorage;
  v9[5] = a2;
  v9[6] = a3;
  v9[7] = a1;
  dispatch_async(v7, v9);
  return 0;
}

uint64_t carEndpoint_CopyHIDInputMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  uint64_t v8;
  _QWORD v10[8];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(NSObject **)(DerivedStorage + 144);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = __carEndpoint_CopyHIDInputMode_block_invoke;
  v10[3] = &unk_1E826D8E8;
  v10[4] = &v11;
  v10[5] = DerivedStorage;
  v10[6] = a2;
  v10[7] = a4;
  dispatch_sync(v7, v10);
  v8 = 0;
  if (*((_DWORD *)v12 + 6))
  {
    APSLogErrorAt();
    v8 = *((unsigned int *)v12 + 6);
  }
  _Block_object_dispose(&v11, 8);
  return v8;
}

uint64_t carEndpoint_SendCommand(const void *a1, const __CFString *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5)
{
  NSObject **DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t StructRepresentation;
  uint64_t v17;
  dispatch_time_t v18;
  NSObject *v19;
  _QWORD block[7];
  int v22;
  _OWORD v23[2];

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  if (FigServer_IsAirplayd() && CFStringCompare(a2, CFSTR("modesChanged"), 0) == kCFCompareEqualTo)
  {
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMBaseObjectGetDerivedStorage();
    v15 = dispatch_semaphore_create(0);
    memset(v23, 0, sizeof(v23));
    StructRepresentation = APStarkModeCreateStructRepresentation(a3, v23);
    if ((_DWORD)StructRepresentation)
    {
      v13 = StructRepresentation;
    }
    else
    {
      if (gLogCategory_APEndpointCarPlay <= 50
        && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      carEndpoint_takeActionOnModeChanges(a1, v23);
      v17 = carEndpoint_sendCommandInternal(a1, CFSTR("modesChanged"), a3, 1, v15);
      if (!(_DWORD)v17)
      {
        if (gLogCategory_APEndpointCarPlay <= 20
          && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v18 = dispatch_time(0, 250000000);
        if (dispatch_semaphore_wait(v15, v18)
          && gLogCategory_APEndpointCarPlay <= 60
          && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v13 = 0;
        goto LABEL_31;
      }
      v13 = v17;
    }
    APSLogErrorAt();
LABEL_31:
    dispatch_release(v15);
    goto LABEL_32;
  }
  v11 = carEndpoint_validateRuntimeFeaturesWithAccessory((uint64_t)a1, a2, 1);
  if ((_DWORD)v11)
  {
    v13 = v11;
    APSLogErrorAt();
  }
  else
  {
    if (gLogCategory_APEndpointCarPlay <= 50
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (a2)
    {
      v12 = carEndpoint_sendCommandInternal(a1, a2, a3, 0, 0);
      v13 = 0;
      if ((_DWORD)v12)
      {
        v14 = v12;
        APSLogErrorAt();
        v13 = v14;
      }
    }
    else
    {
      APSLogErrorAt();
      v13 = 4294950576;
    }
  }
LABEL_32:
  if (a4)
  {
    CFRetain(a1);
    v19 = *DerivedStorage;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __carEndpoint_SendCommand_block_invoke;
    block[3] = &__block_descriptor_tmp_801;
    block[4] = a4;
    block[5] = a1;
    v22 = v13;
    block[6] = a5;
    dispatch_async(v19, block);
  }
  return v13;
}

uint64_t carEndpoint_CreateRemoteControlSession(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  uint64_t FigEndpoint;
  uint64_t DerivedStorage;
  uint64_t v8;
  const __CFString *Value;
  const __CFString *v10;
  const __CFString *v11;
  uint64_t *v12;
  uint64_t v13;
  const __CFString *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t *v18;
  _QWORD block[13];
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;

  v25 = 0;
  v26 = &v25;
  v27 = 0x2000000000;
  v28 = 0;
  FigEndpoint = FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v21 = 0;
  v22 = &v21;
  v23 = 0x2000000000;
  v24 = 0;
  if (!a3
    || (v8 = DerivedStorage,
        (Value = (const __CFString *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA38E0])) == 0))
  {
    APSLogErrorAt();
    v18 = v26;
    v16 = 4294950576;
LABEL_25:
    *((_DWORD *)v18 + 6) = v16;
    goto LABEL_22;
  }
  v10 = Value;
  v11 = (const __CFString *)*MEMORY[0x1E0CA38C8];
  if (CFStringCompare(Value, (CFStringRef)*MEMORY[0x1E0CA38C8], 0))
  {
    v11 = (const __CFString *)*MEMORY[0x1E0CA38B8];
    if (CFStringCompare(v10, (CFStringRef)*MEMORY[0x1E0CA38B8], 0))
    {
      v11 = (const __CFString *)*MEMORY[0x1E0CA38C0];
      if (CFStringCompare(v10, (CFStringRef)*MEMORY[0x1E0CA38C0], 0))
      {
        v11 = (const __CFString *)*MEMORY[0x1E0CA38B0];
        if (CFStringCompare(v10, (CFStringRef)*MEMORY[0x1E0CA38B0], 0))
        {
          v11 = (const __CFString *)*MEMORY[0x1E0CA38A8];
          if (CFStringCompare(v10, (CFStringRef)*MEMORY[0x1E0CA38A8], 0))
          {
            if (gLogCategory_APEndpointCarPlay <= 90
              && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v18 = v26;
            v16 = 4294960561;
            goto LABEL_25;
          }
          if (*(_BYTE *)(v8 + 120))
          {
            v12 = (uint64_t *)(v8 + 128);
            goto LABEL_21;
          }
          goto LABEL_27;
        }
        if (*(_BYTE *)(v8 + 104))
        {
          v12 = (uint64_t *)(v8 + 112);
          goto LABEL_21;
        }
LABEL_27:
        APSLogErrorAt();
        v18 = v26;
        v16 = 4294949690;
        goto LABEL_25;
      }
      if (!*(_BYTE *)(v8 + 80))
        goto LABEL_27;
      v12 = (uint64_t *)(v8 + 96);
    }
    else
    {
      if (!*(_BYTE *)(v8 + 80))
        goto LABEL_27;
      v12 = (uint64_t *)(v8 + 88);
    }
  }
  else
  {
    if (!*(_BYTE *)(v8 + 65))
      goto LABEL_27;
    v12 = (uint64_t *)(v8 + 72);
  }
LABEL_21:
  v13 = *v12;
  v22[3] = (uint64_t)v12;
  v14 = computeLogStringForRCSClientType(v11);
  v15 = *(NSObject **)(v8 + 144);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_CreateRemoteControlSession_block_invoke;
  block[3] = &unk_1E826D930;
  block[6] = v8;
  block[7] = FigEndpoint;
  v20 = v13 != 0;
  block[8] = v10;
  block[9] = a3;
  block[4] = &v25;
  block[5] = &v21;
  block[10] = v14;
  block[11] = a1;
  block[12] = a2;
  dispatch_sync(v15, block);
  v16 = *((unsigned int *)v26 + 6);
LABEL_22:
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  return v16;
}

uint64_t carEndpoint_CreateCommChannel(uint64_t a1, const __CFDictionary *a2, _QWORD *a3)
{
  uint64_t FigEndpoint;
  uint64_t DerivedStorage;
  const __CFString *Value;
  const __CFString *v9;
  uint64_t v10;
  NSObject *v11;
  CFTypeRef v12;
  const void *v13;
  uint64_t v14;
  uint64_t *v16;
  int v17;
  _QWORD block[10];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;

  v27 = 0;
  v28 = &v27;
  v29 = 0x2000000000;
  v30 = 0;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = 0;
  FigEndpoint = FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Value = (const __CFString *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA38E0]);
  if (!Value)
  {
    APSLogErrorAt();
    v16 = v28;
    v17 = -16720;
LABEL_33:
    *((_DWORD *)v16 + 6) = v17;
    goto LABEL_28;
  }
  v9 = Value;
  if (CFStringCompare(Value, (CFStringRef)*MEMORY[0x1E0CA38C8], 0) == kCFCompareEqualTo)
  {
    if (*(_BYTE *)(DerivedStorage + 65))
    {
      v10 = DerivedStorage + 72;
      if (!*(_QWORD *)(DerivedStorage + 72))
        goto LABEL_24;
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (CFStringCompare(v9, (CFStringRef)*MEMORY[0x1E0CA38B8], 0) == kCFCompareEqualTo)
  {
    if (*(_BYTE *)(DerivedStorage + 80))
    {
      v10 = DerivedStorage + 88;
      if (!*(_QWORD *)(DerivedStorage + 88))
        goto LABEL_24;
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (CFStringCompare(v9, (CFStringRef)*MEMORY[0x1E0CA38C0], 0) == kCFCompareEqualTo)
  {
    if (*(_BYTE *)(DerivedStorage + 80))
    {
      v10 = DerivedStorage + 96;
      if (!*(_QWORD *)(DerivedStorage + 96))
        goto LABEL_24;
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (CFStringCompare(v9, (CFStringRef)*MEMORY[0x1E0CA38B0], 0) == kCFCompareEqualTo)
  {
    if (*(_BYTE *)(DerivedStorage + 104))
    {
      v10 = DerivedStorage + 112;
      if (!*(_QWORD *)(DerivedStorage + 112))
        goto LABEL_24;
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (CFStringCompare(v9, (CFStringRef)*MEMORY[0x1E0CA38A8], 0))
  {
    if (gLogCategory_APEndpointCarPlay <= 90
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v16 = v28;
    v17 = -6735;
    goto LABEL_33;
  }
  if (!*(_BYTE *)(DerivedStorage + 120))
  {
LABEL_35:
    APSLogErrorAt();
    v16 = v28;
    v17 = -17606;
    goto LABEL_33;
  }
  v10 = DerivedStorage + 128;
  if (*(_QWORD *)(DerivedStorage + 128))
  {
LABEL_36:
    APSLogErrorAt();
    v16 = v28;
    v17 = -16727;
    goto LABEL_33;
  }
LABEL_24:
  v24[3] = v10;
  v11 = *(NSObject **)(DerivedStorage + 144);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_CreateCommChannel_block_invoke;
  block[3] = &unk_1E826D958;
  block[4] = &v27;
  block[5] = &v19;
  block[6] = &v23;
  block[7] = a1;
  block[8] = a2;
  block[9] = FigEndpoint;
  dispatch_sync(v11, block);
  if (a3)
  {
    v12 = *(CFTypeRef *)v24[3];
    if (v12)
      v12 = CFRetain(v12);
    *a3 = v12;
  }
LABEL_28:
  v13 = (const void *)v20[3];
  if (v13)
    CFRelease(v13);
  v14 = *((unsigned int *)v28 + 6);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  return v14;
}

uint64_t carEndpoint_SendData(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t DerivedStorage;
  NSObject *v11;
  uint64_t v12;
  _QWORD block[13];
  _QWORD v15[4];
  _QWORD v16[4];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2000000000;
  v16[3] = 0;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2000000000;
  v15[3] = 0;
  if (a2)
  {
    v11 = *(NSObject **)(DerivedStorage + 144);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __carEndpoint_SendData_block_invoke;
    block[3] = &unk_1E826D9A8;
    block[4] = v16;
    block[5] = &v17;
    block[6] = v15;
    block[7] = DerivedStorage;
    block[8] = a2;
    block[9] = a1;
    block[10] = a4;
    block[11] = a5;
    block[12] = a3;
    dispatch_sync(v11, block);
    v12 = *((unsigned int *)v18 + 6);
    if (!a4)
      goto LABEL_5;
  }
  else
  {
    APSLogErrorAt();
    v12 = 4294950576;
    *((_DWORD *)v18 + 6) = -16720;
    if (!a4)
      goto LABEL_5;
  }
  if ((_DWORD)v12)
  {
    a4(a1, a2, v12, a5);
    v12 = *((unsigned int *)v18 + 6);
  }
LABEL_5:
  _Block_object_dispose(v15, 8);
  _Block_object_dispose(v16, 8);
  _Block_object_dispose(&v17, 8);
  return v12;
}

uint64_t carEndpoint_CloseCommChannel(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v5;
  uint64_t v6;
  _QWORD block[9];
  _QWORD v9[4];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2000000000;
  v9[3] = 0;
  if (a2)
  {
    v5 = *(NSObject **)(DerivedStorage + 144);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __carEndpoint_CloseCommChannel_block_invoke;
    block[3] = &unk_1E826D9D0;
    block[6] = a2;
    block[7] = a1;
    block[8] = DerivedStorage;
    block[4] = &v10;
    block[5] = v9;
    dispatch_sync(v5, block);
    v6 = *((unsigned int *)v11 + 6);
  }
  else
  {
    APSLogErrorAt();
    v6 = 4294950576;
    *((_DWORD *)v11 + 6) = -16720;
  }
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(&v10, 8);
  return v6;
}

uint64_t carEndpoint_RequestViewArea(const void *a1, const void *a2, uint64_t a3)
{
  __CFDictionary *Mutable;
  __CFDictionary *v7;

  CMBaseObjectGetDerivedStorage();
  if (carEndpoint_validateViewAreaParams((uint64_t)a1, a2, a3, 0)
    || (Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0)
  {
    APSLogErrorAt();
  }
  else
  {
    v7 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("uuid"), a2);
    CFDictionarySetInt64();
    if (carEndpoint_sendCommandInternal(a1, CFSTR("requestViewArea"), v7, 0, 0))
    {
      APSLogErrorAt();
    }
    else if (gLogCategory_APEndpointCarPlay <= 50
           && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFRelease(v7);
  }
  return 0;
}

uint64_t carEndpoint_CopyCurrentViewArea(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  uint64_t *v8;
  CFTypeRef v9;
  const void *v10;
  uint64_t v11;
  _QWORD v13[8];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;

  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 59))
  {
    v7 = *(NSObject **)(DerivedStorage + 144);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 0x40000000;
    v13[2] = __carEndpoint_CopyCurrentViewArea_block_invoke;
    v13[3] = &unk_1E826D9F8;
    v13[6] = a1;
    v13[7] = a2;
    v13[4] = &v18;
    v13[5] = &v14;
    dispatch_sync(v7, v13);
  }
  v8 = v15;
  v9 = (CFTypeRef)v15[3];
  if (v9)
  {
    v9 = CFRetain(v9);
    v8 = v15;
  }
  *a3 = v9;
  v10 = (const void *)v8[3];
  if (v10)
    CFRelease(v10);
  v11 = *((unsigned int *)v19 + 6);
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
  return v11;
}

uint64_t carEndpoint_AcquireAndCopyResource(uint64_t a1, uint64_t a2, const __CFDictionary *a3, _QWORD *a4)
{
  uint64_t FigEndpoint;
  uint64_t DerivedStorage;
  const void *Value;
  NSObject *v9;
  uint64_t v10;
  CFTypeRef v11;
  uint64_t v12;
  char v13;
  const void *v14;
  _QWORD block[7];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  FigEndpoint = FigEndpointExtendedGetFigEndpoint();
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (FigCFEqual())
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v17 = 0;
    v18 = &v17;
    v19 = 0x2000000000;
    v20 = 0;
    Value = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA3718]);
    if (Value)
    {
      v9 = *(NSObject **)(DerivedStorage + 144);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __carEndpoint_acquireAndCopyEndpointStream_block_invoke;
      block[3] = &unk_1E826DA20;
      block[4] = &v17;
      block[5] = Value;
      block[6] = FigEndpoint;
      dispatch_sync(v9, block);
      v10 = v18[3];
      if (v10)
      {
        v11 = *(CFTypeRef *)(v10 + 16);
        if (v11)
          v11 = CFRetain(v11);
        v12 = 0;
        *a4 = v11;
        v13 = 1;
      }
      else
      {
        APSLogErrorAt();
        v13 = 0;
        v12 = 4294960587;
      }
    }
    else
    {
      APSLogErrorAt();
      v13 = 0;
      v12 = 4294950576;
    }
    v14 = (const void *)v18[3];
    if (v14)
      CFRelease(v14);
    _Block_object_dispose(&v17, 8);
    if ((v13 & 1) != 0)
      return 0;
    APSLogErrorAt();
  }
  else
  {
    if (gLogCategory_APEndpointCarPlay > 90)
      return 4294960561;
    if (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize())
      LogPrintF();
    v12 = 4294960561;
  }
  if (gLogCategory_APEndpointCarPlay <= 90
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v12;
}

uint64_t carEndpoint_RelinquishResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  FigEndpointExtendedGetFigEndpoint();
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a3)
  {
    v4 = 4294950576;
LABEL_11:
    APSLogErrorAt();
    return v4;
  }
  if (!FigCFEqual())
  {
    v4 = 4294960561;
    goto LABEL_11;
  }
  return 0;
}

const __CFString *computeLogStringForRCSClientType(const __CFString *a1)
{
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0CA44F0], 0) == kCFCompareEqualTo)
    return CFSTR("CarPlayUpdateData");
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0CA44D8], 0) == kCFCompareEqualTo)
    return CFSTR("CarPlayLoggingData");
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0CA44D0], 0) == kCFCompareEqualTo)
    return CFSTR("CarPlayClusterControl");
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0CA44E0], 0) == kCFCompareEqualTo)
    return CFSTR("CarPlayProtocolData");
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0CA44E8], 0))
    return 0;
  return CFSTR("CarPlayProtocolData2");
}

uint64_t carEndpoint_createCommChannelInternal(const void *a1, __CFDictionary *a2, CFTypeRef *a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  const void *v9;
  CFTypeRef v10;
  const void *v11;
  unsigned int (*v12)(const void *);
  uint64_t v13;
  __CFDictionary *MutableCopy;
  const void *v15;
  const void *v16;
  const __CFAllocator *v17;
  uint64_t v18;
  const __CFAllocator *v19;
  CFMutableDictionaryRef Mutable;
  uint64_t CMBaseObject;
  uint64_t (*v22)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v23;
  uint64_t v24;
  CFTypeRef v25;
  CFTypeRef v27;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v27 = 0;
  cf = 0;
  if (gLogCategory_APEndpointCarPlay <= 30
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    if (!*(_BYTE *)(DerivedStorage + 152))
    {
      v9 = *(const void **)(DerivedStorage + 216);
      if (!v9 || (v10 = CFRetain(v9)) == 0)
      {
        APSLogErrorAt();
        a2 = 0;
        v24 = 4294950570;
        goto LABEL_35;
      }
      v11 = v10;
      v12 = *(unsigned int (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (!v12 || !v12(v11))
      {
        APSLogErrorAt();
        a2 = 0;
        v24 = 4294950570;
LABEL_34:
        CFRelease(v11);
        goto LABEL_35;
      }
      v13 = *MEMORY[0x1E0C9AE00];
      MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
      a2 = MutableCopy;
      if (!MutableCopy)
        goto LABEL_44;
      v15 = (const void *)*MEMORY[0x1E0C9AE50];
      CFDictionarySetValue(MutableCopy, CFSTR("wantsDedicatedSocket"), (const void *)*MEMORY[0x1E0C9AE50]);
      if (CFPrefs_GetInt64())
        v16 = v15;
      else
        v16 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(a2, CFSTR("publishEncryptionKeyDiagnosticMode"), v16);
      CFDictionarySetInt64();
      v17 = CFGetAllocator(a1);
      v18 = APEndpointRemoteControlSessionAirPlayCreate(v17, v11, *(_QWORD *)(DerivedStorage + 32), a2, 2, &v27);
      if ((_DWORD)v18)
      {
        v24 = v18;
        APSLogErrorAt();
        goto LABEL_34;
      }
      if (!*(_QWORD *)(DerivedStorage + 440))
      {
        v19 = CFGetAllocator(a1);
        Mutable = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        *(_QWORD *)(DerivedStorage + 440) = Mutable;
        if (!Mutable)
        {
LABEL_44:
          APSLogErrorAt();
          v24 = 4294950575;
          goto LABEL_34;
        }
      }
      CMBaseObject = FigEndpointRemoteControlSessionGetCMBaseObject();
      v22 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
      if (v22)
      {
        v23 = v22(CMBaseObject, CFSTR("SessionID"), v13, &cf);
        if (!(_DWORD)v23)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 440), cf, v27);
          if (gLogCategory_APEndpointCarPlay <= 50
            && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          if (a3)
          {
            *a3 = v27;
            v27 = 0;
          }
          v25 = cf;
          v24 = 0;
          if (a4)
          {
            *a4 = cf;
            cf = 0;
            goto LABEL_34;
          }
LABEL_32:
          if (v25)
            CFRelease(v25);
          goto LABEL_34;
        }
        v24 = v23;
      }
      else
      {
        v24 = 4294954514;
      }
      APSLogErrorAt();
      v25 = cf;
      goto LABEL_32;
    }
    APSLogErrorAt();
    a2 = 0;
    v24 = 4294950573;
  }
  else
  {
    APSLogErrorAt();
    v24 = 4294950576;
  }
LABEL_35:
  if (v27)
    CFRelease(v27);
  if (a2)
    CFRelease(a2);
  return v24;
}

void carEndpoint_handleRemoteControlSessionEvent(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  _QWORD *DerivedStorage;
  uint64_t CMBaseObject;
  unsigned int (*v9)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v10;
  unsigned int (*v11)(uint64_t, const __CFString *, _QWORD, const __CFString **);
  NSObject *v12;
  const void *v13;
  const void *v14;
  char v15;
  const void *v16;
  _QWORD block[6];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  const __CFString *v22;
  CFTypeRef v23;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v22 = 0;
  v23 = 0;
  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  CMBaseObject = FigEndpointRemoteControlSessionGetCMBaseObject();
  v9 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (!v9
    || v9(CMBaseObject, CFSTR("SessionID"), 0, &v23)
    || (v10 = FigEndpointRemoteControlSessionGetCMBaseObject(),
        (v11 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, const __CFString **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48)) == 0)
    || v11(v10, CFSTR("clientTypeUUID"), 0, &v22))
  {
    APSLogErrorAt();
LABEL_55:
    if (gLogCategory_APEndpointCarPlay <= 90
      && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_59;
  }
  if (CFStringCompare(v22, (CFStringRef)*MEMORY[0x1E0CA44F0], 0)
    && CFStringCompare(v22, (CFStringRef)*MEMORY[0x1E0CA44D8], 0)
    && CFStringCompare(v22, (CFStringRef)*MEMORY[0x1E0CA44D0], 0)
    && CFStringCompare(v22, (CFStringRef)*MEMORY[0x1E0CA44E0], 0)
    && CFStringCompare(v22, (CFStringRef)*MEMORY[0x1E0CA44E8], 0))
  {
    goto LABEL_59;
  }
  v12 = DerivedStorage[18];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carEndpoint_handleRemoteControlSessionEvent_block_invoke;
  block[3] = &unk_1E826D980;
  block[4] = &v18;
  block[5] = DerivedStorage;
  dispatch_sync(v12, block);
  if (!DerivedStorage[24] || v19[3])
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4558]) && *(_QWORD *)((char *)DerivedStorage + 172))
    {
      if (a4)
        CFRetain(a4);
      if (v23)
        CFRetain(v23);
      if (a3)
        CFRetain(a3);
      v13 = (const void *)v19[3];
      if (v13)
        CFRetain(v13);
      APSDispatchAsyncFHelper();
      if (gLogCategory_APEndpointCarPlay > 10
        || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_51;
      }
      computeLogStringForRCSClientType(v22);
      if (a3)
        CFDataGetLength((CFDataRef)a3);
    }
    else
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4560]) && *(_QWORD *)((char *)DerivedStorage + 180))
      {
        if (a4)
          CFRetain(a4);
        if (v23)
          CFRetain(v23);
        v14 = (const void *)v19[3];
        if (v14)
          CFRetain(v14);
        APSDispatchAsyncFHelper();
        if (gLogCategory_APEndpointCarPlay > 50
          || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_51;
        }
      }
      else if (gLogCategory_APEndpointCarPlay > 90
             || gLogCategory_APEndpointCarPlay == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_51;
      }
      computeLogStringForRCSClientType(v22);
    }
    LogPrintF();
LABEL_51:
    v15 = 1;
    goto LABEL_52;
  }
  if (gLogCategory_APEndpointCarPlay <= 90
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v15 = 0;
LABEL_52:
  v16 = (const void *)v19[3];
  if (v16)
    CFRelease(v16);
  if ((v15 & 1) == 0)
    goto LABEL_55;
LABEL_59:
  if (v23)
    CFRelease(v23);
  if (v22)
    CFRelease(v22);
  _Block_object_dispose(&v18, 8);
}

uint64_t __carEndpoint_handleRemoteControlSessionEvent_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 192);
  if (result)
  {
    result = FigCFWeakReferenceHolderCopyReferencedObject();
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

void carEndpoint_callDidReceiveDataOverCommChannelDelegate(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 40);
  if (v5)
    CFRelease(v5);
}

void carEndpoint_callDidCloseCommChannelDelegate(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))a1)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
}

void carEndpoint_rcsSendMessageCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v4;

  CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(a3 + 16))
  {
    CFRetain(*(CFTypeRef *)a3);
    CFRetain(*(CFTypeRef *)(a3 + 8));
    APSDispatchAsyncFHelper();
  }
  if (gLogCategory_APEndpointCarPlay <= 50
    && (gLogCategory_APEndpointCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_QWORD *)a3)
    CFRelease(*(CFTypeRef *)a3);
  v4 = *(const void **)(a3 + 8);
  if (v4)
    CFRelease(v4);
  free((void *)a3);
}

void carEndpoint_callCompletionCallback(uint64_t a1)
{
  const void *v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 16))(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 32), *(_QWORD *)(a1 + 24));
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
}

CFTypeRef __carEndpoint_acquireAndCopyEndpointStream_block_invoke(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t StreamInfoForSubtype;
  CFTypeRef result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (CFStringCompare(*(CFStringRef *)(a1 + 40), (CFStringRef)*MEMORY[0x1E0CA4880], 0)
    && CFStringCompare(*(CFStringRef *)(a1 + 40), (CFStringRef)*MEMORY[0x1E0CA48A0], 0))
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v5 = 0;
    v6 = &v5;
    v7 = 0x2000000000;
    v8 = 0;
    if (*(_QWORD *)(DerivedStorage + 240))
    {
      CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 240));
      CFArrayApplyBlock();
      StreamInfoForSubtype = v6[3];
    }
    else
    {
      StreamInfoForSubtype = 0;
    }
    _Block_object_dispose(&v5, 8);
  }
  else
  {
    StreamInfoForSubtype = carEndpoint_getStreamInfoForSubtype();
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = StreamInfoForSubtype;
  result = *(CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (result)
    return CFRetain(result);
  return result;
}

void __carEndpoint_getStreamInfoForType_block_invoke(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v4;
  uint64_t CMBaseObject;
  unsigned int (*v6)(uint64_t, _QWORD, CFAllocatorRef, CFStringRef *);
  CFStringRef theString1;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    theString1 = 0;
    v4 = CFGetAllocator(*(CFTypeRef *)(a1 + 40));
    CMBaseObject = FigEndpointStreamGetCMBaseObject();
    v6 = *(unsigned int (**)(uint64_t, _QWORD, CFAllocatorRef, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
    if (v6
      && !v6(CMBaseObject, *MEMORY[0x1E0CA4820], v4, &theString1)
      && CFStringCompare(theString1, *(CFStringRef *)(a1 + 48), 0) == kCFCompareEqualTo)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
    }
    if (theString1)
      CFRelease(theString1);
  }
}

uint64_t APAccTransportClientConnectionGetTypeID()
{
  if (gAPAccTransportClientConnectionInitOnce != -1)
    dispatch_once_f(&gAPAccTransportClientConnectionInitOnce, 0, (dispatch_function_t)_APAccTransportClientConnectionGetTypeID);
  return gAPAccTransportClientConnectionTypeID;
}

uint64_t _APAccTransportClientConnectionGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPAccTransportClientConnectionTypeID = result;
  return result;
}

uint64_t APAccTransportClientConnectionCreate(const void *a1, uint64_t *a2)
{
  uint64_t Instance;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t result;

  if (gAPAccTransportClientConnectionInitOnce != -1)
    dispatch_once_f(&gAPAccTransportClientConnectionInitOnce, 0, (dispatch_function_t)_APAccTransportClientConnectionGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v5 = Instance;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_QWORD *)(Instance + 16) = dispatch_queue_create("com.apple.APAccTransportClientConnection", 0);
    if (a1)
      v6 = CFRetain(a1);
    else
      v6 = 0;
    *(_QWORD *)(v5 + 40) = v6;
    if (gLogCategory_APAccTransportClientConnection <= 50
      && (gLogCategory_APAccTransportClientConnection != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    result = 0;
    *a2 = v5;
  }
  else
  {
    APSLogErrorAt();
    return 4294960568;
  }
  return result;
}

uint64_t APAccTransportClientConnectionOpen(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  if (APAccTransportClientConnectionOpen_once != -1)
    dispatch_once(&APAccTransportClientConnectionOpen_once, &__block_literal_global_24);
  v2 = *(NSObject **)(a1 + 16);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __APAccTransportClientConnectionOpen_block_invoke_3;
  v5[3] = &unk_1E826DAB8;
  v5[4] = &v6;
  v5[5] = a1;
  dispatch_sync(v2, v5);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t APAccTransportClientConnectionClose(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD block[7];
  _QWORD v5[3];
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x2020000000;
  v6 = 0;
  v1 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __APAccTransportClientConnectionClose_block_invoke;
  block[3] = &unk_1E826DB00;
  block[5] = v5;
  block[6] = a1;
  block[4] = &v7;
  dispatch_sync(v1, block);
  v2 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(v5, 8);
  _Block_object_dispose(&v7, 8);
  return v2;
}

uint64_t APAccTransportClientConnectionCopyEndpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t *v6;
  _QWORD v7[8];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  if (!a1 || !a3 || !a2)
  {
    APSLogErrorAt();
    v6 = v9;
    v4 = 4294960591;
LABEL_9:
    *((_DWORD *)v6 + 6) = v4;
    goto LABEL_6;
  }
  if (!*(_QWORD *)(a1 + 24))
  {
    APSLogErrorAt();
    v6 = v9;
    v4 = 4294960587;
    goto LABEL_9;
  }
  v3 = *(NSObject **)(a1 + 16);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __APAccTransportClientConnectionCopyEndpoint_block_invoke;
  v7[3] = &unk_1E826BC18;
  v7[4] = &v8;
  v7[5] = a1;
  v7[6] = a2;
  v7[7] = a3;
  dispatch_sync(v3, v7);
  v4 = *((unsigned int *)v9 + 6);
LABEL_6:
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1C9525AE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t APAccTransportClientConnectionInvalidateEndpoint(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  if (a1 && a2)
  {
    v2 = *(NSObject **)(a1 + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __APAccTransportClientConnectionInvalidateEndpoint_block_invoke;
    block[3] = &unk_1E8268E00;
    block[4] = &v6;
    block[5] = a1;
    block[6] = a2;
    dispatch_sync(v2, block);
    v3 = *((unsigned int *)v7 + 6);
  }
  else
  {
    APSLogErrorAt();
    v3 = 4294960591;
    *((_DWORD *)v7 + 6) = -6705;
  }
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1C9525ED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t APAccTransportClientEndpointGetTypeID()
{
  if (gAPAccTransportClientEndpointInitOnce != -1)
    dispatch_once_f(&gAPAccTransportClientEndpointInitOnce, 0, (dispatch_function_t)_APAccTransportClientEndpointGetTypeID);
  return gAPAccTransportClientEndpointTypeID;
}

uint64_t _APAccTransportClientEndpointGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPAccTransportClientEndpointTypeID = result;
  return result;
}

uint64_t APAccTransportClientEndpointActivate(uint64_t a1, int a2, char a3, uint64_t a4)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD block[8];
  int v8;
  char v9;
  _QWORD v10[3];
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2020000000;
  v11 = 0;
  if (a4)
  {
    v4 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __APAccTransportClientEndpointActivate_block_invoke;
    block[3] = &unk_1E826DB50;
    block[4] = a4;
    block[5] = &v12;
    v8 = a2;
    v9 = a3;
    block[6] = v10;
    block[7] = a1;
    dispatch_sync(v4, block);
    v5 = *((unsigned int *)v13 + 6);
  }
  else
  {
    APSLogErrorAt();
    v5 = 4294960591;
    *((_DWORD *)v13 + 6) = -6705;
  }
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(&v12, 8);
  return v5;
}

void sub_1C952611C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t accTransportClientEndpointDestroyEndpoint(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  const void *v4;
  int v5;
  int v6;
  const void *v7;
  const void *v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 16))
  {
    v9 = 4294960587;
LABEL_25:
    APSLogErrorAt();
    return v9;
  }
  if (*(_QWORD *)(a1 + 72))
  {
    ((void (*)(uint64_t))softLinkacc_transportClient_setConnectionAuthStatusDidChangeHandler[0])(0);
    v2 = *(const void **)(a1 + 72);
    if (v2)
    {
      _Block_release(v2);
      *(_QWORD *)(a1 + 72) = 0;
    }
  }
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 80))
    {
      softLinkacc_transportClient_setEndpointSecureTunnelDataReceiveHandler(v3, 0);
      v4 = *(const void **)(a1 + 80);
      if (v4)
      {
        _Block_release(v4);
        *(_QWORD *)(a1 + 80) = 0;
      }
    }
    v5 = ((uint64_t (*)(uint64_t))softLinkacc_transportClient_destroyEndpoint[0])(*(_QWORD *)(a1 + 48));
    if (v5)
      v6 = 50;
    else
      v6 = 90;
    if (v6 >= gLogCategory_APAccTransportClientEndpoint
      && (gLogCategory_APAccTransportClientEndpoint != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v7 = *(const void **)(a1 + 48);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a1 + 48) = 0;
    }
    v8 = *(const void **)(a1 + 64);
    if (v8)
    {
      _Block_release(v8);
      *(_QWORD *)(a1 + 64) = 0;
    }
    if ((v5 & 1) == 0)
    {
      v9 = 4294960534;
      goto LABEL_25;
    }
  }
  return 0;
}

uint64_t APAccTransportClientEndpointSetAuthStatusHandler(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  if (a2)
  {
    v2 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __APAccTransportClientEndpointSetAuthStatusHandler_block_invoke;
    block[3] = &unk_1E826DBA0;
    block[5] = &v6;
    block[6] = a1;
    block[4] = a2;
    dispatch_sync(v2, block);
    v3 = *((unsigned int *)v7 + 6);
  }
  else
  {
    APSLogErrorAt();
    v3 = 4294960591;
    *((_DWORD *)v7 + 6) = -6705;
  }
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1C9526728(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t APAccTransportClientEndpointForwardData(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v2 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __APAccTransportClientEndpointForwardData_block_invoke;
  block[3] = &unk_1E8268E00;
  block[4] = &v6;
  block[5] = a1;
  block[6] = a2;
  dispatch_sync(v2, block);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t APAccTransportClientEndpointDeactivate(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *(NSObject **)(a1 + 24);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __APAccTransportClientEndpointDeactivate_block_invoke;
  v4[3] = &unk_1E826DAB8;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t APAccTransportClientEndpointCopyAuthenticationCertificateSerial(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *(NSObject **)(a1 + 24);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __APAccTransportClientEndpointCopyAuthenticationCertificateSerial_block_invoke;
  v4[3] = &unk_1E826DAB8;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t APAccTransportClientEndpointSecureTunnelDataSend(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v2 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __APAccTransportClientEndpointSecureTunnelDataSend_block_invoke;
  block[3] = &unk_1E8268E00;
  block[4] = &v6;
  block[5] = a1;
  block[6] = a2;
  dispatch_sync(v2, block);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t APAccTransportClientEndpointSetSecureTunnelDataReceiveHandler(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  if (a2)
  {
    v2 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __APAccTransportClientEndpointSetSecureTunnelDataReceiveHandler_block_invoke;
    block[3] = &unk_1E826DBA0;
    block[5] = &v6;
    block[6] = a1;
    block[4] = a2;
    dispatch_sync(v2, block);
    v3 = *((unsigned int *)v7 + 6);
  }
  else
  {
    APSLogErrorAt();
    v3 = 4294960591;
    *((_DWORD *)v7 + 6) = -6705;
  }
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1C9526FA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void _APAccTransportClientConnectionFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  NSObject *v4;

  if (gLogCategory_APAccTransportClientConnection <= 50
    && (gLogCategory_APAccTransportClientConnection != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1[3])
  {
    if (gLogCategory_APAccTransportClientConnection <= 90
      && (gLogCategory_APAccTransportClientConnection != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    APAccTransportClientConnectionClose((uint64_t)a1);
  }
  v2 = (const void *)a1[4];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
  v4 = a1[2];
  if (v4)
  {
    dispatch_release(v4);
    a1[2] = 0;
  }
}

uint64_t initacc_transportClient_serverDisconnectedHandler(uint64_t a1)
{
  if (CoreAccessoriesLibrary_sOnce != -1)
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_29);
  softLinkacc_transportClient_serverDisconnectedHandler[0] = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_serverDisconnectedHandler");
  return ((uint64_t (*)(uint64_t))softLinkacc_transportClient_serverDisconnectedHandler[0])(a1);
}

uint64_t initacc_transportClient_createConnection(uint64_t a1, uint64_t a2)
{
  if (CoreAccessoriesLibrary_sOnce != -1)
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_29);
  softLinkacc_transportClient_createConnection[0] = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_createConnection");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkacc_transportClient_createConnection[0])(a1, a2);
}

uint64_t initacc_transportClient_destroyConnection(uint64_t a1)
{
  if (CoreAccessoriesLibrary_sOnce != -1)
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_29);
  softLinkacc_transportClient_destroyConnection[0] = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_destroyConnection");
  return ((uint64_t (*)(uint64_t))softLinkacc_transportClient_destroyConnection[0])(a1);
}

void _APAccTransportClientEndpointFinalize(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  if (gLogCategory_APAccTransportClientEndpoint <= 50
    && (gLogCategory_APAccTransportClientEndpoint != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = a1[3];
  if (v2)
  {
    dispatch_release(v2);
    a1[3] = 0;
  }
  v3 = (const void *)a1[4];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[7];
  if (v5)
    CFRelease(v5);
}

uint64_t initacc_transportClient_createEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (CoreAccessoriesLibrary_sOnce != -1)
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_29);
  softLinkacc_transportClient_createEndpoint[0] = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_createEndpoint");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkacc_transportClient_createEndpoint[0])(a1, a2, a3, a4, a5, a6);
}

uint64_t initacc_transportClient_setPropertyForEndpointWithUUID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (CoreAccessoriesLibrary_sOnce != -1)
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_29);
  softLinkacc_transportClient_setPropertyForEndpointWithUUID[0] = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_setPropertyForEndpointWithUUID");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkacc_transportClient_setPropertyForEndpointWithUUID[0])(a1, a2, a3);
}

uint64_t initValkCFACCProperties_Connection_MFi4Auth_AccessoryCertInfoToMatch()
{
  uint64_t *v0;
  uint64_t result;

  if (CoreAccessoriesLibrary_sOnce != -1)
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_29);
  v0 = (uint64_t *)dlsym((void *)CoreAccessoriesLibrary_sLib, "kCFACCProperties_Connection_MFi4Auth_AccessoryCertInfoToMatch");
  if (v0)
  {
    result = *v0;
    constantValkCFACCProperties_Connection_MFi4Auth_AccessoryCertInfoToMatch = result;
  }
  else
  {
    result = constantValkCFACCProperties_Connection_MFi4Auth_AccessoryCertInfoToMatch;
  }
  getkCFACCProperties_Connection_MFi4Auth_AccessoryCertInfoToMatch[0] = kCFACCProperties_Connection_MFi4Auth_AccessoryCertInfoToMatchFunction;
  return result;
}

uint64_t kCFACCProperties_Connection_MFi4Auth_AccessoryCertInfoToMatchFunction()
{
  return constantValkCFACCProperties_Connection_MFi4Auth_AccessoryCertInfoToMatch;
}

uint64_t initacc_transportClient_setConnectionAuthStatusDidChangeHandler(uint64_t a1)
{
  if (CoreAccessoriesLibrary_sOnce != -1)
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_29);
  softLinkacc_transportClient_setConnectionAuthStatusDidChangeHandler[0] = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_setConnectionAuthStatusDidChangeHandler");
  return ((uint64_t (*)(uint64_t))softLinkacc_transportClient_setConnectionAuthStatusDidChangeHandler[0])(a1);
}

uint64_t initacc_transportClient_processIncomingData(uint64_t a1, uint64_t a2)
{
  if (CoreAccessoriesLibrary_sOnce != -1)
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_29);
  softLinkacc_transportClient_processIncomingData[0] = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_processIncomingData");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkacc_transportClient_processIncomingData[0])(a1, a2);
}

uint64_t initacc_transportClient_destroyEndpoint(uint64_t a1)
{
  if (CoreAccessoriesLibrary_sOnce != -1)
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_29);
  softLinkacc_transportClient_destroyEndpoint[0] = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_destroyEndpoint");
  return ((uint64_t (*)(uint64_t))softLinkacc_transportClient_destroyEndpoint[0])(a1);
}

uint64_t initacc_transportClient_copyPropertiesForEndpointWithUUID(uint64_t a1)
{
  if (CoreAccessoriesLibrary_sOnce != -1)
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_29);
  softLinkacc_transportClient_copyPropertiesForEndpointWithUUID[0] = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_copyPropertiesForEndpointWithUUID");
  return ((uint64_t (*)(uint64_t))softLinkacc_transportClient_copyPropertiesForEndpointWithUUID[0])(a1);
}

uint64_t __accTransportClientEndpointInvalidate_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(result + 16))
  {
    result = accTransportClientEndpointDestroyEndpoint(result);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 16) = 1;
  }
  return result;
}

uint64_t initacc_transportClient_endpointSecureTunnelDataSend(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (CoreAccessoriesLibrary_sOnce != -1)
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_29);
  softLinkacc_transportClient_endpointSecureTunnelDataSend[0] = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_endpointSecureTunnelDataSend");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkacc_transportClient_endpointSecureTunnelDataSend[0])(a1, a2, a3);
}

uint64_t initacc_transportClient_setEndpointSecureTunnelDataReceiveHandler(uint64_t a1, uint64_t a2)
{
  if (CoreAccessoriesLibrary_sOnce != -1)
    dispatch_once(&CoreAccessoriesLibrary_sOnce, &__block_literal_global_29);
  softLinkacc_transportClient_setEndpointSecureTunnelDataReceiveHandler = (uint64_t (*)())dlsym((void *)CoreAccessoriesLibrary_sLib, "acc_transportClient_setEndpointSecureTunnelDataReceiveHandler");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkacc_transportClient_setEndpointSecureTunnelDataReceiveHandler)(a1, a2);
}

uint64_t APPairingClientLegacyCreate(uint64_t a1, const void *a2, const void *a3, const void *a4, _QWORD *a5)
{
  uint64_t v9;
  _QWORD *DerivedStorage;
  CFTypeRef v11;
  CFTypeRef v12;
  uint64_t v13;
  uint64_t v14;

  if (!a4)
  {
    APSLogErrorAt();
    return 4294895525;
  }
  APPairingClientGetClassID();
  v9 = CMDerivedObjectCreate();
  if ((_DWORD)v9)
  {
    v14 = v9;
LABEL_19:
    APSLogErrorAt();
    return v14;
  }
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (a2)
    v11 = CFRetain(a2);
  else
    v11 = 0;
  DerivedStorage[1] = v11;
  if (a3)
    v12 = CFRetain(a3);
  else
    v12 = 0;
  DerivedStorage[2] = v12;
  DerivedStorage[3] = CFRetain(a4);
  v13 = gQblcfSzZBQsYCCV();
  if ((_DWORD)v13)
  {
    v14 = v13;
    goto LABEL_19;
  }
  if (gLogCategory_APPairingClientLegacy <= 50
    && (gLogCategory_APPairingClientLegacy != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v14 = 0;
  *a5 = 0;
  return v14;
}

void legacyPairing_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
}

__CFString *legacyPairing_CopyDebugDescription()
{
  _QWORD *DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APPairingClientLegacy '%@'>"), *DerivedStorage);
  return Mutable;
}

uint64_t legacyPairing_DeriveKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  CMBaseObjectGetDerivedStorage();
  if (a6 == 16)
  {
    v7 = PCFdAVst();
    if ((_DWORD)v7)
      APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    return 4294895525;
  }
  return v7;
}

const __CFData *legacyPairing_IsPeerKnown()
{
  const __CFData *result;
  UInt8 buffer[32];
  uint64_t v2;
  CFRange v3;

  v2 = *MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  result = *(const __CFData **)(CMBaseObjectGetDerivedStorage() + 16);
  if (result)
  {
    v3.location = 0;
    v3.length = 32;
    CFDataGetBytes(result, v3, buffer);
    return (const __CFData *)xOvZekdnwD6();
  }
  return result;
}

uint64_t legacyPairing_PerformSetup(uint64_t a1, uint64_t a2, int a3, uint64_t a4, _QWORD *a5, CFDataRef *a6)
{
  uint64_t DerivedStorage;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFAllocator *v14;
  const __CFAllocator *v15;
  uint64_t v16;
  uint64_t v17;
  const __CFAllocator *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  CFTypeRef v22;
  uint64_t (*v23)(uint64_t, uint64_t, CFTypeRef, CFTypeRef *);
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, _QWORD, _QWORD);
  unsigned int v28;
  const __CFAllocator *v29;
  uint64_t v30;
  uint64_t DataPointer;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CFTypeRef v35;
  uint64_t (*v36)(uint64_t, uint64_t, CFTypeRef, CFTypeRef *);
  CFDataRef v37;
  int v38;
  CFDataRef v39;
  const void *v40;
  CFTypeRef v42;
  CFTypeRef v43;
  CFTypeRef v44;
  CFTypeRef cf;
  CMBlockBufferRef dataLength;
  char v47;
  void *memoryBlock;
  char *dataPointerOut;
  UInt8 bytes[16];
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    memoryBlock = 0;
    dataPointerOut = 0;
    cf = 0;
    dataLength = 0;
    LOBYTE(v43) = 0;
    *(_OWORD *)bytes = 0u;
    v51 = 0u;
    v44 = 0;
    CMBaseObjectGetDerivedStorage();
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v10 = &unk_1EF906000;
    if (gLogCategory_APPairingClientLegacy <= 50
      && (gLogCategory_APPairingClientLegacy != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (a2)
    {
      XoN3GgjZNCvkN1T8I3();
      v12 = rJPl3sdBfc0E3yB();
      if ((_DWORD)v12)
      {
        v17 = v12;
        goto LABEL_54;
      }
      v13 = GvMGlTNs();
      if ((_DWORD)v13)
      {
        v17 = v13;
        goto LABEL_54;
      }
      dataPointerOut = 0;
      dataLength = 0;
      LOBYTE(v43) = 0;
      v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE10];
      while (1)
      {
        v16 = SrtySZG0();
        v17 = v16;
        if ((v16 + 71775) < 3)
          break;
        if ((_DWORD)v16)
        {
          v17 = 200401;
          goto LABEL_55;
        }
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        v18 = v14;
        v19 = CMBlockBufferCreateWithMemoryBlock(v14, memoryBlock, (size_t)dataLength, v15, 0, 0, (size_t)dataLength, 0, (CMBlockBufferRef *)&cf);
        if ((_DWORD)v19)
        {
          v17 = v19;
          goto LABEL_54;
        }
        v20 = v10;
        memoryBlock = 0;
        if (v44)
        {
          CFRelease(v44);
          v44 = 0;
        }
        v21 = *(_QWORD *)(DerivedStorage + 24);
        v22 = cf;
        v23 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 56);
        if (!v23)
        {
          v17 = 4294954514;
          goto LABEL_67;
        }
        v24 = v23(v21, 1886613612, v22, &v44);
        if ((_DWORD)v24 == 200470)
        {
          v17 = 200401;
LABEL_67:
          v10 = v20;
          goto LABEL_55;
        }
        v17 = v24;
        v10 = v20;
        if ((_DWORD)v24)
          goto LABEL_55;
        dataLength = 0;
        dataPointerOut = 0;
        v14 = v18;
        if (v44)
          CMBlockBufferGetDataPointer((CMBlockBufferRef)v44, 0, (size_t *)&dataLength, 0, &dataPointerOut);
      }
      v25 = v10[600];
      if (v25 <= 50 && (v25 != -1 || _LogCategory_Initialize()))
        LogPrintF();
LABEL_54:
      APSLogErrorAt();
    }
    else
    {
      v26 = *(_QWORD *)(DerivedStorage + 24);
      v27 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
      if (v27)
      {
        v28 = v27(v26, 1886417780, 0, 0);
        if (v28)
          v17 = v28;
        else
          v17 = 200401;
      }
      else
      {
        v17 = 4294954514;
      }
    }
LABEL_55:
    if (v44)
      CFRelease(v44);
    if (cf)
      CFRelease(cf);
    if (memoryBlock)
    {
      free(memoryBlock);
      memoryBlock = 0;
    }
    if ((_DWORD)v17)
    {
      v38 = v10[600];
      if (v38 <= 50 && (v38 != -1 || _LogCategory_Initialize()))
        goto LABEL_88;
    }
    return v17;
  }
  memoryBlock = 0;
  dataPointerOut = 0;
  v47 = 0;
  cf = 0;
  dataLength = 0;
  v43 = 0;
  v44 = 0;
  v42 = 0;
  *(_OWORD *)bytes = 0u;
  v51 = 0u;
  CMBaseObjectGetDerivedStorage();
  v11 = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APPairingClientLegacy <= 50
    && (gLogCategory_APPairingClientLegacy != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  XoN3GgjZNCvkN1T8I3();
  v29 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v30 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0x60uLL, (CFAllocatorRef)*MEMORY[0x1E0C9AE10], 0, 0, 0x60uLL, 1u, &dataLength);
  if ((_DWORD)v30)
  {
    v17 = v30;
LABEL_94:
    APSLogErrorAt();
    goto LABEL_76;
  }
  DataPointer = CMBlockBufferGetDataPointer(dataLength, 0, (size_t *)&v44, 0, (char **)&cf);
  if ((_DWORD)DataPointer)
  {
    v17 = DataPointer;
    goto LABEL_94;
  }
  memoryBlock = 0;
  dataPointerOut = 0;
  v47 = 0;
  v32 = h4BvW7X();
  if ((_DWORD)v32)
  {
LABEL_48:
    v17 = v32;
LABEL_76:
    v37 = 0;
    goto LABEL_77;
  }
  while (!v47)
  {
    if (v43)
    {
      CFRelease(v43);
      v43 = 0;
    }
    v33 = CMBlockBufferCreateWithBufferReference(v29, dataLength, 0, (size_t)memoryBlock, 0, (CMBlockBufferRef *)&v43);
    if ((_DWORD)v33)
    {
      v17 = v33;
      goto LABEL_94;
    }
    if (v42)
    {
      CFRelease(v42);
      v42 = 0;
    }
    v34 = *(_QWORD *)(v11 + 24);
    v35 = v43;
    v36 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 56);
    if (!v36)
    {
      v37 = 0;
      v17 = 4294954514;
      goto LABEL_77;
    }
    v32 = v36(v34, 1886614892, v35, &v42);
    if (!(_DWORD)v32)
    {
      memoryBlock = 0;
      dataPointerOut = 0;
      if (v42)
        CMBlockBufferGetDataPointer((CMBlockBufferRef)v42, 0, (size_t *)&memoryBlock, 0, &dataPointerOut);
      v32 = h4BvW7X();
      if (!(_DWORD)v32)
        continue;
    }
    goto LABEL_48;
  }
  if (gLogCategory_APPairingClientLegacy <= 50
    && (gLogCategory_APPairingClientLegacy != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  aMoe8v8GNE9T();
  v39 = CFDataCreate(v29, bytes, 32);
  v37 = v39;
  if (v39)
  {
    v40 = *(const void **)(v11 + 16);
    *(_QWORD *)(v11 + 16) = v39;
    CFRetain(v39);
    if (v40)
      CFRelease(v40);
    if (a5)
      *a5 = 0;
    v17 = 0;
    if (a6)
    {
      *a6 = v37;
      goto LABEL_76;
    }
  }
  else
  {
    v17 = 4294895526;
    APSLogErrorAt();
  }
LABEL_77:
  if (v42)
    CFRelease(v42);
  if (v43)
    CFRelease(v43);
  if (dataLength)
    CFRelease(dataLength);
  if (v37)
    CFRelease(v37);
  if ((_DWORD)v17
    && gLogCategory_APPairingClientLegacy <= 60
    && (gLogCategory_APPairingClientLegacy != -1 || _LogCategory_Initialize()))
  {
LABEL_88:
    LogPrintF();
  }
  return v17;
}

uint64_t legacyPairing_PerformVerification()
{
  uint64_t DerivedStorage;
  const __CFData *v1;
  uint64_t v2;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  uint64_t v6;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  void *v10;
  UInt8 buffer[16];
  __int128 v12;
  uint64_t v13;
  CFRange v14;

  v13 = *MEMORY[0x1E0C80C00];
  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  *(_OWORD *)buffer = 0u;
  v12 = 0u;
  CMBaseObjectGetDerivedStorage();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APPairingClientLegacy <= 50
    && (gLogCategory_APPairingClientLegacy != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  XoN3GgjZNCvkN1T8I3();
  v1 = *(const __CFData **)(DerivedStorage + 16);
  if (!v1)
  {
    APSLogErrorAt();
    v6 = 4294895525;
    goto LABEL_19;
  }
  v14.location = 0;
  v14.length = 32;
  CFDataGetBytes(v1, v14, buffer);
  Dk7hjUuq();
  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  v2 = VBAEFt();
  if (!(_DWORD)v2)
  {
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      v10 = 0;
      CMBaseObjectGetDerivedStorage();
      Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!Mutable)
      {
        v6 = 4294895526;
        APSLogErrorAt();
        goto LABEL_19;
      }
      v5 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("X-Apple-PD"), CFSTR("1"));
      if (!TMIsAutomaticTimeEnabled())
        goto LABEL_12;
      CFAbsoluteTimeGetCurrent();
      ASPrintF();
      if (v10)
        break;
      v6 = 4294895526;
      APSLogErrorAt();
LABEL_13:
      CFRelease(v5);
      if (v10)
        free(v10);
      if ((_DWORD)v6)
        goto LABEL_19;
      lengthAtOffsetOut = 0;
      dataPointerOut = 0;
      v2 = VBAEFt();
      if ((_DWORD)v2)
        goto LABEL_25;
    }
    CFDictionarySetCString();
LABEL_12:
    CFDictionarySetData();
    v6 = APTransportStreamSendPlistMessageCreatingReply();
    goto LABEL_13;
  }
LABEL_25:
  v6 = v2;
LABEL_19:
  if ((_DWORD)v6
    && gLogCategory_APPairingClientLegacy <= 60
    && (gLogCategory_APPairingClientLegacy != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v6;
}

uint64_t APCarPlayXPCUtils_UnpackASBD(void *a1, const char *a2, uint64_t a3, void *a4)
{
  xpc_object_t value;
  uint64_t v7;

  if (!a4)
  {
    v7 = 4294960591;
LABEL_9:
    APSLogErrorAt();
    return v7;
  }
  value = xpc_dictionary_get_value(a1, a2);
  if (!value)
  {
    v7 = 4294960569;
    goto LABEL_9;
  }
  if (xpc_data_get_bytes(value, a4, 0, 40 * a3) != 40 * a3)
  {
    v7 = 4294960550;
    goto LABEL_9;
  }
  return 0;
}

uint64_t APCarPlayAVVCServerGetTypeID()
{
  if (gAPCarPlayAVVCServerInitOnce != -1)
    dispatch_once_f(&gAPCarPlayAVVCServerInitOnce, 0, (dispatch_function_t)_APCarPlayAVVCServerGetTypeID);
  return gAPCarPlayAVVCServerTypeID;
}

uint64_t _APCarPlayAVVCServerGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPCarPlayAVVCServerTypeID = result;
  return result;
}

uint64_t APCarPlayAVVCServerRegisterEndpoint(const void *a1)
{
  uint64_t v1;
  const void *v3;
  const void *v4;
  __CFNotificationCenter *DarwinNotifyCenter;

  v1 = gCarPlayAVVCServer;
  if (gCarPlayAVVCServer)
  {
    v3 = *(const void **)(gCarPlayAVVCServer + 24);
    if (v3)
    {
      APCarPlayAVVCServerRemoveEndpoint(v3);
      v4 = *(const void **)(v1 + 24);
    }
    else
    {
      v4 = 0;
    }
    *(_QWORD *)(v1 + 24) = a1;
    if (a1)
      CFRetain(a1);
    if (v4)
      CFRelease(v4);
    if (gLogCategory_APCarPlayAVVCServer <= 30
      && (gLogCategory_APCarPlayAVVCServer != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, (CFNotificationName)*MEMORY[0x1E0CA3B38], 0, 0, 1u);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960578;
  }
}

uint64_t APCarPlayAVVCServerRemoveEndpoint(CFTypeRef cf)
{
  uint64_t v1;
  CFTypeRef v2;
  __CFNotificationCenter *DarwinNotifyCenter;

  v1 = gCarPlayAVVCServer;
  if (gCarPlayAVVCServer)
  {
    v2 = cf;
    if (*(CFTypeRef *)(gCarPlayAVVCServer + 24) == cf)
    {
      if (gLogCategory_APCarPlayAVVCServer <= 30)
      {
        if (gLogCategory_APCarPlayAVVCServer != -1 || _LogCategory_Initialize())
          LogPrintF();
        v2 = *(CFTypeRef *)(v1 + 24);
      }
      if (v2)
      {
        CFRelease(v2);
        *(_QWORD *)(v1 + 24) = 0;
      }
    }
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, (CFNotificationName)*MEMORY[0x1E0CA3B40], 0, 0, 1u);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960578;
  }
}

uint64_t APCarPlayAVVCServerRegisterStream(const void *a1)
{
  uint64_t v1;
  const void *v3;
  const void *v4;
  uint64_t result;

  v1 = gCarPlayAVVCServer;
  if (!gCarPlayAVVCServer)
  {
    APSLogErrorAt();
    return 4294960578;
  }
  v3 = *(const void **)(gCarPlayAVVCServer + 32);
  if (v3)
  {
    APCarPlayAVVCServerRemoveStream(v3);
    v4 = *(const void **)(v1 + 32);
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(v1 + 32) = a1;
  if (a1)
    CFRetain(a1);
  if (v4)
    CFRelease(v4);
  if (gLogCategory_APCarPlayAVVCServer > 30)
    return 0;
  if (gLogCategory_APCarPlayAVVCServer != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
  {
    LogPrintF();
    return 0;
  }
  return result;
}

uint64_t APCarPlayAVVCServerRemoveStream(CFTypeRef cf)
{
  uint64_t v1;
  CFTypeRef v2;
  uint64_t result;

  v1 = gCarPlayAVVCServer;
  if (gCarPlayAVVCServer)
  {
    v2 = cf;
    if (*(CFTypeRef *)(gCarPlayAVVCServer + 32) != cf)
      return 0;
    if (gLogCategory_APCarPlayAVVCServer <= 30)
    {
      if (gLogCategory_APCarPlayAVVCServer != -1 || _LogCategory_Initialize())
        LogPrintF();
      v2 = *(CFTypeRef *)(v1 + 32);
    }
    if (v2)
    {
      CFRelease(v2);
      result = 0;
      *(_QWORD *)(v1 + 32) = 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960578;
  }
  return result;
}

void APCarPlayAVVCServerStatesIncompatibleWithAuxIn()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  if (gLogCategory_APCarPlayAVVCServer <= 50
    && (gLogCategory_APCarPlayAVVCServer != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("CarPlayAVVCEndpointStateIncompatibleWithJarvis"), 0, 0, 1u);
}

uint64_t APCarPlayAVVCServerInit()
{
  uint64_t *v0;
  int v1;
  uint64_t v2;
  _QWORD block[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __APCarPlayAVVCServerInit_block_invoke;
  block[3] = &unk_1E826DD78;
  block[4] = &v5;
  if (gCarPlayInputServerOnce != -1)
    dispatch_once(&gCarPlayInputServerOnce, block);
  v0 = v6;
  if (*((_DWORD *)v6 + 6))
  {
    if (gLogCategory_APCarPlayAVVCServer <= 90)
    {
      if (gLogCategory_APCarPlayAVVCServer != -1 || (v1 = _LogCategory_Initialize(), v0 = v6, v1))
      {
        LogPrintF();
        v0 = v6;
      }
    }
  }
  v2 = *((unsigned int *)v0 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t APCarPlayAVVCServer_MessageHandler(uint64_t a1, void *a2)
{
  CFTypeRef v3;
  uint64_t OpCode;
  uint64_t v5;
  uint64_t v7;

  v3 = CFRetain((CFTypeRef)gCarPlayAVVCServer);
  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
  {
    v7 = OpCode;
LABEL_5:
    APSLogErrorAt();
    goto LABEL_6;
  }
  if (xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]))
  {
    v5 = FigXPCServerLookupAndRetainAssociatedObject();
    if ((_DWORD)v5)
    {
      v7 = v5;
      goto LABEL_5;
    }
  }
  APSLogErrorAt();
  v7 = 0;
LABEL_6:
  if (v3)
    CFRelease(v3);
  return v7;
}

uint64_t APCarPlayAVVCServer_NoReplyMessageHandler()
{
  return 4294960582;
}

uint64_t APCarPlayAVVCServer_VerifyConnectionCallback()
{
  uint64_t has_entitlement;

  has_entitlement = xpc_connection_has_entitlement();
  if ((has_entitlement & 1) == 0
    && gLogCategory_APCarPlayAVVCServer <= 90
    && (gLogCategory_APCarPlayAVVCServer != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return has_entitlement;
}

uint64_t Server_AssociateObjectWithConnection(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;

  if (!a1)
    return 4294960576;
  v5 = FigXPCServerAssociateObjectWithConnection();
  if ((_DWORD)v5)
    APSLogErrorAt();
  else
    xpc_dictionary_set_uint64(a4, (const char *)*MEMORY[0x1E0CA36A0], 0);
  return v5;
}

uint64_t StreamServer_StreamDestructor()
{
  uint64_t v0;
  uint64_t result;

  if (gLogCategory_APCarPlayAVVCServer <= 30
    && (gLogCategory_APCarPlayAVVCServer != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v0 = APSGetFBOPropertyInt64();
  result = 0;
  if (v0)
  {
    result = FigEndpointStreamSuspendSync();
    if ((_DWORD)result)
      return APSLogErrorAt();
  }
  return result;
}

void StreamServer_SinkDestructor(const void *a1)
{
  _QWORD *v2;
  void (*v3)(const void *);

  if (gLogCategory_APCarPlayAVVCServer <= 30
    && (gLogCategory_APCarPlayAVVCServer != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v2 >= 2uLL)
  {
    v3 = (void (*)(const void *))v2[4];
    if (v3)
      v3(a1);
  }
  CFRelease(a1);
}

uint64_t APStarkModeCreateDictionaryRepresentation(uint64_t a1, __CFDictionary **a2)
{
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v4;
  CFMutableDictionaryRef v5;
  uint64_t v6;
  CFMutableDictionaryRef v7;
  CFMutableDictionaryRef v8;
  CFMutableDictionaryRef v9;
  CFMutableDictionaryRef v10;
  CFMutableDictionaryRef v11;
  CFMutableDictionaryRef v12;
  CFMutableDictionaryRef v13;
  CFMutableDictionaryRef v14;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v4)
    {
      v5 = v4;
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      v6 = CFArrayEnsureCreatedAndAppend();
      CFRelease(v5);
      if (!(_DWORD)v6)
      {
        v7 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v7)
        {
          v8 = v7;
          CFDictionarySetInt64();
          CFDictionarySetInt64();
          CFDictionarySetInt64();
          v6 = CFArrayEnsureCreatedAndAppend();
          CFRelease(v8);
          if (!(_DWORD)v6)
          {
            v9 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (v9)
            {
              v10 = v9;
              CFDictionarySetInt64();
              CFDictionarySetInt64();
              v6 = CFArrayEnsureCreatedAndAppend();
              CFRelease(v10);
              if (!(_DWORD)v6)
              {
                v11 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (v11)
                {
                  v12 = v11;
                  CFDictionarySetInt64();
                  CFDictionarySetInt64();
                  CFDictionarySetInt64();
                  v6 = CFArrayEnsureCreatedAndAppend();
                  CFRelease(v12);
                  if (!(_DWORD)v6)
                  {
                    v13 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                    if (v13)
                    {
                      v14 = v13;
                      CFDictionarySetInt64();
                      CFDictionarySetInt64();
                      CFDictionarySetInt64();
                      v6 = CFArrayEnsureCreatedAndAppend();
                      CFRelease(v14);
                      if (!(_DWORD)v6)
                      {
                        CFDictionarySetValue(Mutable, CFSTR("appStates"), 0);
                        CFDictionarySetValue(Mutable, CFSTR("resources"), 0);
                        *a2 = Mutable;
                        Mutable = 0;
                        goto LABEL_13;
                      }
                    }
                    else
                    {
                      v6 = 4294895246;
                    }
                  }
                }
                else
                {
                  v6 = 4294895246;
                }
              }
            }
            else
            {
              v6 = 4294895246;
            }
          }
        }
        else
        {
          v6 = 4294895246;
        }
      }
    }
    else
    {
      v6 = 4294895246;
    }
  }
  else
  {
    v6 = 4294895246;
  }
  APSLogErrorAt();
LABEL_13:
  if (Mutable)
    CFRelease(Mutable);
  return v6;
}

uint64_t APStarkModeCreateStructRepresentation(CFDictionaryRef theDict, _OWORD *a2)
{
  uint64_t i;
  const __CFArray *Value;
  const __CFArray *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[3];
  int v16;
  _QWORD v17[3];
  int v18;
  _QWORD v19[3];
  int v20;
  _QWORD v21[4];

  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x2000000000;
  v21[3] = 0;
  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x2000000000;
  v20 = 0;
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x2000000000;
  v18 = 0;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2000000000;
  v16 = 0;
  v10 = 0;
  v11 = &v10;
  v12 = 0x3800000000;
  v13 = 0u;
  v14 = 0u;
  if (!theDict)
  {
    v7 = 4294895245;
LABEL_13:
    APSLogErrorAt();
    goto LABEL_10;
  }
  if (!a2)
  {
    v7 = 4294895245;
    goto LABEL_13;
  }
  for (i = 24; i != 56; ++i)
    *((_BYTE *)&v10 + i) = 0;
  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("appStates"));
  v6 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("resources"));
  if (Value)
  {
    CFArrayGetCount(Value);
    CFArrayApplyBlock();
  }
  if (v6)
  {
    CFArrayGetCount(v6);
    CFArrayApplyBlock();
  }
  v7 = 0;
  v8 = *(_OWORD *)(v11 + 5);
  *a2 = *(_OWORD *)(v11 + 3);
  a2[1] = v8;
LABEL_10:
  _Block_object_dispose(&v10, 8);
  _Block_object_dispose(v15, 8);
  _Block_object_dispose(v17, 8);
  _Block_object_dispose(v19, 8);
  _Block_object_dispose(v21, 8);
  return v7;
}

const __CFArray *APStarkModeInitialOwnerRequestMakeFromDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const __CFArray *result;
  CFIndex Count;
  CFIndex v8;
  uint64_t i;
  uint64_t TypedValueAtIndex;
  int Int64;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a4 + 8) = 0;
  *(_QWORD *)a4 = 0;
  CFArrayGetTypeID();
  result = (const __CFArray *)CFDictionaryGetTypedValue();
  if (result)
  {
    Count = CFArrayGetCount(result);
    if (Count >= 1)
    {
      v8 = Count;
      for (i = 0; v8 != i; ++i)
      {
        CFDictionaryGetTypeID();
        TypedValueAtIndex = CFArrayGetTypedValueAtIndex();
        if (gLogCategory_APReceiverNTPClient <= 40
          && (gLogCategory_APReceiverNTPClient != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (!TypedValueAtIndex)
          continue;
        Int64 = CFDictionaryGetInt64();
        if (Int64 == 2)
        {
          v15 = CFDictionaryGetInt64();
          v16 = v15 == 2;
          if (v15 == 1)
            v16 = 2;
          *(_DWORD *)a4 = v16;
          if (v15 == 1)
          {
            v17 = 100;
            *(_DWORD *)(a4 + 4) = 100;
          }
          else
          {
            v20 = CFDictionaryGetInt64();
            if (v20 == 100 || v20 == 1000 || v20 == 500)
            {
              if (v20 == 1000)
                v21 = 1000;
              else
                v21 = 0;
              if (v20 == 500)
                v21 = 500;
              if (v20 == 100)
                v21 = 100;
            }
            else
            {
              v21 = 100;
            }
            *(_DWORD *)(a4 + 4) = v21;
            v23 = CFDictionaryGetInt64();
            if (v23 == 100 || v23 == 1000 || v23 == 500)
            {
              if (v23 == 1000)
                v17 = 1000;
              else
                v17 = 0;
              if (v23 == 500)
                v17 = 500;
              if (v23 == 100)
                v17 = 100;
            }
            else
            {
              v17 = 100;
            }
          }
          *(_DWORD *)(a4 + 8) = v17;
          if (gLogCategory_APReceiverNTPClient > 40
            || gLogCategory_APReceiverNTPClient == -1 && !_LogCategory_Initialize())
          {
            continue;
          }
        }
        else
        {
          if (Int64 != 1)
            continue;
          v12 = CFDictionaryGetInt64();
          v13 = v12 == 2;
          if (v12 == 1)
            v13 = 2;
          *(_DWORD *)a3 = v13;
          if (v12 == 1)
          {
            v14 = 100;
            *(_DWORD *)(a3 + 4) = 100;
          }
          else
          {
            v18 = CFDictionaryGetInt64();
            if (v18 == 100 || v18 == 1000 || v18 == 500)
            {
              if (v18 == 1000)
                v19 = 1000;
              else
                v19 = 0;
              if (v18 == 500)
                v19 = 500;
              if (v18 == 100)
                v19 = 100;
            }
            else
            {
              v19 = 100;
            }
            *(_DWORD *)(a3 + 4) = v19;
            v22 = CFDictionaryGetInt64();
            if (v22 == 100 || v22 == 1000 || v22 == 500)
            {
              if (v22 == 1000)
                v14 = 1000;
              else
                v14 = 0;
              if (v22 == 500)
                v14 = 500;
              if (v22 == 100)
                v14 = 100;
            }
            else
            {
              v14 = 100;
            }
          }
          *(_DWORD *)(a3 + 8) = v14;
          if (gLogCategory_APReceiverNTPClient > 40
            || gLogCategory_APReceiverNTPClient == -1 && !_LogCategory_Initialize())
          {
            continue;
          }
        }
        LogPrintF();
      }
    }
    return 0;
  }
  return result;
}

uint64_t APStarkModeChangeRequestMakeFromDictionary(uint64_t a1, int a2, uint64_t a3)
{
  const __CFArray *TypedValue;
  CFIndex v6;
  CFIndex v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const __CFArray *v15;
  CFIndex Count;
  CFIndex v17;
  uint64_t i;
  const __CFDictionary *TypedValueAtIndex;
  int Int64;
  int v22;
  unsigned int v23;

  v23 = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)a3 = 0x100000001;
  CFArrayGetTypeID();
  TypedValue = (const __CFArray *)CFDictionaryGetTypedValue();
  if (!TypedValue || (v6 = CFArrayGetCount(TypedValue), v6 < 1))
  {
LABEL_34:
    CFArrayGetTypeID();
    v15 = (const __CFArray *)CFDictionaryGetTypedValue();
    if (v15)
    {
      Count = CFArrayGetCount(v15);
      if (Count >= 1)
      {
        v17 = Count;
        for (i = 0; v17 != i; ++i)
        {
          CFDictionaryGetTypeID();
          TypedValueAtIndex = (const __CFDictionary *)CFArrayGetTypedValueAtIndex();
          if (TypedValueAtIndex)
          {
            Int64 = CFDictionaryGetInt64();
            if (Int64 == 2)
            {
              v23 = apStarkMode_parseResourceChangeRequest(TypedValueAtIndex, a2, a3 + 32);
              if (v23)
                goto LABEL_52;
            }
            else if (Int64 == 1)
            {
              v23 = apStarkMode_parseResourceChangeRequest(TypedValueAtIndex, a2, a3 + 8);
              if (v23)
                goto LABEL_52;
            }
          }
          v23 = 0;
        }
      }
    }
    if (a2)
      return v23;
    goto LABEL_45;
  }
  v7 = v6;
  v8 = 0;
  while (1)
  {
    CFDictionaryGetTypeID();
    if (!CFArrayGetTypedValueAtIndex())
      goto LABEL_33;
    v9 = CFDictionaryGetInt64();
    if (v9 != 1)
    {
      if (v9 == 3)
      {
        if (a2 && *(_DWORD *)(a3 + 64))
          break;
        if (CFDictionaryGetInt64())
          v13 = 1;
        else
          v13 = -1;
        *(_DWORD *)(a3 + 64) = v13;
      }
      else if (v9 == 2)
      {
        if (a2 && *(_DWORD *)(a3 + 60))
          break;
        if (CFDictionaryGetInt64())
          v10 = 1;
        else
          v10 = -1;
        *(_DWORD *)(a3 + 60) = v10;
      }
      goto LABEL_33;
    }
    if (a2 && *(_DWORD *)(a3 + 56))
      break;
    v11 = CFDictionaryGetInt64();
    v12 = -1;
    switch(v11)
    {
      case -1:
        goto LABEL_32;
      case 1:
        v12 = 10;
LABEL_32:
        *(_DWORD *)(a3 + 56) = v12;
        goto LABEL_33;
      case 2:
        v14 = 11;
        break;
      default:
        v14 = 0;
        break;
    }
    *(_DWORD *)(a3 + 56) = v14;
    if (a2 && v11 != 2)
    {
      v22 = -72051;
      goto LABEL_51;
    }
    if (v11 != 2)
    {
      v12 = -1;
      goto LABEL_32;
    }
LABEL_33:
    v23 = 0;
    if (v7 == ++v8)
      goto LABEL_34;
  }
  v22 = -72052;
LABEL_51:
  APSLogErrorAt();
  v23 = v22;
LABEL_52:
  APSLogErrorAt();
  if (!a2)
  {
LABEL_45:
    if (v23)
    {
      *(_QWORD *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = 0x100000001;
      return 0;
    }
  }
  return v23;
}

uint64_t apStarkMode_parseResourceChangeRequest(const __CFDictionary *a1, int a2, uint64_t a3)
{
  int v6;
  int v7;
  int v8;
  int Int64;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t result;
  unsigned int v16;

  v16 = 0;
  if (!*(_DWORD *)a3)
  {
    v6 = CFDictionaryGetInt64() - 1;
    v7 = 21;
    v8 = 20;
    switch(v6)
    {
      case 0:
        goto LABEL_4;
      case 1:
        goto LABEL_14;
      case 2:
        v8 = 22;
LABEL_4:
        *(_DWORD *)a3 = v8;
        if (*(_DWORD *)(a3 + 4))
          break;
        Int64 = CFDictionaryGetInt64();
        if (Int64 == 500)
          v10 = 500;
        else
          v10 = 0;
        if (Int64 == 100)
          v10 = 100;
        *(_DWORD *)(a3 + 4) = v10;
        if (!v10)
          goto LABEL_36;
        v7 = *(_DWORD *)a3;
LABEL_15:
        if ((v7 & 0xFFFFFFFE) == 0x16)
        {
          *(_QWORD *)(a3 + 8) = CFDictionaryGetValue(a1, CFSTR("borrowID"));
          v7 = *(_DWORD *)a3;
        }
        if (v7 == 22)
        {
          if (*(_DWORD *)(a3 + 16))
            break;
          v13 = CFDictionaryGetInt64();
          if (v13 == 100 || v13 == 1000 || v13 == 500)
          {
            *(_DWORD *)(a3 + 16) = v13;
            goto LABEL_38;
          }
          *(_DWORD *)(a3 + 16) = 0;
          goto LABEL_36;
        }
        if (v7 != 20)
          goto LABEL_38;
        if (!*(_DWORD *)(a3 + 16))
        {
          v11 = CFDictionaryGetInt64();
          if (v11 == 100 || v11 == 500 || v11 == 1000)
          {
            *(_DWORD *)(a3 + 16) = v11;
            if (*(_DWORD *)(a3 + 20))
              break;
            v12 = CFDictionaryGetInt64();
            if (v12 == 100 || v12 == 1000 || v12 == 500)
            {
              *(_DWORD *)(a3 + 20) = v12;
              goto LABEL_38;
            }
            *(_DWORD *)(a3 + 20) = 0;
          }
          else
          {
            *(_DWORD *)(a3 + 16) = 0;
          }
LABEL_36:
          APSLogErrorAt();
          v14 = -72051;
          goto LABEL_37;
        }
        break;
      case 3:
        v7 = 23;
LABEL_14:
        *(_DWORD *)a3 = v7;
        goto LABEL_15;
      default:
        *(_DWORD *)a3 = 0;
        goto LABEL_36;
    }
  }
  APSLogErrorAt();
  v14 = -72052;
LABEL_37:
  v16 = v14;
LABEL_38:
  result = v16;
  if (!a2)
  {
    if (v16)
    {
      result = 0;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
  }
  return result;
}

uint64_t APStarkModeChangeRequestToString(_DWORD *a1, uint64_t a2)
{
  int v4;
  int v5;

  SNPrintF_Add();
  if (a1[2])
  {
    SNPrintF_Add();
    SNPrintF_Add();
    v4 = a1[2];
    if (v4 == 22 || v4 == 20)
      SNPrintF_Add();
  }
  if (a1[8])
  {
    SNPrintF_Add();
    SNPrintF_Add();
    v5 = a1[8];
    if (v5 == 22 || v5 == 20)
      SNPrintF_Add();
  }
  if (a1[14])
  {
    SNPrintF_Add();
    SNPrintF_Add();
  }
  if (a1[15])
  {
    SNPrintF_Add();
    SNPrintF_Add();
  }
  if (a1[16])
  {
    SNPrintF_Add();
    SNPrintF_Add();
  }
  return a2;
}

uint64_t APStarkInitialOwnerRequestToString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  SNPrintF_Add();
  if (a1)
  {
    SNPrintF_Add();
    SNPrintF_Add();
  }
  SNPrintF_Add();
  SNPrintF_Add();
  if (a2)
  {
    SNPrintF_Add();
    SNPrintF_Add();
  }
  SNPrintF_Add();
  return a3;
}

uint64_t APRealTimeAudioFileWriterGetTypeID()
{
  if (gAPRealTimeAudioFileWriterInitOnce != -1)
    dispatch_once_f(&gAPRealTimeAudioFileWriterInitOnce, 0, (dispatch_function_t)_APRealTimeAudioFileWriterGetTypeID);
  return gAPRealTimeAudioFileWriterTypeID;
}

uint64_t _APRealTimeAudioFileWriterGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPRealTimeAudioFileWriterTypeID = result;
  return result;
}

uint64_t APRealTimeAudioFileWriterCreate(const void *a1, __int128 *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t Instance;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  dispatch_queue_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  unsigned int v19;

  if (!a2 || !a4)
  {
    APSLogErrorAt();
    return -6705;
  }
  if (gAPRealTimeAudioFileWriterInitOnce != -1)
    dispatch_once_f(&gAPRealTimeAudioFileWriterInitOnce, 0, (dispatch_function_t)_APRealTimeAudioFileWriterGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt();
    return -6728;
  }
  v9 = Instance;
  *(_OWORD *)(Instance + 16) = 0u;
  v10 = Instance + 16;
  *(_QWORD *)(Instance + 160) = 0;
  *(_OWORD *)(Instance + 128) = 0u;
  *(_OWORD *)(Instance + 144) = 0u;
  *(_OWORD *)(Instance + 96) = 0u;
  *(_OWORD *)(Instance + 112) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  v11 = *a2;
  v12 = a2[1];
  *(_QWORD *)(Instance + 72) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(Instance + 56) = v12;
  *(_OWORD *)(Instance + 40) = v11;
  if (a3)
  {
    v13 = *MEMORY[0x1E0C9AE50];
    *(_BYTE *)(Instance + 80) = v13 == FigCFDictionaryGetBooleanValue();
  }
  if (a1)
    *(_QWORD *)(v9 + 104) = CFRetain(a1);
  else
    *(_QWORD *)(v9 + 104) = CFStringCreateF();
  v14 = dispatch_queue_create("APRealTimeAudioFileWrite", 0);
  *(_QWORD *)(v9 + 32) = v14;
  if (!v14)
  {
    APSLogErrorAt();
    v19 = -6728;
    goto LABEL_21;
  }
  v19 = APAudioSourceConduitCreate(*MEMORY[0x1E0C9AE00], (__int128 *)(v10 + 24), (_QWORD *)v10);
  if (v19)
  {
LABEL_20:
    APSLogErrorAt();
LABEL_21:
    CFRelease((CFTypeRef)v9);
    return v19;
  }
  v15 = *(_QWORD *)v10;
  v16 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v16)
  {
    v19 = -12782;
    goto LABEL_20;
  }
  v19 = v16(v15);
  if (v19)
    goto LABEL_20;
  *(_QWORD *)(v9 + 160) = FigSimpleMutexCreate();
  v19 = APSRealTimeSignalCreate();
  if (v19)
    goto LABEL_20;
  *(double *)(v9 + 128) = (double)(int)APSSettingsGetIntWithDefault();
  if (gLogCategory_APRealTimeAudioFileWriter <= 50
    && (gLogCategory_APRealTimeAudioFileWriter != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *a4 = v9;
  return v19;
}

uint64_t apRealTimeAudioFileWriter_SignalCallback(uint64_t outExtAudioFile)
{
  uint64_t v1;
  const __CFString *v2;
  uint64_t v3;
  const void *v4;
  CFURLRef v5;
  int v6;
  OSStatus v7;
  OSStatus v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD);
  unsigned int *v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, char *, uint64_t, unint64_t *, uint64_t *, uint64_t *, _OWORD *);
  unint64_t v14;
  int v15;
  unsigned int v16;
  NSObject *v17;
  NSObject *v18;
  AudioBufferList ioData;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  unint64_t v24;
  char v25[1024];
  uint64_t v26;

  v1 = outExtAudioFile;
  v26 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  if (gLogCategory_APRealTimeAudioFileWriter <= 30)
  {
    if (gLogCategory_APRealTimeAudioFileWriter != -1
      || (outExtAudioFile = _LogCategory_Initialize(), (_DWORD)outExtAudioFile))
    {
      outExtAudioFile = LogPrintF();
    }
  }
  if (*(_BYTE *)(v1 + 144))
    return outExtAudioFile;
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  v20 = 0;
  v21 = 0;
  if (*(_BYTE *)(v1 + 112) || *(_QWORD *)(v1 + 88))
    goto LABEL_31;
  if (*(_QWORD *)(v1 + 16))
  {
    if (*(_QWORD *)(v1 + 96))
    {
LABEL_24:
      if (gLogCategory_APRealTimeAudioFileWriter <= 50
        && (gLogCategory_APRealTimeAudioFileWriter != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v7 = ExtAudioFileCreateWithURL(*(CFURLRef *)(v1 + 96), 0x63616666u, (const AudioStreamBasicDescription *)(v1 + 40), 0, 0, (ExtAudioFileRef *)(v1 + 88));
      if (v7)
      {
        v6 = v7;
      }
      else
      {
        v8 = ExtAudioFileSetProperty(*(ExtAudioFileRef *)(v1 + 88), 0x63666D74u, 0x28u, (const void *)(v1 + 40));
        if (!v8)
        {
          *(_QWORD *)(v1 + 120) = 0;
          *(_QWORD *)(v1 + 136) = 0;
          goto LABEL_31;
        }
        v6 = v8;
      }
      goto LABEL_72;
    }
    bzero(v25, 0x400uLL);
    if (*(_BYTE *)(v1 + 80))
    {
      v2 = (const __CFString *)CFRetain(*(CFTypeRef *)(v1 + 104));
      goto LABEL_14;
    }
    if (confstr(65537, v25, 0x400uLL))
    {
      v3 = mach_absolute_time();
      v2 = CFStringCreateWithFormat(0, 0, CFSTR("%sAP-%llu-%@.caf"), v25, v3, *(_QWORD *)(v1 + 104));
      if (v2)
      {
LABEL_14:
        v4 = *(const void **)(v1 + 96);
        if (v4)
          CFRelease(v4);
        v5 = CFURLCreateWithFileSystemPath(0, v2, kCFURLPOSIXPathStyle, 0);
        *(_QWORD *)(v1 + 96) = v5;
        if (v5)
        {
          if (gLogCategory_APRealTimeAudioFileWriter <= 30
            && (gLogCategory_APRealTimeAudioFileWriter != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v6 = 0;
          if (v2)
            goto LABEL_22;
        }
        else
        {
          APSLogErrorAt();
          v6 = -6728;
          if (v2)
LABEL_22:
            CFRelease(v2);
        }
        if (v5)
          goto LABEL_24;
LABEL_72:
        APSLogErrorAt();
        goto LABEL_73;
      }
      v6 = -6728;
    }
    else
    {
      v6 = -6727;
    }
    APSLogErrorAt();
    goto LABEL_72;
  }
  APSLogErrorAt();
  v6 = -6709;
LABEL_73:
  *(_BYTE *)(v1 + 112) = 1;
  if (gLogCategory_APRealTimeAudioFileWriter <= 90
    && (gLogCategory_APRealTimeAudioFileWriter != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  apRealTimeAudioFileWriter_CloseFile(v1);
  if (v6)
  {
LABEL_54:
    outExtAudioFile = APSLogErrorAt();
    if (gLogCategory_APRealTimeAudioFileWriter <= 90)
    {
      if (gLogCategory_APRealTimeAudioFileWriter != -1)
        return LogPrintF();
      outExtAudioFile = _LogCategory_Initialize();
      if ((_DWORD)outExtAudioFile)
        return LogPrintF();
    }
    return outExtAudioFile;
  }
LABEL_31:
  v9 = *(_QWORD *)(v1 + 16);
  outExtAudioFile = CMBaseObjectGetVTable();
  v10 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(outExtAudioFile + 16) + 32);
  if (v10)
  {
    v11 = (unsigned int *)(v1 + 148);
    do
    {
      outExtAudioFile = v10(v9, 0);
      if (!(_DWORD)outExtAudioFile)
        break;
      if (*(_BYTE *)(v1 + 144))
        return outExtAudioFile;
      v12 = *(_QWORD *)(v1 + 16);
      v13 = *(unsigned int (**)(uint64_t, char *, uint64_t, unint64_t *, uint64_t *, uint64_t *, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (!v13)
        goto LABEL_54;
      if (v13(v12, v25, 512, &v24, &v21, &v20, v22))
        goto LABEL_54;
      *(&ioData.mNumberBuffers + 1) = 0;
      ioData.mNumberBuffers = 1;
      ioData.mBuffers[0].mNumberChannels = 1;
      ioData.mBuffers[0].mDataByteSize = v24;
      ioData.mBuffers[0].mData = v25;
      if (ExtAudioFileWrite(*(ExtAudioFileRef *)(v1 + 88), v24 / *(_DWORD *)(v1 + 64), &ioData))
        goto LABEL_54;
      v14 = v24;
      *(double *)(v1 + 120) = *(double *)(v1 + 120) + (double)(v24 / *(unsigned int *)(v1 + 64)) / *(double *)(v1 + 40);
      *(_QWORD *)(v1 + 136) += v14;
      FigSimpleMutexCheckIsNotLockedOnThisThread();
      MEMORY[0x1CAA400CC](*(_QWORD *)(v1 + 160));
      v15 = v24;
      do
        v16 = __ldaxr(v11);
      while (__stlxr(v16 - v15, v11));
      if (v24 == v16)
      {
        v17 = *(NSObject **)(v1 + 152);
        if (v17)
        {
          dispatch_semaphore_signal(v17);
          v18 = *(NSObject **)(v1 + 152);
          if (v18)
          {
            dispatch_release(v18);
            *(_QWORD *)(v1 + 152) = 0;
          }
        }
      }
      MEMORY[0x1CAA400E4](*(_QWORD *)(v1 + 160));
      if (gLogCategory_APRealTimeAudioFileWriter <= 40
        && (gLogCategory_APRealTimeAudioFileWriter != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v9 = *(_QWORD *)(v1 + 16);
      outExtAudioFile = CMBaseObjectGetVTable();
      v10 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(outExtAudioFile + 16) + 32);
    }
    while (v10);
  }
  if (*(double *)(v1 + 120) > *(double *)(v1 + 128) && !*(_BYTE *)(v1 + 80))
  {
    if (gLogCategory_APRealTimeAudioFileWriter <= 50
      && (gLogCategory_APRealTimeAudioFileWriter != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    outExtAudioFile = apRealTimeAudioFileWriter_CloseFile(v1);
    if ((_DWORD)outExtAudioFile)
      goto LABEL_54;
  }
  return outExtAudioFile;
}

uint64_t APRealTimeAudioFileWriterWriteAudioBytes(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t result;

  if (!*(_QWORD *)(a1 + 16))
    return 4294960587;
  v7 = (unsigned int *)(a1 + 148);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + a3, v7));
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (!v10)
    return 4294954514;
  result = v10(v9, a2, a3, a4);
  if (!(_DWORD)result)
  {
    APSRealTimeSignalRaise();
    return 0;
  }
  return result;
}

void APRealTimeAudioFileWriterSignalWhenDone(uint64_t a1, NSObject *a2)
{
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 160));
  if (atomic_load((unsigned int *)(a1 + 148)))
  {
    *(_QWORD *)(a1 + 152) = a2;
    dispatch_retain(a2);
  }
  else
  {
    dispatch_semaphore_signal(a2);
  }
  JUMPOUT(0x1CAA400E4);
}

uint64_t APRealTimeAudioFileWriterInvalidate(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void (*v4)(uint64_t);

  if (gLogCategory_APRealTimeAudioFileWriter <= 30
    && (gLogCategory_APRealTimeAudioFileWriter != -1 || _LogCategory_Initialize()))
  {
    atomic_load((unsigned int *)(a1 + 148));
    LogPrintF();
  }
  if (!*(_BYTE *)(a1 + 144))
  {
    *(_BYTE *)(a1 + 144) = 1;
    if (*(_QWORD *)(a1 + 24))
    {
      APSRealTimeSignalInvalidate();
      v2 = *(NSObject **)(a1 + 32);
      if (v2)
        dispatch_sync(v2, &__block_literal_global_25);
    }
    apRealTimeAudioFileWriter_CloseFile(a1);
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v4)
        v4(v3);
    }
  }
  return 0;
}

uint64_t apRealTimeAudioFileWriter_CloseFile(uint64_t a1)
{
  OpaqueExtAudioFile *v2;
  uint64_t v3;
  const void *v4;

  v2 = *(OpaqueExtAudioFile **)(a1 + 88);
  if (v2)
  {
    v3 = ExtAudioFileDispose(v2);
    *(_QWORD *)(a1 + 88) = 0;
  }
  else
  {
    v3 = 0;
  }
  v4 = *(const void **)(a1 + 96);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 96) = 0;
  }
  return v3;
}

uint64_t _APRealTimeAudioFileWriterFinalize(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  uint64_t result;

  if (gLogCategory_APRealTimeAudioFileWriter <= 30
    && (gLogCategory_APRealTimeAudioFileWriter != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(a1 + 144))
  {
    v2 = *(const void **)(a1 + 24);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(a1 + 24) = 0;
    }
    v3 = *(NSObject **)(a1 + 32);
    if (v3)
    {
      dispatch_release(v3);
      *(_QWORD *)(a1 + 32) = 0;
    }
    v4 = *(NSObject **)(a1 + 152);
    if (v4)
    {
      dispatch_release(v4);
      *(_QWORD *)(a1 + 152) = 0;
    }
    v5 = *(const void **)(a1 + 16);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 16) = 0;
    }
    v6 = *(const void **)(a1 + 96);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 96) = 0;
    }
    v7 = *(const void **)(a1 + 104);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a1 + 104) = 0;
    }
    return FigSimpleMutexDestroy();
  }
  else
  {
    result = gLogCategory_APRealTimeAudioFileWriter;
    if (gLogCategory_APRealTimeAudioFileWriter <= 100)
      result = _APRealTimeAudioFileWriterFinalize_cold_1(gLogCategory_APRealTimeAudioFileWriter);
    __break(1u);
  }
  return result;
}

uint64_t APEndpointDescriptionAirPlayCreateWithTransportDevice(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  _QWORD *DerivedStorage;
  uint64_t v8;
  dispatch_queue_t v9;
  const void *Value;
  CFTypeRef v11;
  const void *AdvertiserInfo;
  uint64_t v13;
  uint64_t v14;
  char label[64];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    v14 = 4294895545;
    APSLogErrorAt();
    return v14;
  }
  APEndpointDescriptionGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
  {
    v14 = v6;
LABEL_23:
    APSLogErrorAt();
    return v14;
  }
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = FigSimpleMutexCreate();
  *DerivedStorage = v8;
  if (!v8 || (SNPrintF(), v9 = dispatch_queue_create(label, 0), (DerivedStorage[11] = v9) == 0))
  {
    APSLogErrorAt();
    return 4294895546;
  }
  Value = (const void *)FigCFDictionaryGetValue();
  if (Value)
    Value = CFRetain(Value);
  DerivedStorage[13] = Value;
  *((_BYTE *)DerivedStorage + 112) = APSSettingsIsFeatureEnabled();
  if (a2)
  {
    v11 = CFRetain(a2);
    DerivedStorage[1] = v11;
    if (v11)
    {
      AdvertiserInfo = (const void *)APTransportDeviceGetAdvertiserInfo();
      DerivedStorage[2] = AdvertiserInfo;
      if (!AdvertiserInfo)
      {
        APSLogErrorAt();
        return APSSignalErrorAt();
      }
      CFRetain(AdvertiserInfo);
      goto LABEL_13;
    }
  }
  else
  {
    DerivedStorage[1] = 0;
  }
  v13 = APAdvertiserInfoCreate();
  if ((_DWORD)v13)
  {
    v14 = v13;
    goto LABEL_23;
  }
LABEL_13:
  if (DerivedStorage[2])
  {
    MEMORY[0x1CAA400CC](*DerivedStorage);
    CMBaseObjectGetDerivedStorage();
    if (airPlayDescription_hasFeatureInternal(0))
      DerivedStorage[12] = APAdvertiserInfoCopyProperty();
    MEMORY[0x1CAA400E4](*DerivedStorage);
    v14 = 0;
    *a4 = 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294895543;
  }
  return v14;
}

uint64_t airPlayDescription_Finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  NSObject *v12;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointDescriptionAirPlay <= 30
    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v1 = (const void *)DerivedStorage[7];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[7] = 0;
  }
  v2 = (const void *)DerivedStorage[9];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[9] = 0;
  }
  v3 = (const void *)DerivedStorage[12];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[12] = 0;
  }
  v4 = (const void *)DerivedStorage[1];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[1] = 0;
  }
  v5 = (const void *)DerivedStorage[2];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[2] = 0;
  }
  v6 = (const void *)DerivedStorage[3];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[3] = 0;
  }
  v7 = (const void *)DerivedStorage[4];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[4] = 0;
  }
  v8 = (const void *)DerivedStorage[5];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[5] = 0;
  }
  v9 = (const void *)DerivedStorage[6];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[6] = 0;
  }
  v10 = (const void *)DerivedStorage[10];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[10] = 0;
  }
  v11 = (const void *)DerivedStorage[13];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[13] = 0;
  }
  v12 = DerivedStorage[11];
  if (v12)
  {
    dispatch_release(v12);
    DerivedStorage[11] = 0;
  }
  return FigSimpleMutexDestroy();
}

__CFString *airPlayDescription_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  _QWORD *DerivedStorage;
  const void *v4;
  const void *v6;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v6 = 0;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  airPlayDescription_copyName(a1, (uint64_t *)&v6);
  MEMORY[0x1CAA400E4](*DerivedStorage);
  v4 = v6;
  CFStringAppendFormat(Mutable, 0, CFSTR("<APEndpointDescriptionAirPlay %p, name=%@>"), a1, v6);
  if (v4)
    CFRelease(v4);
  return Mutable;
}

uint64_t airPlayDescription_CopyProperty(const void *a1, const void *a2, const __CFAllocator *a3, uint64_t *a4)
{
  _QWORD *DerivedStorage;
  uint64_t v9;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointDescriptionAirPlay <= 30
    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a2)
  {
    v9 = 4294895545;
LABEL_11:
    APSLogErrorAt();
    return v9;
  }
  if (!a4)
  {
    v9 = 4294895545;
    goto LABEL_11;
  }
  MEMORY[0x1CAA400CC](*DerivedStorage);
  v9 = airPlayDescription_copyPropertyInternal(a1, a2, a3, a4);
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return v9;
}

uint64_t airPlayDescription_SetProperty(const void *a1, const void *a2, const void *a3)
{
  _QWORD *DerivedStorage;
  uint64_t v7;
  const void *v8;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointDescriptionAirPlay <= 30
    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    MEMORY[0x1CAA400CC](*DerivedStorage);
    v7 = CMBaseObjectGetDerivedStorage();
    if (CFEqual(a2, CFSTR("PairingPeerCUAirPlayIdentifier")))
    {
      v8 = *(const void **)(v7 + 32);
      *(_QWORD *)(v7 + 32) = a3;
      if (!a3)
        goto LABEL_9;
      goto LABEL_8;
    }
    if (CFEqual(a2, CFSTR("PairingPeerCUSystemIdentifier")))
    {
      v8 = *(const void **)(v7 + 40);
      *(_QWORD *)(v7 + 40) = a3;
      if (!a3)
        goto LABEL_9;
    }
    else
    {
      if (!CFEqual(a2, CFSTR("PairingPeerPublicKey")))
      {
        if (CFEqual(a2, CFSTR("PermanentSpeakerGroupingInfo")))
        {
          if (!FigCFEqual())
            airPlayDescription_updateWithAdvertiserAndPSGInfosNotifyingClients(a1, *(const void **)(v7 + 16), a3);
          goto LABEL_11;
        }
        if (CFEqual(a2, CFSTR("SupportsBufferedAudio"))
          && (CMBaseObjectGetDerivedStorage(), airPlayDescription_hasFeatureInternal((uint64_t)a1)))
        {
          *(_BYTE *)(v7 + 65) = CFBooleanGetValue((CFBooleanRef)a3);
        }
        else
        {
          if (!CFEqual(a2, CFSTR("SupportsJarvis")))
          {
            if (!CFEqual(a2, CFSTR("HeadUnitRestrictions")))
            {
              if (gLogCategory_APEndpointDescriptionAirPlay <= 30
                && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              goto LABEL_11;
            }
            v8 = *(const void **)(v7 + 72);
            *(_QWORD *)(v7 + 72) = a3;
            if (!a3)
              goto LABEL_9;
            goto LABEL_8;
          }
          *(_BYTE *)(v7 + 64) = CFBooleanGetValue((CFBooleanRef)a3);
        }
LABEL_11:
        MEMORY[0x1CAA400E4](*DerivedStorage);
        return 0;
      }
      v8 = *(const void **)(v7 + 48);
      *(_QWORD *)(v7 + 48) = a3;
      if (!a3)
      {
LABEL_9:
        if (v8)
          CFRelease(v8);
        goto LABEL_11;
      }
    }
LABEL_8:
    CFRetain(a3);
    goto LABEL_9;
  }
  APSLogErrorAt();
  return 4294895545;
}

uint64_t airPlayDescription_copyName(uint64_t a1, uint64_t *a2)
{
  CMBaseObjectGetDerivedStorage();
  *a2 = APAdvertiserInfoCopyProperty();
  return 0;
}

uint64_t airPlayDescription_copyPropertyInternal(const void *a1, const void *a2, const __CFAllocator *a3, uint64_t *a4)
{
  _QWORD *DerivedStorage;
  const void *v11;
  const __CFString *v13;
  uint64_t v14;
  int v15;
  uint64_t Int64;
  _BOOL4 isSourceVersionAtLeast;
  const void **v18;
  const void **v19;
  BOOL v20;
  const __CFString *v21;
  int HasPrefix;
  const void **v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int hasFeatureInternal;
  char IntWithDefault;
  uint64_t v32;
  unsigned int v33;
  uint64_t Mutable;
  const __CFBoolean *v35;
  uint64_t v36;
  CFTypeRef *v37;
  _BOOL4 v38;
  int Value;
  const __CFString *v40;
  const __CFString *v41;
  CFIndex Length;
  _BOOL4 v43;
  CFBooleanRef v44;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  const void *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t PropertyInt64Sync;
  const void **v54;
  BOOL v55;
  const __CFString *v56;
  const __CFString *v57;
  const void **v58;
  CFBooleanRef v59;
  const __CFDictionary *v60;
  uint64_t v61;
  const __CFString *v62;
  uint64_t v63;
  int v64;
  CFBooleanRef v66;
  const void *v67;
  CFBooleanRef v68;
  uint64_t *v69;
  uint64_t *v70;
  CFBooleanRef BOOLean;
  unsigned int v72;

  v72 = 0;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("DeviceID")))
  {
    if (CFEqual(a2, CFSTR("TransportDevice")))
    {
      v11 = (const void *)DerivedStorage[1];
      if (v11)
      {
LABEL_7:
        v11 = CFRetain(v11);
LABEL_8:
        *a4 = (uint64_t)v11;
        return v72;
      }
      return -71754;
    }
    if (CFEqual(a2, CFSTR("Name")))
      return airPlayDescription_copyName((uint64_t)a1, a4);
    if (CFEqual(a2, CFSTR("NameIsFactoryDefault")))
      goto LABEL_14;
    if (CFEqual(a2, CFSTR("OSBuildVersion")))
      return airPlayDescription_copyOSBuildVersion((uint64_t)a1, a4);
    if (CFEqual(a2, CFSTR("SourceVersion")))
      return airPlayDescription_copySourceVersion((uint64_t)a1, a4);
    if (CFEqual(a2, CFSTR("OSVersion")))
      goto LABEL_14;
    if (CFEqual(a2, CFSTR("Model")))
    {
      airPlayDescription_copyModel((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, CFSTR("Manufacturer")))
      return airPlayDescription_copyManufacturer(a1, a4);
    if (CFEqual(a2, CFSTR("Company")))
      return airPlayDescription_copyCompany(a1, a4);
    if (CFEqual(a2, CFSTR("VolumeControlType")))
    {
      v13 = CFSTR("volumeControlType");
LABEL_29:
      airPlayDescription_copyEndpointInfoValue((uint64_t)a1, v13, (const __CFDictionary **)a4);
      return 0;
    }
    if (CFEqual(a2, CFSTR("VolumeControlTypeEx")))
      return airPlayDescription_copyVolumeControlTypeEx((uint64_t)a1, (uint64_t)a3, a4);
    if (CFEqual(a2, CFSTR("MuteControlType")))
      return airPlayDescription_copyMuteControlType(a1, (uint64_t)a3, (CFTypeRef *)a4);
    if (CFEqual(a2, CFSTR("FirmwareVersion"))
      || CFEqual(a2, CFSTR("SerialNumber"))
      || CFEqual(a2, CFSTR("BluetoothIdentifier")))
    {
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("MACAddress")))
      return airPlayDescription_copyMACAddress((uint64_t)a1, a3, (CFDataRef *)a4);
    if (CFEqual(a2, CFSTR("AudioLatencyForAV")))
      return airPlayDescription_copyAudioLatencyForAV(a3, (CFNumberRef *)a4);
    if (CFEqual(a2, CFSTR("AudioLatencyOffsetForAV")))
      return airPlayDescription_copyAudioLatencyOffsetForAV(a3, (CFNumberRef *)a4);
    if (CFEqual(a2, CFSTR("AuthenticationType")))
      return airPlayDescription_copyAuthenticationType((uint64_t)a1, a4);
    if (CFEqual(a2, CFSTR("PasswordRequired")))
    {
      airPlayDescription_copyPasswordRequired((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, CFSTR("PINRequired")))
    {
      v14 = (uint64_t)a1;
      v15 = 8;
LABEL_49:
      airplayDescription_copyStatusFlagsContainsFlag(v14, v15, a4);
      return 0;
    }
    if (CFEqual(a2, CFSTR("PairingPeerCUAirPlayIdentifier")))
    {
      airPlayDescription_copyPairingPeerCUAirPlayIdentifier((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, CFSTR("PairingPeerCUSystemIdentifier")))
    {
      airPlayDescription_copyPairingPeerCUSystemIdentifier((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, CFSTR("PairingPeerPublicKey")))
      return airPlayDescription_copyPairingPeerPublicKey((uint64_t)a1, (uint64_t)a3, (CFTypeRef *)a4);
    if (CFEqual(a2, CFSTR("OneTimePairingRequired")))
    {
      airPlayDescription_copyOneTimePairingRequired((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, CFSTR("AirPlaySecurity")))
    {
      airPlayDescription_copyAirPlaySecurity((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, CFSTR("StatusFlags")))
    {
      v11 = (const void *)APAdvertiserInfoCopyProperty();
      if (v11)
        goto LABEL_8;
      Int64 = CFNumberCreateInt64();
      *a4 = Int64;
      if (Int64)
        return v72;
      goto LABEL_63;
    }
    if (CFEqual(a2, CFSTR("SubType")))
    {
      airPlayDescription_copyDeviceSubType(a1, a4);
      return 0;
    }
    if (CFEqual(a2, CFSTR("HIDs")))
    {
      v72 = airPlayDescription_copyEndpointInfoValueCFArray((uint64_t)a1, CFSTR("hidDevices"), a4);
      if (!v72)
        return v72;
LABEL_68:
      APSLogErrorAt();
      return v72;
    }
    if (CFEqual(a2, CFSTR("IgnoresVolumeChangesBeforeAudioSetup")))
    {
      isSourceVersionAtLeast = airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x24D2F4u);
      v18 = (const void **)MEMORY[0x1E0C9AE50];
      v19 = (const void **)MEMORY[0x1E0C9AE40];
      v20 = !isSourceVersionAtLeast;
      goto LABEL_71;
    }
    if (CFEqual(a2, CFSTR("IsAppleTV")))
    {
      CMBaseObjectGetDerivedStorage();
      v21 = CFSTR("AppleTV");
LABEL_78:
      HasPrefix = airPlayDescription_modelHasPrefix(a1, v21);
LABEL_79:
      v18 = (const void **)MEMORY[0x1E0C9AE50];
      v23 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_80:
      v24 = HasPrefix == 0;
      goto LABEL_81;
    }
    if (CFEqual(a2, CFSTR("IsAppleAudioAccessory")))
    {
      CMBaseObjectGetDerivedStorage();
      v21 = CFSTR("AudioAccessory");
      goto LABEL_78;
    }
    if (CFEqual(a2, CFSTR("IsAppleReceiver")))
    {
      HasPrefix = airPlayDescription_isAppleReceiver(a1);
      goto LABEL_79;
    }
    if (CFEqual(a2, CFSTR("IsAirPortExpress")))
    {
      CMBaseObjectGetDerivedStorage();
      v21 = CFSTR("AirPort");
      goto LABEL_78;
    }
    if (CFEqual(a2, CFSTR("IsLegacyAirPlaySpeaker")))
    {
      HasPrefix = airPlayDescription_isLegacyAirPlaySpeaker(a1);
      goto LABEL_79;
    }
    if (CFEqual(a2, CFSTR("IsThirdPartyTVFamily")))
    {
      HasPrefix = airPlayDescription_isThirdPartyTVFamily((uint64_t)a1);
      goto LABEL_79;
    }
    if (CFEqual(a2, CFSTR("HasUnifiedAdvertiserInfo")))
    {
      v25 = (uint64_t)a1;
LABEL_94:
      HasPrefix = airPlayDescription_hasFeatureInternal(v25);
      goto LABEL_79;
    }
    if (CFEqual(a2, CFSTR("RequiredSenderFeatures")))
    {
      v11 = (const void *)APAdvertiserInfoCopyProperty();
      if (v11)
        goto LABEL_8;
      v26 = CFNumberCreateInt64();
      *a4 = v26;
      if (v26)
        return v72;
LABEL_63:
      APSLogErrorAt();
      return -71750;
    }
    if (CFEqual(a2, CFSTR("CanBeRemoteControlled")))
    {
      HasPrefix = airplayDescription_canBeRemoteControlled((uint64_t)a1);
      goto LABEL_79;
    }
    if (CFEqual(a2, CFSTR("SupportsSharePlayHandoff")))
    {
      if (!airPlayDescription_hasFeatureInternal((uint64_t)a1))
        goto LABEL_483;
      v27 = (uint64_t)a1;
      v28 = 5950101;
      goto LABEL_104;
    }
    if (CFEqual(a2, CFSTR("SupportsOverlayUI")))
    {
      v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, CFSTR("SilentPrimary")))
    {
      v14 = (uint64_t)a1;
      v15 = 4096;
      goto LABEL_49;
    }
    if (CFEqual(a2, CFSTR("SupportsBufferedAudio")))
    {
      CMBaseObjectGetDerivedStorage();
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
        v29 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 65);
      else
        v29 = airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x36193Eu)
           && airPlayDescription_hasFeatureInternal((uint64_t)a1) != 0;
      if (v29)
        v18 = (const void **)MEMORY[0x1E0C9AE50];
      else
        v18 = (const void **)MEMORY[0x1E0C9AE40];
      goto LABEL_83;
    }
    if (CFEqual(a2, CFSTR("SupportsReceiverChoosesAnchor")))
    {
      CMBaseObjectGetDerivedStorage();
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
      {
        if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 65))
          goto LABEL_483;
      }
      else if (!airPlayDescription_hasFeatureInternal((uint64_t)a1))
      {
        goto LABEL_483;
      }
      IntWithDefault = APSSettingsGetIntWithDefault();
      v18 = (const void **)MEMORY[0x1E0C9AE40];
      v19 = (const void **)MEMORY[0x1E0C9AE50];
      v20 = IntWithDefault == 0;
LABEL_71:
      if (!v20)
        v18 = v19;
      goto LABEL_83;
    }
    if (CFEqual(a2, CFSTR("SupportsReceiverSideSoundCheck")))
    {
      hasFeatureInternal = airPlayDescription_hasFeatureInternal((uint64_t)a1);
      CMBaseObjectGetDerivedStorage();
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
        hasFeatureInternal = airPlayDescription_isCarPlaySpatialAudioSupported();
      v18 = (const void **)MEMORY[0x1E0C9AE50];
      v23 = (const void **)MEMORY[0x1E0C9AE40];
      v24 = hasFeatureInternal == 0;
      goto LABEL_81;
    }
    if (CFEqual(a2, CFSTR("SupportsSetMRInfoCommand")))
    {
      v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, CFSTR("ReceiverSupportsSeekToTimeAsyncResponse")))
    {
      v32 = (uint64_t)a1;
      v33 = 6354200;
LABEL_387:
      HasPrefix = airPlayDescription_isSourceVersionAtLeast(v32, v33);
      goto LABEL_79;
    }
    if (CFEqual(a2, CFSTR("SupportsLowLatencyAudio")))
    {
      Mutable = APSFeaturesCreateMutable();
      if (Mutable)
      {
        v35 = (const __CFBoolean *)Mutable;
        APSFeaturesSetFeature();
        APSFeaturesSetFeature();
        APSFeaturesSetFeature();
        if (!airPlayDescription_hasFeaturesInternal((uint64_t)a1)
          || APSSettingsGetIntWithDefault())
        {
          goto LABEL_144;
        }
        goto LABEL_142;
      }
      goto LABEL_450;
    }
    if (CFEqual(a2, CFSTR("SupportsAudioMediaDataControl")))
    {
      v36 = APSFeaturesCreateMutable();
      if (v36)
      {
        v35 = (const __CFBoolean *)v36;
        APSFeaturesSetFeature();
        APSFeaturesSetFeature();
        if (!airPlayDescription_hasFeaturesInternal((uint64_t)a1)
          || !airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x44AA84u))
        {
          goto LABEL_144;
        }
LABEL_142:
        if (!APSSettingsGetIntWithDefault() && !APSSettingsGetIntWithDefault())
        {
          v37 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
          goto LABEL_452;
        }
LABEL_144:
        v37 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
LABEL_452:
        *a4 = (uint64_t)CFRetain(*v37);
        v59 = v35;
        goto LABEL_453;
      }
LABEL_450:
      APSLogErrorAt();
      return -71750;
    }
    if (CFEqual(a2, CFSTR("IsLowFidelitySpeaker")))
    {
      v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, CFSTR("SupportsAudioStreamConnectionSetup")))
    {
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1)
        && !APSSettingsGetIntWithDefault())
      {
        goto LABEL_105;
      }
      goto LABEL_483;
    }
    if (CFEqual(a2, CFSTR("SupportsExtendedWHA")))
    {
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
        v38 = 0;
      else
        v38 = CFPreferencesGetAppBooleanValue(CFSTR("forceAirPlay2NTP"), CFSTR("com.apple.airplay"), 0) == 0;
      if (airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x37D8E0u)
        && airPlayDescription_hasFeatureInternal((uint64_t)a1)
        && !v38)
      {
        goto LABEL_105;
      }
      goto LABEL_483;
    }
    if (CFEqual(a2, CFSTR("PostsAdvertiserUpdatesOverEventChannel")))
    {
      if (!airPlayDescription_isAppleReceiver(a1))
        goto LABEL_483;
      v27 = (uint64_t)a1;
      v28 = 3660000;
      goto LABEL_104;
    }
    if (CFEqual(a2, CFSTR("SupportsHangdogRemoteControl")))
    {
      if (airPlayDescription_isAppleReceiver(a1))
      {
        Value = airPlayDescription_hasFeatureInternal((uint64_t)a1);
      }
      else
      {
        if (!airPlayDescription_isThirdPartyTVFamily((uint64_t)a1))
          goto LABEL_483;
        BOOLean = 0;
        airplayDescription_copyStatusFlagsContainsFlag((uint64_t)a1, 1024, &BOOLean);
        v66 = BOOLean;
        if (BOOLean)
        {
          Value = CFBooleanGetValue(BOOLean);
          CFRelease(v66);
        }
        else
        {
          Value = 0;
        }
      }
      if (Value)
        goto LABEL_105;
LABEL_483:
      v18 = (const void **)MEMORY[0x1E0C9AE40];
      goto LABEL_83;
    }
    if (CFEqual(a2, CFSTR("SupportsDedicatedRemoteControlSocket")))
    {
      if (airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x44B63Eu) && airPlayDescription_isAppleReceiver(a1))
        goto LABEL_105;
      goto LABEL_483;
    }
    if (CFEqual(a2, CFSTR("SupportsRapportRemoteControlTransport")))
    {
      v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, CFSTR("SupportsRFC2198Redundancy")))
    {
      v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, CFSTR("SupportsBufferedAPAP")))
    {
      CMBaseObjectGetDerivedStorage();
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
      {
        HasPrefix = airPlayDescription_isCarPlaySpatialAudioSupported();
        goto LABEL_79;
      }
      v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, CFSTR("IsMediaRemoteControllable")))
    {
      CMBaseObjectGetDerivedStorage();
      if (!airPlayDescription_modelHasPrefix(a1, CFSTR("AudioAccessory")))
      {
        CMBaseObjectGetDerivedStorage();
        if (!airPlayDescription_modelHasPrefix(a1, CFSTR("AppleTV")))
          goto LABEL_483;
      }
      v27 = (uint64_t)a1;
      v28 = 3561800;
LABEL_104:
      if (airPlayDescription_isSourceVersionAtLeast(v27, v28))
      {
LABEL_105:
        v18 = (const void **)MEMORY[0x1E0C9AE50];
LABEL_83:
        v11 = *v18;
        goto LABEL_7;
      }
      goto LABEL_483;
    }
    if (CFEqual(a2, CFSTR("SupportedAudioFormats")))
    {
      CMBaseObjectGetDerivedStorage();
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
      {
        airPlayDescription_copyCarPlayAudioFormats((uint64_t)a1, a3, (CFMutableDictionaryRef *)a4);
        return v72;
      }
      return airPlayDescription_copyAirPlayAudioFormats((uint64_t)a1, a3, a4);
    }
    if (CFEqual(a2, CFSTR("SupportedAudioFormatsExtended")))
    {
      CMBaseObjectGetDerivedStorage();
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
        return airPlayDescription_copyCarPlayAudioFormatsExtended((uint64_t)a1, a3, (__CFDictionary **)a4);
      else
        return airPlayDescription_copyAirPlayAudioFormatsExtended((uint64_t)a1, a4);
    }
    if (CFEqual(a2, CFSTR("SupportsMuteCommand")))
    {
      v32 = (uint64_t)a1;
      v33 = 3703500;
      goto LABEL_387;
    }
    if (CFEqual(a2, CFSTR("SupoortsRFC2617DigestAuth")))
    {
      airPlayDescription_copySupportsRFC2617DigestAuth((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, CFSTR("SupportsCoreUtilsPairingAndEncryption")))
    {
      HasPrefix = airPlayDescription_supportsCUPairingAndEncryption((uint64_t)a1);
      goto LABEL_79;
    }
    if (CFEqual(a2, CFSTR("SupportsAccountOwnerPairVerification")))
    {
      v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, CFSTR("SupportsHKPairingAndAccessControl")))
    {
      v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, CFSTR("SupportsLegacyPairing")))
    {
      v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, CFSTR("SupportsSystemPairing")))
    {
LABEL_196:
      v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, CFSTR("SupportsTransientPairing")))
    {
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
        goto LABEL_105;
      goto LABEL_196;
    }
    if (CFEqual(a2, CFSTR("SupportsKeepAlive")))
    {
      v32 = (uint64_t)a1;
      v33 = 1900900;
      goto LABEL_387;
    }
    if (CFEqual(a2, CFSTR("SupportsCBCSEncryption")))
    {
      if (airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x2DFF1Eu))
        goto LABEL_105;
      v40 = (const __CFString *)APAdvertiserInfoCopyProperty();
      v41 = v40;
      if (v40)
      {
        Length = CFStringGetLength(v40);
        CFRelease(v41);
        if (Length >= 1)
          goto LABEL_105;
      }
      goto LABEL_483;
    }
    if (CFEqual(a2, CFSTR("SupportsScreenIdle")))
    {
      v32 = (uint64_t)a1;
      v33 = 1503500;
      goto LABEL_387;
    }
    if (CFEqual(a2, CFSTR("SupportsScreenMultiCodec")))
    {
      v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, CFSTR("SupportsUnifiedPairingAndMFi")))
    {
      v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, CFSTR("SupportsWoL")))
    {
      if (!airPlayDescription_hasFeatureInternal((uint64_t)a1))
      {
        v25 = (uint64_t)a1;
        goto LABEL_94;
      }
      goto LABEL_105;
    }
    if (CFEqual(a2, CFSTR("AdvertisesHAPSupport")))
    {
      v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, CFSTR("DisplayDescriptionArray")))
      return airPlayDescription_copyDisplayDescriptionArray((uint64_t)a1, a3, (__CFArray **)a4);
    if (CFEqual(a2, CFSTR("CanRecordScreenStream")))
    {
      v13 = CFSTR("canRecordScreenStream");
      goto LABEL_29;
    }
    if (CFEqual(a2, CFSTR("IsScreenDemoMode")))
    {
      v14 = (uint64_t)a1;
      v15 = 0x40000;
      goto LABEL_49;
    }
    if (CFEqual(a2, CFSTR("HasUDPMirroringSupport")))
    {
      v13 = CFSTR("hasUDPMirroringSupport");
      goto LABEL_29;
    }
    if (CFEqual(a2, CFSTR("receiverHDRCapability")))
    {
      v13 = CFSTR("receiverHDRCapability");
      goto LABEL_29;
    }
    if (CFEqual(a2, CFSTR("SupportHDRSubframe")))
    {
      BOOLean = 0;
      airPlayDescription_copyEndpointInfoValue((uint64_t)a1, CFSTR("hasUDPMirroringSupport"), &BOOLean);
      v72 = 0;
      v43 = airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x7A1264u);
      v44 = BOOLean;
      if (BOOLean != (CFBooleanRef)*MEMORY[0x1E0C9AE50] || !v43)
        v46 = (const void *)*MEMORY[0x1E0C9AE40];
      else
        v46 = (const void *)*MEMORY[0x1E0C9AE50];
LABEL_367:
      *a4 = (uint64_t)CFRetain(v46);
      if (!v44)
        return v72;
      v59 = v44;
LABEL_453:
      CFRelease(v59);
      return v72;
    }
    if (CFEqual(a2, CFSTR("VodkaVersion")))
    {
      v11 = (const void *)APAdvertiserInfoCopyProperty();
      if (v11)
        goto LABEL_8;
      v47 = CFNumberCreateInt64();
      *a4 = v47;
      if (v47)
        return v72;
      goto LABEL_450;
    }
    if (CFEqual(a2, CFSTR("SupportsAirPlayFromCloud")))
    {
      airplayDescription_copySupportsAirPlayFromCloud((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, CFSTR("DoesNotRequireVodkaForHLS")))
    {
      v32 = (uint64_t)a1;
      v33 = 4500100;
      goto LABEL_387;
    }
    if (CFEqual(a2, CFSTR("SupportsAirPlayVideoPlayQueue")))
    {
      v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, CFSTR("SupportsAirPlayVideoV2")))
    {
LABEL_331:
      v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, CFSTR("SupportsAirPlayVideoPausedStart")))
    {
      v32 = (uint64_t)a1;
      v33 = 2206800;
      goto LABEL_387;
    }
    if (CFEqual(a2, CFSTR("AccessControlType")))
    {
      airPlayDescription_getAccessControlType();
      v48 = CFNumberCreateInt64();
      *a4 = v48;
      if (v48)
        return v72;
      goto LABEL_450;
    }
    if (CFEqual(a2, CFSTR("GroupPublicName")))
    {
      BOOLean = 0;
      airPlayDescription_copyClusterInfoInternal(a1, 0, 0, 0, 0, 0, 0, &BOOLean, 0, 0);
      v11 = BOOLean;
      if (BOOLean)
        goto LABEL_8;
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("GroupID")))
      goto LABEL_14;
    if (CFEqual(a2, CFSTR("GroupContainsDiscoverableLeader")) || CFEqual(a2, CFSTR("IsGroupLeader")))
    {
      v11 = (const void *)APAdvertiserInfoCopyProperty();
      if (v11)
        goto LABEL_8;
      goto LABEL_483;
    }
    if (CFEqual(a2, CFSTR("ClusterSize")))
    {
      v69 = 0;
      v70 = 0;
      v49 = a1;
      v50 = 0;
      v51 = a4;
LABEL_273:
      v52 = 0;
      goto LABEL_274;
    }
    if (CFEqual(a2, CFSTR("ClusterType")))
    {
      v69 = 0;
      v70 = 0;
      v49 = a1;
      v50 = 0;
      v51 = 0;
      v52 = a4;
LABEL_274:
      airPlayDescription_copyClusterInfoInternal(v49, v50, v51, v52, 0, 0, 0, 0, v69, v70);
      return v72;
    }
    if (CFEqual(a2, CFSTR("ClusterUUID")))
    {
      v69 = 0;
      v70 = 0;
      v49 = a1;
      v50 = a4;
LABEL_272:
      v51 = 0;
      goto LABEL_273;
    }
    if (CFEqual(a2, CFSTR("IsClusterLeader")))
    {
      BOOLean = 0;
      airPlayDescription_copyClusterInfoInternal(a1, 0, 0, 0, 0, (CFTypeRef *)&BOOLean, 0, 0, 0, 0);
      v11 = BOOLean;
      if (BOOLean)
        goto LABEL_8;
      goto LABEL_483;
    }
    if (CFEqual(a2, CFSTR("ClusterModel")))
    {
      airPlayDescription_copyClusterInfoInternal(a1, 0, 0, 0, 0, 0, a4, 0, 0, 0);
      return v72;
    }
    if (CFEqual(a2, CFSTR("RoomUUID")))
    {
      v69 = a4;
      v70 = 0;
LABEL_271:
      v49 = a1;
      v50 = 0;
      goto LABEL_272;
    }
    if (CFEqual(a2, CFSTR("RoomName")))
    {
      v69 = 0;
      v70 = a4;
      goto LABEL_271;
    }
    if (CFEqual(a2, CFSTR("ParentGroupID")))
    {
LABEL_14:
      v11 = (const void *)APAdvertiserInfoCopyProperty();
      goto LABEL_8;
    }
    if (CFEqual(a2, CFSTR("ParentGroupContainsDiscoverableLeader")))
    {
      PropertyInt64Sync = CFObjectGetPropertyInt64Sync();
      v18 = (const void **)MEMORY[0x1E0C9AE50];
      v23 = (const void **)MEMORY[0x1E0C9AE40];
      v24 = PropertyInt64Sync == 0;
LABEL_81:
      if (v24)
        v18 = v23;
      goto LABEL_83;
    }
    if (CFEqual(a2, CFSTR("ReceiverSessionIsActive")))
    {
      v14 = (uint64_t)a1;
      v15 = 0x20000;
      goto LABEL_49;
    }
    if (CFEqual(a2, CFSTR("TightSyncUUID")))
    {
      if (DerivedStorage[1] && !APTransportDeviceIsModernPresentOnInfra())
      {
        v11 = 0;
        goto LABEL_8;
      }
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("TightSyncIsGroupLeader")))
    {
      v14 = (uint64_t)a1;
      v15 = 0x2000;
      goto LABEL_49;
    }
    if (CFEqual(a2, CFSTR("TightSyncClusterInfo")))
      return airPlayDescription_copyTightSyncClusterInfo((uint64_t)a1, (CFMutableDictionaryRef *)a4);
    if (CFEqual(a2, CFSTR("IsAppleMusicSubscriber")))
    {
      v14 = (uint64_t)a1;
      v15 = 0x8000;
      goto LABEL_49;
    }
    if (CFEqual(a2, CFSTR("CloudLibraryIsOn")))
    {
      v14 = (uint64_t)a1;
      v15 = 0x10000;
      goto LABEL_49;
    }
    if (CFEqual(a2, CFSTR("HKAccessControlLevel")))
      return airPlayDescription_copyHKAccessControlLevel((uint64_t)a1, a4);
    if (CFEqual(a2, CFSTR("DeviceWasSetupForHKAccessControl")))
    {
      v14 = (uint64_t)a1;
      v15 = 1024;
      goto LABEL_49;
    }
    if (CFEqual(a2, CFSTR("IsHKAccessControlEnabled")))
    {
      airPlayDescription_copyIsHKAccessControlEnabled((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, CFSTR("DeviceSupportsRelay")))
    {
      airPlayDescription_copyDeviceSupportsRelay((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, CFSTR("SupportsAWDL")))
    {
      airplayDescription_copySupportsAWDL((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, CFSTR("SupportsNAN")))
    {
      airplayDescription_copySupportsNAN((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, CFSTR("SupportsSetPeersExtendedMessage")))
    {
      v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, CFSTR("SupportsPTP")))
    {
      airplayDescription_copySupportsPTP((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, CFSTR("SupportsUnifiedMediaControl")))
    {
      airPlayDescription_copySupportsUnifiedMediaControl((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, CFSTR("SupportsStatsAsBody")))
    {
      BOOLean = 0;
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
      {
        airPlayDescription_copyEndpointInfoValue((uint64_t)a1, CFSTR("keepAliveSendStatsAsBody"), &BOOLean);
        v11 = BOOLean;
        if (BOOLean)
          goto LABEL_8;
      }
      v32 = (uint64_t)a1;
      v33 = 2109800;
      goto LABEL_387;
    }
    if (CFEqual(a2, CFSTR("IsCarPlay")))
    {
      v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, CFSTR("AssistedModeType")))
    {
      airplayDescription_getAssistedModeType();
      v11 = (const void *)CFNumberCreateInt64();
      if (v11)
        goto LABEL_8;
      goto LABEL_450;
    }
    if (CFEqual(a2, CFSTR("IsConnectedOverUSB")))
    {
      airPlayDescription_copyIsConnectedOverUSB((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a2, CFSTR("MetadataFeatures")))
    {
      airPlayDescription_copyMetadataFeatures(a1, a3, (CFNumberRef *)a4);
      return 0;
    }
    if (CFEqual(a2, CFSTR("SupportsAirPlaySlideshow")))
    {
      v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, CFSTR("SupportsAirPlayScreen")))
    {
      v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, CFSTR("SupportsAirPlayPhoto")))
    {
      v25 = (uint64_t)a1;
      goto LABEL_94;
    }
    if (CFEqual(a2, CFSTR("SupportsAirPlayVideo")))
    {
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
        goto LABEL_105;
      goto LABEL_331;
    }
    if (CFEqual(a2, CFSTR("SupportsInitialVolume")))
    {
      if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
        goto LABEL_483;
      v27 = (uint64_t)a1;
      v28 = 1200200;
      goto LABEL_104;
    }
    if (CFEqual(a2, CFSTR("SupportsVolume")))
    {
      HasPrefix = airPlayDescription_hasFeatureInternal((uint64_t)a1);
LABEL_380:
      v18 = (const void **)MEMORY[0x1E0C9AE40];
      v23 = (const void **)MEMORY[0x1E0C9AE50];
      goto LABEL_80;
    }
    if (CFEqual(a2, CFSTR("SupportsMultiplayer")))
    {
      v14 = (uint64_t)a1;
      v15 = 0x80000;
      goto LABEL_49;
    }
    if (CFEqual(a2, CFSTR("BluetoothDeviceIDs")))
    {
      v72 = airPlayDescription_copyEndpointInfoValueCFArray((uint64_t)a1, CFSTR("bluetoothIDs"), a4);
      if (v72)
        goto LABEL_68;
      if (*a4)
        return v72;
      goto LABEL_345;
    }
    if (CFEqual(a2, CFSTR("CarPlayAudioFormats")))
    {
      v11 = (const void *)DerivedStorage[7];
      if (v11)
        goto LABEL_7;
LABEL_345:
      APSLogErrorAt();
      return -12784;
    }
    if (CFEqual(a2, CFSTR("HasCarPlayAudioFormats")))
    {
      v18 = (const void **)MEMORY[0x1E0C9AE50];
      v54 = (const void **)MEMORY[0x1E0C9AE40];
      v55 = DerivedStorage[7] == 0;
      goto LABEL_396;
    }
    if (CFEqual(a2, CFSTR("InitialMode")))
    {
      v56 = CFSTR("modes");
      return airPlayDescription_copyEndpointInfoValueCFDictionary((uint64_t)a1, v56, a4);
    }
    if (CFEqual(a2, CFSTR("VehicleInformation")))
    {
      BOOLean = 0;
      v72 = airPlayDescription_copyEndpointInfoValueCFDictionary((uint64_t)a1, CFSTR("vehicleInformation"), &BOOLean);
      if (v72)
        goto LABEL_68;
      if (BOOLean)
      {
        *a4 = (uint64_t)BOOLean;
        return v72;
      }
      return -12784;
    }
    if (CFEqual(a2, CFSTR("IsLimitedUI")))
    {
      v57 = CFSTR("limitedUI");
LABEL_362:
      airPlayDescription_copyEndpointInfoValueCFBoolean((uint64_t)a1, v57, (CFTypeRef *)a4);
      return 0;
    }
    if (CFEqual(a2, CFSTR("LimitedUIElements")))
    {
      BOOLean = 0;
      airPlayDescription_copyEndpointInfoValueCFArray((uint64_t)a1, CFSTR("limitedUIElements"), &BOOLean);
      v11 = BOOLean;
      if (BOOLean)
        goto LABEL_8;
      v11 = CFArrayCreate(a3, 0, 0, MEMORY[0x1E0C9B378]);
      if (v11)
        goto LABEL_8;
      goto LABEL_427;
    }
    if (CFEqual(a2, CFSTR("IsNightMode")))
    {
      v57 = CFSTR("nightMode");
      goto LABEL_362;
    }
    if (CFEqual(a2, CFSTR("IsNightModeSupported")))
    {
      BOOLean = 0;
      airPlayDescription_copyEndpointInfoValueCFBoolean((uint64_t)a1, CFSTR("nightMode"), (CFTypeRef *)&BOOLean);
      v58 = (const void **)MEMORY[0x1E0C9AE50];
      v44 = BOOLean;
      if (!BOOLean)
        v58 = (const void **)MEMORY[0x1E0C9AE40];
      v46 = *v58;
      goto LABEL_367;
    }
    if (CFEqual(a2, CFSTR("IsOEMIconVisible")))
    {
      BOOLean = 0;
      airPlayDescription_copyEndpointInfoValueCFBoolean((uint64_t)a1, CFSTR("oemIconVisible"), (CFTypeRef *)&BOOLean);
      v11 = BOOLean;
      if (BOOLean)
        goto LABEL_8;
      goto LABEL_105;
    }
    if (CFEqual(a2, CFSTR("IsRightHandDrive")))
    {
      v13 = CFSTR("rightHandDrive");
      goto LABEL_29;
    }
    if (CFEqual(a2, CFSTR("OEMIconLabel")))
      return airPlayDescription_copyEndpointInfoValueCFString((uint64_t)a1, CFSTR("oemIconLabel"), a4);
    if (CFEqual(a2, CFSTR("OEMIcons")))
      return airPlayDescription_copyOEMIcons((uint64_t)a1, a3, a4);
    if (CFEqual(a2, CFSTR("UseLegacyStarkModeActions")))
    {
      HasPrefix = airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x24D2F4u);
      goto LABEL_380;
    }
    if (CFEqual(a2, CFSTR("UseIndirectStarkSpeechModeTransitions")))
    {
      if (!APSSettingsGetInt64())
      {
        BOOLean = 0;
        v67 = (const void *)*MEMORY[0x1E0C9AE40];
        v72 = airPlayDescription_copyManufacturer(a1, (uint64_t *)&BOOLean);
        v68 = BOOLean;
        if (!v72 && FigCFEqual())
        {
          if (v68)
            CFRelease(v68);
          airPlayDescription_copyModel((uint64_t)a1, (uint64_t *)&BOOLean);
          v72 = 0;
          v68 = BOOLean;
          if (FigCFEqual())
            v67 = (const void *)*MEMORY[0x1E0C9AE50];
        }
        if (v68)
          CFRelease(v68);
        v11 = v67;
        goto LABEL_7;
      }
      v60 = (const __CFDictionary *)DerivedStorage[9];
      if (v60)
      {
        HasPrefix = CFDictionaryContainsKey(v60, CFSTR("kAPCarPlay_UseIndirectStarkSpeechModeTransitions"));
        goto LABEL_79;
      }
      APSLogErrorAt();
      goto LABEL_483;
    }
    if (CFEqual(a2, CFSTR("AllowCarPlaySpeechStateForMediaAudioType")))
    {
      v32 = (uint64_t)a1;
      v33 = 3500000;
      goto LABEL_387;
    }
    if (CFEqual(a2, CFSTR("ExtendedFeatures")))
    {
      BOOLean = 0;
      airPlayDescription_copyEndpointInfoValueCFArray((uint64_t)a1, CFSTR("extendedFeatures"), &BOOLean);
      v11 = BOOLean;
      if (BOOLean)
        goto LABEL_8;
      v11 = CFArrayCreate(a3, 0, 0, MEMORY[0x1E0C9B378]);
      if (v11)
        goto LABEL_8;
      goto LABEL_427;
    }
    if (CFEqual(a2, CFSTR("SupportsVocoderInfo")))
    {
      HasPrefix = airPlayDescription_extendedFeaturesHasKey((uint64_t)a1, CFSTR("vocoderInfo"));
      goto LABEL_79;
    }
    if (CFEqual(a2, CFSTR("SupportsJarvis")))
    {
      v61 = CMBaseObjectGetDerivedStorage();
      v18 = (const void **)MEMORY[0x1E0C9AE50];
      v54 = (const void **)MEMORY[0x1E0C9AE40];
      v55 = *(_BYTE *)(v61 + 64) == 0;
LABEL_396:
      if (v55)
        v18 = v54;
      goto LABEL_83;
    }
    if (CFEqual(a2, CFSTR("SupportsJarvisVoice")))
    {
      HasPrefix = airPlayDescription_isJarvisFeatureSupported((uint64_t)a1, CFSTR("enhancedSiriVoice"));
      goto LABEL_79;
    }
    if (CFEqual(a2, CFSTR("SupportsMixableSiriAudio")))
    {
      if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 64)
        && !airPlayDescription_isJarvisFeatureSupported((uint64_t)a1, CFSTR("enhancedSiriNotMixable")))
      {
        goto LABEL_105;
      }
      goto LABEL_483;
    }
    if (CFEqual(a2, CFSTR("ExternalPlaybackCapabilities")))
    {
      v56 = CFSTR("playbackCapabilities");
      return airPlayDescription_copyEndpointInfoValueCFDictionary((uint64_t)a1, v56, a4);
    }
    if (CFEqual(a2, CFSTR("HeadUnitRestrictions")))
    {
      v11 = (const void *)DerivedStorage[9];
      if (!v11)
        goto LABEL_8;
      goto LABEL_7;
    }
    if (CFEqual(a2, CFSTR("TXTRecordAirPlay")))
      return APAdvertiserInfoCopyAirPlayData();
    if (CFEqual(a2, CFSTR("TXTRecordAirPlayClusterCompatible")))
    {
      BOOLean = 0;
      airPlayDescription_copyClusterInfoInternal(a1, 0, 0, &BOOLean, 0, 0, 0, 0, 0, 0);
      if (!BOOLean)
        return v72;
      CFGetInt64();
      v72 = APAdvertiserInfoCopyClusterCompatibleAirPlayData();
      v59 = BOOLean;
      goto LABEL_453;
    }
    if (CFEqual(a2, CFSTR("EndpointInfo")))
    {
      v11 = (const void *)DerivedStorage[3];
      if (!v11)
        goto LABEL_8;
      goto LABEL_7;
    }
    if (CFEqual(a2, CFSTR("VoiceModelLanguages")))
    {
      v62 = CFSTR("voiceModelSupportedLanguages");
    }
    else
    {
      if (!CFEqual(a2, CFSTR("CurrentVoiceModelLanguage")))
      {
        if (!CFEqual(a2, CFSTR("AltScreenSuggestUIURLs")))
        {
          if (CFEqual(a2, CFSTR("AirPlayEndpointProperties")))
          {
            v63 = (uint64_t)a1;
            v64 = 0;
          }
          else
          {
            if (!CFEqual(a2, CFSTR("AirPlayClusterCompatibleEndpointProperties")))
            {
              if (CFEqual(a2, CFSTR("SupportsBufferedPKDDecryption")))
              {
                v25 = (uint64_t)a1;
                goto LABEL_94;
              }
              if (CFEqual(a2, CFSTR("Descriptor")))
                return airPlayDescription_copyMXDescriptor((uint64_t)a1, (__CFDictionary **)a4);
              if (CFEqual(a2, CFSTR("SupportsMixedSampleRates")))
              {
                v25 = (uint64_t)a1;
                goto LABEL_94;
              }
              if (CFEqual(a2, CFSTR("SupportsSenderUIEventsChannel")))
              {
                v13 = CFSTR("supportsSenderUIEvents");
                goto LABEL_29;
              }
              if (CFEqual(a2, CFSTR("SupportsDCXForSpatialAudio")))
              {
                CMBaseObjectGetDerivedStorage();
                if (airPlayDescription_hasFeatureInternal((uint64_t)a1)
                  && airPlayDescription_isDCXSupportedForSpatialAudio((uint64_t)a1))
                {
                  goto LABEL_105;
                }
                goto LABEL_483;
              }
              if (gLogCategory_APEndpointDescriptionAirPlay <= 30
                && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              return -12784;
            }
            v63 = (uint64_t)a1;
            v64 = 1;
          }
          airPlayDescription_copyAirPlayEndpointProperties(v63, v64, (__CFDictionary **)a4);
          return 0;
        }
        BOOLean = 0;
        airPlayDescription_copyEndpointInfoValueCFArray((uint64_t)a1, CFSTR("altScreenSuggestUIURLs"), &BOOLean);
        v11 = BOOLean;
        if (BOOLean)
          goto LABEL_8;
        v11 = CFArrayCreate(a3, 0, 0, MEMORY[0x1E0C9B378]);
        if (v11)
          goto LABEL_8;
LABEL_427:
        APSLogErrorAt();
        return -16761;
      }
      v62 = CFSTR("voiceModelCurrentLanguage");
    }
    return airPlayDescription_copyEndpointInfoNestedCFData((uint64_t)a1, (uint64_t)CFSTR("enhancedSiriInfo"), v62, (CFTypeRef *)a4);
  }
  return airPlayDescription_copyDeviceID((uint64_t)a1, a4);
}

uint64_t airPlayDescription_copyDeviceID(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  char cStr[16];
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)cStr = 0u;
  v7 = 0u;
  v4 = APAdvertiserInfoCopyProperty();
  if (v4
    || (v4 = *(_QWORD *)(DerivedStorage + 8)) == 0
    || (APTransportDeviceGetDiscoveryID(),
        CFGetInt64(),
        SNPrintF(),
        (v4 = (uint64_t)CFStringCreateWithCString(0, cStr, 0x8000100u)) != 0))
  {
    *a2 = v4;
  }
  else
  {
    APSLogErrorAt();
  }
  return 0;
}

uint64_t airPlayDescription_copyOSBuildVersion(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;

  CMBaseObjectGetDerivedStorage();
  v5 = 0;
  airPlayDescription_copyEndpointInfoValueCFString(a1, CFSTR("osBuildVersion"), &v5);
  if (!v5)
    return 4294954512;
  result = 0;
  *a2 = v5;
  return result;
}

uint64_t airPlayDescription_copySourceVersion(uint64_t a1, uint64_t *a2)
{
  const __CFString *v3;
  const __CFString *v4;
  uint64_t Int64;
  uint64_t v6;
  _OWORD v8[16];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  memset(v8, 0, sizeof(v8));
  v3 = (const __CFString *)APAdvertiserInfoCopyProperty();
  v4 = v3;
  if (v3)
  {
    if (!CFStringGetCString(v3, (char *)v8, 256, 0x8000100u))
    {
      APSLogErrorAt();
      v6 = 4294960534;
      goto LABEL_6;
    }
    TextToSourceVersion();
  }
  Int64 = CFNumberCreateInt64();
  if (!Int64)
  {
    APSLogErrorAt();
    v6 = 4294960534;
    if (!v4)
      return v6;
    goto LABEL_6;
  }
  v6 = 0;
  *a2 = Int64;
  if (v4)
LABEL_6:
    CFRelease(v4);
  return v6;
}

uint64_t airPlayDescription_copyModel(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;

  CMBaseObjectGetDerivedStorage();
  v5 = 0;
  airPlayDescription_copyEndpointInfoValueCFString(a1, CFSTR("model"), &v5);
  result = v5;
  if (!v5)
  {
    result = APAdvertiserInfoCopyProperty();
    if (!result)
      result = (uint64_t)CFRetain(CFSTR("AirPort4,102"));
  }
  *a2 = result;
  return result;
}

uint64_t airPlayDescription_copyManufacturer(const void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  CMBaseObjectGetDerivedStorage();
  v7 = 0;
  airPlayDescription_copyEndpointInfoValueCFString((uint64_t)a1, CFSTR("manufacturer"), &v7);
  v4 = v7;
  if (!v7)
  {
    v4 = APAdvertiserInfoCopyProperty();
    if (!v4)
    {
      if (!airPlayDescription_isAppleReceiver(a1))
        return 4294954512;
      v4 = (uint64_t)CFRetain(CFSTR("Apple"));
      if (!v4)
        return 4294954512;
    }
  }
  v5 = 0;
  *a2 = v4;
  return v5;
}

uint64_t airPlayDescription_copyCompany(const void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  CMBaseObjectGetDerivedStorage();
  v7 = 0;
  airPlayDescription_copyEndpointInfoValueCFString((uint64_t)a1, CFSTR("company"), &v7);
  v4 = v7;
  if (!v7)
  {
    v4 = APAdvertiserInfoCopyProperty();
    if (!v4)
    {
      if (!airPlayDescription_isAppleReceiver(a1))
        return 4294954512;
      v4 = (uint64_t)CFRetain(CFSTR("Apple"));
      if (!v4)
        return 4294954512;
    }
  }
  v5 = 0;
  *a2 = v4;
  return v5;
}

const __CFDictionary *airPlayDescription_copyEndpointInfoValue(uint64_t a1, const void *a2, const __CFDictionary **a3)
{
  const __CFDictionary *result;

  result = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 24);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
      result = (const __CFDictionary *)CFRetain(result);
  }
  *a3 = result;
  return result;
}

uint64_t airPlayDescription_copyVolumeControlTypeEx(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  const void *v6;
  int v7;
  uint64_t SInt32;
  uint64_t v9;
  const void *v11;

  CMBaseObjectGetDerivedStorage();
  v11 = 0;
  v5 = airPlayDescription_copyFeaturesInternal(a1, (uint64_t *)&v11);
  if ((_DWORD)v5)
  {
    v9 = v5;
    APSLogErrorAt();
    v6 = v11;
    goto LABEL_14;
  }
  v6 = v11;
  if (APSFeaturesHasFeature()
    || (!APSFeaturesHasFeature() ? (v7 = APSFeaturesHasFeature() != 0) : (v7 = 2),
        APSFeaturesHasFeature() || v7))
  {
    if (gLogCategory_APEndpointDescriptionAirPlay > 30
      || gLogCategory_APEndpointDescriptionAirPlay == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_12;
    }
  }
  else
  {
    FigCFDictionaryGetValue();
    FigCFNumberGetSInt32();
    APSVolumeControlTypeToEx();
    if (gLogCategory_APEndpointDescriptionAirPlay > 30
      || gLogCategory_APEndpointDescriptionAirPlay == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_12;
    }
  }
  LogPrintF();
LABEL_12:
  SInt32 = FigCFNumberCreateSInt32();
  *a3 = SInt32;
  if (SInt32)
  {
    v9 = 0;
  }
  else
  {
    APSLogErrorAt();
    v9 = 4294960568;
  }
LABEL_14:
  if (v6)
    CFRelease(v6);
  return v9;
}

uint64_t airPlayDescription_copyMuteControlType(const void *a1, uint64_t a2, CFTypeRef *a3)
{
  const void *SInt64;
  CFTypeID v6;
  CFTypeRef cf;

  cf = 0;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 112))
  {
    airPlayDescription_copyEndpointInfoValue((uint64_t)a1, CFSTR("muteControlType"), (const __CFDictionary **)&cf);
    SInt64 = cf;
    if (cf)
    {
      v6 = CFGetTypeID(cf);
      if (v6 == CFNumberGetTypeID())
      {
        if (gLogCategory_APEndpointDescriptionAirPlay <= 30
          && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
        {
          FigCFNumberGetSInt64();
          APSGetAPMuteControlTypeName();
          LogPrintF();
        }
LABEL_14:
        *a3 = CFRetain(SInt64);
        CFRelease(SInt64);
        return 0;
      }
    }
  }
  if (!airPlayDescription_isThirdPartyTVFamily((uint64_t)a1))
    airPlayDescription_isAppleReceiver(a1);
  if (gLogCategory_APEndpointDescriptionAirPlay <= 30
    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
  {
    APSGetAPMuteControlTypeName();
    LogPrintF();
  }
  SInt64 = (const void *)FigCFNumberCreateSInt64();
  if (SInt64)
    goto LABEL_14;
  APSLogErrorAt();
  return 4294960568;
}

uint64_t airPlayDescription_copyMACAddress(uint64_t a1, const __CFAllocator *a2, CFDataRef *a3)
{
  uint64_t v6;
  CFStringRef v7;
  uint64_t v8;
  CFDataRef v9;
  uint64_t v10;
  UInt8 bytes[6];
  CFStringRef theString;
  char buffer[64];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  theString = 0;
  v6 = airPlayDescription_copyDeviceID(a1, (uint64_t *)&theString);
  if ((_DWORD)v6)
  {
    v10 = v6;
    APSLogErrorAt();
    v7 = theString;
    if (!theString)
      return v10;
    goto LABEL_7;
  }
  v7 = theString;
  if (!theString)
  {
    v10 = 4294895543;
    APSLogErrorAt();
    return v10;
  }
  if (CFStringGetCString(theString, buffer, 64, 0x8000100u))
  {
    v8 = TextToHardwareAddress();
    if (!(_DWORD)v8)
    {
      v9 = CFDataCreate(a2, bytes, 6);
      if (v9)
      {
        v10 = 0;
        *a3 = v9;
      }
      else
      {
        APSLogErrorAt();
        v10 = 4294895546;
      }
      goto LABEL_7;
    }
    v10 = v8;
  }
  else
  {
    v10 = 4294895543;
  }
  APSLogErrorAt();
LABEL_7:
  CFRelease(v7);
  return v10;
}

uint64_t airPlayDescription_copyAudioLatencyForAV(const __CFAllocator *a1, CFNumberRef *a2)
{
  CFNumberRef v4;
  int valuePtr;

  valuePtr = APSAudioLatencyForAVMs();
  v4 = CFNumberCreate(a1, kCFNumberSInt32Type, &valuePtr);
  *a2 = v4;
  if (v4)
    return 0;
  APSLogErrorAt();
  return 4294895546;
}

uint64_t airPlayDescription_copyAudioLatencyOffsetForAV(const __CFAllocator *a1, CFNumberRef *a2)
{
  CFNumberRef v4;
  int valuePtr;

  valuePtr = APSAudioLatencyOffsetForAVMs();
  v4 = CFNumberCreate(a1, kCFNumberSInt32Type, &valuePtr);
  *a2 = v4;
  if (v4)
    return 0;
  APSLogErrorAt();
  return 4294895546;
}

uint64_t airPlayDescription_copyAuthenticationType(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  CMBaseObjectGetDerivedStorage();
  if (airPlayDescription_hasFeatureInternal(a1)
    || airPlayDescription_hasFeatureInternal(a1)
    || airPlayDescription_hasFeatureInternal(a1)
    || airPlayDescription_hasFeatureInternal(a1)
    || airPlayDescription_hasFeatureInternal(a1)
    || airPlayDescription_hasFeatureInternal(a1))
  {
    v4 = 0;
    *a2 = CFNumberCreateInt64();
  }
  else
  {
    v4 = 4294895542;
    if (gLogCategory_APEndpointDescriptionAirPlay <= 50
      && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  return v4;
}

CFTypeRef airPlayDescription_copyPasswordRequired(uint64_t a1, _QWORD *a2)
{
  CFTypeRef *v3;
  char PropertyInt64Sync;
  CFTypeRef result;

  CMBaseObjectGetDerivedStorage();
  if (CFObjectGetPropertyInt64Sync())
  {
    v3 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  }
  else
  {
    PropertyInt64Sync = CFObjectGetPropertyInt64Sync();
    v3 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if ((PropertyInt64Sync & 0x80) == 0)
      v3 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  }
  result = CFRetain(*v3);
  *a2 = result;
  return result;
}

CFTypeRef airplayDescription_copyStatusFlagsContainsFlag(uint64_t a1, int a2, _QWORD *a3)
{
  int PropertyInt64Sync;
  CFTypeRef *v6;
  CFTypeRef result;

  CMBaseObjectGetDerivedStorage();
  PropertyInt64Sync = CFObjectGetPropertyInt64Sync();
  v6 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if ((a2 & ~PropertyInt64Sync) != 0)
    v6 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  result = CFRetain(*v6);
  *a3 = result;
  return result;
}

uint64_t airPlayDescription_copyPairingPeerCUAirPlayIdentifier(uint64_t a1, uint64_t *a2)
{
  const void *v3;
  uint64_t result;

  v3 = *(const void **)(CMBaseObjectGetDerivedStorage() + 32);
  if (v3)
    result = (uint64_t)CFRetain(v3);
  else
    result = APAdvertiserInfoCopyProperty();
  *a2 = result;
  return result;
}

uint64_t airPlayDescription_copyPairingPeerCUSystemIdentifier(uint64_t a1, uint64_t *a2)
{
  const void *v3;
  uint64_t result;

  v3 = *(const void **)(CMBaseObjectGetDerivedStorage() + 40);
  if (v3)
    result = (uint64_t)CFRetain(v3);
  else
    result = APAdvertiserInfoCopyProperty();
  *a2 = result;
  return result;
}

uint64_t airPlayDescription_copyPairingPeerPublicKey(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage;
  int hasFeatureInternal;
  const void *v7;
  uint64_t v8;
  const __CFString *v10;
  const __CFString *v11;
  UInt8 bytes[16];
  __int128 v13;
  char buffer[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  *(_OWORD *)buffer = 0u;
  v15 = 0u;
  *(_OWORD *)bytes = 0u;
  v13 = 0u;
  hasFeatureInternal = airPlayDescription_hasFeatureInternal(a1);
  v7 = *(const void **)(DerivedStorage + 48);
  if (v7)
  {
    v8 = 0;
    *a3 = CFRetain(v7);
    return v8;
  }
  v10 = (const __CFString *)APAdvertiserInfoCopyProperty();
  v11 = v10;
  if (hasFeatureInternal)
  {
    if (!v10)
      return 4294895545;
  }
  else if (!v10)
  {
    APSLogErrorAt();
    v8 = APSSignalErrorAt();
    if (!(_DWORD)v8)
      return v8;
    goto LABEL_10;
  }
  if (CFStringGetCString(v10, buffer, 128, 0x8000100u))
    HexToData();
  v8 = 4294895543;
  APSLogErrorAt();
  CFRelease(v11);
LABEL_10:
  if (!hasFeatureInternal
    && gLogCategory_APEndpointDescriptionAirPlay <= 60
    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v8;
}

CFTypeRef airPlayDescription_copyOneTimePairingRequired(uint64_t a1, _QWORD *a2)
{
  __int16 PropertyInt64Sync;
  CFTypeRef *v4;
  CFTypeRef result;

  CMBaseObjectGetDerivedStorage();
  PropertyInt64Sync = CFObjectGetPropertyInt64Sync();
  v4 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if ((PropertyInt64Sync & 0x200) == 0)
    v4 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  result = CFRetain(*v4);
  *a2 = result;
  return result;
}

void airPlayDescription_copyAirPlaySecurity(uint64_t a1, uint64_t *a2)
{
  CFBooleanRef v4;
  CFBooleanRef v5;
  CFBooleanRef v6;
  CFBooleanRef BOOLean;

  CMBaseObjectGetDerivedStorage();
  v6 = 0;
  BOOLean = 0;
  v5 = 0;
  airPlayDescription_copyPasswordRequired(a1, &BOOLean);
  airplayDescription_copyStatusFlagsContainsFlag(a1, 8, &v6);
  airPlayDescription_copyOneTimePairingRequired(a1, &v5);
  v4 = BOOLean;
  if (!CFBooleanGetValue(BOOLean) && !CFBooleanGetValue(v6))
    CFBooleanGetValue(v5);
  *a2 = CFNumberCreateInt64();
  if (v4)
    CFRelease(v4);
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
}

CFTypeRef airPlayDescription_copyDeviceSubType(const void *a1, _QWORD *a2)
{
  CFTypeRef *v4;
  CFTypeRef result;
  _BOOL4 isThirdPartyTVFamily;

  CMBaseObjectGetDerivedStorage();
  switch(CFObjectGetPropertyInt64Sync())
  {
    case 1u:
      v4 = (CFTypeRef *)MEMORY[0x1E0CA4910];
      break;
    case 2u:
      v4 = (CFTypeRef *)MEMORY[0x1E0CA4900];
      break;
    case 3u:
      v4 = (CFTypeRef *)MEMORY[0x1E0CA4918];
      break;
    case 4u:
      v4 = (CFTypeRef *)MEMORY[0x1E0CA48F8];
      break;
    case 5u:
      v4 = (CFTypeRef *)MEMORY[0x1E0CA4928];
      break;
    case 6u:
      v4 = (CFTypeRef *)MEMORY[0x1E0CA4930];
      break;
    default:
      CMBaseObjectGetDerivedStorage();
      if (airPlayDescription_modelHasPrefix(a1, CFSTR("AppleTV")))
      {
        v4 = (CFTypeRef *)MEMORY[0x1E0CA48C0];
      }
      else
      {
        CMBaseObjectGetDerivedStorage();
        if (airPlayDescription_modelHasPrefix(a1, CFSTR("AudioAccessory")))
        {
          v4 = (CFTypeRef *)MEMORY[0x1E0CA48E8];
        }
        else if (airPlayDescription_isThirdPartyDevice((uint64_t)a1))
        {
          isThirdPartyTVFamily = airPlayDescription_isThirdPartyTVFamily((uint64_t)a1);
          v4 = (CFTypeRef *)MEMORY[0x1E0CA4910];
          if (!isThirdPartyTVFamily)
            v4 = (CFTypeRef *)MEMORY[0x1E0CA4908];
        }
        else
        {
          v4 = (CFTypeRef *)MEMORY[0x1E0CA4920];
        }
      }
      break;
  }
  result = CFRetain(*v4);
  *a2 = result;
  return result;
}

uint64_t airPlayDescription_copyEndpointInfoValueCFArray(uint64_t a1, const void *a2, _QWORD *a3)
{
  CFTypeRef v6;
  CFTypeID v7;
  uint64_t result;
  CFTypeRef cf;

  CMBaseObjectGetDerivedStorage();
  cf = 0;
  airPlayDescription_copyEndpointInfoValue(a1, a2, (const __CFDictionary **)&cf);
  v6 = cf;
  if (cf && (v7 = CFGetTypeID(cf), v7 != CFArrayGetTypeID()))
  {
    APSLogErrorAt();
    CFRelease(v6);
    return 4294895541;
  }
  else
  {
    result = 0;
    *a3 = v6;
  }
  return result;
}

BOOL airPlayDescription_isSourceVersionAtLeast(uint64_t a1, unsigned int a2)
{
  const void *v4;
  _BOOL8 v5;
  const void *v7;

  v7 = 0;
  CMBaseObjectGetDerivedStorage();
  if (airPlayDescription_copySourceVersion(a1, (uint64_t *)&v7))
  {
    APSLogErrorAt();
    v5 = 0;
    v4 = v7;
    if (!v7)
      return v5;
    goto LABEL_3;
  }
  v4 = v7;
  v5 = CFGetInt64Ranged() >= a2;
  if (v4)
LABEL_3:
    CFRelease(v4);
  return v5;
}

BOOL airPlayDescription_isAppleReceiver(const void *a1)
{
  CFTypeRef v2;
  _BOOL8 v3;
  CFTypeRef cf1;

  cf1 = 0;
  CMBaseObjectGetDerivedStorage();
  airPlayDescription_copyDeviceSubType(a1, &cf1);
  v2 = cf1;
  if (!cf1)
    return 0;
  v3 = CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0CA48C0])
    || CFEqual(v2, (CFTypeRef)*MEMORY[0x1E0CA48E8])
    || CFEqual(v2, (CFTypeRef)*MEMORY[0x1E0CA48F8])
    || CFEqual(v2, (CFTypeRef)*MEMORY[0x1E0CA4928])
    || CFEqual(v2, (CFTypeRef)*MEMORY[0x1E0CA4930]);
  CFRelease(v2);
  return v3;
}

BOOL airPlayDescription_isLegacyAirPlaySpeaker(const void *a1)
{
  unsigned int v2;
  int HasPrefix;
  _BOOL8 v4;
  CFTypeRef v6;
  CFTypeRef cf;

  CMBaseObjectGetDerivedStorage();
  v6 = 0;
  cf = 0;
  if (airPlayDescription_copySourceVersion((uint64_t)a1, (uint64_t *)&v6)
    || (v2 = CFGetInt64Ranged(),
        CMBaseObjectGetDerivedStorage(),
        HasPrefix = airPlayDescription_modelHasPrefix(a1, CFSTR("AppleTV")),
        CFGetAllocator(a1),
        airPlayDescription_copyFeaturesInternal((uint64_t)a1, (uint64_t *)&cf)))
  {
    APSLogErrorAt();
LABEL_6:
    v4 = 0;
    goto LABEL_8;
  }
  if (v2 < 0x1E9998)
  {
    v4 = 1;
    goto LABEL_8;
  }
  if (HasPrefix)
    goto LABEL_6;
  v4 = APSFeaturesHasFeature() == 0;
LABEL_8:
  if (cf)
    CFRelease(cf);
  if (v6)
    CFRelease(v6);
  return v4;
}

BOOL airPlayDescription_isThirdPartyTVFamily(uint64_t a1)
{
  _BOOL4 isThirdPartyDevice;
  BOOL v3;

  CMBaseObjectGetDerivedStorage();
  isThirdPartyDevice = airPlayDescription_isThirdPartyDevice(a1);
  if (airPlayDescription_hasFeatureInternal(a1))
    v3 = !isThirdPartyDevice;
  else
    v3 = 1;
  return !v3;
}

uint64_t airPlayDescription_hasFeatureInternal(uint64_t a1)
{
  const void *v2;
  uint64_t HasFeature;
  const void *v5;

  CMBaseObjectGetDerivedStorage();
  v5 = 0;
  if (airPlayDescription_copyFeaturesInternal(a1, (uint64_t *)&v5))
  {
    APSLogErrorAt();
    HasFeature = 0;
    v2 = v5;
    if (!v5)
      return HasFeature;
    goto LABEL_3;
  }
  v2 = v5;
  HasFeature = APSFeaturesHasFeature();
  if (v2)
LABEL_3:
    CFRelease(v2);
  return HasFeature;
}

BOOL airplayDescription_canBeRemoteControlled(uint64_t a1)
{
  _BOOL8 v2;
  CFTypeRef v3;
  CFTypeRef cf;

  CMBaseObjectGetDerivedStorage();
  cf = 0;
  airplayDescription_copyStatusFlagsContainsFlag(a1, 8, &cf);
  if (airPlayDescription_isSourceVersionAtLeast(a1, 0x365948u)
    && airPlayDescription_hasFeatureInternal(a1)
    && !airPlayDescription_hasFeatureInternal(a1))
  {
    v3 = cf;
    v2 = CFBooleanGetValue((CFBooleanRef)cf) == 0;
    if (!v3)
      return v2;
    goto LABEL_5;
  }
  v2 = 0;
  v3 = cf;
  if (cf)
LABEL_5:
    CFRelease(v3);
  return v2;
}

uint64_t airPlayDescription_isCarPlaySpatialAudioSupported()
{
  uint64_t DerivedStorage;
  CFIndex Count;
  CFIndex v2;
  CFIndex v3;
  int v4;
  uint64_t UInt64;
  unint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  CFArrayRef theArray;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theArray = 0;
  IsAppleInternalBuild();
  if (!APSSettingsGetIntWithDefault())
    goto LABEL_25;
  if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 65)
    || APCarPlayAudioFormatsCopyFormatsForAudioType(*(_BYTE **)(DerivedStorage + 56), 103, CFSTR("media"), 0, &theArray, 0))
  {
    goto LABEL_21;
  }
  if (!theArray)
  {
LABEL_25:
    LOBYTE(v4) = 0;
    return v4;
  }
  Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    v2 = Count;
    v3 = 0;
    v4 = 0;
    do
    {
      CFArrayGetValueAtIndex(theArray, v3);
      UInt64 = FigCFNumberGetUInt64();
      v6 = UInt64 - 65;
      if (((0x180Fu >> (UInt64 - 65)) & 1) != 0)
        v7 = 1;
      else
        v7 = v4;
      if (v6 < 0xD)
        v4 = v7;
      v8 = v6 > 0xC;
      v9 = (1 << v6) & 0x180F;
      v10 = v8 || v9 == 0;
      ++v3;
    }
    while (v10 && v2 != v3);
    goto LABEL_22;
  }
LABEL_21:
  LOBYTE(v4) = 0;
LABEL_22:
  if (theArray)
    CFRelease(theArray);
  return v4;
}

uint64_t airPlayDescription_hasFeaturesInternal(uint64_t a1)
{
  const void *v2;
  uint64_t HasAllFeatures;
  const void *v5;

  CMBaseObjectGetDerivedStorage();
  v5 = 0;
  if (airPlayDescription_copyFeaturesInternal(a1, (uint64_t *)&v5))
  {
    APSLogErrorAt();
    HasAllFeatures = 0;
    v2 = v5;
    if (!v5)
      return HasAllFeatures;
    goto LABEL_3;
  }
  v2 = v5;
  HasAllFeatures = APSFeaturesHasAllFeatures();
  if (v2)
LABEL_3:
    CFRelease(v2);
  return HasAllFeatures;
}

void airPlayDescription_copyCarPlayAudioFormats(uint64_t a1, const __CFAllocator *a2, CFMutableDictionaryRef *a3)
{
  uint64_t DerivedStorage;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v8;
  int Value;
  _BYTE *v10;
  unint64_t v11;
  CFBooleanRef BOOLean;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = 0;
  BOOLean = 0;
  Mutable = CFDictionaryCreateMutable(a2, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    return;
  }
  v8 = Mutable;
  airPlayDescription_copyIsConnectedOverUSB(a1, &BOOLean);
  Value = CFBooleanGetValue(BOOLean);
  v10 = *(_BYTE **)(DerivedStorage + 56);
  if (Value)
  {
    if (APCarPlayAudioFormatsCopyFormatsForAudioType(v10, 100, CFSTR("media"), &v11, 0, 0))
      goto LABEL_12;
  }
  else if (APCarPlayAudioFormatsCopyFormatsForAudioType(v10, 102, CFSTR("media"), &v11, 0, 0))
  {
    goto LABEL_12;
  }
  CFDictionarySetInt64();
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 65))
  {
    if (!APCarPlayAudioFormatsCopyFormatsForAudioType(*(_BYTE **)(DerivedStorage + 56), 103, CFSTR("media"), &v11, 0, 0))
    {
      CFDictionarySetInt64();
      goto LABEL_9;
    }
LABEL_12:
    APSLogErrorAt();
    CFRelease(v8);
    return;
  }
LABEL_9:
  *a3 = v8;
}

uint64_t airPlayDescription_copyAirPlayAudioFormats(uint64_t a1, const __CFAllocator *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  const __CFDictionary *v7;
  const void *Value;
  CFTypeRef v9;
  CFMutableDictionaryRef Mutable;
  uint64_t v11;
  const void *v12;
  const void *v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    APSLogErrorAt();
    return 4294895545;
  }
  v7 = *(const __CFDictionary **)(DerivedStorage + 24);
  if (v7)
  {
    Value = CFDictionaryGetValue(v7, CFSTR("supportedFormats"));
    if (Value)
    {
      v9 = CFRetain(Value);
      if (v9)
        goto LABEL_13;
    }
  }
  v14 = 0;
  CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = airPlayDescription_copyFeaturesInternal(a1, (uint64_t *)&v14);
  if ((_DWORD)v11)
  {
    APSLogErrorAt();
    v9 = 0;
    v12 = v14;
    if (v14)
LABEL_9:
      CFRelease(v12);
  }
  else
  {
    v12 = v14;
    APSFeaturesHasFeature();
    APSFeaturesHasFeature();
    APSFeaturesHasFeature();
    APSFeaturesHasFeature();
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    if (APSFeaturesHasFeature())
    {
      APAudioFormatGetSupportedTransportAudioFormatsLowLatencySender();
      CFDictionarySetInt64();
    }
    v9 = Mutable;
    Mutable = 0;
    if (v12)
      goto LABEL_9;
  }
  if (Mutable)
    CFRelease(Mutable);
  if (!(_DWORD)v11)
  {
LABEL_13:
    v11 = 0;
    *a3 = v9;
    return v11;
  }
  APSLogErrorAt();
  if (v9)
    CFRelease(v9);
  return v11;
}

uint64_t airPlayDescription_copyCarPlayAudioFormatsExtended(uint64_t a1, const __CFAllocator *a2, __CFDictionary **a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  IsAppleInternalBuild();
  if (!APSSettingsGetIntWithDefault())
    return 0;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 65))
  {
    v6 = APCarPlayAudioFormatsCopyFormatsForAudioType(*(_BYTE **)(DerivedStorage + 56), 103, CFSTR("media"), 0, (CFArrayRef *)&value, 0);
    if ((_DWORD)v6)
    {
      v7 = v6;
      APSLogErrorAt();
    }
    else
    {
      if (!value)
        return 0;
      Mutable = CFDictionaryCreateMutable(a2, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v9 = Mutable;
        CFDictionarySetValue(Mutable, CFSTR("bufferStream"), value);
        v7 = 0;
        *a3 = v9;
      }
      else
      {
        APSLogErrorAt();
        v7 = 4294960568;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  if (value)
    CFRelease(value);
  return v7;
}

uint64_t airPlayDescription_copyAirPlayAudioFormatsExtended(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  const __CFDictionary *v4;
  const void *Value;
  CFTypeRef v6;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = *(const __CFDictionary **)(DerivedStorage + 24);
    if (v4 && (Value = CFDictionaryGetValue(v4, CFSTR("supportedAudioFormatsExtended"))) != 0)
      v6 = CFRetain(Value);
    else
      v6 = 0;
    result = 0;
    *a2 = v6;
  }
  else
  {
    APSLogErrorAt();
    return 4294895545;
  }
  return result;
}

CFTypeRef airPlayDescription_copySupportsRFC2617DigestAuth(uint64_t a1, _QWORD *a2)
{
  CFTypeRef *v4;
  _BOOL4 isSourceVersionAtLeast;
  CFTypeRef result;

  CMBaseObjectGetDerivedStorage();
  if (CFObjectGetPropertyInt64Sync())
  {
    v4 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  }
  else
  {
    isSourceVersionAtLeast = airPlayDescription_isSourceVersionAtLeast(a1, 0x125048u);
    v4 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (!isSourceVersionAtLeast)
      v4 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  }
  result = CFRetain(*v4);
  *a2 = result;
  return result;
}

BOOL airPlayDescription_supportsCUPairingAndEncryption(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  return airPlayDescription_hasFeatureInternal(a1)
      || airPlayDescription_hasFeatureInternal(a1)
      || airPlayDescription_hasFeatureInternal(a1)
      || airPlayDescription_hasFeatureInternal(a1) != 0;
}

uint64_t airPlayDescription_copyDisplayDescriptionArray(uint64_t a1, const __CFAllocator *a2, __CFArray **a3)
{
  uint64_t DerivedStorage;
  CFTypeRef v7;
  __CFArray *Mutable;
  const __CFDictionary *v9;
  const __CFArray *v10;
  const __CFArray *v11;
  CFTypeID v12;
  CFIndex Count;
  CFIndex v14;
  uint64_t v15;
  const void *TypedValueAtIndex;
  int v18;
  CFTypeRef cf;
  void *value;
  unsigned int v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  value = 0;
  v21 = airPlayDescription_copyFeaturesInternal(a1, (uint64_t *)&cf);
  if (v21)
  {
    APSLogErrorAt();
LABEL_21:
    Mutable = 0;
    goto LABEL_22;
  }
  v7 = cf;
  if (APSFeaturesHasFeature())
  {
    Mutable = CFArrayCreateMutable(a2, 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v9 = *(const __CFDictionary **)(DerivedStorage + 24);
      if (!v9)
      {
        v21 = APEndpointDisplayDescriptionCreateDefaultWithEndpointFeatures(a2, (uint64_t)v7, &value);
        if (v21)
        {
LABEL_29:
          APSLogErrorAt();
          goto LABEL_22;
        }
        CFArrayAppendValue(Mutable, value);
        goto LABEL_16;
      }
      v10 = (const __CFArray *)CFDictionaryGetValue(v9, CFSTR("displays"));
      if (!v10)
      {
LABEL_16:
        if (gLogCategory_APEndpointDescriptionAirPlay <= 50
          && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
        {
          CFArrayGetCount(Mutable);
          LogPrintF();
        }
        *a3 = Mutable;
        goto LABEL_21;
      }
      v11 = v10;
      v12 = CFGetTypeID(v10);
      if (v12 == CFArrayGetTypeID())
      {
        Count = CFArrayGetCount(v11);
        if (Count >= 1)
        {
          v14 = Count;
          v15 = 0;
          while (1)
          {
            CFDictionaryGetTypeID();
            TypedValueAtIndex = (const void *)CFArrayGetTypedValueAtIndex();
            v21 = APEndpointDisplayDescriptionCreateWithDisplayInfo((uint64_t)a2, TypedValueAtIndex, &value);
            if (v21)
              goto LABEL_29;
            CFArrayAppendValue(Mutable, value);
            if (value)
            {
              CFRelease(value);
              value = 0;
            }
            if (v14 == ++v15)
              goto LABEL_16;
          }
        }
        goto LABEL_16;
      }
      APSLogErrorAt();
      v18 = -71751;
    }
    else
    {
      APSLogErrorAt();
      v18 = -71750;
    }
  }
  else
  {
    Mutable = 0;
    v18 = -71754;
  }
  v21 = v18;
LABEL_22:
  if (value)
    CFRelease(value);
  if (Mutable)
    CFRelease(Mutable);
  if (cf)
    CFRelease(cf);
  return v21;
}

CFTypeRef airplayDescription_copySupportsAirPlayFromCloud(uint64_t a1, _QWORD *a2)
{
  CFTypeRef *v4;
  CFTypeRef result;

  CMBaseObjectGetDerivedStorage();
  if (airPlayDescription_hasFeatureInternal(a1) && (CFObjectGetPropertyInt64Sync() & 0x40) != 0)
    v4 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  else
    v4 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  result = CFRetain(*v4);
  *a2 = result;
  return result;
}

uint64_t airPlayDescription_getAccessControlType()
{
  CMBaseObjectGetDerivedStorage();
  return CFObjectGetPropertyInt64Sync();
}

void airPlayDescription_copyClusterInfoInternal(const void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, CFTypeRef *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, _QWORD *a10)
{
  uint64_t v18;
  const __CFDictionary *v19;
  const void *Value;
  const void *v21;
  const void *v22;
  const void *v23;
  CFStringRef v24;
  const void *v25;
  const void *v26;
  const void *v27;
  int PropertyInt64Sync;
  CFBooleanRef v29;
  const void *v30;
  const void *v31;
  CFTypeRef v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  CFTypeRef v40;
  CFTypeRef v41;
  const void *Int64;
  const void *v43;
  CFTypeRef v44;
  int v45;
  CFTypeRef *v46;
  const __CFBoolean *v47;
  CFTypeRef v48;
  const __CFString *v49;
  _QWORD *v50;
  _QWORD *v51;
  const void *v52;
  CFTypeRef *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  CFTypeRef v58;
  uint64_t DerivedStorage;
  const void *v60;
  CFTypeRef v61;
  CFTypeRef cf;
  const __CFBoolean *v63;
  CFBooleanRef v64;
  int v65;

  v63 = 0;
  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    *a2 = 0;
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  if (a6)
    *a6 = 0;
  if (a5)
    *a5 = 0;
  if (a7)
    *a7 = 0;
  if (a8)
    *a8 = 0;
  if (a9)
    *a9 = 0;
  v57 = a2;
  if (a10)
    *a10 = 0;
  if (*(_QWORD *)(DerivedStorage + 8) && !APTransportDeviceIsModernPresentOnInfra())
  {
    v34 = 0;
    v23 = 0;
    v35 = 0;
    v58 = 0;
    v36 = 0;
    v32 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v27 = 0;
    goto LABEL_112;
  }
  v50 = a3;
  v51 = a4;
  v53 = a6;
  v54 = a5;
  v55 = a7;
  v56 = a8;
  CMBaseObjectGetDerivedStorage();
  v18 = CMBaseObjectGetDerivedStorage();
  if (!APSIsPermanentSpeakerGroupingEnabled() || (v19 = *(const __CFDictionary **)(v18 + 80)) == 0)
  {
LABEL_40:
    v65 = 0;
    CMBaseObjectGetDerivedStorage();
    v21 = (const void *)APAdvertiserInfoCopyProperty();
    if (v21)
    {
      PropertyInt64Sync = CFObjectGetPropertyInt64Sync();
      CFObjectGetPropertyInt64Sync();
      v25 = (const void *)APAdvertiserInfoCopyProperty();
      if (v25
        || PropertyInt64Sync != 1
        || (v25 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d"), 0)) != 0)
      {
        v23 = (const void *)APAdvertiserInfoCopyProperty();
        if (!v23 && PropertyInt64Sync == 1)
        {
          v64 = 0;
          airplayDescription_copyStatusFlagsContainsFlag((uint64_t)a1, 0x2000, &v64);
          v29 = v64;
          if (v64)
          {
            CFBooleanGetValue(v64);
            CFRelease(v29);
          }
          CMBaseObjectGetDerivedStorage();
          airPlayDescription_modelHasPrefix(a1, CFSTR("AppleTV"));
          v33 = (const void *)APSGetFabricatedMemberIDForHTGroup();
          v23 = CFRetain(v33);
        }
        v65 = APSValidatePersistentGroupInfo();
        if (v65)
        {
          CFRelease(v21);
          if (v23)
            CFRelease(v23);
          if (v25)
          {
            CFRelease(v25);
            v21 = 0;
            v23 = 0;
            v25 = 0;
          }
          else
          {
            v21 = 0;
            v23 = 0;
          }
          v27 = 0;
        }
        else
        {
          v27 = (const void *)APAdvertiserInfoCopyProperty();
        }
        goto LABEL_65;
      }
      APSLogErrorAt();
      CFRelease(v21);
      v21 = 0;
    }
    v23 = 0;
    v25 = 0;
    v27 = 0;
LABEL_65:
    v61 = 0;
    goto LABEL_66;
  }
  Value = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E0CF7538]);
  if (Value)
    v21 = CFRetain(Value);
  else
    v21 = 0;
  CFDictionaryGetInt64();
  CFDictionaryGetInt64();
  v22 = CFDictionaryGetValue(*(CFDictionaryRef *)(v18 + 80), (const void *)*MEMORY[0x1E0CF7518]);
  if (!v22)
  {
    v23 = 0;
LABEL_33:
    APSLogErrorAt();
    v25 = 0;
    goto LABEL_34;
  }
  v23 = CFRetain(v22);
  if (!v23)
    goto LABEL_33;
  v24 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d"), 0);
  if (!v24)
    goto LABEL_33;
  v25 = v24;
  if (APSValidatePersistentGroupInfo())
  {
LABEL_34:
    if (v21)
      CFRelease(v21);
    if (v23)
      CFRelease(v23);
    if (v25)
      CFRelease(v25);
    goto LABEL_40;
  }
  v26 = CFDictionaryGetValue(*(CFDictionaryRef *)(v18 + 80), (const void *)*MEMORY[0x1E0CF7520]);
  if (v26)
    v27 = CFRetain(v26);
  else
    v27 = 0;
  v30 = CFDictionaryGetValue(*(CFDictionaryRef *)(v18 + 80), (const void *)*MEMORY[0x1E0CF7548]);
  if (v30)
    v61 = CFRetain(v30);
  else
    v61 = 0;
  v31 = CFDictionaryGetValue(*(CFDictionaryRef *)(v18 + 80), (const void *)*MEMORY[0x1E0CF7540]);
  if (v31)
  {
    v32 = CFRetain(v31);
    goto LABEL_67;
  }
LABEL_66:
  v32 = 0;
LABEL_67:
  v60 = v25;
  v52 = v21;
  v58 = v27;
  if (v21)
  {
    v40 = v32;
    v41 = CFRetain(v21);
    APSPersistentGroupTypeToClusterType();
    Int64 = (const void *)CFNumberCreateInt64();
    v43 = (const void *)CFNumberCreateInt64();
    v44 = CFRetain(v23);
    CFGetInt64Ranged();
    APSGetClusterModelForPersistentGroupModel();
    v39 = (const void *)CFStringCreateF();
    v45 = CFEqual(v44, CFSTR("0"));
    v46 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (!v45)
      v46 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    cf = CFRetain(*v46);
    if (v27)
      v27 = CFRetain(v27);
    v37 = 0;
    v38 = 0;
    goto LABEL_84;
  }
  v37 = (const void *)APAdvertiserInfoCopyProperty();
  if (v37)
  {
    v40 = v32;
    v38 = (const void *)APAdvertiserInfoCopyProperty();
    airplayDescription_copyStatusFlagsContainsFlag((uint64_t)a1, 0x2000, &v63);
    v41 = CFRetain(v37);
    v43 = (const void *)CFNumberCreateInt64();
    Int64 = (const void *)CFNumberCreateInt64();
    if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
    {
      airplayDescription_copyStatusFlagsContainsFlag((uint64_t)a1, 0x200000, &cf);
      v47 = v63;
    }
    else
    {
      v47 = v63;
      if (v63)
        v48 = CFRetain(v63);
      else
        v48 = 0;
      cf = v48;
    }
    if (CFBooleanGetValue(v47))
      v49 = CFSTR("0");
    else
      v49 = CFSTR("1");
    v44 = CFRetain(v49);
    CFGetInt64Ranged();
    APSGetClusterModelForTightSyncGroupModel();
    v39 = (const void *)CFStringCreateF();
    v27 = (const void *)APAdvertiserInfoCopyProperty();
LABEL_84:
    if (v57)
    {
      *v57 = v41;
      v41 = 0;
    }
    if (v50)
    {
      *v50 = v43;
      v43 = 0;
    }
    if (v51)
    {
      *v51 = Int64;
      Int64 = 0;
    }
    if (v53)
    {
      *v53 = cf;
      cf = 0;
    }
    if (v54)
    {
      *v54 = v44;
      v44 = 0;
    }
    if (v55)
    {
      *v55 = v39;
      v39 = 0;
    }
    if (v56)
    {
      *v56 = v27;
      v27 = 0;
    }
    if (a9)
    {
      *a9 = v61;
      v61 = 0;
    }
    if (a10)
    {
      *a10 = v40;
      v40 = 0;
    }
    if (v41)
      CFRelease(v41);
    if (v43)
      CFRelease(v43);
    v34 = v52;
    v36 = v61;
    if (Int64)
      CFRelease(Int64);
    if (v44)
      CFRelease(v44);
    v32 = v40;
    goto LABEL_111;
  }
  v34 = 0;
  v38 = 0;
  v39 = 0;
  v27 = 0;
  v36 = v61;
LABEL_111:
  v35 = v60;
LABEL_112:
  if (cf)
    CFRelease(cf);
  if (v39)
    CFRelease(v39);
  if (v27)
    CFRelease(v27);
  if (v37)
    CFRelease(v37);
  if (v38)
    CFRelease(v38);
  if (v63)
    CFRelease(v63);
  if (v34)
    CFRelease(v34);
  if (v23)
    CFRelease(v23);
  if (v35)
    CFRelease(v35);
  if (v58)
    CFRelease(v58);
  if (v36)
    CFRelease(v36);
  if (v32)
    CFRelease(v32);
}

uint64_t airPlayDescription_copyTightSyncClusterInfo(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  const void *v7;
  const void *v8;
  CFTypeID v9;
  const __CFString *v10;
  CFStringRef theString;
  CFTypeRef cf;

  CMBaseObjectGetDerivedStorage();
  theString = 0;
  v4 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v6 = Mutable;
    v7 = (const void *)APAdvertiserInfoCopyProperty();
    cf = v7;
    FigCFDictionarySetValue();
    if (v7)
    {
      CFRelease(v7);
      cf = 0;
    }
    airPlayDescription_copyPropertyInternal(a1, CFSTR("GroupPublicName"), v4, &cf);
    if (!cf)
      cf = CFRetain(CFSTR("Unknown Pair"));
    FigCFDictionarySetValue();
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    v8 = (const void *)APAdvertiserInfoCopyProperty();
    cf = v8;
    if (v8 && (v9 = CFGetTypeID(v8), v9 == CFStringGetTypeID()))
    {
      CFGetInt64Ranged();
      APSGetClusterModelForTightSyncGroupModel();
      v10 = 0;
    }
    else
    {
      airPlayDescription_copyModel(a1, (uint64_t *)&theString);
      v10 = theString;
      if (theString)
      {
        CFStringHasPrefix(theString, CFSTR("AudioAccessory5"));
        CFStringHasPrefix(v10, CFSTR("AudioAccessory6"));
      }
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    APSGetClusterModelNameForClusterTypeAndModel();
    FigCFDictionarySetValue();
    *a2 = v6;
    if (cf)
      CFRelease(cf);
    if (v10)
      CFRelease(v10);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294950575;
  }
}

uint64_t airPlayDescription_copyHKAccessControlLevel(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  CMBaseObjectGetDerivedStorage();
  if (airPlayDescription_getAccessControlType() == 1)
    CFObjectGetPropertyInt64Sync();
  if (APSAccessControlIsValidConfig())
  {
    v3 = 0;
    *a2 = CFNumberCreateInt64();
  }
  else
  {
    v3 = 4294895542;
    if (gLogCategory_APEndpointDescriptionAirPlay <= 90
      && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  return v3;
}

CFTypeRef airPlayDescription_copyIsHKAccessControlEnabled(uint64_t a1, _QWORD *a2)
{
  unsigned int PropertyInt64Sync;
  int hasFeatureInternal;
  CFTypeRef *v6;
  CFTypeRef result;

  CMBaseObjectGetDerivedStorage();
  PropertyInt64Sync = CFObjectGetPropertyInt64Sync();
  hasFeatureInternal = airPlayDescription_hasFeatureInternal(a1);
  v6 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (((hasFeatureInternal != 0) & (PropertyInt64Sync >> 10)) == 0)
    v6 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  result = CFRetain(*v6);
  *a2 = result;
  return result;
}

CFTypeRef airPlayDescription_copyDeviceSupportsRelay(uint64_t a1, _QWORD *a2)
{
  __int16 PropertyInt64Sync;
  _BOOL4 canBeRemoteControlled;
  _BOOL4 isSourceVersionAtLeast;
  BOOL v8;
  CFTypeRef *v9;
  CFTypeRef result;

  CMBaseObjectGetDerivedStorage();
  PropertyInt64Sync = CFObjectGetPropertyInt64Sync();
  canBeRemoteControlled = airplayDescription_canBeRemoteControlled(a1);
  isSourceVersionAtLeast = airPlayDescription_isSourceVersionAtLeast(a1, 0x37D8E0u);
  v8 = !canBeRemoteControlled || !isSourceVersionAtLeast || (PropertyInt64Sync & 0x800) == 0;
  v9 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  if (!v8)
    v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  result = CFRetain(*v9);
  *a2 = result;
  return result;
}

CFTypeRef airplayDescription_copySupportsAWDL(uint64_t a1, _QWORD *a2)
{
  _BOOL4 isThirdPartyDevice;
  _BOOL4 v5;
  int hasFeatureInternal;
  CFTypeRef *v7;
  CFTypeRef result;

  CMBaseObjectGetDerivedStorage();
  isThirdPartyDevice = airPlayDescription_isThirdPartyDevice(a1);
  v5 = airPlayDescription_supportsCUPairingAndEncryption(a1);
  hasFeatureInternal = airPlayDescription_hasFeatureInternal(a1);
  if (!isThirdPartyDevice && v5 | hasFeatureInternal)
    v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  else
    v7 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  result = CFRetain(*v7);
  *a2 = result;
  return result;
}

CFTypeRef airplayDescription_copySupportsNAN(uint64_t a1, _QWORD *a2)
{
  CFTypeRef *v4;
  CFTypeRef result;

  CMBaseObjectGetDerivedStorage();
  if (APSSettingsGetInt64() && airPlayDescription_hasFeatureInternal(a1))
    v4 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  else
    v4 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  result = CFRetain(*v4);
  *a2 = result;
  return result;
}

CFTypeRef airplayDescription_copySupportsPTP(uint64_t a1, _QWORD *a2)
{
  CFTypeRef *v4;
  CFTypeRef result;

  CMBaseObjectGetDerivedStorage();
  if (airPlayDescription_isSourceVersionAtLeast(a1, 0x36193Eu)
    && airPlayDescription_hasFeatureInternal(a1))
  {
    v4 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  }
  else
  {
    v4 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  }
  result = CFRetain(*v4);
  *a2 = result;
  return result;
}

CFTypeRef airPlayDescription_copySupportsUnifiedMediaControl(uint64_t a1, _QWORD *a2)
{
  CFTypeRef *v4;
  CFTypeRef result;

  CMBaseObjectGetDerivedStorage();
  if (airPlayDescription_copySupportsUnifiedMediaControl_checkPrefOnce != -1)
    dispatch_once_f(&airPlayDescription_copySupportsUnifiedMediaControl_checkPrefOnce, &airPlayDescription_copySupportsUnifiedMediaControl_forceUnifiedMediaControlOverride, (dispatch_function_t)airPlayDescription_checkIfUnifiedMediaControlIsForced);
  if (airPlayDescription_copySupportsUnifiedMediaControl_forceUnifiedMediaControlOverride == 1)
  {
    if (gLogCategory_APEndpointDescriptionAirPlay <= 60
      && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_18;
  }
  if (!airPlayDescription_copySupportsUnifiedMediaControl_forceUnifiedMediaControlOverride)
  {
    if (gLogCategory_APEndpointDescriptionAirPlay <= 60
      && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_16;
  }
  if (airPlayDescription_isSourceVersionAtLeast(a1, 0x287184u)
    && (airPlayDescription_hasFeatureInternal(a1)
     || airPlayDescription_hasFeatureInternal(a1)))
  {
LABEL_18:
    v4 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    goto LABEL_19;
  }
LABEL_16:
  v4 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
LABEL_19:
  result = CFRetain(*v4);
  *a2 = result;
  return result;
}

uint64_t airplayDescription_getAssistedModeType()
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;
  uint64_t v2;

  CMBaseObjectGetDerivedStorage();
  v0 = (const __CFDictionary *)APTransportDeviceCopyAssistedInfo();
  if (!v0)
    return 0;
  v1 = v0;
  if (CFDictionaryContainsKey(v0, CFSTR("AssistedInstanceName")))
  {
    v2 = 1;
  }
  else if (CFDictionaryContainsKey(v1, CFSTR("IsP2P")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 3;
  }
  CFRelease(v1);
  return v2;
}

CFTypeRef airPlayDescription_copyIsConnectedOverUSB(uint64_t a1, _QWORD *a2)
{
  CFTypeRef *v3;
  CFTypeRef result;

  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8) && APTransportDeviceIsConnectedOverUSB())
    v3 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  else
    v3 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  result = CFRetain(*v3);
  *a2 = result;
  return result;
}

CFNumberRef airPlayDescription_copyMetadataFeatures(const void *a1, const __CFAllocator *a2, CFNumberRef *a3)
{
  int PropertyInt64Sync;
  CFNumberRef result;
  int valuePtr;

  CMBaseObjectGetDerivedStorage();
  PropertyInt64Sync = CFObjectGetPropertyInt64Sync();
  valuePtr = PropertyInt64Sync;
  if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
  {
    PropertyInt64Sync |= 1u;
    valuePtr = PropertyInt64Sync;
  }
  if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
  {
    PropertyInt64Sync |= 2u;
    valuePtr = PropertyInt64Sync;
  }
  if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
  {
    PropertyInt64Sync |= 4u;
    valuePtr = PropertyInt64Sync;
  }
  CMBaseObjectGetDerivedStorage();
  if (airPlayDescription_modelHasPrefix(a1, CFSTR("AppleTV"))
    || airPlayDescription_isThirdPartyTVFamily((uint64_t)a1))
  {
    PropertyInt64Sync |= 0x10u;
    valuePtr = PropertyInt64Sync;
  }
  if (airPlayDescription_isThirdPartyTVFamily((uint64_t)a1))
  {
    PropertyInt64Sync |= 8u;
    valuePtr = PropertyInt64Sync;
  }
  if (airPlayDescription_hasFeatureInternal((uint64_t)a1))
  {
    valuePtr = PropertyInt64Sync | 0x20;
    if (airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x37F564u))
    {
      PropertyInt64Sync |= 0x120u;
      valuePtr = PropertyInt64Sync;
    }
    else
    {
      PropertyInt64Sync |= 0x20u;
    }
    if (airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x398A14u))
    {
      PropertyInt64Sync |= 0x40u;
      valuePtr = PropertyInt64Sync;
    }
    if (airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x3A2654u))
    {
      PropertyInt64Sync |= 0x200u;
      valuePtr = PropertyInt64Sync;
    }
  }
  if (airPlayDescription_isSourceVersionAtLeast((uint64_t)a1, 0x365948u))
    valuePtr = PropertyInt64Sync | 0x80;
  result = CFNumberCreate(a2, kCFNumberSInt32Type, &valuePtr);
  *a3 = result;
  return result;
}

uint64_t airPlayDescription_copyEndpointInfoValueCFDictionary(uint64_t a1, const void *a2, _QWORD *a3)
{
  CFTypeRef v6;
  CFTypeID v7;
  uint64_t result;
  CFTypeRef cf;

  CMBaseObjectGetDerivedStorage();
  cf = 0;
  airPlayDescription_copyEndpointInfoValue(a1, a2, (const __CFDictionary **)&cf);
  v6 = cf;
  if (cf && (v7 = CFGetTypeID(cf), v7 != CFDictionaryGetTypeID()))
  {
    APSLogErrorAt();
    CFRelease(v6);
    return 4294895541;
  }
  else
  {
    result = 0;
    *a3 = v6;
  }
  return result;
}

void airPlayDescription_copyEndpointInfoValueCFBoolean(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  const __CFDictionary *v6;
  uint64_t v7;
  CFTypeRef *v8;
  const __CFDictionary *v9;

  CMBaseObjectGetDerivedStorage();
  v9 = 0;
  airPlayDescription_copyEndpointInfoValue(a1, a2, &v9);
  v6 = v9;
  if (v9)
  {
    v7 = CFGetInt64();
    v8 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (!v7)
      v8 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    *a3 = CFRetain(*v8);
    CFRelease(v6);
  }
  else
  {
    *a3 = 0;
  }
}

uint64_t airPlayDescription_copyEndpointInfoValueCFString(uint64_t a1, const void *a2, _QWORD *a3)
{
  CFTypeRef v6;
  CFTypeID v7;
  uint64_t result;
  CFTypeRef cf;

  CMBaseObjectGetDerivedStorage();
  cf = 0;
  airPlayDescription_copyEndpointInfoValue(a1, a2, (const __CFDictionary **)&cf);
  v6 = cf;
  if (cf && (v7 = CFGetTypeID(cf), v7 != CFStringGetTypeID()))
  {
    APSLogErrorAt();
    CFRelease(v6);
    return 4294895541;
  }
  else
  {
    result = 0;
    *a3 = v6;
  }
  return result;
}

uint64_t airPlayDescription_copyOEMIcons(uint64_t a1, const __CFAllocator *a2, _QWORD *a3)
{
  int v6;
  const void *v7;
  BOOL v8;
  CFTypeRef v9;
  CFTypeID v10;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v12;
  uint64_t v13;
  uint64_t v14;
  void *values;
  CFTypeRef cf;
  CFTypeRef v18;

  values = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  v6 = airPlayDescription_copyEndpointInfoValueCFArray(a1, CFSTR("oemIcons"), &cf);
  v7 = cf;
  if (v6)
    v8 = 1;
  else
    v8 = cf == 0;
  if (!v8)
  {
    v9 = 0;
    if (!a3)
    {
LABEL_15:
      CFRelease(v7);
LABEL_16:
      v13 = 0;
      v14 = 0;
      if (!v9)
        goto LABEL_19;
      goto LABEL_17;
    }
LABEL_13:
    *a3 = v7;
    cf = 0;
    goto LABEL_16;
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  CMBaseObjectGetDerivedStorage();
  v18 = 0;
  airPlayDescription_copyEndpointInfoValue(a1, CFSTR("oemIcon"), (const __CFDictionary **)&v18);
  v9 = v18;
  if (v18)
  {
    v10 = CFGetTypeID(v18);
    if (v10 == CFDataGetTypeID())
    {
      Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      values = Mutable;
      if (!Mutable
        || (v12 = Mutable,
            CFDictionarySetValue(Mutable, CFSTR("imageData"), v9),
            CFDictionarySetInt64(),
            CFDictionarySetInt64(),
            CFDictionarySetValue(v12, CFSTR("prerendered"), (const void *)*MEMORY[0x1E0C9AE40]),
            v7 = CFArrayCreate(a2, (const void **)&values, 1, MEMORY[0x1E0C9B378]),
            (cf = v7) == 0))
      {
        APSLogErrorAt();
        v13 = 4294895546;
LABEL_17:
        CFRelease(v9);
        v14 = v13;
        goto LABEL_19;
      }
      if (!a3)
        goto LABEL_15;
      goto LABEL_13;
    }
    v14 = 4294895541;
    APSLogErrorAt();
    CFRelease(v9);
    APSLogErrorAt();
  }
  else
  {
    v14 = 0;
  }
LABEL_19:
  if (values)
    CFRelease(values);
  return v14;
}

uint64_t airPlayDescription_extendedFeaturesHasKey(uint64_t a1, const void *a2)
{
  const __CFArray *TypedValue;
  const __CFArray *v4;
  CFRange v6;

  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24))
    return 0;
  CFArrayGetTypeID();
  TypedValue = (const __CFArray *)CFDictionaryGetTypedValue();
  if (!TypedValue)
    return 0;
  v4 = TypedValue;
  v6.length = CFArrayGetCount(TypedValue);
  v6.location = 0;
  return CFArrayContainsValue(v4, v6, a2);
}

uint64_t airPlayDescription_isJarvisFeatureSupported(uint64_t a1, const void *a2)
{
  CFBooleanRef v4;
  uint64_t Value;
  CFBooleanRef BOOLean;

  BOOLean = 0;
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24))
  {
    APSLogErrorAt();
    return 0;
  }
  if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 64))
    return 0;
  airPlayDescription_copyEndpointInfoNestedCFData(a1, (uint64_t)CFSTR("enhancedSiriInfo"), a2, (CFTypeRef *)&BOOLean);
  v4 = BOOLean;
  if (!BOOLean)
    return 0;
  Value = CFBooleanGetValue(BOOLean);
  CFRelease(v4);
  return Value;
}

uint64_t airPlayDescription_copyEndpointInfoNestedCFData(uint64_t a1, uint64_t a2, const void *a3, CFTypeRef *a4)
{
  const __CFDictionary *TypedValue;
  const void *Value;

  CMBaseObjectGetDerivedStorage();
  CFDictionaryGetTypeID();
  TypedValue = (const __CFDictionary *)CFDictionaryGetTypedValue();
  if (TypedValue)
  {
    Value = CFDictionaryGetValue(TypedValue, a3);
    if (Value)
      *a4 = CFRetain(Value);
  }
  return 0;
}

void airPlayDescription_copyAirPlayEndpointProperties(uint64_t a1, int a2, __CFDictionary **a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  __CFString **v10;
  const void *v11;
  const void *v12;
  int hasFeatureInternal;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  int TransportsRequiringBroker;
  const void *v19;
  const void *v20;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v7 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v9 = Mutable;
    v10 = kAPEndpointDescriptionProperty_TXTRecordAirPlayClusterCompatible;
    if (!a2)
      v10 = kAPEndpointDescriptionProperty_TXTRecordAirPlay;
    airPlayDescription_copyPropertyInternal(a1, *v10, v7, &cf);
    FigCFDictionarySetValue();
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (!a2)
    {
      airPlayDescription_copyPropertyInternal(a1, CFSTR("BluetoothIdentifier"), v7, &cf);
      FigCFDictionarySetValue();
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      hasFeatureInternal = airPlayDescription_hasFeatureInternal(a1);
      v14 = (const void *)*MEMORY[0x1E0C9AE50];
      v15 = (const void *)*MEMORY[0x1E0C9AE40];
      if (hasFeatureInternal)
        v16 = (const void *)*MEMORY[0x1E0C9AE50];
      else
        v16 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(v9, CFSTR("SupportsClusterEngageOnActivation"), v16);
      if (airPlayDescription_hasFeatureInternal(a1))
        v17 = v14;
      else
        v17 = v15;
      CFDictionarySetValue(v9, CFSTR("SupportsLocalStereoPairClusterPersistentConnection"), v17);
      cf = (CFTypeRef)APAdvertiserInfoCopyProperty();
      FigCFDictionarySetValue();
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if (airPlayDescription_isSourceVersionAtLeast(a1, 0x6C6FC4u))
      {
        airplayDescription_copyStatusFlagsContainsFlag(a1, 0x100000, &cf);
        if (gLogCategory_APEndpointDescriptionAirPlay <= 30
          && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        FigCFDictionarySetValue();
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
      }
    }
    airPlayDescription_copyPropertyInternal(a1, CFSTR("GroupPublicName"), v7, &cf);
    FigCFDictionarySetValue();
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (*(_QWORD *)(DerivedStorage + 8))
    {
      if (a2)
      {
        v11 = (const void *)*MEMORY[0x1E0C9AE50];
        v12 = (const void *)*MEMORY[0x1E0C9AE40];
      }
      else
      {
        cf = (CFTypeRef)APTransportDeviceCopyCUDNSNames();
        FigCFDictionarySetValue();
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        TransportsRequiringBroker = APTransportDeviceGetTransportsRequiringBroker();
        v11 = (const void *)*MEMORY[0x1E0C9AE50];
        v12 = (const void *)*MEMORY[0x1E0C9AE40];
        if (TransportsRequiringBroker)
          v19 = (const void *)*MEMORY[0x1E0C9AE50];
        else
          v19 = (const void *)*MEMORY[0x1E0C9AE40];
        CFDictionarySetValue(v9, CFSTR("IsDiscoveredWithBroker"), v19);
      }
      if (APTransportDeviceIsPresentOnInfra())
        v20 = v11;
      else
        v20 = v12;
      CFDictionarySetValue(v9, CFSTR("IsDiscoveredOverInfra"), v20);
    }
    airPlayDescription_copyPropertyInternal(a1, CFSTR("ParentGroupID"), v7, &cf);
    FigCFDictionarySetValue();
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    airPlayDescription_copyPropertyInternal(a1, CFSTR("ParentGroupContainsDiscoverableLeader"), v7, &cf);
    FigCFDictionarySetValue();
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    airPlayDescription_copyPropertyInternal(a1, CFSTR("ReceiverSessionIsActive"), v7, &cf);
    FigCFDictionarySetValue();
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    airPlayDescription_copyPropertyInternal(a1, CFSTR("SupportsHangdogRemoteControl"), v7, &cf);
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    airPlayDescription_copyPropertyInternal(a1, CFSTR("SupportsRapportRemoteControlTransport"), v7, &cf);
    FigCFDictionarySetValue();
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    airPlayDescription_copyPropertyInternal(a1, CFSTR("SupportsMultiplayer"), v7, &cf);
    FigCFDictionarySetValue();
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    airPlayDescription_copyPropertyInternal(a1, CFSTR("SupportsSharePlayHandoff"), v7, &cf);
    FigCFDictionarySetValue();
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (!a2)
    {
      if (APSIsProximitySenderEnabled())
      {
        if (airPlayDescription_hasFeatureInternal(a1))
        {
          CFDictionarySetValue(v9, CFSTR("SupportsNIRanging"), (const void *)*MEMORY[0x1E0C9AE50]);
          if (*(_QWORD *)(DerivedStorage + 8))
          {
            cf = (CFTypeRef)APTransportDeviceCopyProximityData();
            FigCFDictionarySetValue();
            if (cf)
              CFRelease(cf);
          }
        }
      }
    }
    *a3 = v9;
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t airPlayDescription_copyMXDescriptor(uint64_t a1, __CFDictionary **a2)
{
  uint64_t v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  int v7;
  int v9;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t result;
  const void *v39;
  const void *v40;
  CFTypeRef v41;
  CFTypeRef cf;

  CMBaseObjectGetDerivedStorage();
  v41 = 0;
  v4 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v6 = Mutable;
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v7 = airPlayDescription_copyPropertyInternal(a1, CFSTR("MACAddress"), 0, &cf);
    if (v7 == -12784 || v7 == 0)
      FigCFDictionarySetValue();
    else
      APSLogErrorAt();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v9 = airPlayDescription_copyPropertyInternal(a1, CFSTR("Model"), 0, &cf);
    if (v9 == -12784 || v9 == 0)
      FigCFDictionarySetValue();
    else
      APSLogErrorAt();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v11 = airPlayDescription_copyPropertyInternal(a1, CFSTR("Manufacturer"), 0, &cf);
    if (v11 != -12784 && v11)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v12 = airPlayDescription_copyPropertyInternal(a1, CFSTR("FirmwareVersion"), 0, &cf);
    if (v12 != -12784 && v12)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v13 = airPlayDescription_copyPropertyInternal(a1, CFSTR("SerialNumber"), 0, &cf);
    if (v13 != -12784 && v13)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v14 = airPlayDescription_copyPropertyInternal(a1, CFSTR("TightSyncUUID"), 0, &cf);
    if (v14 != -12784 && v14)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v15 = airPlayDescription_copyPropertyInternal(a1, CFSTR("TightSyncIsGroupLeader"), 0, &cf);
    if (v15 != -12784 && v15)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v16 = airPlayDescription_copyPropertyInternal(a1, CFSTR("ClusterUUID"), 0, &cf);
    if (v16 != -12784 && v16)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v17 = airPlayDescription_copyPropertyInternal(a1, CFSTR("ClusterUUID"), 0, &cf);
    if (v17 != -12784 && v17)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v18 = airPlayDescription_copyPropertyInternal(a1, CFSTR("IsClusterLeader"), 0, &cf);
    if (v18 != -12784 && v18)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v19 = airPlayDescription_copyPropertyInternal(a1, CFSTR("ClusterSize"), 0, &cf);
    if (v19 != -12784 && v19)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v20 = airPlayDescription_copyPropertyInternal(a1, CFSTR("IsAppleMusicSubscriber"), 0, &cf);
    if (v20 != -12784 && v20)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v21 = airPlayDescription_copyPropertyInternal(a1, CFSTR("CloudLibraryIsOn"), 0, &cf);
    if (v21 != -12784 && v21)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v22 = airPlayDescription_copyPropertyInternal(a1, CFSTR("DeviceSupportsRelay"), 0, &cf);
    if (v22 != -12784 && v22)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v23 = airPlayDescription_copyPropertyInternal(a1, CFSTR("SupportsOverlayUI"), 0, &cf);
    if (v23 != -12784 && v23)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v24 = airPlayDescription_copyPropertyInternal(a1, CFSTR("IsMediaRemoteControllable"), 0, &cf);
    if (v24 != -12784 && v24)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v25 = airPlayDescription_copyPropertyInternal(a1, CFSTR("GroupContainsDiscoverableLeader"), 0, &cf);
    if (v25 != -12784 && v25)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v26 = airPlayDescription_copyPropertyInternal(a1, CFSTR("IsGroupLeader"), 0, &cf);
    if (v26 != -12784 && v26)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v27 = airPlayDescription_copyPropertyInternal(a1, CFSTR("SilentPrimary"), 0, &cf);
    if (v27 != -12784 && v27)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v28 = airPlayDescription_copyPropertyInternal(a1, CFSTR("SupportsExtendedWHA"), 0, &cf);
    if (v28 != -12784 && v28)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v29 = airPlayDescription_copyPropertyInternal(a1, CFSTR("AdvertisesHAPSupport"), 0, &cf);
    if (v29 != -12784 && v29)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v30 = airPlayDescription_copyPropertyInternal(a1, CFSTR("GroupID"), 0, &cf);
    if (v30 != -12784 && v30)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v31 = airPlayDescription_copyPropertyInternal(a1, CFSTR("SupportsAirPlayFromCloud"), 0, &cf);
    if (v31 != -12784 && v31)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v32 = airPlayDescription_copyPropertyInternal(a1, CFSTR("VodkaVersion"), 0, &cf);
    if (v32 != -12784 && v32)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v33 = airPlayDescription_copyPropertyInternal(a1, CFSTR("AirPlaySecurity"), 0, &cf);
    if (v33 != -12784 && v33)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v34 = airPlayDescription_copyPropertyInternal(a1, CFSTR("IsHKAccessControlEnabled"), 0, &cf);
    if (v34 != -12784 && v34)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v35 = airPlayDescription_copyPropertyInternal(a1, CFSTR("HKAccessControlLevel"), 0, &cf);
    if (v35 != -12784 && v35)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v36 = airPlayDescription_copyPropertyInternal(a1, CFSTR("AirPlayEndpointProperties"), 0, &cf);
    if (v36 != -12784 && v36)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    cf = 0;
    CMBaseObjectGetDerivedStorage();
    v37 = airPlayDescription_copyPropertyInternal(a1, CFSTR("IsLowFidelitySpeaker"), 0, &cf);
    if (v37 != -12784 && v37)
      APSLogErrorAt();
    else
      FigCFDictionarySetValue();
    if (cf)
      CFRelease(cf);
    airPlayDescription_copyPropertyInternal(a1, CFSTR("ClusterType"), v4, &v41);
    result = (uint64_t)v41;
    if (v41)
    {
      FigCFNumberGetUInt64();
      v39 = (const void *)*MEMORY[0x1E0D48910];
      v40 = (const void *)APSClusterTypeToFigEndpointDescriptorClusterType();
      CFDictionarySetValue(v6, v39, v40);
      result = (uint64_t)v41;
      *a2 = v6;
      if (result)
      {
        CFRelease((CFTypeRef)result);
        return 0;
      }
    }
    else
    {
      *a2 = v6;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294895546;
  }
  return result;
}

uint64_t airPlayDescription_isDCXSupportedForSpatialAudio(uint64_t a1)
{
  CFBooleanRef v2;
  uint64_t Value;
  CFBooleanRef BOOLean;

  BOOLean = 0;
  CMBaseObjectGetDerivedStorage();
  if (!airPlayDescription_isCarPlaySpatialAudioSupported())
    return 0;
  airPlayDescription_copyEndpointInfoNestedCFData(a1, (uint64_t)CFSTR("mainBufferedInfo"), CFSTR("DCXEnabled"), (CFTypeRef *)&BOOLean);
  v2 = BOOLean;
  if (!BOOLean)
    return 0;
  Value = CFBooleanGetValue(BOOLean);
  CFRelease(v2);
  return Value;
}

uint64_t airPlayDescription_copyFeaturesInternal(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t MutableCopy;
  uint64_t v7;
  uint64_t v8;
  int PropertyInt64Sync;
  uint64_t Mutable;
  uint64_t v11;
  char v12;
  CFTypeRef v14;
  unsigned int v15;

  CMBaseObjectGetDerivedStorage();
  v4 = APAdvertiserInfoCopyProperty();
  if (!v4)
  {
    v15 = 0;
    CMBaseObjectGetDerivedStorage();
    PropertyInt64Sync = CFObjectGetPropertyInt64Sync();
    Mutable = APSFeaturesCreateMutable();
    if (!Mutable)
    {
      APSLogErrorAt();
      v8 = 4294960568;
      goto LABEL_48;
    }
    v11 = Mutable;
    if (!PropertyInt64Sync)
      goto LABEL_14;
    APSFeaturesSetFeature();
    if ((PropertyInt64Sync & 4) != 0)
    {
      APSFeaturesSetFeature();
      if ((PropertyInt64Sync & 8) == 0)
      {
LABEL_11:
        if ((PropertyInt64Sync & 2) == 0)
          goto LABEL_12;
        goto LABEL_33;
      }
    }
    else if ((PropertyInt64Sync & 8) == 0)
    {
      goto LABEL_11;
    }
    APSFeaturesSetFeature();
    if ((PropertyInt64Sync & 2) == 0)
    {
LABEL_12:
      if ((PropertyInt64Sync & 1) != 0)
LABEL_13:
        APSFeaturesSetFeature();
LABEL_14:
      if (!APSFeaturesHasFeature()
        && !APSFeaturesHasFeature()
        && !APSFeaturesHasFeature()
        && !APSFeaturesHasFeature())
      {
        if (gLogCategory_APEndpointDescriptionAirPlay <= 60
          && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_41;
      }
      v12 = CFObjectGetPropertyInt64Sync();
      if ((v12 & 2) != 0)
      {
        APSFeaturesSetFeature();
        if ((v12 & 0x10) == 0)
        {
LABEL_20:
          if ((v12 & 1) == 0)
            goto LABEL_22;
          goto LABEL_21;
        }
      }
      else if ((v12 & 0x10) == 0)
      {
        goto LABEL_20;
      }
      APSFeaturesSetFeature();
      if ((v12 & 1) == 0)
      {
LABEL_22:
        if (APSFeaturesHasFeature()
          || APSFeaturesHasFeature()
          || APSFeaturesHasFeature())
        {
LABEL_42:
          *a2 = v11;
          v8 = v15;
          if (!v15)
            return v8;
LABEL_48:
          APSLogErrorAt();
          return v8;
        }
        v14 = 0;
        airPlayDescription_copyName(a1, (uint64_t *)&v14);
        APSFeaturesCopyStringRepresentation();
        if (gLogCategory_APEndpointDescriptionAirPlay <= 60
          && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (v14)
          CFRelease(v14);
LABEL_41:
        APSFeaturesClearAllFeatures();
        goto LABEL_42;
      }
LABEL_21:
      APSFeaturesSetFeature();
      goto LABEL_22;
    }
LABEL_33:
    APSFeaturesSetFeature();
    if ((PropertyInt64Sync & 1) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  v5 = (const void *)v4;
  MutableCopy = APSFeaturesCreateMutableCopy();
  if (MutableCopy)
  {
    v7 = MutableCopy;
    if (!airPlayDescription_isSourceVersionAtLeast(a1, 0x1E9998u))
    {
      APSFeaturesClearFeature();
      APSFeaturesClearFeature();
    }
    v8 = 0;
    *a2 = v7;
  }
  else
  {
    APSLogErrorAt();
    v8 = 4294960568;
  }
  CFRelease(v5);
  return v8;
}

BOOL airPlayDescription_isThirdPartyDevice(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  return airPlayDescription_hasFeatureInternal(a1)
      || airPlayDescription_hasFeatureInternal(a1) != 0;
}

uint64_t airPlayDescription_modelHasPrefix(const void *a1, const __CFString *a2)
{
  CFStringRef v4;
  uint64_t HasPrefix;
  CFStringRef theString;

  CMBaseObjectGetDerivedStorage();
  theString = 0;
  if (a2
    && (CFGetAllocator(a1), airPlayDescription_copyModel((uint64_t)a1, (uint64_t *)&theString), (v4 = theString) != 0))
  {
    HasPrefix = CFStringHasPrefix(theString, a2);
    CFRelease(v4);
    return HasPrefix;
  }
  else
  {
    APSLogErrorAt();
    return 0;
  }
}

uint64_t airPlayDescription_checkIfUnifiedMediaControlIsForced(_DWORD *a1)
{
  uint64_t result;

  result = FigGetCFPreferenceNumberWithDefault();
  *a1 = result;
  return result;
}

uint64_t airPlayDescription_updateWithAdvertiserAndPSGInfosNotifyingClients(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  const void *v11;
  uint64_t v12;
  int v13;
  int v14;
  const void *v15;
  int v16;
  char v17;
  const void *v18;
  char v19;
  __CFDictionary *v20;
  __CFDictionary *Mutable;
  const void **v22;
  uint64_t v23;
  char v25;
  CFTypeRef v26;
  CFTypeRef v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef cf;
  CFTypeRef v33;
  CFTypeRef v34;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef v37;
  CFTypeRef v38;
  CFTypeRef v39;
  CFTypeRef v40;
  CFTypeRef v41;
  CFTypeRef v42[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v41 = 0;
  v42[0] = 0;
  v39 = 0;
  v40 = 0;
  v37 = 0;
  v38 = 0;
  v35 = 0;
  v36 = 0;
  v33 = 0;
  v34 = 0;
  v31 = 0;
  cf = 0;
  v29 = 0;
  v30 = 0;
  v27 = 0;
  v28 = 0;
  airPlayDescription_copyClusterInfoInternal(a1, v42, &v40, &v38, &cf, &v36, &v34, 0, &v30, &v28);
  v7 = APAdvertiserInfoCopyProperty();
  v8 = APAdvertiserInfoCopyProperty();
  v9 = *(const void **)(DerivedStorage + 16);
  *(_QWORD *)(DerivedStorage + 16) = a2;
  if (a2)
    CFRetain(a2);
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(DerivedStorage + 80);
  *(_QWORD *)(DerivedStorage + 80) = a3;
  if (a3)
    CFRetain(a3);
  if (v10)
    CFRelease(v10);
  airPlayDescription_copyClusterInfoInternal(a1, &v41, &v39, &v37, &v31, &v35, &v33, 0, &v29, &v27);
  v11 = (const void *)APAdvertiserInfoCopyProperty();
  v12 = APAdvertiserInfoCopyProperty();
  if (FigCFEqual()
    && FigCFEqual()
    && FigCFEqual()
    && FigCFEqual()
    && FigCFEqual())
  {
    v13 = 0;
    v25 = 1;
  }
  else
  {
    if (gLogCategory_APEndpointDescriptionAirPlay <= 50
      && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v25 = 0;
    v13 = 1;
  }
  v14 = FigCFEqual();
  if (!v14
    && gLogCategory_APEndpointDescriptionAirPlay <= 50
    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v26 = (CFTypeRef)v12;
  if (FigCFEqual() && FigCFEqual())
  {
    v15 = (const void *)v8;
    v16 = 0;
    v17 = 1;
  }
  else
  {
    if (gLogCategory_APEndpointDescriptionAirPlay <= 50
      && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
    {
      v15 = (const void *)v8;
      LogPrintF();
    }
    else
    {
      v15 = (const void *)v8;
    }
    v17 = 0;
    v16 = 1;
  }
  if (FigCFEqual() && FigCFEqual())
  {
    v18 = (const void *)v7;
    v19 = 1;
    if (v14 && !(v13 | v16))
    {
      v20 = 0;
LABEL_50:
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      v23 = 0;
      goto LABEL_51;
    }
  }
  else
  {
    v18 = (const void *)v7;
    if (gLogCategory_APEndpointDescriptionAirPlay <= 50
      && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v19 = 0;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v20 = Mutable;
  if (Mutable)
  {
    v22 = (const void **)MEMORY[0x1E0C9AE50];
    if ((v25 & 1) != 0)
    {
      if (v14)
        goto LABEL_47;
    }
    else
    {
      CFDictionarySetValue(Mutable, CFSTR("ClusterInfoDidChange"), (const void *)*MEMORY[0x1E0C9AE50]);
      if (v14)
      {
LABEL_47:
        if ((v17 & 1) != 0)
          goto LABEL_48;
        goto LABEL_96;
      }
    }
    CFDictionarySetValue(v20, CFSTR("ClusterLeaderDidChange"), *v22);
    if ((v17 & 1) != 0)
    {
LABEL_48:
      if ((v19 & 1) != 0)
        goto LABEL_50;
LABEL_49:
      CFDictionarySetValue(v20, CFSTR("RoomInfoDidChange"), *v22);
      goto LABEL_50;
    }
LABEL_96:
    CFDictionarySetValue(v20, CFSTR("GroupInfoDidChange"), *v22);
    if ((v19 & 1) != 0)
      goto LABEL_50;
    goto LABEL_49;
  }
  APSLogErrorAt();
  v23 = 4294895546;
LABEL_51:
  if (v42[0])
    CFRelease(v42[0]);
  if (v41)
    CFRelease(v41);
  if (v40)
    CFRelease(v40);
  if (v39)
    CFRelease(v39);
  if (v38)
    CFRelease(v38);
  if (v37)
    CFRelease(v37);
  if (cf)
    CFRelease(cf);
  if (v31)
    CFRelease(v31);
  if (v36)
    CFRelease(v36);
  if (v35)
    CFRelease(v35);
  if (v18)
    CFRelease(v18);
  if (v11)
    CFRelease(v11);
  if (v15)
    CFRelease(v15);
  if (v26)
    CFRelease(v26);
  if (v34)
    CFRelease(v34);
  if (v33)
    CFRelease(v33);
  if (v30)
    CFRelease(v30);
  if (v29)
    CFRelease(v29);
  if (v28)
    CFRelease(v28);
  if (v27)
    CFRelease(v27);
  if (v20)
    CFRelease(v20);
  return v23;
}

uint64_t airPlayDescription_CopyFeatures(uint64_t a1, uint64_t *a2)
{
  _QWORD *DerivedStorage;
  uint64_t v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointDescriptionAirPlay <= 30
    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    MEMORY[0x1CAA400CC](*DerivedStorage);
    v5 = airPlayDescription_copyFeaturesInternal(a1, a2);
    MEMORY[0x1CAA400E4](*DerivedStorage);
    return v5;
  }
  else
  {
    APSLogErrorAt();
    return 4294895545;
  }
}

uint64_t airPlayDescription_HasFeature(uint64_t a1)
{
  _QWORD *DerivedStorage;
  uint64_t hasFeatureInternal;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointDescriptionAirPlay <= 30
    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*DerivedStorage);
  hasFeatureInternal = airPlayDescription_hasFeatureInternal(a1);
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return hasFeatureInternal;
}

uint64_t airPlayDescription_UpdateWithTransportDevice(const void *a1, const void *a2)
{
  _QWORD *DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  const void *AdvertiserInfo;
  const void *v8;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointDescriptionAirPlay <= 30
    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    MEMORY[0x1CAA400CC](*DerivedStorage);
    v5 = CMBaseObjectGetDerivedStorage();
    if (*(const void **)(v5 + 8) != a2)
    {
      v6 = v5;
      AdvertiserInfo = (const void *)APTransportDeviceGetAdvertiserInfo();
      v8 = *(const void **)(v6 + 8);
      *(_QWORD *)(v6 + 8) = a2;
      CFRetain(a2);
      if (v8)
        CFRelease(v8);
      if (airPlayDescription_updateWithAdvertiserAndPSGInfosNotifyingClients(a1, AdvertiserInfo, *(const void **)(v6 + 80)))APSLogErrorAt();
    }
    MEMORY[0x1CAA400E4](*DerivedStorage);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
}

uint64_t airPlayDescription_SetEndpointInfo(const void *a1, const void *a2)
{
  _QWORD *DerivedStorage;
  CFTypeID v5;
  uint64_t v6;
  const void *v7;
  int hasFeatureInternal;
  const __CFAllocator **v9;
  const __CFDictionary *v10;
  int v11;
  const void *v12;
  const void *v13;
  const __CFAllocator *v14;
  _BOOL4 v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  const void *v36;
  const void *Value;
  CFTypeID v38;
  int v39;
  const void *v40;
  const void *MutableCopy;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  UInt8 buffer[32];
  _QWORD v47[30];
  CFRange v48;

  v47[28] = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointDescriptionAirPlay <= 30
    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    v5 = CFGetTypeID(a2);
    if (v5 == CFDictionaryGetTypeID())
    {
      MEMORY[0x1CAA400CC](*DerivedStorage);
      v6 = CMBaseObjectGetDerivedStorage();
      v7 = *(const void **)(v6 + 24);
      *(_QWORD *)(v6 + 24) = a2;
      CFRetain(a2);
      if (v7)
        CFRelease(v7);
      hasFeatureInternal = airPlayDescription_hasFeatureInternal((uint64_t)a1);
      v9 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
      if (hasFeatureInternal)
      {
        if (APSSettingsGetInt64())
        {
          v10 = *(const __CFDictionary **)(v6 + 72);
          if (!v10)
            goto LABEL_65;
          v11 = CFDictionaryContainsKey(v10, CFSTR("kAPCarPlay_Disable24kHzTelephony"));
        }
        else
        {
          v11 = 0;
        }
        v14 = *v9;
        if (*(_QWORD *)(v6 + 8))
          v15 = APTransportDeviceIsConnectedOverUSB() == 0;
        else
          v15 = 0;
        v16 = *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 64);
        v17 = CMBaseObjectGetDerivedStorage();
        v12 = (const void *)APCarPlayAudioFormatsCreate(v14, a2, v15, v16, *(_BYTE *)(v17 + 65), v11);
        if (gLogCategory_APEndpointDescriptionAirPlay <= 30
          && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v13 = *(const void **)(v6 + 56);
        *(_QWORD *)(v6 + 56) = v12;
        if (v12)
        {
          CFRetain(v12);
          v18 = 0;
          if (!v13)
          {
LABEL_27:
            if ((v18 & 1) == 0)
              CFRelease(v12);
            if (CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("txtAirPlay")))
            {
              if (CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("name"))
                && !APAdvertiserInfoCreateWithRAOPAndAirPlayDataAndDeviceName()
                && !airPlayDescription_updateWithAdvertiserAndPSGInfosNotifyingClients(a1, 0, *(const void **)(v6 + 80)))
              {
                goto LABEL_62;
              }
              goto LABEL_65;
            }
            v45 = 0;
            v19 = CMBaseObjectGetDerivedStorage();
            v20 = *MEMORY[0x1E0CF1C78];
            v47[0] = CFSTR("deviceID");
            v47[1] = v20;
            v21 = *MEMORY[0x1E0CF1C68];
            v47[2] = CFSTR("company");
            v47[3] = v21;
            v22 = *MEMORY[0x1E0CF1C70];
            v47[4] = CFSTR("deviceEnclosureColor");
            v47[5] = v22;
            v23 = *MEMORY[0x1E0CF1C80];
            v47[6] = CFSTR("manufacturer");
            v47[7] = v23;
            v24 = *MEMORY[0x1E0CF1C88];
            v47[8] = CFSTR("model");
            v47[9] = v24;
            v25 = *MEMORY[0x1E0CF1C90];
            v47[10] = CFSTR("name");
            v47[11] = v25;
            v26 = *MEMORY[0x1E0CF1CE0];
            v47[12] = CFSTR("nameIsFactoryDefault");
            v47[13] = v26;
            v27 = *MEMORY[0x1E0CF1D30];
            v47[14] = CFSTR("protocolVersion");
            v47[15] = v27;
            v28 = *MEMORY[0x1E0CF1D38];
            v47[16] = CFSTR("pi");
            v47[17] = v28;
            v29 = *MEMORY[0x1E0CF1D40];
            v47[18] = CFSTR("psi");
            v47[19] = v29;
            v30 = *MEMORY[0x1E0CF1D48];
            v31 = *MEMORY[0x1E0CF1C50];
            v47[22] = CFSTR("sourceVersion");
            v47[23] = v31;
            v47[20] = CFSTR("pk");
            v47[21] = v30;
            v32 = *MEMORY[0x1E0CF1D60];
            v47[24] = CFSTR("statusFlags");
            v47[25] = v32;
            v33 = *MEMORY[0x1E0CF1D78];
            v47[26] = CFSTR("vv");
            v47[27] = v33;
            if (*(_QWORD *)(v19 + 16))
            {
              v34 = v19;
              v43 = (uint64_t)a1;
              v44 = DerivedStorage;
              for (i = 0; i != 28; i += 2)
              {
                v36 = (const void *)v47[i];
                if (CFDictionaryContainsKey((CFDictionaryRef)a2, v36))
                {
                  Value = CFDictionaryGetValue((CFDictionaryRef)a2, v36);
                  if (CFEqual(v36, CFSTR("pk")))
                  {
                    if (!Value
                      || (v38 = CFGetTypeID(Value), v38 != CFDataGetTypeID())
                      || CFDataGetLength((CFDataRef)Value) != 32)
                    {
LABEL_63:
                      APSLogErrorAt();
                      DerivedStorage = v44;
                      goto LABEL_62;
                    }
                    v48.location = 0;
                    v48.length = 32;
                    CFDataGetBytes((CFDataRef)Value, v48, buffer);
                    DataToHexCStringEx();
                    v39 = CFObjectSetPropertyCString();
                  }
                  else
                  {
                    v39 = APAdvertiserInfoSetProperty();
                  }
                  v45 = v39;
                  if (v39)
                    goto LABEL_63;
                }
              }
              CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("featuresEx"));
              CFDictionaryGetInt64();
              v40 = (const void *)APSFeaturesCreateFromEndpointInfoFeatureRepresentations();
              if (v45)
              {
                APSLogErrorAt();
                MutableCopy = 0;
                DerivedStorage = v44;
              }
              else
              {
                CMBaseObjectGetDerivedStorage();
                if (airPlayDescription_hasFeatureInternal(v43) && *(_QWORD *)(v34 + 96))
                {
                  MutableCopy = (const void *)APSFeaturesCreateMutableCopy();
                  DerivedStorage = v44;
                  if (!MutableCopy)
                  {
                    APSLogErrorAt();
                    goto LABEL_58;
                  }
                  APSFeaturesSetAllFeatures();
                  if (gLogCategory_APEndpointDescriptionAirPlay <= 30
                    && (gLogCategory_APEndpointDescriptionAirPlay != -1 || _LogCategory_Initialize()))
                  {
                    LogPrintF();
                  }
                  CFRetain(MutableCopy);
                  if (v40)
                    CFRelease(v40);
                  v40 = MutableCopy;
                }
                else
                {
                  MutableCopy = 0;
                  DerivedStorage = v44;
                }
                APAdvertiserInfoSetProperty();
              }
LABEL_58:
              if (v40)
                CFRelease(v40);
              if (MutableCopy)
                CFRelease(MutableCopy);
              goto LABEL_62;
            }
LABEL_65:
            APSLogErrorAt();
LABEL_62:
            MEMORY[0x1CAA400E4](*DerivedStorage);
            return 0;
          }
LABEL_26:
          CFRelease(v13);
          goto LABEL_27;
        }
      }
      else
      {
        v12 = 0;
        v13 = *(const void **)(v6 + 56);
        *(_QWORD *)(v6 + 56) = 0;
      }
      v18 = 1;
      if (!v13)
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  APSLogErrorAt();
  return 4294895545;
}

uint64_t airPlayDescription_DescribesSameTransportDevice()
{
  _QWORD *DerivedStorage;
  uint64_t IsSameDevice;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  IsSameDevice = APTransportDeviceIsSameDevice();
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return IsSameDevice;
}

void airPlayDescription_CopyClusterInfo(const void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, CFTypeRef *a6, _QWORD *a7, _QWORD *a8)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  airPlayDescription_copyClusterInfoInternal(a1, a2, a3, a4, a5, a6, a7, a8, 0, 0);
  JUMPOUT(0x1CAA400E4);
}

uint64_t APGetEndpointManager(_QWORD *a1)
{
  if (APGetEndpointManager_sCreateOnce != -1)
  {
    dispatch_once(&APGetEndpointManager_sCreateOnce, &__block_literal_global_26);
    if (!a1)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (a1)
LABEL_3:
    *a1 = APGetEndpointManager_sEndpointManager;
LABEL_4:
  if (gLogCategory_APEndpointManagerFactory <= 50
    && (gLogCategory_APEndpointManagerFactory != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return APGetEndpointManager_sCreationResult;
}

uint64_t SPHubbedDevicesProviderGetClassID()
{
  if (SPHubbedDevicesProviderGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&SPHubbedDevicesProviderGetClassID_sRegisterOnce, &SPHubbedDevicesProviderGetClassID_sClassID, (dispatch_function_t)hubbedDevicesProvider_registerClass);
  return SPHubbedDevicesProviderGetClassID_sClassID;
}

uint64_t hubbedDevicesProvider_registerClass()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t SPHubbedDevicesProviderGetTypeID()
{
  if (SPHubbedDevicesProviderGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&SPHubbedDevicesProviderGetClassID_sRegisterOnce, &SPHubbedDevicesProviderGetClassID_sClassID, (dispatch_function_t)hubbedDevicesProvider_registerClass);
  return CMBaseClassGetCFTypeID();
}

uint64_t SPHubbedDevicesProviderCreate(CFTypeRef *a1)
{
  int v2;
  int IsAirplayd;
  int v4;
  uint64_t Int64;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  CFTypeRef v14;
  void (*v15)(CFTypeRef);
  CFTypeRef cf;

  v2 = APSIsAPMSpeaker();
  IsAirplayd = FigServer_IsAirplayd();
  v4 = MEMORY[0x1CAA3DF18]();
  Int64 = APSSettingsGetInt64();
  v6 = APSSettingsGetInt64();
  cf = 0;
  if (a1)
  {
    *a1 = 0;
    if (!v4 && IsAirplayd)
    {
      APSLogErrorAt();
      v13 = 90;
      v8 = 4294960587;
    }
    else
    {
      if (IsAirplayd || !v2 || Int64 || v6)
      {
        if (v4)
          v9 = 0;
        else
          v9 = v6 == 0;
        v10 = !v9;
        if (IsAirplayd || !v10)
        {
          v12 = SPHubbedDevicesProviderPropertyCreate(&cf);
          if ((_DWORD)v12)
          {
            v8 = v12;
            goto LABEL_37;
          }
        }
        else
        {
          v11 = SPHubbedDevicesProviderDefaultsCreate(*MEMORY[0x1E0C9AE00], 0, &cf);
          if ((_DWORD)v11)
          {
            v8 = v11;
            goto LABEL_37;
          }
        }
      }
      else
      {
        v7 = SPHubbedDevicesProviderHomeHubCreate(*MEMORY[0x1E0C9AE00], &cf);
        if ((_DWORD)v7)
        {
          v8 = v7;
LABEL_37:
          APSLogErrorAt();
          v13 = 90;
          goto LABEL_23;
        }
      }
      if (cf)
      {
        v8 = 0;
        *a1 = cf;
        cf = 0;
        v13 = 50;
      }
      else
      {
        APSLogErrorAt();
        v13 = 90;
        v8 = 4294960534;
      }
    }
  }
  else
  {
    v13 = 90;
    v8 = 4294960591;
  }
LABEL_23:
  if (v13 >= gLogCategory_SPHubbedDevicesProvider
    && (gLogCategory_SPHubbedDevicesProvider != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v14 = cf;
  if (cf)
  {
    v15 = *(void (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v15)
      v15(v14);
    if (cf)
      CFRelease(cf);
  }
  return v8;
}

uint64_t SPHubbedDevicesProviderAddListener(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  if (a1 && a2 && a3)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    v3 = CMNotificationCenterAddListener();
    if ((_DWORD)v3)
      v4 = 90;
    else
      v4 = 50;
  }
  else
  {
    APSLogErrorAt();
    v4 = 90;
    v3 = 4294960591;
  }
  if (v4 >= gLogCategory_SPHubbedDevicesProvider
    && (gLogCategory_SPHubbedDevicesProvider != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v3;
}

uint64_t SPHubbedDevicesProviderRemoveListener(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;

  if (a1 && a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    v2 = CMNotificationCenterRemoveListener();
    if ((_DWORD)v2)
      v3 = 90;
    else
      v3 = 50;
  }
  else
  {
    APSLogErrorAt();
    v3 = 90;
    v2 = 4294960591;
  }
  if (v3 >= gLogCategory_SPHubbedDevicesProvider
    && (gLogCategory_SPHubbedDevicesProvider != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v2;
}

uint64_t SPHubbedDevicesProviderStartAsync(const void *a1)
{
  NSObject *global_queue;
  uint64_t v3;
  int v4;
  _QWORD block[5];

  if (a1)
  {
    CFRetain(a1);
    global_queue = dispatch_get_global_queue(25, 0);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __SPHubbedDevicesProviderStartAsync_block_invoke;
    block[3] = &__block_descriptor_tmp_29;
    block[4] = a1;
    dispatch_async(global_queue, block);
    v3 = 0;
    v4 = 50;
  }
  else
  {
    APSLogErrorAt();
    v3 = 4294960591;
    v4 = 90;
  }
  if (v4 >= gLogCategory_SPHubbedDevicesProvider
    && (gLogCategory_SPHubbedDevicesProvider != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v3;
}

uint64_t SPHubbedDevicesProviderStartService(_QWORD *a1)
{
  uint64_t result;
  int v3;
  int v4;

  if (a1)
    *a1 = 0;
  if (!MEMORY[0x1CAA3DF18]() || FigServer_IsAirplayd())
  {
    APSLogErrorAt();
    result = 4294960561;
    SPHubbedDevicesProviderStartService_err = -6735;
  }
  else
  {
    if (SPHubbedDevicesProviderStartService_onceToken != -1)
      dispatch_once(&SPHubbedDevicesProviderStartService_onceToken, &__block_literal_global_27);
    result = SPHubbedDevicesProviderStartService_err;
    if (a1 && !SPHubbedDevicesProviderStartService_err)
    {
      *a1 = SPHubbedDevicesProviderStartService_sharedProvider;
LABEL_12:
      v3 = 50;
      goto LABEL_13;
    }
    if (!SPHubbedDevicesProviderStartService_err)
      goto LABEL_12;
  }
  v3 = 90;
LABEL_13:
  if (v3 >= gLogCategory_SPHubbedDevicesProvider)
  {
    if (gLogCategory_SPHubbedDevicesProvider != -1
      || (v4 = _LogCategory_Initialize(), result = SPHubbedDevicesProviderStartService_err, v4))
    {
      LogPrintF();
      return SPHubbedDevicesProviderStartService_err;
    }
  }
  return result;
}

void hubbedDevicesProviderRemote_handleDevicesChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  hubbedDevicesProviderRemote_updateRemoteManager(a2, a4);
}

void hubbedDevicesProviderRemote_handleSenderProcessLaunched(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  hubbedDevicesProviderRemote_updateRemoteManager(a4, a2);
}

CFStringRef hubbedDevicesProvider_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[SPHubbedDevicesProvider %p]"), a1);
}

void hubbedDevicesProviderRemote_updateRemoteManager(uint64_t a1, uint64_t a2)
{
  unsigned int (*v3)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t CMBaseObject;
  unsigned int (*v5)(uint64_t, const __CFString *, _QWORD);
  int v6;
  CFTypeRef cf;

  cf = 0;
  if (!a1 || !a2)
  {
    APSLogErrorAt();
    v6 = 90;
    goto LABEL_12;
  }
  v3 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (!v3 || v3(a2, CFSTR("HubbedDevices"), *MEMORY[0x1E0C9AE00], &cf))
    goto LABEL_11;
  if (cf)
  {
    FigCFSetCopyValuesAsCFArray();
LABEL_11:
    APSLogErrorAt();
    v6 = 90;
    goto LABEL_12;
  }
  CMBaseObject = FigEndpointManagerGetCMBaseObject();
  v5 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
  if (!v5 || v5(CMBaseObject, CFSTR("SPEndpointManagerProperty_HubbedDeviceIDs"), 0))
    goto LABEL_11;
  v6 = 50;
LABEL_12:
  if (v6 >= gLogCategory_SPHubbedDevicesProvider
    && (gLogCategory_SPHubbedDevicesProvider != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (cf)
    CFRelease(cf);
}

uint64_t APCarPlay_AddSignPostTimeInfoToTimeStore(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  dispatch_time_t v8;
  uint64_t v9;
  _QWORD v11[8];
  _QWORD v12[4];

  v4 = dispatch_semaphore_create(0);
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2020000000;
  v12[3] = 0;
  if (gLogCategory_APCarPlayCarServicesInterface <= 30
    && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (IsAppleInternalBuild())
    v5 = mach_absolute_time();
  else
    v5 = 0;
  v6 = objc_alloc_init(getCARConnectionTimeStoreClass());
  if (v6)
  {
    v7 = objc_msgSend((Class)getCARConnectionEventClass[0](), "eventWithName:type:date:payload:", a1, 3, objc_msgSend(MEMORY[0x1E0C99D68], "date"), a2);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __APCarPlay_AddSignPostTimeInfoToTimeStore_block_invoke;
    v11[3] = &unk_1E826E090;
    v11[6] = a1;
    v11[7] = v5;
    v11[4] = v4;
    v11[5] = v12;
    objc_msgSend(v6, "sendConnectionEvent:completion:", v7, v11);
    if (gLogCategory_APCarPlayCarServicesInterface <= 30
      && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v8 = dispatch_time(0, 5000000000);
    if (dispatch_semaphore_wait(v4, v8))
    {
      if (gLogCategory_APCarPlayCarServicesInterface <= 90
        && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v9 = 0xFFFFFFFFLL;
    }
    else
    {
      v9 = 0;
    }

  }
  else
  {
    APSLogErrorAt();
    v9 = 4294960568;
  }
  dispatch_release(v4);
  _Block_object_dispose(v12, 8);
  return v9;
}

void sub_1C9537320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t APCarPlay_CRFetchInstrumentClusterURLs(CFTypeRef *a1)
{
  NSObject *v2;
  uint64_t v3;
  dispatch_time_t v4;
  const void *v5;
  uint64_t v6;
  _QWORD v8[9];
  _QWORD v9[4];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  v2 = dispatch_semaphore_create(0);
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2020000000;
  v9[3] = 0;
  if (gLogCategory_APCarPlayCarServicesInterface <= 30
    && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (IsAppleInternalBuild())
    v3 = mach_absolute_time();
  else
    v3 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __APCarPlay_CRFetchInstrumentClusterURLs_block_invoke;
  v8[3] = &unk_1E826E0B8;
  v8[5] = &v14;
  v8[6] = v9;
  v8[7] = &v10;
  v8[8] = v3;
  v8[4] = v2;
  ((void (*)(uint64_t))softLinkCRFetchInstrumentClusterURLs[0])((uint64_t)v8);
  if (gLogCategory_APCarPlayCarServicesInterface <= 30
    && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v4 = dispatch_time(0, 5000000000);
  if (dispatch_semaphore_wait(v2, v4))
  {
    if (gLogCategory_APCarPlayCarServicesInterface <= 90
      && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *((_DWORD *)v15 + 6) = -1;
  }
  v5 = (const void *)v11[3];
  if (v5)
  {
    if (a1)
    {
      *a1 = CFRetain(v5);
      v5 = (const void *)v11[3];
    }
    CFRelease(v5);
  }
  dispatch_release(v2);
  v6 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(&v10, 8);
  _Block_object_dispose(&v14, 8);
  return v6;
}

void sub_1C95376C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t APCarPlay_CRFetchScaledDisplays(uint64_t a1, CFTypeRef *a2)
{
  NSObject *v4;
  uint64_t v5;
  dispatch_time_t v6;
  const void *v7;
  uint64_t v8;
  _QWORD v10[9];
  _QWORD v11[4];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v4 = dispatch_semaphore_create(0);
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2020000000;
  v11[3] = 0;
  if (gLogCategory_APCarPlayCarServicesInterface <= 30
    && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (IsAppleInternalBuild())
    v5 = mach_absolute_time();
  else
    v5 = 0;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __APCarPlay_CRFetchScaledDisplays_block_invoke;
  v10[3] = &unk_1E826E0B8;
  v10[5] = &v16;
  v10[6] = v11;
  v10[7] = &v12;
  v10[8] = v5;
  v10[4] = v4;
  ((void (*)(uint64_t, uint64_t))softLinkCRFetchScaledDisplays[0])(a1, (uint64_t)v10);
  if (gLogCategory_APCarPlayCarServicesInterface <= 30
    && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v6 = dispatch_time(0, 5000000000);
  if (dispatch_semaphore_wait(v4, v6))
  {
    if (gLogCategory_APCarPlayCarServicesInterface <= 90
      && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *((_DWORD *)v17 + 6) = -1;
  }
  v7 = (const void *)v13[3];
  if (v7)
  {
    if (a2)
    {
      *a2 = CFRetain(v7);
      v7 = (const void *)v13[3];
    }
    CFRelease(v7);
  }
  dispatch_release(v4);
  v8 = *((unsigned int *)v17 + 6);
  _Block_object_dispose(v11, 8);
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
  return v8;
}

void sub_1C9537B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t APCarPlay_FetchUIContextMasterURLList(CFTypeRef *a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  dispatch_time_t v5;
  const void *v6;
  uint64_t v7;
  _QWORD v9[9];
  _QWORD v10[4];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;

  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v2 = dispatch_semaphore_create(0);
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2020000000;
  v10[3] = 0;
  v3 = objc_alloc_init((Class)getCRSAppHistoryControllerClass[0]());
  if (v3)
  {
    if (gLogCategory_APCarPlayCarServicesInterface <= 30
      && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (IsAppleInternalBuild())
      v4 = mach_absolute_time();
    else
      v4 = 0;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __APCarPlay_FetchUIContextMasterURLList_block_invoke;
    v9[3] = &unk_1E826E0B8;
    v9[5] = &v15;
    v9[6] = v10;
    v9[7] = &v11;
    v9[8] = v4;
    v9[4] = v2;
    objc_msgSend(v3, "fetchUIContextsWithCompletion:", v9);
    if (gLogCategory_APCarPlayCarServicesInterface <= 30
      && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v5 = dispatch_time(0, 5000000000);
    if (dispatch_semaphore_wait(v2, v5))
    {
      if (gLogCategory_APCarPlayCarServicesInterface <= 90
        && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *((_DWORD *)v16 + 6) = -1;
    }
    v6 = (const void *)v12[3];
    if (v6)
    {
      if (a1)
      {
        *a1 = CFRetain(v6);
        v6 = (const void *)v12[3];
      }
      CFRelease(v6);
    }
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v3, "invalidate");

  }
  else
  {
    APSLogErrorAt();
    *((_DWORD *)v16 + 6) = -6728;
  }
  dispatch_release(v2);
  v7 = *((unsigned int *)v16 + 6);
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
  return v7;
}

void sub_1C9537FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t APCarPlay_FetchSessionFeatureKeysWithIdentifier(uint64_t a1, CFTypeRef *a2)
{
  NSObject *v4;
  void *v5;
  id v6;
  uint64_t v7;
  dispatch_time_t v8;
  const void *v9;
  uint64_t v10;
  _QWORD v12[10];
  _QWORD v13[4];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;

  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  v4 = dispatch_semaphore_create(0);
  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x2020000000;
  v13[3] = 0;
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", a1);
  v6 = objc_alloc_init((Class)getCRFeatureAvailabilityClass[0]());
  if (v6)
  {
    if (gLogCategory_APCarPlayCarServicesInterface <= 30
      && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (IsAppleInternalBuild())
      v7 = mach_absolute_time();
    else
      v7 = 0;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __APCarPlay_FetchSessionFeatureKeysWithIdentifier_block_invoke;
    v12[3] = &unk_1E826E0E0;
    v12[8] = a1;
    v12[9] = v7;
    v12[6] = v13;
    v12[7] = &v14;
    v12[4] = v4;
    v12[5] = &v18;
    objc_msgSend(v6, "fetchSupportedAirPlayFeaturesForVehicleIdentifier:completion:", v5, v12);
    if (gLogCategory_APCarPlayCarServicesInterface <= 30
      && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v8 = dispatch_time(0, 5000000000);
    if (dispatch_semaphore_wait(v4, v8))
    {
      if (gLogCategory_APCarPlayCarServicesInterface <= 90
        && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *((_DWORD *)v19 + 6) = -1;
    }
    v9 = (const void *)v15[3];
    if (v9)
    {
      if (a2)
      {
        *a2 = CFRetain(v9);
        v9 = (const void *)v15[3];
      }
      CFRelease(v9);
    }

  }
  else
  {
    APSLogErrorAt();
    *((_DWORD *)v19 + 6) = -6728;
  }

  dispatch_release(v4);
  v10 = *((unsigned int *)v19 + 6);
  _Block_object_dispose(v13, 8);
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
  return v10;
}

void sub_1C95384B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t APCarPlayHasDeviceUnlockedSinceBoot()
{
  return softLinkMKBDeviceUnlockedSinceBoot[0]();
}

BOOL APCarPlayHasSpringboardStarted()
{
  _BOOL8 v0;
  uint64_t v2;
  int out_token;

  out_token = -1;
  notify_register_check(kAPCarPlaySpringBoardStartNotificationKey, &out_token);
  if (out_token == -1)
    return 0;
  v2 = 0;
  notify_get_state(out_token, &v2);
  v0 = v2 != 0;
  notify_cancel(out_token);
  return v0;
}

uint64_t APCarPlayGetHeadUnitRestrictionsDictionary(_QWORD *a1)
{
  NSObject *v2;
  dispatch_time_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];
  _QWORD v8[4];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v2 = dispatch_semaphore_create(0);
  v3 = dispatch_time(0, 3000000000);
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x2020000000;
  v8[3] = 0;
  *a1 = 0;
  dispatch_retain(v2);
  if (gLogCategory_APCarPlayCarServicesInterface <= 30
    && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (IsAppleInternalBuild())
    v4 = mach_absolute_time();
  else
    v4 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __APCarPlayGetHeadUnitRestrictionsDictionary_block_invoke;
  v7[3] = &unk_1E826E108;
  v7[6] = v8;
  v7[7] = v4;
  v7[8] = a1;
  v7[4] = v2;
  v7[5] = &v9;
  softLinkCRFetchCarPlayCapabilities((uint64_t)v7);
  if (gLogCategory_APCarPlayCarServicesInterface <= 30
    && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (dispatch_semaphore_wait(v2, v3))
  {
    if (gLogCategory_APCarPlayCarServicesInterface <= 60
      && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *((_DWORD *)v10 + 6) = -6722;
  }
  dispatch_release(v2);
  v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1C953895C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t APCarPlay_AddAnalyticsValues(const void *a1, const __CFString *a2)
{
  NSObject *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  dispatch_time_t v8;
  uint64_t v9;
  int v11;
  const __CFString *v12;
  const void *v13;
  _QWORD v14[10];
  _QWORD v15[4];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  v4 = dispatch_semaphore_create(0);
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2020000000;
  v15[3] = 0;
  v5 = objc_alloc_init((Class)getCRSAppHistoryControllerClass[0]());
  if (!v5)
  {
    APSLogErrorAt();
    v11 = -6728;
LABEL_31:
    *((_DWORD *)v17 + 6) = v11;
    goto LABEL_28;
  }
  if (CFStringCompare(a2, CFSTR("SessionStarted"), 0) == kCFCompareEqualTo)
  {
    v6 = 0;
    goto LABEL_6;
  }
  if (CFStringCompare(a2, CFSTR("SessionEnded"), 0))
  {
    APSLogErrorAt();
    v11 = -6735;
    goto LABEL_31;
  }
  v6 = 1;
LABEL_6:
  if (gLogCategory_APCarPlayCarServicesInterface <= 30
    && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
  {
    v12 = a2;
    v13 = a1;
    LogPrintF();
  }
  if (!IsAppleInternalBuild())
  {
    v7 = 0;
    if (!a1)
      goto LABEL_15;
    goto LABEL_14;
  }
  v7 = mach_absolute_time();
  if (a1)
LABEL_14:
    CFRetain(a1);
LABEL_15:
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __APCarPlay_AddAnalyticsValues_block_invoke;
  v14[3] = &unk_1E826E130;
  v14[6] = v15;
  v14[7] = a2;
  v14[8] = a1;
  v14[9] = v7;
  v14[4] = v4;
  v14[5] = &v16;
  objc_msgSend(v5, "addAnalyticsValues:toEvent:completion:", a1, v6, v14, v12, v13);
  if (gLogCategory_APCarPlayCarServicesInterface <= 30
    && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v8 = dispatch_time(0, 5000000000);
  if (dispatch_semaphore_wait(v4, v8))
  {
    if (gLogCategory_APCarPlayCarServicesInterface <= 90
      && (gLogCategory_APCarPlayCarServicesInterface != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *((_DWORD *)v17 + 6) = -6722;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v5, "invalidate");

LABEL_28:
  dispatch_release(v4);
  v9 = *((unsigned int *)v17 + 6);
  _Block_object_dispose(v15, 8);
  _Block_object_dispose(&v16, 8);
  return v9;
}

void sub_1C9538E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

Class initCARConnectionTimeStore()
{
  Class result;

  if (CarKitLibrary_sOnce_0 != -1)
    dispatch_once(&CarKitLibrary_sOnce_0, &__block_literal_global_28);
  result = objc_getClass("CARConnectionTimeStore");
  classCARConnectionTimeStore = (uint64_t)result;
  getCARConnectionTimeStoreClass = CARConnectionTimeStoreFunction;
  return result;
}

uint64_t CARConnectionTimeStoreFunction()
{
  return classCARConnectionTimeStore;
}

Class initCARConnectionEvent()
{
  Class result;

  if (CarKitLibrary_sOnce_0 != -1)
    dispatch_once(&CarKitLibrary_sOnce_0, &__block_literal_global_28);
  result = objc_getClass("CARConnectionEvent");
  classCARConnectionEvent = (uint64_t)result;
  getCARConnectionEventClass[0] = CARConnectionEventFunction;
  return result;
}

uint64_t CARConnectionEventFunction()
{
  return classCARConnectionEvent;
}

uint64_t initCRFetchInstrumentClusterURLs(uint64_t a1)
{
  if (CarKitLibrary_sOnce_0 != -1)
    dispatch_once(&CarKitLibrary_sOnce_0, &__block_literal_global_28);
  softLinkCRFetchInstrumentClusterURLs[0] = (uint64_t (*)())dlsym((void *)CarKitLibrary_sLib_0, "CRFetchInstrumentClusterURLs");
  return ((uint64_t (*)(uint64_t))softLinkCRFetchInstrumentClusterURLs[0])(a1);
}

uint64_t initCRFetchScaledDisplays(uint64_t a1, uint64_t a2)
{
  if (CarKitLibrary_sOnce_0 != -1)
    dispatch_once(&CarKitLibrary_sOnce_0, &__block_literal_global_28);
  softLinkCRFetchScaledDisplays[0] = (uint64_t (*)())dlsym((void *)CarKitLibrary_sLib_0, "CRFetchScaledDisplays");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkCRFetchScaledDisplays[0])(a1, a2);
}

Class initCRSAppHistoryController()
{
  Class result;

  if (CarPlayServicesLibrary_sOnce_0 != -1)
    dispatch_once(&CarPlayServicesLibrary_sOnce_0, &__block_literal_global_57);
  result = objc_getClass("CRSAppHistoryController");
  classCRSAppHistoryController = (uint64_t)result;
  getCRSAppHistoryControllerClass[0] = CRSAppHistoryControllerFunction;
  return result;
}

uint64_t CRSAppHistoryControllerFunction()
{
  return classCRSAppHistoryController;
}

Class initCRFeatureAvailability()
{
  Class result;

  if (CarKitLibrary_sOnce_0 != -1)
    dispatch_once(&CarKitLibrary_sOnce_0, &__block_literal_global_28);
  result = objc_getClass("CRFeatureAvailability");
  classCRFeatureAvailability = (uint64_t)result;
  getCRFeatureAvailabilityClass[0] = CRFeatureAvailabilityFunction;
  return result;
}

uint64_t CRFeatureAvailabilityFunction()
{
  return classCRFeatureAvailability;
}

uint64_t initMKBDeviceUnlockedSinceBoot()
{
  if (MobileKeyBagLibrary_sOnce != -1)
    dispatch_once(&MobileKeyBagLibrary_sOnce, &__block_literal_global_61);
  softLinkMKBDeviceUnlockedSinceBoot[0] = (uint64_t (*)())dlsym((void *)MobileKeyBagLibrary_sLib, "MKBDeviceUnlockedSinceBoot");
  return softLinkMKBDeviceUnlockedSinceBoot[0]();
}

uint64_t initCRFetchCarPlayCapabilities(uint64_t a1)
{
  if (CarKitLibrary_sOnce_0 != -1)
    dispatch_once(&CarKitLibrary_sOnce_0, &__block_literal_global_28);
  softLinkCRFetchCarPlayCapabilities = (uint64_t (*)())dlsym((void *)CarKitLibrary_sLib_0, "CRFetchCarPlayCapabilities");
  return ((uint64_t (*)(uint64_t))softLinkCRFetchCarPlayCapabilities)(a1);
}

uint64_t APCarPlayInitiateJarvisProcessing(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _QWORD))
{
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[7];
  CFTypeRef v12;

  v12 = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v7 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v7)
  {
    v9 = 4294954514;
LABEL_7:
    APSLogErrorAt();
    a3(a1, 0);
    return v9;
  }
  v8 = v7(CMBaseObject, *MEMORY[0x1E0CA4258], *MEMORY[0x1E0C9AE00], &v12);
  if ((_DWORD)v8)
  {
    v9 = v8;
    goto LABEL_7;
  }
  if (gLogCategory_APCarPlaySiriInterface <= 50
    && (gLogCategory_APCarPlaySiriInterface != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __APCarPlayInitiateJarvisProcessing_block_invoke;
  v11[3] = &__block_descriptor_56_e20_v20__0B8__NSError_12l;
  v11[4] = a2;
  v11[5] = a3;
  v11[6] = a1;
  softLinkAFSiriActivationCarPlayDeviceVoice(a2, (uint64_t)v12, 0, (uint64_t)v11);
  if (v12)
    CFRelease(v12);
  return 0;
}

uint64_t APCarPlayIsSiriSwitchOn()
{
  return objc_msgSend((id)objc_msgSend((Class)getVTPreferencesClass[0](), "sharedPreferences"), "voiceTriggerEnabled");
}

uint64_t APCarPlayGetJarvisLanguageFromList(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  NSObject *v6;
  Class v7;
  dispatch_time_t v8;
  uint64_t v9;
  _QWORD v11[7];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v6 = dispatch_semaphore_create(0);
  dispatch_retain(v6);
  v7 = (Class)getCSCoreSpeechServicesClass[0]();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __APCarPlayGetJarvisLanguageFromList_block_invoke;
  v11[3] = &unk_1E826E1D8;
  v11[5] = &v16;
  v11[6] = &v12;
  v11[4] = v6;
  -[objc_class voiceTriggerJarvisLanguageList:jarvisSelectedLanguage:completion:](v7, "voiceTriggerJarvisLanguageList:jarvisSelectedLanguage:completion:", a1, a2, v11);
  v8 = dispatch_time(0, 5000000000);
  dispatch_semaphore_wait(v6, v8);
  if (v6)
    dispatch_release(v6);
  *a3 = v13[3];
  v9 = *((unsigned int *)v17 + 6);
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
  return v9;
}

void sub_1C95396B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t initAFSiriActivationCarPlayDeviceVoice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (AssistantServicesLibrary_sOnce != -1)
    dispatch_once(&AssistantServicesLibrary_sOnce, &__block_literal_global_29);
  softLinkAFSiriActivationCarPlayDeviceVoice = (uint64_t (*)())dlsym((void *)AssistantServicesLibrary_sLib, "AFSiriActivationCarPlayDeviceVoice");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkAFSiriActivationCarPlayDeviceVoice)(a1, a2, a3, a4);
}

Class initVTPreferences()
{
  Class result;

  if (VoiceTriggerLibrary_sOnce != -1)
    dispatch_once(&VoiceTriggerLibrary_sOnce, &__block_literal_global_13);
  result = objc_getClass("VTPreferences");
  classVTPreferences = (uint64_t)result;
  getVTPreferencesClass[0] = VTPreferencesFunction;
  return result;
}

uint64_t VTPreferencesFunction()
{
  return classVTPreferences;
}

Class initCSCoreSpeechServices()
{
  Class result;

  if (CoreSpeechLibrary_sOnce != -1)
    dispatch_once(&CoreSpeechLibrary_sOnce, &__block_literal_global_16);
  result = objc_getClass("CSCoreSpeechServices");
  classCSCoreSpeechServices = (uint64_t)result;
  getCSCoreSpeechServicesClass[0] = CSCoreSpeechServicesFunction;
  return result;
}

uint64_t CSCoreSpeechServicesFunction()
{
  return classCSCoreSpeechServices;
}

uint64_t APManagedConfigurationShouldForcePairSetup()
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection"), "isAirPlayOutgoingRequestsPairingPasswordRequired");
}

uint64_t metadataSender_getTypeID(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APMetadataSenderCreate(uint64_t a1, const void *a2, int a3, NSObject *a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  uint64_t Instance;
  uint64_t v17;
  const __CFAllocator *v18;
  const CFDictionaryKeyCallBacks *v19;
  const CFDictionaryValueCallBacks *v20;
  uint64_t result;

  if (a3 && a4 && a5)
  {
    if (APMetadataSenderGetTypeID_sInitOnce != -1)
      dispatch_once_f(&APMetadataSenderGetTypeID_sInitOnce, &APMetadataSenderGetTypeID_sTypeID, (dispatch_function_t)metadataSender_getTypeID);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v17 = Instance;
      *(_OWORD *)(Instance + 96) = 0u;
      *(_OWORD *)(Instance + 112) = 0u;
      *(_OWORD *)(Instance + 64) = 0u;
      *(_OWORD *)(Instance + 80) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      *(_OWORD *)(Instance + 48) = 0u;
      *(_OWORD *)(Instance + 16) = 0u;
      *(_QWORD *)(Instance + 24) = a4;
      dispatch_retain(a4);
      *(_DWORD *)(v17 + 20) = a3;
      *(_QWORD *)(v17 + 32) = CFRetain(a5);
      *(_QWORD *)(v17 + 48) = CFRetain(a2);
      *(_QWORD *)(v17 + 56) = a6;
      *(_QWORD *)(v17 + 64) = a7;
      *(_QWORD *)(v17 + 72) = a8;
      v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v19 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v20 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      *(_QWORD *)(v17 + 80) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_QWORD *)(v17 + 96) = CFDictionaryCreateMutable(v18, 0, v19, v20);
      *(_QWORD *)(v17 + 112) = CFDictionaryCreateMutable(v18, 0, v19, v20);
      *(_QWORD *)(v17 + 40) = APMetadataSourceAddEventCallback(*(_QWORD *)(v17 + 32), v17, (uint64_t)metadataSender_handleMetadataEvent);
      if (gLogCategory_APMetadataSender <= 50
        && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      result = 0;
      *a9 = v17;
    }
    else
    {
      APSLogErrorAt();
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return result;
}

void metadataSender_handleMetadataEvent(int a1, _BYTE *cf, int a3, CFTypeRef a4, const void *a5)
{
  CFTypeID v8;
  const __CFString *v9;
  int v10;
  const __CFString *v11;
  int v12;
  int v13;
  double v14;

  if (!a4 || cf[16])
    return;
  if (a3 <= 1836217186)
  {
    if (a3 != 1634890784)
    {
      if (a3 != 1836215907 && a3 != 1836216435)
        return;
      goto LABEL_16;
    }
    v13 = *((_DWORD *)cf + 5);
    if ((v13 & 2) == 0)
    {
      if (gLogCategory_APMetadataSender <= 30
        && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_51;
      }
      return;
    }
    if ((v13 & 0x40) != 0)
    {
      if (gLogCategory_APMetadataSender <= 30
        && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_51;
      }
      return;
    }
LABEL_40:
    CFRetain(cf);
    CFRetain(a4);
    CFRetain(a5);
    goto LABEL_55;
  }
  if (a3 > 1886547814)
  {
    if (a3 == 1886547815)
    {
      if ((cf[20] & 4) == 0)
      {
        if (gLogCategory_APMetadataSender <= 30
          && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
        {
          goto LABEL_51;
        }
        return;
      }
      CFDictionaryGetDouble();
      if (v14 == 0.0)
        return;
LABEL_44:
      CFRetain(cf);
      CFRetain(a4);
      CFRetain(a5);
      goto LABEL_55;
    }
    if (a3 != 1952807028)
      return;
    v12 = *((_DWORD *)cf + 5);
    if ((v12 & 1) == 0)
    {
      if (gLogCategory_APMetadataSender <= 30
        && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_51;
      }
      return;
    }
    if ((v12 & 0x20) != 0)
    {
      if (gLogCategory_APMetadataSender <= 30
        && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_51;
      }
      return;
    }
    goto LABEL_40;
  }
  if (a3 == 1836217187)
  {
LABEL_16:
    if (a3 == 1836215907)
    {
      v9 = CFSTR("mrNowPlayingClient");
      v10 = 512;
      v11 = CFSTR("updateMRNowPlayingClient");
    }
    else if (a3 == 1836217187)
    {
      v9 = CFSTR("mrSupportedCommandsFromSender");
      v10 = 128;
      v11 = CFSTR("updateMRSupportedCommands");
    }
    else
    {
      v9 = CFSTR("mrPlaybackState");
      v10 = 256;
      v11 = CFSTR("updateMRPlaybackState");
    }
    if ((*((_DWORD *)cf + 5) & v10) == 0)
    {
      if (gLogCategory_APMetadataSender <= 30
        && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_51;
      }
      return;
    }
    CFRetain(cf);
    CFRetain(a4);
    CFRetain(v11);
    CFRetain(v9);
LABEL_55:
    APSDispatchAsyncFHelper();
    return;
  }
  if (a3 == 1852860704)
  {
    v8 = CFGetTypeID(a4);
    if (v8 != CFDictionaryGetTypeID())
    {
      APSLogErrorAt();
      return;
    }
    if (!cf[16])
    {
      if ((cf[20] & 0x20) == 0)
      {
        if (gLogCategory_APMetadataSender <= 30
          && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
        {
LABEL_51:
          LogPrintF();
          return;
        }
        return;
      }
      goto LABEL_44;
    }
  }
}

void APMetadataSenderInvalidate(uint64_t a1)
{
  if (a1)
  {
    if (!*(_BYTE *)(a1 + 16))
      metadataSender_invalidateInternal(a1);
  }
}

void metadataSender_invalidateInternal(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 16))
    {
      *(_BYTE *)(a1 + 16) = 1;
      APMetadataSourceRemoveEventCallback(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
      v2 = *(const void **)(a1 + 32);
      if (v2)
      {
        CFRelease(v2);
        *(_QWORD *)(a1 + 32) = 0;
      }
      v3 = *(const void **)(a1 + 48);
      if (v3)
      {
        CFRelease(v3);
        *(_QWORD *)(a1 + 48) = 0;
      }
      v4 = *(const void **)(a1 + 80);
      if (v4)
      {
        CFRelease(v4);
        *(_QWORD *)(a1 + 80) = 0;
      }
      v5 = *(const void **)(a1 + 96);
      if (v5)
      {
        CFRelease(v5);
        *(_QWORD *)(a1 + 96) = 0;
      }
      v6 = *(const void **)(a1 + 112);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(a1 + 112) = 0;
      }
    }
  }
  else
  {
    APSLogErrorAt();
  }
}

void APMetadataSenderSendInitialMetadata(dispatch_queue_t *a1)
{
  CFRetain(a1);
  dispatch_async_f(a1[3], a1, (dispatch_function_t)metadataSender_sendInitialMetadataInternal);
}

void metadataSender_sendInitialMetadataInternal(_QWORD *cf)
{
  BOOL v2;
  BOOL v3;
  BOOL v4;
  CFTypeRef cfa;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef v8;

  v7 = 0;
  v8 = 0;
  cfa = 0;
  v6 = 0;
  if (!*((_BYTE *)cf + 16))
  {
    metadataSender_cloneMetadataDictionary(cf[10], cf[4], (uint64_t)CFSTR("APNowPlayingInfoArtwork"));
    v2 = *((_BYTE *)cf + 88) || CFDictionaryGetCount((CFDictionaryRef)cf[10]) > 0;
    *((_BYTE *)cf + 88) = v2;
    metadataSender_processPendingAPArtworkMetadataChanges((uint64_t)cf);
    metadataSender_cloneMetadataDictionary(cf[12], cf[4], (uint64_t)CFSTR("APNowPlayingInfoProgress"));
    v3 = *((_BYTE *)cf + 104) || CFDictionaryGetCount((CFDictionaryRef)cf[12]) > 0;
    *((_BYTE *)cf + 104) = v3;
    metadataSender_processPendingAPProgressMetadataChanges((uint64_t)cf);
    metadataSender_cloneMetadataDictionary(cf[14], cf[4], (uint64_t)CFSTR("APNowPlayingInfoText"));
    v4 = *((_BYTE *)cf + 120) || CFDictionaryGetCount((CFDictionaryRef)cf[14]) > 0;
    *((_BYTE *)cf + 120) = v4;
    metadataSender_processPendingAPTextMetadataChanges((uint64_t)cf);
    APMetadataSourceCopyMetadata(cf[4], (uint64_t)CFSTR("MRNowPlayingInfo"), &cfa);
    metadataSender_sendMRNowPlayingInfo((uint64_t)cf, cfa, CFSTR("replace"));
    APMetadataSourceCopyMetadata(cf[4], (uint64_t)CFSTR("MRSupportedCommands"), &v8);
    APMetadataSourceCopyMetadata(cf[4], (uint64_t)CFSTR("MRPlaybackState"), &v7);
    APMetadataSourceCopyMetadata(cf[4], (uint64_t)CFSTR("MRNowPlayingClient"), &v6);
    metadataSender_sendMRExtendedMetadata((uint64_t)cf, v8, 128, CFSTR("updateMRSupportedCommands"), CFSTR("mrSupportedCommandsFromSender"));
    metadataSender_sendMRExtendedMetadata((uint64_t)cf, v7, 256, CFSTR("updateMRPlaybackState"), CFSTR("mrPlaybackState"));
    metadataSender_sendMRExtendedMetadata((uint64_t)cf, v6, 512, CFSTR("updateMRNowPlayingClient"), CFSTR("mrNowPlayingClient"));
    if (cfa)
      CFRelease(cfa);
  }
  if (v8)
    CFRelease(v8);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
  CFRelease(cf);
}

void metadataSender_Finalize(uint64_t a1)
{
  NSObject *v2;

  if (gLogCategory_APMetadataSender <= 30
    && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  metadataSender_invalidateInternal(a1);
  v2 = *(NSObject **)(a1 + 24);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void metadataSender_cloneMetadataDictionary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  CFDictionaryRef v5;
  CFDictionaryRef theDict;
  _QWORD context[2];

  theDict = 0;
  v4 = APMetadataSourceCopyMetadata(a2, a3, &theDict);
  v5 = theDict;
  if (!v4)
  {
    context[0] = 0;
    context[1] = a1;
    if (theDict)
    {
      CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)metadataSender_appendDictionaryKeyAndValue, context);
      v5 = theDict;
    }
  }
  if (v5)
    CFRelease(v5);
}

void metadataSender_processPendingAPArtworkMetadataChanges(uint64_t a1)
{
  int v2;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v5;
  const __CFDictionary *v6;
  int v7;
  CFTypeRef v8;
  int v9;
  const __CFString *Value;
  const __CFString *v11;
  uint64_t v12;
  int BlockBufferCopyingMemoryBlock;
  const __CFData *v14;
  const __CFData *v15;
  const __CFData *ScaledImageDataWithData;
  int BlockBufferWithCFDataNoCopy;
  OSStatus appended;
  CMBlockBufferRef v19;
  uint64_t (*v20)(CFTypeRef, uint64_t, CMBlockBufferRef, _QWORD);
  int v21;
  int v22;
  CMBlockBufferRef targetBBuf;
  int v24;
  CFTypeRef cf;
  int v26;
  CMBlockBufferRef theBuffer;

  cf = 0;
  if (*(_BYTE *)(a1 + 16))
    return;
  if (!(*(unsigned int (**)(_QWORD))(a1 + 64))(*(_QWORD *)(a1 + 56)))
  {
    if (gLogCategory_APMetadataSender > 30
      || gLogCategory_APMetadataSender == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_72;
    }
LABEL_22:
    LogPrintF();
LABEL_72:
    if (cf)
      CFRelease(cf);
    return;
  }
  v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 2) == 0)
  {
    if (gLogCategory_APMetadataSender > 30
      || gLogCategory_APMetadataSender == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_72;
    }
    goto LABEL_22;
  }
  if ((v2 & 0x40) != 0)
  {
    if (gLogCategory_APMetadataSender > 30
      || gLogCategory_APMetadataSender == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_72;
    }
    goto LABEL_22;
  }
  if (!*(_BYTE *)(a1 + 88))
    goto LABEL_72;
  CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(a1 + 48));
  v4 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v4)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4(CMBaseObject, CFSTR("TransportControlStream"), *MEMORY[0x1E0C9AE00], &cf);
    if (cf)
    {
      v6 = *(const __CFDictionary **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_BYTE *)(a1 + 88) = 0;
      (*(void (**)(CMBlockBufferRef *__return_ptr, _QWORD))(a1 + 72))(&targetBBuf, *(_QWORD *)(a1 + 56));
      if ((v24 & 1) == 0)
      {
        if (gLogCategory_APMetadataSender <= 90
          && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_70;
      }
      v7 = (int)targetBBuf;
      v8 = cf;
      v9 = *(_DWORD *)(a1 + 20);
      targetBBuf = 0;
      theBuffer = 0;
      v26 = v7;
      Value = (const __CFString *)CFDictionaryGetValue(v6, CFSTR("artworkMIMEType"));
      if (Value)
        v11 = Value;
      else
        v11 = CFSTR("image/none");
      if (CFEqual(v11, CFSTR("image/jpeg")))
      {
        v12 = 1785750887;
      }
      else
      {
        if (!CFEqual(v11, CFSTR("image/png")))
        {
          if (!CFEqual(v11, CFSTR("image/none")))
          {
            if (gLogCategory_APMetadataSender <= 90
              && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v22 = 0;
            goto LABEL_64;
          }
          BlockBufferCopyingMemoryBlock = FigCreateBlockBufferCopyingMemoryBlock();
          if (!BlockBufferCopyingMemoryBlock)
          {
            ScaledImageDataWithData = 0;
            v12 = 1852796517;
            goto LABEL_50;
          }
LABEL_80:
          v22 = BlockBufferCopyingMemoryBlock;
          APSLogErrorAt();
LABEL_64:
          if (targetBBuf)
            CFRelease(targetBBuf);
          if (theBuffer)
            CFRelease(theBuffer);
          if (v22)
            APSLogErrorAt();
LABEL_70:
          if (v6)
            CFRelease(v6);
          goto LABEL_72;
        }
        v12 = 1886283552;
      }
      BlockBufferCopyingMemoryBlock = FigCreateBlockBufferCopyingMemoryBlock();
      if (!BlockBufferCopyingMemoryBlock)
      {
        v14 = (const __CFData *)CFDictionaryGetValue(v6, CFSTR("artworkData"));
        if (v14 && (v15 = v14, CFDataGetLength(v14) >= 1))
        {
          if ((v9 & 0x10) != 0)
            goto LABEL_47;
          if (gLogCategory_APMetadataSender <= 30
            && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          ScaledImageDataWithData = (const __CFData *)CreateScaledImageDataWithData();
          if (!ScaledImageDataWithData)
LABEL_47:
            ScaledImageDataWithData = (const __CFData *)CFRetain(v15);
          BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
          if (BlockBufferWithCFDataNoCopy)
          {
            v22 = BlockBufferWithCFDataNoCopy;
            goto LABEL_57;
          }
          appended = CMBlockBufferAppendBufferReference(theBuffer, targetBBuf, 0, 0, 0);
          if (appended)
          {
            v22 = appended;
            goto LABEL_57;
          }
        }
        else
        {
          ScaledImageDataWithData = 0;
        }
LABEL_50:
        v19 = theBuffer;
        v20 = *(uint64_t (**)(CFTypeRef, uint64_t, CMBlockBufferRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 56);
        if (v20)
        {
          v21 = v20(v8, v12, v19, 0);
          if (!v21)
          {
            if (gLogCategory_APMetadataSender <= 50
              && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
            {
              if (ScaledImageDataWithData)
                CFDataGetLength(ScaledImageDataWithData);
              LogPrintF();
            }
            v22 = 0;
            goto LABEL_62;
          }
          v22 = v21;
        }
        else
        {
          v22 = -12782;
        }
LABEL_57:
        APSLogErrorAt();
LABEL_62:
        if (ScaledImageDataWithData)
          CFRelease(ScaledImageDataWithData);
        goto LABEL_64;
      }
      goto LABEL_80;
    }
  }
}

void metadataSender_processPendingAPProgressMetadataChanges(uint64_t a1)
{
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v4;
  const void *v5;
  CMBlockBufferRef v6;
  int v7;
  CFTypeRef v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double Current;
  __CFString *Mutable;
  __CFString *v17;
  CMBlockBufferRef v18;
  uint64_t (*v19)(CFTypeRef, uint64_t, CMBlockBufferRef, _QWORD);
  CMBlockBufferRef targetBBuf;
  int v21;
  int v22;
  CFTypeRef cf;
  CMBlockBufferRef theBuffer;
  int v25;
  int BlockBufferWithCFString;

  cf = 0;
  if (!*(_BYTE *)(a1 + 16))
  {
    if (!(*(unsigned int (**)(_QWORD))(a1 + 64))(*(_QWORD *)(a1 + 56)))
    {
      if (gLogCategory_APMetadataSender > 30
        || gLogCategory_APMetadataSender == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_41;
      }
LABEL_9:
      LogPrintF();
      goto LABEL_41;
    }
    if ((*(_BYTE *)(a1 + 20) & 4) == 0)
    {
      if (gLogCategory_APMetadataSender > 30
        || gLogCategory_APMetadataSender == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_41;
      }
      goto LABEL_9;
    }
    if (!*(_BYTE *)(a1 + 104))
    {
LABEL_41:
      if (cf)
        CFRelease(cf);
      return;
    }
    CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(a1 + 48));
    v3 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v3)
    {
      v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v3(CMBaseObject, CFSTR("TransportControlStream"), *MEMORY[0x1E0C9AE00], &cf);
      if (cf)
      {
        v5 = *(const void **)(a1 + 96);
        *(_QWORD *)(a1 + 96) = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        *(_BYTE *)(a1 + 104) = 0;
        (*(void (**)(CMBlockBufferRef *__return_ptr, _QWORD))(a1 + 72))(&targetBBuf, *(_QWORD *)(a1 + 56));
        if ((v22 & 1) == 0)
        {
          if (gLogCategory_APMetadataSender <= 90
            && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          goto LABEL_39;
        }
        v6 = targetBBuf;
        v7 = v21;
        v8 = cf;
        v25 = (int)targetBBuf;
        BlockBufferWithCFString = 0;
        targetBBuf = 0;
        theBuffer = 0;
        CFDictionaryGetDouble();
        if (BlockBufferWithCFString
          || (v10 = v9, CFDictionaryGetDouble(), BlockBufferWithCFString)
          || (v12 = v11, CFDictionaryGetDouble(), BlockBufferWithCFString))
        {
          APSLogErrorAt();
        }
        else
        {
          v14 = v13;
          Current = CFAbsoluteTimeGetCurrent();
          Mutable = CFStringCreateMutable(v4, 0);
          if (Mutable)
          {
            v17 = Mutable;
            CFStringAppendFormat(Mutable, 0, CFSTR("progress: %u/%u/%u\n"), ((_DWORD)v6 - (int)((v12 + Current - v14) * (double)v7)), v6, ((_DWORD)v6 - (int)((v12 + Current - v14) * (double)v7) + (int)(v10 * (double)v7)));
            BlockBufferWithCFString = FigCreateBlockBufferWithCFString();
            if (!BlockBufferWithCFString)
            {
              BlockBufferWithCFString = FigCreateBlockBufferCopyingMemoryBlock();
              if (!BlockBufferWithCFString)
              {
                BlockBufferWithCFString = CMBlockBufferAppendBufferReference(theBuffer, targetBBuf, 0, 0, 0);
                if (!BlockBufferWithCFString)
                {
                  v18 = theBuffer;
                  v19 = *(uint64_t (**)(CFTypeRef, uint64_t, CMBlockBufferRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 56);
                  if (v19)
                  {
                    BlockBufferWithCFString = v19(v8, 1886547815, v18, 0);
                    if (!BlockBufferWithCFString)
                    {
                      if (gLogCategory_APMetadataSender <= 40
                        && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
                      {
                        CMBlockBufferGetDataLength(targetBBuf);
                        LogPrintF();
                      }
                      goto LABEL_33;
                    }
                  }
                  else
                  {
                    BlockBufferWithCFString = -12782;
                  }
                }
              }
            }
            APSLogErrorAt();
LABEL_33:
            CFRelease(v17);
            if (targetBBuf)
              CFRelease(targetBBuf);
            goto LABEL_35;
          }
          APSLogErrorAt();
          BlockBufferWithCFString = -6728;
        }
LABEL_35:
        if (theBuffer)
          CFRelease(theBuffer);
        if (BlockBufferWithCFString)
          APSLogErrorAt();
LABEL_39:
        if (v5)
          CFRelease(v5);
        goto LABEL_41;
      }
    }
  }
}

void metadataSender_processPendingAPTextMetadataChanges(uint64_t a1)
{
  int v2;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v5;
  __CFDictionary *v6;
  uint64_t i;
  __CFString *v8;
  int v9;
  CFTypeRef v10;
  uint64_t v11;
  int v12;
  CMBlockBufferRef v13;
  uint64_t (*v14)(CFTypeRef, uint64_t, CMBlockBufferRef, _QWORD);
  CFTypeRef cf;
  CFTypeRef v16;
  int sourceBytes;
  CMBlockBufferRef destinationBuffer;
  size_t v19;
  const void *v20;
  _OWORD v21[11];
  uint64_t v22;
  int v23;

  cf = 0;
  v16 = 0;
  if (*(_BYTE *)(a1 + 16))
    goto LABEL_62;
  if (!(*(unsigned int (**)(_QWORD))(a1 + 64))(*(_QWORD *)(a1 + 56)))
  {
    if (gLogCategory_APMetadataSender <= 30
      && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_32;
    }
    goto LABEL_60;
  }
  v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 1) != 0)
  {
    if ((v2 & 0x20) != 0)
    {
      if (gLogCategory_APMetadataSender <= 30
        && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_32;
      }
      goto LABEL_60;
    }
    if (!*(_BYTE *)(a1 + 120))
      goto LABEL_60;
    CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(a1 + 48));
    v4 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (!v4)
      goto LABEL_60;
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4(CMBaseObject, CFSTR("TransportControlStream"), *MEMORY[0x1E0C9AE00], &v16);
    if (!v16)
      goto LABEL_60;
    v6 = *(__CFDictionary **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_BYTE *)(a1 + 120) = 0;
    if ((*(_BYTE *)(a1 + 20) & 8) == 0)
    {
      if (APMetadataSourceCopyMetadata(*(_QWORD *)(a1 + 32), (uint64_t)CFSTR("APNowPlayingInfoText"), &cf))
        goto LABEL_77;
      for (i = 0; i != 6; ++i)
      {
        v8 = metadataSender_processPendingAPTextMetadataChanges_mandatoryTextKeys[i];
        if (!FigCFDictionarySetValueFromKeyInDict())
          CFDictionarySetValue(v6, v8, &stru_1E8273C10);
      }
    }
    (*(void (**)(_OWORD *__return_ptr, _QWORD))(a1 + 72))(v21, *(_QWORD *)(a1 + 56));
    if ((BYTE12(v21[0]) & 1) == 0)
    {
      if (gLogCategory_APMetadataSender <= 90
        && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_58;
    }
    v9 = v21[0];
    v10 = v16;
    v22 = 0;
    memset(v21, 0, sizeof(v21));
    v19 = 0;
    v20 = 0;
    destinationBuffer = 0;
    sourceBytes = v9;
    DMAPContentBlock_Init();
    v23 = DMAPContentBlock_OpenContainer();
    if (!v23)
    {
      v11 = 0;
      while (1)
      {
        v23 = DMAPContentBlock_AddCFObjectByKey();
        if (v23)
          break;
        v11 += 16;
        if (v11 == 160)
        {
          if (CFDictionaryGetInt64())
            v23 = DMAPContentBlock_AddInt8();
          CFDictionaryGetInt64();
          if (!v23)
          {
            v23 = DMAPContentBlock_AddInt8();
            if (v23)
              break;
          }
          v23 = 0;
          CFDictionaryGetDouble();
          v12 = DMAPContentBlock_AddInt8();
          v23 = v12;
          if (v12)
            break;
          CFDictionaryGetDouble();
          if (!v23)
          {
            v23 = DMAPContentBlock_AddInt32();
            if (v23)
              break;
          }
          v23 = 0;
          v23 = DMAPContentBlock_CloseContainer();
          if (v23)
            break;
          v23 = DMAPContentBlock_Commit();
          if (v23)
            break;
          v23 = CMBlockBufferCreateWithMemoryBlock(v5, 0, v19 + 4, (CFAllocatorRef)*MEMORY[0x1E0C9AE10], 0, 0, v19 + 4, 1u, &destinationBuffer);
          if (v23)
            break;
          v23 = CMBlockBufferReplaceDataBytes(&sourceBytes, destinationBuffer, 0, 4uLL);
          if (v23)
            break;
          v23 = CMBlockBufferReplaceDataBytes(v20, destinationBuffer, 4uLL, v19);
          if (v23)
            break;
          v13 = destinationBuffer;
          v14 = *(uint64_t (**)(CFTypeRef, uint64_t, CMBlockBufferRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 56);
          if (!v14)
          {
            v23 = -12782;
            break;
          }
          v23 = v14(v10, 1952807028, v13, 0);
          if (v23)
            break;
          if (gLogCategory_APMetadataSender <= 30
            && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          goto LABEL_55;
        }
      }
    }
    APSLogErrorAt();
LABEL_55:
    DMAPContentBlock_Free();
    if (destinationBuffer)
      CFRelease(destinationBuffer);
    if (!v23)
      goto LABEL_58;
LABEL_77:
    APSLogErrorAt();
LABEL_58:
    if (v6)
      CFRelease(v6);
    goto LABEL_60;
  }
  if (gLogCategory_APMetadataSender <= 30
    && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
  {
LABEL_32:
    LogPrintF();
  }
LABEL_60:
  if (cf)
    CFRelease(cf);
LABEL_62:
  if (v16)
    CFRelease(v16);
}

void metadataSender_sendMRNowPlayingInfo(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  __CFDictionary *v10;
  CFTypeRef cf;

  cf = 0;
  if (!a2 || *(_BYTE *)(a1 + 16))
    goto LABEL_23;
  if (!a3)
    goto LABEL_28;
  if ((*(_BYTE *)(a1 + 20) & 0x20) == 0)
  {
    if (gLogCategory_APMetadataSender > 30
      || gLogCategory_APMetadataSender == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_23;
    }
    goto LABEL_18;
  }
  if (!(*(unsigned int (**)(_QWORD))(a1 + 64))(*(_QWORD *)(a1 + 56)))
  {
    if (gLogCategory_APMetadataSender > 30
      || gLogCategory_APMetadataSender == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_23;
    }
LABEL_18:
    LogPrintF();
    goto LABEL_23;
  }
  CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(a1 + 48));
  v7 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v7)
  {
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7(CMBaseObject, CFSTR("TransportControlStream"), *MEMORY[0x1E0C9AE00], &cf);
    if (cf)
    {
      Mutable = CFDictionaryCreateMutable(v8, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v10 = Mutable;
        CFDictionarySetValue(Mutable, CFSTR("type"), CFSTR("npi-text"));
        CFDictionarySetValue(v10, CFSTR("params"), a2);
        CFDictionarySetValue(v10, CFSTR("mergePolicy"), a3);
        if (metadataSender_sendMRMetadata((uint64_t)cf, CFSTR("updateMRNowPlayingInfo"), v10))
        {
          APSLogErrorAt();
        }
        else if (gLogCategory_APMetadataSender <= 30
               && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CFRelease(v10);
        goto LABEL_23;
      }
LABEL_28:
      APSLogErrorAt();
LABEL_23:
      if (cf)
        CFRelease(cf);
    }
  }
}

void metadataSender_sendMRExtendedMetadata(uint64_t a1, const void *a2, int a3, const void *a4, const void *a5)
{
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v10;
  __CFDictionary *Mutable;
  __CFDictionary *v12;
  CFTypeRef cf;

  cf = 0;
  if (!a2 || *(_BYTE *)(a1 + 16))
    goto LABEL_18;
  if (!a5)
  {
LABEL_23:
    APSLogErrorAt();
LABEL_18:
    if (cf)
      CFRelease(cf);
    return;
  }
  if (a3 && (*(_DWORD *)(a1 + 20) & a3) == 0)
  {
    if (gLogCategory_APMetadataSender <= 30
      && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_18;
  }
  CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(a1 + 48));
  v9 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v9)
  {
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v9(CMBaseObject, CFSTR("TransportControlStream"), *MEMORY[0x1E0C9AE00], &cf);
    if (cf)
    {
      Mutable = CFDictionaryCreateMutable(v10, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v12 = Mutable;
        CFDictionarySetValue(Mutable, a5, a2);
        if (metadataSender_sendMRMetadata((uint64_t)cf, a4, v12))
        {
          APSLogErrorAt();
        }
        else if (gLogCategory_APMetadataSender <= 30
               && (gLogCategory_APMetadataSender != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CFRelease(v12);
        goto LABEL_18;
      }
      goto LABEL_23;
    }
  }
}

void metadataSender_appendDictionaryKeyAndValue(void *key, const void *a2, uint64_t a3)
{
  CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 8), key);
  if (!FigCFEqual())
  {
    *(_BYTE *)a3 = 1;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 8), key, a2);
  }
}

uint64_t metadataSender_sendMRMetadata(uint64_t a1, const void *a2, const void *a3)
{
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  uint64_t v7;

  if (a2 && a3)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v6 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("type"), a2);
      CFDictionarySetValue(v6, CFSTR("params"), a3);
      v7 = APTransportStreamSendPlistMessage();
      if ((_DWORD)v7)
        APSLogErrorAt();
      CFRelease(v6);
    }
    else
    {
      APSLogErrorAt();
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v7;
}

void metadataSender_handleAPArtworkMetadataChangedInternal(CFTypeRef *a1)
{
  uint64_t v2;
  uint64_t v3;
  const __CFDictionary *v4;
  _QWORD v5[2];

  v2 = (uint64_t)*a1;
  if (!*((_BYTE *)*a1 + 16))
  {
    v3 = *(_QWORD *)(v2 + 80);
    v4 = (const __CFDictionary *)a1[1];
    v5[0] = 0;
    v5[1] = v3;
    if (v4)
    {
      CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)metadataSender_appendDictionaryKeyAndValue, v5);
      if (LOBYTE(v5[0]))
      {
        *(_BYTE *)(v2 + 88) = 1;
        metadataSender_processPendingAPArtworkMetadataChanges(v2);
      }
    }
  }
  CFRelease(*a1);
  CFRelease(a1[1]);
  CFRelease(a1[2]);
}

void metadataSender_handleAPProgressMetadataChangedInternal(CFTypeRef *a1)
{
  uint64_t v2;
  uint64_t v3;
  const __CFDictionary *v4;
  _QWORD v5[2];

  v2 = (uint64_t)*a1;
  if (!*((_BYTE *)*a1 + 16))
  {
    v3 = *(_QWORD *)(v2 + 96);
    v4 = (const __CFDictionary *)a1[1];
    v5[0] = 0;
    v5[1] = v3;
    if (v4)
    {
      CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)metadataSender_appendDictionaryKeyAndValue, v5);
      if (LOBYTE(v5[0]))
      {
        *(_BYTE *)(v2 + 104) = 1;
        metadataSender_processPendingAPProgressMetadataChanges(v2);
      }
    }
  }
  CFRelease(*a1);
  CFRelease(a1[1]);
  CFRelease(a1[2]);
}

void metadataSender_handleAPTextMetadataChangedInternal(CFTypeRef *a1)
{
  uint64_t v2;
  uint64_t v3;
  const __CFDictionary *v4;
  _QWORD v5[2];

  v2 = (uint64_t)*a1;
  if (!*((_BYTE *)*a1 + 16))
  {
    v3 = *(_QWORD *)(v2 + 112);
    v4 = (const __CFDictionary *)a1[1];
    v5[0] = 0;
    v5[1] = v3;
    if (v4)
    {
      CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)metadataSender_appendDictionaryKeyAndValue, v5);
      if (LOBYTE(v5[0]))
      {
        *(_BYTE *)(v2 + 120) = 1;
        metadataSender_processPendingAPTextMetadataChanges(v2);
      }
    }
  }
  CFRelease(*a1);
  CFRelease(a1[1]);
  CFRelease(a1[2]);
}

void metadataSender_handleMRNowPlayingInfoChangedInternal(uint64_t a1)
{
  _BYTE *v2;

  v2 = *(_BYTE **)a1;
  if (!v2[16])
  {
    metadataSender_sendMRNowPlayingInfo((uint64_t)v2, *(const void **)(a1 + 8), *(const void **)(a1 + 16));
    v2 = *(_BYTE **)a1;
  }
  CFRelease(v2);
  CFRelease(*(CFTypeRef *)(a1 + 8));
  CFRelease(*(CFTypeRef *)(a1 + 16));
}

void metadataSender_handleMRExtendedMetadataChangedInternal(uint64_t a1)
{
  _BYTE *v2;

  v2 = *(_BYTE **)a1;
  if (!v2[16])
  {
    metadataSender_sendMRExtendedMetadata((uint64_t)v2, *(const void **)(a1 + 8), 0, *(const void **)(a1 + 16), *(const void **)(a1 + 24));
    v2 = *(_BYTE **)a1;
  }
  CFRelease(v2);
  CFRelease(*(CFTypeRef *)(a1 + 8));
  CFRelease(*(CFTypeRef *)(a1 + 16));
  CFRelease(*(CFTypeRef *)(a1 + 24));
}

uint64_t SPHubbedDevicesProviderDefaultsCreate(uint64_t a1, const __CFDictionary *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  const __CFString *Value;
  const __CFString *v8;
  CFTypeID v9;
  uint64_t v10;
  dispatch_queue_t v11;
  uint64_t v12;
  char label[64];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    SPHubbedDevicesProviderGetClassID();
    v5 = CMDerivedObjectCreate();
    if ((_DWORD)v5)
    {
      v12 = v5;
      APSLogErrorAt();
    }
    else
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (gLogCategory_SPHubbedDevicesProviderDefaults <= 30
        && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (!a2
        || (Value = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("HubbedDevicesKeyName"))) == 0
        || (v8 = Value, v9 = CFGetTypeID(Value), v9 != CFStringGetTypeID()))
      {
        v8 = CFSTR("sidePlayHubbedDevices");
      }
      *(_BYTE *)(DerivedStorage + 40) = 0;
      *(_QWORD *)(DerivedStorage + 8) = CFRetain(v8);
      v10 = FigSimpleMutexCreate();
      *(_QWORD *)DerivedStorage = v10;
      if (v10 && (SNPrintF(), v11 = dispatch_queue_create(label, 0), (*(_QWORD *)(DerivedStorage + 16) = v11) != 0))
      {
        *(_DWORD *)(DerivedStorage + 24) = -1;
        *(_QWORD *)(DerivedStorage + 32) = 0;
        if (gLogCategory_SPHubbedDevicesProviderDefaults <= 50
          && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v12 = 0;
        *a3 = 0;
      }
      else
      {
        APSLogErrorAt();
        return 4294960568;
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v12;
}

uint64_t hdpd_Invalidate(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPHubbedDevicesProviderDefaults <= 50
    && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 16), a1, (dispatch_function_t)hdpd_invalidateInternal);
  return 0;
}

void hdpd_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  NSObject *v2;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPHubbedDevicesProviderDefaults <= 50
    && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 40))
  {
    v1 = *(const void **)(DerivedStorage + 32);
    if (v1)
    {
      CFRelease(v1);
      *(_QWORD *)(DerivedStorage + 32) = 0;
    }
    v2 = *(NSObject **)(DerivedStorage + 16);
    if (v2)
    {
      dispatch_release(v2);
      *(_QWORD *)(DerivedStorage + 16) = 0;
    }
    FigSimpleMutexDestroy();
    v3 = *(const void **)(DerivedStorage + 8);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(DerivedStorage + 8) = 0;
    }
  }
  else
  {
    if (gLogCategory_SPHubbedDevicesProviderDefaults <= 90)
      hdpd_Finalize_cold_1(gLogCategory_SPHubbedDevicesProviderDefaults);
    __break(1u);
  }
}

__CFString *hdpd_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<SPHubbedDevicesProviderDefaults %p>"), a1);
  return Mutable;
}

uint64_t hdpd_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFSetRef *a4)
{
  _QWORD *DerivedStorage;
  uint64_t v8;
  const __CFSet *v9;
  uint64_t v10;
  int v11;
  CFSetRef Copy;
  uint64_t v13;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPHubbedDevicesProviderDefaults <= 30
    && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a2 || !a4)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (!CFEqual(a2, CFSTR("HubbedDevices")))
  {
    if (gLogCategory_SPHubbedDevicesProviderDefaults <= 30
      && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v13 = 4294954512;
    goto LABEL_26;
  }
  v8 = CMBaseObjectGetDerivedStorage();
  v9 = *(const __CFSet **)(v8 + 32);
  if (v9)
  {
    if (gLogCategory_SPHubbedDevicesProviderDefaults <= 30)
    {
      v10 = v8;
      if (gLogCategory_SPHubbedDevicesProviderDefaults != -1
        || (v11 = _LogCategory_Initialize(), v9 = *(const __CFSet **)(v10 + 32), v11))
      {
        LogPrintF();
        v9 = *(const __CFSet **)(v10 + 32);
      }
    }
    Copy = CFSetCreateCopy(a3, v9);
    if (!Copy)
    {
LABEL_29:
      APSLogErrorAt();
      v13 = 4294960568;
      goto LABEL_26;
    }
  }
  else
  {
    if (gLogCategory_SPHubbedDevicesProviderDefaults <= 30
      && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    Copy = CFSetCreate(a3, 0, 0, MEMORY[0x1E0C9B3B0]);
    if (!Copy)
      goto LABEL_29;
  }
  v13 = 0;
  *a4 = Copy;
LABEL_26:
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return v13;
}

uint64_t hdpd_invalidateInternal()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPHubbedDevicesProviderDefaults <= 30
    && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  result = *(unsigned int *)(DerivedStorage + 24);
  if ((_DWORD)result != -1)
  {
    result = notify_cancel(result);
    *(_DWORD *)(DerivedStorage + 24) = -1;
  }
  *(_BYTE *)(DerivedStorage + 40) = 1;
  return result;
}

uint64_t hdpd_Start(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  _QWORD handler[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(NSObject **)(DerivedStorage + 16);
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 0x40000000;
  handler[2] = __hdpd_Start_block_invoke;
  handler[3] = &__block_descriptor_tmp_30;
  handler[4] = a1;
  notify_register_dispatch("com.apple.airplay.prefsChanged", (int *)(DerivedStorage + 24), v3, handler);
  hdpd_handlePreferencesChanged();
  return 0;
}

void hdpd_handlePreferencesChanged()
{
  _QWORD *DerivedStorage;
  const __CFArray *v1;
  CFTypeID v2;
  CFIndex Count;
  const void **v4;
  CFSetRef v5;
  const void *v6;
  CFRange v7;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPHubbedDevicesProviderDefaults <= 50
    && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APSSettingsSynchronize();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  v1 = (const __CFArray *)APSSettingsCopyValue();
  if (gLogCategory_SPHubbedDevicesProviderDefaults <= 30
    && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v1 && (v2 = CFGetTypeID(v1), v2 == CFArrayGetTypeID()))
  {
    Count = CFArrayGetCount(v1);
    v4 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
    v7.location = 0;
    v7.length = Count;
    CFArrayGetValues(v1, v7, v4);
    v5 = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, Count, MEMORY[0x1E0C9B3B0]);
    free(v4);
  }
  else
  {
    if (gLogCategory_SPHubbedDevicesProviderDefaults <= 30
      && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v5 = 0;
  }
  if (!FigCFEqual())
  {
    if (gLogCategory_SPHubbedDevicesProviderDefaults <= 50
      && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v6 = (const void *)DerivedStorage[4];
    DerivedStorage[4] = v5;
    if (v5)
      CFRetain(v5);
    if (v6)
      CFRelease(v6);
    if (gLogCategory_SPHubbedDevicesProviderDefaults <= 50
      && (gLogCategory_SPHubbedDevicesProviderDefaults != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  MEMORY[0x1CAA400E4](*DerivedStorage);
  if (v1)
    CFRelease(v1);
  if (v5)
    CFRelease(v5);
}

uint64_t APAudioZeroTimeStampProviderGetTypeID()
{
  if (APAudioZeroTimeStampProviderGetTypeID_initOnce != -1)
    dispatch_once(&APAudioZeroTimeStampProviderGetTypeID_initOnce, &__block_literal_global_30);
  return APAudioZeroTimeStampProviderGetTypeID_typeID;
}

uint64_t APAudioZeroTimeStampProviderCreate(double a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t Instance;
  uint64_t v8;
  uint64_t result;

  if (APAudioZeroTimeStampProviderGetTypeID_initOnce != -1)
    dispatch_once(&APAudioZeroTimeStampProviderGetTypeID_initOnce, &__block_literal_global_30);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294960568;
  v8 = Instance;
  result = 0;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_BYTE *)(v8 + 157) = a3;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(double *)(v8 + 16) = a1;
  *(_BYTE *)(v8 + 156) = 0;
  *a4 = v8;
  return result;
}

double APAudioZeroTimeStampProviderGetUpdateInterval(uint64_t a1)
{
  return *(double *)(a1 + 16);
}

uint64_t APAudioZeroTimeStampProviderIsStable(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 157);
}

uint64_t APAudioZeroTimeStampProviderSetZeroTimeStamp(uint64_t result, _OWORD *a2)
{
  unsigned int *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  unsigned int v7;

  v2 = (unsigned int *)(result + 152);
  v3 = result + ((unint64_t)(*(_DWORD *)(result + 152) == 0) << 6);
  v4 = a2[2];
  v5 = a2[3];
  v6 = a2[1];
  *(_OWORD *)(v3 + 24) = *a2;
  *(_OWORD *)(v3 + 72) = v5;
  *(_OWORD *)(v3 + 56) = v4;
  *(_OWORD *)(v3 + 40) = v6;
  do
    v7 = __ldaxr(v2);
  while (__stlxr(v7 ^ 1, v2));
  return result;
}

__n128 APAudioZeroTimeStampProviderGetZeroTimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = a1 + ((unint64_t)*(unsigned int *)(a1 + 152) << 6);
  result = *(__n128 *)(v2 + 24);
  v4 = *(_OWORD *)(v2 + 40);
  v5 = *(_OWORD *)(v2 + 72);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 56);
  *(_OWORD *)(a2 + 48) = v5;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

double APAudioZeroTimeStampProviderReset(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

uint64_t APAudioZeroTimeStampProviderSetHighAccuracySupport(uint64_t result, char a2)
{
  *(_BYTE *)(result + 156) = a2;
  return result;
}

uint64_t APAudioZeroTimeStampProviderGetHighAccuracySupport(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 156);
}

uint64_t APEndpointStreamAudioCreate(const __CFAllocator *a1, CFTypeRef cf, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8, CFTypeRef cfa, void **a10)
{
  CFTypeID v18;
  CFTypeID v19;
  CFTypeID v20;
  CFTypeID v21;
  CFTypeID v22;
  uint64_t DerivedStorage;
  uint64_t v24;
  dispatch_queue_t v25;
  NSObject *v26;
  NSObject *v27;
  dispatch_queue_t v28;
  BOOL v29;
  uint64_t Int64;
  uint64_t CMBaseObject;
  uint64_t (*v32)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  int v33;
  uint64_t UpTimeNanoseconds;
  CFStringRef v35;
  CFTypeRef v36;
  int v38;
  CFTypeRef v39;
  void *context;
  unsigned int v41;
  char label[64];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v41 = 0;
  v39 = 0;
  context = 0;
  if (!cf)
    goto LABEL_87;
  v18 = CFGetTypeID(cf);
  if (v18 != CFStringGetTypeID())
    goto LABEL_87;
  if (a5)
  {
    v19 = CFGetTypeID(a5);
    if (v19 != CFDictionaryGetTypeID())
      goto LABEL_87;
  }
  if (!a6)
    goto LABEL_87;
  v20 = CFGetTypeID(a6);
  if (v20 != APSenderSessionGetTypeID())
    goto LABEL_87;
  if (!cfa)
    goto LABEL_87;
  v21 = CFGetTypeID(cfa);
  if (v21 != APEndpointDescriptionGetTypeID())
    goto LABEL_87;
  if (!a4)
    goto LABEL_87;
  v22 = CFGetTypeID(a4);
  if (v22 != CFStringGetTypeID()
    || !CFEqual(a4, (CFTypeRef)*MEMORY[0x1E0CA4880]) && !CFEqual(a4, (CFTypeRef)*MEMORY[0x1E0CA4890]))
  {
    goto LABEL_87;
  }
  if (!a10 || !a7 || !a8)
    goto LABEL_87;
  FigEndpointStreamGetClassID();
  v41 = CMDerivedObjectCreate();
  if (v41)
    goto LABEL_33;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 260) = 0;
  *(_QWORD *)(DerivedStorage + 24) = CFRetain(cf);
  *(_QWORD *)(DerivedStorage + 40) = CFRetain(a4);
  SNPrintF();
  *(_QWORD *)(DerivedStorage + 16) = os_transaction_create();
  *(_QWORD *)(DerivedStorage + 56) = CFRetain(a6);
  *(_QWORD *)(DerivedStorage + 80) = CFRetain(cfa);
  *(_QWORD *)(DerivedStorage + 64) = CFRetain(a7);
  *(_QWORD *)(DerivedStorage + 72) = CFRetain(a8);
  v24 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 152) = v24;
  if (!v24)
    goto LABEL_79;
  SNPrintF();
  v25 = dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 296) = v25;
  if (!v25)
    goto LABEL_79;
  atomic_store(0, (unsigned __int8 *)(DerivedStorage + 305));
  *(_QWORD *)(DerivedStorage + 472) = (int)FigGetCFPreferenceNumberWithDefault();
  *(_QWORD *)(DerivedStorage + 480) = (int)FigGetCFPreferenceNumberWithDefault();
  SNPrintF();
  v26 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 312) = v26;
  if (!v26)
    goto LABEL_79;
  v27 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v26);
  *(_QWORD *)(DerivedStorage + 320) = v27;
  dispatch_set_context(v27, context);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(DerivedStorage + 320), (dispatch_function_t)audioStream_statsTimerFired);
  dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 320), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 320));
  SNPrintF();
  v28 = dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 8) = v28;
  if (!v28)
  {
LABEL_79:
    APSLogErrorAt();
    v38 = -16761;
LABEL_88:
    v41 = v38;
    goto LABEL_65;
  }
  if (!a5)
  {
LABEL_87:
    APSLogErrorAt();
    v38 = -16760;
    goto LABEL_88;
  }
  if ((const void *)*MEMORY[0x1E0CA4890] == a4)
  {
    v29 = 1;
  }
  else if (*MEMORY[0x1E0CA4890])
  {
    v29 = CFEqual(a4, (CFTypeRef)*MEMORY[0x1E0CA4890]) != 0;
  }
  else
  {
    v29 = 0;
  }
  *(_BYTE *)(DerivedStorage + 120) = !v29;
  *(_BYTE *)(DerivedStorage + 121) = CFDictionaryGetInt64() != 0;
  Int64 = CFDictionaryGetInt64();
  *(_BYTE *)(DerivedStorage + 140) = CFDictionaryGetInt64() != 0;
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 80));
  v32 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v32)
  {
    v41 = -12782;
    goto LABEL_33;
  }
  v41 = v32(CMBaseObject, CFSTR("SupportedAudioFormats"), *MEMORY[0x1E0C9AE00], &v39);
  if (v41)
  {
LABEL_33:
    APSLogErrorAt();
    goto LABEL_65;
  }
  if (FigCFEqual())
  {
    *(_QWORD *)(DerivedStorage + 112) = CFDictionaryGetInt64();
    if (v41)
      goto LABEL_33;
  }
  else
  {
    *(_QWORD *)(DerivedStorage + 112) = CFDictionaryGetInt64();
    if (v41)
      goto LABEL_33;
  }
  v33 = *(unsigned __int8 *)(DerivedStorage + 121);
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (v33)
    v35 = CFStringCreateWithFormat(a1, 0, CFSTR("%@-%llu-screen"), a3, UpTimeNanoseconds);
  else
    v35 = CFStringCreateWithFormat(a1, 0, CFSTR("%@-%llu-airplay"), a3, UpTimeNanoseconds);
  *(_QWORD *)(DerivedStorage + 32) = v35;
  if (a3)
    v36 = CFRetain(a3);
  else
    v36 = 0;
  *(_QWORD *)(DerivedStorage + 48) = v36;
  *(_QWORD *)(DerivedStorage + 128) = CFRetain((CFTypeRef)*MEMORY[0x1E0CA46C0]);
  *(_BYTE *)(DerivedStorage + 136) = APSGetFBOPropertyInt64() != 0;
  if (v41)
    goto LABEL_33;
  *(_BYTE *)(DerivedStorage + 137) = APSGetFBOPropertyInt64() != 0;
  if (v41)
    goto LABEL_33;
  *(_BYTE *)(DerivedStorage + 138) = APSGetFBOPropertyInt64() != 0;
  if (v41)
    goto LABEL_33;
  if (APSIsEndpointClusteringEnabled() && APSGetFBOPropertyInt64())
    APSIsFBOPropertyNonNull();
  if (APSSettingsGetIntWithDefault())
  {
    if (gLogCategory_APEndpointStreamAudio <= 50
      && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_BYTE *)(DerivedStorage + 139) = 1;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)a5, CFSTR("MediaPresentationLatencyMs")))
  {
    *(_DWORD *)(DerivedStorage + 96) = CFDictionaryGetInt64Ranged();
    if (v41)
      goto LABEL_33;
  }
  if (CFDictionaryGetInt64())
    *(_QWORD *)(DerivedStorage + 248) = 1;
  v41 = audioStream_setupEventRecorder((uint64_t)context, (const __CFDictionary *)a5);
  if (v41)
    goto LABEL_33;
  if (Int64)
    audioStream_startSilentAudio((uint64_t)context);
  APSIOReporterCreate();
  v41 = 0;
  if (gLogCategory_APEndpointStreamAudio <= 30
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *a10 = context;
  context = 0;
LABEL_65:
  if (v39)
    CFRelease(v39);
  if (context)
    CFRelease(context);
  return v41;
}

void audioStream_statsTimerFired()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  double v2;
  unint64_t v3;
  int v4;
  double v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamAudio <= 20
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v1 = mach_absolute_time();
  UpTicksToSecondsF();
  if (DerivedStorage[50] <= (unint64_t)v2)
  {
    DerivedStorage[49] = v1;
    v3 = DerivedStorage[41];
    if (v3 > DerivedStorage[42] || DerivedStorage[43] > DerivedStorage[44])
    {
      if (gLogCategory_APEndpointStreamAudio <= 50)
      {
        if (gLogCategory_APEndpointStreamAudio != -1 || (v4 = _LogCategory_Initialize(), v3 = DerivedStorage[41], v4))
        {
          LogPrintF();
          v3 = DerivedStorage[41];
        }
      }
      DerivedStorage[42] = v3;
      DerivedStorage[44] = DerivedStorage[43];
    }
  }
  UpTicksToSecondsF();
  if (DerivedStorage[52] <= (unint64_t)v5)
  {
    DerivedStorage[51] = v1;
    v6 = CMBaseObjectGetDerivedStorage();
    cf = 0;
    MEMORY[0x1CAA400CC](*(_QWORD *)(v6 + 152));
    v7 = (_QWORD *)MEMORY[0x1E0C9AE00];
    if (*(_QWORD *)(v6 + 176))
    {
      CMBaseObject = FigTransportStreamGetCMBaseObject();
      v9 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v9)
        v9(CMBaseObject, *MEMORY[0x1E0CF1F88], *v7, &cf);
    }
    MEMORY[0x1CAA400E4](*(_QWORD *)(v6 + 152));
    if (cf)
    {
      if (APTNANDataSessionCreateStatisticsReport()
        || APTNANDataSessionStatisticsReportCopyDictionary())
      {
        APSLogErrorAt();
      }
      if (cf)
        CFRelease(cf);
    }
  }
}

uint64_t audioStream_setupEventRecorder(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    CFDictionaryGetValue(a2, CFSTR("EventRecorder"));
  v4 = *(const void **)(DerivedStorage + 144);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 144) = 0;
  }
  v5 = APSEventRecorderCreate();
  if ((_DWORD)v5)
    APSLogErrorAt();
  return v5;
}

void audioStream_startSilentAudio(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  _QWORD block[6];
  char label[64];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  SNPrintF();
  v3 = dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 488) = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __audioStream_startSilentAudio_block_invoke;
  block[3] = &__block_descriptor_tmp_125;
  block[4] = DerivedStorage;
  block[5] = a1;
  dispatch_async(v3, block);
}

uint64_t audioStream_Finalize_0(uint64_t a1)
{
  _QWORD *DerivedStorage;
  NSObject *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  void *v16;
  const void *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  const void *v21;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v3 = DerivedStorage[1];
  if (v3)
  {
    dispatch_release(v3);
    DerivedStorage[1] = 0;
  }
  audioStream_dissociateInternal_0(a1);
  v4 = (const void *)DerivedStorage[18];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[18] = 0;
  }
  v5 = (const void *)DerivedStorage[63];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[63] = 0;
  }
  v6 = (const void *)DerivedStorage[58];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)DerivedStorage[7];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[7] = 0;
  }
  v8 = (const void *)DerivedStorage[9];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[9] = 0;
  }
  v9 = (const void *)DerivedStorage[10];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[10] = 0;
  }
  v10 = (const void *)DerivedStorage[3];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[3] = 0;
  }
  v11 = (const void *)DerivedStorage[4];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[4] = 0;
  }
  v12 = (const void *)DerivedStorage[5];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[5] = 0;
  }
  v13 = (const void *)DerivedStorage[6];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[6] = 0;
  }
  v14 = (const void *)DerivedStorage[16];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[16] = 0;
  }
  v15 = (const void *)DerivedStorage[8];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[8] = 0;
  }
  v16 = (void *)DerivedStorage[2];
  if (v16)
  {
    os_release(v16);
    DerivedStorage[2] = 0;
  }
  v17 = (const void *)DerivedStorage[33];
  if (v17)
    CFRelease(v17);
  v18 = DerivedStorage[37];
  if (v18)
  {
    dispatch_release(v18);
    DerivedStorage[37] = 0;
  }
  v19 = DerivedStorage[39];
  if (v19)
  {
    dispatch_release(v19);
    DerivedStorage[39] = 0;
  }
  v20 = DerivedStorage[61];
  if (v20)
  {
    dispatch_release(v20);
    DerivedStorage[61] = 0;
  }
  v21 = (const void *)DerivedStorage[25];
  if (v21)
  {
    CFRelease(v21);
    DerivedStorage[25] = 0;
  }
  return FigSimpleMutexDestroy();
}

__CFString *audioStream_CopyDebugDescription_0(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APEndpointStreamAudio %p '%@'>"), a1, *(_QWORD *)(DerivedStorage + 24));
  return Mutable;
}

uint64_t audioStream_CopyProperty_0(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const void **v9;
  int v10;
  const void *v11;
  uint64_t v12;
  uint64_t Int64;
  CFNumberRef v15;
  uint64_t v16;
  const __CFAllocator *v17;
  CFDictionaryRef v18;
  CFDictionaryRef v19;
  CFArrayRef v20;
  CFNumberRef v21;
  const void **v22;
  uint64_t v23;
  void *v24;
  const void *Empty;
  void *v26;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamAudio <= 30
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage && !FigCFEqual() && !FigCFEqual())
  {
    APSLogErrorAt();
    return 4294950534;
  }
  if (!a2 || !a4)
  {
    APSLogErrorAt();
    return 4294950536;
  }
  if (CFEqual(a2, CFSTR("IsTimelineEstablished")) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CF7380]))
  {
    v9 = (const void **)MEMORY[0x1E0C9AE50];
    v10 = *(unsigned __int8 *)(DerivedStorage + 192);
    goto LABEL_13;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4820]))
  {
    v12 = 0;
    *a4 = *(_QWORD *)(DerivedStorage + 40);
    return v12;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA47C8]))
  {
    v9 = (const void **)MEMORY[0x1E0CA4850];
LABEL_15:
    v11 = *v9;
LABEL_16:
    v11 = CFRetain(v11);
LABEL_17:
    v12 = 0;
    *a4 = v11;
    return v12;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4790]) || CFEqual(a2, CFSTR("IsPlaying")))
  {
    v9 = (const void **)MEMORY[0x1E0C9AE50];
    v10 = *(unsigned __int8 *)(DerivedStorage + 193);
    goto LABEL_13;
  }
  if (CFEqual(a2, CFSTR("IsLocalStream")) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4778]))
  {
LABEL_28:
    v9 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_15;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA47E0]))
  {
    if (CFEqual(a2, CFSTR("EndpointStreamShowInfo")))
    {
      v11 = audioStream_copyShowInfo_0();
      goto LABEL_17;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4788]))
    {
      v11 = *(const void **)(DerivedStorage + 32);
      goto LABEL_16;
    }
    if (CFEqual(a2, CFSTR("StreamID")))
    {
      Int64 = CFNumberCreateInt64();
      *a4 = Int64;
      if (!Int64)
        goto LABEL_67;
      return 0;
    }
    if (CFEqual(a2, CFSTR("SupportedAPAudioFormats")))
    {
      v15 = CFNumberCreate(a3, kCFNumberSInt64Type, (const void *)(DerivedStorage + 112));
      *a4 = v15;
      if (v15)
        return 0;
    }
    else
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CF7398]))
      {
        v9 = (const void **)MEMORY[0x1E0C9AE50];
        v10 = *(unsigned __int8 *)(DerivedStorage + 138);
LABEL_13:
        if (!v10)
          v9 = (const void **)MEMORY[0x1E0C9AE40];
        goto LABEL_15;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CF7338]))
      {
        v16 = CFNumberCreateInt64();
        *a4 = v16;
        if (!v16)
          goto LABEL_67;
        return 0;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CF7390]))
      {
        v11 = *(const void **)(DerivedStorage + 24);
        if (!v11)
          goto LABEL_17;
        goto LABEL_16;
      }
      if (CFEqual(a2, CFSTR("RTCStats")))
      {
        v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        values = CFSTR("AudioRealTime");
        keys[0] = CFSTR("sessionType");
        v18 = CFDictionaryCreate(v17, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v18
          && (v19 = v18,
              v26 = v18,
              v20 = CFArrayCreate(v17, (const void **)&v26, 1, MEMORY[0x1E0C9B378]),
              CFRelease(v19),
              v20))
        {
          v12 = 0;
          *a4 = v20;
        }
        else
        {
          APSLogErrorAt();
          return 4294950526;
        }
        return v12;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4748]))
      {
        v12 = APAudioEngineVendorVend(*(_QWORD **)(DerivedStorage + 64), (uint64_t)a4);
        if ((_DWORD)v12)
          APSLogErrorAt();
        return v12;
      }
      if (CFEqual(a2, CFSTR("HoseRegistrar")))
      {
        v11 = *(const void **)(DerivedStorage + 216);
        if (!v11)
          goto LABEL_17;
        goto LABEL_16;
      }
      if (CFEqual(a2, CFSTR("Cryptor")))
      {
        v11 = *(const void **)(DerivedStorage + 232);
        if (!v11)
          goto LABEL_17;
        goto LABEL_16;
      }
      if (CFEqual(a2, CFSTR("DynamicLatencyOffsetM")))
      {
        if (!*(_BYTE *)(DerivedStorage + 193))
        {
          APSLogErrorAt();
          return 4294950533;
        }
        v21 = CFNumberCreate(a3, kCFNumberSInt32Type, (const void *)(DerivedStorage + 256));
        *a4 = v21;
        if (!v21)
          goto LABEL_67;
        return 0;
      }
      if (!CFEqual(a2, CFSTR("EndpointIDs")))
      {
        if (!CFEqual(a2, CFSTR("IsSidePlayStream")))
        {
          if (gLogCategory_APEndpointStreamAudio <= 30
            && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          return 4294954512;
        }
        goto LABEL_28;
      }
      v23 = *(_QWORD *)(DerivedStorage + 48);
      v22 = (const void **)(DerivedStorage + 48);
      if (v23)
      {
        v24 = CFArrayCreate(a3, v22, 1, MEMORY[0x1E0C9B378]);
      }
      else
      {
        Empty = (const void *)APSCFArrayGetEmpty();
        v24 = (void *)CFRetain(Empty);
      }
      *a4 = v24;
      if (v24)
        return 0;
    }
LABEL_67:
    APSLogErrorAt();
    return 4294950535;
  }
  return audioStream_createSupportedPCMFormatArray_0(a1, (uint64_t)a3, a4);
}

uint64_t audioStream_SetProperty_0(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v7;
  int Value;
  uint64_t v9;
  CFTypeID v11;
  CFTypeID v12;
  CFTypeID v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamAudio <= 30
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294950534;
  }
  if (!a2)
    goto LABEL_41;
  if (CFEqual(a2, CFSTR("IsTimelineEstablished")) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CF7380]))
  {
    if (a3)
    {
      v7 = CFGetTypeID(a3);
      if (v7 == CFBooleanGetTypeID())
      {
        MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 152));
        if (*(_BYTE *)(DerivedStorage + 193))
        {
          Value = CFBooleanGetValue((CFBooleanRef)a3);
          if (*(unsigned __int8 *)(DerivedStorage + 192) != Value)
          {
            *(_BYTE *)(DerivedStorage + 192) = Value;
            if (Value)
            {
              CMNotificationCenterGetDefaultLocalCenter();
              FigDispatchAsyncPostNotification();
            }
          }
          v9 = 0;
        }
        else
        {
          v9 = APSSignalErrorAt();
        }
        MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 152));
        return v9;
      }
    }
LABEL_41:
    APSLogErrorAt();
    return 4294950536;
  }
  if (FigCFEqual())
  {
    if (!a3)
      goto LABEL_41;
    v11 = CFGetTypeID(a3);
    if (v11 != CFStringGetTypeID())
      goto LABEL_41;
    CMBaseObjectGetDerivedStorage();
    if (a1)
      CFRetain(a1);
    CFRetain(a3);
    APSDispatchAsyncFHelper();
    return 0;
  }
  if (FigCFEqual() || FigCFEqual())
    return 0;
  if (FigCFEqual())
  {
    if (!a3)
      goto LABEL_41;
    v12 = CFGetTypeID(a3);
    if (v12 != CFBooleanGetTypeID())
      goto LABEL_41;
    CFBooleanGetValue((CFBooleanRef)a3);
    audioStream_setEchoCancellationIsEnabled_0(a1);
    return 0;
  }
  if (FigCFEqual())
  {
    if (!a3)
      goto LABEL_41;
    v13 = CFGetTypeID(a3);
    if (v13 != CFBooleanGetTypeID())
      goto LABEL_41;
    audioStream_setHTFTIsActive(a1, a3);
    return 0;
  }
  if (gLogCategory_APEndpointStreamAudio <= 30
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return 4294954512;
}

_BYTE *audioStream_dissociateInternal_0(uint64_t a1)
{
  _BYTE *result;
  _BYTE *v3;
  uint64_t DerivedStorage;
  NSObject *v5;
  NSObject *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  _QWORD block[6];

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    v3 = result;
    if (gLogCategory_APEndpointStreamAudio <= 30
      && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    audioStream_invalidateTransportMDCStream_0();
    APSDispatchSyncTask();
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v5 = *(NSObject **)(DerivedStorage + 488);
    if (v5)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __audioStream_stopSilentAudio_block_invoke;
      block[3] = &__block_descriptor_tmp_32;
      block[4] = DerivedStorage;
      block[5] = a1;
      dispatch_sync(v5, block);
    }
    v6 = *((_QWORD *)v3 + 40);
    if (v6)
    {
      dispatch_source_cancel(*((dispatch_source_t *)v3 + 40));
      dispatch_release(v6);
      *((_QWORD *)v3 + 40) = 0;
    }
    audioStream_invalidateTransportStreams();
    MEMORY[0x1CAA400CC](*((_QWORD *)v3 + 19));
    v7 = (const void *)*((_QWORD *)v3 + 21);
    if (v7)
    {
      CFRelease(v7);
      *((_QWORD *)v3 + 21) = 0;
    }
    v8 = (const void *)*((_QWORD *)v3 + 22);
    if (v8)
    {
      CFRelease(v8);
      *((_QWORD *)v3 + 22) = 0;
    }
    v9 = (const void *)*((_QWORD *)v3 + 23);
    if (v9)
    {
      CFRelease(v9);
      *((_QWORD *)v3 + 23) = 0;
    }
    result = (_BYTE *)MEMORY[0x1CAA400E4](*((_QWORD *)v3 + 19));
    if (*((_QWORD *)v3 + 1))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      return (_BYTE *)FigDispatchAsyncPostNotification();
    }
  }
  return result;
}

void audioStream_invalidateTransportMDCStream_0()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFTypeRef v2;
  uint64_t CMBaseObject;
  uint64_t v4;
  void (*v5)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 152));
  v1 = *(const void **)(DerivedStorage + 184);
  if (!v1)
    JUMPOUT(0x1CAA400E4);
  v2 = CFRetain(v1);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 152));
  if (v2)
  {
    CMBaseObject = FigTransportStreamGetCMBaseObject();
    if (CMBaseObject)
    {
      v4 = CMBaseObject;
      v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v5)
        v5(v4);
    }
    CFRelease(v2);
  }
}

uint64_t audioStream_suspendAndDissociateInternal_0(uint64_t a1)
{
  _BYTE *DerivedStorage;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  audioStream_suspendInternal_0(a1);
  *DerivedStorage = 1;
  return 0;
}

void audioStream_invalidateTransportStreams()
{
  _QWORD *DerivedStorage;
  const void *v1;
  CFTypeRef v2;
  const void *v3;
  CFTypeRef v4;
  uint64_t CMBaseObject;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](DerivedStorage[19]);
  v1 = (const void *)DerivedStorage[21];
  if (v1)
    v2 = CFRetain(v1);
  else
    v2 = 0;
  v3 = (const void *)DerivedStorage[22];
  if (v3)
    v4 = CFRetain(v3);
  else
    v4 = 0;
  MEMORY[0x1CAA400E4](DerivedStorage[19]);
  if (v2)
  {
    CMBaseObject = FigTransportStreamGetCMBaseObject();
    if (CMBaseObject)
    {
      v6 = CMBaseObject;
      v7 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v7)
        v7(v6);
    }
  }
  if (v4)
  {
    v8 = FigTransportStreamGetCMBaseObject();
    if (v8)
    {
      v9 = v8;
      v10 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v10)
        v10(v9);
    }
  }
  if (v2)
    CFRelease(v2);
  if (v4)
    CFRelease(v4);
}

uint64_t audioStream_suspendInternal_0(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  CFAllocatorRef *v6;
  uint64_t CMBaseObject;
  void (*v8)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *);
  __CFDictionary *Mutable;
  const void *v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, __CFDictionary *);
  uint64_t v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  CFTypeRef cf;
  _QWORD context[2];
  _DWORD v23[2];
  uint64_t v24;
  CFTypeRef v25;

  v23[0] = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = a1;
  context[1] = v23;
  cf = 0;
  CFDictionaryGetInt64();
  CFDictionaryGetInt64();
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_65;
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*(_BYTE *)(DerivedStorage + 193))
  {
LABEL_65:
    Mutable = 0;
  }
  else
  {
    v3 = CMBaseObjectGetDerivedStorage();
    v25 = 0;
    v24 = 0;
    v23[1] = 0;
    if (!*(_BYTE *)v3)
    {
      v4 = v3;
      if (*(_BYTE *)(v3 + 193))
      {
        if (*(_QWORD *)(v3 + 504))
        {
          if (APSThreadSafeDictionaryCopyValueIfPresent()
            && APSThreadSafeDictionaryGetInt64IfPresent())
          {
            APSThreadSafeDictionaryGetInt32IfPresent();
            mach_absolute_time();
            UpTicksToSeconds();
            APSThreadSafeDictionarySetInt32();
            APSThreadSafeDictionaryRemoveValue();
          }
          v5 = *(const void **)(v4 + 504);
          if (v5)
          {
            CFRelease(v5);
            *(_QWORD *)(v4 + 504) = 0;
          }
        }
      }
    }
    if (v25)
      CFRelease(v25);
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 312), context, (dispatch_function_t)audioStream_stopTimer);
    if (v23[0])
    {
      if (gLogCategory_APEndpointStreamAudio <= 50
        && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v23[0] = 0;
    }
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 152));
    v6 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (*(_QWORD *)(DerivedStorage + 176))
    {
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      CMBaseObject = FigTransportStreamGetCMBaseObject();
      v8 = *(void (**)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
      if (v8)
        v8(CMBaseObject, *MEMORY[0x1E0CF1FB0], *v6, &cf);
      CFGetInt64();
    }
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 152));
    audioStream_invalidateTransportMDCStream_0();
    audioStream_invalidateTransportStreams();
    APSIOReporterGetCoreCaptureCount();
    v23[0] = 0;
    if (gLogCategory_APEndpointStreamAudio <= 50
      && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    Mutable = CFDictionaryCreateMutable(*v6, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      v10 = *(const void **)(DerivedStorage + 464);
      if (v10)
        CFDictionarySetValue(Mutable, CFSTR("senderNANWifiStats"), v10);
      if (gLogCategory_APEndpointStreamAudio <= 50
        && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v11 = *(_QWORD *)(DerivedStorage + 56);
      v12 = *(void (**)(uint64_t, uint64_t, __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v12)
        v12(v11, 96, Mutable);
      v13 = CMBaseObjectGetDerivedStorage();
      dispatch_source_set_timer(*(dispatch_source_t *)(v13 + 320), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
      if (*(_BYTE *)(v13 + 193)
        && gLogCategory_APEndpointStreamAudio <= 50
        && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v14 = *(const void **)(v13 + 448);
      if (v14)
      {
        CFRelease(v14);
        *(_QWORD *)(v13 + 448) = 0;
      }
      v15 = *(const void **)(v13 + 456);
      if (v15)
      {
        CFRelease(v15);
        *(_QWORD *)(v13 + 456) = 0;
      }
      MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 152));
      *(_QWORD *)(DerivedStorage + 160) = 0;
      v16 = *(const void **)(DerivedStorage + 168);
      if (v16)
      {
        CFRelease(v16);
        *(_QWORD *)(DerivedStorage + 168) = 0;
      }
      v17 = *(const void **)(DerivedStorage + 176);
      if (v17)
      {
        CFRelease(v17);
        *(_QWORD *)(DerivedStorage + 176) = 0;
      }
      v18 = *(const void **)(DerivedStorage + 184);
      if (v18)
      {
        CFRelease(v18);
        *(_QWORD *)(DerivedStorage + 184) = 0;
      }
      v19 = *(const void **)(DerivedStorage + 232);
      if (v19)
      {
        CFRelease(v19);
        *(_QWORD *)(DerivedStorage + 232) = 0;
      }
      *(_BYTE *)(DerivedStorage + 192) = 0;
      *(_QWORD *)(DerivedStorage + 240) = 0;
      audioStream_updateIsResumedAndPostNotification(a1, 0);
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 152));
    }
    else
    {
      APSLogErrorAt();
      v23[0] = -16761;
    }
  }
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  return v23[0];
}

void audioStream_stopTimer(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *DerivedStorage;
  const void *v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(const void *, uint64_t, _QWORD);
  int v8;
  int *v9;

  v2 = *a1;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](DerivedStorage[19]);
  v4 = (const void *)DerivedStorage[27];
  DerivedStorage[27] = 0;
  DerivedStorage[28] = 0;
  MEMORY[0x1CAA400E4](DerivedStorage[19]);
  APSEndpointStreamAudioHoseRegistrarProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable && (v6 = *(_QWORD *)(ProtocolVTable + 16)) != 0)
  {
    v7 = *(uint64_t (**)(const void *, uint64_t, _QWORD))(v6 + 16);
    if (v7)
    {
      v8 = v7(v4, v2, 0);
      if (!v8)
        goto LABEL_9;
    }
    else
    {
      v8 = -12782;
    }
  }
  else
  {
    v8 = -12788;
  }
  APSLogErrorAt();
LABEL_9:
  v9 = (int *)a1[1];
  if (v9)
    *v9 = v8;
  if (v4)
    CFRelease(v4);
}

void audioStream_updateIsResumedAndPostNotification(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  const void **v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 193) != a2)
  {
    v5 = DerivedStorage;
    APEndpointStreamUpdateNowPlayingTransaction(a1, a2, &gLogCategory_APEndpointStreamAudio, (const void **)(DerivedStorage + 200));
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v7 = Mutable;
    v8 = (const void **)MEMORY[0x1E0C9AE40];
    if (a2)
      v8 = (const void **)MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, CFSTR("IsPlaying"), *v8);
    *(_BYTE *)(v5 + 193) = a2;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v7);
  }
}

uint64_t __audioStream_stopSilentAudio_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 496);
  if (result)
  {
    result = AudioQueueDispose((AudioQueueRef)result, 1u);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 496) = 0;
    if (gLogCategory_APEndpointStreamAudio <= 50)
    {
      if (gLogCategory_APEndpointStreamAudio != -1)
        return LogPrintF();
      result = _LogCategory_Initialize();
      if ((_DWORD)result)
        return LogPrintF();
    }
  }
  return result;
}

uint64_t audioStream_createSupportedPCMFormatArray_0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;
  unsigned int DescriptionArray;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 80));
  v6 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v6)
  {
    DescriptionArray = -12782;
    goto LABEL_7;
  }
  DescriptionArray = v6(CMBaseObject, CFSTR("SupportedAudioFormats"), *MEMORY[0x1E0C9AE00], &cf);
  if (DescriptionArray)
  {
LABEL_7:
    APSLogErrorAt();
    goto LABEL_14;
  }
  if (CFEqual(*(CFTypeRef *)(DerivedStorage + 40), (CFTypeRef)*MEMORY[0x1E0CA4880]))
  {
    CFDictionaryGetInt64();
    if (DescriptionArray)
      goto LABEL_7;
  }
  else
  {
    if (!CFEqual(*(CFTypeRef *)(DerivedStorage + 40), (CFTypeRef)*MEMORY[0x1E0CA4890]))
    {
      DescriptionArray = APSSignalErrorAt();
      goto LABEL_14;
    }
    CFDictionaryGetInt64();
    if (DescriptionArray)
      goto LABEL_7;
  }
  DescriptionArray = APAudioFormatCreateDescriptionArray();
  if (DescriptionArray)
    goto LABEL_7;
  if (a3)
    *a3 = 0;
LABEL_14:
  if (cf)
    CFRelease(cf);
  return DescriptionArray;
}

__CFDictionary *audioStream_copyShowInfo_0()
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  __CFDictionary *v2;
  const void **v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v2 = Mutable;
  v3 = (const void **)MEMORY[0x1E0C9AE50];
  if (!*(_BYTE *)(DerivedStorage + 193))
    v3 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(Mutable, CFSTR("Resumed"), *v3);
  CFDictionarySetValue(v2, CFSTR("Type"), *(const void **)(DerivedStorage + 40));
  CFDictionarySetValue(v2, CFSTR("Name"), *(const void **)(DerivedStorage + 24));
  return v2;
}

uint64_t audioStream_setEchoCancellationIsEnabled_0(const void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 152));
  if (a1)
    CFRetain(a1);
  APSDispatchAsyncFHelper();
  return MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 152));
}

uint64_t audioStream_setHTFTIsActive(const void *a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  return APSDispatchAsyncFHelper();
}

void audioStream_setAudioModeInternal_0(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFString *AudioModeForEndpointStream;
  const void *v4;
  const void *v5;
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  const void *v8;
  CFTypeRef v9;
  const void *v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, __CFDictionary *);
  const void *v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  AudioModeForEndpointStream = APSenderSessionUtilityGetAudioModeForEndpointStream();
  v4 = *(const void **)(DerivedStorage + 128);
  v5 = *(const void **)(a1 + 8);
  *(_QWORD *)(DerivedStorage + 128) = v5;
  if (v5)
    CFRetain(v5);
  if (v4)
    CFRelease(v4);
  if (*(_BYTE *)(DerivedStorage + 193))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v7 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("audioMode"), AudioModeForEndpointStream);
      if (*(_BYTE *)(DerivedStorage + 137))
      {
        v8 = *(const void **)(DerivedStorage + 184);
        if (v8)
        {
          v9 = CFRetain(v8);
          if (v9)
          {
            v10 = v9;
            if (APTransportStreamSendPlistMessageCreatingPlistReply())
              APSLogErrorAt();
            CFRelease(v10);
            goto LABEL_16;
          }
        }
      }
      else
      {
        v11 = *(_QWORD *)(DerivedStorage + 56);
        v12 = *(unsigned int (**)(uint64_t, __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
        if (v12 && !v12(v11, v7))
          goto LABEL_16;
      }
      APSLogErrorAt();
LABEL_16:
      CFRelease(v7);
      goto LABEL_17;
    }
    APSLogErrorAt();
  }
LABEL_17:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v13 = *(const void **)(a1 + 8);
  if (v13)
    CFRelease(v13);
}

void audioStream_setEchoCancellationIsEnabledInternal_0(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  __CFDictionary *v4;
  const void **v5;
  const void *v6;
  CFTypeRef v7;
  const void *v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, __CFDictionary *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    v8 = 0;
    v4 = 0;
    goto LABEL_18;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = Mutable;
  if (!Mutable)
    goto LABEL_16;
  v5 = (const void **)MEMORY[0x1E0C9AE50];
  if (!*(_BYTE *)(a1 + 8))
    v5 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(Mutable, CFSTR("MuteForStream"), *v5);
  if (!*(_BYTE *)(DerivedStorage + 137))
  {
    v9 = *(_QWORD *)(DerivedStorage + 56);
    v10 = *(unsigned int (**)(uint64_t, __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
    if (v10 && !v10(v9, v4))
      goto LABEL_17;
    goto LABEL_16;
  }
  v6 = *(const void **)(DerivedStorage + 184);
  if (!v6 || (v7 = CFRetain(v6)) == 0)
  {
LABEL_16:
    APSLogErrorAt();
LABEL_17:
    v8 = 0;
    goto LABEL_18;
  }
  v8 = v7;
  if (APTransportStreamSendPlistMessageCreatingPlistReply())
    APSLogErrorAt();
LABEL_18:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  if (v4)
    CFRelease(v4);
  if (v8)
    CFRelease(v8);
}

void audioStream_setHTFTIsActiveInternal(uint64_t a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v3;
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  const void **v6;
  const void *v7;
  CFTypeRef v8;
  const void *v9;
  const void *v10;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    APSLogErrorAt();
LABEL_16:
    v9 = 0;
    v5 = 0;
    goto LABEL_17;
  }
  v3 = DerivedStorage;
  DerivedStorage[304] = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 8));
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!v3[137])
    goto LABEL_16;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = Mutable;
  if (!Mutable)
    goto LABEL_14;
  v6 = (const void **)MEMORY[0x1E0C9AE50];
  if (!*(_QWORD *)(a1 + 8))
    v6 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(Mutable, CFSTR("value"), *v6);
  v7 = (const void *)*((_QWORD *)v3 + 23);
  if (v7 && (v8 = CFRetain(v7)) != 0)
  {
    v9 = v8;
    if (APTransportStreamSendPlistMessageCreatingPlistReply())
      APSLogErrorAt();
  }
  else
  {
LABEL_14:
    APSLogErrorAt();
    v9 = 0;
  }
LABEL_17:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v10 = *(const void **)(a1 + 8);
  if (v10)
    CFRelease(v10);
  if (v9)
    CFRelease(v9);
  if (v5)
    CFRelease(v5);
}

__CFString *audioStream_audioHoseProtocolCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("APEndpointStreamAudio <APSEndpointStreamAudioHoseProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t audioStream_audioHoseSendAudio(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  const void *v7;
  CFTypeRef v8;
  uint64_t (*v9)(CFTypeRef, uint64_t, uint64_t);
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = DerivedStorage;
  if ((_DWORD)a2 == 1734700576 || (_DWORD)a2 == 1735550308 && *(_BYTE *)(DerivedStorage + 138))
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 152));
    v7 = *(const void **)(v6 + 176);
    if (v7)
    {
      v8 = CFRetain(v7);
      MEMORY[0x1CAA400E4](*(_QWORD *)(v6 + 152));
      if (v8)
      {
        v9 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (v9)
        {
          v10 = v9(v8, a2, a3);
          if (!(_DWORD)v10)
          {
LABEL_14:
            CFRelease(v8);
            return v10;
          }
        }
        else
        {
          v10 = 4294954514;
        }
        APSLogErrorAt();
        goto LABEL_14;
      }
    }
    else
    {
      MEMORY[0x1CAA400E4](*(_QWORD *)(v6 + 152));
    }
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960561;
  }
}

uint64_t audioStream_audioHoseTimeAnnounce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  const void *v6;
  CFTypeRef v7;
  uint64_t (*v8)(CFTypeRef, uint64_t, uint64_t);
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 152));
  v6 = *(const void **)(DerivedStorage + 168);
  if (v6)
  {
    v7 = CFRetain(v6);
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 152));
    if (v7)
    {
      v8 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v8)
      {
        v9 = v8(v7, a2, a3);
        if (!(_DWORD)v9)
        {
LABEL_10:
          CFRelease(v7);
          return v9;
        }
      }
      else
      {
        v9 = 4294954514;
      }
      APSLogErrorAt();
      goto LABEL_10;
    }
  }
  else
  {
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 152));
  }
  return 0;
}

uint64_t audioStream_audioHoseFlush_0(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t audioStream_audioHoseSendAudioBatch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  const void *v7;
  CFTypeRef v8;
  uint64_t (*v9)(CFTypeRef, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = DerivedStorage;
  if ((_DWORD)a2 != 1734700576 && ((_DWORD)a2 != 1735550308 || !*(_BYTE *)(DerivedStorage + 138)))
  {
    APSLogErrorAt();
    return 4294960561;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 152));
  v7 = *(const void **)(v6 + 176);
  if (!v7)
  {
    MEMORY[0x1CAA400E4](*(_QWORD *)(v6 + 152));
    return 0;
  }
  v8 = CFRetain(v7);
  MEMORY[0x1CAA400E4](*(_QWORD *)(v6 + 152));
  if (!v8)
    return 0;
  v9 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
  if (v9)
    v10 = v9(v8, a2, a3);
  else
    v10 = FigTransportStreamSendBatchSlow();
  v11 = v10;
  if ((_DWORD)v10)
    APSLogErrorAt();
  CFRelease(v8);
  return v11;
}

void audioStream_audioHoseFlushInternal_0(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  const __CFAllocator *v5;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v8;
  __CFDictionary *Mutable;
  uint64_t v10;
  uint64_t v11;
  CFStringRef v12;
  CFDataRef Data;
  uint64_t v14;
  uint64_t BlockBufferWithCFDataNoCopy;
  CFTypeRef v16;
  uint64_t (*v17)(CFTypeRef, uint64_t, CFTypeRef, _QWORD);
  void (*v18)(CFTypeRef, uint64_t, _OWORD *, uint64_t, uint64_t);
  CFTypeRef v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  CFTypeRef v23;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v23 = 0;
  cf = 0;
  if (*(_DWORD *)(a1 + 12) != 1)
  {
    APSLogErrorAt();
    Mutable = 0;
    v12 = 0;
    Data = 0;
    v14 = 4294960561;
    goto LABEL_32;
  }
  v3 = DerivedStorage;
  if (gLogCategory_APEndpointStreamAudio <= 40
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(v3 + 137))
  {
    v4 = *(const void **)(v3 + 184);
    if (v4)
    {
      cf = CFRetain(v4);
      if (cf)
      {
        v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        goto LABEL_12;
      }
    }
    else
    {
      cf = 0;
    }
    APSLogErrorAt();
    Mutable = 0;
    v12 = 0;
    Data = 0;
    v14 = 4294960578;
    goto LABEL_32;
  }
  CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(v3 + 56));
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v7)
  {
    v14 = 4294954514;
LABEL_29:
    APSLogErrorAt();
    Mutable = 0;
LABEL_30:
    v12 = 0;
    goto LABEL_31;
  }
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = v7(CMBaseObject, CFSTR("TransportControlStream"), *MEMORY[0x1E0C9AE00], &cf);
  if ((_DWORD)v8)
  {
    v14 = v8;
    goto LABEL_29;
  }
LABEL_12:
  Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v14 = 4294894966;
LABEL_51:
    APSLogErrorAt();
    goto LABEL_30;
  }
  if (!*(_BYTE *)(v3 + 137))
  {
    v12 = CFStringCreateWithFormat(v5, 0, CFSTR("seq=%u;rtptime=%u"),
            *(unsigned int *)(a1 + 8),
            *(unsigned int *)(a1 + 16));
    if (v12)
    {
      CFDictionarySetValue(Mutable, CFSTR("RTP-Info"), v12);
      goto LABEL_21;
    }
    v14 = 4294894966;
    APSLogErrorAt();
LABEL_31:
    Data = 0;
    goto LABEL_32;
  }
  v10 = CFDictionarySetInt64();
  if ((_DWORD)v10)
  {
    v14 = v10;
    goto LABEL_51;
  }
  v11 = CFDictionarySetInt64();
  if ((_DWORD)v11)
  {
    v14 = v11;
    goto LABEL_51;
  }
  v12 = 0;
LABEL_21:
  Data = CFPropertyListCreateData(v5, Mutable, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (Data)
  {
    BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
    if ((_DWORD)BlockBufferWithCFDataNoCopy)
    {
      v14 = BlockBufferWithCFDataNoCopy;
    }
    else
    {
      v16 = cf;
      v17 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 56);
      if (v17)
      {
        v14 = v17(v16, 1718383464, v23, 0);
        if (!(_DWORD)v14)
          goto LABEL_32;
      }
      else
      {
        v14 = 4294954514;
      }
    }
  }
  else
  {
    v14 = 4294894966;
  }
  APSLogErrorAt();
LABEL_32:
  v18 = *(void (**)(CFTypeRef, uint64_t, _OWORD *, uint64_t, uint64_t))(a1 + 40);
  if (v18)
  {
    v19 = *(CFTypeRef *)a1;
    v20 = *(unsigned int *)(a1 + 8);
    v21 = *(_QWORD *)(a1 + 48);
    v22[0] = *(_OWORD *)(a1 + 12);
    *(_OWORD *)((char *)v22 + 12) = *(_OWORD *)(a1 + 24);
    v18(v19, v20, v22, v14, v21);
  }
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (v12)
    CFRelease(v12);
  if (Data)
    CFRelease(Data);
  if (v23)
    CFRelease(v23);
  CFRelease(*(CFTypeRef *)a1);
}

uint64_t audioStream_Suspend_0(const void *a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t audioStream_Resume_0(const void *a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t audioStream_Dissociate_0(uint64_t a1)
{
  if (!*(_BYTE *)CMBaseObjectGetDerivedStorage())
    audioStream_dissociateInternal_0(a1);
  return 0;
}

uint64_t audioStream_Control_0(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t Int64;
  CFTypeRef v8;
  _QWORD *DerivedStorage;
  CFTypeRef v11;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v14;
  uint64_t ProtocolVTable;
  uint64_t v16;
  uint64_t (*v17)(CFTypeRef, const void *);
  int v18;
  CFTypeRef v19;
  CFTypeRef cf;
  CFTypeRef v21;
  int v22;

  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v22 = 0;
      CMBaseObjectGetDerivedStorage();
      v21 = 0;
      if (a1)
        v8 = CFRetain(a1);
      else
        v8 = 0;
      cf = v8;
      CFStringGetTypeID();
      CFDictionaryGetTypedValue();
      if (!FigCFEqual())
        return 0;
      goto LABEL_17;
    }
    if (!FigCFEqual())
    {
      if (!FigCFEqual())
      {
        if (gLogCategory_APEndpointStreamAudio <= 90
          && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        return 4294950536;
      }
      v22 = 0;
      CMBaseObjectGetDerivedStorage();
      if (a1)
        v11 = CFRetain(a1);
      else
        v11 = 0;
      cf = v11;
      if (a3)
        v19 = CFRetain(a3);
      else
        v19 = 0;
      v21 = v19;
      CFStringGetTypeID();
      CFDictionaryGetTypedValue();
      if (FigCFEqual())
        return 0;
      if (gLogCategory_APEndpointStreamAudio <= 50
        && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
LABEL_17:
      APSDispatchAsyncFHelper();
      return 0;
    }
    v22 = 0;
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    cf = 0;
    CFStringGetTypeID();
    CFDictionaryGetTypedValue();
    if (!FigCFEqual())
      goto LABEL_39;
    if (gLogCategory_APEndpointStreamAudio <= 50
      && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!APSSettingsGetIntWithDefault())
    {
LABEL_39:
      if (cf)
        CFRelease(cf);
      return 0;
    }
    MEMORY[0x1CAA400CC](DerivedStorage[19]);
    if (DerivedStorage[22])
    {
      CMBaseObject = FigTransportStreamGetCMBaseObject();
      v13 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v13)
        v13(CMBaseObject, *MEMORY[0x1E0CF1F48], *MEMORY[0x1E0C9AE00], &cf);
    }
    MEMORY[0x1CAA400E4](DerivedStorage[19]);
    v14 = cf;
    if (!cf)
      return 0;
    ++DerivedStorage[36];
    APSIssueReporterProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable && (v16 = *(_QWORD *)(ProtocolVTable + 16)) != 0)
    {
      v17 = *(uint64_t (**)(CFTypeRef, const void *))(v16 + 8);
      if (v17)
      {
        v22 = v17(v14, a3);
        if (!v22)
          goto LABEL_39;
        goto LABEL_38;
      }
      v18 = -12782;
    }
    else
    {
      v18 = -12788;
    }
    v22 = v18;
LABEL_38:
    APSLogErrorAt();
    goto LABEL_39;
  }
  v5 = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    v6 = v5;
    Int64 = CFDictionaryGetInt64();
    MEMORY[0x1CAA400CC](*(_QWORD *)(v6 + 152));
    if (*(_QWORD *)(v6 + 248) != Int64)
    {
      *(_QWORD *)(v6 + 248) = Int64;
      if (*(_BYTE *)(v6 + 193))
        audioStream_updateDynamicLatencyOffsetInternal();
    }
    MEMORY[0x1CAA400E4](*(_QWORD *)(v6 + 152));
    return 0;
  }
  APSLogErrorAt();
  return 4294950536;
}

void audioStream_suspendAsync_0(uint64_t *a1)
{
  const void *v2;

  CMBaseObjectGetDerivedStorage();
  audioStream_suspendInternal_0(*a1);
  if (a1[2])
  {
    CFRetain((CFTypeRef)*a1);
    APSDispatchAsyncFHelper();
  }
  CFRelease((CFTypeRef)*a1);
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
}

void audioStream_completionCallback(CFTypeRef *a1)
{
  ((void (*)(CFTypeRef, _QWORD, CFTypeRef))a1[2])(*a1, *((unsigned int *)a1 + 2), a1[3]);
  CFRelease(*a1);
}

void audioStream_resumeAsync_0(uint64_t a1)
{
  const void *v2;

  CMBaseObjectGetDerivedStorage();
  audioStream_resumeInternal(*(_QWORD *)a1, *(const __CFDictionary **)(a1 + 8));
  if (*(_QWORD *)(a1 + 16))
  {
    CFRetain(*(CFTypeRef *)a1);
    APSDispatchAsyncFHelper();
  }
  CFRelease(*(CFTypeRef *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
}

uint64_t audioStream_resumeInternal(uint64_t a1, const __CFDictionary *a2)
{
  _BYTE *DerivedStorage;
  _BYTE *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  CFMutableDictionaryRef v13;
  const void *v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  const void *v18;
  const void *v19;
  CFTypeID v20;
  uint64_t v21;
  const __CFString *AudioModeForEndpointStream;
  int v23;
  int v24;
  int v25;
  const __CFAllocator *v26;
  __CFDictionary *v27;
  __CFDictionary *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  CFMutableDictionaryRef v32;
  __CFDictionary *v33;
  __CFDictionary *v34;
  __CFDictionary *v35;
  const void *v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char CFPreferenceNumberWithDefault;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, __CFDictionary *, CFTypeRef *, CFTypeRef *, _QWORD);
  const __CFDictionary *TypedValue;
  const void *v45;
  uint64_t (*v46)(uint64_t);
  int v47;
  const __CFAllocator *v48;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v50;
  const void **v51;
  int v52;
  uint64_t (*v53)(uint64_t, uint64_t, __CFDictionary *, __int128 *);
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t (*v58)(uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t);
  int v63;
  const __CFAllocator *v64;
  CFMutableDictionaryRef v65;
  uint64_t (*v66)(uint64_t, uint64_t, CFMutableDictionaryRef, __int128 *);
  int v67;
  int v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  int v71;
  CFStringRef v72;
  uint64_t v73;
  CFTypeRef v74;
  uint64_t (*v75)(uint64_t, CFTypeRef, CFStringRef);
  int v76;
  int v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, void (*)(uint64_t, int), _QWORD, uint64_t);
  int v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t);
  int v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t);
  int v86;
  const void *v87;
  uint64_t CMBaseObject;
  uint64_t v89;
  void (*v90)(uint64_t);
  uint64_t v91;
  uint64_t (*v92)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v93;
  uint64_t (*v94)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  uint64_t v95;
  void (*v96)(uint64_t, _QWORD, const __CFAllocator *, __int128 *);
  unsigned int v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t);
  int v100;
  CFMutableDictionaryRef v101;
  CFMutableDictionaryRef v102;
  int v103;
  uint64_t (*v104)(uint64_t, uint64_t, CFMutableDictionaryRef, __int128 *);
  int v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t (*v110)(uint64_t, _QWORD, _QWORD, uint64_t);
  int v111;
  uint64_t v112;
  uint64_t (*v113)(uint64_t);
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t);
  uint64_t v117;
  uint64_t v118;
  void (*v119)(uint64_t);
  uint64_t v120;
  NSObject *v121;
  dispatch_time_t v122;
  const __CFAllocator *v123;
  CFMutableArrayRef v124;
  CFMutableArrayRef v125;
  uint64_t v126;
  uint64_t ProtocolVTable;
  uint64_t v128;
  uint64_t (*v129)(CFTypeRef, uint64_t, CFMutableDictionaryRef, uint64_t *);
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(uint64_t);
  uint64_t v135;
  uint64_t v136;
  void (*v137)(uint64_t);
  uint64_t v138;
  uint64_t v139;
  void (*v140)(uint64_t);
  int v142;
  CFTypeRef value;
  uint64_t Int64;
  uint64_t v145;
  uint64_t v146;
  const __CFData *theData;
  CFDataRef theDataa;
  const void *v149;
  uint64_t v150;
  CFTypeRef v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  CFTypeRef v155;
  CFTypeRef v156;
  uint64_t v157;
  CFTypeRef v158;
  unsigned int v159;
  CFTypeRef v160;
  CFTypeRef cf;
  CFTypeRef v162;
  CFTypeRef v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  CFTypeRef v167[2];

  v159 = 0;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v157 = 0;
  v158 = 0;
  v155 = 0;
  v156 = 0;
  v153 = 0;
  v154 = 0;
  v152 = 0;
  if (*DerivedStorage || (v5 = DerivedStorage, DerivedStorage[193]))
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
LABEL_293:
    v8 = 0;
    goto LABEL_294;
  }
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a2)
  {
    v8 = 0;
LABEL_11:
    APSLogErrorAt();
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v159 = -16760;
    goto LABEL_294;
  }
  Int64 = CFDictionaryGetInt64();
  theData = (const __CFData *)CFDictionaryGetValue(a2, CFSTR("EncryptionKey"));
  v6 = CFDictionaryGetValue(a2, CFSTR("BBufBackingProvider"));
  v7 = CFDictionaryGetValue(a2, CFSTR("HoseRegistrar"));
  if (v7)
    v151 = CFRetain(v7);
  else
    v151 = 0;
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetInt32IfPresent();
  v14 = CFDictionaryGetValue(a2, CFSTR("InitialTransportAudioFormat"));
  FigCFDictionaryGetFloatIfPresent();
  *((_DWORD *)v5 + 22) = (int)(float)(*((float *)&v153 + 1) * 1000.0);
  FigCFDictionaryGetFloatIfPresent();
  *((_DWORD *)v5 + 23) = (int)(float)(*(float *)&v153 * 1000.0);
  v15 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v163 = 0;
  *(_QWORD *)&v164 = 0;
  v167[0] = 0;
  v162 = 0;
  v160 = 0;
  cf = 0;
  if (!*v15)
  {
    v16 = v15;
    if (!v15[193])
    {
      v17 = FigCFDictionaryGetValue();
      if (v17)
      {
        v18 = (const void *)v17;
        if (APSThreadSafeDictionaryCopyValueIfPresent())
        {
          mach_absolute_time();
          APSThreadSafeDictionarySetInt64();
          v19 = (const void *)*((_QWORD *)v16 + 63);
          *((_QWORD *)v16 + 63) = v18;
          CFRetain(v18);
          if (v19)
            CFRelease(v19);
        }
        else
        {
          APSThreadSafeDictionaryCreate();
          APSLogErrorAt();
        }
      }
    }
  }
  if ((_QWORD)v164)
    CFRelease((CFTypeRef)v164);
  if (v167[0])
    CFRelease(v167[0]);
  if (v163)
    CFRelease(v163);
  if (v162)
    CFRelease(v162);
  if (cf)
    CFRelease(cf);
  if (v160)
    CFRelease(v160);
  if (!v14 || (v20 = CFGetTypeID(v14), v20 != CFDataGetTypeID()))
  {
    v8 = v151;
    goto LABEL_11;
  }
  if (CFDataGetLength((CFDataRef)v14) != 40)
  {
    APSLogErrorAt();
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v142 = -16760;
LABEL_337:
    v159 = v142;
    goto LABEL_341;
  }
  CFDataGetBytePtr((CFDataRef)v14);
  v159 = ASBDToAPAudioFormat();
  if (v159)
  {
    APSLogErrorAt();
    v9 = 0;
    v10 = 0;
LABEL_340:
    v11 = 0;
    v12 = 0;
    v13 = 0;
    goto LABEL_341;
  }
  if ((*((_QWORD *)v5 + 14) & v154) == 0)
  {
    APSLogErrorAt();
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v159 = APSSignalErrorAt();
LABEL_341:
    v8 = v151;
    goto LABEL_294;
  }
  v150 = a1;
  if (v5[139])
  {
    v9 = 0;
    v10 = 0;
    goto LABEL_39;
  }
  v40 = *((_QWORD *)v5 + 7);
  *(_QWORD *)&v164 = 0;
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  if (gLogCategory_APEndpointStreamAudio <= 30
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v46 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v46)
  {
    v56 = -12782;
LABEL_108:
    APSLogErrorAt();
    a1 = v150;
    v8 = v151;
    v10 = 0;
    v159 = v56;
LABEL_109:
    APSLogErrorAt();
    goto LABEL_110;
  }
  v47 = v46(v40);
  if (v47)
  {
    v56 = v47;
    goto LABEL_108;
  }
  v48 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v56 = -71820;
    goto LABEL_108;
  }
  v50 = Mutable;
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  v51 = (const void **)MEMORY[0x1E0C9AE40];
  if (CFPreferenceNumberWithDefault)
    v51 = (const void **)MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(v50, CFSTR("UseLibNetwork"), *v51);
  CFDictionaryAddValue(v50, CFSTR("SendBackingProvider"), v6);
  v52 = FigCFEqual();
  v53 = *(uint64_t (**)(uint64_t, uint64_t, __CFDictionary *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 64);
  if (!v52)
  {
    if (!v53)
    {
      v55 = -12782;
      goto LABEL_174;
    }
    v57 = v53(v40, 1734700576, v50, &v164);
    if (v57)
    {
      v55 = v57;
      goto LABEL_174;
    }
    goto LABEL_113;
  }
  if (!v53)
  {
    v55 = -12782;
    goto LABEL_174;
  }
  v54 = v53(v40, 1819042165, v50, &v164);
  if (!v54)
  {
LABEL_113:
    v55 = 0;
    v10 = (const void *)v164;
    *(_QWORD *)&v164 = 0;
    goto LABEL_175;
  }
  v55 = v54;
LABEL_174:
  APSLogErrorAt();
  v10 = 0;
LABEL_175:
  CFRelease(v50);
  if ((_QWORD)v164)
  {
    CMBaseObject = FigTransportStreamGetCMBaseObject();
    if (CMBaseObject)
    {
      v89 = CMBaseObject;
      v90 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v90)
        v90(v89);
    }
    CFRelease((CFTypeRef)v164);
  }
  v159 = v55;
  if (v55)
  {
    a1 = v150;
    v8 = v151;
    goto LABEL_109;
  }
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!FigCFEqual())
    goto LABEL_216;
  if (!v5[140])
  {
    v91 = APEndpointDescriptionGetCMBaseObject(*((_QWORD *)v5 + 10));
    v92 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v92)
    {
      v159 = v92(v91, CFSTR("ClusterUUID"), v48, &v155);
      if (!v159)
      {
        if (!APSHasSamePersistentGroupUUID())
        {
          APSLogErrorAt();
          if (gLogCategory_APEndpointStreamAudio <= 90
            && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
          {
            a1 = v150;
            LogPrintF();
            v9 = 0;
            goto LABEL_340;
          }
LABEL_199:
          v9 = 0;
          v11 = 0;
          v12 = 0;
          goto LABEL_200;
        }
        goto LABEL_190;
      }
    }
    else
    {
      v159 = -12782;
    }
    APSLogErrorAt();
    a1 = v150;
    v8 = v151;
    if (gLogCategory_APEndpointStreamAudio <= 90
      && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
LABEL_110:
    v9 = 0;
LABEL_226:
    v11 = 0;
    v12 = 0;
    v13 = 0;
    goto LABEL_294;
  }
LABEL_190:
  if (FigGetCFPreferenceNumberWithDefault())
  {
    v93 = FigTransportStreamGetCMBaseObject();
    v94 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
    if (v94)
    {
      v159 = v94(v93, *MEMORY[0x1E0CF1F70], v48, &v158);
      if (!v159)
        goto LABEL_193;
    }
    else
    {
      v159 = -12782;
    }
LABEL_198:
    APSLogErrorAt();
    goto LABEL_199;
  }
LABEL_193:
  *(_QWORD *)&v164 = 0;
  if (!v10)
    goto LABEL_215;
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v95 = FigTransportStreamGetCMBaseObject();
  v96 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v96 && (v96(v95, *MEMORY[0x1E0CF1F88], v48, &v164), (_QWORD)v164))
  {
    v97 = APTNANDataSessionPreWarm();
    if (v97)
      APSLogErrorAt();
    if ((_QWORD)v164)
      CFRelease((CFTypeRef)v164);
    v159 = v97;
    if (v97)
      goto LABEL_198;
  }
  else
  {
LABEL_215:
    v159 = 0;
  }
LABEL_216:
  v98 = *((_QWORD *)v5 + 7);
  *(_QWORD *)&v164 = 0;
  v99 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v99)
  {
    v107 = -12782;
LABEL_224:
    APSLogErrorAt();
    a1 = v150;
    v8 = v151;
    v9 = 0;
    v159 = v107;
LABEL_225:
    APSLogErrorAt();
    goto LABEL_226;
  }
  v100 = v99(v98);
  if (v100)
  {
    v107 = v100;
    goto LABEL_224;
  }
  v101 = CFDictionaryCreateMutable(v48, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v101)
  {
    v107 = -71820;
    goto LABEL_224;
  }
  v102 = v101;
  CFDictionarySetInt64();
  v103 = FigCFEqual();
  v104 = *(uint64_t (**)(uint64_t, uint64_t, CFMutableDictionaryRef, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 64);
  if (v103)
  {
    a1 = v150;
    if (!v104)
    {
      v106 = -12782;
      goto LABEL_239;
    }
    v105 = v104(v98, 1819042676, v102, &v164);
    if (v105)
    {
      v106 = v105;
      goto LABEL_239;
    }
  }
  else
  {
    a1 = v150;
    if (!v104)
    {
      v106 = -12782;
      goto LABEL_239;
    }
    v108 = v104(v98, 1735287668, v102, &v164);
    if (v108)
    {
      v106 = v108;
      goto LABEL_239;
    }
  }
  v109 = v164;
  v110 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v110)
  {
    v111 = v110(v109, audioStream_receivedAudioControlMessage, 0, a1);
    if (v111)
    {
      v106 = v111;
    }
    else
    {
      v112 = v164;
      v113 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v113)
      {
        v106 = v113(v112);
        if (!v106)
        {
          v9 = (const void *)v164;
          *(_QWORD *)&v164 = 0;
          goto LABEL_240;
        }
      }
      else
      {
        v106 = -12782;
      }
    }
  }
  else
  {
    v106 = -12782;
  }
LABEL_239:
  APSLogErrorAt();
  v9 = 0;
LABEL_240:
  CFRelease(v102);
  if ((_QWORD)v164)
  {
    v114 = FigTransportStreamGetCMBaseObject();
    if (v114)
    {
      v115 = v114;
      v116 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v116)
        v116(v115);
    }
    CFRelease((CFTypeRef)v164);
  }
  v159 = v106;
  if (v106)
  {
    v8 = v151;
    goto LABEL_225;
  }
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APSGetFBOPropertyInt64();
  if (v159)
    goto LABEL_339;
LABEL_39:
  if (v5[137])
  {
    v159 = RandomBytes();
    if (v159)
    {
LABEL_339:
      APSLogErrorAt();
      goto LABEL_340;
    }
  }
  v149 = v9;
  value = v158;
  LODWORD(cf) = 0;
  v145 = CMBaseObjectGetDerivedStorage();
  v167[0] = 0;
  v21 = CMBaseObjectGetDerivedStorage();
  v166 = 0;
  v164 = 0u;
  v165 = 0u;
  LODWORD(v163) = 0;
  LODWORD(v162) = 0;
  AudioModeForEndpointStream = APSenderSessionUtilityGetAudioModeForEndpointStream();
  v23 = APAudioFormatToCompressionType();
  v146 = (uint64_t)v10;
  if (v23)
  {
    v25 = v23;
LABEL_333:
    APSLogErrorAt();
    goto LABEL_361;
  }
  v24 = APAudioFormatToASBD();
  v25 = v24;
  if (*(_DWORD *)(v21 + 104))
    DWORD1(v165) = *(_DWORD *)(v21 + 104);
  if (v24)
    goto LABEL_333;
  v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v27 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v27)
  {
    v28 = v27;
    v29 = (const void *)*MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(v27, CFSTR("supportsDynamicStreamID"), (const void *)*MEMORY[0x1E0C9AE50]);
    v30 = (const void *)*MEMORY[0x1E0C9AE40];
    if (*(_BYTE *)(v21 + 120))
      v31 = v29;
    else
      v31 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(v28, CFSTR("isMedia"), v31);
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    if (*(int *)(v21 + 100) >= 1)
      CFDictionarySetInt64();
    if (FigCFEqual())
      CFDictionarySetValue(v28, CFSTR("disableRetransmits"), v29);
    if (*(_BYTE *)(v21 + 121))
      CFDictionarySetValue(v28, CFSTR("usingScreen"), v29);
    if (*(_BYTE *)(v21 + 304))
      CFDictionarySetValue(v28, CFSTR("HTFTIsActive"), v29);
    CFDictionarySetInt64();
    if (theData)
    {
      CFDataGetBytePtr(theData);
      CFDataGetLength(theData);
      CFDictionarySetData();
    }
    CFDictionarySetValue(v28, CFSTR("audioMode"), AudioModeForEndpointStream);
    if (!*(_BYTE *)(v21 + 136))
    {
      CFDictionarySetInt64();
      v38 = v145;
LABEL_80:
      LODWORD(cf) = 0;
      v42 = *(_QWORD *)(v38 + 56);
      v43 = *(uint64_t (**)(uint64_t, uint64_t, __CFDictionary *, CFTypeRef *, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      v9 = v149;
      if (v43)
      {
        LODWORD(cf) = v43(v42, 96, v28, v167, &v156, 0);
        if (!(_DWORD)cf)
        {
          theDataa = (CFDataRef)CFDictionaryGetInt64();
          if (*(_BYTE *)(v38 + 136))
          {
            CFDictionaryGetTypeID();
            CFDictionaryGetTypedValue();
            if (!(_DWORD)cf)
            {
              if (*(_BYTE *)(v38 + 139))
              {
                v12 = 0;
                goto LABEL_118;
              }
              CFDictionaryGetTypeID();
              TypedValue = (const __CFDictionary *)CFDictionaryGetTypedValue();
              if (!(_DWORD)cf)
              {
                CFDictionaryGetInt64();
                if ((_DWORD)cf)
                {
                  APSLogErrorAt();
                  v12 = 0;
                  v9 = v149;
                  goto LABEL_123;
                }
                if (CFDictionaryContainsKey(TypedValue, CFSTR("streamConnectionKeyNetworkInfo")))
                {
                  CFDictionaryGetTypeID();
                  v45 = (const void *)CFDictionaryGetTypedValue();
                  if (!v45)
                  {
                    APSLogErrorAt();
                    LODWORD(cf) = -6727;
                    if (gLogCategory_APEndpointStreamAudio <= 90
                      && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
                    {
                      LogPrintF();
                    }
                    v12 = 0;
                    v9 = v149;
                    goto LABEL_123;
                  }
                  v12 = v45;
                  CFRetain(v45);
                }
                else
                {
                  v12 = 0;
                }
                v9 = v149;
                CFDictionaryGetTypeID();
                CFDictionaryGetTypedValue();
                if ((_DWORD)cf)
                  goto LABEL_121;
                CFDictionaryGetInt64();
                if ((_DWORD)cf)
                  goto LABEL_121;
LABEL_118:
                if (*(_BYTE *)(v38 + 137))
                {
                  CFDictionaryGetTypeID();
                  CFDictionaryGetTypedValue();
                  if ((_DWORD)cf || (CFDictionaryGetInt64(), (_DWORD)cf))
                  {
LABEL_121:
                    APSLogErrorAt();
                    goto LABEL_123;
                  }
                }
LABEL_122:
                CFDictionaryGetInt64Ranged();
                goto LABEL_123;
              }
            }
          }
          else
          {
            CFDictionaryGetInt64();
            if (!(_DWORD)cf)
            {
              CFDictionaryGetInt64();
              if (!(_DWORD)cf)
              {
                v12 = 0;
                goto LABEL_122;
              }
            }
          }
          APSLogErrorAt();
LABEL_88:
          v12 = 0;
LABEL_123:
          CFRelease(v28);
          goto LABEL_124;
        }
      }
      else
      {
        LODWORD(cf) = -12782;
      }
      APSLogErrorAt();
      theDataa = 0;
      goto LABEL_88;
    }
    v32 = CFDictionaryCreateMutable(v26, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v32)
    {
      v33 = v32;
      if (!*(_BYTE *)(v21 + 139))
      {
        v34 = CFDictionaryCreateMutable(v26, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v35 = v34;
        if (!v34)
          goto LABEL_355;
        if (Int64 | (unint64_t)theData)
          v36 = v29;
        else
          v36 = v30;
        CFDictionarySetValue(v34, CFSTR("streamConnectionKeyUseStreamEncryptionKey"), v36);
        if (value)
          CFDictionarySetValue(v35, CFSTR("streamConnectionKeyNetworkInfo"), value);
        CFDictionarySetValue(v33, CFSTR("streamConnectionTypeRTP"), v35);
        CFRelease(v35);
        v35 = CFDictionaryCreateMutable(v26, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!v35)
          goto LABEL_355;
        v37 = CFDictionarySetInt64();
        if (v37)
        {
          v25 = v37;
LABEL_358:
          APSLogErrorAt();
LABEL_359:
          CFRelease(v28);
          CFRelease(v33);
          if (v35)
            CFRelease(v35);
          goto LABEL_361;
        }
        CFDictionarySetValue(v33, CFSTR("streamConnectionTypeRTCP"), v35);
        CFRelease(v35);
      }
      v38 = v145;
      if (!*(_BYTE *)(v21 + 137))
      {
LABEL_75:
        CFDictionarySetValue(v28, CFSTR("streamConnections"), v33);
        CFRelease(v33);
        goto LABEL_80;
      }
      v35 = CFDictionaryCreateMutable(v26, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v35)
      {
        v39 = CFDictionarySetInt64();
        if (!v39)
        {
          CFDictionarySetValue(v33, CFSTR("streamConnectionTypeMediaDataControl"), v35);
          CFRelease(v35);
          goto LABEL_75;
        }
        v25 = v39;
        goto LABEL_358;
      }
LABEL_355:
      APSLogErrorAt();
      v25 = -6728;
      goto LABEL_359;
    }
    APSLogErrorAt();
    CFRelease(v28);
  }
  else
  {
    APSLogErrorAt();
  }
  v25 = -6728;
LABEL_361:
  v9 = v149;
  LODWORD(cf) = v25;
  APSLogErrorAt();
  theDataa = 0;
  v12 = 0;
LABEL_124:
  if (v167[0])
    CFRelease(v167[0]);
  v159 = cf;
  if ((_DWORD)cf)
    goto LABEL_348;
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*((_QWORD *)v5 + 19));
  *((_QWORD *)v5 + 30) = MillisecondsToUpTicks();
  if (v156)
    *((_QWORD *)v5 + 29) = CFRetain(v156);
  MEMORY[0x1CAA400E4](*((_QWORD *)v5 + 19));
  if (!v5[139])
  {
    v159 = APSSetFBOPropertyInt64();
    if (!v159)
    {
      v10 = (const void *)v146;
      if (!v12 || (v159 = FigTransportStreamSetProperty(v146, *MEMORY[0x1E0CF1FD0], (uint64_t)v12)) == 0)
      {
        v159 = APSSetFBOPropertyInt64();
        if (!v159)
        {
          if (CFDictionaryGetInt64())
            goto LABEL_141;
          v10 = (const void *)v146;
          v58 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (v58)
          {
            v159 = v58(v146);
            if (!v159)
              goto LABEL_141;
            v10 = (const void *)v146;
          }
          else
          {
            v159 = -12782;
          }
        }
      }
      APSLogErrorAt();
      v11 = 0;
LABEL_200:
      v13 = 0;
      a1 = v150;
      v8 = v151;
      goto LABEL_294;
    }
LABEL_348:
    APSLogErrorAt();
    v11 = 0;
    v13 = 0;
    a1 = v150;
    goto LABEL_349;
  }
LABEL_141:
  if (!v5[137])
  {
    v11 = 0;
    a1 = v150;
LABEL_271:
    v120 = CMBaseObjectGetDerivedStorage();
    if (gLogCategory_APEndpointStreamAudio <= 30
      && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_OWORD *)(v120 + 328) = 0u;
    *(_OWORD *)(v120 + 344) = 0u;
    v121 = *(NSObject **)(v120 + 320);
    v122 = dispatch_time(0, 1000000000);
    dispatch_source_set_timer(v121, v122, 0x12A05F200uLL, 0x3B9ACA00uLL);
    *(_QWORD *)(v120 + 392) = mach_absolute_time();
    *(_QWORD *)(v120 + 400) = 60;
    *(_QWORD *)(v120 + 408) = mach_absolute_time();
    *(_QWORD *)(v120 + 416) = (int)FigGetCFPreferenceNumberWithDefault();
    *(_QWORD *)(v120 + 440) = 0;
    *(_OWORD *)(v120 + 360) = 0u;
    *(_OWORD *)(v120 + 376) = 0u;
    v123 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v124 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 5, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(v120 + 448) = v124;
    v10 = (const void *)v146;
    if (v124 && (v125 = CFArrayCreateMutable(v123, 5, MEMORY[0x1E0C9B378]), (*(_QWORD *)(v120 + 456) = v125) != 0))
    {
      v126 = 5;
      do
      {
        CFArrayAppendInt64();
        CFArrayAppendInt64();
        --v126;
      }
      while (v126);
    }
    else
    {
      APSLogErrorAt();
    }
    v13 = CFDictionaryCreateMutable(v123, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v13)
    {
      FigCFDictionarySetValue();
      APSEndpointStreamAudioHoseRegistrarProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable && (v128 = *(_QWORD *)(ProtocolVTable + 16)) != 0)
      {
        v129 = *(uint64_t (**)(CFTypeRef, uint64_t, CFMutableDictionaryRef, uint64_t *))(v128 + 8);
        if (v129)
        {
          v159 = v129(v151, a1, v13, &v152);
          if (!v159)
          {
            MEMORY[0x1CAA400CC](*((_QWORD *)v5 + 19));
            *((_QWORD *)v5 + 20) = theDataa;
            *((_QWORD *)v5 + 21) = v9;
            *((_QWORD *)v5 + 22) = v146;
            *((_QWORD *)v5 + 23) = v11;
            audioStream_updateIsResumedAndPostNotification(a1, 1);
            audioStream_updateDynamicLatencyOffsetInternal();
            v130 = v152;
            *((_QWORD *)v5 + 27) = v151;
            *((_QWORD *)v5 + 28) = v130;
            ++*((_DWORD *)v5 + 65);
            MEMORY[0x1CAA400E4](*((_QWORD *)v5 + 19));
            *((_QWORD *)v5 + 36) = 0;
            APSIOReporterGetCoreCaptureCount();
            v159 = 0;
            if (gLogCategory_APEndpointStreamAudio <= 50
              && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            CMNotificationCenterGetDefaultLocalCenter();
            FigDispatchAsyncPostNotification();
            v9 = 0;
            v10 = 0;
            v11 = 0;
            goto LABEL_293;
          }
          v8 = v151;
LABEL_289:
          APSLogErrorAt();
          goto LABEL_294;
        }
        v131 = -12782;
      }
      else
      {
        v131 = -12788;
      }
      v159 = v131;
      v8 = v151;
      goto LABEL_289;
    }
    APSLogErrorAt();
    v142 = -16611;
    goto LABEL_337;
  }
  v59 = *((_QWORD *)v5 + 7);
  v60 = v157;
  *(_QWORD *)&v164 = 0;
  v61 = APTransportStreamIDMakeWithPort();
  v167[0] = 0;
  v62 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v62)
  {
    v86 = -12782;
LABEL_163:
    APSLogErrorAt();
    v65 = 0;
LABEL_166:
    v72 = 0;
LABEL_167:
    v9 = v149;
    a1 = v150;
    goto LABEL_255;
  }
  v63 = v62(v59);
  if (v63)
  {
    v86 = v63;
    goto LABEL_163;
  }
  v64 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v65 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v65)
  {
    APSLogErrorAt();
    v72 = 0;
    v86 = -6728;
    goto LABEL_167;
  }
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  v66 = *(uint64_t (**)(uint64_t, uint64_t, CFMutableDictionaryRef, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 64);
  if (!v66)
  {
    v86 = -12782;
LABEL_165:
    APSLogErrorAt();
    goto LABEL_166;
  }
  v67 = v66(v59, v61, v65, &v164);
  if (v67)
  {
    v86 = v67;
    goto LABEL_165;
  }
  v68 = APSSetFBOPropertyInt64();
  if (v68)
  {
    v86 = v68;
    goto LABEL_165;
  }
  v69 = APSenderSessionGetCMBaseObject(v59);
  v70 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
  v9 = v149;
  a1 = v150;
  if (!v70)
  {
    v86 = -12782;
LABEL_169:
    APSLogErrorAt();
    v72 = 0;
    goto LABEL_255;
  }
  v71 = v70(v69, CFSTR("KeyHolder"), v64, v167);
  if (v71)
  {
    v86 = v71;
    goto LABEL_169;
  }
  v72 = APKeyHolderCoreUtilsEncryptionContextDataStreamCreateWithSeed(v64, v60);
  if (!v72)
  {
    APSLogErrorAt();
    v86 = -6728;
LABEL_255:
    if ((_QWORD)v164)
    {
      v117 = FigTransportStreamGetCMBaseObject();
      if (v117)
      {
        v118 = v117;
        v119 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v119)
          v119(v118);
      }
      CFRelease((CFTypeRef)v164);
      *(_QWORD *)&v164 = 0;
    }
    v87 = 0;
    v11 = 0;
    if (!v65)
      goto LABEL_262;
    goto LABEL_261;
  }
  v73 = v164;
  v74 = v167[0];
  v75 = *(uint64_t (**)(uint64_t, CFTypeRef, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
  if (!v75)
  {
    v86 = -12782;
    goto LABEL_254;
  }
  v76 = v75(v73, v74, v72);
  if (v76)
  {
    v86 = v76;
    goto LABEL_254;
  }
  v77 = APSSetFBOPropertyInt64();
  if (v77)
  {
    v86 = v77;
    goto LABEL_254;
  }
  v78 = v164;
  v79 = *(uint64_t (**)(uint64_t, void (*)(uint64_t, int), _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 24);
  if (!v79)
  {
    v86 = -12782;
    goto LABEL_254;
  }
  v80 = v79(v78, audioStream_receivedMediaDataControlMessage_0, 0, v150);
  if (v80)
  {
    v86 = v80;
    goto LABEL_254;
  }
  v81 = v164;
  v82 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v82)
  {
    v86 = -12782;
    goto LABEL_254;
  }
  v83 = v82(v81);
  if (v83)
  {
    v86 = v83;
    goto LABEL_254;
  }
  v84 = v164;
  v85 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v85)
  {
    v86 = -12782;
    goto LABEL_254;
  }
  v86 = v85(v84);
  if (v86)
  {
LABEL_254:
    APSLogErrorAt();
    goto LABEL_255;
  }
  v87 = (const void *)v164;
  *(_QWORD *)&v164 = 0;
LABEL_261:
  CFRelease(v65);
  v11 = v87;
LABEL_262:
  if (v167[0])
    CFRelease(v167[0]);
  if (v72)
    CFRelease(v72);
  v159 = v86;
  if (!v86)
  {
    if (gLogCategory_APEndpointStreamAudio <= 50
      && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_271;
  }
  APSLogErrorAt();
  v13 = 0;
LABEL_349:
  v8 = v151;
  v10 = (const void *)v146;
LABEL_294:
  if (v156)
    CFRelease(v156);
  if (v9)
  {
    v132 = FigTransportStreamGetCMBaseObject();
    if (v132)
    {
      v133 = v132;
      v134 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v134)
        v134(v133);
    }
    CFRelease(v9);
  }
  if (v10)
  {
    v135 = FigTransportStreamGetCMBaseObject();
    if (v135)
    {
      v136 = v135;
      v137 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v137)
        v137(v136);
    }
    CFRelease(v10);
  }
  if (v11)
  {
    v138 = FigTransportStreamGetCMBaseObject();
    if (v138)
    {
      v139 = v138;
      v140 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v140)
        v140(v139);
    }
    CFRelease(v11);
  }
  if (v8)
    CFRelease(v8);
  if (v13)
    CFRelease(v13);
  if (v158)
    CFRelease(v158);
  if (v12)
    CFRelease(v12);
  if (v155)
    CFRelease(v155);
  if (!v159)
    return 0;
  audioStream_suspendInternal_0(a1);
  return v159;
}

uint64_t FigTransportStreamSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  CMBaseObject = FigTransportStreamGetCMBaseObject();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(CMBaseObject, a2, a3);
  else
    return 4294954514;
}

void audioStream_updateDynamicLatencyOffsetInternal()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  int v2;
  int v3;
  const void *MutableCopy;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 193))
  {
    v1 = DerivedStorage;
    if (*(_QWORD *)(DerivedStorage + 248) == 1 && (v2 = *(_DWORD *)(DerivedStorage + 96)) != 0)
      v3 = v2 - *(_DWORD *)(DerivedStorage + 88);
    else
      v3 = 0;
    if (*(_DWORD *)(DerivedStorage + 256) != v3)
    {
      if (gLogCategory_APEndpointStreamAudio <= 50
        && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_DWORD *)(v1 + 256) = v3;
      CMBaseObjectGetDerivedStorage();
      MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
      FigCFDictionarySetInt();
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      if (MutableCopy)
        CFRelease(MutableCopy);
    }
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t audioStream_receivedAudioControlMessage(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a4);
  if (a3)
    CFRetain(a3);
  return APSDispatchAsyncFHelper();
}

void audioStream_receivedAudioControlMessageInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  CFTypeRef v5;
  const void *v6;
  CFTypeRef cf;
  int v8;

  if (*(_DWORD *)(a1 + 8) != 1634168383)
    goto LABEL_16;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (*(_BYTE *)(DerivedStorage + 139))
    goto LABEL_16;
  v3 = DerivedStorage;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 152));
  v4 = *(const void **)(v3 + 216);
  if (v4)
    v5 = CFRetain(v4);
  else
    v5 = 0;
  v8 = 0;
  MEMORY[0x1CAA400E4](*(_QWORD *)(v3 + 152));
  if (v5)
  {
    if (APSTransportMessageGetRetransmitRequest())
    {
      APSLogErrorAt();
      goto LABEL_12;
    }
    if (gLogCategory_APEndpointStreamAudio > 30
      || gLogCategory_APEndpointStreamAudio == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_12;
    }
  }
  else if (gLogCategory_APEndpointStreamAudio > 50
         || gLogCategory_APEndpointStreamAudio == -1 && !_LogCategory_Initialize())
  {
    goto LABEL_12;
  }
  LogPrintF();
LABEL_12:
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
LABEL_16:
  CFRelease(*(CFTypeRef *)a1);
  v6 = *(const void **)(a1 + 16);
  if (v6)
    CFRelease(v6);
}

void audioStream_receivedMediaDataControlMessage_0(uint64_t a1, int a2)
{
  const __CFAllocator *v3;
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  CFTypeID v6;
  CFTypeID v7;
  uint64_t DerivedStorage;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v10;
  uint64_t v11;
  const void *v12;
  __CFDictionary *Mutable;
  __CFDictionary *v14;
  CFErrorRef error;
  void *value;
  int v17;

  error = 0;
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2 != 1919513459 && a2 != 1918989680)
    goto LABEL_48;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (FigCreateCFDataWithBlockBufferNoCopy())
  {
    APSLogErrorAt();
LABEL_48:
    v5 = 0;
    goto LABEL_49;
  }
  v4 = (const __CFDictionary *)CFPropertyListCreateWithData(v3, 0, 0, 0, &error);
  v5 = v4;
  if (error)
  {
    APSLogErrorAt();
    if (gLogCategory_APEndpointStreamAudio <= 90
      && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_49;
  }
  if (!v4)
  {
LABEL_57:
    APSLogErrorAt();
    goto LABEL_49;
  }
  if (a2 == 1918989680)
  {
    v7 = CFGetTypeID(v4);
    if (v7 != CFDictionaryGetTypeID())
      goto LABEL_57;
    v17 = 0;
    value = 0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (gLogCategory_APEndpointStreamAudio <= 50
      && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!FigCFEqual())
      goto LABEL_43;
    CFDictionaryGetInt64Ranged();
    if (v17)
    {
      APSLogErrorAt();
      if (gLogCategory_APEndpointStreamAudio > 90
        || gLogCategory_APEndpointStreamAudio == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_43;
      }
    }
    else
    {
      CFDictionaryGetInt64Ranged();
      if (v17 || (CFDictionaryGetInt64(), v17) || !CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E0CF72B8]))
      {
        APSLogErrorAt();
        if (gLogCategory_APEndpointStreamAudio > 90
          || gLogCategory_APEndpointStreamAudio == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_43;
        }
      }
      else
      {
        if (gLogCategory_APEndpointStreamAudio <= 50
          && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v17 = APSStatsHistogramCreateFromSerializedDictionary();
        if (!v17)
        {
          v11 = APSStatsHistogramCopyAsRTCString();
          if (v11)
          {
            v12 = (const void *)v11;
            if (gLogCategory_APEndpointStreamAudio <= 50
              && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            if (*(_QWORD *)(DerivedStorage + 48))
            {
              Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (Mutable)
              {
                v14 = Mutable;
                CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CF7300], *(const void **)(DerivedStorage + 48));
                MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 152));
                MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 152));
                FigCFDictionarySetInt64();
                FigCFDictionarySetInt64();
                FigCFDictionarySetInt64();
                CFDictionarySetValue(v14, (const void *)*MEMORY[0x1E0CF7308], value);
                CMNotificationCenterGetDefaultLocalCenter();
                FigDispatchAsyncPostNotification();
                CFRelease(v14);
              }
              else
              {
                APSLogErrorAt();
                v17 = -16761;
              }
            }
            else
            {
              APSLogErrorAt();
              v17 = -16760;
              if (gLogCategory_APEndpointStreamAudio <= 90
                && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
            }
            CFRelease(v12);
          }
          else
          {
            APSLogErrorAt();
            v17 = -16761;
          }
LABEL_43:
          if (value)
            CFRelease(value);
          if (!v17)
            goto LABEL_49;
          goto LABEL_57;
        }
        APSLogErrorAt();
        if (gLogCategory_APEndpointStreamAudio > 90
          || gLogCategory_APEndpointStreamAudio == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_43;
        }
      }
    }
    LogPrintF();
    goto LABEL_43;
  }
  v6 = CFGetTypeID(v4);
  if (v6 != CFDictionaryGetTypeID())
    goto LABEL_57;
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMBaseObjectGetDerivedStorage();
  CFStringGetTypeID();
  CFDictionaryGetTypedValue();
  if (FigCFEqual())
  {
    MutableCopy = CFDictionaryCreateMutableCopy(v3, 0, v5);
    if (MutableCopy)
    {
      v10 = MutableCopy;
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      CFRelease(v10);
      goto LABEL_49;
    }
    goto LABEL_57;
  }
LABEL_49:
  if (error)
    CFRelease(error);
  if (v5)
    CFRelease(v5);
}

void audioStream_enableReceiverCoreCapturesInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  unsigned __int8 v3;
  uint64_t v4;
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  const void *v7;
  CFTypeRef v8;
  const void *v9;
  const void *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = atomic_load((unsigned __int8 *)(DerivedStorage + 305));
  if ((v3 & 1) == 0)
    goto LABEL_25;
  v4 = DerivedStorage;
  if (gLogCategory_APEndpointStreamAudio <= 50
    && (gLogCategory_APEndpointStreamAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)v4)
  {
    APSLogErrorAt();
LABEL_25:
    v9 = 0;
    v6 = 0;
    goto LABEL_15;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = Mutable;
  if (!Mutable)
    goto LABEL_13;
  CFDictionarySetValue(Mutable, CFSTR("value"), (const void *)*MEMORY[0x1E0C9AE50]);
  if (!*(_BYTE *)(v4 + 137))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_15;
  }
  v7 = *(const void **)(v4 + 184);
  if (!v7 || (v8 = CFRetain(v7)) == 0)
  {
LABEL_13:
    APSLogErrorAt();
    goto LABEL_14;
  }
  v9 = v8;
  if (APTransportStreamSendPlistMessageCreatingPlistReply())
    APSLogErrorAt();
LABEL_15:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v10 = *(const void **)(a1 + 8);
  if (v10)
    CFRelease(v10);
  if (v9)
    CFRelease(v9);
  if (v6)
    CFRelease(v6);
}

void audioStream_triggerReceiverCoreCapturesInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  CFTypeRef v4;
  const void *v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_7;
  if (!*(_BYTE *)(DerivedStorage + 137))
  {
LABEL_8:
    v5 = 0;
    goto LABEL_9;
  }
  v3 = *(const void **)(DerivedStorage + 184);
  if (!v3 || (v4 = CFRetain(v3)) == 0)
  {
LABEL_7:
    APSLogErrorAt();
    goto LABEL_8;
  }
  v5 = v4;
  if (APTransportStreamSendPlistMessageCreatingPlistReply())
    APSLogErrorAt();
LABEL_9:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v6 = *(const void **)(a1 + 8);
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
}

uint64_t __audioStream_startSilentAudio_block_invoke(uint64_t a1)
{
  uint64_t result;
  AudioStreamBasicDescription inFormat;

  inFormat.mSampleRate = 44100.0;
  *(_OWORD *)&inFormat.mFormatID = xmmword_1C964DC40;
  *(_OWORD *)&inFormat.mBytesPerFrame = xmmword_1C964DC50;
  if (AudioQueueNewOutput(&inFormat, (AudioQueueOutputCallback)audioStream_silentAudioCallback, 0, 0, 0, 0, (AudioQueueRef *)(*(_QWORD *)(a1 + 32) + 496)))
  {
    return APSLogErrorAt();
  }
  result = AudioQueueStart(*(AudioQueueRef *)(*(_QWORD *)(a1 + 32) + 496), 0);
  if ((_DWORD)result)
    return APSLogErrorAt();
  if (gLogCategory_APEndpointStreamAudio <= 50)
  {
    if (gLogCategory_APEndpointStreamAudio != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

uint64_t mrcs_getTypeID(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APMediaRemoteCommandSinkCreateWithNowPlayingAppPID(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  v5 = (void *)objc_msgSend(objc_alloc((Class)getMRClientClass_0[0]()), "initWithProcessIdentifier:bundleIdentifier:", a2, 0);
  if (!v5)
  {
    APSLogErrorAt();
    v7 = 0;
    v6 = 0;
LABEL_14:
    v9 = 4294960568;
    goto LABEL_10;
  }
  v6 = (void *)objc_msgSend(objc_alloc((Class)getMRPlayerPathClass_0[0]()), "initWithOrigin:client:player:", 0, v5, 0);
  if (!v6)
  {
    APSLogErrorAt();
    v7 = 0;
    goto LABEL_14;
  }
  v7 = (void *)objc_msgSend(objc_alloc((Class)getMRDestinationClass_0[0]()), "initWithPlayerPath:", v6);
  if (!v7)
  {
    APSLogErrorAt();
    goto LABEL_14;
  }
  v8 = mrcs_createWithMRDestination(a1, (uint64_t)v7, &cf);
  if ((_DWORD)v8)
  {
    v9 = v8;
    APSLogErrorAt();
    if (cf)
      CFRelease(cf);
  }
  else
  {
    if (gLogCategory_APMediaRemoteCommandSink <= 50
      && (gLogCategory_APMediaRemoteCommandSink != -1 || _LogCategory_Initialize()))
    {
      objc_msgSend(v6, "description");
      LogPrintF();
    }
    v9 = 0;
    *a3 = cf;
  }
LABEL_10:

  return v9;
}

uint64_t mrcs_createWithMRDestination(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t Instance;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (APMediaRemoteCommandSinkGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APMediaRemoteCommandSinkGetTypeID_sInitOnce, &APMediaRemoteCommandSinkGetTypeID_sTypeID, (dispatch_function_t)mrcs_getTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt();
    return 4294960568;
  }
  v6 = (_QWORD *)Instance;
  *(_QWORD *)(Instance + 16) = 0;
  *(_QWORD *)(Instance + 24) = 0;
  if (!a2)
  {
    v8 = 4294960591;
LABEL_11:
    APSLogErrorAt();
    CFRelease(v6);
    return v8;
  }
  v7 = objc_msgSend(objc_alloc(getMRNowPlayingControllerClass_0()), "initWithDestination:", a2);
  v6[3] = v7;
  if (!v7)
  {
    v8 = 4294960568;
    goto LABEL_11;
  }
  v8 = 0;
  *a3 = v6;
  return v8;
}

uint64_t APMediaRemoteCommandSinkCreateWithRoutingContextUUID(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef cf;

  cf = 0;
  v5 = (void *)objc_msgSend(objc_alloc((Class)getMRDestinationClass_0[0]()), "initWithOutputContextUID:", a2);
  if (v5)
  {
    v6 = mrcs_createWithMRDestination(a1, (uint64_t)v5, &cf);
    if ((_DWORD)v6)
    {
      v7 = v6;
      APSLogErrorAt();
      if (cf)
        CFRelease(cf);
    }
    else
    {
      if (gLogCategory_APMediaRemoteCommandSink <= 50
        && (gLogCategory_APMediaRemoteCommandSink != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v7 = 0;
      *a3 = cf;
    }
  }
  else
  {
    APSLogErrorAt();
    v7 = 4294960568;
  }

  return v7;
}

uint64_t APMediaRemoteCommandSinkHandleAPCommand(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = result;
  if (gLogCategory_APMediaRemoteCommandSink <= 50)
  {
    if (gLogCategory_APMediaRemoteCommandSink != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      result = LogPrintF();
  }
  if (a2 <= 1886154866)
  {
    if (a2 <= 1852404844)
    {
      if (a2 <= 1685086580)
      {
        if (a2 == 1650878052)
        {
          *(_DWORD *)(v3 + 16) = 1;
          v4 = 8;
          return APMediaRemoteCommandSinkHandleMRCommand(v3, v4, 0);
        }
        if (a2 == 1651668836)
        {
          *(_DWORD *)(v3 + 16) = -1;
          v4 = 10;
          return APMediaRemoteCommandSinkHandleMRCommand(v3, v4, 0);
        }
        goto LABEL_51;
      }
      if (a2 != 1685086581)
      {
        if (a2 == 1852008560)
        {
          v4 = 100;
          return APMediaRemoteCommandSinkHandleMRCommand(v3, v4, 0);
        }
        goto LABEL_51;
      }
    }
    else
    {
      if (a2 > 1885959276)
      {
        if (a2 != 1885959277)
        {
          if (a2 == 1886151033)
          {
            if (gLogCategory_APMediaRemoteCommandSink <= 50
              && (gLogCategory_APMediaRemoteCommandSink != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v4 = 0;
            return APMediaRemoteCommandSinkHandleMRCommand(v3, v4, 0);
          }
          if (a2 == 1886151528)
          {
            v4 = 101;
            return APMediaRemoteCommandSinkHandleMRCommand(v3, v4, 0);
          }
          goto LABEL_51;
        }
LABEL_39:
        v4 = 5;
        return APMediaRemoteCommandSinkHandleMRCommand(v3, v4, 0);
      }
      if (a2 == 1852404845)
      {
        v4 = 4;
        return APMediaRemoteCommandSinkHandleMRCommand(v3, v4, 0);
      }
      if (a2 != 1885435251)
        goto LABEL_51;
    }
    v4 = 1;
    return APMediaRemoteCommandSinkHandleMRCommand(v3, v4, 0);
  }
  if (a2 <= 1936225382)
  {
    if (a2 <= 1919967587)
    {
      if (a2 == 1886154867)
      {
        v4 = 2;
        return APMediaRemoteCommandSinkHandleMRCommand(v3, v4, 0);
      }
      if (a2 == 1886155379)
      {
        v5 = *(_DWORD *)(v3 + 16);
        if (v5 == -1)
        {
          v4 = 11;
        }
        else if (v5 == 1)
        {
          v4 = 9;
        }
        else
        {
          if (gLogCategory_APMediaRemoteCommandSink <= 50
            && (gLogCategory_APMediaRemoteCommandSink != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v4 = 0;
        }
        *(_DWORD *)(v3 + 16) = 0;
        return APMediaRemoteCommandSinkHandleMRCommand(v3, v4, 0);
      }
      goto LABEL_51;
    }
    if (a2 == 1919967588)
    {
      v4 = 7;
      return APMediaRemoteCommandSinkHandleMRCommand(v3, v4, 0);
    }
    if (a2 != 1920166260)
      goto LABEL_51;
    goto LABEL_39;
  }
  if (a2 <= 1936420965)
  {
    if (a2 == 1936225383)
    {
      v4 = 6;
      return APMediaRemoteCommandSinkHandleMRCommand(v3, v4, 0);
    }
    if (a2 == 1936420962)
    {
      v4 = 18;
      return APMediaRemoteCommandSinkHandleMRCommand(v3, v4, 0);
    }
  }
  else
  {
    switch(a2)
    {
      case 1936420966:
        v4 = 17;
        return APMediaRemoteCommandSinkHandleMRCommand(v3, v4, 0);
      case 1936748403:
        v4 = 24;
        return APMediaRemoteCommandSinkHandleMRCommand(v3, v4, 0);
      case 1937010544:
        v4 = 3;
        return APMediaRemoteCommandSinkHandleMRCommand(v3, v4, 0);
    }
  }
LABEL_51:
  if (gLogCategory_APMediaRemoteCommandSink <= 60)
  {
    if (gLogCategory_APMediaRemoteCommandSink != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

uint64_t APMediaRemoteCommandSinkHandleMRCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (gLogCategory_APMediaRemoteCommandSink <= 50
    && (gLogCategory_APMediaRemoteCommandSink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return objc_msgSend(*(id *)(a1 + 24), "sendCommand:options:completion:", a2, a3, 0);
}

void mrcs_Finalize(uint64_t a1)
{
  if (gLogCategory_APMediaRemoteCommandSink <= 50
    && (gLogCategory_APMediaRemoteCommandSink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }

  *(_QWORD *)(a1 + 24) = 0;
}

Class initMRClient_0()
{
  Class result;

  if (MediaRemoteLibrary_sOnce_1 != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce_1, &__block_literal_global_31);
  result = objc_getClass("MRClient");
  classMRClient_0 = (uint64_t)result;
  getMRClientClass_0[0] = MRClientFunction_0;
  return result;
}

uint64_t MRClientFunction_0()
{
  return classMRClient_0;
}

Class initMRPlayerPath_0()
{
  Class result;

  if (MediaRemoteLibrary_sOnce_1 != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce_1, &__block_literal_global_31);
  result = objc_getClass("MRPlayerPath");
  classMRPlayerPath_0 = (uint64_t)result;
  getMRPlayerPathClass_0[0] = MRPlayerPathFunction_0;
  return result;
}

uint64_t MRPlayerPathFunction_0()
{
  return classMRPlayerPath_0;
}

Class initMRDestination_0()
{
  Class result;

  if (MediaRemoteLibrary_sOnce_1 != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce_1, &__block_literal_global_31);
  result = objc_getClass("MRDestination");
  classMRDestination_0 = (uint64_t)result;
  getMRDestinationClass_0[0] = MRDestinationFunction_0;
  return result;
}

uint64_t MRDestinationFunction_0()
{
  return classMRDestination_0;
}

Class initMRNowPlayingController_0()
{
  Class result;

  if (MediaRemoteLibrary_sOnce_1 != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce_1, &__block_literal_global_31);
  result = objc_getClass("MRNowPlayingController");
  classMRNowPlayingController_0 = (uint64_t)result;
  getMRNowPlayingControllerClass_0 = MRNowPlayingControllerFunction_0;
  return result;
}

uint64_t MRNowPlayingControllerFunction_0()
{
  return classMRNowPlayingController_0;
}

uint64_t APEndpointClusterCreate(const __CFAllocator *a1, const void *a2, const void *a3, int a4, const void *a5, uint64_t a6, const void *a7, uint64_t a8, CFTypeRef *a9)
{
  uint64_t v16;
  uint64_t DerivedStorage;
  uint64_t v18;
  const __CFAllocator *v19;
  CFMutableDictionaryRef Mutable;
  CFTypeRef v21;
  CFMutableArrayRef v22;
  CFMutableDictionaryRef v23;
  CFMutableArrayRef v24;
  uint64_t CMBaseObject;
  void (*v26)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  int v27;
  const __CFDictionary *Value;
  CFDictionaryRef Copy;
  dispatch_queue_t v30;
  CFTypeRef v31;
  uint64_t v32;
  CFTypeRef *v33;
  UInt8 bytes[6];
  CFTypeRef cf;
  int v37;
  CFTypeRef v38;
  char label[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v38 = 0;
  v37 = 0;
  cf = 0;
  if (!a4 || !a7)
  {
LABEL_62:
    APSLogErrorAt();
    v32 = 4294950576;
LABEL_63:
    if (v38)
      CFRelease(v38);
    goto LABEL_46;
  }
  FigEndpointExtendedGetClassID();
  v16 = CMDerivedObjectCreate();
  if ((_DWORD)v16)
  {
    v32 = v16;
LABEL_61:
    APSLogErrorAt();
    goto LABEL_63;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)DerivedStorage = a4;
  v18 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 208) = v18;
  if (!v18)
    goto LABEL_60;
  *(_QWORD *)(DerivedStorage + 16) = CFRetain(a3);
  *(_QWORD *)(DerivedStorage + 24) = a6;
  *(_QWORD *)(DerivedStorage + 32) = CFRetain(a7);
  TextToHardwareAddress();
  *(_QWORD *)(DerivedStorage + 96) = CFDataCreate(a1, bytes, 6);
  v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 632) = Mutable;
  if (!Mutable)
    goto LABEL_60;
  *(_BYTE *)(DerivedStorage + 368) = 1;
  v21 = a5 ? CFRetain(a5) : 0;
  *(_QWORD *)(DerivedStorage + 216) = v21;
  *(_QWORD *)(DerivedStorage + 224) = CFRetain(&stru_1E8273C10);
  v22 = CFArrayCreateMutable(v19, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 264) = v22;
  if (!v22
    || (v23 = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
        (*(_QWORD *)(DerivedStorage + 272) = v23) == 0)
    || (v24 = CFArrayCreateMutable(v19, 0, MEMORY[0x1E0C9B378]), (*(_QWORD *)(DerivedStorage + 624) = v24) == 0))
  {
LABEL_60:
    APSLogErrorAt();
    v32 = 4294950575;
    goto LABEL_63;
  }
  *(_BYTE *)(DerivedStorage + 184) = 0;
  if (!FigCFDictionaryGetBooleanIfPresent())
    *(_BYTE *)(DerivedStorage + 184) = APSSettingsIsFeatureEnabled();
  *(_DWORD *)(DerivedStorage + 112) = APSSettingsGetIntWithOverrideAndDefault();
  *(_QWORD *)(DerivedStorage + 168) = (int)APSSettingsGetIntWithOverrideAndDefault();
  *(_QWORD *)(DerivedStorage + 120) = (int)APSSettingsGetIntWithOverrideAndDefault();
  *(_QWORD *)(DerivedStorage + 128) = (int)APSSettingsGetIntWithOverrideAndDefault();
  *(_QWORD *)(DerivedStorage + 136) = (int)APSSettingsGetIntWithOverrideAndDefault();
  *(_QWORD *)(DerivedStorage + 144) = (int)APSSettingsGetIntWithOverrideAndDefault();
  *(_QWORD *)(DerivedStorage + 152) = (int)APSSettingsGetIntWithOverrideAndDefault();
  *(_QWORD *)(DerivedStorage + 160) = (int)APSSettingsGetIntWithOverrideAndDefault();
  *(_QWORD *)(DerivedStorage + 176) = 0x3C000001E0;
  if (IsAppleInternalBuild())
  {
    *(_DWORD *)(DerivedStorage + 176) = APSSettingsGetIntWithOverrideAndDefault();
    *(_DWORD *)(DerivedStorage + 180) = APSSettingsGetIntWithOverrideAndDefault();
  }
  if (!FigCFDictionaryGetIntIfPresent())
  {
    if (IsAppleTV())
    {
      v27 = 4;
    }
    else
    {
      if (!APSIsAPMSpeaker())
      {
        *(_DWORD *)(DerivedStorage + 188) = 0;
        goto LABEL_28;
      }
      v27 = 7;
    }
    *(_DWORD *)(DerivedStorage + 188) = v27;
    goto LABEL_28;
  }
  *(_DWORD *)(DerivedStorage + 188) = v37;
  if (a2)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v26 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v26)
      v26(CMBaseObject, *MEMORY[0x1E0CA43D8], v19, &cf);
    if (FigCFEqual() != (*(_DWORD *)(DerivedStorage + 188) == 4)
      || FigCFEqual() != (*(_DWORD *)(DerivedStorage + 188) == 7))
    {
      goto LABEL_62;
    }
  }
LABEL_28:
  Value = (const __CFDictionary *)FigCFDictionaryGetValue();
  if (Value)
  {
    Copy = CFDictionaryCreateCopy(v19, Value);
    *(_QWORD *)(DerivedStorage + 104) = Copy;
    if (!Copy)
      goto LABEL_60;
  }
  SNPrintF();
  v30 = dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 40) = v30;
  if (!v30)
    goto LABEL_60;
  if (a2)
  {
    v31 = CFRetain(a2);
    *(_QWORD *)(DerivedStorage + 8) = v31;
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 264), v31);
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
    v32 = endpointCluster_updateFromSubEndpoint(v38, *(const void **)(DerivedStorage + 8), 0, 1, 1, 0);
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
    if ((_DWORD)v32)
      goto LABEL_61;
  }
  v33 = (CFTypeRef *)(CMBaseObjectGetDerivedStorage() + 192);
  if (*v33)
  {
    CFRelease(*v33);
    *v33 = 0;
  }
  if (APSEventRecorderCreate())
    APSLogErrorAt();
  else
    APSEventRecorderAddSignPostForEvent();
  *(CFAbsoluteTime *)(DerivedStorage + 200) = CFAbsoluteTimeGetCurrent();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    APSClusterTypeToDescriptionString();
    LogPrintF();
  }
  v32 = 0;
  *a9 = v38;
  v38 = 0;
LABEL_46:
  if (cf)
    CFRelease(cf);
  return v32;
}

uint64_t FigEndpointCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  CMBaseObject = FigEndpointGetCMBaseObject();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(CMBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t endpointCluster_handleSubEndpointVolumeDidChange(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const void *TypedValue;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, const __CFString *, _QWORD, void **);
  uint64_t v13;
  void *key;
  int v16;

  v16 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  key = 0;
  if (!a5)
    return APSLogErrorAt();
  v9 = DerivedStorage;
  CFNumberGetTypeID();
  TypedValue = (const void *)CFDictionaryGetTypedValue();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(v9 + 208));
  if (endpointCluster_isSubEndpointVolumeLeader(a2, a4))
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (*(_DWORD *)v9 == 3)
    {
      CMBaseObject = FigEndpointGetCMBaseObject();
      v12 = *(void (**)(uint64_t, const __CFString *, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
      if (v12)
      {
        v12(CMBaseObject, CFSTR("RoomUUID"), *MEMORY[0x1E0C9AE00], &key);
        if (key)
          CFDictionaryReplaceValue(*(CFMutableDictionaryRef *)(v9 + 632), key, TypedValue);
      }
    }
    if (*(_DWORD *)v9 == 3)
      v13 = (uint64_t)a4;
    else
      v13 = 0;
    endpointCluster_postVolumeDidChange(a2, v13, TypedValue);
  }
  else if (gLogCategory_APEndpointCluster <= 50
         && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return MEMORY[0x1CAA400E4](*(_QWORD *)(v9 + 208));
}

void endpointCluster_handleSubEndpointIsMutedDidChange(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (endpointCluster_isSubEndpointVolumeLeader(a2, a4))
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (*(_DWORD *)DerivedStorage == 3)
      v7 = (uint64_t)a4;
    else
      v7 = 0;
    endpointCluster_postIsMutedDidChange(a2, v7);
  }
  else if (gLogCategory_APEndpointCluster <= 50
         && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  JUMPOUT(0x1CAA400E4);
}

void endpointCluster_handleLocalEndpointFinishedDeactivation(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  int v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (*(_DWORD *)(DerivedStorage + 304))
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    endpointCluster_updateClusterChangeProgress((uint64_t)a2, 0, 1);
    endpointCluster_handleSubEndpointResult(a2, *(_QWORD *)(DerivedStorage + 312), *(const void **)(DerivedStorage + 8), -72277, 1);
    endpointCluster_postNeedDeactivationForClusterChange((uint64_t)a2, 0);
    endpointCluster_sendActivationMetrics();
  }
  else
  {
    if (*(_BYTE *)(DerivedStorage + 416))
    {
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v4 = (uint64_t)a2;
      v5 = 0;
    }
    else
    {
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v4 = (uint64_t)a2;
      v5 = 1;
    }
    endpointCluster_updateClusterChangeProgress(v4, v5, 1);
  }
  JUMPOUT(0x1CAA400E4);
}

void endpointCluster_handleSubEndpointDescriptionChanged(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  int v9;
  _BOOL4 v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (a5)
  {
    v9 = CFDictionaryGetInt64() || CFDictionaryGetInt64() || CFDictionaryGetInt64() != 0;
    v10 = CFDictionaryGetInt64() != 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  endpointCluster_updateFromSubEndpoint(a2, a4, 0, v9, v10, 1);
  JUMPOUT(0x1CAA400E4);
}

uint64_t endpointCluster_updateFromSubEndpoint(const void *a1, const void *a2, int a3, int a4, int a5, int a6)
{
  uint64_t DerivedStorage;
  int v12;
  const __CFAllocator *v13;
  uint64_t CMBaseObject;
  void (*v15)(uint64_t, const __CFString *, const __CFAllocator *, CFStringRef *);
  const void *v16;
  CFStringRef v17;
  uint64_t v18;
  __CFString *Mutable;
  CFIndex v20;
  uint64_t v21;
  CFAllocatorRef v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, CFAllocatorRef, const __CFString **);
  const __CFString *v25;
  int v26;
  const void *v27;
  int v28;
  int v29;
  const __CFAllocator *v30;
  int v31;
  uint64_t v32;
  CFIndex v33;
  uint64_t v34;
  const void *ValueAtIndex;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, const __CFAllocator *, CFStringRef *);
  const void *v38;
  int v39;
  const void *SubEndpointWithPredicate;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, const __CFAllocator *, const __CFString **);
  int v43;
  const void *v44;
  const __CFString *v45;
  uint64_t v46;
  const void *v47;
  uint64_t v48;
  __CFDictionary *v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, _QWORD, const __CFAllocator *, const __CFString **);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, const __CFAllocator *, CFStringRef *);
  uint64_t v56;
  uint64_t (*v57)(uint64_t, _QWORD, const __CFAllocator *, const void **);
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  uint64_t v64;
  void (*v65)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v66;
  void (*v67)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v68;
  void (*v69)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  const void *v70;
  const void *Int64;
  const void *v72;
  const void *v73;
  const void *v74;
  const void *v75;
  __CFDictionary *v76;
  __CFDictionary *v77;
  int v79;
  int v80;
  int v81;
  CFTypeRef cf;
  const __CFAllocator *allocator;
  CFTypeRef v85;
  CFTypeRef v86;
  CFTypeRef v87;
  CFTypeRef v88;
  CFTypeRef v89;
  const void *v90;
  CFStringRef v91;
  const __CFString *v92;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v80 = a5;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = 0;
  v91 = 0;
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a2 && !a3)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v15 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v15)
      v15(CMBaseObject, CFSTR("GroupPublicName"), v13, &v91);
    v12 = 0;
    if (!FigCFEqual() && v91)
    {
      if (CFStringGetLength(v91) < 1)
      {
        v12 = 0;
      }
      else
      {
        if (gLogCategory_APEndpointCluster <= 50
          && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v16 = *(const void **)(DerivedStorage + 216);
        v17 = v91;
        *(_QWORD *)(DerivedStorage + 216) = v91;
        if (v17)
          CFRetain(v17);
        if (v16)
          CFRelease(v16);
        v12 = 1;
      }
    }
  }
  v81 = a4;
  v79 = a3;
  cf = a2;
  v18 = CMBaseObjectGetDerivedStorage();
  allocator = v13;
  Mutable = CFStringCreateMutable(v13, 0);
  if (CFArrayGetCount(*(CFArrayRef *)(v18 + 264)) >= 1)
  {
    v20 = 0;
    v21 = *MEMORY[0x1E0CA4348];
    do
    {
      v92 = 0;
      CFArrayGetValueAtIndex(*(CFArrayRef *)(v18 + 264), v20);
      v22 = CFGetAllocator(a1);
      v23 = FigEndpointGetCMBaseObject();
      v24 = *(void (**)(uint64_t, uint64_t, CFAllocatorRef, const __CFString **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
      if (v24)
        v24(v23, v21, v22, &v92);
      v25 = v92;
      if (v92)
      {
        if (v20)
        {
          CFStringAppend(Mutable, CFSTR(" + "));
          v25 = v92;
        }
        CFStringAppend(Mutable, v25);
        if (v92)
          CFRelease(v92);
      }
      ++v20;
    }
    while (v20 < CFArrayGetCount(*(CFArrayRef *)(v18 + 264)));
  }
  v26 = CFEqual(Mutable, *(CFTypeRef *)(DerivedStorage + 224));
  if (!v26)
  {
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v27 = *(const void **)(DerivedStorage + 224);
    *(_QWORD *)(DerivedStorage + 224) = Mutable;
    if (Mutable)
      CFRetain(Mutable);
    if (v27)
      CFRelease(v27);
  }
  if (v91)
    CFRelease(v91);
  v28 = v80;
  if (Mutable)
    CFRelease(Mutable);
  if (v26)
    v29 = v12;
  else
    v29 = 1;
  v30 = allocator;
  if (v80)
  {
    v31 = v29;
    v32 = CMBaseObjectGetDerivedStorage();
    v33 = 0;
    v92 = 0;
    v34 = *MEMORY[0x1E0CA4228];
    while (v33 < CFArrayGetCount(*(CFArrayRef *)(v32 + 264)))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v32 + 264), v33);
      if (!APSGetFBOPropertyInt64())
        goto LABEL_57;
      v91 = 0;
      v36 = FigEndpointGetCMBaseObject();
      v37 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
      if (v37)
        v37(v36, v34, allocator, &v91);
      if (v91)
      {
        if (FigCFEqual())
        {
          ValueAtIndex = 0;
        }
        else if (gLogCategory_APEndpointCluster <= 30
               && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (v91)
          CFRelease(v91);
      }
      else
      {
LABEL_57:
        ValueAtIndex = 0;
      }
      ++v33;
      if (ValueAtIndex)
        goto LABEL_72;
    }
    SubEndpointWithPredicate = endpointCluster_getSubEndpointWithPredicate((uint64_t)a1, 0);
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!SubEndpointWithPredicate)
    {
      v43 = 0;
      goto LABEL_75;
    }
LABEL_72:
    v41 = FigEndpointGetCMBaseObject();
    v42 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, const __CFString **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
    if (v42)
      v42(v41, v34, allocator, &v92);
    v43 = APSGetFBOPropertyInt64() != 0;
LABEL_75:
    v29 = v31;
    if (FigCFEqual() && v43 == *(unsigned __int8 *)(v32 + 240))
    {
      v28 = 0;
      v38 = cf;
      v39 = v81;
    }
    else
    {
      v38 = cf;
      v39 = v81;
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v44 = *(const void **)(v32 + 232);
      v45 = v92;
      *(_QWORD *)(v32 + 232) = v92;
      if (v45)
        CFRetain(v45);
      if (v44)
        CFRelease(v44);
      *(_BYTE *)(v32 + 240) = v43;
      v28 = 1;
    }
    if (v92)
      CFRelease(v92);
  }
  else
  {
    v38 = cf;
    v39 = v81;
  }
  if (!v39)
  {
    v48 = 0;
    if (!a6)
      return v48;
    goto LABEL_164;
  }
  CMBaseObjectGetDerivedStorage();
  v46 = CMBaseObjectGetDerivedStorage();
  if (!v79)
  {
    v91 = 0;
    v92 = 0;
    v90 = 0;
    v88 = 0;
    v89 = 0;
    v86 = 0;
    v87 = 0;
    v85 = 0;
    v49 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v49)
    {
      APSLogErrorAt();
      Int64 = 0;
      v48 = 4294950575;
      goto LABEL_142;
    }
    v50 = FigEndpointGetCMBaseObject();
    v51 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, const __CFString **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
    if (v51)
    {
      v52 = v51(v50, *MEMORY[0x1E0CA4258], allocator, &v92);
      if (!(_DWORD)v52)
      {
        CFDictionarySetValue(v49, (const void *)*MEMORY[0x1E0CA3878], v92);
        v53 = *MEMORY[0x1E0CA4348];
        v54 = FigEndpointGetCMBaseObject();
        v55 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
        if (v55)
          v55(v54, v53, allocator, &v91);
        FigCFDictionarySetValue();
        v56 = FigEndpointGetCMBaseObject();
        v57 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
        if (v57)
        {
          v58 = v57(v56, *MEMORY[0x1E0CA43D8], allocator, &v90);
          if (!(_DWORD)v58)
          {
            CFDictionarySetValue(v49, (const void *)*MEMORY[0x1E0CA3880], v90);
            v59 = FigEndpointGetCMBaseObject();
            v60 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
            if (v60)
              v60(v59, *MEMORY[0x1E0CA4278], allocator, &v89);
            FigCFDictionarySetValue();
            v61 = *MEMORY[0x1E0CA4338];
            v62 = FigEndpointGetCMBaseObject();
            v63 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
            if (v63)
              v63(v62, v61, allocator, &v88);
            FigCFDictionarySetValue();
            v64 = FigEndpointGetCMBaseObject();
            v65 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            if (v65)
              v65(v64, CFSTR("RoomUUID"), allocator, &v87);
            FigCFDictionarySetValue();
            v66 = FigEndpointGetCMBaseObject();
            v67 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            if (v67)
              v67(v66, CFSTR("RoomName"), allocator, &v86);
            FigCFDictionarySetValue();
            if (*(_DWORD *)v46 != 1)
            {
              v68 = FigEndpointGetCMBaseObject();
              v69 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
              if (v69)
                v69(v68, CFSTR("TightSyncClusterInfo"), allocator, &v85);
              if (v85)
              {
                FigCFDictionarySetValueFromKeyInDict();
                FigCFDictionarySetValueFromKeyInDict();
                FigCFDictionarySetValueFromKeyInDict();
              }
            }
            if (FigCFEqual())
            {
              v70 = *(const void **)(v46 + 296);
              if (v70)
              {
                CFRelease(v70);
                *(_QWORD *)(v46 + 296) = 0;
              }
              *(_QWORD *)(v46 + 296) = CFRetain(v92);
            }
            CFHash(cf);
            Int64 = (const void *)CFNumberCreateInt64();
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(v46 + 272), Int64, v49);
            if (gLogCategory_APEndpointCluster <= 30
              && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v74 = *(const void **)(v46 + 280);
            if (v74)
            {
              CFRelease(v74);
              *(_QWORD *)(v46 + 280) = 0;
            }
            v75 = *(const void **)(v46 + 288);
            if (v75)
            {
              CFRelease(v75);
              v48 = 0;
              *(_QWORD *)(v46 + 288) = 0;
            }
            else
            {
              v48 = 0;
            }
            goto LABEL_142;
          }
          v48 = v58;
        }
        else
        {
          v48 = 4294954514;
        }
        APSLogErrorAt();
        Int64 = 0;
LABEL_142:
        if (v92)
          CFRelease(v92);
        if (v91)
          CFRelease(v91);
        if (v90)
          CFRelease(v90);
        if (v89)
          CFRelease(v89);
        if (v88)
          CFRelease(v88);
        if (v87)
          CFRelease(v87);
        if (v86)
          CFRelease(v86);
        if (v49)
          CFRelease(v49);
        if (Int64)
          CFRelease(Int64);
        v30 = allocator;
        if (v85)
          CFRelease(v85);
        goto LABEL_162;
      }
      v48 = v52;
    }
    else
    {
      v48 = 4294954514;
    }
    APSLogErrorAt();
    Int64 = 0;
    goto LABEL_142;
  }
  CFHash(v38);
  v47 = (const void *)CFNumberCreateInt64();
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v46 + 272), v47);
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v72 = *(const void **)(v46 + 280);
  if (v72)
  {
    CFRelease(v72);
    *(_QWORD *)(v46 + 280) = 0;
  }
  v73 = *(const void **)(v46 + 288);
  if (v73)
  {
    CFRelease(v73);
    *(_QWORD *)(v46 + 288) = 0;
  }
  if (v47)
    CFRelease(v47);
  v48 = 0;
LABEL_162:
  if (!a6)
    return v48;
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
LABEL_164:
  if (((v28 == 0) & ~v29) != 0)
  {
    v77 = 0;
  }
  else
  {
    v76 = CFDictionaryCreateMutable(v30, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v76)
    {
      APSLogErrorAt();
      return 4294950575;
    }
    v77 = v76;
    if (v28)
      CFDictionarySetValue(v76, CFSTR("GroupInfoDidChange"), (const void *)*MEMORY[0x1E0C9AE50]);
    if (v29)
      CFDictionarySetValue(v77, CFSTR("NameDidChange"), (const void *)*MEMORY[0x1E0C9AE50]);
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  if (v77)
    CFRelease(v77);
  return v48;
}

uint64_t APEndpointClusterAddSubEndpoint(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFRange v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (!APSGetFBOPropertyInt64())
  {
    v9.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264));
    v9.location = 0;
    if (CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 264), v9, a2) == -1)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 264), a2);
      v5 = *(_QWORD *)(DerivedStorage + 312);
      if (v5)
        CompletionCallbackContextAddSubEndpoint(v5, a2);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      if (*(_QWORD *)(DerivedStorage + 8) && *(_DWORD *)DerivedStorage == 2)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
      }
      v6 = endpointCluster_updateFromSubEndpoint(a1, a2, 0, 1, 1, 1);
      if ((_DWORD)v6)
      {
        v7 = v6;
        APSLogErrorAt();
        goto LABEL_17;
      }
      if (endpointCluster_shouldActivateSubEndpoint((uint64_t)a1, a2))
        endpointCluster_activateSubEndpoint((uint64_t)a1, a2);
      endpointCluster_failDelayManageSubEndpoint(a1, a2, 3);
      endpointCluster_updateHealthState(a1);
    }
    else
    {
      APSLogErrorAt();
    }
  }
  v7 = 0;
LABEL_17:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  return v7;
}

void CompletionCallbackContextAddSubEndpoint(uint64_t a1, const void *a2)
{
  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 80));
  if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 88), a2))
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 88), a2, (const void *)*MEMORY[0x1E0C9B0D0]);
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  JUMPOUT(0x1CAA400E4);
}

uint64_t endpointCluster_handleSubEndpointNonPersistentReceiverSessionStarted()
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDispatchAsyncPostNotification();
}

BOOL endpointCluster_shouldActivateSubEndpoint(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  int v8;
  const __CFSet *v9;
  _BOOL8 v10;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  if ((*(_DWORD *)(DerivedStorage + 304) & 0xFFFFFFFE) != 2)
  {
    if (gLogCategory_APEndpointCluster > 30)
      return 0;
    if (gLogCategory_APEndpointCluster == -1 && !_LogCategory_Initialize())
      goto LABEL_15;
LABEL_7:
    LogPrintF();
LABEL_15:
    v10 = 0;
    goto LABEL_16;
  }
  if (*(_DWORD *)(DerivedStorage + 320))
  {
    if (gLogCategory_APEndpointCluster > 30)
      return 0;
    if (gLogCategory_APEndpointCluster == -1 && !_LogCategory_Initialize())
      goto LABEL_15;
    goto LABEL_7;
  }
  CMBaseObjectGetDerivedStorage();
  cf = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v7 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v7)
    v7(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], &cf);
  v8 = FigCFArrayContainsValue();
  if (cf)
    CFRelease(cf);
  if (v8)
  {
    if (gLogCategory_APEndpointCluster > 30)
      return 0;
    if (gLogCategory_APEndpointCluster == -1 && !_LogCategory_Initialize())
      goto LABEL_15;
    goto LABEL_7;
  }
  v9 = *(const __CFSet **)(v5 + 360);
  if (v9 && CFSetContainsValue(v9, a2))
  {
    if (gLogCategory_APEndpointCluster <= 50)
    {
      if (gLogCategory_APEndpointCluster == -1 && !_LogCategory_Initialize())
        goto LABEL_15;
      goto LABEL_7;
    }
    return 0;
  }
  v10 = endpointCluster_wantSubEndpointActivation(a1, (uint64_t)a2);
LABEL_16:
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v10;
}

uint64_t endpointCluster_activateSubEndpoint(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t result;
  uint64_t (*v8)(uint64_t, const void *, uint64_t, void (*)(uint64_t, const void *, uint64_t, uint64_t, int, _QWORD *), CFTypeRef);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if ((*(_DWORD *)(DerivedStorage + 304) - 4) <= 0xFFFFFFFD)
    return APSLogErrorAt();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CFRetain(a2);
  v4 = *(_QWORD *)(DerivedStorage + 248);
  if (!v4 || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
    v4 = 0;
  v5 = *(_QWORD *)(DerivedStorage + 376);
  v6 = CFRetain(*(CFTypeRef *)(DerivedStorage + 312));
  result = CMBaseObjectGetVTable();
  v8 = *(uint64_t (**)(uint64_t, const void *, uint64_t, void (*)(uint64_t, const void *, uint64_t, uint64_t, int, _QWORD *), CFTypeRef))(*(_QWORD *)(result + 32) + 8);
  if (v8)
    return v8(v4, a2, v5, endpointCluster_activateSubEndpointCallback, v6);
  return result;
}

void endpointCluster_failDelayManageSubEndpoint(const void *a1, const void *a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  NSObject *v8;
  _QWORD block[8];
  int v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(_QWORD *)(DerivedStorage + 384);
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  v8 = *(NSObject **)(DerivedStorage + 40);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __endpointCluster_failDelayManageSubEndpoint_block_invoke;
  block[3] = &__block_descriptor_tmp_256;
  v10 = a3;
  block[4] = DerivedStorage;
  block[5] = a1;
  block[6] = v7;
  block[7] = a2;
  dispatch_async(v8, block);
}

void endpointCluster_updateHealthState(const void *a1)
{
  uint64_t DerivedStorage;
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  const __CFArray *v8;
  CFIndex Count;
  __CFArray *Mutable;
  CFIndex v11;
  const void *v12;
  uint64_t CMBaseObject;
  unsigned int (*v14)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v15;
  const void *v16;
  const __CFString *v17;
  const void *v18;
  CFTypeRef v19;
  uint64_t v20;
  const __CFAllocator *alloc;
  CFTypeRef cf;
  int v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_DWORD *)(DerivedStorage + 348);
  CMBaseObjectGetDerivedStorage();
  v4 = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(v4 + 304) && !*(_DWORD *)(v4 + 320) && *(_BYTE *)(v4 + 369))
  {
    if (endpointCluster_isComplete()
      && (v3 == 2 || endpointCluster_desiredSubEndpointsActivated((uint64_t)a1)))
    {
      v6 = 2;
      v5 = 1;
    }
    else
    {
      v5 = 0;
      v6 = 1;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  if (v6 != *(_DWORD *)(DerivedStorage + 348))
  {
    CFRetain(a1);
    if ((v5 & 1) != 0)
      endpointCluster_sendActivationMetrics();
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_DWORD *)(DerivedStorage + 348) = v6;
    APSDispatchAsyncFHelper();
  }
  v7 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v8 = *(const __CFArray **)(v7 + 264);
  if (v8)
    Count = CFArrayGetCount(v8);
  else
    Count = 0;
  alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v19 = (CFTypeRef)CFStringCreateF();
    if (Count >= 1)
    {
      v11 = 0;
      v20 = *MEMORY[0x1E0CA43D8];
      v12 = (const void *)*MEMORY[0x1E0CA4920];
      do
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 264), v11);
        CMBaseObject = FigEndpointGetCMBaseObject();
        v14 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
        if (!v14 || v14(CMBaseObject, v20, alloc, &cf))
        {
          if (gLogCategory_APEndpointCluster <= 60
            && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          if (v12)
            v15 = CFRetain(v12);
          else
            v15 = 0;
          cf = v15;
        }
        if (!FigCFEqual() && !FigCFEqual())
          FigCFEqual();
        v23 = 0;
        APSGetFBOPropertyInt64();
        if (v23)
          APSLogErrorAt();
        v16 = (const void *)CFStringCreateF();
        CFArrayAppendValue(Mutable, v16);
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (v16)
          CFRelease(v16);
        ++v11;
      }
      while (Count != v11);
    }
    v17 = CFStringCreateByCombiningStrings(alloc, Mutable, CFSTR(", "));
    if (gLogCategory_APEndpointCluster > 50)
    {
      v18 = v19;
    }
    else
    {
      v18 = v19;
      if (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize())
      {
        CFStringGetLength(v17);
        LogPrintF();
      }
    }
  }
  else
  {
    APSLogErrorAt();
    v18 = 0;
    v17 = 0;
  }
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (v17)
    CFRelease(v17);
  if (v18)
    CFRelease(v18);
}

uint64_t APEndpointClusterRemoveSubEndpoint(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  CFIndex FirstIndexOfValue;
  uint64_t v8;
  int updated;
  uint64_t v10;
  uint64_t v11;
  CFRange v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (!a2)
  {
    APSLogErrorAt();
    v11 = 4294950576;
    goto LABEL_26;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (*(_QWORD *)(DerivedStorage + 8) && *(_DWORD *)DerivedStorage == 2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if ((*(_DWORD *)(DerivedStorage + 304) & 0xFFFFFFFE) == 2)
  {
    v5 = *(_QWORD *)(DerivedStorage + 248);
    if (!v5 || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
    {
      APSLogErrorAt();
      v11 = 4294949690;
      goto LABEL_26;
    }
    endpointCluster_deactivateSubEndpoint(a1, v5, (uint64_t)a2);
  }
  v6 = CMBaseObjectGetDerivedStorage();
  v13.length = CFArrayGetCount(*(CFArrayRef *)(v6 + 264));
  v13.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(v6 + 264), v13, a2);
  if (FirstIndexOfValue == -1)
  {
    APSLogErrorAt();
  }
  else
  {
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v6 + 264), FirstIndexOfValue);
    v8 = *(_QWORD *)(v6 + 312);
    if (v8)
    {
      MEMORY[0x1CAA400CC](*(_QWORD *)(v8 + 80));
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v8 + 88), a2);
      updated = completionCallbackContext_updateStateFromResponses(v8);
      MEMORY[0x1CAA400E4](*(_QWORD *)(v8 + 80));
      if (updated)
        endpointCluster_handleClusterFatalError(a1, -17606, 1);
    }
  }
  v10 = endpointCluster_updateFromSubEndpoint(a1, a2, 1, 1, 1, 1);
  if ((_DWORD)v10)
  {
    v11 = v10;
    APSLogErrorAt();
  }
  else
  {
    endpointCluster_failDelayManageSubEndpoint(a1, a2, 2);
    if (*(_QWORD *)(DerivedStorage + 360))
    {
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 360), a2);
    }
    endpointCluster_updateHealthState(a1);
    v11 = 0;
  }
LABEL_26:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  return v11;
}

void endpointCluster_deactivateSubEndpoint(const void *a1, uint64_t a2, uint64_t a3)
{
  _DWORD *DerivedStorage;
  void (*v7)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v10;
  int v11;
  CFTypeRef cf;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  v7 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 32) + 16);
  if (v7)
    v7(a2, a3, 0, 0, 0);
  endpointCluster_updateIdleState(a1);
  endpointCluster_updateEngagedState(a1);
  endpointCluster_updateSecondDisplayModeOnSubEndpointListChange((uint64_t)a1, a3, 0);
  if (*DerivedStorage != 3 && endpointCluster_getSubEndpointVolumeLeader((uint64_t)a1))
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v9 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v9 && (v9(CMBaseObject, *MEMORY[0x1E0CA44A0], *MEMORY[0x1E0C9AE00], &cf), (v10 = cf) != 0))
    {
      if (gLogCategory_APEndpointCluster <= 50)
      {
        if (gLogCategory_APEndpointCluster != -1 || (v11 = _LogCategory_Initialize(), v10 = cf, v11))
        {
          LogPrintF();
          v10 = cf;
        }
      }
      endpointCluster_postVolumeDidChange((uint64_t)a1, 0, v10);
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      endpointCluster_postIsMutedDidChange((uint64_t)a1, 0);
    }
    else
    {
      APSLogErrorAt();
    }
  }
  if (cf)
    CFRelease(cf);
}

void endpointCluster_Finalize()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 40);
  if (v1)
  {
    dispatch_release(v1);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  FigSimpleMutexDestroy();
  if (*(_DWORD *)(DerivedStorage + 304))
  {
    if (gLogCategory_APEndpointCluster <= 100)
      endpointCluster_Finalize_cold_1(gLogCategory_APEndpointCluster);
    __break(1u);
  }
  else
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v2 = *(const void **)(DerivedStorage + 616);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(DerivedStorage + 616) = 0;
    }
    v3 = *(const void **)(DerivedStorage + 520);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(DerivedStorage + 520) = 0;
    }
    v4 = *(const void **)(DerivedStorage + 528);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(DerivedStorage + 528) = 0;
    }
    v5 = *(const void **)(DerivedStorage + 536);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(DerivedStorage + 536) = 0;
    }
    v6 = *(const void **)(DerivedStorage + 264);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(DerivedStorage + 264) = 0;
    }
    v7 = *(const void **)(DerivedStorage + 216);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(DerivedStorage + 216) = 0;
    }
    v8 = *(const void **)(DerivedStorage + 224);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(DerivedStorage + 224) = 0;
    }
    v9 = *(const void **)(DerivedStorage + 296);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(DerivedStorage + 296) = 0;
    }
    v10 = *(const void **)(DerivedStorage + 272);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(DerivedStorage + 272) = 0;
    }
    v11 = *(const void **)(DerivedStorage + 280);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(DerivedStorage + 280) = 0;
    }
    v12 = *(const void **)(DerivedStorage + 288);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(DerivedStorage + 288) = 0;
    }
    v13 = *(const void **)(DerivedStorage + 624);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(DerivedStorage + 624) = 0;
    }
    v14 = *(const void **)(DerivedStorage + 632);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(DerivedStorage + 632) = 0;
    }
    v15 = *(const void **)(DerivedStorage + 16);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(DerivedStorage + 16) = 0;
    }
    v16 = *(const void **)(DerivedStorage + 32);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(DerivedStorage + 32) = 0;
    }
    v17 = *(const void **)(DerivedStorage + 8);
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(DerivedStorage + 8) = 0;
    }
    v18 = *(const void **)(DerivedStorage + 96);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(DerivedStorage + 96) = 0;
    }
    v19 = *(const void **)(DerivedStorage + 104);
    if (v19)
    {
      CFRelease(v19);
      *(_QWORD *)(DerivedStorage + 104) = 0;
    }
    v20 = *(const void **)(DerivedStorage + 192);
    if (v20)
    {
      CFRelease(v20);
      *(_QWORD *)(DerivedStorage + 192) = 0;
    }
  }
}

CFStringRef endpointCluster_CopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<APEndpointCluster %p>"), a1);
}

uint64_t endpointCluster_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFDictionary **a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  unsigned int v11;

  v11 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v9 = DerivedStorage;
    if (!endpointCluster_copyStaticProperty(a1, a2, a4, (int *)&v11))
    {
      MEMORY[0x1CAA400CC](*(_QWORD *)(v9 + 208));
      v11 = endpointCluster_copyPropertyInternal(a1, a2, a3, a4);
      MEMORY[0x1CAA400E4](*(_QWORD *)(v9 + 208));
    }
  }
  else
  {
    APSLogErrorAt();
    return -16720;
  }
  return v11;
}

uint64_t endpointCluster_SetProperty(uint64_t a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFIndex Count;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, const void *, const __CFBoolean *);
  uint64_t v13;
  int Value;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, const void *, const __CFBoolean *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a3)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  v7 = DerivedStorage;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  v8 = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44A0]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44B8]))
  {
    v9 = CMBaseObjectGetDerivedStorage();
    Count = CFArrayGetCount(*(CFArrayRef *)(v9 + 264));
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (Count >= 1)
    {
      if (endpointCluster_getSubEndpointVolumeLeader(a1))
      {
        CMBaseObject = FigEndpointGetCMBaseObject();
        v12 = *(uint64_t (**)(uint64_t, const void *, const __CFBoolean *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
        if (v12)
        {
          v13 = v12(CMBaseObject, a2, a3);
          if (!(_DWORD)v13)
            goto LABEL_27;
        }
        else
        {
          v13 = 4294954514;
        }
        APSLogErrorAt();
        if (gLogCategory_APEndpointCluster <= 90
          && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_26;
      }
      APSLogErrorAt();
    }
    v13 = 4294949690;
LABEL_26:
    APSLogErrorAt();
    goto LABEL_27;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA41C8]))
  {
    if (!*(_QWORD *)(v8 + 248))
    {
      APSLogErrorAt();
      v13 = 4294954509;
      goto LABEL_27;
    }
    v16 = FigEndpointGetCMBaseObject();
    v17 = *(uint64_t (**)(uint64_t, const void *, const __CFBoolean *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
    if (v17)
    {
      v13 = v17(v16, a2, a3);
      if (!(_DWORD)v13)
        goto LABEL_27;
    }
    else
    {
      v13 = 4294954514;
    }
    goto LABEL_26;
  }
  Value = CFBooleanGetValue(a3);
  if (*(unsigned __int8 *)(v8 + 437) != Value)
  {
    *(_BYTE *)(v8 + 437) = Value;
    v13 = endpointCluster_addOrRemoveLocalSubEndpointForEchoCancellationIfNeeded();
    if (!(_DWORD)v13)
      goto LABEL_27;
    goto LABEL_26;
  }
  v13 = 0;
LABEL_27:
  MEMORY[0x1CAA400E4](*(_QWORD *)(v7 + 208));
  return v13;
}

uint64_t endpointCluster_copyStaticProperty(uint64_t a1, const void *a2, _QWORD *a3, int *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  const __CFString **v9;
  const __CFString *v10;
  int v11;
  uint64_t result;
  uint64_t Int64;
  const __CFString **v14;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    APSLogErrorAt();
    v11 = -16720;
    goto LABEL_8;
  }
  v8 = DerivedStorage;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40B8]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4130]))
    goto LABEL_4;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4258]))
  {
LABEL_12:
    v10 = *(const __CFString **)(v8 + 16);
    goto LABEL_6;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42A8]))
  {
    v9 = (const __CFString **)MEMORY[0x1E0C9AE50];
    if (!*(_QWORD *)(v8 + 8))
      v9 = (const __CFString **)MEMORY[0x1E0C9AE40];
    goto LABEL_5;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42E8]))
  {
LABEL_18:
    v9 = (const __CFString **)MEMORY[0x1E0C9AE50];
    goto LABEL_5;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4310]))
  {
    v10 = *(const __CFString **)(v8 + 96);
    goto LABEL_6;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4318]))
  {
    v10 = CFSTR("Apple");
    goto LABEL_6;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4380]))
    goto LABEL_12;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4198]))
  {
    Int64 = CFNumberCreateInt64();
    *a3 = Int64;
    if (Int64)
    {
LABEL_26:
      v11 = 0;
      goto LABEL_8;
    }
LABEL_49:
    APSLogErrorAt();
    v11 = -16721;
    goto LABEL_8;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA41A0]))
  {
    v10 = (const __CFString *)APEndpointAPSClusterTypeToFigEndpointClusterType(*(_DWORD *)v8);
    if (!v10)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43D8]))
  {
    v9 = (const __CFString **)MEMORY[0x1E0CA48E0];
    v14 = (const __CFString **)MEMORY[0x1E0CA48D8];
    if (*(_DWORD *)v8 != 2)
      v14 = (const __CFString **)MEMORY[0x1E0CA48D0];
    if (*(_DWORD *)v8 != 1)
      v9 = v14;
    goto LABEL_5;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43E0]))
  {
    v15 = CFNumberCreateInt64();
    *a3 = v15;
    if (v15)
      goto LABEL_26;
    goto LABEL_49;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4400]))
    goto LABEL_18;
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4428]))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4460]))
    {
      v9 = (const __CFString **)MEMORY[0x1E0CA4958];
      goto LABEL_5;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4468]))
    {
      v9 = (const __CFString **)MEMORY[0x1E0CA4960];
      goto LABEL_5;
    }
    if (CFEqual(a2, CFSTR("IsClusterEndpoint")))
      goto LABEL_18;
    result = CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42D8]);
    if (!(_DWORD)result)
      return result;
  }
LABEL_4:
  v9 = (const __CFString **)MEMORY[0x1E0C9AE40];
LABEL_5:
  v10 = *v9;
LABEL_6:
  v10 = (const __CFString *)CFRetain(v10);
LABEL_7:
  v11 = 0;
  *a3 = v10;
LABEL_8:
  if (a4)
    *a4 = v11;
  return 1;
}

uint64_t endpointCluster_copyPropertyInternal(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFDictionary **a4)
{
  unsigned int *DerivedStorage;
  CFArrayRef Copy;
  uint64_t LocalRouteState;
  const void **v11;
  unsigned int v12;
  __CFDictionary *ClusterModelBasedOnClusterAdvertisementInfo;
  uint64_t v15;
  _BOOL4 v17;
  const void *v18;
  uint64_t v19;
  uint64_t Int64;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __CFDictionary *v26;

  DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  if (*((_BYTE *)DerivedStorage + 370)
    && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4260])
    && !CFEqual(a2, CFSTR("IsDissociated"))
    && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4348]))
  {
    return 4294950573;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43D0]))
  {
    Copy = CFArrayCreateCopy(a3, *((CFArrayRef *)DerivedStorage + 33));
    *a4 = Copy;
    if (Copy)
      return 0;
LABEL_43:
    APSLogErrorAt();
    return 4294950575;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4260]))
  {
    v11 = (const void **)MEMORY[0x1E0C9AE50];
    if (DerivedStorage[76] != 3)
      v11 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_21;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42D0]))
  {
    v11 = (const void **)MEMORY[0x1E0C9AE50];
    v12 = *((unsigned __int8 *)DerivedStorage + 372);
    goto LABEL_19;
  }
  if (CFEqual(a2, CFSTR("IsDissociated")))
  {
    v11 = (const void **)MEMORY[0x1E0C9AE50];
    v12 = *((unsigned __int8 *)DerivedStorage + 370);
    goto LABEL_19;
  }
  if (CFEqual(a2, CFSTR("IsInUse")))
  {
    v11 = (const void **)MEMORY[0x1E0C9AE50];
    v12 = DerivedStorage[76];
    goto LABEL_19;
  }
  if (CFEqual(a2, CFSTR("LocalRouteState")))
  {
    if (*((_QWORD *)DerivedStorage + 1))
    {
      v15 = CMBaseObjectGetDerivedStorage();
      v17 = (*(_QWORD *)(v15 + 328) & 0xFFFFFFFFFFFFFFDFLL) != 0 && *(_DWORD *)(v15 + 304) == 3;
      v18 = (const void *)*((_QWORD *)DerivedStorage + 51);
      v19 = APEndpointAPSClusterTypeToAPSLocalRouteType(*DerivedStorage);
      LocalRouteState = APEndpointCreateLocalRouteState(v17, v18, v19, a4);
      if (!(_DWORD)LocalRouteState)
        return LocalRouteState;
LABEL_34:
      APSLogErrorAt();
      return LocalRouteState;
    }
    return 4294954509;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40A8]))
  {
    Int64 = CFNumberCreateInt64();
    *a4 = (__CFDictionary *)Int64;
    if (Int64)
      return 0;
    goto LABEL_43;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4348]))
  {
    ClusterModelBasedOnClusterAdvertisementInfo = (__CFDictionary *)*((_QWORD *)DerivedStorage + 27);
    if (!ClusterModelBasedOnClusterAdvertisementInfo)
      ClusterModelBasedOnClusterAdvertisementInfo = (__CFDictionary *)*((_QWORD *)DerivedStorage + 28);
    goto LABEL_22;
  }
  if (CFEqual(a2, CFSTR("NeedsDiscovery")))
  {
    v11 = (const void **)MEMORY[0x1E0C9AE50];
    v12 = *((unsigned __int8 *)DerivedStorage + 371);
    goto LABEL_19;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40D0]))
  {
    v26 = 0;
    endpointCluster_copyPropertyFromSubEndpoint(a1, 1, (uint64_t)a2, (uint64_t)a3, (uint64_t)&v26);
    ClusterModelBasedOnClusterAdvertisementInfo = v26;
    if (!v26)
    {
      endpointCluster_copyPropertyFromSubEndpoint(a1, 0, (uint64_t)a2, (uint64_t)a3, (uint64_t)&v26);
      ClusterModelBasedOnClusterAdvertisementInfo = v26;
      if (!v26)
      {
        ClusterModelBasedOnClusterAdvertisementInfo = (__CFDictionary *)CFNumberCreateInt64();
        v26 = ClusterModelBasedOnClusterAdvertisementInfo;
        if (!ClusterModelBasedOnClusterAdvertisementInfo)
          goto LABEL_43;
      }
    }
LABEL_23:
    LocalRouteState = 0;
    *a4 = ClusterModelBasedOnClusterAdvertisementInfo;
    return LocalRouteState;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4128]))
  {
    v26 = 0;
    endpointCluster_copyPropertyFromSubEndpoint(a1, 1, (uint64_t)a2, (uint64_t)a3, (uint64_t)&v26);
    ClusterModelBasedOnClusterAdvertisementInfo = v26;
    if (v26)
      goto LABEL_23;
    endpointCluster_copyPropertyFromSubEndpoint(a1, 0, (uint64_t)a2, (uint64_t)a3, (uint64_t)&v26);
    ClusterModelBasedOnClusterAdvertisementInfo = v26;
    if (v26)
      goto LABEL_23;
    v11 = (const void **)MEMORY[0x1E0CA37E8];
    goto LABEL_21;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4220]))
  {
    v11 = (const void **)MEMORY[0x1E0C9AE50];
    v12 = *((unsigned __int8 *)DerivedStorage + 240);
LABEL_19:
    if (!v12)
      v11 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_21;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4228]))
  {
    ClusterModelBasedOnClusterAdvertisementInfo = (__CFDictionary *)*((_QWORD *)DerivedStorage + 29);
    if (!ClusterModelBasedOnClusterAdvertisementInfo)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4398]))
  {
    ClusterModelBasedOnClusterAdvertisementInfo = (__CFDictionary *)*((_QWORD *)DerivedStorage + 51);
    if (!ClusterModelBasedOnClusterAdvertisementInfo)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4458]))
  {
    if (*DerivedStorage == 1)
    {
      v21 = endpointCluster_copyPropertyFromSubEndpoint(a1, 0, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
      LocalRouteState = 0;
      if ((_DWORD)v21)
      {
        v22 = v21;
        APSLogErrorAt();
        return v22;
      }
      return LocalRouteState;
    }
    return 0;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4250])
    || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4170])
    || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4238])
    || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4268])
    || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42A0]))
  {
    return endpointCluster_copyPropertyFromSubEndpoint(a1, 0, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4290]))
  {
LABEL_74:
    v23 = endpointCluster_anySubEndpointReportsTrueForProperty();
    v11 = (const void **)MEMORY[0x1E0C9AE50];
    if (!v23)
      v11 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_21;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43B0]))
  {
    if (*((_QWORD *)DerivedStorage + 1))
      return 4294954509;
    goto LABEL_74;
  }
  if (CFEqual(a2, CFSTR("EndpointShowInfo")))
  {
    LocalRouteState = endpointCluster_copyShowInfoDictionary(a1, a4);
    if (!(_DWORD)LocalRouteState)
      return LocalRouteState;
    goto LABEL_34;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4180]))
  {
    LocalRouteState = endpointCluster_copyClusterCompositionAsArray(a1, (CFTypeRef *)a4);
    if (!(_DWORD)LocalRouteState)
      return LocalRouteState;
    goto LABEL_34;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4188]))
  {
    LocalRouteState = endpointCluster_copyClusterHierarchyAsArray(a1, (CFTypeRef *)a4);
    if (!(_DWORD)LocalRouteState)
      return LocalRouteState;
    goto LABEL_34;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4190]))
  {
    ClusterModelBasedOnClusterAdvertisementInfo = (__CFDictionary *)*((_QWORD *)DerivedStorage + 37);
    if (!ClusterModelBasedOnClusterAdvertisementInfo)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44A8]))
  {
    v11 = (const void **)MEMORY[0x1E0C9AE50];
LABEL_21:
    ClusterModelBasedOnClusterAdvertisementInfo = (__CFDictionary *)*v11;
LABEL_22:
    ClusterModelBasedOnClusterAdvertisementInfo = (__CFDictionary *)CFRetain(ClusterModelBasedOnClusterAdvertisementInfo);
    goto LABEL_23;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44B0]))
  {
    v24 = CFNumberCreateInt64();
    *a4 = (__CFDictionary *)v24;
    if (v24)
      return 0;
    goto LABEL_43;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44A0]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44B8]))
  {
    LocalRouteState = endpointCluster_copyPropertyFromSubEndpoint(a1, 2, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return LocalRouteState;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40C0]))
    return endpointCluster_copyAirPlayEndpointProperties(a1, a4);
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4338]))
  {
    ClusterModelBasedOnClusterAdvertisementInfo = (__CFDictionary *)endpointCluster_getClusterModelBasedOnClusterAdvertisementInfo(a1);
    if (!ClusterModelBasedOnClusterAdvertisementInfo)
    {
      ClusterModelBasedOnClusterAdvertisementInfo = (__CFDictionary *)endpointCluster_getClusterModelBasedOnClusterMembersModels();
      if (!ClusterModelBasedOnClusterAdvertisementInfo)
        goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA41B8]))
    return endpointCluster_copyMXDescriptor(a1, a4);
  v25 = *((_QWORD *)DerivedStorage + 31);
  if (!v25)
    return 4294954509;
  return FigEndpointCopyProperty(v25, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t endpointCluster_copyPropertyFromSubEndpoint(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264)) < 1
    || !endpointCluster_getSubEndpointWithPredicate(a1, a2))
  {
    return 4294949690;
  }
  CMBaseObject = FigEndpointGetCMBaseObject();
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v12)
  {
    v13 = v12(CMBaseObject, a3, a4, a5);
    if (!(_DWORD)v13)
      return v13;
  }
  else
  {
    v13 = 4294954514;
  }
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v13;
}

uint64_t endpointCluster_anySubEndpointReportsTrueForProperty()
{
  uint64_t DerivedStorage;
  CFIndex Count;
  CFIndex v2;
  CFIndex v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264));
  if (Count < 1)
    return 0;
  v2 = Count;
  v3 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 264), v3);
    if (APSGetFBOPropertyInt64())
      break;
    if (v2 == ++v3)
      return 0;
  }
  return 1;
}

uint64_t endpointCluster_copyShowInfoDictionary(uint64_t a1, __CFDictionary **a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const __CFAllocator *v6;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  uint64_t Count;
  uint64_t v18;
  __CFArray *v19;
  CFIndex i;
  uint64_t CMBaseObject;
  void (*v22)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef cf;
  void *value[2];
  __int16 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value[0] = 0;
  value[1] = 0;
  v26 = 0;
  if (a2)
  {
    v5 = DerivedStorage;
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      APSLogErrorAt();
      return 0;
    }
    v8 = Mutable;
    SNPrintF();
    CFDictionarySetCString();
    v9 = (const void *)*MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(v8, CFSTR("IsClusterEndpoint"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = (const void *)*MEMORY[0x1E0C9AE40];
    if (*(_QWORD *)(v5 + 8))
      v11 = v9;
    else
      v11 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(v8, CFSTR("IsLocal"), v11);
    if (*(_DWORD *)(v5 + 304) == 3)
      v12 = v9;
    else
      v12 = v10;
    CFDictionarySetValue(v8, CFSTR("Activated"), v12);
    v13 = *(const void **)(v5 + 216);
    if (!v13)
      v13 = *(const void **)(v5 + 224);
    CFDictionarySetValue(v8, CFSTR("Name"), v13);
    endpointCluster_copyClusterCompositionAsArray(a1, (CFTypeRef *)value);
    v14 = value[0];
    CFDictionarySetValue(v8, CFSTR("ClusterComposition"), value[0]);
    v15 = *(const void **)(v5 + 296);
    if (v15)
      CFDictionarySetValue(v8, CFSTR("ClusterLeaderUUID"), v15);
    CFDictionarySetValue(v8, CFSTR("PersistentGroupUUID"), *(const void **)(v5 + 16));
    v16 = (const void *)APSClusterTypeToDescriptionString();
    CFDictionarySetValue(v8, CFSTR("PersistentGroupType"), v16);
    CFDictionarySetInt64();
    Count = CFArrayGetCount(*(CFArrayRef *)(v5 + 264));
    if (Count <= 0)
    {
      *a2 = v8;
      if (!v14)
        return 0;
    }
    else
    {
      v18 = Count;
      v19 = CFArrayCreateMutable(v6, Count, MEMORY[0x1E0C9B378]);
      for (i = 0; i != v18; ++i)
      {
        cf = 0;
        CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 264), i);
        CMBaseObject = FigEndpointGetCMBaseObject();
        v22 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v22)
          v22(CMBaseObject, CFSTR("EndpointShowInfo"), v6, &cf);
        if (cf)
        {
          CFArrayAppendValue(v19, cf);
          if (cf)
            CFRelease(cf);
        }
      }
      CFDictionarySetValue(v8, CFSTR("SubEndpointShowInfoDicts"), v19);
      *a2 = v8;
      if (v19)
        CFRelease(v19);
      if (!v14)
        return 0;
    }
    CFRelease(v14);
    return 0;
  }
  APSLogErrorAt();
  return 4294950576;
}

uint64_t endpointCluster_copyClusterCompositionAsArray(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  const __CFAllocator *v5;
  CFIndex Count;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v8;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 280);
  if (v4)
  {
    *a2 = CFRetain(v4);
  }
  else
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Count = CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 272));
    Mutable = CFArrayCreateMutable(v5, Count, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v8 = Mutable;
      CFDictionaryApplyBlock();
      if (!*((_DWORD *)v13 + 6))
      {
        v9 = CFRetain(v8);
        *(_QWORD *)(DerivedStorage + 280) = v9;
        if (gLogCategory_APEndpointCluster <= 30)
        {
          if (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize())
            LogPrintF();
          v9 = *(CFTypeRef *)(DerivedStorage + 280);
        }
        if (v9)
          v9 = CFRetain(v9);
        *a2 = v9;
      }
      CFRelease(v8);
    }
    else
    {
      APSLogErrorAt();
      *((_DWORD *)v13 + 6) = -16721;
    }
  }
  v10 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v10;
}

uint64_t endpointCluster_copyClusterHierarchyAsArray(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  const __CFAllocator *v5;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  CFMutableArrayRef v8;
  CFMutableArrayRef v9;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 288);
  if (v4)
  {
    *a2 = CFRetain(v4);
  }
  else
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v7 = Mutable;
      v8 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]);
      if (v8)
      {
        v9 = v8;
        CFDictionaryApplyBlock();
        CFDictionaryApplyBlock();
        if (gLogCategory_APEndpointCluster <= 30
          && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (!*((_DWORD *)v14 + 6))
        {
          v10 = CFRetain(v9);
          *(_QWORD *)(DerivedStorage + 288) = v10;
          if (v10)
            v10 = CFRetain(v10);
          *a2 = v10;
        }
        CFRelease(v9);
      }
      else
      {
        APSLogErrorAt();
        *((_DWORD *)v14 + 6) = -16721;
      }
      CFRelease(v7);
    }
    else
    {
      APSLogErrorAt();
      *((_DWORD *)v14 + 6) = -16721;
    }
  }
  v11 = *((unsigned int *)v14 + 6);
  _Block_object_dispose(&v13, 8);
  return v11;
}

uint64_t endpointCluster_copyAirPlayEndpointProperties(uint64_t a1, __CFDictionary **a2)
{
  uint64_t DerivedStorage;
  const void *SubEndpointWithPredicate;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v8;
  uint64_t v9;
  __CFDictionary *MutableCopy;
  __CFDictionary *v11;
  const void *v12;
  const void *v13;
  uint64_t v14;
  CFTypeRef v16;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = 0;
  cf = 0;
  SubEndpointWithPredicate = endpointCluster_getSubEndpointWithPredicate(a1, 3);
  if (!SubEndpointWithPredicate)
  {
    SubEndpointWithPredicate = endpointCluster_getSubEndpointWithPredicate(a1, 1);
    if (!SubEndpointWithPredicate)
    {
      SubEndpointWithPredicate = endpointCluster_getSubEndpointWithPredicate(a1, 0);
      if (!SubEndpointWithPredicate)
      {
        v14 = 4294949690;
        goto LABEL_16;
      }
    }
  }
  CMBaseObject = FigEndpointGetCMBaseObject();
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v7)
  {
    v14 = 4294954514;
LABEL_15:
    APSLogErrorAt();
    goto LABEL_16;
  }
  v8 = *MEMORY[0x1E0C9AE00];
  v9 = v7(CMBaseObject, CFSTR("AirPlayClusterCompatibleEndpointProperties"), *MEMORY[0x1E0C9AE00], &cf);
  if ((_DWORD)v9)
  {
    v14 = v9;
    goto LABEL_15;
  }
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    v11 = MutableCopy;
    v12 = (const void *)*MEMORY[0x1E0C9AE40];
    if (*(_QWORD *)(DerivedStorage + 8))
      v13 = (const void *)*MEMORY[0x1E0C9AE50];
    else
      v13 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(MutableCopy, CFSTR("IsLocalDevice"), v13);
    if (*(_DWORD *)DerivedStorage == 2
      && !endpointCluster_isSubEndpointOfType(a1, (uint64_t)SubEndpointWithPredicate, *MEMORY[0x1E0CA48C0]))
    {
      endpointCluster_copyPropertyFromSubEndpoint(a1, 1, (uint64_t)CFSTR("AirPlayClusterCompatibleEndpointProperties"), v8, (uint64_t)&v16);
      FigCFDictionarySetValueFromKeyInDict();
      CFDictionarySetValue(v11, CFSTR("SupportsMultiplayer"), v12);
      CFDictionarySetValue(v11, CFSTR("SupportsLocalStereoPairClusterPersistentConnection"), v12);
    }
    v14 = 0;
    *a2 = v11;
  }
  else
  {
    APSLogErrorAt();
    v14 = 4294950575;
  }
LABEL_16:
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  return v14;
}

CFTypeRef endpointCluster_getClusterModelBasedOnClusterAdvertisementInfo(uint64_t a1)
{
  CFTypeRef result;
  CFTypeRef cf;

  CMBaseObjectGetDerivedStorage();
  cf = 0;
  endpointCluster_copyPropertyFromSubEndpoint(a1, 0, (uint64_t)CFSTR("ClusterModel"), *MEMORY[0x1E0C9AE00], (uint64_t)&cf);
  result = cf;
  if (cf)
  {
    CFGetInt64Ranged();
    CFRelease(cf);
    return (CFTypeRef)APSGetClusterModelNameForClusterTypeAndModel();
  }
  return result;
}

uint64_t endpointCluster_getClusterModelBasedOnClusterMembersModels()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return endpointCluster_getClusterModelBasedOnAnyMemberModels(*(_DWORD *)DerivedStorage, *(CFArrayRef *)(DerivedStorage + 264));
}

uint64_t endpointCluster_copyMXDescriptor(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  const void *v7;
  int v8;
  const void *v9;
  int v10;
  const void *v11;
  int v12;
  const void *v13;
  int v14;
  const void *v15;
  int v16;
  const void *v17;
  int v18;
  const void *v19;
  int v20;
  const void *v21;
  int v22;
  const void *v23;
  int v24;
  const void *v25;
  int v26;
  const void *v27;
  int v28;
  const void *v29;
  int v30;
  const void *v31;
  int v32;
  const void *v33;
  int v34;
  const void *v35;
  int v36;
  const void *v37;
  int v38;
  const void *v39;
  int v40;
  const void *v41;
  int v42;
  const void *v43;
  int v44;
  const void *v45;
  int v46;
  const void *v47;
  int v48;
  const void *v49;
  int v50;
  const void *v51;
  int v52;
  const void *v53;
  int v54;
  const void *v55;
  int v56;
  const void *v57;
  int v58;
  const void *v59;
  int v60;
  const void *v61;
  int v62;
  const void *v63;
  int v64;
  const void *v65;
  int v66;
  const void *v67;
  int v68;
  const void *v69;
  int v70;
  const void *v71;
  int v72;
  const void *v73;
  int v74;
  const void *v75;
  int v76;
  const void *v77;
  int v78;
  uint64_t result;
  CFTypeRef cf;
  int v81;

  CMBaseObjectGetDerivedStorage();
  v4 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    return 4294950575;
  }
  v6 = Mutable;
  v7 = (const void *)*MEMORY[0x1E0CA4348];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v7, &cf, &v81))
  {
    v8 = v81;
    if (!v81)
    {
LABEL_4:
      FigCFDictionarySetValue();
      goto LABEL_5;
    }
  }
  else
  {
    v8 = endpointCluster_copyPropertyInternal(a1, v7, v4, &cf);
    v81 = v8;
    if (!v8)
      goto LABEL_4;
  }
  if (v8 != -12784 && v8 != -12787)
    APSLogErrorAt();
LABEL_5:
  if (cf)
    CFRelease(cf);
  v9 = (const void *)*MEMORY[0x1E0CA4258];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v9, &cf, &v81))
  {
    v10 = v81;
    if (!v81)
    {
LABEL_9:
      FigCFDictionarySetValue();
      goto LABEL_10;
    }
  }
  else
  {
    v10 = endpointCluster_copyPropertyInternal(a1, v9, v4, &cf);
    v81 = v10;
    if (!v10)
      goto LABEL_9;
  }
  if (v10 != -12784 && v10 != -12787)
    APSLogErrorAt();
LABEL_10:
  if (cf)
    CFRelease(cf);
  v11 = (const void *)*MEMORY[0x1E0CA4310];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v11, &cf, &v81))
  {
    v12 = v81;
    if (!v81)
    {
LABEL_14:
      FigCFDictionarySetValue();
      goto LABEL_15;
    }
  }
  else
  {
    v12 = endpointCluster_copyPropertyInternal(a1, v11, v4, &cf);
    v81 = v12;
    if (!v12)
      goto LABEL_14;
  }
  if (v12 != -12784 && v12 != -12787)
    APSLogErrorAt();
LABEL_15:
  if (cf)
    CFRelease(cf);
  v13 = (const void *)*MEMORY[0x1E0CA4338];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v13, &cf, &v81))
  {
    v14 = v81;
    if (!v81)
    {
LABEL_19:
      FigCFDictionarySetValue();
      goto LABEL_20;
    }
  }
  else
  {
    v14 = endpointCluster_copyPropertyInternal(a1, v13, v4, &cf);
    v81 = v14;
    if (!v14)
      goto LABEL_19;
  }
  if (v14 != -12784 && v14 != -12787)
    APSLogErrorAt();
LABEL_20:
  if (cf)
    CFRelease(cf);
  v15 = (const void *)*MEMORY[0x1E0CA4318];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v15, &cf, &v81))
  {
    v16 = v81;
    if (!v81)
    {
LABEL_24:
      FigCFDictionarySetValue();
      goto LABEL_25;
    }
  }
  else
  {
    v16 = endpointCluster_copyPropertyInternal(a1, v15, v4, &cf);
    v81 = v16;
    if (!v16)
      goto LABEL_24;
  }
  if (v16 != -12784 && v16 != -12787)
    APSLogErrorAt();
LABEL_25:
  if (cf)
    CFRelease(cf);
  v17 = (const void *)*MEMORY[0x1E0CA4458];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v17, &cf, &v81))
  {
    v18 = v81;
    if (!v81)
    {
LABEL_29:
      FigCFDictionarySetValue();
      goto LABEL_30;
    }
  }
  else
  {
    v18 = endpointCluster_copyPropertyInternal(a1, v17, v4, &cf);
    v81 = v18;
    if (!v18)
      goto LABEL_29;
  }
  if (v18 != -12784 && v18 != -12787)
    APSLogErrorAt();
LABEL_30:
  if (cf)
    CFRelease(cf);
  v19 = (const void *)*MEMORY[0x1E0CA4448];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v19, &cf, &v81))
  {
    v20 = v81;
    if (!v81)
    {
LABEL_34:
      FigCFDictionarySetValue();
      goto LABEL_35;
    }
  }
  else
  {
    v20 = endpointCluster_copyPropertyInternal(a1, v19, v4, &cf);
    v81 = v20;
    if (!v20)
      goto LABEL_34;
  }
  if (v20 != -12784 && v20 != -12787)
    APSLogErrorAt();
LABEL_35:
  if (cf)
    CFRelease(cf);
  v21 = (const void *)*MEMORY[0x1E0CA4380];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v21, &cf, &v81))
  {
    v22 = v81;
    if (!v81)
    {
LABEL_39:
      FigCFDictionarySetValue();
      goto LABEL_40;
    }
  }
  else
  {
    v22 = endpointCluster_copyPropertyInternal(a1, v21, v4, &cf);
    v81 = v22;
    if (!v22)
      goto LABEL_39;
  }
  if (v22 != -12784 && v22 != -12787)
    APSLogErrorAt();
LABEL_40:
  if (cf)
    CFRelease(cf);
  v23 = (const void *)*MEMORY[0x1E0CA4190];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v23, &cf, &v81))
  {
    v24 = v81;
    if (!v81)
    {
LABEL_44:
      FigCFDictionarySetValue();
      goto LABEL_45;
    }
  }
  else
  {
    v24 = endpointCluster_copyPropertyInternal(a1, v23, v4, &cf);
    v81 = v24;
    if (!v24)
      goto LABEL_44;
  }
  if (v24 != -12784 && v24 != -12787)
    APSLogErrorAt();
LABEL_45:
  if (cf)
    CFRelease(cf);
  v25 = (const void *)*MEMORY[0x1E0CA4278];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v25, &cf, &v81))
  {
    v26 = v81;
    if (!v81)
    {
LABEL_49:
      FigCFDictionarySetValue();
      goto LABEL_50;
    }
  }
  else
  {
    v26 = endpointCluster_copyPropertyInternal(a1, v25, v4, &cf);
    v81 = v26;
    if (!v26)
      goto LABEL_49;
  }
  if (v26 != -12784 && v26 != -12787)
    APSLogErrorAt();
LABEL_50:
  if (cf)
    CFRelease(cf);
  v27 = (const void *)*MEMORY[0x1E0CA4198];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v27, &cf, &v81))
  {
    v28 = v81;
    if (!v81)
    {
LABEL_54:
      FigCFDictionarySetValue();
      goto LABEL_55;
    }
  }
  else
  {
    v28 = endpointCluster_copyPropertyInternal(a1, v27, v4, &cf);
    v81 = v28;
    if (!v28)
      goto LABEL_54;
  }
  if (v28 != -12784 && v28 != -12787)
    APSLogErrorAt();
LABEL_55:
  if (cf)
    CFRelease(cf);
  v29 = (const void *)*MEMORY[0x1E0CA41A0];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v29, &cf, &v81))
  {
    v30 = v81;
    if (!v81)
    {
LABEL_59:
      FigCFDictionarySetValue();
      goto LABEL_60;
    }
  }
  else
  {
    v30 = endpointCluster_copyPropertyInternal(a1, v29, v4, &cf);
    v81 = v30;
    if (!v30)
      goto LABEL_59;
  }
  if (v30 != -12784 && v30 != -12787)
    APSLogErrorAt();
LABEL_60:
  if (cf)
    CFRelease(cf);
  v31 = (const void *)*MEMORY[0x1E0CA4180];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v31, &cf, &v81))
  {
    v32 = v81;
    if (!v81)
    {
LABEL_64:
      FigCFDictionarySetValue();
      goto LABEL_65;
    }
  }
  else
  {
    v32 = endpointCluster_copyPropertyInternal(a1, v31, v4, &cf);
    v81 = v32;
    if (!v32)
      goto LABEL_64;
  }
  if (v32 != -12784 && v32 != -12787)
    APSLogErrorAt();
LABEL_65:
  if (cf)
    CFRelease(cf);
  v33 = (const void *)*MEMORY[0x1E0CA4188];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v33, &cf, &v81))
  {
    v34 = v81;
    if (!v81)
    {
LABEL_69:
      FigCFDictionarySetValue();
      goto LABEL_70;
    }
  }
  else
  {
    v34 = endpointCluster_copyPropertyInternal(a1, v33, v4, &cf);
    v81 = v34;
    if (!v34)
      goto LABEL_69;
  }
  if (v34 != -12784 && v34 != -12787)
    APSLogErrorAt();
LABEL_70:
  if (cf)
    CFRelease(cf);
  v35 = (const void *)*MEMORY[0x1E0CA4178];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v35, &cf, &v81))
  {
    v36 = v81;
    if (!v81)
    {
LABEL_74:
      FigCFDictionarySetValue();
      goto LABEL_75;
    }
  }
  else
  {
    v36 = endpointCluster_copyPropertyInternal(a1, v35, v4, &cf);
    v81 = v36;
    if (!v36)
      goto LABEL_74;
  }
  if (v36 != -12784 && v36 != -12787)
    APSLogErrorAt();
LABEL_75:
  if (cf)
    CFRelease(cf);
  v37 = (const void *)*MEMORY[0x1E0CA4268];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v37, &cf, &v81))
  {
    v38 = v81;
    if (!v81)
    {
LABEL_79:
      FigCFDictionarySetValue();
      goto LABEL_80;
    }
  }
  else
  {
    v38 = endpointCluster_copyPropertyInternal(a1, v37, v4, &cf);
    v81 = v38;
    if (!v38)
      goto LABEL_79;
  }
  if (v38 != -12784 && v38 != -12787)
    APSLogErrorAt();
LABEL_80:
  if (cf)
    CFRelease(cf);
  v39 = (const void *)*MEMORY[0x1E0CA4170];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v39, &cf, &v81))
  {
    v40 = v81;
    if (!v81)
    {
LABEL_84:
      FigCFDictionarySetValue();
      goto LABEL_85;
    }
  }
  else
  {
    v40 = endpointCluster_copyPropertyInternal(a1, v39, v4, &cf);
    v81 = v40;
    if (!v40)
      goto LABEL_84;
  }
  if (v40 != -12784 && v40 != -12787)
    APSLogErrorAt();
LABEL_85:
  if (cf)
    CFRelease(cf);
  v41 = (const void *)*MEMORY[0x1E0CA42E8];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v41, &cf, &v81))
  {
    v42 = v81;
    if (!v81)
    {
LABEL_89:
      FigCFDictionarySetValue();
      goto LABEL_90;
    }
  }
  else
  {
    v42 = endpointCluster_copyPropertyInternal(a1, v41, v4, &cf);
    v81 = v42;
    if (!v42)
      goto LABEL_89;
  }
  if (v42 != -12784 && v42 != -12787)
    APSLogErrorAt();
LABEL_90:
  if (cf)
    CFRelease(cf);
  v43 = (const void *)*MEMORY[0x1E0CA4428];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v43, &cf, &v81))
  {
    v44 = v81;
    if (!v81)
    {
LABEL_94:
      FigCFDictionarySetValue();
      goto LABEL_95;
    }
  }
  else
  {
    v44 = endpointCluster_copyPropertyInternal(a1, v43, v4, &cf);
    v81 = v44;
    if (!v44)
      goto LABEL_94;
  }
  if (v44 != -12784 && v44 != -12787)
    APSLogErrorAt();
LABEL_95:
  if (cf)
    CFRelease(cf);
  v45 = (const void *)*MEMORY[0x1E0CA4410];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v45, &cf, &v81))
  {
    v46 = v81;
    if (!v81)
    {
LABEL_99:
      FigCFDictionarySetValue();
      goto LABEL_100;
    }
  }
  else
  {
    v46 = endpointCluster_copyPropertyInternal(a1, v45, v4, &cf);
    v81 = v46;
    if (!v46)
      goto LABEL_99;
  }
  if (v46 != -12784 && v46 != -12787)
    APSLogErrorAt();
LABEL_100:
  if (cf)
    CFRelease(cf);
  v47 = (const void *)*MEMORY[0x1E0CA4330];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v47, &cf, &v81))
  {
    v48 = v81;
    if (!v81)
    {
LABEL_104:
      FigCFDictionarySetValue();
      goto LABEL_105;
    }
  }
  else
  {
    v48 = endpointCluster_copyPropertyInternal(a1, v47, v4, &cf);
    v81 = v48;
    if (!v48)
      goto LABEL_104;
  }
  if (v48 != -12784 && v48 != -12787)
    APSLogErrorAt();
LABEL_105:
  if (cf)
    CFRelease(cf);
  v49 = (const void *)*MEMORY[0x1E0CA4220];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v49, &cf, &v81))
  {
    v50 = v81;
    if (!v81)
    {
LABEL_109:
      FigCFDictionarySetValue();
      goto LABEL_110;
    }
  }
  else
  {
    v50 = endpointCluster_copyPropertyInternal(a1, v49, v4, &cf);
    v81 = v50;
    if (!v50)
      goto LABEL_109;
  }
  if (v50 != -12784 && v50 != -12787)
    APSLogErrorAt();
LABEL_110:
  if (cf)
    CFRelease(cf);
  v51 = (const void *)*MEMORY[0x1E0CA4290];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v51, &cf, &v81))
  {
    v52 = v81;
    if (!v81)
    {
LABEL_114:
      FigCFDictionarySetValue();
      goto LABEL_115;
    }
  }
  else
  {
    v52 = endpointCluster_copyPropertyInternal(a1, v51, v4, &cf);
    v81 = v52;
    if (!v52)
      goto LABEL_114;
  }
  if (v52 != -12784 && v52 != -12787)
    APSLogErrorAt();
LABEL_115:
  if (cf)
    CFRelease(cf);
  v53 = (const void *)*MEMORY[0x1E0CA43B0];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v53, &cf, &v81))
  {
    v54 = v81;
    if (!v81)
    {
LABEL_119:
      FigCFDictionarySetValue();
      goto LABEL_120;
    }
  }
  else
  {
    v54 = endpointCluster_copyPropertyInternal(a1, v53, v4, &cf);
    v81 = v54;
    if (!v54)
      goto LABEL_119;
  }
  if (v54 != -12784 && v54 != -12787)
    APSLogErrorAt();
LABEL_120:
  if (cf)
    CFRelease(cf);
  v55 = (const void *)*MEMORY[0x1E0CA4400];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v55, &cf, &v81))
  {
    v56 = v81;
    if (!v81)
    {
LABEL_124:
      FigCFDictionarySetValue();
      goto LABEL_125;
    }
  }
  else
  {
    v56 = endpointCluster_copyPropertyInternal(a1, v55, v4, &cf);
    v81 = v56;
    if (!v56)
      goto LABEL_124;
  }
  if (v56 != -12784 && v56 != -12787)
    APSLogErrorAt();
LABEL_125:
  if (cf)
    CFRelease(cf);
  v57 = (const void *)*MEMORY[0x1E0CA42A8];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v57, &cf, &v81))
  {
    v58 = v81;
    if (!v81)
    {
LABEL_129:
      FigCFDictionarySetValue();
      goto LABEL_130;
    }
  }
  else
  {
    v58 = endpointCluster_copyPropertyInternal(a1, v57, v4, &cf);
    v81 = v58;
    if (!v58)
      goto LABEL_129;
  }
  if (v58 != -12784 && v58 != -12787)
    APSLogErrorAt();
LABEL_130:
  if (cf)
    CFRelease(cf);
  v59 = (const void *)*MEMORY[0x1E0CA40B8];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v59, &cf, &v81))
  {
    v60 = v81;
    if (!v81)
    {
LABEL_134:
      FigCFDictionarySetValue();
      goto LABEL_135;
    }
  }
  else
  {
    v60 = endpointCluster_copyPropertyInternal(a1, v59, v4, &cf);
    v81 = v60;
    if (!v60)
      goto LABEL_134;
  }
  if (v60 != -12784 && v60 != -12787)
    APSLogErrorAt();
LABEL_135:
  if (cf)
    CFRelease(cf);
  v61 = (const void *)*MEMORY[0x1E0CA4228];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v61, &cf, &v81))
  {
    v62 = v81;
    if (!v81)
    {
LABEL_139:
      FigCFDictionarySetValue();
      goto LABEL_140;
    }
  }
  else
  {
    v62 = endpointCluster_copyPropertyInternal(a1, v61, v4, &cf);
    v81 = v62;
    if (!v62)
      goto LABEL_139;
  }
  if (v62 != -12784 && v62 != -12787)
    APSLogErrorAt();
LABEL_140:
  if (cf)
    CFRelease(cf);
  v63 = (const void *)*MEMORY[0x1E0CA40C8];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v63, &cf, &v81))
  {
    v64 = v81;
    if (!v81)
    {
LABEL_144:
      FigCFDictionarySetValue();
      goto LABEL_145;
    }
  }
  else
  {
    v64 = endpointCluster_copyPropertyInternal(a1, v63, v4, &cf);
    v81 = v64;
    if (!v64)
      goto LABEL_144;
  }
  if (v64 != -12784 && v64 != -12787)
    APSLogErrorAt();
LABEL_145:
  if (cf)
    CFRelease(cf);
  v65 = (const void *)*MEMORY[0x1E0CA40F0];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v65, &cf, &v81))
  {
    v66 = v81;
    if (!v81)
    {
LABEL_149:
      FigCFDictionarySetValue();
      goto LABEL_150;
    }
  }
  else
  {
    v66 = endpointCluster_copyPropertyInternal(a1, v65, v4, &cf);
    v81 = v66;
    if (!v66)
      goto LABEL_149;
  }
  if (v66 != -12784 && v66 != -12787)
    APSLogErrorAt();
LABEL_150:
  if (cf)
    CFRelease(cf);
  v67 = (const void *)*MEMORY[0x1E0CA42A0];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v67, &cf, &v81))
  {
    v68 = v81;
    if (!v81)
    {
LABEL_154:
      FigCFDictionarySetValue();
      goto LABEL_155;
    }
  }
  else
  {
    v68 = endpointCluster_copyPropertyInternal(a1, v67, v4, &cf);
    v81 = v68;
    if (!v68)
      goto LABEL_154;
  }
  if (v68 != -12784 && v68 != -12787)
    APSLogErrorAt();
LABEL_155:
  if (cf)
    CFRelease(cf);
  v69 = (const void *)*MEMORY[0x1E0CA4238];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v69, &cf, &v81))
  {
    v70 = v81;
    if (!v81)
    {
LABEL_159:
      FigCFDictionarySetValue();
      goto LABEL_160;
    }
  }
  else
  {
    v70 = endpointCluster_copyPropertyInternal(a1, v69, v4, &cf);
    v81 = v70;
    if (!v70)
      goto LABEL_159;
  }
  if (v70 != -12784 && v70 != -12787)
    APSLogErrorAt();
LABEL_160:
  if (cf)
    CFRelease(cf);
  v71 = (const void *)*MEMORY[0x1E0CA41D8];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v71, &cf, &v81))
  {
    v72 = v81;
    if (!v81)
    {
LABEL_164:
      FigCFDictionarySetValue();
      goto LABEL_165;
    }
  }
  else
  {
    v72 = endpointCluster_copyPropertyInternal(a1, v71, v4, &cf);
    v81 = v72;
    if (!v72)
      goto LABEL_164;
  }
  if (v72 != -12784 && v72 != -12787)
    APSLogErrorAt();
LABEL_165:
  if (cf)
    CFRelease(cf);
  v73 = (const void *)*MEMORY[0x1E0CA41F8];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v73, &cf, &v81))
  {
    v74 = v81;
    if (!v81)
    {
LABEL_169:
      FigCFDictionarySetValue();
      goto LABEL_170;
    }
  }
  else
  {
    v74 = endpointCluster_copyPropertyInternal(a1, v73, v4, &cf);
    v81 = v74;
    if (!v74)
      goto LABEL_169;
  }
  if (v74 != -12784 && v74 != -12787)
    APSLogErrorAt();
LABEL_170:
  if (cf)
    CFRelease(cf);
  v75 = (const void *)*MEMORY[0x1E0CA41F0];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpointCluster_copyStaticProperty(a1, v75, &cf, &v81))
  {
    v76 = v81;
    if (!v81)
    {
LABEL_174:
      FigCFDictionarySetValue();
      goto LABEL_175;
    }
  }
  else
  {
    v76 = endpointCluster_copyPropertyInternal(a1, v75, v4, &cf);
    v81 = v76;
    if (!v76)
      goto LABEL_174;
  }
  if (v76 != -12784 && v76 != -12787)
    APSLogErrorAt();
LABEL_175:
  if (cf)
    CFRelease(cf);
  v77 = (const void *)*MEMORY[0x1E0CA40C0];
  v81 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (!endpointCluster_copyStaticProperty(a1, v77, &cf, &v81))
  {
    v78 = endpointCluster_copyPropertyInternal(a1, v77, v4, &cf);
    v81 = v78;
    if (!v78)
      goto LABEL_179;
LABEL_325:
    if (v78 != -12784 && v78 != -12787)
      APSLogErrorAt();
    goto LABEL_180;
  }
  v78 = v81;
  if (v81)
    goto LABEL_325;
LABEL_179:
  FigCFDictionarySetValue();
LABEL_180:
  if (cf)
    CFRelease(cf);
  result = 0;
  *a2 = v6;
  return result;
}

const void *endpointCluster_getSubEndpointWithPredicate(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  const __CFArray *v5;
  uint64_t v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  uint64_t v11;
  const void *ValueAtIndex;
  uint64_t v13;
  CFIndex v14;
  CFIndex v15;
  CFIndex v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264)) < 1)
    return 0;
  if (a2 == 2)
    return endpointCluster_getSubEndpointVolumeLeader(a1);
  if (a2 == 1)
  {
    v7 = CMBaseObjectGetDerivedStorage();
    Count = CFArrayGetCount(*(CFArrayRef *)(v7 + 264));
    if (Count >= 1)
    {
      if (*(_DWORD *)v7 != 2)
      {
        v5 = *(const __CFArray **)(v7 + 264);
        return CFArrayGetValueAtIndex(v5, 0);
      }
      v9 = Count;
      v10 = 0;
      v11 = *MEMORY[0x1E0CA48C0];
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 264), v10);
        if (endpointCluster_isSubEndpointOfType(a1, (uint64_t)ValueAtIndex, v11))
          break;
        if (v9 == ++v10)
          return 0;
      }
      return ValueAtIndex;
    }
    return 0;
  }
  if (a2)
  {
    v13 = CMBaseObjectGetDerivedStorage();
    v14 = CFArrayGetCount(*(CFArrayRef *)(v13 + 264));
    if (v14 >= 1)
    {
      v15 = v14;
      v16 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v13 + 264), v16);
        if (APSGetFBOPropertyInt64())
          break;
        if (v15 == ++v16)
          return 0;
      }
      return ValueAtIndex;
    }
    return 0;
  }
  v5 = *(const __CFArray **)(DerivedStorage + 264);
  return CFArrayGetValueAtIndex(v5, 0);
}

const void *endpointCluster_getSubEndpointVolumeLeader(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  CFIndex Count;
  CFIndex v5;
  const void *ValueAtIndex;
  CFIndex v7;
  CFIndex v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 8);
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264));
  if (Count < 1)
    return 0;
  v5 = Count;
  if (v3 && *(_DWORD *)(DerivedStorage + 188) == 7)
    return *(const void **)(DerivedStorage + 8);
  if (*(_DWORD *)DerivedStorage != 1 && (*(_DWORD *)DerivedStorage != 2 || *(_QWORD *)(DerivedStorage + 24) != 3))
    goto LABEL_12;
  v7 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 264), v7);
    if (APSGetFBOPropertyInt64())
    {
      if (APSGetFBOPropertyInt64())
        break;
    }
    if (v5 == ++v7)
      goto LABEL_12;
  }
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!ValueAtIndex)
  {
LABEL_12:
    v8 = 0;
    v9 = *MEMORY[0x1E0CA48E8];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 264), v8);
      if (endpointCluster_isSubEndpointOfType(a1, (uint64_t)ValueAtIndex, v9))
      {
        if (APSGetFBOPropertyInt64())
          break;
      }
      if (v5 == ++v8)
        goto LABEL_16;
    }
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!ValueAtIndex)
    {
LABEL_16:
      if (gLogCategory_APEndpointCluster <= 30
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return 0;
    }
  }
  return ValueAtIndex;
}

BOOL endpointCluster_isSubEndpointOfType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CMBaseObject;
  unsigned int (*v4)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  _BOOL8 v5;
  CFTypeRef cf;

  cf = 0;
  if (!a2)
  {
    APSLogErrorAt();
    return 0;
  }
  if (a3)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v4 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v4 && !v4(CMBaseObject, *MEMORY[0x1E0CA43D8], *MEMORY[0x1E0C9AE00], &cf))
    {
      v5 = FigCFEqual() != 0;
      goto LABEL_11;
    }
    if (gLogCategory_APEndpointCluster <= 90
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    APSLogErrorAt();
  }
  v5 = 0;
LABEL_11:
  if (cf)
    CFRelease(cf);
  return v5;
}

void __endpointCluster_copyClusterCompositionAsArray_block_invoke(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  __CFDictionary *MutableCopy;
  __CFDictionary *v5;

  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a3);
  if (MutableCopy)
  {
    v5 = MutableCopy;
    CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA4458]);
    CFDictionaryRemoveValue(v5, CFSTR("TightSyncName"));
    CFDictionaryRemoveValue(v5, CFSTR("TightSyncModel"));
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), v5);
    CFRelease(v5);
  }
  else
  {
    APSLogErrorAt();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -16721;
  }
}

void __endpointCluster_copyClusterHierarchyAsArray_block_invoke(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  const __CFAllocator *v5;
  __CFDictionary *MutableCopy;
  const void *v7;
  const void *Value;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  __CFArray *v11;
  __CFArray *v12;
  __CFDictionary *v13;
  CFMutableDictionaryRef Mutable;
  uint64_t v15;
  int v16;

  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a3);
  v7 = (const void *)*MEMORY[0x1E0CA4458];
  Value = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA4458]);
  CFDictionaryGetValue(a3, CFSTR("TightSyncName"));
  CFDictionaryGetValue(a3, CFSTR("TightSyncModel"));
  if (!MutableCopy)
  {
    APSLogErrorAt();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -16721;
    return;
  }
  CFDictionaryRemoveValue(MutableCopy, v7);
  CFDictionaryRemoveValue(MutableCopy, CFSTR("TightSyncName"));
  CFDictionaryRemoveValue(MutableCopy, CFSTR("TightSyncModel"));
  CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA3850]);
  if (!Value)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), MutableCopy);
LABEL_11:
    v13 = MutableCopy;
LABEL_24:
    CFRelease(v13);
    return;
  }
  v9 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), Value);
  if (v9)
  {
    v10 = v9;
    CFRetain(v9);
    v11 = (__CFArray *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E0CA3888]);
    v12 = v11;
    if (v11)
    {
      CFRetain(v11);
      if (!CFDictionaryContainsKey(v10, (const void *)*MEMORY[0x1E0CA3858]))
        FigCFDictionarySetValue();
      if (gLogCategory_APEndpointCluster <= 30
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
LABEL_21:
      CFArrayAppendValue(v12, MutableCopy);
      goto LABEL_22;
    }
    APSLogErrorAt();
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v16 = -17606;
    goto LABEL_30;
  }
  Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -16721;
    goto LABEL_11;
  }
  v10 = Mutable;
  v12 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]);
  if (v12)
  {
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    FigCFDictionarySetValue();
    goto LABEL_21;
  }
  APSLogErrorAt();
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v16 = -16721;
LABEL_30:
  *(_DWORD *)(v15 + 24) = v16;
LABEL_22:
  CFRelease(MutableCopy);
  CFRelease(v10);
  if (v12)
  {
    v13 = v12;
    goto LABEL_24;
  }
}

void __endpointCluster_copyClusterHierarchyAsArray_block_invoke_2(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  const __CFArray *Value;

  if (!CFDictionaryContainsKey(theDict, (const void *)*MEMORY[0x1E0CA3858]))
  {
    Value = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA3888]);
    endpointCluster_getClusterModelBasedOnAnyMemberModels(1, Value);
    FigCFDictionarySetValue();
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), theDict);
}

uint64_t endpointCluster_getClusterModelBasedOnAnyMemberModels(int a1, CFArrayRef theArray)
{
  uint64_t v2;
  _QWORD v4[3];
  char v5;
  _QWORD v6[3];
  char v7;

  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x2000000000;
  v7 = 0;
  v4[0] = 0;
  v4[1] = v4;
  v4[2] = 0x2000000000;
  v5 = 0;
  if (theArray)
  {
    CFArrayGetCount(theArray);
    CFArrayApplyBlock();
  }
  v2 = APSGetClusterModelNameForClusterTypeAndModel();
  _Block_object_dispose(v4, 8);
  _Block_object_dispose(v6, 8);
  return v2;
}

CFTypeRef __endpointCluster_copyClusterHierarchyAsArray_block_invoke_3()
{
  CFTypeRef result;

  result = (CFTypeRef)FigCFDictionaryGetValue();
  if (result)
    return CFRetain(result);
  return result;
}

void __endpointCluster_getClusterModelBasedOnAnyMemberModels_block_invoke(_QWORD *a1)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)(*(uint64_t (**)(void))(a1[4] + 16))();
  if (v2)
  {
    v3 = v2;
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) |= CFStringHasPrefix(v2, CFSTR("AudioAccessory5"));
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) |= CFStringHasPrefix(v3, CFSTR("AudioAccessory6"));
    CFRelease(v3);
  }
}

uint64_t __endpointCluster_getClusterModelBasedOnClusterMembersModels_block_invoke()
{
  uint64_t CMBaseObject;
  void (*v1)(uint64_t, _QWORD, _QWORD, uint64_t *);
  uint64_t v3;

  v3 = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v1 = *(void (**)(uint64_t, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v1)
    return 0;
  v1(CMBaseObject, *MEMORY[0x1E0CA4338], *MEMORY[0x1E0C9AE00], &v3);
  return v3;
}

uint64_t endpointCluster_addOrRemoveLocalSubEndpointForEchoCancellationIfNeeded()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  const __CFAllocator *v3;
  CFIndex Count;
  __CFDictionary *MutableCopy;
  __CFDictionary *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, __CFDictionary *, _QWORD, _QWORD);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 8))
  {
    v1 = DerivedStorage;
    if (*(_DWORD *)DerivedStorage == 2
      && *(_DWORD *)(DerivedStorage + 188) == 4
      && *(_DWORD *)(DerivedStorage + 304) == 3)
    {
      v2 = *(_QWORD *)(DerivedStorage + 248);
      if (!v2)
      {
        APSLogErrorAt();
        return 4294949690;
      }
      if ((*(_BYTE *)(DerivedStorage + 328) & 0xA) != 0 && *(_BYTE *)(DerivedStorage + 437))
      {
        v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Count = CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 376));
        MutableCopy = CFDictionaryCreateMutableCopy(v3, Count, *(CFDictionaryRef *)(v1 + 376));
        if (!MutableCopy)
        {
          APSLogErrorAt();
          return 4294950575;
        }
        v6 = MutableCopy;
        CFDictionarySetValue(MutableCopy, CFSTR("EnableEchoCancellation"), (const void *)*MEMORY[0x1E0C9AE50]);
        v7 = *(_QWORD *)(v1 + 248);
        if (!v7 || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
          v7 = 0;
        v8 = *(_QWORD *)(v1 + 8);
        v9 = *(uint64_t (**)(uint64_t, uint64_t, __CFDictionary *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 32)
                                                                                          + 8);
        if (v9)
        {
          v10 = v9(v7, v8, v6, 0, 0);
          if (!(_DWORD)v10)
          {
LABEL_22:
            CFRelease(v6);
            return v10;
          }
        }
        else
        {
          v10 = 4294954514;
        }
        APSLogErrorAt();
        goto LABEL_22;
      }
      FigEndpointAggregateGetClassID();
      if (!CMBaseObjectIsMemberOfClass())
        v2 = 0;
      v11 = *(_QWORD *)(v1 + 8);
      v12 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 32)
                                                                            + 16);
      if (v12)
        v12(v2, v11, 0, 0, 0);
    }
  }
  return 0;
}

__CFString *endpointCluster_subEndpointSupportProtocolCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("APEndpointCluster <FigEndpointSubEndpointSupportProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t endpointCluster_CopySubEndpointProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t ProtocolVTable;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  v10 = *(_QWORD *)(DerivedStorage + 248);
  FigEndpointSubEndpointSupportProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (v12 = *(_QWORD *)(ProtocolVTable + 16)) == 0)
  {
    v15 = 4294954508;
LABEL_18:
    APSLogErrorAt();
    goto LABEL_19;
  }
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8);
  if (!v13)
  {
    v15 = 4294954514;
    goto LABEL_18;
  }
  v14 = v13(v10, a2, a3, a4, a5);
  v15 = v14;
  if ((_DWORD)v14 != -12784 && (_DWORD)v14 != -6727 && (_DWORD)v14 != 0)
    goto LABEL_18;
LABEL_19:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  return v15;
}

uint64_t endpointCluster_SetSubEndpointProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  v8 = *(_QWORD *)(DerivedStorage + 248);
  FigEndpointSubEndpointSupportProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (v10 = *(_QWORD *)(ProtocolVTable + 16)) == 0)
  {
    v13 = 4294954508;
LABEL_18:
    APSLogErrorAt();
    goto LABEL_19;
  }
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 16);
  if (!v11)
  {
    v13 = 4294954514;
    goto LABEL_18;
  }
  v12 = v11(v8, a2, a3, a4);
  v13 = v12;
  if ((_DWORD)v12 != -12784 && (_DWORD)v12 != -6727 && (_DWORD)v12 != 0)
    goto LABEL_18;
LABEL_19:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  return v13;
}

uint64_t endpointCluster_Activate(const void *a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  _DWORD *v10;
  uint64_t *v11;
  const __CFAllocator *v12;
  const void *v13;
  uint64_t AsCluster;
  uint64_t updated;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t Instance;
  uint64_t v29;
  uint64_t v30;
  CFMutableDictionaryRef Mutable;
  _QWORD *v32;
  _QWORD *v33;
  CFTypeRef v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD *);
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v43;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    CFStringGetTypeID();
    CFDictionaryGetTypedValue();
    CFDictionaryGetInt64();
    CFStringGetTypeID();
    CFDictionaryGetTypedValue();
    CFStringGetTypeID();
    CFDictionaryGetTypedValue();
  }
  v10 = &unk_1EF906000;
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (*(_BYTE *)(DerivedStorage + 370))
  {
    APSLogErrorAt();
    updated = 4294950573;
    goto LABEL_74;
  }
  v43 = a2;
  if (endpointCluster_usesPersistentConnection() && !CFDictionaryGetInt64())
  {
    if (*(_DWORD *)(DerivedStorage + 304))
    {
      updated = endpointCluster_updateFeaturesInternal(a1, 1, *(_QWORD *)(DerivedStorage + 328) | a2, a3, a4, a5);
      goto LABEL_55;
    }
    if (gLogCategory_APEndpointCluster > 50)
    {
      v41 = 0;
      updated = 4294951716;
LABEL_81:
      endpointCluster_CallActivationCompletionCallback(a1, *(_QWORD *)(DerivedStorage + 384), v41, updated, a4);
      goto LABEL_55;
    }
    if (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize())
      LogPrintF();
    updated = 4294951716;
LABEL_74:
    v40 = v10[928];
    if (v40 <= 50 && (v40 != -1 || _LogCategory_Initialize()))
      LogPrintF();
    if ((_DWORD)updated == -16727)
      v41 = a2;
    else
      v41 = 0;
    goto LABEL_81;
  }
  if (*(_DWORD *)(DerivedStorage + 304))
  {
    APSLogErrorAt();
    updated = 4294950569;
    goto LABEL_74;
  }
  v11 = (uint64_t *)(DerivedStorage + 248);
  if (*(_QWORD *)(DerivedStorage + 248))
  {
    APSLogErrorAt();
    updated = 4294949690;
    goto LABEL_74;
  }
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264)) <= 0)
  {
    APSLogErrorAt();
    updated = 4294895306;
    goto LABEL_74;
  }
  APSEventRecorderRecordEventWithFlags();
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v13 = *(const void **)(DerivedStorage + 216);
  if (!v13)
    v13 = *(const void **)(DerivedStorage + 224);
  AsCluster = APEndpointAggregateCreateAsCluster(*MEMORY[0x1E0C9AE00], *(const void **)(DerivedStorage + 16), v13, *(_QWORD *)(DerivedStorage + 8) != 0, (uint64_t)a1, *(const void **)(DerivedStorage + 32), *(const __CFDictionary **)(DerivedStorage + 104), (_QWORD *)(DerivedStorage + 248));
  if ((_DWORD)AsCluster)
  {
    updated = AsCluster;
LABEL_73:
    APSLogErrorAt();
    goto LABEL_74;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  *(_BYTE *)(DerivedStorage + 344) = 1;
  if (!a3)
    goto LABEL_22;
  if (CFDictionaryGetInt64())
  {
    *(_BYTE *)(DerivedStorage + 344) = 0;
    goto LABEL_23;
  }
  if (*(_BYTE *)(DerivedStorage + 344))
  {
LABEL_22:
    CMNotificationCenterGetDefaultLocalCenter();
    APSRemoteConfigGetShared();
    FigNotificationCenterAddWeakListener();
  }
LABEL_23:
  v16 = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)(v16 + 544) = 0u;
  *(_OWORD *)(v16 + 560) = 0u;
  *(_QWORD *)(v16 + 576) = 0;
  *(_OWORD *)(v16 + 584) = 0u;
  *(_OWORD *)(v16 + 600) = 0u;
  *(_QWORD *)(v16 + 544) = a1;
  *(_QWORD *)(v16 + 552) = endpointCluster_handleAuthRequiredInternal;
  *(_QWORD *)(v16 + 560) = endpointCluster_handleFailedInternal;
  *(_QWORD *)(v16 + 584) = a1;
  *(_QWORD *)(v16 + 600) = endpointCluster_handleDidReceiveDataFromCommChannelInternal;
  *(_QWORD *)(v16 + 608) = endpointCluster_handleDidCloseCommChannelInternal;
  v17 = *v11;
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v18)
    v18(v17, DerivedStorage + 544);
  if (*(_DWORD *)DerivedStorage == 3)
  {
    v19 = *v11;
    v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (v20)
      v20(v19, DerivedStorage + 584);
  }
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v21 = endpointCluster_updateActivationState(a1, (uint64_t)a3);
  if ((_DWORD)v21)
  {
    updated = v21;
    goto LABEL_74;
  }
  v22 = a5;
  if (a3 && !CFDictionaryGetInt64())
    APSRTCReportingAgentCreate();
  v23 = *(_QWORD *)(DerivedStorage + 384) + 1;
  *(_QWORD *)(DerivedStorage + 384) = v23;
  v24 = *(_QWORD *)(DerivedStorage + 8) != 0;
  v25 = *(_DWORD *)(DerivedStorage + 188);
  v26 = *(_DWORD *)DerivedStorage;
  v27 = *(_QWORD *)(DerivedStorage + 24);
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (gCompletionCallbackContextInitOnce != -1)
    dispatch_once_f(&gCompletionCallbackContextInitOnce, 0, (dispatch_function_t)_CompletionCallbackContextGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  v29 = Instance;
  if (!Instance)
  {
    updated = 4294960568;
    a2 = v43;
LABEL_64:
    v10 = (_DWORD *)&unk_1EF906000;
    goto LABEL_66;
  }
  *(_QWORD *)(Instance + 96) = 0;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_QWORD *)(Instance + 16) = CFRetain(a1);
  *(_BYTE *)(v29 + 24) = v24;
  *(_DWORD *)(v29 + 28) = v25;
  *(_DWORD *)(v29 + 32) = v26;
  *(_QWORD *)(v29 + 40) = v27;
  *(_QWORD *)(v29 + 48) = v23;
  a2 = v43;
  *(_QWORD *)(v29 + 56) = v43;
  *(_QWORD *)(v29 + 64) = a4;
  *(_QWORD *)(v29 + 72) = v22;
  v30 = FigSimpleMutexCreate();
  *(_QWORD *)(v29 + 80) = v30;
  if (!v30)
  {
    updated = 4294950575;
    goto LABEL_64;
  }
  Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(v29 + 88) = Mutable;
  v10 = &unk_1EF906000;
  if (!Mutable)
  {
    updated = 4294950575;
LABEL_66:
    APSLogErrorAt();
    v39 = v10[928];
    if (v39 <= 60 && (v39 != -1 || _LogCategory_Initialize()))
      LogPrintF();
    if (v29)
      CFRelease((CFTypeRef)v29);
    goto LABEL_73;
  }
  *(_QWORD *)(DerivedStorage + 312) = v29;
  CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264));
  CFArrayApplyBlock();
  v32 = malloc_type_calloc(1uLL, 0x18uLL, 0x60040A44E5E0CuLL);
  if (!v32)
  {
    APSLogErrorAt();
    updated = 4294950575;
    goto LABEL_74;
  }
  v33 = v32;
  *v32 = CFRetain(*(CFTypeRef *)(DerivedStorage + 248));
  v34 = *(CFTypeRef *)(DerivedStorage + 376);
  if (v34)
    v34 = CFRetain(v34);
  v33[1] = v34;
  v33[2] = CFRetain(*(CFTypeRef *)(DerivedStorage + 312));
  *(_DWORD *)(DerivedStorage + 304) = 1;
  endpointCluster_postIsInUseDidChangeNotification((uint64_t)a1, 1);
  *(_BYTE *)(DerivedStorage + 369) = endpointCluster_isEngaged();
  endpointCluster_updateHealthState(a1);
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_QWORD *)(DerivedStorage + 328) = v43;
  *(_BYTE *)(DerivedStorage + 436) = 0;
  v35 = *(_QWORD *)(DerivedStorage + 248);
  v36 = *(_QWORD *)(DerivedStorage + 376);
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 8);
  if (v37)
    v37(v35, v43, v36, endpointCluster_handleInternalAggregateActivationCompletionCallback, v33);
  updated = 0;
  *(_BYTE *)(DerivedStorage + 256) = 1;
LABEL_55:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  return updated;
}

uint64_t endpointCluster_Deactivate(const void *a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  CFTypeRef v14;
  uint64_t v15;
  uint64_t updated;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (!*(_DWORD *)(DerivedStorage + 304))
  {
    if (!*(_BYTE *)(DerivedStorage + 416)
      && !*(_BYTE *)(DerivedStorage + 436)
      && gLogCategory_APEndpointCluster <= 90
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_36;
  }
  if (!*(_QWORD *)(DerivedStorage + 248))
  {
    APSLogErrorAt();
LABEL_36:
    updated = 4294951716;
LABEL_38:
    endpointCluster_CallCompletionCallback(a1, *(_QWORD *)(DerivedStorage + 384), *(_QWORD *)(DerivedStorage + 328), updated, a3);
    if (*(_BYTE *)(DerivedStorage + 416))
    {
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      endpointCluster_updateClusterChangeProgress((uint64_t)a1, 1, 0);
    }
    goto LABEL_25;
  }
  endpointCluster_sendActivationMetrics();
  if (!*(_QWORD *)(DerivedStorage + 8))
    goto LABEL_22;
  if (CFDictionaryGetInt64())
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (*(_DWORD *)DerivedStorage == 1 && *(_BYTE *)(DerivedStorage + 184))
    {
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      endpointCluster_updateStatus(a1, -71993, 1, 0);
      v11 = 0;
      goto LABEL_23;
    }
LABEL_22:
    v11 = 1;
LABEL_23:
    v12 = malloc_type_calloc(1uLL, 0x38uLL, 0x10A0040069F93ABuLL);
    if (v12)
    {
      v13 = (uint64_t)v12;
      *v12 = CFRetain(a1);
      v14 = CFRetain(*(CFTypeRef *)(DerivedStorage + 248));
      *(_QWORD *)(v13 + 24) = *(_QWORD *)(DerivedStorage + 384);
      v15 = *(_QWORD *)(DerivedStorage + 328);
      *(_QWORD *)(v13 + 8) = v14;
      *(_QWORD *)(v13 + 16) = v15;
      *(_BYTE *)(v13 + 32) = *(_BYTE *)(DerivedStorage + 416);
      *(_BYTE *)(v13 + 33) = *(_BYTE *)(DerivedStorage + 436);
      *(_BYTE *)(v13 + 34) = v11;
      *(_QWORD *)(v13 + 40) = a3;
      *(_QWORD *)(v13 + 48) = a4;
      endpointCluster_cancelPendingUpdateFeatureRequests();
      endpointCluster_resetActivationState(a1, (uint64_t)a2, (uint64_t)endpointCluster_handleInternalAggregateDeactivationCompletionCallback, v13);
      updated = 0;
      goto LABEL_25;
    }
    APSLogErrorAt();
    updated = 4294950575;
    goto LABEL_38;
  }
  v9 = *(_QWORD *)(DerivedStorage + 328);
  if (!endpointCluster_usesPersistentConnection())
    goto LABEL_22;
  v10 = (v9 & (32 * (*(_DWORD *)DerivedStorage == 2)));
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  updated = endpointCluster_updateFeaturesInternal(a1, 2, v10, a2, a3, a4);
LABEL_25:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  return updated;
}

uint64_t endpointCluster_Dissociate()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 8))
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  *(_BYTE *)(DerivedStorage + 370) = 1;
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    APSClusterTypeToDescriptionString();
    LogPrintF();
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  return 0;
}

uint64_t endpointCluster_SetDelegate(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  __int128 v9;
  _OWORD v10[2];
  uint64_t v11;

  if (!a2)
  {
    v6 = endpointCluster_SetDelegateRouting(a1, 0);
    if ((_DWORD)v6)
    {
      v5 = v6;
    }
    else
    {
      v5 = endpointCluster_SetDelegateRemoteControl(a1, 0);
      if (!(_DWORD)v5)
        return v5;
    }
LABEL_10:
    APSLogErrorAt();
    return v5;
  }
  v3 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v3;
  v11 = *(_QWORD *)(a2 + 32);
  v8[1] = 0;
  v8[0] = *(_QWORD *)&v10[0];
  v9 = *(_OWORD *)(a2 + 48);
  v4 = endpointCluster_SetDelegateRouting(a1, (uint64_t)v10);
  if ((_DWORD)v4)
  {
    v5 = v4;
    goto LABEL_10;
  }
  v5 = endpointCluster_SetDelegateRemoteControl(a1, (uint64_t)v8);
  if ((_DWORD)v5)
    goto LABEL_10;
  return v5;
}

uint64_t endpointCluster_SetDelegateRouting(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (*(_BYTE *)(DerivedStorage + 370))
  {
    APSLogErrorAt();
    a2 = 4294950573;
  }
  else
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v4 = *(const void **)(DerivedStorage + 520);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(DerivedStorage + 520) = 0;
    }
    v5 = (_OWORD *)(DerivedStorage + 448);
    if (a2)
    {
      v6 = *(_OWORD *)a2;
      v7 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(DerivedStorage + 480) = *(_QWORD *)(a2 + 32);
      *v5 = v6;
      *(_OWORD *)(DerivedStorage + 464) = v7;
      a2 = 0;
      *(_QWORD *)(DerivedStorage + 520) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    }
    else
    {
      *(_QWORD *)(DerivedStorage + 480) = 0;
      *v5 = 0u;
      *(_OWORD *)(DerivedStorage + 464) = 0u;
    }
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  return a2;
}

uint64_t endpointCluster_SetDelegateRemoteControl(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  _OWORD *v5;
  __int128 v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (*(_BYTE *)(DerivedStorage + 370))
  {
    APSLogErrorAt();
    a2 = 4294950573;
  }
  else
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v4 = *(const void **)(DerivedStorage + 528);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(DerivedStorage + 528) = 0;
    }
    v5 = (_OWORD *)(DerivedStorage + 488);
    if (a2)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *v5 = *(_OWORD *)a2;
      *(_OWORD *)(DerivedStorage + 504) = v6;
      a2 = 0;
      *(_QWORD *)(DerivedStorage + 528) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    }
    else
    {
      *v5 = 0u;
      *(_OWORD *)(DerivedStorage + 504) = 0u;
    }
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  return a2;
}

uint64_t endpointCluster_CreatePlaybackSession(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (*(_DWORD *)(DerivedStorage + 304) != 3)
  {
    APSLogErrorAt();
    v6 = 4294949690;
    goto LABEL_7;
  }
  v4 = *(_QWORD *)(DerivedStorage + 248);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (!v5)
  {
    v6 = 4294954514;
LABEL_6:
    APSLogErrorAt();
    goto LABEL_7;
  }
  v6 = v5(v4, a2);
  if ((_DWORD)v6)
    goto LABEL_6;
LABEL_7:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  return v6;
}

uint64_t endpointCluster_UpdateFeatures(const void *a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t updated;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  updated = endpointCluster_updateFeaturesInternal(a1, 0, a2, a3, a4, a5);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  return updated;
}

BOOL endpointCluster_usesPersistentConnection()
{
  uint64_t DerivedStorage;
  int v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 8))
    return 0;
  v1 = *(_DWORD *)(DerivedStorage + 188);
  if (v1 != 4)
  {
    if (v1 == 7 && *(_DWORD *)DerivedStorage == 1)
      return *(_BYTE *)(DerivedStorage + 184) != 0;
    return 0;
  }
  return 1;
}

uint64_t endpointCluster_updateFeaturesInternal(const void *a1, int a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage;
  int v13;
  uint64_t updated;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, const __CFDictionary *, _QWORD, _QWORD *);
  uint64_t v20;
  CFIndex Count;
  uint64_t v22;
  CFIndex v23;
  _QWORD *ValueAtIndex;
  int v25;
  uint64_t v26;
  uint64_t Instance;
  uint64_t v28;
  CFDictionaryRef Copy;
  uint64_t v30;
  uint64_t v32;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v13 = *(_DWORD *)(DerivedStorage + 304);
  if (!v13)
    goto LABEL_64;
  if (*(_BYTE *)(DerivedStorage + 416) || *(_BYTE *)(DerivedStorage + 436))
  {
    if (gLogCategory_APEndpointCluster > 90)
    {
      v32 = 0;
      v30 = 4294951716;
LABEL_85:
      endpointCluster_CallCompletionCallback(a1, *(_QWORD *)(DerivedStorage + 384), v32, v30, a5);
      endpointCluster_updateFeaturesFromSavedIfNeeded(a1);
      return v30;
    }
    if (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize())
      LogPrintF();
    v30 = 4294951716;
    goto LABEL_78;
  }
  if (v13 == 3)
  {
    if (*(_QWORD *)(DerivedStorage + 328) == a3)
    {
      APSLogErrorAt();
      if (a2 == 2)
        v30 = 4294951716;
      else
        v30 = 4294950569;
      goto LABEL_78;
    }
    if (*(_QWORD *)(DerivedStorage + 248))
    {
      if (a2 != 1)
      {
LABEL_14:
        *(_QWORD *)(DerivedStorage + 328) = a3;
        v15 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A00407034790EuLL);
        if (v15)
        {
          v16 = v15;
          *v15 = a1;
          CFRetain(a1);
          v17 = *(_QWORD *)(DerivedStorage + 384);
          v16[1] = a3;
          v16[2] = v17;
          v16[3] = a5;
          v16[4] = a6;
          endpointCluster_addOrRemoveLocalSubEndpointForEchoCancellationIfNeeded();
          v18 = *(_QWORD *)(DerivedStorage + 248);
          v19 = *(void (**)(uint64_t, uint64_t, const __CFDictionary *, _QWORD, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 80);
          if (v19)
            v19(v18, a3, a4, endpointCluster_handleAggregateEndpointUpdateFeaturesCompleted, v16);
          return 0;
        }
        APSLogErrorAt();
        v30 = 4294950575;
        goto LABEL_78;
      }
      updated = endpointCluster_updateActivationState(a1, (uint64_t)a4);
      if (!(_DWORD)updated)
      {
        a4 = *(const __CFDictionary **)(DerivedStorage + 376);
        goto LABEL_14;
      }
      v30 = updated;
LABEL_78:
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if ((_DWORD)v30 == -16727)
        v32 = a3;
      else
        v32 = 0;
      goto LABEL_85;
    }
LABEL_64:
    APSLogErrorAt();
    v30 = 4294949690;
    goto LABEL_78;
  }
  v20 = CMBaseObjectGetDerivedStorage();
  Count = CFArrayGetCount(*(CFArrayRef *)(v20 + 624));
  if (Count <= 0)
  {
    v25 = gLogCategory_APEndpointCluster;
  }
  else
  {
    v22 = a6;
    v23 = Count - 1;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v20 + 624), Count - 1);
    v25 = gLogCategory_APEndpointCluster;
    if (gLogCategory_APEndpointCluster <= 40)
    {
      if (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize())
        LogPrintF();
      v25 = gLogCategory_APEndpointCluster;
    }
    if (a2 == 2 && *((_DWORD *)ValueAtIndex + 4) == 1)
    {
      if (v25 <= 50)
      {
        if (v25 != -1 || _LogCategory_Initialize())
          LogPrintF();
        if (gLogCategory_APEndpointCluster <= 50
          && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      endpointCluster_CallCompletionCallback(a1, *(_QWORD *)(v20 + 384), 0, 4294949692, ValueAtIndex[5]);
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      endpointCluster_CallCompletionCallback(a1, *(_QWORD *)(v20 + 384), a3, 0, a5);
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v20 + 624), v23);
      return 0;
    }
    a6 = v22;
  }
  if (v25 <= 50 && (v25 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v26 = CMBaseObjectGetDerivedStorage();
  if (gUpdateFeaturesRequestInitOnce != -1)
    dispatch_once_f(&gUpdateFeaturesRequestInitOnce, 0, (dispatch_function_t)_UpdateFeaturesRequestGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  v28 = Instance;
  if (!Instance)
  {
    v30 = 4294960568;
    goto LABEL_71;
  }
  *(_QWORD *)(Instance + 48) = 0;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_QWORD *)(v28 + 24) = a3;
  if (a4)
  {
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4);
    *(_QWORD *)(v28 + 32) = Copy;
    if (!Copy)
    {
      v30 = 4294950575;
LABEL_71:
      APSLogErrorAt();
      if (gLogCategory_APEndpointCluster <= 90
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v28)
        CFRelease((CFTypeRef)v28);
      APSLogErrorAt();
      goto LABEL_78;
    }
  }
  *(_DWORD *)(v28 + 16) = a2;
  *(_QWORD *)(v28 + 40) = a5;
  *(_QWORD *)(v28 + 48) = a6;
  CFArrayAppendValue(*(CFMutableArrayRef *)(v26 + 624), (const void *)v28);
  CFRelease((CFTypeRef)v28);
  return 0;
}

void endpointCluster_forwardInternalAggregateNotification()
{
  uint64_t DerivedStorage;
  uint64_t MutableCopy;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    v2 = (const void *)MutableCopy;
    if (FigCFEqual())
    {
      MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
      CFDictionarySetInt64();
      MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v2);
  }
  else
  {
    APSLogErrorAt();
  }
}

void endpointCluster_handleSubEndpointEngagedStateChanged(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (*(_QWORD *)(DerivedStorage + 248) != a4)
    endpointCluster_updateIdleState(a2);
  endpointCluster_updateEngagedState(a2);
  JUMPOUT(0x1CAA400E4);
}

uint64_t endpointCluster_handleRemoteConfigChangedNotification()
{
  return CMBaseObjectGetDerivedStorage();
}

uint64_t endpointCluster_updateActivationState(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t MutableCopy;
  __CFDictionary *v6;
  const void *TypedValue;
  const void *v8;
  const void *v9;
  uint64_t Int64;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    v6 = (__CFDictionary *)MutableCopy;
    if (a2)
      CFDictionaryMergeDictionary();
    CFStringGetTypeID();
    TypedValue = (const void *)CFDictionaryGetTypedValue();
    CFStringGetTypeID();
    v8 = (const void *)CFDictionaryGetTypedValue();
    CFStringGetTypeID();
    v9 = (const void *)CFDictionaryGetTypedValue();
    Int64 = CFDictionaryGetInt64();
    v11 = (const void *)*MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(v6, CFSTR("NoIdleTimeout"), (const void *)*MEMORY[0x1E0C9AE50]);
    if (*(_DWORD *)DerivedStorage == 2 && !*(_QWORD *)(DerivedStorage + 8))
      CFDictionarySetValue(v6, CFSTR("IsRemoteHTGroup"), v11);
    CFDictionarySetInt64();
    if (*(_QWORD *)(DerivedStorage + 8))
      v12 = v11;
    else
      v12 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(v6, CFSTR("IsPartOfLocalCluster"), v12);
    CFDictionarySetValue(v6, CFSTR("Container"), a1);
    v13 = *(const void **)(DerivedStorage + 376);
    *(_QWORD *)(DerivedStorage + 376) = v6;
    CFRetain(v6);
    if (v13)
      CFRelease(v13);
    v14 = *(const void **)(DerivedStorage + 400);
    *(_QWORD *)(DerivedStorage + 400) = v8;
    if (v8)
      CFRetain(v8);
    if (v14)
      CFRelease(v14);
    v15 = *(const void **)(DerivedStorage + 408);
    *(_QWORD *)(DerivedStorage + 408) = v9;
    if (v9)
      CFRetain(v9);
    if (v15)
      CFRelease(v15);
    *(_BYTE *)(DerivedStorage + 372) = Int64 != 0;
    if (Int64)
    {
      *(_QWORD *)(DerivedStorage + 424) = 1;
      *(_DWORD *)(DerivedStorage + 432) = 0;
    }
    v16 = *(const void **)(DerivedStorage + 392);
    *(_QWORD *)(DerivedStorage + 392) = TypedValue;
    if (TypedValue)
      CFRetain(TypedValue);
    if (v16)
      CFRelease(v16);
    CFRelease(v6);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294950575;
  }
}

void endpointCluster_postIsInUseDidChangeNotification(uint64_t a1, int a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v4;
  const void **v5;

  CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = Mutable;
    v5 = (const void **)MEMORY[0x1E0C9AE40];
    if (a2)
      v5 = (const void **)MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, CFSTR("IsInUse"), *v5);
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v4);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t endpointCluster_isEngaged()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((!*(_QWORD *)(DerivedStorage + 8) || endpointCluster_usesPersistentConnection())
    && *(_DWORD *)(DerivedStorage + 304)
    || !endpointCluster_isIdle())
  {
    return 1;
  }
  result = *(_QWORD *)(DerivedStorage + 248);
  if (result)
    return APSGetFBOPropertyInt64() != 0;
  return result;
}

void endpointCluster_handleInternalAggregateActivationCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  const void *v7;
  uint64_t DerivedStorage;
  unsigned int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  const void *v14;
  int v15;
  const void *v17;
  const void *v18;

  v7 = *(const void **)(*(_QWORD *)(a5 + 16) + 16);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = *(_DWORD *)(DerivedStorage + 112);
  if (v9)
  {
    if (gLogCategory_APEndpointCluster <= 50)
    {
      if (gLogCategory_APEndpointCluster != -1
        || (v10 = _LogCategory_Initialize(), v9 = *(_DWORD *)(DerivedStorage + 112), v10))
      {
        LogPrintF();
        v9 = *(_DWORD *)(DerivedStorage + 112);
      }
    }
    sleep(v9);
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (a4)
    *(_BYTE *)(DerivedStorage + 256) = 0;
  v11 = *(_QWORD *)(a5 + 16);
  if (*(_QWORD *)(v11 + 48) != *(_QWORD *)(DerivedStorage + 384))
  {
    v13 = 4294949692;
    goto LABEL_16;
  }
  v12 = *(_DWORD *)(DerivedStorage + 304);
  if (!a4 && v12 == 1)
  {
    *(_DWORD *)(DerivedStorage + 304) = 2;
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264)) > 0)
    {
      v14 = *(const void **)(DerivedStorage + 8);
      if (v14)
      {
        v15 = *(_DWORD *)(DerivedStorage + 188);
        if (v15 == 4)
        {
          endpointCluster_manageActivationTimeoutTimer(v7, *(const void **)(a5 + 16));
          v14 = *(const void **)(DerivedStorage + 8);
        }
        else if (v15 != 7 || *(_DWORD *)DerivedStorage != 2)
        {
          goto LABEL_28;
        }
        endpointCluster_handleSubEndpointResult(v7, *(_QWORD *)(a5 + 16), v14, 0, 0);
      }
LABEL_28:
      endpointCluster_activateSubEndpointsIfNeeded(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 16));
      goto LABEL_29;
    }
    APSLogErrorAt();
    v11 = *(_QWORD *)(a5 + 16);
    v13 = 4294949690;
LABEL_16:
    CompletionCallbackContextSetError(v11, v13);
  }
  if (v12 == 1)
    v13 = a4;
  else
    v13 = 4294949692;
  if ((_DWORD)v13)
    goto LABEL_16;
LABEL_29:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  CFRelease(*(CFTypeRef *)a5);
  v17 = *(const void **)(a5 + 8);
  if (v17)
    CFRelease(v17);
  v18 = *(const void **)(a5 + 16);
  if (v18)
    CFRelease(v18);
  free((void *)a5);
}

void endpointCluster_CallActivationCompletionCallback(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((_DWORD)a4)
  {
    endpointCluster_cancelPendingUpdateFeatureRequests();
    endpointCluster_resetActivationState(a1, 0, 0, 0);
  }
  endpointCluster_CallCompletionCallback(a1, a2, a3, a4, a5);
}

void endpointCluster_handleAggregateEndpointUpdateFeaturesCompleted(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a5[3])
  {
    CFRetain((CFTypeRef)*a5);
    APSDispatchAsyncFHelper();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  endpointCluster_updateFeaturesFromSavedIfNeeded(*a5);
  if (*(_QWORD *)(DerivedStorage + 8))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  CFRelease((CFTypeRef)*a5);
  free(a5);
}

void endpointCluster_CallCompletionCallback(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CMBaseObjectGetDerivedStorage();
  endpointCluster_sendActivationMetrics();
  if (a5)
  {
    CFRetain(a1);
    APSDispatchAsyncFHelper();
  }
}

void endpointCluster_updateFeaturesFromSavedIfNeeded(const void *a1)
{
  uint64_t DerivedStorage;
  const void *ValueAtIndex;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 624)) >= 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 624), 0);
    v4 = ValueAtIndex;
    if (ValueAtIndex)
      CFRetain(ValueAtIndex);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 624), 0);
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    endpointCluster_updateFeaturesInternal(a1, *((_DWORD *)v4 + 4), *((_QWORD *)v4 + 3), *((const __CFDictionary **)v4 + 4), *((_QWORD *)v4 + 5), *((_QWORD *)v4 + 6));
    CFRelease(v4);
  }
}

uint64_t _UpdateFeaturesRequestGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gUpdateFeaturesRequestTypeID = result;
  return result;
}

void _UpdateFeaturesRequestFinalize(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    CFRelease(v1);
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void endpointCluster_sendActivationMetrics()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const __CFAllocator *v2;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v4;
  const void *v5;
  uint64_t v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  int v10;
  CFIndex v11;
  uint64_t v12;
  CFMutableArrayRef v13;
  CFIndex v14;
  const __CFString *v15;
  CFMutableDictionaryRef v16;
  __CFDictionary *v17;
  uint64_t CMBaseObject;
  unsigned int (*v19)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  __CFArray *v20;
  const __CFString *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v25;
  void (*v26)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  const void *v27;
  __CFDictionary *v28;
  CFMutableDictionaryRef theDict;
  uint64_t v30;
  const void *v31;
  const void *v32;
  CFTypeRef v33;
  CFTypeRef cf;
  CFTypeRef v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  cf = 0;
  v35 = 0;
  v33 = 0;
  if (!*(_QWORD *)(DerivedStorage + 440))
    goto LABEL_55;
  v1 = DerivedStorage;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
LABEL_55:
    v13 = 0;
    goto LABEL_44;
  }
  v4 = Mutable;
  GetDeviceModelString();
  CFDictionarySetCString();
  SNPrintF();
  CFDictionarySetCString();
  v31 = (const void *)*MEMORY[0x1E0C9AE40];
  v32 = (const void *)*MEMORY[0x1E0C9AE50];
  if (*(_QWORD *)(v1 + 8))
    v5 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v5 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(v4, CFSTR("isLocalCluster"), v5);
  FigCFDictionarySetInt();
  FigCFDictionarySetInt();
  if (!*(_DWORD *)(v1 + 320))
  {
    v6 = CMBaseObjectGetDerivedStorage();
    Count = CFArrayGetCount(*(CFArrayRef *)(v6 + 264));
    if (Count >= 1)
    {
      v8 = Count;
      v9 = 0;
      v10 = 0;
      do
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 264), v9);
        if (APSGetFBOPropertyInt64())
          ++v10;
        ++v9;
      }
      while (v8 != v9);
    }
  }
  FigCFDictionarySetInt();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  CFDictionarySetInt64();
  APSEventRecorderGetTimeSinceEventInMilliSecondRecursive();
  CFDictionarySetInt64();
  CFAbsoluteTimeGetCurrent();
  CFDictionarySetInt64();
  FigCFDictionarySetInt();
  v11 = CFArrayGetCount(*(CFArrayRef *)(v1 + 264));
  if (!v11)
  {
    v13 = 0;
LABEL_38:
    APSRTCReportingAgentSendEvent();
    goto LABEL_39;
  }
  v12 = v11;
  v13 = CFArrayCreateMutable(v2, v11, MEMORY[0x1E0C9B378]);
  if (v13)
  {
    theDict = v4;
    if (v12 >= 1)
    {
      v14 = 0;
      v30 = *MEMORY[0x1E0CA43D8];
      v15 = CFSTR("timeSinceSubEndpointActivatedSecs");
      while (1)
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 264), v14);
        v16 = CFDictionaryCreateMutable(v2, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!v16)
          break;
        v17 = v16;
        CMBaseObject = FigEndpointGetCMBaseObject();
        v19 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
        if (!v19)
          goto LABEL_40;
        v20 = v13;
        v21 = v15;
        if (v19(CMBaseObject, v30, v2, &cf))
        {
          v13 = v20;
LABEL_40:
          APSLogErrorAt();
LABEL_42:
          CFRelease(theDict);
          v28 = v17;
          goto LABEL_43;
        }
        v22 = APSGetFBOPropertyInt64();
        v23 = FigEndpointGetCMBaseObject();
        v24 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (!v24 || v24(v23, CFSTR("EndpointStatus"), v2, &v33))
        {
          APSLogErrorAt();
          v13 = v20;
          goto LABEL_42;
        }
        v25 = FigEndpointGetCMBaseObject();
        v26 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        v15 = v21;
        if (v26)
          v26(v25, CFSTR("EndpointMetrics"), v2, &v35);
        if (v22)
          v27 = v32;
        else
          v27 = v31;
        CFDictionarySetValue(v17, CFSTR("isLocalSubEndpoint"), v27);
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        FigCFDictionarySetInt64();
        v13 = v20;
        if (v35)
        {
          CFDictionaryGetInt64();
          FigCFDictionarySetInt64();
        }
        CFArrayAppendValue(v20, v17);
        CFRelease(v17);
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (v33)
        {
          CFRelease(v33);
          v33 = 0;
        }
        if (v35)
        {
          CFRelease(v35);
          v35 = 0;
        }
        if (v12 == ++v14)
          goto LABEL_36;
      }
      APSLogErrorAt();
      v4 = theDict;
      goto LABEL_39;
    }
LABEL_36:
    v4 = theDict;
    CFDictionarySetValue(theDict, CFSTR("subEndpointInfo"), v13);
    goto LABEL_38;
  }
  APSLogErrorAt();
LABEL_39:
  v28 = v4;
LABEL_43:
  CFRelease(v28);
LABEL_44:
  if (cf)
    CFRelease(cf);
  if (v33)
    CFRelease(v33);
  if (v35)
    CFRelease(v35);
  if (v13)
    CFRelease(v13);
}

void endpointCluster_updateIdleState(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int isIdle;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 304) == 3)
  {
    v3 = DerivedStorage;
    isIdle = endpointCluster_isIdle();
    if (*(unsigned __int8 *)(v3 + 368) != isIdle)
    {
      v5 = isIdle;
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_BYTE *)(v3 + 368) = v5;
      CFRetain(a1);
      APSDispatchAsyncFHelper();
      v6 = CMBaseObjectGetDerivedStorage();
      if (*(_DWORD *)(v6 + 304) == 3)
      {
        v7 = v6;
        v8 = *(_DWORD *)(v6 + 340);
        if (v8)
        {
          if (endpointCluster_isIdle())
          {
            if (gLogCategory_APEndpointCluster <= 50
              && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            *(_DWORD *)(v7 + 340) = 0;
            endpointCluster_handleClusterFatalError(a1, v8, 1);
          }
        }
      }
    }
  }
}

void endpointCluster_updateEngagedState(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int isEngaged;
  int v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 304) == 3)
  {
    v3 = DerivedStorage;
    isEngaged = endpointCluster_isEngaged();
    if (*(unsigned __int8 *)(v3 + 369) != isEngaged)
    {
      v5 = isEngaged;
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_BYTE *)(v3 + 369) = v5;
      if (v5)
        endpointCluster_activateSubEndpointsIfNeeded((uint64_t)a1);
      endpointCluster_updateHealthState(a1);
    }
  }
}

uint64_t endpointCluster_isIdle()
{
  uint64_t DerivedStorage;
  CFIndex v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264)) < 1)
    return 1;
  v1 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 264), v1);
    if (APSGetFBOPropertyInt64())
      break;
    if (++v1 >= CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264)))
      return 1;
  }
  return 0;
}

void endpointCluster_deferredHandleIdleStateChanged(uint64_t a1)
{
  uint64_t DerivedStorage;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  dispatch_time_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (*(_BYTE *)(a1 + 8) && *(_BYTE *)(DerivedStorage + 336) && *(_DWORD *)(DerivedStorage + 304) == 3)
  {
    v3 = *(void **)a1;
    v4 = CMBaseObjectGetDerivedStorage();
    v5 = v4;
    v6 = *(NSObject **)(v4 + 56);
    if (v6)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(v4 + 56));
      dispatch_release(v6);
      *(_QWORD *)(v5 + 56) = 0;
    }
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_QWORD *)(v5 + 56) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v5 + 40));
    CFRetain(v3);
    dispatch_set_context(*(dispatch_object_t *)(v5 + 56), v3);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v5 + 56), (dispatch_function_t)endpointCluster_inactivityTimerFired);
    dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v5 + 56), (dispatch_function_t)endpointCluster_inactivityTimerCancelled);
    v8 = *(NSObject **)(v5 + 56);
    v9 = dispatch_time(0, 1000000000 * *(int *)(v5 + 176));
    dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    dispatch_resume(*(dispatch_object_t *)(v5 + 56));
  }
  else
  {
    v7 = *(NSObject **)(DerivedStorage + 56);
    if (v7)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 56));
      dispatch_release(v7);
      *(_QWORD *)(DerivedStorage + 56) = 0;
    }
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  CFRelease(*(CFTypeRef *)a1);
}

void endpointCluster_inactivityTimerFired(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  v3 = *(NSObject **)(DerivedStorage + 56);
  if (v3)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 56));
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  if (endpointCluster_isIdle() && *(_DWORD *)(DerivedStorage + 304) == 3)
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    endpointCluster_updateStatus(a1, -72276, 1, 1);
  }
  JUMPOUT(0x1CAA400E4);
}

void endpointCluster_inactivityTimerCancelled(CFTypeRef cf)
{
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRelease(cf);
}

void endpointCluster_updateStatus(const void *a1, int a2, int a3, int a4)
{
  uint64_t DerivedStorage;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  const __CFAllocator *v13;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v15;
  const __CFAllocator *v16;
  CFMutableDictionaryRef v17;
  __CFDictionary *v18;
  int v19;
  const void **v20;
  const void **v21;
  const void *v22;
  const void *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  const void *v28;
  NSObject *v29;
  _QWORD block[9];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 == -72277)
    v9 = -17601;
  else
    v9 = a2;
  if (a2 == -72101)
    v10 = -15582;
  else
    v10 = v9;
  if (a2 == -72100)
    v11 = -15581;
  else
    v11 = v10;
  if (a2)
  {
    v12 = DerivedStorage;
    if (!*(_BYTE *)(DerivedStorage + 370))
    {
      *(_DWORD *)(DerivedStorage + 320) = a2;
      v13 = CFGetAllocator(a1);
      Mutable = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!Mutable)
      {
        APSLogErrorAt();
        return;
      }
      v15 = Mutable;
      CFDictionarySetInt64();
      v16 = CFGetAllocator(a1);
      v17 = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!v17)
      {
        APSLogErrorAt();
        goto LABEL_47;
      }
      v18 = v17;
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      if (a3)
      {
        if (v11 >> 1 != 2147475857)
        {
          v20 = (const void **)MEMORY[0x1E0CA39A0];
          v21 = (const void **)MEMORY[0x1E0CA3A98];
LABEL_23:
          v19 = gLogCategory_APEndpointCluster;
          goto LABEL_24;
        }
        v19 = gLogCategory_APEndpointCluster;
        if (gLogCategory_APEndpointCluster > 30)
        {
          v20 = (const void **)MEMORY[0x1E0CA39A8];
          v21 = (const void **)MEMORY[0x1E0CA3AA0];
LABEL_24:
          v22 = *v20;
          v23 = *v21;
          *(_BYTE *)(v12 + 436) = 1;
          if (v19 <= 50 && (v19 != -1 || _LogCategory_Initialize()))
            LogPrintF();
          if (!a4 || !*(_QWORD *)(v12 + 8) || *(_BYTE *)(v12 + 416))
          {
LABEL_31:
            CFDictionarySetValue(v15, (const void *)*MEMORY[0x1E0CA3AC0], v23);
            CFDictionarySetValue(v18, (const void *)*MEMORY[0x1E0CA39C0], v22);
            v24 = (_QWORD *)CMBaseObjectGetDerivedStorage();
            v25 = v24[58];
            if (!v25)
              goto LABEL_42;
            v26 = v24;
            v27 = v24[48];
            if (v24[65])
            {
              v28 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
              if (!v28)
              {
                if (gLogCategory_APEndpointCluster >= 61)
                {
LABEL_46:
                  CMNotificationCenterGetDefaultLocalCenter();
                  FigDispatchAsyncPostNotification();
                  CFRelease(v18);
LABEL_47:
                  CFRelease(v15);
                  return;
                }
                if (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize())
                  LogPrintF();
LABEL_42:
                if (gLogCategory_APEndpointCluster <= 30
                  && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
                {
                  LogPrintF();
                }
                goto LABEL_46;
              }
            }
            else
            {
              v28 = 0;
            }
            CFRetain(a1);
            CFRetain(v18);
            if (v28)
              CFRetain(v28);
            v29 = v26[5];
            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 0x40000000;
            block[2] = __endpointCluster_callDelegateHandleFailed_block_invoke;
            block[3] = &__block_descriptor_tmp_170;
            block[4] = a1;
            block[5] = v18;
            block[6] = v25;
            block[7] = v27;
            block[8] = v28;
            dispatch_async(v29, block);
            if (v28)
              CFRelease(v28);
            goto LABEL_42;
          }
          if (*(_DWORD *)v12 == 2)
          {
            if ((*(_BYTE *)(v12 + 328) & 0x20) == 0)
              goto LABEL_31;
          }
          else if (*(_DWORD *)v12 != 1 || !*(_BYTE *)(v12 + 184) || !*(_QWORD *)(v12 + 328))
          {
            goto LABEL_31;
          }
          endpointCluster_postNeedDeactivationForClusterChange((uint64_t)a1, 1);
          goto LABEL_31;
        }
        if (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize())
          LogPrintF();
      }
      v20 = (const void **)MEMORY[0x1E0CA39A8];
      v21 = (const void **)MEMORY[0x1E0CA3AA0];
      goto LABEL_23;
    }
  }
}

void endpointCluster_postNeedDeactivationForClusterChange(uint64_t a1, int a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v4;
  const void **v5;

  CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = Mutable;
    v5 = (const void **)MEMORY[0x1E0C9AE50];
    if (!a2)
      v5 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(Mutable, CFSTR("ClusterFailed"), *v5);
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v4);
  }
  else
  {
    APSLogErrorAt();
  }
}

void __endpointCluster_callDelegateHandleFailed_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 48))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 64);
  if (v3)
    CFRelease(v3);
}

void endpointCluster_handleClusterFatalError(const void *a1, int a2, int a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  _QWORD block[6];
  int v9;
  int v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  v7 = *(NSObject **)(DerivedStorage + 40);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __endpointCluster_handleClusterFatalError_block_invoke;
  block[3] = &__block_descriptor_tmp_177;
  block[4] = DerivedStorage;
  block[5] = a1;
  v9 = a2;
  v10 = a3;
  dispatch_async(v7, block);
}

void __endpointCluster_handleClusterFatalError_block_invoke(uint64_t a1)
{
  MEMORY[0x1CAA400CC](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 208));
  endpointCluster_updateStatus(*(const void **)(a1 + 40), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 1);
  MEMORY[0x1CAA400E4](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 208));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

CFIndex endpointCluster_activateSubEndpointsIfNeeded(uint64_t a1)
{
  uint64_t DerivedStorage;
  CFIndex result;
  CFIndex i;
  const void *ValueAtIndex;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264));
  if (result >= 1)
  {
    for (i = 0; i < result; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 264), i);
      if (endpointCluster_shouldActivateSubEndpoint(a1, ValueAtIndex))
        endpointCluster_activateSubEndpoint(a1, ValueAtIndex);
      result = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264));
    }
  }
  return result;
}

uint64_t endpointCluster_handleAuthRequiredInternal(uint64_t a1, const void *a2, uint64_t a3, const void *a4, const void *a5, uint64_t a6, uint64_t a7)
{
  _QWORD *DerivedStorage;
  uint64_t v13;
  _QWORD *v14;
  CFTypeRef v15;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](DerivedStorage[26]);
  if (DerivedStorage[57])
  {
    if (DerivedStorage[65] && (v13 = FigCFWeakReferenceHolderCopyReferencedObject(), DerivedStorage[65]) && !v13)
    {
      if (gLogCategory_APEndpointCluster <= 90
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      v14 = malloc_type_calloc(1uLL, 0x18uLL, 0xA00402214FCE6uLL);
      if (a2)
        v15 = CFRetain(a2);
      else
        v15 = 0;
      *v14 = v15;
      v14[1] = a6;
      v14[2] = a7;
      if (a4)
        CFRetain(a4);
      if (a2)
        CFRetain(a2);
      if (a5)
        CFRetain(a5);
      APSDispatchAsyncFHelper();
    }
  }
  return MEMORY[0x1CAA400E4](DerivedStorage[26]);
}

uint64_t endpointCluster_handleFailedInternal(uint64_t a1, uint64_t a2, const __CFDictionary *a3, const void *a4)
{
  _QWORD *DerivedStorage;
  const void *Value;
  uint64_t result;
  int v9;
  const void *v10;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA3788]);
  result = CFDictionaryGetInt64();
  if (Value)
  {
    v9 = result;
    MEMORY[0x1CAA400CC](DerivedStorage[26]);
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v10 = (const void *)DerivedStorage[1];
    if (v10)
    {
      if (v9 == -72277 && Value == v10)
      {
        if (gLogCategory_APEndpointCluster <= 50
          && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        endpointCluster_updateClusterChangeProgress((uint64_t)a4, 0, 0);
      }
    }
    endpointCluster_handleSubEndpointResult(a4, DerivedStorage[39], Value, v9, 1);
    JUMPOUT(0x1CAA400E4);
  }
  return result;
}

uint64_t endpointCluster_handleDidReceiveDataFromCommChannelInternal(uint64_t a1, uint64_t a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t DerivedStorage;

  if (a1 && a3 && a4 && a5)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
    if (endpointCluster_isRelaySupported() && *(_QWORD *)(DerivedStorage + 248) == a1)
      APEndpointCallRCDelegateDidReceiveDataAsync(a5, *(_QWORD *)(DerivedStorage + 384), a3, a4, *(NSObject **)(DerivedStorage + 40), *(_QWORD *)(DerivedStorage + 504), *(_QWORD *)(DerivedStorage + 528));
    else
      APSLogErrorAt();
    JUMPOUT(0x1CAA400E4);
  }
  return APSLogErrorAt();
}

uint64_t endpointCluster_handleDidCloseCommChannelInternal(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;

  if (a1 && a3 && a4)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
    if (*(_BYTE *)(DerivedStorage + 370) || *(_QWORD *)(DerivedStorage + 248) != a1)
      APSLogErrorAt();
    else
      APEndpointCallRCDelegateDidCloseAsync(a4, *(_QWORD *)(DerivedStorage + 384), a3, *(NSObject **)(DerivedStorage + 40), *(_QWORD *)(DerivedStorage + 512), *(_QWORD *)(DerivedStorage + 528));
    JUMPOUT(0x1CAA400E4);
  }
  return APSLogErrorAt();
}

void endpointCluster_authHandlingCompletionCallbackInternal(int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  void (*v5)(_QWORD, uint64_t, uint64_t, _QWORD);

  v5 = (void (*)(_QWORD, uint64_t, uint64_t, _QWORD))a4[1];
  if (v5)
    v5(*a4, a2, a3, a4[2]);
  if (*a4)
    CFRelease((CFTypeRef)*a4);
  free(a4);
}

void endpointCluster_callDelegateHandleAuthRequiredInternal(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 16))(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
}

void endpointCluster_updateClusterChangeProgress(uint64_t a1, int a2, int a3)
{
  _BYTE *DerivedStorage;
  int v6;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v6 = DerivedStorage[417];
  if (DerivedStorage[417] && DerivedStorage[418])
  {
    APSLogErrorAt();
  }
  else
  {
    DerivedStorage[416] = 1;
    if (a2)
    {
      DerivedStorage[417] = 1;
      v6 = 1;
    }
    if (a3)
      DerivedStorage[418] = 1;
    if (v6 && DerivedStorage[418])
    {
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      endpointCluster_postFinishedDeactivationForClusterUUIDChangeOrFailure();
    }
  }
}

void endpointCluster_handleSubEndpointResult(const void *a1, uint64_t a2, const void *a3, int a4, int a5)
{
  int updated;
  uint64_t DerivedStorage;

  CMBaseObjectGetDerivedStorage();
  if (!a2)
    goto LABEL_8;
  MEMORY[0x1CAA400CC](*(_QWORD *)(a2 + 80));
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFDictionarySetInt64();
  updated = completionCallbackContext_updateStateFromResponses(a2);
  MEMORY[0x1CAA400E4](*(_QWORD *)(a2 + 80));
  if (updated)
  {
    endpointCluster_handleClusterFatalError(a1, a4, a5);
  }
  else
  {
LABEL_8:
    if (a4)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (a5 || !APSGetFBOPropertyInt64())
      {
        if (*(_DWORD *)(DerivedStorage + 304))
        {
          if (!*(_QWORD *)(DerivedStorage + 360))
          {
            if (gLogCategory_APEndpointCluster <= 50
              && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            *(_QWORD *)(DerivedStorage + 360) = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
          }
          if (gLogCategory_APEndpointCluster <= 50
            && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 360), a3);
        }
        endpointCluster_failDelayManageSubEndpoint(a1, a3, 1);
      }
      else
      {
        if (gLogCategory_APEndpointCluster <= 50
          && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        endpointCluster_triggerLostClusterBuddyReconnectionLogic((uint64_t)a1, a3);
      }
    }
  }
}

void endpointCluster_postFinishedDeactivationForClusterUUIDChangeOrFailure()
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  __CFDictionary *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v2 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("SourceEndpoint"), *(const void **)(DerivedStorage + 8));
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v2);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t completionCallbackContext_updateStateFromResponses(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  _QWORD v15[3];
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;

  v27 = 0;
  v28 = &v27;
  v29 = 0x2000000000;
  v30 = 0;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x3000000000;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2000000000;
  v16 = 0;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v2 = *(_DWORD *)(a1 + 32);
  CFDictionaryApplyBlock();
  if (!*((_BYTE *)v12 + 24))
  {
    if (v2 == 2)
    {
      v3 = *((_DWORD *)v24 + 6);
      v4 = *((unsigned int *)v8 + 6);
      if (*(_BYTE *)(a1 + 24) && *(_DWORD *)(a1 + 28) == 7)
        goto LABEL_8;
      if (*((_BYTE *)v28 + 24))
      {
        if (!v3)
        {
          v5 = 0;
          v4 = *((unsigned int *)v24 + 6);
          goto LABEL_48;
        }
        if (v3 != 1)
          goto LABEL_47;
        if (!*(_BYTE *)(a1 + 24) || v18[4] > 0)
        {
LABEL_8:
          v4 = 0;
LABEL_47:
          v5 = 1;
          goto LABEL_48;
        }
        if (v18[3] <= 0 && (*(_DWORD *)(a1 + 28) != 4 || v18[5] >= *(_QWORD *)(a1 + 40) - 1))
          goto LABEL_47;
      }
      else if (v18[3] <= 0)
      {
        if (gLogCategory_APEndpointCluster > 90)
        {
          v5 = 1;
          v4 = 4294949690;
          goto LABEL_23;
        }
        if (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize())
          LogPrintF();
        v4 = 4294949690;
        goto LABEL_47;
      }
      v5 = 0;
      v4 = 0;
LABEL_48:
      if (gLogCategory_APEndpointCluster > 50
        || gLogCategory_APEndpointCluster == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_23;
      }
      goto LABEL_50;
    }
    if (v18[4] <= 0)
    {
      if (v18[3] > 0)
      {
        v5 = 0;
        v4 = 0;
        goto LABEL_30;
      }
      if (v18[5] <= 0)
        v4 = 4294949690;
      else
        v4 = *((unsigned int *)v8 + 6);
    }
    else
    {
      v4 = 0;
    }
    v5 = 1;
LABEL_30:
    if (gLogCategory_APEndpointCluster > 50
      || gLogCategory_APEndpointCluster == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_23;
    }
LABEL_50:
    LogPrintF();
    goto LABEL_23;
  }
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v4 = *((unsigned int *)v8 + 6);
  v5 = 1;
LABEL_23:
  _Block_object_dispose(&v7, 8);
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(v15, 8);
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return completionCallbackContext_setState(a1, v5, v4);
}

uint64_t completionCallbackContext_setState(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  const void *v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFAllocator *v12;
  NSObject *v13;
  _QWORD block[5];
  CFTypeRef cf;

  if (!*(_BYTE *)(a1 + 96))
  {
    *(_BYTE *)(a1 + 97) = a2;
    *(_DWORD *)(a1 + 100) = a3;
    if (!a2)
      goto LABEL_44;
    *(_BYTE *)(a1 + 96) = 1;
    v7 = *(const void **)(a1 + 16);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    cf = 0;
    endpointCluster_manageActivationTimeoutTimer(v7, (const void *)a1);
    v9 = *(_QWORD *)(a1 + 48);
    if (v9 != *(_QWORD *)(DerivedStorage + 384) || (*(_DWORD *)(DerivedStorage + 304) - 3) < 0xFFFFFFFE)
    {
      v10 = 0;
      v11 = 4294949692;
      goto LABEL_42;
    }
    if ((_DWORD)a3)
    {
      if (gLogCategory_APEndpointCluster <= 90
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if ((_DWORD)a3 == -72100)
      {
        v11 = 4294951715;
      }
      else if ((_DWORD)a3 == -72101)
      {
        v11 = 4294951714;
      }
      else
      {
        v11 = a3;
        if ((_DWORD)a3 == -72277)
          v11 = 4294949695;
      }
      if (*(_BYTE *)(DerivedStorage + 416))
      {
        if (gLogCategory_APEndpointCluster <= 50
          && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        endpointCluster_updateClusterChangeProgress((uint64_t)v7, 1, 0);
      }
      v9 = *(_QWORD *)(a1 + 48);
      if ((_DWORD)v11 && (_DWORD)v11 != -16727)
      {
        v10 = 0;
LABEL_42:
        endpointCluster_CallActivationCompletionCallback(v7, v9, v10, v11, *(_QWORD *)(a1 + 64));
        if (cf)
          CFRelease(cf);
        goto LABEL_44;
      }
    }
    else
    {
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_DWORD *)(DerivedStorage + 304) = 3;
      APSEventRecorderRecordEvent();
      *(_BYTE *)(DerivedStorage + 336) = 1;
      endpointCluster_manageInactivityTimer(v7);
      v12 = CFGetAllocator(v7);
      APEndpointCreateEndpointActivationNotificationPayload(v12, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), (CFMutableDictionaryRef *)&cf);
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      if (*(_QWORD *)(DerivedStorage + 8))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
      }
      CFRetain(v7);
      v13 = *(NSObject **)(DerivedStorage + 40);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __endpointCluster_finalizeActivation_block_invoke;
      block[3] = &__block_descriptor_tmp_194_0;
      block[4] = v7;
      dispatch_async(v13, block);
      endpointCluster_updateFeaturesFromSavedIfNeeded(v7);
      v11 = 0;
      v9 = *(_QWORD *)(a1 + 48);
    }
    v10 = *(_QWORD *)(a1 + 56);
    goto LABEL_42;
  }
  if (!*(_BYTE *)(a1 + 97))
  {
LABEL_44:
    v5 = 0;
    goto LABEL_45;
  }
  v5 = 0;
  if ((_DWORD)a3)
    v6 = 1;
  else
    v6 = a2 == 0;
  if (v6 && !*(_DWORD *)(a1 + 100))
  {
    v5 = 1;
    *(_BYTE *)(a1 + 97) = 1;
    *(_DWORD *)(a1 + 100) = -71991;
  }
LABEL_45:
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v5;
}

uint64_t __completionCallbackContext_computeState_block_invoke(_QWORD *a1, uint64_t a2, const void *a3)
{
  _BOOL4 isSubEndpointOfType;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;

  isSubEndpointOfType = endpointCluster_isSubEndpointOfType(*(_QWORD *)(a1[10] + 16), a2, *MEMORY[0x1E0CA48C0]);
  result = APSGetFBOPropertyInt64();
  v11 = 0;
  if (*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) != 2)
  {
    v7 = result;
    if (isSubEndpointOfType)
    {
      *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
      result = completionCallbackContext_getSubEndpointStatus(a3, &v11);
      *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = result;
    }
    else
    {
      result = completionCallbackContext_getSubEndpointStatus(a3, &v11);
      switch((_DWORD)result)
      {
        case 2:
          ++*(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40);
          break;
        case 1:
          ++*(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 32);
          break;
        case 0:
          ++*(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
          break;
      }
    }
    if (v7)
      *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
    if ((_DWORD)result == 2)
    {
      v8 = *(_QWORD *)(a1[8] + 8);
      if (!*(_BYTE *)(v8 + 24))
      {
        v9 = v11;
        if (v11)
        {
          if (v7)
            v10 = 1;
          else
            v10 = (v11 + 72099) >= 0xFFFFFFFE;
          if (v10)
            *(_BYTE *)(v8 + 24) = 1;
        }
        *(_DWORD *)(*(_QWORD *)(a1[9] + 8) + 24) = v9;
      }
    }
  }
  return result;
}

uint64_t completionCallbackContext_getSubEndpointStatus(const void *a1, int *a2)
{
  int v4;
  int v5;
  uint64_t result;
  CFTypeID v7;
  int valuePtr;

  valuePtr = 0;
  v4 = CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0C9B0D0]);
  v5 = 0;
  result = 0;
  if (!v4)
  {
    if (a1 && (v7 = CFGetTypeID(a1), v7 == CFNumberGetTypeID()))
    {
      CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, &valuePtr);
      v5 = valuePtr;
      if (valuePtr)
        result = 2;
      else
        result = 1;
    }
    else
    {
      result = 2;
      v5 = -17606;
    }
  }
  if (a2)
    *a2 = v5;
  return result;
}

uint64_t endpointCluster_manageActivationTimeoutTimer(const void *a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  return APSDispatchAsyncFHelper();
}

uint64_t endpointCluster_manageInactivityTimer(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  return APSDispatchAsyncFHelper();
}

void __endpointCluster_finalizeActivation_block_invoke(uint64_t a1)
{
  endpointCluster_deferredConfigureActivationMetricsTimer(*(void **)(a1 + 32));
}

void sub_1C9552114()
{
  uint64_t v0;

  CFRelease(*(CFTypeRef *)(v0 + 32));
}

void endpointCluster_deferredConfigureActivationMetricsTimer(void *a1)
{
  uint64_t DerivedStorage;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  dispatch_time_t v9;
  NSObject *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  v3 = *(_DWORD *)(DerivedStorage + 304);
  v4 = CMBaseObjectGetDerivedStorage();
  v5 = v4;
  if (v3 == 3)
  {
    v6 = *(_QWORD *)(v4 + 144);
    v7 = *(NSObject **)(v4 + 88);
    if (v7)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(v4 + 88));
      dispatch_release(v7);
      *(_QWORD *)(v5 + 88) = 0;
    }
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v8 = 1000000000 * v6;
    v9 = dispatch_time(0, 1000000000 * v6);
    *(_QWORD *)(v5 + 88) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v5 + 40));
    CFRetain(a1);
    dispatch_set_context(*(dispatch_object_t *)(v5 + 88), a1);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v5 + 88), (dispatch_function_t)endpointCluster_metricsTimerFired);
    dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v5 + 88), (dispatch_function_t)endpointCluster_metricsTimerCanceled);
    dispatch_source_set_timer(*(dispatch_source_t *)(v5 + 88), v9, v8, 0x3B9ACA00uLL);
    dispatch_resume(*(dispatch_object_t *)(v5 + 88));
  }
  else
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v10 = *(NSObject **)(v5 + 88);
    if (v10)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(v5 + 88));
      dispatch_release(v10);
      *(_QWORD *)(v5 + 88) = 0;
    }
  }
  JUMPOUT(0x1CAA400E4);
}

void endpointCluster_deferredConfigureActivationTimeoutTimer(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  dispatch_time_t v10;
  const void *v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (*(_BYTE *)(a1 + 16)
    && (v3 = *(_QWORD *)(a1 + 8)) != 0
    && (MEMORY[0x1CAA400CC](*(_QWORD *)(v3 + 80)),
        v4 = *(unsigned __int8 *)(v3 + 96),
        MEMORY[0x1CAA400E4](*(_QWORD *)(v3 + 80)),
        !v4))
  {
    v6 = *(void **)(a1 + 8);
    v7 = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(v7 + 48))
    {
      APSLogErrorAt();
    }
    else
    {
      v8 = v7;
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_QWORD *)(v8 + 48) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v8 + 40));
      CFRetain(v6);
      dispatch_set_context(*(dispatch_object_t *)(v8 + 48), v6);
      dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v8 + 48), (dispatch_function_t)endpointCluster_activationTimerFired);
      dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v8 + 48), (dispatch_function_t)endpointCluster_activationTimerCancelled);
      v9 = *(NSObject **)(v8 + 48);
      v10 = dispatch_time(0, 1000000000 * *(int *)(v8 + 180));
      dispatch_source_set_timer(v9, v10, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
      dispatch_resume(*(dispatch_object_t *)(v8 + 48));
    }
  }
  else
  {
    v5 = *(NSObject **)(DerivedStorage + 48);
    if (v5)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 48));
      dispatch_release(v5);
      *(_QWORD *)(DerivedStorage + 48) = 0;
    }
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  v11 = *(const void **)(a1 + 8);
  if (v11)
    CFRelease(v11);
  CFRelease(*(CFTypeRef *)a1);
}

void endpointCluster_activationTimerFired(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  int v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  v3 = *(NSObject **)(DerivedStorage + 48);
  if (v3)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 48));
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 80));
  v4 = *(unsigned __int8 *)(a1 + 96);
  MEMORY[0x1CAA400E4](*(_QWORD *)(a1 + 80));
  if (!v4)
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CompletionCallbackContextSetError(a1, 4294950572);
  }
  JUMPOUT(0x1CAA400E4);
}

void endpointCluster_activationTimerCancelled(CFTypeRef cf)
{
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRelease(cf);
}

void CompletionCallbackContextSetError(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 80));
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  completionCallbackContext_setState(a1, 1, a2);
  JUMPOUT(0x1CAA400E4);
}

void endpointCluster_metricsTimerFired()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  endpointCluster_sendActivationMetrics();
  JUMPOUT(0x1CAA400E4);
}

void endpointCluster_metricsTimerCanceled(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1)
    CFRelease(a1);
}

void endpointCluster_triggerLostClusterBuddyReconnectionLogic(uint64_t a1, const void *a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v4;

  CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("SubEndpoint"), a2);
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v4);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t endpointCluster_isRelaySupported()
{
  _DWORD *DerivedStorage;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage == 3 && DerivedStorage[76] == 3)
    return 1;
  APSLogErrorAt();
  return 0;
}

uint64_t _CompletionCallbackContextGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gCompletionCallbackContextTypeID = result;
  return result;
}

uint64_t _CompletionCallbackContextFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(const void **)(a1 + 88);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 88) = 0;
  }
  return FigSimpleMutexDestroy();
}

void endpointCluster_cancelPendingUpdateFeatureRequests()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 624));
  CFArrayApplyBlock();
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 624));
}

void endpointCluster_resetActivationState(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  CFIndex v10;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD);
  uint64_t v16;
  void (*v17)(uint64_t, _QWORD);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  NSObject *v28;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMBaseObjectGetDerivedStorage();
  APSEventRecorderReset();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (*(_BYTE *)(DerivedStorage + 344))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    APSRemoteConfigGetShared();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(_QWORD *)(DerivedStorage + 248))
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264));
    if (Count >= 1)
    {
      v10 = Count;
      for (i = 0; i != v10; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 264), i);
        v13 = *(_QWORD *)(DerivedStorage + 248);
        if (!v13 || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
          v13 = 0;
        endpointCluster_deactivateSubEndpoint(a1, v13, ValueAtIndex);
      }
    }
    v14 = *(_QWORD *)(DerivedStorage + 248);
    v15 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v15)
      v15(v14, 0);
    if (*(_DWORD *)DerivedStorage == 3)
    {
      v16 = *(_QWORD *)(DerivedStorage + 248);
      v17 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
      if (v17)
        v17(v16, 0);
    }
    if (*(_BYTE *)(DerivedStorage + 256))
    {
      v18 = *(_QWORD *)(DerivedStorage + 248);
      v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v19)
        v19(v18, a2, a3, a4);
    }
  }
  *(_BYTE *)(DerivedStorage + 256) = 0;
  *(_OWORD *)(DerivedStorage + 544) = 0u;
  *(_OWORD *)(DerivedStorage + 560) = 0u;
  *(_QWORD *)(DerivedStorage + 576) = 0;
  *(_OWORD *)(DerivedStorage + 584) = 0u;
  *(_OWORD *)(DerivedStorage + 600) = 0u;
  *(_DWORD *)(DerivedStorage + 304) = 0;
  *(_QWORD *)(DerivedStorage + 328) = 0;
  endpointCluster_postIsInUseDidChangeNotification((uint64_t)a1, 0);
  if (*(_QWORD *)(DerivedStorage + 8))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  *(_BYTE *)(DerivedStorage + 336) = 0;
  *(_WORD *)(DerivedStorage + 368) = 1;
  *(_DWORD *)(DerivedStorage + 320) = 0;
  *(_BYTE *)(DerivedStorage + 372) = 0;
  *(_QWORD *)(DerivedStorage + 424) = 0;
  *(_BYTE *)(DerivedStorage + 419) = 0;
  *(_DWORD *)(DerivedStorage + 340) = 0;
  *(_BYTE *)(DerivedStorage + 344) = 0;
  *(_BYTE *)(DerivedStorage + 640) = 0;
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 632));
  v20 = *(const void **)(DerivedStorage + 360);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(DerivedStorage + 360) = 0;
  }
  v21 = *(const void **)(DerivedStorage + 392);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(DerivedStorage + 392) = 0;
  }
  v22 = *(const void **)(DerivedStorage + 400);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(DerivedStorage + 400) = 0;
  }
  v23 = *(const void **)(DerivedStorage + 408);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(DerivedStorage + 408) = 0;
  }
  v24 = *(const void **)(DerivedStorage + 376);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(DerivedStorage + 376) = 0;
  }
  v25 = *(const void **)(DerivedStorage + 248);
  if (v25)
  {
    CFRelease(v25);
    *(_QWORD *)(DerivedStorage + 248) = 0;
  }
  v26 = *(const void **)(DerivedStorage + 312);
  if (v26)
  {
    CFRelease(v26);
    *(_QWORD *)(DerivedStorage + 312) = 0;
  }
  v27 = *(const void **)(DerivedStorage + 440);
  if (v27)
  {
    CFRelease(v27);
    *(_QWORD *)(DerivedStorage + 440) = 0;
  }
  endpointCluster_manageActivationTimeoutTimer(a1, 0);
  endpointCluster_manageInactivityTimer(a1);
  endpointCluster_failDelayManageSubEndpoint(a1, 0, 0);
  endpointCluster_updateHealthState(a1);
  CFRetain(a1);
  v28 = *(NSObject **)(DerivedStorage + 40);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __endpointCluster_resetActivationState_block_invoke;
  block[3] = &__block_descriptor_tmp_219;
  block[4] = a1;
  dispatch_async(v28, block);
}

void __endpointCluster_cancelPendingUpdateFeatureRequests_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4)
    v5 = (_DWORD)v4 == -16727;
  else
    v5 = 1;
  if (v5)
    v6 = *(_QWORD *)(a2 + 24);
  else
    v6 = 0;
  endpointCluster_CallCompletionCallback(*(const void **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 384), v6, v4, *(_QWORD *)(a2 + 40));
}

void __endpointCluster_resetActivationState_block_invoke(uint64_t a1)
{
  endpointCluster_deferredManagePresentationModeProcessDemiseListening(*(void **)(a1 + 32));
}

void sub_1C9552F90()
{
  uint64_t v0;

  endpointCluster_deferredConfigureActivationMetricsTimer(*(void **)(v0 + 32));
}

void sub_1C9552F98()
{
  uint64_t v0;

  CFRelease(*(CFTypeRef *)(v0 + 32));
}

void endpointCluster_deferredManagePresentationModeProcessDemiseListening(void *a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  int v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  v3 = *(NSObject **)(DerivedStorage + 80);
  if (v3)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 80));
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  if (*(_DWORD *)(DerivedStorage + 304) == 3 && *(_QWORD *)(DerivedStorage + 424) == 1)
  {
    v4 = *(_DWORD *)(DerivedStorage + 432);
    if (v4)
      *(_QWORD *)(DerivedStorage + 80) = APEndpointCreateAndStartProcessDemiseListener(a1, v4, *(dispatch_queue_t *)(DerivedStorage + 40), (void (__cdecl *)(void *))endpointCluster_handlePresentationModeProcessDemise);
  }
  JUMPOUT(0x1CAA400E4);
}

void endpointCluster_handlePresentationModeProcessDemise(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  CFMutableDictionaryRef SecondDisplayModeCommandParams;
  CFMutableDictionaryRef v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v3 = *(NSObject **)(DerivedStorage + 80);
  if (v3)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 80));
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  SecondDisplayModeCommandParams = APEndpointCreateSecondDisplayModeCommandParams();
  if (SecondDisplayModeCommandParams)
  {
    v5 = SecondDisplayModeCommandParams;
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
    endpointCluster_setSecondDisplayMode(a1);
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
    CFRelease(v5);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t endpointCluster_setSecondDisplayMode(const void *a1)
{
  _DWORD *DerivedStorage;
  _DWORD *v3;
  uint64_t result;
  unint64_t Int64;
  NSObject *v6;
  _QWORD block[5];

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage == 2)
  {
    v3 = DerivedStorage;
    if (DerivedStorage[76] == 3)
    {
      result = FigCFEqual();
      if (!(_DWORD)result)
        return result;
      Int64 = CFDictionaryGetInt64();
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (Int64 >= 2)
      {
        APSLogErrorAt();
        return 4294950576;
      }
      if (Int64 != *((_QWORD *)v3 + 53))
      {
        *((_QWORD *)v3 + 53) = Int64;
        v3[108] = CFDictionaryGetInt64();
        CFRetain(a1);
        v6 = *((_QWORD *)v3 + 5);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = __endpointCluster_setSecondDisplayMode_block_invoke;
        block[3] = &__block_descriptor_tmp_222;
        block[4] = a1;
        dispatch_async(v6, block);
        if (*((_QWORD *)v3 + 53) != 1 || *((_BYTE *)v3 + 419))
          endpointCluster_setSecondDisplayModeOnSubEndpoints();
      }
    }
  }
  return 0;
}

void __endpointCluster_setSecondDisplayMode_block_invoke(uint64_t a1)
{
  endpointCluster_deferredManagePresentationModeProcessDemiseListening(*(_QWORD *)(a1 + 32));
}

void sub_1C95532F0()
{
  uint64_t v0;

  CFRelease(*(CFTypeRef *)(v0 + 32));
}

uint64_t endpointCluster_setSecondDisplayModeOnSubEndpoints()
{
  uint64_t result;
  uint64_t v1;
  const __CFArray *v2;
  uint64_t v3;
  CFIndex i;
  const void *ValueAtIndex;

  result = CMBaseObjectGetDerivedStorage();
  v1 = result;
  if (gLogCategory_APEndpointCluster <= 50)
  {
    if (gLogCategory_APEndpointCluster != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      result = LogPrintF();
  }
  v2 = *(const __CFArray **)(v1 + 264);
  if (v2)
  {
    result = CFArrayGetCount(v2);
    if (result >= 1)
    {
      v3 = result;
      for (i = 0; i != v3; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v2, i);
        result = endpointCluster_setSecondDisplayModeOnSubEndpoint((uint64_t)ValueAtIndex);
      }
    }
  }
  return result;
}

uint64_t endpointCluster_setSecondDisplayModeOnSubEndpoint(uint64_t a1)
{
  CFMutableDictionaryRef SecondDisplayModeCommandParams;
  CFMutableDictionaryRef v3;
  uint64_t (*v4)(uint64_t, _QWORD, CFMutableDictionaryRef, _QWORD, _QWORD);
  uint64_t v5;

  SecondDisplayModeCommandParams = APEndpointCreateSecondDisplayModeCommandParams();
  if (!SecondDisplayModeCommandParams)
  {
    APSLogErrorAt();
    return 4294950575;
  }
  v3 = SecondDisplayModeCommandParams;
  if (a1 && (FigEndpointExtendedGetClassID(), CMBaseObjectIsMemberOfClass()))
  {
    v4 = *(uint64_t (**)(uint64_t, _QWORD, CFMutableDictionaryRef, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 24)
                                                                                           + 72);
    if (!v4)
    {
      v5 = 4294954514;
LABEL_11:
      APSLogErrorAt();
      goto LABEL_8;
    }
    v5 = v4(a1, *MEMORY[0x1E0CA4660], v3, 0, 0);
    if ((_DWORD)v5)
      goto LABEL_11;
  }
  else
  {
    APSLogErrorAt();
    v5 = 4294950576;
  }
LABEL_8:
  CFRelease(v3);
  return v5;
}

void endpointCluster_handleInternalAggregateDeactivationCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef v8;
  uint64_t DerivedStorage;
  _BOOL4 v10;
  const __CFAllocator *v11;
  uint64_t v13;
  CFTypeRef cf;

  v8 = *(CFTypeRef *)a5;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  v10 = *(_QWORD *)(a5 + 24) == *(_QWORD *)(DerivedStorage + 384) && *(_DWORD *)(DerivedStorage + 304) == 0;
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v10)
  {
    if (!(_DWORD)a4)
    {
      v11 = CFGetAllocator(v8);
      APEndpointCreateEndpointActivationNotificationPayload(v11, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), (CFMutableDictionaryRef *)&cf);
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      if (*(_BYTE *)(a5 + 34) && *(_BYTE *)(a5 + 33) && !*(_BYTE *)(a5 + 32) && *(_QWORD *)(DerivedStorage + 8))
      {
        if (gLogCategory_APEndpointCluster <= 50
          && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        endpointCluster_postFinishedDeactivationForClusterUUIDChangeOrFailure();
      }
      a4 = 0;
    }
  }
  else
  {
    a4 = 4294949692;
  }
  if ((_DWORD)a4 == -16727 || (_DWORD)a4 == 0)
    v13 = a2;
  else
    v13 = 0;
  endpointCluster_CallCompletionCallback(v8, *(_QWORD *)(DerivedStorage + 384), v13, a4, *(_QWORD *)(a5 + 40));
  if (*(_BYTE *)(a5 + 32))
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    endpointCluster_updateClusterChangeProgress((uint64_t)v8, 1, 0);
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  CFRelease(*(CFTypeRef *)a5);
  CFRelease(*(CFTypeRef *)(a5 + 8));
  free((void *)a5);
  if (cf)
    CFRelease(cf);
}

uint64_t endpointCluster_BorrowScreen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (*(_BYTE *)(DerivedStorage + 370))
  {
    APSLogErrorAt();
    v8 = 4294950573;
    goto LABEL_14;
  }
  if (*(_DWORD *)(DerivedStorage + 304) != 3)
  {
    APSLogErrorAt();
    v8 = 4294951716;
    goto LABEL_14;
  }
  if (!*(_BYTE *)(DerivedStorage + 372))
  {
    APSLogErrorAt();
    v8 = 4294950570;
    goto LABEL_14;
  }
  v6 = *(_QWORD *)(DerivedStorage + 248);
  if (v6 && (FigEndpointExtendedGetClassID(), CMBaseObjectIsMemberOfClass()))
  {
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 16);
    if (!v7)
    {
      v8 = 4294954514;
LABEL_16:
      APSLogErrorAt();
      goto LABEL_14;
    }
    v8 = v7(v6, a2, a3);
    if ((_DWORD)v8)
      goto LABEL_16;
  }
  else
  {
    APSLogErrorAt();
    v8 = 4294949690;
  }
LABEL_14:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  return v8;
}

uint64_t endpointCluster_UnborrowScreen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (*(_BYTE *)(DerivedStorage + 370))
  {
    APSLogErrorAt();
    v8 = 4294950573;
    goto LABEL_14;
  }
  if (*(_DWORD *)(DerivedStorage + 304) != 3)
  {
    APSLogErrorAt();
    v8 = 4294951716;
    goto LABEL_14;
  }
  if (!*(_BYTE *)(DerivedStorage + 372))
  {
    APSLogErrorAt();
    v8 = 4294950570;
    goto LABEL_14;
  }
  v6 = *(_QWORD *)(DerivedStorage + 248);
  if (v6 && (FigEndpointExtendedGetClassID(), CMBaseObjectIsMemberOfClass()))
  {
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 24);
    if (!v7)
    {
      v8 = 4294954514;
LABEL_16:
      APSLogErrorAt();
      goto LABEL_14;
    }
    v8 = v7(v6, a2, a3);
    if ((_DWORD)v8)
      goto LABEL_16;
  }
  else
  {
    APSLogErrorAt();
    v8 = 4294949690;
  }
LABEL_14:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  return v8;
}

uint64_t endpointCluster_DuckAudio(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (*(_DWORD *)(DerivedStorage + 304) != 3)
  {
    APSLogErrorAt();
    v6 = 4294951716;
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(DerivedStorage + 248);
  if (v4 && (FigEndpointExtendedGetClassID(), CMBaseObjectIsMemberOfClass()))
  {
    v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 48);
    if (!v5)
    {
      v6 = 4294954514;
LABEL_14:
      APSLogErrorAt();
      goto LABEL_12;
    }
    v6 = v5(v4, a2);
    if ((_DWORD)v6)
      goto LABEL_14;
  }
  else
  {
    APSLogErrorAt();
    v6 = 4294950570;
  }
LABEL_12:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  return v6;
}

uint64_t endpointCluster_SendCommand(uint64_t a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4)
{
  const void *FigEndpoint;
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  const __CFArray *v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex i;
  const void *ValueAtIndex;

  FigEndpoint = (const void *)FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (FigCFEqual())
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
    v8 = endpointCluster_setSecondDisplayMode(FigEndpoint);
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
    if ((_DWORD)v8)
    {
LABEL_30:
      APSLogErrorAt();
      if (!a4)
        return v8;
      goto LABEL_27;
    }
  }
  else
  {
    if (FigCFEqual())
    {
      MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
      v9 = CMBaseObjectGetDerivedStorage();
      if (!CFDictionaryContainsKey(a3, (const void *)*MEMORY[0x1E0CA4678]))
      {
        APSLogErrorAt();
        MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
        v8 = 4294950576;
        goto LABEL_30;
      }
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v10 = *(const void **)(v9 + 616);
      *(_QWORD *)(v9 + 616) = a3;
      if (a3)
        CFRetain(a3);
      if (v10)
        CFRelease(v10);
      v11 = *(const __CFArray **)(v9 + 264);
      if (v11)
      {
        Count = CFArrayGetCount(v11);
        if (Count >= 1)
        {
          v13 = Count;
          for (i = 0; i != v13; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v11, i);
            if (!APSGetFBOPropertyInt64())
              endpointCluster_setMRInfoOnSubEndpoint((uint64_t)ValueAtIndex, (uint64_t)a3);
          }
        }
      }
      MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
    }
    v8 = 0;
  }
  if (a4)
  {
LABEL_27:
    CFRetain(FigEndpoint);
    APSDispatchAsyncFHelper();
  }
  return v8;
}

uint64_t endpointCluster_SendData(const void *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  _QWORD *RCSendDataCompletionContext;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, const void *, uint64_t, void (*)(uint64_t, uint64_t, int, uint64_t), _QWORD *);
  int v15;
  int v16;

  FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (endpointCluster_isRelaySupported())
  {
    RCSendDataCompletionContext = APEndpointCreateRCSendDataCompletionContext(a1, a2, *(NSObject **)(DerivedStorage + 40), a4, a5);
    if (RCSendDataCompletionContext)
    {
      v12 = RCSendDataCompletionContext;
      v13 = *(_QWORD *)(DerivedStorage + 248);
      if (!v13 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass()))
        v13 = 0;
      v14 = *(uint64_t (**)(uint64_t, const void *, uint64_t, void (*)(uint64_t, uint64_t, int, uint64_t), _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 96);
      if (v14)
      {
        v15 = v14(v13, a2, a3, APEndpointCallRCSendDataCompletionFromContextAsync, v12);
        if (!v15)
          goto LABEL_13;
        v16 = v15;
      }
      else
      {
        v16 = -12782;
      }
      APSLogErrorAt();
    }
    else
    {
      APSLogErrorAt();
      v16 = -16721;
    }
  }
  else
  {
    APSLogErrorAt();
    v16 = -17606;
  }
  if (a4)
    APEndpointCallRCSendDataCompletionAsync(a1, a2, v16, *(dispatch_queue_t *)(DerivedStorage + 40), a4, a5);
LABEL_13:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  return 0;
}

uint64_t endpointCluster_CloseCommChannel(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (!endpointCluster_isRelaySupported())
  {
    APSLogErrorAt();
    v6 = 4294949690;
    goto LABEL_10;
  }
  v4 = *(_QWORD *)(DerivedStorage + 248);
  if (!v4 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass()))
    v4 = 0;
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 104);
  if (!v5)
  {
    v6 = 4294954514;
LABEL_9:
    APSLogErrorAt();
    goto LABEL_10;
  }
  v6 = v5(v4, a2);
  if ((_DWORD)v6)
    goto LABEL_9;
LABEL_10:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  return v6;
}

uint64_t endpointCluster_AcquireAndCopyResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (*(_BYTE *)(DerivedStorage + 370))
  {
    APSLogErrorAt();
    v10 = 4294950573;
    goto LABEL_15;
  }
  if (*(_DWORD *)(DerivedStorage + 304) != 3)
  {
    APSLogErrorAt();
    v10 = 4294951716;
    goto LABEL_15;
  }
  v8 = *(_QWORD *)(DerivedStorage + 248);
  if (!v8 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass()))
    v8 = 0;
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 128);
  if (!v9)
  {
    v10 = 4294954514;
LABEL_14:
    APSLogErrorAt();
    goto LABEL_15;
  }
  v10 = v9(v8, a2, a3, a4);
  if ((_DWORD)v10)
    goto LABEL_14;
LABEL_15:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  return v10;
}

uint64_t endpointCluster_RelinquishResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (!a3)
  {
    APSLogErrorAt();
    v8 = 4294950576;
    goto LABEL_16;
  }
  if (*(_BYTE *)(DerivedStorage + 370))
  {
    APSLogErrorAt();
    v8 = 4294950573;
    goto LABEL_16;
  }
  if (*(_DWORD *)(DerivedStorage + 304) != 3)
  {
    APSLogErrorAt();
    v8 = 4294951716;
    goto LABEL_16;
  }
  v6 = *(_QWORD *)(DerivedStorage + 248);
  if (!v6 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass()))
    v6 = 0;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 136);
  if (!v7)
  {
    v8 = 4294954514;
LABEL_15:
    APSLogErrorAt();
    goto LABEL_16;
  }
  v8 = v7(v6, a2, a3);
  if ((_DWORD)v8)
    goto LABEL_15;
LABEL_16:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  return v8;
}

void endpointCluster_CloseAllCommChannels()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  void (*v2)(uint64_t);

  FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (endpointCluster_isRelaySupported())
  {
    v1 = *(_QWORD *)(DerivedStorage + 248);
    if (!v1 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass()))
      v1 = 0;
    v2 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 144);
    if (v2)
      v2(v1);
  }
  else
  {
    APSLogErrorAt();
  }
  JUMPOUT(0x1CAA400E4);
}

uint64_t endpointCluster_setMRInfoOnSubEndpoint(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t result;

  if (!a1)
    return APSLogErrorAt();
  FigEndpointExtendedGetClassID();
  if (!CMBaseObjectIsMemberOfClass())
    return APSLogErrorAt();
  v4 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 24)
                                                                          + 72);
  if (!v4)
    return APSLogErrorAt();
  result = v4(a1, *MEMORY[0x1E0CA4658], a2, 0, 0);
  if ((_DWORD)result)
    return APSLogErrorAt();
  return result;
}

void __endpointCluster_failDelayManageSubEndpoint_block_invoke(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  uint64_t DerivedStorage;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  CFTypeRef v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  dispatch_time_t v17;
  const void *v18;
  const void *v19;

  v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 1)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 168);
    if (v3)
    {
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      usleep(1000 * v3);
      v2 = *(_DWORD *)(a1 + 64);
    }
    else
    {
      v2 = 1;
    }
  }
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(const void **)(a1 + 40);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if ((v2 - 2) < 2)
  {
    if (!endpointCluster_isComplete())
      goto LABEL_34;
    goto LABEL_19;
  }
  if (v2 != 1)
  {
    if (v2)
      goto LABEL_34;
    v7 = *(NSObject **)(DerivedStorage + 72);
    if (v7)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 72));
      dispatch_release(v7);
      *(_QWORD *)(DerivedStorage + 72) = 0;
    }
LABEL_19:
    if (*(_BYTE *)(DerivedStorage + 352))
    {
      if (gLogCategory_APEndpointCluster <= 50
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_BYTE *)(DerivedStorage + 352) = 0;
    }
    goto LABEL_34;
  }
  if (*(_DWORD *)(DerivedStorage + 304))
  {
    if (*(_QWORD *)(DerivedStorage + 384) == v4)
    {
      v8 = CMBaseObjectGetDerivedStorage();
      if (!*(_QWORD *)(v8 + 72))
      {
        v9 = v8;
        v10 = *(_QWORD *)(v8 + 120);
        if (gLogCategory_APEndpointCluster <= 50
          && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v11 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040EDED9539uLL);
        if (v11)
        {
          v12 = v11;
          v13 = CFRetain(v5);
          v14 = *(_QWORD *)(v9 + 384);
          *v12 = v13;
          v12[1] = v14;
          v15 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v9 + 40));
          *(_QWORD *)(v9 + 72) = v15;
          dispatch_set_context(v15, v12);
          dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v9 + 72), (dispatch_function_t)endpointCluster_failureDelayTimerFired);
          dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v9 + 72), (dispatch_function_t)endpointCluster_failureDelayTimerCancelled);
          v16 = *(NSObject **)(v9 + 72);
          v17 = dispatch_time(0, 1000000000 * v10);
          dispatch_source_set_timer(v16, v17, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
          dispatch_resume(*(dispatch_object_t *)(v9 + 72));
        }
        else
        {
          APSLogErrorAt();
        }
      }
    }
  }
LABEL_34:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  v18 = *(const void **)(a1 + 40);
  if (v18)
    CFRelease(v18);
  v19 = *(const void **)(a1 + 56);
  if (v19)
    CFRelease(v19);
}

BOOL endpointCluster_isComplete()
{
  uint64_t DerivedStorage;
  const __CFArray *Count;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Count = *(const __CFArray **)(DerivedStorage + 264);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  return (uint64_t)Count >= *(_QWORD *)(DerivedStorage + 24);
}

uint64_t endpointCluster_failureDelayTimerFired(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  const __CFSet *v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  v3 = *(NSObject **)(DerivedStorage + 72);
  if (v3)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 72));
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  if (*(_DWORD *)(DerivedStorage + 304))
  {
    if (*(_QWORD *)(DerivedStorage + 384) == *(_QWORD *)(a1 + 8))
    {
      v4 = *(const __CFSet **)(DerivedStorage + 360);
      if (v4)
      {
        if (CFSetGetCount(v4) >= 1)
        {
          *(_BYTE *)(DerivedStorage + 352) = 1;
          CFSetApplyBlock();
          if (gLogCategory_APEndpointCluster <= 50
            && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v5 = *(const void **)(DerivedStorage + 360);
          if (v5)
          {
            CFRelease(v5);
            *(_QWORD *)(DerivedStorage + 360) = 0;
          }
        }
      }
    }
  }
  return MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
}

void endpointCluster_failureDelayTimerCancelled(CFTypeRef *a1)
{
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

void __endpointCluster_failureDelayTimerFired_block_invoke(uint64_t a1, const void *a2)
{
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  endpointCluster_triggerLostClusterBuddyReconnectionLogic(*(_QWORD *)(a1 + 32), a2);
}

BOOL endpointCluster_wantSubEndpointActivation(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = APSGetFBOPropertyInt64();
  v6 = *(_QWORD *)(DerivedStorage + 8);
  if (v6)
    v7 = *(_DWORD *)DerivedStorage != 2;
  else
    v7 = 0;
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!v5)
  {
    if (endpointCluster_isSubEndpointOfType(a1, a2, *MEMORY[0x1E0CA48C0]))
    {
      if (gLogCategory_APEndpointCluster <= 30
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v6)
        return 0;
    }
    else if (v6 && *(_DWORD *)DerivedStorage == 2)
    {
      if (gLogCategory_APEndpointCluster <= 30
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (*(_DWORD *)(DerivedStorage + 188) != 4)
        return 0;
    }
    else if (APSShouldClusterEngageOnActivation() || *(_BYTE *)(DerivedStorage + 184))
    {
      if (gLogCategory_APEndpointCluster <= 30
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      if (gLogCategory_APEndpointCluster <= 30
        && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (!*(_BYTE *)(DerivedStorage + 369))
        return 0;
    }
    return 1;
  }
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v7;
}

void endpointCluster_activateSubEndpointCallback(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, int a5, _QWORD *a6)
{
  const void *v9;
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t TypedValue;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v16;
  int v17;
  uint64_t v18;
  void (*v19)(uint64_t, _QWORD, uint64_t);
  CFTypeRef cf;
  CFTypeRef v21;

  v9 = (const void *)a6[2];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v21 = 0;
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (!FigCFArrayContainsValue())
  {
    if (gLogCategory_APEndpointCluster > 50
      || gLogCategory_APEndpointCluster == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_15;
    }
LABEL_40:
    LogPrintF();
    goto LABEL_15;
  }
  if (a5 && APSGetFBOPropertyInt64())
  {
    if (gLogCategory_APEndpointCluster > 50
      || gLogCategory_APEndpointCluster == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
  if (a6[6] != *(_QWORD *)(DerivedStorage + 384) || (*(_DWORD *)(DerivedStorage + 304) & 0xFFFFFFFE) != 2)
    CompletionCallbackContextSetError((uint64_t)a6, 4294949692);
  if (a5)
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    endpointCluster_updateHealthState(v9);
    endpointCluster_updateSecondDisplayModeOnSubEndpointListChange((uint64_t)v9, (uint64_t)a2, 1);
    endpointCluster_setMRInfoOnSubEndpoint((uint64_t)a2, *(_QWORD *)(DerivedStorage + 616));
  }
  endpointCluster_handleSubEndpointResult(v9, (uint64_t)a6, a2, a5, 0);
  endpointCluster_sendActivationMetrics();
  if (*(_DWORD *)DerivedStorage == 3)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v12 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
    if (v12)
    {
      v12(CMBaseObject, CFSTR("RoomUUID"), *MEMORY[0x1E0C9AE00], &v21);
      if (v21)
      {
        if (*(_QWORD *)(DerivedStorage + 632))
        {
          CFNumberGetTypeID();
          TypedValue = CFDictionaryGetTypedValue();
          if (gLogCategory_APEndpointCluster <= 50
            && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v18 = FigEndpointGetCMBaseObject();
          v19 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (v19)
            v19(v18, *MEMORY[0x1E0CA44A0], TypedValue);
          goto LABEL_15;
        }
      }
    }
LABEL_53:
    APSLogErrorAt();
    goto LABEL_15;
  }
  if (!endpointCluster_isSubEndpointVolumeLeader((uint64_t)v9, a2))
  {
    if (gLogCategory_APEndpointCluster > 50
      || gLogCategory_APEndpointCluster == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
  if (!*(_BYTE *)(DerivedStorage + 640))
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    APEndpointApplyInitialVolume((uint64_t)a2);
    *(_BYTE *)(DerivedStorage + 640) = 1;
  }
  v14 = FigEndpointGetCMBaseObject();
  v15 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v15)
    goto LABEL_53;
  v15(v14, *MEMORY[0x1E0CA44A0], *MEMORY[0x1E0C9AE00], &cf);
  v16 = cf;
  if (!cf)
    goto LABEL_53;
  if (gLogCategory_APEndpointCluster <= 50)
  {
    if (gLogCategory_APEndpointCluster != -1 || (v17 = _LogCategory_Initialize(), v16 = cf, v17))
    {
      LogPrintF();
      v16 = cf;
    }
  }
  endpointCluster_postVolumeDidChange((uint64_t)v9, 0, v16);
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  endpointCluster_postIsMutedDidChange((uint64_t)v9, 0);
LABEL_15:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  CFRelease(a2);
  CFRelease(a6);
  if (cf)
    CFRelease(cf);
  if (v21)
    CFRelease(v21);
}

uint64_t endpointCluster_updateSecondDisplayModeOnSubEndpointListChange(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage;
  int v7;
  uint64_t result;
  int v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(unsigned __int8 *)(DerivedStorage + 419);
  result = endpointCluster_isSubEndpointOfType(a1, a2, *MEMORY[0x1E0CA48C0]);
  if ((_DWORD)result)
  {
    if (a3)
    {
      result = APSGetFBOPropertyInt64();
      v9 = result != 0;
      *(_BYTE *)(DerivedStorage + 419) = v9;
    }
    else
    {
      v9 = 0;
      *(_BYTE *)(DerivedStorage + 419) = 0;
    }
  }
  else
  {
    v9 = *(unsigned __int8 *)(DerivedStorage + 419);
  }
  if (v7 == v9)
  {
    if (a3 && v7 && *(_QWORD *)(DerivedStorage + 424) == 1)
    {
      result = endpointCluster_setSecondDisplayModeOnSubEndpoint(a2);
      if ((_DWORD)result)
        return APSLogErrorAt();
    }
  }
  else
  {
    if (gLogCategory_APEndpointCluster <= 50)
    {
      if (gLogCategory_APEndpointCluster != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        result = LogPrintF();
    }
    if (*(_QWORD *)(DerivedStorage + 424) == 1)
      return endpointCluster_setSecondDisplayModeOnSubEndpoints();
  }
  return result;
}

BOOL endpointCluster_isSubEndpointVolumeLeader(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t CMBaseObject;
  void (*v10)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  _BOOL8 v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  CFIndex Count;
  CFIndex v15;
  CFIndex v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  int v19;
  uint64_t v21;
  CFTypeRef cf;
  CFTypeRef v23;
  CFTypeRef v24;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v23 = 0;
  v24 = 0;
  if (*(_DWORD *)DerivedStorage != 3)
  {
    v11 = endpointCluster_getSubEndpointVolumeLeader(a1) == a2;
    goto LABEL_32;
  }
  v5 = DerivedStorage;
  v6 = *(const void **)(DerivedStorage + 8);
  if (v6)
  {
    if (v6 == a2)
    {
LABEL_14:
      v11 = 1;
      goto LABEL_32;
    }
    v7 = *MEMORY[0x1E0CA4458];
    v8 = *MEMORY[0x1E0C9AE00];
    CMBaseObject = FigEndpointGetCMBaseObject();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v10)
      v10(CMBaseObject, v7, v8, &v23);
  }
  else
  {
    v7 = *MEMORY[0x1E0CA4458];
    v8 = *MEMORY[0x1E0C9AE00];
  }
  v12 = FigEndpointGetCMBaseObject();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v13)
    goto LABEL_14;
  v13(v12, v7, v8, &v24);
  if (!v24)
    goto LABEL_14;
  if (FigCFEqual())
  {
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  if (!APSGetFBOPropertyInt64())
  {
    v21 = v7;
    Count = CFArrayGetCount(*(CFArrayRef *)(v5 + 264));
    if (Count >= 1)
    {
      v15 = Count;
      v16 = 0;
      while (1)
      {
        if (CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 264), v16) != a2
          && APSGetFBOPropertyInt64()
          && APSGetFBOPropertyInt64())
        {
          cf = 0;
          v17 = FigEndpointGetCMBaseObject();
          v18 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
          if (v18)
            v18(v17, v21, v8, &cf);
          v19 = FigCFEqual();
          if (cf)
            CFRelease(cf);
          if (v19)
            break;
        }
        if (v15 == ++v16)
          goto LABEL_32;
      }
      v11 = 0;
    }
  }
LABEL_32:
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v24)
    CFRelease(v24);
  if (v23)
    CFRelease(v23);
  return v11;
}

void endpointCluster_postVolumeDidChange(uint64_t a1, uint64_t a2, const void *a3)
{
  __CFDictionary *VolumeMuteNotificationPayload;
  __CFDictionary *v7;

  CMBaseObjectGetDerivedStorage();
  VolumeMuteNotificationPayload = endpointCluster_createVolumeMuteNotificationPayload(a1, a2);
  if (VolumeMuteNotificationPayload)
  {
    v7 = VolumeMuteNotificationPayload;
    CFDictionarySetValue(VolumeMuteNotificationPayload, (const void *)*MEMORY[0x1E0CA44A0], a3);
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v7);
  }
  else
  {
    APSLogErrorAt();
  }
}

void endpointCluster_postIsMutedDidChange(uint64_t a1, uint64_t a2)
{
  __CFDictionary *VolumeMuteNotificationPayload;
  __CFDictionary *v5;

  CMBaseObjectGetDerivedStorage();
  VolumeMuteNotificationPayload = endpointCluster_createVolumeMuteNotificationPayload(a1, a2);
  if (VolumeMuteNotificationPayload)
  {
    v5 = VolumeMuteNotificationPayload;
    if (gLogCategory_APEndpointCluster <= 30
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v5);
  }
  else
  {
    APSLogErrorAt();
  }
}

__CFDictionary *endpointCluster_createVolumeMuteNotificationPayload(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  uint64_t v7;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, _QWORD, uint64_t, void **);
  void *v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, void **);
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  v4 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = Mutable;
  if (Mutable)
  {
    v7 = *MEMORY[0x1E0CA4258];
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA4258], *(const void **)(DerivedStorage + 16));
    if (a2)
    {
      CMBaseObject = FigEndpointGetCMBaseObject();
      v9 = *(void (**)(uint64_t, _QWORD, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v9)
      {
        v9(CMBaseObject, *MEMORY[0x1E0CA4458], v4, &value);
        v10 = value;
        if (value)
          goto LABEL_8;
      }
      v11 = FigEndpointGetCMBaseObject();
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v12)
        v12(v11, v7, v4, &value);
      v10 = value;
      if (value)
      {
LABEL_8:
        CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E0CA3AD8], v10);
      }
      else
      {
        if (gLogCategory_APEndpointCluster > 60)
          return v6;
        if (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize())
          LogPrintF();
      }
    }
  }
  else
  {
    APSLogErrorAt();
  }
  if (value)
    CFRelease(value);
  return v6;
}

void endpointCluster_deferredHandleClusterHealthStateChanged(uint64_t a1)
{
  uint64_t DerivedStorage;
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  dispatch_time_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  if (*(_DWORD *)(a1 + 8) == 1)
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v3 = *(void **)a1;
    v4 = *(unsigned __int8 *)(a1 + 12);
    v5 = CMBaseObjectGetDerivedStorage();
    v6 = v5;
    if (v4)
      v7 = 0;
    else
      v7 = *(_QWORD *)(v5 + 128);
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v9 = *(NSObject **)(v6 + 64);
    if (v9)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(v6 + 64));
      dispatch_release(v9);
      *(_QWORD *)(v6 + 64) = 0;
    }
    *(_QWORD *)(v6 + 64) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v6 + 40));
    CFRetain(v3);
    dispatch_set_context(*(dispatch_object_t *)(v6 + 64), v3);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v6 + 64), (dispatch_function_t)endpointCluster_healthMonitoringTimerFired);
    dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v6 + 64), (dispatch_function_t)endpointCluster_healthMonitoringTimerCancelled);
    v10 = *(NSObject **)(v6 + 64);
    v11 = dispatch_time(0, 1000000000 * v7);
    dispatch_source_set_timer(v10, v11, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    dispatch_resume(*(dispatch_object_t *)(v6 + 64));
  }
  else
  {
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v8 = *(NSObject **)(DerivedStorage + 64);
    if (v8)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 64));
      dispatch_release(v8);
      *(_QWORD *)(DerivedStorage + 64) = 0;
    }
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  CFRelease(*(CFTypeRef *)a1);
}

uint64_t endpointCluster_desiredSubEndpointsActivated(uint64_t a1)
{
  uint64_t DerivedStorage;
  CFIndex v3;
  const void *ValueAtIndex;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264)) < 1)
    return 1;
  v3 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 264), v3);
    if (endpointCluster_wantSubEndpointActivation(a1, (uint64_t)ValueAtIndex) && !APSGetFBOPropertyInt64())
      break;
    if (++v3 >= CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 264)))
      return 1;
  }
  if (gLogCategory_APEndpointCluster > 40)
    return 0;
  if (gLogCategory_APEndpointCluster != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
  {
    LogPrintF();
    return 0;
  }
  return result;
}

void endpointCluster_healthMonitoringTimerFired(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  int v6;
  const __CFArray *Count;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  NSObject *v12;
  dispatch_time_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = CMBaseObjectGetDerivedStorage();
  v5 = *(_DWORD *)(v4 + 304) && !*(_DWORD *)(v4 + 320) && *(_BYTE *)(v4 + 369) != 0;
  if (!*(_DWORD *)(v3 + 304) || *(_DWORD *)(v3 + 348) == 2)
    goto LABEL_37;
  if (*(_QWORD *)(v3 + 8))
  {
    v6 = *(_DWORD *)(v3 + 188) == 4 || v5;
    if (v6 != 1)
      goto LABEL_37;
  }
  if (!endpointCluster_desiredSubEndpointsActivated(a1))
    goto LABEL_20;
  Count = *(const __CFArray **)(v3 + 264);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count >= *(_QWORD *)(v3 + 24))
LABEL_37:
    v8 = 1;
  else
LABEL_20:
    v8 = 0;
  if (gLogCategory_APEndpointCluster <= 30
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    CFArrayGetCount(*(CFArrayRef *)(v3 + 264));
    LogPrintF();
    if (v8)
      goto LABEL_26;
  }
  else if (v8)
  {
LABEL_26:
    v9 = 0;
    v10 = (uint64_t *)(DerivedStorage + 136);
LABEL_32:
    v11 = *v10;
    endpointCluster_setNeedsDiscoveryAndNotifyIfNeeded(a1, v9);
    if (gLogCategory_APEndpointCluster <= 50
      && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v12 = *(NSObject **)(DerivedStorage + 64);
    v13 = dispatch_time(0, 1000000000 * v11);
    dispatch_source_set_timer(v12, v13, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    JUMPOUT(0x1CAA400E4);
  }
  if (*(_BYTE *)(DerivedStorage + 371) && *(_DWORD *)(DerivedStorage + 304) == 3)
  {
    v9 = 0;
    v10 = (uint64_t *)(DerivedStorage + 160);
  }
  else
  {
    v10 = (uint64_t *)(DerivedStorage + 152);
    v9 = 1;
  }
  goto LABEL_32;
}

void endpointCluster_healthMonitoringTimerCancelled(const void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCluster <= 50
    && (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
  endpointCluster_setNeedsDiscoveryAndNotifyIfNeeded((uint64_t)a1, 0);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 208));
  CFRelease(a1);
}

uint64_t endpointCluster_setNeedsDiscoveryAndNotifyIfNeeded(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;

  result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(result + 371) != a2)
  {
    v4 = result;
    if (gLogCategory_APEndpointCluster >= 51)
    {
      *(_BYTE *)(result + 371) = a2;
    }
    else
    {
      if (gLogCategory_APEndpointCluster != -1 || _LogCategory_Initialize())
        LogPrintF();
      v5 = gLogCategory_APEndpointCluster;
      *(_BYTE *)(v4 + 371) = a2;
      if (v5 <= 30 && (v5 != -1 || _LogCategory_Initialize()))
        LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    return FigDispatchAsyncPostNotification();
  }
  return result;
}

uint64_t APEndpointStreamInterruptingWrapperCreate(uint64_t a1, const void *a2, const void *a3, const void *a4, _QWORD *a5)
{
  uint64_t v9;
  _QWORD *DerivedStorage;
  dispatch_queue_t v11;
  dispatch_queue_t v12;
  uint64_t v13;
  char label[64];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (!a3)
      goto LABEL_21;
    FigEndpointStreamAirPlayGetClassID();
    v9 = CMDerivedObjectCreate();
    if ((_DWORD)v9)
    {
      v13 = v9;
      APSLogErrorAt();
      return v13;
    }
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    DerivedStorage[1] = CFRetain(a2);
    *DerivedStorage = CFRetain(a3);
    SNPrintF();
    v11 = dispatch_queue_create(label, 0);
    DerivedStorage[3] = v11;
    if (!v11 || (SNPrintF(), v12 = dispatch_queue_create(label, 0), (DerivedStorage[2] = v12) == 0))
    {
      APSLogErrorAt();
      return 4294950535;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    if (!a4)
    {
LABEL_21:
      APSLogErrorAt();
      return 4294950536;
    }
    DerivedStorage[4] = CFRetain(a4);
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 32))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
      FigNotificationCenterAddWeakListener();
    }
    if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
      && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v13 = 0;
    *a5 = 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294950536;
  }
  return v13;
}

uint64_t interruptingStreamWrapper_interruptibleStreamNotificationCallback()
{
  uint64_t result;

  result = FigCFEqual();
  if ((_DWORD)result)
    return interruptingStreamWrapper_yieldToInterruptibleIfNecessary();
  return result;
}

void interruptingStreamWrapper_Finalize()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  NSObject *v2;
  const void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 32))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
    FigNotificationCenterRemoveWeakListener();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  v1 = *(NSObject **)(DerivedStorage + 24);
  if (v1)
  {
    dispatch_release(v1);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v2 = *(NSObject **)(DerivedStorage + 16);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 8);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v4 = *(const void **)(DerivedStorage + 32);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
}

CFStringRef interruptingStreamWrapper_CopyDebugDescription(const void *a1)
{
  _QWORD *DerivedStorage;
  const __CFAllocator *v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v3, 0, CFSTR("<APEndpointStreamInterruptingWrapper %p; sub: %p; interruptible: %p>"),
           a1,
           DerivedStorage[1],
           *DerivedStorage);
}

uint64_t interruptingStreamWrapper_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMBaseObject = FigEndpointStreamGetCMBaseObject();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(CMBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t interruptingStreamWrapper_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMBaseObject = FigEndpointStreamGetCMBaseObject();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(CMBaseObject, a2, a3);
  else
    return 4294954514;
}

uint64_t interruptingStreamWrapper_subStreamNotificationCallback()
{
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t interruptingStreamWrapper_bufferedClientUpdateNotificationCallback()
{
  return interruptingStreamWrapper_yieldToInterruptibleIfNecessary();
}

uint64_t interruptingStreamWrapper_yieldToInterruptibleIfNecessary()
{
  uint64_t DerivedStorage;
  uint64_t SharedInstance;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t *);
  const __CFAllocator *v4;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  uint64_t v7;
  __CFDictionary *v8;
  __CFDictionary *Mutable;
  uint64_t FigEndpointStream;
  uint64_t (*v12)(uint64_t, _QWORD, _QWORD, _QWORD);
  CFTypeRef cf;
  uint64_t v14;

  FigEndpointStreamAirPlayGetFigEndpointStream();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v14 = 0;
  if (*(_BYTE *)(DerivedStorage + 40))
  {
    if (gLogCategory_APEndpointStreamInterruptingWrapper > 50
      || gLogCategory_APEndpointStreamInterruptingWrapper == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_24;
    }
    goto LABEL_4;
  }
  SharedInstance = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
  v2 = *(_QWORD *)(DerivedStorage + 32);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v3)
  {
    v3(SharedInstance, v2, &v14);
    if (v14)
    {
      if (gLogCategory_APEndpointStreamInterruptingWrapper > 50
        || gLogCategory_APEndpointStreamInterruptingWrapper == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_24;
      }
      goto LABEL_4;
    }
  }
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointStreamGetCMBaseObject();
  v6 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v6)
    v6(CMBaseObject, *MEMORY[0x1E0CA4790], v4, &cf);
  if (FigCFEqual())
  {
    if (gLogCategory_APEndpointStreamInterruptingWrapper > 50
      || gLogCategory_APEndpointStreamInterruptingWrapper == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_24;
    }
LABEL_4:
    LogPrintF();
LABEL_24:
    v7 = 0;
    v8 = 0;
    goto LABEL_25;
  }
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = Mutable;
  if (Mutable)
  {
    CFDictionarySetValue(Mutable, CFSTR("InterruptingStreamDidYield"), (const void *)*MEMORY[0x1E0C9AE50]);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    FigEndpointStream = FigEndpointStreamAirPlayGetFigEndpointStream();
    v12 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v12)
    {
      v7 = v12(FigEndpointStream, 0, 0, 0);
      if (!(_DWORD)v7)
        goto LABEL_25;
    }
    else
    {
      v7 = 4294954514;
    }
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    v7 = 4294960568;
  }
LABEL_25:
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
  return v7;
}

__CFString *interruptingStreamWrapper_subEndpointAddRemoveObservingProtocolCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("APEndpointStreamInterruptingWrapper <APSubEndpointAddRemoveObservingProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t interruptingStreamWrapper_NotifySubEndpointAdded(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v4 = *(_QWORD *)(DerivedStorage + 8);
  APSubEndpointAddRemoveObservingProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  if (v7)
    return v7(v4, a2);
  else
    return 4294954514;
}

uint64_t interruptingStreamWrapper_NotifySubEndpointRemoved(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v4 = *(_QWORD *)(DerivedStorage + 8);
  APSubEndpointAddRemoveObservingProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 16);
  if (v7)
    return v7(v4, a2);
  else
    return 4294954514;
}

uint64_t interruptingStreamWrapper_Suspend(const void *a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t interruptingStreamWrapper_Resume(const void *a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t interruptingStreamWrapper_Flush(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v6 = *(_QWORD *)(DerivedStorage + 8);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v7)
    return v7(v6, a2, a3);
  else
    return 4294954514;
}

uint64_t interruptingStreamWrapper_Dissociate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v1 = *(_QWORD *)(DerivedStorage + 8);
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v2)
    return v2(v1);
  else
    return 4294954514;
}

void interruptingStreamWrapper_suspendAsync(uint64_t a1)
{
  const void *v2;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (FigEndpointStreamSuspendSync()
    || APEndpointStreamInterruptibleWrapperEndInterruption())
  {
    APSLogErrorAt();
  }
  if (*(_QWORD *)(a1 + 16))
  {
    CFRetain(*(CFTypeRef *)a1);
    APSDispatchAsyncFHelper();
  }
  CFRelease(*(CFTypeRef *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
}

void interruptingStreamWrapper_completionCallback(CFTypeRef *a1)
{
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  ((void (*)(CFTypeRef, _QWORD, CFTypeRef))a1[2])(*a1, *((unsigned int *)a1 + 2), a1[3]);
  CFRelease(*a1);
}

void interruptingStreamWrapper_resumeAsync(uint64_t a1)
{
  const void *v2;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 30
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (APEndpointStreamInterruptibleWrapperBeginInterruption()
    || FigEndpointStreamResumeSync())
  {
    APSLogErrorAt();
  }
  if (*(_QWORD *)(a1 + 16))
  {
    CFRetain(*(CFTypeRef *)a1);
    APSDispatchAsyncFHelper();
  }
  CFRelease(*(CFTypeRef *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
}

uint64_t interruptingStreamWrapper_FlushAudioDataWithinSampleRange(uint64_t a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, _OWORD *);
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[3];

  FigEndpointStreamAirPlayGetFigEndpointStream();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v4 = *(_QWORD *)(DerivedStorage + 8);
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 8);
  if (!v5)
    return 4294954514;
  v10[0] = v7;
  v10[1] = v8;
  v10[2] = v9;
  return v5(v4, v10);
}

uint64_t interruptingStreamWrapper_SetRateAndAnchorTimeWithCompletionCallback(const void *a1, CMTime *a2, CMTime *a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t DerivedStorage;
  _QWORD *v13;
  CFTypeRef v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, CMTime *, __int128 *, uint64_t (*)(const void *), _QWORD *, double);
  __int128 v19;
  CMTimeEpoch epoch;
  CMTime v21;
  __int128 v22;
  CMTimeEpoch v23;
  CMTime time;

  FigEndpointStreamAirPlayGetFigEndpointStream();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = malloc_type_calloc(1uLL, 0x18uLL, 0xA00402214FCE6uLL);
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    time = *a2;
    CMTimeGetSeconds(&time);
    time = *a3;
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  if (a1)
    v14 = CFRetain(a1);
  else
    v14 = 0;
  *v13 = v14;
  v13[1] = a4;
  v13[2] = a5;
  v15 = *(_QWORD *)(DerivedStorage + 8);
  *(_OWORD *)&v21.value = *(_OWORD *)&a2->value;
  v21.epoch = a2->epoch;
  v19 = *(_OWORD *)&a3->value;
  epoch = a3->epoch;
  v16 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
  if (!v16)
    return 4294954514;
  v17 = *(uint64_t (**)(uint64_t, CMTime *, __int128 *, uint64_t (*)(const void *), _QWORD *, double))(v16 + 16);
  if (!v17)
    return 4294954514;
  time = v21;
  v22 = v19;
  v23 = epoch;
  return v17(v15, &time, &v22, interruptingStreamWrapper_setRateCompletionCallback, v13, a6);
}

uint64_t interruptingStreamWrapper_copyTransportFormatDescriptionForSourceContentFormatDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  FigEndpointStreamAirPlayGetFigEndpointStream();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v6 = *(_QWORD *)(DerivedStorage + 8);
  FigEndpointStreamAirPlayGetClassID();
  if (!CMBaseObjectIsMemberOfClass())
    v6 = 0;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 24);
  if (v7)
    return v7(v6, a2, a3);
  else
    return 4294954514;
}

uint64_t interruptingStreamWrapper_isPassthroughSupportedForFormatDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  FigEndpointStreamAirPlayGetFigEndpointStream();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 10
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v6 = *(_QWORD *)(DerivedStorage + 8);
  FigEndpointStreamAirPlayGetClassID();
  if (!CMBaseObjectIsMemberOfClass())
    v6 = 0;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 32);
  if (v7)
    return v7(v6, a2, a3);
  else
    return 4294954514;
}

uint64_t interruptingStreamWrapper_setRateCompletionCallback(const void *a1)
{
  FigEndpointStreamAirPlayGetFigEndpointStream();
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1)
    CFRetain(a1);
  return APSDispatchAsyncFHelper();
}

void interruptingStreamWrapper_setRateCompletionCallbackWorkDispatch(uint64_t a1)
{
  int v2;
  double v3;
  uint64_t v4;
  uint64_t DerivedStorage;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(double *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 72);
  FigEndpointStreamAirPlayGetFigEndpointStream();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_QWORD *)(v4 + 8))
  {
    CFRetain(*(CFTypeRef *)v4);
    APSDispatchAsyncFHelper();
  }
  if (v2)
  {
    if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
      && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    *(_BYTE *)(DerivedStorage + 40) = v3 != 0.0;
    if (interruptingStreamWrapper_yieldToInterruptibleIfNecessary())
      APSLogErrorAt();
  }
  CFRelease(*(CFTypeRef *)v4);
  free((void *)v4);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

void interruptingStreamWrapper_setRateCompletionClientCallback(uint64_t a1)
{
  CFTypeRef v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  void (*v6)(CFTypeRef, uint64_t, __int128 *, __int128 *, uint64_t, double);
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  if (gLogCategory_APEndpointStreamInterruptingWrapper <= 50
    && (gLogCategory_APEndpointStreamInterruptingWrapper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(CFTypeRef *)a1;
  v3 = *(unsigned int *)(a1 + 8);
  v4 = *(double *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 40);
  v7 = *(_OWORD *)(a1 + 48);
  v6 = *(void (**)(CFTypeRef, uint64_t, __int128 *, __int128 *, uint64_t, double))(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 64);
  v6(v2, v3, &v9, &v7, v5, v4);
  CFRelease(*(CFTypeRef *)a1);
}

uint64_t APAudioHoseManagerBufferedGetClassID()
{
  if (APAudioHoseManagerBufferedGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APAudioHoseManagerBufferedGetClassID_sRegisterOnce, &APAudioHoseManagerBufferedGetClassID_sClassID, (dispatch_function_t)audioHoseManagerBuffered_registerBaseClass);
  return APAudioHoseManagerBufferedGetClassID_sClassID;
}

uint64_t audioHoseManagerBuffered_registerBaseClass()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t APAudioHoseManagerBufferedGetTypeID()
{
  if (APAudioHoseManagerBufferedGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APAudioHoseManagerBufferedGetClassID_sRegisterOnce, &APAudioHoseManagerBufferedGetClassID_sClassID, (dispatch_function_t)audioHoseManagerBuffered_registerBaseClass);
  return CMBaseClassGetCFTypeID();
}

uint64_t APAudioHoseManagerBufferedCreate(const __CFAllocator *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  dispatch_queue_t v6;
  dispatch_queue_t v7;
  CFMutableDictionaryRef Mutable;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int CFPreferenceNumberWithDefault;
  int v13;
  const __CFAllocator *v14;
  CFMutableDictionaryRef v15;
  CFMutableDictionaryRef v16;
  int v17;
  uint64_t v18;
  __int128 v20;
  CMTime time;
  CFTypeRef v22;

  v22 = 0;
  if (APAudioHoseManagerBufferedGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APAudioHoseManagerBufferedGetClassID_sRegisterOnce, &APAudioHoseManagerBufferedGetClassID_sClassID, (dispatch_function_t)audioHoseManagerBuffered_registerBaseClass);
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
  {
    v18 = v4;
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v6 = dispatch_queue_create("HoseManagerBufferedQueue", 0);
    *(_QWORD *)(DerivedStorage + 168) = v6;
    if (!v6
      || (v7 = dispatch_queue_create("HoseManagerBufferedNotificationQueue", 0),
          (*(_QWORD *)(DerivedStorage + 176) = v7) == 0))
    {
      APSLogErrorAt();
      v18 = APSSignalErrorAt();
      goto LABEL_43;
    }
    *(_BYTE *)(DerivedStorage + 185) = 0;
    Mutable = CFDictionaryCreateMutable(a1, 0, 0, &hoseManagerBuffered_hoseDescriptorDictionaryCallbacks);
    *(_BYTE *)DerivedStorage = 0;
    *(_QWORD *)(DerivedStorage + 192) = Mutable;
    *(_QWORD *)(DerivedStorage + 200) = 0;
    v9 = MEMORY[0x1E0CA2E18];
    v10 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)(DerivedStorage + 236) = *MEMORY[0x1E0CA2E18];
    v11 = *(_QWORD *)(v9 + 16);
    *(_QWORD *)(DerivedStorage + 252) = v11;
    *(_BYTE *)(DerivedStorage + 372) = 1;
    *(_WORD *)(DerivedStorage + 152) = 0;
    *(_BYTE *)(DerivedStorage + 36) = 0;
    *(_QWORD *)(DerivedStorage + 40) = 0;
    v20 = v10;
    *(_OWORD *)(DerivedStorage + 48) = v10;
    *(_QWORD *)(DerivedStorage + 64) = v11;
    *(_DWORD *)(DerivedStorage + 72) = FigGetCFPreferenceNumberWithDefault();
    if (gLogCategory_APAudioHoseManagerBuffered <= 50
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (v22)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    *(_OWORD *)(DerivedStorage + 76) = v20;
    *(_QWORD *)(DerivedStorage + 92) = v11;
    *(_OWORD *)(DerivedStorage + 100) = v20;
    *(_QWORD *)(DerivedStorage + 116) = v11;
    *(_DWORD *)(DerivedStorage + 124) = 0;
    CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
    CMTimeMake(&time, CFPreferenceNumberWithDefault, 1);
    *(CMTime *)(DerivedStorage + 128) = time;
    *(_DWORD *)(DerivedStorage + 208) = 0;
    *(_DWORD *)(DerivedStorage + 184) = 0;
    *(_BYTE *)(DerivedStorage + 188) = 0;
    *(_OWORD *)(DerivedStorage + 212) = v20;
    *(_QWORD *)(DerivedStorage + 228) = v11;
    *(_OWORD *)(DerivedStorage + 236) = v20;
    *(_QWORD *)(DerivedStorage + 252) = v11;
    *(_DWORD *)(DerivedStorage + 260) = 0;
    *(_OWORD *)(DerivedStorage + 264) = v20;
    *(_QWORD *)(DerivedStorage + 280) = v11;
    *(_OWORD *)(DerivedStorage + 288) = v20;
    *(_QWORD *)(DerivedStorage + 304) = v11;
    *(_BYTE *)(DerivedStorage + 328) = 0;
    *(_QWORD *)(DerivedStorage + 472) = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 320) = 0;
    FigGetCFPreferenceNumberWithDefault();
    *(_QWORD *)(DerivedStorage + 336) = MillisecondsToUpTicks();
    FigGetCFPreferenceNumberWithDefault();
    *(_QWORD *)(DerivedStorage + 344) = MillisecondsToUpTicks();
    FigGetCFPreferenceNumberWithDefault();
    *(_QWORD *)(DerivedStorage + 352) = MillisecondsToUpTicks();
    FigGetCFPreferenceNumberWithDefault();
    *(_QWORD *)(DerivedStorage + 360) = MillisecondsToUpTicks();
    *(_DWORD *)(DerivedStorage + 368) = FigGetCFPreferenceNumberWithDefault();
    *(_OWORD *)(DerivedStorage + 376) = v20;
    *(_QWORD *)(DerivedStorage + 392) = v11;
    v13 = FigGetCFPreferenceNumberWithDefault();
    CMTimeMake(&time, v13, 1);
    *(CMTime *)(DerivedStorage + 400) = time;
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v15 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(DerivedStorage + 456) = v15;
    if (v15)
    {
      v16 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_QWORD *)(DerivedStorage + 448) = v16;
      if (v16)
      {
        v17 = FigGetCFPreferenceNumberWithDefault();
        CMTimeMake(&time, v17, 1000);
        *(CMTime *)(DerivedStorage + 212) = time;
        if (gLogCategory_APAudioHoseManagerBuffered <= 50
          && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
        {
          if (v22)
            CMBaseObjectGetDerivedStorage();
          time = *(CMTime *)(DerivedStorage + 212);
          CMTimeGetSeconds(&time);
          LogPrintF();
        }
        *(_DWORD *)(DerivedStorage + 208) = FigGetCFPreferenceNumberWithDefault();
        if (gLogCategory_APAudioHoseManagerBuffered <= 50)
        {
          if (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize())
          {
            if (v22)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          if (gLogCategory_APAudioHoseManagerBuffered <= 50
            && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
          {
            if (v22)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
        }
        v18 = 0;
        *a2 = v22;
        return v18;
      }
      v18 = 4294894846;
    }
    else
    {
      v18 = 4294894846;
    }
  }
  APSLogErrorAt();
LABEL_43:
  if (v22)
    CFRelease(v22);
  return v18;
}

CFStringRef audioHoseManagerBuffered_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APAudioHoseManager %p]"), a1);
}

uint64_t audioHoseManagerBuffered_Invalid()
{
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 36) = 1;
  return 1;
}

uint64_t audioHoseManagerBuffered_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 36) = 1;
  dispatch_sync(*(dispatch_queue_t *)(DerivedStorage + 168), &__block_literal_global_33);
  v3 = *(NSObject **)(DerivedStorage + 168);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 168) = 0;
  }
  dispatch_sync(*(dispatch_queue_t *)(DerivedStorage + 176), &__block_literal_global_60);
  v4 = *(NSObject **)(DerivedStorage + 176);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(DerivedStorage + 176) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 200);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 200) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 160);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 160) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 192);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 192) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 440);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 440) = 0;
  }
  *(_QWORD *)(DerivedStorage + 320) = 0;
  audioHoseManagerBuffered_releaseCryptors(a1, MEMORY[0x1E0CA2E18]);
  v9 = *(const void **)(DerivedStorage + 448);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 448) = 0;
  }
  audioHoseManagerBuffered_releaseMagicCookies(a1, MEMORY[0x1E0CA2E18]);
  v10 = *(const void **)(DerivedStorage + 456);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 456) = 0;
  }
  result = FigSimpleMutexDestroy();
  *(_QWORD *)(DerivedStorage + 472) = 0;
  return result;
}

__CFString *audioHoseManagerBuffered_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APAudioHoseManagerBuffered %p>"), a1);
  return Mutable;
}

uint64_t audioHoseManagerBuffered_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  int v9;
  CFTypeRef *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 472));
  if (!a2)
  {
    v11 = 4294894845;
LABEL_28:
    APSLogErrorAt();
    goto LABEL_9;
  }
  if (!a4)
  {
    v11 = 4294894845;
    goto LABEL_28;
  }
  if (CFEqual(a2, CFSTR("ShouldUseReceiverChoosesAnchor")))
  {
    v8 = CMBaseObjectGetDerivedStorage();
    v13 = 0;
    v14 = &v13;
    v15 = 0x2000000000;
    v16 = 0;
    if (CFDictionaryGetCount(*(CFDictionaryRef *)(v8 + 192)) == 1)
      CFDictionaryApplyBlock();
LABEL_6:
    v9 = *((unsigned __int8 *)v14 + 24);
    _Block_object_dispose(&v13, 8);
    v10 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (!v9)
      v10 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v11 = 0;
    *a4 = CFRetain(*v10);
    goto LABEL_9;
  }
  if (CFEqual(a2, CFSTR("IsRunning")))
  {
    CMBaseObjectGetDerivedStorage();
    v13 = 0;
    v14 = &v13;
    v15 = 0x2000000000;
    v16 = 0;
    CFDictionaryApplyBlock();
    if (gLogCategory_APAudioHoseManagerBuffered <= 90
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    goto LABEL_6;
  }
  if (gLogCategory_APAudioHoseManagerBuffered <= 90
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  v11 = 4294954509;
LABEL_9:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 472));
  return v11;
}

uint64_t audioHoseManagerBuffered_SetProperty(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFTypeID v8;
  Boolean Value;
  uint64_t v10;
  CFTypeID v11;
  __int16 UInt16;
  CFTypeID v13;
  NSObject *v14;
  _QWORD *v15;
  CFTypeID v17;
  CFTypeID v18;
  CFTypeID v19;
  CFTypeID v20;
  _QWORD v21[6];
  _QWORD v22[6];
  CMTime v23;
  _QWORD block[11];
  __int16 v25;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    v10 = 4294894845;
    goto LABEL_44;
  }
  v7 = DerivedStorage;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      if (a3)
      {
        v11 = CFGetTypeID(a3);
        if (v11 != CFNumberGetTypeID())
        {
          v10 = 4294894845;
          goto LABEL_44;
        }
      }
      UInt16 = FigCFNumberGetUInt16();
      block[6] = MEMORY[0x1E0C809B0];
      block[7] = 0x40000000;
      block[8] = __audioHoseManagerBuffered_SetProperty_block_invoke;
      block[9] = &__block_descriptor_tmp_84;
      v25 = UInt16;
      block[10] = a1;
      CFDictionaryApplyBlock();
      return 0;
    }
    if (FigCFEqual())
    {
      if (a3)
      {
        v13 = CFGetTypeID(a3);
        if (v13 != CFNumberGetTypeID())
        {
          v10 = 4294894845;
          goto LABEL_44;
        }
      }
      v14 = *(NSObject **)(v7 + 168);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __audioHoseManagerBuffered_SetProperty_block_invoke_2;
      block[3] = &__block_descriptor_tmp_85_0;
      block[4] = a1;
      block[5] = a3;
      v15 = block;
      goto LABEL_14;
    }
    if (FigCFEqual())
    {
      if (!a3 || (v17 = CFGetTypeID(a3), v17 == CFDictionaryGetTypeID()))
      {
        CMTimeMakeFromDictionary(&v23, (CFDictionaryRef)a3);
        v10 = 0;
        *(CMTime *)(v7 + 236) = v23;
        return v10;
      }
      v10 = 4294894845;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (FigCFEqual())
        {
          v14 = *(NSObject **)(v7 + 168);
          v22[0] = MEMORY[0x1E0C809B0];
          v22[1] = 0x40000000;
          v22[2] = __audioHoseManagerBuffered_SetProperty_block_invoke_3;
          v22[3] = &__block_descriptor_tmp_86_0;
          v22[4] = v7;
          v22[5] = a3;
          v15 = v22;
        }
        else
        {
          if (FigCFEqual())
          {
            if (!a3 || (v19 = CFGetTypeID(a3), v19 == CFDictionaryGetTypeID()))
            {
              CMTimeMakeFromDictionary(&v23, (CFDictionaryRef)a3);
              v10 = 0;
              *(CMTime *)(v7 + 288) = v23;
              return v10;
            }
            v10 = 4294894845;
            goto LABEL_44;
          }
          if (FigCFEqual())
          {
            if (a3)
            {
              v20 = CFGetTypeID(a3);
              if (v20 != CFStringGetTypeID())
              {
                v10 = 4294894845;
                goto LABEL_44;
              }
            }
            *(_BYTE *)v7 = 0;
            CFStringGetCString(a3, (char *)v7, 36, 0x600u);
            return 0;
          }
          if (!FigCFEqual())
            return 4294954509;
          v14 = *(NSObject **)(v7 + 168);
          v21[0] = MEMORY[0x1E0C809B0];
          v21[1] = 0x40000000;
          v21[2] = __audioHoseManagerBuffered_SetProperty_block_invoke_4;
          v21[3] = &__block_descriptor_tmp_87_0;
          v21[4] = v7;
          v21[5] = a3;
          v15 = v21;
        }
LABEL_14:
        dispatch_sync(v14, v15);
        return 0;
      }
      if (!a3 || (v18 = CFGetTypeID(a3), v18 == CFDictionaryGetTypeID()))
      {
        CMTimeMakeFromDictionary(&v23, (CFDictionaryRef)a3);
        v10 = 0;
        *(CMTime *)(v7 + 264) = v23;
        return v10;
      }
      v10 = 4294894845;
    }
LABEL_44:
    APSLogErrorAt();
    return v10;
  }
  if (a3)
  {
    v8 = CFGetTypeID(a3);
    if (v8 != CFBooleanGetTypeID())
    {
      v10 = 4294894845;
      goto LABEL_44;
    }
  }
  Value = CFBooleanGetValue((CFBooleanRef)a3);
  v10 = 0;
  *(_BYTE *)(v7 + 185) = Value;
  return v10;
}

uint64_t audioHoseManagerBuffered_releaseCryptors(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  int64_t Count;
  size_t v7;
  const void **v8;
  const void **v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  CMTime time2;
  CMTime time1;
  CMTime v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (*(_BYTE *)(DerivedStorage + 36)
    || (v5 = DerivedStorage, Count = CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 448)), Count < 1))
  {
    v13 = 0;
    v8 = 0;
LABEL_24:
    v9 = 0;
    goto LABEL_19;
  }
  v7 = Count;
  v8 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  if (!v8)
  {
    v13 = 4294894846;
    APSLogErrorAt();
    goto LABEL_24;
  }
  v9 = (const void **)malloc_type_calloc(v7, 8uLL, 0x6004044C4A2DFuLL);
  if (v9)
  {
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v5 + 448), v8, v9);
    v10 = 0;
    v11 = &gLogCategory_APAudioHoseManagerBuffered;
    while (1)
    {
      CMTimeMakeFromDictionary(&v17, (CFDictionaryRef)v9[v10]);
      if ((*(_BYTE *)(a2 + 12) & 1) == 0 || (time1 = *(CMTime *)a2, time2 = v17, CMTimeCompare(&time1, &time2) >= 1))
      {
        if (*v11 <= 50 && (*v11 != -1 || _LogCategory_Initialize()))
        {
          if (a1)
            CMBaseObjectGetDerivedStorage();
          audioHoseManagerBuffered_getCryptorIDForCryptor((uint64_t)v8[v10]);
          LogPrintF();
          v11 = &gLogCategory_APAudioHoseManagerBuffered;
        }
        CMNotificationCenterGetDefaultLocalCenter();
        v12 = FigNotificationCenterRemoveWeakListener();
        if ((_DWORD)v12)
        {
          v13 = v12;
          goto LABEL_21;
        }
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v5 + 448), v8[v10]);
      }
      if (v7 == ++v10)
      {
        v13 = 0;
        goto LABEL_19;
      }
    }
  }
  v13 = 4294894846;
LABEL_21:
  APSLogErrorAt();
LABEL_19:
  free(v8);
  free(v9);
  return v13;
}

uint64_t audioHoseManagerBuffered_releaseMagicCookies(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  int64_t Count;
  size_t v7;
  const void **v8;
  const void **v9;
  const void **v10;
  uint64_t i;
  uint64_t v12;
  CMTime time2;
  CMTime time1;
  CMTime v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (*(_BYTE *)(DerivedStorage + 36)
    || (v5 = DerivedStorage, Count = CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 456)), Count < 1))
  {
    v12 = 0;
    v8 = 0;
    v10 = 0;
  }
  else
  {
    v7 = Count;
    v8 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    if (v8 && (v9 = (const void **)malloc_type_calloc(v7, 8uLL, 0x6004044C4A2DFuLL)) != 0)
    {
      v10 = v9;
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v5 + 456), v8, v9);
      for (i = 0; i != v7; ++i)
      {
        CMTimeMakeFromDictionary(&v16, (CFDictionaryRef)v10[i]);
        if ((*(_BYTE *)(a2 + 12) & 1) != 0)
        {
          time1 = *(CMTime *)a2;
          time2 = v16;
          if (CMTimeCompare(&time1, &time2) < 1)
            continue;
        }
        if (gLogCategory_APAudioHoseManagerBuffered <= 50
          && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1)
            CMBaseObjectGetDerivedStorage();
          audioHoseManagerBuffered_getMagicCookieIDForMagicCookieData((CFDataRef)v8[i]);
          LogPrintF();
        }
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v5 + 456), v8[i]);
      }
      v12 = 0;
    }
    else
    {
      APSLogErrorAt();
      v10 = 0;
      v12 = 4294894846;
    }
  }
  free(v8);
  free(v10);
  return v12;
}

uint64_t audioHoseManagerBuffered_getCryptorIDForCryptor(uint64_t a1)
{
  uint64_t v1;
  unsigned int (*v2)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  v1 = a1;
  cf = 0;
  if (audioHoseManagerBuffered_getCryptorIDForCryptor_sRandomBytesOnce == -1)
  {
    if (a1)
    {
LABEL_3:
      v2 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
      if (!v2
        || v2(v1, *MEMORY[0x1E0CA3230], *MEMORY[0x1E0C9AE00], &cf)
        || CFStringGetOrCopyCStringUTF8())
      {
        APSLogErrorAt();
        v1 = 0;
      }
      else
      {
        v1 = SipHash();
      }
    }
  }
  else
  {
    dispatch_once(&audioHoseManagerBuffered_getCryptorIDForCryptor_sRandomBytesOnce, &__block_literal_global_63);
    if (v1)
      goto LABEL_3;
  }
  if (cf)
    CFRelease(cf);
  return v1;
}

void audioHoseManagerBuffered_handleCryptorKeyUpdated(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  _QWORD *v7;
  _QWORD *v8;
  CFTypeRef v9;
  CFTypeRef v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a2)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x60040FAFB2B2FuLL);
  if (v7)
  {
    v8 = v7;
    if (a2)
      v9 = CFRetain(a2);
    else
      v9 = 0;
    *v8 = v9;
    if (a4)
      v10 = CFRetain(a4);
    else
      v10 = 0;
    v8[1] = v10;
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 168), v8, (dispatch_function_t)audioHoseManagerBuffered_handleCryptorKeyUpdatedInternal);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t __audioHoseManagerBuffered_getCryptorIDForCryptor_block_invoke()
{
  return RandomBytes();
}

void audioHoseManagerBuffered_handleCryptorKeyUpdatedInternal(uint64_t *a1)
{
  const void *v2;

  if (*a1)
  {
    if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 36)
      && audioHoseManagerBuffered_setCryptorForAllHoses(*a1, a1[1]))
    {
      APSLogErrorAt();
    }
    if (*a1)
      CFRelease((CFTypeRef)*a1);
  }
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  free(a1);
}

uint64_t audioHoseManagerBuffered_setCryptorForAllHoses(uint64_t a1, uint64_t a2)
{
  uint64_t CryptorIDForCryptor;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  CMBaseObjectGetDerivedStorage();
  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  if (a2)
  {
    CryptorIDForCryptor = audioHoseManagerBuffered_getCryptorIDForCryptor(a2);
    v7[3] = CryptorIDForCryptor;
    CFDictionaryApplyBlock();
    v4 = *((unsigned int *)v11 + 6);
  }
  else
  {
    v4 = 4294894845;
    APSLogErrorAt();
    *((_DWORD *)v11 + 6) = -72451;
  }
  _Block_object_dispose(&v6, 8);
  _Block_object_dispose(&v10, 8);
  return v4;
}

uint64_t __audioHoseManagerBuffered_setCryptorForAllHoses_block_invoke(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24))
  {
    v3 = result;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = audioHoseManagerBuffered_SetCryptorForSingleHose(*(const void **)(result + 48), *a3, *(_QWORD *)(result + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40)+ 8)+ 24));
    result = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24);
    if ((_DWORD)result)
      return APSLogErrorAt();
  }
  return result;
}

uint64_t audioHoseManagerBuffered_SetCryptorForSingleHose(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, int, const void *), const void *);
  uint64_t v11;

  if (!a2)
    return 0;
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  APSEndpointStreamAudioHoseProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable && (v9 = *(_QWORD *)(ProtocolVTable + 16)) != 0)
  {
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, int, const void *), const void *))(v9 + 96);
    if (v10)
    {
      v11 = v10(a2, a4, a3, audioHoseManagerBuffered_hoseSetCryptorCallbackCompletionHandler, a1);
      if (!(_DWORD)v11)
        return v11;
    }
    else
    {
      v11 = 4294954514;
      audioHoseManagerBuffered_hoseSetCryptorCallbackCompletionHandler(a2, a4, -12782, a1);
    }
  }
  else
  {
    v11 = 4294954508;
  }
  APSLogErrorAt();
  if (gLogCategory_APAudioHoseManagerBuffered <= 90
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  return v11;
}

uint64_t audioHoseManagerBuffered_hoseSetCryptorCallbackCompletionHandler(uint64_t a1, uint64_t a2, int a3, const void *a4)
{
  uint64_t DerivedStorage;
  _QWORD *v9;
  _QWORD *v10;
  CFTypeRef v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200401C4E69EBuLL);
  if (v9)
  {
    v10 = v9;
    if (a4)
      v11 = CFRetain(a4);
    else
      v11 = 0;
    *v10 = v11;
    v10[1] = a1;
    v10[2] = a2;
    *((_DWORD *)v10 + 6) = a3;
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 168), v10, (dispatch_function_t)audioHoseManagerBuffered_hoseSetCryptorCallbackCompletionHandlerInternal);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294894846;
  }
}

void audioHoseManagerBuffered_hoseSetCryptorCallbackCompletionHandlerInternal(const void **a1)
{
  uint64_t DerivedStorage;
  _BYTE *Value;
  _BYTE *v4;
  int v5;
  const void *v6;
  NSObject *global_queue;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 192), a1[1]);
  if (Value)
  {
    v4 = Value;
    v5 = *((_DWORD *)a1 + 6);
    if (v5)
    {
      if (v5 == 200501)
      {
        if (gLogCategory_APAudioHoseManagerBuffered <= 90
          && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
        {
          if (!*a1)
          {
LABEL_22:
            LogPrintF();
            goto LABEL_25;
          }
LABEL_7:
          CMBaseObjectGetDerivedStorage();
          goto LABEL_22;
        }
        goto LABEL_25;
      }
      if (gLogCategory_APAudioHoseManagerBuffered > 90
        || gLogCategory_APAudioHoseManagerBuffered == -1 && !_LogCategory_Initialize())
      {
LABEL_24:
        v4[176] = 1;
        goto LABEL_25;
      }
      if (!*a1)
      {
LABEL_23:
        LogPrintF();
        goto LABEL_24;
      }
    }
    else
    {
      if (gLogCategory_APAudioHoseManagerBuffered > 50
        || gLogCategory_APAudioHoseManagerBuffered == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_24;
      }
      if (!*a1)
        goto LABEL_23;
    }
    CMBaseObjectGetDerivedStorage();
    goto LABEL_23;
  }
  if (gLogCategory_APAudioHoseManagerBuffered <= 90
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (!*a1)
      goto LABEL_22;
    goto LABEL_7;
  }
LABEL_25:
  v6 = *a1;
  if (*a1)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __audioHoseManagerBuffered_releaseAsync_block_invoke;
    block[3] = &__block_descriptor_tmp_73_0;
    block[4] = v6;
    dispatch_async(global_queue, block);
  }
  free(a1);
}

void __audioHoseManagerBuffered_releaseAsync_block_invoke(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t audioHoseManagerBuffered_getMagicCookieIDForMagicCookieData(CFDataRef theData)
{
  if (audioHoseManagerBuffered_getMagicCookieIDForMagicCookieData_sRandomBytesOnce == -1)
  {
    if (theData)
    {
LABEL_3:
      CFDataGetBytePtr(theData);
      CFDataGetLength(theData);
      return SipHash();
    }
  }
  else
  {
    dispatch_once(&audioHoseManagerBuffered_getMagicCookieIDForMagicCookieData_sRandomBytesOnce, &__block_literal_global_76);
    if (theData)
      goto LABEL_3;
  }
  return 0;
}

uint64_t __audioHoseManagerBuffered_getMagicCookieIDForMagicCookieData_block_invoke()
{
  return RandomBytes();
}

uint64_t __audioHoseManagerBuffered_shouldUseReceiverChoosesAnchor_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = APSGetFBOPropertyInt64();
  if (result)
  {
    v3 = 0;
  }
  else
  {
    result = APSGetFBOPropertyInt64();
    v3 = result != 0;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  return result;
}

uint64_t __audioHoseManagerBuffered_isRunning_block_invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 92))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

void __audioHoseManagerBuffered_setLoudnessNormalizationOnAllHoses_block_invoke(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ProtocolVTable;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  int v14;
  CFTypeRef cf;

  cf = 0;
  v5 = *a3;
  v6 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v6)
  {
    v6(v5, *MEMORY[0x1E0CA47F8], 0, &cf);
    v7 = cf;
    if (*((_BYTE *)a3 + 8))
      v8 = 1;
    else
      v8 = cf == 0;
    if (!v8)
    {
      if (gLogCategory_APAudioHoseManagerBuffered <= 50
        && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*(_QWORD *)(a1 + 40))
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      v9 = *a3;
      v10 = *(unsigned __int8 *)(a1 + 48);
      APSEndpointStreamAudioHoseProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable && (v12 = *(_QWORD *)(ProtocolVTable + 16)) != 0)
      {
        v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 112);
        if (v13)
          v14 = v13(v9, v10);
        else
          v14 = -12782;
      }
      else
      {
        v14 = -12788;
      }
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v14;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
        APSLogErrorAt();
      v7 = cf;
    }
    if (v7)
      CFRelease(v7);
  }
}

__CFString *hoseManagerBuffered_audioHoseProtocolCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("APAudioHoseManagerBuffered <APSEndpointStreamAudioHoseRegistrarProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t audioHoseManagerBuffered_audioHoseRegistrarRegisterHose(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  CFTypeRef v9;
  uint64_t (*v10)(const void *, _QWORD, _QWORD, _QWORD *);
  int v11;
  const void *v12;
  _BOOL4 v13;
  int v14;
  void (*v15)(const void *, _QWORD, _QWORD, char *);
  char *v16;
  char *v17;
  void (*v18)(const void *, _QWORD, _QWORD);
  uint64_t (*v19)(const void *, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v20;
  CFTypeID v21;
  signed int v22;
  uint64_t v23;
  int CFPreferenceNumberWithDefault;
  int v25;
  char v26;
  CMTimeValue v27;
  uint64_t v29;
  uint64_t ProtocolVTable;
  uint64_t v31;
  uint64_t (*v32)(const void *, uint64_t);
  uint64_t v33;
  unsigned int valuePtr;
  CFTypeRef cf;
  CMTime value;
  __int128 v37;
  __int128 v38;
  _OWORD v39[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD v50[4];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  valuePtr = 0;
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 192));
    LogPrintF();
  }
  if (CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 192), a2))
  {
    APSLogErrorAt();
LABEL_114:
    v23 = APSSignalErrorAt();
    goto LABEL_92;
  }
  v8 = CMBaseObjectGetDerivedStorage();
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  v42 = 0u;
  v41 = 0u;
  v40 = 0u;
  memset(v39, 0, sizeof(v39));
  v38 = 0u;
  v37 = 0u;
  *(_OWORD *)&value.timescale = 0u;
  if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(v8 + 192), a2))
  {
    if (a2)
      v9 = CFRetain(a2);
    else
      v9 = 0;
    value.value = (CMTimeValue)v9;
    LOWORD(v38) = 256;
    *(_QWORD *)&v39[0] = 0;
    *((_QWORD *)&v38 + 1) = mach_absolute_time();
    *(_OWORD *)((char *)v39 + 8) = *MEMORY[0x1E0CA2E68];
    *((_QWORD *)&v39[1] + 1) = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    *(_QWORD *)&v40 = 0;
    BYTE8(v45) = 0;
    v50[0] = 0;
    v10 = *(uint64_t (**)(const void *, _QWORD, _QWORD, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
    if (!v10)
    {
      LOBYTE(value.timescale) = 0;
LABEL_20:
      v14 = *(_DWORD *)(v8 + 480);
      *(_DWORD *)(v8 + 480) = v14 + 1;
      LODWORD(v49) = v14;
      *((_QWORD *)&v49 + 1) = 0;
      v15 = *(void (**)(const void *, _QWORD, _QWORD, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v15)
        v15(a2, *MEMORY[0x1E0CF7390], *MEMORY[0x1E0C9AE00], (char *)&v48 + 8);
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v8 + 192), a2, &value);
      if (CFDictionaryGetCount(*(CFDictionaryRef *)(v8 + 192)) > *(unsigned int *)(v8 + 484))
        *(_DWORD *)(v8 + 484) = CFDictionaryGetCount(*(CFDictionaryRef *)(v8 + 192));
      goto LABEL_24;
    }
    v11 = v10(a2, *MEMORY[0x1E0CA4788], 0, v50);
    v12 = (const void *)v50[0];
    if (v11)
    {
      v13 = 0;
      if (!v50[0])
      {
LABEL_17:
        LOBYTE(value.timescale) = v13;
        if (v13)
          *(_BYTE *)(v8 + 184) = 1;
        goto LABEL_20;
      }
    }
    else
    {
      v13 = FigCFEqual() != 0;
      v12 = (const void *)v50[0];
      if (!v50[0])
        goto LABEL_17;
    }
    CFRelease(v12);
    goto LABEL_17;
  }
  APSLogErrorAt();
  v33 = APSSignalErrorAt();
  if ((_DWORD)v33)
  {
    v23 = v33;
    goto LABEL_41;
  }
LABEL_24:
  v16 = (char *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 192), a2);
  if (!v16)
  {
    APSLogErrorAt();
    goto LABEL_114;
  }
  v17 = v16;
  if (CFDictionaryGetInt64())
  {
    *(_BYTE *)(DerivedStorage + 187) = 1;
    audioHoseManagerBuffered_setEchoCancellationIsEnabledToAllHoses();
  }
  if (*(_BYTE *)(DerivedStorage + 187))
  {
    v18 = *(void (**)(const void *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v18)
      v18(a2, *MEMORY[0x1E0CF7360], *MEMORY[0x1E0C9AE50]);
  }
  v19 = *(uint64_t (**)(const void *, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
  if (!v19)
  {
    v23 = 4294954514;
LABEL_41:
    APSLogErrorAt();
    goto LABEL_92;
  }
  v20 = v19(a2, *MEMORY[0x1E0CF7340], 0, &cf);
  if ((_DWORD)v20)
  {
    v23 = v20;
    goto LABEL_41;
  }
  if (cf && (v21 = CFGetTypeID(cf), v21 == CFNumberGetTypeID()))
  {
    CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
    v22 = *(_DWORD *)(DerivedStorage + 44) * valuePtr / 0x64;
    if (*(_DWORD *)(DerivedStorage + 40) < v22)
      v22 = *(_DWORD *)(DerivedStorage + 40);
    *((_DWORD *)v17 + 27) = valuePtr - v22;
    if (gLogCategory_APAudioHoseManagerBuffered <= 50
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
    CMTimeMake(&value, CFPreferenceNumberWithDefault, 1);
    *(CMTime *)(v17 + 116) = value;
    if (gLogCategory_APAudioHoseManagerBuffered <= 50
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      value = *(CMTime *)(v17 + 116);
      CMTimeGetSeconds(&value);
      LogPrintF();
    }
    *((_DWORD *)v17 + 28) = *(_DWORD *)(DerivedStorage + 72) * valuePtr / 0x64;
    if (gLogCategory_APAudioHoseManagerBuffered <= 50
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    audioHoseManagerBuffered_updateStartWatermarkTime(a1, a2);
    v25 = valuePtr;
    if (*(_DWORD *)(DerivedStorage + 124) < valuePtr)
    {
      if (valuePtr >= 0x753000)
        v25 = 7680000;
      *(_DWORD *)(DerivedStorage + 124) = v25;
      if (gLogCategory_APAudioHoseManagerBuffered <= 50
        && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
    }
    v26 = *(_BYTE *)(DerivedStorage + 188);
    if (v26)
      v26 = APSIsFBOPropertyAvailable() != 0;
    v17[9] = v26;
    if (gLogCategory_APAudioHoseManagerBuffered <= 50)
    {
      if (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize())
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      if (gLogCategory_APAudioHoseManagerBuffered <= 50
        && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 192));
        LogPrintF();
      }
    }
    CMBaseObjectGetDerivedStorage();
    v50[0] = 0;
    v50[1] = v50;
    v50[2] = 0x2000000000;
    v50[3] = 0;
    v27 = MEMORY[0x1E0C809B0];
    if (a2)
    {
      value.value = MEMORY[0x1E0C809B0];
      *(_QWORD *)&value.timescale = 0x40000000;
      value.epoch = (CMTimeEpoch)__audioHoseManagerBuffered_setAllCryptorsForSingleHose_block_invoke;
      *(_QWORD *)&v37 = &unk_1E826F1B0;
      *((_QWORD *)&v37 + 1) = v50;
      *(_QWORD *)&v38 = a1;
      *((_QWORD *)&v38 + 1) = a2;
      CFDictionaryApplyBlock();
    }
    _Block_object_dispose(v50, 8);
    if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 186))
    {
      value.value = v27;
      *(_QWORD *)&value.timescale = 0x40000000;
      value.epoch = (CMTimeEpoch)__audioHoseManagerBuffered_setAllMagicCookiesForSingleHose_block_invoke;
      *(_QWORD *)&v37 = &__block_descriptor_tmp_159_0;
      *((_QWORD *)&v37 + 1) = a2;
      *(_QWORD *)&v38 = a1;
      CFDictionaryApplyBlock();
    }
    if (v17[8] || !*(_BYTE *)(DerivedStorage + 186))
    {
      v23 = 0;
    }
    else
    {
      if (gLogCategory_APAudioHoseManagerBuffered <= 50
        && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      v29 = *(unsigned __int8 *)(DerivedStorage + 185);
      APSEndpointStreamAudioHoseProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable && (v31 = *(_QWORD *)(ProtocolVTable + 16)) != 0)
      {
        v32 = *(uint64_t (**)(const void *, uint64_t))(v31 + 112);
        if (v32)
          v23 = v32(a2, v29);
        else
          v23 = 4294954514;
      }
      else
      {
        v23 = 4294954508;
      }
    }
    *a4 = &audioHoseManagerBuffered_audioHoseRegistrarRegisterHose_callbacks;
  }
  else
  {
    APSLogErrorAt();
    v23 = 4294960540;
  }
LABEL_92:
  if (cf)
    CFRelease(cf);
  return v23;
}

uint64_t audioHoseManagerBuffered_audioHoseRegistrarDeregisterHose(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 192));
    LogPrintF();
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 192), a2))
  {
    audioHoseManagerBuffered_removeHoseFromDescriptors(a1, a2);
    if (CFDictionaryGetInt64())
    {
      *(_BYTE *)(DerivedStorage + 187) = 0;
      audioHoseManagerBuffered_setEchoCancellationIsEnabledToAllHoses();
    }
  }
  else
  {
    APSLogErrorAt();
  }
  return 0;
}

uint64_t audioHoseManagerBuffered_CopyAudioDataBBufsForHose(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFIndex Count;
  CFIndex v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  const void *v25;
  uint64_t v26;
  _QWORD context[5];
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  BOOL v43;
  _QWORD v44[3];
  char v45;
  _QWORD v46[3];
  char v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;

  v29 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = a1;
  context[1] = a2;
  context[2] = a3;
  context[3] = a4;
  context[4] = &v29;
  if (!a2)
  {
    v26 = 4294894845;
LABEL_67:
    APSLogErrorAt();
    return v26;
  }
  if (!a3)
  {
    v26 = 4294894845;
    goto LABEL_67;
  }
  v9 = DerivedStorage;
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  dispatch_sync_f(*(dispatch_queue_t *)(v9 + 168), context, (dispatch_function_t)audioHoseManagerBuffered_copyAudioDataBBufDispatchInternal);
  v10 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(v10 + 472));
  v11 = CMBaseObjectGetDerivedStorage();
  v56 = 0;
  v57 = &v56;
  v58 = 0x2000000000;
  LODWORD(v59) = 0;
  v52 = 0;
  v53 = &v52;
  v54 = 0x2000000000;
  v55 = -1;
  v12 = mach_absolute_time();
  v48 = 0;
  v49 = &v48;
  v50 = 0x2000000000;
  v51 = 0;
  v46[0] = 0;
  v46[1] = v46;
  v46[2] = 0x2000000000;
  v47 = 0;
  v44[0] = 0;
  v44[1] = v44;
  v44[2] = 0x2000000000;
  v45 = 0;
  v13 = *(_DWORD *)(v11 + 260) == 0;
  v14 = MEMORY[0x1E0C809B0];
  if (!*(_BYTE *)(v11 + 328))
  {
    v15 = v12;
    if (gLogCategory_APAudioHoseManagerBuffered <= 50
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    v30 = v14;
    v31 = 0x40000000;
    v32 = __audioHoseManagerBuffered_UpdateHosesPrimed_block_invoke;
    v33 = &unk_1E826F140;
    v40 = v11;
    v41 = a1;
    v34 = &v48;
    v35 = v46;
    v43 = v13;
    v42 = v15;
    v36 = v44;
    v37 = &v56;
    v38 = &v52;
    v39 = a1;
    CFDictionaryApplyBlock();
    if (gLogCategory_APAudioHoseManagerBuffered <= 50
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      CFDictionaryGetCount(*(CFDictionaryRef *)(v11 + 192));
      LogPrintF();
    }
  }
  v16 = *((int *)v57 + 6);
  _Block_object_dispose(v44, 8);
  _Block_object_dispose(v46, 8);
  _Block_object_dispose(&v48, 8);
  _Block_object_dispose(&v52, 8);
  _Block_object_dispose(&v56, 8);
  v17 = CMBaseObjectGetDerivedStorage();
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v17 + 192));
  if (*(_BYTE *)(v17 + 328))
    goto LABEL_50;
  v19 = Count;
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  if (v19 == v16)
  {
    if (gLogCategory_APAudioHoseManagerBuffered > 50
      || gLogCategory_APAudioHoseManagerBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_49;
    }
    if (!a1)
    {
LABEL_48:
      LogPrintF();
LABEL_49:
      *(_BYTE *)(v17 + 328) = 1;
      goto LABEL_50;
    }
LABEL_37:
    CMBaseObjectGetDerivedStorage();
    goto LABEL_48;
  }
  if (v19 * *(int *)(v17 + 368) <= 100 * (int)v16)
  {
    if (gLogCategory_APAudioHoseManagerBuffered > 50
      || gLogCategory_APAudioHoseManagerBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_49;
    }
    if (!a1)
      goto LABEL_48;
    goto LABEL_37;
  }
LABEL_50:
  v20 = CMBaseObjectGetDerivedStorage();
  v56 = 0;
  v57 = &v56;
  v58 = 0x2000000000;
  v59 = 0;
  v52 = 0;
  v53 = &v52;
  v54 = 0x2000000000;
  v55 = 0;
  v48 = 0;
  v49 = &v48;
  v50 = 0x2000000000;
  v51 = 0;
  v21 = mach_absolute_time();
  if (*(_BYTE *)(v20 + 328))
  {
    v22 = v21;
    v23 = MEMORY[0x1E0C809B0];
    if (gLogCategory_APAudioHoseManagerBuffered <= 50
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    v30 = v23;
    v31 = 0x40000000;
    v32 = __audioHoseManagerBuffered_UpdateHoseReadiness_block_invoke;
    v33 = &unk_1E826F168;
    LODWORD(v40) = 0;
    v34 = &v52;
    v35 = &v48;
    v36 = &v56;
    v37 = (uint64_t *)v20;
    v38 = a1;
    v39 = (_QWORD *)v22;
    CFDictionaryApplyBlock();
  }
  v24 = (const void *)v57[3];
  if (v24)
    CFRelease(v24);
  v25 = (const void *)v53[3];
  if (v25)
    CFRelease(v25);
  _Block_object_dispose(&v48, 8);
  _Block_object_dispose(&v52, 8);
  _Block_object_dispose(&v56, 8);
  MEMORY[0x1CAA400E4](*(_QWORD *)(v10 + 472));
  return v29;
}

uint64_t audioHoseManagerBuffered_setEchoCancellationIsEnabledToAllHoses()
{
  CMBaseObjectGetDerivedStorage();
  return CFDictionaryApplyBlock();
}

double audioHoseManagerBuffered_updateStartWatermarkTime(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  int CFPreferenceNumberWithDefault;
  int v6;
  _OWORD *v7;
  _OWORD *v8;
  double result;
  CMTime time2;
  CMTime time1;
  CMTime v12;
  CMTime v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v12 = v13;
  if (CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 192), a2))
    CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 192));
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  CMTimeMake(&v13, (uint64_t)(float)CFPreferenceNumberWithDefault, 1000);
  v6 = FigGetCFPreferenceNumberWithDefault();
  CMTimeMake(&v12, (uint64_t)(float)v6, 1000);
  v7 = (_OWORD *)(DerivedStorage + 48);
  time1 = v13;
  time2 = *(CMTime *)(DerivedStorage + 48);
  if (CMTimeCompare(&time1, &time2)
    && gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    *(_OWORD *)&time1.value = *v7;
    time1.epoch = *(_QWORD *)(DerivedStorage + 64);
    CMTimeGetSeconds(&time1);
    time1 = v13;
    CMTimeGetSeconds(&time1);
    LogPrintF();
  }
  v8 = (_OWORD *)(DerivedStorage + 376);
  time1 = v12;
  time2 = *(CMTime *)(DerivedStorage + 376);
  if (CMTimeCompare(&time1, &time2)
    && gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    *(_OWORD *)&time1.value = *v8;
    time1.epoch = *(_QWORD *)(DerivedStorage + 392);
    CMTimeGetSeconds(&time1);
    time1 = v12;
    CMTimeGetSeconds(&time1);
    LogPrintF();
  }
  *v7 = *(_OWORD *)&v13.value;
  *(_QWORD *)(DerivedStorage + 64) = v13.epoch;
  result = *(double *)&v12.value;
  *v8 = *(_OWORD *)&v12.value;
  *(_QWORD *)(DerivedStorage + 392) = v12.epoch;
  return result;
}

void audioHoseManagerBuffered_copyAudioDataBBufDispatchInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  CFMutableArrayRef Mutable;
  const __CFArray *v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  CMTimeEpoch v10;
  uint64_t v11;
  int *Value;
  uint64_t v13;
  char v14;
  CMBlockBufferRef v15;
  _OWORD *v16;
  uint64_t v17;
  CMTimeValue v18;
  CMTimeScale v19;
  OpaqueCMBlockBuffer *MessageAtIndex;
  OpaqueCMBlockBuffer *v21;
  size_t DataLength;
  CMTimeEpoch epoch;
  CMTimeEpoch v24;
  BOOL v25;
  CMTimeFlags flags;
  CMTimeEpoch v27;
  char *v28;
  int v29;
  uint64_t v30;
  CMTimeEpoch v31;
  CMTimeFlags v32;
  _OWORD *v33;
  const __CFAllocator *structureAllocator;
  const __CFArray *v35;
  __int128 v36;
  __int128 v37;
  CMTimeEpoch v38;
  CMTimeScale v39;
  CMTimeValue v40;
  CMTime v41;
  CMTime rhs;
  uint64_t v43;
  CMBlockBufferRef blockBufferOut;
  CMTime v45;
  CMTime v46;
  CMTime time2;
  CMTime time;
  CMTimeValue v49;
  CMTimeScale timescale;
  uint64_t v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(int *)(DerivedStorage + 208), MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v29 = -72450;
    goto LABEL_119;
  }
  v5 = Mutable;
  v6 = *(_QWORD *)a1;
  v7 = *(const void **)(a1 + 8);
  v8 = CMBaseObjectGetDerivedStorage();
  v9 = MEMORY[0x1E0CA2E18];
  v40 = *MEMORY[0x1E0CA2E18];
  v49 = *MEMORY[0x1E0CA2E18];
  v39 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  timescale = v39;
  v37 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&v41.value = *MEMORY[0x1E0CA2E68];
  v10 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v41.epoch = v10;
  if (*(_BYTE *)(v8 + 36))
    goto LABEL_22;
  v11 = v8;
  Value = (int *)CFDictionaryGetValue(*(CFDictionaryRef *)(v8 + 192), v7);
  if (!Value)
  {
    if (gLogCategory_APAudioHoseManagerBuffered <= 60
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (v6)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    goto LABEL_22;
  }
  v13 = (uint64_t)Value;
  if (Value[36] >= 1)
  {
    if (gLogCategory_APAudioHoseManagerBuffered <= 50
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (v6)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    v14 = 0;
    *(_BYTE *)(v13 + 41) = 1;
    goto LABEL_117;
  }
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v6)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  if (*(_BYTE *)(v13 + 40))
  {
    audioHoseManagerBuffered_logForSendRate(v6, v13, 0);
LABEL_22:
    v14 = 0;
    goto LABEL_117;
  }
  v30 = a1;
  v31 = v10;
  if (gLogCategory_APAudioHoseManagerBuffered > 50)
    goto LABEL_39;
  if (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize())
  {
    if (v6)
      CMBaseObjectGetDerivedStorage();
    time = *(CMTime *)(v13 + 64);
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v6)
      CMBaseObjectGetDerivedStorage();
    time = *(CMTime *)(v11 + 212);
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  if (!*(_BYTE *)(v13 + 40))
  {
LABEL_39:
    v15 = 0;
    structureAllocator = v3;
    v32 = *(_DWORD *)(v9 + 12);
    v16 = (_OWORD *)(v13 + 64);
    v38 = *(_QWORD *)(v9 + 16);
    v33 = (_OWORD *)(v13 + 116);
    v35 = v5;
    while (1)
    {
      if (!*(_DWORD *)(v11 + 208) || CFArrayGetCount(v5) >= *(int *)(v11 + 208))
      {
        if ((*(_BYTE *)(v11 + 224) & 1) == 0)
          goto LABEL_105;
        time = v41;
        time2 = *(CMTime *)(v11 + 212);
        if ((CMTimeCompare(&time, &time2) & 0x80000000) == 0)
          goto LABEL_105;
      }
      if (v15)
        CFRelease(v15);
      v17 = CMBaseObjectGetDerivedStorage();
      *(_OWORD *)&v46.value = *(_OWORD *)v9;
      v46.epoch = v38;
      v36 = *(_OWORD *)&v46.value;
      *(_OWORD *)&v45.value = *(_OWORD *)&v46.value;
      v45.epoch = v38;
      v43 = 0;
      blockBufferOut = 0;
      if (gLogCategory_APAudioHoseManagerBuffered <= 50
        && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v6)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      v49 = v40;
      timescale = v39;
      v18 = *(_QWORD *)(v17 + 264);
      v19 = *(_DWORD *)(v17 + 272);
      v52 = *(_DWORD *)(v17 + 284);
      v51 = *(_QWORD *)(v17 + 276);
      MessageAtIndex = (OpaqueCMBlockBuffer *)APMessageRingBufferedGetMessageAtIndex(*(_QWORD *)(v17 + 200), *(unsigned __int16 *)(v13 + 10), (_DWORD *)&v43 + 1, (uint64_t)&v46, (uint64_t)&v45);
      if (!MessageAtIndex)
      {
        *(_OWORD *)&time.value = v36;
        time.epoch = v38;
        APMessageRingBufferedGetLastValidReadIndexAndTimestamp(*(_QWORD *)(v17 + 200), &v43, (uint64_t)&time);
        if (gLogCategory_APAudioHoseManagerBuffered <= 50
          && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
        {
          if (v6)
            CMBaseObjectGetDerivedStorage();
          time2.value = v18;
          time2.timescale = v19;
          *(_QWORD *)&time2.flags = v51;
          HIDWORD(time2.epoch) = v52;
          CMTimeGetSeconds(&time2);
          time2 = time;
          CMTimeGetSeconds(&time2);
          LogPrintF();
          v5 = v35;
        }
        v15 = 0;
        flags = v32;
        v27 = v38;
        goto LABEL_99;
      }
      v21 = MessageAtIndex;
      DataLength = CMBlockBufferGetDataLength(MessageAtIndex);
      CMBlockBufferCreateWithBufferReference(structureAllocator, v21, 0, DataLength, 0, &blockBufferOut);
      *(_QWORD *)(v13 + 56) += DataLength;
      time2 = v46;
      rhs.value = v18;
      rhs.timescale = v19;
      *(_QWORD *)&rhs.flags = v51;
      HIDWORD(rhs.epoch) = v52;
      CMTimeSubtract(&time, &time2, &rhs);
      *v16 = *(_OWORD *)&time.value;
      *(_QWORD *)(v13 + 80) = time.epoch;
      if ((v45.flags & 1) != 0)
      {
        *(_OWORD *)&time2.value = *v16;
        time2.epoch = *(_QWORD *)(v13 + 80);
        rhs = v45;
        CMTimeAdd(&time, &time2, &rhs);
        *v16 = *(_OWORD *)&time.value;
        epoch = time.epoch;
      }
      else
      {
        *v16 = v37;
        epoch = v31;
      }
      *(_QWORD *)(v13 + 80) = epoch;
      *(_DWORD *)(v13 + 12) = HIDWORD(v43);
      v24 = v46.epoch;
      *(_OWORD *)(v13 + 16) = *(_OWORD *)&v46.value;
      *(_QWORD *)(v13 + 32) = v24;
      ++*(_QWORD *)(v13 + 96);
      LOWORD(v24) = *(_WORD *)(v13 + 10) + 1;
      *(_WORD *)(v13 + 10) = v24;
      APMessageRingBufferedGetByteCountAtIndex(*(_QWORD *)(v17 + 200), (unsigned __int16)v24, (int *)(v13 + 88));
      if (gLogCategory_APAudioHoseManagerBuffered <= 50
        && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v6)
          CMBaseObjectGetDerivedStorage();
        *(_OWORD *)&time.value = *v16;
        time.epoch = *(_QWORD *)(v13 + 80);
        CMTimeGetSeconds(&time);
        *(_OWORD *)&time.value = *v33;
        time.epoch = *(_QWORD *)(v13 + 132);
        CMTimeGetSeconds(&time);
        LogPrintF();
      }
      v25 = 0;
      if (*(_DWORD *)(v13 + 88) < *(_DWORD *)(v13 + 108))
      {
        *(_OWORD *)&time.value = *v16;
        time.epoch = *(_QWORD *)(v13 + 80);
        *(_OWORD *)&time2.value = *v33;
        time2.epoch = *(_QWORD *)(v13 + 132);
        if (CMTimeCompare(&time, &time2) < 1)
          v25 = 1;
      }
      if (gLogCategory_APAudioHoseManagerBuffered <= 50
        && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v6)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
        if (v25)
          goto LABEL_91;
      }
      else if (v25)
      {
        goto LABEL_91;
      }
      *(_WORD *)(v13 + 40) = 257;
      if (gLogCategory_APAudioHoseManagerBuffered <= 50)
      {
        if (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize())
        {
          if (v6)
            CMBaseObjectGetDerivedStorage();
          time = v46;
          CMTimeGetSeconds(&time);
          *(_OWORD *)&time.value = *v16;
          time.epoch = *(_QWORD *)(v13 + 80);
          CMTimeGetSeconds(&time);
          LogPrintF();
        }
LABEL_91:
        if (gLogCategory_APAudioHoseManagerBuffered <= 50
          && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
        {
          if (v6)
            CMBaseObjectGetDerivedStorage();
          *(_OWORD *)&time.value = *v16;
          time.epoch = *(_QWORD *)(v13 + 80);
          CMTimeGetSeconds(&time);
          LogPrintF();
        }
      }
      v15 = blockBufferOut;
      blockBufferOut = 0;
      v49 = v45.value;
      flags = v45.flags;
      timescale = v45.timescale;
      v27 = v45.epoch;
      audioHoseManagerBuffered_logForSendRate(v6, v13, DataLength);
      v5 = v35;
LABEL_99:
      if (blockBufferOut)
        CFRelease(blockBufferOut);
      if (v15)
      {
        if ((flags & 1) != 0)
        {
          time = v41;
          time2.value = v49;
          time2.timescale = timescale;
          time2.flags = flags;
          time2.epoch = v27;
          CMTimeAdd(&v41, &time, &time2);
        }
        CFArrayAppendValue(v5, v15);
        v9 = MEMORY[0x1E0CA2E18];
        if (!*(_BYTE *)(v13 + 40))
          continue;
      }
      goto LABEL_105;
    }
  }
  v15 = 0;
LABEL_105:
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v6)
      CMBaseObjectGetDerivedStorage();
    time = *(CMTime *)(v11 + 236);
    CMTimeGetSeconds(&time);
    time = *(CMTime *)(v13 + 16);
    CMTimeGetSeconds(&time);
    CFArrayGetCount(v5);
    LogPrintF();
  }
  if ((*(_BYTE *)(v11 + 248) & 1) != 0)
  {
    time = *(CMTime *)(v11 + 236);
    time2 = *(CMTime *)(v13 + 16);
    if (!CMTimeCompare(&time, &time2))
    {
      v14 = 1;
      if (!v15)
        goto LABEL_116;
      goto LABEL_115;
    }
  }
  v14 = *(_BYTE *)(v13 + 40);
  if (v15)
LABEL_115:
    CFRelease(v15);
LABEL_116:
  a1 = v30;
LABEL_117:
  **(_QWORD **)(a1 + 16) = v5;
  v28 = *(char **)(a1 + 24);
  v29 = 0;
  if (v28)
    *v28 = v14;
LABEL_119:
  **(_DWORD **)(a1 + 32) = v29;
}

void audioHoseManagerBuffered_logForSendRate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  CMTime time;
  __n128 v16;
  CMTimeEpoch v17;
  CMTime v18;
  CMTime v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = mach_absolute_time();
  v8 = v7;
  v16 = *(__n128 *)MEMORY[0x1E0CA2E18];
  v17 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  if (*(_BYTE *)(a2 + 8))
    v9 = 10000;
  else
    v9 = 100;
  if (*(_BYTE *)(a2 + 40))
  {
    if (!*(_BYTE *)(a2 + 216))
    {
      v10 = UpTicksToMilliseconds();
      v11 = UpTicksToMilliseconds();
      if (v10 && v11 != 0)
      {
        if (gLogCategory_APAudioHoseManagerBuffered <= 50
          && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1)
            CMBaseObjectGetDerivedStorage();
          LogPrintF();
        }
        *(_QWORD *)(a2 + 200) = 0;
        *(_QWORD *)(a2 + 208) = 0;
        *(_BYTE *)(a2 + 216) = 1;
      }
    }
  }
  else
  {
    *(int32x2_t *)(a2 + 208) = vadd_s32(*(int32x2_t *)(a2 + 208), (int32x2_t)0x100000001);
    *(_QWORD *)(a2 + 200) += a3;
    if (*(_BYTE *)(a2 + 216))
    {
      *(_QWORD *)(a2 + 184) = v7;
      *(_QWORD *)(a2 + 192) = v7;
      *(_BYTE *)(a2 + 216) = 0;
    }
    else
    {
      if (!*(_QWORD *)(a2 + 184))
      {
        *(_QWORD *)(a2 + 184) = v7;
        *(_QWORD *)(a2 + 192) = v7;
      }
      v13 = UpTicksToMilliseconds();
      v14 = UpTicksToMilliseconds();
      if (v13 && v14 && v13 >= v9)
      {
        v19 = *(CMTime *)(DerivedStorage + 264);
        v18 = *(CMTime *)(a2 + 16);
        audioHoseManagerBuffered_getLastDeliveredRemoteMediaTimeForHose(a1, (uint64_t *)a2, &v16);
        if (gLogCategory_APAudioHoseManagerBuffered <= 50
          && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1)
            CMBaseObjectGetDerivedStorage();
          time = v18;
          CMTimeGetSeconds(&time);
          *(__n128 *)&time.value = v16;
          time.epoch = v17;
          CMTimeGetSeconds(&time);
          time = v19;
          CMTimeGetSeconds(&time);
          LogPrintF();
        }
        *(_DWORD *)(a2 + 208) = 0;
        *(_QWORD *)(a2 + 192) = v8;
        *(_QWORD *)(a2 + 200) = 0;
      }
    }
  }
}

__n128 audioHoseManagerBuffered_getLastDeliveredRemoteMediaTimeForHose@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  int v9;
  int32_t v10;
  __n128 *v11;
  __n128 result;
  CMTime time2;
  CMTime time;
  int v15;
  int v16;
  uint64_t v17;
  CMTime v18;
  CFTypeRef v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v19 = 0;
  v17 = 0;
  v16 = 0;
  v15 = 0;
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    APMessageRingBufferedGetUsedCount(*(_QWORD *)(DerivedStorage + 200));
    time = *(CMTime *)(a2 + 2);
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  if (!*((_BYTE *)a2 + 9)
    || !APMessageRingBufferedGetUsedCount(*(_QWORD *)(DerivedStorage + 200))
    || (*((_BYTE *)a2 + 28) & 1) == 0)
  {
    goto LABEL_17;
  }
  v7 = *a2;
  v8 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (!v8 || v8(v7, *MEMORY[0x1E0CF7388], *MEMORY[0x1E0C9AE00], &v19))
    goto LABEL_16;
  if (v19)
  {
    if (*(_BYTE *)(DerivedStorage + 186))
    {
      if (APSAPAPBBufDecodeHeader())
      {
LABEL_16:
        APSLogErrorAt();
LABEL_17:
        if (v19)
          CFRelease(v19);
        goto LABEL_31;
      }
    }
    else
    {
      if (APSTransportMessageGetBufferedAudioDataTimestamp()
        || APSTransportMessageGetBufferedAudioDataExtendedSequenceNumber())
      {
        goto LABEL_16;
      }
      CMTimeMake(&v18, a2[2] + (int)(HIDWORD(v17) - a2[2]), *((_DWORD *)a2 + 6));
    }
    APMessageRingBufferedGetFirstValidReadIndex(*(_QWORD *)(DerivedStorage + 200), &v16);
    if (((v16 - (_DWORD)v17) & 0x800000) == 0 && ((v16 ^ v17) & 0xFFFFFF) != 0)
      goto LABEL_17;
    APMessageRingBufferedGetLastValidReadIndexAndTimestamp(*(_QWORD *)(DerivedStorage + 200), &v15, 0);
    if (((v15 - (_DWORD)v17) & 0x800000) != 0 && ((v15 ^ v17) & 0xFFFFFF) != 0)
      goto LABEL_17;
    v9 = *((_DWORD *)a2 + 3);
    if (((v9 - (_DWORD)v17) & 0x800000) != 0 && ((v9 ^ v17) & 0xFFFFFF) != 0)
      goto LABEL_17;
    time = v18;
    time2 = *(CMTime *)(a2 + 2);
    v10 = CMTimeCompare(&time, &time2);
    if (v19)
      CFRelease(v19);
    if (v10 <= 0)
    {
      v11 = (__n128 *)&v18;
      goto LABEL_33;
    }
  }
LABEL_31:
  v11 = (__n128 *)MEMORY[0x1E0CA2E18];
LABEL_33:
  result = *v11;
  *a3 = *v11;
  a3[1].n128_u64[0] = v11[1].n128_u64[0];
  return result;
}

__n128 audioHoseManagerBuffered_getBufferLevelTimeEstimateForHoseStartup@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, CMTime *a3@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  __n128 result;
  CMTimeFlags v9;
  CMTimeEpoch v10;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTime time2;
  CMTime time1;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeValue v17;
  CMTimeScale v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = MEMORY[0x1E0CA2E68];
  result = *(__n128 *)MEMORY[0x1E0CA2E68];
  *(_OWORD *)&a3->value = *MEMORY[0x1E0CA2E68];
  a3->epoch = *(_QWORD *)(v7 + 16);
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 188) && a2->n128_u8[9])
  {
    v17 = *(_QWORD *)(DerivedStorage + 264);
    v18 = *(_DWORD *)(DerivedStorage + 272);
    v9 = *(_DWORD *)(DerivedStorage + 276);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(DerivedStorage + 280);
      result.n128_u64[0] = audioHoseManagerBuffered_getLastDeliveredRemoteMediaTimeForHose(a1, (uint64_t *)a2, (__n128 *)&time1).n128_u64[0];
      value = time1.value;
      flags = time1.flags;
      timescale = time1.timescale;
      if ((time1.flags & 1) != 0)
      {
        epoch = time1.epoch;
        time2.epoch = time1.epoch;
        time1.value = v17;
        time1.timescale = v18;
        time1.flags = v9;
        time1.epoch = v10;
        time2.value = value;
        time2.timescale = timescale;
        time2.flags = flags;
        if (CMTimeCompare(&time1, &time2) <= 0)
        {
          time2.epoch = v10;
          time1.value = value;
          time1.timescale = timescale;
          time1.flags = flags;
          time1.epoch = epoch;
          time2.value = v17;
          time2.timescale = v18;
          time2.flags = v9;
          CMTimeSubtract(a3, &time1, &time2);
          if (gLogCategory_APAudioHoseManagerBuffered <= 50
            && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
          {
            if (a1)
              CMBaseObjectGetDerivedStorage();
            time1 = *a3;
            CMTimeGetSeconds(&time1);
            LogPrintF();
          }
        }
      }
    }
  }
  else
  {
    result = a2[4];
    *(__n128 *)&a3->value = result;
    a3->epoch = a2[5].n128_i64[0];
  }
  return result;
}

BOOL audioHoseManagerBuffered_hoseBufferedToStartHighWaterMark(uint64_t a1, _BOOL8 a2)
{
  CMTime *DerivedStorage;
  CMTime time2;
  CMTime time1;

  DerivedStorage = (CMTime *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  if (a2)
  {
    a2 = *(_DWORD *)(a2 + 88) >= *(_DWORD *)(a2 + 108)
      || (audioHoseManagerBuffered_getBufferLevelTimeEstimateForHoseStartup(a1, (__n128 *)a2, &time1),
          time2 = DerivedStorage[2],
          CMTimeCompare(&time1, &time2) >= 1);
    if (gLogCategory_APAudioHoseManagerBuffered <= 50
      && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
  }
  else
  {
    APSLogErrorAt();
  }
  return a2;
}

uint64_t __audioHoseManagerBuffered_setEchoCancellationIsEnabledToAllHoses_block_invoke(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t (*v6)(uint64_t, _QWORD, uint64_t);
  uint64_t v7;

  v3 = *a3;
  v4 = *(unsigned __int8 *)(a1 + 32);
  result = CMBaseObjectGetVTable();
  v6 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v6)
  {
    if (v4)
      v7 = *MEMORY[0x1E0C9AE50];
    else
      v7 = *MEMORY[0x1E0C9AE40];
    return v6(v3, *MEMORY[0x1E0CF7360], v7);
  }
  return result;
}

uint64_t __audioHoseManagerBuffered_setAllCryptorsForSingleHose_block_invoke(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t CryptorIDForCryptor;
  const void *v5;

  if (a2)
  {
    v3 = (_QWORD *)result;
    CryptorIDForCryptor = audioHoseManagerBuffered_getCryptorIDForCryptor(a2);
    v5 = (const void *)v3[5];
    *(_QWORD *)(*(_QWORD *)(v3[4] + 8) + 24) = CryptorIDForCryptor;
    result = audioHoseManagerBuffered_SetCryptorForSingleHose(v5, v3[6], a2, *(_QWORD *)(*(_QWORD *)(v3[4] + 8) + 24));
    if ((_DWORD)result)
      return APSLogErrorAt();
  }
  return result;
}

uint64_t __audioHoseManagerBuffered_setAllMagicCookiesForSingleHose_block_invoke(uint64_t result, CFDataRef theData)
{
  uint64_t v2;
  const void *v4;
  uint64_t v5;
  uint64_t MagicCookieIDForMagicCookieData;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, CFDataRef, uint64_t (*)(uint64_t, uint64_t, int, uint64_t), uint64_t);

  if (theData)
  {
    v2 = result;
    if (*(_QWORD *)(result + 32))
    {
      if (gLogCategory_APAudioHoseManagerBuffered <= 50
        && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*(_QWORD *)(v2 + 40))
          CMBaseObjectGetDerivedStorage();
        audioHoseManagerBuffered_getMagicCookieIDForMagicCookieData(theData);
        LogPrintF();
      }
      v4 = *(const void **)(v2 + 40);
      if (v4)
        CFRetain(v4);
      v5 = *(_QWORD *)(v2 + 32);
      MagicCookieIDForMagicCookieData = audioHoseManagerBuffered_getMagicCookieIDForMagicCookieData(theData);
      v7 = *(_QWORD *)(v2 + 40);
      APSEndpointStreamAudioHoseProtocolGetProtocolID();
      result = CMBaseObjectGetProtocolVTable();
      if (result)
      {
        v8 = *(_QWORD *)(result + 16);
        if (v8)
        {
          v9 = *(uint64_t (**)(uint64_t, uint64_t, CFDataRef, uint64_t (*)(uint64_t, uint64_t, int, uint64_t), uint64_t))(v8 + 104);
          if (v9)
          {
            result = v9(v5, MagicCookieIDForMagicCookieData, theData, audioHoseManagerBuffered_hoseSetMagicCookieCallbackCompletionHandler, v7);
            if (!(_DWORD)result)
              return result;
          }
          else
          {
            result = audioHoseManagerBuffered_hoseSetMagicCookieCallbackCompletionHandler(v5, MagicCookieIDForMagicCookieData, -12782, v7);
          }
        }
      }
      if (gLogCategory_APAudioHoseManagerBuffered <= 90)
      {
        if (gLogCategory_APAudioHoseManagerBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        {
          if (*(_QWORD *)(v2 + 40))
            CMBaseObjectGetDerivedStorage();
          return LogPrintF();
        }
      }
    }
  }
  return result;
}

uint64_t audioHoseManagerBuffered_hoseSetMagicCookieCallbackCompletionHandler(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  _QWORD *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200401C4E69EBuLL);
  if (v9)
  {
    *v9 = a4;
    v9[1] = a1;
    v9[2] = a2;
    *((_DWORD *)v9 + 6) = a3;
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 168), v9, (dispatch_function_t)audioHoseManagerBuffered_hoseSetMagicCookieCallbackCompletionHandlerInternal);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294894846;
  }
}

void audioHoseManagerBuffered_hoseSetMagicCookieCallbackCompletionHandlerInternal(uint64_t a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 192), *(const void **)(a1 + 8)))
  {
    if (gLogCategory_APAudioHoseManagerBuffered > 90
      || gLogCategory_APAudioHoseManagerBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_17;
    }
    if (!*(_QWORD *)a1)
      goto LABEL_16;
LABEL_23:
    CMBaseObjectGetDerivedStorage();
    goto LABEL_16;
  }
  if (!*(_DWORD *)(a1 + 24))
  {
    if (gLogCategory_APAudioHoseManagerBuffered > 50
      || gLogCategory_APAudioHoseManagerBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_17;
    }
    if (!*(_QWORD *)a1)
    {
LABEL_16:
      LogPrintF();
      goto LABEL_17;
    }
    goto LABEL_23;
  }
  if (gLogCategory_APAudioHoseManagerBuffered <= 90
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (!*(_QWORD *)a1)
      goto LABEL_16;
    goto LABEL_23;
  }
LABEL_17:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  free((void *)a1);
}

void audioHoseManagerBuffered_removeHoseFromDescriptors(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int CFPreferenceNumberWithDefault;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 192), a2);
  if (gLogCategory_APAudioHoseManagerBuffered <= 40
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 192));
    LogPrintF();
  }
  audioHoseManagerBuffered_updateStartWatermarkTime(a1, a2);
  v5 = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  CFPreferenceNumberWithDefault = 0;
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  CFDictionaryApplyBlock();
  v6 = *((_DWORD *)v8 + 6);
  if (v6 >= 0x753000)
    v6 = 7680000;
  *(_DWORD *)(v5 + 124) = v6;
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  _Block_object_dispose(&v7, 8);
}

void __audioHoseManagerBuffered_updateMaxAudioToBufferBytes_block_invoke(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  int v6;
  CFTypeRef v7;
  BOOL v8;
  CFTypeID v9;
  CFTypeID TypeID;
  uint64_t v11;
  unsigned int v12;
  unsigned int valuePtr;
  CFTypeRef cf;

  cf = 0;
  valuePtr = 0;
  v4 = *a3;
  v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v5)
  {
    v6 = v5(v4, *MEMORY[0x1E0CF7340], 0, &cf);
    v7 = cf;
    if (v6)
      v8 = 1;
    else
      v8 = cf == 0;
    if (!v8)
    {
      v9 = CFGetTypeID(cf);
      TypeID = CFNumberGetTypeID();
      v7 = cf;
      if (v9 == TypeID)
      {
        CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v12 = *(_DWORD *)(v11 + 24);
        if (v12 <= valuePtr)
          v12 = valuePtr;
        *(_DWORD *)(v11 + 24) = v12;
        v7 = cf;
      }
    }
    if (v7)
      CFRelease(v7);
  }
}

uint64_t audioHoseManagerBuffered_Flush()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 472));
  v1 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 236) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(DerivedStorage + 252) = *(_QWORD *)(v1 + 16);
  CFDictionaryApplyBlock();
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 472));
  return 0;
}

uint64_t audioHoseManagerBuffered_FlushWithinSampleRange(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  CFDictionaryApplyBlock();
  return 0;
}

uint64_t audioHoseManagerBuffered_WakeUpHoses(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  CFDictionaryApplyBlock();
  return 0;
}

uint64_t audioHoseManagerBuffered_NotifyHosesDataAvailable(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  CFDictionaryApplyBlock();
  return 0;
}

uint64_t audioHoseManagerBuffered_SetRateAndAnchorTime(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 472));
  CFDictionaryApplyBlock();
  *(_DWORD *)(DerivedStorage + 260) = a2;
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 472));
  return 0;
}

uint64_t audioHoseManagerBuffered_SetRate(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 192));
    LogPrintF();
  }
  if (CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 192)) == 1)
  {
    *(_DWORD *)(DerivedStorage + 260) = a2;
    CFDictionaryApplyBlock();
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
}

uint64_t audioHoseManagerBuffered_GetAudioToBufferTimes(uint64_t a1, CMTime *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  CMTimeEpoch v7;
  CFIndex Count;
  CMTime *v9;
  uint64_t v10;
  int v11;
  CMTime *v12;
  uint64_t v13;
  _OWORD *v14;
  CMTimeEpoch epoch;
  CMTimeEpoch v16;
  __int128 v18;
  uint64_t v19;
  CMTime *v20;
  uint64_t v21;
  CMTime v22;
  CMTime v23;
  CMTime v24;
  CMTime v25;
  CMTime v26;
  CMTime time;
  void *v28;
  CMTime *p_rhs;
  CMTime rhs;
  char v31;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v26 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v18 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&v25.value = *MEMORY[0x1E0CA2E68];
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v25.epoch = v7;
  v23 = *(CMTime *)(DerivedStorage + 100);
  v19 = 0;
  v20 = (CMTime *)&v19;
  v21 = 0x3000000000;
  v22 = v26;
  v24 = *(CMTime *)(DerivedStorage + 264);
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 192));
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  if (Count == 1)
  {
    v10 = CMBaseObjectGetDerivedStorage();
    rhs.value = 0;
    *(_QWORD *)&rhs.timescale = &rhs;
    rhs.epoch = 0x2000000000;
    v31 = 0;
    MEMORY[0x1CAA400CC](*(_QWORD *)(v10 + 472));
    if (CFDictionaryGetCount(*(CFDictionaryRef *)(v10 + 192)) == 1)
    {
      time.value = MEMORY[0x1E0C809B0];
      *(_QWORD *)&time.timescale = 0x40000000;
      time.epoch = (CMTimeEpoch)__audioHoseManagerBuffered_SingularHoseIsLocal_block_invoke;
      v28 = &unk_1E826F358;
      p_rhs = &rhs;
      CFDictionaryApplyBlock();
    }
    else
    {
      APSLogErrorAt();
    }
    MEMORY[0x1CAA400E4](*(_QWORD *)(v10 + 472));
    v11 = *(unsigned __int8 *)(*(_QWORD *)&rhs.timescale + 24);
    _Block_object_dispose(&rhs, 8);
    if (v11)
    {
      CMTimeMake(&v26, 18, 1);
LABEL_17:
      CFDictionaryApplyBlock();
      goto LABEL_18;
    }
LABEL_16:
    CMTimeMake(&v26, 125, 1);
    v12 = v20;
    v13 = MEMORY[0x1E0CA2E30];
    *(_OWORD *)&v20[1].value = *MEMORY[0x1E0CA2E30];
    v12[1].epoch = *(_QWORD *)(v13 + 16);
    goto LABEL_17;
  }
  if (Count)
  {
    if (Count < 1)
      goto LABEL_18;
    goto LABEL_16;
  }
  CMTimeMake(&v26, 18, 1);
  v9 = v20;
  *(_OWORD *)&v20[1].value = v18;
  v9[1].epoch = v7;
LABEL_18:
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    time = v26;
    CMTimeGetSeconds(&time);
    time = v20[1];
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  v14 = (_OWORD *)(DerivedStorage + 100);
  *(CMTime *)(DerivedStorage + 76) = v26;
  time = v20[1];
  rhs = *(CMTime *)(DerivedStorage + 400);
  CMTimeAdd(&v25, &time, &rhs);
  time = v25;
  rhs = *(CMTime *)(DerivedStorage + 128);
  if (CMTimeCompare(&time, &rhs) < 0
    || (time = v24, *(_OWORD *)&rhs.value = v18, rhs.epoch = v7, CMTimeCompare(&time, &rhs) <= 0))
  {
    *v14 = *(_OWORD *)(DerivedStorage + 128);
    epoch = *(_QWORD *)(DerivedStorage + 144);
  }
  else
  {
    *v14 = *(_OWORD *)&v25.value;
    epoch = v25.epoch;
  }
  *(_QWORD *)(DerivedStorage + 116) = epoch;
  time = v23;
  *(_OWORD *)&rhs.value = *v14;
  rhs.epoch = *(_QWORD *)(DerivedStorage + 116);
  if (CMTimeCompare(&time, &rhs)
    && gLogCategory_APAudioHoseManagerBuffered <= 30
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    time = *(CMTime *)(DerivedStorage + 76);
    CMTimeGetSeconds(&time);
    *(_OWORD *)&time.value = *v14;
    time.epoch = *(_QWORD *)(DerivedStorage + 116);
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  *a2 = v26;
  v16 = v20[1].epoch;
  *(_OWORD *)a3 = *(_OWORD *)&v20[1].value;
  *(_QWORD *)(a3 + 16) = v16;
  _Block_object_dispose(&v19, 8);
  return 0;
}

uint64_t audioHoseManagerBuffered_SetCryptor(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  _QWORD context[3];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    context[0] = 0;
    context[1] = a1;
    context[2] = a2;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 168), context, (dispatch_function_t)audioHoseManagerBuffered_setCryptorForAllHosesDispatch);
    return LODWORD(context[0]);
  }
  else
  {
    APSLogErrorAt();
    return 4294894845;
  }
}

uint64_t audioHoseManagerBuffered_SetMagicCookie(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (*(_BYTE *)(DerivedStorage + 186))
      CFDictionaryApplyBlock();
  }
  else
  {
    APSLogErrorAt();
    *((_DWORD *)v7 + 6) = -72451;
  }
  v4 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v4;
}

uint64_t audioHoseManagerBuffered_GetIDForCryptor(uint64_t a1, uint64_t a2)
{
  return audioHoseManagerBuffered_getCryptorIDForCryptor(a2);
}

uint64_t audioHoseManagerBuffered_GetIDForMagicCookie(int a1, CFDataRef theData)
{
  return audioHoseManagerBuffered_getMagicCookieIDForMagicCookieData(theData);
}

uint64_t audioHoseManagerBuffered_AddCryptorToJar(uint64_t a1, uint64_t a2, CMTime *a3)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v7;
  CFDictionaryRef v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD block[9];
  CMTime time;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  time = *a3;
  v8 = CMTimeCopyAsDictionary(&time, v7);
  v9 = *(NSObject **)(DerivedStorage + 168);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __audioHoseManagerBuffered_AddCryptorToJar_block_invoke;
  block[3] = &unk_1E826F3A8;
  block[4] = &v14;
  block[5] = DerivedStorage;
  block[6] = a2;
  block[7] = a1;
  block[8] = v8;
  dispatch_sync(v9, block);
  if (v8)
    CFRelease(v8);
  v10 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  return v10;
}

uint64_t audioHoseManagerBuffered_AddMagicCookieToJar(uint64_t a1, uint64_t a2, CMTime *a3)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v6;
  CFDictionaryRef v7;
  NSObject *v8;
  _QWORD block[7];
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  time = *a3;
  v7 = CMTimeCopyAsDictionary(&time, v6);
  v8 = *(NSObject **)(DerivedStorage + 168);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __audioHoseManagerBuffered_AddMagicCookieToJar_block_invoke;
  block[3] = &__block_descriptor_tmp_230;
  block[4] = DerivedStorage;
  block[5] = a2;
  block[6] = v7;
  dispatch_sync(v8, block);
  if (v7)
    CFRelease(v7);
  return 0;
}

uint64_t audioHoseManagerBuffered_ReleaseOldCryptorAndMagicCookie(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD block[6];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  v4 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 168);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __audioHoseManagerBuffered_ReleaseOldCryptorAndMagicCookie_block_invoke;
  block[3] = &unk_1E826F3F0;
  block[4] = &v10;
  block[5] = a1;
  v8 = *a2;
  v9 = *((_QWORD *)a2 + 2);
  dispatch_sync(v4, block);
  v5 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v5;
}

uint64_t audioHoseManagerBuffered_ApplyVolumeFade()
{
  CMBaseObjectGetDerivedStorage();
  CFDictionaryApplyBlock();
  return 0;
}

uint64_t audioHoseManagerBuffered_Suspend(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  CFIndex Count;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD block[6];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, const void **);
  void *v17;
  uint64_t v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  v3 = CMBaseObjectGetDerivedStorage();
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v3 + 192));
  v5 = MEMORY[0x1E0C809B0];
  if (Count <= 0)
  {
    APSLogErrorAt();
  }
  else
  {
    v14 = MEMORY[0x1E0C809B0];
    v15 = 0x40000000;
    v16 = __audioHoseManagerBuffered_deregisterAllHoses_block_invoke;
    v17 = &__block_descriptor_tmp_239;
    v18 = a1;
    CFDictionaryApplyBlock();
  }
  *((_DWORD *)v11 + 6) = 0;
  *(_QWORD *)(DerivedStorage + 320) = 0;
  *(_BYTE *)(DerivedStorage + 328) = 0;
  v6 = *(NSObject **)(DerivedStorage + 168);
  block[0] = v5;
  block[1] = 0x40000000;
  block[2] = __audioHoseManagerBuffered_Suspend_block_invoke;
  block[3] = &unk_1E826F438;
  block[4] = &v10;
  block[5] = a1;
  dispatch_sync(v6, block);
  v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

uint64_t audioHoseManagerBuffered_hoseFlushCallbackCompletionHandler(const void *a1, int a2, _OWORD *a3, unsigned int a4, const void *a5)
{
  uint64_t DerivedStorage;
  CFTypeRef context[2];
  int v13;
  _BYTE v14[28];
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;

  v17 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = a5;
  context[1] = a1;
  v13 = a2;
  *(_OWORD *)v14 = *a3;
  *(_OWORD *)&v14[12] = *(_OWORD *)((char *)a3 + 12);
  v16 = &v17;
  v15 = a4;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 168), context, (dispatch_function_t)audioHoseManagerBuffered_hoseFlushCallbackCompletionHandlerInternal);
  if (context[0])
    CFRelease(context[0]);
  return v17;
}

uint64_t audioHoseManagerBuffered_hoseFlushCallbackCompletionHandlerInternal(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(result + 36))
  {
    result = audioHoseManagerBuffered_getHoseDecriptorFromHose();
    if (result)
    {
      v3 = result;
      --*(_DWORD *)(result + 144);
      if (*(_DWORD *)(a1 + 48))
      {
        if (gLogCategory_APAudioHoseManagerBuffered <= 90)
        {
          if (gLogCategory_APAudioHoseManagerBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
          {
            if (!*(_QWORD *)a1)
            {
LABEL_14:
              result = LogPrintF();
              goto LABEL_19;
            }
LABEL_7:
            CMBaseObjectGetDerivedStorage();
            goto LABEL_14;
          }
        }
      }
      else
      {
        if (gLogCategory_APAudioHoseManagerBuffered <= 50)
        {
          if (gLogCategory_APAudioHoseManagerBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
          {
            if (*(_QWORD *)a1)
              CMBaseObjectGetDerivedStorage();
            result = LogPrintF();
          }
        }
        v4 = MEMORY[0x1E0CF72D8];
        *(_OWORD *)(v3 + 148) = *MEMORY[0x1E0CF72D8];
        *(_OWORD *)(v3 + 160) = *(_OWORD *)(v4 + 12);
      }
    }
    else if (gLogCategory_APAudioHoseManagerBuffered <= 90)
    {
      if (gLogCategory_APAudioHoseManagerBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      {
        if (!*(_QWORD *)a1)
          goto LABEL_14;
        goto LABEL_7;
      }
    }
  }
LABEL_19:
  **(_DWORD **)(a1 + 56) = 0;
  return result;
}

uint64_t audioHoseManagerBuffered_getHoseDecriptorFromHose()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  CMBaseObjectGetDerivedStorage();
  v2 = 0;
  v3 = &v2;
  v4 = 0x2000000000;
  v5 = 0;
  CFDictionaryApplyBlock();
  v0 = v3[3];
  _Block_object_dispose(&v2, 8);
  return v0;
}

uint64_t __audioHoseManagerBuffered_getHoseDecriptorFromHose_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = FigCFEqual();
  if ((_DWORD)result)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
  return result;
}

uint64_t audioHoseManagerBuffered_hoseFlushWithinSampleRangeCallbackCompletionHandler(const void *a1, int a2, _OWORD *a3, int a4, _OWORD *a5, unsigned int a6, const void *a7)
{
  uint64_t DerivedStorage;
  CFTypeRef context[2];
  int v17;
  _BYTE v18[28];
  int v19;
  _BYTE v20[28];
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;

  v23 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = a7;
  context[1] = a1;
  v17 = a2;
  *(_OWORD *)v18 = *a3;
  *(_OWORD *)&v18[12] = *(_OWORD *)((char *)a3 + 12);
  v19 = a4;
  *(_OWORD *)v20 = *a5;
  *(_OWORD *)&v20[12] = *(_OWORD *)((char *)a5 + 12);
  v22 = &v23;
  v21 = a6;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 168), context, (dispatch_function_t)audioHoseManagerBuffered_hoseFlushWithinSampleRangeCallbackCompletionHandlerInternal);
  if (context[0])
    CFRelease(context[0]);
  return v23;
}

uint64_t audioHoseManagerBuffered_hoseFlushWithinSampleRangeCallbackCompletionHandlerInternal(uint64_t a1)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(result + 36))
    goto LABEL_18;
  result = audioHoseManagerBuffered_getHoseDecriptorFromHose();
  if (!result)
  {
    if (gLogCategory_APAudioHoseManagerBuffered > 90)
      goto LABEL_18;
    if (gLogCategory_APAudioHoseManagerBuffered == -1)
    {
      result = _LogCategory_Initialize();
      if (!(_DWORD)result)
        goto LABEL_18;
    }
    if (!*(_QWORD *)a1)
      goto LABEL_17;
LABEL_22:
    CMBaseObjectGetDerivedStorage();
    goto LABEL_17;
  }
  --*(_DWORD *)(result + 144);
  if (!*(_DWORD *)(a1 + 80))
  {
    if (gLogCategory_APAudioHoseManagerBuffered > 50)
      goto LABEL_18;
    if (gLogCategory_APAudioHoseManagerBuffered == -1)
    {
      result = _LogCategory_Initialize();
      if (!(_DWORD)result)
        goto LABEL_18;
    }
    if (!*(_QWORD *)a1)
    {
LABEL_17:
      result = LogPrintF();
      goto LABEL_18;
    }
    goto LABEL_22;
  }
  if (gLogCategory_APAudioHoseManagerBuffered <= 90)
  {
    if (gLogCategory_APAudioHoseManagerBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
    {
      if (!*(_QWORD *)a1)
        goto LABEL_17;
      goto LABEL_22;
    }
  }
LABEL_18:
  **(_DWORD **)(a1 + 88) = 0;
  return result;
}

uint64_t audioHoseManagerBuffered_hoseSetRateAndAnchorTimeCallbackCompletionHandler(const void *a1, int a2, _OWORD *a3, __int128 *a4, _OWORD *a5, int a6, const void *a7)
{
  uint64_t DerivedStorage;
  __int128 v15;
  CFTypeRef context[2];
  int v18;
  _DWORD v19[11];
  uint64_t v20;
  _BYTE v21[28];
  int v22;
  unsigned int *v23;
  unsigned int v24;

  v24 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = a7;
  context[1] = a1;
  v18 = a2;
  *(_OWORD *)v19 = *a3;
  v15 = *a4;
  *(_OWORD *)&v19[3] = *(_OWORD *)((char *)a3 + 12);
  *(_OWORD *)&v19[7] = v15;
  v20 = *((_QWORD *)a4 + 2);
  *(_OWORD *)v21 = *a5;
  *(_OWORD *)&v21[12] = *(_OWORD *)((char *)a5 + 12);
  v22 = a6;
  v23 = &v24;
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a7)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 168), context, (dispatch_function_t)audioHoseManagerBuffered_hoseSetRateAndAnchorTimeCallbackCompletionHandlerInternal);
  if (context[0])
    CFRelease(context[0]);
  return v24;
}

void audioHoseManagerBuffered_hoseSetRateAndAnchorTimeCallbackCompletionHandlerInternal(uint64_t *a1)
{
  uint64_t HoseDecriptorFromHose;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  __CFDictionary *v6;
  uint64_t v7;
  __int128 v8;
  CFMutableDictionaryRef Mutable;

  if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 36))
  {
    HoseDecriptorFromHose = audioHoseManagerBuffered_getHoseDecriptorFromHose();
    if (HoseDecriptorFromHose)
    {
      v3 = HoseDecriptorFromHose;
      if (gLogCategory_APAudioHoseManagerBuffered <= 50
        && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      if (*((_DWORD *)a1 + 4))
      {
        v4 = MEMORY[0x1E0CF72D8];
        *(_OWORD *)(v3 + 148) = *MEMORY[0x1E0CF72D8];
        *(_OWORD *)(v3 + 160) = *(_OWORD *)(v4 + 12);
        if (*((_DWORD *)a1 + 25))
        {
          v5 = *(_DWORD *)(v3 + 140) + 1;
          *(_DWORD *)(v3 + 140) = v5;
          if (gLogCategory_APAudioHoseManagerBuffered <= 90)
          {
            if (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize())
            {
              if (*a1)
                CMBaseObjectGetDerivedStorage();
              LogPrintF();
            }
            v5 = *(_DWORD *)(v3 + 140);
          }
          if (v5 >= 0x32)
          {
            v7 = *a1;
            CMBaseObjectGetDerivedStorage();
            if (audioHoseManagerBuffered_getHoseDecriptorFromHose())
            {
              if (gLogCategory_APAudioHoseManagerBuffered <= 90
                && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
              {
                if (v7)
                  CMBaseObjectGetDerivedStorage();
                LogPrintF();
              }
              Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (!Mutable)
              {
                CMNotificationCenterGetDefaultLocalCenter();
                FigDispatchAsyncPostNotification();
                goto LABEL_58;
              }
              v6 = Mutable;
              FigCFDictionarySetInt32();
              CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E0CA46E8], CFSTR("Too many retries setting the rate to 1"));
              CMNotificationCenterGetDefaultLocalCenter();
              FigDispatchAsyncPostNotification();
              goto LABEL_57;
            }
            if (gLogCategory_APAudioHoseManagerBuffered <= 90
              && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
            {
              if (!v7)
                goto LABEL_51;
              goto LABEL_68;
            }
          }
        }
        else
        {
          *(_DWORD *)(v3 + 140) = 0;
          if (gLogCategory_APAudioHoseManagerBuffered <= 50
            && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
          {
            if (!*a1)
            {
LABEL_51:
              LogPrintF();
              goto LABEL_58;
            }
LABEL_68:
            CMBaseObjectGetDerivedStorage();
            goto LABEL_51;
          }
        }
      }
      else
      {
        if (*((_DWORD *)a1 + 25))
        {
          if (gLogCategory_APAudioHoseManagerBuffered <= 90
            && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
          {
            if (*a1)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          v6 = 0;
        }
        else
        {
          v6 = (__CFDictionary *)APSAudioTransportTimeCopyDebugDesc();
          if (gLogCategory_APAudioHoseManagerBuffered <= 50
            && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
          {
            if (*a1)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
        }
        if (!*(_DWORD *)(v3 + 144))
        {
          v8 = *(_OWORD *)(a1 + 9);
          *(_OWORD *)(v3 + 160) = *(_OWORD *)((char *)a1 + 84);
          *(_OWORD *)(v3 + 148) = v8;
        }
        if (v6)
LABEL_57:
          CFRelease(v6);
      }
    }
    else if (gLogCategory_APAudioHoseManagerBuffered <= 90
           && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
    {
      if (!*a1)
        goto LABEL_51;
      goto LABEL_68;
    }
  }
LABEL_58:
  *(_DWORD *)a1[13] = 0;
}

uint64_t audioHoseManagerBuffered_hoseSetRateCallbackCompletionHandler(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t HoseDecriptorFromHose;
  uint64_t v10;
  const void *v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  HoseDecriptorFromHose = audioHoseManagerBuffered_getHoseDecriptorFromHose();
  if (HoseDecriptorFromHose)
  {
    v10 = *(_QWORD *)(a3 + 16);
    *(_OWORD *)(a5 + 56) = *(_OWORD *)a3;
    *(_QWORD *)(a5 + 72) = v10;
    *(_QWORD *)(a5 + 80) = HoseDecriptorFromHose;
    *(_DWORD *)(a5 + 88) = a4;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 168), (void *)a5, (dispatch_function_t)audioHoseManagerBuffered_hoseSetRateCallbackCompletionHandlerInternal);
    v11 = *(const void **)(a5 + 16);
    if (v11)
      CFRelease(v11);
    free((void *)a5);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
}

uint64_t audioHoseManagerBuffered_hoseSetRateCallbackCompletionHandlerInternal(uint64_t *a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, _BYTE *, _BYTE *, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  CFTypeRef v12;
  __int128 v13;
  const void *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, _BYTE *, uint64_t (*)(_QWORD), char *);
  _BYTE v20[28];
  _BYTE v21[28];

  result = CMBaseObjectGetDerivedStorage();
  v3 = *((_DWORD *)a1 + 22);
  if (!v3)
  {
    if (gLogCategory_APAudioHoseManagerBuffered > 50)
      goto LABEL_22;
    if (gLogCategory_APAudioHoseManagerBuffered == -1)
    {
      result = _LogCategory_Initialize();
      if (!(_DWORD)result)
        goto LABEL_22;
    }
    if (!a1[2])
      goto LABEL_21;
    goto LABEL_6;
  }
  if (v3 == 200501)
  {
    if (gLogCategory_APAudioHoseManagerBuffered > 90)
      goto LABEL_22;
    if (gLogCategory_APAudioHoseManagerBuffered == -1)
    {
      result = _LogCategory_Initialize();
      if (!(_DWORD)result)
        goto LABEL_22;
    }
    if (!a1[2])
      goto LABEL_21;
LABEL_6:
    CMBaseObjectGetDerivedStorage();
LABEL_21:
    result = LogPrintF();
    goto LABEL_22;
  }
  v4 = result;
  if (gLogCategory_APAudioHoseManagerBuffered <= 90
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1[2])
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  v9 = a1[10];
  v10 = *(_DWORD *)(v9 + 140);
  if (v10 >= 0x32 || *(_DWORD *)(v4 + 260) != 1 || *(_DWORD *)(v9 + 44) != 1)
  {
    result = APSLogErrorAt();
LABEL_22:
    v5 = (uint64_t (*)(uint64_t, _BYTE *, _BYTE *, uint64_t, uint64_t))a1[1];
    if (v5)
    {
      v6 = a1[2];
      v7 = *((unsigned int *)a1 + 22);
      v8 = *a1;
      *(_OWORD *)v21 = *(_OWORD *)((char *)a1 + 28);
      *(_OWORD *)&v21[12] = *(_OWORD *)(a1 + 5);
      *(_OWORD *)v20 = *(_OWORD *)(a1 + 7);
      *(_QWORD *)&v20[16] = a1[9];
      return v5(v6, v21, v20, v7, v8);
    }
    return result;
  }
  *(_DWORD *)(v9 + 140) = v10 + 1;
  if (gLogCategory_APAudioHoseManagerBuffered <= 50
    && (gLogCategory_APAudioHoseManagerBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1[2])
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  v11 = (char *)malloc_type_calloc(1uLL, 0x60uLL, 0x10A0040428D2481uLL);
  v12 = (CFTypeRef)a1[2];
  if (v12)
    v12 = CFRetain(v12);
  *((_QWORD *)v11 + 2) = v12;
  *(_OWORD *)v11 = *(_OWORD *)a1;
  *((_DWORD *)v11 + 6) = *((_DWORD *)a1 + 6);
  v13 = *(_OWORD *)((char *)a1 + 28);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a1 + 5);
  *(_OWORD *)(v11 + 28) = v13;
  usleep(0x186A0u);
  v14 = (const void *)a1[2];
  if (v14)
    CFRetain(v14);
  v15 = (uint64_t *)a1[10];
  v16 = *v15;
  v17 = *((unsigned int *)v15 + 11);
  *(_OWORD *)v20 = *(_OWORD *)(v11 + 28);
  *(_OWORD *)&v20[12] = *(_OWORD *)(v11 + 40);
  APSEndpointStreamAudioHoseProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v18 = *(_QWORD *)(result + 16);
    if (v18)
    {
      v19 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t (*)(_QWORD), char *))(v18 + 80);
      if (v19)
      {
        *(_OWORD *)v21 = *(_OWORD *)v20;
        *(_OWORD *)&v21[12] = *(_OWORD *)&v20[12];
        return v19(v16, v17, v21, audioHoseManagerBuffered_hoseSetRateCallbackCompletionHandler, v11);
      }
      else
      {
        return audioHoseManagerBuffered_hoseSetRateCallbackCompletionHandler(v16);
      }
    }
  }
  return result;
}

uint64_t audioHoseManagerBuffered_setCryptorForAllHosesDispatch(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t result;
  int v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = audioHoseManagerBuffered_setCryptorForAllHoses(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = result;
  if ((_DWORD)result)
    result = APSLogErrorAt();
  else
    *(_QWORD *)(DerivedStorage + 320) = *(_QWORD *)(a1 + 16);
  *(_DWORD *)a1 = v4;
  return result;
}

void __audioHoseManagerBuffered_deregisterAllHoses_block_invoke(uint64_t a1, uint64_t a2, const void **a3)
{
  audioHoseManagerBuffered_removeHoseFromDescriptors(*(_QWORD *)(a1 + 32), *a3);
}

_OWORD *hoseManagerBuffered_hoseDescriptorDictionaryRetain(uint64_t a1, __int128 *a2)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  CFTypeRef v16;
  CFTypeRef v17;

  if (a2)
  {
    v3 = malloc_type_calloc(1uLL, 0xF8uLL, 0x106004011576FA2uLL);
    v4 = a2[3];
    v6 = *a2;
    v5 = a2[1];
    v3[2] = a2[2];
    v3[3] = v4;
    *v3 = v6;
    v3[1] = v5;
    v7 = a2[7];
    v9 = a2[4];
    v8 = a2[5];
    v3[6] = a2[6];
    v3[7] = v7;
    v3[4] = v9;
    v3[5] = v8;
    v10 = a2[11];
    v12 = a2[8];
    v11 = a2[9];
    v3[10] = a2[10];
    v3[11] = v10;
    v3[8] = v12;
    v3[9] = v11;
    v14 = a2[13];
    v13 = a2[14];
    v15 = a2[12];
    *((_QWORD *)v3 + 30) = *((_QWORD *)a2 + 30);
    v3[13] = v14;
    v3[14] = v13;
    v3[12] = v15;
    v16 = (CFTypeRef)*((_QWORD *)a2 + 28);
    if (v16)
      v16 = CFRetain(v16);
    *((_QWORD *)v3 + 28) = v16;
    v17 = *(CFTypeRef *)a2;
    if (*(_QWORD *)a2)
      v17 = CFRetain(v17);
    *(_QWORD *)v3 = v17;
  }
  else
  {
    APSLogErrorAt();
    return 0;
  }
  return v3;
}

void hoseManagerBuffered_hoseDescriptorDictionaryRelease(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3;
  void (*v4)(CFTypeRef, _QWORD, _QWORD);
  const void *v5;

  if (a2)
  {
    v3 = *(CFTypeRef *)a2;
    v4 = *(void (**)(CFTypeRef, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v4)
      v4(v3, *MEMORY[0x1E0CF7380], *MEMORY[0x1E0C9AE40]);
    if (*(_QWORD *)a2)
      CFRelease(*(CFTypeRef *)a2);
    v5 = *(const void **)(a2 + 224);
    if (v5)
      CFRelease(v5);
    free((void *)a2);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t SPEndpointDescriptionCreateWithTransportDevice(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;
  const void *AdvertiserInfo;
  uint64_t v8;
  dispatch_queue_t v9;
  uint64_t v10;
  char label[64];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v10 = 4294895545;
    APSLogErrorAt();
    return v10;
  }
  if (!a3)
  {
    v10 = 4294895545;
LABEL_16:
    APSLogErrorAt();
    return v10;
  }
  APEndpointDescriptionGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
    v10 = v5;
    goto LABEL_16;
  }
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  *DerivedStorage = CFRetain(a2);
  AdvertiserInfo = (const void *)APTransportDeviceGetAdvertiserInfo();
  DerivedStorage[1] = AdvertiserInfo;
  if (!AdvertiserInfo)
    return APSSignalErrorAt();
  CFRetain(AdvertiserInfo);
  v8 = FigSimpleMutexCreate();
  DerivedStorage[2] = v8;
  if (v8 && (SNPrintF(), v9 = dispatch_queue_create(label, 0), (DerivedStorage[3] = v9) != 0))
  {
    if (gLogCategory_SPEndpointDescription <= 30
      && (gLogCategory_SPEndpointDescription != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v10 = 0;
    *a3 = 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294895546;
  }
  return v10;
}

uint64_t spDescription_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  NSObject *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpointDescription <= 30
    && (gLogCategory_SPEndpointDescription != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v2 = *(NSObject **)(DerivedStorage + 24);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  return FigSimpleMutexDestroy();
}

__CFString *spDescription_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t DerivedStorage;
  const void *v4;
  const void *v6;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v6 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  spDescription_copyName(a1, (uint64_t *)&v6);
  v4 = v6;
  CFStringAppendFormat(Mutable, 0, CFSTR("<SPEndpointDescription %p, name=%@, advertiserInfo=%@>"), a1, v6, *(_QWORD *)(DerivedStorage + 8));
  if (v4)
    CFRelease(v4);
  return Mutable;
}

uint64_t spDescription_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, uint64_t *a4)
{
  uint64_t DerivedStorage;
  const void **v9;
  unsigned int v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  const void **v15;
  unsigned int v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpointDescription <= 30
    && (gLogCategory_SPEndpointDescription != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a2)
  {
    v13 = 4294895545;
LABEL_28:
    APSLogErrorAt();
    return v13;
  }
  if (!a4)
  {
    v13 = 4294895545;
    goto LABEL_28;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 16));
  v16 = 0;
  v9 = (const void **)CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("DeviceID")))
  {
    if (CFEqual(a2, CFSTR("TransportDevice")))
    {
      v11 = *v9;
LABEL_12:
      v12 = (uint64_t)CFRetain(v11);
LABEL_13:
      *a4 = v12;
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("Name")))
    {
      v10 = spDescription_copyName(a1, a4);
      goto LABEL_9;
    }
    if (CFEqual(a2, CFSTR("Manufacturer")) || CFEqual(a2, CFSTR("Model")) || CFEqual(a2, CFSTR("SerialNumber")))
    {
      v12 = APAdvertiserInfoCopyProperty();
      goto LABEL_13;
    }
    if (CFEqual(a2, CFSTR("SourceVersion")))
    {
      v10 = spDescription_copySourceVersion(a1, a4);
      goto LABEL_9;
    }
    if (CFEqual(a2, CFSTR("MACAddress")))
    {
      v10 = spDescription_copyMACAddress(a1, a3, (CFDataRef *)a4);
      goto LABEL_9;
    }
    if (!CFEqual(a2, CFSTR("SupportsBufferedAudio")) && !CFEqual(a2, CFSTR("HasUnifiedAdvertiserInfo")))
    {
      if (CFEqual(a2, CFSTR("SupportedAudioFormats")))
      {
        v10 = spDescription_copyAudioFormats(a3, (CFMutableDictionaryRef *)a4);
        goto LABEL_9;
      }
      if (!CFEqual(a2, CFSTR("SupportsCoreUtilsPairingAndEncryption")))
      {
        if (CFEqual(a2, CFSTR("SupportsAudioMediaDataControl")))
        {
LABEL_37:
          v15 = (const void **)MEMORY[0x1E0C9AE40];
          goto LABEL_32;
        }
        if (!CFEqual(a2, CFSTR("SupportsReceiverChoosesAnchor")))
        {
          if (!CFEqual(a2, CFSTR("SupportsAudioStreamConnectionSetup")))
          {
            if (gLogCategory_SPEndpointDescription <= 30
              && (gLogCategory_SPEndpointDescription != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v16 = -12784;
            goto LABEL_14;
          }
          goto LABEL_37;
        }
      }
    }
    v15 = (const void **)MEMORY[0x1E0C9AE50];
LABEL_32:
    v11 = *v15;
    goto LABEL_12;
  }
  v10 = spDescription_copyDeviceID(a1, a4);
LABEL_9:
  v16 = v10;
LABEL_14:
  v13 = v16;
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 16));
  return v13;
}

uint64_t spDescription_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpointDescription <= 30
    && (gLogCategory_SPEndpointDescription != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a2)
  {
    v6 = 4294895545;
LABEL_15:
    APSLogErrorAt();
    return v6;
  }
  if (!a3)
  {
    v6 = 4294895545;
    goto LABEL_15;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 16));
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpointDescription <= 30
    && (gLogCategory_SPEndpointDescription != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 16));
  return 0;
}

uint64_t spDescription_copyName(uint64_t a1, uint64_t *a2)
{
  CMBaseObjectGetDerivedStorage();
  *a2 = APAdvertiserInfoCopyProperty();
  return 0;
}

uint64_t spDescription_copyDeviceID(uint64_t a1, uint64_t *a2)
{
  uint64_t *DerivedStorage;
  uint64_t v4;
  char cStr[16];
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  *(_OWORD *)cStr = 0u;
  v7 = 0u;
  v4 = APAdvertiserInfoCopyProperty();
  if (v4
    || (v4 = *DerivedStorage) == 0
    || (APTransportDeviceGetDiscoveryID(),
        CFGetInt64(),
        SNPrintF(),
        (v4 = (uint64_t)CFStringCreateWithCString(0, cStr, 0x8000100u)) != 0))
  {
    *a2 = v4;
  }
  else
  {
    APSLogErrorAt();
  }
  return 0;
}

uint64_t spDescription_copySourceVersion(uint64_t a1, uint64_t *a2)
{
  const __CFString *v3;
  const __CFString *v4;
  uint64_t Int64;
  uint64_t v6;
  _OWORD v8[16];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  memset(v8, 0, sizeof(v8));
  v3 = (const __CFString *)APAdvertiserInfoCopyProperty();
  v4 = v3;
  if (v3)
  {
    if (!CFStringGetCString(v3, (char *)v8, 256, 0x8000100u))
    {
      APSLogErrorAt();
      v6 = 4294960534;
      goto LABEL_6;
    }
    TextToSourceVersion();
  }
  Int64 = CFNumberCreateInt64();
  if (!Int64)
  {
    APSLogErrorAt();
    v6 = 4294960534;
    if (!v4)
      return v6;
    goto LABEL_6;
  }
  v6 = 0;
  *a2 = Int64;
  if (v4)
LABEL_6:
    CFRelease(v4);
  return v6;
}

uint64_t spDescription_copyMACAddress(uint64_t a1, const __CFAllocator *a2, CFDataRef *a3)
{
  uint64_t v6;
  CFStringRef v7;
  uint64_t v8;
  CFDataRef v9;
  uint64_t v10;
  UInt8 bytes[6];
  CFStringRef theString;
  char buffer[64];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  theString = 0;
  v6 = spDescription_copyDeviceID(a1, (uint64_t *)&theString);
  if ((_DWORD)v6)
  {
    v10 = v6;
    APSLogErrorAt();
    v7 = theString;
    if (!theString)
      return v10;
    goto LABEL_7;
  }
  v7 = theString;
  if (!theString)
  {
    v10 = 4294895543;
    APSLogErrorAt();
    return v10;
  }
  if (CFStringGetCString(theString, buffer, 64, 0x8000100u))
  {
    v8 = TextToHardwareAddress();
    if (!(_DWORD)v8)
    {
      v9 = CFDataCreate(a2, bytes, 6);
      if (v9)
      {
        v10 = 0;
        *a3 = v9;
      }
      else
      {
        APSLogErrorAt();
        v10 = 4294895546;
      }
      goto LABEL_7;
    }
    v10 = v8;
  }
  else
  {
    v10 = 4294895543;
  }
  APSLogErrorAt();
LABEL_7:
  CFRelease(v7);
  return v10;
}

uint64_t spDescription_copyAudioFormats(const __CFAllocator *a1, CFMutableDictionaryRef *a2)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v4;
  uint64_t result;

  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = Mutable;
    CFDictionarySetInt64();
    result = 0;
    *a2 = v4;
  }
  else
  {
    APSLogErrorAt();
    return 4294895546;
  }
  return result;
}

uint64_t spDescription_CopyFeatures(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpointDescription <= 30
    && (gLogCategory_SPEndpointDescription != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 16));
    CMBaseObjectGetDerivedStorage();
    *a2 = APAdvertiserInfoCopyProperty();
    v4 = 0;
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 16));
  }
  else
  {
    APSLogErrorAt();
    return 4294895545;
  }
  return v4;
}

uint64_t spDescription_HasFeature()
{
  uint64_t DerivedStorage;
  const void *v1;
  uint64_t HasFeature;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpointDescription <= 30
    && (gLogCategory_SPEndpointDescription != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 16));
  CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  v1 = (const void *)APAdvertiserInfoCopyProperty();
  HasFeature = APSFeaturesHasFeature();
  if (v1)
    CFRelease(v1);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 16));
  return HasFeature;
}

uint64_t spDescription_DescribesSameTransportDevice()
{
  uint64_t DerivedStorage;
  uint64_t IsSameDevice;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 16));
  IsSameDevice = APTransportDeviceIsSameDevice();
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 16));
  return IsSameDevice;
}

uint64_t SPEndpointCreateWithEndpointDescription(uint64_t a1, const void *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  uint64_t v8;
  _QWORD *DerivedStorage;
  CFTypeRef v10;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v13;
  uint64_t v14;
  dispatch_queue_t v15;
  dispatch_queue_t v16;
  dispatch_queue_t v17;
  dispatch_queue_t v18;
  CFTypeRef v19;
  uint64_t v20;
  int *v21;
  _QWORD *v22;
  __CFDictionary *Mutable;
  uint64_t v24;
  CFAllocatorRef v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, const __CFString *, CFAllocatorRef, char *);
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  CFTypeRef v31;
  uint64_t v32;
  CFAllocatorRef v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  uint64_t v36;
  const void *v37;
  CFTypeRef v38;
  uint64_t v39;
  CFAllocatorRef v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  uint64_t v43;
  const void *v44;
  CFTypeRef v45;
  uint64_t v46;
  const void *Value;
  const void *v48;
  const void *v49;
  _QWORD *v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, const __CFString *, _QWORD, char *);
  uint64_t EventRecorder;
  uint64_t v56;
  int v57;
  CFTypeRef v59;
  CFTypeRef cf;
  CFTypeRef v61;
  CFTypeRef v62;
  char label[8];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v59 = 0;
  cf = 0;
  if (a2 && a4)
  {
    FigEndpointExtendedGetClassID();
    v8 = CMDerivedObjectCreate();
    if ((_DWORD)v8)
    {
      v29 = v8;
      goto LABEL_21;
    }
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    v10 = CFRetain(a2);
    DerivedStorage[30] = v10;
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(v10);
    v12 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (!v12)
    {
      v29 = 4294954514;
      goto LABEL_21;
    }
    v13 = v12(CMBaseObject, CFSTR("Name"), a1, &v59);
    if ((_DWORD)v13)
    {
      v29 = v13;
      goto LABEL_21;
    }
    v14 = FigSimpleMutexCreate();
    DerivedStorage[5] = v14;
    if (v14)
    {
      SNPrintF();
      v15 = dispatch_queue_create(label, 0);
      DerivedStorage[35] = v15;
      if (v15)
      {
        SNPrintF();
        v16 = dispatch_queue_create(label, 0);
        DerivedStorage[1] = v16;
        if (v16)
        {
          SNPrintF();
          v17 = dispatch_queue_create(label, 0);
          DerivedStorage[2] = v17;
          if (v17)
          {
            SNPrintF();
            v18 = dispatch_queue_create(label, 0);
            *DerivedStorage = v18;
            if (v18)
            {
              MEMORY[0x1CAA400CC](DerivedStorage[5]);
              v19 = cf;
              v20 = CMBaseObjectGetDerivedStorage();
              v62 = 0;
              *(_QWORD *)label = 0;
              v61 = 0;
              v21 = &gLogCategory_APAudioHoseManagerBuffered;
              if (*(_BYTE *)(v20 + 48))
              {
                v29 = 0;
                Mutable = 0;
                goto LABEL_52;
              }
              v22 = (_QWORD *)v20;
              Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (Mutable)
              {
                v24 = v22[30];
                v25 = CFGetAllocator(v19);
                v26 = APEndpointDescriptionGetCMBaseObject(v24);
                v27 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                if (v27)
                {
                  v28 = v27(v26, CFSTR("DeviceID"), v25, label);
                  if ((_DWORD)v28)
                  {
                    v29 = v28;
                  }
                  else
                  {
                    if (*(_QWORD *)label && !FigCFEqual())
                    {
                      if (gLogCategory_SPEndpoint <= 50
                        && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
                      {
                        LogPrintF();
                      }
                      v30 = (const void *)v22[32];
                      v31 = *(CFTypeRef *)label;
                      v22[32] = *(_QWORD *)label;
                      if (v31)
                        CFRetain(v31);
                      if (v30)
                        CFRelease(v30);
                      CFDictionarySetValue(Mutable, CFSTR("SPIDDidChange"), (const void *)*MEMORY[0x1E0C9AE50]);
                    }
                    v32 = v22[30];
                    v33 = CFGetAllocator(v19);
                    v34 = APEndpointDescriptionGetCMBaseObject(v32);
                    v35 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                    if (v35)
                    {
                      v36 = v35(v34, CFSTR("MACAddress"), v33, &v62);
                      if (!(_DWORD)v36)
                      {
                        v37 = (const void *)v22[33];
                        v38 = v62;
                        v22[33] = v62;
                        if (v38)
                          CFRetain(v38);
                        if (v37)
                          CFRelease(v37);
                        v39 = v22[30];
                        v40 = CFGetAllocator(v19);
                        v41 = APEndpointDescriptionGetCMBaseObject(v39);
                        v42 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                        if (v42)
                        {
                          v43 = v42(v41, CFSTR("Name"), v40, &v61);
                          if (!(_DWORD)v43)
                          {
                            v44 = (const void *)v22[31];
                            v45 = v61;
                            v22[31] = v61;
                            v21 = &gLogCategory_APAudioHoseManagerBuffered;
                            if (v45)
                              CFRetain(v45);
                            if (v44)
                              CFRelease(v44);
                            if (gLogCategory_SPEndpoint <= 30
                              && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
                            {
                              LogPrintF();
                            }
                            v29 = 0;
LABEL_52:
                            if (*(_QWORD *)label)
                              CFRelease(*(CFTypeRef *)label);
                            if (v62)
                              CFRelease(v62);
                            if (v61)
                              CFRelease(v61);
                            if (Mutable)
                              CFRelease(Mutable);
                            MEMORY[0x1CAA400E4](DerivedStorage[5]);
                            if (!(_DWORD)v29)
                            {
                              v46 = CMBaseObjectGetDerivedStorage();
                              *(_QWORD *)label = 0;
                              if (a3)
                              {
                                Value = CFDictionaryGetValue(a3, CFSTR("EventRecorder"));
                                v48 = *(const void **)(v46 + 32);
                                *(_QWORD *)(v46 + 32) = Value;
                                if (Value)
                                  CFRetain(Value);
                                if (v48)
                                  CFRelease(v48);
                              }
                              v51 = *(const void **)(v46 + 24);
                              v50 = (_QWORD *)(v46 + 24);
                              v49 = v51;
                              if (v51)
                              {
                                CFRelease(v49);
                                *v50 = 0;
                              }
                              v52 = APSEventRecorderCreate();
                              if ((_DWORD)v52)
                              {
                                v29 = v52;
                              }
                              else
                              {
                                v53 = APEndpointDescriptionGetCMBaseObject(a2);
                                v54 = *(void (**)(uint64_t, const __CFString *, _QWORD, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                                if (!v54
                                  || (v54(v53, CFSTR("TransportDevice"), *MEMORY[0x1E0C9AE00], label), !*(_QWORD *)label)
                                  || (EventRecorder = APTransportDeviceGetEventRecorder()) == 0
                                  || (v56 = MEMORY[0x1CAA3DC60](*v50, EventRecorder), !(_DWORD)v56))
                                {
                                  APSEventRecorderAddSignPostForEvent();
                                  v29 = 0;
                                  goto LABEL_74;
                                }
                                v29 = v56;
                              }
                              APSLogErrorAt();
LABEL_74:
                              if (*(_QWORD *)label)
                                CFRelease(*(CFTypeRef *)label);
                              if (!(_DWORD)v29)
                              {
                                v57 = v21[76];
                                if (v57 <= 50 && (v57 != -1 || _LogCategory_Initialize()))
                                  LogPrintF();
                                v29 = 0;
                                *a4 = cf;
                                cf = 0;
                                goto LABEL_82;
                              }
                            }
LABEL_21:
                            APSLogErrorAt();
                            goto LABEL_22;
                          }
                          v29 = v43;
                        }
                        else
                        {
                          v29 = 4294954514;
                        }
                        v21 = &gLogCategory_APAudioHoseManagerBuffered;
                        APSLogErrorAt();
                        goto LABEL_52;
                      }
                      v29 = v36;
                    }
                    else
                    {
                      v29 = 4294954514;
                    }
                  }
                }
                else
                {
                  v29 = 4294954514;
                }
                APSLogErrorAt();
                v21 = &gLogCategory_APAudioHoseManagerBuffered;
                goto LABEL_52;
              }
              APSLogErrorAt();
              v29 = 4294950575;
              goto LABEL_52;
            }
          }
        }
      }
    }
    APSLogErrorAt();
    v29 = 4294950575;
  }
  else
  {
    APSLogErrorAt();
    v29 = 4294950576;
  }
LABEL_22:
  if (cf)
    CFRelease(cf);
LABEL_82:
  if (v59)
    CFRelease(v59);
  return v29;
}

uint64_t spendpoint_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t result;
  _QWORD block[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 30 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (introspector_getCollectionOfActiveSPEndpoints_once != -1)
    dispatch_once(&introspector_getCollectionOfActiveSPEndpoints_once, &__block_literal_global_34);
  if (introspector_getCollectionOfActiveSPEndpoints_coll)
  {
    v3 = *(NSObject **)introspector_getCollectionOfActiveSPEndpoints_coll;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __spendpoint_Finalize_block_invoke;
    block[3] = &__block_descriptor_48_e5_v8__0l;
    block[4] = introspector_getCollectionOfActiveSPEndpoints_coll;
    block[5] = a1;
    dispatch_sync(v3, block);
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 136))
  {
    result = gLogCategory_SPEndpoint;
    if (gLogCategory_SPEndpoint <= 100)
      result = spendpoint_Finalize_cold_1(gLogCategory_SPEndpoint);
    __break(1u);
  }
  else
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 40));
    spendpoint_resetActivationState(a1, DerivedStorage + 56, *(_QWORD *)(DerivedStorage + 256));
    spendpoint_clearEndpointState();
    v4 = *(const void **)(DerivedStorage + 248);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(DerivedStorage + 248) = 0;
    }
    v5 = *(const void **)(DerivedStorage + 256);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(DerivedStorage + 256) = 0;
    }
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
    v6 = *(const void **)(DerivedStorage + 32);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(DerivedStorage + 32) = 0;
    }
    v7 = *(const void **)(DerivedStorage + 24);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(DerivedStorage + 24) = 0;
    }
    v8 = *(const void **)(DerivedStorage + 232);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(DerivedStorage + 232) = 0;
    }
    v9 = *(const void **)(DerivedStorage + 240);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(DerivedStorage + 240) = 0;
    }
    v10 = *(NSObject **)(DerivedStorage + 16);
    if (v10)
    {
      dispatch_release(v10);
      *(_QWORD *)(DerivedStorage + 16) = 0;
    }
    v11 = *(NSObject **)(DerivedStorage + 8);
    if (v11)
    {
      dispatch_release(v11);
      *(_QWORD *)(DerivedStorage + 8) = 0;
    }
    v12 = *(NSObject **)(DerivedStorage + 280);
    if (v12)
    {
      dispatch_release(v12);
      *(_QWORD *)(DerivedStorage + 280) = 0;
    }
    return FigSimpleMutexDestroy();
  }
  return result;
}

__CFString *spendpoint_CopyDebugDescription(uint64_t a1)
{
  uint64_t v2;
  __CFString *Mutable;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v6;
  CFTypeRef v7;
  size_t v8;
  CFTypeRef cf;

  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  cf = 0;
  CFStringAppendFormat(Mutable, 0, CFSTR("<SPEndpoint %p>"), a1);
  CMBaseObject = FigEndpointGetCMBaseObject();
  v5 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v5)
  {
    v6 = v5(CMBaseObject, CFSTR("EndpointShowInfo"), v2, &cf);
    v7 = cf;
    if (!v6)
    {
      ASPrintF();
      v8 = strlen(0);
      if (v8 && *(_BYTE *)(v8 - 1) == 10)
        *(_BYTE *)(v8 - 1) = 0;
      CFStringAppendFormat(Mutable, 0, CFSTR("%s"), 0);
      free(0);
      v7 = cf;
    }
    if (v7)
      CFRelease(v7);
  }
  return Mutable;
}

uint64_t spendpoint_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFMutableArrayRef *a4)
{
  uint64_t DerivedStorage;
  const void *v9;
  CFTypeRef *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t CMBaseObject;
  uint64_t (*v15)(uint64_t, const __CFString *, const __CFAllocator *, CFMutableArrayRef *);
  uint64_t v16;
  void *v18;
  CFTypeRef *v20;
  CFNumberRef v21;
  int v22;
  uint64_t SupportedFeatures;
  CFNumberRef v24;
  CFNumberRef v25;
  uint64_t v26;
  __CFString **v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, CFMutableArrayRef *);
  CFNumberRef v30;
  CFNumberRef v31;
  int isConnected;
  uint64_t valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 10 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v9 = (const void *)*MEMORY[0x1E0CA4468];
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4468]))
  {
    v10 = (CFTypeRef *)MEMORY[0x1E0CA4988];
LABEL_10:
    v11 = 0;
    *a4 = (CFMutableArrayRef)CFRetain(*v10);
    return v11;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42D8]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42A8]))
  {
    v10 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_10;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 40));
  v13 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(v13 + 48)
    && !CFEqual(a2, v9)
    && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4260])
    && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4258])
    && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4348]))
  {
    v11 = 4294950573;
LABEL_51:
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
    return v11;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43D8]))
  {
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v13 + 240));
    v15 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFMutableArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v15)
    {
      v16 = v15(CMBaseObject, CFSTR("SubType"), a3, a4);
LABEL_20:
      v11 = v16;
      goto LABEL_21;
    }
    goto LABEL_98;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4258]))
  {
    v18 = *(void **)(v13 + 256);
    if (!v18)
      goto LABEL_50;
    goto LABEL_49;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4310]))
  {
    v18 = *(void **)(v13 + 264);
    if (!v18)
      goto LABEL_50;
    goto LABEL_49;
  }
  if (CFEqual(a2, CFSTR("EndpointDescription")))
  {
    v18 = *(void **)(v13 + 240);
    if (!v18)
      goto LABEL_50;
    goto LABEL_49;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4348]))
  {
    v18 = *(void **)(v13 + 248);
    if (!v18)
      goto LABEL_50;
    goto LABEL_49;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4260]))
  {
    v20 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (*(_DWORD *)(v13 + 72) != 2)
      v20 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_48;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40A8]))
  {
    valuePtr = 0;
    if (*(_DWORD *)(v13 + 72) == 2)
      valuePtr = *(_QWORD *)(v13 + 64);
    v21 = CFNumberCreate(a3, kCFNumberSInt64Type, &valuePtr);
    *a4 = v21;
    if (v21)
      goto LABEL_56;
    goto LABEL_80;
  }
  if (CFEqual(a2, CFSTR("IsInUse")))
  {
    v20 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v22 = *(_DWORD *)(v13 + 72);
    goto LABEL_61;
  }
  if (CFEqual(a2, CFSTR("IsEngaged")))
  {
    v20 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v22 = *(unsigned __int8 *)(v13 + 144);
LABEL_61:
    if (!v22)
      v20 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_48;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4388]))
  {
    v18 = (void *)*MEMORY[0x1E0CA4098];
    if (!*MEMORY[0x1E0CA4098])
      goto LABEL_50;
    goto LABEL_49;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43E0]))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43C8]))
    {
      v16 = spendpoint_copyStreams(a1, a3, a4);
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44A8]))
      goto LABEL_74;
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44B0]))
    {
      valuePtr = 0;
      v25 = CFNumberCreate(a3, kCFNumberSInt64Type, &valuePtr);
      *a4 = v25;
      if (!v25)
        goto LABEL_80;
      goto LABEL_56;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4338]))
    {
      v26 = *(_QWORD *)(v13 + 240);
      v27 = kAPEndpointDescriptionProperty_Model;
      goto LABEL_87;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4318]))
    {
      v26 = *(_QWORD *)(v13 + 240);
      v27 = kAPEndpointDescriptionProperty_Manufacturer;
      goto LABEL_87;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4210]))
    {
      v26 = *(_QWORD *)(v13 + 240);
      v27 = kAPEndpointDescriptionProperty_FirmwareVersion;
      goto LABEL_87;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43A8]))
    {
      v26 = *(_QWORD *)(v13 + 240);
      v27 = kAPEndpointDescriptionProperty_SerialNumber;
      goto LABEL_87;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4128]))
    {
      v20 = (CFTypeRef *)MEMORY[0x1E0CA37E8];
      goto LABEL_48;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40D0]))
    {
      v26 = *(_QWORD *)(v13 + 240);
      v27 = kAPEndpointDescriptionProperty_AirPlaySecurity;
      goto LABEL_87;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4460]))
    {
      v20 = (CFTypeRef *)MEMORY[0x1E0CA4958];
      goto LABEL_48;
    }
    if (CFEqual(a2, CFSTR("Features")))
    {
      v28 = *(_QWORD *)(v13 + 240);
      v29 = *(uint64_t (**)(uint64_t, CFMutableArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v29)
      {
        v16 = v29(v28, a4);
        goto LABEL_20;
      }
LABEL_98:
      v11 = 4294954514;
LABEL_99:
      MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
LABEL_100:
      APSLogErrorAt();
      return v11;
    }
    if (CFEqual(a2, CFSTR("SourceVersion")))
    {
      v26 = *(_QWORD *)(v13 + 240);
      v27 = kAPEndpointDescriptionProperty_SourceVersion;
      goto LABEL_87;
    }
    if (CFEqual(a2, CFSTR("EndpointStatus")))
    {
      v30 = CFNumberCreate(a3, kCFNumberSInt32Type, (const void *)(v13 + 272));
      *a4 = v30;
      if (!v30)
      {
        APSLogErrorAt();
        v11 = 4294950575;
        goto LABEL_99;
      }
    }
    else
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40F0]))
      {
        v26 = *(_QWORD *)(v13 + 240);
        v27 = kAPEndpointDescriptionProperty_VodkaVersion;
        goto LABEL_87;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40C8]))
      {
        v26 = *(_QWORD *)(v13 + 240);
        v27 = kAPEndpointDescriptionProperty_SupportsAirPlayFromCloud;
        goto LABEL_87;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42E0]))
      {
LABEL_74:
        v20 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
LABEL_48:
        v18 = (void *)*v20;
LABEL_49:
        v18 = (void *)CFRetain(v18);
LABEL_50:
        v11 = 0;
        *a4 = (CFMutableArrayRef)v18;
        goto LABEL_51;
      }
      if (!CFEqual(a2, CFSTR("EndpointShowInfo")))
      {
        if (CFEqual(a2, CFSTR("AirPlayDiagnosticsTargetInfo")))
        {
          v16 = spendpoint_copyAirPlayDiagnosticsDictionary(a1, a3, a4);
          goto LABEL_20;
        }
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4438]))
        {
          v26 = *(_QWORD *)(v13 + 240);
          v27 = kAPEndpointDescriptionProperty_StatusFlags;
        }
        else if (CFEqual(a2, CFSTR("TransportDevice")))
        {
          v26 = *(_QWORD *)(v13 + 240);
          v27 = kAPEndpointDescriptionProperty_TransportDevice;
        }
        else
        {
          if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40B0]))
          {
            valuePtr = 0;
            if (*(_QWORD *)(v13 + 136))
              valuePtr = *(_QWORD *)(v13 + 56);
            v31 = CFNumberCreate(a3, kCFNumberSInt64Type, &valuePtr);
            *a4 = v31;
            if (v31)
              goto LABEL_56;
            goto LABEL_80;
          }
          if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4280]))
          {
            isConnected = spendpoint_isConnected();
            v20 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
            if (!isConnected)
              v20 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
            goto LABEL_48;
          }
          if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43B0]) || CFEqual(a2, CFSTR("SupportsMuteControl")))
            goto LABEL_74;
          if (!CFEqual(a2, CFSTR("EndpointInfo")))
          {
            v11 = 4294954512;
            goto LABEL_51;
          }
          v26 = *(_QWORD *)(v13 + 240);
          v27 = kAPEndpointDescriptionProperty_EndpointInfo;
        }
LABEL_87:
        v16 = APEndpointDescriptionCopyProperty(v26, (uint64_t)*v27, (uint64_t)a3, (uint64_t)a4);
        goto LABEL_20;
      }
      spendpoint_copyShowInfoDictionary(a1, a4);
    }
    v11 = 0;
    goto LABEL_51;
  }
  valuePtr = 0;
  SupportedFeatures = spendpoint_getSupportedFeatures(a1, &valuePtr);
  if (!(_DWORD)SupportedFeatures)
  {
    v24 = CFNumberCreate(a3, kCFNumberSInt64Type, &valuePtr);
    *a4 = v24;
    if (!v24)
    {
LABEL_80:
      APSLogErrorAt();
      v11 = 4294950575;
      goto LABEL_21;
    }
LABEL_56:
    v11 = 0;
    goto LABEL_21;
  }
  v11 = SupportedFeatures;
  APSLogErrorAt();
LABEL_21:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
  if ((int)v11 > -6728)
  {
    if ((_DWORD)v11 != -6727 && (_DWORD)v11 != 0)
      goto LABEL_100;
  }
  else if ((_DWORD)v11 != -16723 && (_DWORD)v11 != -12784)
  {
    goto LABEL_100;
  }
  return v11;
}

uint64_t spendpoint_SetProperty(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 30 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (a2)
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 40));
    if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 48))
    {
      APSLogErrorAt();
      v4 = 4294950573;
    }
    else
    {
      v4 = 4294954512;
    }
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    return 4294950576;
  }
  return v4;
}

void spendpoint_resetActivationState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  id *v13;
  NSObject *v14;
  const void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  v6 = *(const void **)(a2 + 24);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a2 + 24) = 0;
  }
  v7 = *(const void **)(a2 + 32);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a2 + 32) = 0;
  }
  v8 = *(const void **)(a2 + 48);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a2 + 48) = 0;
  }
  v9 = *(const void **)(a2 + 56);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a2 + 56) = 0;
  }
  v10 = *(const void **)(a2 + 64);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a2 + 64) = 0;
  }
  v11 = *(const void **)(a2 + 72);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a2 + 72) = 0;
  }
  v12 = *(const void **)(a2 + 80);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a2 + 80) = 0;
  }
  if (!*(_QWORD *)(a2 + 96))
  {
    v13 = (id *)(a2 + 104);
    if (!*(_QWORD *)(a2 + 104))
      goto LABEL_23;
    if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
      objc_msgSend(*v13, "removeRemoteDeviceID:", a3, a1, a3);
    }
    else
    {
      objc_msgSend(*v13, "removeRemoteDeviceID:", a3, v17, v18);
    }
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
LABEL_23:

  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  v14 = *(NSObject **)(a2 + 112);
  if (v14)
  {
    dispatch_release(v14);
    *(_QWORD *)(a2 + 112) = 0;
  }
  v15 = *(const void **)(a2 + 120);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a2 + 120) = 0;
  }
  v16 = *(const void **)(a2 + 128);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a2 + 128) = 0;
  }
}

void spendpoint_clearEndpointState()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v1 = *(const void **)(DerivedStorage + 264);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 264) = 0;
  }
}

uint64_t __introspector_getCollectionOfActiveSPEndpoints_block_invoke()
{
  uint64_t result;
  CFMutableSetRef Mutable;
  uint64_t v2;

  result = IsAppleInternalBuild();
  if ((_DWORD)result)
  {
    introspector_getCollectionOfActiveSPEndpoints_coll = (uint64_t)malloc_type_calloc(1uLL, 0x18uLL, 0xF00401F3BCE50uLL);
    *(_QWORD *)introspector_getCollectionOfActiveSPEndpoints_coll = dispatch_queue_create("CollectionOfActiveSPEndpoints", 0);
    Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    v2 = introspector_getCollectionOfActiveSPEndpoints_coll;
    *(_QWORD *)(introspector_getCollectionOfActiveSPEndpoints_coll + 8) = Mutable;
    *(_QWORD *)(v2 + 16) = "ActiveSPEndpoints";
    return APSIntrospectorAddCommand();
  }
  return result;
}

void spendpoint_handleClientIsActiveDidChange(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v5;
  int v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (*(_DWORD *)(DerivedStorage + 72) != 2)
    goto LABEL_15;
  if (!*(_QWORD *)(DerivedStorage + 160) || (FigCFDictionaryGetValue(), FigCFEqual()))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v5 = Mutable;
      if (*(_QWORD *)(DerivedStorage + 152) || *(_QWORD *)(DerivedStorage + 160))
      {
        FigCFDictionarySetValueFromKeyInDict();
        FigCFDictionarySetValueFromKeyInDict();
        FigCFDictionarySetValueFromKeyInDict();
        FigCFDictionarySetValueFromKeyInDict();
        FigCFDictionarySetValueFromKeyInDict();
        FigCFDictionarySetValueFromKeyInDict();
      }
      MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 40));
      v6 = spEndpoint_sendCommandInternal(a2, CFSTR("clientIsActiveDidChange"), v5);
      MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
      if (v6)
        APSLogErrorAt();
      CFRelease(v5);
      return;
    }
LABEL_15:
    APSLogErrorAt();
    return;
  }
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
}

uint64_t spEndpoint_sendCommandInternal(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  unsigned int (*v8)(uint64_t);
  uint64_t v9;
  const void *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 40 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v7 = *(_QWORD *)(DerivedStorage + 136);
  if (v7
    && (v8 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16)) != 0
    && v8(v7))
  {
    if (*(_BYTE *)(DerivedStorage + 48))
      v9 = 4294950573;
    else
      v9 = 0;
  }
  else
  {
    v9 = 4294950570;
  }
  CFRetain(a1);
  CFRetain(a2);
  if (a3)
    CFRetain(a3);
  v10 = *(const void **)(DerivedStorage + 136);
  if (v10)
    CFRetain(v10);
  APSDispatchAsyncFHelper();
  return v9;
}

void spEndpoint_sendCommand(uint64_t a1)
{
  uint64_t v2;
  uint64_t CMBaseObject;
  uint64_t (*v4)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v5;
  unsigned int v6;
  CFTypeRef v7;
  uint64_t (*v8)(CFTypeRef, uint64_t, _QWORD, CFTypeRef *);
  unsigned int v9;
  unsigned int CFDataWithBlockBufferNoCopy;
  __CFDictionary *Mutable;
  __CFDictionary *v12;
  unsigned int v13;
  __CFDictionary *v14;
  __CFDictionary *v15;
  const void *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  unsigned int v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  CFTypeRef cf[5];
  CFTypeRef v25;
  CFTypeRef v26;
  const void *v27;
  CFTypeRef v28;

  CMBaseObjectGetDerivedStorage();
  v25 = 0;
  v26 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    APSLogErrorAt();
    v13 = 0;
LABEL_28:
    v15 = 0;
    goto LABEL_29;
  }
  if (FigCFEqual())
  {
    v2 = *(_QWORD *)(a1 + 8);
    cf[0] = 0;
    v27 = 0;
    v28 = 0;
    CMBaseObject = APSenderSessionGetCMBaseObject(v2);
    v4 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
    if (v4)
    {
      v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v6 = v4(CMBaseObject, CFSTR("TransportControlStream"), *MEMORY[0x1E0C9AE00], cf);
      if (v6)
      {
        v13 = v6;
      }
      else
      {
        v7 = cf[0];
        v8 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 56);
        if (v8)
        {
          v9 = v8(v7, 1819240307, 0, &v28);
          if (v9)
          {
            v13 = v9;
          }
          else
          {
            CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
            if (!CFDataWithBlockBufferNoCopy)
            {
              Mutable = CFDictionaryCreateMutable(v5, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (Mutable)
              {
                v12 = Mutable;
                CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA4570], v27);
                v13 = 0;
                v25 = v12;
              }
              else
              {
                APSLogErrorAt();
                v13 = -16721;
              }
              goto LABEL_20;
            }
            v13 = CFDataWithBlockBufferNoCopy;
          }
        }
        else
        {
          v13 = -12782;
        }
      }
    }
    else
    {
      v13 = -12782;
    }
    APSLogErrorAt();
LABEL_20:
    if (cf[0])
      CFRelease(cf[0]);
    if (v28)
      CFRelease(v28);
    if (v27)
      CFRelease(v27);
    if (v13)
      APSLogErrorAt();
    goto LABEL_28;
  }
  v14 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v15 = v14;
  if (v14)
  {
    CFDictionarySetValue(v14, CFSTR("type"), *(const void **)(a1 + 16));
    v16 = *(const void **)(a1 + 24);
    if (v16)
      CFDictionarySetValue(v15, CFSTR("params"), v16);
    v17 = APSenderSessionGetCMBaseObject(*(_QWORD *)(a1 + 8));
    v18 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v18)
    {
      v19 = v18(v17, CFSTR("TransportControlStream"), *MEMORY[0x1E0C9AE00], &v26);
      if (v19)
      {
        v13 = v19;
      }
      else
      {
        v13 = APTransportStreamSendPlistMessageCreatingPlistReply();
        if (!v13)
          goto LABEL_29;
      }
    }
    else
    {
      v13 = -12782;
    }
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    v13 = -16721;
  }
LABEL_29:
  v20 = *(const void **)(a1 + 32);
  if (v20)
  {
    cf[0] = *(CFTypeRef *)a1;
    cf[1] = v25;
    v21 = *(const void **)(a1 + 40);
    cf[2] = v20;
    cf[3] = v21;
    cf[4] = (CFTypeRef)v13;
    CFRetain(cf[0]);
    if (v25)
      CFRetain(v25);
    APSDispatchAsyncFHelper();
  }
  if (v15)
    CFRelease(v15);
  if (v26)
    CFRelease(v26);
  if (v25)
    CFRelease(v25);
  CFRelease(*(CFTypeRef *)a1);
  CFRelease(*(CFTypeRef *)(a1 + 16));
  v22 = *(const void **)(a1 + 24);
  if (v22)
    CFRelease(v22);
  v23 = *(const void **)(a1 + 8);
  if (v23)
    CFRelease(v23);
}

uint64_t APSenderSessionCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  uint64_t result;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  CMBaseObject = APSenderSessionGetCMBaseObject(a1);
  result = CMBaseObjectGetVTable();
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 48);
  if (v9)
    return v9(CMBaseObject, a2, a3, a4);
  return result;
}

uint64_t spendpoint_getSupportedFeatures(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v3 = APSGetFBOPropertyInt64();
    result = 0;
    *a2 = 8 * (v3 != 0);
  }
  else
  {
    APSLogErrorAt();
    return 4294950576;
  }
  return result;
}

uint64_t spendpoint_copyStreams(uint64_t a1, const __CFAllocator *a2, CFMutableArrayRef *a3)
{
  uint64_t DerivedStorage;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v7;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFArrayCreateMutable(a2, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v7 = Mutable;
    if (*(_QWORD *)(DerivedStorage + 88))
      CFSetApplyBlock();
    result = 0;
    *a3 = v7;
  }
  else
  {
    APSLogErrorAt();
    return 4294950575;
  }
  return result;
}

void spendpoint_copyShowInfoDictionary(uint64_t a1, __CFDictionary **a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  const void *DiscoveryID;
  uint64_t v13;
  void (*v14)(uint64_t, const __CFString *, uint64_t, void **);
  uint64_t v15;
  void (*v16)(uint64_t, const __CFString *, uint64_t, void **);
  uint64_t v17;
  void (*v18)(uint64_t, CFTypeRef *);
  uint64_t v19;
  void (*v20)(uint64_t, const __CFString *, uint64_t, void **);
  const __CFSet *v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  void (*v25)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v26;
  CFTypeRef v27;
  void *value;
  CFTypeRef cf[2];
  __int16 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  cf[0] = 0;
  v26 = 0;
  v27 = 0;
  v30 = 0;
  cf[1] = 0;
  v4 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v6 = Mutable;
    SNPrintF();
    CFDictionarySetCString();
    v7 = (const void *)*MEMORY[0x1E0C9AE50];
    v8 = (const void *)*MEMORY[0x1E0C9AE40];
    if (*(_QWORD *)(DerivedStorage + 136))
      v9 = (const void *)*MEMORY[0x1E0C9AE50];
    else
      v9 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(v6, CFSTR("Activated"), v9);
    CFDictionarySetValue(v6, CFSTR("Name"), *(const void **)(DerivedStorage + 248));
    CFDictionarySetValue(v6, CFSTR("DeviceID"), *(const void **)(DerivedStorage + 256));
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 240));
    v11 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v11)
      v11(CMBaseObject, CFSTR("TransportDevice"), v4, cf);
    if (cf[0])
    {
      DiscoveryID = (const void *)APTransportDeviceGetDiscoveryID();
      CFDictionarySetValue(v6, CFSTR("DiscoveryID"), DiscoveryID);
      if (cf[0])
      {
        CFRelease(cf[0]);
        cf[0] = 0;
      }
    }
    v13 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 240));
    v14 = *(void (**)(uint64_t, const __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
    if (v14)
      v14(v13, CFSTR("Model"), v4, &value);
    if (value)
    {
      CFDictionarySetValue(v6, CFSTR("Model"), value);
      if (value)
      {
        CFRelease(value);
        value = 0;
      }
    }
    v15 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 240));
    v16 = *(void (**)(uint64_t, const __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
    if (v16)
      v16(v15, CFSTR("SourceVersion"), v4, &value);
    if (value)
    {
      CFDictionarySetValue(v6, CFSTR("SourceVersion"), value);
      if (value)
      {
        CFRelease(value);
        value = 0;
      }
    }
    v17 = *(_QWORD *)(DerivedStorage + 240);
    v18 = *(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v18)
    {
      v18(v17, &v27);
      if (v27)
      {
        CFDictionarySetValue(v6, CFSTR("AirPlayFeatures"), v27);
        if (v27)
        {
          CFRelease(v27);
          v27 = 0;
        }
      }
    }
    v19 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 240));
    v20 = *(void (**)(uint64_t, const __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
    if (v20)
      v20(v19, CFSTR("StatusFlags"), v4, &value);
    if (value)
    {
      CFDictionarySetValue(v6, CFSTR("StatusFlags"), value);
      if (value)
      {
        CFRelease(value);
        value = 0;
      }
    }
    v21 = *(const __CFSet **)(DerivedStorage + 88);
    if (v21)
      CFSetApplyFunction(v21, (CFSetApplierFunction)spendpoint_copyShowInfoForStreamsSetEntry, v6);
    v22 = *(_QWORD *)(DerivedStorage + 136);
    v23 = v8;
    if (v22)
    {
      v24 = APSenderSessionGetCMBaseObject(v22);
      v25 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      v23 = v8;
      if (v25)
      {
        v25(v24, CFSTR("ShowInfo"), v4, &v26);
        v23 = v8;
        if (v26)
        {
          CFDictionarySetValue(v6, CFSTR("SenderSessionInfo"), v26);
          FigCFDictionaryGetBooleanIfPresent();
          v23 = v8;
        }
      }
    }
    CFDictionarySetValue(v6, CFSTR("Started"), v23);
    CFDictionarySetValue(v6, CFSTR("NAPS"), v7);
    CFDictionarySetInt64();
    CFDictionarySetValue(v6, CFSTR("IsLocal"), v8);
    *a2 = v6;
    if (v26)
      CFRelease(v26);
  }
  else
  {
    APSLogErrorAt();
  }
  if (value)
    CFRelease(value);
}

uint64_t spendpoint_copyAirPlayDiagnosticsDictionary(int a1, CFAllocatorRef allocator, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v10;
  CFStringRef v11;
  CFStringRef v12;
  uint64_t v13;
  CFTypeRef cf;
  char cStr[1024];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return APSSignalErrorAt();
  v6 = Mutable;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  bzero(cStr, 0x400uLL);
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 240));
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v9)
  {
    v10 = v9(CMBaseObject, CFSTR("TransportDevice"), *MEMORY[0x1E0C9AE00], &cf);
    if ((_DWORD)v10)
    {
      v13 = v10;
      v11 = 0;
      v12 = 0;
    }
    else
    {
      if (APTransportDeviceGetAddress())
      {
        if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
          LogPrintF();
        v11 = 0;
      }
      else
      {
        v11 = CFStringCreateWithCString(allocator, cStr, 0x8000100u);
      }
      if (APTransportDeviceGetAddress())
      {
        if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
          LogPrintF();
        v12 = 0;
      }
      else
      {
        v12 = CFStringCreateWithCString(allocator, cStr, 0x8000100u);
      }
      v13 = 0;
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 4294954514;
  }
  if (cf)
    CFRelease(cf);
  if ((_DWORD)v13)
  {
    APSLogErrorAt();
    CFRelease(v6);
    if (!v11)
      goto LABEL_29;
  }
  else
  {
    if (v11)
      CFDictionarySetValue(v6, CFSTR("InfraDNSName"), v11);
    if (v12)
      CFDictionarySetValue(v6, CFSTR("PeerToPeerDNSName"), v12);
    *a3 = v6;
    if (!v11)
      goto LABEL_29;
  }
  CFRelease(v11);
LABEL_29:
  if (v12)
    CFRelease(v12);
  return v13;
}

uint64_t spendpoint_isConnected()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 136);
  if (v0 && (v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) != 0)
    return v1(v0);
  else
    return 0;
}

void __spendpoint_copyStreams_block_invoke(uint64_t a1, const void *a2)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), a2);
}

void spendpoint_copyShowInfoForStreamsSetEntry(uint64_t a1, __CFDictionary *a2)
{
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, const __CFString *, _QWORD, void **);
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v8;
  __CFString **v9;
  void *value;
  CFTypeRef cf1;

  value = 0;
  cf1 = 0;
  CMBaseObject = FigEndpointStreamGetCMBaseObject();
  v4 = *(void (**)(uint64_t, const __CFString *, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (!v4)
    goto LABEL_15;
  v5 = *MEMORY[0x1E0C9AE00];
  v4(CMBaseObject, CFSTR("EndpointStreamShowInfo"), *MEMORY[0x1E0C9AE00], &value);
  if (!value)
    goto LABEL_15;
  v6 = FigEndpointStreamGetCMBaseObject();
  v7 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v7)
  {
    v7(v6, *MEMORY[0x1E0CA4820], v5, &cf1);
    v8 = cf1;
    if (cf1)
    {
      if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0CA4880]))
      {
        v9 = kAPEndpointShowInfoKey_StreamInfo_RealTimeAudio;
      }
      else if (CFEqual(v8, (CFTypeRef)*MEMORY[0x1E0CA4888]))
      {
        v9 = kAPEndpointShowInfoKey_StreamInfo_BufferedAudio;
      }
      else
      {
        if (!CFEqual(v8, (CFTypeRef)*MEMORY[0x1E0CA48A0]))
        {
LABEL_18:
          APSLogErrorAt();
          goto LABEL_13;
        }
        v9 = kAPEndpointShowInfoKey_StreamInfo_Screen;
      }
      if (*v9)
      {
        CFDictionarySetValue(a2, *v9, value);
        goto LABEL_13;
      }
      goto LABEL_18;
    }
  }
LABEL_13:
  if (value)
    CFRelease(value);
LABEL_15:
  if (cf1)
    CFRelease(cf1);
}

uint64_t spendpoint_Activate(const void *a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  const void *v12;
  const void *v13;
  CFTypeID v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Int64;
  char v18;
  CFTypeRef v19;
  BOOL v20;
  const void *v21;
  const void *v22;
  uint64_t CMBaseObject;
  uint64_t (*v24)(uint64_t, const __CFString *, _QWORD, void **);
  const __CFAllocator *v25;
  int v26;
  const CFDictionaryKeyCallBacks *v27;
  const CFDictionaryValueCallBacks *v28;
  __CFDictionary *Mutable;
  const void *v30;
  __CFDictionary *v31;
  int SharedContext;
  int v33;
  const void *v34;
  _QWORD *v35;
  const void *v36;
  const void *v37;
  NSObject *v38;
  int AirPlaySession;
  int *v40;
  int v41;
  int v42;
  CFTypeRef v43;
  void (*v44)(CFTypeRef, const void *, const void *, uint64_t (*)(), uint64_t (*)(uint64_t, int, uint64_t, int, _QWORD *));
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, const __CFString *, const void *);
  int v49;
  int v50;
  CFTypeRef v51;
  CFTypeRef v52;
  CFTypeRef v53;
  uint64_t v54;
  CFTypeRef v55;
  uint64_t v56;
  CFAllocatorRef v57;
  uint64_t v58;
  void (*v59)(uint64_t, const __CFString *, CFAllocatorRef, char *);
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t);
  __int16 v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  CFTypeRef cf;
  int v71[2];
  void *value;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  CFTypeRef v79[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = 16;
  if (a2)
    v11 = a2;
  *(_QWORD *)v71 = v11;
  value = 0;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0;
  v73 = 0u;
  v74 = 0u;
  APSEventRecorderRecordEventWithFlags();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 40));
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (a3)
  {
    v12 = CFDictionaryGetValue(a3, CFSTR("ParentContextID"));
    if (!v12)
      v12 = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA3770]);
    if (!*(_DWORD *)(DerivedStorage + 72))
    {
      v13 = *(const void **)(DerivedStorage + 80);
      *(_QWORD *)(DerivedStorage + 80) = v12;
      if (v12)
        CFRetain(v12);
      if (!v13)
        goto LABEL_15;
LABEL_14:
      CFRelease(v13);
LABEL_15:
      if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      goto LABEL_20;
    }
  }
  else if (!*(_DWORD *)(DerivedStorage + 72))
  {
    v13 = *(const void **)(DerivedStorage + 80);
    *(_QWORD *)(DerivedStorage + 80) = 0;
    if (!v13)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (!FigCFEqual())
  {
    if (gLogCategory_SPEndpoint <= 90 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    goto LABEL_72;
  }
LABEL_20:
  if (*(_BYTE *)(DerivedStorage + 48))
  {
    APSLogErrorAt();
    v19 = 0;
    v69 = 0;
    cf = 0;
    v31 = 0;
    Mutable = 0;
    v33 = -16723;
    goto LABEL_90;
  }
  if (a3)
  {
    v14 = CFGetTypeID(a3);
    if (v14 != CFDictionaryGetTypeID())
    {
      APSLogErrorAt();
      v19 = 0;
      v69 = 0;
      cf = 0;
      v31 = 0;
      Mutable = 0;
      v33 = -16720;
      goto LABEL_90;
    }
  }
  v15 = *(_QWORD *)(DerivedStorage + 64);
  if (v15 && v15 != *(_QWORD *)v71)
    goto LABEL_125;
  if (*(_QWORD *)(DerivedStorage + 136))
  {
    APSLogErrorAt();
    v19 = 0;
    v69 = 0;
    cf = 0;
    v31 = 0;
    Mutable = 0;
    v33 = -16727;
    goto LABEL_90;
  }
  v16 = *(_QWORD *)(DerivedStorage + 240);
  if (!v16)
  {
LABEL_125:
    APSLogErrorAt();
LABEL_72:
    v19 = 0;
    v69 = 0;
    cf = 0;
    v31 = 0;
    Mutable = 0;
    v33 = -16726;
    goto LABEL_90;
  }
  if (!a3)
  {
    v19 = 0;
    v69 = 0;
    cf = 0;
    v20 = 0;
    v18 = 0;
    goto LABEL_53;
  }
  Int64 = CFDictionaryGetInt64();
  if (IsAppleInternalBuild() && !Int64)
  {
    v18 = 0;
    if (APSSettingsGetIntWithDefault() != 1)
      goto LABEL_47;
LABEL_34:
    if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v18 = 1;
    goto LABEL_47;
  }
  if (Int64)
    goto LABEL_34;
  v18 = 0;
LABEL_47:
  CFDictionaryGetInt64();
  v20 = CFDictionaryGetInt64() != 0;
  v21 = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA3770]);
  if (v21)
    v21 = CFRetain(v21);
  *(_QWORD *)(DerivedStorage + 104) = v21;
  v19 = CFDictionaryGetValue(a3, CFSTR("SenderSession"));
  v22 = CFDictionaryGetValue(a3, CFSTR("SenderSessionFactory"));
  if (v22)
    cf = CFRetain(v22);
  else
    cf = 0;
  BYTE4(v69) = CFDictionaryGetInt64() != 0;
  LOBYTE(v69) = CFDictionaryGetInt64() != 0;
  v16 = *(_QWORD *)(DerivedStorage + 240);
LABEL_53:
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(v16);
  v24 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (!v24)
  {
    v33 = -12782;
LABEL_61:
    APSLogErrorAt();
    v31 = 0;
    Mutable = 0;
    goto LABEL_90;
  }
  v65 = v20;
  v66 = v18;
  v67 = a4;
  v68 = a5;
  v25 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v26 = v24(CMBaseObject, CFSTR("SupportedAudioFormats"), *MEMORY[0x1E0C9AE00], &value);
  if (v26)
  {
    v33 = v26;
    a5 = v68;
    goto LABEL_61;
  }
  v27 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v28 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable(v25, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("SupportedAudioFormats"), value);
  v30 = (const void *)*MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(Mutable, CFSTR("IsSidePlay"), (const void *)*MEMORY[0x1E0C9AE50]);
  v31 = CFDictionaryCreateMutable(v25, 0, v27, v28);
  CFDictionarySetValue(v31, CFSTR("PreferredNetworkClockType"), (const void *)*MEMORY[0x1E0CF74E8]);
  CFDictionarySetValue(v31, CFSTR("AllowP2PForNTP"), v30);
  CFDictionarySetValue(v31, CFSTR("AudioEngineOptions"), Mutable);
  CFDictionarySetValue(v31, CFSTR("IgnoreClientPIDForMediaRemote"), (const void *)*MEMORY[0x1E0C9AE40]);
  SharedContext = APEndpointCopyFromActivationOptionsOrCreateSharedContext(a3, v71[0], (uint64_t)v31, DerivedStorage + 128, (_QWORD *)(DerivedStorage + 120), (__CFDictionary **)(DerivedStorage + 112));
  if (SharedContext)
  {
    v33 = SharedContext;
    APSLogErrorAt();
    a4 = v67;
    a5 = v68;
    goto LABEL_90;
  }
  if (v19)
  {
    if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    CFRetain(v19);
    a4 = v67;
    a5 = v68;
    goto LABEL_87;
  }
  v34 = *(const void **)(DerivedStorage + 128);
  v35 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v79[0] = 0;
  v37 = (const void *)v35[30];
  v36 = (const void *)v35[31];
  v38 = v35[2];
  if (cf)
  {
    HIBYTE(v64) = v66;
    LOBYTE(v64) = 0;
    AirPlaySession = APSenderSessionFactoryCreateAirPlaySession((uint64_t)cf, (uint64_t)v25, (uint64_t)v36, (uint64_t)v37, 0, 10, 0, (uint64_t)v38, 0.0, v64, v65, (uint64_t)v34, 0, 0, 0, 0, (uint64_t)v79);
    a4 = v67;
    a5 = v68;
    v40 = &gLogCategory_APAudioHoseManagerBuffered;
    if (AirPlaySession)
    {
      v33 = AirPlaySession;
LABEL_114:
      APSLogErrorAt();
      if (v79[0])
      {
        v61 = APSenderSessionGetCMBaseObject(v79[0]);
        if (v61)
        {
          v62 = v61;
          v63 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v63)
            v63(v62);
        }
        CFRelease(v79[0]);
      }
      APSLogErrorAt();
      v19 = 0;
      goto LABEL_90;
    }
  }
  else
  {
    v41 = APSenderSessionAirPlayCreate((int)v25, v36, v37, 0, 10, 0, v38, 0, 0.0, v66, v65, v34, 0, 0, 0, 0, v79);
    a4 = v67;
    a5 = v68;
    v40 = &gLogCategory_APAudioHoseManagerBuffered;
    if (v41)
    {
      v33 = v41;
      goto LABEL_114;
    }
  }
  v42 = v40[76];
  if (v42 <= 50 && (v42 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v43 = v79[0];
  v44 = *(void (**)(CFTypeRef, const void *, const void *, uint64_t (*)(), uint64_t (*)(uint64_t, int, uint64_t, int, _QWORD *)))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
  if (v44)
    v44(v43, a1, a1, spendpoint_handleEventMessage, spendpoint_handleEventMessageCreatingReply);
  v45 = APSSettingsGetInt64();
  v46 = v40[76];
  if (v45)
  {
    if (v46 <= 50 && (v46 != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v47 = APSenderSessionGetCMBaseObject(v79[0]);
    v48 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
    if (!v48)
    {
      v33 = -12782;
      goto LABEL_114;
    }
    v49 = v48(v47, CFSTR("PublishEncryptionKeyDiagnosticMode"), v30);
    if (v49)
    {
      v33 = v49;
      goto LABEL_114;
    }
  }
  else if (v46 <= 50 && (v46 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v19 = v79[0];
LABEL_87:
  CMNotificationCenterGetDefaultLocalCenter();
  v50 = FigNotificationCenterAddWeakListener();
  if (v50)
  {
    v33 = v50;
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    v33 = FigNotificationCenterAddWeakListener();
    if (!v33)
    {
      *(_QWORD *)(DerivedStorage + 136) = CFRetain(v19);
      ++*(_QWORD *)(DerivedStorage + 56);
      *(_QWORD *)(DerivedStorage + 64) = *(_QWORD *)v71;
      *(_DWORD *)(DerivedStorage + 72) = 1;
      goto LABEL_90;
    }
  }
  APSLogErrorAt();
  APSLogErrorAt();
LABEL_90:
  if (a1)
    v51 = CFRetain(a1);
  else
    v51 = 0;
  *(_QWORD *)&v73 = v51;
  v52 = *(CFTypeRef *)(DerivedStorage + 248);
  if (v52)
    v52 = CFRetain(v52);
  *((_QWORD *)&v73 + 1) = v52;
  HIDWORD(v78) = v33;
  if (a3)
    v53 = CFRetain(a3);
  else
    v53 = 0;
  *((_QWORD *)&v76 + 1) = v53;
  v54 = *(_QWORD *)(DerivedStorage + 56);
  *(_QWORD *)&v74 = *(_QWORD *)v71;
  *(_QWORD *)&v75 = v54;
  v55 = *(CFTypeRef *)(DerivedStorage + 136);
  if (v55)
    v55 = CFRetain(v55);
  *((_QWORD *)&v74 + 1) = v55;
  v56 = *(_QWORD *)(DerivedStorage + 240);
  v57 = CFGetAllocator(a1);
  v58 = APEndpointDescriptionGetCMBaseObject(v56);
  v59 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, char *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v59)
    v59(v58, CFSTR("TransportDevice"), v57, (char *)&v75 + 8);
  *(_QWORD *)&v76 = APEndpointDescriptionCopyDebugString(*(_QWORD *)(DerivedStorage + 240));
  *(_QWORD *)&v77 = a4;
  *((_QWORD *)&v77 + 1) = a5;
  LOBYTE(v78) = BYTE4(v69);
  BYTE1(v78) = v69;
  APSDispatchAsyncFHelper();
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
  if (value)
    CFRelease(value);
  if (Mutable)
    CFRelease(Mutable);
  if (v31)
    CFRelease(v31);
  if (v19)
    CFRelease(v19);
  if (cf)
    CFRelease(cf);
  return 0;
}

uint64_t spendpoint_Deactivate(const void *a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  const void *Value;
  uint64_t v6;
  void (*v7)(uint64_t);
  const void *v8;
  const void *v9;
  CFTypeRef v10;
  const void *v11;
  CFTypeRef v12;
  const void *v13;
  const void *v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (a2)
    Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3958]);
  else
    Value = 0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 40));
  if (*(_BYTE *)(DerivedStorage + 48))
  {
    APSLogErrorAt();
    v6 = 4294950573;
  }
  else
  {
    v6 = *(_QWORD *)(DerivedStorage + 136);
    if (v6)
    {
      v7 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
      if (v7)
        v7(v6);
      v6 = 0;
    }
  }
  CFRetain(a1);
  v8 = *(const void **)(DerivedStorage + 248);
  if (v8)
    CFRetain(v8);
  if (Value)
    CFRetain(Value);
  v9 = *(const void **)(DerivedStorage + 136);
  if (v9)
    v10 = CFRetain(v9);
  else
    v10 = 0;
  v11 = *(const void **)(DerivedStorage + 88);
  if (v11)
    v12 = CFRetain(v11);
  else
    v12 = 0;
  v13 = *(const void **)(DerivedStorage + 176);
  if (v13)
    CFRetain(v13);
  v14 = *(const void **)(DerivedStorage + 184);
  if (v14)
    CFRetain(v14);
  spendpoint_resetActivationState((uint64_t)a1, DerivedStorage + 56, *(_QWORD *)(DerivedStorage + 256));
  spendpoint_stopListeningToSenderSessionAndStreamsNotifications((uint64_t)a1, (uint64_t)v10, (uint64_t)v12);
  APSDispatchAsyncFHelper();
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
  return v6;
}

uint64_t spendpoint_Dissociate(const void *a1)
{
  uint64_t DerivedStorage;
  int v3;
  const void *v4;
  CFTypeRef v5;
  CFTypeRef v6;
  uint64_t v7;
  CFAllocatorRef v8;
  uint64_t CMBaseObject;
  void (*v10)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t *);
  void (*v11)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v18 = 0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 40));
  v3 = *(unsigned __int8 *)(DerivedStorage + 48);
  *(_BYTE *)(DerivedStorage + 48) = 1;
  CFRetain(a1);
  v4 = *(const void **)(DerivedStorage + 248);
  if (v4)
    CFRetain(v4);
  v5 = *(CFTypeRef *)(DerivedStorage + 136);
  if (v5)
    v5 = CFRetain(v5);
  v16 = (uint64_t)v5;
  v6 = *(CFTypeRef *)(DerivedStorage + 88);
  if (v6)
    v6 = CFRetain(v6);
  v17 = (uint64_t)v6;
  v7 = *(_QWORD *)(DerivedStorage + 240);
  if (v7)
  {
    v8 = CFGetAllocator(a1);
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(v7);
    v10 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
    if (v10)
      v10(CMBaseObject, CFSTR("TransportDevice"), v8, &v18);
  }
  spendpoint_resetActivationState((uint64_t)a1, DerivedStorage + 56, *(_QWORD *)(DerivedStorage + 256));
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
  if (!v3)
  {
    spendpoint_stopListeningToSenderSessionAndStreamsNotifications((uint64_t)a1, v16, v17);
    if (v16)
    {
      v11 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 96);
      if (v11)
        v11(v16, 0, 0, 0, 0);
      v12 = APSenderSessionGetCMBaseObject(v16);
      if (v12)
      {
        v13 = v12;
        v14 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v14)
          v14(v13);
      }
      if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
    }
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 40));
    spendpoint_clearEndpointState();
    APSDispatchAsyncFHelper();
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
  }
  return 0;
}

uint64_t spendpoint_SetDelegate(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  _OWORD v5[2];
  uint64_t v6;

  if (a2)
  {
    v2 = *(_OWORD *)(a2 + 16);
    v5[0] = *(_OWORD *)a2;
    v5[1] = v2;
    v6 = *(_QWORD *)(a2 + 32);
    v3 = spendpoint_SetDelegateRouting(a1, (uint64_t)v5);
    if ((_DWORD)v3)
      goto LABEL_6;
  }
  else
  {
    v3 = spendpoint_SetDelegateRouting(a1, 0);
    if ((_DWORD)v3)
LABEL_6:
      APSLogErrorAt();
  }
  return v3;
}

uint64_t spendpoint_SetDelegateRouting(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 40));
  if (*(_BYTE *)(DerivedStorage + 48))
  {
    APSLogErrorAt();
    a2 = 4294950573;
  }
  else
  {
    if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v4 = *(const void **)(DerivedStorage + 232);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(DerivedStorage + 232) = 0;
    }
    v5 = (_OWORD *)(DerivedStorage + 192);
    if (a2)
    {
      v6 = *(_OWORD *)a2;
      v7 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(DerivedStorage + 224) = *(_QWORD *)(a2 + 32);
      *v5 = v6;
      *(_OWORD *)(DerivedStorage + 208) = v7;
      a2 = 0;
      *(_QWORD *)(DerivedStorage + 232) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    }
    else
    {
      *(_QWORD *)(DerivedStorage + 224) = 0;
      *v5 = 0u;
      *(_OWORD *)(DerivedStorage + 208) = 0u;
    }
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
  return a2;
}

void spendpoint_activateInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  _BOOL4 v3;
  int v4;
  __CFDictionary *v5;
  uint64_t v6;
  uint64_t CMBaseObject;
  void (*v8)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  int v11;
  NSObject *v12;
  uint64_t v14;
  void *v15;
  id v16;
  const __CFDictionary *v17;
  BOOL v18;
  __CFDictionary *MutableCopy;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const __CFDictionary *v26;
  int v27;
  CFTypeRef v28;
  CFTypeRef v29;
  uint64_t v30;
  const void *v31;
  uint64_t v32;
  CFTypeRef v33;
  const void *v34;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef v37;
  uint64_t v39;
  CFTypeRef v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const __CFAllocator *v44;
  const __CFAllocator *v45;
  const void *v46;
  const void *v47;
  const void *v48;
  const void *v49;
  const void *v50;
  uint64_t v51;
  CFMutableSetRef Mutable;
  NSObject *v53;
  CFTypeRef v54;
  CFTypeRef v55;
  CFTypeRef v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD block[6];
  CFTypeRef cf;
  CFTypeRef v61;
  CFTypeRef v62;
  char label[16];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _QWORD v70[4];

  v70[1] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v61 = 0;
  v62 = 0;
  cf = 0;
  if (*(_QWORD *)(a1 + 56))
  {
    if (CFDictionaryGetInt64())
      v3 = 1;
    else
      v3 = CFDictionaryGetInt64() != 0;
  }
  else
  {
    v3 = 0;
  }
  v4 = *(_DWORD *)(a1 + 84);
  if (v4 == -16727)
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 40));
    if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(DerivedStorage + 56) && *(_DWORD *)(DerivedStorage + 72) == 2)
    {
      LODWORD(v5) = 0;
      v6 = *(_QWORD *)(DerivedStorage + 64);
    }
    else
    {
      v6 = 0;
      LODWORD(v5) = -17604;
    }
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
    if (!(_DWORD)v5)
      goto LABEL_16;
    goto LABEL_77;
  }
  if (!v4)
  {
    if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    {
      v58 = *(_QWORD *)(a1 + 32);
      LogPrintF();
    }
    if (*(_QWORD *)(DerivedStorage + 24))
    {
      CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(a1 + 24));
      v8 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
      if (v8)
      {
        v8(CMBaseObject, CFSTR("EventRecorder"), *MEMORY[0x1E0C9AE00], &cf);
        if (cf)
        {
          MEMORY[0x1CAA3DC60](*(_QWORD *)(DerivedStorage + 24));
          if (cf)
            CFRelease(cf);
        }
      }
    }
    while (1)
    {
      v9 = *(_QWORD *)(a1 + 24);
      v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (!v10)
      {
        LODWORD(v5) = -12782;
        goto LABEL_39;
      }
      v11 = v10(v9);
      LODWORD(v5) = v11;
      if (v11 <= 200400)
        break;
      if (v11 != 200401)
      {
        if (v11 == 200503)
        {
          LODWORD(v5) = -17609;
          goto LABEL_39;
        }
        if (v11 != 200470)
          goto LABEL_39;
      }
      if (v3)
      {
        APSLogErrorAt();
        v12 = 0;
        v6 = 0;
        LODWORD(v5) = -17600;
        goto LABEL_78;
      }
    }
    if (v11 == -71164 || v11 == -71145)
    {
      LODWORD(v5) = -17608;
LABEL_39:
      APSLogErrorAt();
      v12 = 0;
      v6 = 0;
      goto LABEL_78;
    }
    if (v11)
      goto LABEL_39;
    v54 = *(CFTypeRef *)a1;
    SNPrintF();
    v12 = dispatch_queue_create(label, 0);
    if (v12)
    {
      if (!in_audio_mx_server_process())
      {
        v16 = (id)objc_msgSend(MEMORY[0x1E0D48560], "sharedAVSystemController", v54, "systemControllerQueue");
        if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
        {
          v56 = *(CFTypeRef *)a1;
          v57 = *(_QWORD *)(DerivedStorage + 256);
          LogPrintF();
        }
        v69 = *MEMORY[0x1E0D48228];
        v20 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v69, 1, v56, v57, v58);
        objc_msgSend(v16, "setAttribute:forKey:error:", v20, *MEMORY[0x1E0D48280], 0);
        objc_msgSend(v16, "addRemoteDeviceID:", *(_QWORD *)(DerivedStorage + 256));
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        v15 = 0;
LABEL_67:
        MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 40));
        *(_QWORD *)(DerivedStorage + 152) = v15;
        *(_QWORD *)(DerivedStorage + 160) = v16;
        *(_QWORD *)(DerivedStorage + 168) = v12;
        if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(DerivedStorage + 56) || *(_DWORD *)(DerivedStorage + 72) != 1)
        {
          v6 = 0;
          LODWORD(v5) = -17604;
LABEL_76:
          MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
          APSLogErrorAt();
LABEL_77:
          v12 = 0;
          goto LABEL_78;
        }
        v22 = *(_QWORD *)(a1 + 16);
        v23 = CMBaseObjectGetDerivedStorage();
        CMBaseObjectGetDerivedStorage();
        v24 = APSGetFBOPropertyInt64();
        if (*(_QWORD *)(v23 + 128))
        {
          v25 = v24;
          v26 = *(const __CFDictionary **)(v23 + 112);
          if (v26)
          {
            if ((v22 & 8) == 0 || !v25)
            {
              if (gLogCategory_SPEndpoint <= 90
                && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              v6 = 0;
              v27 = 0;
              LODWORD(v5) = -16720;
LABEL_136:
              v51 = *MEMORY[0x1E0C9AE00];
              Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
              *(_QWORD *)(DerivedStorage + 88) = Mutable;
              if (Mutable)
              {
                if (v27)
                {
                  *(_QWORD *)(DerivedStorage + 64) = v6;
                  *(_BYTE *)(DerivedStorage + 96) = *(_BYTE *)(a1 + 81);
                  APSEventRecorderRecordEvent();
                  spendpoint_postPerformanceReport();
                  if (!*(_BYTE *)(a1 + 80))
                  {
                    APSenderSessionCopyProperty(*(_QWORD *)(a1 + 24), (uint64_t)CFSTR("InitialRTCStats"), v51, (uint64_t)&v61);
                    *(_QWORD *)(DerivedStorage + 176) = FigCFDictionaryCreateMutableCopy();
                    CFDictionarySetInt64();
                    APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
                    CFDictionarySetInt64();
                    APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
                    CFDictionarySetInt64();
                    APSRTCReportingAgentCreate();
                  }
                  *(_DWORD *)(DerivedStorage + 72) = 2;
                  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
                  if (introspector_getCollectionOfActiveSPEndpoints_once != -1)
                    dispatch_once(&introspector_getCollectionOfActiveSPEndpoints_once, &__block_literal_global_34);
                  if (introspector_getCollectionOfActiveSPEndpoints_coll)
                  {
                    v53 = *(NSObject **)introspector_getCollectionOfActiveSPEndpoints_coll;
                    block[0] = MEMORY[0x1E0C809B0];
                    block[1] = 3221225472;
                    block[2] = __spendpoint_activateInternal_block_invoke;
                    block[3] = &__block_descriptor_48_e5_v8__0l;
                    block[4] = introspector_getCollectionOfActiveSPEndpoints_coll;
                    block[5] = a1;
                    dispatch_sync(v53, block);
                  }
                  goto LABEL_16;
                }
              }
              else
              {
                if (gLogCategory_SPEndpoint <= 90
                  && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
                {
                  LogPrintF();
                }
                LODWORD(v5) = -16721;
              }
              goto LABEL_76;
            }
            if (CFDictionaryGetValue(v26, (const void *)*MEMORY[0x1E0CA4888]))
            {
              LODWORD(v5) = 0;
              v27 = 1;
              v6 = 8;
              goto LABEL_136;
            }
          }
        }
        APSLogErrorAt();
        v6 = 0;
        v27 = 0;
        LODWORD(v5) = -17606;
        goto LABEL_136;
      }
      v14 = objc_msgSend(objc_alloc(MEMORY[0x1E0D48568]), "initWithPID:remoteDeviceID:", getpid(), *(_QWORD *)(DerivedStorage + 256), v54, "systemControllerQueue");
      if (v14)
      {
        v15 = (void *)v14;
        if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
        {
          v55 = *(CFTypeRef *)a1;
          LogPrintF();
        }
        v21 = *MEMORY[0x1E0D4A060];
        v70[0] = *MEMORY[0x1E0D49FE0];
        objc_msgSend(v15, "setAttributeForKey:andValue:", v21, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v70, 1, v55));
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        v16 = 0;
        goto LABEL_67;
      }
      APSLogErrorAt();
      v6 = 0;
      LODWORD(v5) = -6728;
    }
    else
    {
      APSLogErrorAt();
      v6 = 0;
      LODWORD(v5) = -16721;
    }
LABEL_78:
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    *(_OWORD *)label = 0u;
    v64 = 0u;
    if (gLogCategory_SPEndpoint <= 90 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 40));
    if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(DerivedStorage + 56) && *(_DWORD *)(DerivedStorage + 72) == 1)
    {
      *(_QWORD *)label = CFRetain(*(CFTypeRef *)a1);
      v28 = *(CFTypeRef *)(DerivedStorage + 248);
      if (v28)
        v28 = CFRetain(v28);
      *(_QWORD *)&label[8] = v28;
      v29 = CFRetain(CFSTR("FailedActivation"));
      DWORD2(v66) = 0;
      v68 = 0uLL;
      v30 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)&v64 = v29;
      v32 = *(_QWORD *)(a1 + 16);
      v31 = *(const void **)(a1 + 24);
      *((_QWORD *)&v65 + 1) = v30;
      *(_QWORD *)&v66 = v32;
      if (v31)
        v33 = CFRetain(v31);
      else
        v33 = 0;
      *((_QWORD *)&v64 + 1) = v33;
      v34 = *(const void **)(DerivedStorage + 88);
      if (v34)
        v35 = CFRetain(v34);
      else
        v35 = 0;
      *(_QWORD *)&v65 = v35;
      v36 = *(CFTypeRef *)(DerivedStorage + 176);
      if (v36)
        v36 = CFRetain(v36);
      *(_QWORD *)&v67 = v36;
      v37 = *(CFTypeRef *)(DerivedStorage + 184);
      if (v37)
        v37 = CFRetain(v37);
      *((_QWORD *)&v67 + 1) = v37;
      spendpoint_resetActivationState(*(_QWORD *)a1, DerivedStorage + 56, *(_QWORD *)(DerivedStorage + 256));
      spendpoint_stopListeningToSenderSessionAndStreamsNotifications(*(_QWORD *)a1, (uint64_t)v33, (uint64_t)v35);
      APSDispatchAsyncFHelper();
    }
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
    if ((_DWORD)v5 != -17600 && v3)
      LODWORD(v5) = -17601;
    goto LABEL_102;
  }
  APSLogErrorAt();
  v6 = 0;
  LODWORD(v5) = *(_DWORD *)(a1 + 84);
  if ((_DWORD)v5)
    goto LABEL_77;
LABEL_16:
  if (gLogCategory_SPEndpoint <= 50)
  {
    if (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())
      LogPrintF();
    if (gLogCategory_SPEndpoint <= 30 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
  }
  v17 = *(const __CFDictionary **)(DerivedStorage + 176);
  if (v17)
    v18 = *(_QWORD *)(DerivedStorage + 184) == 0;
  else
    v18 = 1;
  if (v18)
    goto LABEL_62;
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v17);
  v5 = MutableCopy;
  if (MutableCopy)
  {
    CFDictionarySetValue(MutableCopy, CFSTR("isSidePlay"), (const void *)*MEMORY[0x1E0C9AE50]);
    APSRTCReportingAgentSendEvent();
    CFRelease(v5);
LABEL_62:
    v12 = 0;
    LODWORD(v5) = 0;
    goto LABEL_102;
  }
  APSLogErrorAt();
  v12 = 0;
LABEL_102:
  v39 = *(_QWORD *)(a1 + 64);
  if (v39)
  {
    v40 = *(CFTypeRef *)a1;
    v41 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)label = *(_QWORD *)a1;
    *(_QWORD *)&label[8] = v41;
    if ((_DWORD)v5)
      v42 = 0;
    else
      v42 = v6;
    *(_QWORD *)&v64 = v42;
    *((_QWORD *)&v64 + 1) = v5;
    v43 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)&v65 = v39;
    *((_QWORD *)&v65 + 1) = v43;
    CFRetain(v40);
    APSDispatchAsyncFHelper();
  }
  if (!(_DWORD)v5)
  {
    v44 = CFGetAllocator(*(CFTypeRef *)a1);
    APEndpointCreateEndpointActivationNotificationPayload(v44, v6, *(_QWORD *)(a1 + 32), (CFMutableDictionaryRef *)&v62);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (v62)
    {
      CFRelease(v62);
      v62 = 0;
    }
    v45 = CFGetAllocator(*(CFTypeRef *)a1);
    APEndpointCreateStreamsChangedNotificationPayload(v45, v6, *(_QWORD *)(a1 + 32), 1, (CFMutableDictionaryRef *)&v62);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (v62)
    {
      CFRelease(v62);
      v62 = 0;
    }
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v46 = *(const void **)(a1 + 8);
  if (v46)
    CFRelease(v46);
  v47 = *(const void **)(a1 + 56);
  if (v47)
    CFRelease(v47);
  v48 = *(const void **)(a1 + 24);
  if (v48)
    CFRelease(v48);
  v49 = *(const void **)(a1 + 40);
  if (v49)
    CFRelease(v49);
  v50 = *(const void **)(a1 + 48);
  if (v50)
    CFRelease(v50);
  if (v62)
    CFRelease(v62);
  if (v61)
    CFRelease(v61);
  if (v12)
    dispatch_release(v12);
}

uint64_t spendpoint_handleEventMessage()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 40)
  {
    if (gLogCategory_SPEndpoint != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

uint64_t spendpoint_handleEventMessageCreatingReply(uint64_t a1, int a2, uint64_t a3, int a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  int v9;
  uint64_t v10;
  BOOL v11;
  const __CFAllocator *v12;
  uint64_t CFDataWithBlockBufferNoCopy;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  CFTypeID v16;
  const void *Value;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 40));
  v9 = *(unsigned __int8 *)(DerivedStorage + 48);
  v10 = *(_QWORD *)(DerivedStorage + 136);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
  if (v10)
    v11 = v9 == 0;
  else
    v11 = 0;
  if (!v11)
  {
    if (v9)
      v23 = -16723;
    else
      v23 = 0;
    if (v10)
      v19 = v23;
    else
      v19 = 4294950570;
    goto LABEL_48;
  }
  if (a2 == 1668116068)
  {
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
    if ((_DWORD)CFDataWithBlockBufferNoCopy)
    {
      v19 = CFDataWithBlockBufferNoCopy;
LABEL_48:
      APSLogErrorAt();
      v15 = 0;
      goto LABEL_33;
    }
    v14 = (const __CFDictionary *)CFPropertyListCreateWithData(v12, 0, 0, 0, 0);
    v15 = v14;
    if (!v14 || (v16 = CFGetTypeID(v14), v16 != CFDictionaryGetTypeID()))
    {
      APSLogErrorAt();
      v19 = 4294950576;
      goto LABEL_33;
    }
    CMBaseObjectGetDerivedStorage();
    Value = CFDictionaryGetValue(v15, CFSTR("type"));
    if (!Value)
    {
LABEL_32:
      v19 = 0;
      *a5 = 0;
      goto LABEL_33;
    }
    v18 = Value;
    if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    if (CFEqual(v18, CFSTR("updateInfo")))
    {
      if (gLogCategory_SPEndpoint > 50 || gLogCategory_SPEndpoint == -1 && !_LogCategory_Initialize())
        goto LABEL_32;
      goto LABEL_23;
    }
    if (CFEqual(v18, CFSTR("interruptionBegan")))
    {
      v20 = spendpoint_processInterruptionCommand(a4, v15, 1);
      if (!(_DWORD)v20)
        goto LABEL_32;
      v19 = v20;
    }
    else
    {
      if (!CFEqual(v18, CFSTR("interruptionEnded")))
      {
        if (gLogCategory_SPEndpoint > 60 || gLogCategory_SPEndpoint == -1 && !_LogCategory_Initialize())
          goto LABEL_32;
LABEL_23:
        LogPrintF();
        goto LABEL_32;
      }
      v21 = spendpoint_processInterruptionCommand(a4, v15, 0);
      if (!(_DWORD)v21)
        goto LABEL_32;
      v19 = v21;
    }
    APSLogErrorAt();
    APSLogErrorAt();
    goto LABEL_33;
  }
  if (gLogCategory_SPEndpoint <= 60 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v15 = 0;
  v19 = 4294950678;
LABEL_33:
  if (v15)
    CFRelease(v15);
  return v19;
}

uint64_t spendpoint_processInterruptionCommand(int a1, CFDictionaryRef theDict, int a3)
{
  const __CFString *v3;
  uint64_t DerivedStorage;
  const void *v5;
  void (*v6)(const void *, const __CFString *, _QWORD);
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (a3)
    v3 = CFSTR("InterruptionBegan");
  else
    v3 = CFSTR("InterruptionEnded");
  if (CFDictionaryGetValue(theDict, CFSTR("streamID")))
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v8 = 0;
    v9 = &v8;
    v10 = 0x2020000000;
    v11 = 0;
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 40));
    CFSetApplyBlock();
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
    v5 = (const void *)v9[3];
    _Block_object_dispose(&v8, 8);
    if (v5)
    {
      if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      v6 = *(void (**)(const void *, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 40);
      if (v6)
        v6(v5, v3, 0);
      CFRelease(v5);
      return 0;
    }
    else
    {
      if (gLogCategory_SPEndpoint <= 60 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      return 4294960569;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
}

void sub_1C95685B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __spendpoint_copyStreamForID_block_invoke(uint64_t a1, const void *a2)
{
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    cf = 0;
    CMBaseObject = FigEndpointStreamGetCMBaseObject();
    v5 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v5)
      v5(CMBaseObject, CFSTR("StreamID"), *MEMORY[0x1E0C9AE00], &cf);
    if (FigCFEqual())
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFRetain(a2);
    if (cf)
      CFRelease(cf);
  }
}

uint64_t spendpoint_handleSenderSessionStarted()
{
  uint64_t result;
  uint64_t v1;

  result = CMBaseObjectGetDerivedStorage();
  v1 = result;
  if (gLogCategory_SPEndpoint <= 30)
  {
    if (gLogCategory_SPEndpoint != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      result = LogPrintF();
  }
  if (!*(_BYTE *)(v1 + 48))
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(v1 + 40));
    CMBaseObjectGetDerivedStorage();
    JUMPOUT(0x1CAA400E4);
  }
  return result;
}

uint64_t spendpoint_handleSenderSessionFailed(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 90 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  CFRetain(a2);
  if (a5)
    CFRetain(a5);
  return APSDispatchAsyncFHelper();
}

void spendpoint_updateStatus(const void *a1, int a2, int a3)
{
  uint64_t DerivedStorage;
  BOOL v7;
  _QWORD *v8;
  const __CFAllocator *v9;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v11;
  const __CFAllocator *v12;
  CFMutableDictionaryRef v13;
  __CFDictionary *v14;
  const void **v15;
  BOOL v16;
  const void *v17;
  const void **v18;
  uint64_t v19;
  uint64_t v20;
  CFAllocatorRef v21;
  uint64_t CMBaseObject;
  void (*v23)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (*(_BYTE *)(DerivedStorage + 48))
    v7 = 1;
  else
    v7 = a2 == 0;
  if (!v7)
  {
    v8 = (_QWORD *)DerivedStorage;
    *(_DWORD *)(DerivedStorage + 272) = a2;
    v9 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      APSLogErrorAt();
      return;
    }
    v11 = Mutable;
    v12 = CFGetAllocator(a1);
    v13 = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v13)
    {
      APSLogErrorAt();
LABEL_49:
      CFRelease(v11);
      return;
    }
    v14 = v13;
    CFDictionarySetInt64();
    if (a2 == 200470 || a2 == 200401)
    {
      if (gLogCategory_SPEndpoint > 30 || gLogCategory_SPEndpoint == -1 && !_LogCategory_Initialize())
        goto LABEL_35;
    }
    else
    {
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      v15 = (const void **)MEMORY[0x1E0CA3A98];
      v16 = a3 == 0;
      if (!a3)
        v15 = (const void **)MEMORY[0x1E0CA3AA0];
      v17 = (const void *)*MEMORY[0x1E0CA39C0];
      if (v16)
        v18 = (const void **)MEMORY[0x1E0CA39A8];
      else
        v18 = (const void **)MEMORY[0x1E0CA39A0];
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CA3AC0], *v15);
      CFDictionarySetValue(v14, v17, *v18);
      if (v8[26])
      {
        if (v8[29] && (v19 = FigCFWeakReferenceHolderCopyReferencedObject(), v8[29]) && !v19)
        {
          if (gLogCategory_SPEndpoint > 90)
            goto LABEL_35;
          if (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())
            LogPrintF();
        }
        else
        {
          CFRetain(a1);
          CFRetain(v14);
          if (gLogCategory_SPEndpoint <= 50
            && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          APSDispatchAsyncFHelper();
        }
      }
      if (gLogCategory_SPEndpoint > 30 || gLogCategory_SPEndpoint == -1 && !_LogCategory_Initialize())
        goto LABEL_35;
    }
    LogPrintF();
LABEL_35:
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    if (a2 == -16613)
    {
      v20 = v8[30];
      v21 = CFGetAllocator(a1);
      CMBaseObject = APEndpointDescriptionGetCMBaseObject(v20);
      v23 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
      if (v23)
      {
        v23(CMBaseObject, CFSTR("TransportDevice"), v21, &cf);
        if (cf)
        {
          if (gLogCategory_SPEndpoint <= 50
            && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          APTransportDeviceReconfirm();
          if (cf)
            CFRelease(cf);
        }
      }
    }
    CFRelease(v14);
    goto LABEL_49;
  }
}

void spendpoint_callDelegateHandleFailed(uint64_t a1)
{
  const void *v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 24))(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32));
  CFRelease(*(CFTypeRef *)a1);
  CFRelease(*(CFTypeRef *)(a1 + 16));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

void spendpoint_deferredHandleSenderSessionFailed(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFDictionary *v3;
  int Int64;
  int v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(const __CFDictionary **)(a1 + 8);
  Int64 = CFDictionaryGetInt64();
  CFDictionaryGetValue(v3, CFSTR("SessionState"));
  v5 = FigCFEqual();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 40));
  if (*(_DWORD *)(DerivedStorage + 72) == 2)
    spendpoint_updateStatus(*(const void **)a1, Int64, v5 == 0);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
  CFRelease(*(CFTypeRef *)a1);
  v6 = *(const void **)(a1 + 8);
  if (v6)
    CFRelease(v6);
}

uint64_t spendpoint_postPerformanceReport()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 40)
  {
    if (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())
      LogPrintF();
    if (gLogCategory_SPEndpoint <= 40)
    {
      if (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())
        LogPrintF();
      if (gLogCategory_SPEndpoint <= 40)
      {
        if (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())
          LogPrintF();
        if (gLogCategory_SPEndpoint <= 40)
        {
          if (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())
            LogPrintF();
          if (gLogCategory_SPEndpoint <= 40
            && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
      }
    }
  }
  spendpoint_logEventInterval(*(_QWORD *)(DerivedStorage + 24), 268369920, 268369921, (uint64_t)"Total AirPlay Contribution (Endpoint Activate Start To Endpoint Activate Complete)");
  spendpoint_logEvent(*(_QWORD *)(DerivedStorage + 24), 268369920, (uint64_t)"EndpointActivate");
  spendpoint_logEvent(*(_QWORD *)(DerivedStorage + 24), 150994945, (uint64_t)"ResolveDNSTime");
  if (gLogCategory_SPEndpoint <= 40)
  {
    if (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())
      LogPrintF();
    if (gLogCategory_SPEndpoint <= 40)
    {
      if (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())
        LogPrintF();
      if (gLogCategory_SPEndpoint <= 40 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
    }
  }
  spendpoint_logEvent(*(_QWORD *)(DerivedStorage + 32), 268431360, (uint64_t)"PresenceBrowsing_Start");
  spendpoint_logEvent(*(_QWORD *)(DerivedStorage + 32), 268431361, (uint64_t)"DetailedNonP2PBrowsing_Start");
  spendpoint_logEvent(*(_QWORD *)(DerivedStorage + 32), 268431362, (uint64_t)"DetailedBrowsing_Start");
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  spendpoint_logTransportDiscoveryDurationIfEventPresent();
  if (gLogCategory_SPEndpoint <= 40)
  {
    if (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())
      LogPrintF();
    if (gLogCategory_SPEndpoint <= 40)
    {
      if (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize())
        LogPrintF();
      if (gLogCategory_SPEndpoint <= 40 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
    }
  }
  spendpoint_logEvent(*(_QWORD *)(DerivedStorage + 24), 150994944, (uint64_t)"QuerySRVTime");
  spendpoint_logEvent(*(_QWORD *)(DerivedStorage + 24), 150994946, (uint64_t)"ControlStreamConnectingTime");
  spendpoint_logEvent(*(_QWORD *)(DerivedStorage + 24), 150994948, (uint64_t)"ControlStreamConnectedTime");
  spendpoint_logEvent(*(_QWORD *)(DerivedStorage + 24), 250609664, (uint64_t)"EndpointConnectionStartTime");
  spendpoint_logEvent(*(_QWORD *)(DerivedStorage + 24), 250609666, (uint64_t)"EndpointGetInfoCompleteTime");
  spendpoint_logEventInterval(*(_QWORD *)(DerivedStorage + 24), 250609665, 250609666, (uint64_t)"INFOTimeMs");
  CMBaseObjectGetDerivedStorage();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  if (gLogCategory_SPEndpoint <= 40 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  spendpoint_logEventInterval(*(_QWORD *)(DerivedStorage + 24), 150994946, 150994948, (uint64_t)"ConnectTimeMs");
  spendpoint_logEventInterval(*(_QWORD *)(DerivedStorage + 24), 250609677, 250609678, (uint64_t)"EndpointAUTHTimeMs");
  result = spendpoint_logEventInterval(*(_QWORD *)(DerivedStorage + 24), 250609675, 250609676, (uint64_t)"EndpointRECORDTimeMs");
  if (gLogCategory_SPEndpoint <= 40)
  {
    if (gLogCategory_SPEndpoint != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

void __spendpoint_activateInternal_block_invoke(uint64_t a1)
{
  CFSetAddValue(*(CFMutableSetRef *)(*(_QWORD *)(a1 + 32) + 8), **(const void ***)(a1 + 40));
}

uint64_t spendpoint_stopListeningToSenderSessionAndStreamsNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    result = FigNotificationCenterRemoveWeakListener();
  }
  if (a3)
    return CFSetApplyBlock();
  return result;
}

void spendpoint_deactivateInternal(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  CFTypeRef v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  dispatch_time_t v8;
  unsigned int v9;
  uint64_t v10;
  const __CFAllocator *v11;
  const __CFAllocator *v12;
  __CFDictionary *MutableCopy;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  CFDictionaryRef theDict;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD block[6];
  __int128 v26;
  __int128 v27;
  __int128 v28;

  CMBaseObjectGetDerivedStorage();
  v2 = dispatch_semaphore_create(0);
  v27 = 0u;
  v28 = 0u;
  v26 = 0u;
  if (*(_DWORD *)(a1 + 56))
  {
    APSLogErrorAt();
    v9 = *(_DWORD *)(a1 + 56);
  }
  else
  {
    if (*(_QWORD *)(a1 + 24))
    {
      if (introspector_getCollectionOfActiveSPEndpoints_once != -1)
        dispatch_once(&introspector_getCollectionOfActiveSPEndpoints_once, &__block_literal_global_34);
      if (introspector_getCollectionOfActiveSPEndpoints_coll)
      {
        v3 = *(NSObject **)introspector_getCollectionOfActiveSPEndpoints_coll;
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __spendpoint_deactivateInternal_block_invoke;
        block[3] = &__block_descriptor_48_e5_v8__0l;
        block[4] = introspector_getCollectionOfActiveSPEndpoints_coll;
        block[5] = a1;
        dispatch_sync(v3, block);
      }
      if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      CMBaseObjectGetDerivedStorage();
      APSEventRecorderReset();
      *(_QWORD *)&v26 = *(_QWORD *)a1;
      v4 = *(CFTypeRef *)(a1 + 24);
      if (v4)
        v4 = CFRetain(v4);
      *((_QWORD *)&v26 + 1) = v4;
      v5 = *(CFTypeRef *)(a1 + 32);
      if (v5)
        v5 = CFRetain(v5);
      *(_QWORD *)&v27 = v5;
      v6 = *(CFTypeRef *)(a1 + 64);
      if (v6)
        v6 = CFRetain(v6);
      *((_QWORD *)&v27 + 1) = v6;
      v7 = *(CFTypeRef *)(a1 + 72);
      if (v7)
        v7 = CFRetain(v7);
      *(_QWORD *)&v28 = v7;
      *((_QWORD *)&v28 + 1) = v2;
      dispatch_retain(v2);
      APSDispatchAsyncFHelper();
      v8 = dispatch_time(0, 4000000000);
      if (dispatch_semaphore_wait(v2, v8)
        && gLogCategory_SPEndpoint <= 40
        && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      APSLogErrorAt();
    }
    v9 = 0;
  }
  v10 = *(_QWORD *)(a1 + 80);
  if (v10)
  {
    theDict = *(CFDictionaryRef *)a1;
    v21 = *(_OWORD *)(a1 + 40);
    v23 = v10;
    v22 = v9;
    v24 = *(_QWORD *)(a1 + 88);
    CFRetain(theDict);
    APSDispatchAsyncFHelper();
  }
  if (!v9 && !FigCFEqual())
  {
    theDict = 0;
    v11 = CFGetAllocator(*(CFTypeRef *)a1);
    APEndpointCreateEndpointActivationNotificationPayload(v11, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), &theDict);
    v12 = CFGetAllocator(*(CFTypeRef *)a1);
    MutableCopy = CFDictionaryCreateMutableCopy(v12, 0, theDict);
    CFDictionarySetValue(MutableCopy, CFSTR("WasAutoconnected"), (const void *)*MEMORY[0x1E0C9AE40]);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (theDict)
      CFRelease(theDict);
    if (MutableCopy)
      CFRelease(MutableCopy);
  }
  CFRelease(*(CFTypeRef *)a1);
  v14 = *(const void **)(a1 + 8);
  if (v14)
    CFRelease(v14);
  v15 = *(const void **)(a1 + 24);
  if (v15)
    CFRelease(v15);
  v16 = *(const void **)(a1 + 32);
  if (v16)
    CFRelease(v16);
  v17 = *(const void **)(a1 + 16);
  if (v17)
    CFRelease(v17);
  v18 = *(const void **)(a1 + 64);
  if (v18)
    CFRelease(v18);
  v19 = *(const void **)(a1 + 72);
  if (v19)
    CFRelease(v19);
  dispatch_release(v2);
}

uint64_t spendpoint_logEventInterval(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (!a4)
    return APSLogErrorAt();
  result = APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  if (gLogCategory_SPEndpoint <= 40)
  {
    if (gLogCategory_SPEndpoint != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

void spendpoint_logEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *StringWithEventRecorderTime;

  if (a3)
  {
    APSEventRecorderGetEventTimeRecursive();
    StringWithEventRecorderTime = (const void *)APSEventRecorderCreateStringWithEventRecorderTime();
    if (gLogCategory_SPEndpoint <= 40 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    if (StringWithEventRecorderTime)
      CFRelease(StringWithEventRecorderTime);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t spendpoint_logTransportDiscoveryDurationIfEventPresent()
{
  uint64_t result;
  double v1;

  result = APSEventRecorderGetEventTimeRecursive();
  if (v1 != 0.0)
  {
    APBrowserGetStartEventForBrowserDeviceEvent();
    result = APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
    if (gLogCategory_SPEndpoint <= 40)
    {
      if (gLogCategory_SPEndpoint != -1)
        return LogPrintF();
      result = _LogCategory_Initialize();
      if ((_DWORD)result)
        return LogPrintF();
    }
  }
  return result;
}

uint64_t __spendpoint_stopListeningToSenderSessionAndStreamsNotifications_block_invoke()
{
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterRemoveWeakListener();
}

uint64_t spendpoint_handleStreamFailed(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int Int64;
  uint64_t DerivedStorage;

  Int64 = -71850;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    Int64 = CFDictionaryGetInt64();
    FigCFDictionaryGetBooleanIfPresent();
  }
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 40));
  spendpoint_updateStatus(a2, Int64, 1);
  return MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
}

void __spendpoint_deactivateInternal_block_invoke(uint64_t a1)
{
  CFSetRemoveValue(*(CFMutableSetRef *)(*(_QWORD *)(a1 + 32) + 8), **(const void ***)(a1 + 40));
}

void spendpoint_suspendDissociateAndReleaseStreamsAndStopSenderSession(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t CMBaseObject;
  uint64_t v7;
  void (*v8)(uint64_t);
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (*(_QWORD *)(a1 + 16))
    CFSetApplyBlock();
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 96);
    if (v3)
      v3(v2, 0, 0, 0, 0);
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
    if (v5)
      v5(v4);
    CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(a1 + 8));
    if (CMBaseObject)
    {
      v7 = CMBaseObject;
      v8 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v8)
        v8(v7);
    }
    v9 = *(const void **)(a1 + 8);
    if (v9)
      CFRelease(v9);
  }
  v10 = *(const void **)(a1 + 16);
  if (v10)
    CFRelease(v10);
  *(_QWORD *)a1 = 0;
  v11 = *(const void **)(a1 + 24);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(a1 + 32);
  if (v12)
    CFRelease(v12);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

void __spendpoint_suspendDissociateAndReleaseStreamsAndStopSenderSession_block_invoke(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t, _QWORD, _QWORD, _QWORD);
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  v4 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v4)
    v4(a2, 0, 0, 0);
  v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v5)
    v5(a2);
  v6 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v6 + 32))
  {
    v7 = *(_QWORD *)(v6 + 24);
    cf = 0;
    if (v7)
    {
      CMBaseObject = FigEndpointStreamGetCMBaseObject();
      v9 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
      if (v9)
      {
        v9(CMBaseObject, CFSTR("RTCStats"), *MEMORY[0x1E0C9AE00], &cf);
        if (cf)
        {
          FigCFArrayApplyFunction();
          if (cf)
            CFRelease(cf);
        }
      }
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

void spendpoint_reportStreamMetricsArrayIterator(const __CFDictionary *a1, CFDictionaryRef *a2)
{
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v4;

  if (a2 && a1 && *a2)
  {
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *a2);
    if (MutableCopy)
    {
      v4 = MutableCopy;
      if (CFDictionaryMergeDictionary() || !CFDictionaryGetValue(a1, CFSTR("sessionType")))
      {
        APSLogErrorAt();
      }
      else
      {
        if (FigCFEqual())
          APSRTCReportingAgentSendEvent();
        if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
          LogPrintF();
      }
      CFRelease(v4);
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

void spendpoint_dissociateInternal(uint64_t a1)
{
  _QWORD *DerivedStorage;
  NSObject *v3;
  const __CFAllocator *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  _QWORD block[6];
  CFMutableDictionaryRef v10;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v10 = 0;
  if (introspector_getCollectionOfActiveSPEndpoints_once != -1)
    dispatch_once(&introspector_getCollectionOfActiveSPEndpoints_once, &__block_literal_global_34);
  if (introspector_getCollectionOfActiveSPEndpoints_coll)
  {
    v3 = *(NSObject **)introspector_getCollectionOfActiveSPEndpoints_coll;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __spendpoint_dissociateInternal_block_invoke;
    block[3] = &__block_descriptor_48_e5_v8__0l;
    block[4] = introspector_getCollectionOfActiveSPEndpoints_coll;
    block[5] = a1;
    dispatch_sync(v3, block);
  }
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (*(_QWORD *)(a1 + 24))
    CFSetApplyBlock();
  CMBaseObjectGetDerivedStorage();
  APSEventRecorderReset();
  MEMORY[0x1CAA400CC](DerivedStorage[5]);
  spendpoint_updateStatus(*(const void **)a1, -16723, 1);
  MEMORY[0x1CAA400E4](DerivedStorage[5]);
  if (*DerivedStorage)
  {
    v4 = CFGetAllocator(*(CFTypeRef *)a1);
    APEndpointCreateEndpointActivationNotificationPayload(v4, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), &v10);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (v10)
      CFRelease(v10);
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v5 = *(const void **)(a1 + 8);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 48);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 24);
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(a1 + 16);
  if (v8)
    CFRelease(v8);
}

void __spendpoint_dissociateInternal_block_invoke(uint64_t a1)
{
  CFSetRemoveValue(*(CFMutableSetRef *)(*(_QWORD *)(a1 + 32) + 8), **(const void ***)(a1 + 40));
}

uint64_t __spendpoint_dissociateInternal_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (*v4)(uint64_t);

  result = CMBaseObjectGetVTable();
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 32);
  if (v4)
    return v4(a2);
  return result;
}

uint64_t spEndpoint_DuckAudio()
{
  const void *FigEndpoint;
  uint64_t DerivedStorage;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v3;
  const void *TypedValue;
  const __CFString *v5;
  unsigned int v7;

  FigEndpoint = (const void *)FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = Mutable;
    CFStringGetTypeID();
    TypedValue = (const void *)CFDictionaryGetTypedValue();
    if (CFEqual(TypedValue, (CFTypeRef)*MEMORY[0x1E0CA3970]))
    {
      v5 = CFSTR("duckAudio");
    }
    else
    {
      if (!CFEqual(TypedValue, (CFTypeRef)*MEMORY[0x1E0CA3978]))
      {
        v7 = -16720;
        goto LABEL_22;
      }
      v5 = CFSTR("unduckAudio");
    }
    if ((!FigCFDictionaryGetDoubleIfPresent() || (v7 = CFDictionarySetDouble()) == 0)
      && (!FigCFDictionaryGetDoubleIfPresent() || (v7 = CFDictionarySetDouble()) == 0))
    {
      MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 40));
      v7 = spEndpoint_sendCommandInternal(FigEndpoint, v5, v3);
      if (v7)
      {
        if (gLogCategory_SPEndpoint <= 90 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
LABEL_20:
          LogPrintF();
      }
      else if (gLogCategory_SPEndpoint <= 50
             && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_20;
      }
      MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
      if (!v7)
        goto LABEL_27;
    }
LABEL_22:
    APSLogErrorAt();
LABEL_27:
    CFRelease(v3);
    return v7;
  }
  APSLogErrorAt();
  return 4294950575;
}

uint64_t spEndpoint_SendCommand(uint64_t a1, const void *a2, const void *a3)
{
  const void *FigEndpoint;
  uint64_t DerivedStorage;
  uint64_t v7;

  FigEndpoint = (const void *)FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 40));
  v7 = spEndpoint_sendCommandInternal(FigEndpoint, a2, a3);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
  return v7;
}

uint64_t spEndpoint_AcquireAndCopyResource(uint64_t a1, uint64_t a2, const __CFDictionary *a3, _QWORD *a4)
{
  const void *FigEndpoint;
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  const void *Value;
  const void *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  CFTypeID v15;
  const __CFDictionary *v16;
  const void *v17;
  uint64_t v18;
  __CFDictionary *Mutable;
  __CFDictionary *v20;
  const void *v21;
  const __CFAllocator *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  void *values;
  CFTypeRef cf;

  FigEndpoint = (const void *)FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 40));
  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 72) != 2)
  {
    APSLogErrorAt();
    v12 = 4294949690;
    goto LABEL_61;
  }
  if (!FigCFEqual())
  {
    v12 = 4294894922;
    if (gLogCategory_SPEndpoint <= 90 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    goto LABEL_61;
  }
  v8 = CMBaseObjectGetDerivedStorage();
  values = 0;
  if (*(_DWORD *)(v8 + 72) != 2)
  {
    APSLogErrorAt();
    v12 = 4294949690;
    goto LABEL_60;
  }
  if (!a3 || !a4 || (v9 = v8, (Value = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA3718])) == 0))
  {
    APSLogErrorAt();
    v12 = 4294950576;
    goto LABEL_60;
  }
  v11 = Value;
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v13 = (const void *)*MEMORY[0x1E0CA4888];
  if (!CFEqual(v11, (CFTypeRef)*MEMORY[0x1E0CA4888]))
  {
    v12 = 4294894922;
    if (gLogCategory_SPEndpoint <= 90 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    goto LABEL_60;
  }
  if (*(_BYTE *)(v9 + 96) || !CFSetGetCount(*(CFSetRef *)(v9 + 88)))
  {
    v14 = CMBaseObjectGetDerivedStorage();
    cf = 0;
    v15 = CFGetTypeID(v11);
    if (v15 == CFStringGetTypeID())
    {
      if (*(_DWORD *)(v14 + 72) != 2)
      {
        APSLogErrorAt();
        v12 = 4294951716;
        goto LABEL_57;
      }
      v16 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v14 + 112), v11);
      if (v16)
      {
        v17 = CFDictionaryGetValue(v16, CFSTR("AudioEngineVendor"));
        CFDictionaryGetInt64();
        if (CFEqual(v11, v13))
        {
          v18 = CMBaseObjectGetDerivedStorage();
          Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (Mutable)
          {
            v20 = Mutable;
            CFDictionarySetValue(Mutable, CFSTR("IsSidePlay"), (const void *)*MEMORY[0x1E0C9AE50]);
            v21 = *(const void **)(v18 + 24);
            if (v21)
              CFDictionarySetValue(v20, CFSTR("EventRecorder"), v21);
            v22 = CFGetAllocator(FigEndpoint);
            v23 = APEndpointStreamBufferedAudioCreate(v22, *(CFTypeRef *)(v14 + 248), *(const void **)(v14 + 256), v20, *(const void **)(v14 + 136), v17, *(const void **)(v14 + 240), &cf);
            if ((_DWORD)v23)
            {
              v12 = v23;
            }
            else
            {
              CMNotificationCenterGetDefaultLocalCenter();
              v24 = FigNotificationCenterAddWeakListener();
              if ((_DWORD)v24)
              {
                v12 = v24;
              }
              else
              {
                CMNotificationCenterGetDefaultLocalCenter();
                v25 = FigNotificationCenterAddWeakListener();
                if (!(_DWORD)v25)
                {
                  if (gLogCategory_SPEndpoint <= 50
                    && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
                  {
                    LogPrintF();
                  }
                  v12 = 0;
                  v26 = cf;
                  values = (void *)cf;
                  cf = 0;
LABEL_48:
                  CFRelease(v20);
                  if (cf)
                    CFRelease(cf);
                  if (!(_DWORD)v12)
                  {
                    CFSetSetValue(*(CFMutableSetRef *)(v9 + 88), v26);
                    if (gLogCategory_SPEndpoint <= 50
                      && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
                    {
                      CFSetGetCount(*(CFSetRef *)(v9 + 88));
                      LogPrintF();
                    }
                    goto LABEL_55;
                  }
LABEL_58:
                  APSLogErrorAt();
                  if (!v26)
                  {
LABEL_60:
                    APSLogErrorAt();
LABEL_61:
                    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
                    APSLogErrorAt();
                    return v12;
                  }
LABEL_59:
                  CFRelease(v26);
                  goto LABEL_60;
                }
                v12 = v25;
              }
              APSLogErrorAt();
            }
            APSLogErrorAt();
            v26 = 0;
            goto LABEL_48;
          }
          APSLogErrorAt();
          v12 = 4294950575;
          APSLogErrorAt();
        }
        else
        {
          v12 = 4294894922;
          if (gLogCategory_SPEndpoint <= 90
            && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
LABEL_57:
        v26 = 0;
        goto LABEL_58;
      }
    }
    APSLogErrorAt();
    v12 = 4294950576;
    goto LABEL_57;
  }
  CFSetGetValues(*(CFSetRef *)(v9 + 88), (const void **)&values);
  if (!values)
  {
    APSLogErrorAt();
    v12 = 4294950571;
    v26 = values;
    if (!values)
      goto LABEL_60;
    goto LABEL_59;
  }
  CFRetain(values);
  v26 = values;
LABEL_55:
  *a4 = v26;
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
  return 0;
}

uint64_t spEndpoint_RelinquishResource(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t FigEndpoint;
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  _QWORD block[6];

  FigEndpoint = FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (!a3)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 40));
  v6 = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(v6 + 72) != 2)
  {
    APSLogErrorAt();
    v9 = 4294949690;
LABEL_19:
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
    APSLogErrorAt();
    return v9;
  }
  v7 = v6;
  if (!FigCFEqual())
  {
    v9 = 4294894922;
    if (gLogCategory_SPEndpoint <= 90 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    goto LABEL_19;
  }
  if (!CFSetContainsValue(*(CFSetRef *)(v7 + 88), a3))
  {
    APSLogErrorAt();
    v9 = 4294950576;
    goto LABEL_19;
  }
  if (*(_BYTE *)(v7 + 96))
  {
    CFRetain(a3);
    v8 = *(NSObject **)(v7 + 280);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __spEndpoint_relinquishResourceInternal_block_invoke;
    block[3] = &__block_descriptor_48_e5_v8__0l;
    block[4] = FigEndpoint;
    block[5] = a3;
    dispatch_async(v8, block);
    CFSetRemoveValue(*(CFMutableSetRef *)(v7 + 88), a3);
    if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    {
      CFSetGetCount(*(CFSetRef *)(v7 + 88));
      LogPrintF();
    }
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 40));
  return 0;
}

void __spEndpoint_relinquishResourceInternal_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v4;
  void (*v5)(uint64_t);

  if (gLogCategory_SPEndpoint <= 50 && (gLogCategory_SPEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v3)
    v3(v2, 0, 0, 0);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v5)
    v5(v4);
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t APAudioEngineGetClassID()
{
  if (APAudioEngineGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APAudioEngineGetClassID_sRegisterOnce, &APAudioEngineGetClassID_sClassID, (dispatch_function_t)audioEngine_registerBaseClass);
  return APAudioEngineGetClassID_sClassID;
}

uint64_t audioEngine_registerBaseClass()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef audioEngine_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APAudioEngine %p]"), a1);
}

uint64_t APAuthenticationClientRSACreate(int a1, const void *a2, CFDataRef theData, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *DerivedStorage;
  uint64_t v9;

  if (!a2)
  {
    v9 = 4294895495;
LABEL_14:
    APSLogErrorAt();
    return v9;
  }
  if (!theData)
  {
    v9 = 4294895495;
    goto LABEL_14;
  }
  if (CFDataGetLength(theData) != 6)
  {
    v9 = 4294895495;
    goto LABEL_14;
  }
  APAuthenticationClientGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
    v9 = v7;
    APSLogErrorAt();
  }
  else
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    DerivedStorage[1] = a2;
    CFRetain(a2);
    *DerivedStorage = CFRetain(theData);
    if (gLogCategory_APAuthenticationClientRSA <= 30
      && (gLogCategory_APAuthenticationClientRSA != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v9 = 0;
    *a4 = 0;
  }
  return v9;
}

void rsaAuthentication_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAuthenticationClientRSA <= 30
    && (gLogCategory_APAuthenticationClientRSA != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

__CFString *rsaAuthentication_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APAuthenticationClientRSA %p>"), a1);
  return Mutable;
}

uint64_t rsaAuthentication_GetAuthenticationType()
{
  return 1;
}

uint64_t rsaAuthentication_AuthenticateEndpoint()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t BlockBufferCopyingMemoryBlock;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, char *, CFTypeRef *);
  uint64_t v7;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v10;
  OpaqueCMBlockBuffer *v11;
  const __CFData *v12;
  uint64_t DataPointer;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef v19;
  CFTypeRef cf;
  size_t lengthAtOffsetOut;
  char *dataPointerOut[3];
  _QWORD v23[33];

  v23[32] = *MEMORY[0x1E0C80C00];
  v19 = 0;
  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAuthenticationClientRSA <= 40
    && (gLogCategory_APAuthenticationClientRSA != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  lengthAtOffsetOut = 0;
  dataPointerOut[0] = 0;
  v1 = RandomBytes();
  if ((_DWORD)v1)
  {
    v16 = v1;
LABEL_32:
    APSLogErrorAt();
    goto LABEL_34;
  }
  v2 = Base64EncodeEx();
  if ((_DWORD)v2)
  {
    v16 = v2;
    goto LABEL_32;
  }
  v3 = *MEMORY[0x1E0C9AE00];
  BlockBufferCopyingMemoryBlock = FigCreateBlockBufferCopyingMemoryBlock();
  if (!(_DWORD)BlockBufferCopyingMemoryBlock)
  {
    v5 = *(_QWORD *)(DerivedStorage + 8);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, char *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 56);
    if (v6)
    {
      v7 = v6(v5, 1920164128, dataPointerOut[0], &cf);
      if ((_DWORD)v7)
      {
        v16 = v7;
        goto LABEL_24;
      }
      CMBaseObject = FigTransportStreamGetCMBaseObject();
      v9 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
      if (!v9)
      {
        v16 = 4294954514;
        goto LABEL_24;
      }
      v10 = v9(CMBaseObject, *MEMORY[0x1E0CF1FC8], v3, &v19);
      if ((_DWORD)v10)
      {
        v16 = v10;
        goto LABEL_24;
      }
      APSNetworkAddressGetSocketAddr();
      v11 = (OpaqueCMBlockBuffer *)cf;
      v12 = *(const __CFData **)DerivedStorage;
      lengthAtOffsetOut = 0;
      dataPointerOut[0] = 0;
      CFDataGetBytePtr(v12);
      DataPointer = CMBlockBufferGetDataPointer(v11, 0, &lengthAtOffsetOut, 0, dataPointerOut);
      if ((_DWORD)DataPointer)
      {
        v16 = DataPointer;
      }
      else
      {
        v14 = Base64Decode();
        if ((_DWORD)v14)
        {
          v16 = v14;
        }
        else
        {
          v15 = AirPlayRSA_PublicDecrypt((const uint8_t *)v23, lengthAtOffsetOut, v23, 0x100uLL, &lengthAtOffsetOut);
          if (!(_DWORD)v15)
          {
            v16 = 4294895491;
            if (lengthAtOffsetOut <= 0xF)
            {
              APSLogErrorAt();
              v16 = 4294895492;
            }
            else
            {
              if (dataPointerOut[1] != (char *)v23[0] || dataPointerOut[2] != (char *)v23[1])
                goto LABEL_39;
              v16 = 4294895493;
            }
LABEL_24:
            APSLogErrorAt();
            goto LABEL_25;
          }
          v16 = v15;
        }
      }
LABEL_39:
      APSLogErrorAt();
      goto LABEL_24;
    }
    v16 = 4294954514;
    goto LABEL_24;
  }
  v16 = BlockBufferCopyingMemoryBlock;
  APSLogErrorAt();
LABEL_34:
  APSLogErrorAt();
LABEL_25:
  if (cf)
    CFRelease(cf);
  if (v19)
    CFRelease(v19);
  return v16;
}

uint64_t rsaAuthentication_CreateEncryptedKey(int a1, CFDataRef theData, const __CFAllocator *a3, CFDataRef *a4)
{
  const uint8_t *BytePtr;
  uint64_t v7;
  CFDataRef v8;
  uint64_t v9;
  size_t v11;
  UInt8 bytes[256];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  BytePtr = CFDataGetBytePtr(theData);
  v7 = AirPlayRSA_PublicEncrypt(BytePtr, 0x10uLL, bytes, 0x100uLL, &v11);
  if ((_DWORD)v7)
  {
    v9 = v7;
LABEL_8:
    APSLogErrorAt();
    return v9;
  }
  if (v11 != 256)
  {
    v9 = 4294895492;
    goto LABEL_8;
  }
  v8 = CFDataCreate(a3, bytes, 256);
  if (v8)
  {
    v9 = 0;
    *a4 = v8;
  }
  else
  {
    APSLogErrorAt();
    return 4294895496;
  }
  return v9;
}

uint64_t APEndpointGetFeatureFromStreamType(uint64_t result)
{
  const void *v1;

  if (result)
  {
    v1 = (const void *)result;
    if (CFEqual((CFTypeRef)result, (CFTypeRef)*MEMORY[0x1E0CA48A0]))
    {
      return 1;
    }
    else if (CFEqual(v1, (CFTypeRef)*MEMORY[0x1E0CA4880]))
    {
      return 2;
    }
    else if (CFEqual(v1, (CFTypeRef)*MEMORY[0x1E0CA4888]))
    {
      return 8;
    }
    else
    {
      return 32 * (CFEqual(v1, (CFTypeRef)*MEMORY[0x1E0CA4890]) != 0);
    }
  }
  return result;
}

uint64_t APEndpointCreateStreamTypeArrayFromFeatures(char a1, __CFArray **a2)
{
  __CFArray *Mutable;
  __CFArray *v5;
  uint64_t result;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v5 = Mutable;
  if (a2)
  {
    if ((a1 & 1) != 0)
    {
      CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x1E0CA48A0]);
      if ((a1 & 2) == 0)
      {
LABEL_4:
        if ((a1 & 8) == 0)
          goto LABEL_5;
        goto LABEL_10;
      }
    }
    else if ((a1 & 2) == 0)
    {
      goto LABEL_4;
    }
    CFArrayAppendValue(v5, (const void *)*MEMORY[0x1E0CA4880]);
    if ((a1 & 8) == 0)
    {
LABEL_5:
      if ((a1 & 0x20) == 0)
      {
LABEL_7:
        result = 0;
        *a2 = v5;
        return result;
      }
LABEL_6:
      CFArrayAppendValue(v5, (const void *)*MEMORY[0x1E0CA4890]);
      goto LABEL_7;
    }
LABEL_10:
    CFArrayAppendValue(v5, (const void *)*MEMORY[0x1E0CA4888]);
    if ((a1 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  APSLogErrorAt();
  if (v5)
    CFRelease(v5);
  return 4294950576;
}

uint64_t APEndpointGetAllAudioFeatures(char a1)
{
  return a1 & 0x2A;
}

uint64_t APEndpointTriggerAudioHALDeviceCreation(uint64_t a1, uint64_t a2, const void *a3, const void *a4, const void *a5, uint64_t a6, int a7, int a8)
{
  __CFDictionary *Mutable;
  __CFDictionary *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  uint64_t v20;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v14 = Mutable;
    if (a4)
      CFDictionarySetValue(Mutable, CFSTR("DeviceType"), a4);
    if (a3)
      CFDictionarySetValue(v14, CFSTR("EndpointName"), a3);
    if (a5)
      CFDictionarySetValue(v14, CFSTR("NetworkClockType"), a5);
    CFDictionarySetInt64();
    v15 = (const void *)*MEMORY[0x1E0C9AE50];
    v16 = (const void *)*MEMORY[0x1E0C9AE40];
    if (a7)
      v17 = (const void *)*MEMORY[0x1E0C9AE50];
    else
      v17 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(v14, CFSTR("VolumeCtrlSupported"), v17);
    if (a8)
      v18 = v15;
    else
      v18 = v16;
    CFDictionarySetValue(v14, CFSTR("MuteCtrlSupported"), v18);
    CFDictionarySetDouble();
    FigHALAudioDeviceBrokerCopy();
    APSLogErrorAt();
    v20 = 4294949690;
    CFRelease(v14);
  }
  else
  {
    APSLogErrorAt();
    return 4294950575;
  }
  return v20;
}

uint64_t APEndpointCreateAudioStreamOptions(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  CFMutableDictionaryRef Mutable;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v9 = 4294950575;
    goto LABEL_17;
  }
  if (a3)
  {
    CFDictionaryGetValue(a3, CFSTR("SupportedAudioFormats"));
    CFDictionaryGetInt64();
    CFDictionaryGetInt64Ranged();
    CFDictionaryGetInt64();
    CFDictionaryGetInt64();
    CFDictionaryGetInt64();
    CFDictionaryGetInt64();
  }
  if (FigCFEqual())
  {
    v5 = APAudioFormatCopyPreferredRealTimeAudioFormats();
    if ((_DWORD)v5)
    {
      v9 = v5;
      goto LABEL_24;
    }
  }
  else if (FigCFEqual())
  {
    v6 = APAudioFormatCopyPreferredBufferedAudioFormats();
    if ((_DWORD)v6)
    {
      v9 = v6;
      goto LABEL_24;
    }
  }
  else
  {
    if (!FigCFEqual())
    {
LABEL_15:
      FigCFArrayGetInt64AtIndex();
      goto LABEL_16;
    }
    v7 = APAudioFormatCopyPreferredLowLatencyAudioFormats();
    if ((_DWORD)v7)
    {
      v9 = v7;
      goto LABEL_24;
    }
  }
  if (!CFDictionaryGetInt64())
    goto LABEL_15;
  v8 = APAudioFormatChooseFromPreferredAudioFormats();
  if (!(_DWORD)v8)
  {
LABEL_16:
    APSLogErrorAt();
    v9 = 4294950576;
    goto LABEL_17;
  }
  v9 = v8;
LABEL_24:
  APSLogErrorAt();
LABEL_17:
  if (Mutable)
    CFRelease(Mutable);
  return v9;
}

uint64_t APEndpointCreateAudioOptions(char a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, __CFDictionary **a5)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v10;
  const void *v11;
  uint64_t AudioStreamOptions;
  const void *v13;
  uint64_t v14;
  uint64_t v15;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    return 4294950575;
  }
  v10 = Mutable;
  if ((a1 & 2) != 0)
  {
    v11 = (const void *)*MEMORY[0x1E0CA4880];
    AudioStreamOptions = APEndpointCreateAudioStreamOptions(*MEMORY[0x1E0CA4880], a2, a3);
    if ((_DWORD)AudioStreamOptions)
    {
      v15 = AudioStreamOptions;
      goto LABEL_18;
    }
    CFDictionarySetValue(v10, v11, 0);
    if ((a1 & 8) == 0)
      goto LABEL_9;
LABEL_7:
    v13 = (const void *)*MEMORY[0x1E0CA4888];
    v14 = APEndpointCreateAudioStreamOptions(*MEMORY[0x1E0CA4888], a2, a3);
    if (!(_DWORD)v14)
    {
      CFDictionarySetValue(v10, v13, 0);
      goto LABEL_9;
    }
    v15 = v14;
LABEL_18:
    APSLogErrorAt();
    CFRelease(v10);
    return v15;
  }
  if ((a1 & 8) != 0)
    goto LABEL_7;
LABEL_9:
  if (gLogCategory_APEndpointUtilities <= 50
    && (gLogCategory_APEndpointUtilities != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v15 = 0;
  *a5 = v10;
  return v15;
}

uint64_t APEndpointCopyFromActivationOptionsOrCreateSharedContext(const __CFDictionary *a1, char a2, uint64_t theDict, unint64_t a4, _QWORD *a5, __CFDictionary **a6)
{
  const void *Value;
  const void *v13;
  CFTypeRef v14;
  _BOOL4 v15;
  _BOOL4 v16;
  uint64_t v17;
  const void *v18;
  uint64_t CMBaseObject;
  uint64_t (*v20)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v21;
  const __CFDictionary *v22;
  uint64_t Int64;
  const void *v24;
  uint64_t v25;
  const __CFDictionary *AudioOptions;
  const __CFDictionary *v28;
  char v29;
  CFTypeRef v30;
  CFTypeRef cf;

  v30 = 0;
  if (gLogCategory_APEndpointUtilities <= 40
    && (gLogCategory_APEndpointUtilities != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a1
    || !CFDictionaryGetInt64()
    || (!a6 || CFDictionaryContainsKey(a1, CFSTR("AudioOptions")))
    && (!a4
     || CFDictionaryContainsKey((CFDictionaryRef)theDict, CFSTR("NetworkClock"))
     || CFDictionaryContainsKey(a1, CFSTR("NetworkClock"))))
  {
    v29 = a2;
    if (theDict)
    {
      Value = CFDictionaryGetValue((CFDictionaryRef)theDict, CFSTR("PreferredNetworkClockType"));
      v13 = CFDictionaryGetValue((CFDictionaryRef)theDict, CFSTR("NetworkClock"));
      if (v13)
        v14 = CFRetain(v13);
      else
        v14 = 0;
      v30 = v14;
      CFDictionaryGetInt64();
      v28 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)theDict, CFSTR("AudioEngineOptions"));
      CFDictionaryGetInt64();
      v15 = a6 != 0;
      v16 = a4 != 0;
      if (!(a4 | (unint64_t)a6))
      {
LABEL_50:
        theDict = 0;
        goto LABEL_51;
      }
      if (v14)
      {
LABEL_39:
        if (!v15)
          goto LABEL_48;
        if (a1
          && (Int64 = CFDictionaryGetInt64(),
              v24 = CFDictionaryGetValue(a1, CFSTR("AudioOptions")),
              CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA3760]),
              Int64))
        {
          if (v24)
          {
            *a6 = (__CFDictionary *)CFRetain(v24);
            if (gLogCategory_APEndpointUtilities <= 50
              && (gLogCategory_APEndpointUtilities != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
LABEL_48:
            if (v16)
            {
              theDict = 0;
              *(_QWORD *)a4 = v30;
              return theDict;
            }
            goto LABEL_50;
          }
        }
        else if (v30)
        {
          v25 = FigCFEqual();
          AudioOptions = (const __CFDictionary *)APEndpointCreateAudioOptions(v29, (uint64_t)v30, v28, v25, a6);
          if (!(_DWORD)AudioOptions)
            goto LABEL_48;
          theDict = (uint64_t)AudioOptions;
          APSLogErrorAt();
          goto LABEL_63;
        }
        APSLogErrorAt();
        theDict = 4294950576;
LABEL_63:
        APSLogErrorAt();
        goto LABEL_51;
      }
    }
    else
    {
      v15 = a6 != 0;
      v16 = a4 != 0;
      if (!(a4 | (unint64_t)a6))
        goto LABEL_51;
      Value = 0;
      v28 = 0;
    }
    cf = 0;
    if (a1)
    {
      v17 = CFDictionaryGetInt64();
      v18 = CFDictionaryGetValue(a1, CFSTR("NetworkClock"));
      if (v17)
      {
        if (v18)
        {
          v30 = CFRetain(v18);
          CMBaseObject = APSNetworkClockGetCMBaseObject();
          v20 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
          if (v20)
          {
            theDict = v20(CMBaseObject, *MEMORY[0x1E0CF74E0], *MEMORY[0x1E0C9AE00], &cf);
            if (!(_DWORD)theDict)
            {
              v21 = cf;
              if (!a5)
              {
LABEL_36:
                if (v21)
                  CFRelease(v21);
LABEL_38:
                if ((_DWORD)theDict)
                  goto LABEL_63;
                goto LABEL_39;
              }
LABEL_33:
              *a5 = v21;
              goto LABEL_38;
            }
          }
          else
          {
            theDict = 4294954514;
          }
          APSLogErrorAt();
          v21 = cf;
          goto LABEL_36;
        }
        APSLogErrorAt();
LABEL_62:
        theDict = 4294950576;
        goto LABEL_63;
      }
    }
    if (FigCFEqual())
    {
      v22 = (const __CFDictionary *)APSNetworkClockPTPCreate();
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual())
          goto LABEL_62;
        theDict = 0;
        v30 = 0;
LABEL_32:
        v21 = CFRetain(Value);
        cf = v21;
        if (!a5)
          goto LABEL_36;
        goto LABEL_33;
      }
      v22 = (const __CFDictionary *)APSNetworkClockNTPServerCreate();
    }
    theDict = (uint64_t)v22;
    goto LABEL_32;
  }
  APSLogErrorAt();
  theDict = 4294950576;
LABEL_51:
  if (v30)
    CFRelease(v30);
  return theDict;
}

void APEndpointCallCompletionCallbackForActivationOrDeactivation(CFTypeRef *a1)
{
  void (*v2)(CFTypeRef, CFTypeRef, CFTypeRef, _QWORD, CFTypeRef);

  v2 = (void (*)(CFTypeRef, CFTypeRef, CFTypeRef, _QWORD, CFTypeRef))a1[4];
  if (v2)
    v2(*a1, a1[2], a1[1], *((unsigned int *)a1 + 6), a1[5]);
  CFRelease(*a1);
}

uint64_t APEndpointCreateEndpointActivationNotificationPayload(const __CFAllocator *a1, uint64_t a2, uint64_t a3, CFMutableDictionaryRef *a4)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  uint64_t result;

  if (a4)
  {
    Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v6 = Mutable;
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      result = 0;
      *a4 = v6;
    }
    else
    {
      APSLogErrorAt();
      return 4294950575;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950576;
  }
  return result;
}

uint64_t APEndpointCreateStreamsChangedNotificationPayload(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, CFMutableDictionaryRef *a5)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  uint64_t result;

  if (a5)
  {
    Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v7 = Mutable;
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      result = 0;
      *a5 = v7;
    }
    else
    {
      APSLogErrorAt();
      return 4294950575;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950576;
  }
  return result;
}

uint64_t APEndpointAPSClusterTypeToAPSLocalRouteType(uint64_t result)
{
  if ((result - 1) >= 3)
    return 0;
  else
    return result;
}

uint64_t APEndpointCreateLocalRouteState(int a1, const void *a2, uint64_t a3, __CFDictionary **a4)
{
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  const void **v9;
  uint64_t result;

  if (a4)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v8 = Mutable;
      v9 = (const void **)MEMORY[0x1E0C9AE40];
      if (a1)
        v9 = (const void **)MEMORY[0x1E0C9AE50];
      CFDictionarySetValue(Mutable, CFSTR("IsActive"), *v9);
      if (a1)
      {
        if (a2)
          CFDictionarySetValue(v8, CFSTR("GroupContextID"), a2);
      }
      CFDictionarySetInt64();
      result = 0;
      *a4 = v8;
    }
    else
    {
      APSLogErrorAt();
      return 4294950575;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950576;
  }
  return result;
}

uint64_t APEndpointGetEnabledFeatures(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t *v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = &v11;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  if (a3)
  {
    if (a1)
    {
      CFDictionaryApplyBlock();
      v3 = v12;
    }
    v8 = v3[3];
    v6 = v3 + 3;
    v7 = v8;
    if (a2)
    {
      v7 |= 4uLL;
      *v6 = v7;
    }
    v9 = 0;
    *a3 = v7;
  }
  else
  {
    APSLogErrorAt();
    v9 = 4294950576;
  }
  _Block_object_dispose(&v11, 8);
  return v9;
}

uint64_t APEndpointAPSClusterTypeToFigEndpointClusterType(int a1)
{
  uint64_t v1;

  switch(a1)
  {
    case 3:
      v1 = MEMORY[0x1E0CA3890];
      return *(_QWORD *)v1;
    case 2:
      v1 = MEMORY[0x1E0CA3898];
      return *(_QWORD *)v1;
    case 1:
      v1 = MEMORY[0x1E0CA38A0];
      return *(_QWORD *)v1;
  }
  return 0;
}

uint64_t APEndpointFigEndpointClusterTypeToAPSClusterType(const void *a1)
{
  if (a1)
  {
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA38A0]))
    {
      return 1;
    }
    else if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA3898]))
    {
      return 2;
    }
    else if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA3890]))
    {
      return 3;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 0;
  }
}

void APEndpointCallCompletionCallbackForSendCommand(uint64_t a1)
{
  CFTypeRef v2;
  const void *v3;

  v2 = *(CFTypeRef *)a1;
  if (!*(_QWORD *)a1 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass()))
    v2 = 0;
  (*(void (**)(CFTypeRef, _QWORD, _QWORD, _QWORD))(a1 + 16))(v2, *(unsigned int *)(a1 + 32), *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24));
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
}

_QWORD *APEndpointCreateRCSendDataCompletionContext(const void *a1, const void *a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;

  v10 = malloc_type_calloc(1uLL, 0x28uLL, 0xE0040B6671DC2uLL);
  if (v10)
  {
    *v10 = CFRetain(a1);
    v10[1] = CFRetain(a2);
    v10[4] = a3;
    dispatch_retain(a3);
    v10[2] = a4;
    v10[3] = a5;
  }
  else
  {
    APSLogErrorAt();
  }
  return v10;
}

void APEndpointCallRCSendDataCompletionAsync(CFTypeRef cf, CFTypeRef a2, int a3, dispatch_queue_t queue, uint64_t a5, uint64_t a6)
{
  _QWORD block[8];
  int v13;

  if (a5)
  {
    if (cf)
      CFRetain(cf);
    if (a2)
      CFRetain(a2);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __APEndpointCallRCSendDataCompletionAsync_block_invoke;
    block[3] = &__block_descriptor_tmp_39;
    block[4] = a5;
    block[5] = cf;
    v13 = a3;
    block[6] = a2;
    block[7] = a6;
    dispatch_async(queue, block);
  }
}

void APEndpointCallRCSendDataCompletionFromContextAsync(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  const void *v5;

  APEndpointCallRCSendDataCompletionAsync(*(CFTypeRef *)a4, *(CFTypeRef *)(a4 + 8), a3, *(dispatch_queue_t *)(a4 + 32), *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24));
  if (*(_QWORD *)a4)
    CFRelease(*(CFTypeRef *)a4);
  v5 = *(const void **)(a4 + 8);
  if (v5)
    CFRelease(v5);
  dispatch_release(*(dispatch_object_t *)(a4 + 32));
  free((void *)a4);
}

void APEndpointCallRCDelegateDidReceiveDataAsync(const void *a1, uint64_t a2, const void *a3, const void *a4, NSObject *a5, uint64_t a6, uint64_t a7)
{
  const void *v13;
  _QWORD v14[10];

  if (!a1 || !a3 || !a4 || !a6 || !a5)
    goto LABEL_15;
  if (a7)
  {
    v13 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v13)
    {
LABEL_15:
      APSLogErrorAt();
      return;
    }
  }
  else
  {
    v13 = 0;
  }
  CFRetain(a1);
  CFRetain(a3);
  CFRetain(a4);
  if (v13)
    CFRetain(v13);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 0x40000000;
  v14[2] = __APEndpointCallRCDelegateDidReceiveDataAsync_block_invoke;
  v14[3] = &__block_descriptor_tmp_41_0;
  v14[4] = a1;
  v14[5] = a3;
  v14[6] = a4;
  v14[7] = a6;
  v14[8] = a2;
  v14[9] = v13;
  dispatch_async(a5, v14);
  if (v13)
    CFRelease(v13);
}

void APEndpointCallRCDelegateDidCloseAsync(const void *a1, uint64_t a2, const void *a3, NSObject *a4, uint64_t a5, uint64_t a6)
{
  const void *v11;
  _QWORD block[9];

  if (!a1 || !a3 || !a5 || !a4)
    goto LABEL_14;
  if (a6)
  {
    v11 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v11)
    {
LABEL_14:
      APSLogErrorAt();
      return;
    }
  }
  else
  {
    v11 = 0;
  }
  CFRetain(a1);
  CFRetain(a3);
  if (v11)
    CFRetain(v11);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __APEndpointCallRCDelegateDidCloseAsync_block_invoke;
  block[3] = &__block_descriptor_tmp_43_0;
  block[4] = a1;
  block[5] = a3;
  block[6] = a5;
  block[7] = a2;
  block[8] = v11;
  dispatch_async(a4, block);
  if (v11)
    CFRelease(v11);
}

void APEndpointCopyClusterInfo(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4, uint64_t a5, _BYTE *a6, uint64_t a7, uint64_t a8)
{
  uint64_t CMBaseObject;
  void (*v16)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v17;
  void (*v18)(CFTypeRef, uint64_t, CFTypeRef *, CFTypeRef *, uint64_t, CFTypeRef *, uint64_t, uint64_t);
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef cf;
  CFTypeRef v22;

  cf = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v16 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v16 && (v16(CMBaseObject, CFSTR("EndpointDescription"), 0, &v22), (v17 = v22) != 0))
  {
    v18 = *(void (**)(CFTypeRef, uint64_t, CFTypeRef *, CFTypeRef *, uint64_t, CFTypeRef *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v18)
      v18(v17, a2, &cf, &v20, a5, &v19, a7, a8);
    if (a3)
      goto LABEL_6;
  }
  else
  {
    APSLogErrorAt();
    if (a3)
LABEL_6:
      *a3 = CFGetInt64();
  }
  if (a4)
    *a4 = CFGetInt64();
  if (a6)
    *a6 = CFGetInt64();
  if (cf)
    CFRelease(cf);
  if (v20)
    CFRelease(v20);
  if (v19)
    CFRelease(v19);
  if (v22)
    CFRelease(v22);
}

uint64_t APEndpointIsHALMuteForUser()
{
  return 0;
}

uint64_t APEndpointApplyInitialVolume(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, const __CFString *, _QWORD, _QWORD, _QWORD);

  if (a1 && (FigEndpointExtendedGetClassID(), CMBaseObjectIsMemberOfClass()))
  {
    v2 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 24)
                                                                                       + 72);
    if (v2)
      return v2(a1, CFSTR("applyInitialVolume"), 0, 0, 0);
    else
      return 4294954514;
  }
  else
  {
    APSLogErrorAt();
    return 4294950576;
  }
}

CFMutableDictionaryRef APEndpointCreateSecondDisplayModeCommandParams()
{
  CFMutableDictionaryRef Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    CFDictionarySetInt64();
  else
    APSLogErrorAt();
  return Mutable;
}

NSObject *APEndpointCreateAndStartProcessDemiseListener(void *a1, int a2, dispatch_queue_t queue, void (__cdecl *a4)(void *))
{
  NSObject *v6;
  NSObject *v7;

  v6 = dispatch_source_create(MEMORY[0x1E0C80DB0], a2, 0x80000000uLL, queue);
  v7 = v6;
  if (v6)
  {
    dispatch_set_context(v6, a1);
    dispatch_source_set_event_handler_f(v7, a4);
    dispatch_resume(v7);
  }
  else
  {
    APSLogErrorAt();
  }
  return v7;
}

uint64_t APAuthenticationClientMFiCreate(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
  {
    APAuthenticationClientGetClassID();
    v5 = CMDerivedObjectCreate();
    if ((_DWORD)v5)
    {
      v6 = v5;
      APSLogErrorAt();
    }
    else
    {
      *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8) = a2;
      CFRetain(a2);
      if (gLogCategory_APAuthenticationClientMFi <= 30
        && (gLogCategory_APAuthenticationClientMFi != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v6 = 0;
      *a3 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294895495;
  }
  return v6;
}

void mfiAuthentication_Finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAuthenticationClientMFi <= 30
    && (gLogCategory_APAuthenticationClientMFi != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*DerivedStorage)
  {
    MFiSAP_Delete();
    *DerivedStorage = 0;
  }
  v1 = (const void *)DerivedStorage[1];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[1] = 0;
  }
}

__CFString *mfiAuthentication_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APAuthenticationClientMFi %p>"), a1);
  return Mutable;
}

uint64_t mfiAuthentication_CopyProperty(int a1, CFTypeRef cf1, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t v6;
  CFDataRef v7;
  CFDataRef v8;
  uint64_t v9;
  uint64_t v10;
  CFDataRef v11;

  if (!CFEqual(cf1, CFSTR("AuthenticationData")))
    return 4294954512;
  if (!*(_QWORD *)CMBaseObjectGetDerivedStorage())
  {
    v10 = 4294895493;
LABEL_15:
    APSLogErrorAt();
    return v10;
  }
  if (!MFiSAP_CopyCertificateSerialNumber())
  {
    v11 = CFDataCreateWithBytesNoCopy(a3, 0, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
    *a4 = v11;
    if (v11)
      return 0;
LABEL_18:
    APSLogErrorAt();
    return 4294895496;
  }
  v6 = MFiSAP_CopyCertificate();
  if ((_DWORD)v6)
  {
    v10 = v6;
    goto LABEL_15;
  }
  v7 = CFDataCreateWithBytesNoCopy(a3, 0, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
  if (!v7)
    goto LABEL_18;
  v8 = v7;
  v9 = softLinkMFAACreateCertificateSerialNumber((uint64_t)v7);
  *a4 = v9;
  if (v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 4294895493;
    APSLogErrorAt();
  }
  CFRelease(v8);
  return v10;
}

uint64_t initMFAACreateCertificateSerialNumber(uint64_t a1)
{
  if (MFAAuthenticationLibrary_sOnce != -1)
    dispatch_once(&MFAAuthenticationLibrary_sOnce, &__block_literal_global_35);
  softLinkMFAACreateCertificateSerialNumber = (uint64_t (*)())dlsym((void *)MFAAuthenticationLibrary_sLib, "MFAACreateCertificateSerialNumber");
  return ((uint64_t (*)(uint64_t))softLinkMFAACreateCertificateSerialNumber)(a1);
}

uint64_t mfiAuthentication_GetAuthenticationType()
{
  return 8;
}

uint64_t mfiAuthentication_AuthenticateEndpoint()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t BlockBufferCopyingMemoryBlock;
  uint64_t v4;
  CFTypeRef v5;
  uint64_t (*v6)(uint64_t, uint64_t, CFTypeRef, CFTypeRef *);
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v10;
  CFTypeRef cf;
  char v12;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;

  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  v12 = 0;
  v10 = 0;
  cf = 0;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAuthenticationClientMFi <= 40
    && (gLogCategory_APAuthenticationClientMFi != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*DerivedStorage)
  {
    MFiSAP_Delete();
    *DerivedStorage = 0;
  }
  v1 = MFiSAP_Create();
  if ((_DWORD)v1)
  {
    v8 = v1;
  }
  else
  {
    lengthAtOffsetOut = 0;
    dataPointerOut = 0;
    v2 = MFiSAP_Exchange();
    if ((_DWORD)v2)
    {
LABEL_20:
      v8 = v2;
    }
    else
    {
      while (1)
      {
        if (v12)
        {
          v8 = 0;
          goto LABEL_24;
        }
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (v10)
        {
          CFRelease(v10);
          v10 = 0;
        }
        BlockBufferCopyingMemoryBlock = FigCreateBlockBufferCopyingMemoryBlock();
        if ((_DWORD)BlockBufferCopyingMemoryBlock)
        {
          v8 = BlockBufferCopyingMemoryBlock;
          goto LABEL_23;
        }
        if (dataPointerOut)
        {
          free(dataPointerOut);
          dataPointerOut = 0;
        }
        v4 = DerivedStorage[1];
        v5 = cf;
        v6 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 56);
        if (!v6)
        {
          v8 = 4294954514;
          goto LABEL_23;
        }
        v7 = v6(v4, 1835428128, v5, &v10);
        if ((_DWORD)v7)
          break;
        CMBlockBufferGetDataPointer((CMBlockBufferRef)v10, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
        v2 = MFiSAP_Exchange();
        if ((_DWORD)v2)
          goto LABEL_20;
      }
      v8 = v7;
    }
  }
LABEL_23:
  APSLogErrorAt();
LABEL_24:
  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  if ((_DWORD)v8)
  {
    if (*DerivedStorage)
    {
      MFiSAP_Delete();
      *DerivedStorage = 0;
    }
    if (gLogCategory_APAuthenticationClientMFi <= 60
      && (gLogCategory_APAuthenticationClientMFi != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  return v8;
}

uint64_t mfiAuthentication_CreateEncryptedKey(uint64_t a1, const __CFData *a2, const __CFAllocator *a3, CFDataRef *a4)
{
  uint64_t v7;
  CFDataRef v8;
  uint64_t v9;
  UInt8 bytes[16];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)CMBaseObjectGetDerivedStorage())
  {
    v9 = 4294895493;
LABEL_8:
    APSLogErrorAt();
    return v9;
  }
  CFDataGetBytePtr(a2);
  v7 = MFiSAP_Encrypt();
  if ((_DWORD)v7)
  {
    v9 = v7;
    goto LABEL_8;
  }
  v8 = CFDataCreate(a3, bytes, 16);
  if (v8)
  {
    v9 = 0;
    *a4 = v8;
  }
  else
  {
    APSLogErrorAt();
    return 4294895496;
  }
  return v9;
}

uint64_t mrcr_getTypeID(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APMediaRemoteCommandReceiverCreate(uint64_t a1, const void *a2, int **a3)
{
  uint64_t Instance;
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
  {
    v9 = 4294895603;
LABEL_15:
    APSLogErrorAt();
    return v9;
  }
  if (!a3)
  {
    v9 = 4294895603;
    goto LABEL_15;
  }
  if (APMediaRemoteCommandReceiverGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APMediaRemoteCommandReceiverGetTypeID_sInitOnce, &APMediaRemoteCommandReceiverGetTypeID_sTypeID, (dispatch_function_t)mrcr_getTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v6 = (int *)Instance;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    v7 = (int *)(Instance + 32);
    *(_QWORD *)(Instance + 16) = CFRetain(a2);
    v6[10] = -1;
    *(_QWORD *)v7 = -1;
    v8 = DACPServer_Create();
    if ((_DWORD)v8)
    {
      v9 = v8;
      APSLogErrorAt();
      CFRelease(v6);
    }
    else
    {
      notify_register_check("com.apple.AirTunes.DACP.devicevolume", v7);
      notify_register_check("com.apple.AirTunes.DACP.devicevolumechanged", v6 + 9);
      notify_register_check("com.apple.AirTunes.DACP.device-prevent-playback", v6 + 10);
      if (gLogCategory_APMediaRemoteCommandReceiver <= 30
        && (gLogCategory_APMediaRemoteCommandReceiver != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v9 = 0;
      *a3 = v6;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294895606;
  }
  return v9;
}

uint64_t mrcr_handleDACPCommand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int16 v11;
  uint64_t v13;

  if (!strnicmpx())
  {
    v9 = 0;
    v10 = 0;
    v11 = 30064;
LABEL_24:
    v7 = v11 | 0x766C0000;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    v9 = 0;
    v10 = 0;
    v11 = 25710;
    goto LABEL_24;
  }
  if (!strnicmpx())
  {
    v9 = 0;
    v10 = 0;
    v7 = 1836414068;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    v9 = 0;
    v10 = 0;
    v7 = 1852404845;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    v9 = 0;
    v10 = 0;
    v7 = 1885959277;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    v9 = 0;
    v10 = 0;
    v7 = 1920166260;
    goto LABEL_25;
  }
  v7 = 1886151033;
  if (!strnicmpx())
  {
    v9 = 0;
    v10 = 0;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    v9 = 0;
    v10 = 0;
    v7 = 1937010544;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    v9 = 0;
    v10 = 0;
    v7 = 1885435251;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    v9 = 0;
    v10 = 0;
    v7 = 1685086581;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    v9 = 0;
    v10 = 0;
    v7 = 1886154867;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    v9 = 0;
    v10 = 0;
    v7 = 1919967588;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    v9 = 0;
    v10 = 0;
    v7 = 1936225383;
    goto LABEL_25;
  }
  if (!strnicmp_prefix())
  {
    if (a3 < 13)
    {
LABEL_42:
      APSLogErrorAt();
      return 4294895605;
    }
    v13 = 0;
    while (*(_BYTE *)(a2 + v13 + 12) != 61)
    {
      ++v13;
      if (a2 + v13 + 12 >= (unint64_t)(a2 + a3))
        goto LABEL_42;
    }
    v9 = a2 + v13 + 13;
    v10 = a3 - v13 - 13;
    if (strnicmpx())
    {
      if (strnicmpx())
      {
        v8 = 4294895602;
        if (gLogCategory_APMediaRemoteCommandReceiver <= 60
          && (gLogCategory_APMediaRemoteCommandReceiver != -1 || _LogCategory_Initialize()))
        {
          goto LABEL_49;
        }
        return v8;
      }
      if (*(_DWORD *)(a4 + 40) == -1)
      {
        APSLogErrorAt();
        return 4294895604;
      }
      if (strnicmpx())
      {
        if (!strnicmpx() || !strnicmpx())
        {
          v7 = 1885499506;
          goto LABEL_25;
        }
        if (strnicmpx())
          return 4294895603;
      }
      v7 = 1885495660;
    }
    else
    {
      v7 = 1685482605;
    }
LABEL_25:
    APMediaRemoteCommandReceiverHandleAPCommand(a4, v7, v9, v10);
    return 0;
  }
  if (!strnicmp_prefix())
  {
    v7 = 1685482604;
    v9 = a2 + 13;
    v10 = a3 - 13;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    v9 = 0;
    v10 = 0;
    v7 = 1650878052;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    v9 = 0;
    v10 = 0;
    v7 = 1651668836;
    goto LABEL_25;
  }
  if (!strnicmpx())
  {
    v9 = 0;
    v10 = 0;
    v7 = 1886155379;
    goto LABEL_25;
  }
  v8 = 4294895602;
  if (gLogCategory_APMediaRemoteCommandReceiver <= 60
    && (gLogCategory_APMediaRemoteCommandReceiver != -1 || _LogCategory_Initialize()))
  {
LABEL_49:
    LogPrintF();
  }
  return v8;
}

uint64_t APMediaRemoteCommandReceiverGetID(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 240);
}

uint64_t APMediaRemoteCommandReceiverAddClient()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = DACPServer_AddRemote();
  if ((_DWORD)v0)
  {
    v2 = v0;
LABEL_11:
    APSLogErrorAt();
    return v2;
  }
  v1 = HTTPServer_Start();
  if ((_DWORD)v1)
  {
    v2 = v1;
    goto LABEL_11;
  }
  if (gLogCategory_APMediaRemoteCommandReceiver <= 30
    && (gLogCategory_APMediaRemoteCommandReceiver != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return 0;
}

uint64_t APMediaRemoteCommandReceiverRemoveClient()
{
  uint64_t v0;
  uint64_t v1;

  if (gLogCategory_APMediaRemoteCommandReceiver <= 30
    && (gLogCategory_APMediaRemoteCommandReceiver != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v0 = DACPServer_RemoveRemote();
  if ((_DWORD)v0)
  {
    v1 = v0;
    goto LABEL_9;
  }
  v1 = HTTPServer_Stop();
  if ((_DWORD)v1)
LABEL_9:
    APSLogErrorAt();
  return v1;
}

uint64_t APMediaRemoteCommandReceiverHandleAPCommand(uint64_t result, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  const char *v8;

  v7 = result;
  if (gLogCategory_APMediaRemoteCommandReceiver <= 50)
  {
    if (gLogCategory_APMediaRemoteCommandReceiver != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      result = LogPrintF();
  }
  if (a2 > 1885495659)
  {
    if (a2 > 1986815085)
    {
      if (a2 == 1986819440)
      {
        v8 = "com.apple.AirTunes.DACP.volumeup";
        goto LABEL_26;
      }
      if (a2 == 1986815086)
      {
        v8 = "com.apple.AirTunes.DACP.volumedown";
        goto LABEL_26;
      }
    }
    else
    {
      if (a2 == 1885495660)
        return result;
      if (a2 == 1885499506)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        return CMNotificationCenterPostNotification();
      }
    }
    return APMediaRemoteCommandSinkHandleAPCommand(*(_QWORD *)(v7 + 16), a2);
  }
  if (a2 <= 1685482604)
  {
    if (a2 == 1685482595)
    {
      result = mrcr_handleDeviceVolume(v7, "com.apple.AirTunes.DACP.devicevolumechanged", a3, a4);
      if (!(_DWORD)result)
        return result;
      return APSLogErrorAt();
    }
    if (a2 == 1685482604)
    {
      result = mrcr_handleDeviceVolume(v7, "com.apple.AirTunes.DACP.devicevolume", a3, a4);
      if (!(_DWORD)result)
        return result;
      return APSLogErrorAt();
    }
    return APMediaRemoteCommandSinkHandleAPCommand(*(_QWORD *)(v7 + 16), a2);
  }
  if (a2 == 1685482605)
  {
    result = mrcr_handleDeviceVolume(v7, "com.apple.AirTunes.DACP.devicevolume", a3, a4);
    if (!(_DWORD)result)
      return result;
    return APSLogErrorAt();
  }
  if (a2 != 1836414068)
    return APMediaRemoteCommandSinkHandleAPCommand(*(_QWORD *)(v7 + 16), a2);
  v8 = "com.apple.AirTunes.DACP.mutetoggle";
LABEL_26:
  result = notify_post(v8);
  if (gLogCategory_APMediaRemoteCommandReceiver <= 50)
  {
    if (gLogCategory_APMediaRemoteCommandReceiver != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

uint64_t mrcr_handleDeviceVolume(uint64_t a1, const char *a2, uint64_t a3, unint64_t a4)
{
  double v7;
  float v8;
  float v9;
  int *v10;
  uint64_t v11;
  double v13;
  char v14[64];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = 0.0;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294895603;
  }
  if (a4 >= 0x40)
  {
    v11 = 4294895601;
    APSLogErrorAt();
    return v11;
  }
  __memcpy_chk();
  v14[a4] = 0;
  if (sscanf(v14, "%lf", &v13) != 1)
  {
    APSLogErrorAt();
    return 4294895605;
  }
  v7 = v13;
  if (v13 > 0.0)
    v7 = 0.0;
  if (v7 < -30.0)
    v7 = -30.0;
  v13 = v7;
  APSVolumeConvertDBToSliderValue();
  v9 = v8;
  if (!strcmp(a2, "com.apple.AirTunes.DACP.devicevolume"))
  {
    v10 = (int *)(a1 + 32);
  }
  else
  {
    if (strcmp(a2, "com.apple.AirTunes.DACP.devicevolumechanged"))
      return 0;
    v10 = (int *)(a1 + 36);
  }
  if (*v10 == -1)
    return 0;
  notify_set_state(*v10, COERCE_UINT64_T(v9));
  v11 = notify_post(a2);
  if (gLogCategory_APMediaRemoteCommandReceiver <= 40
    && (gLogCategory_APMediaRemoteCommandReceiver != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v11;
}

uint64_t APMediaRemoteCommandReceiverHandleMRCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (gLogCategory_APMediaRemoteCommandReceiver <= 30
    && (gLogCategory_APMediaRemoteCommandReceiver != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return APMediaRemoteCommandSinkHandleMRCommand(*(_QWORD *)(a1 + 16), a2, a3);
}

void mrcr_Finalize(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  const void *v5;

  if (gLogCategory_APMediaRemoteCommandReceiver <= 30
    && (gLogCategory_APMediaRemoteCommandReceiver != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(_DWORD *)(a1 + 32);
  if (v2 != -1)
  {
    notify_cancel(v2);
    *(_DWORD *)(a1 + 32) = -1;
  }
  v3 = *(_DWORD *)(a1 + 36);
  if (v3 != -1)
  {
    notify_cancel(v3);
    *(_DWORD *)(a1 + 36) = -1;
  }
  v4 = *(_DWORD *)(a1 + 40);
  if (v4 != -1)
  {
    notify_cancel(v4);
    *(_DWORD *)(a1 + 40) = -1;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    HTTPServer_Delete();
    *(_QWORD *)(a1 + 24) = 0;
  }
  v5 = *(const void **)(a1 + 16);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

uint64_t APAudioSinkJitterBufferCreate(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if (a3)
  {
    FigEndpointAudioSinkGetClassID();
    v5 = CMDerivedObjectCreate();
    if ((_DWORD)v5)
    {
      v11 = v5;
      APSLogErrorAt();
    }
    else
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v7 = *((_QWORD *)a2 + 4);
      v8 = a2[1];
      *(_OWORD *)(DerivedStorage + 64) = *a2;
      *(_OWORD *)(DerivedStorage + 80) = v8;
      *(_QWORD *)(DerivedStorage + 96) = v7;
      v10 = *a2;
      v9 = a2[1];
      *(_QWORD *)(DerivedStorage + 56) = *((_QWORD *)a2 + 4);
      *(_OWORD *)(DerivedStorage + 24) = v10;
      *(_OWORD *)(DerivedStorage + 40) = v9;
      *(_DWORD *)(DerivedStorage + 16) = 50;
      *(_BYTE *)(DerivedStorage + 112) = 0;
      if (gLogCategory_APAudioSinkJitterBuffer <= 30
        && (gLogCategory_APAudioSinkJitterBuffer != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v11 = 0;
      *a3 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950504;
  }
  return v11;
}

void jitterBuffer_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

__CFString *jitterBuffer_CopyDebugDescription()
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APAudioSinkJitterBuffer>"));
  return Mutable;
}

uint64_t jitterBuffer_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  CFNumberRef v9;
  CFTypeRef *v10;
  const __CFNumber *v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("Statistics")))
  {
    if (*(_QWORD *)(DerivedStorage + 8))
    {
      return APSRTPJitterBufferCopyStatistics();
    }
    else
    {
      APSLogErrorAt();
      return 4294950503;
    }
  }
  else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA37C0]))
  {
    v9 = CFNumberCreate(a3, kCFNumberSInt32Type, (const void *)(DerivedStorage + 16));
    *a4 = v9;
    if (v9)
    {
      return 0;
    }
    else
    {
      APSLogErrorAt();
      return 4294950506;
    }
  }
  else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA37C8]))
  {
    v10 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(DerivedStorage + 112))
      v10 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v11 = (const __CFNumber *)CFRetain(*v10);
    result = 0;
    *a4 = v11;
  }
  else
  {
    return 4294954512;
  }
  return result;
}

uint64_t jitterBuffer_SetProperty(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  unsigned int v5;

  v5 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA37C0]))
  {
    *(_DWORD *)(DerivedStorage + 16) = CFGetInt64();
  }
  else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA37C8]))
  {
    *(_BYTE *)(DerivedStorage + 112) = CFGetInt64() != 0;
  }
  else
  {
    return -12784;
  }
  return v5;
}

uint64_t jitterBuffer_GetInputFormat(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  __int128 v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(DerivedStorage + 56);
  v5 = *(_OWORD *)(DerivedStorage + 40);
  *(_OWORD *)a2 = *(_OWORD *)(DerivedStorage + 24);
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = v4;
  return 0;
}

uint64_t jitterBuffer_SetInputFormat(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage + 64;
  if (a2)
    v4 = a2;
  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(DerivedStorage + 24) = *(_OWORD *)v4;
  *(_OWORD *)(DerivedStorage + 40) = v6;
  *(_QWORD *)(DerivedStorage + 56) = v5;
  return 0;
}

uint64_t jitterBuffer_Resume(const void *a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v3;
  uint64_t result;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    APSLogErrorAt();
    return 4294950503;
  }
  else
  {
    v3 = DerivedStorage;
    if (gLogCategory_APAudioSinkJitterBuffer <= 30
      && (gLogCategory_APAudioSinkJitterBuffer != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!*((_QWORD *)v3 + 1))
    {
      CFGetAllocator(a1);
      *((_QWORD *)v3 + 1) = APSRTPJitterBufferCreate();
    }
    result = 0;
    *v3 = 1;
  }
  return result;
}

uint64_t jitterBuffer_Suspend()
{
  _BYTE *DerivedStorage;
  _BYTE *v1;
  uint64_t result;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    v1 = DerivedStorage;
    if (gLogCategory_APAudioSinkJitterBuffer <= 30
      && (gLogCategory_APAudioSinkJitterBuffer != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    result = 0;
    *v1 = 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294950503;
  }
  return result;
}

uint64_t jitterBuffer_AcquireBuffer(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t EmptyPacket;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 104))
  {
    APSLogErrorAt();
    return 4294950503;
  }
  else
  {
    v6 = DerivedStorage;
    EmptyPacket = APSRTPJitterBufferGetEmptyPacket();
    *(_QWORD *)(v6 + 104) = EmptyPacket;
    result = 0;
    *a2 = EmptyPacket + 12;
    *a3 = 1460;
  }
  return result;
}

uint64_t jitterBuffer_CommitBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = *(_QWORD *)(DerivedStorage + 104);
  if (v10 && v10 + 12 == a2)
  {
    v11 = DerivedStorage;
    if (a3)
    {
      if ((*(_BYTE *)(a6 + 56) & 1) != 0)
      {
        *(_DWORD *)(v10 + 4) = (unint64_t)*(double *)a6;
        *(_QWORD *)(*(_QWORD *)(DerivedStorage + 104) + 1472) = a3;
        APSRTPJitterBufferEnqueuePacket();
        result = 0;
        *(_QWORD *)(v11 + 104) = 0;
      }
      else
      {
        APSLogErrorAt();
        return 4294950504;
      }
    }
    else
    {
      APSRTPJitterBufferDiscardPacket();
      return 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950503;
  }
  return result;
}

uint64_t jitterBuffer_ReadPackets(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6, unint64_t *a7, _DWORD *a8)
{
  uint64_t DerivedStorage;
  unint64_t v15;
  uint64_t v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_BYTE *)(a2 + 136) & 1) == 0 || a5 || (v15 = (*(_DWORD *)(DerivedStorage + 80) * a6), v15 > a4))
  {
    APSLogErrorAt();
    return 4294950504;
  }
  else
  {
    v16 = APSRTPJitterBufferRead();
    if ((_DWORD)v16)
    {
      APSLogErrorAt();
    }
    else
    {
      *a7 = v15;
      *a8 = a6;
    }
  }
  return v16;
}

uint64_t SPHubbedDevicesProviderPropertyCreate(_QWORD *a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  dispatch_queue_t v5;
  uint64_t v6;
  char label[64];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    SPHubbedDevicesProviderGetClassID();
    v2 = CMDerivedObjectCreate();
    if ((_DWORD)v2)
    {
      v6 = v2;
      APSLogErrorAt();
    }
    else
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (gLogCategory_SPHubbedDevicesProviderProperty <= 30
        && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_BYTE *)(DerivedStorage + 24) = 0;
      v4 = FigSimpleMutexCreate();
      *(_QWORD *)DerivedStorage = v4;
      if (v4 && (SNPrintF(), v5 = dispatch_queue_create(label, 0), (*(_QWORD *)(DerivedStorage + 8) = v5) != 0))
      {
        *(_QWORD *)(DerivedStorage + 16) = 0;
        if (gLogCategory_SPHubbedDevicesProviderProperty <= 50
          && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v6 = 0;
        *a1 = 0;
      }
      else
      {
        APSLogErrorAt();
        return 4294960568;
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v6;
}

uint64_t hdpp_Invalidate()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPHubbedDevicesProviderProperty <= 50
    && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_BYTE *)(DerivedStorage + 24) = 1;
  return 0;
}

uint64_t hdpp_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  NSObject *v2;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPHubbedDevicesProviderProperty <= 50
    && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 24))
  {
    v1 = *(const void **)(DerivedStorage + 16);
    if (v1)
    {
      CFRelease(v1);
      *(_QWORD *)(DerivedStorage + 16) = 0;
    }
    v2 = *(NSObject **)(DerivedStorage + 8);
    if (v2)
    {
      dispatch_release(v2);
      *(_QWORD *)(DerivedStorage + 8) = 0;
    }
    return FigSimpleMutexDestroy();
  }
  else
  {
    result = gLogCategory_SPHubbedDevicesProviderProperty;
    if (gLogCategory_SPHubbedDevicesProviderProperty <= 90)
      result = hdpp_Finalize_cold_1(gLogCategory_SPHubbedDevicesProviderProperty);
    __break(1u);
  }
  return result;
}

__CFString *hdpp_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<SPHubbedDevicesProviderProperty %p>"), a1);
  return Mutable;
}

uint64_t hdpp_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFSetRef *a4)
{
  _QWORD *DerivedStorage;
  uint64_t v8;
  const __CFSet *v9;
  uint64_t v10;
  int v11;
  CFSetRef Copy;
  uint64_t v13;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPHubbedDevicesProviderProperty <= 30
    && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a2 || !a4)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (!CFEqual(a2, CFSTR("HubbedDevices")))
  {
    if (gLogCategory_SPHubbedDevicesProviderProperty <= 30
      && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v13 = 4294954512;
    goto LABEL_26;
  }
  v8 = CMBaseObjectGetDerivedStorage();
  v9 = *(const __CFSet **)(v8 + 16);
  if (v9)
  {
    if (gLogCategory_SPHubbedDevicesProviderProperty <= 30)
    {
      v10 = v8;
      if (gLogCategory_SPHubbedDevicesProviderProperty != -1
        || (v11 = _LogCategory_Initialize(), v9 = *(const __CFSet **)(v10 + 16), v11))
      {
        LogPrintF();
        v9 = *(const __CFSet **)(v10 + 16);
      }
    }
    Copy = CFSetCreateCopy(a3, v9);
    if (!Copy)
    {
LABEL_29:
      APSLogErrorAt();
      v13 = 4294960568;
      goto LABEL_26;
    }
  }
  else
  {
    if (gLogCategory_SPHubbedDevicesProviderProperty <= 30
      && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    Copy = CFSetCreate(a3, 0, 0, MEMORY[0x1E0C9B3B0]);
    if (!Copy)
      goto LABEL_29;
  }
  v13 = 0;
  *a4 = Copy;
LABEL_26:
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return v13;
}

uint64_t hdpp_SetProperty(uint64_t a1, const void *a2, CFSetRef a3)
{
  _QWORD *DerivedStorage;
  uint64_t v6;
  CFTypeID v7;
  const __CFSet *v8;
  CFTypeID v9;
  CFIndex Count;
  const void **v11;
  CFTypeID v12;
  uint64_t v13;
  const void *v14;
  void *values;
  CFRange v17;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPHubbedDevicesProviderProperty <= 30
    && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (!CFEqual(a2, CFSTR("HubbedDevices")))
  {
    if (gLogCategory_SPHubbedDevicesProviderProperty <= 30
      && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v13 = 4294954512;
    goto LABEL_37;
  }
  values = a3;
  v6 = CMBaseObjectGetDerivedStorage();
  if (!a3)
    goto LABEL_18;
  v7 = CFGetTypeID(a3);
  if (v7 == CFSetGetTypeID())
  {
    v8 = (const __CFSet *)CFRetain(a3);
LABEL_17:
    a3 = v8;
    goto LABEL_18;
  }
  v9 = CFGetTypeID(a3);
  if (v9 == CFArrayGetTypeID())
  {
    Count = CFArrayGetCount(a3);
    v11 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
    v17.location = 0;
    v17.length = Count;
    CFArrayGetValues(a3, v17, v11);
    a3 = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v11, Count, MEMORY[0x1E0C9B3B0]);
    free(v11);
LABEL_18:
    if (!FigCFEqual())
    {
      if (gLogCategory_SPHubbedDevicesProviderProperty <= 50
        && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v14 = *(const void **)(v6 + 16);
      *(_QWORD *)(v6 + 16) = a3;
      if (a3)
        CFRetain(a3);
      if (v14)
        CFRelease(v14);
      if (gLogCategory_SPHubbedDevicesProviderProperty <= 50
        && (gLogCategory_SPHubbedDevicesProviderProperty != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
    if (a3)
      CFRelease(a3);
    v13 = 0;
    goto LABEL_37;
  }
  v12 = CFGetTypeID(a3);
  if (v12 == CFStringGetTypeID())
  {
    v8 = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B3B0]);
    goto LABEL_17;
  }
  APSLogErrorAt();
  v13 = 4294960591;
LABEL_37:
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return v13;
}

uint64_t hdpp_Start()
{
  return 0;
}

uint64_t _AirPlayRSA_Init(uint64_t *a1)
{
  uint64_t RSAPublicKey;

  RSAPublicKey = SecKeyCreateRSAPublicKey();
  *a1 = RSAPublicKey;
  if (RSAPublicKey)
    return 0;
  APSLogErrorAt();
  return 4294960596;
}

uint64_t AirPlayRSA_PublicEncrypt(const uint8_t *a1, size_t a2, uint8_t *a3, size_t a4, size_t *a5)
{
  uint64_t v10;
  SecKeyRef v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  size_t __len;
  SecKeyRef key;

  __len = 0;
  key = 0;
  v10 = _AirPlayRSA_Init((uint64_t *)&key);
  if ((_DWORD)v10)
  {
    v15 = v10;
    APSLogErrorAt();
  }
  else if (a4 <= 0xFF)
  {
    APSLogErrorAt();
    v15 = 4294960553;
  }
  else
  {
    __len = a4;
    v11 = key;
    v12 = SecKeyEncrypt(key, 2u, a1, a2, a3, &__len);
    if ((_DWORD)v12)
    {
      v15 = v12;
      APSLogErrorAt();
      if (!v11)
        return v15;
      goto LABEL_8;
    }
    v13 = __len;
    if (__len <= 0xFF)
    {
      v14 = 256 - __len;
      memmove(&a3[256 - __len], a3, __len);
      bzero(a3, v14);
      __len = 256;
      v13 = 256;
    }
    v15 = 0;
    *a5 = v13;
  }
  v11 = key;
  if (key)
LABEL_8:
    CFRelease(v11);
  return v15;
}

uint64_t AirPlayRSA_PublicDecrypt(const uint8_t *a1, size_t a2, void *a3, unint64_t a4, unint64_t *a5)
{
  uint64_t v10;
  SecKeyRef v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  size_t plainTextLen;
  SecKeyRef key;
  uint8_t plainText[256];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  plainTextLen = 0;
  key = 0;
  v10 = _AirPlayRSA_Init((uint64_t *)&key);
  if ((_DWORD)v10)
  {
    v15 = v10;
    APSLogErrorAt();
    v11 = key;
    goto LABEL_6;
  }
  plainTextLen = 256;
  v11 = key;
  v12 = SecKeyDecrypt(key, 0, a1, a2, plainText, &plainTextLen);
  if ((_DWORD)v12)
  {
    v15 = v12;
LABEL_11:
    APSLogErrorAt();
    goto LABEL_6;
  }
  v13 = plainTextLen;
  if (plainTextLen <= 0xFF)
  {
    v14 = 256 - plainTextLen;
    memmove(&plainText[256 - plainTextLen], plainText, plainTextLen);
    bzero(plainText, v14);
    plainTextLen = 256;
    v13 = 256;
  }
  v15 = _AirPlayRSA_PKCS1v1pt5_Decode(plainText, v13, 2048, 1, a3, a4, a5);
  if ((_DWORD)v15)
    goto LABEL_11;
LABEL_6:
  if (v11)
    CFRelease(v11);
  return v15;
}

uint64_t _AirPlayRSA_PKCS1v1pt5_Decode(_BYTE *a1, uint64_t a2, uint64_t a3, int a4, void *__dst, unint64_t a6, unint64_t *a7)
{
  uint64_t result;
  unsigned __int8 *v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  unint64_t v12;

  if ((unint64_t)(a3 + 7) < 0x58)
    return 4294960546;
  if (a2 != (unint64_t)(a3 + 7) >> 3)
    return 4294960553;
  if (*a1)
    return 4294960579;
  if (a1[1] != a4)
    return 4294960540;
  v9 = &a1[a2];
  v10 = a1 + 2;
  if (a4 == 1)
  {
    v11 = a1 + 2;
    if (a2 >= 3)
    {
      do
      {
        if (*v11 != 255)
          break;
        ++v11;
      }
      while (v11 < v9);
    }
    result = 4294960546;
    if (v11 >= v9 || v11 - v10 < 8)
      return result;
    if (*v11)
      return 4294960554;
    goto LABEL_27;
  }
  if (a4 != 2)
    return 4294960561;
  v11 = a1 + 2;
  if (a2 >= 3)
  {
    do
    {
      if (!*v11)
        break;
      ++v11;
    }
    while (v11 < v9);
  }
  result = 4294960546;
  if (v11 < v9 && v11 - v10 >= 8)
  {
    if (*v11)
      return 4294960579;
LABEL_27:
    v12 = v9 - (v11 + 1);
    if (__dst)
    {
      if (v12 > a6)
      {
        APSLogErrorAt();
        return 4294960553;
      }
      memcpy(__dst, v11 + 1, v9 - (v11 + 1));
    }
    result = 0;
    if (a7)
      *a7 = v12;
  }
  return result;
}

uint64_t policyMonitorEndpointStateChanged(int a1, void *a2, CFTypeRef cf1)
{
  uint64_t result;

  result = CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0CA3AF8]);
  if ((_DWORD)result)
    return objc_msgSend(a2, "endpointAuthenticationSucceeded");
  return result;
}

void policyMonitorEndpointDeactivated(int a1, int a2, int a3, int a4, dispatch_semaphore_t dsema)
{
  dispatch_semaphore_signal(dsema);
  dispatch_release(dsema);
}

Class initCRVehiclePolicyMonitor()
{
  Class result;

  if (CarKitLibrary_sOnce_1 != -1)
    dispatch_once(&CarKitLibrary_sOnce_1, &__block_literal_global_36);
  result = objc_getClass("CRVehiclePolicyMonitor");
  classCRVehiclePolicyMonitor = (uint64_t)result;
  getCRVehiclePolicyMonitorClass = CRVehiclePolicyMonitorFunction;
  return result;
}

uint64_t CRVehiclePolicyMonitorFunction()
{
  return classCRVehiclePolicyMonitor;
}

uint64_t APEndpointCreateWithEndpointDescription(uint64_t a1, const void *a2, const void *a3, uint64_t a4, const __CFDictionary *a5, CFTypeRef *a6)
{
  uint64_t v12;
  uint64_t DerivedStorage;
  CFTypeRef v14;
  uint64_t CMBaseObject;
  uint64_t (*v16)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v20;
  dispatch_queue_t v21;
  dispatch_queue_t v22;
  dispatch_queue_t v23;
  dispatch_queue_t v24;
  int BooleanIfPresent;
  CFTypeRef *v26;
  CFTypeRef v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  uint64_t v31;
  int v32;
  char v33;
  const void *Value;
  CFTypeRef v36;
  CFTypeRef v37;
  CFTypeRef cf;
  char label[64];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v37 = 0;
  cf = 0;
  v36 = 0;
  if (!a2 || !a6)
  {
    APSLogErrorAt();
    v31 = 4294950576;
    goto LABEL_30;
  }
  FigEndpointExtendedGetClassID();
  v12 = CMDerivedObjectCreate();
  if ((_DWORD)v12)
  {
    v31 = v12;
    goto LABEL_29;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14 = CFRetain(a2);
  *(_QWORD *)(DerivedStorage + 32) = a4;
  *(_QWORD *)(DerivedStorage + 40) = v14;
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(v14);
  v16 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v16)
  {
    v31 = 4294954514;
LABEL_29:
    APSLogErrorAt();
    goto LABEL_30;
  }
  v17 = v16(CMBaseObject, CFSTR("Name"), a1, &v37);
  if ((_DWORD)v17)
  {
    v31 = v17;
    goto LABEL_29;
  }
  v18 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
  v19 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (v19)
    v19(v18, CFSTR("DeviceID"), a1, &v36);
  v20 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 120) = v20;
  if (v20)
  {
    SNPrintF();
    v21 = dispatch_queue_create(label, 0);
    *(_QWORD *)(DerivedStorage + 576) = v21;
    if (v21)
    {
      SNPrintF();
      v22 = dispatch_queue_create(label, 0);
      *(_QWORD *)(DerivedStorage + 8) = v22;
      if (v22)
      {
        SNPrintF();
        v23 = dispatch_queue_create(label, 0);
        *(_QWORD *)(DerivedStorage + 16) = v23;
        if (v23)
        {
          SNPrintF();
          v24 = dispatch_queue_create(label, 0);
          *(_QWORD *)DerivedStorage = v24;
          if (v24)
          {
            if (a5)
            {
              *(_BYTE *)(DerivedStorage + 48) = CFDictionaryGetInt64() != 0;
              *(_BYTE *)(DerivedStorage + 49) = CFDictionaryGetInt64() != 0;
              BooleanIfPresent = APSCFDictionaryGetBooleanIfPresent();
              v26 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
              if (BooleanIfPresent)
              {
                v27 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
                if (*MEMORY[0x1E0C9AE40])
                  v27 = CFRetain(v27);
                *(_QWORD *)(DerivedStorage + 56) = v27;
              }
              if (APSCFDictionaryGetBooleanIfPresent())
              {
                v28 = *v26;
                if (*v26)
                  v28 = CFRetain(v28);
                *(_QWORD *)(DerivedStorage + 96) = v28;
              }
              if (APSCFDictionaryGetBooleanIfPresent())
              {
                v29 = *v26;
                if (*v26)
                  v29 = CFRetain(v29);
                *(_QWORD *)(DerivedStorage + 64) = v29;
              }
            }
            if (a3)
              v30 = CFRetain(a3);
            else
              v30 = 0;
            *(_QWORD *)(DerivedStorage + 24) = v30;
            *(_BYTE *)(DerivedStorage + 50) = 1;
            *(_QWORD *)(DerivedStorage + 72) = (int)APSSettingsGetIntWithOverrideAndDefault();
            *(_QWORD *)(DerivedStorage + 80) = (int)APSSettingsGetIntWithOverrideAndDefault();
            *(_QWORD *)(DerivedStorage + 88) = (int)APSSettingsGetIntWithOverrideAndDefault();
            if (!FigCFDictionaryGetBooleanIfPresent())
              *(_BYTE *)(DerivedStorage + 51) = APSSettingsIsFeatureEnabled();
            if (FigCFDictionaryGetIntIfPresent())
            {
              v32 = 0;
            }
            else if (IsAppleTV())
            {
              v32 = 4;
            }
            else
            {
              if (!APSIsAPMSpeaker())
              {
                *(_DWORD *)(DerivedStorage + 104) = 0;
LABEL_42:
                endpoint_initializeVolumeDelegateStorage();
                CMNotificationCenterGetDefaultLocalCenter();
                FigNotificationCenterAddWeakListener();
                MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
                v31 = endpoint_refreshFromEndpointDescription(cf, 0, 0);
                MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
                if (!(_DWORD)v31)
                {
                  v33 = *(_BYTE *)(DerivedStorage + 48);
                  if (v33)
                    v33 = APSGetFBOPropertyInt64() != 0;
                  *(_BYTE *)(DerivedStorage + 490) = v33;
                  if (a5)
                  {
                    Value = CFDictionaryGetValue(a5, CFSTR("EventRecorder"));
                    *(_QWORD *)(DerivedStorage + 112) = Value;
                    if (Value)
                      CFRetain(Value);
                  }
                  if (gLogCategory_APEndpoint <= 50
                    && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
                  {
                    CFGetHardwareAddress();
                    LogPrintF();
                  }
                  v31 = 0;
                  *a6 = cf;
                  cf = 0;
                  goto LABEL_53;
                }
                goto LABEL_29;
              }
              v32 = 7;
            }
            *(_DWORD *)(DerivedStorage + 104) = v32;
            goto LABEL_42;
          }
        }
      }
    }
  }
  APSLogErrorAt();
  v31 = 4294950575;
LABEL_30:
  if (cf)
    CFRelease(cf);
LABEL_53:
  if (v37)
    CFRelease(v37);
  if (v36)
    CFRelease(v36);
  return v31;
}

uint64_t endpoint_initializeVolumeDelegateStorage()
{
  uint64_t DerivedStorage;
  int v1;
  uint64_t result;
  int v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  APSVolumeConvertDBToSliderValue();
  *(_DWORD *)(DerivedStorage + 516) = v1;
  result = APSVolumeConvertDBToSliderValue();
  *(_DWORD *)(DerivedStorage + 524) = v3;
  *(_DWORD *)(DerivedStorage + 528) = -998653952;
  *(_DWORD *)(DerivedStorage + 536) = 0;
  *(_WORD *)(DerivedStorage + 520) = 0;
  *(_BYTE *)(DerivedStorage + 532) = 0;
  return result;
}

void endpoint_handleEndpointDescriptionChanged(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!*(_BYTE *)(DerivedStorage + 128))
  {
    v8 = DerivedStorage;
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
    endpoint_refreshFromEndpointDescription(a2, a5, (__CFDictionary **)&cf);
    MEMORY[0x1CAA400E4](*(_QWORD *)(v8 + 120));
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (cf)
      CFRelease(cf);
  }
}

uint64_t endpoint_refreshFromEndpointDescription(const void *a1, uint64_t a2, __CFDictionary **a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  __CFDictionary *Mutable;
  uint64_t v9;
  CFAllocatorRef v10;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, const __CFString *, CFAllocatorRef, CFStringRef *);
  int v13;
  BOOL v14;
  uint64_t v15;
  CFAllocatorRef v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, const __CFString *, CFAllocatorRef, CFStringRef *);
  const void *v19;
  CFStringRef v20;
  uint64_t v21;
  CFAllocatorRef v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  const void *v25;
  CFTypeRef v26;
  uint64_t v27;
  CFAllocatorRef v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  const void *v32;
  CFTypeRef v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  CFTypeRef v38;
  CFTypeRef cf;
  CFStringRef theString;
  unsigned int v41;

  v41 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  theString = 0;
  v38 = 0;
  if (*(_BYTE *)(DerivedStorage + 128))
    goto LABEL_84;
  v7 = DerivedStorage;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v41 = -16721;
    goto LABEL_45;
  }
  v9 = *(_QWORD *)(v7 + 40);
  v10 = CFGetAllocator(a1);
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(v9);
  v12 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
  if (v12)
  {
    v13 = v12(CMBaseObject, CFSTR("PairingPeerCUSystemIdentifier"), v10, &theString);
    if (theString)
    {
      if (CFStringHasPrefix(theString, CFSTR("00000000-0000-0000-0000")) && theString)
      {
        CFRelease(theString);
        theString = 0;
      }
      else
      {
        if (v13)
          v14 = 1;
        else
          v14 = theString == 0;
        if (!v14)
        {
LABEL_17:
          if (!FigCFEqual())
          {
            if (gLogCategory_APEndpoint <= 50
              && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v19 = *(const void **)(v7 + 456);
            v20 = theString;
            *(_QWORD *)(v7 + 456) = theString;
            if (v20)
              CFRetain(v20);
            if (v19)
              CFRelease(v19);
            CFDictionarySetValue(Mutable, CFSTR("IDDidChange"), (const void *)*MEMORY[0x1E0C9AE50]);
          }
          goto LABEL_29;
        }
      }
    }
  }
  else
  {
    v41 = -12782;
  }
  v15 = *(_QWORD *)(v7 + 40);
  v16 = CFGetAllocator(a1);
  v17 = APEndpointDescriptionGetCMBaseObject(v15);
  v18 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
  if (!v18)
  {
    v41 = -12782;
    goto LABEL_44;
  }
  v41 = v18(v17, CFSTR("DeviceID"), v16, &theString);
  if (v41)
  {
LABEL_44:
    APSLogErrorAt();
    goto LABEL_45;
  }
  if (theString)
    goto LABEL_17;
LABEL_29:
  v21 = *(_QWORD *)(v7 + 40);
  v22 = CFGetAllocator(a1);
  v23 = APEndpointDescriptionGetCMBaseObject(v21);
  v24 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
  if (!v24)
  {
    v41 = -12782;
    goto LABEL_44;
  }
  v41 = v24(v23, CFSTR("MACAddress"), v22, &cf);
  if (v41)
    goto LABEL_44;
  v25 = *(const void **)(v7 + 464);
  v26 = cf;
  *(_QWORD *)(v7 + 464) = cf;
  if (v26)
    CFRetain(v26);
  if (v25)
    CFRelease(v25);
  v27 = *(_QWORD *)(v7 + 40);
  v28 = CFGetAllocator(a1);
  v29 = APEndpointDescriptionGetCMBaseObject(v27);
  v30 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
  if (!v30)
  {
    v41 = -12782;
    goto LABEL_44;
  }
  v41 = v30(v29, CFSTR("Name"), v28, &v38);
  if (v41)
    goto LABEL_44;
  if (!FigCFEqual())
  {
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v32 = *(const void **)(v7 + 448);
    v33 = v38;
    *(_QWORD *)(v7 + 448) = v38;
    if (v33)
      CFRetain(v33);
    if (v32)
      CFRelease(v32);
    CFDictionarySetValue(Mutable, CFSTR("NameDidChange"), (const void *)*MEMORY[0x1E0C9AE50]);
  }
  if (a2)
  {
    if (CFDictionaryGetInt64())
    {
      CFDictionarySetValue(Mutable, CFSTR("ClusterInfoDidChange"), (const void *)*MEMORY[0x1E0C9AE50]);
      if (!*(_BYTE *)(v7 + 48) && *(_DWORD *)(v7 + 152) == 2)
        endpoint_updateStatus(a1, -72277, 1);
    }
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
  }
  v34 = APSGetFBOPropertyInt64();
  if (v41)
    goto LABEL_44;
  v35 = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(v35 + 500) != v34)
  {
    v36 = v35;
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    *(_DWORD *)(v36 + 500) = v34;
    endpoint_updateCurrentVolumeControlType();
  }
  v41 = 0;
  v37 = APSGetFBOPropertyInt64();
  if (v41)
    goto LABEL_44;
  *(_DWORD *)(v7 + 508) = v37;
  if (gLogCategory_APEndpoint <= 30)
  {
    if (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())
    {
      APSGetAPMuteControlTypeName();
      LogPrintF();
    }
    if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
  }
  if (a3)
  {
    *a3 = Mutable;
LABEL_84:
    Mutable = 0;
  }
LABEL_45:
  if (theString)
    CFRelease(theString);
  if (cf)
    CFRelease(cf);
  if (v38)
    CFRelease(v38);
  if (Mutable)
    CFRelease(Mutable);
  return v41;
}

uint64_t APEndpointCreateWithTransportDevice(uint64_t a1, const void *a2, const void *a3, uint64_t a4, const __CFDictionary *a5, CFTypeRef *a6)
{
  uint64_t v11;
  uint64_t v12;
  CFTypeRef cf;

  cf = 0;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  v11 = APEndpointDescriptionAirPlayCreateWithTransportDevice(a1, a2, 0, &cf);
  if ((_DWORD)v11)
  {
    v12 = v11;
  }
  else
  {
    v12 = APEndpointCreateWithEndpointDescription(a1, cf, a3, a4, a5, a6);
    if (!(_DWORD)v12)
      goto LABEL_4;
  }
  APSLogErrorAt();
LABEL_4:
  if (cf)
    CFRelease(cf);
  return v12;
}

uint64_t APEndpointUpdateWithTransportDevice(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t);
  const void *v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, const void *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = DerivedStorage;
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
    v5 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (gLogCategory_APEndpoint <= 30)
    {
      if (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())
        LogPrintF();
      if (gLogCategory_APEndpoint <= 10 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
    }
    v6 = v5[28];
    if (v6
      && (v7 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) != 0
      && v7(v6)
      && APSGetFBOPropertyInt64())
    {
      v8 = (const void *)v5[34];
      v5[34] = a2;
      CFRetain(a2);
      if (v8)
        CFRelease(v8);
      if (gLogCategory_APEndpoint <= 40 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
    else
    {
      v9 = v5[5];
      v10 = *(unsigned int (**)(uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (!v10 || v10(v9, a2))
      {
        APSLogErrorAt();
      }
      else if (gLogCategory_APEndpoint <= 30
             && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    MEMORY[0x1CAA400E4](*(_QWORD *)(v4 + 120));
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294950576;
  }
}

uint64_t APEndpointRecordEvent(uint64_t result)
{
  if (result)
  {
    CMBaseObjectGetDerivedStorage();
    return APSEventRecorderRecordEventWithFlags();
  }
  return result;
}

uint64_t endpoint_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t result;
  _QWORD block[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (introspector_getCollectionOfActiveEndpoints_once != -1)
    dispatch_once(&introspector_getCollectionOfActiveEndpoints_once, &__block_literal_global_37);
  if (introspector_getCollectionOfActiveEndpoints_coll)
  {
    v3 = *(NSObject **)introspector_getCollectionOfActiveEndpoints_coll;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __endpoint_Finalize_block_invoke;
    block[3] = &__block_descriptor_tmp_37;
    block[4] = introspector_getCollectionOfActiveEndpoints_coll;
    block[5] = a1;
    dispatch_sync(v3, block);
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 224))
  {
    result = gLogCategory_APEndpoint;
    if (gLogCategory_APEndpoint <= 100)
      result = endpoint_Finalize_cold_1(gLogCategory_APEndpoint);
    __break(1u);
  }
  else
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
    endpoint_resetActivationState(DerivedStorage + 136);
    endpoint_clearEndpointState();
    v4 = *(const void **)(DerivedStorage + 448);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(DerivedStorage + 448) = 0;
    }
    v5 = *(const void **)(DerivedStorage + 456);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(DerivedStorage + 456) = 0;
    }
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
    v6 = *(const void **)(DerivedStorage + 112);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(DerivedStorage + 112) = 0;
    }
    v7 = *(const void **)(DerivedStorage + 288);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(DerivedStorage + 288) = 0;
    }
    v8 = *(const void **)(DerivedStorage + 424);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(DerivedStorage + 424) = 0;
    }
    v9 = *(const void **)(DerivedStorage + 432);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(DerivedStorage + 432) = 0;
    }
    v10 = *(const void **)(DerivedStorage + 440);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(DerivedStorage + 440) = 0;
    }
    v11 = *(const void **)(DerivedStorage + 40);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(DerivedStorage + 40) = 0;
    }
    v12 = *(const void **)(DerivedStorage + 544);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(DerivedStorage + 544) = 0;
    }
    v13 = *(const void **)(DerivedStorage + 24);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(DerivedStorage + 24) = 0;
    }
    v14 = *(const void **)(DerivedStorage + 56);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(DerivedStorage + 56) = 0;
    }
    v15 = *(const void **)(DerivedStorage + 96);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(DerivedStorage + 96) = 0;
    }
    v16 = *(const void **)(DerivedStorage + 64);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(DerivedStorage + 64) = 0;
    }
    v17 = *(const void **)(DerivedStorage + 312);
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(DerivedStorage + 312) = 0;
    }
    v18 = *(const void **)(DerivedStorage + 336);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(DerivedStorage + 336) = 0;
    }
    v19 = *(NSObject **)(DerivedStorage + 16);
    if (v19)
    {
      dispatch_release(v19);
      *(_QWORD *)(DerivedStorage + 16) = 0;
    }
    v20 = *(NSObject **)(DerivedStorage + 8);
    if (v20)
    {
      dispatch_release(v20);
      *(_QWORD *)(DerivedStorage + 8) = 0;
    }
    v21 = *(NSObject **)(DerivedStorage + 576);
    if (v21)
    {
      dispatch_release(v21);
      *(_QWORD *)(DerivedStorage + 576) = 0;
    }
    v22 = *(NSObject **)(DerivedStorage + 608);
    if (v22)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 608));
      dispatch_release(v22);
      *(_QWORD *)(DerivedStorage + 608) = 0;
    }
    return FigSimpleMutexDestroy();
  }
  return result;
}

__CFString *endpoint_CopyDebugDescription(uint64_t a1)
{
  uint64_t v2;
  __CFString *Mutable;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v6;
  CFTypeRef v7;
  size_t v8;
  CFTypeRef cf;

  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  cf = 0;
  CFStringAppendFormat(Mutable, 0, CFSTR("<APEndpoint %p>"), a1);
  CMBaseObject = FigEndpointGetCMBaseObject();
  v5 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v5)
  {
    v6 = v5(CMBaseObject, CFSTR("EndpointShowInfo"), v2, &cf);
    v7 = cf;
    if (!v6)
    {
      ASPrintF();
      v8 = strlen(0);
      if (v8 && *(_BYTE *)(v8 - 1) == 10)
        *(_BYTE *)(v8 - 1) = 0;
      CFStringAppendFormat(Mutable, 0, CFSTR("%s"), 0);
      free(0);
      v7 = cf;
    }
    if (v7)
      CFRelease(v7);
  }
  return Mutable;
}

uint64_t endpoint_CopyProperty(const void *a1, const void *a2, const __CFAllocator *a3, CFMutableArrayRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  unsigned int v10;

  v10 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 10 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (!a4)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  if (!endpoint_copyStaticProperty((uint64_t)a1, a2, a4, (int *)&v10)
    && !endpoint_copyPropertyFromEndpointDescription(a1, a2, a3, (CFStringRef *)a4, (int *)&v10))
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
    v10 = endpoint_copyPropertyInternal(a1, a2, a3, a4);
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  }
  result = v10;
  if ((int)v10 > -6728)
  {
    if (v10 != -6727 && v10)
      goto LABEL_17;
  }
  else if (v10 != -16723 && v10 != -12784)
  {
LABEL_17:
    APSLogErrorAt();
    return v10;
  }
  return result;
}

uint64_t endpoint_SetProperty(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  float v9;
  double v10;
  uint64_t IsMuted;
  uint64_t v12;
  CFTypeID v14;
  _BOOL4 v15;
  int IsHALMuteForUser;
  const void *v17;
  CFTypeID v18;
  _BOOL4 v19;
  const void *v20;
  int v21;
  int v22;
  _BOOL4 v23;
  const void *v24;
  CFTypeID v25;
  CFTypeID v26;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (!a2)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  v7 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(v7 + 128))
  {
    v12 = 4294950573;
    goto LABEL_50;
  }
  v8 = v7;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44B8]))
  {
    CFGetDouble();
    APSVolumeConvertDBToSliderValue();
LABEL_11:
    IsMuted = endpointdelegate_setVolumeSliderInternal(a1, 1, 1, v9);
    goto LABEL_12;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44A0]))
  {
    CFGetDouble();
    v9 = v10;
    goto LABEL_11;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42B8]))
  {
    if (a3)
    {
      v14 = CFGetTypeID(a3);
      if (v14 == CFBooleanGetTypeID())
      {
        if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          LogPrintF();
        v19 = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
        if (*(_BYTE *)(v8 + 51) || (CMBaseObjectGetDerivedStorage(), APSGetFBOPropertyInt64()))
        {
          v20 = a1;
          v21 = v19;
          v22 = 1;
LABEL_42:
          IsMuted = endpointdelegate_setIsMuted(v20, v21, v22);
          goto LABEL_12;
        }
        if (gLogCategory_APEndpoint > 50 || gLogCategory_APEndpoint == -1 && !_LogCategory_Initialize())
        {
LABEL_47:
          MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
          return 0;
        }
LABEL_37:
        LogPrintF();
        goto LABEL_47;
      }
    }
    v12 = 4294950576;
    goto LABEL_50;
  }
  if (CFEqual(a2, CFSTR("IsHALMuted")))
  {
    v15 = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
    IsHALMuteForUser = APEndpointIsHALMuteForUser();
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v20 = a1;
    v21 = v15;
    v22 = IsHALMuteForUser;
    goto LABEL_42;
  }
  v17 = (const void *)*MEMORY[0x1E0CA42C0];
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42C0]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42C8]))
  {
    if (a3)
    {
      v18 = CFGetTypeID(a3);
      if (v18 == CFBooleanGetTypeID())
      {
        if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          LogPrintF();
        v23 = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
        v22 = CFEqual(a2, v17);
        v20 = a1;
        v21 = v23;
        goto LABEL_42;
      }
    }
    v12 = 4294950576;
    goto LABEL_50;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4378]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4370]))
  {
    IsMuted = endpoint_setAuthorizationString((uint64_t)a1, a3);
    goto LABEL_12;
  }
  if (!CFEqual(a2, CFSTR("PermanentSpeakerGroupingInfo")))
  {
    if (CFEqual(a2, CFSTR("ScreenUsageMode")))
    {
      v24 = *(const void **)(v8 + 480);
      *(_QWORD *)(v8 + 480) = a3;
      if (a3)
        CFRetain(a3);
      if (v24)
        CFRelease(v24);
      goto LABEL_47;
    }
    if (CFEqual(a2, CFSTR("StartSilentAudio")))
    {
      if (a3)
      {
        v25 = CFGetTypeID(a3);
        if (v25 == CFBooleanGetTypeID())
        {
          *(_BYTE *)(v8 + 489) = CFBooleanGetValue((CFBooleanRef)a3);
          goto LABEL_47;
        }
      }
      v12 = 4294950576;
    }
    else
    {
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4130]))
      {
        if (CFEqual(a2, CFSTR("EndpointStatus")))
        {
          *(_DWORD *)(v8 + 156) = CFGetInt64();
          if (gLogCategory_APEndpoint > 50 || gLogCategory_APEndpoint == -1 && !_LogCategory_Initialize())
            goto LABEL_47;
          goto LABEL_37;
        }
        v12 = 4294954512;
LABEL_51:
        MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
        goto LABEL_52;
      }
      if (a3)
      {
        v26 = CFGetTypeID(a3);
        if (v26 == CFBooleanGetTypeID())
        {
          *(_BYTE *)(v8 + 488) = CFBooleanGetValue((CFBooleanRef)a3);
          goto LABEL_47;
        }
      }
      v12 = 4294950576;
    }
LABEL_50:
    APSLogErrorAt();
    goto LABEL_51;
  }
  IsMuted = APEndpointDescriptionSetProperty(*(_QWORD *)(v8 + 40), (uint64_t)CFSTR("PermanentSpeakerGroupingInfo"), (uint64_t)a3);
LABEL_12:
  v12 = IsMuted;
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  if ((_DWORD)v12)
LABEL_52:
    APSLogErrorAt();
  return v12;
}

void endpoint_resetActivationState(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  NSObject *v8;
  NSObject *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  __CFSet *v14;
  const void *v15;

  endpoint_partiallyResetActivationState(a1);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 113) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v3 = *(const void **)(a1 + 72);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v4 = *(const void **)(a1 + 80);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 80) = 0;
  }
  v5 = *(const void **)(a1 + 88);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v6 = *(const void **)(a1 + 48);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v7 = *(const void **)(a1 + 56);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 56) = 0;
  }
  *(_DWORD *)(a1 + 128) = 0;
  v8 = *(NSObject **)(a1 + 120);
  if (v8)
  {
    dispatch_semaphore_signal(v8);
    v9 = *(NSObject **)(a1 + 120);
    if (v9)
    {
      dispatch_release(v9);
      *(_QWORD *)(a1 + 120) = 0;
    }
  }
  v10 = *(const void **)(a1 + 152);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v11 = *(const void **)(a1 + 160);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 160) = 0;
  }
  v12 = *(const void **)(a1 + 168);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 168) = 0;
  }
  v13 = *(const void **)(a1 + 192);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 192) = 0;
  }
  v14 = *(__CFSet **)(a1 + 176);
  if (v14)
    CFSetRemoveAllValues(v14);
  FigCFDictionaryRemoveAllValues();
  v15 = *(const void **)(a1 + 208);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a1 + 208) = 0;
  }
}

void endpoint_clearEndpointState()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v1 = (const void *)DerivedStorage[60];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[60] = 0;
  }
  v2 = (const void *)DerivedStorage[59];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[59] = 0;
  }
  v3 = (const void *)DerivedStorage[58];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[58] = 0;
  }
}

uint64_t __introspector_getCollectionOfActiveEndpoints_block_invoke()
{
  uint64_t result;
  CFMutableSetRef Mutable;
  uint64_t v2;

  result = IsAppleInternalBuild();
  if ((_DWORD)result)
  {
    introspector_getCollectionOfActiveEndpoints_coll = (uint64_t)malloc_type_calloc(1uLL, 0x18uLL, 0x70040EA3A3B56uLL);
    *(_QWORD *)introspector_getCollectionOfActiveEndpoints_coll = dispatch_queue_create("CollectionOfActiveEndpoints", 0);
    Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    v2 = introspector_getCollectionOfActiveEndpoints_coll;
    *(_QWORD *)(introspector_getCollectionOfActiveEndpoints_coll + 8) = Mutable;
    *(_QWORD *)(v2 + 16) = "ActiveEndpoints";
    return APSIntrospectorAddCommand();
  }
  return result;
}

void endpoint_partiallyResetActivationState(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_WORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 132) = 0;
  v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v4 = *(const void **)(a1 + 104);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 104) = 0;
  }
  v5 = *(const void **)(a1 + 96);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v6 = *(const void **)(a1 + 136);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 136) = 0;
  }
}

uint64_t endpoint_copyStaticProperty(uint64_t a1, const void *a2, _QWORD *a3, int *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  CFTypeRef *v9;
  int v10;
  CFTypeRef v11;
  int v12;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    APSLogErrorAt();
    v12 = -16720;
    if (!a4)
      return 1;
    goto LABEL_11;
  }
  v8 = DerivedStorage;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4468]))
  {
    v9 = (CFTypeRef *)MEMORY[0x1E0CA4960];
    goto LABEL_10;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42D8]))
  {
    v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v10 = *(unsigned __int8 *)(v8 + 48);
    goto LABEL_8;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42A8]))
  {
    v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v10 = *(unsigned __int8 *)(v8 + 49);
LABEL_8:
    if (!v10)
      v9 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
LABEL_10:
    v11 = CFRetain(*v9);
    v12 = 0;
    *a3 = v11;
    if (!a4)
      return 1;
LABEL_11:
    *a4 = v12;
    return 1;
  }
  result = CFEqual(a2, CFSTR("IsClusterEndpoint"));
  if ((_DWORD)result)
  {
    v9 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_10;
  }
  return result;
}

uint64_t endpoint_copyPropertyFromEndpointDescription(const void *a1, const void *a2, const __CFAllocator *a3, CFStringRef *a4, int *a5)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, __CFString *, const __CFAllocator *, CFStringRef *);
  __CFString **v13;
  int IsGroupable;
  uint64_t v15;
  __CFString **v16;
  const __CFString *v17;
  const void **v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, CFStringRef *);
  uint64_t result;
  int v22;
  __CFString **v23;
  uint64_t v24;
  const void **v25;
  const void **v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  CFNumberRef v30;
  _BOOL4 isThirdPartyTVFamily;
  uint64_t v32;
  char v33;
  int SupportedFeatures;

  SupportedFeatures = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43D8]))
  {
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
    v12 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
    if (v12)
    {
      v13 = kAPEndpointDescriptionProperty_SubType;
LABEL_13:
      IsGroupable = v12(CMBaseObject, *v13, a3, a4);
LABEL_45:
      SupportedFeatures = IsGroupable;
      goto LABEL_46;
    }
    goto LABEL_44;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4400]))
  {
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
    v12 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
    if (v12)
    {
      v13 = kAPEndpointDescriptionProperty_SupportsExtendedWHA;
      goto LABEL_13;
    }
LABEL_44:
    IsGroupable = -12782;
    goto LABEL_45;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4428]))
  {
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
    v12 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
    if (v12)
    {
      v13 = kAPEndpointDescriptionProperty_DeviceSupportsRelay;
      goto LABEL_13;
    }
    goto LABEL_44;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4338]))
  {
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
    v12 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
    if (v12)
    {
      v13 = kAPEndpointDescriptionProperty_Model;
      goto LABEL_13;
    }
    goto LABEL_44;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4318]))
  {
    v15 = *(_QWORD *)(DerivedStorage + 40);
    v16 = kAPEndpointDescriptionProperty_Manufacturer;
LABEL_20:
    IsGroupable = APEndpointDescriptionCopyProperty(v15, (uint64_t)*v16, (uint64_t)a3, (uint64_t)a4);
    goto LABEL_45;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4210]))
  {
    v15 = *(_QWORD *)(DerivedStorage + 40);
    v16 = kAPEndpointDescriptionProperty_FirmwareVersion;
    goto LABEL_20;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43A8]))
  {
    v15 = *(_QWORD *)(DerivedStorage + 40);
    v16 = kAPEndpointDescriptionProperty_SerialNumber;
    goto LABEL_20;
  }
  if (!CFEqual(a2, CFSTR("EndpointDescription")))
  {
    if (CFEqual(a2, CFSTR("StatusFlags")))
      goto LABEL_26;
    if (CFEqual(a2, CFSTR("SourceVersion")))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_SourceVersion;
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40D0]))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_AirPlaySecurity;
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42A0]))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_IsHKAccessControlEnabled;
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4238]))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_HKAccessControlLevel;
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4460]))
    {
      if (APSGetFBOPropertyInt64())
        v18 = (const void **)MEMORY[0x1E0CA4950];
      else
        v18 = (const void **)MEMORY[0x1E0CA4958];
      v17 = (const __CFString *)*v18;
      if (!*v18)
        goto LABEL_24;
      goto LABEL_23;
    }
    if (CFEqual(a2, CFSTR("Features")))
    {
      v19 = *(_QWORD *)(DerivedStorage + 40);
      v20 = *(uint64_t (**)(uint64_t, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v20)
      {
        IsGroupable = v20(v19, a4);
        goto LABEL_45;
      }
      goto LABEL_44;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4458]))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_TightSyncUUID;
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4448]))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_TightSyncIsGroupLeader;
      goto LABEL_20;
    }
    if (CFEqual(a2, CFSTR("TightSyncClusterInfo")))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_TightSyncClusterInfo;
      goto LABEL_20;
    }
    if (CFEqual(a2, CFSTR("GroupPublicName")))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_GroupPublicName;
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4268]))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_IsAppleMusicSubscriber;
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4170]))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_CloudLibraryIsOn;
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4450]))
    {
      IsGroupable = endpoint_copyAirPlayDiagnosticsDNSName((uint64_t)a1, a3, 0, a4);
      goto LABEL_45;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4228]))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_GroupID;
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4220]))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_GroupContainsDiscoverableLeader;
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4290]))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_IsGroupLeader;
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4198]))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_ClusterSize;
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA41A0]))
    {
      v22 = APSGetFBOPropertyInt64();
      v17 = (const __CFString *)APEndpointAPSClusterTypeToFigEndpointClusterType(v22);
      if (!v17)
        goto LABEL_24;
      goto LABEL_23;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4380]))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_ClusterUUID;
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4278]))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_IsClusterLeader;
      goto LABEL_20;
    }
    if (CFEqual(a2, CFSTR("ClusterModel")))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_ClusterModel;
      goto LABEL_20;
    }
    if (CFEqual(a2, CFSTR("RoomUUID")))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_RoomUUID;
      goto LABEL_20;
    }
    if (CFEqual(a2, CFSTR("RoomName")))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_RoomName;
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42E8]))
    {
      IsGroupable = endpoint_copyIsGroupable((uint64_t)a1, (CFTypeRef *)a4);
      goto LABEL_45;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40D8]))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_SupportsAirPlayVideoPlayQueue;
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40E8]))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_SupportsAirPlayVideoV2;
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4438]))
    {
LABEL_26:
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_StatusFlags;
      goto LABEL_20;
    }
    if (CFEqual(a2, CFSTR("TransportDevice")))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_TransportDevice;
      goto LABEL_20;
    }
    if (CFEqual(a2, CFSTR("ScreenSize")))
    {
      v23 = kAPEndpointDisplayDescriptionProperty_PixelSize;
LABEL_98:
      IsGroupable = endpoint_copyPropertyForFirstDisplay(a1, (uint64_t)*v23, (uint64_t)a4);
      goto LABEL_45;
    }
    if (CFEqual(a2, CFSTR("ScreenIsOverscanned")))
    {
      v23 = kAPEndpointDisplayDescriptionProperty_IsOverscanned;
      goto LABEL_98;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4218]) || CFEqual(a2, CFSTR("IsScreenDemoReceiver")))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_IsScreenDemoMode;
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40F0]))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_VodkaVersion;
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40C8]))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_SupportsAirPlayFromCloud;
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA41E8]))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_DoesNotRequireVodkaForHLS;
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43B0]))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_SilentPrimary;
      goto LABEL_20;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40B8]))
    {
      v15 = *(_QWORD *)(DerivedStorage + 40);
      v16 = kAPEndpointDescriptionProperty_AdvertisesHAPSupport;
      goto LABEL_20;
    }
    if (CFEqual(a2, CFSTR("SupportsMuteControl")))
    {
      v24 = APSGetFBOPropertyInt64();
      v25 = (const void **)MEMORY[0x1E0C9AE40];
      v26 = (const void **)MEMORY[0x1E0C9AE50];
    }
    else
    {
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4410]))
      {
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA41E0]))
        {
          v15 = *(_QWORD *)(DerivedStorage + 40);
          v16 = kAPEndpointDescriptionProperty_ExternalPlaybackCapabilities;
          goto LABEL_20;
        }
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4408]))
        {
          v33 = 0;
          endpoint_getBooleanFromExternalPlaybackCapabilitiesIfPresent();
          v25 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_136:
          v17 = (const __CFString *)*v25;
          goto LABEL_23;
        }
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40C0]))
        {
          v28 = (uint64_t)a1;
          v29 = 0;
        }
        else
        {
          if (!CFEqual(a2, CFSTR("AirPlayClusterCompatibleEndpointProperties")))
          {
            if (CFEqual(a2, CFSTR("EndpointInfo")))
            {
              v15 = *(_QWORD *)(DerivedStorage + 40);
              v16 = kAPEndpointDescriptionProperty_EndpointInfo;
              goto LABEL_20;
            }
            if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43E0]))
            {
              v32 = 0;
              SupportedFeatures = endpoint_getSupportedFeatures((uint64_t)a1, &v32);
              if (SupportedFeatures)
              {
                APSLogErrorAt();
              }
              else
              {
                v30 = CFNumberCreate(a3, kCFNumberSInt64Type, &v32);
                *a4 = (CFStringRef)v30;
                if (!v30)
                {
                  APSLogErrorAt();
                  SupportedFeatures = -16721;
                }
              }
              goto LABEL_46;
            }
            result = CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA41A8]);
            if (!(_DWORD)result)
              return result;
            isThirdPartyTVFamily = endpoint_isThirdPartyTVFamily();
            v25 = (const void **)MEMORY[0x1E0C9AE50];
            v26 = (const void **)MEMORY[0x1E0C9AE40];
            v27 = !isThirdPartyTVFamily;
            goto LABEL_134;
          }
          v28 = (uint64_t)a1;
          v29 = 1;
        }
        IsGroupable = endpoint_copyAirPlayEndpointProperties(v28, v29, (__CFDictionary **)a4);
        goto LABEL_45;
      }
      v24 = APSGetFBOPropertyInt64();
      v25 = (const void **)MEMORY[0x1E0C9AE50];
      v26 = (const void **)MEMORY[0x1E0C9AE40];
    }
    v27 = v24 == 0;
LABEL_134:
    if (v27)
      v25 = v26;
    goto LABEL_136;
  }
  v17 = *(const __CFString **)(DerivedStorage + 40);
  if (v17)
LABEL_23:
    v17 = (const __CFString *)CFRetain(v17);
LABEL_24:
  *a4 = v17;
LABEL_46:
  if (a5)
    *a5 = SupportedFeatures;
  return 1;
}

uint64_t endpoint_copyPropertyInternal(const void *a1, const void *a2, const __CFAllocator *a3, CFMutableArrayRef *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef *v9;
  uint64_t v10;
  uint64_t v11;
  CFMutableDictionaryRef Mutable;
  uint64_t v13;
  void *Copy;
  uint64_t CMBaseObject;
  uint64_t (*v16)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v17;
  const __CFDictionary *v19;
  const void **v20;
  const void **v21;
  BOOL v22;
  CFNumberRef v23;
  int v24;
  uint64_t v25;
  int isURLPlaybackEnabled;
  uint64_t EnabledFeatures;
  CFNumberRef v28;
  int v29;
  CFNumberRef v30;
  float v31;
  float v32;
  _BOOL4 v33;
  CFNumberRef v34;
  uint64_t v35;
  CFNumberRef v36;
  CFNumberRef v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  int v40;
  CFStringRef v41;
  CFNumberRef v42;
  int isConnected;
  uint64_t UpTimeNanoseconds;
  __CFString **v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = (CFTypeRef *)MEMORY[0x1E0CA41B8];
  if (*(_BYTE *)(DerivedStorage + 128)
    && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4468])
    && !CFEqual(a2, CFSTR("IsDissociated"))
    && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4260])
    && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4258])
    && !CFEqual(a2, *v9)
    && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4348]))
  {
    return 4294950573;
  }
  if (CFEqual(a2, *v9))
  {
    cf = 0;
    v10 = CMBaseObjectGetDerivedStorage();
    v11 = *MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (*(_BYTE *)(v10 + 128))
    {
LABEL_10:
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      v13 = 0;
      *a4 = Mutable;
LABEL_11:
      if (cf)
        CFRelease(cf);
      return v13;
    }
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v10 + 40));
    v16 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (v16)
    {
      v17 = v16(CMBaseObject, CFSTR("Descriptor"), v11, &cf);
      if (!(_DWORD)v17)
      {
        FigCFDictionarySetAllValuesFromDictionary();
        endpoint_setPropertyOnMXDescriptor(a1, (const void *)*MEMORY[0x1E0CA42E8]);
        endpoint_setPropertyOnMXDescriptor(a1, (const void *)*MEMORY[0x1E0CA42A8]);
        if (*(_DWORD *)(v10 + 152) == 2)
        {
          endpoint_setPropertyOnMXDescriptor(a1, (const void *)*MEMORY[0x1E0CA41D8]);
          endpoint_setPropertyOnMXDescriptor(a1, (const void *)*MEMORY[0x1E0CA41F8]);
          endpoint_setPropertyOnMXDescriptor(a1, (const void *)*MEMORY[0x1E0CA41F0]);
        }
        goto LABEL_10;
      }
      v13 = v17;
    }
    else
    {
      v13 = 4294954514;
    }
    APSLogErrorAt();
    if (Mutable)
      CFRelease(Mutable);
    goto LABEL_11;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4258]))
  {
    Copy = *(void **)(DerivedStorage + 456);
    if (!Copy)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4310]))
  {
    Copy = *(void **)(DerivedStorage + 464);
    if (Copy)
LABEL_22:
      Copy = (void *)CFRetain(Copy);
LABEL_23:
    v13 = 0;
    *a4 = (CFMutableArrayRef)Copy;
    return v13;
  }
  if (CFEqual(a2, CFSTR("EndpointMetrics")))
  {
    v19 = *(const __CFDictionary **)(DerivedStorage + 296);
    if (!v19)
    {
      Copy = 0;
      goto LABEL_23;
    }
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v19);
    if (Copy)
      goto LABEL_23;
LABEL_31:
    APSLogErrorAt();
    return 4294950575;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4348]))
  {
    Copy = *(void **)(DerivedStorage + 448);
    if (!Copy)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4260]))
  {
    v20 = (const void **)MEMORY[0x1E0C9AE50];
    v21 = (const void **)MEMORY[0x1E0C9AE40];
    v22 = *(_DWORD *)(DerivedStorage + 152) == 2;
    goto LABEL_38;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40A8]))
  {
    cf = 0;
    if (*(_DWORD *)(DerivedStorage + 152) == 2)
      cf = *(CFTypeRef *)(DerivedStorage + 144);
    v23 = CFNumberCreate(a3, kCFNumberSInt64Type, &cf);
    *a4 = v23;
    if (!v23)
      goto LABEL_31;
    return 0;
  }
  if (CFEqual(a2, CFSTR("IsDissociated")))
  {
    v20 = (const void **)MEMORY[0x1E0C9AE50];
    v24 = *(unsigned __int8 *)(DerivedStorage + 128);
    goto LABEL_53;
  }
  if (CFEqual(a2, CFSTR("IsInUse")))
  {
    v20 = (const void **)MEMORY[0x1E0C9AE50];
    v24 = *(_DWORD *)(DerivedStorage + 152);
    goto LABEL_53;
  }
  if (CFEqual(a2, CFSTR("IsEngaged")))
  {
    v20 = (const void **)MEMORY[0x1E0C9AE50];
    v24 = *(unsigned __int8 *)(DerivedStorage + 271);
    goto LABEL_53;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4388]))
  {
    Copy = *(void **)(DerivedStorage + 240);
    if (!Copy)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42D0]))
  {
    v20 = (const void **)MEMORY[0x1E0C9AE50];
    v24 = *(unsigned __int8 *)(DerivedStorage + 248);
    goto LABEL_53;
  }
  if (CFEqual(a2, CFSTR("EnabledFeatures")))
  {
    cf = 0;
    v25 = *(_QWORD *)(DerivedStorage + 168);
    isURLPlaybackEnabled = endpoint_isURLPlaybackEnabled((uint64_t)a1);
    EnabledFeatures = APEndpointGetEnabledFeatures(v25, isURLPlaybackEnabled, &cf);
    if (!(_DWORD)EnabledFeatures)
    {
      v28 = CFNumberCreate(a3, kCFNumberSInt64Type, &cf);
      *a4 = v28;
      if (!v28)
        goto LABEL_31;
      return 0;
    }
    v13 = EnabledFeatures;
LABEL_93:
    APSLogErrorAt();
    return v13;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43C8]))
    return endpoint_copyStreams((uint64_t)a1, a3, a4);
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40E0]))
  {
    v20 = (const void **)MEMORY[0x1E0C9AE50];
    v24 = *(unsigned __int8 *)(DerivedStorage + 491);
    goto LABEL_53;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44B8]))
  {
    APSVolumeConvertSliderValueToDB();
    LODWORD(cf) = v29;
    v30 = CFNumberCreate(a3, kCFNumberFloatType, &cf);
    *a4 = v30;
    if (!v30)
      goto LABEL_31;
    return 0;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44A0]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42F0]))
  {
    v31 = *(float *)(DerivedStorage + 516);
    v32 = 1.0;
    v33 = v31 > 1.0 || v31 < 0.0;
    if (v31 < 0.0 && v31 <= 1.0)
      v32 = 0.0;
    if (v33)
      v31 = v32;
    *(float *)&cf = v31;
    v34 = CFNumberCreate(a3, kCFNumberFloatType, &cf);
    *a4 = v34;
    if (!v34)
      goto LABEL_31;
    return 0;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44A8]))
  {
    v20 = (const void **)MEMORY[0x1E0C9AE40];
    v21 = (const void **)MEMORY[0x1E0C9AE50];
    v22 = *(_BYTE *)(DerivedStorage + 504) == 0;
LABEL_38:
    if (!v22)
      v20 = v21;
    goto LABEL_40;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44B0]))
  {
    cf = 0;
    v35 = endpoint_copyVolumeControlType((uint64_t)a1, &cf);
    if (!(_DWORD)v35)
    {
      v36 = CFNumberCreate(a3, kCFNumberSInt64Type, &cf);
      *a4 = v36;
      if (!v36)
        goto LABEL_31;
      return 0;
    }
    v13 = v35;
    goto LABEL_93;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4340]))
  {
    v20 = (const void **)MEMORY[0x1E0C9AE50];
    v24 = *(unsigned __int8 *)(DerivedStorage + 512);
    goto LABEL_53;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42B8]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42C0]))
  {
    v20 = (const void **)MEMORY[0x1E0C9AE50];
    v24 = *(unsigned __int8 *)(DerivedStorage + 520);
    goto LABEL_53;
  }
  if (CFEqual(a2, CFSTR("IsHALMuted")))
  {
    if (APEndpointIsHALMuteForUser())
    {
      if (!*(_BYTE *)(DerivedStorage + 520))
        goto LABEL_118;
    }
    else if (!*(_BYTE *)(DerivedStorage + 521))
    {
LABEL_118:
      v20 = (const void **)MEMORY[0x1E0C9AE40];
      goto LABEL_40;
    }
LABEL_105:
    v20 = (const void **)MEMORY[0x1E0C9AE50];
LABEL_40:
    Copy = (void *)*v20;
    goto LABEL_22;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42C8]))
  {
    v20 = (const void **)MEMORY[0x1E0C9AE50];
    v24 = *(unsigned __int8 *)(DerivedStorage + 521);
    goto LABEL_53;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4128]))
  {
    endpoint_copyAuthorizationType((uint64_t)a1, (const void **)a4);
    return 0;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4398]))
  {
    Copy = *(void **)(DerivedStorage + 200);
    if (!Copy)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (CFEqual(a2, CFSTR("EndpointStatus")))
  {
    v37 = CFNumberCreate(a3, kCFNumberSInt32Type, (const void *)(DerivedStorage + 156));
    *a4 = v37;
    if (!v37)
      goto LABEL_31;
    return 0;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA41F8]))
  {
    if (endpoint_isURLPlaybackEnabled((uint64_t)a1) && APSGetFBOPropertyInt64() > 0)
      goto LABEL_118;
    goto LABEL_105;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA41D8]))
  {
    if (endpoint_isURLPlaybackEnabled((uint64_t)a1))
    {
      v38 = *(_QWORD *)(DerivedStorage + 40);
      v39 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v39)
      {
        v40 = v39(v38, 35);
        v20 = (const void **)MEMORY[0x1E0C9AE50];
        if (v40)
          v20 = (const void **)MEMORY[0x1E0C9AE40];
        goto LABEL_40;
      }
    }
    goto LABEL_105;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA41F0]))
  {
    LOBYTE(cf) = 0;
    if (endpoint_isURLPlaybackEnabled((uint64_t)a1))
      endpoint_getBooleanFromExternalPlaybackCapabilitiesIfPresent();
    goto LABEL_105;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4208]))
  {
    LOBYTE(cf) = 0;
    if (endpoint_isURLPlaybackEnabled((uint64_t)a1) && APSSettingsIsFeatureEnabled())
      endpoint_getBooleanFromExternalPlaybackCapabilitiesIfPresent();
    goto LABEL_118;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42E0]))
    return endpoint_copyIsURLPlaybackEnabled((uint64_t)a1, (CFTypeRef *)a4);
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4470]))
  {
    if (!endpoint_isURLPlaybackEnabled((uint64_t)a1))
      return 4294954513;
    v41 = CFStringCreateWithFormat(a3, 0, CFSTR("%@-%llu"), *(_QWORD *)(DerivedStorage + 456), *(_QWORD *)(DerivedStorage + 136));
    *a4 = (CFMutableArrayRef)v41;
    if (!v41)
      goto LABEL_31;
    return 0;
  }
  if (CFEqual(a2, CFSTR("EndpointShowInfo")))
  {
    endpoint_copyShowInfoDictionary((uint64_t)a1, a4);
    return 0;
  }
  if (CFEqual(a2, CFSTR("AirPlayDiagnosticsTargetInfo")))
    return endpoint_copyAirPlayDiagnosticsDictionary((uint64_t)a1, a3, a4);
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40B0]))
  {
    cf = 0;
    if (*(_QWORD *)(DerivedStorage + 224))
      cf = *(CFTypeRef *)(DerivedStorage + 136);
    v42 = CFNumberCreate(a3, kCFNumberSInt64Type, &cf);
    *a4 = v42;
    if (!v42)
      goto LABEL_31;
    return 0;
  }
  if (CFEqual(a2, CFSTR("MetadataSourceTestingOnly")))
  {
    Copy = *(void **)(DerivedStorage + 192);
    if (!Copy)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4280]))
  {
    isConnected = endpoint_isConnected();
    v20 = (const void **)MEMORY[0x1E0C9AE50];
    if (!isConnected)
      v20 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_40;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4130]))
  {
    v20 = (const void **)MEMORY[0x1E0C9AE50];
    v24 = *(unsigned __int8 *)(DerivedStorage + 488);
    goto LABEL_53;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4330]))
  {
    v20 = (const void **)MEMORY[0x1E0C9AE50];
    v24 = *(unsigned __int8 *)(DerivedStorage + 490);
    goto LABEL_53;
  }
  if (CFEqual(a2, CFSTR("EligibleForFastReactivate")))
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    if (*(_QWORD *)(DerivedStorage + 552) >= *(_QWORD *)(DerivedStorage + 72)
      || UpTimeNanoseconds >= *(_QWORD *)(DerivedStorage + 560))
    {
      goto LABEL_118;
    }
    goto LABEL_105;
  }
  if (CFEqual(a2, CFSTR("ReceiverSessionIsActive")))
  {
    v45 = kAPEndpointDescriptionProperty_ReceiverSessionIsActive;
  }
  else
  {
    if (CFEqual(a2, CFSTR("IsMediaPresentationModeAvailable")))
    {
      v20 = (const void **)MEMORY[0x1E0C9AE50];
      v24 = *(unsigned __int8 *)(DerivedStorage + 280);
LABEL_53:
      if (!v24)
        v20 = (const void **)MEMORY[0x1E0C9AE40];
      goto LABEL_40;
    }
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42B0]))
    {
      if (CFEqual(a2, CFSTR("ActivationStage")))
      {
        Copy = (void *)FigCFNumberCreateSInt64();
        goto LABEL_23;
      }
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4110]))
        return 4294954512;
      v46 = *(_QWORD *)(DerivedStorage + 40);
      v47 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (!v47 || !v47(v46, 86))
        goto LABEL_118;
      goto LABEL_105;
    }
    v45 = kAPEndpointDescriptionProperty_IsLowFidelitySpeaker;
  }
  return APEndpointDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 40), (uint64_t)*v45, (uint64_t)a3, (uint64_t)a4);
}

uint64_t endpoint_copyAirPlayDiagnosticsDNSName(uint64_t a1, const __CFAllocator *a2, CFStringRef *a3, CFStringRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v10;
  uint64_t v11;
  CFStringRef v12;
  CFStringRef v13;
  CFTypeRef cf;
  char cStr[1024];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  bzero(cStr, 0x400uLL);
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v9)
  {
    v10 = v9(CMBaseObject, CFSTR("TransportDevice"), *MEMORY[0x1E0C9AE00], &cf);
    if ((_DWORD)v10)
    {
      v11 = v10;
    }
    else
    {
      if (a3)
      {
        if (APTransportDeviceGetAddress())
        {
          if (gLogCategory_APEndpoint <= 50
            && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v12 = 0;
        }
        else
        {
          v12 = CFStringCreateWithCString(a2, cStr, 0x8000100u);
        }
        *a3 = v12;
      }
      if (a4)
      {
        if (APTransportDeviceGetAddress())
        {
          if (gLogCategory_APEndpoint <= 50
            && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v13 = 0;
        }
        else
        {
          v13 = CFStringCreateWithCString(a2, cStr, 0x8000100u);
        }
        v11 = 0;
        *a4 = v13;
      }
      else
      {
        v11 = 0;
      }
    }
  }
  else
  {
    v11 = 4294954514;
  }
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t endpoint_copyIsGroupable(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v9;
  int IsModernPresentOnInfra;
  uint64_t Int64;
  BOOL v12;
  char v13;
  CFTypeRef *v14;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v4 = *(const void **)(DerivedStorage + 56);
  if (v4)
  {
    v5 = 0;
    *a2 = CFRetain(v4);
  }
  else
  {
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
    v8 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
    if (v8)
    {
      v5 = v8(CMBaseObject, CFSTR("TransportDevice"), *MEMORY[0x1E0C9AE00], &cf);
      v9 = cf;
      if (!(_DWORD)v5)
      {
        IsModernPresentOnInfra = APTransportDeviceIsModernPresentOnInfra();
        Int64 = APSSettingsGetInt64();
        if (Int64
          && gLogCategory_APEndpoint <= 50
          && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (!APSGetFBOPropertyInt64()
          || !APSGetFBOPropertyInt64()
          || (!APSGetFBOPropertyInt64() ? (v12 = IsModernPresentOnInfra == 0) : (v12 = 1),
              !v12 ? (v13 = 0) : (v13 = 1),
              Int64 || (v13 & 1) != 0))
        {
          v14 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
        }
        else
        {
          v14 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
        }
        *a2 = CFRetain(*v14);
        v9 = cf;
      }
      if (v9)
        CFRelease(v9);
    }
    else
    {
      return 4294954514;
    }
  }
  return v5;
}

uint64_t endpoint_copyPropertyForFirstDisplay(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  CFAllocatorRef v7;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  uint64_t v10;
  uint64_t v11;
  CFTypeID v12;
  const void *ValueAtIndex;
  CFAllocatorRef v14;
  CFTypeRef cf;

  cf = 0;
  v6 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  v7 = CFGetAllocator(a1);
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(v6);
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
  if (!v9)
  {
    v11 = 4294954514;
LABEL_10:
    APSLogErrorAt();
    goto LABEL_11;
  }
  v10 = v9(CMBaseObject, CFSTR("DisplayDescriptionArray"), v7, &cf);
  v11 = v10;
  if ((_DWORD)v10 == -71754)
    goto LABEL_11;
  if ((_DWORD)v10)
    goto LABEL_10;
  if (cf)
  {
    v12 = CFGetTypeID(cf);
    if (v12 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)cf) > 0)
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, 0);
      v14 = CFGetAllocator(a1);
      v11 = APEndpointDisplayDescriptionCopyProperty((uint64_t)ValueAtIndex, a2, (uint64_t)v14, a3);
      if (!(_DWORD)v11)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  APSLogErrorAt();
  v11 = 4294950576;
LABEL_11:
  if (cf)
    CFRelease(cf);
  return v11;
}

void endpoint_getBooleanFromExternalPlaybackCapabilitiesIfPresent()
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  void (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v2)
    v2(CMBaseObject, CFSTR("ExternalPlaybackCapabilities"), *MEMORY[0x1E0C9AE00], &cf);
  FigCFDictionaryGetBooleanIfPresent();
  if (cf)
    CFRelease(cf);
}

uint64_t endpoint_copyAirPlayEndpointProperties(uint64_t a1, int a2, __CFDictionary **a3)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFString *v8;
  uint64_t v9;
  __CFDictionary *MutableCopy;
  __CFDictionary *v11;
  const void **v12;
  uint64_t v13;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v7)
  {
    v13 = 4294954514;
LABEL_13:
    APSLogErrorAt();
    goto LABEL_14;
  }
  if (a2)
    v8 = CFSTR("AirPlayClusterCompatibleEndpointProperties");
  else
    v8 = CFSTR("AirPlayEndpointProperties");
  v9 = v7(CMBaseObject, v8, *MEMORY[0x1E0C9AE00], &cf);
  if ((_DWORD)v9)
  {
    v13 = v9;
    goto LABEL_13;
  }
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    v11 = MutableCopy;
    if (!a2)
    {
      v12 = (const void **)MEMORY[0x1E0C9AE50];
      if (!*(_BYTE *)(DerivedStorage + 49))
        v12 = (const void **)MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(MutableCopy, CFSTR("IsLocalDevice"), *v12);
    }
    v13 = 0;
    *a3 = v11;
  }
  else
  {
    APSLogErrorAt();
    v13 = 4294950575;
  }
LABEL_14:
  if (cf)
    CFRelease(cf);
  return v13;
}

uint64_t endpoint_getSupportedFeatures(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, CFTypeRef *);
  uint64_t v8;
  _BOOL8 v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  v4 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 48))
  {
    v5 = 16;
LABEL_19:
    v12 = 0;
    *a2 = v5;
    goto LABEL_20;
  }
  v6 = *(_QWORD *)(DerivedStorage + 40);
  v7 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v7)
  {
    v8 = v7(v6, &cf);
    if (!(_DWORD)v8)
    {
      v9 = APSFeaturesHasFeature() != 0;
      v10 = (APSFeaturesHasFeature() != 0) | (unint64_t)(2 * v9);
      if (APSGetFBOPropertyInt64())
        v5 = v10 | 8;
      else
        v5 = v10;
      v11 = *(_DWORD *)(v4 + 104);
      if (v11 == 4)
      {
        if (APSGetFBOPropertyInt64() && endpoint_isInLocalCluster())
          v5 |= 0x20uLL;
        v11 = *(_DWORD *)(v4 + 104);
      }
      if ((v11 > 0xD || ((1 << v11) & 0x2090) == 0)
        && (APSFeaturesHasFeature() || APSFeaturesHasFeature()))
      {
        v5 |= 4uLL;
      }
      goto LABEL_19;
    }
    v12 = v8;
  }
  else
  {
    v12 = 4294954514;
  }
  APSLogErrorAt();
LABEL_20:
  if (cf)
    CFRelease(cf);
  return v12;
}

BOOL endpoint_isThirdPartyTVFamily()
{
  CMBaseObjectGetDerivedStorage();
  return APSGetFBOPropertyInt64() != 0;
}

BOOL endpoint_isInLocalCluster()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v1 = *(_QWORD *)(DerivedStorage + 96);
  if (v1)
    return v1 == *MEMORY[0x1E0C9AE50];
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
  v4 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v4)
    v4(CMBaseObject, CFSTR("ClusterUUID"), *MEMORY[0x1E0C9AE00], &cf);
  v2 = APSHasSamePersistentGroupUUID();
  if (cf)
    CFRelease(cf);
  return v2;
}

uint64_t endpoint_isURLPlaybackEnabled(uint64_t a1)
{
  uint64_t v1;
  CFTypeRef cf;

  cf = 0;
  endpoint_copyIsURLPlaybackEnabled(a1, &cf);
  v1 = FigCFEqual();
  if (cf)
    CFRelease(cf);
  return v1;
}

uint64_t endpoint_copyStreams(uint64_t a1, const __CFAllocator *a2, CFMutableArrayRef *a3)
{
  uint64_t DerivedStorage;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v7;
  const __CFDictionary *v8;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFArrayCreateMutable(a2, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v7 = Mutable;
    v8 = *(const __CFDictionary **)(DerivedStorage + 168);
    if (v8)
      CFDictionaryApplyFunction(v8, (CFDictionaryApplierFunction)endpoint_copyStreamsDictionaryEntry, v7);
    result = 0;
    *a3 = v7;
  }
  else
  {
    APSLogErrorAt();
    return 4294950575;
  }
  return result;
}

uint64_t endpoint_copyVolumeControlType(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  int v4;
  uint64_t v5;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  v4 = *(_DWORD *)(DerivedStorage + 496) - 1;
  if (v4 > 3)
    v5 = 0;
  else
    v5 = qword_1C964DE08[v4];
  *a2 = v5;
  if (gLogCategory_APEndpoint > 30)
    return 0;
  if (gLogCategory_APEndpoint != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
  {
    APSGetFigEndpointVolumeControlTypeName();
    APSGetAPVolumeControlTypeName();
    LogPrintF();
    return 0;
  }
  return result;
}

CFTypeRef endpoint_copyAuthorizationType(uint64_t a1, const void **a2)
{
  const void **v3;
  const void *v4;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 268) || !APSGetFBOPropertyInt64())
    v3 = (const void **)MEMORY[0x1E0CA37F0];
  else
    v3 = (const void **)MEMORY[0x1E0CA37F8];
  v4 = *v3;
  *a2 = *v3;
  return CFRetain(v4);
}

uint64_t endpoint_copyIsURLPlaybackEnabled(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t SupportedFeatures;
  CFTypeRef *v7;
  unint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 0;
  if (a2)
  {
    v5 = DerivedStorage;
    SupportedFeatures = endpoint_getSupportedFeatures(a1, (uint64_t *)&v9);
    if ((_DWORD)SupportedFeatures)
    {
      APSLogErrorAt();
    }
    else
    {
      if (((v9 >> 2) & 1 & (*(_DWORD *)(v5 + 144) >> 2)) != 0)
        v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      else
        v7 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      *a2 = CFRetain(*v7);
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950576;
  }
  return SupportedFeatures;
}

void endpoint_copyShowInfoDictionary(uint64_t a1, __CFDictionary **a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v12;
  void (*v13)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v14;
  void (*v15)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v16;
  void (*v17)(uint64_t, CFTypeRef *);
  uint64_t v18;
  void (*v19)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v20;
  void (*v21)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v22;
  void (*v23)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v24;
  void (*v25)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  const __CFDictionary *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, const __CFString *, uint64_t, void **);
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  void *value;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef cf[2];
  __int16 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v36 = 0;
  cf[0] = 0;
  value = 0;
  v35 = 0;
  v38 = 0;
  cf[1] = 0;
  v4 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v6 = Mutable;
    SNPrintF();
    CFDictionarySetCString();
    v7 = (const void *)*MEMORY[0x1E0C9AE50];
    v8 = (const void *)*MEMORY[0x1E0C9AE40];
    if (*(_QWORD *)(DerivedStorage + 224))
      v9 = (const void *)*MEMORY[0x1E0C9AE50];
    else
      v9 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(v6, CFSTR("Activated"), v9);
    CFDictionarySetValue(v6, CFSTR("Name"), *(const void **)(DerivedStorage + 448));
    CFDictionarySetValue(v6, CFSTR("DeviceID"), *(const void **)(DerivedStorage + 456));
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
    v11 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v11)
      v11(CMBaseObject, CFSTR("TransportDevice"), v4, cf);
    if (cf[0])
    {
      APTransportDeviceGetDiscoveryID();
      FigCFDictionarySetValue();
      if (cf[0])
      {
        CFRelease(cf[0]);
        cf[0] = 0;
      }
    }
    v12 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
    v13 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v13)
      v13(v12, CFSTR("Model"), v4, &v36);
    FigCFDictionarySetValue();
    if (v36)
    {
      CFRelease(v36);
      v36 = 0;
    }
    v14 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
    v15 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v15)
      v15(v14, CFSTR("SourceVersion"), v4, &v36);
    FigCFDictionarySetValue();
    if (v36)
    {
      CFRelease(v36);
      v36 = 0;
    }
    v16 = *(_QWORD *)(DerivedStorage + 40);
    v17 = *(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v17)
      v17(v16, &v35);
    FigCFDictionarySetValue();
    if (v35)
    {
      CFRelease(v35);
      v35 = 0;
    }
    v18 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
    v19 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v19)
      v19(v18, CFSTR("StatusFlags"), v4, &v36);
    FigCFDictionarySetValue();
    if (v36)
    {
      CFRelease(v36);
      v36 = 0;
    }
    v20 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
    v21 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v21)
      v21(v20, CFSTR("IsClusterLeader"), v4, &v36);
    FigCFDictionarySetValue();
    if (v36)
    {
      CFRelease(v36);
      v36 = 0;
    }
    v22 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
    v23 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v23)
      v23(v22, CFSTR("AccessControlType"), v4, &v36);
    FigCFDictionarySetValue();
    if (v36)
    {
      CFRelease(v36);
      v36 = 0;
    }
    v24 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
    v25 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v25)
      v25(v24, CFSTR("HKAccessControlLevel"), v4, &v36);
    FigCFDictionarySetValue();
    if (v36)
    {
      CFRelease(v36);
      v36 = 0;
    }
    v26 = *(const __CFDictionary **)(DerivedStorage + 168);
    if (v26)
      CFDictionaryApplyFunction(v26, (CFDictionaryApplierFunction)endpoint_copyShowInfoForStreamsDictionaryEntry, v6);
    v27 = *(_QWORD *)(DerivedStorage + 224);
    if (v27
      && (v28 = APSenderSessionGetCMBaseObject(v27),
          (v29 = *(void (**)(uint64_t, const __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48)) != 0))
    {
      v29(v28, CFSTR("ShowInfo"), v4, &value);
      v30 = v8;
      if (value)
      {
        CFDictionarySetValue(v6, CFSTR("SenderSessionInfo"), value);
        FigCFDictionaryGetBooleanIfPresent();
        v30 = v8;
      }
    }
    else
    {
      v30 = v8;
    }
    CFDictionarySetValue(v6, CFSTR("Started"), v30);
    CFDictionarySetValue(v6, CFSTR("NAPS"), v7);
    CFDictionarySetInt64();
    if (*(_BYTE *)(DerivedStorage + 488))
      v31 = v7;
    else
      v31 = v8;
    CFDictionarySetValue(v6, CFSTR("AutoconnectEnabled"), v31);
    if (*(_BYTE *)(DerivedStorage + 48))
      v32 = v7;
    else
      v32 = v8;
    CFDictionarySetValue(v6, CFSTR("IsRemoteControlEndpoint"), v32);
    if (*(_BYTE *)(DerivedStorage + 49))
      v33 = v7;
    else
      v33 = v8;
    CFDictionarySetValue(v6, CFSTR("IsLocal"), v33);
    *a2 = v6;
    if (value)
      CFRelease(value);
  }
  else
  {
    APSLogErrorAt();
  }
  if (v36)
    CFRelease(v36);
}

uint64_t endpoint_copyAirPlayDiagnosticsDictionary(uint64_t a1, CFAllocatorRef allocator, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef cf;
  void *value;

  cf = 0;
  value = 0;
  Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v7 = Mutable;
    v8 = endpoint_copyAirPlayDiagnosticsDNSName(a1, allocator, (CFStringRef *)&value, (CFStringRef *)&cf);
    if ((_DWORD)v8)
    {
      v9 = v8;
      APSLogErrorAt();
      CFRelease(v7);
    }
    else
    {
      if (value)
        CFDictionarySetValue(v7, CFSTR("InfraDNSName"), value);
      if (cf)
        CFDictionarySetValue(v7, CFSTR("PeerToPeerDNSName"), cf);
      v9 = 0;
      *a3 = v7;
    }
  }
  else
  {
    APSLogErrorAt();
    v9 = APSSignalErrorAt();
  }
  if (value)
    CFRelease(value);
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t endpoint_isConnected()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 224);
  if (!v1)
    return *(unsigned __int8 *)(DerivedStorage + 320);
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v2)
    return *(unsigned __int8 *)(DerivedStorage + 320);
  result = v2(v1);
  if (!(_DWORD)result)
    return *(unsigned __int8 *)(DerivedStorage + 320);
  return result;
}

void endpoint_setPropertyOnMXDescriptor(const void *a1, const void *a2)
{
  uint64_t v4;
  CFTypeRef cf;
  int v6;

  v6 = 0;
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (endpoint_copyStaticProperty((uint64_t)a1, a2, &cf, &v6)
    || (v4 = *MEMORY[0x1E0C9AE00],
        endpoint_copyPropertyFromEndpointDescription(a1, a2, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], (CFStringRef *)&cf, &v6)))
  {
    if (!v6)
    {
LABEL_4:
      FigCFDictionarySetValue();
      goto LABEL_5;
    }
  }
  else
  {
    v6 = endpoint_copyPropertyInternal(a1, a2, v4, &cf);
    if (!v6)
      goto LABEL_4;
  }
  APSLogErrorAt();
LABEL_5:
  if (cf)
    CFRelease(cf);
}

void endpoint_copyStreamsDictionaryEntry(int a1, const void *a2, CFMutableArrayRef theArray)
{
  CFArrayAppendValue(theArray, a2);
}

void endpoint_copyShowInfoForStreamsDictionaryEntry(const void *a1, uint64_t a2, __CFDictionary *a3)
{
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, const __CFString *, _QWORD, void **);
  __CFString **v7;
  void *value;

  value = 0;
  CMBaseObject = FigEndpointStreamGetCMBaseObject();
  v6 = *(void (**)(uint64_t, const __CFString *, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (v6)
  {
    v6(CMBaseObject, CFSTR("EndpointStreamShowInfo"), *MEMORY[0x1E0C9AE00], &value);
    if (value)
    {
      if (!a1)
      {
        APSLogErrorAt();
        goto LABEL_18;
      }
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA4880]))
      {
        v7 = kAPEndpointShowInfoKey_StreamInfo_RealTimeAudio;
      }
      else if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA4888]))
      {
        v7 = kAPEndpointShowInfoKey_StreamInfo_BufferedAudio;
      }
      else if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA48A0]))
      {
        v7 = kAPEndpointShowInfoKey_StreamInfo_Screen;
      }
      else
      {
        if (!CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA4890]))
          goto LABEL_18;
        v7 = kAPEndpointShowInfoKey_StreamInfo_LowLatencyAudio;
      }
      if (*v7)
      {
        CFDictionarySetValue(a3, *v7, value);
        goto LABEL_14;
      }
LABEL_18:
      APSLogErrorAt();
LABEL_14:
      if (value)
        CFRelease(value);
    }
  }
}

uint64_t endpointdelegate_setVolumeSliderInternal(const void *a1, int a2, int a3, float a4)
{
  uint64_t DerivedStorage;
  BOOL v9;
  char v10;
  uint64_t v11;
  char v13;
  char v14;
  uint64_t v15;
  __CFDictionary *Mutable;
  __CFDictionary *v17;
  uint64_t v18;
  uint64_t v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    v9 = *(_BYTE *)(DerivedStorage + 50) == 0;
  else
    v9 = 1;
  v10 = !v9;
  if (*(_BYTE *)(DerivedStorage + 48))
  {
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    return 0;
  }
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
  {
    APSVolumeConvertSliderValueToDB();
    LogPrintF();
  }
  if (!APSGetFBOPropertyInt64())
    return 0;
  v11 = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
  {
    APSVolumeConvertSliderValueToDB();
    APSVolumeConvertSliderValueToDB();
    LogPrintF();
  }
  if (*(_BYTE *)(v11 + 51) && (*(_DWORD *)(v11 + 508) - 5) < 0xFFFFFFFE)
  {
    if (a3)
    {
      if (*(_BYTE *)(v11 + 520))
      {
        v13 = 0;
        *(_BYTE *)(v11 + 520) = 0;
        goto LABEL_27;
      }
    }
  }
  else if (a3)
  {
    if (*(_BYTE *)(v11 + 520) || (v14 = *(_BYTE *)(v11 + 521)) != 0)
    {
      v13 = 0;
      *(_WORD *)(v11 + 520) = 0;
      goto LABEL_27;
    }
  }
  v13 = 1;
  if (vabds_f32(a4, *(float *)(v11 + 516)) < 0.00000011921)
    return 0;
LABEL_27:
  *(float *)(v11 + 516) = a4;
  if ((v10 & 1) != 0)
  {
LABEL_36:
    endpointdelegate_sendCurrentVolumeToReceiver(a1);
    return 0;
  }
  v15 = CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v19 = 4294960568;
LABEL_46:
    APSLogErrorAt();
    APSLogErrorAt();
    return v19;
  }
  v17 = Mutable;
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA4258], *(const void **)(v15 + 456));
  FigCFDictionarySetFloat();
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  CFRelease(v17);
  if ((v13 & 1) == 0)
  {
    v18 = endpoint_postMuteDidChangeNotification();
    if ((_DWORD)v18)
    {
      v19 = v18;
      goto LABEL_46;
    }
  }
  if (a2)
    goto LABEL_36;
  return 0;
}

uint64_t endpointdelegate_setIsMuted(const void *a1, int a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  uint64_t v19;
  __CFDictionary *v20;
  int v21;
  __CFDictionary *Mutable;
  const __CFString *v23;
  uint64_t v24;
  float v25;
  float v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = DerivedStorage;
  v8 = *(_DWORD *)(DerivedStorage + 508);
  v9 = (v8 - 1) < 2;
  v10 = v8 == 2;
  v11 = (v8 - 3) < 2;
  v12 = v8 == 4;
  if (a3)
    v13 = v9;
  else
    v13 = v10;
  if (a3)
    v14 = v11;
  else
    v14 = v12;
  v15 = (_BYTE *)(DerivedStorage + 520);
  v16 = (_BYTE *)(DerivedStorage + 521);
  if (a3)
    v17 = (_BYTE *)(DerivedStorage + 520);
  else
    v17 = (_BYTE *)(DerivedStorage + 521);
  if (*(_BYTE *)(DerivedStorage + 520))
    v18 = 1;
  else
    v18 = *v16 != 0;
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (*v17 == a2)
    return 0;
  *v17 = a2;
  if (!v13)
  {
    if (v14)
    {
      if (*v15)
      {
        v21 = 1;
      }
      else
      {
        v21 = *v16;
        if (*v16)
          v21 = *(_DWORD *)(v7 + 508) == 4;
      }
      if (v21 != v18)
      {
        v24 = CMBaseObjectGetDerivedStorage();
        APSVolumeConvertDBToSliderValue();
        if (a2 == 1)
        {
          APSVolumeConvertDBToSliderValue();
          v26 = v25;
          v27 = *(_DWORD *)(v24 + 516);
        }
        else
        {
          v26 = *(float *)(v24 + 524);
          APSVolumeConvertDBToSliderValue();
        }
        *(_DWORD *)(v24 + 524) = v27;
        if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          LogPrintF();
        v29 = endpointdelegate_setVolumeSliderInternal(a1, 1, 0, v26);
        if ((_DWORD)v29)
        {
          v19 = v29;
          APSLogErrorAt();
          APSLogErrorAt();
          return v19;
        }
      }
    }
    v20 = 0;
    goto LABEL_49;
  }
  if (a3)
  {
    v20 = 0;
LABEL_27:
    if (a2 == 1)
      v23 = CFSTR("mute");
    else
      v23 = CFSTR("unmute");
    if (gLogCategory_APEndpoint <= 40 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v28 = apEndpoint_sendCommandInternal(a1, v23, v20);
    if ((_DWORD)v28)
    {
      v19 = v28;
      goto LABEL_60;
    }
    if (!a3)
      goto LABEL_52;
    *(_BYTE *)(v7 + 532) = a2;
LABEL_49:
    v19 = 0;
    if (!a3 || !*(_BYTE *)(v7 + 51))
      goto LABEL_55;
    if (*(_BYTE *)(v7 + 50))
    {
LABEL_52:
      v19 = 0;
      if (!v20)
        return v19;
      goto LABEL_56;
    }
    v19 = endpoint_postMuteDidChangeNotification();
    if (!(_DWORD)v19)
    {
LABEL_55:
      if (!v20)
        return v19;
LABEL_56:
      CFRelease(v20);
      return v19;
    }
LABEL_60:
    APSLogErrorAt();
    if (!v20)
      return v19;
    goto LABEL_56;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v20 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("muteIsProgrammatic"), (const void *)*MEMORY[0x1E0C9AE50]);
    goto LABEL_27;
  }
  APSLogErrorAt();
  return 0;
}

uint64_t endpoint_setAuthorizationString(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  uint64_t v6;
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, const void *);
  uint64_t v9;
  const void *v10;
  const void *v12;

  v12 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  endpoint_copyAuthorizationType(a1, &v12);
  if (a2)
  {
    v5 = *(const void **)(DerivedStorage + 472);
    *(_QWORD *)(DerivedStorage + 472) = a2;
    CFRetain(a2);
    if (!v5)
      goto LABEL_4;
    goto LABEL_3;
  }
  v10 = v12;
  if (FigCFEqual())
  {
    v9 = 0;
    if (!v10)
      return v9;
    goto LABEL_15;
  }
  v5 = *(const void **)(DerivedStorage + 472);
  *(_QWORD *)(DerivedStorage + 472) = 0;
  if (v5)
LABEL_3:
    CFRelease(v5);
LABEL_4:
  v6 = *(_QWORD *)(DerivedStorage + 224);
  if (v6)
  {
    CMBaseObject = APSenderSessionGetCMBaseObject(v6);
    v8 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
    if (v8)
    {
      v9 = v8(CMBaseObject, CFSTR("AuthorizationString"), a2);
      if (!(_DWORD)v9)
        goto LABEL_14;
    }
    else
    {
      v9 = 4294954514;
    }
    APSLogErrorAt();
  }
  else
  {
    v9 = 0;
  }
LABEL_14:
  v10 = v12;
  if (v12)
LABEL_15:
    CFRelease(v10);
  return v9;
}

uint64_t endpointdelegate_sendCurrentVolumeToReceiver(const void *a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  CFNumberRef v5;
  int valuePtr;

  result = CMBaseObjectGetDerivedStorage();
  v3 = result;
  if (*(_BYTE *)(result + 128))
  {
    if (gLogCategory_APEndpoint <= 50)
    {
      if (gLogCategory_APEndpoint != -1)
        return LogPrintF();
      result = _LogCategory_Initialize();
      if ((_DWORD)result)
        return LogPrintF();
    }
  }
  else
  {
    CMBaseObjectGetDerivedStorage();
    APSVolumeConvertSliderValueToDB();
    valuePtr = v4;
    if (*(_QWORD *)(v3 + 312))
    {
      v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &valuePtr);
      CFSetApplyFunction(*(CFSetRef *)(v3 + 312), (CFSetApplierFunction)endpoint_setVolumePropertyOnPlaybackSessions, v5);
      if (v5)
        CFRelease(v5);
    }
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    CFRetain(a1);
    return APSDispatchAsyncFHelper();
  }
  return result;
}

uint64_t endpoint_postMuteDidChangeNotification()
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  __CFDictionary *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v2 = Mutable;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA4258], *(const void **)(DerivedStorage + 456));
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v2);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960568;
  }
}

uint64_t endpoint_setVolumePropertyOnPlaybackSessions(uint64_t a1, uint64_t a2)
{
  uint64_t CMBaseObject;
  uint64_t result;
  uint64_t (*v5)(uint64_t, const __CFString *, uint64_t);

  CMBaseObject = FigEndpointPlaybackSessionGetCMBaseObject();
  result = CMBaseObjectGetVTable();
  v5 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v5)
    return v5(CMBaseObject, CFSTR("VolumeDB"), a2);
  return result;
}

void endpointdelegate_sendSetVolumeMessageIfNeeded(uint64_t a1)
{
  const void *v1;
  float v2;
  int v3;
  uint64_t DerivedStorage;
  float v5;
  float v6;
  int v7;
  const void *v8;
  CFTypeRef v9;
  unsigned int (*v10)(CFTypeRef);

  v1 = *(const void **)a1;
  v2 = *(float *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 12);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((v2 < -30.0 || v2 > 0.0) && APSVolumeDBValuesAreNoticeablyDifferent())
    v2 = -20.0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  CMBaseObjectGetDerivedStorage();
  APSVolumeConvertSliderValueToDB();
  v6 = v5;
  v7 = *(unsigned __int8 *)(DerivedStorage + 532);
  v8 = *(const void **)(DerivedStorage + 224);
  if (v8)
    v9 = CFRetain(v8);
  else
    v9 = 0;
  if (!APSGetFBOPropertyInt64() && APSSettingsGetIntWithDefault())
  {
    if (!APSVolumeDBValuesAreNoticeablyDifferent())
      v2 = -144.0;
    if (!APSVolumeDBValuesAreNoticeablyDifferent())
      v6 = -144.0;
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  if (!v9)
  {
    if (gLogCategory_APEndpoint > 50 || gLogCategory_APEndpoint == -1 && !_LogCategory_Initialize())
      goto LABEL_38;
LABEL_51:
    LogPrintF();
    goto LABEL_38;
  }
  if (vabds_f32(v2, v6) >= 0.00000011921)
  {
    if (gLogCategory_APEndpoint > 50 || gLogCategory_APEndpoint == -1 && !_LogCategory_Initialize())
      goto LABEL_38;
    goto LABEL_51;
  }
  if (!APSVolumeDBValuesAreNoticeablyDifferent() && !v7 && !v3)
  {
    if (gLogCategory_APEndpoint > 30 || gLogCategory_APEndpoint == -1 && !_LogCategory_Initialize())
      goto LABEL_38;
    goto LABEL_51;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  *(float *)(DerivedStorage + 528) = v2;
  *(_BYTE *)(DerivedStorage + 532) = 0;
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  v10 = *(unsigned int (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v10 && v10(v9))
  {
    if (!APSVolumeDBValuesAreNoticeablyDifferent() && (*(_BYTE *)(DerivedStorage + 536) & 0x20) != 0)
    {
      if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      endpoint_sendSetVolumeMessage(-30.0, (uint64_t)v1, (uint64_t)v9);
    }
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    endpoint_sendSetVolumeMessage(v2, (uint64_t)v1, (uint64_t)v9);
  }
  else
  {
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    APSSetFBOPropertyDouble();
  }
LABEL_38:
  if (v1)
    CFRelease(v1);
  if (v9)
    CFRelease(v9);
}

void endpoint_sendSetVolumeMessage(float a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __CFString *Mutable;
  __CFString *v7;
  unsigned int (*v8)(uint64_t);
  uint64_t CMBaseObject;
  uint64_t (*v10)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v11;
  int v12;
  CFTypeRef v13;
  uint64_t (*v14)(CFTypeRef, uint64_t, _QWORD, _QWORD);
  CFTypeRef cf;

  v5 = *MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (Mutable)
  {
    v7 = Mutable;
    CFStringAppendFormat(Mutable, 0, CFSTR("volume: %f\r\n"), a1);
    if (FigCreateBlockBufferWithCFString())
    {
LABEL_24:
      APSLogErrorAt();
      goto LABEL_22;
    }
    CMBaseObjectGetDerivedStorage();
    cf = 0;
    if (!a3)
    {
LABEL_22:
      CFRelease(v7);
      return;
    }
    v8 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v8 || !v8(a3))
    {
      v12 = 0;
      goto LABEL_19;
    }
    CMBaseObject = APSenderSessionGetCMBaseObject(a3);
    v10 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (v10)
    {
      v11 = v10(CMBaseObject, CFSTR("TransportControlStream"), v5, &cf);
      if (v11)
      {
        v12 = v11;
      }
      else
      {
        if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          LogPrintF();
        v13 = cf;
        v14 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 56);
        if (v14)
        {
          v12 = v14(v13, 1937141612, 0, 0);
          if (!v12)
            goto LABEL_19;
        }
        else
        {
          v12 = -12782;
        }
      }
    }
    else
    {
      v12 = -12782;
    }
    APSLogErrorAt();
LABEL_19:
    if (cf)
      CFRelease(cf);
    if (!v12)
      goto LABEL_22;
    goto LABEL_24;
  }
  APSLogErrorAt();
}

uint64_t apEndpoint_sendCommandInternal(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  unsigned int (*v8)(uint64_t);
  uint64_t v9;
  const void *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 40 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v7 = *(_QWORD *)(DerivedStorage + 224);
  if (v7
    && (v8 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16)) != 0
    && v8(v7))
  {
    if (*(_BYTE *)(DerivedStorage + 128))
      v9 = 4294950573;
    else
      v9 = 0;
  }
  else
  {
    v9 = 4294950570;
  }
  CFRetain(a1);
  CFRetain(*(CFTypeRef *)(DerivedStorage + 40));
  CFRetain(a2);
  if (a3)
    CFRetain(a3);
  v10 = *(const void **)(DerivedStorage + 224);
  if (v10)
    CFRetain(v10);
  APSDispatchAsyncFHelper();
  return v9;
}

void apEndpoint_sendCommand(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  const __CFDictionary *v6;
  CFMutableDictionaryRef v7;
  CFMutableDictionaryRef v8;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v10;
  const void *v11;
  const __CFArray *v12;
  const void *v13;
  const __CFArray *v14;
  uint64_t v15;
  uint64_t CMBaseObject;
  uint64_t (*v17)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v18;
  unsigned int v19;
  CFTypeRef v20;
  uint64_t (*v21)(CFTypeRef, uint64_t, _QWORD, CFTypeRef *);
  unsigned int v22;
  unsigned int CFDataWithBlockBufferNoCopy;
  __CFDictionary *Mutable;
  __CFDictionary *v25;
  unsigned int updated;
  const void *v27;
  CFTypeRef v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  CFTypeRef v33[5];
  CFTypeRef v34;
  void *value;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v34 = 0;
  if (*(_DWORD *)(a1 + 56))
  {
    APSLogErrorAt();
    updated = *(_DWORD *)(a1 + 56);
    goto LABEL_40;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      if (*(_BYTE *)(DerivedStorage + 280) || APSGetFBOPropertyInt64() && *(_BYTE *)(DerivedStorage + 250))
      {
        updated = endpoint_setSecondDisplayMode(*(void **)a1, *(_QWORD *)(a1 + 32));
        if (!updated)
          goto LABEL_40;
        goto LABEL_77;
      }
      if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      goto LABEL_66;
    }
    if (!FigCFEqual())
    {
      if (FigCFEqual())
      {
        updated = endpoint_sendChangeRelativeVolumeMessage(*(_QWORD *)a1, *(_QWORD *)(a1 + 16));
        if (!updated)
          goto LABEL_40;
        goto LABEL_77;
      }
      if (!FigCFEqual())
      {
        if (FigCFEqual())
        {
          updated = endpoint_sendSetMRInfo(*(_QWORD *)a1, *(_QWORD *)(a1 + 16), *(const __CFDictionary **)(a1 + 32), &v34);
          if (!updated)
            goto LABEL_40;
        }
        else
        {
          if (!FigCFEqual())
          {
            updated = endpoint_sendControlCommand(*(_QWORD *)(a1 + 16), *(const void **)(a1 + 24));
            goto LABEL_40;
          }
          updated = endpoint_sendUpdateBadgingFormatInfo(*(_QWORD *)a1, *(_QWORD *)(a1 + 16));
          if (!updated)
            goto LABEL_40;
        }
        goto LABEL_77;
      }
      APDemoEndpointUIEventChannelInit(*(_QWORD *)a1);
LABEL_66:
      updated = 0;
      goto LABEL_40;
    }
    v15 = *(_QWORD *)(a1 + 16);
    v33[0] = 0;
    value = 0;
    cf = 0;
    CMBaseObject = APSenderSessionGetCMBaseObject(v15);
    v17 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v17)
    {
      v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v19 = v17(CMBaseObject, CFSTR("TransportControlStream"), *MEMORY[0x1E0C9AE00], v33);
      if (v19)
      {
        updated = v19;
      }
      else
      {
        v20 = v33[0];
        v21 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 56);
        if (v21)
        {
          v22 = v21(v20, 1819240307, 0, &cf);
          if (v22)
          {
            updated = v22;
          }
          else
          {
            CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
            if (!CFDataWithBlockBufferNoCopy)
            {
              Mutable = CFDictionaryCreateMutable(v18, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (Mutable)
              {
                v25 = Mutable;
                CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA4570], value);
                updated = 0;
                v34 = v25;
              }
              else
              {
                APSLogErrorAt();
                updated = -16721;
              }
LABEL_55:
              if (v33[0])
                CFRelease(v33[0]);
              if (cf)
                CFRelease(cf);
              if (value)
                CFRelease(value);
              if (updated)
                goto LABEL_77;
              goto LABEL_40;
            }
            updated = CFDataWithBlockBufferNoCopy;
          }
        }
        else
        {
          updated = -12782;
        }
      }
    }
    else
    {
      updated = -12782;
    }
    APSLogErrorAt();
    goto LABEL_55;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
  {
    APSLogErrorAt();
    updated = -16720;
    goto LABEL_40;
  }
  v4 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v4 && v4(v3, 47))
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(const __CFDictionary **)(a1 + 32);
    CMBaseObjectGetDerivedStorage();
    v33[0] = 0;
    value = 0;
    cf = 0;
    v7 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v7)
    {
      v8 = v7;
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v6);
      if (MutableCopy)
      {
        v10 = MutableCopy;
        v11 = (const void *)*MEMORY[0x1E0CA3908];
        v12 = (const __CFArray *)CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E0CA3908]);
        v13 = (const void *)*MEMORY[0x1E0CA3910];
        v14 = (const __CFArray *)CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E0CA3910]);
        CFDictionaryRemoveValue(v10, v11);
        CFDictionaryRemoveValue(v10, v13);
        APSenderSessionAirPlayPerformPairingPeersListManagement(v5, v12, v14);
      }
      APSLogErrorAt();
      CFRelease(v8);
    }
    else
    {
      APSLogErrorAt();
    }
    updated = -16721;
LABEL_77:
    APSLogErrorAt();
    goto LABEL_40;
  }
  if (gLogCategory_APEndpoint <= 90 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  updated = -16726;
LABEL_40:
  v27 = *(const void **)(a1 + 40);
  v28 = v34;
  if (v27)
  {
    v33[0] = *(CFTypeRef *)a1;
    v33[1] = v34;
    v29 = *(const void **)(a1 + 48);
    v33[2] = v27;
    v33[3] = v29;
    v33[4] = (CFTypeRef)updated;
    CFRetain(v33[0]);
    if (v34)
      CFRetain(v34);
    APSDispatchAsyncFHelper();
    v28 = v34;
  }
  if (v28)
    CFRelease(v28);
  CFRelease(*(CFTypeRef *)a1);
  CFRelease(*(CFTypeRef *)(a1 + 24));
  v30 = *(const void **)(a1 + 8);
  if (v30)
    CFRelease(v30);
  v31 = *(const void **)(a1 + 32);
  if (v31)
    CFRelease(v31);
  v32 = *(const void **)(a1 + 16);
  if (v32)
    CFRelease(v32);
}

uint64_t endpoint_setSecondDisplayMode(void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const __CFArray *v6;
  CFMutableDictionaryRef Mutable;
  uint64_t v8;
  uint64_t Int64;
  NSObject *v11;
  int v12;
  _BOOL4 v13;
  NSObject *v14;
  const __CFAllocator *v15;
  CFIndex Count;
  CFIndex v17;
  CFIndex i;
  const void *ValueAtIndex;
  void (*v20)(const void *, const __CFString *, CFMutableDictionaryRef);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  v5 = DerivedStorage;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  if (!FigCFEqual() || *(_BYTE *)(v5 + 248))
  {
    MEMORY[0x1CAA400E4](*(_QWORD *)(v5 + 120));
    v6 = 0;
    goto LABEL_5;
  }
  v6 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
  MEMORY[0x1CAA400E4](*(_QWORD *)(v5 + 120));
  if (!v6 || CFArrayGetCount(v6) <= 0)
  {
LABEL_5:
    APSLogErrorAt();
    Mutable = 0;
    v8 = 4294949690;
    if (!v6)
      goto LABEL_7;
    goto LABEL_6;
  }
  Int64 = CFDictionaryGetInt64();
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (Int64 == 1)
  {
    v12 = CFDictionaryGetInt64();
    v13 = v12 && !*(_BYTE *)(v5 + 250) && APSGetFBOPropertyInt64() != 0;
    v14 = *(NSObject **)(v5 + 616);
    if (v14)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(v5 + 616));
      dispatch_release(v14);
      *(_QWORD *)(v5 + 616) = 0;
    }
    if (v13)
      *(_QWORD *)(v5 + 616) = APEndpointCreateAndStartProcessDemiseListener(a1, v12, *(dispatch_queue_t *)(v5 + 576), (void (__cdecl *)(void *))endpoint_handleClientProcessDeath);
  }
  else
  {
    if (Int64)
    {
      if (gLogCategory_APEndpoint <= 90 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      Mutable = 0;
      v8 = 4294950576;
      goto LABEL_6;
    }
    v11 = *(NSObject **)(v5 + 616);
    if (v11)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(v5 + 616));
      dispatch_release(v11);
      *(_QWORD *)(v5 + 616) = 0;
    }
  }
  v15 = CFGetAllocator(a1);
  Mutable = CFDictionaryCreateMutable(v15, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetInt64();
  Count = CFArrayGetCount(v6);
  if (Count < 1)
  {
    v8 = 0;
  }
  else
  {
    v17 = Count;
    for (i = 0; i != v17; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v6, i);
      v20 = *(void (**)(const void *, const __CFString *, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 40);
      if (v20)
        v20(ValueAtIndex, CFSTR("SetMode"), Mutable);
    }
    v8 = 0;
  }
LABEL_6:
  CFRelease(v6);
LABEL_7:
  if (Mutable)
    CFRelease(Mutable);
  return v8;
}

uint64_t endpoint_sendChangeRelativeVolumeMessage(uint64_t a1, uint64_t a2)
{
  unsigned int (*v3)(uint64_t);
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v5;
  const void *SInt32;
  const void *v7;
  uint64_t v8;

  CMBaseObjectGetDerivedStorage();
  if (!FigCFDictionaryGetBooleanIfPresent())
  {
    APSLogErrorAt();
    return 4294950576;
  }
  if (a2)
  {
    v3 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v3 && v3(a2))
    {
      if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v5 = Mutable;
        SInt32 = (const void *)FigCFNumberCreateSInt32();
        if (SInt32)
        {
          v7 = SInt32;
          CFDictionarySetValue(v5, CFSTR("value"), SInt32);
          v8 = endpoint_sendControlCommand(a2, CFSTR("changeRelativeVolume"));
          CFRelease(v5);
          CFRelease(v7);
          return v8;
        }
        APSLogErrorAt();
        CFRelease(v5);
      }
      else
      {
        APSLogErrorAt();
      }
      return 4294950575;
    }
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    return 4294949690;
  }
  else
  {
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    return 0;
  }
}

uint64_t endpoint_sendSetMRInfo(uint64_t a1, uint64_t a2, const __CFDictionary *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  unsigned int v10;

  v9 = 0;
  CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    if (CFDictionaryContainsKey(a3, (const void *)*MEMORY[0x1E0CA4678]))
    {
      v7 = APSGetFBOPropertyInt64();
      if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      if (v7)
      {
        result = endpoint_sendControlCommand(a2, CFSTR("setMRInfo"));
        v10 = result;
        if ((_DWORD)result)
        {
          APSLogErrorAt();
          return v10;
        }
        return result;
      }
    }
    else
    {
      APSLogErrorAt();
      v9 = -16720;
    }
  }
  result = v9;
  if (a4 && !v9)
  {
    result = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t endpoint_sendUpdateBadgingFormatInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  int v5;
  uint64_t v6;

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v4)
    v5 = v4(v3, 88);
  else
    v5 = 0;
  if (!FigCFDictionaryGetNumberValue())
  {
    v6 = 4294950576;
    goto LABEL_14;
  }
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (!v5)
  {
    v6 = 4294960561;
    goto LABEL_14;
  }
  v6 = endpoint_sendControlCommand(a2, CFSTR("updateBadgingFormatInfo"));
  if ((_DWORD)v6)
LABEL_14:
    APSLogErrorAt();
  return v6;
}

uint64_t endpoint_sendControlCommand(uint64_t a1, const void *a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v8;
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    return 4294950575;
  }
  v5 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("type"), a2);
  FigCFDictionarySetValue();
  CMBaseObject = APSenderSessionGetCMBaseObject(a1);
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v7)
  {
    v8 = v7(CMBaseObject, CFSTR("TransportControlStream"), *MEMORY[0x1E0C9AE00], &cf);
    if ((_DWORD)v8)
    {
      v9 = v8;
    }
    else
    {
      v9 = APTransportStreamSendPlistMessageCreatingPlistReply();
      if (!(_DWORD)v9)
        goto LABEL_8;
    }
  }
  else
  {
    v9 = 4294954514;
  }
  APSLogErrorAt();
LABEL_8:
  CFRelease(v5);
  if (cf)
    CFRelease(cf);
  return v9;
}

void endpoint_handleClientProcessDeath(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  CFMutableDictionaryRef SecondDisplayModeCommandParams;
  CFMutableDictionaryRef v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v3 = *(NSObject **)(DerivedStorage + 616);
  if (v3)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 616));
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 616) = 0;
  }
  SecondDisplayModeCommandParams = APEndpointCreateSecondDisplayModeCommandParams();
  if (SecondDisplayModeCommandParams)
  {
    v5 = SecondDisplayModeCommandParams;
    endpoint_setSecondDisplayMode(a1, SecondDisplayModeCommandParams);
    CFRelease(v5);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t endpoint_Activate(const void *a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  const void *v10;
  uint64_t v11;
  const __CFAllocator *v12;
  uint64_t CMBaseObject;
  void (*v14)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  int v15;
  uint64_t EventRecorder;
  int v17;
  int v18;
  const void *Value;
  const void *v20;
  const void *v21;
  uint64_t UpTimeNanoseconds;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  CFTypeID v26;
  uint64_t v27;
  int ActivationOptions;
  _BYTE *v29;
  int v30;
  int v31;
  uint64_t Int64;
  int IntWithDefault;
  char v34;
  const __CFDictionary *v35;
  double v36;
  uint64_t v37;
  BOOL v38;
  unsigned int v39;
  uint64_t v40;
  const void *v41;
  uint64_t v42;
  const __CFDictionary *v43;
  CFTypeID v44;
  CFTypeID v45;
  double v46;
  uint64_t v47;
  int v48;
  int MetadataSourceAndCommandSinkIfNeeded;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  BOOL v54;
  CFTypeRef v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  int v61;
  CFTypeRef v62;
  int v63;
  uint64_t v64;
  CFTypeRef v65;
  void (*v66)(CFTypeRef, const void *, const void *, uint64_t (*)(), uint64_t (*)(uint64_t, int, uint64_t, const void *, _QWORD *));
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, const __CFString *, uint64_t);
  int v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, const __CFString *, _QWORD);
  int v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t);
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  const void **v81;
  CFMutableSetRef Mutable;
  const void *v83;
  CFTypeRef v84;
  const void *v85;
  const void *v86;
  uint64_t v87;
  CFAllocatorRef v88;
  uint64_t v89;
  void (*v90)(uint64_t, const __CFString *, CFAllocatorRef, __int128 *);
  CFTypeRef v91;
  CFTypeRef v92;
  CFTypeRef v93;
  CFTypeRef v94;
  const void *v96;
  int v97;
  int v98;
  CFTypeRef v99;
  char v100[8];
  char v101[8];
  int v102;
  uint64_t v103;
  CFTypeRef cf;
  CFTypeRef v105;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  const void *v112;
  CFTypeRef v113;
  CFTypeRef v114[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v112 = 0;
  v107 = 0u;
  v108 = 0u;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v10 = (const void *)CFStringCreateF();
  v11 = *(_QWORD *)(DerivedStorage + 40);
  v113 = 0;
  v114[0] = 0;
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(v11);
  v14 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (!v14 || (v14(CMBaseObject, CFSTR("TransportDevice"), v12, v114), !v114[0]))
  {
    v18 = 0;
    goto LABEL_9;
  }
  v15 = APSEventRecorderCreate();
  if (v15)
  {
    v18 = v15;
  }
  else
  {
    EventRecorder = APTransportDeviceGetEventRecorder();
    if (!EventRecorder || (v17 = MEMORY[0x1CAA3DC60](v113, EventRecorder)) == 0)
    {
      APSEventRecorderAddSignPostForEvent();
      v18 = 0;
      v113 = 0;
      goto LABEL_7;
    }
    v18 = v17;
  }
  APSLogErrorAt();
LABEL_7:
  if (v114[0])
    CFRelease(v114[0]);
LABEL_9:
  v103 = a4;
  if (v18)
  {
    APSLogErrorAt();
    v35 = 0;
    cf = 0;
    v105 = 0;
    goto LABEL_230;
  }
  APSEventRecorderRecordEventWithFlags();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (a3)
  {
    Value = CFDictionaryGetValue(a3, CFSTR("ParentContextID"));
    if (!Value)
      Value = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA3770]);
    if (!*(_DWORD *)(DerivedStorage + 152))
    {
      v20 = *(const void **)(DerivedStorage + 160);
      *(_QWORD *)(DerivedStorage + 160) = Value;
      if (Value)
        CFRetain(Value);
      if (!v20)
        goto LABEL_22;
LABEL_21:
      CFRelease(v20);
LABEL_22:
      if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
LABEL_27:
      if (a3)
        v21 = CFDictionaryGetValue(a3, CFSTR("Container"));
      else
        v21 = 0;
      UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      if (FigCFEqual())
      {
        if (UpTimeNanoseconds <= *(_QWORD *)(DerivedStorage + 568))
        {
          v23 = *(_QWORD *)(DerivedStorage + 552);
LABEL_38:
          *(_QWORD *)(DerivedStorage + 552) = v23 + 1;
          *(_QWORD *)(DerivedStorage + 568) = UpTimeNanoseconds + 1000000000 * *(_QWORD *)(DerivedStorage + 88);
          v25 = a2;
          if (a2 == 16 || !*(_BYTE *)(DerivedStorage + 48))
          {
            if (*(_BYTE *)(DerivedStorage + 128))
            {
              APSLogErrorAt();
              v35 = 0;
              cf = 0;
              v105 = 0;
              v18 = -16723;
              goto LABEL_230;
            }
            if (a3)
            {
              v26 = CFGetTypeID(a3);
              if (v26 != CFDictionaryGetTypeID())
                goto LABEL_68;
            }
            v27 = *(_QWORD *)(DerivedStorage + 144);
            if (!v27 || v27 == a2)
            {
              if (*(_QWORD *)(DerivedStorage + 224))
              {
                APSLogErrorAt();
                v35 = 0;
                cf = 0;
                v105 = 0;
                v18 = -16727;
                goto LABEL_230;
              }
              if (*(_QWORD *)(DerivedStorage + 40))
              {
                if (!a3)
                {
                  v35 = 0;
                  *(_QWORD *)v100 = 0;
                  *(_QWORD *)v101 = 0;
                  v31 = 0;
                  cf = 0;
                  v105 = 0;
                  v36 = 0.0;
                  goto LABEL_111;
                }
                ActivationOptions = endpoint_readActivationOptions(a3, DerivedStorage + 136);
                if (ActivationOptions)
                {
                  v18 = ActivationOptions;
                  v35 = 0;
                  cf = 0;
                  v105 = 0;
                  goto LABEL_230;
                }
                v29 = (_BYTE *)(DerivedStorage + 268);
                FigCFDictionaryGetBooleanIfPresent();
                FigCFDictionaryGetBooleanIfPresent();
                FigCFDictionaryGetBooleanIfPresent();
                if (!*(_BYTE *)(DerivedStorage + 250))
                {
LABEL_52:
                  v31 = FigCFEqual();
                  Int64 = CFDictionaryGetInt64();
                  if (!IsAppleInternalBuild() || Int64)
                  {
                    if (!Int64)
                    {
                      v34 = 0;
                      goto LABEL_74;
                    }
                  }
                  else
                  {
                    IntWithDefault = APSSettingsGetIntWithDefault();
                    v34 = 0;
                    if (IntWithDefault != 1)
                      goto LABEL_74;
                  }
                  if (gLogCategory_APEndpoint <= 50
                    && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
                  {
                    LogPrintF();
                  }
                  v34 = 1;
LABEL_74:
                  v101[4] = v34;
                  if (!*v29)
                    *(_BYTE *)(DerivedStorage + 268) = FigCFEqual();
                  v100[0] = CFDictionaryGetInt64() != 0;
                  v37 = CFDictionaryGetInt64();
                  v38 = 0;
                  v101[0] = v37 != 0;
                  v39 = *(_DWORD *)(DerivedStorage + 104);
                  if (v39 <= 0xD && ((1 << v39) & 0x2090) != 0)
                    v38 = !*(_BYTE *)(DerivedStorage + 48)
                       && !(*v29 | v31)
                       && *(_BYTE *)(DerivedStorage + 251) == 0;
                  *(_BYTE *)(DerivedStorage + 269) = v38;
                  if (*(_BYTE *)(DerivedStorage + 249))
                    cf = CFDictionaryGetValue(a3, CFSTR("GroupID"));
                  else
                    cf = 0;
                  v36 = 0.0;
                  if (*(_BYTE *)(DerivedStorage + 48))
                  {
                    v40 = a5;
                    v105 = 0;
                  }
                  else
                  {
                    v41 = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA3748]);
                    if (v41)
                      v105 = CFRetain(v41);
                    else
                      v105 = 0;
                    if (!*(_BYTE *)(DerivedStorage + 48) && CFDictionaryGetInt64())
                    {
                      v40 = a5;
                      CFDictionaryGetDouble();
                      v36 = v46;
                      v100[4] = 1;
LABEL_93:
                      v42 = CMBaseObjectGetDerivedStorage();
                      v43 = (const __CFDictionary *)CFDictionaryGetValue(a3, CFSTR("SenderSession"));
                      v35 = v43;
                      if (v43)
                      {
                        v44 = CFGetTypeID(v43);
                        if (v44 == CFDictionaryGetTypeID())
                        {
                          v35 = (const __CFDictionary *)CFDictionaryGetValue(v35, *(const void **)(v42 + 456));
                          a5 = v40;
                          if (!v35)
                            goto LABEL_104;
                        }
                        else
                        {
                          a5 = v40;
                        }
                        v45 = CFGetTypeID(v35);
                        if (v45 == APSenderSessionGetTypeID())
                        {
                          v25 = a2;
                          if (gLogCategory_APEndpoint <= 50
                            && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
                          {
                            LogPrintF();
                          }
                          v35 = (const __CFDictionary *)CFRetain(v35);
                          goto LABEL_111;
                        }
                        v35 = 0;
                        goto LABEL_104;
                      }
                      a5 = v40;
LABEL_104:
                      v25 = a2;
LABEL_111:
                      if (endpoint_shouldOnlyBeActivatedAsPartOfCluster()
                        && !*(_BYTE *)(DerivedStorage + 250))
                      {
                        APSLogErrorAt();
                        v18 = -72277;
                        goto LABEL_230;
                      }
                      if (*(_BYTE *)(DerivedStorage + 48))
                        goto LABEL_118;
                      v47 = (uint64_t)v105;
                      if (!v105)
                        v47 = APSCreateNewUUIDString();
                      v105 = (CFTypeRef)v47;
                      v48 = endpoint_ensureSharedContextCreated((uint64_t)a1, v25, a3, v31);
                      if (v48)
                      {
                        v18 = v48;
                        goto LABEL_230;
                      }
                      MetadataSourceAndCommandSinkIfNeeded = endpoint_createMetadataSourceAndCommandSinkIfNeeded((uint64_t)a1, v25);
                      if (MetadataSourceAndCommandSinkIfNeeded)
                      {
                        v18 = MetadataSourceAndCommandSinkIfNeeded;
                      }
                      else
                      {
LABEL_118:
                        CFGetAllocator(a1);
                        v50 = APSConnectionInterfaceManagerCreate();
                        if (!v50)
                        {
                          if (v35)
                          {
                            if (gLogCategory_APEndpoint <= 50
                              && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
                            {
                              LogPrintF();
                            }
LABEL_209:
                            CMNotificationCenterGetDefaultLocalCenter();
                            v77 = FigNotificationCenterAddWeakListener();
                            if (v77)
                            {
                              v18 = v77;
                            }
                            else
                            {
                              CMNotificationCenterGetDefaultLocalCenter();
                              v78 = FigNotificationCenterAddWeakListener();
                              if (!v78)
                              {
                                v79 = CMBaseObjectGetDerivedStorage();
                                if (!*(_BYTE *)(v79 + 48))
                                {
                                  v80 = v79;
                                  if (*(_QWORD *)(v79 + 32))
                                  {
                                    CMNotificationCenterGetDefaultLocalCenter();
                                    FigNotificationCenterAddWeakListener();
                                    CMNotificationCenterGetDefaultLocalCenter();
                                    v25 = a2;
                                    FigNotificationCenterAddWeakListener();
                                    if (*(_DWORD *)(v80 + 104) == 7)
                                    {
                                      CMNotificationCenterGetDefaultLocalCenter();
                                      FigNotificationCenterAddWeakListener();
                                    }
                                  }
                                }
                                if (endpoint_isInLocalClusterOfAppleTV())
                                {
                                  CMNotificationCenterGetDefaultLocalCenter();
                                  FigNotificationCenterAddWeakListener();
                                }
                                *(_QWORD *)(DerivedStorage + 224) = CFRetain(v35);
                                *(_QWORD *)(DerivedStorage + 232) = CFRetain(v112);
                                ++*(_QWORD *)(DerivedStorage + 136);
                                *(_QWORD *)(DerivedStorage + 144) = v25;
                                *(_DWORD *)(DerivedStorage + 152) = 1;
                                *(_QWORD *)(DerivedStorage + 288) = 0;
                                if (a3 && CFDictionaryGetInt64())
                                {
                                  if (gLogCategory_APEndpoint <= 50
                                    && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
                                  {
                                    LogPrintF();
                                  }
                                }
                                else
                                {
                                  CMBaseObjectGetDerivedStorage();
                                  APSGetFBOPropertyInt64();
                                  APSRTCReportingAgentCreate();
                                  *(_QWORD *)(DerivedStorage + 296) = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                                  APSGetCPULoadAverage();
                                  CFDictionarySetInt64();
                                  CFDictionarySetDouble();
                                  CFDictionarySetInt64();
                                  v81 = (const void **)MEMORY[0x1E0C9AE50];
                                  if (!*(_BYTE *)(DerivedStorage + 248))
                                    v81 = (const void **)MEMORY[0x1E0C9AE40];
                                  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 296), CFSTR("isPerAppDisplay"), *v81);
                                }
                                endpoint_postIsInUseDidChangeNotification((uint64_t)a1, *(unsigned __int8 *)(DerivedStorage + 488));
                                if ((v25 & 4) == 0
                                  || *(_QWORD *)(DerivedStorage + 312)
                                  || (Mutable = CFSetCreateMutable(v12, 0, MEMORY[0x1E0C9B3B0]),
                                      (*(_QWORD *)(DerivedStorage + 312) = Mutable) != 0))
                                {
                                  v18 = 0;
                                }
                                else
                                {
                                  APSLogErrorAt();
                                  v18 = -16721;
                                }
                                goto LABEL_230;
                              }
                              v18 = v78;
                            }
                            APSLogErrorAt();
LABEL_289:
                            APSLogErrorAt();
                            goto LABEL_230;
                          }
                          v51 = *(unsigned __int8 *)(DerivedStorage + 250);
                          v97 = *(unsigned __int8 *)(DerivedStorage + 268);
                          v98 = *(_DWORD *)(DerivedStorage + 252);
                          v99 = *(CFTypeRef *)(DerivedStorage + 216);
                          v52 = CMBaseObjectGetDerivedStorage();
                          v113 = 0;
                          v114[0] = 0;
                          CMBaseObjectGetDerivedStorage();
                          if (endpoint_shouldUseLegacySenderSession_checkSessionOverrideOnce != -1)
                            dispatch_once_f(&endpoint_shouldUseLegacySenderSession_checkSessionOverrideOnce, &endpoint_shouldUseLegacySenderSession_sessionOverride, (dispatch_function_t)endpoint_getSessionProtocolOverrideString);
                          if ((__CFString *)endpoint_shouldUseLegacySenderSession_sessionOverride == CFSTR("legacy"))
                          {
LABEL_128:
                            v25 = a2;
                            if (gLogCategory_APEndpoint > 50
                              || gLogCategory_APEndpoint == -1 && !_LogCategory_Initialize())
                            {
                              goto LABEL_147;
                            }
                            goto LABEL_143;
                          }
                          if (!endpoint_shouldUseLegacySenderSession_sessionOverride)
                            goto LABEL_308;
                          if (CFEqual((CFTypeRef)endpoint_shouldUseLegacySenderSession_sessionOverride, CFSTR("legacy")))
                          {
                            goto LABEL_128;
                          }
                          if ((__CFString *)endpoint_shouldUseLegacySenderSession_sessionOverride == CFSTR("airplay")
                            || endpoint_shouldUseLegacySenderSession_sessionOverride
                            && CFEqual((CFTypeRef)endpoint_shouldUseLegacySenderSession_sessionOverride, CFSTR("airplay")))
                          {
                            if (gLogCategory_APEndpoint <= 50
                              && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
                            {
                              LogPrintF();
                            }
                          }
                          else
                          {
LABEL_308:
                            if (APSGetFBOPropertyInt64())
                            {
                              v25 = a2;
                              if (gLogCategory_APEndpoint > 40
                                || gLogCategory_APEndpoint == -1 && !_LogCategory_Initialize())
                              {
                                goto LABEL_147;
                              }
LABEL_143:
                              LogPrintF();
LABEL_147:
                              v53 = APSenderSessionLegacyAudioCreate((uint64_t)v12, *(const void **)(v52 + 448), *(const void **)(v52 + 40), v99, &v113);
                              if (v53)
                              {
                                v18 = v53;
                                APSLogErrorAt();
LABEL_200:
                                if (v113)
                                {
                                  v74 = APSenderSessionGetCMBaseObject(v113);
                                  if (v74)
                                  {
                                    v75 = v74;
                                    v76 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 24);
                                    if (v76)
                                      v76(v75);
                                  }
                                  CFRelease(v113);
                                  v35 = 0;
                                  v113 = 0;
                                  v25 = a2;
                                }
                                else
                                {
                                  v35 = 0;
                                }
LABEL_206:
                                if (v114[0])
                                  CFRelease(v114[0]);
                                if (v18)
                                  goto LABEL_289;
                                goto LABEL_209;
                              }
                              if (gLogCategory_APEndpoint <= 50
                                && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
                              {
                                LogPrintF();
                              }
                              goto LABEL_183;
                            }
                          }
                          if (v51)
                            v54 = a2 == 16;
                          else
                            v54 = 1;
                          v55 = v105;
                          if (v54)
                            v55 = 0;
                          v96 = v55;
                          v56 = CMBaseObjectGetDerivedStorage();
                          if (v97)
                          {
                            if (FigCFEqual())
                              v57 = 9;
                            else
                              v57 = 7;
                          }
                          else
                          {
                            if ((v100[0] & 1) == 0)
                            {
                              v64 = v56;
                              if (a2 == 16)
                              {
                                if (*(_BYTE *)(v56 + 49))
                                  v57 = 6;
                                else
                                  v57 = 1;
                              }
                              else if (FigCFEqual())
                              {
                                v57 = 4;
                              }
                              else
                              {
                                if (*(_BYTE *)(v64 + 249))
                                {
                                  v25 = a2;
                                  if (endpoint_isInLocalClusterOfAppleTV())
                                  {
                                    v57 = 3;
                                  }
                                  else if (endpoint_isInLocalStereoPairPersistentConnection())
                                  {
                                    v57 = 11;
                                  }
                                  else
                                  {
                                    v57 = 2;
                                  }
                                  goto LABEL_166;
                                }
                                v57 = 0;
                              }
                              v25 = a2;
LABEL_166:
                              v58 = v98;
                              if (v98 == 2)
                              {
                                v102 = v57;
                                v59 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v52 + 40));
                                v60 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                                if (!v60)
                                {
                                  v18 = -12782;
                                  goto LABEL_199;
                                }
                                v61 = v60(v59, CFSTR("ClusterUUID"), v12, v114);
                                if (v61)
                                {
                                  v18 = v61;
                                  goto LABEL_199;
                                }
                                v62 = v114[0];
                                v58 = 2;
                                v57 = v102;
                              }
                              else
                              {
                                v62 = 0;
                              }
                              v63 = APSenderSessionAirPlayCreate((int)v12, *(const void **)(v52 + 448), *(const void **)(v52 + 40), v112, v57, v58, *(NSObject **)(v52 + 16), a2 != 16, v36, v101[4], v101[0], v99, v96, v62, v100[4], 0, &v113);
                              if (v63)
                              {
                                v18 = v63;
                                goto LABEL_199;
                              }
                              if (gLogCategory_APEndpoint <= 50
                                && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
                              {
                                LogPrintF();
                              }
                              v65 = v113;
                              v66 = *(void (**)(CFTypeRef, const void *, const void *, uint64_t (*)(), uint64_t (*)(uint64_t, int, uint64_t, const void *, _QWORD *)))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
                              if (v66)
                                v66(v65, a1, a1, endpoint_handleEventMessage, endpoint_handleEventMessageCreatingReply);
LABEL_183:
                              v67 = *(_QWORD *)(v52 + 472);
                              if (!v67)
                              {
LABEL_186:
                                if (!APSSettingsGetInt64())
                                {
                                  if (gLogCategory_APEndpoint <= 50
                                    && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
                                  {
                                    LogPrintF();
                                  }
                                  goto LABEL_197;
                                }
                                if (gLogCategory_APEndpoint <= 50
                                  && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
                                {
                                  LogPrintF();
                                }
                                v71 = APSenderSessionGetCMBaseObject(v113);
                                v72 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
                                if (v72)
                                {
                                  v73 = v72(v71, CFSTR("PublishEncryptionKeyDiagnosticMode"), *MEMORY[0x1E0C9AE50]);
                                  if (!v73)
                                  {
LABEL_197:
                                    v18 = 0;
                                    v35 = (const __CFDictionary *)v113;
                                    v113 = 0;
                                    goto LABEL_206;
                                  }
                                  v18 = v73;
                                }
                                else
                                {
                                  v18 = -12782;
                                }
                                goto LABEL_199;
                              }
                              v68 = APSenderSessionGetCMBaseObject(v113);
                              v69 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
                              if (v69)
                              {
                                v70 = v69(v68, CFSTR("AuthorizationString"), v67);
                                v25 = a2;
                                if (!v70)
                                  goto LABEL_186;
                                v18 = v70;
                              }
                              else
                              {
                                v18 = -12782;
                                v25 = a2;
                              }
LABEL_199:
                              APSLogErrorAt();
                              goto LABEL_200;
                            }
                            v57 = 8;
                          }
                          v25 = a2;
                          goto LABEL_166;
                        }
                        v18 = v50;
                      }
                      APSLogErrorAt();
                      goto LABEL_230;
                    }
                    v40 = a5;
                  }
                  v100[4] = 0;
                  goto LABEL_93;
                }
                FigCFDictionaryGetBooleanIfPresent();
                if (CFDictionaryContainsKey(a3, CFSTR("PerceivedClusterType")))
                {
                  v30 = CFDictionaryGetInt64();
                  *(_DWORD *)(DerivedStorage + 252) = v30;
                  if (v30)
                    goto LABEL_52;
                }
                else if (*(_DWORD *)(DerivedStorage + 252))
                {
                  goto LABEL_52;
                }
LABEL_68:
                APSLogErrorAt();
                v35 = 0;
                cf = 0;
                v105 = 0;
                v18 = -16720;
                goto LABEL_230;
              }
            }
          }
          APSLogErrorAt();
          v35 = 0;
          cf = 0;
          v105 = 0;
          v18 = -16726;
          goto LABEL_230;
        }
      }
      else
      {
        v24 = *(const void **)(DerivedStorage + 544);
        *(_QWORD *)(DerivedStorage + 544) = v21;
        if (v21)
          CFRetain(v21);
        if (v24)
          CFRelease(v24);
      }
      v23 = 0;
      *(_QWORD *)(DerivedStorage + 560) = UpTimeNanoseconds + 1000000000 * *(_QWORD *)(DerivedStorage + 80);
      goto LABEL_38;
    }
  }
  else if (!*(_DWORD *)(DerivedStorage + 152))
  {
    v20 = *(const void **)(DerivedStorage + 160);
    *(_QWORD *)(DerivedStorage + 160) = 0;
    if (!v20)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (FigCFEqual())
    goto LABEL_27;
  if (gLogCategory_APEndpoint > 90)
  {
    v35 = 0;
    cf = 0;
    v105 = 0;
    v18 = -16726;
  }
  else
  {
    if (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())
      LogPrintF();
    v35 = 0;
    cf = 0;
    v105 = 0;
    v18 = -16726;
  }
LABEL_230:
  if (a1)
    CFRetain(a1);
  v83 = *(const void **)(DerivedStorage + 448);
  if (v83)
    CFRetain(v83);
  LODWORD(v111) = v18;
  if (a3)
    v84 = CFRetain(a3);
  else
    v84 = 0;
  *(_QWORD *)&v109 = v84;
  v85 = *(const void **)(DerivedStorage + 224);
  if (v85)
    CFRetain(v85);
  v86 = *(const void **)(DerivedStorage + 240);
  if (v86)
    CFRetain(v86);
  v87 = *(_QWORD *)(DerivedStorage + 40);
  v88 = CFGetAllocator(a1);
  v89 = APEndpointDescriptionGetCMBaseObject(v87);
  v90 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (v90)
    v90(v89, CFSTR("TransportDevice"), v88, &v107);
  *((_QWORD *)&v107 + 1) = APEndpointDescriptionCopyDebugString(*(_QWORD *)(DerivedStorage + 40));
  v91 = *(CFTypeRef *)(DerivedStorage + 184);
  if (v91)
    v91 = CFRetain(v91);
  *(_QWORD *)&v108 = v91;
  v92 = *(CFTypeRef *)(DerivedStorage + 192);
  if (v92)
    v92 = CFRetain(v92);
  *((_QWORD *)&v108 + 1) = v92;
  if (cf)
    v93 = CFRetain(cf);
  else
    v93 = 0;
  *((_QWORD *)&v109 + 1) = v93;
  *(_QWORD *)&v110 = v103;
  *((_QWORD *)&v110 + 1) = a5;
  v94 = *(CFTypeRef *)(DerivedStorage + 288);
  if (v94)
    v94 = CFRetain(v94);
  *((_QWORD *)&v111 + 1) = v94;
  if (*(_QWORD *)(DerivedStorage + 24) && (_QWORD)v107)
    APBrowserControllerRegisterEndpointActivating();
  APSDispatchAsyncFHelper();
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  if (v35)
    CFRelease(v35);
  if (v112)
    CFRelease(v112);
  if (v105)
    CFRelease(v105);
  if (v10)
    CFRelease(v10);
  return 0;
}

uint64_t endpoint_Deactivate(void *a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  const void *Value;
  uint64_t v6;
  void (*v7)(uint64_t);
  const void *v8;
  const void *v9;
  CFTypeRef v10;
  const void *v11;
  const void *v12;
  const __CFSet *v13;
  const __CFAllocator *v14;
  const __CFSet *Copy;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  const void *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  const void *v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (a2)
  {
    Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3958]);
    if (!*(_BYTE *)(DerivedStorage + 48) && CFDictionaryGetInt64())
      CFDictionaryGetDouble();
  }
  else
  {
    Value = 0;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  if (*(_BYTE *)(DerivedStorage + 128))
  {
    APSLogErrorAt();
    v6 = 4294950573;
  }
  else if (*(_BYTE *)(DerivedStorage + 249) && !FigCFEqual())
  {
    if (gLogCategory_APEndpoint <= 90 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v6 = 4294950570;
  }
  else
  {
    v6 = *(_QWORD *)(DerivedStorage + 224);
    if (v6)
    {
      v7 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
      if (v7)
        v7(v6);
      v6 = 0;
    }
  }
  CFRetain(a1);
  v8 = *(const void **)(DerivedStorage + 448);
  if (v8)
    CFRetain(v8);
  if (Value)
    CFRetain(Value);
  v9 = *(const void **)(DerivedStorage + 224);
  if (v9)
    v10 = CFRetain(v9);
  else
    v10 = 0;
  v11 = *(const void **)(DerivedStorage + 168);
  if (v11)
    CFRetain(v11);
  v12 = *(const void **)(DerivedStorage + 192);
  if (v12)
    CFRetain(v12);
  v13 = *(const __CFSet **)(DerivedStorage + 312);
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v13)
    Copy = CFSetCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v13);
  else
    Copy = 0;
  v16 = *(const __CFDictionary **)(DerivedStorage + 336);
  if (v16)
    v17 = CFDictionaryCreateCopy(v14, v16);
  else
    v17 = 0;
  FigCFDictionaryCreateMutableCopy();
  v18 = *(const void **)(DerivedStorage + 304);
  if (v18)
    CFRetain(v18);
  *(_BYTE *)(DerivedStorage + 488) = 0;
  v19 = *(_QWORD *)(DerivedStorage + 272);
  if (v19)
  {
    if (gLogCategory_APEndpoint <= 50)
    {
      if (gLogCategory_APEndpoint != -1
        || (v20 = _LogCategory_Initialize(), v19 = *(_QWORD *)(DerivedStorage + 272), v20))
      {
        LogPrintF();
        v19 = *(_QWORD *)(DerivedStorage + 272);
      }
    }
    v21 = *(_QWORD *)(DerivedStorage + 40);
    v22 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v22)
      v22(v21, v19);
    v23 = *(const void **)(DerivedStorage + 272);
    if (v23)
    {
      CFRelease(v23);
      *(_QWORD *)(DerivedStorage + 272) = 0;
    }
  }
  endpoint_initializeVolumeDelegateStorage();
  *(_DWORD *)(DerivedStorage + 492) = *(_DWORD *)(DerivedStorage + 156);
  endpoint_resetActivationState(DerivedStorage + 136);
  endpoint_removeAPEndpointManagerNotificationsListenerIfNeeded();
  endpoint_removeHDMILatencyNotificationListenerIfNeeded();
  endpoint_stopListeningToSenderSessionAndStreamsNotifications((uint64_t)a1, (uint64_t)v10);
  if (v17)
    CFDictionaryApplyFunction(v17, (CFDictionaryApplierFunction)endpoint_unsubscribeRCS, a1);
  if (Copy)
    CFSetApplyFunction(Copy, (CFSetApplierFunction)endpoint_unsubscribePlaybackSession, a1);
  endpoint_updateCurrentVolumeControlType();
  endpoint_updateIsVolumeAndMuteControlSupported();
  endpoint_updateVideoPlaybackIsActive(a1);
  endpoint_deregisterWithBrowserController(a1);
  APSDispatchAsyncFHelper();
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  return v6;
}

uint64_t endpoint_Dissociate(void *a1)
{
  uint64_t DerivedStorage;
  int v3;
  const void *v4;
  CFTypeRef v5;
  const void *v6;
  CFTypeRef v7;
  const __CFSet *v8;
  CFAllocatorRef *v9;
  const __CFDictionary *v10;
  uint64_t v11;
  CFAllocatorRef v12;
  uint64_t CMBaseObject;
  void (*v14)(uint64_t, const __CFString *, CFAllocatorRef, __int128 *);
  const void *v15;
  CFTypeRef v16;
  const void *v17;
  void (*v18)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v23;
  __int128 v24;
  CFDictionaryRef theDict[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v24 = 0u;
  *(_OWORD *)theDict = 0u;
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  v3 = *(unsigned __int8 *)(DerivedStorage + 128);
  *(_BYTE *)(DerivedStorage + 128) = 1;
  if (v3)
  {
    endpoint_resetActivationState(DerivedStorage + 136);
  }
  else
  {
    CFRetain(a1);
    v4 = *(const void **)(DerivedStorage + 448);
    if (v4)
      CFRetain(v4);
    v5 = *(CFTypeRef *)(DerivedStorage + 224);
    if (v5)
      v5 = CFRetain(v5);
    v23 = (uint64_t)v5;
    v6 = *(const void **)(DerivedStorage + 168);
    if (v6)
      CFRetain(v6);
    v7 = *(CFTypeRef *)(DerivedStorage + 192);
    if (v7)
      v7 = CFRetain(v7);
    *((_QWORD *)&v24 + 1) = v7;
    v8 = *(const __CFSet **)(DerivedStorage + 312);
    v9 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (v8)
      theDict[0] = CFSetCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v8);
    v10 = *(const __CFDictionary **)(DerivedStorage + 336);
    if (v10)
      theDict[1] = CFDictionaryCreateCopy(*v9, v10);
    v11 = *(_QWORD *)(DerivedStorage + 40);
    v12 = CFGetAllocator(a1);
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(v11);
    v14 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
    if (v14)
      v14(CMBaseObject, CFSTR("TransportDevice"), v12, &v24);
    endpoint_resetActivationState(DerivedStorage + 136);
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
    endpoint_removeAPEndpointManagerNotificationsListenerIfNeeded();
    endpoint_removeHDMILatencyNotificationListenerIfNeeded();
    endpoint_stopListeningToSenderSessionAndStreamsNotifications((uint64_t)a1, v23);
    v15 = *(const void **)(CMBaseObjectGetDerivedStorage() + 40);
    if (v15)
    {
      v16 = CFRetain(v15);
      if (v16)
      {
        v17 = v16;
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        CFRelease(v17);
      }
    }
    if (theDict[1])
      CFDictionaryApplyFunction(theDict[1], (CFDictionaryApplierFunction)endpoint_unsubscribeRCS, a1);
    if (theDict[0])
      CFSetApplyFunction(theDict[0], (CFSetApplierFunction)endpoint_unsubscribePlaybackSession, a1);
    if (v23)
    {
      v18 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 96);
      if (v18)
        v18(v23, 0, 0, 0, 0);
      v19 = APSenderSessionGetCMBaseObject(v23);
      if (v19)
      {
        v20 = v19;
        v21 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v21)
          v21(v20);
      }
      if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
    }
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
    endpoint_clearEndpointState();
    APSDispatchAsyncFHelper();
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  return 0;
}

uint64_t endpoint_SetDelegate(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  __int128 v9;
  _OWORD v10[2];
  uint64_t v11;

  if (!a2)
  {
    v6 = endpoint_SetDelegateRouting(a1, 0);
    if ((_DWORD)v6)
    {
      v5 = v6;
    }
    else
    {
      v5 = endpoint_SetDelegateRemoteControl(a1, 0);
      if (!(_DWORD)v5)
        return v5;
    }
LABEL_10:
    APSLogErrorAt();
    return v5;
  }
  v3 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v3;
  v11 = *(_QWORD *)(a2 + 32);
  v8[1] = 0;
  v8[0] = *(_QWORD *)&v10[0];
  v9 = *(_OWORD *)(a2 + 48);
  v4 = endpoint_SetDelegateRouting(a1, (uint64_t)v10);
  if ((_DWORD)v4)
  {
    v5 = v4;
    goto LABEL_10;
  }
  v5 = endpoint_SetDelegateRemoteControl(a1, (uint64_t)v8);
  if ((_DWORD)v5)
    goto LABEL_10;
  return v5;
}

uint64_t endpoint_SetDelegateRouting(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  if (*(_BYTE *)(DerivedStorage + 128))
  {
    APSLogErrorAt();
    a2 = 4294950573;
  }
  else
  {
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v4 = *(const void **)(DerivedStorage + 424);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(DerivedStorage + 424) = 0;
    }
    v5 = (_OWORD *)(DerivedStorage + 352);
    if (a2)
    {
      v6 = *(_OWORD *)a2;
      v7 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(DerivedStorage + 384) = *(_QWORD *)(a2 + 32);
      *v5 = v6;
      *(_OWORD *)(DerivedStorage + 368) = v7;
      a2 = 0;
      *(_QWORD *)(DerivedStorage + 424) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    }
    else
    {
      *(_QWORD *)(DerivedStorage + 384) = 0;
      *v5 = 0u;
      *(_OWORD *)(DerivedStorage + 368) = 0u;
    }
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  return a2;
}

uint64_t endpoint_SetDelegateRemoteControl(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  _OWORD *v5;
  __int128 v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  if (*(_BYTE *)(DerivedStorage + 128))
  {
    APSLogErrorAt();
    a2 = 4294950573;
  }
  else
  {
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v4 = *(const void **)(DerivedStorage + 432);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(DerivedStorage + 432) = 0;
    }
    v5 = (_OWORD *)(DerivedStorage + 392);
    if (a2)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *v5 = *(_OWORD *)a2;
      *(_OWORD *)(DerivedStorage + 408) = v6;
      a2 = 0;
      *(_QWORD *)(DerivedStorage + 432) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    }
    else
    {
      *v5 = 0u;
      *(_OWORD *)(DerivedStorage + 408) = 0u;
    }
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  return a2;
}

uint64_t endpoint_CreatePlaybackSession(uint64_t a1, void **a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  const __CFSet *v6;
  int Count;
  const __CFAllocator *v8;
  CFStringRef v9;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v11;
  const void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  const void **v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  v4 = CMBaseObjectGetDerivedStorage();
  value = 0;
  if (!*(_QWORD *)(v4 + 224))
  {
    APSLogErrorAt();
    v24 = 4294949691;
    goto LABEL_43;
  }
  v5 = v4;
  v6 = *(const __CFSet **)(v4 + 312);
  if (!v6)
  {
    APSLogErrorAt();
    v24 = 4294949690;
    goto LABEL_43;
  }
  Count = CFSetGetCount(v6);
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@-%d"), *(_QWORD *)(v5 + 448), (Count + 1));
  Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v24 = 4294950575;
    if (!v9)
      goto LABEL_43;
    goto LABEL_42;
  }
  v11 = Mutable;
  CMBaseObjectGetDerivedStorage();
  APSVolumeConvertSliderValueToDB();
  FigCFDictionarySetFloat();
  APSEventRecorderGetEventTime();
  CFDictionarySetDouble();
  v12 = *(const void **)(v5 + 216);
  if (v12)
    CFDictionarySetValue(v11, CFSTR("NetworkClock"), v12);
  if (!APSGetFBOPropertyInt64())
  {
    if (APSGetFBOPropertyInt64())
    {
      v18 = *(const void **)(v5 + 192);
      if (v18)
        CFDictionarySetValue(v11, CFSTR("MetadataSource"), v18);
      v19 = APEndpointPlaybackSessionAirPlayCreate((uint64_t)v9, *(const void **)(v5 + 224), *(const void **)(v5 + 40), v11, &value);
      if ((_DWORD)v19)
      {
        v24 = v19;
        goto LABEL_55;
      }
      if (gLogCategory_APEndpoint > 50 || gLogCategory_APEndpoint == -1 && !_LogCategory_Initialize())
        goto LABEL_34;
    }
    else
    {
      v20 = APEndpointPlaybackSessionMCCreate((uint64_t)v9, *(const void **)(v5 + 224), *(const void **)(v5 + 40), *(const void **)(v5 + 232), v11, &value);
      if ((_DWORD)v20)
      {
        v24 = v20;
        goto LABEL_55;
      }
      if (gLogCategory_APEndpoint > 50 || gLogCategory_APEndpoint == -1 && !_LogCategory_Initialize())
        goto LABEL_34;
    }
    goto LABEL_28;
  }
  v13 = *(const void **)(v5 + 192);
  if (v13)
    CFDictionarySetValue(v11, CFSTR("MetadataSource"), v13);
  endpoint_getBooleanFromExternalPlaybackCapabilitiesIfPresent();
  v14 = *(_QWORD *)(v5 + 40);
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v15)
    LODWORD(v15) = v15(v14, 35) != 0;
  if ((_DWORD)v15)
    v16 = (const void **)MEMORY[0x1E0C9AE50];
  else
    v16 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(v11, CFSTR("SupportsTLS_PSK"), *v16);
  v17 = APEndpointPlaybackSessionRemoteControlCreate((uint64_t)v9, *(const void **)(v5 + 224), *(const void **)(v5 + 456), v11, &value);
  if ((_DWORD)v17)
  {
    v24 = v17;
    goto LABEL_55;
  }
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
LABEL_28:
    LogPrintF();
LABEL_34:
  CFSetSetValue(*(CFMutableSetRef *)(v5 + 312), value);
  CMNotificationCenterGetDefaultLocalCenter();
  v21 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v21)
  {
    v24 = v21;
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    v22 = FigNotificationCenterAddWeakListener();
    if ((_DWORD)v22)
    {
      v24 = v22;
    }
    else
    {
      CMNotificationCenterGetDefaultLocalCenter();
      v23 = FigNotificationCenterAddWeakListener();
      if ((_DWORD)v23)
      {
        v24 = v23;
      }
      else
      {
        CMNotificationCenterGetDefaultLocalCenter();
        v24 = FigNotificationCenterAddWeakListener();
        if (!(_DWORD)v24)
        {
          *a2 = value;
          value = 0;
          goto LABEL_39;
        }
      }
    }
  }
LABEL_55:
  APSLogErrorAt();
LABEL_39:
  CFRelease(v11);
  if (value)
    CFRelease(value);
  if (v9)
LABEL_42:
    CFRelease(v9);
LABEL_43:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  return v24;
}

uint64_t endpoint_UpdateFeatures(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  if (*(_DWORD *)(DerivedStorage + 152))
  {
    if (a1)
      CFRetain(a1);
    if (a3)
      CFRetain(a3);
    APSDispatchAsyncFHelper();
    v6 = 0;
  }
  else
  {
    APSLogErrorAt();
    v6 = 4294949690;
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  return v6;
}

uint64_t endpoint_readActivationOptions(CFDictionaryRef theDict, uint64_t a2)
{
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v8;
  const void *Value;
  const void *v10;
  CFTypeID v11;
  const void *v12;

  if (*(_QWORD *)(a2 + 104))
    goto LABEL_2;
  v8 = (const void *)*MEMORY[0x1E0CA3760];
  if (!CFDictionaryContainsKey(theDict, (const void *)*MEMORY[0x1E0CA3760]))
    goto LABEL_2;
  Value = CFDictionaryGetValue(theDict, v8);
  if (!Value)
  {
    v12 = *(const void **)(a2 + 104);
    *(_QWORD *)(a2 + 104) = 0;
    if (!v12)
      goto LABEL_2;
LABEL_16:
    CFRelease(v12);
    goto LABEL_2;
  }
  v10 = Value;
  v11 = CFGetTypeID(Value);
  if (v11 != CFStringGetTypeID())
  {
    APSLogErrorAt();
    return 4294950576;
  }
  v12 = *(const void **)(a2 + 104);
  *(_QWORD *)(a2 + 104) = v10;
  CFRetain(v10);
  if (v12)
    goto LABEL_16;
LABEL_2:
  if (CFDictionaryContainsKey(theDict, (const void *)*MEMORY[0x1E0CA3720]))
    *(_DWORD *)(a2 + 40) = CFDictionaryGetInt64();
  v4 = (const void *)*MEMORY[0x1E0CA3770];
  if (CFDictionaryContainsKey(theDict, (const void *)*MEMORY[0x1E0CA3770]))
  {
    v5 = *(const void **)(a2 + 64);
    v6 = CFDictionaryGetValue(theDict, v4);
    *(_QWORD *)(a2 + 64) = v6;
    if (v6)
      CFRetain(v6);
    if (v5)
      CFRelease(v5);
  }
  FigCFDictionaryGetBooleanIfPresent();
  return 0;
}

uint64_t endpoint_shouldOnlyBeActivatedAsPartOfCluster()
{
  uint64_t result;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 48))
    return 0;
  result = APSIsEndpointClusteringEnabled();
  if ((_DWORD)result)
    return APSIsFBOPropertyNonNull() != 0;
  return result;
}

uint64_t endpoint_ensureSharedContextCreated(uint64_t a1, char a2, const __CFDictionary *a3, int a4)
{
  uint64_t DerivedStorage;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  const void **v10;
  uint64_t Int64;
  BOOL v12;
  int v13;
  uint64_t v14;
  int v15;
  const void *v16;
  const void *v17;
  uint64_t SharedContext;
  int v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v9 = Mutable;
    if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 48))
    {
      v10 = (const void **)MEMORY[0x1E0CF74F0];
    }
    else
    {
      Int64 = APSSettingsGetInt64();
      if (FigCFEqual())
        v12 = APSSettingsGetInt64() == 0;
      else
        v12 = FigCFEqual() == 0;
      v13 = !v12;
      v20 = v13;
      if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      v14 = APSGetFBOPropertyInt64();
      if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      v15 = v20 ^ 1;
      if (!v14)
        v15 = 1;
      if (Int64)
        v15 = 1;
      if (v15)
        v10 = (const void **)MEMORY[0x1E0CF74E8];
      else
        v10 = (const void **)MEMORY[0x1E0CF74F8];
    }
    CFDictionarySetValue(v9, CFSTR("PreferredNetworkClockType"), *v10);
    v16 = (const void *)*MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(v9, CFSTR("AllowP2PForNTP"), (const void *)*MEMORY[0x1E0C9AE50]);
    if (a4)
      v17 = v16;
    else
      v17 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(v9, CFSTR("IgnoreClientPIDForMediaRemote"), v17);
    SharedContext = APEndpointCopyFromActivationOptionsOrCreateSharedContext(a3, a2, (uint64_t)v9, DerivedStorage + 216, (_QWORD *)(DerivedStorage + 208), 0);
    if ((_DWORD)SharedContext)
      APSLogErrorAt();
    CFRelease(v9);
  }
  else
  {
    APSLogErrorAt();
    return 4294950575;
  }
  return SharedContext;
}

uint64_t endpoint_createMetadataSourceAndCommandSinkIfNeeded(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = endpoint_isInLocalStereoPairPersistentConnection();
  if (!a2 && v4)
  {
    endpoint_isInLocalStereoPairPersistentConnection();
    return 0;
  }
  v5 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (APSMultiPrimariesEnabled())
  {
    v6 = *(_QWORD *)(v5 + 200);
    if (!v6)
    {
      if (gLogCategory_APEndpoint <= 90 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      v9 = 4294949690;
      goto LABEL_38;
    }
    v7 = *MEMORY[0x1E0C9AE00];
    v8 = APMediaRemoteCommandSinkCreateWithRoutingContextUUID(*MEMORY[0x1E0C9AE00], v6, &cf);
    if ((_DWORD)v8)
    {
      v9 = v8;
LABEL_30:
      APSLogErrorAt();
LABEL_38:
      if (cf)
        CFRelease(cf);
LABEL_45:
      APSLogErrorAt();
      return v9;
    }
  }
  else
  {
    v7 = *MEMORY[0x1E0C9AE00];
    v10 = APMediaRemoteCommandSinkCreateWithNowPlayingAppPID(*MEMORY[0x1E0C9AE00], *(unsigned int *)(v5 + 176), &cf);
    if ((_DWORD)v10)
    {
      v9 = v10;
      goto LABEL_30;
    }
  }
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  *(_QWORD *)(DerivedStorage + 184) = cf;
  if ((a2 & 1) != 0)
    return 0;
  v11 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (APSMultiPrimariesEnabled())
  {
    v12 = *(_QWORD *)(v11 + 200);
    if (!v12)
    {
      if (gLogCategory_APEndpoint <= 90 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      v9 = 4294949690;
      goto LABEL_43;
    }
    v13 = APMetadataSourceCreateWithRoutingContextUUID(v7, v12, &cf);
    if ((_DWORD)v13)
    {
      v9 = v13;
LABEL_35:
      APSLogErrorAt();
LABEL_43:
      if (cf)
        CFRelease(cf);
      goto LABEL_45;
    }
  }
  else
  {
    v14 = APMetadataSourceCreateWithNowPlayingAppPID(v7, *(unsigned int *)(v11 + 176), &cf);
    if ((_DWORD)v14)
    {
      v9 = v14;
      goto LABEL_35;
    }
  }
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v9 = 0;
  *(_QWORD *)(DerivedStorage + 192) = cf;
  return v9;
}

void endpoint_postIsInUseDidChangeNotification(uint64_t a1, int a2)
{
  int v3;
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  v3 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 152);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v5 = Mutable;
    v6 = (const void *)*MEMORY[0x1E0C9AE50];
    v7 = (const void *)*MEMORY[0x1E0C9AE40];
    if (v3)
      v8 = (const void *)*MEMORY[0x1E0C9AE50];
    else
      v8 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(Mutable, CFSTR("IsInUse"), v8);
    if (a2)
      v9 = v6;
    else
      v9 = v7;
    CFDictionarySetValue(v5, CFSTR("WasAutoconnected"), v9);
    if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v5);
  }
  else
  {
    APSLogErrorAt();
  }
}

void endpoint_activateInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  int v3;
  unint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t CMBaseObject;
  void (*v22)(uint64_t, const __CFString *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, const __CFString *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  int v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  NSObject *v36;
  NSObject *v37;
  CFTypeRef v38;
  const void *v39;
  dispatch_time_t v40;
  NSObject *v41;
  uint64_t (*v42)(uint64_t);
  unsigned int v43;
  const void *v44;
  void *v45;
  const void *v46;
  uint64_t v47;
  int v48;
  unsigned int v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, const __CFString *, uint64_t, const void **);
  uint64_t v58;
  void (*v59)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v60;
  void (*v61)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v62;
  void (*v63)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v64;
  void (*v65)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v66;
  int v67;
  int v68;
  int v69;
  CFTypeRef v70;
  CFTypeRef v71;
  CFTypeRef v72;
  uint64_t v73;
  uint64_t v74;
  CFTypeRef v75;
  CFTypeRef v76;
  CFTypeRef v77;
  const void *v78;
  uint64_t v80;
  int v81;
  uint64_t v82;
  const void *v83;
  uint64_t v84;
  const __CFAllocator *v85;
  CFTypeRef v86;
  const void *v87;
  const void *v88;
  const void *v89;
  const void *v90;
  const void *v91;
  const void *v92;
  const void *v93;
  const void *v94;
  const void *v95;
  const void *v96;
  const void *v97;
  int shouldUseInactivityTimer;
  unsigned int v99;
  unint64_t v100;
  int v101;
  char v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  NSObject *v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *object;
  dispatch_object_t objecta;
  int v111;
  CFTypeRef cf[2];
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  CFDictionaryRef theDict[2];
  __int128 v119;
  __int128 v120;
  _QWORD block[6];
  CFMutableDictionaryRef v122;
  unint64_t v123;
  CFTypeRef v124;
  CFTypeRef v125;
  CFTypeRef v126[2];
  const void *v127[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v122 = 0;
  v123 = 0;
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = 0x1ED52E000uLL;
  if (*(_BYTE *)(DerivedStorage + 128))
  {
    APSLogErrorAt();
    v111 = 0;
    v9 = 0;
    v10 = 0;
    v8 = -16723;
    goto LABEL_125;
  }
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(a1 + 96))
  {
    if (CFDictionaryGetInt64())
      v6 = 1;
    else
      v6 = CFDictionaryGetInt64() != 0;
    v111 = v6;
  }
  else
  {
    v111 = 0;
  }
  v7 = *(_DWORD *)(a1 + 128);
  if (v7 == -16727)
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
    if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(DerivedStorage + 136) && *(_DWORD *)(DerivedStorage + 152) == 2)
    {
      v123 = *(_QWORD *)(DerivedStorage + 144);
      v8 = -16727;
    }
    else
    {
      v8 = -17604;
    }
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
    goto LABEL_18;
  }
  if (v7)
  {
    APSLogErrorAt();
    v9 = 0;
    v10 = 0;
    v8 = *(_DWORD *)(a1 + 128);
    goto LABEL_125;
  }
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v11 = *(const void **)(a1 + 80);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 40);
    v13 = CMBaseObjectGetDerivedStorage();
    if (!*(_QWORD *)(v13 + 584))
    {
      if (!v12)
      {
        APSLogErrorAt();
        v8 = -6762;
        goto LABEL_288;
      }
      v14 = v13;
      v15 = (uint64_t *)(v13 + 584);
      v16 = APMediaRemoteCommandReceiverCreate(*MEMORY[0x1E0C9AE00], v11, (int **)(v13 + 584));
      if (v16)
      {
        v8 = v16;
      }
      else
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        LOBYTE(cf[0]) = APEndpointDescriptionIsSourceVersionOlderThan(*(_QWORD *)(v14 + 40), 0x36193Eu);
        if (IsAppleInternalBuild())
          APSSettingsGetBooleanIfPresent();
        if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          LogPrintF();
        if (!LOBYTE(cf[0]))
          goto LABEL_34;
        v17 = APMediaRemoteCommandReceiverAddClient();
        if (v17)
        {
          v8 = v17;
        }
        else
        {
          APMediaRemoteCommandReceiverGetID(*v15);
          v18 = APSSetFBOPropertyInt64();
          if (v18)
          {
            v8 = v18;
          }
          else
          {
            v19 = APSSetFBOPropertyInt64();
            if (!v19)
            {
LABEL_34:
              if (gLogCategory_APEndpoint <= 40
                && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              goto LABEL_38;
            }
            v8 = v19;
          }
        }
      }
      APSLogErrorAt();
      goto LABEL_288;
    }
  }
LABEL_38:
  if (!*(_BYTE *)(DerivedStorage + 48))
  {
    v20 = *(_QWORD *)(a1 + 104);
    CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(a1 + 40));
    v22 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v22)
      v22(CMBaseObject, CFSTR("GroupID"), v20);
    v23 = *(_QWORD *)(a1 + 40);
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v25)
    {
      if ((v24 & 0xF) != 0)
        v26 = *MEMORY[0x1E0C9AE50];
      else
        v26 = *MEMORY[0x1E0C9AE40];
      v25(v23, CFSTR("IsMediaSession"), v26);
    }
  }
  v27 = *(_QWORD *)(a1 + 40);
  v28 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v3)
  {
    v42 = *(uint64_t (**)(uint64_t))(v28 + 32);
    if (v42)
    {
      v43 = v42(v27);
      if (!v43)
      {
LABEL_105:
        v44 = *(const void **)(a1 + 88);
        v4 = 0x1ED52E000uLL;
        if (v44)
        {
          v45 = *(void **)a1;
          v46 = *(const void **)(a1 + 40);
          v47 = CMBaseObjectGetDerivedStorage();
          v48 = APSGetFBOPropertyInt64();
          if (!*(_QWORD *)(v47 + 600) && v48 != 0)
          {
            v50 = APMetadataSenderCreate(*MEMORY[0x1E0C9AE00], v46, v48, *(NSObject **)(v47 + 576), v44, (uint64_t)v45, (uint64_t)endpoint_isAudioTimelineEstablished, (uint64_t)endpoint_getCurrentRTPTime, (uint64_t *)(v47 + 600));
            if (v50)
            {
              v8 = v50;
              APSLogErrorAt();
              goto LABEL_288;
            }
            APMetadataSourceStart((uint64_t)v44);
            if (gLogCategory_APEndpoint <= 50
              && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
          }
        }
        MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
        if (!*(_BYTE *)(DerivedStorage + 250) && endpoint_shouldOnlyBeActivatedAsPartOfCluster())
        {
          v8 = -72277;
LABEL_287:
          MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
LABEL_288:
          APSLogErrorAt();
LABEL_18:
          v9 = 0;
          v10 = 0;
          goto LABEL_125;
        }
        if (v3)
        {
          if (*(_QWORD *)(a1 + 48) != *(_QWORD *)(DerivedStorage + 136) || *(_DWORD *)(DerivedStorage + 152) != 1)
          {
            v8 = -17604;
            goto LABEL_287;
          }
          v8 = *(_DWORD *)(DerivedStorage + 156);
          if (!v8)
          {
            shouldUseInactivityTimer = endpoint_shouldUseInactivityTimer();
            *(_BYTE *)(DerivedStorage + 270) = shouldUseInactivityTimer;
            if (gLogCategory_APEndpoint <= 50)
            {
              if (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())
                LogPrintF();
              shouldUseInactivityTimer = *(unsigned __int8 *)(DerivedStorage + 270);
            }
            if (shouldUseInactivityTimer)
              endpoint_startInactivityTimer(*(void **)a1);
            if (v5 == 16)
              goto LABEL_294;
            LOBYTE(cf[0]) = 0;
            *(_DWORD *)(DerivedStorage + 536) = endpointdelegate_getInitialVolumeDBAndIsMuted(*(_QWORD *)a1, (float *)(DerivedStorage + 540), (float *)(DerivedStorage + 528), (BOOL *)cf);
            APSVolumeConvertDBToSliderValue();
            *(_DWORD *)(DerivedStorage + 516) = v101;
            v102 = (char)cf[0];
            *(_BYTE *)(DerivedStorage + 520) = cf[0];
            *(_BYTE *)(DerivedStorage + 532) = v102;
            if (gLogCategory_APEndpoint <= 50
              && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
            {
              APSVolumeConvertDBToSliderValue();
              LogPrintF();
            }
            goto LABEL_278;
          }
        }
        else
        {
          v8 = *(_DWORD *)(DerivedStorage + 156);
          if (!v8)
          {
            if (v5 == 16)
            {
LABEL_294:
              v100 = 16;
              goto LABEL_300;
            }
LABEL_278:
            endpoint_updateScreenRelatedConfiguration(*(const void **)a1, *(const __CFDictionary **)(a1 + 96));
            *(_BYTE *)(DerivedStorage + 280) = endpoint_isMediaPresentationModeAvailable();
            v99 = endpoint_setupStreams(*(const void **)a1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(const __CFDictionary **)(a1 + 96), (uint64_t *)&v123);
            if (v99)
            {
              v8 = v99;
              APSLogErrorAt();
              goto LABEL_287;
            }
            v100 = v123;
            if (*(_QWORD *)(a1 + 16) && !v123)
            {
              if (gLogCategory_APEndpoint <= 90
                && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              v8 = -16720;
              goto LABEL_287;
            }
            if ((v123 & 4) == 0 || !*(_QWORD *)(DerivedStorage + 328))
            {
LABEL_301:
              *(_QWORD *)(DerivedStorage + 144) = v100;
              v103 = *(_QWORD *)(a1 + 24);
              v104 = v100 & ~v103;
              v105 = v103 & ~v100;
              if (v3)
              {
                APSEventRecorderRecordEvent();
                endpoint_postPerformanceReport();
                *(_DWORD *)(DerivedStorage + 152) = 2;
              }
              if (*(_BYTE *)(DerivedStorage + 269) && v104 & 0xFFFFFFFFFFFFFFDFLL | v105 & 0xFFFFFFFFFFFFFFDFLL)
                endpoint_postInterruptingSessionStateDidChangeNotification(*(_QWORD *)a1, (v104 & 0xFFFFFFFFFFFFFFDFLL) != 0);
              endpoint_updateCurrentVolumeControlType();
              endpoint_updateIsVolumeAndMuteControlSupported();
              endpoint_updateVideoPlaybackIsActive(*(const void **)a1);
              *(_DWORD *)(DerivedStorage + 492) = 0;
              MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
              v10 = v105;
              if (!v3)
              {
                v8 = 0;
                v51 = 0;
                v9 = v104;
LABEL_172:
                v66 = *(_DWORD *)(v4 + 2352);
                if (v66 <= 50)
                {
                  if (v66 != -1 || _LogCategory_Initialize())
                    LogPrintF();
                  v68 = *(_DWORD *)(v4 + 2352);
                  if (v68 <= 30 && (v68 != -1 || _LogCategory_Initialize()))
                    LogPrintF();
                }
                if (v8)
                {
                  v69 = 0;
                }
                else
                {
                  if (v10)
                    endpoint_postStreamsChangedNotification(*(const void **)a1, v10, *(_QWORD *)(a1 + 48), 0);
                  if (v51 && !*(_BYTE *)(DerivedStorage + 48) && !*(_BYTE *)(DerivedStorage + 250))
                    APEndpointApplyInitialVolume(*(_QWORD *)a1);
                  v8 = 0;
                  v69 = 1;
                }
                goto LABEL_219;
              }
              v9 = v104;
              if (*(_QWORD *)(DerivedStorage + 24) && *(_QWORD *)(a1 + 64))
                APBrowserControllerRegisterEndpointActivated();
              if (introspector_getCollectionOfActiveEndpoints_once != -1)
                dispatch_once(&introspector_getCollectionOfActiveEndpoints_once, &__block_literal_global_37);
              if (introspector_getCollectionOfActiveEndpoints_coll)
              {
                v106 = *(NSObject **)introspector_getCollectionOfActiveEndpoints_coll;
                block[0] = MEMORY[0x1E0C809B0];
                block[1] = 0x40000000;
                block[2] = __endpoint_activateInternal_block_invoke;
                block[3] = &__block_descriptor_tmp_294;
                block[4] = introspector_getCollectionOfActiveEndpoints_coll;
                block[5] = a1;
                dispatch_sync(v106, block);
              }
              v8 = 0;
              goto LABEL_125;
            }
            if (gLogCategory_APEndpoint <= 50
              && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v100 = v123 & 0xFFFFFFFFFFFFFFFBLL;
LABEL_300:
            v123 = v100;
            goto LABEL_301;
          }
        }
        if (gLogCategory_APEndpoint <= 90 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          LogPrintF();
        goto LABEL_287;
      }
      v8 = v43;
    }
    else
    {
      v8 = -12782;
    }
    APSLogErrorAt();
    v51 = 0;
    v10 = 0;
    v9 = 0;
    v4 = 0x1ED52E000;
    goto LABEL_170;
  }
  v29 = *(uint64_t (**)(uint64_t))(v28 + 24);
  if (v29)
  {
    while (1)
    {
      v30 = v29(v27);
      if (v30 <= 200400)
      {
        v8 = -17608;
        if (v30 != -71164 && v30 != -71145)
        {
          if (!v30)
            goto LABEL_105;
LABEL_117:
          v8 = v30;
          goto LABEL_122;
        }
        goto LABEL_122;
      }
      if (v30 == 200503)
      {
        v8 = -17609;
        goto LABEL_122;
      }
      if (v30 != 200470 && v30 != 200401)
        goto LABEL_117;
      if (v111)
      {
        APSLogErrorAt();
        v9 = 0;
        v10 = 0;
        v111 = 1;
        v8 = -17600;
        goto LABEL_124;
      }
      v31 = *(const void **)a1;
      v32 = *(_QWORD *)(a1 + 48);
      v33 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x1CAA400CC](*(_QWORD *)(v33 + 120));
      if (*(_QWORD *)(v33 + 136) != v32 || *(_DWORD *)(v33 + 152) != 1)
        break;
      if (!*(_QWORD *)(v33 + 360))
      {
        v8 = 200401;
        if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          LogPrintF();
        goto LABEL_67;
      }
      v34 = *(_QWORD *)(v33 + 424);
      if (v34)
      {
        v34 = FigCFWeakReferenceHolderCopyReferencedObject();
        if (*(_QWORD *)(v33 + 424))
        {
          if (!v34)
          {
            if (gLogCategory_APEndpoint <= 90
              && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v8 = 0;
            goto LABEL_67;
          }
        }
      }
      v107 = v34;
      v127[0] = 0;
      v35 = malloc_type_calloc(1uLL, 0x20uLL, 0x1020040B07198D1uLL);
      *(_OWORD *)v35 = *(_OWORD *)(v33 + 136);
      v35[4] = *(_DWORD *)(v33 + 152);
      v36 = *(NSObject **)(v33 + 256);
      if (v36)
      {
        if (gLogCategory_APEndpoint > 90)
          goto LABEL_81;
        if (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())
          LogPrintF();
        v36 = *(NSObject **)(v33 + 256);
        if (v36)
        {
LABEL_81:
          dispatch_release(v36);
          *(_QWORD *)(v33 + 256) = 0;
        }
      }
      v37 = dispatch_semaphore_create(0);
      *(_QWORD *)(v33 + 256) = v37;
      *((_QWORD *)v35 + 3) = v37;
      dispatch_retain(v37);
      object = *(NSObject **)(v33 + 256);
      dispatch_retain(object);
      endpoint_copyAuthorizationType((uint64_t)v31, v127);
      v38 = CFRetain(v31);
      v39 = *(const void **)(v33 + 360);
      cf[0] = v38;
      cf[1] = v39;
      *(_QWORD *)&v113 = v107;
      *((const void **)&v113 + 1) = v127[0];
      *(_QWORD *)&v114 = v32;
      *((_QWORD *)&v114 + 1) = endpoint_authHandlingComplete;
      *(_QWORD *)&v115 = v35;
      *(_DWORD *)(v33 + 264) = 0;
      CFRetain(v31);
      if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      APSDispatchAsyncFHelper();
      MEMORY[0x1CAA400E4](*(_QWORD *)(v33 + 120));
      if (object)
      {
        v40 = dispatch_time(0, 30000000000);
        if (dispatch_semaphore_wait(object, v40))
        {
          if (gLogCategory_APEndpoint <= 90
            && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v8 = -16728;
        }
        else
        {
          MEMORY[0x1CAA400CC](*(_QWORD *)(v33 + 120));
          if (*(_QWORD *)(v33 + 136) == v32 && *(_DWORD *)(v33 + 152) == 1)
          {
            v8 = *(_DWORD *)(v33 + 264);
            v41 = *(NSObject **)(v33 + 256);
            if (v41)
            {
              dispatch_release(v41);
              *(_QWORD *)(v33 + 256) = 0;
            }
          }
          else
          {
            v8 = -17604;
          }
          MEMORY[0x1CAA400E4](*(_QWORD *)(v33 + 120));
        }
        dispatch_release(object);
        if (v8)
        {
LABEL_102:
          APSLogErrorAt();
          v111 = 0;
          goto LABEL_123;
        }
      }
LABEL_68:
      v27 = *(_QWORD *)(a1 + 40);
      v29 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      v8 = -12782;
      if (!v29)
        goto LABEL_122;
    }
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v8 = -17604;
LABEL_67:
    MEMORY[0x1CAA400E4](*(_QWORD *)(v33 + 120));
    if (v8)
      goto LABEL_102;
    goto LABEL_68;
  }
  v8 = -12782;
LABEL_122:
  APSLogErrorAt();
LABEL_123:
  v9 = 0;
  v10 = 0;
LABEL_124:
  v4 = 0x1ED52E000;
LABEL_125:
  v51 = v3 != 0;
  if (!v3 || v8 == -16727)
    goto LABEL_170;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  v52 = *(_QWORD *)(a1 + 40);
  v53 = *(_QWORD *)(a1 + 136);
  v54 = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  v126[1] = 0;
  v127[0] = 0;
  v125 = 0;
  v126[0] = 0;
  v124 = 0;
  if (!*(_QWORD *)(v54 + 304))
    goto LABEL_159;
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v54 + 296), CFSTR("activationMs")))
  {
    if (gLogCategory_APEndpoint <= 90 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    goto LABEL_159;
  }
  if (!v52)
  {
    if (!v53)
      goto LABEL_159;
    v108 = DerivedStorage;
    objecta = (dispatch_object_t)v9;
LABEL_150:
    if (v8)
    {
      APSEventRecorderGetTimeSinceEventInMilliSecond();
      CFDictionarySetInt64();
    }
    else
    {
      APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
    }
    CFDictionarySetInt64();
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    DerivedStorage = v108;
    v9 = (uint64_t)objecta;
    if (!APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursiveEx())
      CFDictionarySetInt64();
    goto LABEL_159;
  }
  v55 = *MEMORY[0x1E0C9AE00];
  v56 = APSenderSessionGetCMBaseObject(v52);
  v57 = *(void (**)(uint64_t, const __CFString *, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v57)
  {
    v57(v56, CFSTR("InitialRTCStats"), v55, v127);
    if (v127[0])
    {
      if (CFDictionaryMergeDictionary())
      {
        APSLogErrorAt();
        goto LABEL_159;
      }
      if (!v53)
      {
LABEL_159:
        if (v127[0])
          CFRelease(v127[0]);
        goto LABEL_161;
      }
      goto LABEL_136;
    }
  }
  if (v53)
  {
LABEL_136:
    v58 = APSenderSessionGetCMBaseObject(v52);
    v59 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v59)
    {
      v59(v58, CFSTR("EventRecorder"), v55, cf);
      if (cf[0])
        MEMORY[0x1CAA3DC60](v53);
    }
    v60 = APSenderSessionGetCMBaseObject(v52);
    v61 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v61)
      v61(v60, CFSTR("ActivationMsgsRoundTripTimeMs"), v55, v126);
    v62 = APSenderSessionGetCMBaseObject(v52);
    v63 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v63)
      v63(v62, CFSTR("ActivationMsgsProcessingTimeMs"), v55, &v125);
    v108 = DerivedStorage;
    objecta = (dispatch_object_t)v9;
    v64 = APSenderSessionGetCMBaseObject(v52);
    v65 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v65)
    {
      v65(v64, CFSTR("ActivationConnectionTimeMs"), v55, &v124);
      if (v126[0])
      {
        if (v125 && v124)
        {
          FigCFNumberGetUInt64();
          FigCFNumberGetUInt64();
          FigCFNumberGetUInt64();
        }
      }
    }
    goto LABEL_150;
  }
LABEL_161:
  if (cf[0])
    CFRelease(cf[0]);
  if (v126[0])
    CFRelease(v126[0]);
  if (v125)
    CFRelease(v125);
  v4 = 0x1ED52E000uLL;
  if (v124)
    CFRelease(v124);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  v51 = 1;
LABEL_170:
  if (v8 == -16727 || !v8)
    goto LABEL_172;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  *(_OWORD *)theDict = 0u;
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  *(_OWORD *)cf = 0u;
  v67 = *(_DWORD *)(v4 + 2352);
  if (v67 <= 90 && (v67 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(DerivedStorage + 136) && *(_DWORD *)(DerivedStorage + 152) == 1)
  {
    cf[0] = CFRetain(*(CFTypeRef *)a1);
    v70 = *(CFTypeRef *)(DerivedStorage + 448);
    if (v70)
      v70 = CFRetain(v70);
    cf[1] = v70;
    LODWORD(v113) = *(_DWORD *)(DerivedStorage + 156);
    v71 = CFRetain(CFSTR("FailedActivation"));
    DWORD1(v116) = 0;
    v120 = 0uLL;
    v72 = *(CFTypeRef *)(a1 + 40);
    v73 = *(_QWORD *)(a1 + 48);
    *((_QWORD *)&v113 + 1) = v71;
    v74 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)&v115 = v73;
    *((_QWORD *)&v115 + 1) = v74;
    LOBYTE(v116) = *(_BYTE *)(DerivedStorage + 488);
    if (v72)
      v72 = CFRetain(v72);
    *(_QWORD *)&v114 = v72;
    v75 = *(CFTypeRef *)(DerivedStorage + 168);
    if (v75)
      v75 = CFRetain(v75);
    *((_QWORD *)&v114 + 1) = v75;
    BYTE1(v116) = 0;
    v76 = *(CFTypeRef *)(a1 + 88);
    if (v76)
      v76 = CFRetain(v76);
    *((_QWORD *)&v117 + 1) = v76;
    *(_QWORD *)&v119 = FigCFDictionaryCreateMutableCopy();
    v77 = *(CFTypeRef *)(DerivedStorage + 304);
    if (v77)
      v77 = CFRetain(v77);
    *((_QWORD *)&v119 + 1) = v77;
    *(_DWORD *)(DerivedStorage + 492) = v8;
    endpoint_resetActivationState(DerivedStorage + 136);
    if (!*(_BYTE *)(DerivedStorage + 49) || !*(_BYTE *)(DerivedStorage + 48))
    {
      v78 = *(const void **)(DerivedStorage + 472);
      if (v78)
      {
        CFRelease(v78);
        *(_QWORD *)(DerivedStorage + 472) = 0;
      }
    }
    endpoint_removeAPEndpointManagerNotificationsListenerIfNeeded();
    endpoint_removeHDMILatencyNotificationListenerIfNeeded();
    endpoint_stopListeningToSenderSessionAndStreamsNotifications(*(_QWORD *)a1, v114);
    if (theDict[1])
      CFDictionaryApplyFunction(theDict[1], (CFDictionaryApplierFunction)endpoint_unsubscribeRCS, *(void **)a1);
    if (theDict[0])
      CFSetApplyFunction(theDict[0], (CFSetApplierFunction)endpoint_unsubscribePlaybackSession, *(void **)a1);
    endpoint_deregisterWithBrowserController(*(const void **)a1);
    APSDispatchAsyncFHelper();
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  v69 = 0;
  if (v8 != -17600 && v111 != 0)
    v8 = -17601;
LABEL_219:
  v80 = *(_QWORD *)(a1 + 112);
  if (v80)
  {
    if (v8 == -16727)
      v81 = 1;
    else
      v81 = v69;
    if (v81)
      v82 = v123;
    else
      v82 = 0;
    v83 = *(const void **)(a1 + 48);
    cf[0] = *(CFTypeRef *)a1;
    cf[1] = v83;
    *(_QWORD *)&v113 = v82;
    *((_QWORD *)&v113 + 1) = v8;
    v84 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)&v114 = v80;
    *((_QWORD *)&v114 + 1) = v84;
    CFRetain(cf[0]);
    APSDispatchAsyncFHelper();
  }
  if (v69)
  {
    v85 = CFGetAllocator(*(CFTypeRef *)a1);
    APEndpointCreateEndpointActivationNotificationPayload(v85, v123, *(_QWORD *)(a1 + 48), &v122);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (v122)
    {
      CFRelease(v122);
      v122 = 0;
    }
    if (v9)
      endpoint_postStreamsChangedNotification(*(const void **)a1, v9, *(_QWORD *)(a1 + 48), 1);
    if (!*(_BYTE *)(DerivedStorage + 48) && !CFDictionaryGetInt64())
    {
      v86 = CFRetain(*(CFTypeRef *)a1);
      v87 = *(const void **)(a1 + 48);
      cf[0] = v86;
      cf[1] = v87;
      *(_QWORD *)&v113 = v123;
      APSDispatchAsyncFHelper();
    }
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v88 = *(const void **)(a1 + 8);
  if (v88)
    CFRelease(v88);
  v89 = *(const void **)(a1 + 96);
  if (v89)
    CFRelease(v89);
  v90 = *(const void **)(a1 + 40);
  if (v90)
    CFRelease(v90);
  v91 = *(const void **)(a1 + 56);
  if (v91)
    CFRelease(v91);
  v92 = *(const void **)(a1 + 64);
  if (v92)
    CFRelease(v92);
  v93 = *(const void **)(a1 + 72);
  if (v93)
    CFRelease(v93);
  v94 = *(const void **)(a1 + 80);
  if (v94)
    CFRelease(v94);
  v95 = *(const void **)(a1 + 88);
  if (v95)
    CFRelease(v95);
  v96 = *(const void **)(a1 + 104);
  if (v96)
    CFRelease(v96);
  v97 = *(const void **)(a1 + 136);
  if (v97)
    CFRelease(v97);
  if (v122)
    CFRelease(v122);
}

BOOL endpoint_isInLocalStereoPairPersistentConnection()
{
  uint64_t v0;
  _BOOL4 v1;
  uint64_t DerivedStorage;
  const __CFBoolean *v3;
  int Value;

  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 64);
  if (v0)
    v1 = v0 == *MEMORY[0x1E0C9AE50];
  else
    v1 = APSSettingsIsFeatureEnabled() != 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 104) == 7)
  {
    v3 = *(const __CFBoolean **)(DerivedStorage + 96);
    if (v3)
    {
      Value = CFBooleanGetValue(v3);
    }
    else
    {
      APSCopyTightSyncInfo();
      Value = 0;
    }
  }
  else
  {
    Value = 0;
  }
  return Value && v1;
}

uint64_t endpoint_handleEventMessage()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 40)
  {
    if (gLogCategory_APEndpoint != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

uint64_t endpoint_handleEventMessageCreatingReply(uint64_t a1, int a2, uint64_t a3, const void *a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  int v9;
  uint64_t v10;
  BOOL v11;
  const __CFAllocator *v12;
  uint64_t CFDataWithBlockBufferNoCopy;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  CFTypeID v16;
  uint64_t v17;
  const void *Value;
  const void *v19;
  uint64_t v20;
  const __CFDictionary *v21;
  const void *v22;
  CFTypeRef v23;
  const __CFDictionary *v24;
  const void *v25;
  uint64_t Int64;
  const __CFArray *v27;
  const __CFArray *v28;
  CFTypeID v29;
  const __CFDictionary *v30;
  const void *v31;
  uint64_t TypedValueAtIndex;
  const void *v33;
  const void *v34;
  const void *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, const void *);
  const void *v38;
  unsigned int v40;
  unsigned int restarted;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  v9 = *(unsigned __int8 *)(DerivedStorage + 128);
  v10 = *(_QWORD *)(DerivedStorage + 224);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  if (v10)
    v11 = v9 == 0;
  else
    v11 = 0;
  if (!v11)
  {
    if (v9)
      v40 = -16723;
    else
      v40 = 0;
    if (v10)
      v20 = v40;
    else
      v20 = 4294950570;
    goto LABEL_80;
  }
  if (a2 == 1668116068)
  {
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
    if ((_DWORD)CFDataWithBlockBufferNoCopy)
    {
      v20 = CFDataWithBlockBufferNoCopy;
LABEL_80:
      APSLogErrorAt();
      v15 = 0;
      goto LABEL_65;
    }
    v14 = (const __CFDictionary *)CFPropertyListCreateWithData(v12, 0, 0, 0, 0);
    v15 = v14;
    if (!v14 || (v16 = CFGetTypeID(v14), v16 != CFDictionaryGetTypeID()))
    {
      APSLogErrorAt();
      v20 = 4294950576;
      goto LABEL_65;
    }
    restarted = 0;
    v17 = CMBaseObjectGetDerivedStorage();
    Value = CFDictionaryGetValue(v15, CFSTR("type"));
    if (Value)
    {
      v19 = Value;
      if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      if (CFEqual(v19, CFSTR("forceKeyFrame")))
      {
        MEMORY[0x1CAA400CC](*(_QWORD *)(v17 + 120));
        v21 = *(const __CFDictionary **)(v17 + 168);
        if (v21)
        {
          v22 = CFDictionaryGetValue(v21, (const void *)*MEMORY[0x1E0CA48A0]);
          if (v22)
          {
            v23 = CFRetain(v22);
            MEMORY[0x1CAA400E4](*(_QWORD *)(v17 + 120));
            if (!v23)
              goto LABEL_63;
            restarted = APEndpointStreamScreenRestartBitstream((uint64_t)v23);
            if (!restarted)
              goto LABEL_40;
            goto LABEL_96;
          }
        }
        goto LABEL_62;
      }
      if (CFEqual(v19, CFSTR("setScreenRecordingState")))
      {
        MEMORY[0x1CAA400CC](*(_QWORD *)(v17 + 120));
        v24 = *(const __CFDictionary **)(v17 + 168);
        if (v24)
        {
          v25 = CFDictionaryGetValue(v24, (const void *)*MEMORY[0x1E0CA48A0]);
          if (v25)
          {
            v23 = CFRetain(v25);
            MEMORY[0x1CAA400E4](*(_QWORD *)(v17 + 120));
            if (!v23)
              goto LABEL_63;
            Int64 = CFDictionaryGetInt64();
            restarted = APEndpointStreamScreenSetRecordingState((uint64_t)v23, Int64 != 0);
            if (!restarted)
              goto LABEL_40;
            goto LABEL_96;
          }
        }
        goto LABEL_62;
      }
      if (CFEqual(v19, CFSTR("updateDisplayInfo")))
      {
        v27 = (const __CFArray *)CFDictionaryGetValue(v15, CFSTR("displays"));
        if (v27 && (v28 = v27, v29 = CFGetTypeID(v27), v29 == CFArrayGetTypeID()))
        {
          if (CFArrayGetCount(v28) == 1)
          {
            MEMORY[0x1CAA400CC](*(_QWORD *)(v17 + 120));
            v30 = *(const __CFDictionary **)(v17 + 168);
            if (v30)
            {
              v31 = CFDictionaryGetValue(v30, (const void *)*MEMORY[0x1E0CA48A0]);
              if (v31)
              {
                v23 = CFRetain(v31);
                MEMORY[0x1CAA400E4](*(_QWORD *)(v17 + 120));
                if (!v23)
                  goto LABEL_63;
                CFDictionaryGetTypeID();
                TypedValueAtIndex = CFArrayGetTypedValueAtIndex();
                restarted = APEndpointStreamScreenUpdateDisplayInfo((uint64_t)v23, TypedValueAtIndex);
                if (!restarted)
                  goto LABEL_40;
LABEL_96:
                APSLogErrorAt();
LABEL_40:
                CFRelease(v23);
                goto LABEL_63;
              }
            }
LABEL_62:
            MEMORY[0x1CAA400E4](*(_QWORD *)(v17 + 120));
            goto LABEL_63;
          }
          restarted = -16720;
        }
        else
        {
          restarted = -16720;
        }
        goto LABEL_83;
      }
      if (CFEqual(v19, CFSTR("sendMediaRemoteCommand")))
      {
        MEMORY[0x1CAA400CC](*(_QWORD *)(v17 + 120));
        if (*(_DWORD *)(v17 + 152) == 2)
        {
          CFRetain(a4);
          CFRetain(v15);
          v33 = *(const void **)(v17 + 448);
          if (v33)
            CFRetain(v33);
          APSDispatchAsyncFHelper();
          restarted = 0;
        }
        else
        {
          restarted = -16726;
        }
        MEMORY[0x1CAA400E4](*(_QWORD *)(v17 + 120));
        if (!restarted)
          goto LABEL_64;
        goto LABEL_83;
      }
      if (CFEqual(v19, CFSTR("remoteConrolSessionCreate")))
      {
        restarted = apEndpoint_handleCreateIncomingRCSCommand(a4, v15);
        if (restarted)
        {
LABEL_83:
          APSLogErrorAt();
          goto LABEL_63;
        }
LABEL_64:
        v20 = 0;
        *a5 = 0;
        goto LABEL_65;
      }
      if (CFEqual(v19, CFSTR("remoteControlSessionInvalidate")))
      {
        restarted = apEndpoint_handleInvalidateIncomingRCSCommand((uint64_t)a4, v15);
        if (restarted)
          goto LABEL_83;
        goto LABEL_64;
      }
      if (CFEqual(v19, CFSTR("updateInfo")))
      {
        v34 = CFDictionaryGetValue(v15, CFSTR("value"));
        if (!v34)
        {
          APSLogErrorAt();
          v20 = 4294960591;
LABEL_100:
          APSLogErrorAt();
          goto LABEL_65;
        }
        v35 = v34;
        MEMORY[0x1CAA400CC](*(_QWORD *)(v17 + 120));
        if (!*(_DWORD *)(v17 + 152))
          goto LABEL_62;
        v36 = *(_QWORD *)(v17 + 40);
        v37 = *(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (v37)
        {
          restarted = v37(v36, v35);
          if (!restarted)
          {
            v38 = *(const void **)(v17 + 272);
            if (v38)
            {
              CFRelease(v38);
              *(_QWORD *)(v17 + 272) = 0;
            }
            goto LABEL_62;
          }
        }
        else
        {
          restarted = -12782;
        }
        MEMORY[0x1CAA400E4](*(_QWORD *)(v17 + 120));
        goto LABEL_83;
      }
      if (CFEqual(v19, CFSTR("regroupTightSyncBuddy")))
      {
        if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          LogPrintF();
        notify_post("kAirPlayWHANotification_RegroupTightSyncBuddy");
      }
      else if (CFEqual(v19, CFSTR("FPSSecureStop")))
      {
        CFDictionaryGetValue(v15, CFSTR("FPSSecureStopPayload"));
        FigAirPlaySecureStopRouterFinalizeRecordAndCommitToDisk();
      }
      else
      {
        if (CFEqual(v19, CFSTR("htSecondaryNonPersistentSessionStarted")))
        {
          restarted = endpoint_handleHTSecondaryNonPersistentSessionStartedEvent();
          if (!restarted)
            goto LABEL_64;
          goto LABEL_83;
        }
        if (gLogCategory_APEndpoint <= 60 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          LogPrintF();
      }
    }
LABEL_63:
    v20 = restarted;
    if (!restarted)
      goto LABEL_64;
    goto LABEL_100;
  }
  if (gLogCategory_APEndpoint <= 60 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v15 = 0;
  v20 = 4294950678;
LABEL_65:
  if (v15)
    CFRelease(v15);
  return v20;
}

void endpoint_getSessionProtocolOverrideString(CFTypeRef *a1)
{
  const void *v2;

  v2 = (const void *)APSSettingsCopyValue();
  *a1 = v2;
  if (v2 && !CFEqual(v2, CFSTR("legacy")) && !CFEqual(*a1, CFSTR("airplay")))
  {
    if (gLogCategory_APEndpoint <= 60 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    if (*a1)
    {
      CFRelease(*a1);
      *a1 = 0;
    }
  }
}

BOOL endpoint_isInLocalClusterOfAppleTV()
{
  return *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 104) == 4 && endpoint_isInLocalCluster();
}

void endpoint_handleMediaRemoteCommand(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t TypedValue;
  int v8;
  CFTypeRef v9;
  const __CFDictionary *v10;
  uint64_t v11;
  const void *Value;
  char *v13;
  unint64_t v14;
  double v15;
  float v16;
  int v17;
  float v18;
  float v19;
  float v20;
  BOOL v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  const void *v27;
  const void *v28;
  int v29;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 584))
  {
    APSLogErrorAt();
    v13 = 0;
    v5 = 0;
    v4 = 0;
    goto LABEL_34;
  }
  v3 = DerivedStorage;
  v4 = (_BYTE *)CFDictionaryCopyCString();
  v5 = (_BYTE *)CFDictionaryCopyCString();
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (v4 && *v4)
  {
    v6 = (int)TextToInt32();
    CFDictionaryGetTypeID();
    TypedValue = CFDictionaryGetTypedValue();
    APMediaRemoteCommandReceiverHandleMRCommand(*(_QWORD *)(v3 + 584), v6, TypedValue);
LABEL_15:
    v13 = 0;
    goto LABEL_34;
  }
  if (!v5 || !*v5)
    goto LABEL_15;
  v8 = TextToFourCharCode();
  if (v8 != 1685482595)
  {
    v13 = 0;
    v14 = 0;
LABEL_33:
    APMediaRemoteCommandReceiverHandleAPCommand(*(_QWORD *)(v3 + 584), v8, (uint64_t)v13, v14);
    goto LABEL_34;
  }
  v9 = *(CFTypeRef *)a1;
  v10 = *(const __CFDictionary **)(a1 + 16);
  v29 = 0;
  v11 = CMBaseObjectGetDerivedStorage();
  CFDictionaryGetValue(v10, CFSTR("volume"));
  Value = CFDictionaryGetValue(v10, CFSTR("isMuted"));
  MEMORY[0x1CAA400CC](*(_QWORD *)(v11 + 120));
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  CFGetDouble();
  v16 = v15;
  v17 = Value == (const void *)*MEMORY[0x1E0C9AE50];
  APSVolumeConvertDBToSliderValue();
  v19 = v18;
  APSVolumeConvertDBToSliderValue();
  v21 = v20 < v16;
  v22 = v16;
  if (v21)
    APSVolumeConvertDBToSliderValue();
  if (v19 > v22 || (APSVolumeConvertDBToSliderValue(), v21 = v23 < v16, v24 = v16, v21))
    APSVolumeConvertDBToSliderValue();
  endpointdelegate_setVolumeSliderInternal(v9, 0, 0, v24);
  if (*(_BYTE *)(v11 + 51)
    && *(unsigned __int8 *)(v11 + 520) != v17
    && (*(_BYTE *)(v11 + 520) = v17, (v29 = endpoint_postMuteDidChangeNotification()) != 0))
  {
    APSLogErrorAt();
  }
  else
  {
    APSVolumeConvertSliderValueToDB();
    *(float *)(v11 + 528) = v25;
    *(_BYTE *)(v11 + 532) = v17;
    if (!*(_BYTE *)(v11 + 250))
    {
      v26 = v25;
      v13 = (char *)malloc_type_calloc(0x40uLL, 1uLL, 0x100004077774924uLL);
      v14 = snprintf(v13, 0x3FuLL, "%lf", v26);
      goto LABEL_31;
    }
  }
  v13 = 0;
  v14 = 0;
LABEL_31:
  MEMORY[0x1CAA400E4](*(_QWORD *)(v11 + 120));
  if (!v29)
  {
    if (!v13)
      goto LABEL_34;
    goto LABEL_33;
  }
  APSLogErrorAt();
LABEL_34:
  free(v13);
  free(v5);
  free(v4);
  v27 = *(const void **)(a1 + 16);
  if (v27)
    CFRelease(v27);
  v28 = *(const void **)(a1 + 8);
  if (v28)
    CFRelease(v28);
  CFRelease(*(CFTypeRef *)a1);
}

uint64_t apEndpoint_handleCreateIncomingRCSCommand(const void *a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  uint64_t CommChannel;
  __CFDictionary *v13;
  const __CFAllocator *v14;
  void *value[4];

  value[3] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value[0] = 0;
  if (!a1)
    goto LABEL_12;
  v5 = DerivedStorage;
  FigEndpointExtendedGetClassID();
  if (!CMBaseObjectIsMemberOfClass() || !a2)
    goto LABEL_12;
  if (*(_BYTE *)(v5 + 48))
  {
    APSLogErrorAt();
    CommChannel = 4294950570;
    goto LABEL_20;
  }
  v6 = CFDictionaryGetValue(a2, CFSTR("clientTypeUUID"));
  if (!v6 || (v7 = v6, (v8 = CFDictionaryGetValue(a2, CFSTR("streamID"))) == 0))
  {
LABEL_12:
    APSLogErrorAt();
    CommChannel = 4294950576;
LABEL_20:
    if (gLogCategory_APEndpoint <= 90 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    return CommChannel;
  }
  v9 = v8;
  CFDictionaryGetValue(a2, CFSTR("clientUUID"));
  FigCFDictionaryGetInt64IfPresent();
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    CommChannel = 4294960568;
    goto LABEL_20;
  }
  v11 = Mutable;
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA38E0], v7);
  CFDictionarySetValue(v11, CFSTR("streamID"), v9);
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  FigCFDictionarySetValue();
  UUIDGet();
  CFDictionarySetUUIDString();
  CommChannel = apEndpoint_CreateCommChannel(a1, v11, (CFTypeRef *)value);
  if ((_DWORD)CommChannel)
  {
    APSLogErrorAt();
  }
  else
  {
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    MEMORY[0x1CAA400CC](*(_QWORD *)(v5 + 120));
    v13 = *(__CFDictionary **)(v5 + 344);
    if (!v13)
    {
      v14 = CFGetAllocator(a1);
      v13 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_QWORD *)(v5 + 344) = v13;
    }
    CFDictionarySetValue(v13, v9, value[0]);
    MEMORY[0x1CAA400E4](*(_QWORD *)(v5 + 120));
  }
  CFRelease(v11);
  if (value[0])
    CFRelease(value[0]);
  if ((_DWORD)CommChannel)
    goto LABEL_20;
  return CommChannel;
}

uint64_t apEndpoint_handleInvalidateIncomingRCSCommand(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;
  const void *v7;
  const __CFDictionary *v8;
  const void *v9;
  uint64_t v10;
  dispatch_queue_t v11;
  NSObject *v12;
  _QWORD block[6];
  void *value;
  char label[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  v18 = 0u;
  v19 = 0u;
  *(_OWORD *)label = 0u;
  v17 = 0u;
  if (!a2)
  {
    APSLogErrorAt();
LABEL_24:
    v10 = 4294950576;
    goto LABEL_10;
  }
  v5 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 48))
  {
    APSLogErrorAt();
    a2 = 0;
    v10 = 4294950570;
    goto LABEL_10;
  }
  v6 = CFDictionaryGetValue(a2, CFSTR("streamID"));
  if (!v6)
  {
    APSLogErrorAt();
    a2 = 0;
    goto LABEL_24;
  }
  v7 = v6;
  MEMORY[0x1CAA400CC](*(_QWORD *)(v5 + 120));
  v8 = *(const __CFDictionary **)(v5 + 344);
  if (!v8 || !CFDictionaryGetValueIfPresent(v8, v7, (const void **)&value))
  {
    MEMORY[0x1CAA400E4](*(_QWORD *)(v5 + 120));
LABEL_9:
    APSLogErrorAt();
    a2 = 0;
    v10 = 4294950571;
    goto LABEL_10;
  }
  v9 = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 336), value);
  if (v9)
    a2 = (const __CFDictionary *)CFRetain(v9);
  else
    a2 = 0;
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v5 + 344), v7);
  MEMORY[0x1CAA400E4](*(_QWORD *)(v5 + 120));
  if (!a2)
    goto LABEL_9;
  SNPrintF();
  v11 = dispatch_queue_create(label, 0);
  if (v11)
  {
    v12 = v11;
    CFRetain(a2);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __apEndpoint_handleInvalidateIncomingRCSCommand_block_invoke;
    block[3] = &__block_descriptor_tmp_270_0;
    block[4] = a2;
    block[5] = a1;
    dispatch_async(v12, block);
    CFRelease(a2);
    dispatch_release(v12);
    return 0;
  }
  APSLogErrorAt();
  v10 = 4294950575;
LABEL_10:
  if (gLogCategory_APEndpoint <= 90 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (a2)
    CFRelease(a2);
  return v10;
}

uint64_t endpoint_handleHTSecondaryNonPersistentSessionStartedEvent()
{
  uint64_t DerivedStorage;
  int v1;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  if (!*(_BYTE *)(DerivedStorage + 251))
  {
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
    return 0;
  }
  v1 = *(_DWORD *)(DerivedStorage + 252);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  if (v1 != 2)
    return 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = Mutable;
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v3);
    return 0;
  }
  APSLogErrorAt();
  return 4294950575;
}

uint64_t apEndpoint_CreateCommChannel(const void *a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  uint64_t FigEndpoint;
  uint64_t v7;
  CFTypeRef v8;
  uint64_t (*v9)(CFTypeRef, void (*)(uint64_t, const void *, const void *, const void *), uint64_t);
  uint64_t v10;
  uint64_t v11;
  CFTypeRef cf;
  CFTypeRef v14;

  FigEndpoint = FigEndpointExtendedGetFigEndpoint();
  cf = 0;
  v14 = 0;
  v7 = endpoint_createCommChannelInternal(a1, a2, &cf, &v14);
  if ((_DWORD)v7)
  {
    v11 = v7;
    goto LABEL_7;
  }
  v8 = cf;
  v9 = *(uint64_t (**)(CFTypeRef, void (*)(uint64_t, const void *, const void *, const void *), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v9)
  {
    v11 = 4294954514;
LABEL_7:
    APSLogErrorAt();
    goto LABEL_8;
  }
  v10 = v9(v8, endpoint_handleRemoteControlSessionEvent, FigEndpoint);
  if ((_DWORD)v10)
  {
    v11 = v10;
    goto LABEL_7;
  }
  v11 = 0;
  if (a3)
  {
    *a3 = v14;
    v14 = 0;
  }
LABEL_8:
  if (cf)
    CFRelease(cf);
  if (v14)
    CFRelease(v14);
  return v11;
}

uint64_t endpoint_createCommChannelInternal(const void *a1, const __CFDictionary *MutableCopy, CFTypeRef *a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  const void *v9;
  CFTypeRef v10;
  uint64_t Int64;
  const void *Value;
  const void *v13;
  uint64_t v14;
  const void *v15;
  CFTypeRef *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t);
  int v25;
  const void *TypedValue;
  const __CFDictionary *v27;
  const __CFAllocator *v28;
  const __CFAllocator *v29;
  CFMutableDictionaryRef Mutable;
  uint64_t CMBaseObject;
  uint64_t (*v32)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  const void *FigEndpoint;
  CFTypeRef *v35;
  CFTypeRef v36;
  CFTypeRef cf;
  unsigned int v38;

  v38 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v36 = 0;
  cf = 0;
  if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  if (!MutableCopy)
  {
    APSLogErrorAt();
    v10 = 0;
    goto LABEL_91;
  }
  if (*(_BYTE *)(DerivedStorage + 128))
  {
    APSLogErrorAt();
    v10 = 0;
    MutableCopy = 0;
    v25 = -16723;
    goto LABEL_49;
  }
  v9 = *(const void **)(DerivedStorage + 224);
  if (v9)
    v10 = CFRetain(v9);
  else
    v10 = 0;
  if (*(_DWORD *)(DerivedStorage + 152) == 2)
  {
    Int64 = CFDictionaryGetInt64();
    Value = CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA4518]);
    if (!Value)
    {
      APSLogErrorAt();
      MutableCopy = 0;
      goto LABEL_91;
    }
    v13 = Value;
    v35 = a3;
    v14 = CMBaseObjectGetDerivedStorage();
    v15 = (const void *)*MEMORY[0x1E0CA4508];
    if (CFEqual(v13, (CFTypeRef)*MEMORY[0x1E0CA4508]))
    {
LABEL_13:
      v16 = a4;
      v17 = CFDictionaryGetInt64();
      v18 = *MEMORY[0x1E0C9AE00];
      MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
      if (!MutableCopy)
        goto LABEL_101;
      if (Int64 != 1 || !CFEqual(v13, v15))
        goto LABEL_22;
      v19 = APSGetFBOPropertyInt64();
      v20 = 1;
      if (v19)
        v20 = 2;
      if (!v17)
        v17 = v20;
      if (v19 && v17 != 2)
      {
        if (gLogCategory_APEndpoint <= 90 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          LogPrintF();
      }
      else
      {
LABEL_22:
        v21 = APSGetFBOPropertyInt64();
        if (v17 != 1 || v21)
        {
          if (v17 == 2 && APSGetFBOPropertyInt64())
          {
            if (IsAppleInternalBuild() && APSSettingsGetInt64())
            {
              if (gLogCategory_APEndpoint <= 50
                && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              v22 = (const void **)MEMORY[0x1E0C9AE40];
            }
            else
            {
              v22 = (const void **)MEMORY[0x1E0C9AE50];
            }
            CFDictionarySetValue(MutableCopy, CFSTR("wantsDedicatedSocket"), *v22);
          }
          CFStringGetTypeID();
          TypedValue = (const void *)CFDictionaryGetTypedValue();
          if (!TypedValue
            || (v27 = *(const __CFDictionary **)(DerivedStorage + 336)) == 0
            || !CFDictionaryContainsKey(v27, TypedValue))
          {
            CFDictionarySetInt64();
            v28 = CFGetAllocator(a1);
            v38 = APEndpointRemoteControlSessionAirPlayCreate(v28, v10, *(_QWORD *)(DerivedStorage + 456), MutableCopy, v17, &v36);
            if (v38)
              goto LABEL_69;
            if (*(_QWORD *)(DerivedStorage + 336)
              || (v29 = CFGetAllocator(a1),
                  Mutable = CFDictionaryCreateMutable(v29, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
                  (*(_QWORD *)(DerivedStorage + 336) = Mutable) != 0))
            {
              CMBaseObject = FigEndpointRemoteControlSessionGetCMBaseObject();
              v32 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
              if (v32)
              {
                v38 = v32(CMBaseObject, CFSTR("SessionID"), v18, &cf);
                if (!v38)
                {
                  if (!TypedValue || FigCFEqual())
                  {
                    CMNotificationCenterGetDefaultLocalCenter();
                    FigNotificationCenterAddWeakListener();
                    CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 336), cf, v36);
                    if (*(_BYTE *)(DerivedStorage + 48))
                    {
                      FigEndpoint = (const void *)FigEndpointExtendedGetFigEndpoint();
                      endpoint_handleIdleStateChanged_0(FigEndpoint, 1);
                    }
                    if (gLogCategory_APEndpoint <= 50
                      && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
                    {
                      LogPrintF();
                    }
                    if (v35)
                    {
                      *v35 = v36;
                      v36 = 0;
                    }
                    if (v16)
                    {
                      *v16 = cf;
                      cf = 0;
                    }
                    goto LABEL_75;
                  }
                  if (gLogCategory_APEndpoint <= 50
                    && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
                  {
                    LogPrintF();
                  }
                  v25 = -17606;
LABEL_49:
                  v38 = v25;
                  goto LABEL_75;
                }
              }
              else
              {
                v38 = -12782;
              }
LABEL_69:
              APSLogErrorAt();
              goto LABEL_75;
            }
LABEL_101:
            APSLogErrorAt();
            v25 = -16721;
            goto LABEL_49;
          }
          if (gLogCategory_APEndpoint <= 90
            && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
LABEL_91:
          v25 = -16720;
          goto LABEL_49;
        }
        APSLogErrorAt();
      }
LABEL_48:
      v25 = -16726;
      goto LABEL_49;
    }
    if (CFEqual(v13, (CFTypeRef)*MEMORY[0x1E0CA4500]))
    {
      if (!*(_BYTE *)(v14 + 48))
      {
        v23 = *(_QWORD *)(v14 + 40);
        v24 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v24)
        {
          if (v24(v23, 49))
            goto LABEL_13;
        }
      }
    }
    else
    {
      if (CFEqual(v13, (CFTypeRef)*MEMORY[0x1E0CA44F8]))
      {
        if (!*(_BYTE *)(v14 + 48))
          goto LABEL_33;
      }
      else if (!CFEqual(v13, (CFTypeRef)*MEMORY[0x1E0CA4510]))
      {
        goto LABEL_33;
      }
      if (APSGetFBOPropertyInt64())
        goto LABEL_13;
    }
LABEL_33:
    if (gLogCategory_APEndpoint <= 90 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    MutableCopy = 0;
    goto LABEL_48;
  }
  v38 = -16726;
  if (gLogCategory_APEndpoint <= 90 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  MutableCopy = 0;
LABEL_75:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  if (v36)
    CFRelease(v36);
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v38;
}

void endpoint_handleRemoteControlSessionEvent(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  unsigned int (*v9)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  CMBaseObject = FigEndpointRemoteControlSessionGetCMBaseObject();
  v9 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (!v9 || v9(CMBaseObject, CFSTR("SessionID"), 0, &cf))
  {
    APSLogErrorAt();
  }
  else
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4558]))
    {
      APEndpointCallRCDelegateDidReceiveDataAsync(a4, *(_QWORD *)(DerivedStorage + 136), cf, a3, *(NSObject **)DerivedStorage, *(_QWORD *)(DerivedStorage + 408), *(_QWORD *)(DerivedStorage + 432));
    }
    else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4560]))
    {
      APEndpointCallRCDelegateDidCloseAsync(a4, *(_QWORD *)(DerivedStorage + 136), cf, *(NSObject **)DerivedStorage, *(_QWORD *)(DerivedStorage + 416), *(_QWORD *)(DerivedStorage + 432));
    }
    else if (gLogCategory_APEndpoint <= 90
           && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  }
  if (cf)
    CFRelease(cf);
}

void endpoint_handleRCSClosed(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  unsigned int (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v6;
  uint64_t v7;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  CMBaseObject = FigEndpointRemoteControlSessionGetCMBaseObject();
  v5 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (!v5 || v5(CMBaseObject, CFSTR("SessionID"), *MEMORY[0x1E0C9AE00], &cf))
  {
    APSLogErrorAt();
    if (gLogCategory_APEndpoint <= 90 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
  }
  else
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
    v6 = cf;
    v7 = CMBaseObjectGetDerivedStorage();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v7 + 336), v6);
    if (*(_BYTE *)(v7 + 48))
      endpoint_handleIdleStateChanged_0(a2, 0);
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  }
  if (cf)
    CFRelease(cf);
}

void endpoint_handleIdleStateChanged_0(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  int v6;
  int v7;
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  const void **v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 152) == 2)
  {
    v5 = DerivedStorage;
    v6 = *(unsigned __int8 *)(DerivedStorage + 271);
    v7 = a2 || !endpoint_isIdle();
    if (v6 != v7)
    {
      if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      *(_BYTE *)(v5 + 271) = v7;
      CMBaseObjectGetDerivedStorage();
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v9 = Mutable;
        v10 = (const void **)MEMORY[0x1E0C9AE40];
        if (v7)
          v10 = (const void **)MEMORY[0x1E0C9AE50];
        CFDictionarySetValue(Mutable, CFSTR("IsEngaged"), *v10);
        if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          LogPrintF();
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
        CFRelease(v9);
      }
      else
      {
        APSLogErrorAt();
      }
      if (*(_BYTE *)(v5 + 270))
      {
        CFRetain(a1);
        APSDispatchAsyncFHelper();
      }
      if (v7 && !*(_BYTE *)(v5 + 48) && (*(_BYTE *)(v5 + 536) & 0x10) != 0)
      {
        if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          LogPrintF();
        endpointdelegate_sendCurrentVolumeToReceiver(a1);
        *(_DWORD *)(v5 + 536) &= ~0x10u;
      }
    }
  }
}

BOOL endpoint_isIdle()
{
  _BOOL8 v0;
  int v1;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 48))
    return FigCFDictionaryGetCount() == 0;
  v4 = 0;
  v5 = &v4;
  v6 = 0x2000000000;
  v7 = 0;
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 168))
  {
    CFDictionaryApplyBlock();
    v1 = *((unsigned __int8 *)v5 + 24);
    _Block_object_dispose(&v4, 8);
    if (v1)
      return 0;
  }
  else
  {
    _Block_object_dispose(&v4, 8);
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = 0;
  v5 = &v4;
  v6 = 0x2000000000;
  v7 = 0;
  if (*(_QWORD *)(DerivedStorage + 312))
  {
    CFSetApplyBlock();
    v0 = *((_BYTE *)v5 + 24) == 0;
  }
  else
  {
    v0 = 1;
  }
  _Block_object_dispose(&v4, 8);
  return v0;
}

void endpoint_deferredIdleStateChanged(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  if (*(_BYTE *)(a1 + 8) && *(_BYTE *)(DerivedStorage + 270) && *(_DWORD *)(DerivedStorage + 152) == 2)
  {
    endpoint_startInactivityTimer(*(void **)a1);
  }
  else
  {
    v3 = *(NSObject **)(DerivedStorage + 608);
    if (v3)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 608));
      dispatch_release(v3);
      *(_QWORD *)(DerivedStorage + 608) = 0;
    }
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  CFRelease(*(CFTypeRef *)a1);
}

uint64_t __endpoint_isAnyMediaStreamPlaying_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = FigCFEqual();
  if (!(_DWORD)result)
  {
    result = APSGetFBOPropertyInt64();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) |= result != 0;
  }
  return result;
}

uint64_t __endpoint_isAnyPlaybackSessionPlaying_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = APSGetFBOPropertyInt64();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) |= result != 0;
  return result;
}

void endpoint_startInactivityTimer(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int IntWithDefault;
  NSObject *v5;
  NSObject *v6;
  dispatch_time_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 48))
    IntWithDefault = 60;
  else
    IntWithDefault = 480;
  v5 = *(NSObject **)(DerivedStorage + 608);
  if (v5)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 608));
    dispatch_release(v5);
    *(_QWORD *)(v3 + 608) = 0;
  }
  if (IsAppleInternalBuild())
    IntWithDefault = APSSettingsGetIntWithDefault();
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  *(_QWORD *)(v3 + 608) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v3 + 576));
  CFRetain(a1);
  dispatch_set_context(*(dispatch_object_t *)(v3 + 608), a1);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v3 + 608), (dispatch_function_t)endpoint_inactivityTimerFired);
  dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v3 + 608), (dispatch_function_t)endpoint_inactivityTimerCancelled);
  v6 = *(NSObject **)(v3 + 608);
  v7 = dispatch_time(0, 1000000000 * IntWithDefault);
  dispatch_source_set_timer(v6, v7, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
  dispatch_resume(*(dispatch_object_t *)(v3 + 608));
}

void endpoint_inactivityTimerFired(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  v3 = *(NSObject **)(DerivedStorage + 608);
  if (v3)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 608));
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 608) = 0;
  }
  if (endpoint_isIdle() && *(_DWORD *)(DerivedStorage + 152) == 2)
  {
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    endpoint_updateStatus(a1, -72276, 1);
  }
  JUMPOUT(0x1CAA400E4);
}

void endpoint_inactivityTimerCancelled(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  CFRelease(a1);
}

void endpoint_updateStatus(const void *a1, int a2, int a3)
{
  uint64_t DerivedStorage;
  BOOL v7;
  _QWORD *v8;
  const __CFAllocator *v9;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v11;
  const __CFAllocator *v12;
  CFMutableDictionaryRef v13;
  CFMutableDictionaryRef v14;
  const void **v15;
  BOOL v16;
  const void *v17;
  const void **v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  CFAllocatorRef v22;
  uint64_t CMBaseObject;
  void (*v24)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  CFTypeRef v25;
  const void *v26;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (*(_BYTE *)(DerivedStorage + 128))
    v7 = 1;
  else
    v7 = a2 == 0;
  if (!v7)
  {
    v8 = (_QWORD *)DerivedStorage;
    *(_DWORD *)(DerivedStorage + 156) = a2;
    v9 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      APSLogErrorAt();
      return;
    }
    v11 = Mutable;
    v12 = CFGetAllocator(a1);
    v13 = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v13)
    {
      APSLogErrorAt();
      goto LABEL_27;
    }
    v14 = v13;
    CFDictionarySetInt64();
    if (a2 == 200470 || a2 == 200401)
    {
      if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
LABEL_26:
      CFRelease(v14);
LABEL_27:
      CFRelease(v11);
      return;
    }
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    v15 = (const void **)MEMORY[0x1E0CA3AA0];
    v16 = a3 == 0;
    if (a3)
      v15 = (const void **)MEMORY[0x1E0CA3A98];
    v17 = *v15;
    if (v16)
      v18 = (const void **)MEMORY[0x1E0CA39A8];
    else
      v18 = (const void **)MEMORY[0x1E0CA39A0];
    v19 = *v18;
    CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CA3AC0], v17);
    CFDictionarySetValue(v14, (const void *)*MEMORY[0x1E0CA39C0], v19);
    if (v8[46])
    {
      if (v8[53] && (v20 = FigCFWeakReferenceHolderCopyReferencedObject(), v8[53]) && !v20)
      {
        if (gLogCategory_APEndpoint > 90)
        {
LABEL_38:
          CMNotificationCenterGetDefaultLocalCenter();
          FigDispatchAsyncPostNotification();
          if (a2 == -16613)
          {
            v21 = v8[5];
            v22 = CFGetAllocator(a1);
            CMBaseObject = APEndpointDescriptionGetCMBaseObject(v21);
            v24 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
            if (v24)
            {
              v24(CMBaseObject, CFSTR("TransportDevice"), v22, &cf);
              v25 = cf;
              v26 = (const void *)v8[3];
              if (v26 && cf)
              {
                APBrowserControllerReconfirmEndpoint(v26, cf);
                v25 = cf;
              }
              if (v25)
                CFRelease(v25);
            }
          }
          goto LABEL_26;
        }
        if (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())
          LogPrintF();
      }
      else
      {
        CFRetain(a1);
        CFRetain(v14);
        if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          LogPrintF();
        APSDispatchAsyncFHelper();
      }
    }
    if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    goto LABEL_38;
  }
}

void endpoint_callDelegateHandleFailed(uint64_t a1)
{
  const void *v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 24))(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32));
  CFRelease(*(CFTypeRef *)a1);
  CFRelease(*(CFTypeRef *)(a1 + 16));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

void __apEndpoint_handleInvalidateIncomingRCSCommand_block_invoke(uint64_t a1)
{
  uint64_t CMBaseObject;
  uint64_t v3;
  unsigned int (*v4)(uint64_t);

  CMBaseObject = FigEndpointRemoteControlSessionGetCMBaseObject();
  if (!CMBaseObject
    || (v3 = CMBaseObject,
        (v4 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24)) == 0)
    || v4(v3))
  {
    if (gLogCategory_APEndpoint <= 90 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
  }
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t endpoint_handleSenderSessionStarted(uint64_t a1, const void *a2)
{
  uint64_t result;
  uint64_t v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;

  result = CMBaseObjectGetDerivedStorage();
  v4 = result;
  if (gLogCategory_APEndpoint <= 50)
  {
    if (gLogCategory_APEndpoint != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      result = LogPrintF();
  }
  if (!*(_BYTE *)(v4 + 128))
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(v4 + 120));
    if (APSGetFBOPropertyInt64())
      endpointdelegate_sendCurrentVolumeToReceiver(a2);
    MEMORY[0x1CAA400E4](*(_QWORD *)(v4 + 120));
    CMBaseObjectGetDerivedStorage();
    Mutable = CFDictionaryCreateMutable(0, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v6 = Mutable;
      CFDictionarySetInt64();
      if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      CFRelease(v6);
    }
    else
    {
      APSLogErrorAt();
    }
    MEMORY[0x1CAA400CC](*(_QWORD *)(v4 + 120));
    CMBaseObjectGetDerivedStorage();
    JUMPOUT(0x1CAA400E4);
  }
  return result;
}

uint64_t endpoint_handleSenderSessionFailed(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 90 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  CFRetain(a2);
  if (a5)
    CFRetain(a5);
  return APSDispatchAsyncFHelper();
}

void endpoint_deferredHandleSenderSessionFailed(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFDictionary *v3;
  int Int64;
  int v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(const __CFDictionary **)(a1 + 8);
  Int64 = CFDictionaryGetInt64();
  CFDictionaryGetValue(v3, CFSTR("SessionState"));
  v5 = FigCFEqual();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  if (*(_DWORD *)(DerivedStorage + 152) == 2)
    endpoint_updateStatus(*(const void **)a1, Int64, v5 == 0);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  CFRelease(*(CFTypeRef *)a1);
  v6 = *(const void **)(a1 + 8);
  if (v6)
    CFRelease(v6);
}

uint64_t endpoint_handleSimulateEndpointFailed(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  int v6;
  int v7;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a3, CFSTR("ReceiverSessionIsActive")))
  {
    if (CFEqual(a3, CFSTR("SystemRequestToStop")))
    {
      v6 = -72278;
    }
    else if (CFEqual(a3, CFSTR("TightSyncBuddyRequestToStop")))
    {
      v6 = -72274;
    }
    else if (CFEqual(a3, CFSTR("ReceiverSentPreventPlayback")))
    {
      v6 = -17603;
    }
    else
    {
      v6 = 0;
    }
    goto LABEL_13;
  }
  v6 = -72272;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  if (!*(_BYTE *)(DerivedStorage + 251))
  {
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
    goto LABEL_13;
  }
  v7 = *(_DWORD *)(DerivedStorage + 252);
  result = MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  if (v7 != 2)
  {
LABEL_13:
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
    endpoint_updateStatus(a2, v6, *(_DWORD *)(DerivedStorage + 152) == 2);
    JUMPOUT(0x1CAA400E4);
  }
  return result;
}

void endpoint_handleHDMILatencyChange(uint64_t a1, uint64_t a2)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v4;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = Mutable;
    APSHDMIVideoLatencyMs();
    if (FigCFDictionarySetInt32())
      goto LABEL_9;
    if (!a2 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass()))
      a2 = 0;
    if (apEndpoint_SendCommand(a2, CFSTR("setSenderDisplayLatencyMs"), v4))
LABEL_9:
      APSLogErrorAt();
    CFRelease(v4);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t apEndpoint_SendCommand(uint64_t a1, const void *a2, const void *a3)
{
  const void *FigEndpoint;
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  float v9;

  FigEndpoint = (const void *)FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  if (FigCFEqual())
  {
    v7 = CMBaseObjectGetDerivedStorage();
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    {
      APSVolumeConvertDBToSliderValue();
      LogPrintF();
    }
    if (!*(_BYTE *)(v7 + 48) && (*(_BYTE *)(v7 + 536) & 0xF) != 0)
    {
      APSVolumeConvertDBToSliderValue();
      endpointdelegate_setVolumeSliderInternal(FigEndpoint, 1, 1, v9);
    }
    v8 = 0;
  }
  else
  {
    v8 = apEndpoint_sendCommandInternal(FigEndpoint, a2, a3);
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  return v8;
}

BOOL endpoint_shouldUseInactivityTimer()
{
  CMBaseObjectGetDerivedStorage();
  return CFDictionaryGetInt64() == 0;
}

uint64_t endpointdelegate_getInitialVolumeDBAndIsMuted(uint64_t a1, float *a2, float *a3, BOOL *a4)
{
  double v7;
  float v8;
  float v9;
  BOOL v10;
  uint64_t DerivedStorage;
  int v12;
  int v13;
  float v14;
  int v15;
  uint64_t v16;

  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 224))
  {
    APSGetFBOPropertyDouble();
    v8 = v7;
    v9 = v8;
    if (a3)
      *a3 = v8;
    v10 = APSGetFBOPropertyInt64() != 0;
  }
  else
  {
    v10 = 0;
    v9 = -999.0;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (APSGetFBOPropertyInt64())
  {
    if (*(_DWORD *)(DerivedStorage + 252) == 2 && !*(_BYTE *)(DerivedStorage + 251))
    {
      v12 = 3;
      goto LABEL_16;
    }
  }
  else
  {
    if (APSGetFBOPropertyInt64())
    {
      if (*(_DWORD *)(DerivedStorage + 252) == 2)
        v12 = 1;
      else
        v12 = 3;
      goto LABEL_16;
    }
    if (!APSGetFBOPropertyInt64())
    {
      if (APSGetFBOPropertyInt64())
      {
        v12 = 35;
      }
      else if (APSGetFBOPropertyInt64())
      {
        v12 = 1;
      }
      else
      {
        v12 = 31;
      }
      goto LABEL_16;
    }
  }
  v12 = 1;
LABEL_16:
  v13 = (int)v9;
  v14 = -20.0;
  if ((int)v9 == -999)
  {
    v15 = 1;
  }
  else if (v13 >= -29)
  {
    v15 = ~(v13 >> 29) & 4;
  }
  else
  {
    v15 = 2;
    v14 = -27.0;
  }
  if ((v15 & v12) != 0)
  {
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
  }
  else
  {
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v15 = 0;
    v14 = v9;
  }
  v16 = v15 | v12 & 0x30u;
  *a2 = v14;
  *a4 = v10;
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
  {
    APSVolumeConvertDBToSliderValue();
    LogPrintF();
  }
  return v16;
}

void endpoint_updateScreenRelatedConfiguration(const void *a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, __CFString *, uint64_t, void **);
  uint64_t v8;
  void (*v9)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  const __CFAllocator *v10;
  __CFDictionary *Mutable;
  BOOL v12;
  int v13;
  CFTypeRef cf;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  value = 0;
  v5 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 224));
  v7 = *(void (**)(uint64_t, __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v7)
    v7(CMBaseObject, CFSTR("PWDEncryptorEncryptionContext"), v5, &value);
  v8 = APSenderSessionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 224));
  v9 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
  if (v9)
    v9(v8, CFSTR("PWDProtectionFlags"), v5, &cf);
  if (value)
  {
    if (cf)
    {
      v10 = CFGetAllocator(a1);
      Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(Mutable, CFSTR("encoderEncryptionData"), value);
      CFDictionarySetValue(Mutable, CFSTR("protectionFlags"), cf);
      *(_QWORD *)(DerivedStorage + 328) = Mutable;
      if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
    }
  }
  if (*(_QWORD *)(DerivedStorage + 328))
  {
    if (gLogCategory_APEndpoint <= 50)
    {
      if (gLogCategory_APEndpoint == -1 && !_LogCategory_Initialize())
        goto LABEL_25;
      goto LABEL_14;
    }
LABEL_34:
    *(_BYTE *)(DerivedStorage + 281) = 0;
    goto LABEL_35;
  }
  if (a2 && CFDictionaryContainsKey(a2, CFSTR("ScreenSource")))
  {
    if (gLogCategory_APEndpoint > 50)
      goto LABEL_34;
    if (gLogCategory_APEndpoint == -1 && !_LogCategory_Initialize())
      goto LABEL_25;
LABEL_14:
    LogPrintF();
LABEL_25:
    v12 = 0;
    goto LABEL_26;
  }
  if (FigCFDictionaryGetValue() == *MEMORY[0x1E0C9AE50])
  {
    if (gLogCategory_APEndpoint > 50)
      goto LABEL_34;
    if (gLogCategory_APEndpoint == -1 && !_LogCategory_Initialize())
      goto LABEL_25;
    goto LABEL_14;
  }
  if (!APSSettingsIsFeatureEnabled() || !APSHasUDPMirroringSenderSupport())
    goto LABEL_25;
  v12 = APSGetFBOPropertyInt64() != 0;
LABEL_26:
  v13 = gLogCategory_APEndpoint;
  *(_BYTE *)(DerivedStorage + 281) = v12;
  if (v13 <= 30 && (v13 != -1 || _LogCategory_Initialize()))
    LogPrintF();
LABEL_35:
  if (value)
    CFRelease(value);
  if (cf)
    CFRelease(cf);
}

BOOL endpoint_isMediaPresentationModeAvailable()
{
  int IntWithDefault;

  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 480) && !APSGetFBOPropertyInt64())
    APSGetFBOPropertyInt64();
  IntWithDefault = APSSettingsGetIntWithDefault();
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  return IntWithDefault != 0;
}

uint64_t endpoint_setupStreams(const void *a1, char a2, uint64_t a3, const __CFDictionary *a4, uint64_t *a5)
{
  uint64_t DerivedStorage;
  const __CFDictionary *v11;
  const void *v12;
  CFMutableDictionaryRef Mutable;
  uint64_t SupportedFeatures;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, CFTypeRef *);
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int HasFeature;
  _BOOL4 v21;
  char v22;
  unsigned int v23;
  uint64_t Int64;
  BOOL v25;
  _QWORD *v26;
  uint64_t CMBaseObject;
  uint64_t (*v28)(uint64_t, const __CFString *, _QWORD, void **);
  const __CFAllocator *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, const __CFString *, const __CFAllocator *, const void **);
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, const __CFString *, const __CFAllocator *, const void **);
  uint64_t v36;
  unsigned int v37;
  __CFDictionary *v38;
  __CFDictionary *v39;
  uint64_t v40;
  const void *v41;
  const void *v42;
  const void *v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t);
  __CFDictionary *v46;
  __CFDictionary *v47;
  const void *v48;
  const __CFDictionary *v49;
  BOOL v50;
  int v51;
  const void *v52;
  unsigned int v53;
  uint64_t v54;
  const __CFDictionary *v55;
  uint64_t *v56;
  const void *v57;
  const __CFDictionary *v58;
  const __CFDictionary *v59;
  const void *v60;
  uint64_t v61;
  const void *v62;
  const __CFDictionary *v63;
  const void *v64;
  const void *v65;
  uint64_t v66;
  uint64_t v67;
  CFMutableDictionaryRef v68;
  CFTypeRef v69;
  CFTypeRef v70;
  CFTypeRef v71;
  const void *v73;
  const __CFDictionary *v74;
  const void *v75;
  uint64_t v76;
  const void *v77;
  _BOOL4 v78;
  _BOOL4 v79;
  uint64_t *v80;
  _BOOL4 v81;
  BOOL v82;
  char v83;
  const __CFDictionary *v84;
  void *value[2];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  CFMutableDictionaryRef v89;
  __CFDictionary *v90;
  CFTypeRef v91;
  uint64_t v92;
  const void *v93;
  const void *v94;

  v91 = 0;
  v92 = 0;
  v90 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v89 = 0;
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (!a3)
  {
    v11 = *(const __CFDictionary **)(DerivedStorage + 168);
    if (v11)
    {
      CFDictionaryApplyFunction(v11, (CFDictionaryApplierFunction)endpoint_dissociateStreamsDictionaryEntry, 0);
      v12 = *(const void **)(DerivedStorage + 168);
      if (v12)
      {
        CFRelease(v12);
        *(_QWORD *)(DerivedStorage + 168) = 0;
      }
    }
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(DerivedStorage + 168) = Mutable;
    if (!Mutable)
    {
      APSLogErrorAt();
      v19 = 4294950575;
      goto LABEL_99;
    }
  }
  SupportedFeatures = endpoint_getSupportedFeatures((uint64_t)a1, &v92);
  if ((_DWORD)SupportedFeatures)
  {
    v19 = SupportedFeatures;
    goto LABEL_17;
  }
  v15 = *(_QWORD *)(DerivedStorage + 40);
  v16 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v16)
  {
    v19 = 4294954514;
    goto LABEL_17;
  }
  v17 = v16(v15, &v91);
  if ((_DWORD)v17)
  {
    v19 = v17;
    goto LABEL_17;
  }
  if (!*(_QWORD *)(DerivedStorage + 216))
  {
LABEL_123:
    APSLogErrorAt();
    v19 = 4294949690;
    goto LABEL_99;
  }
  if ((a2 & 2) != 0)
  {
    HasFeature = APSFeaturesHasFeature();
    v18 = HasFeature == 0;
    v81 = HasFeature != 0;
  }
  else
  {
    v81 = 0;
    v18 = 1;
  }
  v21 = (v92 & 8) == 0 || (a2 & 8) == 0;
  v22 = a3;
  v83 = a2;
  if ((a2 & 0x20) != 0)
    v23 = (v92 >> 5) & 1;
  else
    v23 = 0;
  Int64 = CFDictionaryGetInt64();
  v78 = Int64 != 0;
  if (Int64)
    v23 = 1;
  v82 = v18;
  v25 = !v18;
  if ((a3 & 2) != 0)
    v25 = 0;
  v80 = a5;
  v84 = a4;
  if (v25 || ((v21 | (a3 >> 3)) & 1) == 0 || (a3 & 0x20) == 0 && v23)
  {
    v26 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    value[0] = 0;
    v93 = 0;
    v94 = 0;
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(v26[5]);
    v28 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    v79 = v21;
    if (v28)
    {
      v29 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v30 = v28(CMBaseObject, CFSTR("SupportedAudioFormats"), *MEMORY[0x1E0C9AE00], value);
      if ((_DWORD)v30)
      {
        v19 = v30;
      }
      else
      {
        v31 = APEndpointDescriptionGetCMBaseObject(v26[5]);
        v32 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v32)
        {
          v33 = v32(v31, CFSTR("IsConnectedOverUSB"), v29, &v94);
          if ((_DWORD)v33)
          {
            v19 = v33;
          }
          else
          {
            v34 = APSenderSessionGetCMBaseObject(v26[28]);
            v35 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            if (v35)
            {
              v77 = a1;
              v36 = v35(v34, CFSTR("ControlConnectionInterfaceLatencyHint"), v29, &v93);
              if (!(_DWORD)v36)
              {
                v37 = v23;
                v38 = CFDictionaryCreateMutable(v29, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                v39 = v38;
                if (v38)
                {
                  CFDictionarySetValue(v38, CFSTR("SupportedAudioFormats"), value[0]);
                  CFDictionarySetValue(v39, CFSTR("IsConnectedOverUSB"), v94);
                  v40 = APSGetFBOPropertyInt64();
                  v41 = (const void *)*MEMORY[0x1E0C9AE50];
                  v42 = (const void *)*MEMORY[0x1E0C9AE40];
                  if (v40)
                    v43 = (const void *)*MEMORY[0x1E0C9AE50];
                  else
                    v43 = (const void *)*MEMORY[0x1E0C9AE40];
                  CFDictionarySetValue(v39, CFSTR("IsCarPlay"), v43);
                  CFDictionarySetValue(v39, CFSTR("ConnectionLatencyHint"), v93);
                  v44 = v26[5];
                  v45 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 16);
                  if (!v45 || !v45(v44, 11))
                    v41 = v42;
                  CFDictionarySetValue(v39, CFSTR("SupportRedundancyAudio"), v41);
                  v46 = CFDictionaryCreateMutable(v29, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  v47 = v46;
                  if (v46)
                  {
                    v48 = (const void *)v26[27];
                    v22 = a3;
                    v23 = v37;
                    if (v48)
                    {
                      CFDictionarySetValue(v46, CFSTR("NetworkClock"), v48);
                      CFDictionarySetValue(v47, CFSTR("AudioEngineOptions"), v39);
                      v19 = APEndpointCopyFromActivationOptionsOrCreateSharedContext(v84, a2, (uint64_t)v47, 0, 0, &v90);
                      a1 = v77;
                      if ((_DWORD)v19)
                        APSLogErrorAt();
LABEL_54:
                      if (value[0])
                        CFRelease(value[0]);
                      if (v94)
                        CFRelease(v94);
                      if (v93)
                        CFRelease(v93);
                      if (v39)
                        CFRelease(v39);
                      if (v47)
                        CFRelease(v47);
                      a4 = v84;
                      v21 = v79;
                      if ((_DWORD)v19)
                        goto LABEL_17;
                      goto LABEL_65;
                    }
                    APSLogErrorAt();
                    v19 = 4294949690;
LABEL_134:
                    a1 = v77;
                    goto LABEL_54;
                  }
                  APSLogErrorAt();
                }
                else
                {
                  APSLogErrorAt();
                  v47 = 0;
                }
                v19 = 4294950575;
                v22 = a3;
                v23 = v37;
                goto LABEL_134;
              }
              v19 = v36;
            }
            else
            {
              v19 = 4294954514;
            }
          }
        }
        else
        {
          v19 = 4294954514;
        }
      }
    }
    else
    {
      v19 = 4294954514;
    }
    APSLogErrorAt();
    v39 = 0;
    v47 = 0;
    v22 = a3;
    goto LABEL_54;
  }
LABEL_65:
  v49 = a4;
  v50 = v21;
  v51 = v81 && !v21 && *(_BYTE *)(DerivedStorage + 249) == 0;
  if (!v82)
  {
    v52 = a1;
    v53 = v23;
    if ((a3 & 2) != 0)
    {
      v54 = 2;
      if (v50)
        goto LABEL_72;
    }
    else
    {
      v73 = (const void *)*MEMORY[0x1E0CA4880];
      v74 = (const __CFDictionary *)CFDictionaryGetValue(v90, (const void *)*MEMORY[0x1E0CA4880]);
      if (!v74)
        goto LABEL_125;
      v75 = CFDictionaryGetValue(v74, CFSTR("AudioEngineVendor"));
      CFDictionaryGetInt64();
      v76 = endpoint_setupAudioStream(v52, v51, 0, 0, v75, v73);
      if ((_DWORD)v76)
      {
        v19 = v76;
LABEL_128:
        APSLogErrorAt();
        goto LABEL_129;
      }
      v54 = 2;
      v22 = a3;
      if (v50)
        goto LABEL_72;
    }
LABEL_81:
    v55 = v49;
    if ((v22 & 8) != 0)
      goto LABEL_86;
    v62 = (const void *)*MEMORY[0x1E0CA4888];
    v63 = (const __CFDictionary *)CFDictionaryGetValue(v90, (const void *)*MEMORY[0x1E0CA4888]);
    if (v63)
    {
      v64 = CFDictionaryGetValue(v63, CFSTR("AudioEngineVendor"));
      CFDictionaryGetInt64();
      v65 = 0;
      if (v51)
        v65 = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 168), (const void *)*MEMORY[0x1E0CA4880]);
      v66 = endpoint_setupAudioStream(v52, v51, v65, 0, v64, v62);
      v55 = v84;
      v22 = a3;
      if (!(_DWORD)v66)
      {
LABEL_86:
        v54 |= 8uLL;
        if (v53)
          goto LABEL_75;
        goto LABEL_87;
      }
      v19 = v66;
      goto LABEL_128;
    }
LABEL_125:
    APSLogErrorAt();
    v19 = 4294949690;
LABEL_129:
    a1 = v52;
    goto LABEL_99;
  }
  v52 = a1;
  v53 = v23;
  if ((a3 & 2) != 0)
    markStreamForRemoval(&v89, (void *)*MEMORY[0x1E0CA4880], *(CFDictionaryRef *)(DerivedStorage + 168));
  v54 = 0;
  if (!v50)
    goto LABEL_81;
LABEL_72:
  if ((v22 & 8) != 0)
    markStreamForRemoval(&v89, (void *)*MEMORY[0x1E0CA4888], *(CFDictionaryRef *)(DerivedStorage + 168));
  v55 = v49;
  if (v53)
  {
LABEL_75:
    a1 = v52;
    v56 = v80;
    if ((v22 & 0x20) != 0)
    {
LABEL_78:
      v54 |= 0x20uLL;
      goto LABEL_90;
    }
    v57 = (const void *)*MEMORY[0x1E0CA4890];
    v58 = (const __CFDictionary *)CFDictionaryGetValue(v90, (const void *)*MEMORY[0x1E0CA4890]);
    if (v58)
    {
      v59 = v58;
      CFDictionaryGetInt64();
      v60 = CFDictionaryGetValue(v59, CFSTR("AudioEngineVendor"));
      v61 = endpoint_setupAudioStream(v52, 0, 0, v78, v60, v57);
      if (!(_DWORD)v61)
        goto LABEL_78;
      v19 = v61;
LABEL_17:
      APSLogErrorAt();
      goto LABEL_99;
    }
    goto LABEL_123;
  }
LABEL_87:
  if ((v22 & 0x20) != 0)
    markStreamForRemoval(&v89, (void *)*MEMORY[0x1E0CA4890], *(CFDictionaryRef *)(DerivedStorage + 168));
  a1 = v52;
  v56 = v80;
LABEL_90:
  if ((v83 & 1) == 0 || !APSFeaturesHasFeature())
  {
    if ((a3 & 1) != 0)
      markStreamForRemoval(&v89, (void *)*MEMORY[0x1E0CA48A0], *(CFDictionaryRef *)(DerivedStorage + 168));
    goto LABEL_97;
  }
  if ((a3 & 1) == 0)
  {
    v67 = endpoint_setupScreenStream(a1, v55);
    if ((_DWORD)v67)
    {
      v19 = v67;
      goto LABEL_17;
    }
  }
  v54 |= 1uLL;
LABEL_97:
  v19 = 0;
  if (v56)
    *v56 = v54 | v92 & v83 & 4 | v92 & v83 & 0x10;
LABEL_99:
  v68 = v89;
  if (v89)
  {
    v87 = 0u;
    v88 = 0u;
    *(_OWORD *)value = 0u;
    v86 = 0u;
    if (!a1 || (v69 = CFRetain(a1), v68 = v89, value[0] = (void *)v69, v89))
      v68 = (CFMutableDictionaryRef)CFRetain(v68);
    *(_QWORD *)&v86 = v68;
    v70 = *(CFTypeRef *)(DerivedStorage + 296);
    if (v70)
      v70 = CFRetain(v70);
    *((_QWORD *)&v87 + 1) = v70;
    v71 = *(CFTypeRef *)(DerivedStorage + 304);
    if (v71)
      v71 = CFRetain(v71);
    *(_QWORD *)&v88 = v71;
    APSDispatchAsyncFHelper();
  }
  if (v91)
    CFRelease(v91);
  if (v90)
    CFRelease(v90);
  if (v89)
    CFRelease(v89);
  return v19;
}

uint64_t endpoint_postPerformanceReport()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 40)
  {
    if (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())
      LogPrintF();
    if (gLogCategory_APEndpoint <= 40)
    {
      if (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())
        LogPrintF();
      if (gLogCategory_APEndpoint <= 40)
      {
        if (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())
          LogPrintF();
        if (gLogCategory_APEndpoint <= 40)
        {
          if (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())
            LogPrintF();
          if (gLogCategory_APEndpoint <= 40
            && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
      }
    }
  }
  endpoint_logEventInterval(*(_QWORD *)(DerivedStorage + 288), 268369920, 268369921, (uint64_t)"Total AirPlay Contribution (Endpoint Activate Start To Endpoint Activate Complete)");
  endpoint_logEvent(*(_QWORD *)(DerivedStorage + 288), 268369920, (uint64_t)"EndpointActivate");
  endpoint_logEvent(*(_QWORD *)(DerivedStorage + 288), 150994945, (uint64_t)"ResolveDNSTime");
  if (gLogCategory_APEndpoint <= 40)
  {
    if (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())
      LogPrintF();
    if (gLogCategory_APEndpoint <= 40)
    {
      if (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())
        LogPrintF();
      if (gLogCategory_APEndpoint <= 40 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
    }
  }
  endpoint_logEvent(*(_QWORD *)(DerivedStorage + 112), 268431360, (uint64_t)"PresenceBrowsing_Start");
  endpoint_logEvent(*(_QWORD *)(DerivedStorage + 112), 268431361, (uint64_t)"DetailedNonP2PBrowsing_Start");
  endpoint_logEvent(*(_QWORD *)(DerivedStorage + 112), 268431362, (uint64_t)"DetailedBrowsing_Start");
  endpoint_logTransportDiscoveryDurationIfEventPresent();
  endpoint_logTransportDiscoveryDurationIfEventPresent();
  endpoint_logTransportDiscoveryDurationIfEventPresent();
  endpoint_logTransportDiscoveryDurationIfEventPresent();
  endpoint_logTransportDiscoveryDurationIfEventPresent();
  endpoint_logTransportDiscoveryDurationIfEventPresent();
  endpoint_logTransportDiscoveryDurationIfEventPresent();
  endpoint_logTransportDiscoveryDurationIfEventPresent();
  endpoint_logTransportDiscoveryDurationIfEventPresent();
  endpoint_logTransportDiscoveryDurationIfEventPresent();
  endpoint_logTransportDiscoveryDurationIfEventPresent();
  endpoint_logTransportDiscoveryDurationIfEventPresent();
  endpoint_logTransportDiscoveryDurationIfEventPresent();
  endpoint_logTransportDiscoveryDurationIfEventPresent();
  endpoint_logTransportDiscoveryDurationIfEventPresent();
  endpoint_logTransportDiscoveryDurationIfEventPresent();
  if (gLogCategory_APEndpoint <= 40)
  {
    if (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())
      LogPrintF();
    if (gLogCategory_APEndpoint <= 40)
    {
      if (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())
        LogPrintF();
      if (gLogCategory_APEndpoint <= 40 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
    }
  }
  endpoint_logEvent(*(_QWORD *)(DerivedStorage + 288), 150994944, (uint64_t)"QuerySRVTime");
  endpoint_logEvent(*(_QWORD *)(DerivedStorage + 288), 150994946, (uint64_t)"ControlStreamConnectingTime");
  endpoint_logEvent(*(_QWORD *)(DerivedStorage + 288), 150994948, (uint64_t)"ControlStreamConnectedTime");
  endpoint_logEvent(*(_QWORD *)(DerivedStorage + 288), 250609664, (uint64_t)"EndpointConnectionStartTime");
  endpoint_logEvent(*(_QWORD *)(DerivedStorage + 288), 250609666, (uint64_t)"EndpointGetInfoCompleteTime");
  endpoint_logEventInterval(*(_QWORD *)(DerivedStorage + 288), 250609665, 250609666, (uint64_t)"INFOTimeMs");
  CMBaseObjectGetDerivedStorage();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  if (gLogCategory_APEndpoint <= 40 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  endpoint_logEventInterval(*(_QWORD *)(DerivedStorage + 288), 150994946, 150994948, (uint64_t)"ConnectTimeMs");
  endpoint_logEventInterval(*(_QWORD *)(DerivedStorage + 288), 250609677, 250609678, (uint64_t)"EndpointAUTHTimeMs");
  result = endpoint_logEventInterval(*(_QWORD *)(DerivedStorage + 288), 250609675, 250609676, (uint64_t)"EndpointRECORDTimeMs");
  if (gLogCategory_APEndpoint <= 40)
  {
    if (gLogCategory_APEndpoint != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

void endpoint_postInterruptingSessionStateDidChangeNotification(uint64_t a1, int a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v4;
  const void **v5;

  CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = Mutable;
    v5 = (const void **)MEMORY[0x1E0C9AE40];
    if (a2)
      v5 = (const void **)MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, CFSTR("IsInterruptingSessionActive"), *v5);
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v4);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t endpoint_updateCurrentVolumeControlType()
{
  uint64_t DerivedStorage;
  char v1;
  int v2;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_BYTE *)(DerivedStorage + 144);
  if ((*(_DWORD *)(DerivedStorage + 500) | 4) != 4
    && endpoint_isVideoPlaybackSessionActive()
    && (v1 & 1) != 0)
  {
    v2 = 0;
  }
  else
  {
    v2 = APSVolumeControlTypeFromEx();
  }
  result = *(unsigned int *)(DerivedStorage + 496);
  if (v2 != (_DWORD)result)
  {
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    {
      APSGetAPVolumeControlTypeName();
      APSGetAPVolumeControlTypeName();
      LogPrintF();
    }
    *(_DWORD *)(DerivedStorage + 496) = v2;
    endpoint_updateIsVolumeAndMuteControlSupported();
    CMNotificationCenterGetDefaultLocalCenter();
    return FigDispatchAsyncPostNotification();
  }
  return result;
}

uint64_t endpoint_updateIsVolumeAndMuteControlSupported()
{
  uint64_t result;
  uint64_t v1;
  int v2;
  int v3;

  result = CMBaseObjectGetDerivedStorage();
  v1 = result;
  v2 = *(_DWORD *)(result + 152) == 2 && *(_DWORD *)(result + 496) != 0;
  if (*(unsigned __int8 *)(result + 504) != v2)
  {
    *(_BYTE *)(result + 504) = v2;
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    CMNotificationCenterGetDefaultLocalCenter();
    result = FigDispatchAsyncPostNotification();
  }
  if (v2)
    v3 = (*(_DWORD *)(v1 + 496) - 3) < 0xFFFFFFFE;
  else
    v3 = 0;
  if (*(unsigned __int8 *)(v1 + 512) != v3)
  {
    *(_BYTE *)(v1 + 512) = v3;
    if (gLogCategory_APEndpoint <= 50)
    {
      if (gLogCategory_APEndpoint != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        result = LogPrintF();
    }
    if (*(_BYTE *)(v1 + 51))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      return FigDispatchAsyncPostNotification();
    }
  }
  return result;
}

void endpoint_updateVideoPlaybackIsActive(const void *a1)
{
  uint64_t DerivedStorage;
  int isVideoPlaybackSessionActive;
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  isVideoPlaybackSessionActive = endpoint_isVideoPlaybackSessionActive();
  if (*(unsigned __int8 *)(DerivedStorage + 491) != isVideoPlaybackSessionActive)
  {
    *(_BYTE *)(DerivedStorage + 491) = isVideoPlaybackSessionActive;
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v4 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v6 = Mutable;
      FigCFDictionarySetInt64();
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      CFRelease(v6);
    }
    else
    {
      APSLogErrorAt();
      FigSignalErrorAt();
    }
  }
}

void __endpoint_activateInternal_block_invoke(uint64_t a1)
{
  CFSetAddValue(*(CFMutableSetRef *)(*(_QWORD *)(a1 + 32) + 8), **(const void ***)(a1 + 40));
}

uint64_t endpoint_removeAPEndpointManagerNotificationsListenerIfNeeded()
{
  uint64_t result;
  uint64_t v1;

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(result + 48))
  {
    v1 = result;
    if (*(_QWORD *)(result + 32))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      result = FigNotificationCenterRemoveWeakListener();
      if (*(_DWORD *)(v1 + 104) == 7)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        return FigNotificationCenterRemoveWeakListener();
      }
    }
  }
  return result;
}

uint64_t endpoint_removeHDMILatencyNotificationListenerIfNeeded()
{
  uint64_t result;

  result = endpoint_isInLocalClusterOfAppleTV();
  if ((_DWORD)result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

uint64_t endpoint_stopListeningToSenderSessionAndStreamsNotifications(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  return FigCFDictionaryApplyBlock();
}

void endpoint_deregisterWithBrowserController(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  CFAllocatorRef v4;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (*(_QWORD *)(DerivedStorage + 24))
  {
    v3 = *(_QWORD *)(DerivedStorage + 40);
    v4 = CFGetAllocator(a1);
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(v3);
    v6 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
    if (v6)
    {
      v6(CMBaseObject, CFSTR("TransportDevice"), v4, &cf);
      if (cf)
      {
        APBrowserControllerDeregisterEndpoint();
        if (cf)
          CFRelease(cf);
      }
    }
  }
}

void endpoint_deactivateInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef v15;
  dispatch_time_t v16;
  unsigned int v17;
  uint64_t v18;
  const __CFAllocator *v19;
  const __CFAllocator *v20;
  __CFDictionary *MutableCopy;
  __CFDictionary *v22;
  const void **v23;
  NSObject *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  CFDictionaryRef theDict;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _QWORD block[6];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = dispatch_semaphore_create(0);
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  if (*(_DWORD *)(a1 + 68))
  {
    APSLogErrorAt();
    v17 = *(_DWORD *)(a1 + 68);
  }
  else
  {
    if (*(_QWORD *)(a1 + 32))
    {
      if (introspector_getCollectionOfActiveEndpoints_once != -1)
        dispatch_once(&introspector_getCollectionOfActiveEndpoints_once, &__block_literal_global_37);
      if (introspector_getCollectionOfActiveEndpoints_coll)
      {
        v4 = *(NSObject **)introspector_getCollectionOfActiveEndpoints_coll;
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = __endpoint_deactivateInternal_block_invoke;
        block[3] = &__block_descriptor_tmp_418;
        block[4] = introspector_getCollectionOfActiveEndpoints_coll;
        block[5] = a1;
        dispatch_sync(v4, block);
      }
      if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      v5 = *(NSObject **)(DerivedStorage + 608);
      if (v5)
      {
        dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 608));
        dispatch_release(v5);
        *(_QWORD *)(DerivedStorage + 608) = 0;
      }
      if (*(_BYTE *)(a1 + 72))
      {
        v38 = 0;
        v37 = 0u;
        v36 = 0u;
        v35 = 0u;
        if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          LogPrintF();
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!Mutable)
        {
          APSLogErrorAt();
          v17 = -16721;
          goto LABEL_43;
        }
        v7 = Mutable;
        CFDictionarySetDouble();
        CFDictionarySetInt64();
        theDict = (CFDictionaryRef)CFRetain(*(CFTypeRef *)a1);
        *(_QWORD *)&v36 = CFRetain(CFSTR("fadeAudio"));
        *((_QWORD *)&v36 + 1) = CFRetain(v7);
        v8 = *(CFTypeRef *)(a1 + 32);
        if (v8)
          v8 = CFRetain(v8);
        v37 = 0uLL;
        *((_QWORD *)&v35 + 1) = v8;
        LODWORD(v38) = 0;
        apEndpoint_sendCommand((uint64_t)&theDict);
        usleep(1000000 * *(double *)(a1 + 80));
        CFRelease(v7);
      }
      v9 = *(CFTypeRef *)a1;
      if (*(_QWORD *)a1)
        v9 = CFRetain(v9);
      *(_QWORD *)&v40 = v9;
      v10 = *(CFTypeRef *)(a1 + 32);
      if (v10)
        v10 = CFRetain(v10);
      *((_QWORD *)&v40 + 1) = v10;
      v11 = *(CFTypeRef *)(a1 + 40);
      if (v11)
        v11 = CFRetain(v11);
      *(_QWORD *)&v41 = v11;
      v12 = *(CFTypeRef *)(a1 + 96);
      if (v12)
        v12 = CFRetain(v12);
      *((_QWORD *)&v41 + 1) = v12;
      v13 = *(CFTypeRef *)(a1 + 104);
      if (v13)
        v13 = CFRetain(v13);
      *(_QWORD *)&v42 = v13;
      v14 = *(CFTypeRef *)(a1 + 112);
      if (v14)
        v14 = CFRetain(v14);
      *((_QWORD *)&v42 + 1) = v14;
      v15 = *(CFTypeRef *)(a1 + 120);
      if (v15)
        v15 = CFRetain(v15);
      *(_QWORD *)&v43 = v15;
      *((_QWORD *)&v43 + 1) = v3;
      dispatch_retain(v3);
      APSDispatchAsyncFHelper();
      v16 = dispatch_time(0, 4000000000);
      if (dispatch_semaphore_wait(v3, v16)
        && gLogCategory_APEndpoint <= 40
        && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      endpoint_stopMediaRemoteAndMetadataServices(*(_QWORD *)a1, *(_QWORD *)(a1 + 88));
    }
    else
    {
      APSLogErrorAt();
    }
    v17 = 0;
  }
LABEL_43:
  if (*(_QWORD *)(a1 + 32))
  {
    if (*(_QWORD *)(a1 + 112))
    {
      APSGetCPULoadAverage();
      CFDictionarySetDouble();
      CFDictionarySetInt64();
      APSRTCReportingAgentSendEvent();
      if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
    }
  }
  v18 = *(_QWORD *)(a1 + 128);
  if (v18)
  {
    theDict = *(CFDictionaryRef *)a1;
    v35 = *(_OWORD *)(a1 + 48);
    *((_QWORD *)&v36 + 1) = v18;
    *(_QWORD *)&v36 = v17;
    *(_QWORD *)&v37 = *(_QWORD *)(a1 + 136);
    CFRetain(theDict);
    APSDispatchAsyncFHelper();
  }
  if (!v17 && !FigCFEqual())
  {
    theDict = 0;
    v19 = CFGetAllocator(*(CFTypeRef *)a1);
    APEndpointCreateEndpointActivationNotificationPayload(v19, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), &theDict);
    v20 = CFGetAllocator(*(CFTypeRef *)a1);
    MutableCopy = CFDictionaryCreateMutableCopy(v20, 0, theDict);
    v22 = MutableCopy;
    v23 = (const void **)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(a1 + 64))
      v23 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(MutableCopy, CFSTR("WasAutoconnected"), *v23);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (theDict)
      CFRelease(theDict);
    if (v22)
      CFRelease(v22);
  }
  if (*(_BYTE *)(a1 + 65))
    endpoint_postInterruptingSessionStateDidChangeNotification(*(_QWORD *)a1, 0);
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  endpoint_postIsInUseDidChangeNotification(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 64));
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  v24 = *(NSObject **)(DerivedStorage + 616);
  if (v24)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 616));
    dispatch_release(v24);
    *(_QWORD *)(DerivedStorage + 616) = 0;
  }
  CFRelease(*(CFTypeRef *)a1);
  v25 = *(const void **)(a1 + 8);
  if (v25)
    CFRelease(v25);
  v26 = *(const void **)(a1 + 32);
  if (v26)
    CFRelease(v26);
  v27 = *(const void **)(a1 + 40);
  if (v27)
    CFRelease(v27);
  v28 = *(const void **)(a1 + 24);
  if (v28)
    CFRelease(v28);
  v29 = *(const void **)(a1 + 88);
  if (v29)
    CFRelease(v29);
  v30 = *(const void **)(a1 + 96);
  if (v30)
    CFRelease(v30);
  v31 = *(const void **)(a1 + 104);
  if (v31)
    CFRelease(v31);
  v32 = *(const void **)(a1 + 112);
  if (v32)
    CFRelease(v32);
  v33 = *(const void **)(a1 + 120);
  if (v33)
    CFRelease(v33);
  dispatch_release(v3);
}

void endpoint_postStreamsChangedNotification(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const __CFAllocator *v8;
  CFTypeRef cf;

  CMBaseObjectGetDerivedStorage();
  cf = 0;
  v8 = CFGetAllocator(a1);
  if (APEndpointCreateStreamsChangedNotificationPayload(v8, a2, a3, a4, (CFMutableDictionaryRef *)&cf))
  {
    APSLogErrorAt();
  }
  else
  {
    if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  if (cf)
    CFRelease(cf);
}

void endpoint_createAudioHALDevices(uint64_t *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  if (a1[1] == *(_QWORD *)(DerivedStorage + 136) && *(_DWORD *)(DerivedStorage + 152) == 2)
  {
    if (!*(_BYTE *)(DerivedStorage + 249))
    {
      v3 = a1[2];
      if ((v3 & 2) != 0)
      {
        endpoint_createAudioHALDevice(*a1, (const void *)*MEMORY[0x1E0CA4880]);
        v3 = a1[2];
      }
      if ((v3 & 0x20) != 0)
        endpoint_createAudioHALDevice(*a1, (const void *)*MEMORY[0x1E0CA4890]);
    }
  }
  else if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  CFRelease((CFTypeRef)*a1);
}

void endpoint_authHandlingComplete(const void *a1, const void *a2, int a3, void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    v9 = DerivedStorage;
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    MEMORY[0x1CAA400CC](*(_QWORD *)(v9 + 120));
    if (*(_QWORD *)a4 == *(_QWORD *)(v9 + 136) && *((_DWORD *)a4 + 4) == *(_DWORD *)(v9 + 152))
    {
      if (a2 && !a3)
        endpoint_setAuthorizationString((uint64_t)a1, a2);
      *(_DWORD *)(v9 + 264) = a3;
    }
    else
    {
      *(_DWORD *)(v9 + 264) = -17604;
      if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
    }
    MEMORY[0x1CAA400E4](*(_QWORD *)(v9 + 120));
    dispatch_semaphore_signal(*((dispatch_semaphore_t *)a4 + 3));
    dispatch_release(*((dispatch_object_t *)a4 + 3));
  }
  else
  {
    APSLogErrorAt();
  }
  free(a4);
  CFRelease(a1);
}

void endpoint_callDelegateHandleAuthRequired(uint64_t a1)
{
  const void *v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 8))(*(_QWORD *)a1, 0, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  CFRelease(*(CFTypeRef *)a1);
  CFRelease(*(CFTypeRef *)(a1 + 24));
  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
}

BOOL endpoint_isAudioTimelineEstablished()
{
  uint64_t DerivedStorage;
  const __CFDictionary *v1;
  _BOOL8 v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  v1 = *(const __CFDictionary **)(DerivedStorage + 168);
  if (!v1)
    goto LABEL_7;
  if (!CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E0CA4880]) || !APSGetFBOPropertyInt64())
  {
    if (CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 168), (const void *)*MEMORY[0x1E0CA4888]))
    {
      v2 = APSGetFBOPropertyInt64() != 0;
      goto LABEL_8;
    }
LABEL_7:
    v2 = 0;
    goto LABEL_8;
  }
  v2 = 1;
LABEL_8:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  return v2;
}

uint64_t endpoint_getCurrentRTPTime@<X0>(CMTime *a1@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *Value;
  const void *v5;
  CMTime v7;
  int v8;

  v8 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a1->value = *MEMORY[0x1E0CA2E18];
  a1->epoch = *(_QWORD *)(v3 + 16);
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  if (*(_DWORD *)(DerivedStorage + 152) == 2)
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 168), (const void *)*MEMORY[0x1E0CA4880]);
    endpoint_getCurrentRTPTimeFromStream((uint64_t)Value, &v8, a1);
    if (!a1->value)
    {
      v5 = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 168), (const void *)*MEMORY[0x1E0CA4888]);
      endpoint_getCurrentRTPTimeFromStream((uint64_t)v5, &v8, &v7);
      *a1 = v7;
    }
  }
  return MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
}

void endpoint_getCurrentRTPTimeFromStream(uint64_t a1@<X0>, int *a2@<X1>, CMTime *a3@<X8>)
{
  uint64_t v5;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v8;
  int v9;
  CFTypeID v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  int v13;
  CFTypeRef cf;
  CFDictionaryRef dictionaryRepresentation;

  v5 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a3->value = *MEMORY[0x1E0CA2E18];
  a3->epoch = *(_QWORD *)(v5 + 16);
  cf = 0;
  dictionaryRepresentation = 0;
  if (!a1)
    goto LABEL_20;
  CMBaseObject = FigEndpointStreamGetCMBaseObject();
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v7)
  {
    v13 = -12782;
    goto LABEL_12;
  }
  v8 = *MEMORY[0x1E0C9AE00];
  v9 = v7(CMBaseObject, CFSTR("HoseRegistrar"), *MEMORY[0x1E0C9AE00], &cf);
  if (v9)
  {
    v13 = v9;
LABEL_12:
    APSLogErrorAt();
    goto LABEL_13;
  }
  if (!cf)
  {
LABEL_20:
    v13 = 0;
    goto LABEL_13;
  }
  v10 = CFGetTypeID(cf);
  if (v10 == FigEndpointStreamAudioEngineGetTypeID())
  {
    v11 = FigEndpointStreamAudioEngineGetCMBaseObject();
    v12 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
    if (v12)
    {
      v13 = v12(v11, CFSTR("currentRTPTime"), v8, &dictionaryRepresentation);
      if (!v13)
      {
        CMTimeMakeFromDictionary(a3, dictionaryRepresentation);
        goto LABEL_13;
      }
    }
    else
    {
      v13 = -12782;
    }
    goto LABEL_12;
  }
  APSLogErrorAt();
  v13 = -17606;
LABEL_13:
  if (a2)
    *a2 = v13;
  if (dictionaryRepresentation)
    CFRelease(dictionaryRepresentation);
  if (cf)
    CFRelease(cf);
}

uint64_t endpoint_dissociateStreamsDictionaryEntry(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (*v4)(uint64_t);

  result = CMBaseObjectGetVTable();
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 32);
  if (v4)
    return v4(a2);
  return result;
}

uint64_t endpoint_setupAudioStream(const void *a1, int a2, const void *a3, int a4, const void *a5, const void *a6)
{
  uint64_t DerivedStorage;
  uint64_t v13;
  CFTypeID v14;
  int v15;
  CFAllocatorRef *v16;
  uint64_t v17;
  CFAllocatorRef v18;
  __CFDictionary *Mutable;
  __CFDictionary *v20;
  const void *v21;
  CFMutableDictionaryRef v22;
  const __CFAllocator *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFMutableDictionaryRef v27;
  int v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  _BYTE *v34;
  const void *v35;
  const void *v36;
  CFMutableDictionaryRef v37;
  const __CFAllocator *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  const void *v44;
  int v45;
  void *value;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  cf = 0;
  if (!a6)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  v13 = DerivedStorage;
  v14 = CFGetTypeID(a6);
  if (v14 == CFStringGetTypeID())
  {
    v15 = CFEqual(a6, (CFTypeRef)*MEMORY[0x1E0CA4888]);
    v16 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (v15)
    {
      v17 = CMBaseObjectGetDerivedStorage();
      v18 = *v16;
      Mutable = CFDictionaryCreateMutable(*v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v20 = Mutable;
        v21 = *(const void **)(v17 + 288);
        if (v21)
          CFDictionarySetValue(Mutable, CFSTR("EventRecorder"), v21);
        v22 = endpoint_copyClusterInfo();
        FigCFDictionarySetValue();
        if (v22)
          CFRelease(v22);
        v23 = CFGetAllocator(a1);
        v24 = APEndpointStreamBufferedAudioCreate(v23, *(CFTypeRef *)(v13 + 448), *(const void **)(v13 + 456), v20, *(const void **)(v13 + 224), a5, *(const void **)(v13 + 40), &cf);
        if ((_DWORD)v24)
        {
          v25 = v24;
          goto LABEL_62;
        }
LABEL_34:
        if (a2)
        {
          if (a3)
            v40 = APEndpointStreamInterruptingWrapperCreate((uint64_t)v18, cf, a3, *(const void **)(v13 + 200), &value);
          else
            v40 = APEndpointStreamInterruptibleWrapperCreate((uint64_t)v18, cf, *(const void **)(v13 + 200), &value);
          v25 = v40;
          if ((_DWORD)v40)
            goto LABEL_62;
        }
        else
        {
          if (cf)
            v41 = (void *)CFRetain(cf);
          else
            v41 = 0;
          value = v41;
        }
        v42 = endpoint_addEndpointStreamNotificationListeners(a1);
        if (!(_DWORD)v42)
        {
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v13 + 168), a6, value);
          if (gLogCategory_APEndpoint <= 50
            && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v25 = 0;
          goto LABEL_50;
        }
        v25 = v42;
LABEL_62:
        APSLogErrorAt();
LABEL_50:
        CFRelease(v20);
        if (cf)
          CFRelease(cf);
        goto LABEL_52;
      }
    }
    else
    {
      v45 = a2;
      v26 = CMBaseObjectGetDerivedStorage();
      v18 = *v16;
      v27 = CFDictionaryCreateMutable(*v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v27)
      {
        v20 = v27;
        v44 = a5;
        v28 = FigCFEqual();
        v29 = (const void *)*MEMORY[0x1E0C9AE50];
        v30 = (const void *)*MEMORY[0x1E0C9AE40];
        if (v28)
          v31 = (const void *)*MEMORY[0x1E0C9AE50];
        else
          v31 = (const void *)*MEMORY[0x1E0C9AE40];
        CFDictionarySetValue(v20, CFSTR("UsingScreen"), v31);
        if (*(_BYTE *)(v26 + 489))
          v32 = v29;
        else
          v32 = v30;
        CFDictionarySetValue(v20, CFSTR("StartSilentAudio"), v32);
        if (a4)
          v33 = v29;
        else
          v33 = v30;
        CFDictionarySetValue(v20, CFSTR("ForceEnableLLStream"), v33);
        v34 = (_BYTE *)CMBaseObjectGetDerivedStorage();
        if (v34[281])
          APSScreenMediaPresentationUDPLatencyMs();
        else
          APSScreenMediaPresentationLatencyMs();
        FigCFDictionarySetInt32();
        if (v34[280])
        {
          if (v34[248])
            v35 = v29;
          else
            v35 = v30;
          CFDictionarySetValue(v20, CFSTR("IsMediaPresentation"), v35);
        }
        v36 = *(const void **)(v26 + 288);
        if (v36)
          CFDictionarySetValue(v20, CFSTR("EventRecorder"), v36);
        v37 = endpoint_copyClusterInfo();
        FigCFDictionarySetValue();
        a2 = v45;
        if (v37)
          CFRelease(v37);
        v38 = CFGetAllocator(a1);
        v39 = APEndpointStreamAudioCreate(v38, *(CFTypeRef *)(v13 + 448), *(const void **)(v13 + 456), a6, v20, *(const void **)(v13 + 224), v44, *(const void **)(v13 + 216), *(CFTypeRef *)(v13 + 40), (void **)&cf);
        if ((_DWORD)v39)
        {
          v25 = v39;
          goto LABEL_62;
        }
        goto LABEL_34;
      }
    }
    APSLogErrorAt();
    v25 = 4294950575;
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    v25 = 4294950576;
  }
LABEL_52:
  if (value)
    CFRelease(value);
  return v25;
}

void markStreamForRemoval(CFMutableDictionaryRef *a1, void *key, CFDictionaryRef theDict)
{
  CFMutableDictionaryRef Mutable;
  const void *Value;

  if (a1
    && key
    && theDict
    && (*a1
     || (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (*a1 = Mutable) != 0)))
  {
    Value = CFDictionaryGetValue(theDict, key);
    if (Value)
      CFDictionarySetValue(*a1, key, Value);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t endpoint_setupScreenStream(const void *a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  const __CFAllocator *v6;
  __CFDictionary *Mutable;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const __CFAllocator *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  v5 = (const void *)CFStringCreateF();
  v6 = CFGetAllocator(a1);
  Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v20 = APSSignalErrorAt();
    goto LABEL_36;
  }
  if (a2)
  {
    v8 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3720]);
    if (v8)
      CFDictionarySetValue(Mutable, CFSTR("clientPID"), v8);
    v9 = CFDictionaryGetValue(a2, CFSTR("ScreenSource"));
    if (v9)
      CFDictionarySetValue(Mutable, CFSTR("ScreenSource"), v9);
    v10 = CFDictionaryGetValue(a2, CFSTR("ScreenProcessor"));
    if (v10)
      CFDictionarySetValue(Mutable, CFSTR("ScreenProcessor"), v10);
    v11 = CFDictionaryGetValue(a2, CFSTR("ScreenOverrides"));
    if (v11)
      CFDictionarySetValue(Mutable, CFSTR("ScreenOverrides"), v11);
    v12 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3758]);
    if (v12 && *(_BYTE *)(DerivedStorage + 280))
      CFDictionarySetValue(Mutable, CFSTR("IsMediaPresentation"), v12);
  }
  v13 = *(const void **)(DerivedStorage + 480);
  if (v13)
    CFDictionarySetValue(Mutable, CFSTR("ScreenUsageMode"), v13);
  v14 = (const void *)*MEMORY[0x1E0C9AE50];
  v15 = (const void *)*MEMORY[0x1E0C9AE40];
  if (*(_BYTE *)(DerivedStorage + 280))
    v16 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v16 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(Mutable, CFSTR("IsMediaPresentationModeAvailable"), v16);
  if (*(_BYTE *)(DerivedStorage + 248))
    v17 = v14;
  else
    v17 = v15;
  CFDictionarySetValue(Mutable, CFSTR("IsPerAppDisplay"), v17);
  CFDictionarySetValue(Mutable, CFSTR("LogPrefix"), v5);
  FigCFDictionarySetValue();
  if (*(_BYTE *)(DerivedStorage + 281))
  {
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v21 = CFGetAllocator(a1);
    v22 = APEndpointStreamScreenUDPCreate(v21, Mutable, *(CFTypeRef *)(DerivedStorage + 448), *(const void **)(DerivedStorage + 224), *(const void **)(DerivedStorage + 40), 0, *(const void **)(DerivedStorage + 216), 0, (CFTypeRef *)&value);
    if ((_DWORD)v22)
    {
      v20 = v22;
      goto LABEL_46;
    }
  }
  else
  {
    v18 = CFGetAllocator(a1);
    v19 = APEndpointStreamScreenCreate(v18, Mutable, *(CFTypeRef *)(DerivedStorage + 448), *(_QWORD *)(DerivedStorage + 224), *(const void **)(DerivedStorage + 40), 0, *(const void **)(DerivedStorage + 216), (CFTypeRef *)&value);
    if ((_DWORD)v19)
    {
      v20 = v19;
LABEL_46:
      APSLogErrorAt();
      goto LABEL_36;
    }
  }
  v23 = (const void *)*MEMORY[0x1E0CA48A0];
  v24 = endpoint_addEndpointStreamNotificationListeners(a1);
  if ((_DWORD)v24)
  {
    v20 = v24;
    goto LABEL_46;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 168), v23, value);
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v20 = 0;
LABEL_36:
  if (v5)
    CFRelease(v5);
  if (Mutable)
    CFRelease(Mutable);
  if (value)
    CFRelease(value);
  return v20;
}

void endpoint_suspendDissociateAndReleaseStreamsAndStopSenderSession(void *context)
{
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  const __CFSet *v4;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeID v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex v16;
  const __CFData *ValueAtIndex;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  NSObject *v29;
  CFTypeRef cf;
  int v31;

  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v2 = (const __CFDictionary *)*((_QWORD *)context + 2);
  if (v2)
    CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)endpoint_suspendAndDissociateStreamsDictionaryEntry, context);
  v3 = (const __CFDictionary *)*((_QWORD *)context + 4);
  if (v3)
    CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)endpoint_invalidateRCS, *(void **)context);
  v4 = (const __CFSet *)*((_QWORD *)context + 3);
  if (v4)
    CFSetApplyFunction(v4, (CFSetApplierFunction)endpoint_invalidatePlaybackSession, *(void **)context);
  v5 = *((_QWORD *)context + 1);
  if (v5)
  {
    v6 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 96);
    if (v6)
      v6(v5, 0, 0, 0, 0);
    v7 = *((_QWORD *)context + 1);
    v8 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
    if (v8)
      v8(v7);
    v9 = *((_QWORD *)context + 1);
    v10 = *((_QWORD *)context + 6);
    v31 = 0;
    cf = 0;
    if (!v10)
      goto LABEL_27;
    CMBaseObjectGetDerivedStorage();
    if (APSGetFBOPropertyInt64())
    {
      CMBaseObject = APSenderSessionGetCMBaseObject(v9);
      v12 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
      if (!v12 || (v12(CMBaseObject, CFSTR("ReceiverSuppliedRTCStats"), *MEMORY[0x1E0C9AE00], &cf), !cf))
      {
LABEL_27:
        v20 = APSenderSessionGetCMBaseObject(*((_QWORD *)context + 1));
        if (v20)
        {
          v21 = v20;
          v22 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v22)
            v22(v21);
        }
        v23 = (const void *)*((_QWORD *)context + 1);
        if (v23)
          CFRelease(v23);
        goto LABEL_32;
      }
      v13 = CFGetTypeID(cf);
      if (v13 == CFArrayGetTypeID())
      {
        Count = CFArrayGetCount((CFArrayRef)cf);
        if (Count >= 1)
        {
          v15 = Count;
          v16 = 0;
          while (1)
          {
            ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex((CFArrayRef)cf, v16);
            CFDataGetBytePtr(ValueAtIndex);
            CFDataGetLength(ValueAtIndex);
            CFDictionaryGetTypeID();
            v18 = CFCreateWithPlistBytes();
            if (!v18)
              break;
            v19 = (const void *)v18;
            APSRTCReportingAgentSendOfflineEvent();
            CFRelease(v19);
            if (v15 == ++v16)
              goto LABEL_25;
          }
          APSLogErrorAt();
          v31 = -16721;
        }
      }
    }
LABEL_25:
    if (cf)
      CFRelease(cf);
    goto LABEL_27;
  }
LABEL_32:
  v24 = (const void *)*((_QWORD *)context + 2);
  if (v24)
    CFRelease(v24);
  v25 = (const void *)*((_QWORD *)context + 3);
  if (v25)
    CFRelease(v25);
  v26 = (const void *)*((_QWORD *)context + 4);
  if (v26)
    CFRelease(v26);
  v27 = (const void *)*((_QWORD *)context + 5);
  if (v27)
    CFRelease(v27);
  v28 = (const void *)*((_QWORD *)context + 6);
  if (v28)
    CFRelease(v28);
  if (*(_QWORD *)context)
    CFRelease(*(CFTypeRef *)context);
  v29 = *((_QWORD *)context + 7);
  if (v29)
  {
    dispatch_semaphore_signal(v29);
    dispatch_release(*((dispatch_object_t *)context + 7));
  }
}

uint64_t endpoint_addEndpointStreamNotificationListeners(const void *a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v3)
    v4 = v3(v2, 88);
  else
    v4 = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  v5 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v5)
  {
    v11 = v5;
    goto LABEL_20;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  v6 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v6)
  {
    v11 = v6;
    goto LABEL_20;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  v7 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v7)
  {
    v11 = v7;
    goto LABEL_20;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  v8 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v8)
  {
    v11 = v8;
    goto LABEL_20;
  }
  if (!v4 || !FigCFEqual())
    return 0;
  CMNotificationCenterGetDefaultLocalCenter();
  v9 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v9)
  {
    v11 = v9;
    goto LABEL_20;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  v10 = FigNotificationCenterAddWeakListener();
  v11 = v10;
  if ((_DWORD)v10)
  {
LABEL_20:
    APSLogErrorAt();
    return v11;
  }
  endpoint_handleStreamBadgingFormatInfoChanged(v10, a1);
  return v11;
}

CFMutableDictionaryRef endpoint_copyClusterInfo()
{
  CFMutableDictionaryRef Mutable;
  void (*v1)(CFMutableDictionaryRef, CFTypeRef *, CFTypeRef *, CFTypeRef *, _QWORD, CFTypeRef *, CFTypeRef *, _QWORD);
  CFTypeRef v3;
  CFTypeRef v4;
  CFTypeRef v5;
  CFTypeRef cf;
  CFTypeRef v7;

  v7 = 0;
  v5 = 0;
  cf = 0;
  v3 = 0;
  v4 = 0;
  Mutable = *(CFMutableDictionaryRef *)(CMBaseObjectGetDerivedStorage() + 40);
  if (!Mutable)
    goto LABEL_19;
  v1 = *(void (**)(CFMutableDictionaryRef, CFTypeRef *, CFTypeRef *, CFTypeRef *, _QWORD, CFTypeRef *, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v1 || (v1(Mutable, &v7, &cf, &v5, 0, &v4, &v3, 0), !v7))
  {
    Mutable = 0;
    goto LABEL_8;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
  }
  else
  {
LABEL_19:
    APSLogErrorAt();
  }
  if (v7)
    CFRelease(v7);
LABEL_8:
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
  if (v4)
    CFRelease(v4);
  if (v3)
    CFRelease(v3);
  return Mutable;
}

void endpoint_handleStreamTimelineEstablished(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  _QWORD block[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  CFRetain(a2);
  v4 = *(NSObject **)(DerivedStorage + 576);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __endpoint_handleStreamTimelineEstablished_block_invoke;
  block[3] = &__block_descriptor_tmp_337_0;
  block[4] = DerivedStorage;
  block[5] = a2;
  dispatch_async(v4, block);
}

uint64_t endpoint_handleStreamFailed(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int Int64;
  uint64_t DerivedStorage;

  Int64 = -71850;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    Int64 = CFDictionaryGetInt64();
    FigCFDictionaryGetBooleanIfPresent();
  }
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  endpoint_updateStatus(a2, Int64, 1);
  return MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
}

void endpoint_handleStreamIsPlayingDidChange(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  _BOOL4 v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  v4 = CFDictionaryGetInt64() != 0;
  endpoint_handleIdleStateChanged_0(a2, v4);
  JUMPOUT(0x1CAA400E4);
}

void endpoint_handleStreamBadgingFormatInfoChanged(uint64_t a1, const void *a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v7;
  int v8;
  int Enum;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v11;
  int v12;
  NSObject *global_queue;
  _QWORD block[6];
  int v15;
  CFTypeRef v16;

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v4)
    v4(v3, 89);
  v16 = 0;
  v15 = 0;
  CMBaseObject = FigEndpointStreamGetCMBaseObject();
  v6 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v6)
  {
    v12 = -12782;
    goto LABEL_14;
  }
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = v6(CMBaseObject, CFSTR("ActiveBadgingFormatInfo"), *MEMORY[0x1E0C9AE00], &v16);
  if (v8)
  {
    v12 = v8;
    goto LABEL_14;
  }
  if (!v16 || (Enum = APSBadgingFormatInfoTypeGetEnum()) == 0)
  {
    v15 = APSBadgingFormatInfoTypeResolve();
    Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v11 = Mutable;
      v12 = FigCFDictionarySetUInt32();
      if (v12)
      {
        APSLogErrorAt();
      }
      else
      {
        if (a2)
          CFRetain(a2);
        CFRetain(v11);
        global_queue = dispatch_get_global_queue(21, 0);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = __endpoint_updateBadgingFormatInfo_block_invoke;
        block[3] = &__block_descriptor_tmp_341;
        block[4] = a2;
        block[5] = v11;
        dispatch_async(global_queue, block);
      }
      CFRelease(v11);
      goto LABEL_15;
    }
    v12 = -6728;
LABEL_14:
    APSLogErrorAt();
    goto LABEL_15;
  }
  v12 = Enum;
  APSLogErrorAt();
  if (gLogCategory_APEndpoint <= 90 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
LABEL_15:
  if (v16)
    CFRelease(v16);
  if (v12)
  {
    APSLogErrorAt();
    if (gLogCategory_APEndpoint <= 90 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
  }
}

void __endpoint_handleStreamTimelineEstablished_block_invoke(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 600))
  {
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    APMetadataSenderSendInitialMetadata(*(dispatch_queue_t **)(*(_QWORD *)(a1 + 32) + 600));
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __endpoint_updateBadgingFormatInfo_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, const __CFString *, uint64_t, _QWORD, _QWORD);
  const void *v5;
  const void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass()))
    v2 = 0;
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(void (**)(uint64_t, const __CFString *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 24)
                                                                                   + 72);
  if (v4)
    v4(v2, CFSTR("updateBadgingFormatInfo"), v3, 0, 0);
  v5 = *(const void **)(a1 + 32);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 40);
  if (v6)
    CFRelease(v6);
}

void endpoint_suspendAndDissociateStreamsDictionaryEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, _QWORD, _QWORD, _QWORD);
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t CMBaseObject;
  void (*v10)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v11;

  if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v5 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v5)
    v5(a2, 0, 0, 0);
  v6 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v6)
    v6(a2);
  v8 = *(_QWORD *)(a3 + 40);
  v7 = *(_QWORD *)(a3 + 48);
  v11 = 0;
  if (v7)
  {
    if (v8)
    {
      CMBaseObject = FigEndpointStreamGetCMBaseObject();
      v10 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
      if (v10)
      {
        v10(CMBaseObject, CFSTR("RTCStats"), *MEMORY[0x1E0C9AE00], &v11);
        if (v11)
        {
          FigCFArrayApplyFunction();
          if (v11)
            CFRelease(v11);
        }
      }
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

uint64_t endpoint_invalidateRCS()
{
  uint64_t result;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  result = FigEndpointRemoteControlSessionGetCMBaseObject();
  if (result)
  {
    v1 = result;
    result = CMBaseObjectGetVTable();
    v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 24);
    if (v2)
      return v2(v1);
  }
  return result;
}

void endpoint_invalidatePlaybackSession()
{
  uint64_t CMBaseObject;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t DerivedStorage;
  const __CFDictionary *v4;
  uint64_t v5;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v7;
  uint64_t v8;
  void (*v9)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  CFDictionaryRef theDict;

  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  CMBaseObject = FigEndpointPlaybackSessionGetCMBaseObject();
  if (CMBaseObject)
  {
    v1 = CMBaseObject;
    v2 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v2)
      v2(v1);
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theDict = 0;
  if (*(_QWORD *)(DerivedStorage + 304))
  {
    v4 = *(const __CFDictionary **)(DerivedStorage + 296);
    if (v4
      && (v5 = *MEMORY[0x1E0C9AE00],
          (MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v4)) != 0))
    {
      v7 = MutableCopy;
      v8 = FigEndpointPlaybackSessionGetCMBaseObject();
      v9 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
      if (v9)
      {
        v9(v8, CFSTR("RTCStats"), v5, &theDict);
        if (theDict)
        {
          if (CFDictionaryContainsKey(theDict, CFSTR("activateToStartMs")))
          {
            if (CFDictionaryMergeDictionary())
            {
              APSLogErrorAt();
            }
            else
            {
              CFDictionarySetValue(v7, CFSTR("sessionType"), CFSTR("Playback"));
              APSRTCReportingAgentSendEvent();
              if (gLogCategory_APEndpoint <= 50
                && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
            }
          }
        }
      }
      CFRelease(v7);
      if (theDict)
        CFRelease(theDict);
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

void endpoint_reportStreamMetricsArrayIterator(const __CFDictionary *a1, uint64_t a2)
{
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v4;

  if (a2 && *(_QWORD *)a2 && a1 && *(_QWORD *)(a2 + 8))
  {
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFDictionaryRef *)a2);
    if (MutableCopy)
    {
      v4 = MutableCopy;
      if (CFDictionaryMergeDictionary() || !CFDictionaryGetValue(a1, CFSTR("sessionType")))
      {
        APSLogErrorAt();
      }
      else
      {
        if (FigCFEqual())
          APSRTCReportingAgentSendEvent();
        if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          LogPrintF();
      }
      CFRelease(v4);
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

uint64_t endpoint_logEventInterval(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (!a4)
    return APSLogErrorAt();
  result = APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  if (gLogCategory_APEndpoint <= 40)
  {
    if (gLogCategory_APEndpoint != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

void endpoint_logEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *StringWithEventRecorderTime;

  if (a3)
  {
    APSEventRecorderGetEventTimeRecursive();
    StringWithEventRecorderTime = (const void *)APSEventRecorderCreateStringWithEventRecorderTime();
    if (gLogCategory_APEndpoint <= 40 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    if (StringWithEventRecorderTime)
      CFRelease(StringWithEventRecorderTime);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t endpoint_logTransportDiscoveryDurationIfEventPresent()
{
  uint64_t result;
  double v1;

  result = APSEventRecorderGetEventTimeRecursive();
  if (v1 != 0.0)
  {
    APBrowserGetStartEventForBrowserDeviceEvent();
    result = APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
    if (gLogCategory_APEndpoint <= 40)
    {
      if (gLogCategory_APEndpoint != -1)
        return LogPrintF();
      result = _LogCategory_Initialize();
      if ((_DWORD)result)
        return LogPrintF();
    }
  }
  return result;
}

uint64_t endpoint_isVideoPlaybackSessionActive()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const __CFSet *v2;
  int64_t Count;
  int64_t v4;
  const void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 152) != 2)
    return 0;
  v1 = DerivedStorage;
  v2 = *(const __CFSet **)(DerivedStorage + 312);
  if (!v2)
    return 0;
  Count = CFSetGetCount(v2);
  if (Count < 1)
    return 0;
  v4 = Count;
  v5 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
  CFSetGetValues(*(CFSetRef *)(v1 + 312), v5);
  v6 = 0;
  while (1)
  {
    v7 = APSGetFBOPropertyInt64();
    v8 = APSGetFBOPropertyInt64();
    if (v7 && v8 == 0)
      break;
    if (v4 == ++v6)
    {
      v10 = 0;
      goto LABEL_14;
    }
  }
  v10 = 1;
LABEL_14:
  free(v5);
  return v10;
}

uint64_t __endpoint_stopListeningToSenderSessionAndStreamsNotifications_block_invoke()
{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t);
  BOOL v2;
  uint64_t result;

  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  v1 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v1)
    v2 = v1(v0, 88) == 0;
  else
    v2 = 1;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  result = FigNotificationCenterRemoveWeakListener();
  if (!v2)
  {
    result = FigCFEqual();
    if ((_DWORD)result)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      return FigNotificationCenterRemoveWeakListener();
    }
  }
  return result;
}

uint64_t endpoint_unsubscribeRCS()
{
  uint64_t result;

  CMNotificationCenterGetDefaultLocalCenter();
  result = FigNotificationCenterRemoveWeakListener();
  if (gLogCategory_APEndpoint <= 50)
  {
    if (gLogCategory_APEndpoint != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

uint64_t endpoint_unsubscribePlaybackSession()
{
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterRemoveWeakListener();
}

void endpoint_handlePlaybackSessionActivationStateChanged(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  endpoint_updateCurrentVolumeControlType();
  endpoint_updateIsVolumeAndMuteControlSupported();
  endpoint_updateVideoPlaybackIsActive(a2);
  JUMPOUT(0x1CAA400E4);
}

void endpoint_handlePlaybackSessionIsPlayingDidChange(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  _BOOL4 v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  v4 = CFDictionaryGetInt64() != 0;
  endpoint_handleIdleStateChanged_0(a2, v4);
  JUMPOUT(0x1CAA400E4);
}

void endpoint_handlePlaybackSessionInvalidated(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  __CFSet *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  endpoint_unsubscribePlaybackSession(a4, a2);
  endpoint_invalidatePlaybackSession();
  v7 = *(__CFSet **)(DerivedStorage + 312);
  if (v7)
    CFSetRemoveValue(v7, a4);
  endpoint_updateCurrentVolumeControlType();
  endpoint_updateIsVolumeAndMuteControlSupported();
  endpoint_updateVideoPlaybackIsActive(a2);
  JUMPOUT(0x1CAA400E4);
}

uint64_t endpoint_handleMediaControlConnectedStateChanged(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  int Int64;
  BOOL v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (!a5)
    return APSLogErrorAt();
  Int64 = CFDictionaryGetInt64();
  v9 = CFDictionaryGetInt64() != 0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  endpoint_updateStatus(a2, Int64, 1);
  *(_BYTE *)(DerivedStorage + 320) = v9;
  return MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
}

void __endpoint_deactivateInternal_block_invoke(uint64_t a1)
{
  CFSetRemoveValue(*(CFMutableSetRef *)(*(_QWORD *)(a1 + 32) + 8), **(const void ***)(a1 + 40));
}

void endpoint_stopMediaRemoteAndMetadataServices(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  int v7;
  const void *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  if (*(_QWORD *)(DerivedStorage + 584))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    if (*(_DWORD *)(v4 + 592))
    {
      if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      APMediaRemoteCommandReceiverRemoveClient();
    }
    v5 = *(const void **)(v4 + 584);
    *(_DWORD *)(v4 + 592) = 0;
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(v4 + 584) = 0;
    }
  }
  else
  {
    *(_DWORD *)(DerivedStorage + 592) = 0;
  }
  v6 = *(_QWORD *)(v4 + 600);
  if (v6)
  {
    if (gLogCategory_APEndpoint <= 50)
    {
      if (gLogCategory_APEndpoint != -1 || (v7 = _LogCategory_Initialize(), v6 = *(_QWORD *)(v4 + 600), v7))
      {
        LogPrintF();
        v6 = *(_QWORD *)(v4 + 600);
      }
    }
    APMetadataSenderInvalidate(v6);
    v8 = *(const void **)(v4 + 600);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(v4 + 600) = 0;
    }
  }
  if (a2)
  {
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    APMetadataSourceStop(a2);
  }
}

uint64_t endpoint_createAudioHALDevice(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v6;
  const void *v7;
  __CFString **v8;
  __CFString *v9;
  int v10;
  _BOOL4 v11;
  const void *v12;
  const void *v13;
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 168), a2);
  if (!result)
  {
    if (gLogCategory_APEndpoint > 90)
      return result;
    if (gLogCategory_APEndpoint == -1)
    {
      result = _LogCategory_Initialize();
      if (!(_DWORD)result)
        return result;
    }
    return LogPrintF();
  }
  v6 = result;
  v7 = (const void *)*MEMORY[0x1E0CA4880];
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4880]))
  {
    result = FigCFEqual();
    v8 = kAPHALAudioDeviceCreationOptionDeviceType_Screen;
    if (!(_DWORD)result)
      v8 = kAPHALAudioDeviceCreationOptionDeviceType_Audio;
  }
  else
  {
    result = CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4890]);
    if (!(_DWORD)result)
    {
LABEL_14:
      if (gLogCategory_APEndpoint > 90)
        return result;
      if (gLogCategory_APEndpoint == -1)
      {
        result = _LogCategory_Initialize();
        if (!(_DWORD)result)
          return result;
      }
      return LogPrintF();
    }
    v8 = kAPHALAudioDeviceCreationOptionDeviceType_LowLatencyAudio;
  }
  v9 = *v8;
  if (!*v8)
    goto LABEL_14;
  v10 = CFEqual(a2, v7);
  if (v10)
    v11 = APSGetFBOPropertyInt64() == 0;
  else
    v11 = 0;
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v12 = *(const void **)(DerivedStorage + 448);
  v13 = *(const void **)(DerivedStorage + 208);
  if (FigCFEqual())
    v14 = 75;
  else
    v14 = 0;
  CMBaseObjectGetDerivedStorage();
  APSVolumeConvertSliderValueToDB();
  result = APEndpointTriggerAudioHALDeviceCreation(a1, v6, v12, v9, v13, v14, v10, v11);
  if ((_DWORD)result)
    return APSLogErrorAt();
  return result;
}

void endpoint_dissociateInternal(uint64_t a1)
{
  _QWORD *DerivedStorage;
  NSObject *v3;
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  const __CFSet *v8;
  const __CFAllocator *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  _QWORD block[6];
  CFTypeRef v18;
  CFMutableDictionaryRef v19;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v18 = 0;
  v19 = 0;
  if (introspector_getCollectionOfActiveEndpoints_once != -1)
    dispatch_once(&introspector_getCollectionOfActiveEndpoints_once, &__block_literal_global_37);
  if (introspector_getCollectionOfActiveEndpoints_coll)
  {
    v3 = *(NSObject **)introspector_getCollectionOfActiveEndpoints_coll;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __endpoint_dissociateInternal_block_invoke;
    block[3] = &__block_descriptor_tmp_448;
    block[4] = introspector_getCollectionOfActiveEndpoints_coll;
    block[5] = a1;
    dispatch_sync(v3, block);
  }
  MEMORY[0x1CAA400CC](DerivedStorage[15]);
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(DerivedStorage[5]);
  v5 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v5)
    v5(CMBaseObject, CFSTR("DeviceID"), *MEMORY[0x1E0C9AE00], &v18);
  MEMORY[0x1CAA400E4](DerivedStorage[15]);
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
  {
    CFGetHardwareAddress();
    LogPrintF();
  }
  if (DerivedStorage[3] && *(_QWORD *)(a1 + 48))
    APBrowserControllerDeregisterEndpoint();
  v6 = *(const __CFDictionary **)(a1 + 24);
  if (v6)
    CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)endpoint_dissociateStreamsDictionaryEntry, 0);
  v7 = *(const __CFDictionary **)(a1 + 72);
  if (v7)
    CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)endpoint_invalidateRCS, *(void **)a1);
  v8 = *(const __CFSet **)(a1 + 64);
  if (v8)
    CFSetApplyFunction(v8, (CFSetApplierFunction)endpoint_invalidatePlaybackSession, *(void **)a1);
  endpoint_stopMediaRemoteAndMetadataServices(*(_QWORD *)a1, *(_QWORD *)(a1 + 56));
  MEMORY[0x1CAA400CC](DerivedStorage[15]);
  endpoint_updateStatus(*(const void **)a1, -16723, 1);
  MEMORY[0x1CAA400E4](DerivedStorage[15]);
  if (*DerivedStorage)
  {
    v9 = CFGetAllocator(*(CFTypeRef *)a1);
    APEndpointCreateEndpointActivationNotificationPayload(v9, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), &v19);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (v19)
      CFRelease(v19);
  }
  if (v18)
    CFRelease(v18);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v10 = *(const void **)(a1 + 8);
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)(a1 + 48);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(a1 + 24);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(a1 + 16);
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(a1 + 56);
  if (v14)
    CFRelease(v14);
  v15 = *(const void **)(a1 + 64);
  if (v15)
    CFRelease(v15);
  v16 = *(const void **)(a1 + 72);
  if (v16)
    CFRelease(v16);
}

void __endpoint_dissociateInternal_block_invoke(uint64_t a1)
{
  CFSetRemoveValue(*(CFMutableSetRef *)(*(_QWORD *)(a1 + 32) + 8), **(const void ***)(a1 + 40));
}

void endpoint_updateFeaturesInternalWithContext(uint64_t a1)
{
  uint64_t DerivedStorage;
  void *v3;
  uint64_t v4;
  const __CFDictionary *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *Value;
  uint64_t v12;
  const void *v13;
  CFTypeID v14;
  int ActivationOptions;
  int v16;
  int MetadataSourceAndCommandSinkIfNeeded;
  _BOOL4 v18;
  const void *v19;
  const void *v20;
  const __CFSet *v21;
  CFMutableSetRef Mutable;
  const void *v23;
  CFTypeRef v24;
  CFTypeRef v25;
  const void *v26;
  const void *v27;
  uint64_t v28;
  CFAllocatorRef v29;
  uint64_t CMBaseObject;
  void (*v31)(uint64_t, const __CFString *, CFAllocatorRef, __int128 *);
  CFTypeRef v32;
  CFTypeRef v33;
  CFTypeRef v34;
  const void *v35;
  const void *v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  v3 = *(void **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(const __CFDictionary **)(a1 + 16);
  v39 = *(_OWORD *)(a1 + 24);
  v6 = CMBaseObjectGetDerivedStorage();
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v40 = 0u;
  v7 = *(_QWORD *)(v6 + 144);
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (*(_BYTE *)(v6 + 48))
  {
    APSLogErrorAt();
    v36 = 0;
    v37 = -6705;
    goto LABEL_78;
  }
  if (*(_DWORD *)(v6 + 152) != 2)
  {
    APSLogErrorAt();
    v36 = 0;
    v37 = -6709;
    goto LABEL_78;
  }
  v38 = DerivedStorage;
  v8 = v7 | v4;
  if ((v7 | v4) == v7 && v8 == v4)
  {
    v37 = 0;
    v36 = 0;
    goto LABEL_115;
  }
  if (v8 != v7 && v8 != v4)
  {
    v36 = 0;
    v37 = -6705;
LABEL_115:
    DerivedStorage = v38;
    goto LABEL_78;
  }
  if (!v5)
  {
    v36 = 0;
    goto LABEL_33;
  }
  Value = CFDictionaryGetValue(v5, CFSTR("ParentContextID"));
  if (!Value)
    Value = CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E0CA3770]);
  if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 48) && APSGetFBOPropertyInt64())
  {
    v12 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 64);
    if (v12)
    {
      if (v12 != *MEMORY[0x1E0C9AE50])
        goto LABEL_32;
      goto LABEL_27;
    }
    if (endpoint_isInLocalCluster() && APSIsMemberOfPersistentGroup())
    {
LABEL_27:
      v36 = CFDictionaryGetValue(v5, CFSTR("GroupID"));
      if (Value)
        goto LABEL_28;
LABEL_33:
      if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      v13 = *(const void **)(v6 + 160);
      if (v13)
      {
        CFRelease(v13);
        *(_QWORD *)(v6 + 160) = 0;
      }
      if (!*(_BYTE *)(v6 + 128))
      {
        if (!v5)
          goto LABEL_46;
        goto LABEL_45;
      }
LABEL_110:
      APSLogErrorAt();
      v37 = -16723;
      goto LABEL_115;
    }
  }
LABEL_32:
  v36 = 0;
  if (!Value)
    goto LABEL_33;
LABEL_28:
  if (!*(_QWORD *)(v6 + 160))
  {
    *(_QWORD *)(v6 + 160) = Value;
    CFRetain(Value);
    if (gLogCategory_APEndpoint <= 30 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
  }
  if (!FigCFEqual())
  {
    DerivedStorage = v38;
    if (gLogCategory_APEndpoint <= 90 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v37 = -16726;
    goto LABEL_78;
  }
  if (*(_BYTE *)(v6 + 128))
    goto LABEL_110;
LABEL_45:
  v14 = CFGetTypeID(v5);
  if (v14 != CFDictionaryGetTypeID())
  {
    APSLogErrorAt();
    v37 = -16720;
    goto LABEL_115;
  }
LABEL_46:
  if (!*(_QWORD *)(v6 + 224))
  {
    APSLogErrorAt();
    v37 = -17605;
    goto LABEL_115;
  }
  if (!*(_QWORD *)(v6 + 40))
  {
    APSLogErrorAt();
    v37 = -16726;
    goto LABEL_115;
  }
  if (v8 == v7)
  {
    if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
      LogPrintF();
    endpoint_partiallyResetActivationState(v6 + 136);
    v18 = endpoint_isInLocalStereoPairPersistentConnection();
    DerivedStorage = v38;
    if (!v4 && v18)
    {
      endpoint_stopMediaRemoteAndMetadataServices((uint64_t)v3, *(_QWORD *)(v6 + 192));
      v19 = *(const void **)(v6 + 192);
      if (v19)
      {
        CFRelease(v19);
        *(_QWORD *)(v6 + 192) = 0;
      }
      v20 = *(const void **)(v6 + 184);
      if (v20)
      {
        CFRelease(v20);
        *(_QWORD *)(v6 + 184) = 0;
      }
    }
    goto LABEL_71;
  }
  if (v5)
  {
    ActivationOptions = endpoint_readActivationOptions(v5, v6 + 136);
    DerivedStorage = v38;
    if (ActivationOptions)
      goto LABEL_113;
    v16 = FigCFEqual();
  }
  else
  {
    v16 = 0;
    DerivedStorage = v38;
  }
  if (endpoint_shouldOnlyBeActivatedAsPartOfCluster() && !*(_BYTE *)(v6 + 250))
  {
    APSLogErrorAt();
    v37 = -72277;
    goto LABEL_78;
  }
  ActivationOptions = endpoint_ensureSharedContextCreated((uint64_t)v3, v4, v5, v16);
  if (ActivationOptions)
  {
LABEL_113:
    v37 = ActivationOptions;
    goto LABEL_78;
  }
  MetadataSourceAndCommandSinkIfNeeded = endpoint_createMetadataSourceAndCommandSinkIfNeeded((uint64_t)v3, v4);
  if (MetadataSourceAndCommandSinkIfNeeded)
  {
    v37 = MetadataSourceAndCommandSinkIfNeeded;
    APSLogErrorAt();
    goto LABEL_78;
  }
LABEL_71:
  if ((v4 & 4) == (v7 & 4))
    goto LABEL_77;
  v21 = *(const __CFSet **)(v6 + 312);
  if ((v4 & 4) == 0)
  {
    if (v21)
      CFSetApplyFunction(v21, (CFSetApplierFunction)endpoint_unsubscribePlaybackSession, v3);
    goto LABEL_77;
  }
  if (v21
    || (Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]),
        (*(_QWORD *)(v6 + 312) = Mutable) != 0))
  {
LABEL_77:
    v37 = 0;
    goto LABEL_78;
  }
  APSLogErrorAt();
  v37 = -16721;
LABEL_78:
  if (v3)
    CFRetain(v3);
  v23 = *(const void **)(v6 + 448);
  if (v23)
    CFRetain(v23);
  LODWORD(v44) = v37;
  v24 = *(CFTypeRef *)(v6 + 288);
  if (v24)
    v24 = CFRetain(v24);
  *((_QWORD *)&v44 + 1) = v24;
  if (v5)
    v25 = CFRetain(v5);
  else
    v25 = 0;
  *(_QWORD *)&v42 = v25;
  v26 = *(const void **)(v6 + 224);
  if (v26)
    CFRetain(v26);
  v27 = *(const void **)(v6 + 240);
  if (v27)
    CFRetain(v27);
  v28 = *(_QWORD *)(v6 + 40);
  v29 = CFGetAllocator(v3);
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(v28);
  v31 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (v31)
    v31(CMBaseObject, CFSTR("TransportDevice"), v29, &v40);
  *((_QWORD *)&v40 + 1) = APEndpointDescriptionCopyDebugString(*(_QWORD *)(v6 + 40));
  v32 = *(CFTypeRef *)(v6 + 184);
  if (v32)
    v32 = CFRetain(v32);
  *(_QWORD *)&v41 = v32;
  v33 = *(CFTypeRef *)(v6 + 192);
  if (v33)
    v33 = CFRetain(v33);
  *((_QWORD *)&v41 + 1) = v33;
  if (v36)
    v34 = CFRetain(v36);
  else
    v34 = 0;
  *((_QWORD *)&v42 + 1) = v34;
  v43 = v39;
  APSDispatchAsyncFHelper();
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v35 = *(const void **)(a1 + 16);
  if (v35)
    CFRelease(v35);
}

uint64_t apEndpoint_BorrowScreen()
{
  uint64_t DerivedStorage;
  const __CFDictionary *v1;
  uint64_t Value;
  void (*v3)(uint64_t, _QWORD, _QWORD, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  if (gLogCategory_APEndpoint <= 40 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (*(_BYTE *)(DerivedStorage + 128))
  {
    APSLogErrorAt();
    Value = 4294950573;
    goto LABEL_13;
  }
  if (*(_DWORD *)(DerivedStorage + 152) != 2)
    goto LABEL_12;
  if (!*(_BYTE *)(DerivedStorage + 248))
    goto LABEL_12;
  v1 = *(const __CFDictionary **)(DerivedStorage + 168);
  if (!v1)
    goto LABEL_12;
  Value = (uint64_t)CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E0CA48A0]);
  if (Value)
  {
    v3 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v3)
      v3(Value, 0, 0, 0);
LABEL_12:
    Value = 0;
  }
LABEL_13:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  return Value;
}

uint64_t apEndpoint_UnborrowScreen()
{
  uint64_t DerivedStorage;
  const __CFDictionary *v1;
  uint64_t Value;
  void (*v3)(uint64_t, _QWORD, _QWORD, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  if (gLogCategory_APEndpoint <= 40 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (*(_BYTE *)(DerivedStorage + 128))
  {
    APSLogErrorAt();
    Value = 4294950573;
    goto LABEL_13;
  }
  if (*(_DWORD *)(DerivedStorage + 152) != 2)
    goto LABEL_12;
  if (!*(_BYTE *)(DerivedStorage + 248))
    goto LABEL_12;
  v1 = *(const __CFDictionary **)(DerivedStorage + 168);
  if (!v1)
    goto LABEL_12;
  Value = (uint64_t)CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E0CA48A0]);
  if (Value)
  {
    v3 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v3)
      v3(Value, 0, 0, 0);
LABEL_12:
    Value = 0;
  }
LABEL_13:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  return Value;
}

uint64_t apEndpoint_DuckAudio()
{
  const void *FigEndpoint;
  uint64_t DerivedStorage;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v3;
  const void *TypedValue;
  const __CFString *v5;
  unsigned int v7;

  v7 = 0;
  FigEndpoint = (const void *)FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = Mutable;
    CFStringGetTypeID();
    TypedValue = (const void *)CFDictionaryGetTypedValue();
    if (CFEqual(TypedValue, (CFTypeRef)*MEMORY[0x1E0CA3970]))
    {
      v5 = CFSTR("duckAudio");
    }
    else
    {
      if (!CFEqual(TypedValue, (CFTypeRef)*MEMORY[0x1E0CA3978]))
      {
        v7 = -16720;
        goto LABEL_27;
      }
      v5 = CFSTR("unduckAudio");
    }
    if (FigCFDictionaryGetDoubleIfPresent())
    {
      v7 = CFDictionarySetDouble();
      if (v7)
        goto LABEL_27;
    }
    if (FigCFDictionaryGetDoubleIfPresent())
    {
      v7 = CFDictionarySetDouble();
      if (v7)
        goto LABEL_27;
    }
    if (!endpoint_isInLocalCluster())
      goto LABEL_26;
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
    v7 = apEndpoint_sendCommandInternal(FigEndpoint, v5, v3);
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
    if (!v7)
    {
      if (gLogCategory_APEndpoint > 50)
        goto LABEL_28;
      if (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())
        goto LABEL_21;
      goto LABEL_26;
    }
    if (gLogCategory_APEndpoint <= 90)
    {
      if (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize())
LABEL_21:
        LogPrintF();
LABEL_26:
      if (v7)
        goto LABEL_27;
LABEL_28:
      CFRelease(v3);
      return v7;
    }
LABEL_27:
    APSLogErrorAt();
    goto LABEL_28;
  }
  APSLogErrorAt();
  return 4294950575;
}

uint64_t apEndpoint_CreateRemoteControlSession(const void *a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return endpoint_createCommChannelInternal(a1, a2, a3, 0);
}

uint64_t apEndpoint_SendData(const void *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  const __CFDictionary *v11;
  const void *Value;
  const void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void (*v16)(const void *, uint64_t, void (*)(int, uint64_t, uint64_t), _QWORD *);
  int v17;
  int v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  if (!a2)
  {
    APSLogErrorAt();
    v18 = -16720;
LABEL_16:
    v17 = 1;
    goto LABEL_8;
  }
  v11 = *(const __CFDictionary **)(DerivedStorage + 336);
  if (!v11)
  {
    APSLogErrorAt();
    v18 = -16726;
    goto LABEL_16;
  }
  Value = CFDictionaryGetValue(v11, a2);
  if (!Value)
  {
    APSLogErrorAt();
    v18 = -16725;
    goto LABEL_16;
  }
  v13 = Value;
  v14 = malloc_type_calloc(1uLL, 0x28uLL, 0x10E0040139F2759uLL);
  if (!v14)
  {
    APSLogErrorAt();
    v18 = -16721;
    goto LABEL_16;
  }
  v15 = v14;
  *v14 = CFRetain(a1);
  v15[1] = CFRetain(a2);
  v15[2] = a4;
  v15[3] = a5;
  v16 = *(void (**)(const void *, uint64_t, void (*)(int, uint64_t, uint64_t), _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v16)
    v16(v13, a3, apEndpoint_rcsSendMessageCompletion, v15);
  v17 = 0;
  v18 = 0;
LABEL_8:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  if (a4 && v17)
    APEndpointCallRCSendDataCompletionAsync(a1, a2, v18, *(dispatch_queue_t *)DerivedStorage, a4, a5);
  return 0;
}

uint64_t apEndpoint_CloseCommChannel(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const __CFDictionary *v4;
  const void *Value;
  const void *v6;
  uint64_t (*v7)(const void *);
  uint64_t v8;

  FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  if (!a2)
    goto LABEL_14;
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v4 = *(const __CFDictionary **)(DerivedStorage + 336);
  if (!v4)
  {
LABEL_14:
    APSLogErrorAt();
    v8 = 4294950576;
    goto LABEL_13;
  }
  Value = CFDictionaryGetValue(v4, a2);
  if (!Value)
  {
    APSLogErrorAt();
    v8 = 4294950571;
    goto LABEL_13;
  }
  v6 = Value;
  v7 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v7)
  {
    v8 = 4294954514;
LABEL_12:
    APSLogErrorAt();
    goto LABEL_13;
  }
  v8 = v7(v6);
  if ((_DWORD)v8)
    goto LABEL_12;
LABEL_13:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  return v8;
}

uint64_t apEndpoint_AcquireAndCopyResource(uint64_t a1, uint64_t a2, const __CFDictionary *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  const __CFDictionary *v12;
  const void *Value;
  CFTypeRef v14;

  FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  if (*(_DWORD *)(DerivedStorage + 152) == 2)
  {
    if (FigCFEqual())
    {
      v7 = CMBaseObjectGetDerivedStorage();
      if (a3 && (v8 = v7, (v9 = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA3718])) != 0))
      {
        v10 = v9;
        if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
          LogPrintF();
        v12 = *(const __CFDictionary **)(v8 + 168);
        if (v12 && (Value = CFDictionaryGetValue(v12, v10)) != 0 && (v14 = CFRetain(Value)) != 0)
        {
          v11 = 0;
          *a4 = v14;
        }
        else
        {
          APSLogErrorAt();
          v11 = 4294950571;
        }
      }
      else
      {
        APSLogErrorAt();
        v11 = 4294950576;
      }
    }
    else
    {
      if (gLogCategory_APEndpoint <= 90 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
        LogPrintF();
      v11 = 4294950570;
    }
  }
  else
  {
    v11 = 4294949690;
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  return v11;
}

uint64_t apEndpoint_RelinquishResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;

  FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpoint <= 50 && (gLogCategory_APEndpoint != -1 || _LogCategory_Initialize()))
    LogPrintF();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 120));
  if (*(_DWORD *)(DerivedStorage + 152) != 2)
  {
    v5 = 4294949690;
LABEL_13:
    APSLogErrorAt();
    goto LABEL_9;
  }
  if (!a3)
  {
    v5 = 4294950576;
    goto LABEL_13;
  }
  if (!FigCFEqual())
  {
    v5 = 4294950570;
    goto LABEL_13;
  }
  v5 = 0;
LABEL_9:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 120));
  return v5;
}

void apEndpoint_rcsSendMessageCompletion(int a1, uint64_t a2, uint64_t a3)
{
  dispatch_queue_t *DerivedStorage;
  uint64_t v6;
  const void *v7;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
    APEndpointCallRCSendDataCompletionAsync(*(CFTypeRef *)a3, *(CFTypeRef *)(a3 + 8), a1, *DerivedStorage, v6, *(_QWORD *)(a3 + 24));
  if (*(_QWORD *)a3)
    CFRelease(*(CFTypeRef *)a3);
  v7 = *(const void **)(a3 + 8);
  if (v7)
    CFRelease(v7);
  free((void *)a3);
}

uint64_t APEndpointStreamScreenCreate(const __CFAllocator *a1, const __CFDictionary *a2, CFTypeRef cf, unint64_t a4, const void *a5, const void *a6, const void *a7, CFTypeRef *a8)
{
  CFTypeID v15;
  CFTypeID v16;
  const void *Value;
  unint64_t v18;
  CFTypeID v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v25)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  const __CFAllocator *v26;
  uint64_t v27;
  const void *ValueAtIndex;
  uint64_t v29;
  int v30;
  uint64_t v31;
  CFTypeRef v32;
  CFTypeRef v33;
  NSObject *v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  CFTypeRef v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  __int128 v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, const __CFString *, const __CFAllocator *, _BYTE *);
  int v48;
  double v49;
  int CFPreferenceNumberWithDefault;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  const void *v57;
  const void *v58;
  CFTypeID v59;
  const __CFDictionary *v60;
  const void *v61;
  int v62;
  const void *v63;
  const void *v64;
  CFTypeID v65;
  const void *v66;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v68;
  uint64_t v69;
  const void *v70;
  const void *v71;
  CFTypeID v72;
  const void *v73;
  const void *v74;
  unint64_t v75;
  CFTypeID v76;
  const void *v77;
  const void *v78;
  unint64_t v79;
  CFTypeID v80;
  const void *v81;
  const void *v82;
  const void *v83;
  CFTypeID v84;
  const void *v85;
  const void *v86;
  const void *v87;
  CFTypeID v88;
  const void *v89;
  const void *v90;
  const void *v91;
  CFTypeID v92;
  const void *v93;
  int v94;
  uint64_t v95;
  uint64_t inited;
  int v97;
  uint64_t v98;
  __CFDictionary *VirtualDisplayActivationOptions;
  const void *v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t);
  CFTypeRef *v104;
  const __CFDictionary *theDict;
  _QWORD handler[5];
  int v108;
  uint64_t v109;
  CFTypeRef v110;
  CFTypeRef v111;
  CFArrayRef theArray;
  CFTypeRef v113;
  unsigned __int8 v114;
  CFTypeRef cfa;
  char label[64];
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  theArray = 0;
  v113 = 0;
  v110 = 0;
  v111 = 0;
  v109 = 0x3FF0000000000000;
  v108 = 0;
  if (!cf || (v15 = CFGetTypeID(cf), v15 != CFStringGetTypeID()))
  {
    v31 = 4294950536;
LABEL_258:
    APSLogErrorAt();
    goto LABEL_32;
  }
  if (!a5 || (v16 = CFGetTypeID(a5), v16 != APEndpointDescriptionGetTypeID()))
  {
    v31 = 4294950536;
    goto LABEL_258;
  }
  if (!a8)
  {
    v31 = 4294950536;
    goto LABEL_258;
  }
  if (!a7)
  {
    v31 = 4294950536;
    goto LABEL_258;
  }
  theDict = a2;
  if (a2)
  {
    Value = CFDictionaryGetValue(a2, CFSTR("TransportStream"));
    if (Value)
    {
      v18 = (unint64_t)Value;
      v19 = CFGetTypeID(Value);
      v20 = v19 == FigTransportStreamGetTypeID();
      a2 = theDict;
      if (v20)
        v21 = v18;
      else
        v21 = 0;
    }
    else
    {
      v21 = 0;
    }
    FigCFDictionaryGetDoubleIfPresent();
    FigCFDictionaryGetInt32IfPresent();
    CFDictionaryGetValue(a2, CFSTR("LogPrefix"));
  }
  else
  {
    v21 = 0;
  }
  if (!(a4 | v21))
  {
    v31 = 4294950536;
    goto LABEL_258;
  }
  if (a4 && v21)
  {
    v31 = 4294950536;
    goto LABEL_258;
  }
  v104 = a8;
  FigEndpointStreamGetClassID();
  v22 = CMDerivedObjectCreate();
  if ((_DWORD)v22)
  {
    v31 = v22;
    goto LABEL_258;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  SNPrintF();
  *(_QWORD *)DerivedStorage = dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 16) = os_transaction_create();
  *(_QWORD *)(DerivedStorage + 480) = dispatch_queue_create("APEndpointStreamScreen.stats", 0);
  SNPrintF();
  *(_QWORD *)(DerivedStorage + 96) = dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 264) = v109;
  *(_DWORD *)(DerivedStorage + 272) = v108;
  *(_QWORD *)(DerivedStorage + 8) = CFRetain(cf);
  *(_QWORD *)(DerivedStorage + 56) = CFRetain(a5);
  *(_QWORD *)(DerivedStorage + 40) = CFStringCreateF();
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 56));
  v25 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v25)
  {
    v31 = 4294954514;
    goto LABEL_30;
  }
  v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v27 = v25(CMBaseObject, CFSTR("DisplayDescriptionArray"), *MEMORY[0x1E0C9AE00], &theArray);
  if ((_DWORD)v27)
  {
    v31 = v27;
    goto LABEL_30;
  }
  if (!theArray || CFArrayGetCount(theArray) <= 0)
  {
    APSLogErrorAt();
    v31 = 4294950536;
    goto LABEL_32;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
  if (!ValueAtIndex)
  {
    v31 = 4294950536;
LABEL_270:
    APSLogErrorAt();
    goto LABEL_32;
  }
  v29 = (uint64_t)ValueAtIndex;
  if (!a6)
  {
    *(_QWORD *)(DerivedStorage + 72) = CFRetain(ValueAtIndex);
    v30 = 110;
    goto LABEL_36;
  }
  *(_QWORD *)(DerivedStorage + 72) = CFRetain(a6);
  APEndpointDisplayDescriptionCopyProperty(v29, (uint64_t)CFSTR("UUID"), (uint64_t)v26, (uint64_t)&v111);
  if (!v111)
  {
    v31 = 4294950536;
    goto LABEL_270;
  }
  APEndpointDisplayDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 72), (uint64_t)CFSTR("UUID"), (uint64_t)v26, (uint64_t)&v110);
  if (FigCFEqual())
    v30 = 110;
  else
    v30 = 111;
LABEL_36:
  *(_DWORD *)(DerivedStorage + 88) = v30;
  if (a4)
    v32 = CFRetain((CFTypeRef)a4);
  else
    v32 = 0;
  *(_QWORD *)(DerivedStorage + 48) = v32;
  if (v21)
    v33 = CFRetain((CFTypeRef)v21);
  else
    v33 = 0;
  *(_QWORD *)(DerivedStorage + 128) = v33;
  v34 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)DerivedStorage);
  *(_QWORD *)(DerivedStorage + 200) = v34;
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 0x40000000;
  handler[2] = __APEndpointStreamScreenCreate_block_invoke;
  handler[3] = &__block_descriptor_tmp_38;
  handler[4] = v113;
  dispatch_source_set_event_handler(v34, handler);
  dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 200), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 200));
  *(_QWORD *)(DerivedStorage + 64) = CFRetain(a7);
  v35 = CMBaseObjectGetDerivedStorage();
  if (theDict)
    CFDictionaryGetValue(theDict, CFSTR("EventRecorder"));
  v36 = *(const void **)(v35 + 1128);
  if (v36)
  {
    CFRelease(v36);
    *(_QWORD *)(v35 + 1128) = 0;
  }
  v37 = APSEventRecorderCreate();
  if (!(_DWORD)v37)
  {
    APSEventRecorderAddSignPostForEvent();
    APSEventRecorderAddSignPostForEvent();
    *(_QWORD *)(DerivedStorage + 1136) = dispatch_queue_create("APEndpointStreamScreen.%{ptr}.RTC", 0);
    *(_QWORD *)(DerivedStorage + 1144) = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
    v38 = v113;
    v39 = (_BYTE *)CMBaseObjectGetDerivedStorage();
    v40 = v39;
    v114 = 0;
    if (v39[24])
    {
      APSLogErrorAt();
      v31 = 4294950534;
      goto LABEL_272;
    }
    if (v39[25])
      goto LABEL_237;
    LODWORD(cfa) = 0;
    v39[380] = APSGetFBOPropertyInt64() != 0;
    v41 = *((_QWORD *)v40 + 6);
    if (v41)
      LODWORD(v41) = APSGetFBOPropertyInt64();
    *((_DWORD *)v40 + 293) = v41;
    v40[378] = APSGetFBOPropertyInt64() != 0;
    v40[388] = APSGetFBOPropertyInt64() != 0;
    v40[389] = APDemoManagerIsDemoSession(*((_QWORD *)v40 + 7), *((_QWORD *)v40 + 6));
    v40[390] = 0;
    if (v40[378])
      v42 = APSCarPlayScreenLatencyMs();
    else
      v42 = APSScreenLatencyMs();
    *((_DWORD *)v40 + 291) = v42;
    v43 = APSScreenMediaPresentationLatencyMs();
    if (v43 <= *((_DWORD *)v40 + 291))
      v44 = *((_DWORD *)v40 + 291);
    else
      v44 = v43;
    *((_DWORD *)v40 + 292) = v44;
    if (gLogCategory_APEndpointStreamScreen <= 40
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *((_QWORD *)v40 + 117) = MillisecondsToUpTicks();
    *((_DWORD *)v40 + 236) = 0;
    v40[948] = 0;
    v40[949] = APSGetFBOPropertyInt64() != 0;
    v40[951] = APSGetFBOPropertyInt64() != 0;
    v40[952] = 0;
    *((_QWORD *)v40 + 116) = *((_QWORD *)v40 + 5);
    *(_OWORD *)(v40 + 216) = xmmword_1C964DE60;
    v45 = *MEMORY[0x1E0C9D820];
    *(_OWORD *)(v40 + 232) = *MEMORY[0x1E0C9D820];
    *(_OWORD *)(v40 + 248) = v45;
    v46 = APEndpointDescriptionGetCMBaseObject(*((_QWORD *)v40 + 7));
    v47 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
    if (v47)
      v48 = v47(v46, CFSTR("receiverHDRCapability"), v26, v40 + 280);
    else
      v48 = -12782;
    LODWORD(cfa) = v48;
    v40[362] = 0;
    *((_WORD *)v40 + 180) = 0;
    v40[365] = 1;
    v40[366] = APSSettingsGetInt64() == 0;
    v40[320] = 0;
    v40[364] = 1;
    *(_DWORD *)(v40 + 367) = 256;
    *((_DWORD *)v40 + 93) = *((_DWORD *)v40 + 292);
    v40[363] = APSGetFBOPropertyInt64() != 0;
    *((_QWORD *)v40 + 44) = 0;
    v40[379] = 0;
    v40[950] = v40[378] == 0;
    *((_DWORD *)v40 + 96) = 0;
    *((_DWORD *)v40 + 290) = APSSettingsGetInt64();
    *((_OWORD *)v40 + 25) = xmmword_1C964DE70;
    *((_QWORD *)v40 + 52) = 0x418312D000000000;
    *((_OWORD *)v40 + 27) = xmmword_1C964DE80;
    *((_OWORD *)v40 + 28) = xmmword_1C964DE90;
    *((_QWORD *)v40 + 58) = 0;
    *((_QWORD *)v40 + 59) = 5 * UpTicksPerSecond();
    LODWORD(cfa) = 0;
    *((_DWORD *)v40 + 236) = FigGetCFPreferenceNumberWithDefault();
    if (gLogCategory_APEndpointStreamScreen <= 40
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v40[948] = FigGetCFPreferenceNumberWithDefault();
    if (gLogCategory_APEndpointStreamScreen <= 40
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v40[952] = FigGetCFPreferenceNumberWithDefault();
    if (gLogCategory_APEndpointStreamScreen <= 40
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    IsAppleInternalBuild();
    v40[953] = FigGetCFPreferenceNumberWithDefault();
    if (gLogCategory_APEndpointStreamScreen <= 40
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v40[364] = FigGetCFPreferenceNumberWithDefault();
    if (gLogCategory_APEndpointStreamScreen <= 40
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v40[365] = FigGetCFPreferenceNumberWithDefault();
    if (gLogCategory_APEndpointStreamScreen <= 40
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v40[366] = FigGetCFPreferenceNumberWithDefault();
    if (gLogCategory_APEndpointStreamScreen <= 40
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    FigGetCFPreferenceDoubleWithDefault();
    *((double *)v40 + 54) = v49;
    if (v49 > 0.0
      && gLogCategory_APEndpointStreamScreen <= 40
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
    *((_DWORD *)v40 + 113) = CFPreferenceNumberWithDefault;
    if (CFPreferenceNumberWithDefault >= 1
      && gLogCategory_APEndpointStreamScreen <= 40
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v51 = FigGetCFPreferenceNumberWithDefault();
    *((_DWORD *)v40 + 112) = v51;
    if (gLogCategory_APEndpointStreamScreen <= 40)
    {
      if (gLogCategory_APEndpointStreamScreen != -1
        || (v52 = _LogCategory_Initialize(), v51 = *((_DWORD *)v40 + 112), v52))
      {
        LogPrintF();
        v51 = *((_DWORD *)v40 + 112);
      }
    }
    *((_DWORD *)v40 + 114) = v51;
    *((_DWORD *)v40 + 115) = v51;
    FigGetCFPreferenceDoubleWithDefault();
    *((_QWORD *)v40 + 51) = v53;
    if (gLogCategory_APEndpointStreamScreen <= 40
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    FigGetCFPreferenceDoubleWithDefault();
    *((_QWORD *)v40 + 52) = v54;
    if (gLogCategory_APEndpointStreamScreen <= 40
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v40[368] = FigGetCFPreferenceNumberWithDefault();
    if (gLogCategory_APEndpointStreamScreen <= 40
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v55 = FigGetCFPreferenceNumberWithDefault();
    *((_DWORD *)v40 + 93) = v55;
    if (v55 >= 1
      && gLogCategory_APEndpointStreamScreen <= 40
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (v40[378])
    {
      v56 = FigGetCFPreferenceNumberWithDefault();
      *((_DWORD *)v40 + 96) = v56;
      if (v56 >= 1
        && gLogCategory_APEndpointStreamScreen <= 40
        && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    v57 = (const void *)APSSettingsCopyValue();
    v58 = v57;
    if ((_DWORD)cfa || !v57)
    {
      v60 = theDict;
      if (!v57)
        goto LABEL_143;
    }
    else
    {
      v59 = CFGetTypeID(v57);
      v20 = v59 == CFStringGetTypeID();
      v60 = theDict;
      if (v20)
      {
        v61 = (const void *)*((_QWORD *)v40 + 35);
        *((_QWORD *)v40 + 35) = v58;
        CFRetain(v58);
        if (v61)
          CFRelease(v61);
        v60 = theDict;
        if (gLogCategory_APEndpointStreamScreen <= 50
          && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
    }
    CFRelease(v58);
LABEL_143:
    LODWORD(cfa) = 0;
    v62 = FigGetCFPreferenceNumberWithDefault();
    if (v62 != *((_DWORD *)v40 + 293))
    {
      *((_DWORD *)v40 + 293) = v62;
      if (gLogCategory_APEndpointStreamScreen <= 40
        && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (!v40[378])
        *((_DWORD *)v40 + 291) = APSScreenLatencyMs();
    }
    if (IsAppleInternalBuild())
    {
      v63 = (const void *)APSSettingsCopyValue();
      if (v63)
      {
        v64 = v63;
        v65 = CFGetTypeID(v63);
        if (v65 == CFStringGetTypeID())
        {
          v66 = (const void *)*((_QWORD *)v40 + 49);
          *((_QWORD *)v40 + 49) = v64;
          CFRetain(v64);
          if (v66)
            CFRelease(v66);
          if (gLogCategory_APEndpointStreamScreen <= 40
            && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        CFRelease(v64);
        v60 = theDict;
      }
    }
    CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
    v68 = CMBufferQueueCreate(v26, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)v40 + 13);
    if ((_DWORD)v68)
    {
      v31 = v68;
      goto LABEL_265;
    }
    v69 = CMBufferQueueInstallTriggerWithIntegerThreshold(*((CMBufferQueueRef *)v40 + 13), (CMBufferQueueTriggerCallback)screenstream_signalDataAvailable, v40, 11, 0, (CMBufferQueueTriggerToken *)v40 + 14);
    if ((_DWORD)v69)
    {
      v31 = v69;
      goto LABEL_265;
    }
    if (!v60)
    {
LABEL_208:
      v94 = v114;
      v95 = CMBaseObjectGetDerivedStorage();
      cfa = 0;
      inited = screenstream_initDisplayInfo(v95);
      if (!(_DWORD)inited)
      {
        v97 = *(_DWORD *)(v95 + 384);
        if (v97 < 1)
          v98 = APVirtualDisplaySinkCreate(v38, *(const void **)(v95 + 104), &cfa);
        else
          v98 = APVirtualDisplayTestSinkCreate(v97, v38, *(const void **)(v95 + 104), &cfa);
        v31 = v98;
        if ((_DWORD)v98)
        {
          APSLogErrorAt();
        }
        else
        {
          if (!*(_QWORD *)(v95 + 144))
            FigVirtualDisplaySourceScreenGetCurrent();
          if (v94 && *(_BYTE *)(v95 + 367))
          {
            if (gLogCategory_APEndpointStreamScreen <= 50
              && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            *(_QWORD *)(v95 + 352) = 1;
          }
          VirtualDisplayActivationOptions = screenstream_createVirtualDisplayActivationOptions();
          v100 = (const void *)FigVirtualDisplaySessionActivateWithSourceAndSink();
          *(_QWORD *)(v95 + 160) = v100;
          if (v100)
          {
            CFRetain(v100);
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterAddListener();
            v101 = *(_QWORD *)(v95 + 160);
            v102 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
            if (v102)
            {
              v31 = v102(v101);
              if (!(_DWORD)v31)
                goto LABEL_228;
            }
            else
            {
              v31 = 4294954514;
            }
            APSLogErrorAt();
LABEL_228:
            if (!VirtualDisplayActivationOptions)
              goto LABEL_230;
            goto LABEL_229;
          }
          APSLogErrorAt();
          v31 = 4294950535;
          if (VirtualDisplayActivationOptions)
LABEL_229:
            CFRelease(VirtualDisplayActivationOptions);
        }
LABEL_230:
        if (cfa)
          CFRelease(cfa);
        if (!(_DWORD)v31)
        {
          v40[25] = 1;
          if (gLogCategory_APEndpointStreamScreen >= 51)
          {
LABEL_241:
            v31 = 0;
            *v104 = v113;
            v113 = 0;
            goto LABEL_242;
          }
          if (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize())
            LogPrintF();
LABEL_237:
          if (gLogCategory_APEndpointStreamScreen <= 50
            && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          goto LABEL_241;
        }
        goto LABEL_265;
      }
      v31 = inited;
      APSLogErrorAt();
LABEL_265:
      APSLogErrorAt();
      goto LABEL_272;
    }
    v70 = CFDictionaryGetValue(v60, CFSTR("clientPID"));
    if (v70)
    {
      v71 = v70;
      v72 = CFGetTypeID(v70);
      if (v72 != CFNumberGetTypeID())
        goto LABEL_271;
      v73 = (const void *)*((_QWORD *)v40 + 24);
      *((_QWORD *)v40 + 24) = v71;
      CFRetain(v71);
      if (v73)
        goto LABEL_168;
    }
    else
    {
      v73 = (const void *)*((_QWORD *)v40 + 24);
      *((_QWORD *)v40 + 24) = 0;
      if (v73)
LABEL_168:
        CFRelease(v73);
    }
    v74 = CFDictionaryGetValue(theDict, CFSTR("ScreenSource"));
    v75 = (unint64_t)v74;
    if (v74)
    {
      v76 = CFGetTypeID(v74);
      if (v76 != FigVirtualDisplaySourceGetTypeID())
        goto LABEL_271;
      v77 = (const void *)*((_QWORD *)v40 + 18);
      *((_QWORD *)v40 + 18) = v75;
      CFRetain((CFTypeRef)v75);
      if (v77)
        goto LABEL_172;
    }
    else
    {
      v77 = (const void *)*((_QWORD *)v40 + 18);
      *((_QWORD *)v40 + 18) = 0;
      if (v77)
LABEL_172:
        CFRelease(v77);
    }
    v78 = CFDictionaryGetValue(theDict, CFSTR("ScreenProcessor"));
    v79 = (unint64_t)v78;
    if (v78)
    {
      v80 = CFGetTypeID(v78);
      if (v80 != FigVirtualDisplayProcessorGetTypeID())
        goto LABEL_271;
      v81 = (const void *)*((_QWORD *)v40 + 19);
      *((_QWORD *)v40 + 19) = v79;
      CFRetain((CFTypeRef)v79);
      if (!v81)
        goto LABEL_177;
    }
    else
    {
      v81 = (const void *)*((_QWORD *)v40 + 19);
      *((_QWORD *)v40 + 19) = 0;
      if (!v81)
        goto LABEL_177;
    }
    CFRelease(v81);
LABEL_177:
    v82 = CFDictionaryGetValue(theDict, CFSTR("ScreenUsageMode"));
    if (v82)
    {
      v83 = v82;
      v84 = CFGetTypeID(v82);
      if (v84 != CFStringGetTypeID())
        goto LABEL_271;
      v85 = (const void *)*((_QWORD *)v40 + 21);
      *((_QWORD *)v40 + 21) = v83;
      CFRetain(v83);
    }
    else
    {
      v85 = (const void *)*((_QWORD *)v40 + 21);
      *((_QWORD *)v40 + 21) = 0;
    }
    if (v85)
      CFRelease(v85);
    if (v75 | v79)
      goto LABEL_194;
    v86 = CFDictionaryGetValue(theDict, CFSTR("ProtectionOptions"));
    if (!v86)
    {
      v89 = (const void *)*((_QWORD *)v40 + 39);
      *((_QWORD *)v40 + 39) = 0;
      if (!v89)
      {
LABEL_194:
        v90 = CFDictionaryGetValue(theDict, CFSTR("ScreenOverrides"));
        if (v90
          && (v91 = v90, v92 = CFGetTypeID(v90), v92 == CFDictionaryGetTypeID())
          && IsAppleInternalBuild())
        {
          v93 = (const void *)*((_QWORD *)v40 + 22);
          *((_QWORD *)v40 + 22) = v91;
          CFRetain(v91);
        }
        else
        {
          v93 = (const void *)*((_QWORD *)v40 + 22);
          *((_QWORD *)v40 + 22) = 0;
        }
        if (v93)
          CFRelease(v93);
        FigCFDictionaryGetBooleanIfPresent();
        FigCFDictionaryGetBooleanIfPresent();
        if (gLogCategory_APEndpointStreamScreen <= 50
          && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        FigCFDictionaryGetBooleanIfPresent();
        goto LABEL_208;
      }
LABEL_193:
      CFRelease(v89);
      goto LABEL_194;
    }
    v87 = v86;
    v88 = CFGetTypeID(v86);
    if (v88 == CFDictionaryGetTypeID())
    {
      v89 = (const void *)*((_QWORD *)v40 + 39);
      *((_QWORD *)v40 + 39) = v87;
      CFRetain(v87);
      if (!v89)
        goto LABEL_194;
      goto LABEL_193;
    }
LABEL_271:
    APSLogErrorAt();
    v31 = 4294950536;
LABEL_272:
    if (gLogCategory_APEndpointStreamScreen <= 90
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    screenstream_cleanup();
    goto LABEL_30;
  }
  v31 = v37;
  APSLogErrorAt();
LABEL_30:
  APSLogErrorAt();
LABEL_32:
  if (gLogCategory_APEndpointStreamScreen <= 90
    && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_242:
  if (theArray)
    CFRelease(theArray);
  if (v110)
    CFRelease(v110);
  if (v111)
    CFRelease(v111);
  if (v113)
    CFRelease(v113);
  return v31;
}

uint64_t APEndpointDescriptionCopyProperty_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  uint64_t result;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  CMBaseObject = APEndpointDescriptionGetCMBaseObject(a1);
  result = CMBaseObjectGetVTable();
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 48);
  if (v9)
    return v9(CMBaseObject, a2, a3, a4);
  return result;
}

uint64_t APEndpointStreamScreenRestartBitstream(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, const __CFString *, _QWORD);

  v2 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v2)
    return v2(a1, CFSTR("ScreenRestartBitstream"), 0);
  else
    return 4294954514;
}

uint64_t APEndpointStreamScreenSetRecordingState(uint64_t a1, int a2)
{
  uint64_t (*v4)(uint64_t, const __CFString *, _QWORD);
  const __CFString *v5;

  v4 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v4)
    return 4294954514;
  if (a2)
    v5 = CFSTR("ScreenSetRecordingStateOn");
  else
    v5 = CFSTR("ScreenSetRecordingStateOff");
  return v4(a1, v5, 0);
}

uint64_t APEndpointStreamScreenUpdateDisplayInfo(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, const __CFString *, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v4)
    return v4(a1, CFSTR("UpdateDisplayInfo"), a2);
  else
    return 4294954514;
}

void screenstream_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  NSObject *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  const void *v20;
  void *v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamScreen <= 50
    && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  screenstream_cleanup();
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 1128);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 1128) = 0;
  }
  v3 = *(NSObject **)(DerivedStorage + 1136);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 1136) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 1144);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 1144) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 144);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 144) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 152);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 152) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 168);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 168) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 176);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 176) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 192);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 192) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 48);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 128);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 128) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 80);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 72);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  v14 = *(const void **)(DerivedStorage + 56);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v15 = *(const void **)(DerivedStorage + 64);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v16 = *(const void **)(DerivedStorage + 40);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v17 = *(NSObject **)(DerivedStorage + 200);
  if (v17)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 200));
    dispatch_release(v17);
    *(_QWORD *)(DerivedStorage + 200) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v18 = *(NSObject **)(DerivedStorage + 96);
  if (v18)
  {
    dispatch_release(v18);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  v19 = *(NSObject **)(DerivedStorage + 480);
  if (v19)
  {
    dispatch_release(v19);
    *(_QWORD *)(DerivedStorage + 480) = 0;
  }
  v20 = *(const void **)(DerivedStorage + 32);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v21 = *(void **)(DerivedStorage + 16);
  if (v21)
  {
    os_release(v21);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
}

__CFString *screenstream_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  __CFString *v4;
  const char *v5;
  const char *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4 = Mutable;
  v5 = "yes";
  if (*(_BYTE *)(DerivedStorage + 25))
    v6 = "yes";
  else
    v6 = "no";
  if (!*(_BYTE *)(DerivedStorage + 26))
    v5 = "no";
  CFStringAppendFormat(Mutable, 0, CFSTR("<APEndpointStreamScreen %p '%@', activated: %s resumed: %s >"), a1, *(_QWORD *)(DerivedStorage + 8), v6, v5);
  return v4;
}

uint64_t screenstream_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, __CFDictionary **a4)
{
  uint64_t DerivedStorage;
  const __CFString **v8;
  const __CFString *v9;
  uint64_t Int64;
  uint64_t v11;
  uint64_t result;
  __CFDictionary *Mutable;
  double *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  NSObject *v22;
  _QWORD block[7];
  int v24;
  __int128 v25;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamScreen <= 30
    && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4820]))
  {
    v8 = (const __CFString **)MEMORY[0x1E0CA48A0];
LABEL_10:
    v9 = *v8;
LABEL_11:
    Int64 = (uint64_t)CFRetain(v9);
LABEL_12:
    v11 = Int64;
LABEL_13:
    result = 0;
    *a4 = (__CFDictionary *)v11;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA47C8]))
  {
    v8 = (const __CFString **)MEMORY[0x1E0CA4870];
    if (*(_DWORD *)(DerivedStorage + 88) != 110)
      v8 = (const __CFString **)MEMORY[0x1E0CA4868];
    goto LABEL_10;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4788]))
  {
    v9 = *(const __CFString **)(DerivedStorage + 80);
    goto LABEL_11;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC66F0]))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v14 = (double *)MEMORY[0x1E0C9D820];
    if (*(_QWORD *)(DerivedStorage + 352) == 1)
    {
      v25 = *MEMORY[0x1E0C9D820];
      v24 = 0;
      APSScreenGetMediaPresentationParams();
      if (gLogCategory_APEndpointStreamScreen <= 50
        && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      FigCFDictionarySetCGSize();
      if (*(_BYTE *)(DerivedStorage + 369))
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC6658], *(const void **)(DerivedStorage + 304));
      goto LABEL_45;
    }
    if (*(_BYTE *)(DerivedStorage + 370) && *(int *)(DerivedStorage + 1172) <= 0)
    {
      FigCFDictionarySetCGSize();
      if (gLogCategory_APEndpointStreamScreen > 40
        || gLogCategory_APEndpointStreamScreen == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_45;
      }
    }
    else
    {
      FigCFDictionarySetCGSize();
      if (gLogCategory_APEndpointStreamScreen > 40
        || gLogCategory_APEndpointStreamScreen == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_45;
      }
    }
    LogPrintF();
LABEL_45:
    FigCFDictionarySetInt32();
    if (*(double *)(DerivedStorage + 248) != *v14 || *(double *)(DerivedStorage + 256) != v14[1])
      FigCFDictionarySetCGSize();
    if (*(_BYTE *)(DerivedStorage + 378))
    {
      FigCFDictionarySetDouble();
      if (*(int *)(DerivedStorage + 272) >= 1)
        FigCFDictionarySetInt32();
    }
    v15 = *(const void **)(DerivedStorage + 288);
    if (v15)
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC6638], v15);
    v16 = *(const void **)(DerivedStorage + 208);
    if (v16)
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC6630], v16);
    v17 = *(const void **)(DerivedStorage + 296);
    if (v17)
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC6650], v17);
    v18 = (const void *)*MEMORY[0x1E0C9AE50];
    v19 = (const void *)*MEMORY[0x1E0C9AE40];
    if (*(_BYTE *)(DerivedStorage + 361))
      v20 = (const void *)*MEMORY[0x1E0C9AE50];
    else
      v20 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC6660], v20);
    if (*(_BYTE *)(DerivedStorage + 362))
      v21 = v18;
    else
      v21 = v19;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC6670], v21);
    result = 0;
    *a4 = Mutable;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC6720]))
  {
    Int64 = (uint64_t)screenstream_copyNetworkInfo(DerivedStorage);
    goto LABEL_12;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4790]) || CFEqual(a2, CFSTR("IsPlaying")))
  {
    v8 = (const __CFString **)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(DerivedStorage + 26))
      v8 = (const __CFString **)MEMORY[0x1E0C9AE40];
    goto LABEL_10;
  }
  if (CFEqual(a2, CFSTR("EndpointStreamShowInfo")))
  {
    Int64 = (uint64_t)screenstreamudp_copyShowInfo(DerivedStorage);
    goto LABEL_12;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA47B0]))
  {
    Int64 = (uint64_t)screenstream_copyOutputLatency(DerivedStorage);
    goto LABEL_12;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4828]))
  {
    v9 = *(const __CFString **)(DerivedStorage + 336);
    if (v9)
      goto LABEL_11;
LABEL_68:
    v11 = 0;
    goto LABEL_13;
  }
  if (CFEqual(a2, CFSTR("screenStreamType")))
  {
    v9 = CFSTR("screenStreamTCP");
    goto LABEL_11;
  }
  if (CFEqual(a2, CFSTR("transportGlitchCount")))
  {
    atomic_load((unsigned int *)(DerivedStorage + 1176));
    Int64 = CFNumberCreateInt64();
    goto LABEL_12;
  }
  if (CFEqual(a2, CFSTR("usageMode")))
  {
    v9 = *(const __CFString **)(DerivedStorage + 184);
    if (v9)
      goto LABEL_11;
    goto LABEL_68;
  }
  if (CFEqual(a2, CFSTR("RTCStats")))
  {
    v22 = *(NSObject **)(DerivedStorage + 1136);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __screenstream_CopyProperty_block_invoke;
    block[3] = &__block_descriptor_tmp_66_2;
    block[4] = a4;
    block[5] = a3;
    block[6] = DerivedStorage;
    dispatch_sync(v22, block);
    if (*a4)
    {
      return 0;
    }
    else
    {
      APSLogErrorAt();
      return 4294950535;
    }
  }
  else
  {
    if (gLogCategory_APEndpointStreamScreen <= 30
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 4294954512;
  }
}

uint64_t screenstream_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  _QWORD *DerivedStorage;
  CFTypeID v6;
  NSObject *v7;
  const void *v8;
  CFTypeID v9;
  _QWORD block[6];

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamScreen <= 30
    && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC6708]))
  {
    if (a3)
    {
      v6 = CFGetTypeID(a3);
      if (v6 == CFArrayGetTypeID())
      {
        v7 = DerivedStorage[60];
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = __screenstream_SetProperty_block_invoke;
        block[3] = &__block_descriptor_tmp_78_0;
        block[4] = DerivedStorage;
        block[5] = a3;
        dispatch_sync(v7, block);
        return 0;
      }
    }
    goto LABEL_26;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC6700]))
    return 0;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4828]))
  {
    v8 = (const void *)DerivedStorage[42];
    DerivedStorage[42] = a3;
    if (!a3)
    {
LABEL_18:
      if (v8)
        CFRelease(v8);
      return 0;
    }
LABEL_17:
    CFRetain(a3);
    goto LABEL_18;
  }
  if (CFEqual(a2, CFSTR("ExtraStreamOptions")))
  {
    if (!a3 || (v9 = CFGetTypeID(a3), v9 != CFDictionaryGetTypeID()))
    {
LABEL_26:
      APSLogErrorAt();
      return 4294950536;
    }
    v8 = (const void *)DerivedStorage[15];
    DerivedStorage[15] = a3;
    goto LABEL_17;
  }
  if (gLogCategory_APEndpointStreamScreen <= 30
    && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return 4294954512;
}

void screenstream_cleanup()
{
  uint64_t DerivedStorage;
  const void *v1;
  void *v2;
  opaqueCMBufferQueueTriggerToken *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  __int128 v13;
  const void *v14;
  NSObject *v15;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  screenstream_stopStatsTimer();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterRemoveListener();
  if (*(_QWORD *)(DerivedStorage + 160))
  {
    FigVirtualDisplaySessionDeactivate();
    v1 = *(const void **)(DerivedStorage + 160);
    if (v1)
    {
      CFRelease(v1);
      *(_QWORD *)(DerivedStorage + 160) = 0;
    }
  }
  screenstream_teardownTransportStream();
  v2 = *(void **)(DerivedStorage + 104);
  if (v2)
  {
    v3 = *(opaqueCMBufferQueueTriggerToken **)(DerivedStorage + 112);
    if (!v3
      || (CMBufferQueueRemoveTrigger((CMBufferQueueRef)v2, v3),
          *(_QWORD *)(DerivedStorage + 112) = 0,
          (v2 = *(void **)(DerivedStorage + 104)) != 0))
    {
      CFRelease(v2);
      *(_QWORD *)(DerivedStorage + 104) = 0;
    }
  }
  v4 = *(const void **)(DerivedStorage + 208);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 208) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 288);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 288) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 296);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 296) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 304);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 304) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 312);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 312) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 328);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 328) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 336);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 336) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 280);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 280) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 392);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 392) = 0;
  }
  v13 = *MEMORY[0x1E0C9D820];
  *(_OWORD *)(DerivedStorage + 216) = *MEMORY[0x1E0C9D820];
  *(_OWORD *)(DerivedStorage + 232) = v13;
  *(_OWORD *)(DerivedStorage + 248) = v13;
  v14 = *(const void **)(DerivedStorage + 120);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
  v15 = *(NSObject **)(DerivedStorage + 480);
  if (v15)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __screenstream_cleanup_block_invoke;
    block[3] = &__block_descriptor_tmp_26_2;
    block[4] = DerivedStorage;
    dispatch_sync(v15, block);
  }
}

void screenstream_stopStatsTimer()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 200))
  {
    v1 = DerivedStorage;
    if (gLogCategory_APEndpointStreamScreen <= 30
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    dispatch_source_set_timer(*(dispatch_source_t *)(v1 + 200), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  }
}

void screenstream_virtualDisplaySourceTerminated(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamScreen <= 50
    && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  screenstream_handleFatalError(a2, -16768, CFSTR("display source terminated"));
}

void screenstream_teardownTransportStream()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, _QWORD);
  CFAllocatorRef *v4;
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  uint64_t CMBaseObject;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, __CFDictionary *);
  const void *v13;
  CFTypeRef *v14;
  uint64_t v15;
  uint64_t v16;
  __CFDictionary *v17;
  NSObject *v18;
  __int128 v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  __int128 v24;
  __int128 block;
  __int128 v26;
  uint64_t v27;
  __CFDictionary *v28;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 136))
  {
    v1 = DerivedStorage;
    if (gLogCategory_APEndpointStreamScreen <= 40
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v2 = *(_QWORD *)(v1 + 136);
    v3 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
    if (v3)
      v3(v2, 0, 0);
    v4 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (*(_QWORD *)(v1 + 48))
    {
      if (*(_BYTE *)(v1 + 378))
      {
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!Mutable)
        {
          APSLogErrorAt();
          return;
        }
        v6 = Mutable;
        CFDictionarySetValue(Mutable, CFSTR("uuid"), *(const void **)(v1 + 296));
      }
      else
      {
        v6 = 0;
      }
      CMBaseObject = FigTransportStreamGetCMBaseObject();
      if (CMBaseObject)
      {
        v8 = CMBaseObject;
        v9 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v9)
          v9(v8);
      }
      v10 = *(_QWORD *)(v1 + 48);
      v11 = *(unsigned int *)(v1 + 88);
      v12 = *(void (**)(uint64_t, uint64_t, __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v12)
        v12(v10, v11, v6);
    }
    else
    {
      v6 = 0;
    }
    v13 = *(const void **)(v1 + 136);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(v1 + 136) = 0;
    }
    v14 = (CFTypeRef *)(v1 + 504);
    v15 = MEMORY[0x1E0C809B0];
    if (*(_BYTE *)(v1 + 953) && *(_QWORD *)(v1 + 1104))
    {
      *(_QWORD *)&block = MEMORY[0x1E0C809B0];
      *((_QWORD *)&block + 1) = 0x40000000;
      *(_QWORD *)&v26 = __sbpd_logHistograms_block_invoke;
      *((_QWORD *)&v26 + 1) = &__block_descriptor_tmp_43_1;
      v27 = v1 + 504;
      CFDictionaryApplyBlock();
    }
    v16 = CMBaseObjectGetDerivedStorage();
    v17 = CFDictionaryCreateMutable(*v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    mach_absolute_time();
    UpTicksToMilliseconds();
    CFDictionarySetInt64();
    CFDictionarySetValue(v17, CFSTR("sessionType"), CFSTR("Screen"));
    if (*(_QWORD *)(v16 + 1104))
    {
      *(_QWORD *)&block = v15;
      *((_QWORD *)&block + 1) = 0x40000000;
      *(_QWORD *)&v26 = __sbpd_reportHistograms_block_invoke;
      *((_QWORD *)&v26 + 1) = &__block_descriptor_tmp_52_1;
      v27 = (uint64_t)v17;
      CFDictionaryApplyBlock();
    }
    if (gLogCategory_APEndpointStreamScreen <= 30
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v18 = *(NSObject **)(v16 + 1136);
    *(_QWORD *)&block = v15;
    *((_QWORD *)&block + 1) = 0x40000000;
    *(_QWORD *)&v26 = __screenstream_collectRTCStats_block_invoke;
    *((_QWORD *)&v26 + 1) = &__block_descriptor_tmp_51_0;
    v27 = v16;
    v28 = v17;
    dispatch_sync(v18, &block);
    if (v17)
      CFRelease(v17);
    v19 = *(_OWORD *)(v1 + 944);
    block = *(_OWORD *)(v1 + 928);
    v26 = v19;
    v20 = *(const void **)(v1 + 912);
    if (v20)
    {
      CFRelease(v20);
      *(_QWORD *)(v1 + 912) = 0;
    }
    v21 = *(const void **)(v1 + 960);
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(v1 + 960) = 0;
    }
    if (*v14)
    {
      CFRelease(*v14);
      *v14 = 0;
    }
    v22 = *(const void **)(v1 + 512);
    if (v22)
    {
      CFRelease(v22);
      *(_QWORD *)(v1 + 512) = 0;
    }
    v23 = *(const void **)(v1 + 1104);
    if (v23)
      CFRelease(v23);
    bzero((void *)(v1 + 504), 0x270uLL);
    v24 = v26;
    *(_OWORD *)(v1 + 928) = block;
    *(_OWORD *)(v1 + 944) = v24;
    if (gLogCategory_APEndpointStreamScreen <= 40
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      atomic_load((unsigned int *)(v1 + 1176));
      LogPrintF();
    }
    if (v6)
      CFRelease(v6);
  }
}

void __screenstream_cleanup_block_invoke(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(*(_QWORD *)(a1 + 32) + 488);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 488) = 0;
  }
}

void screenstream_handleFatalError(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD v10[5];
  _QWORD block[6];
  int v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamScreen <= 50
    && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a3)
    CFRetain(a3);
  v7 = *(NSObject **)(DerivedStorage + 96);
  v8 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __screenstream_handleFatalError_block_invoke;
  block[3] = &__block_descriptor_tmp_32;
  v12 = a2;
  block[4] = a3;
  block[5] = a1;
  dispatch_async(v7, block);
  CFRetain(a1);
  v9 = *(NSObject **)DerivedStorage;
  v10[0] = v8;
  v10[1] = 0x40000000;
  v10[2] = __screenstream_handleFatalError_block_invoke_2;
  v10[3] = &__block_descriptor_tmp_33_0;
  v10[4] = a1;
  dispatch_async(v9, v10);
}

void __screenstream_handleFatalError_block_invoke(uint64_t a1)
{
  __CFDictionary *Mutable;
  const void *v3;
  const void *v4;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  v3 = *(const void **)(a1 + 32);
  if (v3)
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA46E8], v3);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (Mutable)
    CFRelease(Mutable);
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __screenstream_handleFatalError_block_invoke_2(uint64_t a1)
{
  screenstream_dissociateInternal(*(const void **)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void screenstream_dissociateInternal(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamScreen <= 50
    && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*(_BYTE *)(DerivedStorage + 24))
  {
    v3 = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(v3 + 24))
    {
      APSLogErrorAt();
    }
    else
    {
      v4 = v3;
      if (*(_BYTE *)(v3 + 25))
      {
        screenstream_cleanup(a1);
        *(_WORD *)(v4 + 25) = 0;
        if (gLogCategory_APEndpointStreamScreen <= 50
          && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
    }
    *(_BYTE *)(DerivedStorage + 24) = 1;
    CFRetain(a1);
    v5 = *(NSObject **)(DerivedStorage + 96);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __screenstream_dissociateInternal_block_invoke;
    block[3] = &__block_descriptor_tmp_35_3;
    block[4] = a1;
    dispatch_async(v5, block);
  }
}

void __screenstream_dissociateInternal_block_invoke(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t __sbpd_logHistograms_block_invoke()
{
  uint64_t result;

  if (gLogCategory_APEndpointStreamScreen <= 50)
  {
    if (gLogCategory_APEndpointStreamScreen != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

void __screenstream_collectRTCStats_block_invoke(uint64_t a1)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(a1 + 32) + 1144), *(const void **)(a1 + 40));
}

void __sbpd_reportHistograms_block_invoke(uint64_t a1, const void *a2)
{
  const void *v4;
  const void *v5;

  v4 = (const void *)APSStatsHistogramCopyAsRTCString();
  if (v4)
  {
    v5 = v4;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, v4);
    CFRelease(v5);
  }
}

CFMutableDictionaryRef screenstream_copyNetworkInfo(uint64_t a1)
{
  uint64_t v2;
  CFMutableDictionaryRef Mutable;
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  double v6;
  double v7;
  double v8;
  int v9;
  NSObject *v10;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  CFTypeRef cf;
  _QWORD block[5];

  cf = 0;
  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!*(_QWORD *)(a1 + 136))
  {
    APSLogErrorAt();
    return Mutable;
  }
  CMBaseObject = FigTransportStreamGetCMBaseObject();
  v5 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v5)
    v5(CMBaseObject, *MEMORY[0x1E0CF1FA0], v2, &cf);
  v6 = *(double *)(a1 + 432);
  if (v6 <= 0.0)
  {
    if (*(_BYTE *)(a1 + 378) && *(_BYTE *)(a1 + 380))
    {
      if (*(double *)(a1 + 344) > 27648000.0)
        v7 = 25.0;
      else
        v7 = 17.5;
      if (gLogCategory_APEndpointStreamScreen <= 20
        && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v6 = v7 * 1000000.0;
    }
    else
    {
      if (FigCFDictionaryGetDoubleIfPresent())
      {
        *(_QWORD *)(a1 + 424) = 0;
        v8 = 0.0 * *(double *)(a1 + 400);
      }
      else
      {
        v8 = 0.0;
      }
      if (v8 <= *(double *)(a1 + 408))
        v8 = *(double *)(a1 + 408);
      if (v8 >= *(double *)(a1 + 416))
        v6 = *(double *)(a1 + 416);
      else
        v6 = v8;
    }
  }
  FigCFDictionarySetInt32();
  *(double *)(a1 + 440) = v6;
  v9 = *(_DWORD *)(a1 + 452);
  if (v9 >= 1)
    goto LABEL_24;
  if (!*(_BYTE *)(a1 + 378) || !*(_BYTE *)(a1 + 380))
  {
    v12 = *(_DWORD *)(a1 + 456);
    v13 = *(_DWORD *)(a1 + 448);
    if (v12 > v13)
    {
      *(_DWORD *)(a1 + 456) = v13;
      v12 = v13;
    }
    if (v6 >= 500000.0)
    {
      if (v6 >= 1000000.0)
      {
        if (v6 >= 4000000.0)
          v14 = 60;
        else
          v14 = 30;
      }
      else
      {
        v14 = 20;
      }
    }
    else
    {
      v14 = 10;
    }
    if (v14 >= v13)
      v14 = v13;
    v15 = v14 <= v12;
    if (v14 >= v12)
    {
      v19 = *(_DWORD *)(a1 + 460);
      if (v15)
      {
        if (v19 != v12)
        {
          if (gLogCategory_APEndpointStreamScreen <= 20)
          {
            if (gLogCategory_APEndpointStreamScreen != -1
              || (v22 = _LogCategory_Initialize(), v12 = *(_DWORD *)(a1 + 456), v22))
            {
              LogPrintF();
              v12 = *(_DWORD *)(a1 + 456);
            }
          }
          *(_DWORD *)(a1 + 460) = v12;
        }
        goto LABEL_80;
      }
      if (v19 <= v12)
      {
        if (v12 >= 20)
          v20 = 30;
        else
          v20 = 20;
        if (v12 <= 29)
          v21 = v20;
        else
          v21 = 60;
        if (v21 >= v13)
          v18 = v13;
        else
          v18 = v21;
        if (gLogCategory_APEndpointStreamScreen > 20
          || gLogCategory_APEndpointStreamScreen == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_77;
        }
LABEL_69:
        LogPrintF();
LABEL_77:
        *(_DWORD *)(a1 + 460) = v18;
        *(_QWORD *)(a1 + 464) = mach_absolute_time();
      }
    }
    else if (*(_DWORD *)(a1 + 460) >= v12)
    {
      if (v12 <= 30)
        v16 = 20;
      else
        v16 = 30;
      if (v12 >= 21)
        v17 = v16;
      else
        v17 = 10;
      if (v17 >= v13)
        v18 = v13;
      else
        v18 = v17;
      if (gLogCategory_APEndpointStreamScreen > 20
        || gLogCategory_APEndpointStreamScreen == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_77;
      }
      goto LABEL_69;
    }
LABEL_80:
    if (*(_DWORD *)(a1 + 460) != *(_DWORD *)(a1 + 456)
      && mach_absolute_time() - *(_QWORD *)(a1 + 464) >= *(_QWORD *)(a1 + 472))
    {
      if (gLogCategory_APEndpointStreamScreen <= 40
        && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_DWORD *)(a1 + 456) = *(_DWORD *)(a1 + 460);
    }
    goto LABEL_25;
  }
  v9 = *(_DWORD *)(a1 + 448);
LABEL_24:
  *(_DWORD *)(a1 + 456) = v9;
  *(_DWORD *)(a1 + 460) = v9;
LABEL_25:
  v10 = *(NSObject **)(a1 + 480);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __screenstream_updateFPS_block_invoke;
  block[3] = &__block_descriptor_tmp_76_2;
  block[4] = a1;
  dispatch_sync(v10, block);
  FigCFDictionarySetInt32();
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetDouble();
  if (cf)
    CFRelease(cf);
  return Mutable;
}

CFDictionaryRef screenstream_copyOutputLatency(uint64_t a1)
{
  uint64_t v1;
  const __CFAllocator *v2;
  CMTime v4;
  CMTime v5;

  v5 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v1 = 1164;
  if (*(_QWORD *)(a1 + 352) == 1)
    v1 = 1168;
  CMTimeMake(&v5, *(int *)(a1 + v1), 1000);
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = v5;
  return CMTimeCopyAsDictionary(&v4, v2);
}

uint64_t __screenstream_updateFPS_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 496) = *(_DWORD *)(*(_QWORD *)(result + 32) + 456);
  return result;
}

uint64_t screenstream_Suspend(const void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  NSObject **DerivedStorage;
  NSObject *v9;
  _QWORD block[9];

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamScreen <= 50
    && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  v9 = *DerivedStorage;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __screenstream_Suspend_block_invoke;
  block[3] = &__block_descriptor_tmp_83_0;
  block[4] = a1;
  block[5] = a2;
  block[6] = a3;
  block[7] = DerivedStorage;
  block[8] = a4;
  dispatch_async(v9, block);
  return 0;
}

uint64_t screenstream_Resume(const void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  NSObject **DerivedStorage;
  NSObject *v9;
  _QWORD block[9];

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamScreen <= 50
    && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  v9 = *DerivedStorage;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __screenstream_Resume_block_invoke;
  block[3] = &__block_descriptor_tmp_88;
  block[4] = a1;
  block[5] = a2;
  block[6] = a3;
  block[7] = DerivedStorage;
  block[8] = a4;
  dispatch_async(v9, block);
  return 0;
}

uint64_t screenstream_Dissociate(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *(NSObject **)CMBaseObjectGetDerivedStorage();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __screenstream_Dissociate_block_invoke;
  block[3] = &__block_descriptor_tmp_153_0;
  block[4] = a1;
  dispatch_sync(v2, block);
  return 0;
}

uint64_t screenstream_Control(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject **DerivedStorage;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD block[7];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[7];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;

  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v18 = 0;
  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    v6 = *DerivedStorage;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 0x40000000;
    v14[2] = __screenstream_Control_block_invoke;
    v14[3] = &unk_1E82707E0;
    v14[4] = &v15;
    v14[5] = a1;
    v14[6] = a3;
    v7 = v14;
LABEL_11:
    dispatch_sync(v6, v7);
    goto LABEL_12;
  }
  if (FigCFEqual())
  {
    v6 = *DerivedStorage;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 0x40000000;
    v13[2] = __screenstream_Control_block_invoke_2;
    v13[3] = &unk_1E8270808;
    v13[4] = &v15;
    v13[5] = a1;
    v7 = v13;
    goto LABEL_11;
  }
  if (FigCFEqual())
  {
    v6 = *DerivedStorage;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 0x40000000;
    v12[2] = __screenstream_Control_block_invoke_3;
    v12[3] = &unk_1E8270830;
    v12[4] = &v15;
    v12[5] = a1;
    v7 = v12;
    goto LABEL_11;
  }
  if (FigCFEqual())
  {
    v6 = *DerivedStorage;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = __screenstream_Control_block_invoke_4;
    v11[3] = &unk_1E8270858;
    v11[4] = &v15;
    v11[5] = a1;
    v7 = v11;
    goto LABEL_11;
  }
  if (FigCFEqual())
  {
    v6 = *DerivedStorage;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __screenstream_Control_block_invoke_5;
    block[3] = &unk_1E8270880;
    block[4] = &v15;
    block[5] = a1;
    block[6] = a3;
    v7 = block;
    goto LABEL_11;
  }
  if (gLogCategory_APEndpointStreamScreen <= 90
    && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *((_DWORD *)v16 + 6) = -16760;
LABEL_12:
  v8 = *((unsigned int *)v16 + 6);
  _Block_object_dispose(&v15, 8);
  return v8;
}

void screenStream_setResumedAndNotifiyObservers(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  int v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  os_signpost_id_t v9;
  const char *v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD block[6];
  char v16;
  BOOL v17;
  uint8_t buf[16];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(unsigned __int8 *)(DerivedStorage + 26);
  *(_BYTE *)(DerivedStorage + 26) = a2;
  if (*(_DWORD *)(DerivedStorage + 88) != 111)
  {
    APSEventRecorderRecordEvent();
    if (!a2)
      goto LABEL_17;
    v12 = LogCategoryCopyOSLogHandle();
    v7 = (void *)v12;
    if (v12)
      v13 = v12;
    else
      v13 = MEMORY[0x1E0C81028];
    if (!os_signpost_enabled(v13))
      goto LABEL_15;
    *(_WORD *)buf = 0;
    v10 = "AP_SIGNPOST_SCREEN_DISPLAYING";
    v11 = v13;
    v9 = 722862680;
    goto LABEL_14;
  }
  APSEventRecorderRecordEvent();
  if (!a2)
    goto LABEL_17;
  v6 = LogCategoryCopyOSLogHandle();
  v7 = (void *)v6;
  if (v6)
    v8 = v6;
  else
    v8 = MEMORY[0x1E0C81028];
  if (os_signpost_enabled(v8))
  {
    *(_WORD *)buf = 0;
    v9 = 722862684;
    v10 = "AP_SIGNPOST_ALTERNATESCREEN_DISPLAYING";
    v11 = v8;
LABEL_14:
    _os_signpost_emit_with_name_impl(&dword_1C943B000, v11, OS_SIGNPOST_EVENT, v9, v10, (const char *)&unk_1C965D452, buf, 2u);
  }
LABEL_15:
  if (v7)
    os_release(v7);
LABEL_17:
  CFRetain(a1);
  v14 = *(NSObject **)(DerivedStorage + 96);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __screenStream_setResumedAndNotifiyObservers_block_invoke;
  block[3] = &__block_descriptor_tmp_85_1;
  v16 = a2;
  v17 = v5 != a2;
  block[4] = a1;
  block[5] = DerivedStorage;
  dispatch_async(v14, block);
}

void __screenStream_setResumedAndNotifiyObservers_block_invoke(uint64_t a1)
{
  __CFDictionary *Mutable;
  __CFDictionary *v3;
  const void **v4;

  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (*(_BYTE *)(a1 + 49))
  {
    APEndpointStreamUpdateNowPlayingTransaction(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 48), &gLogCategory_APEndpointStreamScreen, (const void **)(*(_QWORD *)(a1 + 40) + 32));
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v3 = Mutable;
    v4 = (const void **)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(a1 + 48))
      v4 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(Mutable, CFSTR("IsPlaying"), *v4);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFRelease(v3);
  }
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void __screenstream_ensureTransportStream_block_invoke(uint64_t a1, const void *a2, const void *a3)
{
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, a3);
}

CMBlockBufferRef screenstream_dequeueAndProcessSampleBuffer(const void *a1, int a2, _DWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  opaqueCMSampleBuffer *v7;
  opaqueCMSampleBuffer *v8;
  const void **v9;
  int AttachmentCGRect;
  int v11;
  CFTypeRef v12;
  const void *v13;
  uint64_t v14;
  CFTypeID v15;
  int v16;
  _DWORD *v17;
  int v18;
  CFDataRef v19;
  CGSize size;
  int v21;
  CGSize v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  CFTypeID v25;
  CGFloat v26;
  int v27;
  const opaqueCMFormatDescription *FormatDescription;
  double v29;
  CGFloat v30;
  unint64_t Dimensions;
  unint64_t v32;
  const __CFDictionary *Extension;
  const __CFDictionary *v34;
  CFTypeID v35;
  const __CFData *Value;
  CFTypeID v37;
  const __CFData *v38;
  CFTypeID v39;
  CFDataRef Data;
  int BlockBufferWithCFDataNoCopy;
  const void *v42;
  const __CFAllocator *v43;
  OSStatus v44;
  float *v45;
  float *v46;
  char v47;
  float v48;
  OSStatus v49;
  OSStatus v50;
  OSStatus v51;
  CMBlockBufferRef v52;
  const void *v53;
  unint64_t v54;
  const __CFArray *SampleAttachmentsArray;
  const __CFArray *v56;
  CFIndex Count;
  CFIndex v58;
  CFIndex v59;
  int v60;
  const char *v61;
  CFTypeRef v62;
  CFTypeRef v63;
  int v64;
  CFTypeRef v65;
  CFTypeRef v66;
  CFTypeID v67;
  CFTypeID v68;
  int v69;
  CFIndex v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(uint64_t, uint64_t, CMBlockBufferRef *);
  uint64_t v87;
  CMBlockBufferRef *v88;
  CMBlockBufferRef *v89;
  CMBlockBufferRef v90;
  __int128 v91;
  uint64_t v92;
  char v93;
  _WORD *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  const __CFAllocator *v98;
  const __CFAllocator *v99;
  OSStatus v100;
  OpaqueCMBlockBuffer *v101;
  OSStatus DataPointer;
  OSStatus v103;
  size_t v104;
  size_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  CMBlockBufferRef v109;
  CMBlockBufferRef v110;
  char *v111;
  uint64_t (*v112)(uint64_t, CMBlockBufferRef, CMBlockBufferRef, char *, size_t, char *, size_t, void *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  int v113;
  OSStatus appended;
  OSStatus v115;
  CMBlockBufferRef v116;
  OSStatus v117;
  size_t DataLength;
  uint64_t v119;
  int v120;
  unint64_t v121;
  int v122;
  uint64_t v123;
  int v125;
  CGRect v126;
  _DWORD *v128;
  CGSize v129;
  CGPoint v130;
  opaqueCMSampleBuffer *v131;
  OpaqueCMBlockBuffer *DataBuffer;
  CMBlockBufferRef v133;
  CMBlockBufferRef theBuffer[3];
  unsigned int valuePtr;
  CMBlockBufferRef v136;
  CMBlockBufferRef v137;
  CMBlockBufferRef v138;
  uint64_t v139;
  uint64_t v140;
  CMBlockBufferRef targetBBuf;
  size_t totalLengthOut;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  CMBlockBufferRef blockBufferOut;
  CGRect block;
  uint64_t v147;

  v133 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 1124))
    return v133;
  v6 = DerivedStorage;
  if (!a2)
  {
    v7 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(DerivedStorage + 104));
    if (!v7)
      return v133;
    v8 = v7;
    v9 = (const void **)(v6 + 504);
    v131 = v7;
    if (CMSampleBufferGetDataBuffer(v7))
    {
      v136 = 0;
      v137 = 0;
      DataBuffer = CMSampleBufferGetDataBuffer(v8);
      v129 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
      v130 = (CGPoint)*MEMORY[0x1E0C9D648];
      block.origin = (CGPoint)*MEMORY[0x1E0C9D648];
      block.size = v129;
      valuePtr = 0;
      AttachmentCGRect = sbufGetAttachmentCGRect(v8, (const __CFString *)*MEMORY[0x1E0CA4E78], &block);
      if (AttachmentCGRect)
      {
        v16 = AttachmentCGRect;
        APSLogErrorAt();
        goto LABEL_213;
      }
      v128 = a3;
      if (CGRectEqualToRect(block, *(CGRect *)(v6 + 536)))
      {
        v11 = 0;
      }
      else
      {
        if (gLogCategory_APEndpointStreamScreen <= 40
          && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
        {
          v126 = block;
          LogPrintF();
        }
        size = block.size;
        *(CGPoint *)(v6 + 536) = block.origin;
        *(CGSize *)(v6 + 552) = size;
        v11 = 1;
      }
      block.origin = v130;
      block.size = v129;
      v21 = sbufGetAttachmentCGRect(v8, (const __CFString *)*MEMORY[0x1E0CA4E30], &block);
      if (v21)
      {
        v16 = v21;
        goto LABEL_249;
      }
      if (!CGRectEqualToRect(block, *(CGRect *)(v6 + 568)))
      {
        if (gLogCategory_APEndpointStreamScreen <= 40
          && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
        {
          v126 = block;
          LogPrintF();
        }
        v22 = block.size;
        *(CGPoint *)(v6 + 568) = block.origin;
        *(CGSize *)(v6 + 584) = v22;
        v11 = 1;
      }
      v23 = (const __CFNumber *)CMGetAttachment(v8, (CFStringRef)*MEMORY[0x1E0CA4E90], 0);
      if (v23 && (v24 = v23, v25 = CFGetTypeID(v23), v25 == CFNumberGetTypeID()))
        CFNumberGetValue(v24, kCFNumberSInt32Type, &valuePtr);
      else
        APSLogErrorAt();
      *(_QWORD *)&v26 = valuePtr;
      if (valuePtr != *(_DWORD *)(v6 + 600))
      {
        if (gLogCategory_APEndpointStreamScreen <= 40)
        {
          if (gLogCategory_APEndpointStreamScreen != -1
            || (v27 = _LogCategory_Initialize(), *(_QWORD *)&v26 = valuePtr, v27))
          {
            v126.origin.x = v26;
            LogPrintF();
            LODWORD(v26) = valuePtr;
          }
        }
        *(_DWORD *)(v6 + 600) = LODWORD(v26);
        v11 = 1;
      }
      FormatDescription = CMSampleBufferGetFormatDescription(v8);
      *(_QWORD *)&v29 = CMFormatDescriptionGetMediaSubType(FormatDescription);
      if (!FormatDescription)
        goto LABEL_113;
      v30 = v29;
      if (LODWORD(v29) != 1635148593 || *(_BYTE *)(v6 + 952))
      {
        if (*(_BYTE *)(v6 + 951))
        {
          if (CMFormatDescriptionEqual(FormatDescription, *(CMFormatDescriptionRef *)(v6 + 512)))
            goto LABEL_113;
          Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(FormatDescription);
          v32 = HIDWORD(Dimensions);
          if (gLogCategory_APEndpointStreamScreen <= 40
            && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
          {
            *(_QWORD *)&v126.origin.y = Dimensions;
            *(_QWORD *)&v126.size.width = HIDWORD(Dimensions);
            v126.origin.x = v30;
            LogPrintF();
          }
          v42 = *(const void **)(v6 + 512);
          *(_QWORD *)(v6 + 512) = FormatDescription;
          CFRetain(FormatDescription);
          if (v42)
            CFRelease(v42);
          *(double *)(v6 + 520) = (double)(int)Dimensions;
          goto LABEL_111;
        }
        if (gLogCategory_APEndpointStreamScreen <= 90
          && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
        {
          v126.origin.x = v30;
          LogPrintF();
        }
        goto LABEL_113;
      }
      Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(FormatDescription, (CFStringRef)*MEMORY[0x1E0CA2240]);
      if (!Extension)
        goto LABEL_103;
      v34 = Extension;
      v35 = CFGetTypeID(Extension);
      if (v35 == CFDictionaryGetTypeID())
      {
        Value = (const __CFData *)CFDictionaryGetValue(v34, CFSTR("avcC"));
      }
      else
      {
        v37 = CFGetTypeID(v34);
        if (v37 != CFArrayGetTypeID())
          goto LABEL_103;
        Value = (const __CFData *)CFArrayGetValueAtIndex(v34, 0);
      }
      v38 = Value;
      if (Value)
      {
        v39 = CFGetTypeID(Value);
        if (v39 == CFDataGetTypeID())
        {
          if (!FigCFEqual())
          {
            if (gLogCategory_APEndpointStreamScreen <= 40
              && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
            {
              *(_QWORD *)&v126.origin.x = CFDataGetLength(v38);
              LogPrintF();
            }
            v53 = *v9;
            *v9 = v38;
            CFRetain(v38);
            if (v53)
            {
              CFRelease(v53);
              LODWORD(v53) = 0;
            }
            goto LABEL_104;
          }
        }
        else if (gLogCategory_APEndpointStreamScreen <= 90
               && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
        {
          *(_QWORD *)&v126.origin.x = v38;
          LogPrintF();
        }
      }
LABEL_103:
      LODWORD(v53) = 1;
LABEL_104:
      v54 = (unint64_t)CMVideoFormatDescriptionGetDimensions(FormatDescription);
      v32 = HIDWORD(v54);
      if (*(double *)(v6 + 520) != (double)(int)v54 || *(double *)(v6 + 528) != (double)SHIDWORD(v54))
      {
        if (gLogCategory_APEndpointStreamScreen <= 40
          && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
        {
          *(_QWORD *)&v126.origin.x = v54;
          *(_QWORD *)&v126.origin.y = HIDWORD(v54);
          LogPrintF();
        }
        *(double *)(v6 + 520) = (double)(int)v54;
LABEL_111:
        *(double *)(v6 + 528) = (double)(int)v32;
LABEL_112:
        v11 = 1;
        goto LABEL_113;
      }
      if (!(_DWORD)v53)
        goto LABEL_112;
LABEL_113:
      SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v8, 0);
      if (SampleAttachmentsArray)
      {
        v56 = SampleAttachmentsArray;
        Count = CFArrayGetCount(SampleAttachmentsArray);
        LOBYTE(v138) = 0;
        v58 = Count - 1;
        if (Count >= 1)
        {
          v59 = 0;
          do
          {
            CFArrayGetValueAtIndex(v56, v59);
            if (FigCFDictionaryGetBooleanIfPresent())
              break;
            v76 = v58 == v59++;
          }
          while (!v76);
          v60 = (_BYTE)v138 == 0;
LABEL_122:
          *(_BYTE *)(v6 + 1101) = v60;
          if (gLogCategory_APEndpointStreamScreen > 20)
            goto LABEL_129;
          if (gLogCategory_APEndpointStreamScreen == -1)
          {
            if (!_LogCategory_Initialize())
              goto LABEL_129;
            v60 = *(unsigned __int8 *)(v6 + 1101);
          }
          if (v60)
            v61 = "Full";
          else
            v61 = "Not";
          *(_QWORD *)&v126.origin.x = v61;
          LogPrintF();
LABEL_129:
          v62 = CMGetAttachment(v8, CFSTR("APClearScreen"), 0);
          v63 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
          v64 = v62 == (CFTypeRef)*MEMORY[0x1E0C9AE50];
          if (*(unsigned __int8 *)(v6 + 604) != v64)
          {
            *(_BYTE *)(v6 + 604) = v64;
            v11 = 1;
          }
          *(_BYTE *)(v6 + 1100) = CMGetAttachment(v8, CFSTR("APInterestingFrame"), 0) == v63;
          v65 = CMGetAttachment(v8, CFSTR("APSubmitSurfaceTimestamp"), 0);
          v66 = CMGetAttachment(v8, CFSTR("APTimestamps"), 0);
          *(_DWORD *)(v6 + 1096) = 0;
          *(_QWORD *)(v6 + 976) = 0;
          if (v65)
          {
            v67 = CFGetTypeID(v65);
            if (v67 == CFNumberGetTypeID())
              CFNumberGetValue((CFNumberRef)v65, kCFNumberSInt64Type, (void *)(v6 + 976));
          }
          if (!v66)
            goto LABEL_158;
          v68 = CFGetTypeID(v66);
          if (v68 != CFArrayGetTypeID())
            goto LABEL_158;
          v69 = CFArrayGetCount((CFArrayRef)v66);
          if (v69 < 1)
          {
            v79 = mach_absolute_time();
            LODWORD(v71) = 0;
          }
          else
          {
            v70 = 0;
            if (v69 >= 14)
              v71 = 14;
            else
              v71 = v69;
            do
            {
              CFArrayGetValueAtIndex((CFArrayRef)v66, v70);
              *(_QWORD *)(v6 + 984 + 8 * v70++) = CFGetInt64();
            }
            while (v71 != v70);
            v72 = (uint64_t *)(v6 + 984);
            v73 = v71 - 1;
            do
            {
              v75 = *v72++;
              v74 = v75;
              if (v75)
                v76 = 1;
              else
                v76 = v73 == 0;
              --v73;
            }
            while (!v76);
            v77 = (uint64_t *)(v6 + 984);
            v78 = v71;
            do
            {
              if (*v77)
                v74 = *v77;
              *v77++ = v74;
              --v78;
            }
            while (v78);
            v79 = mach_absolute_time();
            if (v71 > 0xD)
              goto LABEL_155;
          }
          *(_QWORD *)(v6 + 8 * v71 + 984) = v79;
          LODWORD(v71) = v71 + 1;
LABEL_155:
          if ((int)v71 <= 13)
          {
            *(_QWORD *)(v6 + 8 * v71 + 984) = v79;
            LODWORD(v71) = v71 + 1;
          }
          *(_DWORD *)(v6 + 1096) = v71;
LABEL_158:
          CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)theBuffer, v8);
          *(_QWORD *)(v6 + 968) = CMClockConvertHostTimeToSystemUnits((CMTime *)theBuffer);
          if (!v11 || (v80 = sbpd_createConfigBBuf(v6 + 504, &v137)) == 0)
          {
            v81 = *(_DWORD *)(v6 + 920) + CMBlockBufferGetDataLength(DataBuffer);
            v82 = (char *)malloc_type_calloc(1uLL, 0x80uLL, 0x10E98248uLL);
            *(_DWORD *)v82 = v81;
            v82[4] = 0;
            v83 = *(_QWORD *)(v6 + 968);
            v84 = *(_QWORD *)(v6 + 936);
            v139 = 0;
            v140 = 0;
            v138 = 0;
            v85 = *(_QWORD *)(v6 + 960);
            v86 = *(uint64_t (**)(uint64_t, uint64_t, CMBlockBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 16);
            if (v86)
            {
              v87 = v86(v85, v84 + v83, &v138);
              if (!(_DWORD)v87)
              {
                v88 = (CMBlockBufferRef *)(v6 + 608);
                v89 = &v138;
LABEL_169:
                v88[2] = v89[2];
                *(_OWORD *)v88 = *(_OWORD *)v89;
                v90 = v138;
                *((_QWORD *)&v91 + 1) = v140;
                *(_QWORD *)&v91 = v139;
                *((_QWORD *)v82 + 1) = v91 >> 32;
                *((_QWORD *)v82 + 5) = v90;
                *((_QWORD *)v82 + 2) = *(_QWORD *)(v6 + 976);
                *((_DWORD *)v82 + 6) = 0;
                sbpd_convertTimestampToNetworkTime(v6 + 504, *(_QWORD *)(v6 + 984), &v138);
                *((_QWORD *)&v91 + 1) = v140;
                *(_QWORD *)&v91 = v139;
                v92 = v91 >> 32;
                *((_QWORD *)v82 + 4) = v92;
                if (*(_BYTE *)(v6 + 1100))
                  v93 = 0x80;
                else
                  v93 = 0;
                v82[5] = (*(_BYTE *)(v6 + 1100) != 0) << 7;
                if (*(_BYTE *)(v6 + 1101))
                  v82[5] = v93 | 0x10;
                *((_QWORD *)v82 + 11) = v92;
                if (*(_DWORD *)(v6 + 1096))
                {
                  v94 = v82 + 96;
                  v95 = v6 + 992;
                  v96 = 1;
                  do
                  {
                    if (v96 >= *(unsigned int *)(v6 + 1096))
                      break;
                    v97 = UpTicksToMilliseconds();
                    if (v97 >= 0x10000)
                    {
                      if (gLogCategory_APEndpointStreamScreen <= 60
                        && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
                      {
                        *(_QWORD *)&v126.origin.x = v96;
                        *(_QWORD *)&v126.origin.y = v97;
                        LogPrintF();
                      }
                      LOWORD(v97) = -1;
                    }
                    *v94++ = v97;
                    ++v96;
                    v95 += 8;
                  }
                  while (v94 < (_WORD *)v82 + 64);
                }
                v98 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                v99 = (const __CFAllocator *)*MEMORY[0x1E0C9AE10];
                v100 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v82, 0x80uLL, (CFAllocatorRef)*MEMORY[0x1E0C9AE10], 0, 0, 0x80uLL, 0, &v136);
                if (!v100)
                {
                  v101 = v136;
                  v138 = 0;
                  dataPointerOut = 0;
                  blockBufferOut = 0;
                  totalLengthOut = 0;
                  lengthAtOffsetOut = 0;
                  targetBBuf = 0;
                  v8 = v131;
                  if (!*(_QWORD *)(v6 + 912))
                  {
                    a3 = v128;
                    goto LABEL_207;
                  }
                  DataPointer = CMBlockBufferGetDataPointer(v136, 0, (size_t *)&blockBufferOut, 0, (char **)&v138);
                  if (DataPointer)
                  {
                    v16 = DataPointer;
                  }
                  else
                  {
                    v103 = CMBlockBufferGetDataPointer(DataBuffer, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
                    if (!v103)
                    {
                      v104 = lengthAtOffsetOut;
                      if (lengthAtOffsetOut != totalLengthOut)
                      {
                        APSLogErrorAt();
                        v16 = -16760;
                        goto LABEL_202;
                      }
                      v105 = *(_QWORD *)(v6 + 920);
                      if (v105)
                      {
                        v106 = malloc_type_calloc(1uLL, v105, 0xF91907C4uLL);
                        v104 = lengthAtOffsetOut;
                        v107 = *(_QWORD *)(v6 + 920);
                      }
                      else
                      {
                        v107 = 0;
                        v106 = 0;
                      }
                      v108 = *(_QWORD *)(v6 + 912);
                      v109 = v138;
                      v111 = dataPointerOut;
                      v110 = blockBufferOut;
                      v112 = *(uint64_t (**)(uint64_t, CMBlockBufferRef, CMBlockBufferRef, char *, size_t, char *, size_t, void *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                      if (v112)
                      {
                        v113 = v112(v108, v109, v110, v111, v104, v111, v104, v106, v107, *(_QWORD *)&v126.origin.x, *(_QWORD *)&v126.origin.y, *(_QWORD *)&v126.size.width, *(_QWORD *)&v126.size.height);
                        if (!v113)
                        {
                          v8 = v131;
                          if (v106)
                          {
                            v16 = CMBlockBufferCreateWithMemoryBlock(v98, v106, *(_QWORD *)(v6 + 920), v99, 0, 0, *(_QWORD *)(v6 + 920), 0, &targetBBuf);
                            if (!v16)
                            {
                              appended = CMBlockBufferAppendBufferReference(DataBuffer, targetBBuf, 0, 0, 0);
                              a3 = v128;
                              if (appended)
                              {
                                v115 = appended;
                                APSLogErrorAt();
                                v16 = v115;
                              }
                              goto LABEL_203;
                            }
                            APSLogErrorAt();
                            a3 = v128;
                            goto LABEL_200;
                          }
                          v16 = 0;
LABEL_202:
                          a3 = v128;
                          goto LABEL_203;
                        }
                        v16 = v113;
                      }
                      else
                      {
                        v16 = -12782;
                      }
                      APSLogErrorAt();
                      v8 = v131;
                      a3 = v128;
                      if (!v106)
                      {
LABEL_203:
                        if (targetBBuf)
                          CFRelease(targetBBuf);
                        if (v16)
                          goto LABEL_247;
                        v101 = v136;
LABEL_207:
                        v116 = v137;
                        if (v137)
                        {
                          v117 = CMBlockBufferAppendBufferReference(v137, v101, 0, 0, 0);
                          v101 = v116;
                          if (v117)
                          {
                            v16 = v117;
LABEL_247:
                            APSLogErrorAt();
                            goto LABEL_213;
                          }
                        }
                        else
                        {
                          v136 = 0;
                          v137 = v101;
                        }
                        v16 = CMBlockBufferAppendBufferReference(v101, DataBuffer, 0, 0, 0);
                        if (!v16)
                        {
                          ++*(_DWORD *)(v6 + 1120);
                          CMBlockBufferGetDataLength(v101);
                          kdebug_trace();
                          v133 = v101;
                          v137 = 0;
                          goto LABEL_213;
                        }
                        goto LABEL_247;
                      }
LABEL_200:
                      free(v106);
                      goto LABEL_203;
                    }
                    v16 = v103;
                  }
                  APSLogErrorAt();
                  goto LABEL_202;
                }
                v16 = v100;
                APSLogErrorAt();
                free(v82);
                APSLogErrorAt();
                v8 = v131;
LABEL_250:
                a3 = v128;
LABEL_213:
                if (v136)
                  CFRelease(v136);
                v52 = v137;
                if (!v137)
                  goto LABEL_217;
                goto LABEL_216;
              }
            }
            else
            {
              v87 = 4294954514;
            }
            if (gLogCategory_APEndpointStreamScreen <= 90
              && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
            {
              *(_QWORD *)&v126.origin.x = v87;
              LogPrintF();
            }
            v89 = (CMBlockBufferRef *)(v6 + 608);
            v88 = &v138;
            goto LABEL_169;
          }
          v16 = v80;
LABEL_249:
          APSLogErrorAt();
          goto LABEL_250;
        }
      }
      else
      {
        LOBYTE(v138) = 0;
      }
      v60 = 1;
      goto LABEL_122;
    }
    v12 = CMGetAttachment(v8, CFSTR("APStats"), 0);
    if (!v12)
    {
      *(_BYTE *)(v6 + 604) = CMGetAttachment(v8, CFSTR("APClearScreen"), 0) == (CFTypeRef)*MEMORY[0x1E0C9AE50];
      *(_QWORD *)(v6 + 968) = mach_absolute_time();
      v16 = sbpd_createConfigBBuf(v6 + 504, &v133);
LABEL_217:
      if (!v16)
      {
        DataLength = CMBlockBufferGetDataLength(v133);
        mach_absolute_time();
        v119 = UpTicksToNanoseconds();
        v120 = 0;
        v121 = 0;
        v122 = *(_DWORD *)(v6 + 904);
        *(_QWORD *)(v6 + 1112) += DataLength;
        v123 = v6 + 16 * (v122 & 0xF);
        *(_QWORD *)(v123 + 648) = v119;
        *(_QWORD *)(v123 + 656) = DataLength;
        do
        {
          if ((unint64_t)(v119 - *(_QWORD *)(v6 + 16 * (((_BYTE)v122 + (_BYTE)v120) & 0xF) + 648)) > 0x773593F)
            break;
          v121 += *(_QWORD *)(v6 + 16 * (((_BYTE)v122 + (_BYTE)v120--) & 0xF) + 656);
        }
        while (v120 != -16);
        if (v121 >> 3 >= 0xC35)
          *(_QWORD *)(v6 + 640) = v119;
        *(_DWORD *)(v6 + 904) = v122 + 1;
        *a3 = 0;
LABEL_224:
        CFRelease(v8);
        return v133;
      }
      APSLogErrorAt();
      goto LABEL_235;
    }
    v13 = v12;
    v138 = 0;
    theBuffer[0] = 0;
    blockBufferOut = 0;
    mach_absolute_time();
    v14 = UpTicksToNanoseconds();
    v15 = CFGetTypeID(v13);
    if (v15 == CFDictionaryGetTypeID())
    {
      if (!*(_BYTE *)(v6 + 949))
      {
        v17 = a3;
        v18 = 0;
        v19 = 0;
        goto LABEL_65;
      }
      FigCFDictionarySetDouble();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      if (gLogCategory_APEndpointStreamScreen <= 30
        && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v13, kCFPropertyListBinaryFormat_v1_0, 0, 0);
      if (Data)
      {
        v19 = Data;
        BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
        if (BlockBufferWithCFDataNoCopy)
        {
          v16 = BlockBufferWithCFDataNoCopy;
          APSLogErrorAt();
          v8 = v131;
          goto LABEL_95;
        }
        v17 = a3;
        v18 = CMBlockBufferGetDataLength(theBuffer[0]);
        CFDictionaryGetInt64();
        sbpd_addHistogramValue(v6 + 504, CFSTR("Source Frames"));
        sbpd_addHistogramValue(v6 + 504, CFSTR("Sent Frames"));
        CFDictionaryGetInt64();
        sbpd_addHistogramValue(v6 + 504, CFSTR("Dropped Overflow Frames"));
        sbpd_addHistogramValue(v6 + 504, CFSTR("Used Bandwidth"));
        CFDictionaryGetDouble();
        sbpd_addHistogramValue(v6 + 504, CFSTR("Available Bandwidth"));
LABEL_65:
        if (*(_QWORD *)(v6 + 640) >= (unint64_t)(*(_QWORD *)(v6 + 632) + 125000000) || !*(_BYTE *)(v6 + 950))
          goto LABEL_82;
        if (gLogCategory_APEndpointStreamScreen <= 30
          && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v43 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        *(_QWORD *)&block.origin.x = MEMORY[0x1E0C809B0];
        *(_QWORD *)&block.origin.y = 0x40000000;
        *(_QWORD *)&block.size.width = __getRandomDataBlob_block_invoke;
        *(_QWORD *)&block.size.height = &__block_descriptor_tmp_150;
        v147 = 25000;
        if (getRandomDataBlob_once != -1)
          dispatch_once(&getRandomDataBlob_once, &block);
        v44 = CMBlockBufferCreateWithMemoryBlock(v43, (void *)getRandomDataBlob_blob, 0x61A8uLL, (CFAllocatorRef)*MEMORY[0x1E0C9AE20], 0, 0, 0x61A8uLL, 0, &blockBufferOut);
        if (!v44)
        {
          v18 += CMBlockBufferGetDataLength(blockBufferOut);
LABEL_82:
          v45 = (float *)malloc_type_calloc(1uLL, 0x80uLL, 0x7643909FuLL);
          v46 = v45;
          *(_DWORD *)v45 = v18;
          if (*(_BYTE *)(v6 + 949))
            v47 = 5;
          else
            v47 = 2;
          *((_BYTE *)v45 + 4) = v47;
          *((_BYTE *)v45 + 5) = *(_DWORD *)(v6 + 944);
          if (theBuffer[0])
            v48 = (float)CMBlockBufferGetDataLength(theBuffer[0]);
          else
            v48 = 0.0;
          a3 = v17;
          v46[31] = v48;
          v49 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v46, 0x80uLL, (CFAllocatorRef)*MEMORY[0x1E0C9AE10], 0, 0, 0x80uLL, 0, &v138);
          if (v49)
          {
            v16 = v49;
            APSLogErrorAt();
            free(v46);
          }
          else
          {
            if (theBuffer[0] && (v50 = CMBlockBufferAppendBufferReference(v138, theBuffer[0], 0, 0, 0)) != 0)
            {
              v16 = v50;
            }
            else
            {
              if (!blockBufferOut || (v51 = CMBlockBufferAppendBufferReference(v138, blockBufferOut, 0, 0, 0)) == 0)
              {
                v16 = 0;
                *(_QWORD *)(v6 + 632) = v14;
                *(_QWORD *)(v6 + 1112) = 0;
                *(_DWORD *)(v6 + 1120) = 0;
                v133 = v138;
                v138 = 0;
                goto LABEL_94;
              }
              v16 = v51;
            }
            APSLogErrorAt();
          }
LABEL_94:
          v8 = v131;
          if (!v19)
            goto LABEL_96;
          goto LABEL_95;
        }
        v16 = v44;
        APSLogErrorAt();
        v8 = v131;
        a3 = v17;
        if (!v19)
        {
LABEL_96:
          if (theBuffer[0])
            CFRelease(theBuffer[0]);
          if (blockBufferOut)
            CFRelease(blockBufferOut);
          v52 = v138;
          if (!v138)
            goto LABEL_217;
LABEL_216:
          CFRelease(v52);
          goto LABEL_217;
        }
LABEL_95:
        CFRelease(v19);
        goto LABEL_96;
      }
    }
    APSLogErrorAt();
    v16 = -16760;
    v8 = v131;
    goto LABEL_96;
  }
  v125 = APSSignalErrorAt();
  if (!v125)
    return v133;
  v16 = v125;
  v8 = 0;
LABEL_235:
  *(_BYTE *)(v6 + 1124) = 1;
  if (gLogCategory_APEndpointStreamScreen <= 90
    && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  screenstream_handleFatalError(a1, v16, CFSTR("sbuf processing failed"));
  if (v8)
    goto LABEL_224;
  return v133;
}

uint64_t sbpd_createConfigBBuf(uint64_t a1, CMBlockBufferRef *a2)
{
  const __CFData *v4;
  CFAllocatorRef *v5;
  size_t Length;
  uint64_t BlockBufferWithCFDataNoCopy;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  char v12;
  __int128 v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t appended;
  CMBlockBufferRef blockBufferOut;
  _QWORD v28[2];
  unsigned int v29;

  blockBufferOut = 0;
  v4 = *(const __CFData **)a1;
  v5 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v4)
  {
    Length = CFDataGetLength(v4);
    BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
    if ((_DWORD)BlockBufferWithCFDataNoCopy)
    {
      v8 = BlockBufferWithCFDataNoCopy;
      goto LABEL_32;
    }
  }
  else if (*(_QWORD *)(a1 + 8))
  {
    v9 = APSVideoFormatDescriptionCopyAsBlockBuffer();
    if ((_DWORD)v9)
    {
      v8 = v9;
      goto LABEL_32;
    }
    Length = CMBlockBufferGetDataLength(0);
  }
  else
  {
    Length = 0;
  }
  v10 = (float *)malloc_type_calloc(1uLL, 0x80uLL, 0xA70D252EuLL);
  v11 = v10;
  *(_DWORD *)v10 = Length;
  *((_BYTE *)v10 + 4) = 1;
  *((_BYTE *)v10 + 5) = *(_DWORD *)(a1 + 96);
  *((_BYTE *)v10 + 6) = 18;
  if (*(_BYTE *)(a1 + 444))
    v12 = 19;
  else
    v12 = 18;
  *((_BYTE *)v10 + 6) = v12;
  if (*(_QWORD *)(a1 + 408))
  {
    v12 |= 4u;
    *((_BYTE *)v10 + 6) = v12;
  }
  if (*(_BYTE *)(a1 + 100))
  {
    v12 |= 0x40u;
    *((_BYTE *)v10 + 6) = v12;
  }
  if (*(_QWORD *)(a1 + 8))
    *((_BYTE *)v10 + 6) = v12 | 8;
  *((_BYTE *)v10 + 7) = 1;
  sbpd_convertTimestampToNetworkTime(a1, *(_QWORD *)(a1 + 432) + *(_QWORD *)(a1 + 464), v28);
  *((_QWORD *)&v13 + 1) = v29;
  *(_QWORD *)&v13 = v28[1];
  *((_QWORD *)v11 + 1) = v13 >> 32;
  v14 = *(double *)(a1 + 16);
  v11[4] = v14;
  v15 = *(double *)(a1 + 24);
  v11[5] = v15;
  v16 = *(double *)(a1 + 32);
  v11[8] = v16;
  v17 = *(double *)(a1 + 40);
  v11[9] = v17;
  v18 = *(double *)(a1 + 48);
  v11[10] = v18;
  v19 = *(double *)(a1 + 56);
  v11[11] = v19;
  v20 = *(double *)(a1 + 64);
  v11[12] = v20;
  v21 = *(double *)(a1 + 72);
  v11[13] = v21;
  v22 = *(double *)(a1 + 80);
  v11[14] = v22;
  v23 = *(double *)(a1 + 88);
  v11[15] = v23;
  v24 = CMBlockBufferCreateWithMemoryBlock(*v5, v11, 0x80uLL, (CFAllocatorRef)*MEMORY[0x1E0C9AE10], 0, 0, 0x80uLL, 0, &blockBufferOut);
  if ((_DWORD)v24)
  {
    v8 = v24;
    APSLogErrorAt();
    free(v11);
  }
  else
  {
    if (*(_BYTE *)(a1 + 100)
      && gLogCategory_APEndpointStreamScreen <= 40
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!Length || (appended = CMBlockBufferAppendBufferReference(blockBufferOut, 0, 0, 0, 0), !(_DWORD)appended))
    {
      v8 = 0;
      *a2 = blockBufferOut;
      blockBufferOut = 0;
      goto LABEL_26;
    }
    v8 = appended;
  }
LABEL_32:
  APSLogErrorAt();
LABEL_26:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v8;
}

uint64_t sbufGetAttachmentCGRect(const void *a1, const __CFString *a2, CGRect *a3)
{
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  CFTypeID v6;

  v4 = (const __CFDictionary *)CMGetAttachment(a1, a2, 0);
  if (v4)
  {
    v5 = v4;
    v6 = CFGetTypeID(v4);
    if (v6 == CFDictionaryGetTypeID() && CGRectMakeWithDictionaryRepresentation(v5, a3))
      return 0;
  }
  APSLogErrorAt();
  return 4294950536;
}

uint64_t sbpd_convertTimestampToNetworkTime@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD *);

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2)
  {
    v5 = *(_QWORD *)(result + 456);
    result = CMBaseObjectGetVTable();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)(result + 16) + 16);
    if (v6)
      return v6(v5, a2, a3);
  }
  return result;
}

const __CFDictionary *sbpd_addHistogramValue(uint64_t a1, const void *a2)
{
  const __CFDictionary *result;

  result = *(const __CFDictionary **)(a1 + 600);
  if (result)
  {
    CFDictionaryGetValue(result, a2);
    return (const __CFDictionary *)APSStatsHistogramAddValue();
  }
  return result;
}

uint64_t __getRandomDataBlob_block_invoke(uint64_t a1)
{
  getRandomDataBlob_blob = (uint64_t)malloc_type_calloc(1uLL, *(_QWORD *)(a1 + 32), 0xC254D98FuLL);
  return RandomBytes();
}

uint64_t screenstream_handleCommandSetRecordingState(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, _QWORD, uint64_t);
  uint64_t v6;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamScreen <= 50
    && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 24))
  {
    v7 = 4294950534;
    goto LABEL_14;
  }
  v4 = *(_QWORD *)(DerivedStorage + 160);
  if (!v4)
    return 0;
  v5 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v5)
  {
    v7 = 4294954514;
LABEL_14:
    APSLogErrorAt();
    return v7;
  }
  if (a2)
    v6 = *MEMORY[0x1E0C9AE50];
  else
    v6 = *MEMORY[0x1E0C9AE40];
  v7 = v5(v4, *MEMORY[0x1E0CC6618], v6);
  if ((_DWORD)v7)
    goto LABEL_14;
  return v7;
}

__CFDictionary *screenstream_createVirtualDisplayActivationOptions()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  CFAllocatorRef *v4;
  const void **v5;
  const void **v6;
  uint64_t v7;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  CFAllocatorRef v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *);
  const void **v14;
  const __CFAllocator *v15;
  __CFDictionary *Mutable;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  __CFDictionary *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  int v25;
  const __CFString *v26;
  const __CFString *v27;
  BOOL v28;
  const __CFString *v29;
  const void *v30;
  const void *v32;
  CFTypeRef cf[2];
  CFTypeRef v34;
  int v35;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v35 = 0;
  v1 = CMBaseObjectGetDerivedStorage();
  v2 = v1;
  v3 = *(const void **)(v1 + 168);
  cf[0] = 0;
  v34 = 0;
  v4 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v3)
    goto LABEL_49;
  if (!*(_BYTE *)(v1 + 378))
  {
    if (*(_BYTE *)(v1 + 390))
    {
      v5 = (const void **)MEMORY[0x1E0CC6778];
LABEL_8:
      v3 = *v5;
      goto LABEL_41;
    }
    if (*(_BYTE *)(v1 + 367))
    {
      if (*(_BYTE *)(v1 + 369))
      {
        v6 = (const void **)MEMORY[0x1E0CC6760];
        if (*(_QWORD *)(v1 + 352) == 1)
          v6 = (const void **)MEMORY[0x1E0CC6758];
      }
      else
      {
        if (!*(_BYTE *)(v1 + 370))
          goto LABEL_17;
        v6 = (const void **)MEMORY[0x1E0CC6760];
      }
      v3 = *v6;
      if (*v6)
        goto LABEL_41;
    }
LABEL_17:
    if ((*(_BYTE *)(v1 + 370) || *(_BYTE *)(v1 + 320) && APSHas4K60444SenderSupport())
      && *(int *)(v2 + 1172) <= 0)
    {
      v3 = (const void *)*MEMORY[0x1E0CC6760];
      if (*MEMORY[0x1E0CC6760])
        goto LABEL_41;
    }
    if (!*(_BYTE *)(v2 + 363))
      goto LABEL_40;
    v7 = *(_QWORD *)(v2 + 48);
    if (!v7)
      goto LABEL_40;
    CMBaseObject = APSenderSessionGetCMBaseObject(v7);
    v9 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
    if (v9)
    {
      v10 = *v4;
      v35 = v9(CMBaseObject, CFSTR("TransportControlStream"), *v4, cf);
      if (!v35)
      {
        v11 = APSGetFBOPropertyInt64();
        if (!v35)
        {
          v3 = 0;
          if (v11 > 0x10 || ((1 << v11) & 0x10102) == 0)
            goto LABEL_41;
          v12 = FigTransportStreamGetCMBaseObject();
          v13 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
          if (v13)
          {
            v35 = v13(v12, *MEMORY[0x1E0CF1F58], v10, &v34);
            if (!v35)
            {
              if (APSIsDirectLinkInterface())
              {
                if (gLogCategory_APEndpointStreamScreen <= 50
                  && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
                {
                  LogPrintF();
                }
                v5 = (const void **)MEMORY[0x1E0CC6790];
                goto LABEL_8;
              }
LABEL_40:
              v3 = 0;
              goto LABEL_41;
            }
          }
          else
          {
            v35 = -12782;
          }
        }
      }
    }
    else
    {
      v35 = -12782;
    }
    APSLogErrorAt();
    goto LABEL_40;
  }
  if (!*(_BYTE *)(v1 + 379) || !FVDUtilsHEVCEncoderSupports4K60())
    goto LABEL_40;
  v3 = (const void *)*MEMORY[0x1E0CC6770];
  *(_BYTE *)(v2 + 951) = 1;
LABEL_41:
  if (cf[0])
    CFRelease(cf[0]);
  if (v34)
    CFRelease(v34);
  if (!v3)
  {
    v14 = (const void **)MEMORY[0x1E0CC6768];
    if (!*(_BYTE *)(v2 + 378))
      v14 = (const void **)MEMORY[0x1E0CC6750];
    v3 = *v14;
  }
LABEL_49:
  if (gLogCategory_APEndpointStreamScreen <= 50
    && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_QWORD *)(v2 + 184) = v3;
  v15 = *v4;
  Mutable = CFDictionaryCreateMutable(*v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_OWORD *)cf = *MEMORY[0x1E0C9D820];
  LODWORD(v34) = 0;
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC6600], v3);
  v17 = (const void *)*MEMORY[0x1E0C9AE40];
  v18 = (const void *)*MEMORY[0x1E0C9AE50];
  if (*(_BYTE *)(DerivedStorage + 26))
    v19 = (const void *)*MEMORY[0x1E0C9AE40];
  else
    v19 = (const void *)*MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC65F8], v19);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC6568], *(const void **)(DerivedStorage + 40));
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC65F0], v18);
  v20 = (const void *)*MEMORY[0x1E0CC6548];
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC6548], CFSTR("AirPlay"));
  if (APSIsAPValeriaScreenSender() && CFEqual(v3, (CFTypeRef)*MEMORY[0x1E0CC6790]))
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC65E8], v18);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  if (*(_BYTE *)(DerivedStorage + 378))
  {
    FigCFDictionarySetInt32();
    if (*(_BYTE *)(DerivedStorage + 380))
      FigCFDictionarySetInt32();
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC65D8], v17);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC6520], CFSTR("CarPlayScreen"));
    v21 = 0;
  }
  else
  {
    v24 = (const void *)*MEMORY[0x1E0CC6520];
    if (*(_BYTE *)(DerivedStorage + 390))
    {
      CFDictionarySetValue(Mutable, v24, CFSTR("StevenoteAP"));
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC65B8], v18);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC65C0], v18);
      v21 = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(v21, (const void *)*MEMORY[0x1E0CC64F0], CFSTR("nero"));
      if (*(_QWORD *)(DerivedStorage + 312) && APSSettingsGetIntWithDefault())
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC65B0], *(const void **)(DerivedStorage + 312));
    }
    else
    {
      CFDictionarySetValue(Mutable, v24, CFSTR("AirPlayScreen"));
      if (CFEqual(v3, (CFTypeRef)*MEMORY[0x1E0CC6760])
        && *(_BYTE *)(DerivedStorage + 320)
        && APSHas4K60444SenderSupport()
        && *(int *)(DerivedStorage + 1172) <= 0)
      {
        FigCFDictionarySetInt32();
      }
      if (*(_QWORD *)(DerivedStorage + 352) == 1)
      {
        APSScreenGetMediaPresentationParams();
        if (gLogCategory_APEndpointStreamScreen <= 50
          && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (*(_BYTE *)(DerivedStorage + 369))
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC66D8], *(const void **)(DerivedStorage + 304));
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        if (*(_BYTE *)(DerivedStorage + 368))
          FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        if (*(int *)(DerivedStorage + 372) >= 1)
          FigCFDictionarySetInt32();
      }
      v32 = *(const void **)(DerivedStorage + 312);
      if (v32)
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC65B0], v32);
      v21 = 0;
    }
  }
  v22 = *(const void **)(DerivedStorage + 152);
  if (v22)
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC6530], v22);
  v23 = *(const void **)(DerivedStorage + 192);
  if (v23)
  {
    if (gLogCategory_APEndpointStreamScreen <= 50)
    {
      if (gLogCategory_APEndpointStreamScreen != -1
        || (v25 = _LogCategory_Initialize(), v23 = *(const void **)(DerivedStorage + 192), v25))
      {
        LogPrintF();
        v23 = *(const void **)(DerivedStorage + 192);
      }
    }
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC6528], v23);
    FigCFDictionarySetInt();
    CFDictionarySetValue(Mutable, v20, CFSTR("PerAppAirPlayDisplay"));
  }
  if (*(_BYTE *)(DerivedStorage + 378))
  {
    FigCFDictionarySetInt();
    v26 = CFSTR("CarPlayAlternate");
    v27 = CFSTR("CarPlay");
    v28 = *(_DWORD *)(DerivedStorage + 88) == 110;
  }
  else
  {
    if (!*(_BYTE *)(DerivedStorage + 388))
      goto LABEL_92;
    FigCFDictionarySetInt();
    v26 = CFSTR("Stevenote");
    v27 = CFSTR("AirPlayDemo");
    v28 = *(_BYTE *)(DerivedStorage + 390) == 0;
  }
  if (v28)
    v29 = v27;
  else
    v29 = v26;
  CFDictionarySetValue(Mutable, v20, v29);
LABEL_92:
  FigCFDictionarySetInt32();
  *(_QWORD *)(DerivedStorage + 936) = MillisecondsToUpTicks();
  if (v21)
  {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC6550], v21);
    CFRelease(v21);
  }
  if (*(_QWORD *)(DerivedStorage + 176))
  {
    if (gLogCategory_APEndpointStreamScreen <= 50
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFDictionaryApplyBlock();
  }
  v30 = *(const void **)(DerivedStorage + 392);
  if (v30)
  {
    if (CFEqual(v30, CFSTR("tvout")))
    {
      FigCFDictionarySetInt();
LABEL_104:
      FigCFDictionarySetInt();
      return Mutable;
    }
    if (CFEqual(v30, CFSTR("mirroringonly")) || CFEqual(v30, CFSTR("seconddisplay")))
      goto LABEL_104;
    if (CFEqual(v30, CFSTR("continuity")))
    {
      FigCFDictionarySetInt();
      CFDictionarySetValue(Mutable, v20, CFSTR("Continuity"));
      return Mutable;
    }
    if (CFEqual(v30, CFSTR("airplay")))
      goto LABEL_104;
    if (gLogCategory_APEndpointStreamScreen <= 40
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  return Mutable;
}

void __screenstream_createVirtualDisplayActivationOptions_block_invoke(uint64_t a1, const void *a2, const void *a3)
{
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, a3);
}

uint64_t screenstream_initDisplayInfo(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  const void *v4;
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, _QWORD, _QWORD *);
  const __CFAllocator *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  _OWORD *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  const void *v26;
  uint64_t v27;
  const void *v28;
  uint64_t v29;
  BOOL v30;
  CFTypeRef v31;
  char CFPreferenceNumberWithDefault;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t UpTimeNanoseconds;
  int v38;
  __CFDictionary *Mutable;
  const void *v40;
  CFTypeRef cf;
  void *value;
  CFTypeRef v44;
  CFTypeRef v45;
  CFTypeRef v46;
  CFTypeRef v47;
  CFTypeRef v48;
  CFTypeRef v49;
  CFDictionaryRef v50;
  CFDictionaryRef v51;
  CFDictionaryRef v52;

  v2 = *(_QWORD *)(a1 + 72);
  v51 = 0;
  v52 = 0;
  v49 = 0;
  v50 = 0;
  v47 = 0;
  v48 = 0;
  v45 = 0;
  v46 = 0;
  v44 = 0;
  cf = 0;
  value = 0;
  v3 = (_QWORD *)(a1 + 288);
  v4 = *(const void **)(a1 + 288);
  if (v4)
  {
    CFRelease(v4);
    *v3 = 0;
  }
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(a1 + 56));
  v6 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (!v6)
  {
    v12 = 4294954514;
LABEL_13:
    APSLogErrorAt();
    goto LABEL_92;
  }
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = v6(CMBaseObject, CFSTR("Name"), *MEMORY[0x1E0C9AE00], v3);
  if ((_DWORD)v8)
  {
    v12 = v8;
    goto LABEL_13;
  }
  v9 = *(const void **)(a1 + 208);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 208) = 0;
  }
  v10 = APEndpointDisplayDescriptionCopyProperty(v2, (uint64_t)CFSTR("EDID"), (uint64_t)v7, a1 + 208);
  if ((_DWORD)v10)
  {
    v12 = v10;
    goto LABEL_13;
  }
  v11 = APEndpointDisplayDescriptionCopyProperty(v2, (uint64_t)CFSTR("PixelSize"), (uint64_t)v7, (uint64_t)&v52);
  if ((_DWORD)v11)
  {
    v12 = v11;
    goto LABEL_13;
  }
  CGSizeMakeWithDictionaryRepresentation(v52, (CGSize *)(a1 + 216));
  if (gLogCategory_APEndpointStreamScreen <= 40
    && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v13 = *(double *)(a1 + 216);
  v14 = (_OWORD *)MEMORY[0x1E0C9D820];
  if (*(_BYTE *)(a1 + 378))
  {
    if (v13 <= 0.0 || *(double *)(a1 + 224) <= 0.0)
    {
      v12 = 4294950536;
      goto LABEL_13;
    }
    v16 = *(double *)(a1 + 248);
    v15 = *(double *)(a1 + 256);
    if ((v16 != *MEMORY[0x1E0C9D820] || v15 != *(double *)(MEMORY[0x1E0C9D820] + 8)) && (v16 <= 0.0 || v15 <= 0.0))
    {
      v12 = 4294950536;
      goto LABEL_13;
    }
  }
  else
  {
    v17 = *(double *)(a1 + 224);
    if (v13 >= v17)
      v18 = *(double *)(a1 + 224);
    else
      v18 = *(double *)(a1 + 216);
    v19 = 720.0;
    if (v18 >= 720.0)
    {
      v19 = *(double *)(a1 + 224);
    }
    else if (v18 <= 0.0)
    {
      v13 = 1280.0;
    }
    else
    {
      v13 = v13 * (720.0 / v18);
      v19 = v17 * (720.0 / v18);
    }
    *(double *)(a1 + 216) = v13;
    *(double *)(a1 + 224) = v19;
    if (gLogCategory_APEndpointStreamScreen <= 40
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  *(_OWORD *)(a1 + 232) = *v14;
  if (*(_BYTE *)(a1 + 364))
  {
    v20 = APEndpointDisplayDescriptionCopyProperty(v2, (uint64_t)CFSTR("PixelSizeMax"), (uint64_t)v7, (uint64_t)&v51);
    if ((_DWORD)v20)
    {
      v12 = v20;
      goto LABEL_13;
    }
    CGSizeMakeWithDictionaryRepresentation(v51, (CGSize *)(a1 + 232));
  }
  if (gLogCategory_APEndpointStreamScreen <= 40
    && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v21 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(a1 + 232), *(float64x2_t *)(a1 + 216)), *(int8x16_t *)(a1 + 232), *(int8x16_t *)(a1 + 216));
  *(int8x16_t *)(a1 + 232) = v21;
  if (*(double *)v21.i64 > 1920.0 || *(double *)&v21.i64[1] > 1080.0)
  {
    if (FVDUtilsHEVCEncoderSupports4K60() && APSHasHDRSenderSupport())
    {
      *(_BYTE *)(a1 + 370) = 1;
      if (!*(_BYTE *)(a1 + 378))
      {
        APSGetMaxSizePreservingAspectRatio();
        *(_QWORD *)(a1 + 232) = v22;
        *(_QWORD *)(a1 + 240) = v23;
      }
    }
    else
    {
      *(_OWORD *)(a1 + 232) = *(_OWORD *)(a1 + 216);
    }
  }
  if (gLogCategory_APEndpointStreamScreen <= 40
    && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v24 = APEndpointDisplayDescriptionCopyProperty(v2, (uint64_t)CFSTR("PhysicalSize"), (uint64_t)v7, (uint64_t)&v50);
  if ((_DWORD)v24)
  {
    v12 = v24;
    goto LABEL_13;
  }
  CGSizeMakeWithDictionaryRepresentation(v50, (CGSize *)(a1 + 248));
  v25 = (_QWORD *)(a1 + 296);
  v26 = *(const void **)(a1 + 296);
  if (v26)
  {
    CFRelease(v26);
    *v25 = 0;
  }
  v27 = APEndpointDisplayDescriptionCopyProperty(v2, (uint64_t)CFSTR("UUID"), (uint64_t)v7, a1 + 296);
  if ((_DWORD)v27)
  {
    v12 = v27;
    goto LABEL_13;
  }
  v28 = *(const void **)(a1 + 304);
  if (v28)
  {
    CFRelease(v28);
    *(_QWORD *)(a1 + 304) = 0;
  }
  if (*(_BYTE *)(a1 + 365))
  {
    v29 = APEndpointDisplayDescriptionCopyProperty(v2, (uint64_t)CFSTR("HDRInfo"), (uint64_t)v7, a1 + 304);
    if ((_DWORD)v29)
    {
      v12 = v29;
      goto LABEL_13;
    }
  }
  screenstream_setIsHDR(a1);
  if (APSHasHDRSenderSupport())
    v30 = *(_BYTE *)(a1 + 360) != 0;
  else
    v30 = 0;
  *(_BYTE *)(a1 + 369) = v30;
  APEndpointDisplayDescriptionCopyProperty(v2, (uint64_t)CFSTR("receiverSupports444"), (uint64_t)v7, (uint64_t)&v46);
  v31 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  v33 = 0;
  *(_BYTE *)(a1 + 320) = CFPreferenceNumberWithDefault;
  v34 = *(unsigned __int8 *)(a1 + 389);
  if (*(_BYTE *)(a1 + 389) && CFPreferenceNumberWithDefault)
  {
    if (FVDUtilsHEVCEncoderSupports4K60())
      v33 = 1;
    else
      v33 = FVDUtilsH264EncoderSupports444() != 0;
    v34 = *(unsigned __int8 *)(a1 + 389);
  }
  *(_BYTE *)(a1 + 390) = v33;
  if (v34
    && gLogCategory_APEndpointStreamScreen <= 40
    && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v35 = *(_QWORD *)(a1 + 296);
  v36 = *MEMORY[0x1E0CA48A0];
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  *(_QWORD *)(a1 + 80) = CFStringCreateWithFormat(v7, 0, CFSTR("%@-%@-%llx"), v35, v36, UpTimeNanoseconds);
  APEndpointDisplayDescriptionCopyProperty(v2, (uint64_t)CFSTR("MaxFPS"), (uint64_t)v7, (uint64_t)&v49);
  if (v49)
  {
    v38 = CFGetInt64();
    if (v38 >= 1 && *(_DWORD *)(a1 + 448) > v38)
      *(_DWORD *)(a1 + 448) = v38;
  }
  APEndpointDisplayDescriptionCopyProperty(v2, (uint64_t)CFSTR("IsOverscanned"), (uint64_t)v7, (uint64_t)&v48);
  *(_BYTE *)(a1 + 361) = v48 == v31;
  APEndpointDisplayDescriptionCopyProperty(v2, (uint64_t)CFSTR("SupportsRotation"), (uint64_t)v7, (uint64_t)&v47);
  *(_BYTE *)(a1 + 362) = v47 == v31;
  *(double *)(a1 + 344) = *(double *)(a1 + 216) * *(double *)(a1 + 224) * (double)*(int *)(a1 + 448);
  if (*(_BYTE *)(a1 + 378))
  {
    APEndpointDisplayDescriptionCopyProperty(v2, (uint64_t)CFSTR("ViewAreas"), (uint64_t)v7, a1 + 328);
    Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(a1 + 336) = Mutable;
    v40 = *(const void **)(a1 + 296);
    if (v40)
      CFDictionarySetValue(Mutable, CFSTR("uuid"), v40);
    APEndpointDisplayDescriptionCopyProperty(v2, (uint64_t)CFSTR("InitialViewArea"), (uint64_t)v7, (uint64_t)&value);
    if (value)
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 336), CFSTR("viewArea"), value);
    APEndpointDisplayDescriptionCopyProperty(v2, (uint64_t)CFSTR("AdjacentViewAreas"), (uint64_t)v7, (uint64_t)&cf);
    if (cf)
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 336), CFSTR("adjacentViewAreas"), cf);
  }
  APEndpointDescriptionCopyProperty_0(*(_QWORD *)(a1 + 56), (uint64_t)CFSTR("IsThirdPartyTVFamily"), (uint64_t)v7, (uint64_t)&v44);
  *(_BYTE *)(a1 + 376) = v44 == v31;
  APEndpointDisplayDescriptionCopyProperty(v2, (uint64_t)CFSTR("receiverSupportsHDRMirroring"), (uint64_t)v7, (uint64_t)&v45);
  *(_BYTE *)(a1 + 377) = v45 == v31;
  if (gLogCategory_APEndpointStreamScreen <= 50
    && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*v25)
  {
    v12 = 0;
  }
  else
  {
    APSLogErrorAt();
    if (gLogCategory_APEndpointStreamScreen <= 90
      && (gLogCategory_APEndpointStreamScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v12 = 4294950536;
  }
LABEL_92:
  if (value)
    CFRelease(value);
  if (cf)
    CFRelease(cf);
  if (v52)
    CFRelease(v52);
  if (v51)
    CFRelease(v51);
  if (v50)
    CFRelease(v50);
  if (v49)
    CFRelease(v49);
  if (v48)
    CFRelease(v48);
  if (v47)
    CFRelease(v47);
  if (v44)
    CFRelease(v44);
  if (v45)
    CFRelease(v45);
  if (v46)
    CFRelease(v46);
  return v12;
}

void screenstream_setIsHDR(uint64_t a1)
{
  const __CFDictionary *v2;
  const void *v3;
  const void *Value;
  const void *v5;
  const void *v6;
  char v7;
  __CFDictionary *Mutable;
  const void *v9;

  v2 = *(const __CFDictionary **)(a1 + 304);
  if (!v2)
    goto LABEL_13;
  v3 = (const void *)*MEMORY[0x1E0CC6510];
  Value = CFDictionaryGetValue(v2, (const void *)*MEMORY[0x1E0CC6510]);
  if (!Value)
    goto LABEL_13;
  v5 = Value;
  v6 = (const void *)*MEMORY[0x1E0CC6500];
  if (!CFEqual(Value, (CFTypeRef)*MEMORY[0x1E0CC6500]))
  {
    if (CFEqual(v5, (CFTypeRef)*MEMORY[0x1E0CC64F8]))
    {
      if (!*(_BYTE *)(a1 + 366))
      {
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFDictionarySetValue(Mutable, v3, v6);
        v9 = *(const void **)(a1 + 304);
        *(_QWORD *)(a1 + 304) = Mutable;
        if (Mutable)
          CFRetain(Mutable);
        if (v9)
          CFRelease(v9);
        CFRelease(Mutable);
      }
      goto LABEL_4;
    }
LABEL_13:
    v7 = 0;
    goto LABEL_5;
  }
LABEL_4:
  v7 = 1;
LABEL_5:
  *(_BYTE *)(a1 + 360) = v7;
}

CFTypeRef __screenstream_statsTimerFired_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  CFTypeRef result;

  v1 = a1[6];
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = *(_DWORD *)(v1 + 496);
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = *(_QWORD *)(v1 + 488);
  result = *(CFTypeRef *)(*(_QWORD *)(a1[5] + 8) + 24);
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t screenstream_signalDataAvailable(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 136);
  if (!v1)
    return APSLogErrorAt();
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (!v2)
    return APSLogErrorAt();
  result = v2(v1);
  if ((_DWORD)result)
    return APSLogErrorAt();
  return result;
}

uint64_t SidePlayManagerStart()
{
  uint64_t v1;

  v1 = 0;
  return SPGetEndpointManager(&v1);
}

uint64_t SPGetEndpointManager(_QWORD *a1)
{
  if (SPGetEndpointManager_sCreateOnce != -1)
  {
    dispatch_once(&SPGetEndpointManager_sCreateOnce, &__block_literal_global_38);
    if (!a1)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (a1)
LABEL_3:
    *a1 = SPGetEndpointManager_sEndpointManager;
LABEL_4:
  if (gLogCategory_SPEndpointManagerFactory <= 50
    && (gLogCategory_SPEndpointManagerFactory != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return SPGetEndpointManager_sCreationResult;
}

uint64_t APEndpointPlaybackSessionRemoteControlCreate(uint64_t a1, const void *a2, const void *a3, const __CFDictionary *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t DerivedStorage;
  const __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  CFMutableDictionaryRef Mutable;
  dispatch_queue_t v16;
  dispatch_queue_t v17;
  dispatch_queue_t v18;
  const void *Value;
  const void *v20;
  uint64_t v21;

  if (!a2 || !a3 || !a5)
  {
    APSLogErrorAt();
    return 4294950556;
  }
  FigEndpointPlaybackSessionGetClassID();
  v10 = CMDerivedObjectCreate();
  if ((_DWORD)v10)
  {
    v21 = v10;
    goto LABEL_24;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
    v12 = (const __CFString *)a1;
  else
    v12 = CFSTR("unnamed APEndpointPlaybackSessionRemoteControl");
  *(_QWORD *)(DerivedStorage + 8) = v12;
  CFRetain(v12);
  *(_QWORD *)(DerivedStorage + 40) = CFRetain(a2);
  *(_QWORD *)(DerivedStorage + 24) = CFRetain(a3);
  *(_BYTE *)(DerivedStorage + 96) = 0;
  *(_WORD *)(DerivedStorage + 80) = 0;
  v13 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 72) = v13;
  if (!v13)
    goto LABEL_23;
  v14 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 192) = v14;
  if (!v14)
    goto LABEL_23;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 184) = Mutable;
  if (!Mutable
    || (v16 = dispatch_queue_create("APEndpointPlaybackSessionRemoteControl.event", 0),
        (*(_QWORD *)(DerivedStorage + 144) = v16) == 0)
    || (v17 = dispatch_queue_create("APEndpointPlaybackSessionRemoteControl.metadata", 0),
        (*(_QWORD *)(DerivedStorage + 112) = v17) == 0)
    || (v18 = dispatch_queue_create("APEndpointPlaybackSessionRemoteControl.notification", 0),
        (*(_QWORD *)(DerivedStorage + 64) = v18) == 0))
  {
LABEL_23:
    APSLogErrorAt();
    return 4294950555;
  }
  if (CFDictionaryContainsKey(a4, CFSTR("MetadataSource")))
  {
    Value = CFDictionaryGetValue(a4, CFSTR("MetadataSource"));
    *(_QWORD *)(DerivedStorage + 56) = CFRetain(Value);
  }
  *(_BYTE *)(DerivedStorage + 200) = CFDictionaryGetInt64() != 0;
  if (CFDictionaryContainsKey(a4, CFSTR("NetworkClock")))
  {
    v20 = CFDictionaryGetValue(a4, CFSTR("NetworkClock"));
    *(_QWORD *)(DerivedStorage + 48) = CFRetain(v20);
  }
  v21 = APEndpointPlaybackSessionStatsCreate(CFSTR("RC"), a1, (uint64_t)a4, (_QWORD *)(DerivedStorage + 136));
  if ((_DWORD)v21)
  {
LABEL_24:
    APSLogErrorAt();
    return v21;
  }
  *a5 = 0;
  return v21;
}

uint64_t session_Invalidate()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  if (!*(_BYTE *)(DerivedStorage + 96))
  {
    *(_BYTE *)(DerivedStorage + 96) = 1;
    session_unsubscribeMetadataEvents();
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
    APEndpointPlaybackSessionStatsUpdateAtInvalidate(*(_QWORD *)(DerivedStorage + 136));
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  return 0;
}

void session_Finalize()
{
  uint64_t DerivedStorage;
  CFTypeRef v1;
  void (*v2)(CFTypeRef, _QWORD, _QWORD);
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  NSObject *v9;
  const void *v10;
  NSObject *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  NSObject *v15;
  uint64_t v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointPlaybackSessionRemoteControl <= 50
    && (gLogCategory_APEndpointPlaybackSessionRemoteControl != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v1 = *(CFTypeRef *)DerivedStorage;
  if (*(_QWORD *)DerivedStorage)
  {
    v2 = *(void (**)(CFTypeRef, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v2)
      v2(v1, 0, 0);
  }
  *(_QWORD *)(DerivedStorage + 152) = 0;
  *(_QWORD *)(DerivedStorage + 160) = 0;
  APEndpointPlaybackSessionStatsDestroy((uint64_t *)(DerivedStorage + 136));
  v3 = *(const void **)(DerivedStorage + 8);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 24);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 32);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 40);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 48);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  FigSimpleMutexDestroy();
  v8 = *(const void **)(DerivedStorage + 168);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 168) = 0;
  }
  v9 = *(NSObject **)(DerivedStorage + 144);
  if (v9)
  {
    dispatch_release(v9);
    *(_QWORD *)(DerivedStorage + 144) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v10 = *(const void **)(DerivedStorage + 184);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 184) = 0;
  }
  FigSimpleMutexDestroy();
  v11 = *(NSObject **)(DerivedStorage + 112);
  if (v11)
  {
    dispatch_release(v11);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 56);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 120);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
  v14 = *(const void **)(DerivedStorage + 88);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v15 = *(NSObject **)(DerivedStorage + 64);
  if (v15)
  {
    dispatch_release(v15);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v16 = *(_QWORD *)(DerivedStorage + 208);
  if (v16)
  {
    APLocalPlaybackServerDestroy(v16);
    *(_QWORD *)(DerivedStorage + 208) = 0;
  }
}

uint64_t session_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef *v7;
  uint64_t v8;
  int v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  if (CFEqual(a2, CFSTR("RTCStats")))
    APEndpointPlaybackSessionCopyRTCStats(*(_QWORD *)(DerivedStorage + 136), a4);
  if (*(_BYTE *)(DerivedStorage + 96))
  {
    APSLogErrorAt();
    v8 = 4294954511;
  }
  else
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F78]))
    {
      v7 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    }
    else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F98])
           || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F90])
           || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F80])
           || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F88])
           || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F70]))
    {
      v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    }
    else
    {
      if (CFEqual(a2, CFSTR("Activated")))
      {
        v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
        v10 = *(unsigned __int8 *)(DerivedStorage + 80);
      }
      else
      {
        if (!CFEqual(a2, CFSTR("IsPlaying")))
        {
          v8 = 4294954509;
          goto LABEL_13;
        }
        v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
        v10 = *(unsigned __int8 *)(DerivedStorage + 81);
      }
      if (!v10)
        v7 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    }
    v8 = 0;
    *a4 = (CFDictionaryRef)CFRetain(*v7);
  }
LABEL_13:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  return v8;
}

uint64_t session_SetProperty(uint64_t a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t DerivedStorage;
  int v7;
  __CFString **v8;
  __CFString *v9;
  const void *v10;
  int Value;
  _QWORD *v12;
  uint64_t v13;
  CMTime v15;
  CMTime v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  if (*(_BYTE *)(DerivedStorage + 96))
  {
    APSLogErrorAt();
    v13 = 4294954511;
    goto LABEL_15;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F58]))
  {
    v7 = FigCFEqual();
    v8 = kAPEndpointPlaybackSessionAudioMode_MoviePlayback;
    if (!v7)
      v8 = kAPEndpointPlaybackSessionAudioMode_Default;
    v9 = *v8;
    v10 = *(const void **)(DerivedStorage + 32);
    *(_QWORD *)(DerivedStorage + 32) = *v8;
    if (v9)
      CFRetain(v9);
    if (v10)
      CFRelease(v10);
    session_setProxiedPropertyInternal(a1, CFSTR("audioMode"), 0, v9);
  }
  else
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F68]))
    {
      Value = CFBooleanGetValue(a3);
      APEndpointPlaybackSessionSetIsParticipatingInCoordinatedPlayback(*(_QWORD *)(DerivedStorage + 136), Value);
    }
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3FA0]))
    {
      v13 = 4294954509;
      goto LABEL_15;
    }
    memset(&v16, 0, sizeof(v16));
    CMTimeMakeFromDictionary(&v16, a3);
    v12 = *(_QWORD **)(DerivedStorage + 136);
    v15 = v16;
    APEndpointPlaybackSessionSetVideoSyncTime(v12, (uint64_t)&v15);
  }
  v13 = 0;
LABEL_15:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  return v13;
}

void session_unsubscribeMetadataEvents()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 56))
  {
    v1 = DerivedStorage;
    if (*(_QWORD *)(DerivedStorage + 104))
    {
      if (gLogCategory_APEndpointPlaybackSessionRemoteControl <= 30
        && (gLogCategory_APEndpointPlaybackSessionRemoteControl != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      APMetadataSourceRemoveEventCallback(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 104));
      *(_QWORD *)(v1 + 104) = 0;
    }
  }
}

void session_cleanupPendingRequests(const void *a1)
{
  CFDictionaryRef v2;

  if (a1)
  {
    v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionaryApplyBlock();
    if (v2)
      CFRelease(v2);
    CFRelease(a1);
  }
}

void __session_cleanupPendingRequests_block_invoke(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  const __CFData *Value;
  const __CFData *v6;
  const void *v7;

  if (theDict)
  {
    Value = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("CompletionContext"));
    if (Value)
    {
      v6 = Value;
      v7 = CFDictionaryGetValue(theDict, CFSTR("type"));
      if (v7)
        session_handleRemoteControlSessionResponse(*(unsigned int *)(a1 + 40), v7, *(const __CFDictionary **)(a1 + 32), v6);
    }
  }
}

void session_handleRemoteControlSessionResponse(uint64_t a1, CFTypeRef cf1, const __CFDictionary *a3, const __CFData *a4)
{
  const __CFDictionary *Value;
  const UInt8 *BytePtr;
  const UInt8 *v9;
  const UInt8 *v10;
  const void *v11;
  const void *v12;
  const UInt8 *v13;
  const UInt8 *v14;
  __CFDictionary *MutableCopy;
  const void *v16;
  const void *v17;
  CFTypeID v18;
  const void *v19;
  const UInt8 *v20;
  const void *v21;
  const void *v22;

  if (cf1)
  {
    Value = a3;
    if (a3)
    {
      if (a4)
      {
        if (CFEqual(cf1, CFSTR("playbackInfo")))
        {
          Value = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("info"));
          BytePtr = CFDataGetBytePtr(a4);
          if (!BytePtr)
            return;
          goto LABEL_9;
        }
        if (CFEqual(cf1, CFSTR("seek")))
        {
          BytePtr = CFDataGetBytePtr(a4);
LABEL_9:
          if (*(_QWORD *)BytePtr)
            (*(void (**)(const __CFDictionary *, uint64_t, _QWORD))BytePtr)(Value, a1, *((_QWORD *)BytePtr + 1));
          return;
        }
        if (CFEqual(cf1, CFSTR("property")))
        {
          v9 = CFDataGetBytePtr(a4);
          if (*(_QWORD *)v9)
          {
            v10 = v9;
            v11 = CFDictionaryGetValue(Value, CFSTR("key"));
            v12 = CFDictionaryGetValue(Value, CFSTR("value"));
            (*(void (**)(const void *, const void *, uint64_t, _QWORD))v10)(v11, v12, a1, *((_QWORD *)v10 + 1));
          }
        }
        else if (CFEqual(cf1, CFSTR("streamingKey")))
        {
          v13 = CFDataGetBytePtr(a4);
          if (*(_QWORD *)v13)
          {
            v14 = v13;
            MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
            if (CFDictionaryContainsKey(Value, CFSTR("key")))
            {
              v16 = CFDictionaryGetValue(Value, CFSTR("key"));
              v17 = v16;
              if (v16 && (v18 = CFGetTypeID(v16), v18 == CFStringGetTypeID()))
                v19 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBase64EncodedString:options:", v17, 0);
              else
                v19 = 0;
              CFDictionaryRemoveValue(MutableCopy, CFSTR("key"));
              if (v19)
                v21 = v19;
              else
                v21 = v17;
              CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA3EB8], v21);
            }
            else
            {
              v19 = 0;
            }
            if (CFDictionaryContainsKey(Value, CFSTR("error")))
            {
              v22 = CFDictionaryGetValue(Value, CFSTR("error"));
              CFDictionaryRemoveValue(MutableCopy, CFSTR("error"));
              CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA3D68], v22);
            }
            (*(void (**)(uint64_t, __CFDictionary *, _QWORD))v14)(a1, MutableCopy, *((_QWORD *)v14 + 1));
            if (v19)
              CFRelease(v19);
            if (MutableCopy)
              CFRelease(MutableCopy);
          }
        }
        else if (CFEqual(cf1, CFSTR("authorizeItem")))
        {
          v20 = CFDataGetBytePtr(a4);
          session_authorizeItemCompletion(a1, Value, (uint64_t)v20);
        }
      }
    }
  }
}

uint64_t session_authorizeItemCompletion(uint64_t result, CFDictionaryRef theDict, uint64_t a3)
{
  uint64_t v5;
  const void *Value;
  const void *v7;

  if (*(_QWORD *)a3)
  {
    v5 = result;
    CFDictionaryGetValue(theDict, CFSTR("item"));
    Value = CFDictionaryGetValue(theDict, CFSTR("PIC-Data"));
    v7 = CFDictionaryGetValue(theDict, CFSTR("playerGUID"));
    return (*(uint64_t (**)(const void *, const void *, uint64_t, _QWORD))a3)(Value, v7, v5, *(_QWORD *)(a3 + 8));
  }
  return result;
}

void session_setProxiedPropertyInternal(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t *v8;
  __CFDictionary *Mutable;
  uint64_t v10;
  CFTypeRef v11;
  void (*v12)(uint64_t, CFTypeRef, _QWORD, _QWORD);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (*(_BYTE *)(DerivedStorage + 96) || (v8 = (uint64_t *)DerivedStorage, !*(_QWORD *)DerivedStorage))
  {
    APSLogErrorAt();
    Mutable = 0;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("type"), CFSTR("setProperty"));
    CFDictionarySetValue(Mutable, CFSTR("property"), a2);
    CFDictionarySetValue(Mutable, CFSTR("value"), a4);
    if (a3)
    {
      APEndpointPlaybackSessionSetV2Item(a3, Mutable);
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
    }
    session_createDataFromDictionary((uint64_t)Mutable, &cf);
    v10 = *v8;
    v11 = cf;
    v12 = *(void (**)(uint64_t, CFTypeRef, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v12)
      v12(v10, v11, 0, 0);
  }
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
}

void session_createDataFromDictionary(uint64_t a1, _QWORD *a2)
{
  if (FigCreateCFDataFromCFPropertyList())
  {
    APSLogErrorAt();
    FigSignalErrorAt();
  }
  else if (a2)
  {
    *a2 = 0;
  }
}

uint64_t session_AuthorizeItem(uint64_t a1, const void *a2, const void *a3, void (*a4)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  const __CFAllocator *v12;
  __CFDictionary *Mutable;
  __CFDictionary *v14;
  uint64_t v15;
  CFTypeRef v16;
  void (*v17)(uint64_t, CFTypeRef, _QWORD, _QWORD);
  uint64_t v18;
  void (*v20)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v21;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v21 = 0;
  cf = 0;
  v20 = 0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  if (*(_BYTE *)(DerivedStorage + 96))
  {
    APSLogErrorAt();
    v14 = 0;
    Mutable = 0;
    v18 = 4294954511;
    goto LABEL_10;
  }
  v11 = session_ensureRemoteControlSessionCreated(a1);
  if ((_DWORD)v11)
  {
    v18 = v11;
    APSLogErrorAt();
    v14 = 0;
    Mutable = 0;
    goto LABEL_10;
  }
  if (!*(_QWORD *)DerivedStorage)
  {
    APSLogErrorAt();
    v14 = 0;
    Mutable = 0;
    v18 = 4294950553;
    goto LABEL_10;
  }
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("type"), CFSTR("authorizeItem"));
  CFDictionarySetValue(Mutable, CFSTR("kind"), CFSTR("request"));
  if (!a3)
  {
    v14 = 0;
    if (!a2)
      goto LABEL_7;
    goto LABEL_6;
  }
  v14 = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(v14, CFSTR("uuid"), a3);
  CFDictionarySetValue(Mutable, CFSTR("item"), v14);
  if (a2)
LABEL_6:
    CFDictionarySetValue(Mutable, CFSTR("PIC-Request"), a2);
LABEL_7:
  v20 = a4;
  v21 = a5;
  session_addPendingRequest(a1, Mutable, (const UInt8 *)&v20);
  session_createDataFromDictionary((uint64_t)Mutable, &cf);
  v15 = *(_QWORD *)DerivedStorage;
  v16 = cf;
  v17 = *(void (**)(uint64_t, CFTypeRef, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v17)
    v17(v15, v16, 0, 0);
  v18 = 0;
LABEL_10:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  if (a4 && (_DWORD)v18)
    a4(0, 0, v18, a5);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (v14)
    CFRelease(v14);
  return 0;
}

uint64_t session_Play(uint64_t a1, const __CFDictionary *a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  if (!*(_BYTE *)(DerivedStorage + 96))
  {
    if (!*(_QWORD *)(DerivedStorage + 16))
    {
      SNPrintF();
      *(_QWORD *)(DerivedStorage + 16) = os_transaction_create();
    }
    APEndpointPlaybackSessionStatsUpdateAtPlay(*(_QWORD *)(DerivedStorage + 136), a2);
  }
  APSLogErrorAt();
  v9 = FigSignalErrorAt();
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  if (a3 && (_DWORD)v9)
    a3(v9, a4);
  return v9;
}

uint64_t session_InsertPlayQueueItem(uint64_t a1, const __CFDictionary *a2, const __CFDictionary *a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t inserted;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  if (*(_BYTE *)(DerivedStorage + 96) || !a2)
  {
    APSLogErrorAt();
    inserted = FigSignalErrorAt();
  }
  else
  {
    inserted = session_insertPlayQueueItemInternal(a1, a2, a3, (uint64_t)a4, a5);
  }
  v12 = inserted;
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  if (a4 && (_DWORD)v12)
    a4(v12, a5);
  return v12;
}

uint64_t session_RemovePlayQueueItem(uint64_t a1, const __CFDictionary *a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t DerivedStorage;
  const void *Value;
  uint64_t v9;
  __CFDictionary *Mutable;
  _QWORD *v11;
  uint64_t v12;
  CFTypeRef v13;
  void (*v14)(uint64_t, CFTypeRef, void (*)(uint64_t, int, _QWORD *), _QWORD *);
  int v15;
  uint64_t v16;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3EA8]);
  if (gLogCategory_APEndpointPlaybackSessionRemoteControl <= 50
    && (gLogCategory_APEndpointPlaybackSessionRemoteControl != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  if (*(_BYTE *)(DerivedStorage + 96))
  {
    APSLogErrorAt();
    Mutable = 0;
    v16 = 4294954511;
LABEL_23:
    v15 = 1;
    goto LABEL_13;
  }
  if (!*(_QWORD *)DerivedStorage)
  {
    APSLogErrorAt();
    Mutable = 0;
    v16 = 4294950553;
    goto LABEL_23;
  }
  v9 = *(_QWORD *)(DerivedStorage + 208);
  if (v9 && Value)
    APLocalPlaybackServerUnRegisterUUID(v9, Value);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("type"), CFSTR("removePlayQueueItem"));
  FigCFDictionarySetValueFromKeyInDict();
  CFDictionarySetValue(Mutable, CFSTR("item"), a2);
  session_createDataFromDictionary((uint64_t)Mutable, &cf);
  v11 = malloc_type_calloc(0x10uLL, 1uLL, 0xB4A50E73uLL);
  *v11 = a3;
  v11[1] = a4;
  v12 = *(_QWORD *)DerivedStorage;
  v13 = cf;
  v14 = *(void (**)(uint64_t, CFTypeRef, void (*)(uint64_t, int, _QWORD *), _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v14)
    v14(v12, v13, session_standardCompletion, v11);
  v15 = 0;
  v16 = 0;
LABEL_13:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  if (a3 && v15)
    a3(v16, a4);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  return 0;
}

uint64_t session_Stop(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  _QWORD *v8;
  uint64_t v9;
  CFTypeRef v10;
  void (*v11)(uint64_t, CFTypeRef, void (*)(uint64_t, int, _QWORD *), _QWORD *);
  int v12;
  uint64_t v13;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  if (*(_BYTE *)(DerivedStorage + 96))
  {
    APSLogErrorAt();
    Mutable = 0;
    v13 = 4294954511;
LABEL_20:
    v12 = 1;
    goto LABEL_10;
  }
  if (!*(_QWORD *)DerivedStorage)
  {
    APSLogErrorAt();
    Mutable = 0;
    v13 = 4294950553;
    goto LABEL_20;
  }
  if (gLogCategory_APEndpointPlaybackSessionRemoteControl <= 50
    && (gLogCategory_APEndpointPlaybackSessionRemoteControl != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  session_unsubscribeMetadataEvents();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("type"), CFSTR("stop"));
  session_createDataFromDictionary((uint64_t)Mutable, &cf);
  v8 = malloc_type_calloc(0x10uLL, 1uLL, 0xDB2AC87EuLL);
  *v8 = a2;
  v8[1] = a3;
  v9 = *(_QWORD *)DerivedStorage;
  v10 = cf;
  v11 = *(void (**)(uint64_t, CFTypeRef, void (*)(uint64_t, int, _QWORD *), _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v11)
    v11(v9, v10, session_standardCompletion, v8);
  v12 = 0;
  v13 = 0;
LABEL_10:
  *(_BYTE *)(DerivedStorage + 80) = 0;
  session_updateIsPlayingAndPostNotification(a1, 0);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  if (a2 && v12)
    a2(v13, a3);
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  return 0;
}

uint64_t session_GetPlaybackInfo(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  uint64_t v8;
  CFTypeRef v9;
  void (*v10)(uint64_t, CFTypeRef, _QWORD, _QWORD);
  int v11;
  uint64_t v12;
  void (*v14)(_QWORD, _QWORD, _QWORD);
  uint64_t v15;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0;
  cf = 0;
  v14 = 0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  if (*(_BYTE *)(DerivedStorage + 96))
  {
    APSLogErrorAt();
    Mutable = 0;
    v12 = 4294954511;
LABEL_16:
    v11 = 1;
    goto LABEL_6;
  }
  if (!*(_QWORD *)DerivedStorage)
  {
    APSLogErrorAt();
    Mutable = 0;
    v12 = 4294950553;
    goto LABEL_16;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("type"), CFSTR("playbackInfo"));
  CFDictionarySetValue(Mutable, CFSTR("kind"), CFSTR("request"));
  v14 = a2;
  v15 = a3;
  session_addPendingRequest(a1, Mutable, (const UInt8 *)&v14);
  session_createDataFromDictionary((uint64_t)Mutable, &cf);
  v8 = *(_QWORD *)DerivedStorage;
  v9 = cf;
  v10 = *(void (**)(uint64_t, CFTypeRef, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v10)
    v10(v8, v9, 0, 0);
  v11 = 0;
  v12 = 0;
LABEL_6:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  if (a2 && v11)
    a2(0, v12, a3);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  return 0;
}

uint64_t session_SeekToTime(uint64_t a1, uint64_t a2, const __CFDictionary *a3, void (*a4)(_QWORD, _QWORD, _QWORD), uint64_t a5)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v10;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *MutableCopy;
  uint64_t v13;
  CFTypeRef v14;
  void (*v15)(uint64_t, CFTypeRef, _QWORD, _QWORD);
  int v16;
  uint64_t v17;
  void (*v19)(_QWORD, _QWORD, _QWORD);
  uint64_t v20;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v20 = 0;
  cf = 0;
  v19 = 0;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  if (*(_BYTE *)(DerivedStorage + 96))
  {
    APSLogErrorAt();
    MutableCopy = 0;
    v17 = 4294954511;
LABEL_18:
    v16 = 1;
    goto LABEL_6;
  }
  if (!*(_QWORD *)DerivedStorage)
  {
    APSLogErrorAt();
    MutableCopy = 0;
    v17 = 4294950553;
    goto LABEL_18;
  }
  MutableCopy = CFDictionaryCreateMutableCopy(v10, 0, a3);
  CFDictionarySetValue(MutableCopy, CFSTR("type"), CFSTR("seek"));
  CFDictionarySetValue(MutableCopy, CFSTR("kind"), CFSTR("request"));
  FigCFDictionarySetCMTime();
  CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA3EA8]);
  FigCFDictionarySetValueFromKeyInDict();
  FigCFDictionarySetValueFromKeyInDict();
  FigCFDictionarySetValue();
  v19 = a4;
  v20 = a5;
  session_addPendingRequest(a1, MutableCopy, (const UInt8 *)&v19);
  session_createDataFromDictionary((uint64_t)MutableCopy, &cf);
  v13 = *(_QWORD *)DerivedStorage;
  v14 = cf;
  v15 = *(void (**)(uint64_t, CFTypeRef, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v15)
    v15(v13, v14, 0, 0);
  v16 = 0;
  v17 = 0;
LABEL_6:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  if (a4 && v16)
    a4(0, v17, a5);
  if (cf)
    CFRelease(cf);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (Mutable)
    CFRelease(Mutable);
  return 0;
}

uint64_t session_SeekToDate(uint64_t a1, const void *a2, uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD), uint64_t a5)
{
  uint64_t DerivedStorage;
  __CFDictionary *MutableCopy;
  uint64_t v11;
  CFTypeRef v12;
  void (*v13)(uint64_t, CFTypeRef, _QWORD, _QWORD);
  int v14;
  uint64_t v15;
  void (*v17)(_QWORD, _QWORD, _QWORD);
  uint64_t v18;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = 0;
  cf = 0;
  v17 = 0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  if (*(_BYTE *)(DerivedStorage + 96))
  {
    APSLogErrorAt();
    MutableCopy = 0;
    v15 = 4294954511;
LABEL_16:
    v14 = 1;
    goto LABEL_6;
  }
  if (!*(_QWORD *)DerivedStorage)
  {
    APSLogErrorAt();
    MutableCopy = 0;
    v15 = 4294950553;
    goto LABEL_16;
  }
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  CFDictionarySetValue(MutableCopy, CFSTR("type"), CFSTR("seek"));
  FigCFDictionarySetValue();
  FigCFDictionarySetValueFromKeyInDict();
  CFDictionarySetValue(MutableCopy, CFSTR("date"), a2);
  v17 = a4;
  v18 = a5;
  session_addPendingRequest(a1, MutableCopy, (const UInt8 *)&v17);
  session_createDataFromDictionary((uint64_t)MutableCopy, &cf);
  v11 = *(_QWORD *)DerivedStorage;
  v12 = cf;
  v13 = *(void (**)(uint64_t, CFTypeRef, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v13)
    v13(v11, v12, 0, 0);
  v14 = 0;
  v15 = 0;
LABEL_6:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  if (a4 && v14)
    a4(0, v15, a5);
  if (cf)
    CFRelease(cf);
  if (MutableCopy)
    CFRelease(MutableCopy);
  return 0;
}

uint64_t session_SetRate(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, float a5)
{
  uint64_t DerivedStorage;
  CMTimeEpoch v11;
  __CFDictionary *MutableCopy;
  __CFDictionary *v13;
  const void *v14;
  const void *v15;
  uint64_t v16;
  unsigned int (*v17)(const void *, uint64_t, CMTime *);
  OpaqueCMClock *HostTimeClock;
  _QWORD *v19;
  uint64_t v20;
  CFTypeRef v21;
  void (*v22)(uint64_t, CFTypeRef, void (*)(uint64_t, int, _QWORD *), _QWORD *);
  int v23;
  uint64_t v24;
  __int128 v26;
  CMTime rhs;
  CMTime hostTime;
  CMTime v29;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CFTypeRef v33[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v33[0] = 0;
  v32 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v26 = *MEMORY[0x1E0CF7500];
  *(_OWORD *)&v31.value = *MEMORY[0x1E0CF7500];
  v11 = *(_QWORD *)(MEMORY[0x1E0CF7500] + 16);
  v31.epoch = v11;
  v30 = v32;
  v29 = v32;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  if (*(_BYTE *)(DerivedStorage + 96))
  {
    APSLogErrorAt();
    v13 = 0;
    v15 = 0;
    v24 = 4294954511;
LABEL_43:
    v23 = 1;
    goto LABEL_29;
  }
  if (!*(_QWORD *)DerivedStorage)
  {
    APSLogErrorAt();
    v13 = 0;
    v15 = 0;
LABEL_42:
    v24 = 4294950553;
    goto LABEL_43;
  }
  if (gLogCategory_APEndpointPlaybackSessionRemoteControl <= 50
    && (gLogCategory_APEndpointPlaybackSessionRemoteControl != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
    MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  else
    MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v13 = MutableCopy;
  CFDictionarySetValue(MutableCopy, CFSTR("type"), CFSTR("setRate"));
  FigCFDictionarySetFloat32();
  v14 = (const void *)*MEMORY[0x1E0CA3D80];
  if (FigCFDictionaryGetCMTimeIfPresent())
  {
    v15 = *(const void **)(DerivedStorage + 48);
    if (v15)
    {
      if ((v32.flags & 1) != 0)
      {
        hostTime = v32;
        v16 = CMClockConvertHostTimeToSystemUnits(&hostTime);
        v17 = *(unsigned int (**)(const void *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 16);
        if (!v17 || v17(v15, v16, &v31))
        {
          if (gLogCategory_APEndpointPlaybackSessionRemoteControl <= 90
            && (gLogCategory_APEndpointPlaybackSessionRemoteControl != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          *(_OWORD *)&v31.value = v26;
          v31.epoch = v11;
        }
      }
      hostTime = v31;
      v15 = (const void *)APSNetworkTimeCopyAsDictionary();
      FigCFDictionarySetValue();
      CFDictionaryRemoveValue(v13, v14);
      HostTimeClock = CMClockGetHostTimeClock();
      CMClockGetTime(&v30, HostTimeClock);
      hostTime = v32;
      rhs = v30;
      CMTimeSubtract(&v29, &hostTime, &rhs);
      hostTime = v29;
      FigCFDictionarySetCMTime();
      goto LABEL_22;
    }
    APSLogErrorAt();
    goto LABEL_42;
  }
  v15 = 0;
LABEL_22:
  if (gLogCategory_APEndpointPlaybackSessionRemoteControl <= 30
    && (gLogCategory_APEndpointPlaybackSessionRemoteControl != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  session_createDataFromDictionary((uint64_t)v13, v33);
  v19 = malloc_type_calloc(0x10uLL, 1uLL, 0x6AEC61D4uLL);
  *v19 = a3;
  v19[1] = a4;
  session_updateIsPlayingAndPostNotification(a1, a5 != 0.0);
  v20 = *(_QWORD *)DerivedStorage;
  v21 = v33[0];
  v22 = *(void (**)(uint64_t, CFTypeRef, void (*)(uint64_t, int, _QWORD *), _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v22)
    v22(v20, v21, session_standardCompletion, v19);
  v23 = 0;
  v24 = 0;
LABEL_29:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  if (a3 && v23)
    a3(v24, a4);
  if (v33[0])
    CFRelease(v33[0]);
  if (v13)
    CFRelease(v13);
  if (v15)
    CFRelease(v15);
  return 0;
}

uint64_t session_GetProxiedProperty(uint64_t a1, const void *a2, uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a5)
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  uint64_t v12;
  CFTypeRef v13;
  void (*v14)(uint64_t, CFTypeRef, _QWORD, _QWORD);
  int v15;
  uint64_t v16;
  void (*v18)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v19;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v19 = 0;
  cf = 0;
  v18 = 0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  if (*(_BYTE *)(DerivedStorage + 96))
  {
    APSLogErrorAt();
    Mutable = 0;
    v16 = 4294954511;
LABEL_18:
    v15 = 1;
    goto LABEL_8;
  }
  if (!*(_QWORD *)DerivedStorage)
  {
    APSLogErrorAt();
    Mutable = 0;
    v16 = 4294950553;
    goto LABEL_18;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("type"), CFSTR("property"));
  CFDictionarySetValue(Mutable, CFSTR("kind"), CFSTR("request"));
  CFDictionarySetValue(Mutable, CFSTR("property"), a2);
  if (a3)
  {
    APEndpointPlaybackSessionSetV2Item(a3, Mutable);
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
  }
  v18 = a4;
  v19 = a5;
  session_addPendingRequest(a1, Mutable, (const UInt8 *)&v18);
  session_createDataFromDictionary((uint64_t)Mutable, &cf);
  v12 = *(_QWORD *)DerivedStorage;
  v13 = cf;
  v14 = *(void (**)(uint64_t, CFTypeRef, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v14)
    v14(v12, v13, 0, 0);
  v15 = 0;
  v16 = 0;
LABEL_8:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  if (a4 && v15)
    a4(a2, 0, v16, a5);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  return 0;
}

uint64_t session_SetProxiedProperty(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  if (*(_BYTE *)(DerivedStorage + 96))
  {
    APSLogErrorAt();
    v9 = 4294954511;
  }
  else if (*(_QWORD *)DerivedStorage)
  {
    session_setProxiedPropertyInternal(a1, a2, a3, a4);
    v9 = 0;
  }
  else
  {
    APSLogErrorAt();
    v9 = 4294950553;
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  return v9;
}

uint64_t session_PerformRemoteAction(uint64_t a1, uint64_t a2, const void *a3, void (*a4)(uint64_t, _QWORD, uint64_t), uint64_t a5)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v10;
  __CFDictionary *Mutable;
  CFPropertyListRef DeepCopy;
  _QWORD *v13;
  void (*v14)(uint64_t, CFDictionaryRef, _QWORD *);
  uint64_t v15;
  CFTypeRef v16;
  void (*v17)(uint64_t, CFTypeRef, void (*)(uint64_t, CFDictionaryRef, _QWORD *), _QWORD *);
  int v18;
  uint64_t v19;
  _QWORD v21[2];
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  if (*(_BYTE *)(DerivedStorage + 96))
  {
    APSLogErrorAt();
    Mutable = 0;
    DeepCopy = 0;
    v19 = 4294954511;
LABEL_25:
    v18 = 1;
    goto LABEL_12;
  }
  if (!*(_QWORD *)DerivedStorage)
  {
    APSLogErrorAt();
    Mutable = 0;
    DeepCopy = 0;
    v19 = 4294950553;
    goto LABEL_25;
  }
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (FigCFEqual())
  {
    CFDictionarySetValue(Mutable, CFSTR("type"), CFSTR("streamingKey"));
    CFDictionarySetValue(Mutable, CFSTR("kind"), CFSTR("request"));
    FigCFDictionarySetValueFromKeyInDict();
    DeepCopy = CFPropertyListCreateDeepCopy(v10, a3, 2uLL);
    if (DeepCopy)
    {
      CFDictionarySetValue(Mutable, CFSTR("params"), DeepCopy);
      v21[0] = a4;
      v21[1] = a5;
      session_addPendingRequest(a1, Mutable, (const UInt8 *)v21);
      v13 = 0;
      v14 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    if (!FigCFEqual())
    {
      FigSignalErrorAt();
      v18 = 0;
      v19 = 0;
      DeepCopy = 0;
      goto LABEL_12;
    }
    v13 = malloc_type_calloc(0x10uLL, 1uLL, 0x47AF9CCBuLL);
    *v13 = a4;
    v13[1] = a5;
    CFDictionarySetValue(Mutable, CFSTR("type"), CFSTR("unhandledURL"));
    CFDictionarySetValue(Mutable, CFSTR("kind"), CFSTR("response"));
    FigCFDictionarySetValueFromKeyInDict();
    DeepCopy = CFPropertyListCreateDeepCopy(v10, a3, 2uLL);
    if (DeepCopy)
    {
      CFDictionarySetValue(Mutable, CFSTR("response"), DeepCopy);
      v14 = session_performActionUnhandledURLResponseCompletion;
LABEL_9:
      session_createDataFromDictionary((uint64_t)Mutable, &cf);
      v15 = *(_QWORD *)DerivedStorage;
      v16 = cf;
      v17 = *(void (**)(uint64_t, CFTypeRef, void (*)(uint64_t, CFDictionaryRef, _QWORD *), _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v17)
        v17(v15, v16, v14, v13);
      goto LABEL_11;
    }
  }
  APSLogErrorAt();
  FigSignalErrorAt();
LABEL_11:
  v18 = 0;
  v19 = 0;
LABEL_12:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  if (a4 && v18)
    a4(v19, 0, a5);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (DeepCopy)
    CFRelease(DeepCopy);
  return 0;
}

uint64_t session_SetEventHandler(const void *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  _QWORD *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = malloc_type_calloc(0x20uLL, 1uLL, 0x32F28169uLL);
  *v9 = a1;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  if (a1)
  {
    CFRetain(a1);
    a4 = (const void *)v9[3];
  }
  if (a4)
    CFRetain(a4);
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 144), v9, (dispatch_function_t)session_setEventHandlerInternal);
  return 0;
}

uint64_t session_ensureRemoteControlSessionCreated(uint64_t a1)
{
  uint64_t *DerivedStorage;
  uint64_t *v3;
  __CFDictionary *Mutable;
  const __CFDictionary *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, void (*)(uint64_t, uint64_t, const __CFData *, const void *), uint64_t);
  uint64_t v9;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return 0;
  v3 = DerivedStorage;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    return 4294950555;
  }
  v5 = Mutable;
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA4518], (const void *)*MEMORY[0x1E0CA4500]);
  FigCFDictionarySetInt32();
  v6 = APEndpointRemoteControlSessionAirPlayCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], (const void *)v3[5], v3[3], v5, 1, v3);
  if ((_DWORD)v6)
  {
    v9 = v6;
    goto LABEL_8;
  }
  v7 = *v3;
  v8 = *(uint64_t (**)(uint64_t, void (*)(uint64_t, uint64_t, const __CFData *, const void *), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v8)
  {
    v9 = 4294954514;
LABEL_8:
    APSLogErrorAt();
    goto LABEL_9;
  }
  v9 = v8(v7, session_handleRemoteControlSessionEvent, a1);
  if ((_DWORD)v9)
    goto LABEL_8;
LABEL_9:
  CFRelease(v5);
  return v9;
}

void session_addPendingRequest(uint64_t a1, __CFDictionary *a2, const UInt8 *a3)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v6;
  const void *UInt64;
  const void *v8;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v10;
  CFDataRef v11;
  CFDataRef v12;
  CFDataRef v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionarySetValue(a2, CFSTR("kind"), CFSTR("request"));
  ++*(_QWORD *)(DerivedStorage + 176);
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  UInt64 = (const void *)FigCFNumberCreateUInt64();
  if (UInt64)
  {
    v8 = UInt64;
    CFDictionarySetValue(a2, CFSTR("messageID"), UInt64);
    Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v10 = Mutable;
      FigCFDictionarySetValueFromKeyInDict();
      v11 = CFDataCreate(v6, a3, 16);
      if (v11)
      {
        v12 = v11;
        FigCFDictionarySetValue();
        MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 192));
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 184), v8, v10);
        MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 192));
        CFRelease(v10);
        v13 = v12;
      }
      else
      {
        APSLogErrorAt();
        FigSignalErrorAt();
        v13 = v10;
      }
      CFRelease(v13);
    }
    else
    {
      APSLogErrorAt();
      FigSignalErrorAt();
    }
    CFRelease(v8);
  }
  else
  {
    APSLogErrorAt();
    FigSignalErrorAt();
  }
}

void session_handleRemoteControlSessionEvent(uint64_t a1, uint64_t a2, const __CFData *a3, const void *a4)
{
  uint64_t DerivedStorage;
  _QWORD *v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef cf;

  cf = 0;
  if (a4)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (FigCFEqual())
    {
      if (gLogCategory_APEndpointPlaybackSessionRemoteControl <= 50
        && (gLogCategory_APEndpointPlaybackSessionRemoteControl != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else if (FigCFEqual())
    {
      if (a3)
      {
        if (!session_createDictionaryFromData(a3, &cf))
        {
          v7 = malloc_type_calloc(0x10uLL, 1uLL, 0x79974B33uLL);
          v8 = cf;
          *v7 = a4;
          v7[1] = v8;
          CFRetain(a4);
          v9 = (const void *)v7[1];
          if (v9)
            CFRetain(v9);
          dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 144), v7, (dispatch_function_t)session_handleRemoteControlSessionEventInternal);
          goto LABEL_13;
        }
        APSLogErrorAt();
      }
      else
      {
        APSLogErrorAt();
      }
      FigSignalErrorAt();
    }
LABEL_13:
    if (cf)
      CFRelease(cf);
  }
}

CFIndex session_createDictionaryFromData(CFDataRef data, _QWORD *a2)
{
  CFPropertyListRef v3;
  CFIndex Code;
  CFErrorRef error;

  error = 0;
  v3 = CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], data, 1uLL, 0, &error);
  if (error)
  {
    Code = CFErrorGetCode(error);
    if (v3)
      goto LABEL_3;
LABEL_6:
    APSLogErrorAt();
    Code = FigSignalErrorAt();
    goto LABEL_8;
  }
  Code = 0;
  if (!v3)
    goto LABEL_6;
LABEL_3:
  if (a2)
    *a2 = v3;
  else
    CFRelease(v3);
LABEL_8:
  if (error)
    CFRelease(error);
  return Code;
}

void session_handleRemoteControlSessionEventInternal(uint64_t *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFDictionary *v4;
  int v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *Value;
  int v10;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  const void *v13;
  int v14;
  const __CFDictionary *v15;
  const __CFDictionary *v16;
  const void *v17;
  __CFDictionary *v18;
  const __CFString *v19;
  const void *v20;
  const __CFDictionary *v21;
  const __CFDictionary *v22;
  const __CFData *v23;
  _BOOL4 v24;
  const void *v25;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 152))
    goto LABEL_38;
  v3 = DerivedStorage;
  v4 = (const __CFDictionary *)a1[1];
  if (!v4 || (CFDictionaryGetValue(v4, CFSTR("kind")), v5 = FigCFEqual(), v4 = (const __CFDictionary *)a1[1], !v5))
  {
    Value = CFDictionaryGetValue(v4, CFSTR("name"));
    CFDictionaryGetValue((CFDictionaryRef)a1[1], CFSTR("type"));
    v10 = FigCFEqual();
    v11 = (const __CFDictionary *)a1[1];
    if (v10)
    {
      v12 = (const __CFDictionary *)CFDictionaryGetValue(v11, CFSTR("item"));
      if (v12)
        v13 = CFDictionaryGetValue(v12, CFSTR("uuid"));
      else
        v13 = 0;
      CFDictionarySetValue((CFMutableDictionaryRef)a1[1], (const void *)*MEMORY[0x1E0CA3C78], Value);
      CFDictionaryRemoveValue((CFMutableDictionaryRef)a1[1], CFSTR("kind"));
      CFDictionaryRemoveValue((CFMutableDictionaryRef)a1[1], CFSTR("name"));
      if (v13)
        CFDictionarySetValue((CFMutableDictionaryRef)a1[1], (const void *)*MEMORY[0x1E0CA3EA8], v13);
      if (Value)
      {
        if (CFEqual(Value, (CFTypeRef)*MEMORY[0x1E0CA4080]))
          v24 = 1;
        else
          v24 = CFEqual(Value, (CFTypeRef)*MEMORY[0x1E0CA4070]) != 0;
        MEMORY[0x1CAA400CC](*(_QWORD *)(v3 + 72));
        session_updateIsPlayingAndPostNotification(*a1, v24);
        MEMORY[0x1CAA400E4](*(_QWORD *)(v3 + 72));
      }
      if (FigCFEqual())
        APEndpointPlaybackSessionStatsUpdateAtStartUpComplete(*(_QWORD *)(v3 + 136));
      goto LABEL_35;
    }
    CFDictionaryGetValue(v11, CFSTR("type"));
    v14 = FigCFEqual();
    v15 = (const __CFDictionary *)a1[1];
    if (!v14)
    {
      CFDictionaryGetValue(v15, CFSTR("type"));
      if (FigCFEqual())
      {
        CFDictionaryRemoveValue((CFMutableDictionaryRef)a1[1], CFSTR("type"));
        CFDictionarySetValue((CFMutableDictionaryRef)a1[1], (const void *)*MEMORY[0x1E0CA3C80], (const void *)*MEMORY[0x1E0CA3CF8]);
      }
      goto LABEL_35;
    }
    v16 = (const __CFDictionary *)CFDictionaryGetValue(v15, CFSTR("item"));
    if (v16
      || (v16 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1[1], CFSTR("itemCurrent"))) != 0)
    {
      v17 = CFDictionaryGetValue(v16, CFSTR("uuid"));
      CFDictionarySetValue((CFMutableDictionaryRef)a1[1], CFSTR("type"), Value);
      if (!v17)
      {
LABEL_34:
        CFDictionaryRemoveValue((CFMutableDictionaryRef)a1[1], CFSTR("kind"));
        CFDictionaryRemoveValue((CFMutableDictionaryRef)a1[1], CFSTR("name"));
LABEL_35:
        CFDictionaryGetValue((CFDictionaryRef)a1[1], (const void *)*MEMORY[0x1E0CA3C60]);
        if (FigCFDictionaryGetInt32IfPresent())
          APEndpointPlaybackSessionStatsSetLastError(*(_QWORD **)(v3 + 136));
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v3 + 152))(*a1, a1[1], *(_QWORD *)(v3 + 160), *(_QWORD *)(v3 + 168));
        goto LABEL_38;
      }
      v18 = (__CFDictionary *)a1[1];
      v19 = (const __CFString *)*MEMORY[0x1E0CA3EA8];
      v20 = v17;
    }
    else
    {
      v18 = (__CFDictionary *)a1[1];
      v19 = CFSTR("type");
      v20 = Value;
    }
    CFDictionarySetValue(v18, v19, v20);
    goto LABEL_34;
  }
  v6 = CFDictionaryGetValue(v4, CFSTR("messageID"));
  v7 = CFDictionaryGetValue((CFDictionaryRef)a1[1], CFSTR("type"));
  v8 = CFDictionaryGetValue((CFDictionaryRef)a1[1], CFSTR("error"));
  if (v6 && v7)
  {
    if (v8)
      FigCFDictionaryGetInt32IfPresent();
    MEMORY[0x1CAA400CC](*(_QWORD *)(v3 + 192));
    v21 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 184), v6);
    if (v21)
    {
      v22 = v21;
      CFRetain(v21);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v3 + 184), v6);
      MEMORY[0x1CAA400E4](*(_QWORD *)(v3 + 192));
      v23 = (const __CFData *)CFDictionaryGetValue(v22, CFSTR("CompletionContext"));
      session_handleRemoteControlSessionResponse(0, v7, (const __CFDictionary *)a1[1], v23);
      CFRelease(v22);
      goto LABEL_38;
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v3 + 184), v6);
    MEMORY[0x1CAA400E4](*(_QWORD *)(v3 + 192));
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
  }
  FigSignalErrorAt();
LABEL_38:
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v25 = (const void *)a1[1];
  if (v25)
    CFRelease(v25);
  free(a1);
}

void session_updateIsPlayingAndPostNotification(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  const void **v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 96))
  {
    v5 = DerivedStorage;
    if (*(unsigned __int8 *)(DerivedStorage + 81) != a2)
    {
      APEndpointPlaybackSessionUpdateNowPlayingTransaction(a1, a2, &gLogCategory_APEndpointPlaybackSessionRemoteControl, (const void **)(DerivedStorage + 88));
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v7 = Mutable;
      v8 = (const void **)MEMORY[0x1E0C9AE40];
      if (a2)
        v8 = (const void **)MEMORY[0x1E0C9AE50];
      CFDictionarySetValue(Mutable, CFSTR("Playing"), *v8);
      *(_BYTE *)(v5 + 81) = a2;
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      CFRelease(v7);
    }
  }
}

uint64_t session_insertPlayQueueItemInternal(uint64_t a1, const __CFDictionary *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  const void **v11;
  const void *v12;
  const __CFAllocator *v13;
  __CFDictionary *MutableCopy;
  const void *v15;
  const void *v16;
  const __CFString *v17;
  const __CFString *v18;
  const void *v19;
  const __CFString *v20;
  const __CFString *v21;
  uint64_t v22;
  _QWORD *v23;
  const __CFDictionary *v24;
  uint64_t CMBaseObject;
  uint64_t (*v26)(uint64_t, __CFString *, const __CFAllocator *, CFDataRef *);
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  _BOOL4 v31;
  CFStringRef v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v36;
  unsigned int (*v37)(CFTypeRef, const char *, uint64_t, _QWORD, _QWORD, uint64_t, const void **);
  const void *v38;
  uint64_t v39;
  const __CFString *v40;
  const __CFString *v41;
  const void *v42;
  __CFDictionary *Mutable;
  const __CFDictionary *v44;
  __CFDictionary *v45;
  _QWORD *v46;
  uint64_t v47;
  CFTypeRef v48;
  void (*v49)(uint64_t, CFTypeRef, void (*)(uint64_t, int, _QWORD *), _QWORD *);
  uint64_t v50;
  char v52;
  const __CFString *v53;
  uint64_t v54;
  uint64_t v55;
  void *value;
  CFTypeRef v57;
  CFTypeRef v58;
  CFTypeRef v59;
  CFTypeRef cf[5];
  CFDataRef theData;
  UInt8 buffer[28];
  int v63;
  const void *v64;
  CFRange v65;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v58 = 0;
  v59 = 0;
  value = 0;
  v57 = 0;
  if (*(_BYTE *)(DerivedStorage + 96) || !a2)
  {
    APSLogErrorAt();
    v50 = FigSignalErrorAt();
    MutableCopy = 0;
    v18 = 0;
    v21 = 0;
    if (!(_DWORD)v50)
      goto LABEL_99;
LABEL_98:
    APEndpointPlaybackSessionStatsSetLastError(*(_QWORD **)(DerivedStorage + 136));
  }
  if (session_ensureRemoteControlSessionCreated(a1))
  {
    APSLogErrorAt();
    goto LABEL_98;
  }
  v54 = a4;
  v55 = a5;
  v11 = (const void **)MEMORY[0x1E0CA3E08];
  if (gLogCategory_APEndpointPlaybackSessionRemoteControl <= 50
    && (gLogCategory_APEndpointPlaybackSessionRemoteControl != -1 || _LogCategory_Initialize()))
  {
    v12 = (const void *)*MEMORY[0x1E0CA3EA8];
    CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3EA8]);
    CFDictionaryContainsKey(a2, *v11);
    if (a3)
      CFDictionaryGetValue(a3, v12);
    LogPrintF();
  }
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  v15 = (const void *)*MEMORY[0x1E0CA3E70];
  CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3E70]);
  FigCFDictionarySetValue();
  CFDictionaryRemoveValue(MutableCopy, v15);
  CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA3E38]);
  CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA3DE0]);
  v16 = *v11;
  if (!CFDictionaryContainsKey(MutableCopy, *v11))
  {
    v32 = 0;
    v18 = 0;
    v21 = 0;
    goto LABEL_67;
  }
  v17 = (const __CFString *)CFDictionaryGetValue(MutableCopy, v16);
  v18 = v17;
  if (v17)
    CFRetain(v17);
  v19 = (const void *)*MEMORY[0x1E0CA3DF0];
  v20 = (const __CFString *)CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA3DF0]);
  v21 = v20;
  if (v20)
    CFRetain(v20);
  CFDictionaryRemoveValue(MutableCopy, v16);
  CFDictionaryRemoveValue(MutableCopy, v19);
  v22 = CMBaseObjectGetDerivedStorage();
  memset(buffer, 0, sizeof(buffer));
  theData = 0;
  v23 = (_QWORD *)(v22 + 208);
  if (*(_QWORD *)(v22 + 208))
  {
    v63 = 0;
  }
  else
  {
    if (*(_BYTE *)(v22 + 200))
    {
      v53 = v21;
      v24 = a3;
      CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(v22 + 40));
      v26 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFDataRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
      if (v26)
      {
        v63 = v26(CMBaseObject, CFSTR("LocalNetworkIPAddress"), v13, &theData);
        if (!v63)
        {
          v65.location = 0;
          v65.length = 28;
          CFDataGetBytes(theData, v65, buffer);
          v27 = APSGetFBOPropertyInt64() != 0;
          if (v63)
          {
            a3 = v24;
            APSLogErrorAt();
            goto LABEL_49;
          }
          v52 = v27;
          v28 = CMBaseObjectGetDerivedStorage();
          cf[0] = 0;
          if (!*(_BYTE *)(v28 + 200))
            goto LABEL_47;
          v29 = APSenderSessionGetCMBaseObject(*(_QWORD *)(v28 + 40));
          v30 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v30)
          {
            LODWORD(v64) = v30(v29, CFSTR("KeyHolder"), v13, cf);
            if (!(_DWORD)v64)
            {
              if (!cf[0])
                goto LABEL_47;
              v31 = APSGetFBOPropertyInt64() != 0;
              if ((_DWORD)v64)
                APSLogErrorAt();
LABEL_32:
              if (cf[0])
                CFRelease(cf[0]);
              if (v31)
              {
                v33 = CMBaseObjectGetDerivedStorage();
                cf[0] = 0;
                v64 = 0;
                v34 = APSenderSessionGetCMBaseObject(*(_QWORD *)(v33 + 40));
                v35 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                if (!v35 || v35(v34, CFSTR("KeyHolder"), v13, cf))
                  goto LABEL_40;
                v36 = cf[0];
                if (!cf[0])
                  goto LABEL_43;
                v37 = *(unsigned int (**)(CFTypeRef, const char *, uint64_t, _QWORD, _QWORD, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                if (!v37 || v37(v36, "Pair-TLS-PSK", 12, 0, 0, 16, &v64))
LABEL_40:
                  APSLogErrorAt();
                if (cf[0])
                  CFRelease(cf[0]);
LABEL_43:
                v38 = v64;
                if (v64)
                {
                  *(_OWORD *)cf = *(_OWORD *)buffer;
                  *(_OWORD *)((char *)&cf[1] + 4) = *(_OWORD *)&buffer[12];
                  v63 = APLocalPlaybackServerMake(cf, v52, v64, v23);
                  if (v63)
                    APSLogErrorAt();
                  CFRelease(v38);
                  goto LABEL_48;
                }
              }
LABEL_47:
              APSLogErrorAt();
              v63 = -16743;
              goto LABEL_48;
            }
          }
          else
          {
            LODWORD(v64) = -12782;
          }
          APSLogErrorAt();
          v31 = 0;
          goto LABEL_32;
        }
      }
      else
      {
        v63 = -12782;
      }
      APSLogErrorAt();
LABEL_48:
      a3 = v24;
LABEL_49:
      v21 = v53;
      goto LABEL_50;
    }
    APSLogErrorAt();
    v63 = -16743;
  }
LABEL_50:
  if (theData)
    CFRelease(theData);
  if (v63)
  {
    if (gLogCategory_APEndpointPlaybackSessionRemoteControl <= 30
      && (gLogCategory_APEndpointPlaybackSessionRemoteControl != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v32 = 0;
    goto LABEL_67;
  }
  v39 = *(_QWORD *)(DerivedStorage + 208);
  v40 = (const __CFString *)CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA3EA8]);
  if (!APLocalPlaybackServerRegisterPathWithUUIDCreatingHostAndURL(v39, v40, v18, v21, &v58, (CFStringRef *)&v57))
  {
    v32 = CFStringCreateWithFormat(v13, 0, CFSTR("https://%@%@"), v58, v57);
    if (gLogCategory_APEndpointPlaybackSessionRemoteControl <= 30
      && (gLogCategory_APEndpointPlaybackSessionRemoteControl != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (CFDictionaryGetValueIfPresent(MutableCopy, CFSTR("Content-Location"), (const void **)&value))
      v41 = CFSTR("Offline-HLS-Content-Location");
    else
      v41 = CFSTR("Content-Location");
    CFDictionarySetValue(MutableCopy, v41, v32);
    CFDictionarySetValue(MutableCopy, CFSTR("IsTLSEnabled"), (const void *)*MEMORY[0x1E0C9AE50]);
LABEL_67:
    v42 = *(const void **)(DerivedStorage + 32);
    if (v42)
      CFDictionarySetValue(MutableCopy, CFSTR("audioMode"), v42);
    Mutable = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("type"), CFSTR("insertPlayQueueItem"));
    FigCFDictionarySetValueFromKeyInDict();
    CFDictionarySetValue(Mutable, CFSTR("item"), MutableCopy);
    if (a3)
      CFDictionarySetValue(Mutable, CFSTR("itemAfter"), a3);
    *(_BYTE *)(DerivedStorage + 128) = 1;
    v44 = *(const __CFDictionary **)(DerivedStorage + 120);
    if (v44)
    {
      CFRetain(*(CFTypeRef *)(DerivedStorage + 120));
      v45 = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      session_findDiffVideoV2Metadata(0, v44, v45);
      CFDictionarySetValue(Mutable, CFSTR("metadata"), v45);
      if (v45)
        CFRelease(v45);
    }
    session_createDataFromDictionary((uint64_t)Mutable, &v59);
    v46 = malloc_type_calloc(0x10uLL, 1uLL, 0x33433939uLL);
    *v46 = v54;
    v46[1] = v55;
    v47 = *(_QWORD *)DerivedStorage;
    v48 = v59;
    v49 = *(void (**)(uint64_t, CFTypeRef, void (*)(uint64_t, int, _QWORD *), _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v49)
      v49(v47, v48, session_standardCompletion, v46);
    if (v44)
      CFRelease(v44);
    v50 = 0;
    if (MutableCopy)
      goto LABEL_79;
    goto LABEL_80;
  }
  APSLogErrorAt();
  v50 = FigSignalErrorAt();
  if ((_DWORD)v50)
    goto LABEL_98;
LABEL_99:
  Mutable = 0;
  v32 = 0;
  if (MutableCopy)
LABEL_79:
    CFRelease(MutableCopy);
LABEL_80:
  if (v59)
    CFRelease(v59);
  if (Mutable)
    CFRelease(Mutable);
  if (v58)
    CFRelease(v58);
  if (v57)
    CFRelease(v57);
  if (v32)
    CFRelease(v32);
  if (v18)
    CFRelease(v18);
  if (v21)
    CFRelease(v21);
  return v50;
}

void session_handleMetadataEvent(uint64_t a1, const void *a2, int a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  NSObject *v9;
  _QWORD v10[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    if (a3 == 1952807028)
    {
      v8 = DerivedStorage;
      CFRetain(a2);
      CFRetain(a4);
      v9 = *(NSObject **)(v8 + 112);
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = __session_handleMetadataEvent_block_invoke;
      v10[3] = &__block_descriptor_48_e5_v8__0l;
      v10[4] = a2;
      v10[5] = a4;
      dispatch_async(v9, v10);
    }
  }
  else
  {
    APSLogErrorAt();
  }
}

void __session_handleMetadataEvent_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const __CFDictionary *v3;
  uint64_t DerivedStorage;
  double v5;
  double v6;
  double v7;
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  const __CFDictionary *v10;
  CFMutableDictionaryRef MutableCopy;
  const __CFDictionary *v12;
  __CFDictionary *v13;
  const void *v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(const __CFDictionary **)(a1 + 40);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  if (*(_BYTE *)(DerivedStorage + 96))
  {
LABEL_31:
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
    goto LABEL_32;
  }
  if (!*(_BYTE *)(DerivedStorage + 129))
  {
    *(_BYTE *)(DerivedStorage + 129) = 1;
    CFDictionaryGetInt64();
    mach_absolute_time();
    UpTicksToSecondsF();
    v6 = v5;
    if (IsAppleInternalBuild())
      APSSettingsGetDouble();
    else
      v7 = 0.1;
    if (v6 > v7)
    {
      if (gLogCategory_APEndpointPlaybackSessionRemoteControl <= 50
        && (gLogCategory_APEndpointPlaybackSessionRemoteControl != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_31;
    }
  }
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  session_compareAndStoreIfDifferent(CFSTR("album"), 0, v3, Mutable, CFSTR("Album"), 0);
  session_compareAndStoreIfDifferent(CFSTR("artist"), 0, v3, Mutable, CFSTR("Artist"), 0);
  session_compareAndStoreIfDifferent(CFSTR("title"), 0, v3, Mutable, CFSTR("Title"), 0);
  session_compareAndStoreIfDifferent(CFSTR("totalTracks"), 0, v3, Mutable, CFSTR("TotalTrackCount"), 0);
  session_compareAndStoreIfDifferent(CFSTR("trackNumber"), 0, v3, Mutable, CFSTR("TrackNumber"), 0);
  if (FigCFDictionaryGetCount() < 1)
  {
    v12 = 0;
    v13 = 0;
  }
  else
  {
    v10 = *(const __CFDictionary **)(DerivedStorage + 120);
    if (v10)
      MutableCopy = CFDictionaryCreateMutableCopy(v8, 0, v10);
    else
      MutableCopy = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v12 = MutableCopy;
    CFDictionaryMergeDictionary();
    if (*(_BYTE *)(DerivedStorage + 128))
    {
      v13 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      session_findDiffVideoV2Metadata(*(CFDictionaryRef *)(DerivedStorage + 120), v12, v13);
    }
    else
    {
      v13 = 0;
    }
    v14 = *(const void **)(DerivedStorage + 120);
    *(_QWORD *)(DerivedStorage + 120) = v12;
    if (v12)
      CFRetain(v12);
    if (v14)
      CFRelease(v14);
  }
  if (FigCFDictionaryGetCount() >= 1)
    session_setProxiedPropertyInternal(v2, CFSTR("metadata"), 0, v13);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  if (Mutable)
    CFRelease(Mutable);
  if (v12)
    CFRelease(v12);
  if (v13)
    CFRelease(v13);
LABEL_32:
  CFRelease(*(CFTypeRef *)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void session_findDiffVideoV2Metadata(CFDictionaryRef theDict, const __CFDictionary *a2, __CFDictionary *a3)
{
  session_compareAndStoreIfDifferent(CFSTR("Album"), theDict, a2, a3, CFSTR("Album"), &stru_1E8273C10);
  session_compareAndStoreIfDifferent(CFSTR("Artist"), theDict, a2, a3, CFSTR("Artist"), &stru_1E8273C10);
  session_compareAndStoreIfDifferent(CFSTR("Title"), theDict, a2, a3, CFSTR("Title"), &stru_1E8273C10);
  session_compareAndStoreIfDifferent(CFSTR("TotalTrackCount"), theDict, a2, a3, CFSTR("TotalTrackCount"), &stru_1E8273C10);
  session_compareAndStoreIfDifferent(CFSTR("TrackNumber"), theDict, a2, a3, CFSTR("TrackNumber"), &stru_1E8273C10);
}

void session_compareAndStoreIfDifferent(void *key, CFDictionaryRef theDict, const __CFDictionary *a3, __CFDictionary *a4, const void *a5, const void *a6)
{
  const void *Value;
  const void *v12;
  const void *v13;
  int v14;

  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, key);
    if (a3)
      goto LABEL_3;
LABEL_6:
    v14 = FigCFEqual();
    v13 = 0;
    if (v14)
      goto LABEL_7;
LABEL_12:
    v12 = a6;
    if (!a6)
      return;
    goto LABEL_13;
  }
  Value = 0;
  if (!a3)
    goto LABEL_6;
LABEL_3:
  v12 = CFDictionaryGetValue(a3, key);
  if (!FigCFEqual())
  {
    if (v12)
    {
LABEL_13:
      CFDictionarySetValue(a4, a5, v12);
      return;
    }
    goto LABEL_12;
  }
  v13 = v12;
LABEL_7:
  if (a6)
  {
    if (!Value)
    {
      v12 = a6;
      if (!v13)
        goto LABEL_13;
    }
  }
}

void session_standardCompletion(uint64_t a1, int a2, _QWORD *a3)
{
  if (*a3)
    ((void (*)(uint64_t, _QWORD))*a3)(a1, a3[1]);
  free(a3);
}

void session_performActionUnhandledURLResponseCompletion(uint64_t a1, CFDictionaryRef theDict, _QWORD *a3)
{
  void (*v4)(uint64_t, CFDictionaryRef, _QWORD);
  const __CFData *Value;
  CFTypeRef cf;

  cf = 0;
  v4 = (void (*)(uint64_t, CFDictionaryRef, _QWORD))*a3;
  if (!*a3)
    goto LABEL_9;
  if (!theDict)
    goto LABEL_6;
  Value = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("data"));
  if (Value)
  {
    if (!session_createDictionaryFromData(Value, &cf))
    {
      v4 = (void (*)(uint64_t, CFDictionaryRef, _QWORD))*a3;
      theDict = (CFDictionaryRef)cf;
LABEL_6:
      v4(a1, theDict, a3[1]);
      goto LABEL_7;
    }
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
  }
  FigSignalErrorAt();
LABEL_7:
  if (cf)
    CFRelease(cf);
LABEL_9:
  free(a3);
}

void session_setEventHandlerInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)(DerivedStorage + 152) = *(_OWORD *)(a1 + 8);
  v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    v4 = *(const void **)(DerivedStorage + 168);
    *(_QWORD *)(DerivedStorage + 168) = v3;
    CFRetain(v3);
    if (v4)
      CFRelease(v4);
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v5 = *(const void **)(a1 + 24);
  if (v5)
    CFRelease(v5);
  free((void *)a1);
}

void sub_1C9596274(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int32x4_t v25;
  uint64_t v26;
  int32x4_t v27;
  int v28;
  int32x4_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  _BYTE v38[12];
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8) ^ (1543459711 * ((-2 - ((a1 | 0xAE03BA1B) + (~(_DWORD)a1 | 0x51FC45E4))) ^ 0x1D7E4620));
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (v1 + 48);
  v5 = (char *)*(&off_1E8273520 + (v1 ^ 0x98)) - 8;
  v6 = *(_QWORD *)&v5[8 * v1] - 8;
  v26 = v3 - 0x749080D34EC4FB6CLL;
  v20 = v6;
  v21 = v3 - 0x749080D34EC4FB50;
  v24 = v3 - 0x749080D34EC4FB54;
  v30 = v3 - 0x749080D34EC4FB68;
  v32 = ((unint64_t)v38 ^ (v4 - 0x408103C090020B60))
      + ((2 * (_QWORD)v38) & 0x7EFDF87EDFFBE9F0)
      + 0x7E9393EDFEAA3F56;
  v37 = v3 - 0x4FB0CEC404CDA76ALL;
  v19 = v3 - 0x749080D34EC4FB4CLL;
  v8[1] = v2;
  v8[3] = v2 + 0x592515193B69AF09;
  v18 = v3 - 0x749080D34EC4FB78;
  v17 = v3 - 0x749080D34EC4FB77;
  v16 = v3 - 0x749080D34EC4FB76;
  v15 = v3 - 0x749080D34EC4FB75;
  v14 = v3 - 0x749080D34EC4FB70;
  v13 = v3 - 0x749080D34EC4FB74;
  v12 = v3 - 0x749080D34EC4FB73;
  v11 = v3 - 0x749080D34EC4FB72;
  v10 = v3 - 0x749080D34EC4FB71;
  v22 = (char *)&v8[0xFD0CC8D4014BF4D3] + 2;
  v8[2] = v3 - 0x749080D3294C00D5;
  v35 = v1 ^ 0x1B9;
  v34 = v1 ^ 0xA5;
  v29 = vdupq_n_s32(0x6747457Fu);
  v28 = (v1 ^ 0x158) - 368;
  v27 = vdupq_n_s32(0xCE8E8ACC);
  v9 = v1 ^ 0x72;
  v31 = &v39;
  v23 = 0x1799B95FF5A05B56;
  v36 = v1;
  v25 = vdupq_n_s32(0xE7474566);
  v33 = v3 - 0x749080D34EC4FBB0;
  v7 = *(_DWORD *)(v3 - 0x749080D34EC4FB6CLL) & 0x3F;
  *(_BYTE *)(v3 - 0x749080D34EC4FBB0 + (v7 ^ 0x38)) = 20;
  __asm { BR              X8 }
}

uint64_t sub_1C9596668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  int v43;
  int v44;
  uint64_t v45;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 + 8 * ((1831 * (v43 == ((3 * (v44 ^ 0x329)) ^ 0x14F) - 28)) ^ v44))
                                                                                                - 4))(148, a2, a3, a4, a5, a6, a43);
}

uint64_t sub_1C95966B4()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8 * (int)((((v1 + 181096919) & 0xF534AD3F ^ 0x318) * ((v0 ^ 7u) > 7)) ^ v1))
                            - ((346 * (v1 ^ 0x116u)) ^ 0x2B8)))();
}

uint64_t sub_1C9596710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(a11 + v11 + (((v13 - 680) | 0xE2u) ^ (unint64_t)(v14 + 162))) = v16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * ((1729 * ((v12 & 0x38) == 8)) ^ v13)) - 8))();
}

void sub_1C959675C()
{
  JUMPOUT(0x1C9596724);
}

uint64_t sub_1C9596768()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * ((((v2 - 195) ^ 0x1D1) * (v1 != v0)) ^ v2))
                                          - ((v2 - 147) ^ 0x57)))(148);
}

uint64_t sub_1C95967AC@<X0>(char a1@<W0>, int a2@<W1>, uint64_t a3@<X6>, int a4@<W8>)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *(_BYTE *)(a3 + v4 + v6) = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((((unint64_t)(v4 + 1 + v6) < 0x40) * a2) ^ (a4 + 195)))
                            - (a4 ^ v5) * v7
                            + 79))();
}

uint64_t sub_1C95967E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,char a45,__int16 a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t (*v67)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  BOOL v75;
  BOOL v78;
  unint64_t v79;

  v67 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((((v63 + 55) | 0x341u) ^ 0xFFFFFFFFFFFFFC27) + *(_QWORD *)(v64 + 8 * v63));
  v68 = &a63 + a27 - 0x1799B95FF5A05B46;
  v79 = a26 + a27;
  v69 = *(unsigned int *)(a58 - 0x24DFB20F49F753FELL);
  v70 = *(unsigned int *)(a58 - 0x24DFB20F49F753FALL);
  v71 = *(_DWORD *)(a58 - 0x24DFB20F49F753F6);
  v72 = *(_DWORD *)(a58 - 0x24DFB20F49F753F2);
  v73 = *(unsigned __int8 *)(a58 - 0x24DFB20F49F753E6) ^ 0xC8;
  if (v73 == 2)
  {
    v78 = a7 < v79 && (unint64_t)v68 < a7 + 64;
    return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v64
                                                                 + 8
                                                                 * ((1156
                                                                   * ((v78 ^ (a47 + 3 * a45 + 1)) & 1)) ^ ((int)a3 + 359)))
                                                     - 8))(v69, v70);
  }
  else if (v73 == 1)
  {
    v75 = a7 < v79 && (unint64_t)v68 < a7 + 64;
    return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v64
                                                                 + 8
                                                                 * ((37 * ((v75 ^ a3) & 1)) ^ ((int)a3 + 88)))
                                                     - (a3 + 88)
                                                     + 123))(v69, v70);
  }
  else
  {
    *(_DWORD *)(a58 - 0x24DFB20F49F753FELL) = 2 * (*(_DWORD *)(a58 - 0x24DFB20F49F753FELL) ^ v65)
                                            + v65
                                            - (v66 & (4 * (*(_DWORD *)(a58 - 0x24DFB20F49F753FELL) ^ v65)));
    *(_DWORD *)(a58 - 0x24DFB20F49F753FALL) = (*(_DWORD *)(a58 - 0x24DFB20F49F753FALL) ^ v65)
                                            + (v70 ^ v65)
                                            + v65
                                            - (v66 & (2 * ((*(_DWORD *)(a58 - 0x24DFB20F49F753FALL) ^ v65) + (v70 ^ v65))));
    *(_DWORD *)(a58 - 0x24DFB20F49F753F6) = (*(_DWORD *)(a58 - 0x24DFB20F49F753F6) ^ v65)
                                            + (v71 ^ v65)
                                            + v65
                                            - (v66 & (2 * ((*(_DWORD *)(a58 - 0x24DFB20F49F753F6) ^ v65) + (v71 ^ v65))));
    *(_DWORD *)(a58 - 0x24DFB20F49F753F2) = (*(_DWORD *)(a58 - 0x24DFB20F49F753F2) ^ v65)
                                            + (v72 ^ v65)
                                            + v65
                                            - (v66 & (2 * ((*(_DWORD *)(a58 - 0x24DFB20F49F753F2) ^ v65) + (v72 ^ v65))));
    return v67(v69, v70, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43);
  }
}

uint64_t sub_1C95983A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,_DWORD *a28)
{
  uint64_t v28;
  unsigned int v29;

  v29 = *a28 - ((2 * *a28 + 931605802) & (((a3 + 795) | 8) ^ 0x9001555E)) + 1673806237;
  return ((uint64_t (*)(void))(*(_QWORD *)(v28
                                        + 8
                                        * ((2024
                                          * (((2 * v29) & 0xEFDB6FDA ^ 0x80014610) + (v29 ^ 0xBFED1CE5) - 50332801 == 1961735020)) ^ (a3 + 964)))
                            - 8))();
}

uint64_t sub_1C9598444()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((23
                                * (v1 + v0 + ((v2 - 1775456143) ^ 0x1E3EFBACu) < ((v2 - 1775456143) & 0x69D34DFAu) - 434)) ^ v2)))();
}

uint64_t sub_1C95984B8(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3 + 8 * ((98 * (v2 < ((((a2 - 426) | 0x421) - 1030) ^ 0xB))) ^ a2)))();
}

uint64_t sub_1C95984F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;

  *(int8x8_t *)(v7 - 7 + (v10 + v9 + v11 - v12)) = veor_s8(*(int8x8_t *)(a7- 7+ (v10 + v9 + v11 - v12)), (int8x8_t)0x9494949494949494);
  return ((uint64_t (*)(void))(*(_QWORD *)(v14 + 8 * ((238 * (v12 - (v8 & 0xFFFFFFF8) == -8)) ^ v13))
                            - (v13 - 643)
                            + 418))();
}

void sub_1C9598550()
{
  JUMPOUT(0x1C9598520);
}

uint64_t sub_1C959855C(uint64_t a1, int a2)
{
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((((v3 - 260466867) & 0xF86672F ^ 0x56) * (v2 == a2)) ^ v3))
                            - ((v3 - 1606593987) & 0x5FC2AC3F)
                            + 39))();
}

uint64_t sub_1C95985B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;

  v14 = v10 + v9 + v11;
  v15.i64[0] = 0x9494949494949494;
  v15.i64[1] = 0x9494949494949494;
  v16 = a7 + v14;
  v17 = v7 + v14;
  v18 = veorq_s8(*(int8x16_t *)(v16 - 31), v15);
  *(int8x16_t *)(v17 - 15) = veorq_s8(*(int8x16_t *)(v16 - 15), v15);
  *(int8x16_t *)(v17 - 31) = v18;
  return ((uint64_t (*)(void))(*(_QWORD *)(v13
                                        + 8
                                        * ((((v8 & 0xFFFFFFE0) == 32) * ((481 * (v12 ^ 0x29)) ^ 0x3D5)) ^ (v12 + 438)))
                            - 4))();
}

void sub_1C9598624()
{
  JUMPOUT(0x1C95985E0);
}

uint64_t sub_1C9598630()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3 + 8 * (((v2 ^ 0x21A ^ ((v2 - 921) | 2) ^ 0x1FC) * (v0 == v1)) ^ v2)))();
}

uint64_t sub_1C9598660(uint64_t a1, int a2)
{
  char v2;
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD))(v3 + 8 * ((641 * ((v2 & 0x18) == 29 * (a2 ^ 0x1FD) - 1073)) ^ a2)))(a2 ^ 0x1F3u);
}

uint64_t sub_1C95986A0@<X0>(int a1@<W0>, uint64_t a2@<X6>, int a3@<W8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  *(_BYTE *)(v3 + (v4 - 1961735021)) = *(_BYTE *)(a2 + (v4 - 1961735021)) ^ 0x94;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((22 * (v4 - 1 != a3)) ^ (a1 + 923))) - 12))();
}

void cp2g1b9ro()
{
  int v0[8];
  uint64_t v1;

  v1 = *MEMORY[0x1E0C80C00];
  v0[1] = 291625862 - 1334103649 * (v0 ^ 0x68A8C8AE);
  sub_1C95D1C88(v0);
  __asm { BR              X9 }
}

uint64_t sub_1C95987C8()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (48 * (v0 == 0) + 391)) - 8))();
}

uint64_t sub_1C9598810()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  BOOL v3;

  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8 * (v1 - 415)))(40, 2217100586) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((847 * ((v1 ^ v3) & 1)) ^ v1)) - 8))();
}

uint64_t sub_1C9598858(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;

  v7 = (v5 + v6);
  v8 = a1 + 0x6D2DE21DA2E3804ELL;
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0x6018B445646BA20BLL;
  *(_QWORD *)(a1 + 32) = 0;
  v15 = (v5 + 276) ^ (1332649919
                    * (((&v12 | 0x4D6FF0BF) - &v12 + (&v12 & 0xB2900F40)) ^ 0x701C744D));
  v12 = a1 + 0x75136DB457459EB2;
  v14 = v2;
  (*(void (**)(uint64_t *))(v4 + 8 * (v5 ^ 0x1A9)))(&v12);
  v9 = v13;
  v10 = v8 ^ v7 ^ 0x6D2DE21D2783F0BDLL;
  if (v13 != v3)
    v10 = 0;
  *v1 = v10;
  return (v9 - 280600939);
}

void sub_1C9598974(uint64_t a1)
{
  int v1;
  unint64_t v2;

  v1 = *(_DWORD *)(a1 + 16) - 1449114341 * ((a1 - 2002704184 - 2 * (a1 & 0x88A128C8)) ^ 0x47FFD123);
  v2 = ((unint64_t)(*(_DWORD *)(*(_QWORD *)a1 - 0x1BD3A2918E8AF0F9) + 22) >> 3) & 0x3F;
  *(_BYTE *)(*(_QWORD *)a1 - 0x1BD3A2918E8AF0F1 + v2) = 0x80;
  __asm { BR              X14 }
}

uint64_t sub_1C9598AAC()
{
  int v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((v1 != (v0 ^ 0x3D3) - 816) * (((v0 + 1284024971) & 0xB37757CB) + 324)) ^ v0)))();
}

uint64_t sub_1C9598AEC()
{
  int v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2 + 8 * ((31 * (((v1 + 103) ^ 0x3F9u) - v0 < ((v1 + 187) | 8u) - 1058)) ^ v1)))();
}

uint64_t sub_1C9598B28()
{
  unsigned int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((v0 < ((v1 + 188825440) & 0xF4BEBFF1 ^ 0x300))
                                          * ((26 * (v1 ^ 0x3E7)) ^ 0x3D0)) ^ v1))
                            - 8))();
}

uint64_t sub_1C9598B7C@<X0>(_OWORD *a1@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;

  *a1 = 0u;
  a1[1] = 0u;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((((v1 & 0xFFFFFFE0) == 32) * ((v2 - 1564534571) & 0x5D40E39F ^ 0x91)) | (v2 - 121)))
                            - 12))();
}

void sub_1C9598BD0()
{
  JUMPOUT(0x1C9598BB0);
}

uint64_t sub_1C9598BDC()
{
  int v0;
  unsigned int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((57 * (v0 != ((v1 - 366771589) & 0x15DC7EC7) - 711)) | v1)) - 4))();
}

uint64_t sub_1C9598C18@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  *a1 = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((v1 == 1) * (79 * ((v2 - 19) ^ 0x178) - 466)) ^ (v2 - 19))) - 4))();
}

uint64_t sub_1C9598C58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  *(_BYTE *)(a1 + v3) = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((v3 + 1 == v1) * v4) ^ v2)) - 4))();
}

uint64_t sub_1C9598C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(uint64_t *), uint64_t a13, uint64_t a14, unsigned int a15)
{
  void (*v15)(uint64_t *);
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;

  v20 = 515566439 * ((((2 * &a13) | 0x79419D0E) - &a13 - 1017171591) ^ 0x5074C920);
  a13 = v19;
  LODWORD(a14) = 1502915589 - v20;
  HIDWORD(a14) = (v18 + 87) ^ v20;
  v15(&a13);
  a15 = 1580882533
      * (((&a13 | 0x50F7FE9F) - &a13 + (&a13 & 0xAF080160)) ^ 0xC96F4D5F)
      + 2088559452
      + v18
      + 68;
  a13 = v19;
  a14 = v17 + 0x60AE5240038903C6;
  v21 = a12(&a13);
  *(_QWORD *)(v17 - 0x1BD3A2918E8AF0F1) = 0;
  return (*(uint64_t (**)(uint64_t))(v16
                                            + 8
                                            * ((627 * ((((v18 + 57) | 0xB4) + 87) & 1)) ^ ((v18 - 711) | 0xB4))))(v21);
}

uint64_t sub_1C9598DB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned __int8 v5;

  *(_QWORD *)(a1 + v1 + 24) = 0;
  return (*(uint64_t (**)(void))(v3 + 8 * ((((v5 ^ (v1 == 48)) & 1) * v2) ^ v4)))();
}

uint64_t sub_1C9598DE4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3 + 8 * ((((((v2 - 1549902634) & 0x5C61A6BE) - 276) ^ (v2 + 620)) * (v1 == v0)) ^ v2)))();
}

uint64_t sub_1C9598E20()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((((((v1 - 1074) | 0x428) ^ 0x432) & v0) == 0) * ((v1 ^ 0x714) - 524)) ^ v1))
                            - 8))();
}

uint64_t sub_1C9598E5C@<X0>(uint64_t a1@<X8>)
{
  unsigned int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)(a1 + v2) = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (((((v3 - 808) & v1) - 8 != v2) * (10 * ((v3 - 13) ^ 0x301) - 129)) ^ (v3 - 13)))
                            - 4))();
}

uint64_t sub_1C9598EA8@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(a1 + v4) = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((v3 != v4) * v1) ^ v2)) - 4))();
}

uint64_t sub_1C9598ED0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3 + 8 * (((41 * (v2 ^ 0xA7) + 13 * (v2 ^ 0xE6) - 873) * (v1 != v0)) ^ v2)))();
}

uint64_t sub_1C9598F14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_BYTE *)(a1 + v2) = 0;
  return (*(uint64_t (**)(void))(v4 + 8 * (((v2 + 1 != v1) * (((v3 - 553) | 0x10A) ^ 0x172)) ^ (v3 - 886))))();
}

uint64_t sub_1C9598F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(uint64_t *), uint64_t a13, uint64_t a14, int a15)
{
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t (*v31)(uint64_t *);

  v22 = *(_BYTE **)(v16 + 8);
  v23 = 515566439 * ((2 * (&a13 & 0x378AB438) - &a13 - 931836992) ^ 0xA4A14C67);
  a13 = v21;
  LODWORD(a14) = 1502915587 - v23;
  HIDWORD(a14) = (v20 + 19) ^ v23;
  v31 = v15;
  v15(&a13);
  v24 = *v19;
  v25 = 846572393 * (((&a13 | 0x34EDD252) - (&a13 & 0x34EDD252)) ^ 0x28E861B);
  a14 = v18 + 0x265D240CF2C72933;
  LODWORD(a13) = (v24 - ((2 * v24 - 2079786964) & 0xB5C059F6) - 1662736111) ^ v25;
  HIDWORD(a13) = v20 - 1736225715 + v25;
  sub_1C95D5A9C((uint64_t)&a13);
  v26 = *(_DWORD *)(v18 - 0x1BD3A2918E8AF0F5)
      - ((2 * *(_DWORD *)(v18 - 0x1BD3A2918E8AF0F5) - 2079786964) & 0xB5C059F6)
      - 1662736111;
  v27 = 846572393 * (((&a13 | 0x445D2066) - (&a13 & 0x445D2066)) ^ 0x723E742F);
  a14 = v18 + 0x265D240CF2C72937;
  LODWORD(a13) = v26 ^ v27;
  HIDWORD(a13) = v20 - 1736225715 + v27;
  sub_1C95D5A9C((uint64_t)&a13);
  a15 = 1580882533 * ((1292394866 - (&a13 | 0x4D086172) + (&a13 | 0xB2F79E8D)) ^ 0x2B6F2D4D)
      + 2088559452
      + v20;
  a13 = v21;
  a14 = v18 + 0x60AE5240038903C6;
  a12(&a13);
  v28 = 515566439 * ((&a13 & 0x1F5758B | ~(&a13 | 0x1F5758B)) ^ 0x92DE8DD3);
  a13 = v18 - 0x1BD3A2918E8AF109;
  LODWORD(a14) = 1502915577 - v28;
  HIDWORD(a14) = (v20 + 19) ^ v28;
  v29 = v31(&a13);
  *v22 = *(_BYTE *)(v18 - 0x1BD3A2918E8AF109);
  v22[1] = *(_BYTE *)(v18 - 0x1BD3A2918E8AF108);
  v22[2] = *(_BYTE *)(v18 - 0x1BD3A2918E8AF107);
  v22[3] = *(_BYTE *)(v18 - 0x1BD3A2918E8AF106);
  v22[4] = *(_BYTE *)(v18 - 0x1BD3A2918E8AF105);
  v22[5] = *(_BYTE *)(v18 - 0x1BD3A2918E8AF104);
  v22[6] = *(_BYTE *)(v18 - 0x1BD3A2918E8AF103);
  v22[7] = *(_BYTE *)(v18 - 0x1BD3A2918E8AF102);
  v22[8] = *(_BYTE *)(v18 - 0x1BD3A2918E8AF101);
  v22[9] = *(_BYTE *)(v18 - 0x1BD3A2918E8AF100);
  v22[10] = *(_BYTE *)(v18 - 0x1BD3A2918E8AF0FFLL);
  v22[11] = *(_BYTE *)(v18 - 0x1BD3A2918E8AF0FELL);
  v22[12] = *(_BYTE *)(v18 - 0x1BD3A2918E8AF0FDLL);
  v22[13] = *(_BYTE *)(v18 - 0x1BD3A2918E8AF0FCLL);
  v22[14] = *(_BYTE *)(v18 - 0x1BD3A2918E8AF0FBLL);
  v22[15] = *(_BYTE *)(v18 - 0x1BD3A2918E8AF0FALL);
  *(_OWORD *)(v18 - 0x1BD3A2918E8AF109) = 0u;
  *v19 = 1039893482;
  *(_DWORD *)(v18 - 0x1BD3A2918E8AF0F5) = 1039893482;
  *(_OWORD *)(v18 - 0x1BD3A2918E8AF0F1) = 0u;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v17
                                                      + 8
                                                      * ((1996 * (((v20 + 287) ^ 0x43ALL) == 64)) ^ v20))
                                          - 4))(v29);
}

uint64_t sub_1C9599398@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  *(__n128 *)(v5 + v2 + 24) = a2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((((a1 ^ 0x43A) + v2 == 64) * v3) ^ v6)) - 4))();
}

void zxcm2Qme0x(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X9 }
}

uint64_t sub_1C9599478(uint64_t a1, int a2)
{
  uint64_t v2;
  BOOL v3;
  int v4;

  if (a1)
    v3 = a2 == 0;
  else
    v3 = 0;
  v4 = !v3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((27 * v4) ^ 0x1AFu)) - 8))();
}

uint64_t sub_1C95994A8(uint64_t a1)
{
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((137 * (a1 != 0)) ^ 0x250u)) - 4))();
}

uint64_t sub_1C9599508(uint64_t a1, int a2)
{
  _DWORD *v2;
  _DWORD *v4;
  _BOOL4 v5;
  BOOL v6;
  int v7;

  if (a2 == 25)
  {
    v5 = *(unsigned __int8 *)(a1 + 8) == 45;
    __asm { BR              X8 }
  }
  if (a2 == 40)
  {
    *v2 = 20;
    v4 = v2 + 1;
    if (a1)
      v6 = v4 == 0;
    else
      v6 = 1;
    v7 = !v6;
    __asm { BR              X9 }
  }
  return 4294925273;
}

void sub_1C9599E60(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  _BOOL4 v8;

  v1 = 1543459711
     * (((a1 ^ 0x747A70AB | 0xDC01F2B5) - (a1 ^ 0x747A70AB) + ((a1 ^ 0x747A70AB) & 0x23FE0D4A)) ^ 0xE4F981DA);
  v2 = *(_DWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(v3 - 0x1BD3A2918E8AF0F9);
  v5 = *(_DWORD *)(a1 + 16) ^ v1;
  *(_DWORD *)(v3 - 0x1BD3A2918E8AF0F9) = v4 + 8 * v5 - 326031296;
  v6 = v2 ^ v1;
  v7 = v4 + 8 * v5 + 1800039873;
  v8 = v7 < v4 + 2126071169;
  if ((v4 + 2126071169) < 0xBCB4C96B != v7 < 0xBCB4C96B)
    v8 = (v4 + 2126071169) < 0xBCB4C96B;
  *(_DWORD *)(v3 - 0x1BD3A2918E8AF0F5) += ((v5 - 40753912) >> 29) + v8;
  __asm { BR              X10 }
}

uint64_t sub_1C959A018@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;
  _BOOL4 v5;

  v5 = v2 + 530769862 > ((a1 + 1229045409) & 0xB6BE42F6 ^ 0x2210C049) && 571523838 - v1 > (v2 + 530769862);
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (int)(((2 * (((((a1 - 95) & 0xF6) + 79) ^ v5) & 1)) & 0xF7 | (8 * (((((a1 + 1229045409) & 0xB6BE42F6) + 591) ^ v5) & 1))) ^ (a1 + 1229045409) & 0xB6BE42F6))
                            - 12))();
}

uint64_t sub_1C959A0A0()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((7
                                          * ((unint64_t)(2039316388 - v0) - 2039316324 >= (unint64_t)(v1 - 999) - 340)) ^ v1))
                            - (((v1 - 1210) | 0x160u) ^ 0x1EDLL)))();
}

uint64_t sub_1C959A108()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((1019
                                          * (v4 - 0x1BD3A2918E8AF110 - v2 + v0 + 31 < (unint64_t)((v1 - 48) ^ 0xE5u)
                                                                                      - 340)) ^ v1))
                            - 12))();
}

uint64_t sub_1C959A158@<X0>(int8x8_t *a1@<X8>)
{
  uint64_t v1;
  int v2;
  int8x8_t *v3;
  uint64_t v4;

  *a1 = veor_s8(*v3, (int8x8_t)0x9494949494949494);
  return ((uint64_t (*)(int8x8_t *, int8x8_t *))(*(_QWORD *)(v4
                                                                     + 8
                                                                     * ((749 * ((v1 & 0xFFFFFFFFFFFFFFF8) == 8)) ^ v2))
                                                         - ((v2 + 89) ^ 0x21ELL)))(&a1[1], &v3[1]);
}

void sub_1C959A1A8()
{
  JUMPOUT(0x1C959A178);
}

uint64_t sub_1C959A1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 + 8 * ((1625 * ((v11 ^ 0x287 ^ v12) + v13 < ((v11 + 1725126877) & 0x992CA6FB ^ 0xFFFFFDFB))) ^ v11)) - 8))(a1, a2, a3, a4, a5, a6, a7, a8, v15, a10, a11);
}

uint64_t sub_1C959A208()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((((v0 ^ 0x1B9) + 143) * (v1 != 40753912)) ^ v0)) - 8))();
}

uint64_t sub_1C959A24C@<X0>(uint64_t a1@<X8>)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;

  *(_BYTE *)(a1 + (v4 - 1740225932)) = (((v1 + 23) & 0x5F) + 56) ^ *(_BYTE *)(v5
                                                                                          + (v4 - 1740225932));
  v7 = v3 < v2;
  if (v7 == v4 + 455770203 < v2)
    v7 = v4 + 455770203 < v3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((491 * v7) ^ v1)) - 8))();
}

uint64_t sub_1C959A2C0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((2 * (a3 ^ 0x2BC) + 1408) * (v4 == v3)) ^ a3))
                            - ((a3 ^ 0x2BCu)
                             + 174)
                            + 336))();
}

uint64_t sub_1C959A2F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(a1 + v2 + v1) = *(_BYTE *)(v5 + v2 + v1) ^ 0x94;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (((32 * (v2 + 1 == v3)) | ((v2 + 1 == v3) << 6)) ^ (v4 + 850)))
                            - 12))();
}

uint64_t sub_1C959A334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t (*a16)(int *), void (*a17)(int *), void (*a18)(int *), uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,int a24,int a25,int a26,int a27,int *a28,int *a29,unsigned int a30,unsigned int a31)
{
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;

  v37 = 1477295531 * ((&a27 & 0xD665C5E7 | ~(&a27 | 0xD665C5E7)) ^ 0x1E910F4B);
  a28 = v36;
  a27 = (v33 + 446) ^ v37;
  LODWORD(a29) = v37 + 884429994;
  a17(&a27);
  v38 = 1449114341 * (((&a27 | 0x5B094D3) + (~&a27 | 0xFA4F6B2C)) ^ 0xCAEE6D39);
  a30 = v38 - 2043182176;
  a31 = v38 ^ 0x893B2A7A;
  a27 = v33 - v38 + 35;
  a28 = &a23;
  a29 = v36;
  a18(&a27);
  *(_DWORD *)(v34 - 0x1BD3A2918E8AF109) += a23;
  *(_DWORD *)(v34 - 0x1BD3A2918E8AF105) += a24;
  *(_DWORD *)(v34 - 0x1BD3A2918E8AF101) += a25;
  *(_DWORD *)(v34 - 0x1BD3A2918E8AF0FDLL) += a26;
  a27 = v33
      + 1334103649 * (((&a27 | 0xFA15199F) - (&a27 & 0xFA15199F)) ^ 0x92BDD131)
      + 2097345074;
  a28 = (int *)(v34 - 0x134A6E0A0FAD2C16);
  a29 = v36;
  v39 = a16(&a27);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v31
                                                      + 8
                                                      * ((1625
                                                        * (((v33 + 262) ^ 0xFD9226AA) + v35 - v32 < ((v33 + 1725127139) & 0x992CA6FB ^ 0xFFFFFDFB))) ^ (v33 + 262)))
                                          - 8))(v39);
}

uint64_t sub_1C959A564@<X0>(int a1@<W8>, __n128 a2@<Q0>, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v5;

  v5.n128_u64[0] = 0x9494949494949494;
  v5.n128_u64[1] = 0x9494949494949494;
  return (*(uint64_t (**)(__n128, __n128))(v4
                                                   + 8
                                                   * ((910
                                                     * (a3 - v3 + ((a1 - 60) ^ 0xE42C5D6E71750EF0) < (unint64_t)((a1 - 471) | 0x189u) - 477)) ^ (a1 - 60))))(a2, v5);
}

uint64_t sub_1C959A6B4()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;

  *(_BYTE *)(v6 + v1 + v3 + 24) = *(_BYTE *)(v4 + v1 + v3) ^ v8;
  return (*(uint64_t (**)(void))(v5 + 8 * (((((v0 + 78) ^ (v1 + 1 == v2 + 64)) & 1) * v7) ^ v0)))();
}

uint64_t sub_1C959A6F4@<X0>(uint64_t a1@<X8>, int8x16_t a2@<Q1>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;

  *(int8x16_t *)(v7 + a1 + 24) = veorq_s8(*(int8x16_t *)(v3 + a1), a2);
  return (*(uint64_t (**)(void))(v4 + 8 * (((a1 != 48) * (((v2 + v6) & v5) - 553)) ^ v2)))();
}

uint64_t sub_1C959A72C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int *a11, _DWORD *a12, _DWORD *a13, _DWORD *a14, uint64_t a15, uint64_t (*a16)(int *), void (*a17)(int *), void (*a18)(int *), uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,int a24,int a25,int a26,int a27,int a28,int *a29,int *a30,unsigned int a31,unsigned int a32)
{
  uint64_t v32;
  int v33;
  _DWORD *v34;
  int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;

  v36 = 1477295531 * ((&a28 + 1893283138 - 2 * (&a28 & 0x70D93542)) ^ 0x47D20011);
  a29 = v35;
  a28 = (v33 + 223) ^ v36;
  LODWORD(a30) = v36 + 884429994;
  a17(&a28);
  v37 = 1449114341
      * (((&a28 | 0x9034E641) - &a28 + (&a28 & 0x6FCB19B8)) ^ 0x5F6A1FAA);
  a29 = &a24;
  a30 = v35;
  a31 = v37 - 2043182176;
  a32 = v37 ^ 0x893B2A7A;
  a28 = v33 - v37 - 188;
  a18(&a28);
  *v34 += a24;
  *a14 += a25;
  *a13 += a26;
  *a12 += a27;
  a29 = a11;
  a30 = v35;
  a28 = 1334103649 * ((&a28 - 1956947643 - 2 * (&a28 & 0x8B5B5945)) ^ 0xE3F391EB)
      + 2097344851
      + v33;
  v38 = a16(&a28);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v32
                                                      + 8
                                                      * ((((a23 - 40754040) > 0xFFFFFFBF)
                                                        * (7 * (v33 ^ 0x272) - 422)) ^ v33))
                                          - 8))(v38);
}

void sub_1C959A90C()
{
  JUMPOUT(0x1C959A650);
}

uint64_t sub_1C959A930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20)
{
  int v20;
  uint64_t v21;

  return ((uint64_t (*)(void))(*(_QWORD *)(v21 + 8 * ((1270 * (v20 + 1407095276 != (a20 ^ 0x564C6C01))) ^ a20)) - 8))();
}

uint64_t sub_1C959A978@<X0>(unsigned int a1@<W8>, uint64_t a2)
{
  unsigned int v2;
  int v3;
  _BYTE *v4;
  uint64_t v5;
  int v6;
  _BOOL4 v7;

  v6 = v3 - 119;
  v7 = v2 < a1;
  *(_BYTE *)(a2 - 0x1BD3A2918E8AF0F1) = *v4 ^ 0x94;
  if (v7 == a1 > 0x564C6CE5)
    v7 = v2 > 0x564C6CE5;
  return ((uint64_t (*)(BOOL))(*(_QWORD *)(v5 + 8 * ((482 * v7) ^ v6)) - 8))(v2 > 0x564C6CE5);
}

void sub_1C959AA04()
{
  JUMPOUT(0x1C959A9B4);
}

void sub_1C959AA48(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  _BOOL4 v8;

  v1 = 1334103649 * (((a1 | 0x400D215D) - a1 + (a1 & 0xBFF2DEA2)) ^ 0x28A5E9F3);
  v2 = *(_DWORD *)a1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_DWORD *)(v3 - 0x1BD3A2918E8AF0F9);
  v5 = *(_DWORD *)(a1 + 24) ^ v1;
  *(_DWORD *)(v3 - 0x1BD3A2918E8AF0F9) = v4 + 8 * v5 + 1671404544;
  v6 = v2 - v1;
  v7 = v4 + 8 * v5 + 607275381;
  v8 = v7 < v4 - 1064129163;
  if ((v4 - 1064129163) < 0xFE8E315F != v7 < 0xFE8E315F)
    v8 = (v4 - 1064129163) < 0xFE8E315F;
  *(_DWORD *)(v3 - 0x1BD3A2918E8AF0F5) += ((v5 - 327945344) >> 29) + v8;
  __asm { BR              X11 }
}

uint64_t sub_1C959ABE8()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  _BOOL4 v5;

  v5 = (v2 + 656999777) > 0x3AB511E0
    && ((v0 + 1097720765) & 0xBE921B77 ^ 0x3AB51343) - v1 > v2 + 656999777;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((109 * v5) ^ v0)) - 8))();
}

uint64_t sub_1C959AC5C()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((((v0 - 189) ^ 0x200) - 626) * (v1 != 327945344)) ^ (v0 - 189)))
                            - 4))();
}

uint64_t sub_1C959ACA4@<X0>(uint64_t a1@<X8>)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v9;

  *(_BYTE *)(a1 + (v4 - 382675362)) = *(_BYTE *)(v5 + (v4 - 382675362)) ^ 0x94;
  v7 = v4 - 22619771;
  v9 = v7 > v2 && v7 < v3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((254 * v9) ^ v1)) - 4))();
}

uint64_t sub_1C959AD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 8 * (((((v11 + 703) ^ v12) + v13 < 0xFFFFFFC0) * ((v11 + 592) ^ 0x35F)) ^ v11)))(a1, a2, a3, a4, a5, a6, a7, a8, v15, a10, a11);
}

uint64_t sub_1C959AD40()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((721
                                          * ((unint64_t)(v1 + 466 - v0 + 726890966) - 726891722 >= (unint64_t)((v1 + 430) | 0x60u) - 872)) ^ v1))
                            - 4))();
}

uint64_t sub_1C959ADA0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((v4 - v2 + v0 + ((440 * (v1 ^ 0x336u)) ^ 0xE42C5D6E71750C7FLL) < 8)
                                * ((v1 - 1950212056) & 0x743DDFB7 ^ 0x365)) ^ v1)))();
}

uint64_t sub_1C959AE08@<X0>(int8x8_t *a1@<X8>)
{
  uint64_t v1;
  unsigned int v2;
  int8x8_t *v3;
  uint64_t v4;

  *a1 = veor_s8(*v3, (int8x8_t)0x9494949494949494);
  return ((uint64_t (*)(int8x8_t *, int8x8_t *))(*(_QWORD *)(v4
                                                                     + 8
                                                                     * (((4 * ((v1 & 0xFFFFFFFFFFFFFFF8) == 8)) | (8 * ((v1 & 0xFFFFFFFFFFFFFFF8) == 8))) ^ v2))
                                                         - ((v2 - 434) ^ 0x16ELL)))(&a1[1], &v3[1]);
}

void sub_1C959AE58()
{
  JUMPOUT(0x1C959AE2CLL);
}

uint64_t sub_1C959AE60()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (v2 ^ (252 * (v1 == v0))))
                            - (v2 ^ 0x212u)
                            - ((v2 - 580939248) & 0x22A06FFD)
                            + 1756))();
}

uint64_t sub_1C959AEAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(a1 + v2 + v1) = *(_BYTE *)(v5 + v2 + v1) ^ 0x94;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((880 * (v2 + 1 != v3)) ^ (v4 - 466))) - 4))();
}

uint64_t sub_1C959AEEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void (*a16)(_DWORD **), void (*a17)(_DWORD **), uint64_t (*a18)(_DWORD **), uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,int a24,int a25,int a26,_DWORD *a27,int *a28,_DWORD *a29,unsigned int a30,unsigned int a31)
{
  uint64_t v31;
  int v32;
  _DWORD *v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;

  v37 = 961505453 * ((((2 * &a27) | 0xDF547B1A) - &a27 + 274055795) ^ 0x4D51F32B);
  a27 = v33;
  LODWORD(a28) = v37 ^ 0x242ADF64;
  HIDWORD(a28) = v37 + v34 + 256;
  a17(&a27);
  a28 = v33;
  a29 = (_DWORD *)(v35 - 0x5BB4A5E4E854F7DLL);
  LODWORD(a27) = (v34 - 1488871596) ^ (961505453 * (&a27 ^ 0xA2FBCEA6));
  a16(&a27);
  v38 = 1449114341 * ((&a27 & 0xA993976E | ~(&a27 | 0xA993976E)) ^ 0x9932917A);
  LODWORD(a27) = v34 - v38 - 497;
  a28 = &a23;
  a29 = v33;
  a30 = v38 - 2043182176;
  a31 = v38 ^ 0x893B2A7A;
  v39 = a18(&a27);
  *(_DWORD *)(v35 - 0x1BD3A2918E8AF109) += a23;
  *(_DWORD *)(v35 - 0x1BD3A2918E8AF105) += a24;
  *(_DWORD *)(v35 - 0x1BD3A2918E8AF101) += a25;
  *(_DWORD *)(v35 - 0x1BD3A2918E8AF0FDLL) += a26;
  return (*(uint64_t (**)(uint64_t))(v31
                                            + 8
                                            * ((((((v34 ^ 0x26A) + 703) ^ 0xEC73F099) + v36 - v32 < 0xFFFFFFC0)
                                              * (((v34 ^ 0x26A) + 592) ^ 0x35F)) ^ v34 ^ 0x26A)))(v39);
}

uint64_t sub_1C959B0D8@<X0>(int a1@<W8>, __n128 a2@<Q0>, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v5;

  v5.n128_u64[0] = 0x9494949494949494;
  v5.n128_u64[1] = 0x9494949494949494;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128, __n128))(*(_QWORD *)(v4
                                                                                        + 8
                                                                                        * ((960
                                                                                          * (a3
                                                                                           - v3
                                                                                           + ((a1 - 648) ^ 0xE42C5D6E71750FEDLL) < ((107 * ((a1 - 648) ^ 0xE0u)) ^ 0xC6uLL))) ^ (a1 - 648)))
                                                                            - 4))(148, 283, 1012, a2, v5);
}

uint64_t sub_1C959B244(char a1, unint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(v11 + v4 + v8 + 24) = *(_BYTE *)(v9 + v4 + v8) ^ a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * (((((v3 + v6) & v7 ^ a2) + v4 != v5 + 64) * a3) ^ v3)) - 4))();
}

uint64_t sub_1C959B288@<X0>(uint64_t a1@<X8>, int8x16_t a2@<Q1>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;

  *(int8x16_t *)(v5 + a1 + 24) = veorq_s8(*(int8x16_t *)(v3 + a1), a2);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((((v6 ^ (2 * v2) ^ v8) + a1 != 64) * v7) ^ v2)) - 4))();
}

uint64_t sub_1C959B2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11, _DWORD *a12, _DWORD *a13, _DWORD *a14, uint64_t a15, void (*a16)(_DWORD **), void (*a17)(_DWORD **), uint64_t (*a18)(_DWORD **), uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,int a24,int a25,int a26,int a27,_DWORD *a28,int *a29,_DWORD *a30,unsigned int a31,unsigned int a32)
{
  uint64_t v32;
  _DWORD *v33;
  int v34;
  _DWORD *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;

  v36 = 2 * &a28;
  v37 = 961505453 * (((v36 | 0x76CA6E36) - &a28 - 996488987) ^ 0x999EF9BD);
  LODWORD(a29) = v37 ^ 0x242ADF64;
  HIDWORD(a29) = v37 + v34 + 854;
  a28 = v35;
  a17(&a28);
  LODWORD(a28) = (v34 - 1488870998) ^ (961505453 * (((v36 | 0xC6D52E2A) - &a28 + 479553771) ^ 0x419159B3));
  a29 = v35;
  a30 = a14;
  a16(&a28);
  v38 = 1449114341 * (((&a28 | 0xCC00C810) - (&a28 & 0xCC00C810)) ^ 0x35E31FB);
  a31 = v38 - 2043182176;
  a32 = v38 ^ 0x893B2A7A;
  a29 = &a24;
  a30 = v35;
  LODWORD(a28) = v34 - v38 + 101;
  v39 = a18(&a28);
  *v33 += a24;
  *a13 += a25;
  *a12 += a26;
  *a11 += a27;
  return (*(uint64_t (**)(uint64_t))(v32
                                            + 8
                                            * ((624
                                              * (a23 - 327945472 < ((2 * (((v34 + 423) | 0x118) ^ 0x3A8)) ^ 0xFFFFFF22))) ^ v34)))(v39);
}

void sub_1C959B4A4()
{
  JUMPOUT(0x1C959B1D8);
}

uint64_t sub_1C959B4E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20)
{
  int v20;
  uint64_t v21;

  return (*(uint64_t (**)(void))(v21 + 8 * (a20 ^ (2 * (v20 - 1093109897 + ((a20 - 409) | 0x130) == -765163673)))))();
}

void Mib5yocT()
{
  int v0[18];
  uint64_t v1;

  v1 = *MEMORY[0x1E0C80C00];
  v0[1] = 291625862
        - 1334103649
        * (((v0 | 0xAD7F6D24) - v0 + (v0 & 0x528092D8)) ^ 0xC5D7A58A);
  sub_1C95D1C88(v0);
  __asm { BR              X10 }
}

uint64_t sub_1C959B6E8()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((761 * (v2 != 0)) ^ v0)) - 8))();
}

uint64_t sub_1C959B718()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v9;

  v5 = *(_QWORD *)((v2 ^ 0x6D2DE21DA2E3804ELL) - 0x6D2DE21DA2E38036);
  if (v1)
    v6 = v5 == 0x6018B445646BA20BLL;
  else
    v6 = 1;
  v9 = v6 || v4 == 0 || v3 == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((9 * v9) ^ 0x491)) - 12))();
}

uint64_t sub_1C959B79C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((((((unsigned __int16)v0 + 14863) & 0x46BB) - 724) ^ ((v0 - 776) | 0x100))
                                          * (v2 == 0)) ^ v0))
                            - 4))();
}

uint64_t sub_1C959B7DC()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((((v0 - 1592767533) & 0x5EEFB159) - 338) * (LODWORD(STACK[0x230]) != 3)) ^ v0))
                            - ((v0 - 739) | 0x10u)
                            + 336))();
}

uint64_t sub_1C959B828()
{
  _BYTE *v0;

  *v0 = -1;
  return 4294925205;
}

uint64_t sub_1C959C1B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  int v33;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 + 8 * ((645 * (v33 == ((251 * (a9 ^ 0xFF) - 958722840) & 0x3924F17E) + 280600595)) ^ a9)) - 8))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32);
}

uint64_t sub_1C959C210(uint64_t a1)
{
  int v1;
  uint64_t v2;
  BOOL v3;

  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8 * (v1 - 729)))(164, 1043326649) == 0;
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((((v3 ^ (v1 + 34)) & 1) * ((v1 - 26000114) & 0x18CBC5F ^ 0x5A8)) ^ v1)))();
}

uint64_t sub_1C959C27C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,char a35)
{
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v42;

  *(_DWORD *)a1 = 1498173510;
  *(_BYTE *)(a1 + 4) = a35 ^ 0x43;
  *(_WORD *)(a1 + 5) = 769;
  *(_BYTE *)(a1 + 7) = 0;
  *(_DWORD *)(a1 + 8) = -1744830464;
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v36 + 13);
  *(_WORD *)(a1 + 13) = 6799;
  *(_BYTE *)(a1 + 15) = -100;
  v40 = 1503905621 * ((v39 + 512381294 - 2 * ((v39 - 168) & 0x1E8A5216)) ^ 0x43F23CC2);
  *(_DWORD *)(v39 - 164) = v35 - v40 - 302;
  *(_WORD *)(v39 - 168) = v40 + 29076;
  *(_QWORD *)(v39 - 152) = a1 + 0xC7936AAE040491CLL;
  v42 = (*(uint64_t (**)(uint64_t))(v38 + 8 * (v35 ^ 0x4E9)))(v39 - 168);
  *(_WORD *)(a1 + 16) = 256;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v37
                                                      + 8
                                                      * ((39
                                                        * (((a1 - (_QWORD)&STACK[0x260]) & 0xFFFFFFFFFFFFFFE0) == ((v35 + 5) ^ 0x4E4))) ^ v35))
                                          - 12))(v42);
}

uint64_t sub_1C959C3B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  *(_BYTE *)(v3 + v0 - 1079658745) = *(_BYTE *)(v2 + v0 - 1079658745)
                                   - ((2 * *(_BYTE *)(v2 + v0 - 1079658745)) & 0x28)
                                   - 108;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((28 * (v0 - 1 != 3 * (v4 ^ 0x461) + v1)) ^ v4)) - 12))();
}

uint64_t sub_1C959C40C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;

  v5 = v1 + 127 - a1;
  v6 = vrev64q_s8(*(int8x16_t *)(v5 - 15));
  v7 = vextq_s8(v6, v6, 8uLL);
  v8 = vrev64q_s8(*(int8x16_t *)(v5 - 31));
  v9 = vextq_s8(v8, v8, 8uLL);
  v10 = v2 + 127 - a1;
  v11.i64[0] = 0x2828282828282828;
  v11.i64[1] = 0x2828282828282828;
  v12.i64[0] = 0x9494949494949494;
  v12.i64[1] = 0x9494949494949494;
  v13 = vrev64q_s8(vaddq_s8(vsubq_s8(v7, vandq_s8(vaddq_s8(v7, v7), v11)), v12));
  *(int8x16_t *)(v10 - 15) = vextq_s8(v13, v13, 8uLL);
  v14 = vrev64q_s8(vaddq_s8(vsubq_s8(v9, vandq_s8(vaddq_s8(v9, v9), v11)), v12));
  *(int8x16_t *)(v10 - 31) = vextq_s8(v14, v14, 8uLL);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((59 * (a1 == 96)) ^ v3)) - ((v3 - 1104) ^ 3)))();
}

uint64_t sub_1C959C4A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  _BOOL4 v73;
  int v74;
  uint64_t v75;

  v72 = STACK[0x230];
  v73 = LODWORD(STACK[0x230]) == a30;
  v74 = 1449114341 * ((v71 + 912807947 - 2 * ((v71 - 168) & 0x366858B3)) ^ 0xF936A158);
  *(_QWORD *)(v71 - 160) = v69;
  *(_QWORD *)(v71 - 152) = a68;
  *(_QWORD *)(v71 - 168) = a35;
  *(_DWORD *)(v71 - 144) = ((2 * v72) & 0x7BFE7BA6)
                         + (v72 ^ 0xBDFF3EDD ^ (v68 + v70 - 15) ^ (v68 - 254))
                         + 1924529085
                         + v74;
  *(_DWORD *)(v71 - 140) = (v70 + 81) ^ v74;
  v75 = ((uint64_t (*)(uint64_t))((char *)*(&off_1E8273520 + v70 + 142) - 8))(v71 - 168);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x218] + 8 * (v70 ^ (1001 * v73))) - 4))(v75);
}

uint64_t sub_1C959C594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void (*a33)(uint64_t),uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;

  v45 = (v44 + 2125307420) & 0xDA320C7A;
  v46 = v44 + 1491053214;
  a33(a31);
  STACK[0x208] = (unint64_t)&STACK[0xE18];
  v47 = ((uint64_t (*)(uint64_t, unint64_t *, uint64_t))a33)(a32, &STACK[0xE18], 16);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x218] + 8 * (int)(((v45 ^ 0x27B) * (a44 != -16)) ^ v46))
                                          - 4))(v47);
}

void sub_1C959C674()
{
  uint64_t v0;

  STACK[0x200] = v0 + 0x1BD3A2918E8AFD29;
  JUMPOUT(0x1C959C6FCLL);
}

uint64_t sub_1C959C778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;

  LODWORD(STACK[0x228]) = v27 - v24;
  v29 = v27 - v24 - 307;
  v30 = 839339309 * ((v28 - 168) ^ 0xBCE11861);
  *(_QWORD *)(v28 - 160) = a24;
  *(_QWORD *)(v28 - 152) = v26;
  *(_QWORD *)(v28 - 136) = v25;
  *(_DWORD *)(v28 - 168) = v30 + v27 - 68;
  *(_DWORD *)(v28 - 144) = v30 ^ 0x789518A0;
  ((void (*)(uint64_t))(*(_QWORD *)(a1 + 8 * (v27 - 242)) - 4))(v28 - 168);
  return (*(uint64_t (**)(_UNKNOWN **))(STACK[0x218]
                                                + 8
                                                * (((*(_DWORD *)(v28 - 164) == 280600939) * (v29 ^ 0x58DFAEDF)) ^ v27)))(&off_1E8273520);
}

uint64_t sub_1C959C838()
{
  int v0;
  uint64_t v1;
  int v2;

  return (*(uint64_t (**)(void))(v1 + 8 * ((759 * (LODWORD(STACK[0x238]) == ((v0 + v2 - 330) ^ 0x5456CD54))) ^ v2)))();
}

uint64_t sub_1C959C870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;

  *(_DWORD *)(v18 - 168) = v17
                         + 1449114341 * (((v18 - 168) & 0x22A60FE5 | ~((v18 - 168) | 0x22A60FE5)) ^ 0x120709F1)
                         + 500;
  *(_QWORD *)(v18 - 152) = v14;
  *(_QWORD *)(v18 - 144) = a14;
  *(_QWORD *)(v18 - 160) = v15 + 12;
  ((void (*)(uint64_t))(*(_QWORD *)(a1 + 8 * (v17 ^ 0x1E8)) - 8))(v18 - 168);
  return (*(uint64_t (**)(_UNKNOWN **))(STACK[0x218]
                                                + 8 * ((1348 * (*(_DWORD *)(v18 - 136) == (v16 ^ 0x48660BCD))) ^ v17)))(&off_1E8273520);
}

uint64_t sub_1C959C924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v17 = v14 + (LODWORD(STACK[0x23C]) - 1523647529);
  *(_DWORD *)(v16 - 136) = (v15 + 63) ^ (846572393 * ((v16 - 168) ^ 0x36635449));
  *(_QWORD *)(v16 - 152) = v13;
  *(_QWORD *)(v16 - 144) = a13;
  *(_QWORD *)(v16 - 168) = v17;
  *(_QWORD *)(v16 - 160) = &STACK[0x309E6C8145C33E6B];
  ((void (*)(uint64_t))(*(_QWORD *)(a1 + 8 * (v15 - 180)) - 8))(v16 - 168);
  return (*(uint64_t (**)(_UNKNOWN **))(STACK[0x218]
                                                + 8
                                                * ((1419 * (*(_DWORD *)(v16 - 132) == LODWORD(STACK[0x228]) - 1210452590)) ^ v15)))(&off_1E8273520);
}

uint64_t sub_1C959C9F4(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t (*v3)(void);
  int v4;
  int v5;

  v5 = (v4 + 9543862) | 0x584E08A6;
  STACK[0x220] = *(_QWORD *)(a1 + 8 * (v2 + v5 + 131)) - 4;
  STACK[0x228] = *(_QWORD *)(a1 + 8 * (v5 ^ (v1 - 3)));
  return v3();
}

uint64_t sub_1C959CA64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  int v39;
  int v40;
  uint64_t v41;
  int v42;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41
                                                                                 + 8
                                                                                 * (((v42 == ((v40 + v39 + 57) ^ 0x10B9A13B))
                                                                                   * (((v40 + v39 + 57) | 0xAC) ^ 0x44B)) | (v40 + v39 + 41)))
                                                                     - 4))(a1, a2, a3, a39);
}

uint64_t sub_1C959CABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v63;
  uint64_t v64;
  int v65;
  unsigned int v67;
  uint64_t (*v68)(uint64_t);
  int v69;
  uint64_t v70;
  unint64_t v71;

  v65 = v64 - 168;
  *(_QWORD *)(v64 - 168) = a21;
  *(_DWORD *)(v64 - 160) = (v63 - 483687964) ^ (1334103649
                                              * ((((v64 - 168) | 0x86A7AF9E) - ((v64 - 168) & 0x86A7AF9E)) ^ 0xEE0F6730));
  sub_1C95D1B34((uint64_t *)(v64 - 168));
  v67 = 1332649919 * (((v65 | 0xC8F54A0E) - v65 + (v65 & 0x370AB5F0)) ^ 0xF586CEFC);
  *(_QWORD *)(v64 - 160) = *(_QWORD *)(a1 + 8 * (v63 ^ 0x1D8));
  *(_DWORD *)(v64 - 168) = v67 + 247636025;
  *(_QWORD *)(v64 - 144) = a21;
  *(_DWORD *)(v64 - 152) = v63 + 411 + v67;
  v68 = (uint64_t (*)(uint64_t))STACK[0x228];
  ((void (*)(uint64_t))STACK[0x228])(v64 - 168);
  v69 = 1332649919 * (((v65 | 0x7F92D08F) - (v65 & 0x7F92D08F)) ^ 0x42E1547D);
  *(_DWORD *)(v64 - 152) = v63 + 411 + v69;
  *(_QWORD *)(v64 - 160) = a22;
  *(_QWORD *)(v64 - 144) = a21;
  *(_DWORD *)(v64 - 168) = v69 + 247636010;
  v70 = v68(v64 - 168);
  v71 = STACK[0x218];
  STACK[0x208] = a21 - 0x1BD3A2918E8AF105;
  STACK[0x200] = a63 - 0x1BD3A2918E8AF105;
  *(_DWORD *)(a63 - 0x1BD3A2918E8AF109) = *(_DWORD *)(a21 - 0x1BD3A2918E8AF109);
  *(_DWORD *)STACK[0x200] = *(_DWORD *)STACK[0x208];
  *(_DWORD *)(a63 - 0x1BD3A2918E8AF101) = *(_DWORD *)(a21 - 0x1BD3A2918E8AF101);
  *(_DWORD *)(a63 - 0x1BD3A2918E8AF0FDLL) = *(_DWORD *)(a21 - 0x1BD3A2918E8AF0FDLL);
  *(_DWORD *)(a63 - 0x1BD3A2918E8AF0F9) = *(_DWORD *)(a21 - 0x1BD3A2918E8AF0F9);
  *(_DWORD *)(a63 - 0x1BD3A2918E8AF0F5) = *(_DWORD *)(a21 - 0x1BD3A2918E8AF0F5);
  return (*(uint64_t (**)(uint64_t))(v71
                                            + 8
                                            * ((532
                                              * (((a63 - a21 < ((127 * (v63 ^ 0x1E0u)) ^ 0x16DuLL)) ^ (127 * (v63 ^ 0xE0))) & 1)) ^ (127 * (v63 ^ 0x1E0)))))(v70);
}

uint64_t sub_1C959CD78@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)(v4 + a1 + 24) = *(_OWORD *)(v3 + a1 + 24);
  return (*(uint64_t (**)(void))(v5 + 8 * (((a1 != 48) * v2) ^ v1)))();
}

uint64_t sub_1C959CDAC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_BYTE *)(v7 + v0 + v4 + 24) = *(_BYTE *)(v6 + v0 + v4 + 24);
  return (*(uint64_t (**)(void))(v8 + 8 * ((((v5 ^ v3 ^ v9) + v0 == v1 + 64) * v2) ^ v5)))();
}

uint64_t sub_1C959CDE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,_BYTE *a42)
{
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;

  *a42 = v43 + v44 - 87 - 13;
  v46 = 1332649919 * (((~(v45 - 168) & 0x8B6B85C) - (~(v45 - 168) | 0x8B6B85D)) ^ 0x35C53CAF);
  *(_QWORD *)(v45 - 160) = a42;
  *(_QWORD *)(v45 - 144) = v42;
  *(_DWORD *)(v45 - 168) = v46 + 247635977;
  *(_DWORD *)(v45 - 152) = v46 + v44 + 411;
  ((void (*)(uint64_t))STACK[0x228])(v45 - 168);
  v47 = STACK[0x210] + 16 * (int)v43 + 236148720;
  *(_QWORD *)(v45 - 168) = v42;
  *(_QWORD *)(v45 - 160) = v47;
  *(_DWORD *)(v45 - 152) = v44
                         + 1449114341 * ((((2 * (v45 - 168)) | 0x7C7AA89C) - (v45 - 168) + 1103276978) ^ 0x7163ADA5)
                         + 583;
  v48 = ((uint64_t (*)(uint64_t))STACK[0x220])(v45 - 168);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x218]
                                                      + 8
                                                      * (((((v44 - 718210022) & 0x2ACF037F) + 1003) * (v43 == 253676169)) ^ v44))
                                          - 4))(v48);
}

void sub_1C959CF10()
{
  JUMPOUT(0x1C959CCE8);
}

uint64_t sub_1C959CF24()
{
  int v0;
  uint64_t v1;
  __n128 v2;
  __n128 v3;

  v2.n128_u64[0] = 0x2828282828282828;
  v2.n128_u64[1] = 0x2828282828282828;
  v3.n128_u64[0] = 0x9494949494949494;
  v3.n128_u64[1] = 0x9494949494949494;
  return ((uint64_t (*)(__n128, __n128))(*(_QWORD *)(v1
                                                             + 8
                                                             * ((27
                                                               * ((((v0 ^ 0x3A6) - 521) | 0x440)
                                                                - 1257
                                                                + 19 * (v0 ^ 0x181u) > 0x7FFFFFEE)) ^ v0 ^ 0x3A6))
                                                 - 12))(v2, v3);
}

uint64_t sub_1C959D1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  int v62;
  int v63;
  uint64_t v64;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v64
                                                     + 8
                                                     * (((((v62 ^ 0x47E) * v63) ^ 0x336)
                                                       * ((unint64_t)(a43 - a62 - 112) < 0x10)) ^ v62)))(a1, 2267886621);
}

uint64_t sub_1C959D238@<X0>(char a1@<W1>, uint64_t a2@<X3>, char a3@<W4>, uint64_t a4@<X5>, int a5@<W7>, uint64_t a6@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  *(_BYTE *)(a2 + v7 + a4) = *(_BYTE *)(a6 + v7 + a4)
                           - ((*(_BYTE *)(a6 + v7 + a4) << (((v6 + a1) & a3) - 97)) & v10)
                           - 108;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (((v7 + 1 != v8 + 16) * a5) ^ v6)) - 8))();
}

#error "1C959D9B0: call analysis failed (funcsize=380)"

void sub_1C959D9B4()
{
  JUMPOUT(0x1C959D47CLL);
}

uint64_t sub_1C959D9D8(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,_QWORD *a44,_QWORD *a45,_QWORD *a46,_QWORD *a47,_QWORD *a48,_QWORD *a49,_QWORD *a50,_QWORD *a51,_QWORD *a52,_QWORD *a53,_QWORD *a54,_QWORD *a55,_QWORD *a56,_QWORD *a57,_QWORD *a58,_QWORD *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t (*a66)(void);
  unsigned __int8 v66;
  uint64_t v67;
  unsigned __int8 v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  char v84;
  char v85;

  v73 = *(_BYTE *)(*a59 + (*(unsigned __int8 *)(v67 - 16) ^ a7));
  *(_BYTE *)(v67 - 16) = v73 + (~(2 * v73) | 0xD7) - 107;
  *(_BYTE *)(v67 - 12) = *(_BYTE *)(*a58 + v68) - (v72 & (2 * *(_BYTE *)(*a58 + v68))) - 108;
  *(_BYTE *)(v67 - 8) = *(_BYTE *)(*a57 + a1) - (v72 & (2 * *(_BYTE *)(*a57 + a1))) - 108;
  *(_BYTE *)(v67 - 4) = *(_BYTE *)(*a56 + v69) - (v72 & (2 * *(_BYTE *)(*a56 + v69))) - 108;
  v74 = *(_BYTE *)(*a55 + (v70 ^ a7));
  *(_BYTE *)(v67 - 3) = v74 - (v72 & (2 * v74)) - 108;
  v75 = *(_BYTE *)(*a54 + (*(unsigned __int8 *)(v67 - 11) ^ a7));
  *(_BYTE *)(v67 - 7) = v75 - (v72 & (2 * v75)) - 108;
  v76 = *(_BYTE *)(*a53 + (*(unsigned __int8 *)(v67 - 15) ^ a7));
  *(_BYTE *)(v67 - 11) = v76 - (v72 & (2 * v76)) - 108;
  v77 = *(_BYTE *)(*a52 + (v71 ^ a7));
  *(_BYTE *)(v67 - 15) = v77 - (v72 & (2 * v77)) - 108;
  v78 = *(unsigned __int8 *)(v67 - 14);
  v79 = *(_BYTE *)(*a51 + (v66 ^ a7));
  *(_BYTE *)(v67 - 14) = v79 - (v72 & (2 * v79)) - 108;
  *(_BYTE *)(v67 - 6) = *(_BYTE *)(*a50 + (v78 ^ a7)) + (~(2 * *(_BYTE *)(*a50 + (v78 ^ a7))) | 0xD7) - 107;
  v80 = *(unsigned __int8 *)(v67 - 10);
  v81 = *(_BYTE *)(*a49 + (*(unsigned __int8 *)(v67 - 2) ^ a7));
  *(_BYTE *)(v67 - 10) = v81 - (v72 & (2 * v81)) - 108;
  *(_BYTE *)(v67 - 2) = *(_BYTE *)(*a48 + (v80 ^ a7)) - (v72 & (2 * *(_BYTE *)(*a48 + (v80 ^ a7)))) - 108;
  v82 = *(unsigned __int8 *)(v67 - 13);
  v83 = *(_BYTE *)(*a47 + (*(unsigned __int8 *)(v67 - 9) ^ a7));
  *(_BYTE *)(v67 - 13) = v83 - (v72 & (2 * v83)) - 108;
  v84 = *(_BYTE *)(*a46 + (*(unsigned __int8 *)(v67 - 5) ^ a7));
  *(_BYTE *)(v67 - 9) = v84 - (v72 & (2 * v84)) - 108;
  v85 = *(_BYTE *)(*a45 + (*(unsigned __int8 *)(v67 - 1) ^ a7));
  *(_BYTE *)(v67 - 5) = v85 - (v72 & (2 * v85)) - 108;
  *(_BYTE *)(v67 - 1) = *(_BYTE *)(*a44 + (v82 ^ a7)) - (v72 & (2 * *(_BYTE *)(*a44 + (v82 ^ a7)))) - 108;
  return a66();
}

uint64_t sub_1C959DC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,int a41,int a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  uint64_t v68;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v68
                                                     + 8
                                                     * ((((a42 & 0x983509DD) + 901257801 > 0x35B81BC5) * a40) ^ 0x1D7)))(250301704, a68);
}

uint64_t sub_1C959DCB0@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, unsigned int a4@<W4>, int a5@<W5>, int a6@<W7>, int a7@<W8>)
{
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v13 = (v7 + a6) | v10;
  *(_BYTE *)(a2 + a7 + v11 + v13) ^= *(_BYTE *)(v9 + a7 + v11 + v13);
  return (*(uint64_t (**)(void))(v12 + 8 * (((a7 + 1 < ((v13 + a1) & a4) + v8) * ((v13 + a1) ^ a5)) ^ (a3 + v13 + 448))))();
}

void sub_1C959DD0C()
{
  JUMPOUT(0x1C959D184);
}

uint64_t sub_1C959DD40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  uint64_t v67;

  return ((uint64_t (*)(_UNKNOWN **, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 + 8920) - 12))(&off_1E8273520, 2803914097, 362717450, a39, a67);
}

void sub_1C959DDE8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  v8 = ((v7 - a2 - 75) ^ v5) + v6;
  *(_BYTE *)(a5 + v8) ^= *(_BYTE *)(a4 + v8) ^ 0xDD;
  JUMPOUT(0x1C959DDA0);
}

uint64_t sub_1C959DE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  int v50;
  int v51;
  uint64_t v52;
  int v53;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 + 8 * ((v50 + v51) ^ (1111 * (v53 == 280600939)))) - ((v50 + 88310920) & 0xA1DCD3DF ^ (v50 + 71531031) & 0xA2DCDBE7 ^ 0x3A3)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50);
}

uint64_t sub_1C959DE88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  uint64_t a71;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  unsigned int v76;
  uint64_t (*v77)(uint64_t);
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _DWORD *v82;

  v73 = (v71 + 1009);
  v74 = v72 - 168;
  *(_DWORD *)(v72 - 160) = (v71 - 483687646) ^ (1334103649
                                              * ((v72 + 347743592 - 2 * ((v72 - 168) & 0x14BA2610)) ^ 0x7C12EEBE));
  *(_QWORD *)(v72 - 168) = a69;
  sub_1C95D1B34((uint64_t *)(v72 - 168));
  v75 = v71 + 729;
  v76 = 1332649919 * ((v74 & 0x82C0CDE3 | ~(v74 | 0x82C0CDE3)) ^ 0x404CB6EE);
  *(_DWORD *)(v72 - 168) = v76 + 247636025;
  *(_QWORD *)(v72 - 160) = *(&off_1E8273520 + v71 + 28);
  *(_QWORD *)(v72 - 144) = a69;
  *(_DWORD *)(v72 - 152) = v71 + 729 + v76;
  v77 = (uint64_t (*)(uint64_t))STACK[0x228];
  ((void (*)(uint64_t))STACK[0x228])(v72 - 168);
  v78 = 1332649919 * ((((2 * v74) | 0xD655631C) - v74 + 349523570) ^ 0xD659357C);
  *(_QWORD *)(v72 - 144) = a69;
  *(_DWORD *)(v72 - 168) = v78 + 247636010;
  *(_QWORD *)(v72 - 160) = a71;
  *(_DWORD *)(v72 - 152) = v75 + v78;
  v79 = v77(v72 - 168);
  v80 = STACK[0x218];
  v81 = STACK[0x200];
  v82 = (_DWORD *)(STACK[0x200] - 0x1BD3A2918E8AF109);
  STACK[0x210] = a69 - 0x1BD3A2918E8AF105;
  *v82 = *(_DWORD *)(a69 - 0x1BD3A2918E8AF109);
  *(_DWORD *)(v81 - 0x1BD3A2918E8AF105) = *(_DWORD *)STACK[0x210];
  *(_DWORD *)(v81 - 0x1BD3A2918E8AF101) = *(_DWORD *)(a69 - 0x1BD3A2918E8AF101);
  *(_DWORD *)(v81 - 0x1BD3A2918E8AF0FDLL) = *(_DWORD *)(a69 - 0x1BD3A2918E8AF0FDLL);
  *(_DWORD *)(v81 - 0x1BD3A2918E8AF0F9) = *(_DWORD *)(a69 - 0x1BD3A2918E8AF0F9);
  *(_DWORD *)(v81 - 0x1BD3A2918E8AF0F5) = *(_DWORD *)(a69 - 0x1BD3A2918E8AF0F5);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v80
                                                      + 8
                                                      * (int)((((v73 + 45) ^ 0x4B4) * (v81 - a69 < v73 - 1158)) ^ v73))
                                          - 8))(v79);
}

uint64_t sub_1C959E13C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v6 + v1 + v7 + 24) = *(_BYTE *)(v5 + v1 + v7 + 24);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (((2 * (((v1 + 1 == v2 + 64) ^ (v0 + v3)) & 1)) & 0xDF | (32 * (((v1 + 1 == v2 + 64) ^ (v0 + v3)) & 1))) ^ v0))
                            - 8))();
}

uint64_t sub_1C959E188@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  *(_OWORD *)(v6 + a1 + 24) = *(_OWORD *)(v5 + a1 + 24);
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (((a1 == 48) * v2) ^ v7)) - ((15 * (v7 ^ v3)) ^ v4)))();
}

uint64_t sub_1C959E1C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  int v56;
  uint64_t v57;

  STACK[0x230] = v52 ^ 0x150u;
  v55 = (_BYTE *)STACK[0x208];
  *v55 = v51 + 40;
  v56 = 1332649919 * ((((v54 - 168) | 0x7E3BCFD3) + (~(v54 - 168) | 0x81C4302C)) ^ 0x43484B20);
  *(_DWORD *)(v54 - 168) = v56 + 247635977;
  *(_QWORD *)(v54 - 160) = v55;
  *(_DWORD *)(v54 - 152) = v56 + v52 + 729;
  *(_QWORD *)(v54 - 144) = v53;
  ((void (*)(uint64_t))STACK[0x228])(v54 - 168);
  *(_DWORD *)(v54 - 152) = v52
                         + 1449114341
                         * ((((v54 - 168) ^ 0x1B82D0E5) - 1925301004 - 2 * (((v54 - 168) ^ 0x1B82D0E5) & 0x8D3E3CF4)) ^ 0x59E215FA)
                         + 901;
  *(_QWORD *)(v54 - 168) = v53;
  *(_QWORD *)(v54 - 160) = a51 + 16 * (int)v51 - 1076120960;
  v57 = ((uint64_t (*)(uint64_t))STACK[0x220])(v54 - 168);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x218]
                                                      + 8
                                                      * ((((STACK[0x230] ^ 0x1F4) + v51 == 1677870305) * (v52 ^ 0xB3)) ^ v52))
                                          - 12))(v57);
}

void sub_1C959E2F8()
{
  JUMPOUT(0x1C959E09CLL);
}

uint64_t sub_1C959E304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;

  v72 = v71 & 0x405C75EF;
  v73 = ((unint64_t)&STACK[0x258] ^ 0x577BAEEC97D7FF5FLL)
      - 0x471008C00342C95FLL
      + ((2 * (_QWORD)&STACK[0x258]) & 0xAEF75DD92FAFFEB0);
  v74 = STACK[0x218];
  LOBYTE(STACK[0x2EF]) = (v73 ^ 0xBA) * (v73 + 17);
  *((_BYTE *)&a71 + ((v72 - 123) | 0x74) + 2) = ((v73 | 1) ^ 0xBA) * (v73 + 18);
  return ((uint64_t (*)(void))(*(_QWORD *)(v74 + 8 * v72) - 12))();
}

void sub_1C959F69C()
{
  JUMPOUT(0x1C959F658);
}

uint64_t sub_1C959F6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,int a39)
{
  int v39;
  int v40;

  STACK[0x258] = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(a4 + 8 * ((420 * (v40 == (v39 ^ a39) - 1210452283)) ^ v39)) - 8))();
}

void sub_1C959F704()
{
  int v0;
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  int v9;

  v7 = v2[4];
  v8 = v2[5];
  v9 = 1334103649 * ((2 * ((v6 - 168) & 0x660EADF8) - (v6 - 168) - 1712238078) ^ 0xF1599AAC);
  *(_BYTE *)(v6 - 151) = 31 * v2[6] - 97 * ((2 * ((v6 + 88) & 0xF8) - (v6 + 88) + 2) ^ 0xAC) - 107;
  *(_DWORD *)(v6 - 132) = v4 - v9 - ((2 * v4 - 561201878) & 0x8CBBED7E) - 1247521452;
  *(_DWORD *)(v6 - 168) = v9 + v0 + 280;
  *(_BYTE *)(v6 - 136) = (v8 ^ 0x7E) - 97 * ((2 * ((v6 + 88) & 0xF8) - (v6 + 88) + 2) ^ 0xAC) + ((2 * v8) & 0xFC) - 2;
  *(_QWORD *)(v6 - 144) = v5;
  *(_BYTE *)(v6 - 152) = ((v0 - 106) & 0xB7) - 97 * ((2 * ((v6 + 88) & 0xF8) - (v6 + 88) + 2) ^ 0xAC) + 43 * v7 - 104;
  *(_QWORD *)(v6 - 160) = v1;
  sub_1C95CB9C8((_DWORD *)(v6 - 168));
  *v3 = -1;
  JUMPOUT(0x1C959BB7CLL);
}

uint64_t sub_1C959F7F8(uint64_t result)
{
  unsigned int v1;
  BOOL v2;
  int v3;
  int v5;

  v1 = (*(_BYTE *)(result + 8) - 65 * (((result | 0xAD) - (result & 0xAD)) ^ 0x5F)) - 120;
  v2 = v1 > 8;
  v3 = (1 << v1) & 0x105;
  if (v2 || v3 == 0)
    v5 = 280558042;
  else
    v5 = 280600939;
  *(_DWORD *)result = v5;
  return result;
}

void sub_1C959F868(uint64_t a1)
{
  int v1;
  BOOL v2;
  int v4;

  if (*(_QWORD *)(a1 + 16))
    v2 = *(_QWORD *)(a1 + 8) == 0x36B12D3B49E267F1;
  else
    v2 = 1;
  v4 = !v2 && *(_QWORD *)(a1 + 32) != 0x252C3BDA7CBE997ALL;
  v1 = *(_DWORD *)a1 - 839339309 * ((a1 & 0x8DBCAA5A | ~(a1 | 0x8DBCAA5A)) ^ 0xCEA24DC4);
  __asm { BR              X11 }
}

uint64_t sub_1C959F940@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  unsigned __int8 *v3;
  _DWORD *v4;
  int v5;

  v4 = (_DWORD *)(a1 - 0x36B12D3B49E267F1);
  *v4 = 210331622;
  v5 = *v3;
  *v4 = 210331623;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((884 * (v5 == 68)) ^ v2)) - 8))();
}

uint64_t sub_1C959F998()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t v3;
  _DWORD *v4;
  int v5;

  v5 = *(unsigned __int8 *)(v3 + 1);
  *v4 = v2 + 2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((591 * (v5 == 72)) ^ v1)) - 8))();
}

uint64_t sub_1C959F9C4()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t v3;
  _DWORD *v4;
  int v5;

  v5 = *(unsigned __int8 *)(v3 + 2);
  *v4 = v2 + 3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((660 * (v5 == 70)) ^ v1)) - (v1 ^ 0x1E5u) + 219))();
}

uint64_t sub_1C959FA04()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;

  v6 = *(unsigned __int8 *)(v4 + 3);
  *v5 = v1 + 4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * (int)(((((v6 == 87) ^ (v2 + 36)) & 1) * v3) ^ v2))
                            - (v2 ^ v3)
                            + 254))();
}

uint64_t sub_1C959FA48@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  uint64_t result;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;

  v7 = v1 + 1098962622;
  v13 = a1;
  v11 = (v1 + 1098962622) ^ (1477295531
                           * (((&v11 | 0xDC053DAB) - (&v11 & 0xDC053DAB)) ^ 0xEB0E08F8));
  sub_1C95D5CDC((uint64_t)&v11);
  *(_DWORD *)(v5 - 0x252C3BDA7CBE997ALL) = v12;
  *v6 += 4;
  v11 = v7 ^ (1477295531 * ((&v11 & 0x82330690 | ~(&v11 | 0x82330690)) ^ 0x4AC7CC3C));
  v13 = v4 + 8;
  result = sub_1C95D5CDC((uint64_t)&v11);
  v9 = v12;
  *v6 += 4;
  if (v9 == 2128826217)
    v10 = 280600939;
  else
    v10 = v3 + 5;
  *(_DWORD *)(v2 + 4) = v10;
  return result;
}

