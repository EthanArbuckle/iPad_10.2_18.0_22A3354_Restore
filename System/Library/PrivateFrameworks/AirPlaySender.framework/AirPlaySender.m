uint64_t manager_SetDiscoveryMode()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  if (*(_BYTE *)DerivedStorage)
  {
    ++*(_QWORD *)(DerivedStorage + 72);
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v1 = APBrowserControllerSetRequestedDiscoveryMode();
    if ((_DWORD)v1)
      APSLogErrorAt();
  }
  else
  {
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v1 = 0;
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 64));
  return v1;
}

uint64_t APBrowserControllerSetRequestedDiscoveryMode()
{
  return APSDispatchSyncTask();
}

uint64_t browserController_setRequestedDiscoveryModeInternal(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  _QWORD *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  if (gLogCategory_APBrowserController <= 30
    && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(const void **)(a1 + 8);
  if (!v2)
  {
    v2 = (const void *)*MEMORY[0x1E0CA39F0];
    *(_QWORD *)(a1 + 8) = *MEMORY[0x1E0CA39F0];
  }
  v3 = (const void *)*MEMORY[0x1E0CA39E8];
  if (CFEqual(v2, (CFTypeRef)*MEMORY[0x1E0CA39E8]) && CFEqual(*(CFTypeRef *)(*(_QWORD *)a1 + 64), v3))
  {
    CFRetain(*(CFTypeRef *)a1);
    dispatch_async_f(*(dispatch_queue_t *)(*(_QWORD *)a1 + 32), *(void **)a1, (dispatch_function_t)browserController_tickleDetailedMode);
  }
  v4 = *(const void **)(a1 + 8);
  v5 = *(_QWORD **)a1;
  v6 = *(const void **)(*(_QWORD *)a1 + 56);
  v5[6] = *(_QWORD *)(a1 + 16);
  v5[7] = v4;
  if (v4)
    CFRetain(v4);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(*(_QWORD *)a1 + 72);
  v8 = *(const void **)(a1 + 24);
  *(_QWORD *)(*(_QWORD *)a1 + 72) = v8;
  if (v8)
    CFRetain(v8);
  if (v7)
    CFRelease(v7);
  browserController_updateDiscoveryMode(*(_QWORD *)a1);
  return 0;
}

uint64_t browserController_updateDiscoveryMode(uint64_t a1)
{
  const void *DiscoveryModeRequiredByEndpoints;
  int v3;
  CFTypeRef *v4;
  CFIndex Count;
  CFTypeRef v6;
  const void *v7;
  int v8;
  const void *v9;
  const void *v10;
  const void *v11;

  DiscoveryModeRequiredByEndpoints = (const void *)browserController_getDiscoveryModeRequiredByEndpoints(a1);
  v3 = APSIsVirtualMachine();
  v4 = (CFTypeRef *)MEMORY[0x1E0CA39E8];
  if (v3 && !IsAppleInternalBuild())
  {
    v6 = (CFTypeRef)*MEMORY[0x1E0CA39F0];
    if (gLogCategory_APBrowserController > 50
      || gLogCategory_APBrowserController == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_36;
    }
LABEL_19:
    LogPrintF();
    goto LABEL_36;
  }
  Count = CFSetGetCount(*(CFSetRef *)(a1 + 136));
  v6 = *v4;
  if (Count >= 1)
  {
    if (gLogCategory_APBrowserController > 50
      || gLogCategory_APBrowserController == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_36;
    }
    CFSetGetCount(*(CFSetRef *)(a1 + 136));
    goto LABEL_19;
  }
  if (CFEqual(DiscoveryModeRequiredByEndpoints, *v4))
  {
    if (gLogCategory_APBrowserController > 30
      || gLogCategory_APBrowserController == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_36;
    }
    goto LABEL_19;
  }
  v7 = (const void *)*MEMORY[0x1E0CA39F8];
  v8 = CFEqual(DiscoveryModeRequiredByEndpoints, (CFTypeRef)*MEMORY[0x1E0CA39F8]);
  v9 = *(const void **)(a1 + 56);
  if (v8)
  {
    if (CFEqual(*(CFTypeRef *)(a1 + 56), v6) || CFEqual(*(CFTypeRef *)(a1 + 56), (CFTypeRef)*MEMORY[0x1E0CA39E0]))
    {
      v6 = *(CFTypeRef *)(a1 + 56);
      if (gLogCategory_APBrowserController > 30
        || gLogCategory_APBrowserController == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_36;
      }
      goto LABEL_19;
    }
    if (gLogCategory_APBrowserController <= 30
      && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v6 = v7;
  }
  else
  {
    if (gLogCategory_APBrowserController <= 30
      && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v6 = v9;
  }
LABEL_36:
  if (CFEqual(v6, *v4)
    && (APSIsAPMSpeaker()
     && (!APSSettingsIsFeatureEnabled() || !APSIsMemberOfStereoPair())
     || IsAppleTV() && !APSIsMemberOfHTGroup()))
  {
    v6 = (CFTypeRef)*MEMORY[0x1E0CA39E0];
  }
  CFRetain((CFTypeRef)a1);
  if (v6)
    CFRetain(v6);
  v10 = *(const void **)(a1 + 72);
  if (v10)
    CFRetain(v10);
  if (!CFEqual(v6, *(CFTypeRef *)(a1 + 64)))
  {
    v11 = *(const void **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v6;
    if (v6)
      CFRetain(v6);
    if (v11)
      CFRelease(v11);
  }
  return APSDispatchAsyncFHelper();
}

uint64_t browserController_getDiscoveryModeRequiredByEndpoints(uint64_t a1)
{
  uint64_t v2;
  CFIndex CountOfValue;

  if (CFDictionaryGetCountOfValue(*(CFDictionaryRef *)(a1 + 128), CFSTR("Detailed")) <= 0)
  {
    CountOfValue = CFDictionaryGetCountOfValue(*(CFDictionaryRef *)(a1 + 128), CFSTR("Presence"));
    v2 = MEMORY[0x1E0CA39F0];
    if (CountOfValue > 0)
      v2 = MEMORY[0x1E0CA39F8];
  }
  else
  {
    v2 = MEMORY[0x1E0CA39E8];
  }
  return *(_QWORD *)v2;
}

void manager_notifyAvailableEndpointsChanged(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  NSObject *v4;
  int64_t Int64;
  OpaqueCMClock *HostTimeClock;
  CMTime v7;
  CMTime rhs;
  CMTime v9;
  CMTime v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (gLogCategory_APEndpointManager <= 40
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  v3 = *(NSObject **)(DerivedStorage + 56);
  if (v3)
  {
    dispatch_source_cancel(v3);
    v4 = *(NSObject **)(DerivedStorage + 56);
    if (v4)
    {
      dispatch_release(v4);
      *(_QWORD *)(DerivedStorage + 56) = 0;
    }
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  if (CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 168)) >= 10)
    FigCFEqual();
  LODWORD(v9.value) = 0;
  Int64 = APSSettingsGetInt64();
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 64));
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v10, HostTimeClock);
  CMTimeMake(&rhs, Int64, 1000);
  v7 = v10;
  CMTimeAdd(&v9, &v7, &rhs);
  *(CMTime *)(DerivedStorage + 32) = v9;
  if (a1)
    CFRelease(a1);
}

void browserController_setBrowserMode(uint64_t *a1)
{
  uint64_t v2;
  unsigned int (*v3)(uint64_t, _QWORD);
  uint64_t v4;
  unsigned int (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD);
  const void *v12;
  const void *v13;

  if (CFEqual((CFTypeRef)a1[1], (CFTypeRef)*MEMORY[0x1E0CA39F0]))
  {
    v2 = *(_QWORD *)(*a1 + 40);
    v3 = *(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v3 || v3(v2, 0))
    {
LABEL_23:
      APSLogErrorAt();
      goto LABEL_28;
    }
  }
  else if (CFEqual((CFTypeRef)a1[1], (CFTypeRef)*MEMORY[0x1E0CA39F8]))
  {
    v4 = *(_QWORD *)(*a1 + 40);
    v5 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v5 || v5(v4, 1))
      goto LABEL_23;
  }
  else if (CFEqual((CFTypeRef)a1[1], (CFTypeRef)*MEMORY[0x1E0CA39E0]))
  {
    v6 = *(_QWORD *)(*a1 + 40);
    v7 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v7 || v7(v6, 2))
      goto LABEL_23;
  }
  else if (CFEqual((CFTypeRef)a1[1], (CFTypeRef)*MEMORY[0x1E0CA39E8]))
  {
    v8 = *(_QWORD *)(*a1 + 40);
    v9 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v9 || v9(v8, 3))
      goto LABEL_23;
  }
  else if (gLogCategory_APBrowserController <= 90
         && (gLogCategory_APBrowserController != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v10 = *a1;
  if (!*(_BYTE *)(*a1 + 16))
  {
    v11 = *(void (**)(uint64_t, uint64_t, _QWORD))(v10 + 104);
    if (v11)
      v11(a1[1], a1[2], *(_QWORD *)(v10 + 120));
  }
LABEL_28:
  CFRelease((CFTypeRef)*a1);
  v12 = (const void *)a1[1];
  if (v12)
    CFRelease(v12);
  v13 = (const void *)a1[3];
  if (v13)
    CFRelease(v13);
}

void manager_handleDiscoveryModeChanged(const void *a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage;
  const void *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  if (!*(_BYTE *)(DerivedStorage + 1))
  {
    if (gLogCategory_APEndpointManager <= 30
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (FigCFEqual())
    {
      manager_setAVDevicePresence((uint64_t)a3, 0);
      manager_removeAllEndpointsIfNeeded(a3, *(const __CFDictionary **)(DerivedStorage + 168));
      manager_removeAllEndpointsIfNeeded(a3, *(const __CFDictionary **)(DerivedStorage + 176));
    }
    v7 = *(const void **)(DerivedStorage + 88);
    *(_QWORD *)(DerivedStorage + 80) = a2;
    *(_QWORD *)(DerivedStorage + 88) = a1;
    if (a1)
      CFRetain(a1);
    if (v7)
      CFRelease(v7);
    CFRetain(a3);
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a3, (dispatch_function_t)manager_notifyAvailableEndpointsChanged);
  }
  JUMPOUT(0x1CAA400E4);
}

uint64_t __carManager_copyProperty_block_invoke(uint64_t a1)
{
  const __CFAllocator *v2;
  CFArrayRef *v3;
  uint64_t v4;
  const void **v5;
  const CFArrayCallBacks *v6;
  const __CFAllocator *v7;
  CFIndex v8;
  CFTypeRef *v9;
  uint64_t v10;
  CFTypeRef *v11;
  uint64_t result;
  CFArrayRef v13;
  int v14;
  const __CFAllocator *v15;
  __CFDictionary **v16;
  uint64_t DerivedStorage;
  CFMutableDictionaryRef Mutable;
  CFMutableStringRef v19;
  __CFString *v20;
  uint64_t v21;
  uint64_t CMBaseObject;
  unsigned int (*v23)(uint64_t, uint64_t, const __CFAllocator *, CFDictionaryRef *);
  const void *Value;
  uint64_t v25;
  uint64_t v26;
  CFAllocatorRef v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, const __CFString *, CFAllocatorRef, CFDictionaryRef *);
  const __CFDictionary *v30;
  const __CFDictionary *TypedValue;
  const __CFDictionary *v32;
  const __CFDictionary *v33;
  const __CFDictionary *v34;
  CFDictionaryRef v35;
  int v36;
  __CFDictionary *theDict;
  void *v38;
  void *key;
  uint64_t v40;
  const void *v41;
  CFDictionaryRef v42;
  CFDictionaryRef v43[2];

  if (**(_BYTE **)(a1 + 40))
  {
    result = APSLogErrorAt();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -16712;
    return result;
  }
  if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0CA3A28]))
  {
    v2 = *(const __CFAllocator **)(a1 + 64);
    v3 = *(CFArrayRef **)(a1 + 72);
    v4 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 296);
    if (v4)
    {
      v5 = (const void **)(v4 + 40);
      v6 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      v7 = v2;
      v8 = 1;
    }
    else
    {
      v6 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      v7 = v2;
      v5 = 0;
      v8 = 0;
    }
    v13 = CFArrayCreate(v7, v5, v8, v6);
    if (v13)
    {
      v14 = 0;
      *v3 = v13;
    }
    else
    {
      APSLogErrorAt();
      v14 = -16711;
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v14;
    result = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    if (!(_DWORD)result)
      return result;
    return APSLogErrorAt();
  }
  if (!CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0CA3A30]))
  {
    if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0CA3A40]))
    {
      result = (uint64_t)CFRetain((CFTypeRef)*MEMORY[0x1E0CA3A68]);
      **(_QWORD **)(a1 + 72) = result;
      return result;
    }
    if (!CFEqual(*(CFTypeRef *)(a1 + 48), CFSTR("ShowInfo")))
    {
      if (gLogCategory_APEndpointManagerCarPlay <= 60
        && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -12784;
      return APSLogErrorAt();
    }
    v15 = *(const __CFAllocator **)(a1 + 64);
    v16 = *(__CFDictionary ***)(a1 + 72);
    v41 = *(const void **)(a1 + 56);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    Mutable = CFDictionaryCreateMutable(v15, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      theDict = Mutable;
      v19 = CFStringCreateMutable(v15, 0);
      if (v19)
      {
        v20 = v19;
        v21 = 0;
        v40 = *MEMORY[0x1E0CF1E28];
        key = (void *)*MEMORY[0x1E0CF1E30];
        v38 = (void *)*MEMORY[0x1E0CF1EE8];
        do
        {
          v43[0] = 0;
          if (*(_QWORD *)(DerivedStorage + v21 + 96))
          {
            CMBaseObject = APBrowserGetCMBaseObject();
            v23 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            if (v23)
            {
              if (!v23(CMBaseObject, v40, v15, v43))
              {
                Value = CFDictionaryGetValue(v43[0], key);
                CFStringAppendFormat(v20, 0, CFSTR("\n%@"), Value);
                if (v43[0])
                  CFRelease(v43[0]);
              }
            }
            CFStringAppend(v20, CFSTR("\n"));
            CFStringAppendFormat(v20, 0, CFSTR("+-+ Car browser %s state +-+\n"), *(_QWORD *)(DerivedStorage + v21 + 88));
            CFStringAppend(v20, CFSTR("\n"));
            if (*(_BYTE *)(DerivedStorage + v21 + 104))
              v25 = 89;
            else
              v25 = 78;
            CFStringAppendFormat(v20, 0, CFSTR("browsing %c"), v25);
            CFStringAppend(v20, CFSTR("\n"));
            if (*(_QWORD *)(DerivedStorage + v21 + 120))
            {
              v42 = 0;
              CFStringAppend(v20, CFSTR("\n"));
              CFStringAppend(v20, CFSTR("+-+ Endpoint state +-+\n"));
              CFStringAppend(v20, CFSTR("\n"));
              v26 = APSGetFBOPropertyInt64() ? 89 : 78;
              CFStringAppendFormat(v20, 0, CFSTR("Connected: %c\n"), v26);
              v27 = CFGetAllocator(v41);
              v28 = FigEndpointGetCMBaseObject();
              v29 = *(unsigned int (**)(uint64_t, const __CFString *, CFAllocatorRef, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
              if (v29)
              {
                if (!v29(v28, CFSTR("EndpointShowInfo"), v27, &v42))
                {
                  v30 = v42;
                  if (v42)
                  {
                    CFDictionaryGetValue(v42, CFSTR("Name"));
                    CFStringAppendF();
                    CFDictionaryGetValue(v30, CFSTR("DeviceID"));
                    CFStringAppendF();
                    CFDictionaryGetValue(v30, CFSTR("Model"));
                    CFStringAppendF();
                    CFDictionaryGetValue(v30, CFSTR("SourceVersion"));
                    CFStringAppendF();
                    CFDictionaryGetValue(v30, CFSTR("AirPlayFeatures"));
                    CFStringAppendF();
                    CFDictionaryGetInt64();
                    CFStringAppendF();
                    CFDictionaryGetTypeID();
                    if (CFDictionaryGetTypedValue())
                    {
                      CFDictionaryGetTypeID();
                      TypedValue = (const __CFDictionary *)CFDictionaryGetTypedValue();
                      if (TypedValue)
                      {
                        if (CFDictionaryGetValue(TypedValue, v38))
                          CFStringAppendF();
                      }
                    }
                    CFDictionaryGetInt64();
                    CFStringAppendF();
                    CFStringAppendF();
                    v32 = (const __CFDictionary *)CFDictionaryGetValue(v30, CFSTR("StreamInfo_MainAudio"));
                    carManager_appendEndpointStreamShowInfo(v32);
                    v33 = (const __CFDictionary *)CFDictionaryGetValue(v30, CFSTR("StreamInfo_AltAudio"));
                    carManager_appendEndpointStreamShowInfo(v33);
                    v34 = (const __CFDictionary *)CFDictionaryGetValue(v30, CFSTR("StreamInfo_Screen"));
                    carManager_appendEndpointStreamShowInfo(v34);
                    v35 = v42;
                  }
                  else
                  {
                    v35 = 0;
                  }
                  CFRelease(v35);
                }
              }
            }
          }
          v21 += 72;
        }
        while (v21 != 216);
        CFDictionarySetValue(theDict, CFSTR("DetailedDescription"), v20);
        *v16 = theDict;
        CFRelease(v20);
        v36 = 0;
        goto LABEL_45;
      }
      APSLogErrorAt();
      CFRetain(theDict);
    }
    else
    {
      APSLogErrorAt();
    }
    v36 = -6728;
LABEL_45:
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v36;
    result = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    if ((_DWORD)result)
      return APSLogErrorAt();
    return result;
  }
  v9 = *(CFTypeRef **)(a1 + 72);
  v10 = CMBaseObjectGetDerivedStorage();
  v11 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (!*(_QWORD *)(v10 + 296))
    v11 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  *v9 = CFRetain(*v11);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  result = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if ((_DWORD)result)
    return APSLogErrorAt();
  return result;
}

uint64_t carManager_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  NSObject *v9;
  uint64_t v10;
  _QWORD block[10];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointManagerCarPlay <= 10
    && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v9 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __carManager_copyProperty_block_invoke;
  block[3] = &unk_1E8269A78;
  block[4] = &v13;
  block[5] = DerivedStorage;
  block[6] = a2;
  block[7] = a1;
  block[8] = a3;
  block[9] = a4;
  dispatch_sync(v9, block);
  v10 = *((unsigned int *)v14 + 6);
  _Block_object_dispose(&v13, 8);
  return v10;
}

void sub_1C943E08C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t manager_CopyProperty(const void *a1, const void *a2, const __CFAllocator *a3, __CFDictionary **a4)
{
  uint64_t DerivedStorage;
  __CFDictionary *v9;
  uint64_t result;
  uint64_t v11;
  CFNumberRef v12;
  CFNumberRef v13;
  uint64_t v14;
  uint64_t CMBaseObject;
  uint64_t (*v16)(uint64_t, uint64_t, const __CFAllocator *, __CFDictionary **);
  uint64_t v17;
  uint64_t valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointManager <= 10
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 1))
  {
    APSLogErrorAt();
    return 4294950584;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3A40]))
  {
    v9 = (__CFDictionary *)CFRetain((CFTypeRef)*MEMORY[0x1E0CA3A58]);
    result = 0;
    *a4 = v9;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3A50]))
  {
    v11 = 31;
    if (*(_DWORD *)(DerivedStorage + 348) == 4)
      v11 = 63;
    valuePtr = v11;
    v12 = CFNumberCreate(a3, kCFNumberSInt64Type, &valuePtr);
    *a4 = v12;
    if (!v12)
      goto LABEL_23;
    return 0;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3A48]))
  {
    valuePtr = 7;
    v13 = CFNumberCreate(a3, kCFNumberSInt64Type, &valuePtr);
    *a4 = v13;
    if (!v13)
    {
LABEL_23:
      APSLogErrorAt();
      return 4294950585;
    }
    return 0;
  }
  v14 = *MEMORY[0x1E0CF7558];
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CF7558]))
  {
    if (*(_QWORD *)(DerivedStorage + 280))
    {
      CMBaseObject = APSPSGDataSourceGetCMBaseObject();
      v16 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
      if (v16)
        return v16(CMBaseObject, v14, a3, a4);
      else
        return 4294954514;
    }
    else
    {
      APSLogErrorAt();
      return 4294960591;
    }
  }
  else
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
    v17 = manager_copyPropertyInternal(a1, a2, a3, a4);
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 64));
    return v17;
  }
}

uint64_t manager_copyPropertyInternal(const void *a1, const void *a2, const __CFAllocator *a3, __CFDictionary **a4)
{
  __CFDictionary *v8;
  _BOOL4 v9;
  CFTypeRef *v10;
  uint64_t v11;
  uint64_t DerivedStorage;
  uint64_t v14;
  __CFArray *v15;
  const __CFArray *v16;
  const __CFAllocator *v17;
  CFMutableArrayRef v18;
  __CFArray *v19;
  CFIndex v20;
  CFIndex v21;
  CFIndex n;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  const void *Value;
  uint64_t v29;
  CFIndex Count;
  __CFArray *v31;
  CFIndex v32;
  CFIndex i;
  CFIndex v34;
  CFIndex v35;
  const __CFDictionary *v36;
  const __CFDictionary *v37;
  const __CFString *v38;
  const void *v39;
  const void *v40;
  const __CFString *v41;
  CFStringRef v42;
  const __CFArray *v43;
  const __CFArray *v44;
  CFIndex v45;
  CFIndex j;
  const __CFDictionary *v47;
  __CFArray *v48;
  CFIndex k;
  const __CFArray *v50;
  const __CFArray *v51;
  CFIndex v52;
  uint64_t v53;
  const CFArrayCallBacks *v54;
  const void *v55;
  uint64_t CMBaseObject;
  void (*v57)(uint64_t, uint64_t, const __CFAllocator *, CFDictionaryRef *);
  const void *v58;
  void *v59;
  const char *v60;
  CFIndex v61;
  uint64_t v62;
  const void *v63;
  const __CFArray *v64;
  const __CFArray *v65;
  CFIndex v66;
  CFIndex m;
  uint64_t v68;
  void (*v69)(uint64_t, const __CFString *, uint64_t, const __CFDictionary **);
  const __CFDictionary *v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  const __CFAllocator *v73;
  int v74;
  CFMutableDictionaryRef v75;
  CFIndex v76;
  const char *v77;
  int v78;
  int v79;
  int v80;
  const void *v81;
  CFIndex v82;
  uint64_t v83;
  const __CFArray *theArray;
  __CFString *v85;
  __CFDictionary *Mutable;
  __CFArray **v87;
  __CFDictionary **v88;
  CFMutableStringRef theString;
  uint64_t v90;
  const __CFAllocator *alloc;
  const __CFArray *alloca;
  char *v93;
  const __CFDictionary *key;
  CFIndex v95;
  CFDictionaryRef theDict[6];
  CFTypeRef cf;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  const char *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __CFArray *v107;
  __CFArray *v108;
  __CFArray *v109;
  const __CFDictionary *ValueAtIndex;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  int v114;

  CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3A28]))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3A30]))
    {
      v9 = manager_areEndpointsPresent();
      v10 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      if (!v9)
        v10 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      v8 = (__CFDictionary *)CFRetain(*v10);
      goto LABEL_9;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3A38]))
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!*(_QWORD *)(DerivedStorage + 240))
        return 4294950583;
      v14 = DerivedStorage;
      if (manager_isEndpointLocalAndSuppressed())
        return 4294950583;
      v8 = (__CFDictionary *)CFRetain(*(CFTypeRef *)(v14 + 240));
      if (!v8)
        return 4294950583;
      goto LABEL_9;
    }
    if (!CFEqual(a2, CFSTR("ShowInfo")))
    {
      if (gLogCategory_APEndpointManager <= 30
        && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return 4294954512;
    }
    v88 = a4;
    v111 = 0;
    v112 = &v111;
    v113 = 0x2020000000;
    v114 = 0;
    v83 = CMBaseObjectGetDerivedStorage();
    v109 = 0;
    ValueAtIndex = 0;
    v107 = 0;
    v108 = 0;
    v99 = 0;
    v100 = &v99;
    v101 = 0x5810000000;
    v103 = 0u;
    v104 = 0u;
    v105 = 0u;
    v102 = "";
    v106 = 0;
    cf = 0;
    v98 = 0;
    DataBuffer_Init();
    v26 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    theDict[0] = 0;
    theString = CFStringCreateMutable(a3, 0);
    if (theString)
    {
      v27 = APBrowserControllerCopyProperty();
      if (v27)
      {
        APSLogErrorAt();
        CFRelease(theString);
        theString = 0;
      }
      else
      {
        Value = CFDictionaryGetValue(theDict[0], CFSTR("detailedDescription"));
        CFStringAppendFormat(theString, 0, CFSTR("\n%@"), Value);
        CFStringAppend(theString, CFSTR("\n"));
        CFStringAppend(theString, CFSTR("+-+ APEndpointManager state +-+\n"));
        CFStringAppend(theString, CFSTR("\n"));
        CFStringAppendFormat(theString, 0, CFSTR("DiscoveryMode: %@ (seed %llu/%llu) "), v26[11], v26[9], v26[10]);
        CFStringAppend(theString, CFSTR("\n"));
        v29 = CMBaseObjectGetDerivedStorage();
        Count = CFSetGetCount(*(CFSetRef *)(v29 + 208));
        CFStringAppendFormat(theString, 0, CFSTR("NonBuddyConnectionActive: %d\n"), Count > 0);
      }
      *((_DWORD *)v112 + 6) = v27;
      if (!v27)
      {
        Mutable = CFDictionaryCreateMutable(a3, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!Mutable)
        {
          APSLogErrorAt();
          v85 = 0;
          Mutable = 0;
          v75 = 0;
          alloca = 0;
          key = 0;
          theArray = 0;
          *((_DWORD *)v112 + 6) = -16711;
          goto LABEL_131;
        }
        v85 = CFStringCreateMutable(a3, 0);
        CFStringAppend(v85, theString);
        v31 = manager_copyEndpoints((uint64_t)a1, 0);
        theArray = v31;
        if (v31)
        {
          CFArrayGetCount(v31);
          manager_copyEndpointInfoForShowInfo(theArray, &v108, &v109);
          manager_copyEndpointInfoForShowInfo(*(CFArrayRef *)(v83 + 192), 0, &v107);
          if (v108)
            v32 = CFArrayGetCount(v108);
          else
            v32 = 0;
          if (v109)
            v82 = CFArrayGetCount(v109);
          else
            v82 = 0;
          DataBuffer_AppendF();
          if (v32)
          {
            if (v32 >= 1)
            {
              for (i = 0; i != v32; ++i)
              {
                ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v108, i);
                manager_AppendEndpointShowInfo(ValueAtIndex, 1, (uint64_t)(v100 + 4));
              }
            }
            CFDictionarySetValue(Mutable, CFSTR("ActivatedEndpointShowInfos"), v108);
            if (v108)
            {
              CFRelease(v108);
              v108 = 0;
            }
          }
          if (v107)
            v34 = CFArrayGetCount(v107);
          else
            v34 = 0;
          DataBuffer_AppendF();
          if (v34)
          {
            v95 = v34;
            if (v34 >= 1)
            {
              v35 = 0;
              alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              do
              {
                v36 = (const __CFDictionary *)CFArrayGetValueAtIndex(v107, v35);
                v37 = v36;
                ValueAtIndex = v36;
                if (v36)
                {
                  v38 = (const __CFString *)CFDictionaryGetValue(v36, CFSTR("RoutingContextID"));
                  v39 = CFDictionaryGetValue(v37, CFSTR("EndpointHash"));
                  v40 = CFDictionaryGetValue(v37, CFSTR("EndpointID"));
                  v41 = &stru_1E8273C10;
                  if (v38)
                    v41 = v38;
                  v42 = CFStringCreateWithFormat(alloc, 0, CFSTR("%@[%@][%@]"), v39, v40, v41);
                  if (v42)
                  {
                    DataBuffer_AppendF();
                    v43 = (const __CFArray *)CFDictionaryGetValue(v37, CFSTR("SubEndpointShowInfoDicts"));
                    v44 = v43;
                    if (v43)
                    {
                      v45 = CFArrayGetCount(v43);
                      if (v45 >= 1)
                      {
                        for (j = 0; j != v45; ++j)
                        {
                          DataBuffer_AppendF();
                          v47 = (const __CFDictionary *)CFArrayGetValueAtIndex(v44, j);
                          CFDictionaryGetValue(v47, CFSTR("EndpointHash"));
                          DataBuffer_AppendF();
                          CFDictionaryGetValue(v47, CFSTR("Name"));
                          DataBuffer_AppendF();
                        }
                      }
                    }
                    CFRelease(v42);
                  }
                }
                ++v35;
              }
              while (v35 != v95);
            }
            CFDictionarySetValue(Mutable, CFSTR("AggregateShowInfos"), v107);
            if (v107)
            {
              CFRelease(v107);
              v107 = 0;
            }
          }
          DataBuffer_AppendF();
          v48 = v109;
          if (v109)
          {
            if (v82 >= 1)
            {
              for (k = 0; k != v82; ++k)
              {
                ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v109, k);
                manager_AppendEndpointShowInfo(ValueAtIndex, 0, (uint64_t)(v100 + 4));
              }
              v48 = v109;
            }
            CFDictionarySetValue(Mutable, CFSTR("EndpointShowInfos"), v48);
            if (v109)
            {
              CFRelease(v109);
              v109 = 0;
            }
          }
          CMBaseObjectGetDerivedStorage();
          key = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (key)
          {
            v50 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
            v51 = v50;
            if (v50)
            {
              if (CFArrayGetCount(v50) >= 1)
              {
                v52 = 0;
                v53 = *MEMORY[0x1E0CA4228];
                v54 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
                do
                {
                  v55 = CFArrayGetValueAtIndex(v51, v52);
                  theDict[0] = 0;
                  CMBaseObject = FigEndpointGetCMBaseObject();
                  v57 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                  if (v57)
                    v57(CMBaseObject, v53, a3, theDict);
                  if (theDict[0])
                  {
                    if (CFDictionaryContainsKey(key, theDict[0]))
                    {
                      v58 = CFDictionaryGetValue(key, theDict[0]);
                      v59 = (void *)CFRetain(v58);
                    }
                    else
                    {
                      v59 = CFArrayCreateMutable(a3, 0, v54);
                      CFDictionarySetValue(key, theDict[0], v59);
                    }
                    CFArrayAppendValue((CFMutableArrayRef)v59, v55);
                    if (v59)
                      CFRelease(v59);
                    if (theDict[0])
                      CFRelease(theDict[0]);
                  }
                  ++v52;
                }
                while (v52 < CFArrayGetCount(v51));
              }
              CFRelease(v51);
            }
          }
          v90 = FigCFDictionaryGetCount();
          v60 = "s";
          if (v90 == 1)
            v60 = "";
          v81 = v60;
          DataBuffer_AppendF();
          alloca = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
          if (alloca)
          {
            if (v90 >= 1)
            {
              v61 = 0;
              v62 = *MEMORY[0x1E0C9AE00];
              do
              {
                v93 = (char *)v61;
                v63 = CFArrayGetValueAtIndex(alloca, v61);
                v64 = (const __CFArray *)CFDictionaryGetValue(key, v63);
                v65 = v64;
                if (v64)
                  v66 = CFArrayGetCount(v64);
                else
                  v66 = 0;
                DataBuffer_AppendF();
                if (v66 >= 1)
                {
                  for (m = 0; m != v66; ++m)
                  {
                    CFArrayGetValueAtIndex(v65, m);
                    ValueAtIndex = 0;
                    v68 = FigEndpointGetCMBaseObject();
                    v69 = *(void (**)(uint64_t, const __CFString *, uint64_t, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                    if (v69)
                      v69(v68, CFSTR("EndpointShowInfo"), v62, &ValueAtIndex);
                    v70 = ValueAtIndex;
                    if (ValueAtIndex)
                    {
                      CFDictionaryGetValue(ValueAtIndex, CFSTR("Name"));
                      DataBuffer_AppendF();
                      if (CFDictionaryGetValue(v70, CFSTR("DiscoveryID")))
                        DataBuffer_AppendF();
                      CFDictionaryGetValue(v70, CFSTR("DeviceID"));
                      DataBuffer_AppendF();
                      v81 = CFDictionaryGetValue(v70, CFSTR("Model"));
                      DataBuffer_AppendF();
                      DataBuffer_AppendF();
                      if (ValueAtIndex)
                      {
                        CFRelease(ValueAtIndex);
                        ValueAtIndex = 0;
                      }
                    }
                  }
                }
                v61 = (CFIndex)(v93 + 1);
              }
              while (v93 + 1 != (char *)v90);
            }
            if (!*(_QWORD *)(v83 + 280))
            {
              v75 = 0;
LABEL_125:
              v78 = DataBuffer_Append();
              *((_DWORD *)v112 + 6) = v78;
              if (!v78)
              {
                v79 = DataBuffer_Commit();
                *((_DWORD *)v112 + 6) = v79;
                if (!v79)
                {
                  CFStringAppendFormat(v85, 0, CFSTR("%s"), v98, v81);
                  CFDictionarySetValue(Mutable, CFSTR("DetailedDescription"), v85);
LABEL_131:
                  DataBuffer_Free();
                  if (theArray)
                    CFRelease(theArray);
                  if (v85)
                    CFRelease(v85);
                  if (theString)
                    CFRelease(theString);
                  if (v108)
                    CFRelease(v108);
                  if (v107)
                    CFRelease(v107);
                  if (v109)
                    CFRelease(v109);
                  if (key)
                    CFRelease(key);
                  if (alloca)
                    CFRelease(alloca);
                  if (cf)
                    CFRelease(cf);
                  if (v75)
                    CFRelease(v75);
                  v11 = *((unsigned int *)v112 + 6);
                  _Block_object_dispose(&v99, 8);
                  _Block_object_dispose(&v111, 8);
                  if (!(_DWORD)v11)
                    *v88 = Mutable;
                  return v11;
                }
              }
              APSLogErrorAt();
LABEL_130:
              CFRelease(Mutable);
              Mutable = 0;
              goto LABEL_131;
            }
            v71 = APSPSGDataSourceGetCMBaseObject();
            v72 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
            if (v72)
            {
              v73 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              v74 = v72(v71, *MEMORY[0x1E0CF7558], *MEMORY[0x1E0C9AE00], &cf);
              *((_DWORD *)v112 + 6) = v74;
              if (!v74)
              {
                v75 = CFDictionaryCreateMutable(v73, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (v75)
                {
                  theDict[0] = (CFDictionaryRef)MEMORY[0x1E0C809B0];
                  theDict[1] = (CFDictionaryRef)3221225472;
                  theDict[2] = (CFDictionaryRef)__manager_copyShowInfo_block_invoke;
                  theDict[3] = (CFDictionaryRef)&unk_1E82689B0;
                  theDict[4] = (CFDictionaryRef)&v111;
                  theDict[5] = v75;
                  CFDictionaryApplyBlock();
                  v76 = CFDictionaryGetCount(v75);
                  v77 = "s";
                  if (v76 == 1)
                    v77 = "";
                  v81 = v77;
                  DataBuffer_AppendF();
                  CFDictionaryApplyBlock();
                  goto LABEL_125;
                }
                APSLogErrorAt();
                v80 = -6728;
LABEL_164:
                v75 = 0;
                *((_DWORD *)v112 + 6) = v80;
                goto LABEL_130;
              }
            }
            else
            {
              *((_DWORD *)v112 + 6) = -12782;
            }
            APSLogErrorAt();
            v75 = 0;
            goto LABEL_130;
          }
          APSLogErrorAt();
          alloca = 0;
        }
        else
        {
          APSLogErrorAt();
          alloca = 0;
          key = 0;
        }
        v80 = -16711;
        goto LABEL_164;
      }
    }
    else
    {
      APSLogErrorAt();
      theString = 0;
      *((_DWORD *)v112 + 6) = -6728;
    }
    APSLogErrorAt();
    v85 = 0;
    Mutable = 0;
    v75 = 0;
    alloca = 0;
    key = 0;
    theArray = 0;
    goto LABEL_131;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    v8 = manager_copyEndpoints((uint64_t)a1, 0);
LABEL_9:
    v11 = 0;
    *a4 = v8;
    return v11;
  }
  LODWORD(v99) = 0;
  CMBaseObjectGetDerivedStorage();
  v15 = manager_copyEndpoints((uint64_t)a1, 0);
  if (v15)
  {
    v16 = v15;
    v87 = a4;
    v17 = CFGetAllocator(a1);
    v18 = CFArrayCreateMutable(v17, 0, MEMORY[0x1E0C9B378]);
    if (v18)
    {
      v19 = v18;
      v20 = CFArrayGetCount(v16);
      if (v20 >= 1)
      {
        v21 = v20;
        for (n = 0; n != v21; ++n)
        {
          v23 = CFArrayGetValueAtIndex(v16, n);
          v24 = APSGetFBOPropertyInt64();
          v25 = APSGetFBOPropertyInt64();
          if (v24 | APSGetFBOPropertyInt64())
          {
            CFArrayAppendValue(v19, v23);
          }
          else if (v25)
          {
            CFArrayAppendValue(v19, v23);
            if (gLogCategory_APEndpointManager <= 50
              && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
          }
        }
      }
      *v87 = v19;
    }
    else
    {
      APSLogErrorAt();
      LODWORD(v99) = -16711;
    }
    CFRelease(v16);
    return v99;
  }
  else
  {
    APSLogErrorAt();
    return 4294950585;
  }
}

void sub_1C943F430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  _Block_object_dispose(&a41, 8);
  _Block_object_dispose((const void *)(v41 - 136), 8);
  _Unwind_Resume(a1);
}

BOOL manager_areEndpointsPresent()
{
  uint64_t DerivedStorage;
  _BOOL8 v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 168)) > 0 || *(_BYTE *)(DerivedStorage + 96) != 0;
  if (gLogCategory_APEndpointManager <= 30
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v1;
}

__CFArray *manager_copyEndpoints(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v4;
  __CFArray *Mutable;
  const __CFArray *v6;
  const __CFArray *v7;
  __CFArray *MutableCopy;
  const __CFArray *v9;
  const void *v10;
  const __CFArray *v11;
  const __CFDictionary *v12;
  CFIndex v13;
  const void *ValueAtIndex;
  CFIndex v15;
  const void *v16;
  const __CFArray *v17;
  const __CFArray *v18;
  CFRange v20;
  CFRange v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable || (v6 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues()) == 0)
  {
    APSLogErrorAt();
    return Mutable;
  }
  v7 = v6;
  MutableCopy = CFArrayCreateMutableCopy(v4, 0, v6);
  if (!MutableCopy)
  {
    APSLogErrorAt();
    v18 = v7;
    goto LABEL_34;
  }
  v9 = MutableCopy;
  v10 = *(const void **)(DerivedStorage + 256);
  if (v10)
    CFArrayAppendValue(MutableCopy, v10);
  if (a2 == 1)
  {
    v20.length = CFArrayGetCount(v9);
    v20.location = 0;
    CFArrayAppendArray(Mutable, v9, v20);
    v11 = 0;
LABEL_23:
    v17 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
    v21.length = CFArrayGetCount(v17);
    v21.location = 0;
    CFArrayAppendArray(Mutable, v17, v21);
    goto LABEL_30;
  }
  if (a2)
  {
    if (gLogCategory_APEndpointManager <= 90
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v11 = 0;
  }
  else
  {
    v11 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
    if (v11)
    {
      v12 = *(const __CFDictionary **)(DerivedStorage + 216);
      if (CFArrayGetCount(v9) >= 1)
      {
        v13 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v9, v13);
          if ((!v12 || !CFDictionaryContainsKey(v12, ValueAtIndex)) && !manager_isEndpointLocalAndSuppressed())
            CFArrayAppendValue(Mutable, ValueAtIndex);
          ++v13;
        }
        while (v13 < CFArrayGetCount(v9));
      }
      if (CFArrayGetCount(v11) >= 1)
      {
        v15 = 0;
        do
        {
          v16 = CFArrayGetValueAtIndex(v11, v15);
          if (!manager_isEndpointLocalAndSuppressed())
            CFArrayAppendValue(Mutable, v16);
          ++v15;
        }
        while (v15 < CFArrayGetCount(v11));
      }
      goto LABEL_23;
    }
    APSLogErrorAt();
  }
  v17 = 0;
LABEL_30:
  CFRelease(v7);
  CFRelease(v9);
  if (v17)
    CFRelease(v17);
  if (v11)
  {
    v18 = v11;
LABEL_34:
    CFRelease(v18);
  }
  return Mutable;
}

uint64_t carManager_setDiscoveryMode()
{
  return 0;
}

uint64_t APPWDKeyExchangeSenderSessionGetTypeID()
{
  if (gAPPWDKeyExchangeSenderSessionInitOnce != -1)
    dispatch_once_f(&gAPPWDKeyExchangeSenderSessionInitOnce, 0, (dispatch_function_t)_APPWDKeyExchangeSenderSessionGetTypeID);
  return gAPPWDKeyExchangeSenderSessionTypeID;
}

uint64_t _APPWDKeyExchangeSenderSessionGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPPWDKeyExchangeSenderSessionTypeID = result;
  return result;
}

uint64_t APPWDKeyExchangeSenderSessionCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t Instance;
  const void *v5;
  uint64_t v6;
  uint64_t v7;

  if (gAPPWDKeyExchangeSenderSessionInitOnce != -1)
    dispatch_once_f(&gAPPWDKeyExchangeSenderSessionInitOnce, 0, (dispatch_function_t)_APPWDKeyExchangeSenderSessionGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt();
    return 4294960568;
  }
  v5 = (const void *)Instance;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_QWORD *)(Instance + 64) = 0;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  if (!a2)
  {
    APSLogErrorAt();
    v7 = 4294960591;
LABEL_18:
    CFRelease(v5);
    return v7;
  }
  *(_QWORD *)(Instance + 24) = FigSimpleMutexCreate();
  if (a1)
  {
    CFDictionaryGetTypeID();
    if (CFDictionaryGetTypedValue())
      CFDictionaryGetInt64();
  }
  v6 = FigPWDKeyExchangeSenderCreate();
  if ((_DWORD)v6)
  {
    v7 = v6;
    APSLogErrorAt();
    goto LABEL_18;
  }
  if (gLogCategory_APPWDKeyExchangeSenderSession <= 50
    && (gLogCategory_APPWDKeyExchangeSenderSession != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v7 = 0;
  *a2 = v5;
  return v7;
}

uint64_t _SendMessageAsyncCallback(uint64_t a1, const void *a2)
{
  int v4;
  uint64_t v5;
  const void *v6;

  v4 = gLogCategory_APPWDKeyExchangeSenderSession;
  if (gLogCategory_APPWDKeyExchangeSenderSession <= 50)
  {
    if (gLogCategory_APPWDKeyExchangeSenderSession == -1)
    {
      if (!_LogCategory_Initialize())
        goto LABEL_9;
      v4 = gLogCategory_APPWDKeyExchangeSenderSession;
    }
    if (v4 == -1)
      _LogCategory_Initialize();
    LogPrintF();
  }
LABEL_9:
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 24));
  if (*(_BYTE *)(a1 + 33))
  {
    v5 = 4294896148;
  }
  else
  {
    v6 = *(const void **)(a1 + 56);
    if (a2)
      CFRetain(a2);
    *(_QWORD *)(a1 + 56) = a2;
    if (v6)
      CFRelease(v6);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
    v5 = 0;
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(a1 + 24));
  return v5;
}

void _CompletedCallback(uint64_t a1, int a2)
{
  if (gLogCategory_APPWDKeyExchangeSenderSession <= 50
    && (gLogCategory_APPWDKeyExchangeSenderSession != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 24));
  if (!*(_BYTE *)(a1 + 33))
  {
    *(_BYTE *)(a1 + 64) = 1;
    *(_DWORD *)(a1 + 68) = a2;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
  }
  JUMPOUT(0x1CAA400E4);
}

uint64_t APPWDKeyExchangeSenderSessionInvalidate(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  NSObject *v4;
  const void *v5;
  uint64_t result;

  if (gLogCategory_APPWDKeyExchangeSenderSession <= 50
    && (gLogCategory_APPWDKeyExchangeSenderSession != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 24));
  if (!*(_BYTE *)(a1 + 33))
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      v3 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v3)
        v3(v2);
    }
    v4 = *(NSObject **)(a1 + 48);
    if (v4)
      dispatch_semaphore_signal(v4);
    v5 = *(const void **)(a1 + 56);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 56) = 0;
    }
    *(_BYTE *)(a1 + 33) = 1;
  }
  result = MEMORY[0x1CAA400E4](*(_QWORD *)(a1 + 24));
  if (gLogCategory_APPWDKeyExchangeSenderSession <= 50)
  {
    if (gLogCategory_APPWDKeyExchangeSenderSession != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

uint64_t APPWDKeyExchangeSenderSessionPerformKeyExchange(uint64_t a1, uint64_t a2, _QWORD *a3, _BYTE *a4)
{
  int v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  int v16;
  uint64_t v17;

  FigSimpleMutexCheckIsNotLockedOnThisThread();
  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 24));
  if (*(_BYTE *)(a1 + 33))
  {
    v12 = 4294896148;
    goto LABEL_26;
  }
  if (!*(_BYTE *)(a1 + 32))
  {
    *(_QWORD *)(a1 + 48) = dispatch_semaphore_create(0);
    if (gLogCategory_APPWDKeyExchangeSenderSession <= 50
      && (gLogCategory_APPWDKeyExchangeSenderSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v10)
    {
      v11 = v10(v9);
      if ((_DWORD)v11)
      {
        v12 = v11;
        goto LABEL_26;
      }
      *(_BYTE *)(a1 + 32) = 1;
      goto LABEL_22;
    }
    v12 = 4294954514;
LABEL_26:
    APSLogErrorAt();
    goto LABEL_44;
  }
  if (!a2)
  {
    APSLogErrorAt();
    v12 = 4294960591;
    goto LABEL_44;
  }
  v8 = gLogCategory_APPWDKeyExchangeSenderSession;
  if (gLogCategory_APPWDKeyExchangeSenderSession <= 50)
  {
    if (gLogCategory_APPWDKeyExchangeSenderSession == -1)
    {
      if (!_LogCategory_Initialize())
        goto LABEL_20;
      v8 = gLogCategory_APPWDKeyExchangeSenderSession;
    }
    if (v8 == -1)
      _LogCategory_Initialize();
    LogPrintF();
  }
LABEL_20:
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v14)
  {
    v12 = 4294954514;
    goto LABEL_26;
  }
  v15 = v14(v13, a2);
  if ((_DWORD)v15)
  {
    v12 = v15;
    goto LABEL_26;
  }
LABEL_22:
  MEMORY[0x1CAA400E4](*(_QWORD *)(a1 + 24));
  if (gLogCategory_APPWDKeyExchangeSenderSession <= 50
    && (gLogCategory_APPWDKeyExchangeSenderSession != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL);
  v16 = gLogCategory_APPWDKeyExchangeSenderSession;
  if (gLogCategory_APPWDKeyExchangeSenderSession <= 50)
  {
    if (gLogCategory_APPWDKeyExchangeSenderSession == -1)
    {
      if (!_LogCategory_Initialize())
        goto LABEL_36;
      v16 = gLogCategory_APPWDKeyExchangeSenderSession;
    }
    if (v16 == -1)
      _LogCategory_Initialize();
    LogPrintF();
  }
LABEL_36:
  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 24));
  if (*(_BYTE *)(a1 + 33))
  {
    v12 = 4294896148;
    goto LABEL_26;
  }
  if (*(_BYTE *)(a1 + 64))
  {
    if (a4)
      *a4 = 1;
    v12 = *(unsigned int *)(a1 + 68);
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 56);
    if (v17)
    {
      v12 = 0;
      if (a3)
      {
        *a3 = v17;
        *(_QWORD *)(a1 + 56) = 0;
      }
    }
    else
    {
      APSLogErrorAt();
      v12 = 4294960587;
    }
  }
LABEL_44:
  MEMORY[0x1CAA400E4](*(_QWORD *)(a1 + 24));
  return v12;
}

uint64_t APPWDKeyExchangeSenderSessionCopyEncoderEncryptionContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, uint64_t);
  uint64_t v6;

  FigSimpleMutexCheckIsNotLockedOnThisThread();
  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 24));
  if (!*(_BYTE *)(a1 + 32))
  {
    APSLogErrorAt();
    v6 = 4294960587;
    goto LABEL_7;
  }
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v5)
  {
    v6 = 4294954514;
LABEL_6:
    APSLogErrorAt();
    goto LABEL_7;
  }
  v6 = v5(v4, *MEMORY[0x1E0CC49C8], *MEMORY[0x1E0C9AE00], a2);
  if ((_DWORD)v6)
    goto LABEL_6;
LABEL_7:
  MEMORY[0x1CAA400E4](*(_QWORD *)(a1 + 24));
  return v6;
}

uint64_t _APPWDKeyExchangeSenderSessionFinalize(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  NSObject *v4;
  const void *v5;

  if (gLogCategory_APPWDKeyExchangeSenderSession <= 50
    && (gLogCategory_APPWDKeyExchangeSenderSession != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v3)
      v3(v2);
    CFRelease(*(CFTypeRef *)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
  }
  v4 = *(NSObject **)(a1 + 48);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v5 = *(const void **)(a1 + 56);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 56) = 0;
  }
  return FigSimpleMutexDestroy();
}

uint64_t APEndpointLocalCreate(uint64_t a1, _QWORD *a2)
{
  return APEndpointLocalCreateWithEndpointDescription(a1, 0, 0, a2);
}

uint64_t APEndpointLocalCreateWithEndpointDescription(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  const __CFAllocator *v9;
  const __CFUUID *v10;
  dispatch_queue_t v11;
  uint64_t v12;
  CFStringRef v13;
  uint64_t v14;
  uint64_t v15;

  if (!a4)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  FigEndpointExtendedGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
    v15 = v7;
    APSLogErrorAt();
    v10 = 0;
    goto LABEL_28;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v10 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (!v10
    || (v11 = dispatch_queue_create("APEndpointLocal.notification", 0), (*(_QWORD *)DerivedStorage = v11) == 0)
    || (v12 = FigSimpleMutexCreate(), (*(_QWORD *)(DerivedStorage + 144) = v12) == 0)
    || (v13 = CFUUIDCreateString(v9, v10), (*(_QWORD *)(DerivedStorage + 24) = v13) == 0))
  {
    APSLogErrorAt();
    v15 = 4294950575;
    goto LABEL_28;
  }
  *(_QWORD *)(DerivedStorage + 32) = CFRetain(&stru_1E8273C10);
  *(_QWORD *)(DerivedStorage + 80) = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!a2)
  {
    v14 = APEndpointDescriptionAirPlayCreateWithTransportDevice(a1, 0, 0, (_QWORD *)(DerivedStorage + 16));
    if (!(_DWORD)v14)
      goto LABEL_10;
    v15 = v14;
    APSLogErrorAt();
LABEL_28:
    if (!v10)
      return v15;
    goto LABEL_23;
  }
  *(_QWORD *)(DerivedStorage + 16) = CFRetain(a2);
LABEL_10:
  if (!FigCFDictionaryGetBooleanIfPresent())
    *(_BYTE *)(DerivedStorage + 8) = APSSettingsIsFeatureEnabled();
  if (!FigCFDictionaryGetBooleanIfPresent())
    *(_BYTE *)(DerivedStorage + 9) = APSIsAPMSpeaker() != 0;
  *(_DWORD *)(DerivedStorage + 156) = 0;
  if (gLogCategory_APEndpointLocal <= 50
    && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  if (gLogCategory_APEndpointLocal <= 50
    && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v15 = 0;
  *a4 = 0;
LABEL_23:
  CFRelease(v10);
  return v15;
}

void endpointLocal_handleEndpointDescriptionChanged(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  __CFDictionary *Mutable;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, const __CFString *, uint64_t, CFStringRef *);
  uint64_t v12;
  void (*v13)(uint64_t, const __CFString *, uint64_t, CFStringRef *);
  const void *v14;
  CFStringRef v15;
  uint64_t v16;
  void (*v17)(uint64_t, const __CFString *, uint64_t, CFStringRef *);
  int v18;
  const void *v19;
  CFStringRef v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  const __CFAllocator *v26;
  CFMutableDictionaryRef v27;
  __CFDictionary *v28;
  const __CFAllocator *v29;
  CFMutableDictionaryRef v30;
  __CFDictionary *v31;
  uint64_t v32;
  const __CFString *v33;
  const __CFString *v34;
  const __CFString *v35;
  const __CFString *v36;
  const __CFString *v37;
  CFStringRef v38;
  CFStringRef theString[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v38 = 0;
  theString[0] = 0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 144));
  v8 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
LABEL_111:
    APSLogErrorAt();
    goto LABEL_102;
  }
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 16));
  v11 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v11)
  {
    v11(CMBaseObject, CFSTR("PairingPeerCUSystemIdentifier"), v8, theString);
    if (theString[0])
    {
      if (CFStringGetLength(theString[0]))
        goto LABEL_9;
      if (theString[0])
      {
        CFRelease(theString[0]);
        theString[0] = 0;
      }
    }
  }
  v12 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 16));
  v13 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v13)
    v13(v12, CFSTR("DeviceID"), v8, theString);
LABEL_9:
  if (theString[0] && CFStringGetLength(theString[0]))
  {
    *(_BYTE *)(DerivedStorage + 153) = 1;
    if (!CFEqual(theString[0], *(CFTypeRef *)(DerivedStorage + 24)))
    {
      if (gLogCategory_APEndpointLocal <= 50
        && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v14 = *(const void **)(DerivedStorage + 24);
      v15 = theString[0];
      *(CFStringRef *)(DerivedStorage + 24) = theString[0];
      if (v15)
        CFRetain(v15);
      if (v14)
        CFRelease(v14);
      CFDictionarySetValue(Mutable, CFSTR("IDDidChange"), (const void *)*MEMORY[0x1E0C9AE50]);
    }
  }
  else if (gLogCategory_APEndpointLocal <= 90
         && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v16 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 16));
  v17 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v17)
    v17(v16, CFSTR("Name"), v8, &v38);
  if (!v38 || !CFStringGetLength(v38))
  {
    if (gLogCategory_APEndpointLocal <= 90
      && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
      if (a5)
        goto LABEL_40;
LABEL_60:
      v18 = 0;
      goto LABEL_61;
    }
LABEL_39:
    if (a5)
      goto LABEL_40;
    goto LABEL_60;
  }
  *(_BYTE *)(DerivedStorage + 154) = 1;
  if (CFEqual(v38, *(CFTypeRef *)(DerivedStorage + 32)))
    goto LABEL_39;
  if (gLogCategory_APEndpointLocal <= 50
    && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v19 = *(const void **)(DerivedStorage + 32);
  v20 = v38;
  *(_QWORD *)(DerivedStorage + 32) = v38;
  if (v20)
    CFRetain(v20);
  if (v19)
    CFRelease(v19);
  CFDictionarySetValue(Mutable, CFSTR("NameDidChange"), (const void *)*MEMORY[0x1E0C9AE50]);
  if (!a5)
    goto LABEL_60;
LABEL_40:
  if (CFDictionaryGetInt64())
  {
    if (gLogCategory_APEndpointLocal <= 50
      && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFDictionarySetValue(Mutable, CFSTR("ClusterInfoDidChange"), (const void *)*MEMORY[0x1E0C9AE50]);
    v18 = 1;
  }
  else
  {
    v18 = 0;
  }
  if (CFDictionaryGetInt64())
  {
    if (gLogCategory_APEndpointLocal <= 50
      && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFDictionarySetValue(Mutable, CFSTR("ClusterLeaderDidChange"), (const void *)*MEMORY[0x1E0C9AE50]);
  }
  FigCFDictionarySetValueFromKeyInDict();
  FigCFDictionarySetValueFromKeyInDict();
LABEL_61:
  if (*(_BYTE *)(DerivedStorage + 153) && *(_BYTE *)(DerivedStorage + 154))
    CFDictionarySetValue(Mutable, CFSTR("LocalEndpointInfoComplete"), (const void *)*MEMORY[0x1E0C9AE50]);
  if (APSGetFBOPropertyInt64())
    v21 = 3;
  else
    v21 = 0;
  v22 = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(v22 + 156) != v21)
  {
    if (gLogCategory_APEndpointLocal <= 50
      && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
    {
      APSGetAPVolumeControlTypeName();
      APSGetAPVolumeControlTypeName();
      LogPrintF();
    }
    *(_DWORD *)(v22 + 156) = v21;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  if (v18)
  {
    v23 = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(v23 + 40))
    {
      *(_BYTE *)(v23 + 152) = 1;
      v24 = CMBaseObjectGetDerivedStorage();
      if (*(_BYTE *)(v24 + 41))
        goto LABEL_102;
      v25 = (_QWORD *)v24;
      *(_DWORD *)(v24 + 48) = -72277;
      v26 = CFGetAllocator(a2);
      v27 = CFDictionaryCreateMutable(v26, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v27)
      {
        v28 = v27;
        v29 = CFGetAllocator(a2);
        v30 = CFDictionaryCreateMutable(v29, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!v30)
        {
          APSLogErrorAt();
          goto LABEL_101;
        }
        v31 = v30;
        CFDictionarySetInt64();
        CFDictionarySetInt64();
        CFDictionarySetInt64();
        CFDictionarySetValue(v28, (const void *)*MEMORY[0x1E0CA3AC0], (const void *)*MEMORY[0x1E0CA3A98]);
        CFDictionarySetValue(v31, (const void *)*MEMORY[0x1E0CA39C0], (const void *)*MEMORY[0x1E0CA39A0]);
        if (!v25[14])
          goto LABEL_96;
        if (v25[17])
        {
          v32 = FigCFWeakReferenceHolderCopyReferencedObject();
          v33 = (const __CFString *)v32;
          if (v25[17] && !v32)
          {
            if (gLogCategory_APEndpointLocal > 90)
            {
LABEL_100:
              CMNotificationCenterGetDefaultLocalCenter();
              FigDispatchAsyncPostNotification();
              CFRelease(v31);
LABEL_101:
              CFRelease(v28);
              goto LABEL_102;
            }
            if (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize())
              LogPrintF();
LABEL_96:
            if (gLogCategory_APEndpointLocal <= 30
              && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            goto LABEL_100;
          }
        }
        else
        {
          v33 = 0;
        }
        v34 = (const __CFString *)CFRetain(a2);
        v35 = (const __CFString *)v25[7];
        theString[1] = v34;
        theString[2] = v35;
        v36 = (const __CFString *)CFRetain(v31);
        v37 = (const __CFString *)v25[14];
        theString[3] = v36;
        theString[4] = v37;
        theString[5] = v33;
        if (gLogCategory_APEndpointLocal <= 50
          && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        APSDispatchAsyncFHelper();
        goto LABEL_96;
      }
      goto LABEL_111;
    }
    if (gLogCategory_APEndpointLocal <= 50
      && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
LABEL_102:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 144));
  if (theString[0])
    CFRelease(theString[0]);
  if (v38)
    CFRelease(v38);
  if (Mutable)
    CFRelease(Mutable);
}

void endpointLocal_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointLocal <= 50
    && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 80);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 72);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 88);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 24);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 32);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  FigSimpleMutexDestroy();
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

__CFString *endpointLocal_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APEndpointLocal %p>"), a1);
  return Mutable;
}

uint64_t endpointLocal_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFDictionary **a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  CFTypeRef *v10;
  void *v11;
  uint64_t v12;
  uint64_t Int64;
  uint64_t v15;
  uint64_t CMBaseObject;
  uint64_t (*v17)(uint64_t, __CFString *, const __CFAllocator *, __CFDictionary **);
  __CFString **v18;
  uint64_t v20;
  __CFString **v21;
  int v22;
  void *v23;
  uint64_t v24;
  void *SInt64;
  const void **v26;
  int v27;
  uint64_t v28;
  uint64_t EnabledFeatures;
  CFNumberRef v30;
  uint64_t Float64;
  uint64_t v32;
  uint64_t UInt64;
  CFNumberRef v34;
  uint64_t LocalRouteState;
  uint64_t valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  v9 = DerivedStorage;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4468]))
  {
    v10 = (CFTypeRef *)MEMORY[0x1E0CA4960];
LABEL_12:
    v11 = (void *)*v10;
LABEL_13:
    v11 = (void *)CFRetain(v11);
LABEL_14:
    v12 = 0;
    *a4 = (__CFDictionary *)v11;
    return v12;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42A8]))
  {
LABEL_6:
    v10 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    goto LABEL_12;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42D8])
    || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4330])
    || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4130])
    || CFEqual(a2, CFSTR("IsClusterEndpoint")))
  {
LABEL_11:
    v10 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_12;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42E8]))
    goto LABEL_6;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43E0]))
  {
    Int64 = CFNumberCreateInt64();
    *a4 = (__CFDictionary *)Int64;
    if (Int64)
      return 0;
    APSLogErrorAt();
    return 4294950575;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40E0]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42D0]))
    goto LABEL_11;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4128]))
  {
    v10 = (CFTypeRef *)MEMORY[0x1E0CA37E8];
    goto LABEL_12;
  }
  if (CFEqual(a2, CFSTR("EligibleForFastReactivate")))
    goto LABEL_6;
  v15 = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("EndpointDescription")))
  {
    v11 = *(void **)(v15 + 16);
    if (!v11)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43D8]))
  {
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v15 + 16));
    v17 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v17)
    {
      v18 = kAPEndpointDescriptionProperty_SubType;
      return v17(CMBaseObject, *v18, a3, a4);
    }
    return 4294954514;
  }
  if (CFEqual(a2, CFSTR("GroupPublicName")))
  {
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v15 + 16));
    v17 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v17)
    {
      v18 = kAPEndpointDescriptionProperty_GroupPublicName;
      return v17(CMBaseObject, *v18, a3, a4);
    }
    return 4294954514;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4428]))
  {
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v15 + 16));
    v17 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v17)
    {
      v18 = kAPEndpointDescriptionProperty_DeviceSupportsRelay;
      return v17(CMBaseObject, *v18, a3, a4);
    }
    return 4294954514;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4400]))
  {
    v20 = *(_QWORD *)(v15 + 16);
    v21 = kAPEndpointDescriptionProperty_SupportsExtendedWHA;
    return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40B8]))
  {
    v20 = *(_QWORD *)(v15 + 16);
    v21 = kAPEndpointDescriptionProperty_AdvertisesHAPSupport;
    return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4380]))
  {
    v20 = *(_QWORD *)(v15 + 16);
    v21 = kAPEndpointDescriptionProperty_ClusterUUID;
    return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4278]))
  {
    v20 = *(_QWORD *)(v15 + 16);
    v21 = kAPEndpointDescriptionProperty_IsClusterLeader;
    return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4198]))
  {
    v20 = *(_QWORD *)(v15 + 16);
    v21 = kAPEndpointDescriptionProperty_ClusterSize;
    return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA41A0]))
  {
    if (CFEqual(a2, CFSTR("ClusterModel")))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_ClusterModel;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, CFSTR("RoomUUID")))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_RoomUUID;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, CFSTR("RoomName")))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_RoomName;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4458]))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_TightSyncUUID;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4448]))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_TightSyncIsGroupLeader;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, CFSTR("TightSyncClusterInfo")))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_TightSyncClusterInfo;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4268]))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_IsAppleMusicSubscriber;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4170]))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_CloudLibraryIsOn;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40C8]))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_SupportsAirPlayFromCloud;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40F0]))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_VodkaVersion;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4238]))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_HKAccessControlLevel;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42A0]))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_IsHKAccessControlEnabled;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40D0]))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_AirPlaySecurity;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4338]))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_Model;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4318]))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_Manufacturer;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4310]))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_MACAddress;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4210]))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_FirmwareVersion;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43A8]))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_SerialNumber;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4228]))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_GroupID;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4290]))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_IsGroupLeader;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4220]))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_GroupContainsDiscoverableLeader;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, CFSTR("ReceiverSessionIsActive")))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_ReceiverSessionIsActive;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42B0]))
    {
      v20 = *(_QWORD *)(v15 + 16);
      v21 = kAPEndpointDescriptionProperty_IsLowFidelitySpeaker;
      return APEndpointDescriptionCopyProperty(v20, (uint64_t)*v21, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, CFSTR("AirPlayClusterCompatibleEndpointProperties")))
      return endpointLocal_copyAirPlayClusterCompatibleEndpointProperties(a1, a4);
    MEMORY[0x1CAA400CC](*(_QWORD *)(v9 + 144));
    v24 = CMBaseObjectGetDerivedStorage();
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4258]))
    {
      SInt64 = *(void **)(v24 + 24);
LABEL_177:
      SInt64 = (void *)CFRetain(SInt64);
      goto LABEL_178;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4348]))
    {
      SInt64 = *(void **)(v24 + 32);
      goto LABEL_177;
    }
    if (CFEqual(a2, CFSTR("IsDissociated")))
    {
      v26 = (const void **)MEMORY[0x1E0C9AE50];
      v27 = *(unsigned __int8 *)(v24 + 41);
      goto LABEL_154;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4260]) || CFEqual(a2, CFSTR("IsInUse")))
    {
      v26 = (const void **)MEMORY[0x1E0C9AE50];
      v27 = *(unsigned __int8 *)(v24 + 40);
      goto LABEL_154;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40A8]))
    {
      v28 = CFNumberCreateInt64();
      *a4 = (__CFDictionary *)v28;
      if (!v28)
        goto LABEL_163;
      goto LABEL_159;
    }
    if (CFEqual(a2, CFSTR("EnabledFeatures")))
    {
      valuePtr = 0;
      EnabledFeatures = APEndpointGetEnabledFeatures(*(_QWORD *)(v24 + 80), 0, &valuePtr);
      if (!(_DWORD)EnabledFeatures)
      {
        v30 = CFNumberCreate(a3, kCFNumberSInt64Type, &valuePtr);
        *a4 = v30;
        if (!v30)
          goto LABEL_163;
        goto LABEL_159;
      }
      v12 = EnabledFeatures;
      goto LABEL_151;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43C8]))
    {
      SInt64 = (void *)FigCFDictionaryCopyArrayOfValues();
LABEL_178:
      v12 = 0;
      *a4 = (__CFDictionary *)SInt64;
      goto LABEL_184;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44A0]))
    {
      if (gLogCategory_APEndpointLocal <= 30
        && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      Float64 = FigCFNumberCreateFloat64();
      *a4 = (__CFDictionary *)Float64;
      if (!Float64)
        goto LABEL_163;
LABEL_159:
      v12 = 0;
      goto LABEL_184;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44B8]))
    {
      APSVolumeConvertSliderValueToDB();
      v32 = FigCFNumberCreateFloat64();
      *a4 = (__CFDictionary *)v32;
      if (!v32)
        goto LABEL_163;
      goto LABEL_159;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42B8]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42C0]))
    {
      v26 = (const void **)MEMORY[0x1E0C9AE50];
      v27 = *(unsigned __int8 *)(v24 + 173);
      goto LABEL_154;
    }
    if (CFEqual(a2, CFSTR("IsHALMuted")))
    {
      if (!APEndpointIsHALMuteForUser() || !*(_BYTE *)(v24 + 173))
        goto LABEL_175;
LABEL_171:
      v26 = (const void **)MEMORY[0x1E0C9AE50];
LABEL_176:
      SInt64 = (void *)*v26;
      goto LABEL_177;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42C8]))
    {
LABEL_175:
      v26 = (const void **)MEMORY[0x1E0C9AE40];
      goto LABEL_176;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44B0]))
    {
      UInt64 = FigCFNumberCreateUInt64();
      *a4 = (__CFDictionary *)UInt64;
      if (!UInt64)
        goto LABEL_163;
      goto LABEL_159;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44A8]))
    {
      v26 = (const void **)MEMORY[0x1E0C9AE50];
      v27 = *(unsigned __int8 *)(v24 + 160);
    }
    else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4340]))
    {
      v26 = (const void **)MEMORY[0x1E0C9AE50];
      v27 = *(unsigned __int8 *)(v24 + 172);
    }
    else
    {
      if (CFEqual(a2, CFSTR("EndpointShowInfo")))
      {
        v12 = endpointLocal_copyShowInfoDictionary(a1, a4);
        if (!(_DWORD)v12)
        {
LABEL_184:
          MEMORY[0x1CAA400E4](*(_QWORD *)(v9 + 144));
          return v12;
        }
LABEL_151:
        APSLogErrorAt();
        goto LABEL_184;
      }
      if (!CFEqual(a2, CFSTR("IsEngaged")))
      {
        if (CFEqual(a2, CFSTR("EndpointStatus")))
        {
          v34 = CFNumberCreate(a3, kCFNumberSInt32Type, (const void *)(v24 + 48));
          *a4 = v34;
          if (!v34)
          {
LABEL_163:
            APSLogErrorAt();
            v12 = 4294950575;
            goto LABEL_184;
          }
          goto LABEL_159;
        }
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4398]))
        {
          SInt64 = *(void **)(v24 + 72);
          if (!SInt64)
            goto LABEL_178;
          goto LABEL_177;
        }
        if (CFEqual(a2, CFSTR("LocalRouteState")))
        {
          LocalRouteState = APEndpointCreateLocalRouteState(*(unsigned __int8 *)(v24 + 40), *(const void **)(v24 + 72), 0, a4);
        }
        else
        {
          if (CFEqual(a2, CFSTR("ActivationStage")))
          {
            SInt64 = (void *)FigCFNumberCreateSInt64();
            goto LABEL_178;
          }
          if (CFEqual(a2, CFSTR("IsEndpointInfoComplete")))
          {
            if (!*(_BYTE *)(v24 + 153) || !*(_BYTE *)(v24 + 154))
              goto LABEL_175;
            goto LABEL_171;
          }
          if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA41B8]))
          {
            if (gLogCategory_APEndpointLocal <= 30
              && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v12 = 4294954512;
            goto LABEL_184;
          }
          LocalRouteState = endpointLocal_copyMXDescriptor(a1, a4);
        }
        v12 = LocalRouteState;
        goto LABEL_184;
      }
      v26 = (const void **)MEMORY[0x1E0C9AE50];
      v27 = *(unsigned __int8 *)(v24 + 45);
    }
LABEL_154:
    if (!v27)
      v26 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_176;
  }
  v22 = APSGetFBOPropertyInt64();
  v23 = (void *)APEndpointAPSClusterTypeToFigEndpointClusterType(v22);
  if (v23)
    v23 = (void *)CFRetain(v23);
  *a4 = (__CFDictionary *)v23;
  return 0;
}

uint64_t endpointLocal_SetProperty(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  double v7;
  float v8;
  CFTypeID v10;
  _BOOL4 v11;
  int IsHALMuteForUser;
  CFTypeID v13;
  BOOL v14;
  int v15;
  const void *v16;
  int v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, const void *);
  int v20;
  unsigned int v21;

  v21 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 144));
  if (!a2)
  {
    APSLogErrorAt();
    v20 = -6705;
LABEL_64:
    v21 = v20;
    goto LABEL_8;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44A0]))
  {
    CFGetDouble();
    v8 = v7;
LABEL_6:
    endpointLocal_setVolumeSlider(a1, 1, v8);
LABEL_7:
    v21 = 0;
    goto LABEL_8;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44B8]))
  {
    CFGetDouble();
    APSVolumeConvertDBToSliderValue();
    goto LABEL_6;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42B8]))
  {
    if (CFEqual(a2, CFSTR("IsHALMuted")))
    {
      v11 = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
      IsHALMuteForUser = APEndpointIsHALMuteForUser();
      if (gLogCategory_APEndpointLocal <= 50
        && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v16 = a1;
      v15 = v11;
      v17 = IsHALMuteForUser;
      goto LABEL_41;
    }
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42C0]))
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42C8]))
      {
        if (gLogCategory_APEndpointLocal <= 50
          && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
        {
          goto LABEL_34;
        }
        goto LABEL_8;
      }
      if (CFEqual(a2, CFSTR("EndpointInfo")))
      {
        v18 = *(_QWORD *)(DerivedStorage + 16);
        v19 = *(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (v19)
        {
          v21 = v19(v18, a3);
          if (!v21)
            goto LABEL_8;
        }
        else
        {
          v21 = -12782;
        }
      }
      else
      {
        if (!CFEqual(a2, CFSTR("PermanentSpeakerGroupingInfo")))
        {
          if (gLogCategory_APEndpointLocal <= 30
            && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v20 = -12784;
          goto LABEL_64;
        }
        v21 = APEndpointDescriptionSetProperty(*(_QWORD *)(DerivedStorage + 16), (uint64_t)CFSTR("PermanentSpeakerGroupingInfo"), (uint64_t)a3);
        if (!v21)
        {
          endpointLocal_writePSGInfoIntoPrefs();
          goto LABEL_8;
        }
      }
      APSLogErrorAt();
      goto LABEL_8;
    }
    if (a3)
    {
      v13 = CFGetTypeID(a3);
      if (v13 == CFBooleanGetTypeID())
      {
        if (gLogCategory_APEndpointLocal <= 50
          && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v14 = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
        goto LABEL_28;
      }
    }
    goto LABEL_61;
  }
  if (!a3 || (v10 = CFGetTypeID(a3), v10 != CFBooleanGetTypeID()))
  {
LABEL_61:
    APSLogErrorAt();
    v20 = -16720;
    goto LABEL_64;
  }
  if (gLogCategory_APEndpointLocal <= 50
    && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v14 = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
LABEL_28:
    v15 = v14;
    v16 = a1;
    v17 = 1;
LABEL_41:
    endpointLocal_setIsMuted(v16, v15, v17);
    goto LABEL_7;
  }
  if (gLogCategory_APEndpointLocal <= 50
    && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
  {
LABEL_34:
    LogPrintF();
  }
LABEL_8:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 144));
  return v21;
}

uint64_t APEndpointDescriptionCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  CMBaseObject = APEndpointDescriptionGetCMBaseObject(a1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(CMBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t endpointLocal_copyAirPlayClusterCompatibleEndpointProperties(uint64_t a1, __CFDictionary **a2)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v6;
  __CFDictionary *MutableCopy;
  __CFDictionary *v8;
  uint64_t v9;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 16));
  v5 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v5)
  {
    v9 = 4294954514;
LABEL_6:
    APSLogErrorAt();
    goto LABEL_7;
  }
  v6 = v5(CMBaseObject, CFSTR("AirPlayClusterCompatibleEndpointProperties"), *MEMORY[0x1E0C9AE00], &cf);
  if ((_DWORD)v6)
  {
    v9 = v6;
    goto LABEL_6;
  }
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    v8 = MutableCopy;
    CFDictionarySetValue(MutableCopy, CFSTR("IsLocalDevice"), (const void *)*MEMORY[0x1E0C9AE50]);
    v9 = 0;
    *a2 = v8;
  }
  else
  {
    APSLogErrorAt();
    v9 = 4294950575;
  }
LABEL_7:
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t endpointLocal_copyShowInfoDictionary(uint64_t a1, __CFDictionary **a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, const __CFString *, uint64_t, void **);
  uint64_t result;
  void *value[2];
  __int16 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value[0] = 0;
  value[1] = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v13 = 0u;
  v12 = 0;
  if (a2)
  {
    v4 = DerivedStorage;
    v5 = *MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v7 = Mutable;
      SNPrintF();
      CFDictionarySetCString();
      CFDictionarySetValue(v7, CFSTR("IsLocal"), (const void *)*MEMORY[0x1E0C9AE50]);
      APSGetFBOPropertyCString();
      TextToHardwareAddressScalar();
      CFDictionarySetInt64();
      CFDictionarySetValue(v7, CFSTR("DeviceID"), *(const void **)(v4 + 24));
      CFDictionarySetValue(v7, CFSTR("Name"), *(const void **)(v4 + 32));
      GetDeviceModelString();
      CFDictionarySetCString();
      APSVersionUtilsGetShortVersionLength();
      TextToSourceVersion();
      CFDictionarySetInt64();
      CFDictionarySetValue(v7, CFSTR("IsRemoteControlEndpoint"), (const void *)*MEMORY[0x1E0C9AE40]);
      CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v4 + 16));
      v9 = *(void (**)(uint64_t, const __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
      if (v9 && (v9(CMBaseObject, CFSTR("IsClusterLeader"), v5, value), value[0]))
      {
        CFDictionarySetValue(v7, CFSTR("IsClusterLeader"), value[0]);
        result = (uint64_t)value[0];
        *a2 = v7;
        if (result)
        {
          CFRelease((CFTypeRef)result);
          return 0;
        }
      }
      else
      {
        result = 0;
        *a2 = v7;
      }
    }
    else
    {
      APSLogErrorAt();
      return 4294950575;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950576;
  }
  return result;
}

uint64_t endpointLocal_copyMXDescriptor(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v10;
  uint64_t v11;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 153) && (v4 = DerivedStorage, *(_BYTE *)(DerivedStorage + 154)))
  {
    v5 = *MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v7 = Mutable;
      if (*(_BYTE *)(v4 + 41))
      {
LABEL_8:
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        v11 = 0;
        *a2 = v7;
        goto LABEL_9;
      }
      CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v4 + 16));
      v9 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
      if (v9)
      {
        v10 = v9(CMBaseObject, CFSTR("Descriptor"), v5, &cf);
        if (!(_DWORD)v10)
        {
          FigCFDictionarySetAllValuesFromDictionary();
          CMBaseObjectGetDerivedStorage();
          APSLogErrorAt();
          APSLogErrorAt();
          CMBaseObjectGetDerivedStorage();
          APSLogErrorAt();
          APSLogErrorAt();
          goto LABEL_8;
        }
        v11 = v10;
      }
      else
      {
        v11 = 4294954514;
      }
      APSLogErrorAt();
      CFRelease(v7);
    }
    else
    {
      APSLogErrorAt();
      v11 = 4294950575;
    }
  }
  else
  {
    APSLogErrorAt();
    v11 = 4294949690;
  }
LABEL_9:
  if (cf)
    CFRelease(cf);
  return v11;
}

void endpointLocal_setVolumeSlider(const void *a1, int a2, float a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  _QWORD block[5];
  float v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointLocal <= 50
    && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
  {
    APSVolumeConvertSliderValueToDB();
    APSVolumeConvertSliderValueToDB();
    LogPrintF();
  }
  if (a2 && *(_BYTE *)(DerivedStorage + 173))
  {
    *(_BYTE *)(DerivedStorage + 173) = 0;
  }
  else if (vabds_f32(a3, *(float *)(DerivedStorage + 164)) < 0.00000011921)
  {
    return;
  }
  *(float *)(DerivedStorage + 164) = a3;
  if (*(_BYTE *)(DerivedStorage + 9))
  {
    CFRetain(a1);
    v7 = *(NSObject **)DerivedStorage;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __endpointLocal_setVolumeSlider_block_invoke;
    block[3] = &__block_descriptor_44_e5_v8__0l;
    block[4] = a1;
    v9 = a3;
    dispatch_async(v7, block);
  }
}

void endpointLocal_setIsMuted(const void *a1, int a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  float v10;
  float v11;
  int v12;
  _QWORD block[5];
  char v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    v7 = DerivedStorage;
    if (gLogCategory_APEndpointLocal <= 50
      && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (*(unsigned __int8 *)(v7 + 173) != a2)
    {
      *(_BYTE *)(v7 + 173) = a2;
      if (*(_BYTE *)(v7 + 8))
      {
        if (*(_BYTE *)(v7 + 9))
        {
          CFRetain(a1);
          v8 = *(NSObject **)v7;
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = __endpointLocal_setIsMuted_block_invoke;
          block[3] = &__block_descriptor_41_e5_v8__0l;
          block[4] = a1;
          v14 = a2;
          dispatch_async(v8, block);
        }
      }
      else
      {
        v9 = CMBaseObjectGetDerivedStorage();
        APSVolumeConvertDBToSliderValue();
        if (a2 == 1)
        {
          APSVolumeConvertDBToSliderValue();
          v11 = v10;
          v12 = *(_DWORD *)(v9 + 164);
        }
        else
        {
          v11 = *(float *)(v9 + 176);
          APSVolumeConvertDBToSliderValue();
        }
        *(_DWORD *)(v9 + 176) = v12;
        if (gLogCategory_APEndpointLocal <= 50
          && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        endpointLocal_setVolumeSlider(a1, 0, v11);
      }
    }
  }
}

uint64_t APEndpointDescriptionSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  CMBaseObject = APEndpointDescriptionGetCMBaseObject(a1);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(CMBaseObject, a2, a3);
  else
    return 4294954514;
}

uint64_t endpointLocal_writePSGInfoIntoPrefs()
{
  FigCFDictionaryGetValue();
  APSSettingsSetValue();
  FigCFDictionaryGetValue();
  APSSettingsSetValue();
  FigCFDictionaryGetValue();
  APSSettingsSetValue();
  FigCFDictionaryGetValue();
  APSSettingsSetValue();
  FigCFDictionaryGetValue();
  APSSettingsSetValue();
  FigCFDictionaryGetValue();
  APSSettingsSetValue();
  APSSettingsSynchronize();
  return notify_post("com.apple.airplay.psgInfoChanged");
}

void __endpointLocal_setVolumeSlider_block_invoke(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointLocal <= 50
    && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APSLogErrorAt();
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void __endpointLocal_setIsMuted_block_invoke(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointLocal <= 50
    && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APSLogErrorAt();
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t endpointLocal_Activate(void *a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 144));
  v9 = *(_QWORD *)(DerivedStorage + 56) + 1;
  *(_QWORD *)(DerivedStorage + 56) = v9;
  if (gLogCategory_APEndpointLocal <= 50
    && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 40))
  {
    APSLogErrorAt();
  }
  else
  {
    if (*(_BYTE *)(DerivedStorage + 41))
    {
      APSLogErrorAt();
      v10 = 4294950573;
      goto LABEL_9;
    }
    endpointLocal_activateInternal(a1, 0, v9, 1, a2, a3, a4);
  }
  v10 = 0;
LABEL_9:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 144));
  return v10;
}

uint64_t endpointLocal_Deactivate(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  int v6;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointLocal <= 50
    && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 144));
  if (*(_BYTE *)(DerivedStorage + 41))
  {
    APSLogErrorAt();
    v6 = 0;
    v7 = 4294950573;
  }
  else
  {
    v6 = *(unsigned __int8 *)(DerivedStorage + 152);
    endpointLocal_suspendAndDissociateStreams(a1);
    endpointLocal_resetActivationState();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    endpointLocal_updateIsVolumeAndMuteControlSupported();
    if (gLogCategory_APEndpointLocal <= 50
      && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v7 = 0;
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 144));
  if (a3)
  {
    CFRetain(a1);
    APSDispatchAsyncFHelper();
  }
  if (v6)
  {
    if (gLogCategory_APEndpointLocal <= 50
      && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  return v7;
}

uint64_t endpointLocal_Dissociate()
{
  uint64_t DerivedStorage;
  int v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 144));
  v1 = *(unsigned __int8 *)(DerivedStorage + 41);
  *(_BYTE *)(DerivedStorage + 41) = 1;
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 144));
  if (!v1)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  return 0;
}

uint64_t endpointLocal_SetDelegateRouting(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 144));
  if (*(_BYTE *)(DerivedStorage + 41))
  {
    APSLogErrorAt();
    a2 = 4294950573;
  }
  else
  {
    if (gLogCategory_APEndpointLocal <= 50
      && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v4 = *(const void **)(DerivedStorage + 136);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(DerivedStorage + 136) = 0;
    }
    v5 = (_OWORD *)(DerivedStorage + 96);
    if (a2)
    {
      v6 = *(_OWORD *)a2;
      v7 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(DerivedStorage + 128) = *(_QWORD *)(a2 + 32);
      *v5 = v6;
      *(_OWORD *)(DerivedStorage + 112) = v7;
      a2 = 0;
      *(_QWORD *)(DerivedStorage + 136) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    }
    else
    {
      *(_QWORD *)(DerivedStorage + 128) = 0;
      *v5 = 0u;
      *(_OWORD *)(DerivedStorage + 112) = 0u;
    }
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 144));
  return a2;
}

uint64_t endpointLocal_UpdateFeatures(void *a1, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  CFTypeID v13;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = *(_QWORD *)(DerivedStorage + 64);
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 144));
  if (gLogCategory_APEndpointLocal <= 50
    && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*(_BYTE *)(DerivedStorage + 40))
  {
    v15 = 4294949691;
    goto LABEL_23;
  }
  if (*(_BYTE *)(DerivedStorage + 41))
  {
    v15 = 4294950573;
    goto LABEL_23;
  }
  v10 = v9 | a2;
  if ((v9 | a2) == v9 && v10 == a2)
    goto LABEL_18;
  if (v10 == v9 || v10 == a2)
  {
    if (!a3 || (v13 = CFGetTypeID(a3), v13 == CFDictionaryGetTypeID()))
    {
LABEL_18:
      v15 = 0;
      goto LABEL_19;
    }
    v15 = 4294950576;
LABEL_23:
    APSLogErrorAt();
    goto LABEL_19;
  }
  v15 = 4294960591;
LABEL_19:
  endpointLocal_activateInternal(a1, v15, *(_QWORD *)(DerivedStorage + 56), 0, a2, (const __CFDictionary *)a3, a4);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 144));
  return v15;
}

void endpointLocal_activateInternal(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, uint64_t a7)
{
  uint64_t DerivedStorage;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  const void *Value;
  __CFDictionary *v22;
  __CFDictionary *Mutable;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __CFDictionary *v29;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v29 = 0;
  if (a2)
  {
    APSLogErrorAt();
    v22 = 0;
LABEL_80:
    v26 = 0;
    v27 = 0;
    if (!a7)
      goto LABEL_62;
LABEL_61:
    CFRetain(a1);
    APSDispatchAsyncFHelper();
    goto LABEL_62;
  }
  if (gLogCategory_APEndpointLocal <= 50
    && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  FigCFDictionaryGetBooleanIfPresent();
  if (!*(_BYTE *)(DerivedStorage + 42))
    goto LABEL_83;
  v14 = (_BYTE *)(DerivedStorage + 43);
  FigCFDictionaryGetBooleanIfPresent();
  v15 = CMBaseObjectGetDerivedStorage();
  if (a6)
  {
    v16 = v15;
    v17 = DerivedStorage;
    v18 = a5;
    v19 = (const void *)*MEMORY[0x1E0CA3770];
    if (CFDictionaryContainsKey(a6, (const void *)*MEMORY[0x1E0CA3770]))
    {
      v20 = *(const void **)(v16 + 72);
      Value = CFDictionaryGetValue(a6, v19);
      *(_QWORD *)(v16 + 72) = Value;
      if (Value)
        CFRetain(Value);
      if (v20)
        CFRelease(v20);
    }
    a5 = v18;
    DerivedStorage = v17;
    if (FigCFDictionaryGetBooleanIfPresent()
      && gLogCategory_APEndpointLocal <= 50
      && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  if (APSIsEndpointClusteringEnabled() && APSIsFBOPropertyNonNull() && !*v14)
  {
LABEL_83:
    APSLogErrorAt();
    v22 = 0;
    goto LABEL_75;
  }
  if (*(_BYTE *)(DerivedStorage + 40))
  {
    v22 = 0;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v22 = Mutable;
    if (!Mutable)
    {
      APSLogErrorAt();
      goto LABEL_75;
    }
    CFDictionarySetValue(Mutable, CFSTR("PreferredNetworkClockType"), (const void *)*MEMORY[0x1E0CF74F8]);
    if (APEndpointCopyFromActivationOptionsOrCreateSharedContext(a6, a5, (uint64_t)v22, DerivedStorage + 88, 0, &v29))
    {
LABEL_88:
      APSLogErrorAt();
      goto LABEL_75;
    }
  }
  v24 = *(_QWORD *)(DerivedStorage + 64);
  if (v24)
  {
    if (a5)
    {
      if (v24 == a5)
      {
        if (gLogCategory_APEndpointLocal <= 90)
        {
          if (gLogCategory_APEndpointLocal == -1 && !_LogCategory_Initialize())
            goto LABEL_75;
LABEL_42:
          LogPrintF();
          goto LABEL_75;
        }
LABEL_79:
        endpointLocal_resetActivationState();
        goto LABEL_80;
      }
      if (gLogCategory_APEndpointLocal > 90)
        goto LABEL_79;
      if (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize())
        goto LABEL_42;
LABEL_75:
      if (gLogCategory_APEndpointLocal <= 50
        && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_79;
    }
    if (gLogCategory_APEndpointLocal <= 50
      && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    endpointLocal_suspendAndDissociateStreams(a1);
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 80));
    v28 = *(_QWORD *)(DerivedStorage + 64);
    if (v28)
      endpointLocal_postStreamsChangedNotification(a1, v28, a3, 0);
    goto LABEL_55;
  }
  if (!a5)
  {
LABEL_55:
    v27 = 0;
    v26 = 0;
    goto LABEL_56;
  }
  v25 = *(unsigned __int8 *)(DerivedStorage + 44);
  CMBaseObjectGetDerivedStorage();
  if ((a5 & 2) == 0)
  {
    if ((a5 & 8) == 0)
    {
      if (gLogCategory_APEndpointLocal > 90)
        goto LABEL_79;
      if (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize())
        goto LABEL_42;
      goto LABEL_75;
    }
    v27 = 8;
LABEL_50:
    if (!endpointLocal_setUpAudioStream((uint64_t)a1, (const void *)*MEMORY[0x1E0CA4888], v25))
    {
      v26 = 1;
      goto LABEL_56;
    }
    goto LABEL_87;
  }
  if (endpointLocal_setUpAudioStream((uint64_t)a1, (const void *)*MEMORY[0x1E0CA4880], v25))
  {
LABEL_87:
    APSLogErrorAt();
    goto LABEL_88;
  }
  if ((a5 & 8) != 0)
  {
    v27 = 10;
    goto LABEL_50;
  }
  v26 = 1;
  v27 = 2;
LABEL_56:
  *(_QWORD *)(DerivedStorage + 64) = v27;
  *(_BYTE *)(DerivedStorage + 40) = 1;
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  endpointLocal_updateIsVolumeAndMuteControlSupported();
  if (gLogCategory_APEndpointLocal <= 50
    && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a7)
    goto LABEL_61;
LABEL_62:
  if (v26)
    endpointLocal_postStreamsChangedNotification(a1, v27, a3, 1);
  if (v22)
    CFRelease(v22);
  if (v29)
    CFRelease(v29);
}

void endpointLocal_suspendAndDissociateStreams(void *a1)
{
  const __CFDictionary *v2;

  v2 = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 80);
  if (v2)
    CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)endpointLocal_suspendAndDissociateStreamsDictionaryEntry, a1);
  endpoint_handleIdleStateChanged((uint64_t)a1, 0);
}

void endpointLocal_postStreamsChangedNotification(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const __CFAllocator *v8;
  CFTypeRef cf;

  CMBaseObjectGetDerivedStorage();
  cf = 0;
  v8 = CFGetAllocator(a1);
  if (APEndpointCreateStreamsChangedNotificationPayload(v8, a2, a3, a4, (CFMutableDictionaryRef *)&cf))
  {
    APSLogErrorAt();
  }
  else
  {
    if (gLogCategory_APEndpointLocal <= 30
      && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  if (cf)
    CFRelease(cf);
}

uint64_t endpointLocal_updateIsVolumeAndMuteControlSupported()
{
  uint64_t result;
  uint64_t v1;
  int v2;

  result = CMBaseObjectGetDerivedStorage();
  v1 = result;
  if (*(_BYTE *)(result + 40))
    v2 = *(_DWORD *)(result + 156) != 0;
  else
    v2 = 0;
  if (*(unsigned __int8 *)(result + 160) != v2)
  {
    *(_BYTE *)(result + 160) = v2;
    if (gLogCategory_APEndpointLocal <= 50
      && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    result = FigDispatchAsyncPostNotification();
  }
  if (*(unsigned __int8 *)(v1 + 172) != v2)
  {
    *(_BYTE *)(v1 + 172) = v2;
    if (gLogCategory_APEndpointLocal <= 50)
    {
      if (gLogCategory_APEndpointLocal != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        result = LogPrintF();
    }
    if (*(_BYTE *)(v1 + 8))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      return FigDispatchAsyncPostNotification();
    }
  }
  return result;
}

void endpointLocal_resetActivationState()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 40) = 0;
  *(_WORD *)(DerivedStorage + 42) = 0;
  *(_QWORD *)(DerivedStorage + 64) = 0;
  *(_BYTE *)(DerivedStorage + 152) = 0;
  *(_BYTE *)(DerivedStorage + 44) = 0;
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 80));
  v1 = *(const void **)(DerivedStorage + 88);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 72);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
}

uint64_t endpointLocal_setUpAudioStream(uint64_t a1, const void *a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  const __CFAllocator *v9;
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  CFMutableDictionaryRef v12;
  void (*v13)(CFMutableDictionaryRef, CFTypeRef *, CFTypeRef *, CFTypeRef *, _QWORD, CFTypeRef *, CFTypeRef *, _QWORD);
  const void *v14;
  Boolean v15;
  uint64_t v16;
  _BOOL4 v17;
  void *value;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  v7 = DerivedStorage;
  v8 = (const void *)*MEMORY[0x1E0CA4880];
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4880]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4888]))
  {
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v11 = Mutable;
    if (Mutable)
    {
      if (a3)
        CFDictionarySetValue(Mutable, CFSTR("ForEchoCancellationReference"), (const void *)*MEMORY[0x1E0C9AE50]);
      v23 = 0;
      cf = 0;
      v21 = 0;
      v22 = 0;
      v20 = 0;
      v12 = *(CFMutableDictionaryRef *)(CMBaseObjectGetDerivedStorage() + 16);
      if (!v12)
        goto LABEL_37;
      v13 = *(void (**)(CFMutableDictionaryRef, CFTypeRef *, CFTypeRef *, CFTypeRef *, _QWORD, CFTypeRef *, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (!v13 || (v13(v12, &cf, &v23, &v22, 0, &v21, &v20, 0), !cf))
      {
        v12 = 0;
LABEL_14:
        if (v23)
          CFRelease(v23);
        if (v22)
          CFRelease(v22);
        if (v21)
          CFRelease(v21);
        if (v20)
          CFRelease(v20);
        FigCFDictionarySetValue();
        v14 = *(const void **)(v7 + 88);
        v15 = CFEqual(a2, v8);
        v16 = APEndpointStreamLocalCreate(v9, CFSTR("Local Playback Stream"), a2, (uint64_t)v11, v14, v15, (CFTypeRef *)&value);
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        v17 = APSGetFBOPropertyInt64() != 0;
        endpoint_handleIdleStateChanged(a1, v17);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v7 + 80), a2, value);
        if (gLogCategory_APEndpointLocal <= 50
          && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (v12)
          CFRelease(v12);
        goto LABEL_28;
      }
      v12 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v12)
      {
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
      }
      else
      {
LABEL_37:
        APSLogErrorAt();
      }
      if (cf)
        CFRelease(cf);
      goto LABEL_14;
    }
    APSLogErrorAt();
    v16 = 4294950575;
  }
  else
  {
    APSLogErrorAt();
    v11 = 0;
    v16 = 4294950576;
  }
LABEL_28:
  if (value)
    CFRelease(value);
  if (v11)
    CFRelease(v11);
  return v16;
}

void endpointLocal_handleStreamIsPlayingDidChange(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  _BOOL4 v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = CFDictionaryGetInt64() != 0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 144));
  endpoint_handleIdleStateChanged(a2, v4);
  JUMPOUT(0x1CAA400E4);
}

void endpoint_handleIdleStateChanged(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  int v4;
  int v5;
  const __CFArray *v6;
  CFIndex v7;
  int v8;
  __CFDictionary *Mutable;
  __CFDictionary *v10;
  const void **v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(unsigned __int8 *)(DerivedStorage + 45);
  if (a2)
  {
    v5 = 1;
    goto LABEL_13;
  }
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 80))
  {
    v6 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
    if (CFArrayGetCount(v6) < 1)
    {
LABEL_8:
      v8 = 1;
      if (!v6)
        goto LABEL_12;
    }
    else
    {
      v7 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(v6, v7);
        if (APSGetFBOPropertyInt64())
          break;
        if (++v7 >= CFArrayGetCount(v6))
          goto LABEL_8;
      }
      v8 = 0;
      if (!v6)
        goto LABEL_12;
    }
    CFRelease(v6);
  }
  else
  {
    v8 = 1;
  }
LABEL_12:
  v5 = v8 == 0;
LABEL_13:
  if (v4 != v5)
  {
    if (gLogCategory_APEndpointLocal <= 50
      && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_BYTE *)(DerivedStorage + 45) = v5;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v10 = Mutable;
    v11 = (const void **)MEMORY[0x1E0C9AE40];
    if (v5)
      v11 = (const void **)MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, CFSTR("IsEngaged"), *v11);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (v10)
      CFRelease(v10);
  }
}

uint64_t endpointLocal_suspendAndDissociateStreamsDictionaryEntry(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t result;
  uint64_t (*v5)(uint64_t);

  if (gLogCategory_APEndpointLocal <= 50
    && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  v3 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v3)
    v3(a2, 0, 0, 0);
  result = CMBaseObjectGetVTable();
  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 32);
  if (v5)
    return v5(a2);
  return result;
}

uint64_t endpointLocal_DuckAudio()
{
  if (gLogCategory_APEndpointLocal <= 50
    && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return 0;
}

uint64_t endpointLocal_AcquireAndCopyResource(uint64_t a1, uint64_t a2, const __CFDictionary *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  const __CFDictionary *v12;
  const void *Value;
  CFTypeRef v14;

  FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointLocal <= 50
    && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 144));
  if (*(_BYTE *)(DerivedStorage + 40))
  {
    if (FigCFEqual())
    {
      v7 = CMBaseObjectGetDerivedStorage();
      if (a3 && (v8 = v7, (v9 = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA3718])) != 0))
      {
        v10 = v9;
        if (gLogCategory_APEndpointLocal <= 50
          && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v12 = *(const __CFDictionary **)(v8 + 80);
        if (v12 && (Value = CFDictionaryGetValue(v12, v10)) != 0 && (v14 = CFRetain(Value)) != 0)
        {
          v11 = 0;
          *a4 = v14;
        }
        else
        {
          APSLogErrorAt();
          v11 = 4294950571;
        }
      }
      else
      {
        APSLogErrorAt();
        v11 = 4294950576;
      }
    }
    else
    {
      if (gLogCategory_APEndpointLocal <= 90
        && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v11 = 4294950570;
    }
  }
  else
  {
    v11 = 4294949690;
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 144));
  return v11;
}

uint64_t endpointLocal_RelinquishResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;

  FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointLocal <= 50
    && (gLogCategory_APEndpointLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 144));
  if (!*(_BYTE *)(DerivedStorage + 40))
  {
    v5 = 4294949690;
LABEL_13:
    APSLogErrorAt();
    goto LABEL_9;
  }
  if (!a3)
  {
    v5 = 4294950576;
    goto LABEL_13;
  }
  if (!FigCFEqual())
  {
    v5 = 4294950570;
    goto LABEL_13;
  }
  v5 = 0;
LABEL_9:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 144));
  return v5;
}

void endpointLocal_callDelegateHandleFailed(uint64_t a1)
{
  const void *v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 24))(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32));
  CFRelease(*(CFTypeRef *)a1);
  CFRelease(*(CFTypeRef *)(a1 + 16));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

uint64_t APAuthenticationClientMFiMutualAuthCreate(uint64_t a1, const void *a2, const void *a3, const __CFData *a4, _QWORD *a5)
{
  uint64_t v9;
  _QWORD *DerivedStorage;
  CFTypeRef v11;
  uint64_t v12;
  const UInt8 *BytePtr;
  size_t Length;
  uint64_t v15;
  dispatch_semaphore_t v16;
  uint64_t v17;
  char label[64];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v17 = 4294895495;
    APSLogErrorAt();
    return v17;
  }
  if (!a3)
  {
    v17 = 4294895495;
LABEL_21:
    APSLogErrorAt();
    return v17;
  }
  if (!a4)
  {
    v17 = 4294895495;
    goto LABEL_21;
  }
  APAuthenticationClientGetClassID();
  v9 = CMDerivedObjectCreate();
  if ((_DWORD)v9)
  {
    v17 = v9;
    goto LABEL_21;
  }
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  SNPrintF();
  DerivedStorage[12] = dispatch_queue_create(label, 0);
  *DerivedStorage = CFRetain(a2);
  v11 = CFRetain(a3);
  DerivedStorage[2] = v11;
  v12 = APAccTransportClientConnectionCopyEndpoint((uint64_t)v11, (uint64_t)"com.apple.AccTransportClientEndpointMFi4Authentication", (uint64_t)(DerivedStorage + 1));
  if ((_DWORD)v12)
  {
    v17 = v12;
    goto LABEL_21;
  }
  if (CFDataGetLength(a4) != 64)
  {
    v17 = 4294895495;
    goto LABEL_21;
  }
  BytePtr = CFDataGetBytePtr(a4);
  Length = CFDataGetLength(a4);
  memcpy(DerivedStorage + 3, BytePtr, Length);
  v15 = FigSimpleMutexCreate();
  DerivedStorage[13] = v15;
  if (v15 && (v16 = dispatch_semaphore_create(0), (DerivedStorage[11] = v16) != 0))
  {
    DerivedStorage[15] = 0;
    if (gLogCategory_APAuthenticationClientMFiMutualAuth <= 50
      && (gLogCategory_APAuthenticationClientMFiMutualAuth != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v17 = 0;
    *a5 = 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294895496;
  }
  return v17;
}

uint64_t mfiMutualAuth_createTransformedMessage(uint64_t a1, int a2, const __CFData *a3, CFTypeRef *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  int v14;
  int v15;
  int v16;
  const void *v17;
  const void *v18;

  v8 = 4294896151;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = DerivedStorage;
  if (!a3 || !a4)
  {
LABEL_13:
    APSLogErrorAt();
    goto LABEL_14;
  }
  v11 = (_QWORD *)(DerivedStorage + 104);
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 104));
  if (*(_QWORD *)(v10 + 120) != 3)
  {
    if (gLogCategory_APAuthenticationClientMFiMutualAuth <= 90
      && (gLogCategory_APAuthenticationClientMFiMutualAuth != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    MEMORY[0x1CAA400E4](*v11);
    goto LABEL_13;
  }
  if (gLogCategory_APAuthenticationClientMFiMutualAuth <= 30
    && (gLogCategory_APAuthenticationClientMFiMutualAuth != -1 || _LogCategory_Initialize()))
  {
    CFDataGetLength(a3);
    LogPrintF();
  }
  if (a2)
  {
    mfiMutualAuth_setAndLogSecureTunnelState(a1, 3);
    v14 = APAccTransportClientEndpointForwardData(*(_QWORD *)(v10 + 8), (uint64_t)a3);
  }
  else
  {
    mfiMutualAuth_setAndLogSecureTunnelState(a1, 1);
    v14 = APAccTransportClientEndpointSecureTunnelDataSend(*(_QWORD *)(v10 + 8), (uint64_t)a3);
  }
  v15 = v14;
  MEMORY[0x1CAA400E4](*v11);
  if (v15)
    goto LABEL_13;
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v10 + 88), 0xFFFFFFFFFFFFFFFFLL);
  if (gLogCategory_APAuthenticationClientMFiMutualAuth <= 50
    && (gLogCategory_APAuthenticationClientMFiMutualAuth != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(v10 + 104));
  v16 = *(_DWORD *)(v10 + 124);
  if (v16 == 4 || v16 == 2)
  {
    v17 = *(const void **)(v10 + 112);
    if (v17)
    {
      *a4 = CFRetain(v17);
      v18 = *(const void **)(v10 + 112);
      if (v18)
      {
        CFRelease(v18);
        v12 = 0;
        v8 = 0;
        *(_QWORD *)(v10 + 112) = 0;
      }
      else
      {
        v12 = 0;
        v8 = 0;
      }
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  MEMORY[0x1CAA400E4](*v11);
LABEL_14:
  v11 = (_QWORD *)(v10 + 104);
  MEMORY[0x1CAA400CC](*(_QWORD *)(v10 + 104));
  if (gLogCategory_APAuthenticationClientMFiMutualAuth <= 90
    && (gLogCategory_APAuthenticationClientMFiMutualAuth != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v12 = 7;
LABEL_19:
  mfiMutualAuth_setAndLogSecureTunnelState(a1, v12);
  MEMORY[0x1CAA400E4](*v11);
  return v8;
}

void mfiMutualAuth_Finalize()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const void *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAuthenticationClientMFiMutualAuth <= 50
    && (gLogCategory_APAuthenticationClientMFiMutualAuth != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v1 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  if (v1)
    APAccTransportClientEndpointDeactivate(v1);
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v2 = *(const void **)(DerivedStorage + 112);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  APAccTransportClientConnectionInvalidateEndpoint(*(_QWORD *)(DerivedStorage + 16), *(_QWORD *)(DerivedStorage + 8));
  v3 = *(const void **)(DerivedStorage + 8);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(DerivedStorage + 16);
  if (v4)
    CFRelease(v4);
  FigSimpleMutexDestroy();
  v5 = *(NSObject **)(DerivedStorage + 88);
  if (v5)
  {
    dispatch_release(v5);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v6 = *(NSObject **)(DerivedStorage + 96);
  if (v6)
  {
    dispatch_release(v6);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
}

__CFString *mfiMutualAuth_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APAuthenticationClientMFiMutualAuth %p>"), a1);
  return Mutable;
}

uint64_t mfiMutualAuth_CopyProperty(int a1, CFTypeRef cf1, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t result;

  if (CFEqual(cf1, CFSTR("AuthenticationData")))
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!a4)
    {
      APSLogErrorAt();
      return 4294895495;
    }
    v6 = APAccTransportClientEndpointCopyAuthenticationCertificateSerial(*(_QWORD *)(DerivedStorage + 8));
    if (gLogCategory_APAuthenticationClientMFiMutualAuth <= 30
      && (gLogCategory_APAuthenticationClientMFiMutualAuth != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (v6)
    {
      result = 0;
      *a4 = v6;
      return result;
    }
    APSLogErrorAt();
  }
  return 4294954512;
}

uint64_t mfiMutualAuth_GetAuthenticationType()
{
  return 32;
}

uint64_t mfiMutualAuth_AuthenticateEndpoint(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 96);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __mfiMutualAuth_AuthenticateEndpoint_block_invoke;
  v5[3] = &unk_1E8266CD8;
  v5[4] = &v6;
  v5[5] = a1;
  dispatch_sync(v2, v5);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t mfiMutualAuth_sendMessageMFi4(uint64_t a1, const void *a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  uint64_t v7;
  char __str[32];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v6 = Mutable;
      snprintf(__str, 0x20uLL, "%d", 32);
      CFDictionarySetCString();
      if (a3)
        CFDictionaryApplyBlock();
      CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E0CF75B8], a2);
      if (gLogCategory_APAuthenticationClientMFiMutualAuth <= 20
        && (gLogCategory_APAuthenticationClientMFiMutualAuth != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v7 = APTransportStreamSendPlistMessageCreatingReply();
      CFRelease(v6);
    }
    else
    {
      APSLogErrorAt();
      return 4294895496;
    }
  }
  else
  {
    v7 = 4294895495;
    APSLogErrorAt();
  }
  return v7;
}

uint64_t mfiMutualAuth_setAndLogAuthState(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  result = CMBaseObjectGetDerivedStorage();
  v4 = result;
  if (gLogCategory_APAuthenticationClientMFiMutualAuth <= 40)
  {
    if (gLogCategory_APAuthenticationClientMFiMutualAuth != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      result = LogPrintF();
  }
  *(_DWORD *)(v4 + 120) = a2;
  return result;
}

void __mfiMutualAuth_initMFi4_block_invoke(uint64_t a1, const void *a2)
{
  uint64_t v4;
  int v5;
  uint64_t DerivedStorage;
  int v7;
  uint64_t v8;
  int v9;
  const void *v10;

  if (gLogCategory_APAuthenticationClientMFiMutualAuth <= 50
    && (gLogCategory_APAuthenticationClientMFiMutualAuth != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 120);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 104));
  if (v5 != 3)
  {
    if (*(_DWORD *)(DerivedStorage + 120) != 1)
    {
      mfiMutualAuth_setAndLogAuthState(v4, 4);
      if (gLogCategory_APAuthenticationClientMFiMutualAuth <= 90
        && (gLogCategory_APAuthenticationClientMFiMutualAuth != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
LABEL_28:
      JUMPOUT(0x1CAA400E4);
    }
    mfiMutualAuth_setAndLogAuthState(v4, 2);
LABEL_23:
    v10 = *(const void **)(DerivedStorage + 112);
    *(_QWORD *)(DerivedStorage + 112) = a2;
    if (a2)
      CFRetain(a2);
    if (v10)
      CFRelease(v10);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(DerivedStorage + 88));
    goto LABEL_28;
  }
  v7 = *(_DWORD *)(DerivedStorage + 124);
  if (v7 == 5)
  {
    v8 = v4;
    v9 = 6;
  }
  else
  {
    if (v7 != 1)
    {
      mfiMutualAuth_setAndLogSecureTunnelState(v4, 7);
      if (gLogCategory_APAuthenticationClientMFiMutualAuth <= 90
        && (gLogCategory_APAuthenticationClientMFiMutualAuth != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
LABEL_22:
      if (*(_DWORD *)(DerivedStorage + 124) == 7)
        goto LABEL_28;
      goto LABEL_23;
    }
    v8 = v4;
    v9 = 2;
  }
  mfiMutualAuth_setAndLogSecureTunnelState(v8, v9);
  goto LABEL_22;
}

void __mfiMutualAuth_initMFi4_block_invoke_2(uint64_t a1, int a2)
{
  int v4;

  MEMORY[0x1CAA400CC](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 104));
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 120) == 1)
  {
    if (gLogCategory_APAuthenticationClientMFiMutualAuth <= 50
      && (gLogCategory_APAuthenticationClientMFiMutualAuth != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    mfiMutualAuth_setAndLogAuthState(*(_QWORD *)(a1 + 40), 2);
    if (a2)
      v4 = 3;
    else
      v4 = 4;
    mfiMutualAuth_setAndLogAuthState(*(_QWORD *)(a1 + 40), v4);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 88));
  }
  else
  {
    mfiMutualAuth_setAndLogAuthState(*(_QWORD *)(a1 + 40), 4);
    if (gLogCategory_APAuthenticationClientMFiMutualAuth <= 90
      && (gLogCategory_APAuthenticationClientMFiMutualAuth != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  JUMPOUT(0x1CAA400E4);
}

void __mfiMutualAuth_initMFi4_block_invoke_3(uint64_t a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;

  if (gLogCategory_APAuthenticationClientMFiMutualAuth <= 50
    && (gLogCategory_APAuthenticationClientMFiMutualAuth != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(*(_QWORD *)(a1 + 40) + 104));
  v4 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 124) == 3)
  {
    mfiMutualAuth_setAndLogSecureTunnelState(v4, 4);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(const void **)(v5 + 112);
    *(_QWORD *)(v5 + 112) = a2;
    if (a2)
      CFRetain(a2);
    if (v6)
      CFRelease(v6);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 40) + 88));
  }
  else
  {
    mfiMutualAuth_setAndLogSecureTunnelState(v4, 7);
    if (gLogCategory_APAuthenticationClientMFiMutualAuth <= 90
      && (gLogCategory_APAuthenticationClientMFiMutualAuth != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  JUMPOUT(0x1CAA400E4);
}

uint64_t mfiMutualAuth_setAndLogSecureTunnelState(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  result = CMBaseObjectGetDerivedStorage();
  v4 = result;
  if (gLogCategory_APAuthenticationClientMFiMutualAuth <= 40)
  {
    if (gLogCategory_APAuthenticationClientMFiMutualAuth != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      result = LogPrintF();
  }
  *(_DWORD *)(v4 + 124) = a2;
  return result;
}

void __mfiMutualAuth_sendMessageMFi4_block_invoke(uint64_t a1, const void *a2, const void *a3)
{
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, a3);
}

uint64_t APKeyHolderCoreUtilsCreate(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;
  uint64_t v7;
  uint64_t v8;

  APSKeyHolderGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
    v8 = v5;
    APSLogErrorAt();
  }
  else
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = a2;
    if (a2)
      CFRetain(a2);
    v7 = APSCreateSecureMemAllocator();
    DerivedStorage[1] = v7;
    if (v7)
    {
      if (gLogCategory_APKeyHolderCoreUtils <= 30
        && (gLogCategory_APKeyHolderCoreUtils != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v8 = 0;
      *a3 = 0;
    }
    else
    {
      APSLogErrorAt();
      return 4294895576;
    }
  }
  return v8;
}

CFStringRef APKeyHolderCoreUtilsEncryptionContextDataStreamCreateWithSeed(const __CFAllocator *a1, uint64_t a2)
{
  return CFStringCreateWithFormat(a1, 0, CFSTR("DataStream(seed: %llu)"), a2);
}

void coreUtilsKeyHolder_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APKeyHolderCoreUtils <= 30
    && (gLogCategory_APKeyHolderCoreUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

__CFString *coreUtilsKeyHolder_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APKeyHolderCoreUtils %p>"), a1);
  return Mutable;
}

uint64_t coreUtilsKeyHolder_CopyProperty(int a1, CFTypeRef cf1, uint64_t a3, _QWORD *a4)
{
  CFTypeRef v6;
  uint64_t result;

  if (gLogCategory_APKeyHolderCoreUtils <= 10
    && (gLogCategory_APKeyHolderCoreUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (CFEqual(cf1, CFSTR("HasPairingClient")))
  {
    v6 = CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
    result = 0;
    *a4 = v6;
  }
  else
  {
    if (gLogCategory_APKeyHolderCoreUtils <= 90
      && (gLogCategory_APKeyHolderCoreUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 4294954512;
  }
  return result;
}

uint64_t coreUtilsKeyHolder_CreateDerivedKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CFIndex a6, __CFData **a7)
{
  uint64_t DerivedStorage;
  uint64_t *v14;
  __CFData *Mutable;
  __CFData *v16;
  uint64_t v17;
  UInt8 *MutableBytePtr;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CFIndex, UInt8 *);
  uint64_t v20;
  uint64_t v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a6)
  {
    v21 = 4294895575;
    APSLogErrorAt();
    return v21;
  }
  v14 = (uint64_t *)DerivedStorage;
  Mutable = CFDataCreateMutable(*(CFAllocatorRef *)(DerivedStorage + 8), a6);
  if (!Mutable)
  {
    APSLogErrorAt();
    return 4294895576;
  }
  v16 = Mutable;
  CFDataSetLength(Mutable, a6);
  v17 = *v14;
  MutableBytePtr = CFDataGetMutableBytePtr(v16);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CFIndex, UInt8 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 8);
  if (!v19)
  {
    v21 = 4294954514;
LABEL_8:
    APSLogErrorAt();
    goto LABEL_9;
  }
  v20 = v19(v17, a2, a3, a4, a5, a6, MutableBytePtr);
  if ((_DWORD)v20)
  {
    v21 = v20;
    goto LABEL_8;
  }
  v21 = 0;
  if (!a7)
  {
LABEL_9:
    CFRelease(v16);
    return v21;
  }
  *a7 = v16;
  return v21;
}

uint64_t coreUtilsKeyHolder_CreateEncryptionKeysForStream(uint64_t a1, uint64_t a2, CFIndex a3, __CFData **a4, CFIndex a5, __CFData **a6)
{
  uint64_t v11;
  uint64_t DerivedKey;
  uint64_t v13;
  _BYTE *v14;

  v11 = (int)ASPrintF();
  DerivedKey = coreUtilsKeyHolder_CreateDerivedKey(a1, 0, v11, (uint64_t)"DataStream-Input-Encryption-Key", 31, a3, a4);
  if ((_DWORD)DerivedKey)
  {
    v13 = DerivedKey;
  }
  else
  {
    v13 = coreUtilsKeyHolder_CreateDerivedKey(a1, 0, v11, (uint64_t)"DataStream-Output-Encryption-Key", 32, a5, a6);
    if (!(_DWORD)v13)
      goto LABEL_3;
  }
  APSLogErrorAt();
LABEL_3:
  v14 = 0;
  if ((_DWORD)v11)
  {
    do
    {
      *v14++ = 0;
      --v11;
    }
    while (v11);
  }
  return v13;
}

uint64_t coreUtilsKeyHolder_CreateEncryptionKeysForContext(uint64_t a1, CFStringRef theString1, CFIndex a3, __CFData **a4, CFIndex a5, __CFData **a6)
{
  CFIndex v10;
  CFIndex v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t EncryptionKeysForStream;
  _QWORD *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t (*v23)(uint64_t, const char *, uint64_t, const char *, uint64_t, CFIndex, CFTypeRef *);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, const char *, uint64_t, const char *, uint64_t, CFIndex, CFTypeRef *);
  uint64_t v26;
  _QWORD *v28;
  CFTypeRef v29;
  CFTypeRef cf;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;

  v29 = 0;
  cf = 0;
  if (a3)
    v10 = a3;
  else
    v10 = 32;
  if (a5)
    v11 = a5;
  else
    v11 = 32;
  if (CFStringCompare(theString1, CFSTR("Ctrl"), 0))
  {
    if (CFStringCompare(theString1, CFSTR("Events"), 0))
    {
      v33 = 0;
      v34 = 0;
      v31 = 0;
      v32 = 0;
      if (CFStringGetOrCopyCStringUTF8())
      {
        APSLogErrorAt();
        v14 = 0;
        v13 = 1;
      }
      else
      {
        v12 = SNScanF();
        v13 = v12 != 1;
        if (v12 == 1)
          v14 = v31;
        else
          v14 = 0;
      }
      if (v13)
        EncryptionKeysForStream = 4294895575;
      else
        EncryptionKeysForStream = coreUtilsKeyHolder_CreateEncryptionKeysForStream(a1, v14, v10, a4, v11, a6);
      goto LABEL_29;
    }
    v28 = a4;
    v16 = a6;
    v17 = "Events-Write-Encryption-Key";
    v18 = "Events-Read-Encryption-Key";
    v19 = 27;
    v20 = 26;
    v21 = 11;
    v22 = "Events-Salt";
  }
  else
  {
    v28 = a4;
    v16 = a6;
    v17 = "Control-Write-Encryption-Key";
    v18 = "Control-Read-Encryption-Key";
    v19 = 28;
    v20 = 27;
    v21 = 12;
    v22 = "Control-Salt";
  }
  v23 = *(uint64_t (**)(uint64_t, const char *, uint64_t, const char *, uint64_t, CFIndex, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v23)
  {
    EncryptionKeysForStream = 4294954514;
LABEL_28:
    APSLogErrorAt();
    goto LABEL_29;
  }
  v24 = v23(a1, v22, v21, v18, v20, v10, &cf);
  if ((_DWORD)v24)
  {
    EncryptionKeysForStream = v24;
    goto LABEL_28;
  }
  v25 = *(uint64_t (**)(uint64_t, const char *, uint64_t, const char *, uint64_t, CFIndex, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v25)
  {
    EncryptionKeysForStream = 4294954514;
    goto LABEL_28;
  }
  v26 = v25(a1, v22, v21, v17, v19, v11, &v29);
  if ((_DWORD)v26)
  {
    EncryptionKeysForStream = v26;
    goto LABEL_28;
  }
  if (v28)
  {
    *v28 = cf;
    cf = 0;
  }
  EncryptionKeysForStream = 0;
  if (v16)
  {
    *v16 = v29;
    v29 = 0;
  }
LABEL_29:
  if (cf)
    CFRelease(cf);
  if (v29)
    CFRelease(v29);
  return EncryptionKeysForStream;
}

void APEndpointStreamUpdateNowPlayingTransaction(uint64_t a1, int a2, int *a3, const void **a4)
{
  const void *v6;

  if (*a3 <= 50 && (*a3 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (a4)
  {
    v6 = *a4;
    if (a2)
    {
      if (!v6)
        APSWiFiTransactionCreate();
    }
    else if (v6)
    {
      CFRelease(v6);
      *a4 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t metadataSource_getTypeID(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APMetadataSourceCreateWithNowPlayingAppPID(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  const void *v12;

  v12 = 0;
  v5 = (void *)objc_msgSend(objc_alloc(getMRClientClass()), "initWithProcessIdentifier:bundleIdentifier:", a2, 0);
  if (!v5)
  {
    APSLogErrorAt();
    v9 = 0;
    v6 = 0;
LABEL_15:
    v7 = 0;
LABEL_17:
    v10 = 4294960568;
    goto LABEL_10;
  }
  v6 = (void *)objc_msgSend(objc_alloc(getMRPlayerPathClass()), "initWithOrigin:client:player:", 0, v5, 0);
  if (!v6)
  {
    APSLogErrorAt();
    v9 = 0;
    goto LABEL_15;
  }
  v7 = (void *)objc_msgSend(objc_alloc(getMRDestinationClass()), "initWithPlayerPath:", v6);
  if (!v7)
  {
    APSLogErrorAt();
    v9 = 0;
    goto LABEL_17;
  }
  v8 = metadataSource_createWithMRDestination(a1, v7, &v12);
  if ((_DWORD)v8)
  {
    v10 = v8;
    APSLogErrorAt();
    v9 = v12;
  }
  else
  {
    if (gLogCategory_APMetadataSource <= 50
      && (gLogCategory_APMetadataSource != -1 || _LogCategory_Initialize()))
    {
      objc_msgSend(v6, "description");
      LogPrintF();
    }
    v9 = 0;
    v10 = 0;
    *a3 = v12;
  }
LABEL_10:

  if (v9)
    CFRelease(v9);
  return v10;
}

uint64_t metadataSource_createWithMRDestination(uint64_t a1, void *a2, _QWORD *a3)
{
  uint64_t Instance;
  _QWORD *v6;
  dispatch_queue_t v7;
  dispatch_queue_t v8;
  const __CFAllocator *v9;
  uint64_t v10;
  const CFDictionaryKeyCallBacks *v11;
  const CFDictionaryValueCallBacks *v12;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v14;
  CFMutableDictionaryRef v15;
  uint64_t v16;
  char label[16];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v20 = 0u;
  v21 = 0u;
  *(_OWORD *)label = 0u;
  v19 = 0u;
  if (APMetadataSourceGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APMetadataSourceGetTypeID_sInitOnce, &APMetadataSourceGetTypeID_sTypeID, (dispatch_function_t)metadataSource_getTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v6 = (_QWORD *)Instance;
    *(_QWORD *)(Instance + 128) = 0;
    *(_OWORD *)(Instance + 96) = 0u;
    *(_OWORD *)(Instance + 112) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    if (a2)
    {
      *(_QWORD *)(Instance + 120) = a2;
      SNPrintF();
      v7 = dispatch_queue_create(label, 0);
      v6[2] = v7;
      if (v7)
      {
        SNPrintF();
        v8 = dispatch_queue_create(label, 0);
        v6[12] = v8;
        if (v8)
        {
          v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v10 = 3;
          v11 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
          v12 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
          while (1)
          {
            Mutable = CFDictionaryCreateMutable(v9, 0, v11, v12);
            v6[v10] = Mutable;
            if (!Mutable)
              break;
            if (++v10 == 7)
            {
              v14 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              v6[7] = v14;
              if (v14)
              {
                v15 = CFDictionaryCreateMutable(v9, 0, 0, 0);
                v6[14] = v15;
                if (v15)
                {
                  v16 = 0;
                  *a3 = v6;
                  return v16;
                }
              }
              break;
            }
          }
        }
      }
      APSLogErrorAt();
      v16 = 4294960568;
    }
    else
    {
      APSLogErrorAt();
      v16 = 4294960591;
    }
    CFRelease(v6);
  }
  else
  {
    APSLogErrorAt();
    return 4294960568;
  }
  return v16;
}

uint64_t APMetadataSourceCreateWithRoutingContextUUID(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v9;
  const void *v10;

  v10 = 0;
  v5 = (void *)objc_msgSend(objc_alloc(getMRDestinationClass()), "initWithOutputContextUID:", a2);
  if (v5)
  {
    v6 = metadataSource_createWithMRDestination(a1, v5, &v10);
    if ((_DWORD)v6)
    {
      v7 = v6;
      APSLogErrorAt();
      v9 = v10;

      if (v9)
        CFRelease(v9);
    }
    else
    {
      if (gLogCategory_APMetadataSource <= 50
        && (gLogCategory_APMetadataSource != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *a3 = v10;

      return 0;
    }
  }
  else
  {
    APSLogErrorAt();

    return 4294960568;
  }
  return v7;
}

uint64_t APMetadataSourceAddEventCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  _QWORD context[4];
  uint64_t v8;

  v8 = 0;
  v5 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  context[0] = a1;
  context[1] = v5;
  context[2] = a3;
  context[3] = &v8;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 96), context, (dispatch_function_t)metadataSource_addEventCallbackInternal);
  if (v5)
    CFRelease(v5);
  return v8;
}

uint64_t metadataSource_addEventCallbackInternal(_QWORD *a1)
{
  _QWORD *v2;
  CFTypeRef v3;
  uint64_t v4;
  __CFDictionary *v5;
  const void *v6;
  const void *v7;
  uint64_t result;

  v2 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
  v3 = (CFTypeRef)a1[1];
  if (v3)
    v3 = CFRetain(v3);
  v4 = a1[2];
  *v2 = v3;
  v2[1] = v4;
  v5 = *(__CFDictionary **)(*a1 + 112);
  v6 = (const void *)(*(_QWORD *)(*a1 + 104) + 1);
  *(_QWORD *)(*a1 + 104) = v6;
  CFDictionarySetValue(v5, v6, v2);
  CFRetain((CFTypeRef)*a1);
  v7 = (const void *)a1[1];
  if (v7)
    CFRetain(v7);
  result = APSDispatchAsyncFHelper();
  *(_QWORD *)a1[3] = *(_QWORD *)(*a1 + 104);
  return result;
}

void APMetadataSourceRemoveEventCallback(uint64_t a1, uint64_t a2)
{
  _QWORD v2[2];

  v2[0] = a1;
  v2[1] = a2;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 96), v2, (dispatch_function_t)metadataSource_removeEventCallbackInternal);
}

void metadataSource_removeEventCallbackInternal(const void **a1)
{
  const void **Value;
  const void **v3;
  const void *v4;

  Value = (const void **)CFDictionaryGetValue(*((CFDictionaryRef *)*a1 + 14), a1[1]);
  if (Value)
  {
    v3 = Value;
    v4 = *Value;
    if (v4)
      CFRelease(v4);
    CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)*a1 + 14), a1[1]);
    free(v3);
  }
}

void APMetadataSourceStart(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __APMetadataSourceStart_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_sync(v1, block);
}

void APMetadataSourceStop(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __APMetadataSourceStop_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_sync(v1, block);
}

uint64_t APMetadataSourceSetMetadata(const void *a1, const void *a2)
{
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  return APSDispatchAsyncFHelper();
}

void metadataSource_setMetadataCallback(uint64_t a1)
{
  char *v2;
  const __CFDictionary *v3;
  CFMutableDictionaryRef Mutable;
  uint64_t i;
  const __CFDictionary *Value;
  const __CFDictionary *v7;
  const void *v8;

  v2 = *(char **)a1;
  v3 = *(const __CFDictionary **)(a1 + 8);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  for (i = 0; i != 3; ++i)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(v3, off_1E82674A0[i]);
    if (Value)
    {
      v7 = Value;
      metadataSource_updateMetadata(v2, i, Value);
      CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)metadataSource_appendDictionaryInternal, Mutable);
    }
  }
  if (CFDictionaryGetCount(Mutable) >= 1)
    metadataSource_updateMetadata(v2, 3, Mutable);
  if (Mutable)
    CFRelease(Mutable);
  CFRelease(*(CFTypeRef *)a1);
  v8 = *(const void **)(a1 + 8);
  if (v8)
    CFRelease(v8);
}

uint64_t APMetadataSourceCopyMetadata(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD v8[8];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  if (a2 && a3)
  {
    v4 = *(NSObject **)(a1 + 16);
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __APMetadataSourceCopyMetadata_block_invoke;
    v8[3] = &unk_1E8267280;
    v8[6] = a2;
    v8[7] = a1;
    v8[4] = &v9;
    v8[5] = &v13;
    dispatch_sync(v4, v8);
    v5 = v10;
    *a3 = v10[3];
    v5[3] = 0;
    v6 = *((unsigned int *)v14 + 6);
  }
  else
  {
    APSLogErrorAt();
    v6 = 4294960591;
    *((_DWORD *)v14 + 6) = -6705;
  }
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  return v6;
}

void sub_1C944871C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void metadataSource_handleNowPlayingInfoChangedInternal(_QWORD *a1, CFDictionaryRef theDict, const void *a3)
{
  unint64_t v6;
  int v7;
  int v8;
  const void *v9;
  const __CFData *v10;
  const __CFData *v11;
  CFTypeID v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const __CFAllocator **v22;
  const __CFAllocator *v23;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const __CFDictionary *v30;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v32;
  CFMutableDictionaryRef v33;
  __CFDictionary *v34;
  __CFDictionary *v35;
  CFMutableDictionaryRef v36;
  const void *v37;
  CFTypeID TypeID;
  const void *v39;
  const void *v40;
  const void *v41;
  CFTypeID v42;
  const void *v43;
  const void *v44;
  CFTypeID v45;
  CFAbsoluteTime Current;
  CFDateRef v47;
  const void *v48;
  CFTypeID v49;
  const void *v50;
  CFTypeID v51;
  const void *v52;
  CFTypeID v53;
  const void *v54;
  CFTypeID v55;
  const void *v56;
  CFTypeID v57;
  const void *v58;
  const void *v59;
  CFTypeID v60;
  CFTypeID v61;
  const void *v62;
  CFTypeID v63;
  const void *v64;
  CFTypeID v65;
  const void *v66;
  CFTypeID v67;
  const void *v68;
  CFTypeID v69;
  const void *v70;
  CFTypeID v71;
  const void *v72;
  CFTypeID v73;
  const void *v74;
  CFTypeID v75;
  const void *v76;
  const void *v77;
  CFTypeID v78;
  const void *v79;
  CFTypeID v80;
  const void *v81;
  int v82;
  int v83;
  unsigned int Int64;
  const __CFString *v85;
  unsigned int v86;
  const __CFString *v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  void *value;
  CFTypeRef v95;
  CFTypeRef cf;
  CFTypeRef v97;
  CFTypeRef v98;
  CFTypeRef v99;
  CFDateRef v100;
  int updated;

  if (!theDict)
    return;
  v6 = 0x1ED52E000uLL;
  v7 = gLogCategory_APMetadataSource;
  if (gLogCategory_APMetadataSource <= 10)
  {
    if (gLogCategory_APMetadataSource != -1)
      goto LABEL_4;
    v8 = _LogCategory_Initialize();
    v7 = gLogCategory_APMetadataSource;
    if (v8)
    {
      if (gLogCategory_APMetadataSource > 10)
        goto LABEL_21;
LABEL_4:
      if (v7 != -1 || _LogCategory_Initialize())
        goto LABEL_15;
      goto LABEL_21;
    }
  }
  if (v7 <= 40 && (v7 != -1 || _LogCategory_Initialize()))
  {
    v9 = (const void *)getkMRMediaRemoteNowPlayingInfoArtworkData[0]();
    v10 = (const __CFData *)CFDictionaryGetValue(theDict, v9);
    if (v10)
    {
      v11 = v10;
      v12 = CFGetTypeID(v10);
      if (v12 == CFDataGetTypeID())
        CFDataGetLength(v11);
    }
    if (gLogCategory_APMetadataSource <= 40
      && (gLogCategory_APMetadataSource != -1 || _LogCategory_Initialize()))
    {
      v13 = (const void *)getkMRMediaRemoteNowPlayingInfoArtist[0]();
      CFDictionaryGetValue(theDict, v13);
      v14 = (const void *)getkMRMediaRemoteNowPlayingInfoAlbum[0]();
      CFDictionaryGetValue(theDict, v14);
      v15 = (const void *)getkMRMediaRemoteNowPlayingInfoTitle[0]();
      CFDictionaryGetValue(theDict, v15);
      v16 = (const void *)getkMRMediaRemoteNowPlayingInfoTrackNumber[0]();
      CFDictionaryGetValue(theDict, v16);
      v17 = (const void *)getkMRMediaRemoteNowPlayingInfoTotalTrackCount[0]();
      CFDictionaryGetValue(theDict, v17);
      v18 = (const void *)getkMRMediaRemoteNowPlayingInfoElapsedTime[0]();
      CFDictionaryGetValue(theDict, v18);
      v19 = (const void *)getkMRMediaRemoteNowPlayingInfoDuration[0]();
      CFDictionaryGetValue(theDict, v19);
      v20 = (const void *)getkMRMediaRemoteNowPlayingInfoArtworkMIMEType[0]();
      CFDictionaryGetValue(theDict, v20);
      v6 = 0x1ED52E000;
LABEL_15:
      LogPrintF();
    }
  }
LABEL_21:
  if (CFDictionaryGetCount(theDict) == 2)
  {
    v21 = (const void *)getkMRMediaRemoteNowPlayingInfoIsMusicApp[0]();
    if (CFDictionaryGetValue(theDict, v21) == (const void *)*MEMORY[0x1E0C9AE50])
    {
      v81 = (const void *)getkMRMediaRemoteNowPlayingInfoTimestamp[0]();
      if (CFDictionaryGetValue(theDict, v81))
      {
        v82 = *(_DWORD *)(v6 + 1904);
        if (v82 <= 40 && (v82 != -1 || _LogCategory_Initialize()))
          goto LABEL_113;
        return;
      }
    }
  }
  v22 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (a3)
  {
    v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
    if (MutableCopy)
    {
      v25 = MutableCopy;
      v26 = (const void *)getkMRMediaRemoteNowPlayingInfoUniqueIdentifier[0]();
      if (CFDictionaryContainsKey(v25, v26))
      {
        v27 = (const void *)getkMRMediaRemoteNowPlayingInfoMediaType[0]();
        v28 = (const void *)getkMRMediaRemoteMediaTypeMusic[0]();
        CFDictionaryAddValue(v25, v27, v28);
      }
      if (CFEqual(a3, CFSTR("replace")))
      {
        v29 = (const void *)a1[7];
        a1[7] = v25;
        CFRetain(v25);
        if (v29)
          CFRelease(v29);
        goto LABEL_32;
      }
      if (CFEqual(a3, CFSTR("update")))
      {
        CFDictionaryMergeDictionary();
LABEL_32:
        CFRelease(v25);
        metadataSource_notifyMetadataChange(a1, 1852860704, theDict, a3);
        goto LABEL_33;
      }
      v83 = *(_DWORD *)(v6 + 1904);
      if (v83 <= 60 && (v83 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      CFRelease(v25);
    }
    else
    {
      APSLogErrorAt();
    }
  }
  else
  {
    APSLogErrorAt();
    v23 = *v22;
  }
  APSLogErrorAt();
LABEL_33:
  v30 = (const __CFDictionary *)a1[7];
  updated = 0;
  v99 = 0;
  v100 = 0;
  v97 = 0;
  v98 = 0;
  v95 = 0;
  cf = 0;
  v93 = 0;
  value = 0;
  Mutable = CFDictionaryCreateMutable(v23, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v32 = Mutable;
    v33 = CFDictionaryCreateMutable(v23, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v33)
    {
      v34 = v33;
      v35 = CFDictionaryCreateMutable(v23, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v35)
      {
        v36 = CFDictionaryCreateMutable(v23, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v36)
        {
          v37 = (const void *)getkMRMediaRemoteNowPlayingInfoArtworkData[0]();
          TypeID = CFDataGetTypeID();
          v39 = (const void *)*MEMORY[0x1E0C9B0D0];
          updated = metadataSource_cloneValue(v30, v37, TypeID, (const void *)*MEMORY[0x1E0C9B0D0], v32, CFSTR("artworkData"), 0);
          if (updated)
            goto LABEL_134;
          v40 = CFDictionaryGetValue(v32, CFSTR("artworkData"));
          if (CFEqual(v40, v39))
          {
            CFDictionarySetValue(v32, CFSTR("artworkMIMEType"), CFSTR("image/none"));
          }
          else
          {
            v41 = (const void *)getkMRMediaRemoteNowPlayingInfoArtworkMIMEType[0]();
            v42 = CFStringGetTypeID();
            updated = metadataSource_cloneValue(v30, v41, v42, CFSTR("image/jpeg"), v32, CFSTR("artworkMIMEType"), 0);
            if (updated)
              goto LABEL_134;
            v43 = CFDictionaryGetValue(v32, CFSTR("artworkMIMEType"));
            if (CFEqual(v43, CFSTR("image/none")))
            {
              v91 = *(_DWORD *)(v6 + 1904);
              if (v91 <= 60 && (v91 != -1 || _LogCategory_Initialize()))
                LogPrintF();
              v92 = -6705;
              goto LABEL_140;
            }
          }
          v44 = (const void *)getkMRMediaRemoteNowPlayingInfoTimestamp[0]();
          v45 = CFDateGetTypeID();
          updated = metadataSource_cloneValue(v30, v44, v45, 0, v34, CFSTR("timestamp"), &v100);
          if (updated)
            goto LABEL_134;
          if (v100)
          {
LABEL_47:
            v48 = (const void *)getkMRMediaRemoteNowPlayingInfoAlbum[0]();
            v49 = CFStringGetTypeID();
            updated = metadataSource_cloneValue(v30, v48, v49, &stru_1E8273C10, v35, CFSTR("album"), &v99);
            if (updated)
              goto LABEL_134;
            v50 = (const void *)getkMRMediaRemoteNowPlayingInfoArtist[0]();
            v51 = CFStringGetTypeID();
            updated = metadataSource_cloneValue(v30, v50, v51, &stru_1E8273C10, v35, CFSTR("artist"), &v98);
            if (updated)
              goto LABEL_134;
            v52 = (const void *)getkMRMediaRemoteNowPlayingInfoComposer[0]();
            v53 = CFStringGetTypeID();
            updated = metadataSource_cloneValue(v30, v52, v53, &stru_1E8273C10, v35, CFSTR("composer"), 0);
            if (updated)
              goto LABEL_134;
            v54 = (const void *)getkMRMediaRemoteNowPlayingInfoGenre[0]();
            v55 = CFStringGetTypeID();
            updated = metadataSource_cloneValue(v30, v54, v55, &stru_1E8273C10, v35, CFSTR("genre"), 0);
            if (updated)
              goto LABEL_134;
            v56 = (const void *)getkMRMediaRemoteNowPlayingInfoTitle[0]();
            v57 = CFStringGetTypeID();
            updated = metadataSource_cloneValue(v30, v56, v57, &stru_1E8273C10, v35, CFSTR("title"), &v97);
            if (updated)
              goto LABEL_134;
            v58 = (const void *)getkMRMediaRemoteNowPlayingInfoQueueIndex[0]();
            cf = CFDictionaryGetValue(v30, v58);
            v59 = (const void *)getkMRMediaRemoteNowPlayingInfoTotalQueueCount[0]();
            v95 = CFDictionaryGetValue(v30, v59);
            if (cf
              && (v60 = CFGetTypeID(cf), v60 == CFNumberGetTypeID())
              && v95
              && (v61 = CFGetTypeID(v95), v61 == CFNumberGetTypeID()))
            {
              CFGetInt64();
              CFDictionarySetInt64();
              CFDictionarySetValue(v35, CFSTR("totalTracks"), v95);
            }
            else
            {
              v62 = (const void *)getkMRMediaRemoteNowPlayingInfoTrackNumber[0]();
              v63 = CFNumberGetTypeID();
              updated = metadataSource_cloneValue(v30, v62, v63, 0, v35, CFSTR("trackNumber"), &cf);
              if (updated)
                goto LABEL_134;
              v64 = (const void *)getkMRMediaRemoteNowPlayingInfoTotalTrackCount[0]();
              v65 = CFNumberGetTypeID();
              updated = metadataSource_cloneValue(v30, v64, v65, 0, v35, CFSTR("totalTracks"), &v95);
              if (updated)
                goto LABEL_134;
            }
            v66 = (const void *)getkMRMediaRemoteNowPlayingInfoDiscNumber[0]();
            v67 = CFNumberGetTypeID();
            updated = metadataSource_cloneValue(v30, v66, v67, 0, v35, CFSTR("discNumber"), 0);
            if (updated)
              goto LABEL_134;
            v68 = (const void *)getkMRMediaRemoteNowPlayingInfoTotalDiscCount[0]();
            v69 = CFNumberGetTypeID();
            updated = metadataSource_cloneValue(v30, v68, v69, 0, v35, CFSTR("totalDiscs"), 0);
            if (updated)
              goto LABEL_134;
            v70 = (const void *)getkMRMediaRemoteNowPlayingInfoElapsedTime[0]();
            v71 = CFNumberGetTypeID();
            updated = metadataSource_cloneValue(v30, v70, v71, 0, v34, CFSTR("elapsedTime"), 0);
            if (updated)
              goto LABEL_134;
            v72 = (const void *)getkMRMediaRemoteNowPlayingInfoDuration[0]();
            v73 = CFNumberGetTypeID();
            updated = metadataSource_cloneValue(v30, v72, v73, 0, v34, CFSTR("duration"), &value);
            if (updated)
              goto LABEL_134;
            if (value)
              CFDictionarySetValue(v35, CFSTR("duration"), value);
            v74 = (const void *)getkMRMediaRemoteNowPlayingInfoIsExplicitTrack[0]();
            v75 = CFBooleanGetTypeID();
            v76 = (const void *)*MEMORY[0x1E0C9AE40];
            updated = metadataSource_cloneValue(v30, v74, v75, (const void *)*MEMORY[0x1E0C9AE40], v35, CFSTR("isExplicitTrack"), 0);
            if (updated)
              goto LABEL_134;
            v77 = (const void *)getkMRMediaRemoteNowPlayingInfoIsAlwaysLive[0]();
            v78 = CFBooleanGetTypeID();
            updated = metadataSource_cloneValue(v30, v77, v78, v76, v35, CFSTR("isStream"), 0);
            if (updated)
              goto LABEL_134;
            getkMRMediaRemoteNowPlayingInfoPlaybackRate[0]();
            CFDictionaryGetDouble();
            CFDictionarySetDouble();
            CFDictionarySetDouble();
            v79 = (const void *)getkMRMediaRemoteNowPlayingInfoUniqueIdentifier[0]();
            v80 = CFNumberGetTypeID();
            updated = metadataSource_cloneValue(v30, v79, v80, 0, v35, CFSTR("uniqueID"), &v93);
            if (updated)
              goto LABEL_134;
            if (!v93)
            {
              if (v99)
                CFHash(v99);
              if (v98)
                CFHash(v98);
              if (v97)
                CFHash(v97);
              if (cf)
                CFHash(cf);
              CFDictionarySetInt64();
            }
            getkMRMediaRemoteNowPlayingInfoRepeatMode[0]();
            Int64 = CFDictionaryGetInt64();
            if (Int64 < 2)
            {
              v85 = CFSTR("none");
            }
            else if (Int64 == 2)
            {
              v85 = CFSTR("one");
            }
            else
            {
              if (Int64 != 3)
              {
                v88 = *(_DWORD *)(v6 + 1904);
                if (v88 <= 50 && (v88 != -1 || _LogCategory_Initialize()))
                  LogPrintF();
LABEL_92:
                getkMRMediaRemoteNowPlayingInfoShuffleMode[0]();
                v86 = CFDictionaryGetInt64();
                if (v86 < 2)
                {
                  v87 = CFSTR("off");
                }
                else if (v86 == 2)
                {
                  v87 = CFSTR("albums");
                }
                else
                {
                  if (v86 != 3)
                  {
                    v90 = *(_DWORD *)(v6 + 1904);
                    if (v90 <= 50 && (v90 != -1 || _LogCategory_Initialize()))
                      LogPrintF();
LABEL_102:
                    mach_absolute_time();
                    CFDictionarySetInt64();
                    updated = metadataSource_updateMetadata((char *)a1, 2, v35);
                    if (!updated)
                    {
                      updated = metadataSource_updateMetadata((char *)a1, 1, v34);
                      if (!updated)
                      {
                        updated = metadataSource_updateMetadata((char *)a1, 0, v32);
                        if (!updated)
                        {
                          CFDictionaryApplyFunction(v32, (CFDictionaryApplierFunction)metadataSource_appendDictionaryInternal, v36);
                          CFDictionaryApplyFunction(v35, (CFDictionaryApplierFunction)metadataSource_appendDictionaryInternal, v36);
                          CFDictionaryApplyFunction(v34, (CFDictionaryApplierFunction)metadataSource_appendDictionaryInternal, v36);
                          updated = metadataSource_updateMetadata((char *)a1, 3, v36);
                          if (!updated)
                          {
LABEL_106:
                            CFRelease(v32);
                            CFRelease(v34);
                            if (v35)
                              CFRelease(v35);
                            if (v36)
                              CFRelease(v36);
                            if (!updated)
                              return;
                            goto LABEL_111;
                          }
                        }
                      }
                    }
LABEL_134:
                    APSLogErrorAt();
                    goto LABEL_106;
                  }
                  v87 = CFSTR("songs");
                }
                CFDictionarySetValue(v36, CFSTR("shuffleMode"), v87);
                goto LABEL_102;
              }
              v85 = CFSTR("all");
            }
            CFDictionarySetValue(v36, CFSTR("repeatMode"), v85);
            goto LABEL_92;
          }
          Current = CFAbsoluteTimeGetCurrent();
          v47 = CFDateCreate(0, Current);
          v100 = v47;
          if (v47)
          {
            CFDictionarySetValue(v34, CFSTR("timestamp"), v47);
            if (v100)
              CFRelease(v100);
            goto LABEL_47;
          }
        }
        APSLogErrorAt();
      }
      else
      {
        APSLogErrorAt();
        v36 = 0;
      }
      v92 = -6728;
LABEL_140:
      updated = v92;
      goto LABEL_106;
    }
    APSLogErrorAt();
    updated = -6728;
    CFRelease(v32);
  }
  else
  {
    APSLogErrorAt();
    updated = -6728;
  }
LABEL_111:
  v89 = *(_DWORD *)(v6 + 1904);
  if (v89 <= 90 && (v89 != -1 || _LogCategory_Initialize()))
LABEL_113:
    LogPrintF();
}

void metadataSource_handleMRPlaybackStateChangedInternal(_QWORD *a1)
{
  const void *UInt32;
  const void *v3;
  const void *v4;

  if (gLogCategory_APMetadataSource <= 30
    && (gLogCategory_APMetadataSource != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  UInt32 = (const void *)FigCFNumberCreateUInt32();
  if (UInt32)
  {
    v3 = UInt32;
    v4 = (const void *)a1[9];
    a1[9] = UInt32;
    CFRetain(UInt32);
    if (v4)
      CFRelease(v4);
    metadataSource_notifyMetadataChange(a1, 1836216435, v3, CFSTR("notApplicable"));
    CFRelease(v3);
  }
  else
  {
    APSLogErrorAt();
  }
}

void metadataSource_handleMRSupportedCommandsChangedInternal(_QWORD *a1, CFArrayRef theArray)
{
  uint64_t Count;
  uint64_t v5;
  CFMutableArrayRef Mutable;
  __CFArray *v7;
  CFIndex v8;
  const void *ValueAtIndex;
  const void *v10;
  const void *v11;
  const void *v12;

  if (!theArray
    || (Count = CFArrayGetCount(theArray),
        v5 = *MEMORY[0x1E0C9AE00],
        (Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378])) == 0))
  {
    APSLogErrorAt();
LABEL_11:
    APSLogErrorAt();
    return;
  }
  v7 = Mutable;
  if (Count >= 1)
  {
    v8 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
      v10 = (const void *)((uint64_t (*)(uint64_t, uint64_t))softLinkMRMediaRemoteCommandInfoCreateExternalRepresentation[0])(v5, (uint64_t)ValueAtIndex);
      if (!v10)
        break;
      v11 = v10;
      CFArrayAppendValue(v7, v10);
      CFRelease(v11);
      if (Count == ++v8)
        goto LABEL_7;
    }
    APSLogErrorAt();
    CFRelease(v7);
    goto LABEL_11;
  }
LABEL_7:
  v12 = (const void *)a1[8];
  a1[8] = v7;
  CFRetain(v7);
  if (v12)
    CFRelease(v12);
  metadataSource_notifyMetadataChange(a1, 1836217187, v7, CFSTR("notApplicable"));
  CFRelease(v7);
}

void metadataSource_handleNowPlayingClientChangedInternal(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  const void *v6;

  if (a2)
  {
    if (gLogCategory_APMetadataSource <= 30
      && (gLogCategory_APMetadataSource != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v4 = (const void *)((uint64_t (*)(uint64_t))softLinkMRNowPlayingClientCreateExternalRepresentation[0])(a2);
    if (v4)
    {
      v5 = v4;
      v6 = (const void *)a1[10];
      a1[10] = v4;
      CFRetain(v4);
      if (v6)
        CFRelease(v6);
      metadataSource_notifyMetadataChange(a1, 1836215907, v5, CFSTR("notApplicable"));
      CFRelease(v5);
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

void metadataSource_Finalize(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __CFDictionary *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  NSObject *v12;
  NSObject *v13;

  if (gLogCategory_APMetadataSource <= 50
    && (gLogCategory_APMetadataSource != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_QWORD *)(a1 + 128))
  {
    if (gLogCategory_APMetadataSource <= 100)
      metadataSource_Finalize_cold_1(gLogCategory_APMetadataSource);
    __break(1u);
  }
  else
  {
    v2 = 0;
    v3 = a1 + 24;
    do
    {
      v4 = *(__CFDictionary **)(v3 + v2);
      if (v4)
      {
        CFDictionaryRemoveAllValues(v4);
        v5 = *(const void **)(v3 + v2);
        if (v5)
        {
          CFRelease(v5);
          *(_QWORD *)(v3 + v2) = 0;
        }
      }
      v2 += 8;
    }
    while (v2 != 32);

    *(_QWORD *)(a1 + 120) = 0;
    v6 = *(const void **)(a1 + 56);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 56) = 0;
    }
    v7 = *(const void **)(a1 + 64);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a1 + 64) = 0;
    }
    v8 = *(const void **)(a1 + 72);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(a1 + 72) = 0;
    }
    v9 = *(const void **)(a1 + 80);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(a1 + 80) = 0;
    }
    v10 = *(const void **)(a1 + 88);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(a1 + 88) = 0;
    }
    v11 = *(const void **)(a1 + 112);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(a1 + 112) = 0;
    }
    v12 = *(NSObject **)(a1 + 96);
    if (v12)
    {
      dispatch_release(v12);
      *(_QWORD *)(a1 + 96) = 0;
    }
    v13 = *(NSObject **)(a1 + 16);
    if (v13)
    {
      dispatch_release(v13);
      *(_QWORD *)(a1 + 16) = 0;
    }
  }
}

Class initMRClient()
{
  Class result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  result = objc_getClass("MRClient");
  classMRClient = (uint64_t)result;
  getMRClientClass = MRClientFunction;
  return result;
}

uint64_t MRClientFunction()
{
  return classMRClient;
}

Class initMRPlayerPath()
{
  Class result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  result = objc_getClass("MRPlayerPath");
  classMRPlayerPath = (uint64_t)result;
  getMRPlayerPathClass = MRPlayerPathFunction;
  return result;
}

uint64_t MRPlayerPathFunction()
{
  return classMRPlayerPath;
}

Class initMRDestination()
{
  Class result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  result = objc_getClass("MRDestination");
  classMRDestination = (uint64_t)result;
  getMRDestinationClass = MRDestinationFunction;
  return result;
}

uint64_t MRDestinationFunction()
{
  return classMRDestination;
}

void metadataSource_notifyListenerAboutCurrentMetadata(uint64_t *a1)
{
  uint64_t v2;
  BOOL v3;
  const void *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  BOOL v9;
  CFTypeRef cf;

  if (a1[1])
  {
    v2 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (a1[1])
      v3 = v2 == 0;
    else
      v3 = 0;
    if (v3)
    {
      APSLogErrorAt();
      goto LABEL_26;
    }
    v4 = (const void *)v2;
    v9 = v2 == 0;
  }
  else
  {
    v4 = 0;
    v9 = 1;
  }
  for (i = 0; i != 192; i += 24)
  {
    cf = 0;
    v6 = *(unsigned int *)&metadataSource_notifyListenerAboutCurrentMetadata_conversionTable[i];
    v7 = *(_QWORD *)&metadataSource_notifyListenerAboutCurrentMetadata_conversionTable[i + 16];
    if (APMetadataSourceCopyMetadata(*a1, *(_QWORD *)&metadataSource_notifyListenerAboutCurrentMetadata_conversionTable[i + 8], &cf))
    {
      APSLogErrorAt();
      if (gLogCategory_APMetadataSource <= 90
        && (gLogCategory_APMetadataSource != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      if (gLogCategory_APMetadataSource <= 30
        && (gLogCategory_APMetadataSource != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      ((void (*)(uint64_t, const void *, uint64_t, CFTypeRef, uint64_t))a1[2])(*a1, v4, v6, cf, v7);
    }
    if (cf)
      CFRelease(cf);
  }
  if (!v9)
    CFRelease(v4);
LABEL_26:
  v8 = (const void *)a1[1];
  if (v8)
    CFRelease(v8);
  CFRelease((CFTypeRef)*a1);
}

uint64_t metadataSource_updateMetadata(char *a1, signed int a2, const __CFDictionary *a3)
{
  const __CFAllocator *v6;
  CFMutableDictionaryRef Mutable;
  char *v8;
  CFDictionaryRef *v9;
  uint64_t v10;
  const __CFDictionary *MutableCopy;
  _QWORD v13[2];

  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = &a1[8 * a2];
  v10 = *((_QWORD *)v8 + 3);
  v9 = (CFDictionaryRef *)(v8 + 24);
  v13[0] = v10;
  v13[1] = Mutable;
  if (Mutable)
  {
    MutableCopy = Mutable;
    CFDictionaryApplyFunction(a3, (CFDictionaryApplierFunction)metadataSource_updateMetadataApplier, v13);
    if (CFDictionaryGetCount(MutableCopy) < 1)
      goto LABEL_6;
    if (a2 <= 1)
    {
      CFRelease(MutableCopy);
      MutableCopy = CFDictionaryCreateMutableCopy(v6, 0, *v9);
    }
    metadataSource_notifyMetadataChange(a1, kAPMetadataSourceEventTypes[a2], MutableCopy, CFSTR("notApplicable"));
    if (MutableCopy)
LABEL_6:
      CFRelease(MutableCopy);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960568;
  }
}

void metadataSource_updateMetadataApplier(void *key, const void *a2, CFDictionaryRef *a3)
{
  CFDictionaryGetValue(*a3, key);
  if ((const void *)*MEMORY[0x1E0C9B0D0] == a2)
  {
    CFDictionaryRemoveValue(*a3, key);
  }
  else if (!FigCFEqual())
  {
    CFDictionarySetValue(*a3, key, a2);
    CFDictionarySetValue(a3[1], key, a2);
  }
}

uint64_t metadataSource_notifyMetadataChange(const void *a1, uint64_t a2, const void *a3, const void *a4)
{
  CFRetain(a1);
  CFRetain(a3);
  CFRetain(a4);
  return APSDispatchAsyncFHelper();
}

void metadataSource_notifyMetadataChangeInternal(CFTypeRef *context)
{
  CFDictionaryApplyFunction(*((CFDictionaryRef *)*context + 14), (CFDictionaryApplierFunction)metadataSource_notifyMetadataChangeApplier, context);
  CFRelease(*context);
  CFRelease(context[2]);
  CFRelease(context[3]);
}

void metadataSource_notifyMetadataChangeApplier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  const void *v8;

  if (*(_QWORD *)a2)
  {
    v5 = FigCFWeakReferenceHolderCopyReferencedObject();
    v6 = v5 == 0;
    if (*(_QWORD *)a2)
      v7 = v5 == 0;
    else
      v7 = 0;
    if (v7)
    {
      APSLogErrorAt();
      return;
    }
    v8 = (const void *)v5;
  }
  else
  {
    v8 = 0;
    v6 = 1;
  }
  (*(void (**)(_QWORD, const void *, _QWORD, _QWORD, _QWORD))(a2 + 8))(*(_QWORD *)a3, v8, *(unsigned int *)(a3 + 8), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
  if (!v6)
    CFRelease(v8);
}

void metadataSource_appendDictionaryInternal(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

Class initMRNowPlayingControllerConfiguration()
{
  Class result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  result = objc_getClass("MRNowPlayingControllerConfiguration");
  classMRNowPlayingControllerConfiguration = (uint64_t)result;
  getMRNowPlayingControllerConfigurationClass = MRNowPlayingControllerConfigurationFunction;
  return result;
}

uint64_t MRNowPlayingControllerConfigurationFunction()
{
  return classMRNowPlayingControllerConfiguration;
}

Class initMRPlaybackQueueRequest()
{
  Class result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  result = objc_getClass("MRPlaybackQueueRequest");
  classMRPlaybackQueueRequest = (uint64_t)result;
  getMRPlaybackQueueRequestClass = MRPlaybackQueueRequestFunction;
  return result;
}

uint64_t MRPlaybackQueueRequestFunction()
{
  return classMRPlaybackQueueRequest;
}

Class initMRNowPlayingController()
{
  Class result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  result = objc_getClass("MRNowPlayingController");
  classMRNowPlayingController = (uint64_t)result;
  getMRNowPlayingControllerClass = MRNowPlayingControllerFunction;
  return result;
}

uint64_t MRNowPlayingControllerFunction()
{
  return classMRNowPlayingController;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoArtworkData()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoArtworkData");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoArtworkData = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoArtworkData;
  }
  getkMRMediaRemoteNowPlayingInfoArtworkData[0] = kMRMediaRemoteNowPlayingInfoArtworkDataFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoArtworkDataFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoArtworkData;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoArtist()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoArtist");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoArtist = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoArtist;
  }
  getkMRMediaRemoteNowPlayingInfoArtist[0] = kMRMediaRemoteNowPlayingInfoArtistFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoArtistFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoArtist;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoAlbum()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoAlbum");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoAlbum = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoAlbum;
  }
  getkMRMediaRemoteNowPlayingInfoAlbum[0] = kMRMediaRemoteNowPlayingInfoAlbumFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoAlbumFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoAlbum;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoTitle()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoTitle");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoTitle = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoTitle;
  }
  getkMRMediaRemoteNowPlayingInfoTitle[0] = kMRMediaRemoteNowPlayingInfoTitleFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoTitleFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoTitle;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoTrackNumber()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoTrackNumber");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoTrackNumber = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoTrackNumber;
  }
  getkMRMediaRemoteNowPlayingInfoTrackNumber[0] = kMRMediaRemoteNowPlayingInfoTrackNumberFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoTrackNumberFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoTrackNumber;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoTotalTrackCount()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoTotalTrackCount");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoTotalTrackCount = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoTotalTrackCount;
  }
  getkMRMediaRemoteNowPlayingInfoTotalTrackCount[0] = kMRMediaRemoteNowPlayingInfoTotalTrackCountFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoTotalTrackCountFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoTotalTrackCount;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoElapsedTime()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoElapsedTime");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoElapsedTime = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoElapsedTime;
  }
  getkMRMediaRemoteNowPlayingInfoElapsedTime[0] = kMRMediaRemoteNowPlayingInfoElapsedTimeFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoElapsedTimeFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoElapsedTime;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoDuration()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoDuration");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoDuration = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoDuration;
  }
  getkMRMediaRemoteNowPlayingInfoDuration[0] = kMRMediaRemoteNowPlayingInfoDurationFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoDurationFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoDuration;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoArtworkMIMEType()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoArtworkMIMEType");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoArtworkMIMEType = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoArtworkMIMEType;
  }
  getkMRMediaRemoteNowPlayingInfoArtworkMIMEType[0] = kMRMediaRemoteNowPlayingInfoArtworkMIMETypeFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoArtworkMIMETypeFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoArtworkMIMEType;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoIsMusicApp()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoIsMusicApp");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoIsMusicApp = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoIsMusicApp;
  }
  getkMRMediaRemoteNowPlayingInfoIsMusicApp[0] = kMRMediaRemoteNowPlayingInfoIsMusicAppFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoIsMusicAppFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoIsMusicApp;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoTimestamp()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoTimestamp");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoTimestamp = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoTimestamp;
  }
  getkMRMediaRemoteNowPlayingInfoTimestamp[0] = kMRMediaRemoteNowPlayingInfoTimestampFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoTimestampFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoTimestamp;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoUniqueIdentifier()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoUniqueIdentifier");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoUniqueIdentifier = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoUniqueIdentifier;
  }
  getkMRMediaRemoteNowPlayingInfoUniqueIdentifier[0] = kMRMediaRemoteNowPlayingInfoUniqueIdentifierFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoUniqueIdentifierFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoUniqueIdentifier;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoMediaType()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoMediaType");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoMediaType = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoMediaType;
  }
  getkMRMediaRemoteNowPlayingInfoMediaType[0] = kMRMediaRemoteNowPlayingInfoMediaTypeFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoMediaTypeFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoMediaType;
}

uint64_t initValkMRMediaRemoteMediaTypeMusic()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteMediaTypeMusic");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteMediaTypeMusic = result;
  }
  else
  {
    result = constantValkMRMediaRemoteMediaTypeMusic;
  }
  getkMRMediaRemoteMediaTypeMusic[0] = kMRMediaRemoteMediaTypeMusicFunction;
  return result;
}

uint64_t kMRMediaRemoteMediaTypeMusicFunction()
{
  return constantValkMRMediaRemoteMediaTypeMusic;
}

uint64_t metadataSource_cloneValue(const __CFDictionary *a1, const void *a2, uint64_t a3, const void *a4, __CFDictionary *a5, const void *a6, _QWORD *a7)
{
  const void *Value;
  const void *v13;
  uint64_t result;

  Value = CFDictionaryGetValue(a1, a2);
  v13 = Value;
  if (Value)
  {
    a4 = Value;
    if (CFGetTypeID(Value) != a3)
    {
      APSLogErrorAt();
      return 4294960540;
    }
  }
  else if (!a4)
  {
    goto LABEL_6;
  }
  CFDictionarySetValue(a5, a6, a4);
LABEL_6:
  result = 0;
  if (a7)
    *a7 = v13;
  return result;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoComposer()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoComposer");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoComposer = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoComposer;
  }
  getkMRMediaRemoteNowPlayingInfoComposer[0] = kMRMediaRemoteNowPlayingInfoComposerFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoComposerFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoComposer;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoGenre()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoGenre");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoGenre = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoGenre;
  }
  getkMRMediaRemoteNowPlayingInfoGenre[0] = kMRMediaRemoteNowPlayingInfoGenreFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoGenreFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoGenre;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoQueueIndex()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoQueueIndex");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoQueueIndex = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoQueueIndex;
  }
  getkMRMediaRemoteNowPlayingInfoQueueIndex[0] = kMRMediaRemoteNowPlayingInfoQueueIndexFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoQueueIndexFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoQueueIndex;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoTotalQueueCount()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoTotalQueueCount");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoTotalQueueCount = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoTotalQueueCount;
  }
  getkMRMediaRemoteNowPlayingInfoTotalQueueCount[0] = kMRMediaRemoteNowPlayingInfoTotalQueueCountFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoTotalQueueCountFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoTotalQueueCount;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoDiscNumber()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoDiscNumber");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoDiscNumber = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoDiscNumber;
  }
  getkMRMediaRemoteNowPlayingInfoDiscNumber[0] = kMRMediaRemoteNowPlayingInfoDiscNumberFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoDiscNumberFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoDiscNumber;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoTotalDiscCount()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoTotalDiscCount");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoTotalDiscCount = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoTotalDiscCount;
  }
  getkMRMediaRemoteNowPlayingInfoTotalDiscCount[0] = kMRMediaRemoteNowPlayingInfoTotalDiscCountFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoTotalDiscCountFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoTotalDiscCount;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoIsExplicitTrack()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoIsExplicitTrack");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoIsExplicitTrack = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoIsExplicitTrack;
  }
  getkMRMediaRemoteNowPlayingInfoIsExplicitTrack[0] = kMRMediaRemoteNowPlayingInfoIsExplicitTrackFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoIsExplicitTrackFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoIsExplicitTrack;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoIsAlwaysLive()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoIsAlwaysLive");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoIsAlwaysLive = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoIsAlwaysLive;
  }
  getkMRMediaRemoteNowPlayingInfoIsAlwaysLive[0] = kMRMediaRemoteNowPlayingInfoIsAlwaysLiveFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoIsAlwaysLiveFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoIsAlwaysLive;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoPlaybackRate()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoPlaybackRate");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoPlaybackRate = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoPlaybackRate;
  }
  getkMRMediaRemoteNowPlayingInfoPlaybackRate[0] = kMRMediaRemoteNowPlayingInfoPlaybackRateFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoPlaybackRateFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoPlaybackRate;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoRepeatMode()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoRepeatMode");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoRepeatMode = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoRepeatMode;
  }
  getkMRMediaRemoteNowPlayingInfoRepeatMode[0] = kMRMediaRemoteNowPlayingInfoRepeatModeFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoRepeatModeFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoRepeatMode;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoShuffleMode()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoShuffleMode");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoShuffleMode = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoShuffleMode;
  }
  getkMRMediaRemoteNowPlayingInfoShuffleMode[0] = kMRMediaRemoteNowPlayingInfoShuffleModeFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoShuffleModeFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoShuffleMode;
}

uint64_t initMRMediaRemoteCommandInfoCreateExternalRepresentation(uint64_t a1, uint64_t a2)
{
  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  softLinkMRMediaRemoteCommandInfoCreateExternalRepresentation[0] = (uint64_t (*)())dlsym((void *)MediaRemoteLibrary_sLib, "MRMediaRemoteCommandInfoCreateExternalRepresentation");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkMRMediaRemoteCommandInfoCreateExternalRepresentation[0])(a1, a2);
}

uint64_t initMRNowPlayingClientCreateExternalRepresentation(uint64_t a1)
{
  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global);
  softLinkMRNowPlayingClientCreateExternalRepresentation[0] = (uint64_t (*)())dlsym((void *)MediaRemoteLibrary_sLib, "MRNowPlayingClientCreateExternalRepresentation");
  return ((uint64_t (*)(uint64_t))softLinkMRNowPlayingClientCreateExternalRepresentation[0])(a1);
}

uint64_t APEndpointPlaybackSessionMCCreate(uint64_t a1, const void *a2, const void *a3, const void *a4, const __CFDictionary *a5, _QWORD *a6)
{
  uint64_t v12;
  _QWORD *DerivedStorage;
  dispatch_queue_t v14;
  dispatch_queue_t v15;
  const __CFString *v16;
  const void *v17;
  const __CFBoolean *TypedValue;
  CFTypeRef v19;
  uint64_t v20;

  if (!a2 || !a3)
  {
    APSLogErrorAt();
    return 4294950556;
  }
  FigEndpointPlaybackSessionGetClassID();
  v12 = CMDerivedObjectCreate();
  if ((_DWORD)v12)
  {
    v20 = v12;
LABEL_24:
    APSLogErrorAt();
    return v20;
  }
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v14 = dispatch_queue_create("APEndpointPlaybackSessionMC", 0);
  DerivedStorage[2] = v14;
  if (!v14)
  {
    APSLogErrorAt();
    return 4294950555;
  }
  v15 = dispatch_queue_create("APEndpointPlaybackSessionMC.notifications", 0);
  DerivedStorage[3] = v15;
  if (!v15)
    return 4294950555;
  if (a1)
    v16 = (const __CFString *)a1;
  else
    v16 = CFSTR("unnamed");
  DerivedStorage[5] = v16;
  CFRetain(v16);
  v17 = (const void *)*MEMORY[0x1E0CA3ED8];
  DerivedStorage[6] = *MEMORY[0x1E0CA3ED8];
  if (v17)
    CFRetain(v17);
  if (CFDictionaryContainsKey(a5, CFSTR("VolumeDB")))
  {
    CFNumberGetTypeID();
    TypedValue = (const __CFBoolean *)CFDictionaryGetTypedValue();
    mcs_SetProperty(0, CFSTR("VolumeDB"), TypedValue);
  }
  DerivedStorage[10] = CFRetain(a3);
  DerivedStorage[9] = CFRetain(a2);
  if (a4)
    v19 = CFRetain(a4);
  else
    v19 = 0;
  DerivedStorage[11] = v19;
  v20 = APEndpointPlaybackSessionStatsCreate(CFSTR("MC"), a1, (uint64_t)a5, DerivedStorage + 16);
  if ((_DWORD)v20)
    goto LABEL_24;
  *a6 = 0;
  return v20;
}

uint64_t mcs_SetProperty(uint64_t a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t DerivedStorage;
  float v6;
  CFNumberRef v7;
  uint64_t v8;
  int Value;
  _QWORD *v10;
  CMTime v12;
  CMTime valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("VolumeDB")))
  {
    CFGetDouble();
    APSVolumeConvertDBToSliderValue();
    *(double *)&valuePtr.value = v6;
    v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
    v8 = AirPlaySetProperty();
    if (v7)
      CFRelease(v7);
  }
  else
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F68]))
    {
      Value = CFBooleanGetValue(a3);
      APEndpointPlaybackSessionSetIsParticipatingInCoordinatedPlayback(*(_QWORD *)(DerivedStorage + 128), Value);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3FA0]))
    {
      memset(&valuePtr, 0, sizeof(valuePtr));
      CMTimeMakeFromDictionary(&valuePtr, a3);
      v10 = *(_QWORD **)(DerivedStorage + 128);
      v12 = valuePtr;
      APEndpointPlaybackSessionSetVideoSyncTime(v10, (uint64_t)&v12);
    }
    return 0;
  }
  return v8;
}

uint64_t mcs_Invalidate(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 16), a1, (dispatch_function_t)mcs_InvalidateInternal);
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  return 0;
}

void mcs_Finalize()
{
  uint64_t DerivedStorage;
  _QWORD *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  NSObject *v10;
  NSObject *v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = (_QWORD *)DerivedStorage;
    if (gLogCategory_EndpointPlaybackSessionMC <= 50
      && (gLogCategory_EndpointPlaybackSessionMC != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    mcs_InvalidateInternal();
    v2 = (const void *)v1[4];
    if (v2)
    {
      CFRelease(v2);
      v1[4] = 0;
    }
    v3 = (const void *)v1[5];
    if (v3)
    {
      CFRelease(v3);
      v1[5] = 0;
    }
    v4 = (const void *)v1[6];
    if (v4)
    {
      CFRelease(v4);
      v1[6] = 0;
    }
    v5 = (const void *)v1[9];
    if (v5)
    {
      CFRelease(v5);
      v1[9] = 0;
    }
    v6 = (const void *)v1[10];
    if (v6)
    {
      CFRelease(v6);
      v1[10] = 0;
    }
    v7 = (const void *)v1[11];
    if (v7)
    {
      CFRelease(v7);
      v1[11] = 0;
    }
    v8 = (const void *)v1[15];
    if (v8)
    {
      CFRelease(v8);
      v1[15] = 0;
    }
    v9 = (const void *)v1[8];
    if (v9)
    {
      CFRelease(v9);
      v1[8] = 0;
    }
    v10 = v1[2];
    if (v10)
    {
      dispatch_release(v10);
      v1[2] = 0;
    }
    v11 = v1[3];
    if (v11)
    {
      dispatch_release(v11);
      v1[3] = 0;
    }
    APEndpointPlaybackSessionStatsDestroy(v1 + 16);
  }
}

CFStringRef mcs_CopyDebugDesc()
{
  uint64_t DerivedStorage;
  const __CFString *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
    v1 = *(const __CFString **)(DerivedStorage + 40);
  else
    v1 = CFSTR("?");
  return CFStringCreateWithFormat(0, 0, CFSTR("[APEndpointPlaybackSessionMC %@]"), v1);
}

uint64_t mcs_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef *v8;
  uint64_t CMBaseObject;
  uint64_t (*v10)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  BOOL v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  _BOOL4 v17;
  int v18;
  CFTypeRef *v19;
  CFStringRef theString;
  unsigned int v21;

  v21 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F78]))
    goto LABEL_2;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F98]))
  {
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 80));
    v10 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
    if (v10)
      return v10(CMBaseObject, CFSTR("SupportsAirPlayVideoPausedStart"), a3, a4);
    else
      return -12782;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F90]))
    goto LABEL_8;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F80]))
  {
    if (*(_QWORD *)(DerivedStorage + 80))
    {
      v13 = APSGetFBOPropertyInt64() == 0;
      v8 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      v14 = !v13;
      if ((v14 & 1) == 0)
        v8 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F70]))
  {
LABEL_8:
    v8 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_3;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3F88]))
  {
    if (CFEqual(a2, CFSTR("Activated")))
    {
      v8 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      v18 = *(unsigned __int8 *)(DerivedStorage + 56);
    }
    else
    {
      if (!CFEqual(a2, CFSTR("IsPlaying")))
      {
        if (CFEqual(a2, CFSTR("RTCStats")))
          APEndpointPlaybackSessionCopyRTCStats(*(_QWORD *)(DerivedStorage + 128), a4);
        return -12787;
      }
      v8 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      v18 = *(unsigned __int8 *)(DerivedStorage + 57);
    }
    if (!v18)
      v8 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_3;
  }
  if (!*(_QWORD *)(DerivedStorage + 80) || (v15 = APSGetFBOPropertyInt64(), v15 <= 2206799))
  {
    if (gLogCategory_EndpointPlaybackSessionMC <= 20
      && (gLogCategory_EndpointPlaybackSessionMC != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_8;
  }
  if ((unint64_t)v15 > 0x24D2F3)
  {
LABEL_2:
    v8 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
LABEL_3:
    *a4 = (CFDictionaryRef)CFRetain(*v8);
    return v21;
  }
  theString = 0;
  v16 = APEndpointDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 80), (uint64_t)CFSTR("OSVersion"), *MEMORY[0x1E0C9AE00], (uint64_t)&theString);
  v17 = 0;
  v21 = v16;
  if (!v16 && theString)
    v17 = CFStringGetLength(theString) > 0;
  if (gLogCategory_EndpointPlaybackSessionMC <= 20
    && (gLogCategory_EndpointPlaybackSessionMC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v19 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (!v17)
    v19 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  *a4 = (CFDictionaryRef)CFRetain(*v19);
  if (theString)
    CFRelease(theString);
  return 0;
}

uint64_t mcs_InvalidateInternal()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(result + 8))
    APEndpointPlaybackSessionStatsUpdateAtInvalidate(*(_QWORD *)(result + 128));
  return result;
}

uint64_t mcs_handlePasswordChangedNotification()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(result + 8))
    return mcs_updatePassword();
  return result;
}

void mcs_postConnectedStateChangedNotification(uint64_t a1, int a2, int a3, const void *a4)
{
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v8 = Mutable;
    v9 = (const void *)*MEMORY[0x1E0C9AE50];
    v10 = (const void *)*MEMORY[0x1E0C9AE40];
    if (a2)
      v11 = (const void *)*MEMORY[0x1E0C9AE50];
    else
      v11 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(Mutable, CFSTR("APEndpointPlaybackSessionMCNotificationPayloadKey_IsConnected"), v11);
    if (a3)
      v12 = v9;
    else
      v12 = v10;
    CFDictionarySetValue(v8, CFSTR("APEndpointPlaybackSessionMCNotificationPayloadKey_IsConnectedOnP2P"), v12);
    if (a4)
      CFDictionarySetValue(v8, CFSTR("APEndpointPlaybackSessionMCNotificationPayloadKey_EventStatus"), a4);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v8);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t mcs_updatePassword()
{
  unsigned int v1;

  v1 = 0;
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 72))
  {
    APSGetFBOPropertyCString();
    v1 = MediaControlClient_SetPassword();
    if (v1)
      APSLogErrorAt();
  }
  return v1;
}

uint64_t mcs_AuthorizeItem(const void *a1, const void *a2, const void *a3, void (*a4)(_QWORD, _QWORD, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_EndpointPlaybackSessionMC <= 30
    && (gLogCategory_EndpointPlaybackSessionMC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v11 = 4294950554;
    if (a4)
      a4(0, 0, 4294950554, a5);
  }
  else
  {
    CFRetain(a2);
    if (a3)
      CFRetain(a3);
    CFRetain(a1);
    APSDispatchAsyncFHelper();
    return 0;
  }
  return v11;
}

uint64_t mcs_Play(uint64_t a1, const __CFDictionary *a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  const __CFDictionary *v6;
  uint64_t DerivedStorage;
  void *v8;
  const void *v9;
  void *value;
  const __CFDictionary *v12;

  v6 = a2;
  v12 = a2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  if (gLogCategory_EndpointPlaybackSessionMC <= 50
    && (gLogCategory_EndpointPlaybackSessionMC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*(_BYTE *)(DerivedStorage + 8))
  {
    CFDictionaryGetValueIfPresent(v6, (const void *)*MEMORY[0x1E0CA3DD8], (const void **)&value);
    v8 = value;
    if (value)
    {
      v9 = *(const void **)(DerivedStorage + 48);
      *(_QWORD *)(DerivedStorage + 48) = value;
    }
    else
    {
      v8 = (void *)*MEMORY[0x1E0CA3ED8];
      value = v8;
      v9 = *(const void **)(DerivedStorage + 48);
      *(_QWORD *)(DerivedStorage + 48) = v8;
      if (!v8)
        goto LABEL_10;
    }
    CFRetain(v8);
LABEL_10:
    if (v9)
    {
      CFRelease(v9);
      v6 = v12;
    }
    APEndpointPlaybackSessionStatsUpdateAtPlay(*(_QWORD *)(DerivedStorage + 128), v6);
  }
  if (a3)
    a3(4294950554, a4);
  return 4294950554;
}

uint64_t mcs_InsertPlayQueueItem(const void *a1, __CFDictionary *a2, const void *a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t DerivedStorage;
  void *v11;
  const void *v12;
  uint64_t v13;
  void *value;
  CFMutableDictionaryRef v16;

  v16 = a2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  if (gLogCategory_EndpointPlaybackSessionMC <= 50
    && (gLogCategory_EndpointPlaybackSessionMC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v13 = 4294950554;
    if (a4)
      a4(4294950554, a5);
  }
  else
  {
    APEndpointPlaybackSessionCreatePlayParamsWithTimesInSeconds(a2, &v16);
    if (a3)
      CFRetain(a3);
    CFRetain(a1);
    CFDictionaryGetValueIfPresent(v16, (const void *)*MEMORY[0x1E0CA3DD8], (const void **)&value);
    if (!value)
      value = (void *)*MEMORY[0x1E0CA3ED8];
    if (!FigCFEqual())
    {
      v11 = value;
      v12 = *(const void **)(DerivedStorage + 48);
      *(_QWORD *)(DerivedStorage + 48) = value;
      if (v11)
        CFRetain(v11);
      if (v12)
        CFRelease(v12);
    }
    APSDispatchAsyncFHelper();
    return 0;
  }
  return v13;
}

uint64_t mcs_RemovePlayQueueItem(const void *a1, const void *a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_EndpointPlaybackSessionMC <= 50
    && (gLogCategory_EndpointPlaybackSessionMC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v9 = 4294950554;
    if (a3)
      a3(4294950554, a4);
  }
  else
  {
    if (a2)
      CFRetain(a2);
    CFRetain(a1);
    APSDispatchAsyncFHelper();
    return 0;
  }
  return v9;
}

uint64_t mcs_Stop(const void *a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_EndpointPlaybackSessionMC <= 50
    && (gLogCategory_EndpointPlaybackSessionMC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    APSLogErrorAt();
    v7 = 4294950554;
    if (a2)
      a2(4294950554, a3);
  }
  else
  {
    CFRetain(a1);
    APSDispatchAsyncFHelper();
    return 0;
  }
  return v7;
}

uint64_t mcs_GetPlaybackInfo(const void *a1, void (*a2)(_QWORD, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_EndpointPlaybackSessionMC <= 30
    && (gLogCategory_EndpointPlaybackSessionMC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v7 = 4294950554;
    if (a2)
      a2(0, 4294950554, a3);
  }
  else
  {
    CFRetain(a1);
    APSDispatchAsyncFHelper();
    return 0;
  }
  return v7;
}

uint64_t mcs_SeekToTime(const void *a1, CMTime *a2, const void *a3, void (*a4)(_QWORD, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_EndpointPlaybackSessionMC <= 50
    && (gLogCategory_EndpointPlaybackSessionMC != -1 || _LogCategory_Initialize()))
  {
    time = *a2;
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v11 = 4294950554;
    if (a4)
      a4(0, 4294950554, a5);
  }
  else
  {
    if (a3)
      CFRetain(a3);
    CFRetain(a1);
    APSDispatchAsyncFHelper();
    return 0;
  }
  return v11;
}

uint64_t mcs_SeekToDate(const void *a1, const void *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_EndpointPlaybackSessionMC <= 50
    && (gLogCategory_EndpointPlaybackSessionMC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v10 = 4294950554;
    if (a4)
      a4(0, 4294950554, a5);
  }
  else
  {
    CFRetain(a1);
    if (a2)
      CFRetain(a2);
    APSDispatchAsyncFHelper();
    return 0;
  }
  return v10;
}

uint64_t mcs_SetRate(const void *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_EndpointPlaybackSessionMC <= 50
    && (gLogCategory_EndpointPlaybackSessionMC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v8 = 4294950554;
    if (a3)
      a3(4294950554, a4);
  }
  else
  {
    CFRetain(a1);
    APSDispatchAsyncFHelper();
    return 0;
  }
  return v8;
}

uint64_t mcs_GetProxiedProperty(const void *a1, const void *a2, uint64_t a3, void (*a4)(const void *, _QWORD, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t DerivedStorage;
  const void *Value;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_EndpointPlaybackSessionMC <= 30
    && (gLogCategory_EndpointPlaybackSessionMC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (FigCFEqual())
  {
    Value = (const void *)FigCFDictionaryGetValue();
  }
  else
  {
    if (FigCFEqual())
    {
      v11 = 4294954509;
      if (!a4)
        return v11;
LABEL_14:
      a4(a2, 0, v11, a5);
      return v11;
    }
    Value = 0;
  }
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v11 = 4294950554;
    if (!a4)
      return v11;
    goto LABEL_14;
  }
  CFRetain(a2);
  if (Value)
    CFRetain(Value);
  CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t mcs_SetProxiedProperty(const void *a1, const void *a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  const void *Value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
    Value = (const void *)FigCFDictionaryGetValue();
  else
    Value = 0;
  if (gLogCategory_EndpointPlaybackSessionMC <= 30
    && (gLogCategory_EndpointPlaybackSessionMC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 8))
    return 4294950554;
  CFRetain(a2);
  if (Value)
    CFRetain(Value);
  if (a4)
    CFRetain(a4);
  CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t mcs_PerformRemoteAction(const void *a1, const void *a2, const void *a3, void (*a4)(uint64_t, _QWORD, uint64_t), uint64_t a5)
{
  uint64_t v10;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    v10 = 4294950554;
    if (a4)
      a4(4294950554, 0, a5);
  }
  else
  {
    if (a2)
      CFRetain(a2);
    if (a3)
      CFRetain(a3);
    CFRetain(a1);
    APSDispatchAsyncFHelper();
    return 0;
  }
  return v10;
}

uint64_t mcs_SetEventHandler()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_EndpointPlaybackSessionMC <= 30
    && (gLogCategory_EndpointPlaybackSessionMC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 8))
    return 4294950554;
  APSDispatchSyncTask();
  return 0;
}

void mcs_AuthorizeItemInternal(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  CFStringRef v4;
  uint64_t v5;
  const __CFString *v6;
  void (*v7)(_QWORD, const __CFString *, uint64_t, _QWORD);
  const void *v8;
  const void *v9;
  char cStr[64];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    v6 = 0;
    v5 = 4294950554;
    goto LABEL_7;
  }
  v2 = mcs_EnsureConnectedInternal(*(_QWORD *)a1);
  if ((_DWORD)v2)
  {
    v5 = v2;
LABEL_19:
    APSLogErrorAt();
    v6 = 0;
    goto LABEL_7;
  }
  CFDataGetBytePtr(*(CFDataRef *)(a1 + 8));
  CFDataGetLength(*(CFDataRef *)(a1 + 8));
  FigCFStringGetCStringPtrAndBufferToFree();
  v3 = MediaControlClient_DoAuthorize();
  if ((_DWORD)v3)
  {
    v5 = v3;
    goto LABEL_19;
  }
  v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x8000100u);
  v5 = 0;
  if (v4)
    v6 = v4;
  else
    v6 = &stru_1E8273C10;
LABEL_7:
  v7 = *(void (**)(_QWORD, const __CFString *, uint64_t, _QWORD))(a1 + 24);
  if (v7)
    v7(0, v6, v5, *(_QWORD *)(a1 + 32));
  if (v6)
    CFRelease(v6);
  v8 = *(const void **)(a1 + 8);
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(a1 + 16);
  if (v9)
    CFRelease(v9);
  CFRelease(*(CFTypeRef *)a1);
  free(0);
}

uint64_t mcs_EnsureConnectedInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  _QWORD *v3;
  uint64_t v4;
  const __CFAllocator *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t updated;
  uint64_t v9;
  uint64_t v10;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v12;
  uint64_t CMBaseObject;
  uint64_t (*v14)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  unsigned int v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  unsigned int v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  int v21;
  const void *v22;
  const void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  int IsConnectedOnP2PInterface;
  int v35;
  CFTypeRef v36;
  CFTypeRef cf;
  void *value;
  unsigned int v39;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return 4294950554;
  v3 = (_QWORD *)DerivedStorage;
  if (*(_QWORD *)(DerivedStorage + 32))
    return 0;
  v4 = *(_QWORD *)(DerivedStorage + 80);
  if (v4)
    APEndpointDescriptionGetDeviceID(v4);
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = MediaControlClient_Create();
  if ((_DWORD)v6)
  {
    v31 = v6;
LABEL_73:
    APSLogErrorAt();
    return v31;
  }
  v7 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  v3[12] = v7;
  if (!v7)
  {
    APSLogErrorAt();
    return 4294950555;
  }
  MediaControlClient_SetDispatchQueue();
  MediaControlClient_SetEventHandler();
  if (v3[9])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
  }
  updated = mcs_updatePassword();
  if ((_DWORD)updated)
  {
    v31 = updated;
    goto LABEL_73;
  }
  if (!v3[10])
    goto LABEL_55;
  v9 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  value = 0;
  v36 = 0;
  if (!*(_QWORD *)(v9 + 32) || (v10 = v9, !*(_QWORD *)(v9 + 80)))
  {
    APSLogErrorAt();
    v35 = -6705;
LABEL_70:
    v39 = v35;
    goto LABEL_50;
  }
  Mutable = CFDictionaryCreateMutable(v5, 6, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v35 = -6728;
    goto LABEL_70;
  }
  v12 = Mutable;
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v10 + 80));
  v14 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
  if (!v14)
  {
    v39 = -12782;
    goto LABEL_47;
  }
  v15 = v14(CMBaseObject, CFSTR("Name"), v5, &value);
  v39 = v15;
  if (v15 != -12784 && v15)
    goto LABEL_47;
  if (value)
    CFDictionarySetValue(v12, CFSTR("MediaControlClientRouteInfo_Name"), value);
  v16 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v10 + 80));
  v17 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
  if (!v17)
  {
    v39 = -12782;
    goto LABEL_47;
  }
  v18 = v17(v16, CFSTR("TransportDevice"), v5, &cf);
  v39 = v18;
  if (v18 != -12784 && v18)
    goto LABEL_47;
  if (cf)
    CFDictionarySetValue(v12, CFSTR("MediaControlClientRouteInfo_TransportDevice"), cf);
  v19 = *(_QWORD *)(v10 + 80);
  v20 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v20)
  {
    v21 = v20(v19, 27);
    v22 = (const void *)*MEMORY[0x1E0C9AE50];
    v23 = (const void *)*MEMORY[0x1E0C9AE40];
    v24 = (const void *)*MEMORY[0x1E0C9AE50];
    if (v21)
      goto LABEL_33;
  }
  else
  {
    v22 = (const void *)*MEMORY[0x1E0C9AE50];
    v23 = (const void *)*MEMORY[0x1E0C9AE40];
  }
  v24 = v23;
LABEL_33:
  CFDictionarySetValue(v12, CFSTR("MediaControlClientRouteInfo_PairingEnabled"), v24);
  v25 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v10 + 80));
  v26 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
  if (!v26)
  {
    v39 = -12782;
LABEL_47:
    APSLogErrorAt();
    goto LABEL_48;
  }
  v27 = v26(v25, CFSTR("PairingPeerPublicKey"), v5, &v36);
  v39 = v27;
  if (v27 != -12784 && v27)
    goto LABEL_47;
  if (v36)
    CFDictionarySetValue(v12, CFSTR("MediaControlClientRouteInfo_PublicKey"), v36);
  v28 = APSGetFBOPropertyInt64();
  if (v39 != -12784)
  {
    if (v39)
      goto LABEL_47;
  }
  v29 = APSGetFBOPropertyInt64();
  if (v39 != -12784)
  {
    if (v39)
      goto LABEL_47;
  }
  if (v28 | v29)
    v30 = v22;
  else
    v30 = v23;
  CFDictionarySetValue(v12, CFSTR("MediaControlClientRouteInfo_PairPinEnabled"), v30);
  MediaControlClient_SetInfo();
  v39 = 0;
LABEL_48:
  CFRelease(v12);
  if (value)
    CFRelease(value);
LABEL_50:
  if (cf)
    CFRelease(cf);
  if (v36)
    CFRelease(v36);
  v31 = v39;
  if (v39)
    goto LABEL_73;
LABEL_55:
  if (v3[11])
  {
    v32 = MediaControlClient_SetConnectionInterfaceManager();
    if ((_DWORD)v32)
    {
      v31 = v32;
      goto LABEL_73;
    }
  }
  v31 = MediaControlClient_EnsureConnected();
  if ((_DWORD)v31)
    goto LABEL_73;
  IsConnectedOnP2PInterface = MediaControlClient_IsConnectedOnP2PInterface();
  mcs_postConnectedStateChangedNotification(a1, 1, IsConnectedOnP2PInterface, 0);
  return v31;
}

void mcs_EventHandler(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  const void *v4;
  uint64_t DerivedStorage;
  __CFString *v6;
  __CFString *v7;
  const void *TypedValue;
  _BOOL4 v9;
  const __CFDictionary *MutableCopy;
  void *v11;
  const void *v12;
  const __CFDictionary *v13;
  void *value;

  value = 0;
  if (!a2 || !a3)
  {
    APSLogErrorAt();
    v4 = 0;
LABEL_38:
    v11 = 0;
    goto LABEL_30;
  }
  v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v4)
    goto LABEL_38;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_EndpointPlaybackSessionMC <= 30
    && (gLogCategory_EndpointPlaybackSessionMC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 8))
    goto LABEL_38;
  v6 = (__CFString *)CFDictionaryGetValue(a2, CFSTR("state"));
  v7 = v6;
  if (v6 == CFSTR("disconnected"))
    goto LABEL_42;
  if (!v6)
  {
LABEL_28:
    v11 = (void *)CFRetain(a2);
    goto LABEL_29;
  }
  if (CFEqual(v6, CFSTR("disconnected")))
  {
LABEL_42:
    if (CFDictionaryGetValue(a2, CFSTR("error")))
    {
      CFNumberGetTypeID();
      TypedValue = (const void *)CFDictionaryGetTypedValue();
      CFDictionaryGetInt64();
      if (gLogCategory_EndpointPlaybackSessionMC <= 50
        && (gLogCategory_EndpointPlaybackSessionMC != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      TypedValue = 0;
    }
    mcs_postConnectedStateChangedNotification((uint64_t)v4, 0, 0, TypedValue);
    if (!v7)
      goto LABEL_28;
  }
  if (CFEqual(v7, CFSTR("playing")))
    v9 = 1;
  else
    v9 = CFEqual(v7, CFSTR("loading")) != 0;
  mcs_updateIsPlayingAndPostNotification((uint64_t)v4, v9);
  if (v7 != CFSTR("playing") && !CFEqual(v7, CFSTR("playing")))
    goto LABEL_28;
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a2);
  v11 = MutableCopy;
  if (MutableCopy)
  {
    v12 = (const void *)*MEMORY[0x1E0CA3BD8];
    v13 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA3BD8]);
    if (!v13)
    {
LABEL_29:
      CFRetain(v4);
      CFRetain(v11);
      APSDispatchAsyncFHelper();
      goto LABEL_30;
    }
    if (!APEndpointPlaybackSessionCreatePlayPlaybackInfoTimesInCMTime(v13, (__CFDictionary **)&value))
    {
      CFDictionarySetValue((CFMutableDictionaryRef)v11, v12, value);
      goto LABEL_29;
    }
  }
  APSLogErrorAt();
LABEL_30:
  if (value)
    CFRelease(value);
  if (v11)
    CFRelease(v11);
  if (v4)
    CFRelease(v4);
}

void mcs_updateIsPlayingAndPostNotification(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  const void **v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 57) != a2)
  {
    v5 = DerivedStorage;
    APEndpointPlaybackSessionUpdateNowPlayingTransaction(a1, a2, &gLogCategory_EndpointPlaybackSessionMC, (const void **)(DerivedStorage + 64));
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v7 = Mutable;
    v8 = (const void **)MEMORY[0x1E0C9AE40];
    if (a2)
      v8 = (const void **)MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, CFSTR("Playing"), *v8);
    *(_BYTE *)(v5 + 57) = a2;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v7);
  }
}

void mcs_invokeEventHandlerCallback(CFTypeRef *a1)
{
  uint64_t DerivedStorage;
  void (*v3)(CFTypeRef, CFTypeRef, _QWORD, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_EndpointPlaybackSessionMC <= 30
    && (gLogCategory_EndpointPlaybackSessionMC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*(_BYTE *)(DerivedStorage + 8))
  {
    v3 = *(void (**)(CFTypeRef, CFTypeRef, _QWORD, _QWORD))(DerivedStorage + 104);
    if (v3)
      v3(*a1, a1[1], *(_QWORD *)(DerivedStorage + 112), *(_QWORD *)(DerivedStorage + 120));
  }
  CFRelease(a1[1]);
  CFRelease(*a1);
}

void mcs_PlayInternal(uint64_t *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  unsigned int v4;
  int v5;
  const void *v6;
  int v7;
  const void *v8;
  void (*v9)(_QWORD, uint64_t);
  const void *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v16 = -16742;
  }
  else
  {
    v3 = DerivedStorage;
    v16 = mcs_EnsureConnectedInternal(*a1);
    if (!v16)
    {
      if (!*(_QWORD *)v3)
      {
        SNPrintF();
        *(_QWORD *)v3 = os_transaction_create();
      }
      CFStringGetTypeID();
      CFDictionaryGetTypedValue();
      if (v16 || (CFStringCopyUTF8CString(), !v15))
      {
        v4 = MediaControlClient_DoPlayRemote();
        v16 = v4;
        if (!v4)
        {
LABEL_12:
          *(_BYTE *)(v3 + 136) = 1;
LABEL_25:
          v16 = 0;
          *(_BYTE *)(v3 + 56) = 1;
          CMNotificationCenterGetDefaultLocalCenter();
          FigDispatchAsyncPostNotification();
          mcs_updateIsPlayingAndPostNotification(*a1, 1);
          goto LABEL_26;
        }
      }
      else
      {
        v16 = MediaControlClient_DoPlayLocal();
        free(v15);
        v4 = v16;
        if (!v16)
          goto LABEL_12;
      }
      if (gLogCategory_EndpointPlaybackSessionMC <= 90)
      {
        if (gLogCategory_EndpointPlaybackSessionMC != -1 || (v5 = _LogCategory_Initialize(), v4 = v16, v5))
        {
          LogPrintF();
          v4 = v16;
        }
      }
      if (v4 == 200453 && *(_BYTE *)(v3 + 136))
      {
        v11 = *(_OWORD *)a1;
        v13 = 0;
        v14 = 0;
        v12 = 0;
        v6 = (const void *)v11;
        if (gLogCategory_EndpointPlaybackSessionMC <= 50)
        {
          if (gLogCategory_EndpointPlaybackSessionMC != -1
            || (v7 = _LogCategory_Initialize(), v6 = (const void *)*a1, v7))
          {
            LogPrintF();
            v6 = (const void *)*a1;
          }
        }
        if (v6)
          CFRetain(v6);
        v8 = (const void *)a1[1];
        if (v8)
          CFRetain(v8);
        mcs_InsertPlayQueueItemInternal((uint64_t)&v11);
      }
      goto LABEL_25;
    }
    APSLogErrorAt();
  }
LABEL_26:
  v9 = (void (*)(_QWORD, uint64_t))a1[2];
  if (v9)
    v9(v16, a1[3]);
  v10 = (const void *)a1[1];
  if (v10)
    CFRelease(v10);
  CFRelease((CFTypeRef)*a1);
}

void mcs_InsertPlayQueueItemInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t inserted;
  void (*v4)(uint64_t, _QWORD);
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    inserted = 4294950554;
  }
  else if (*(_QWORD *)(DerivedStorage + 32))
  {
    inserted = MediaControlClient_DoInsertPlaylistItem();
    if (!(_DWORD)inserted)
      goto LABEL_4;
    APSLogErrorAt();
  }
  else
  {
    inserted = 4294950553;
  }
  if (gLogCategory_EndpointPlaybackSessionMC <= 90
    && (gLogCategory_EndpointPlaybackSessionMC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_4:
  v4 = *(void (**)(uint64_t, _QWORD))(a1 + 24);
  if (v4)
    v4(inserted, *(_QWORD *)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 8));
  v5 = *(const void **)(a1 + 16);
  if (v5)
    CFRelease(v5);
  CFRelease(*(CFTypeRef *)a1);
}

void mcs_RemovePlayQueueItemInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  void (*v4)(uint64_t, _QWORD);
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v3 = 4294950554;
  }
  else if (*(_QWORD *)(DerivedStorage + 32))
  {
    v3 = MediaControlClient_DoRemovePlaylistItem();
    if ((_DWORD)v3)
      APSLogErrorAt();
  }
  else
  {
    v3 = 4294950553;
  }
  v4 = *(void (**)(uint64_t, _QWORD))(a1 + 16);
  if (v4)
    v4(v3, *(_QWORD *)(a1 + 24));
  v5 = *(const void **)(a1 + 8);
  if (v5)
    CFRelease(v5);
  CFRelease(*(CFTypeRef *)a1);
}

void mcs_StopInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    APSLogErrorAt();
    v4 = 4294950554;
  }
  else
  {
    v3 = DerivedStorage;
    if (*(_QWORD *)(DerivedStorage + 32))
      v4 = MediaControlClient_DoStop();
    else
      v4 = 0;
    *(_BYTE *)(v3 + 56) = 0;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  v5 = *(void (**)(uint64_t, _QWORD))(a1 + 8);
  if (v5)
    v5(v4, *(_QWORD *)(a1 + 16));
  CFRelease(*(CFTypeRef *)a1);
}

void mcs_GetPlaybackInfoInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t PlayPlaybackInfoTimesInCMTime;
  void (*v5)(CFTypeRef, uint64_t, _QWORD);
  CFTypeRef v6;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = 0;
  cf = 0;
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    PlayPlaybackInfoTimesInCMTime = 4294950554;
  }
  else if (*(_QWORD *)(DerivedStorage + 32))
  {
    v3 = MediaControlClient_CopyPlaybackInfo();
    if ((_DWORD)v3)
    {
      PlayPlaybackInfoTimesInCMTime = v3;
    }
    else
    {
      PlayPlaybackInfoTimesInCMTime = APEndpointPlaybackSessionCreatePlayPlaybackInfoTimesInCMTime((CFDictionaryRef)cf, (__CFDictionary **)&v6);
      if (!(_DWORD)PlayPlaybackInfoTimesInCMTime)
        goto LABEL_5;
    }
    APSLogErrorAt();
  }
  else
  {
    PlayPlaybackInfoTimesInCMTime = 4294950553;
  }
LABEL_5:
  v5 = *(void (**)(CFTypeRef, uint64_t, _QWORD))(a1 + 8);
  if (v5)
    v5(v6, PlayPlaybackInfoTimesInCMTime, *(_QWORD *)(a1 + 16));
  if (cf)
    CFRelease(cf);
  if (v6)
    CFRelease(v6);
  CFRelease(*(CFTypeRef *)a1);
}

void mcs_SeekToTimeInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  void (*v4)(_QWORD, uint64_t, _QWORD);
  const void *v5;
  CMTime v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(CMTime *)(a1 + 8);
  CMTimeGetSeconds(&v6);
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v3 = 4294950554;
  }
  else if (*(_QWORD *)(DerivedStorage + 32))
  {
    v3 = MediaControlClient_DoScrubSet();
    if ((_DWORD)v3)
      APSLogErrorAt();
  }
  else
  {
    v3 = 4294950553;
  }
  v4 = *(void (**)(_QWORD, uint64_t, _QWORD))(a1 + 40);
  if (v4)
    v4(0, v3, *(_QWORD *)(a1 + 48));
  v5 = *(const void **)(a1 + 32);
  if (v5)
    CFRelease(v5);
  CFRelease(*(CFTypeRef *)a1);
}

void mcs_SetProxiedPropertyInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  void (*v4)(_QWORD, uint64_t, _QWORD);
  const void *v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v3 = 4294950554;
  }
  else if (*(_QWORD *)(DerivedStorage + 32))
  {
    v3 = MediaControlClient_SetProperty();
    if ((_DWORD)v3)
      APSLogErrorAt();
  }
  else
  {
    v3 = 4294950553;
  }
  v4 = *(void (**)(_QWORD, uint64_t, _QWORD))(a1 + 32);
  if (v4)
    v4(0, v3, *(_QWORD *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 8));
  v5 = *(const void **)(a1 + 16);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 24);
  if (v6)
    CFRelease(v6);
  CFRelease(*(CFTypeRef *)a1);
}

void mcs_SetRateInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  void (*v4)(uint64_t, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v3 = 4294950554;
  }
  else if (*(_QWORD *)(DerivedStorage + 32))
  {
    v3 = MediaControlClient_DoRate();
    if ((_DWORD)v3)
      APSLogErrorAt();
    else
      mcs_updateIsPlayingAndPostNotification(*(_QWORD *)a1, *(float *)(a1 + 8) != 0.0);
  }
  else
  {
    v3 = 4294950553;
  }
  v4 = *(void (**)(uint64_t, _QWORD))(a1 + 16);
  if (v4)
    v4(v3, *(_QWORD *)(a1 + 24));
  CFRelease(*(CFTypeRef *)a1);
}

void mcs_GetProxiedPropertyInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  void (*v4)(_QWORD, const void *, _QWORD, _QWORD);
  const void *v5;
  int v6;
  unsigned int v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v3 = 0;
    v6 = -16742;
  }
  else
  {
    if (*(_QWORD *)(DerivedStorage + 32))
    {
      v3 = (const void *)MediaControlClient_CopyProperty();
      v7 = 0;
      goto LABEL_4;
    }
    v3 = 0;
    v6 = -16743;
  }
  v7 = v6;
LABEL_4:
  v4 = *(void (**)(_QWORD, const void *, _QWORD, _QWORD))(a1 + 24);
  if (v4)
    v4(*(_QWORD *)(a1 + 8), v3, v7, *(_QWORD *)(a1 + 32));
  if (v3)
    CFRelease(v3);
  CFRelease(*(CFTypeRef *)(a1 + 8));
  v5 = *(const void **)(a1 + 16);
  if (v5)
    CFRelease(v5);
  CFRelease(*(CFTypeRef *)a1);
}

void mcs_PerformRemoteActionInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  unsigned int v3;
  void (*v4)(_QWORD, _QWORD, _QWORD);
  const void *v5;
  const void *v6;
  unsigned int v7;
  unsigned int v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = 0;
  if (!*(_BYTE *)(DerivedStorage + 8))
  {
    if (*(_QWORD *)(DerivedStorage + 32))
    {
      v3 = MediaControlClient_DoAction();
      if (v3)
      {
        v7 = v3;
        APSLogErrorAt();
        v8 = v7;
      }
    }
  }
  v4 = *(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 24);
  if (v4)
    v4(v8, 0, *(_QWORD *)(a1 + 32));
  v5 = *(const void **)(a1 + 8);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 16);
  if (v6)
    CFRelease(v6);
  CFRelease(*(CFTypeRef *)a1);
}

uint64_t mcs_SetEventHandlerInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return 4294950554;
  *(_OWORD *)(DerivedStorage + 104) = *(_OWORD *)(a1 + 8);
  v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    v4 = *(const void **)(DerivedStorage + 120);
    *(_QWORD *)(DerivedStorage + 120) = v3;
    CFRetain(v3);
    if (v4)
      CFRelease(v4);
  }
  return 0;
}

uint64_t AirPlayReceiverServicesServerStart()
{
  __CFDictionary *Mutable;
  uint64_t v1;

  if (!FigGetCFPreferenceNumberWithDefault())
    return 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CF75D0], CFSTR("com.apple.airplay.receiverservices"));
  v1 = APSXPCServerStart();
  if ((_DWORD)v1)
  {
    APSLogErrorAt();
    if (!Mutable)
      return v1;
    goto LABEL_6;
  }
  if (IsAppleInternalBuild())
    APSXPCServerAddCommandHandler();
  if (Mutable)
LABEL_6:
    CFRelease(Mutable);
  return v1;
}

uint64_t handleTestEchoCommand(int a1, CFTypeRef cf, _QWORD *a3)
{
  CFTypeRef v4;

  if (cf)
    v4 = CFRetain(cf);
  else
    v4 = 0;
  *a3 = v4;
  return 0;
}

uint64_t AirPlayXPCServicesServerStart()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t started;
  uint64_t v3;
  uint64_t v4;

  v0 = AirPlayReceiverServicesServerStart();
  if ((_DWORD)v0)
  {
    v4 = v0;
LABEL_13:
    APSLogErrorAt();
    return v4;
  }
  v1 = AirPlayDiscoveryBrokerXPCServicesServerStart();
  if ((_DWORD)v1)
  {
    v4 = v1;
    goto LABEL_13;
  }
  started = FigBufferedAirPlayGlobalRoutingRegistryStartServer();
  if ((_DWORD)started)
  {
    v4 = started;
    goto LABEL_13;
  }
  v3 = APCarPlayAVVCServerInit();
  if ((_DWORD)v3)
  {
    v4 = v3;
    goto LABEL_13;
  }
  if (!MEMORY[0x1CAA3DF18]())
  {
    APDemoManagerStart();
    APSRegisterReceiverAppLauncher();
  }
  return 0;
}

uint64_t AirPlayDiscoveryBrokerXPCServicesServerStart()
{
  __CFDictionary *Mutable;
  uint64_t v1;

  if (!APSSettingsIsFeatureEnabled() || !FigGetCFPreferenceNumberWithDefault())
    return 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CF75D0], CFSTR("com.apple.airplay.discoverybroker.allow"));
  v1 = APSXPCServerStart();
  if ((_DWORD)v1)
  {
    APSLogErrorAt();
    if (!Mutable)
      return v1;
    goto LABEL_7;
  }
  if (IsAppleInternalBuild())
    APSXPCServerAddCommandHandler();
  if (Mutable)
LABEL_7:
    CFRelease(Mutable);
  return v1;
}

uint64_t AirPlayStartAlwaysOnModules()
{
  APDemoManagerStart();
  return APSRegisterReceiverAppLauncher();
}

uint64_t AirPlayXPCServicesStart()
{
  int v0;
  int IsAirplayd;
  int v2;
  uint64_t started;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t SharedInstance;

  v0 = MEMORY[0x1CAA3DF18]();
  IsAirplayd = FigServer_IsAirplayd();
  v2 = IsAirplayd;
  if (v0 && !IsAirplayd)
    return 0;
  started = FigEndpointStreamAudioEngineStartServer();
  if ((_DWORD)started)
  {
    SharedInstance = started;
LABEL_47:
    APSLogErrorAt();
    if (gLogCategory_AirPlayServices > 90
      || gLogCategory_AirPlayServices == -1 && !_LogCategory_Initialize())
    {
      return SharedInstance;
    }
    goto LABEL_71;
  }
  v4 = FigSampleBufferConsumerStartServer();
  if ((_DWORD)v4)
  {
    SharedInstance = v4;
    APSLogErrorAt();
    if (gLogCategory_AirPlayServices > 90
      || gLogCategory_AirPlayServices == -1 && !_LogCategory_Initialize())
    {
      return SharedInstance;
    }
LABEL_71:
    LogPrintF();
    return SharedInstance;
  }
  v5 = FigEndpointPlaybackSessionStartServer();
  if ((_DWORD)v5)
  {
    SharedInstance = v5;
    APSLogErrorAt();
    if (gLogCategory_AirPlayServices > 90
      || gLogCategory_AirPlayServices == -1 && !_LogCategory_Initialize())
    {
      return SharedInstance;
    }
    goto LABEL_71;
  }
  v6 = FigEndpointRemoteControlSessionStartServer();
  if ((_DWORD)v6)
  {
    SharedInstance = v6;
    goto LABEL_47;
  }
  v7 = FigEndpointStreamStartServer();
  if ((_DWORD)v7)
  {
    SharedInstance = v7;
    APSLogErrorAt();
    if (gLogCategory_AirPlayServices > 90
      || gLogCategory_AirPlayServices == -1 && !_LogCategory_Initialize())
    {
      return SharedInstance;
    }
    goto LABEL_71;
  }
  v8 = AirPlayDiscoveryBrokerXPCServicesServerStart();
  if ((_DWORD)v8)
  {
    SharedInstance = v8;
    APSLogErrorAt();
    if (gLogCategory_AirPlayServices > 90
      || gLogCategory_AirPlayServices == -1 && !_LogCategory_Initialize())
    {
      return SharedInstance;
    }
    goto LABEL_71;
  }
  v9 = FigBufferedAirPlayGlobalRoutingRegistryStartServer();
  if ((_DWORD)v9)
  {
    SharedInstance = v9;
    APSLogErrorAt();
    if (gLogCategory_AirPlayServices > 90
      || gLogCategory_AirPlayServices == -1 && !_LogCategory_Initialize())
    {
      return SharedInstance;
    }
    goto LABEL_71;
  }
  v10 = FigClusterSynchronizationManager_OneTimeInitialization();
  if ((_DWORD)v10)
  {
    SharedInstance = v10;
    APSLogErrorAt();
    if (gLogCategory_AirPlayServices > 90
      || gLogCategory_AirPlayServices == -1 && !_LogCategory_Initialize())
    {
      return SharedInstance;
    }
    goto LABEL_71;
  }
  if (MTAudioProcessingTapServerStart()
    && gLogCategory_AirPlayServices <= 90
    && (gLogCategory_AirPlayServices != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v11 = APCarPlayAVVCServerInit();
  if ((_DWORD)v11)
  {
    SharedInstance = v11;
LABEL_65:
    APSLogErrorAt();
    return SharedInstance;
  }
  v12 = AirPlayStartEndpointXPCService();
  if ((_DWORD)v12)
  {
    SharedInstance = v12;
    goto LABEL_65;
  }
  v13 = AirPlayStartEndpointManagerXPCServiceIfNeeded();
  if ((_DWORD)v13)
  {
    SharedInstance = v13;
    goto LABEL_65;
  }
  v14 = AirPlayReceiverServicesServerStart();
  if ((_DWORD)v14)
  {
    SharedInstance = v14;
    APSLogErrorAt();
    if (gLogCategory_AirPlayServices > 90
      || gLogCategory_AirPlayServices == -1 && !_LogCategory_Initialize())
    {
      return SharedInstance;
    }
    goto LABEL_71;
  }
  v15 = AirPlayAutoconnectServicesServerStart();
  if ((_DWORD)v15)
  {
    SharedInstance = v15;
    APSLogErrorAt();
    if (gLogCategory_AirPlayServices > 90
      || gLogCategory_AirPlayServices == -1 && !_LogCategory_Initialize())
    {
      return SharedInstance;
    }
    goto LABEL_71;
  }
  if (v2)
  {
    if (gLogCategory_AirPlayServices <= 50
      && (gLogCategory_AirPlayServices != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (APAirPlayAgentServicesClientSendCommand()
      && gLogCategory_AirPlayServices <= 90
      && (gLogCategory_AirPlayServices != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  if (!IsAppleTV())
    return 0;
  SharedInstance = APSLocalAudioCapabilityMonitorGetSharedInstance();
  if ((_DWORD)SharedInstance)
  {
    if (gLogCategory_AirPlayServices <= 90
      && (gLogCategory_AirPlayServices != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 0;
  }
  return SharedInstance;
}

uint64_t AirPlayStartEndpointManagerXPCServiceIfNeeded()
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v1;
  uint64_t v2;
  uint64_t started;
  uint64_t v5;
  uint64_t v6;
  void *value;

  v6 = 0;
  value = 0;
  v5 = 0;
  if (!FigServer_IsAirplayd())
    return 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    return 0;
  }
  v1 = Mutable;
  v2 = APGetEndpointManager(&value);
  if ((_DWORD)v2)
  {
    started = v2;
    APSLogErrorAt();
  }
  else
  {
    CFDictionarySetValue(v1, (const void *)*MEMORY[0x1E0CA3A58], value);
    APGetEndpointManagerCarPlay(&v6);
    FigCFDictionarySetValue();
    SPGetEndpointManager(&v5);
    FigCFDictionarySetValue();
    FigEndpointManagerForNeroGetShared();
    FigCFDictionarySetValue();
    started = FigEndpointManagerStartServerEx();
    if ((_DWORD)started)
    {
      APSLogErrorAt();
      if (gLogCategory_AirPlayServices <= 90
        && (gLogCategory_AirPlayServices != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
  }
  CFRelease(v1);
  return started;
}

uint64_t AirPlayAutoconnectServicesServerStart()
{
  __CFDictionary *Mutable;
  uint64_t v1;

  if (!FigGetCFPreferenceNumberWithDefault())
    return 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CF75D0], CFSTR("com.apple.airplay.autoconnect.services.allow"));
  v1 = APSXPCServerStart();
  if ((_DWORD)v1)
  {
    APSLogErrorAt();
    if (!Mutable)
      return v1;
    goto LABEL_6;
  }
  if (IsAppleInternalBuild())
    APSXPCServerAddCommandHandler();
  if (Mutable)
LABEL_6:
    CFRelease(Mutable);
  return v1;
}

uint64_t AirPlayStartServicesInMXProcess()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t started;

  v0 = AirPlayXPCServicesStart();
  if ((_DWORD)v0)
  {
    started = v0;
    APSLogErrorAt();
  }
  else
  {
    APDemoManagerStart();
    if (MEMORY[0x1CAA3DF18]() && (v1 = APAirPlayAgentServicesServerStart(), (_DWORD)v1))
    {
      started = v1;
      if (gLogCategory_AirPlayServices <= 90
        && (gLogCategory_AirPlayServices != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_12;
      }
    }
    else
    {
      APSRegisterReceiverAppLauncher();
      started = SPHubbedDevicesProviderStartService(0);
      if ((_DWORD)started
        && gLogCategory_AirPlayServices <= 90
        && (gLogCategory_AirPlayServices != -1 || _LogCategory_Initialize()))
      {
LABEL_12:
        LogPrintF();
      }
    }
  }
  return started;
}

uint64_t AirPlayStartEndpointXPCService()
{
  int v0;
  int IsAirplayd;
  uint64_t started;

  v0 = MEMORY[0x1CAA3DF18]();
  IsAirplayd = FigServer_IsAirplayd();
  started = 0;
  if (v0)
  {
    if (IsAirplayd)
    {
      started = FigEndpointStartServerEx();
      if ((_DWORD)started)
      {
        APSLogErrorAt();
        if (gLogCategory_AirPlayServices <= 90
          && (gLogCategory_AirPlayServices != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
    }
  }
  return started;
}

uint64_t APAudioSourceCompressionCreate(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  if (a2 && a3 && a4)
  {
    FigEndpointAudioSourceGetClassID();
    v7 = CMDerivedObjectCreate();
    if ((_DWORD)v7)
    {
      v11 = v7;
      APSLogErrorAt();
    }
    else
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v9 = *(_QWORD *)(a3 + 32);
      v10 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(DerivedStorage + 8) = *(_OWORD *)a3;
      *(_OWORD *)(DerivedStorage + 24) = v10;
      *(_QWORD *)(DerivedStorage + 40) = v9;
      *(_QWORD *)(DerivedStorage + 48) = CFRetain(a2);
      *(_QWORD *)(DerivedStorage + 136) = 0;
      *(_DWORD *)(DerivedStorage + 144) = -1;
      *(_BYTE *)(DerivedStorage + 148) = 0;
      if (gLogCategory_APAudioSourceCompression <= 30
        && (gLogCategory_APAudioSourceCompression != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v11 = 0;
      *a4 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950525;
  }
  return v11;
}

uint64_t compsource_Invalidate()
{
  _BYTE *DerivedStorage;
  _BYTE *v1;
  const void *v2;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v1 = DerivedStorage;
    if (gLogCategory_APAudioSourceCompression <= 30
      && (gLogCategory_APAudioSourceCompression != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *v1 = 1;
    compsource_ensureAudioConverterDestroyed();
    v2 = (const void *)*((_QWORD *)v1 + 6);
    if (v2)
    {
      CFRelease(v2);
      *((_QWORD *)v1 + 6) = 0;
    }
  }
  return 0;
}

__CFString *compsource_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APAudioSourceCompression %p>"), a1);
  return Mutable;
}

uint64_t compsource_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFNumberRef *a4)
{
  AudioConverterRef *DerivedStorage;
  CFNumberRef v8;
  CFNumberRef v9;
  OpaqueAudioConverter *v10;
  uint64_t Property;
  CFNumberRef v12;
  uint64_t v13;
  CFNumberRef v14;
  uint64_t v16;
  UInt32 ioPropertyDataSize;
  uint64_t outPropertyData;

  DerivedStorage = (AudioConverterRef *)CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("PacketSizeLimit")))
  {
    v8 = CFNumberCreate(a3, kCFNumberSInt64Type, DerivedStorage + 12);
    *a4 = v8;
    if (!v8)
      goto LABEL_21;
    return 0;
  }
  if (CFEqual(a2, CFSTR("VBRBitRate")))
  {
    v9 = CFNumberCreate(a3, kCFNumberSInt64Type, DerivedStorage + 17);
    *a4 = v9;
    if (!v9)
      goto LABEL_21;
    return 0;
  }
  if (CFEqual(a2, CFSTR("AlgorithmicLatency")))
  {
    outPropertyData = 0;
    v10 = DerivedStorage[13];
    if (!v10)
    {
      APSLogErrorAt();
      return 4294950524;
    }
    ioPropertyDataSize = 8;
    Property = AudioConverterGetProperty(v10, 0x7072696Du, &ioPropertyDataSize, &outPropertyData);
    if (!(_DWORD)Property)
    {
      v12 = CFNumberCreate(a3, kCFNumberSInt32Type, &outPropertyData);
      *a4 = v12;
      if (!v12)
        goto LABEL_21;
      return 0;
    }
    v16 = Property;
LABEL_20:
    APSLogErrorAt();
    return v16;
  }
  if (!CFEqual(a2, CFSTR("MaximumOutputPacketSize")))
    return 4294954512;
  ioPropertyDataSize = 4;
  LODWORD(outPropertyData) = 0;
  v13 = AudioConverterGetProperty(DerivedStorage[13], 0x786F7073u, &ioPropertyDataSize, &outPropertyData);
  if ((_DWORD)v13)
  {
    v16 = v13;
    goto LABEL_20;
  }
  v14 = CFNumberCreate(a3, kCFNumberSInt32Type, &outPropertyData);
  *a4 = v14;
  if (v14)
    return 0;
LABEL_21:
  APSLogErrorAt();
  return 4294950526;
}

uint64_t compsource_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  int v6;
  unsigned int v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("PacketSizeLimit")))
  {
    if (CFEqual(a2, CFSTR("VBRBitRate")))
    {
      v9 = ASBDToAPAudioFormat();
      if (!v9)
      {
        if (APAudioFormatSupportsVBR())
        {
          *(_QWORD *)(DerivedStorage + 136) = CFGetInt64();
          return v9;
        }
        if (gLogCategory_APAudioSourceCompression <= 50
          && (gLogCategory_APAudioSourceCompression != -1 || _LogCategory_Initialize()))
        {
          goto LABEL_40;
        }
        return v9;
      }
LABEL_49:
      APSLogErrorAt();
      return v9;
    }
    if (CFEqual(a2, CFSTR("CodecQuality")))
    {
      v9 = ASBDToAPAudioFormat();
      if (v9)
        goto LABEL_49;
      if (!APAudioFormatSupportsVBR())
      {
        if (gLogCategory_APAudioSourceCompression <= 50
          && (gLogCategory_APAudioSourceCompression != -1 || _LogCategory_Initialize()))
        {
          goto LABEL_40;
        }
        return v9;
      }
      if (CFEqual(a3, CFSTR("CodecQualityMode_Max")))
      {
        v6 = 127;
LABEL_37:
        *(_DWORD *)(DerivedStorage + 144) = v6;
        return v9;
      }
      if (CFEqual(a3, CFSTR("CodecQualityMode_High")))
      {
        v6 = 96;
        goto LABEL_37;
      }
      if (CFEqual(a3, CFSTR("CodecQualityMode_Medium")))
      {
        v6 = 64;
        goto LABEL_37;
      }
      if (CFEqual(a3, CFSTR("CodecQualityMode_Low")))
      {
        v6 = 32;
        goto LABEL_37;
      }
      if (CFEqual(a3, CFSTR("CodecQualityMode_Min")))
      {
        *(_DWORD *)(DerivedStorage + 144) = 0;
        return v9;
      }
      *(_DWORD *)(DerivedStorage + 144) = -1;
      if (gLogCategory_APAudioSourceCompression <= 50
        && (gLogCategory_APAudioSourceCompression != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return -16771;
    }
    else
    {
      return -12784;
    }
  }
  v9 = ASBDToAPAudioFormat();
  if (v9)
    goto LABEL_49;
  if (APAudioFormatSupportsVBR())
  {
    *(_QWORD *)(DerivedStorage + 96) = CFGetInt64();
    return v9;
  }
  if (gLogCategory_APAudioSourceCompression <= 50
    && (gLogCategory_APAudioSourceCompression != -1 || _LogCategory_Initialize()))
  {
LABEL_40:
    LogPrintF();
  }
  return v9;
}

void compsource_ensureAudioConverterDestroyed()
{
  uint64_t DerivedStorage;
  OpaqueAudioConverter *v1;
  const __CFAllocator *DefaultAirPlayMallocZoneCFAllocator;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(OpaqueAudioConverter **)(DerivedStorage + 104);
  if (v1)
  {
    AudioConverterDispose(v1);
    *(_QWORD *)(DerivedStorage + 104) = 0;
  }
  *(_QWORD *)(DerivedStorage + 88) = 0;
  *(_OWORD *)(DerivedStorage + 72) = 0u;
  *(_OWORD *)(DerivedStorage + 56) = 0u;
  if (*(_QWORD *)(DerivedStorage + 112))
  {
    DefaultAirPlayMallocZoneCFAllocator = (const __CFAllocator *)APSAllocatorGetDefaultAirPlayMallocZoneCFAllocator();
    CFAllocatorDeallocate(DefaultAirPlayMallocZoneCFAllocator, *(void **)(DerivedStorage + 112));
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  *(_QWORD *)(DerivedStorage + 120) = 0;
}

uint64_t compsource_Resume()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  AudioConverterRef *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  int RichestDecodableFormatAndChannelLayout;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  _OWORD v20[2];
  uint64_t v21;
  CFTypeRef cf[2];
  _DWORD *v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioSourceCompression <= 30
    && (gLogCategory_APAudioSourceCompression != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v1 = CMBaseObjectGetDerivedStorage();
  v23 = 0;
  cf[0] = 0;
  cf[1] = 0;
  v21 = 0;
  v2 = (AudioConverterRef *)(v1 + 104);
  if (!*(_QWORD *)(v1 + 104))
  {
    v3 = v1;
    v4 = *(_QWORD *)(v1 + 48);
    v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
    if (!v5)
    {
      v13 = 4294954514;
      goto LABEL_17;
    }
    v6 = v5(v4, v3 + 56);
    if ((_DWORD)v6)
    {
      v13 = v6;
      goto LABEL_17;
    }
    v7 = AudioConverterNew((const AudioStreamBasicDescription *)(v3 + 56), (const AudioStreamBasicDescription *)(v3 + 8), v2);
    if ((_DWORD)v7)
    {
      v13 = v7;
      goto LABEL_17;
    }
    CMBaseObject = FigEndpointAudioSourceGetCMBaseObject();
    v9 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v9)
    {
      v9(CMBaseObject, *MEMORY[0x1E0CA37D0], 0, cf);
      if (cf[0])
      {
        RichestDecodableFormatAndChannelLayout = CMAudioFormatDescriptionGetRichestDecodableFormatAndChannelLayout();
        if (!v23 || RichestDecodableFormatAndChannelLayout)
        {
          if (RichestDecodableFormatAndChannelLayout
            && gLogCategory_APAudioSourceCompression <= 90
            && (gLogCategory_APAudioSourceCompression != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        else
        {
          memset(v20, 0, sizeof(v20));
          LODWORD(v20[0]) = *v23;
          v11 = AudioConverterSetProperty(*v2, 0x69636C20u, 0x20u, v20);
          if ((_DWORD)v11)
          {
            v13 = v11;
            goto LABEL_17;
          }
          v12 = AudioConverterSetProperty(*v2, 0x6F636C20u, 0x20u, v20);
          if ((_DWORD)v12)
          {
            v13 = v12;
LABEL_17:
            APSLogErrorAt();
            goto LABEL_42;
          }
        }
      }
    }
    if (*(_QWORD *)(v3 + 96))
    {
      LODWORD(v20[0]) = *(_QWORD *)(v3 + 96);
      v14 = AudioConverterSetProperty(*v2, 0x70616B6Cu, 4u, v20);
      if ((_DWORD)v14)
      {
        v13 = v14;
        goto LABEL_17;
      }
    }
    if (*(_QWORD *)(v3 + 136))
    {
      LODWORD(v20[0]) = *(_QWORD *)(v3 + 136);
      v15 = AudioConverterSetProperty(*v2, 0x76627262u, 4u, v20);
      if ((_DWORD)v15)
      {
        v13 = v15;
        goto LABEL_17;
      }
      if (gLogCategory_APAudioSourceCompression <= 50
        && (gLogCategory_APAudioSourceCompression != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    if (*(_DWORD *)(v3 + 144) != -1)
    {
      LODWORD(v20[0]) = *(_DWORD *)(v3 + 144);
      v16 = AudioConverterSetProperty(*v2, 0x63647175u, 4u, v20);
      if ((_DWORD)v16)
      {
        v13 = v16;
        goto LABEL_17;
      }
      if (gLogCategory_APAudioSourceCompression <= 50
        && (gLogCategory_APAudioSourceCompression != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    if (gLogCategory_APAudioSourceCompression <= 50
      && (gLogCategory_APAudioSourceCompression != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  v13 = 0;
LABEL_42:
  if (cf[0])
    CFRelease(cf[0]);
  if ((_DWORD)v13)
    goto LABEL_49;
  v17 = *(_QWORD *)(DerivedStorage + 48);
  v18 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v18)
  {
    v13 = 4294954514;
    goto LABEL_49;
  }
  v13 = v18(v17);
  if ((_DWORD)v13)
  {
LABEL_49:
    APSLogErrorAt();
    return v13;
  }
  *(_DWORD *)(DerivedStorage + 128) = 0;
  return v13;
}

uint64_t compsource_Suspend()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  void (*v2)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioSourceCompression <= 30
    && (gLogCategory_APAudioSourceCompression != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v1 = *(_QWORD *)(DerivedStorage + 48);
  v2 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v2)
    v2(v1);
  compsource_ensureAudioConverterDestroyed();
  return 0;
}

uint64_t compsource_Flush()
{
  uint64_t DerivedStorage;
  OpaqueAudioConverter *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioSourceCompression <= 30
    && (gLogCategory_APAudioSourceCompression != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v1 = *(OpaqueAudioConverter **)(DerivedStorage + 104);
  if (v1)
  {
    v2 = AudioConverterReset(v1);
    if ((_DWORD)v2)
    {
      v5 = v2;
      goto LABEL_11;
    }
  }
  v3 = *(_QWORD *)(DerivedStorage + 48);
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v4)
  {
    v5 = 4294954514;
    goto LABEL_11;
  }
  v5 = v4(v3);
  if ((_DWORD)v5)
  {
LABEL_11:
    APSLogErrorAt();
    return v5;
  }
  *(_DWORD *)(DerivedStorage + 128) = 0;
  return v5;
}

uint64_t compsource_CanProduceBytes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 48);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v4)
    return v4(v3, a2);
  else
    return 0;
}

uint64_t compsource_GetAudioFormat(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  __int128 v4;
  __int128 v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioSourceCompression <= 30
    && (gLogCategory_APAudioSourceCompression != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v4 = *(_OWORD *)(DerivedStorage + 8);
  v5 = *(_OWORD *)(DerivedStorage + 24);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(DerivedStorage + 40);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  return 0;
}

uint64_t compsource_CanProducePackets(uint64_t a1, unint64_t a2)
{
  uint64_t DerivedStorage;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_DWORD *)(DerivedStorage + 28);
  v5 = *(_DWORD *)(DerivedStorage + 80);
  v6 = *(_QWORD *)(DerivedStorage + 48);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v7)
    return 0;
  if (a2 <= 1)
    v8 = 1;
  else
    v8 = a2;
  return v7(v6, v8 * (v5 * v4));
}

uint64_t compsource_FillComplexBuffer(uint64_t a1, void *a2, UInt32 a3, AudioStreamPacketDescription *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, uint64_t a9)
{
  uint64_t DerivedStorage;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, char *);
  uint64_t v21;
  UInt32 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v29;
  __int128 v30;
  uint64_t inInputDataProcUserData;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  AudioBufferList outOutputData;
  UInt32 ioOutputDataPacketSize;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)&outOutputData.mNumberBuffers = 0;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v18 = *(unsigned int *)(DerivedStorage + 128);
  inInputDataProcUserData = a1;
  v19 = *(_QWORD *)(DerivedStorage + 48);
  v20 = *(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v20)
    v21 = v20(v19, (char *)&v33 + 8);
  else
    v21 = 0;
  *(_QWORD *)&v33 = v21;
  LOBYTE(v34) = 1;
  DWORD1(v34) = 0;
  ioOutputDataPacketSize = a5;
  v22 = *(_DWORD *)(DerivedStorage + 36);
  outOutputData.mNumberBuffers = 1;
  outOutputData.mBuffers[0].mNumberChannels = v22;
  outOutputData.mBuffers[0].mDataByteSize = a3;
  outOutputData.mBuffers[0].mData = a2;
  bzero(a4, 16 * a5);
  v23 = AudioConverterFillComplexBuffer(*(AudioConverterRef *)(DerivedStorage + 104), (AudioConverterComplexInputDataProc)compsource_audioConverterInputCallBack, &inInputDataProcUserData, &ioOutputDataPacketSize, &outOutputData, a4);
  v24 = v23;
  if ((_QWORD)v33)
    *(_DWORD *)(v33 + 24) += DWORD1(v34);
  v25 = ioOutputDataPacketSize;
  *(_DWORD *)(DerivedStorage + 128) -= *(_DWORD *)(DerivedStorage + 28) * ioOutputDataPacketSize;
  *(_BYTE *)(DerivedStorage + 148) = 0;
  if ((_DWORD)v23 != -16774)
  {
    if ((_DWORD)v23)
    {
      APSLogErrorAt();
      return v24;
    }
    if (!outOutputData.mBuffers[0].mDataByteSize)
    {
      APSLogErrorAt();
      return 4294950524;
    }
  }
  *a7 = v25;
  *a6 = 0;
  if ((_DWORD)v25)
  {
    v26 = 0;
    v27 = v25 - 1;
    do
      v26 += a4[v27].mDataByteSize;
    while ((unint64_t)v27--);
    *a6 = v26;
  }
  if (a8)
    *a8 = *((_QWORD *)&v33 + 1) - v18;
  if (a9)
  {
    v29 = *(_OWORD *)(DerivedStorage + 8);
    v30 = *(_OWORD *)(DerivedStorage + 24);
    *(_QWORD *)(a9 + 32) = *(_QWORD *)(DerivedStorage + 40);
    *(_OWORD *)a9 = v29;
    *(_OWORD *)(a9 + 16) = v30;
  }
  return v24;
}

uint64_t compsource_SetWriteHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;

  v5 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 48);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (!v6)
  {
    v7 = 4294954514;
LABEL_5:
    APSLogErrorAt();
    return v7;
  }
  v7 = v6(v5, a2, a3);
  if ((_DWORD)v7)
    goto LABEL_5;
  return v7;
}

uint64_t compsource_PrepareForFlush()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 48);
  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
  if (!v1)
  {
    v2 = 4294954514;
LABEL_5:
    APSLogErrorAt();
    return v2;
  }
  v2 = v1(v0);
  if ((_DWORD)v2)
    goto LABEL_5;
  return v2;
}

uint64_t compsource_AllowPartialFillOfNextComplexBuffer(uint64_t a1, char a2)
{
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 148) = a2;
  return 0;
}

uint64_t compsource_audioConverterInputCallBack(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, _QWORD);
  CFIndex v22;
  char *v23;
  const __CFAllocator *DefaultAirPlayMallocZoneCFAllocator;
  char *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, char *, _QWORD, uint64_t *, _QWORD, uint64_t *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = DerivedStorage;
  v30 = 0;
  v10 = *(_DWORD *)(DerivedStorage + 84);
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 8) = v10;
  *(_DWORD *)(a3 + 12) = 0;
  v11 = *(_DWORD *)(DerivedStorage + 80);
  v12 = v11 * *a2;
  v13 = *(_QWORD *)(a5 + 8);
  if (v13)
  {
    v14 = *(_DWORD *)(a5 + 28);
    v15 = *(_DWORD *)(v13 + 24);
    if (v14)
    {
      v15 += v14;
      *(_DWORD *)(v13 + 24) = v15;
      *(_DWORD *)(a5 + 28) = 0;
    }
    v16 = *(_DWORD *)(v13 + 28) - v15;
    if (v16)
    {
      if (v16 >= v12)
        v17 = v12;
      else
        v17 = v16;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)v13 + (*(_DWORD *)(v13 + 20) & v15);
      *(_DWORD *)(a3 + 12) = v17;
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  v20 = *(_QWORD *)(DerivedStorage + 48);
  v21 = *(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v21 || !v21(v20, 0))
  {
LABEL_18:
    *a2 = 0;
LABEL_47:
    v18 = 4294950522;
    if (*(_DWORD *)(a5 + 28))
    {
      if (*(_BYTE *)(v9 + 148))
        return 0;
      else
        return 4294950522;
    }
    return v18;
  }
  if (*(_QWORD *)(v9 + 120) >= (unint64_t)v12)
  {
    v23 = *(char **)(v9 + 112);
  }
  else
  {
    v22 = (unint64_t)(v12 + *MEMORY[0x1E0C85AD8] - 1) / *MEMORY[0x1E0C85AD8] * *MEMORY[0x1E0C85AD8];
    if (gLogCategory_APAudioSourceCompression <= 50
      && (gLogCategory_APAudioSourceCompression != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    DefaultAirPlayMallocZoneCFAllocator = (const __CFAllocator *)APSAllocatorGetDefaultAirPlayMallocZoneCFAllocator();
    v25 = (char *)CFAllocatorReallocate(DefaultAirPlayMallocZoneCFAllocator, *(void **)(v9 + 112), v22, 0);
    if (!v25)
    {
      APSLogErrorAt();
      v18 = APSSignalErrorAt();
      if (!(_DWORD)v18)
      {
        v17 = 0;
        v11 = *(_DWORD *)(v9 + 80);
        goto LABEL_10;
      }
LABEL_46:
      *a2 = 0;
      if ((_DWORD)v18 != -16774)
        return v18;
      goto LABEL_47;
    }
    v23 = v25;
    *(_QWORD *)(v9 + 112) = v25;
    *(_QWORD *)(v9 + 120) = v22;
  }
  v29 = 0;
  if (!(_DWORD)v12)
  {
LABEL_35:
    if (gLogCategory_APAudioSourceCompression <= 30
      && (gLogCategory_APAudioSourceCompression != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v18 = 4294950522;
    goto LABEL_46;
  }
  v17 = 0;
  while (1)
  {
    v26 = *(_QWORD *)(v9 + 48);
    v27 = *(uint64_t (**)(uint64_t, char *, _QWORD, uint64_t *, _QWORD, uint64_t *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v27)
    {
      v18 = 4294954514;
LABEL_39:
      if (gLogCategory_APAudioSourceCompression <= 90
        && (gLogCategory_APAudioSourceCompression != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      APSLogErrorAt();
      goto LABEL_46;
    }
    v28 = v27(v26, v23, v12, &v29, 0, &v30, a5 + 32);
    if ((_DWORD)v28)
      break;
    if (v29)
    {
      v23 += v29;
      v17 += v29;
      LODWORD(v12) = v12 - v29;
      if ((_DWORD)v12)
        continue;
    }
    goto LABEL_31;
  }
  v18 = v28;
  if ((_DWORD)v28 != -16774)
    goto LABEL_39;
LABEL_31:
  if (!v17)
    goto LABEL_35;
  if (!*(_BYTE *)(a5 + 24))
  {
    *(_QWORD *)(a5 + 16) = v30;
    *(_BYTE *)(a5 + 24) = 1;
  }
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v9 + 112);
  *(_DWORD *)(a3 + 12) = v17;
  v11 = *(_DWORD *)(v9 + 80);
LABEL_9:
  *(_DWORD *)(a5 + 28) = v17;
  *(_DWORD *)(v9 + 128) += v17 / v11;
LABEL_10:
  v18 = 0;
  *a2 = v17 / v11;
  return v18;
}

uint64_t APEndpointStreamAudioHoseAggregateCreate(const __CFAllocator *a1, const void *a2, const __CFDictionary *a3, _QWORD *a4)
{
  uint64_t v8;
  _QWORD *DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;

  if (!a2)
  {
    APSLogErrorAt();
    return 4294894965;
  }
  if (a4)
  {
    if (hoseAggregate_getClassID_sRegisterAPEndpointStreamAudioHoseAggregateBaseTypeOnce != -1)
      dispatch_once_f(&hoseAggregate_getClassID_sRegisterAPEndpointStreamAudioHoseAggregateBaseTypeOnce, &hoseAggregate_getClassID_sAPEndpointStreamAudioHoseAggregateClassID, (dispatch_function_t)hoseAggregate_initClassIDOnce);
    v8 = CMDerivedObjectCreate();
    if ((_DWORD)v8)
    {
      v18 = v8;
    }
    else
    {
      DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
      v10 = FigSimpleMutexCreate();
      DerivedStorage[1] = v10;
      if (v10)
      {
        SNPrintF();
        v11 = FigDispatchQueueCreateWithPriority();
        DerivedStorage[2] = v11;
        if (v11)
        {
          Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          DerivedStorage[3] = Mutable;
          if (Mutable)
          {
            if (a3)
            {
              v13 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (!v13)
              {
                v18 = 4294894966;
LABEL_20:
                APSLogErrorAt();
                goto LABEL_23;
              }
              CFDictionaryGetValue(a3, CFSTR("BBufBackingProvider"));
              FigCFDictionarySetValue();
            }
            else
            {
              v13 = 0;
            }
            v14 = APTransportStreamAggregateCreate();
            if ((_DWORD)v14)
            {
              v18 = v14;
            }
            else
            {
              v15 = DerivedStorage[4];
              v16 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
              if (v16)
              {
                v17 = v16(v15);
                if (!(_DWORD)v17)
                {
                  DerivedStorage[5] = CFRetain(a2);
                  if (gLogCategory_APEndpointStreamAudioHoseAggregate <= 50
                    && (gLogCategory_APEndpointStreamAudioHoseAggregate != -1 || _LogCategory_Initialize()))
                  {
                    LogPrintF();
                  }
                  v18 = 0;
                  *a4 = 0;
                  goto LABEL_23;
                }
                v18 = v17;
              }
              else
              {
                v18 = 4294954514;
              }
            }
            goto LABEL_20;
          }
          v18 = 4294894966;
        }
        else
        {
          v18 = 4294894966;
        }
      }
      else
      {
        v18 = 4294894966;
      }
    }
    APSLogErrorAt();
    v13 = 0;
  }
  else
  {
    APSLogErrorAt();
    v13 = 0;
    v18 = 4294894965;
  }
LABEL_23:
  if (v13)
    CFRelease(v13);
  return v18;
}

uint64_t APEndpointStreamAudioHoseAggregateRegisterWithParentRegistrar(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)(DerivedStorage + 56))
  {
    v7 = 0;
    goto LABEL_13;
  }
  if (gLogCategory_APEndpointStreamAudioHoseAggregate <= 50
    && (gLogCategory_APEndpointStreamAudioHoseAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v3 = *(_QWORD *)(DerivedStorage + 40);
  APSEndpointStreamAudioHoseRegistrarProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (v5 = *(_QWORD *)(ProtocolVTable + 16)) == 0)
  {
    v7 = 4294954508;
    goto LABEL_12;
  }
  v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v5 + 8);
  if (!v6)
  {
    v7 = 4294954514;
    goto LABEL_12;
  }
  v7 = v6(v3, a1, 0, DerivedStorage + 48);
  if ((_DWORD)v7)
  {
LABEL_12:
    APSLogErrorAt();
    goto LABEL_13;
  }
  *(_BYTE *)(DerivedStorage + 56) = 1;
LABEL_13:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 8));
  return v7;
}

uint64_t APEndpointStreamAudioHoseAggregateDeregisterWithParentRegistrar(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  void (*v8)(const void *, uint64_t, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  v4 = *(_QWORD *)(DerivedStorage + 8);
  if (v4)
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 8));
    if (!*(_BYTE *)(v3 + 56))
    {
      MEMORY[0x1CAA400E4](*(_QWORD *)(v3 + 8));
      return 0;
    }
  }
  else if (!*(_BYTE *)(DerivedStorage + 56))
  {
    return 0;
  }
  if (gLogCategory_APEndpointStreamAudioHoseAggregate <= 50
    && (gLogCategory_APEndpointStreamAudioHoseAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v5 = *(const void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_BYTE *)(v3 + 56) = 0;
  if (v4)
    MEMORY[0x1CAA400E4](*(_QWORD *)(v3 + 8));
  APSEndpointStreamAudioHoseRegistrarProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v7 = *(_QWORD *)(ProtocolVTable + 16);
    if (v7)
    {
      v8 = *(void (**)(const void *, uint64_t, _QWORD))(v7 + 16);
      if (v8)
        v8(v5, a1, 0);
    }
  }
  if (v5)
    CFRelease(v5);
  return 0;
}

uint64_t hoseAggregate_Invalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  v4 = *(_QWORD *)(DerivedStorage + 8);
  if (v4)
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 8));
    if (*(_BYTE *)v3)
    {
      MEMORY[0x1CAA400E4](*(_QWORD *)(v3 + 8));
      return 0;
    }
  }
  else if (*(_BYTE *)DerivedStorage)
  {
    return 0;
  }
  *(_BYTE *)v3 = 1;
  if (gLogCategory_APEndpointStreamAudioHoseAggregate <= 50
    && (gLogCategory_APEndpointStreamAudioHoseAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v5 = *(const void **)(v3 + 24);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(v3 + 24) = 0;
  }
  if (v4)
    MEMORY[0x1CAA400E4](*(_QWORD *)(v3 + 8));
  APEndpointStreamAudioHoseAggregateDeregisterWithParentRegistrar(a1);
  return 0;
}

void hoseAggregate_Finalize(uint64_t a1)
{
  _QWORD *DerivedStorage;
  const void *v3;
  NSObject *v4;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamAudioHoseAggregate <= 50
    && (gLogCategory_APEndpointStreamAudioHoseAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  hoseAggregate_Invalidate(a1);
  v3 = (const void *)DerivedStorage[4];
  if (v3)
    CFRelease(v3);
  FigSimpleMutexDestroy();
  DerivedStorage[1] = 0;
  v4 = DerivedStorage[2];
  if (v4)
    dispatch_release(v4);
  DerivedStorage[2] = 0;
}

__CFString *hoseAggregate_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  __CFString *v3;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = Mutable;
  if (Mutable)
    CFStringAppendFormat(Mutable, 0, CFSTR("<APEndpointStreamAudioHoseAggregate %p>"), a1);
  return v3;
}

uint64_t hoseAggregate_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t Int64;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, _QWORD, uint64_t, _QWORD *);
  uint64_t context;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
  {
    v8 = 4294894965;
    goto LABEL_18;
  }
  v7 = DerivedStorage;
  if (FigCFEqual())
  {
    v8 = 0;
    *a4 = CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
    return v8;
  }
  if (FigCFEqual())
  {
    context = 0;
    MEMORY[0x1CAA400CC](*(_QWORD *)(v7 + 8));
    if (CFDictionaryGetCount(*(CFDictionaryRef *)(v7 + 24)) >= 1)
    {
      context = -1;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(v7 + 24), (CFDictionaryApplierFunction)hoseAggregate_arrivalToRenderTicksApplier, &context);
    }
    MEMORY[0x1CAA400E4](*(_QWORD *)(v7 + 8));
    Int64 = CFNumberCreateInt64();
    *a4 = Int64;
    if (Int64)
      return 0;
    APSLogErrorAt();
    return 4294894966;
  }
  if (FigCFEqual())
  {
    CMBaseObject = FigTransportStreamGetCMBaseObject();
    v12 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v12)
    {
      v8 = v12(CMBaseObject, *MEMORY[0x1E0CF1FB0], a3, a4);
      if (!(_DWORD)v8)
        return v8;
    }
    else
    {
      v8 = 4294954514;
    }
LABEL_18:
    APSLogErrorAt();
    return v8;
  }
  if (gLogCategory_APEndpointStreamAudioHoseAggregate <= 50
    && (gLogCategory_APEndpointStreamAudioHoseAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return 4294954509;
}

uint64_t hoseAggregate_SetProperty()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    APSLogErrorAt();
    return 4294954511;
  }
  else
  {
    if (gLogCategory_APEndpointStreamAudioHoseAggregate <= 30
      && (gLogCategory_APEndpointStreamAudioHoseAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (FigCFEqual())
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 8));
      if (*(_BYTE *)DerivedStorage)
      {
        APSLogErrorAt();
        MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 8));
        v1 = 4294954511;
        APSLogErrorAt();
      }
      else
      {
        CFDictionaryApplyBlock();
        MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 8));
        return 0;
      }
    }
    else
    {
      return 4294954512;
    }
  }
  return v1;
}

uint64_t CMBaseObjectNotificationBarrier(uint64_t a1)
{
  _QWORD *v2;
  uint64_t (*v3)(uint64_t);

  v2 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
  if (*v2 >= 2uLL && (v3 = (uint64_t (*)(uint64_t))v2[8]) != 0)
    return v3(a1);
  else
    return 4294954514;
}

unint64_t hoseAggregate_arrivalToRenderTicksApplier(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t result;
  unint64_t v5;

  result = APSGetFBOPropertyInt64();
  v5 = *a3;
  if (*a3 >= result)
    v5 = result;
  *a3 = v5;
  return result;
}

uint64_t __hoseAggregate_setPropertyOnSubHoses_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  if (gLogCategory_APEndpointStreamAudioHoseAggregate <= 20
    && (gLogCategory_APEndpointStreamAudioHoseAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  result = CMBaseObjectGetVTable();
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v7)
    return v7(a2, v5, v4);
  return result;
}

__CFString *hoseAggregate_audioHoseProtocolCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  __CFString *v3;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = Mutable;
  if (Mutable)
    CFStringAppendFormat(Mutable, 0, CFSTR("APEndpointStreamAudioHoseAggregate <APSEndpointStreamAudioHoseProtocol> on <%p>"), a1);
  return v3;
}

uint64_t hoseAggregate_audioHoseSendAudio(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return 0;
  v6 = *(_QWORD *)(DerivedStorage + 32);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v7)
  {
    v8 = 4294954514;
LABEL_6:
    APSLogErrorAt();
    return v8;
  }
  v8 = v7(v6, a2, a3);
  if ((_DWORD)v8)
    goto LABEL_6;
  return v8;
}

uint64_t hoseAggregate_audioHoseTimeAnnounce()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    v1 = 4294954511;
  }
  else
  {
    CFDictionaryApplyBlock();
    v1 = 0;
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 8));
  return v1;
}

uint64_t hoseAggregate_audioHoseFlush(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 8));
  if (a4)
  {
    APSLogErrorAt();
    v6 = APSSignalErrorAt();
  }
  else if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    v6 = 4294954511;
  }
  else
  {
    CFDictionaryApplyBlock();
    v6 = 0;
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 8));
  return v6;
}

uint64_t hoseAggregate_audioHoseSendAudioBatch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return 0;
  v6 = *(_QWORD *)(DerivedStorage + 32);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
  if (v7)
    v8 = v7(v6, a2, a3);
  else
    v8 = FigTransportStreamSendBatchSlow();
  v9 = v8;
  if ((_DWORD)v8)
    APSLogErrorAt();
  return v9;
}

uint64_t __hoseAggregate_audioHoseTimeAnnounce_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  if (gLogCategory_APEndpointStreamAudioHoseAggregate <= 30
    && (gLogCategory_APEndpointStreamAudioHoseAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v4 = *(unsigned int *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 40);
  APSEndpointStreamAudioHoseProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v7 = *(_QWORD *)(result + 16);
    if (v7)
    {
      v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      if (v8)
        return v8(a2, v4, v5);
    }
  }
  return result;
}

uint64_t __hoseAggregate_audioHoseFlush_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, _OWORD *, _QWORD, _QWORD);
  _BYTE v8[28];
  _OWORD v9[2];

  if (gLogCategory_APEndpointStreamAudioHoseAggregate <= 30
    && (gLogCategory_APEndpointStreamAudioHoseAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v4 = *(unsigned int *)(a1 + 40);
  *(_OWORD *)v8 = *(_OWORD *)(a1 + 44);
  *(_OWORD *)&v8[12] = *(_OWORD *)(a1 + 56);
  APSEndpointStreamAudioHoseProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v6 = *(_QWORD *)(result + 16);
    if (v6)
    {
      v7 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *, _QWORD, _QWORD))(v6 + 24);
      if (v7)
      {
        v9[0] = *(_OWORD *)v8;
        *(_OWORD *)((char *)v9 + 12) = *(_OWORD *)&v8[12];
        return v7(a2, v4, v9, 0, 0);
      }
    }
  }
  return result;
}

__CFString *hoseAggregate_audioHoseRegistrarProtocolCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("APEndpointStreamAudioHoseAggregate <APSEndpointStreamAudioHoseRegistrarProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t hoseAggregate_audioHoseRegistrarRegisterHose(uint64_t a1, const void *a2, const __CFDictionary *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  const void *Value;
  const void *v10;
  CFTypeID v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v16;
  void (*v17)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    v14 = 4294894965;
LABEL_32:
    APSLogErrorAt();
    return v14;
  }
  if (!a4)
  {
    v14 = 4294894965;
    goto LABEL_32;
  }
  v8 = DerivedStorage;
  if (gLogCategory_APEndpointStreamAudioHoseAggregate <= 50
    && (gLogCategory_APEndpointStreamAudioHoseAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a3
    || (Value = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CF73A8])) == 0
    || (v10 = Value, v11 = CFGetTypeID(Value), v11 != FigTransportStreamGetTypeID()))
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(v8 + 8));
  if (*(_BYTE *)v8)
  {
    APSLogErrorAt();
    v14 = 4294954511;
  }
  else if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v8 + 24), a2))
  {
    APSLogErrorAt();
    v14 = APSSignalErrorAt();
  }
  else
  {
    v12 = APTransportStreamAggregateAddSubStream();
    if (!(_DWORD)v12)
    {
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v8 + 24), a2, v10);
      v13 = *(const void **)(v8 + 40);
      if (v13)
        v14 = (uint64_t)CFRetain(v13);
      else
        v14 = 0;
      v16 = *(_QWORD *)(v8 + 48);
      if (v16)
        v17 = *(void (**)(uint64_t))(v16 + 16);
      else
        v17 = 0;
      MEMORY[0x1CAA400E4](*(_QWORD *)(v8 + 8));
      if (v14 && v17)
        v17(v14);
      if (gLogCategory_APEndpointStreamAudioHoseAggregate <= 30
        && (gLogCategory_APEndpointStreamAudioHoseAggregate != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *a4 = &gHoseAggregateCallbacks;
      if (v14)
      {
        CFRelease((CFTypeRef)v14);
        return 0;
      }
      return v14;
    }
    v14 = v12;
    APSLogErrorAt();
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(v8 + 8));
  return v14;
}

uint64_t hoseAggregate_audioHoseRegistrarDeregisterHose(const void *a1, const void *a2, const void *a3)
{
  _BYTE *DerivedStorage;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (*DerivedStorage)
    {
      return 4294954511;
    }
    else
    {
      if (gLogCategory_APEndpointStreamAudioHoseAggregate <= 50
        && (gLogCategory_APEndpointStreamAudioHoseAggregate != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (a1)
        CFRetain(a1);
      CFRetain(a2);
      if (a3)
        CFRetain(a3);
      APSDispatchAsyncFHelper();
      return 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294894965;
  }
}

uint64_t hoseAggregate_hoseRegistrarGetMessageAtSequenceNumberCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  _QWORD *v6;
  uint64_t (*v7)(_QWORD, uint64_t, uint64_t);
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 8));
  if (!*(_BYTE *)DerivedStorage
    && *(_BYTE *)(DerivedStorage + 56)
    && (v6 = *(_QWORD **)(DerivedStorage + 48)) != 0
    && *v6)
  {
    if (gLogCategory_APEndpointStreamAudioHoseAggregate <= 20
      && (gLogCategory_APEndpointStreamAudioHoseAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v7 = **(uint64_t (***)(_QWORD, uint64_t, uint64_t))(DerivedStorage + 48);
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 8));
    v8 = v7(*(_QWORD *)(DerivedStorage + 40), a2, a3);
    if ((_DWORD)v8)
      APSLogErrorAt();
  }
  else
  {
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 8));
    return 0;
  }
  return v8;
}

uint64_t hoseAggregate_hoseRegistrarTriggerTimeAnnounceCallback()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 8));
  if (!*(_BYTE *)DerivedStorage
    && *(_BYTE *)(DerivedStorage + 56)
    && (v1 = *(_QWORD *)(DerivedStorage + 48)) != 0
    && *(_QWORD *)(v1 + 16))
  {
    if (gLogCategory_APEndpointStreamAudioHoseAggregate <= 20
      && (gLogCategory_APEndpointStreamAudioHoseAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v2 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(DerivedStorage + 48) + 16);
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 8));
    v3 = v2(*(_QWORD *)(DerivedStorage + 40));
    if ((_DWORD)v3)
      APSLogErrorAt();
  }
  else
  {
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 8));
    return 0;
  }
  return v3;
}

void hoseAggregate_audioHoseRegistrarDeregisterHoseDispatchInternal(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  const void *Value;
  CFTypeRef v5;
  const void *v6;
  const void *v7;

  v2 = *(const void **)(a1 + 8);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)DerivedStorage)
  {
LABEL_30:
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 8));
    goto LABEL_13;
  }
  if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 24), v2))
  {
    APSLogErrorAt();
    if (gLogCategory_APEndpointStreamAudioHoseAggregate <= 50
      && (gLogCategory_APEndpointStreamAudioHoseAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_30;
  }
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 24), v2);
  if (Value)
    v5 = CFRetain(Value);
  else
    v5 = 0;
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 24), v2);
  if (APTransportStreamAggregateRemoveSubStream())
  {
    APSLogErrorAt();
  }
  else if (gLogCategory_APEndpointStreamAudioHoseAggregate <= 20
         && (gLogCategory_APEndpointStreamAudioHoseAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 8));
  if (v5)
    CFRelease(v5);
LABEL_13:
  if (gLogCategory_APEndpointStreamAudioHoseAggregate <= 50
    && (gLogCategory_APEndpointStreamAudioHoseAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v6 = *(const void **)(a1 + 8);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 16);
  if (v7)
    CFRelease(v7);
}

uint64_t hoseAggregate_initClassIDOnce()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t APAudioSourceCarPlayCreate(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if (a2 && a3 && *((_DWORD *)a2 + 2) == 1819304813 && *((_DWORD *)a2 + 8) == 16)
  {
    FigEndpointAudioSourceGetClassID();
    v5 = CMDerivedObjectCreate();
    if ((_DWORD)v5)
    {
      v11 = v5;
      APSLogErrorAt();
    }
    else
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v7 = *((_QWORD *)a2 + 4);
      v8 = a2[1];
      *(_OWORD *)(DerivedStorage + 8) = *a2;
      *(_OWORD *)(DerivedStorage + 24) = v8;
      *(_QWORD *)(DerivedStorage + 40) = v7;
      v10 = *a2;
      v9 = a2[1];
      *(_QWORD *)(DerivedStorage + 80) = *((_QWORD *)a2 + 4);
      *(_OWORD *)(DerivedStorage + 48) = v10;
      *(_OWORD *)(DerivedStorage + 64) = v9;
      *(_DWORD *)(DerivedStorage + 88) = 100;
      if (gLogCategory_APAudioSourceCarPlay <= 30
        && (gLogCategory_APAudioSourceCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v11 = 0;
      *a3 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950525;
  }
  return v11;
}

void carplaysource_Finalize()
{
  _QWORD *DerivedStorage;
  OpaqueAudioConverter *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  void *v5;
  NSObject *v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (OpaqueAudioConverter *)DerivedStorage[24];
  if (v1)
  {
    AudioConverterDispose(v1);
    DerivedStorage[24] = 0;
  }
  MirroredRingBufferFree();
  v2 = (const void *)DerivedStorage[19];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[19] = 0;
  }
  v3 = (const void *)DerivedStorage[21];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[21] = 0;
  }
  v4 = (const void *)DerivedStorage[22];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[22] = 0;
  }
  v5 = (void *)DerivedStorage[18];
  if (v5)
  {
    DerivedStorage[18] = 0;
    free(v5);
  }
  v6 = DerivedStorage[25];
  if (v6)
  {
    dispatch_release(v6);
    DerivedStorage[25] = 0;
  }
}

__CFString *carplaysource_CopyDebugDescription()
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APAudioSourceCarPlay>"));
  return Mutable;
}

uint64_t carplaysource_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t UInt32;
  uint64_t v7;
  uint64_t v8;

  CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("BufferCapacityMS")))
  {
    UInt32 = FigCFNumberCreateUInt32();
    *a4 = UInt32;
    if (!UInt32)
      goto LABEL_10;
  }
  if (CFEqual(a2, CFSTR("PacketSizeLimit")))
  {
    v7 = FigCFNumberCreateUInt32();
    *a4 = v7;
    if (!v7)
      goto LABEL_10;
    return 0;
  }
  if (!CFEqual(a2, CFSTR("VBRTestingBitRate")))
    return 4294954512;
  v8 = FigCFNumberCreateUInt32();
  *a4 = v8;
  if (v8)
    return 0;
LABEL_10:
  APSLogErrorAt();
  return 4294950526;
}

uint64_t carplaysource_SetProperty(uint64_t a1, const void *a2)
{
  _DWORD *DerivedStorage;
  unsigned int v5;

  v5 = 0;
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("BufferCapacityMS")))
  {
    DerivedStorage[22] = CFGetInt64Ranged();
  }
  else if (CFEqual(a2, CFSTR("PacketSizeLimit")))
  {
    DerivedStorage[23] = CFGetInt64();
  }
  else if (CFEqual(a2, CFSTR("VBRTestingBitRate")))
  {
    DerivedStorage[24] = CFGetInt64();
  }
  else
  {
    return -12784;
  }
  return v5;
}

uint64_t carplaysource_GetOutputFormat(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  __int128 v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(DerivedStorage + 80);
  v5 = *(_OWORD *)(DerivedStorage + 64);
  *(_OWORD *)a2 = *(_OWORD *)(DerivedStorage + 48);
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = v4;
  return 0;
}

uint64_t carplaysource_SetOutputFormat(uint64_t a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD __s1[2];
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage + 48;
  if (a2)
  {
    if (!*(_DWORD *)(DerivedStorage + 56))
      goto LABEL_7;
    __s1[0] = *(_QWORD *)(DerivedStorage + 48);
    __s1[1] = 0xC6C70636DLL;
    v5 = *(_DWORD *)(DerivedStorage + 76);
    v12 = 2 * v5;
    v13 = 1;
    v14 = 2 * v5;
    v15 = v5;
    v16 = 16;
    if (!memcmp(__s1, (const void *)(DerivedStorage + 8), 0x28uLL))
    {
      v6 = 0;
      v7 = *a2;
      v8 = a2[1];
      *(_QWORD *)(v4 + 32) = *((_QWORD *)a2 + 4);
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v8;
    }
    else
    {
LABEL_7:
      APSLogErrorAt();
      return 4294950525;
    }
  }
  else
  {
    v6 = 0;
    v9 = *(_OWORD *)(DerivedStorage + 24);
    *(_OWORD *)v4 = *(_OWORD *)(DerivedStorage + 8);
    *(_OWORD *)(DerivedStorage + 64) = v9;
    *(_QWORD *)(DerivedStorage + 80) = *(_QWORD *)(DerivedStorage + 40);
  }
  return v6;
}

uint64_t carplaySource_SetDataReadyCallback(uint64_t a1, int a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD v14[8];
  int v15;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = DerivedStorage;
  if (a4 && *(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294950524;
  }
  else
  {
    v11 = MEMORY[0x1E0C809B0];
    if (*(_QWORD *)(DerivedStorage + 248))
    {
      v12 = *(NSObject **)(DerivedStorage + 200);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __carplaySource_SetDataReadyCallback_block_invoke;
      block[3] = &__block_descriptor_tmp_0;
      block[4] = v10;
      dispatch_sync(v12, block);
    }
    if (a4)
    {
      v14[0] = v11;
      v14[1] = 0x40000000;
      v14[2] = __carplaySource_SetDataReadyCallback_block_invoke_2;
      v14[3] = &__block_descriptor_tmp_11;
      v14[4] = v10;
      v14[5] = a3;
      v14[6] = a4;
      v14[7] = a5;
      v15 = a2;
      dispatch_sync(a3, v14);
    }
    return 0;
  }
}

uint64_t carplaysource_Resume(const void *a1)
{
  uint64_t DerivedStorage;
  unsigned int v3;
  unsigned int v4;
  const __CFAllocator *v5;
  uint64_t v6;
  const __CFAllocator *v7;
  uint64_t v8;
  const __CFAllocator *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  AudioConverterRef *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_32;
  if (gLogCategory_APAudioSourceCarPlay <= 30
    && (gLogCategory_APAudioSourceCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_QWORD *)(DerivedStorage + 248) && !*(_DWORD *)(DerivedStorage + 100))
  {
LABEL_32:
    APSLogErrorAt();
    v21 = 4294950524;
LABEL_36:
    carplaysource_SuspendInternal((_QWORD *)DerivedStorage);
    return v21;
  }
  v3 = *(_DWORD *)(DerivedStorage + 88) + 4;
  v4 = v3 / 5;
  v5 = CFGetAllocator(a1);
  v6 = CMSimpleQueueCreate(v5, v3 / 5, (CMSimpleQueueRef *)(DerivedStorage + 152));
  if ((_DWORD)v6)
  {
    v21 = v6;
LABEL_35:
    APSLogErrorAt();
    goto LABEL_36;
  }
  v7 = CFGetAllocator(a1);
  v8 = CMSimpleQueueCreate(v7, v3 / 5, (CMSimpleQueueRef *)(DerivedStorage + 168));
  if ((_DWORD)v8)
  {
    v21 = v8;
    goto LABEL_35;
  }
  v9 = CFGetAllocator(a1);
  v10 = CMSimpleQueueCreate(v9, v3 / 5, (CMSimpleQueueRef *)(DerivedStorage + 176));
  if ((_DWORD)v10)
  {
    v21 = v10;
    goto LABEL_35;
  }
  v11 = v4;
  *(_QWORD *)(DerivedStorage + 144) = malloc_type_calloc(v4, 0xE8uLL, 0x100004002D9DE29uLL);
  if (v3 >= 5)
  {
    v12 = 0;
    if (v11 <= 1)
      v13 = 1;
    else
      v13 = v11;
    v14 = 232 * v13;
    do
    {
      CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(DerivedStorage + 152), (const void *)(*(_QWORD *)(DerivedStorage + 144) + v12));
      v12 += 232;
    }
    while (v14 != v12);
  }
  MirroredRingBufferInit();
  v15 = (AudioConverterRef *)(DerivedStorage + 192);
  v16 = AudioConverterNew((const AudioStreamBasicDescription *)(DerivedStorage + 8), (const AudioStreamBasicDescription *)(DerivedStorage + 48), (AudioConverterRef *)(DerivedStorage + 192));
  if ((_DWORD)v16)
  {
    v21 = v16;
    goto LABEL_35;
  }
  if (*(_DWORD *)(DerivedStorage + 56) != 1819304813)
  {
    if (*(_DWORD *)(DerivedStorage + 92)
      && (v17 = AudioConverterSetProperty(*v15, 0x70616B6Cu, 4u, (const void *)(DerivedStorage + 92)), (_DWORD)v17))
    {
      v21 = v17;
    }
    else
    {
      if (!*(_DWORD *)(DerivedStorage + 96))
        goto LABEL_23;
      v18 = AudioConverterSetProperty(*v15, 0x76627262u, 4u, (const void *)(DerivedStorage + 96));
      if (!(_DWORD)v18)
        goto LABEL_23;
      v21 = v18;
    }
    goto LABEL_35;
  }
LABEL_23:
  *(_QWORD *)(DerivedStorage + 224) = 0;
  *(_DWORD *)(DerivedStorage + 232) = 0;
  *(_DWORD *)(DerivedStorage + 136) = 0;
  *(_DWORD *)(DerivedStorage + 160) = 0;
  *(_QWORD *)(DerivedStorage + 240) = 0;
  if (*(_QWORD *)(DerivedStorage + 248))
  {
    v19 = (*(_DWORD *)(DerivedStorage + 68) * *(_DWORD *)(DerivedStorage + 100));
    v20 = ((double)(1000000000 * (unint64_t)v19) / *(double *)(DerivedStorage + 48));
    *(_DWORD *)(DerivedStorage + 212) = 0;
    *(_DWORD *)(DerivedStorage + 216) = v20;
    *(_DWORD *)(DerivedStorage + 208) = v19;
    *(_QWORD *)(DerivedStorage + 272) = v19;
    *(_BYTE *)(DerivedStorage + 264) = 0;
    carplaysource_scheduleReadinessCallbackAfterTimeNs(a1, v20 + 1000000);
  }
  v21 = 0;
  *(_BYTE *)DerivedStorage = 1;
  return v21;
}

uint64_t carplaysource_Suspend()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
  {
    if (gLogCategory_APAudioSourceCarPlay <= 30
      && (gLogCategory_APAudioSourceCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (*(_DWORD *)(DerivedStorage + 232) >= 2u)
    {
      if (gLogCategory_APAudioSourceCarPlay > 50)
        goto LABEL_19;
      if (gLogCategory_APAudioSourceCarPlay != -1 || _LogCategory_Initialize())
        LogPrintF();
    }
    if (gLogCategory_APAudioSourceCarPlay <= 50)
    {
      if (gLogCategory_APAudioSourceCarPlay != -1 || _LogCategory_Initialize())
        LogPrintF();
      if (gLogCategory_APAudioSourceCarPlay <= 50
        && (gLogCategory_APAudioSourceCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
  }
LABEL_19:
  *(_BYTE *)DerivedStorage = 0;
  return 0;
}

uint64_t carplaysource_Flush()
{
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return 0;
  else
    return 4294950524;
}

uint64_t carplaysource_WritePackets(uint64_t a1, const void *a2, size_t a3, uint64_t a4, int a5, __int128 *a6)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  char *v12;
  unsigned int v13;
  size_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
    return 4294950524;
  v11 = DerivedStorage;
  if ((*((_BYTE *)a6 + 200) & 3) != 0 && *(_DWORD *)(DerivedStorage + 24) * a5 == a3)
  {
    v12 = (char *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(DerivedStorage + 152));
    if (v12)
    {
      v13 = *(_DWORD *)(v11 + 120) - *(_DWORD *)(v11 + 132) + *(_DWORD *)(v11 + 128);
      if (v13 >= a3)
        v14 = a3;
      else
        v14 = v13;
      if (v14 < a3)
        ++*(_DWORD *)(v11 + 136);
      *(_DWORD *)v12 = v14 / *(_DWORD *)(v11 + 24);
      v15 = a6[4];
      v16 = a6[5];
      v17 = a6[3];
      *(_OWORD *)(v12 + 40) = a6[2];
      *(_OWORD *)(v12 + 88) = v16;
      *(_OWORD *)(v12 + 72) = v15;
      *(_OWORD *)(v12 + 56) = v17;
      v18 = a6[8];
      v19 = a6[9];
      v20 = a6[7];
      *(_OWORD *)(v12 + 104) = a6[6];
      *(_OWORD *)(v12 + 152) = v19;
      *(_OWORD *)(v12 + 136) = v18;
      *(_OWORD *)(v12 + 120) = v20;
      v21 = a6[12];
      v22 = a6[13];
      v23 = a6[11];
      *(_OWORD *)(v12 + 168) = a6[10];
      *(_OWORD *)(v12 + 216) = v22;
      *(_OWORD *)(v12 + 200) = v21;
      *(_OWORD *)(v12 + 184) = v23;
      v24 = *a6;
      *(_OWORD *)(v12 + 24) = a6[1];
      *(_OWORD *)(v12 + 8) = v24;
      CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(v11 + 168), v12);
      v25 = *(_QWORD *)(v11 + 104);
      if (v25)
      {
        memcpy((void *)(v25 + (*(_DWORD *)(v11 + 124) & *(_DWORD *)(v11 + 132))), a2, v14);
        v26 = 0;
        *(_DWORD *)(v11 + 132) += v14;
        return v26;
      }
      APSLogErrorAt();
      v26 = 4294960591;
    }
    else
    {
      ++*(_DWORD *)(v11 + 160);
      v26 = 4294950523;
    }
  }
  else
  {
    v26 = 4294950525;
  }
  if (gLogCategory_APAudioSourceCarPlay <= 90
    && (gLogCategory_APAudioSourceCarPlay != -1 || _LogCategory_Initialize()))
  {
    mach_absolute_time();
    UpTicksToMilliseconds();
    LogPrintF();
  }
  return v26;
}

BOOL carplaysource_CanProducePackets(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return *(unsigned int *)(DerivedStorage + 68) * a2 * (unint64_t)*(unsigned int *)(DerivedStorage + 32) <= (*(_DWORD *)(DerivedStorage + 132) - *(_DWORD *)(DerivedStorage + 128));
  APSLogErrorAt();
  return 0;
}

uint64_t carplaysource_ReadPackets(const void *a1, void *a2, UInt32 a3, AudioStreamPacketDescription *a4, UInt32 a5, _QWORD *a6, UInt32 *a7, uint64_t a8)
{
  uint64_t DerivedStorage;
  uint64_t v17;
  UInt32 v18;
  uint64_t v19;
  uint64_t v21;
  UInt32 v22;
  char v23;
  double v24;
  UInt32 v25;
  const void *Head;
  unint64_t v27;
  double v28;
  double v29;
  unsigned int v30;
  BOOL v31;
  const void *v32;
  char v33;
  unint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  int64_t v39;
  UInt32 v40;
  uint64_t v41;
  uint64_t v42;
  const void *v44;
  UInt32 *v45;
  AudioStreamPacketDescription *v46;
  _QWORD *v47;
  AudioBufferList outOutputData;
  UInt32 ioOutputDataPacketSize;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = DerivedStorage;
  ioOutputDataPacketSize = a5;
  memset(&outOutputData, 0, sizeof(outOutputData));
  if (a5)
  {
    v18 = *(_DWORD *)(DerivedStorage + 76);
    outOutputData.mNumberBuffers = 1;
    outOutputData.mBuffers[0].mNumberChannels = v18;
    outOutputData.mBuffers[0].mDataByteSize = a3;
    outOutputData.mBuffers[0].mData = a2;
    v19 = AudioConverterFillComplexBuffer(*(AudioConverterRef *)(DerivedStorage + 192), (AudioConverterComplexInputDataProc)carplaysource_AudioConverterInputCallBack, (void *)DerivedStorage, &ioOutputDataPacketSize, &outOutputData, a4);
    *(_DWORD *)(v17 + 128) += *(_DWORD *)(v17 + 140);
    *(_DWORD *)(v17 + 140) = 0;
    if ((_DWORD)v19 != -16774 && (_DWORD)v19 != 0)
    {
      v21 = v19;
      if (gLogCategory_APAudioSourceCarPlay <= 60
        && (gLogCategory_APAudioSourceCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      AudioConverterReset(*(AudioConverterRef *)(v17 + 192));
      v33 = 0;
      goto LABEL_36;
    }
  }
  else
  {
    *(_DWORD *)(DerivedStorage + 128) += *(_DWORD *)(DerivedStorage + 140);
    *(_DWORD *)(DerivedStorage + 140) = 0;
  }
  if (ioOutputDataPacketSize)
  {
    v22 = *(_DWORD *)(v17 + 68) * ioOutputDataPacketSize;
    *(_DWORD *)(v17 + 212) += v22;
    if (v22)
    {
      v44 = a1;
      v45 = a7;
      v46 = a4;
      v47 = a6;
      v23 = 1;
      v24 = 0.0;
      while (1)
      {
        v25 = v22;
        Head = CMSimpleQueueGetHead(*(CMSimpleQueueRef *)(v17 + 176));
        v27 = *((_QWORD *)Head + 4);
        v28 = *((double *)Head + 19);
        v29 = *((double *)Head + 28);
        v30 = *(_DWORD *)(v17 + 188);
        if ((v23 & 1) != 0)
          v24 = v28 + (double)v30;
        v31 = v22 >= *(_DWORD *)Head - v30;
        v22 -= *(_DWORD *)Head - v30;
        if (v22 == 0 || !v31)
          break;
        v32 = Head;
        *(_DWORD *)(v17 + 188) = 0;
        if (gLogCategory_APAudioSourceCarPlay <= 10
          && (gLogCategory_APAudioSourceCarPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(v17 + 176));
        CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(v17 + 152), v32);
        v23 = 0;
        if (!v22)
          goto LABEL_26;
      }
      *(_DWORD *)(v17 + 188) = v30 + v25;
LABEL_26:
      v34 = (unint64_t)v28;
      v35 = (double)v27;
      v22 = 1;
      a4 = v46;
      a6 = v47;
      a1 = v44;
      a7 = v45;
    }
    else
    {
      v34 = 0;
      v35 = 0.0;
      v29 = 0.0;
      v24 = 0.0;
    }
    if (*(_QWORD *)(v17 + 248) && *(_DWORD *)(v17 + 212) >= *(_DWORD *)(v17 + 208))
    {
      v36 = mach_absolute_time();
      v37 = *(unsigned int *)(v17 + 208);
      *(_DWORD *)(v17 + 212) -= v37;
      if ((unint64_t)(v35 + (double)((unint64_t)v24 - v34 + v37 + *(_QWORD *)(v17 + 272)) * v29) > v36)
        v38 = UpTicksToNanoseconds() + 1000000;
      else
        v38 = 0;
      carplaysource_scheduleReadinessCallbackAfterTimeNs(a1, v38);
    }
    v21 = 0;
    goto LABEL_43;
  }
  v21 = 0;
  v33 = 1;
LABEL_36:
  if (*(_QWORD *)(v17 + 248))
  {
    if (a5)
      v39 = 1000000;
    else
      v39 = 5000000;
    carplaysource_scheduleReadinessCallbackAfterTimeNs(a1, v39);
  }
  if ((v33 & 1) != 0)
  {
    v22 = 0;
    v24 = 0.0;
LABEL_43:
    v40 = ioOutputDataPacketSize;
    *a7 = ioOutputDataPacketSize;
    if (a4)
    {
      v41 = 0;
      if (v40)
      {
        v42 = v40 - 1;
        do
          v41 += a4[v42--].mDataByteSize;
        while (v42 != -1);
      }
    }
    else
    {
      v41 = *(_DWORD *)(v17 + 64) * v40;
    }
    *a6 = v41;
    if (a8)
    {
      *(double *)a8 = v24;
      *(_OWORD *)(a8 + 8) = 0u;
      *(_OWORD *)(a8 + 24) = 0u;
      *(_OWORD *)(a8 + 40) = 0u;
      *(_DWORD *)(a8 + 56) = v22;
      *(_DWORD *)(a8 + 60) = 0;
    }
  }
  return v21;
}

void carplaysource_scheduleReadinessCallbackAfterTimeNs(const void *a1, int64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  dispatch_time_t v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD v9[5];
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 200))
  {
    v5 = DerivedStorage;
    CFRetain(a1);
    if (a2)
    {
      kdebug_trace();
      v6 = dispatch_time(0, a2);
      v7 = *(NSObject **)(v5 + 200);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __carplaysource_scheduleReadinessCallbackAfterTimeNs_block_invoke;
      block[3] = &__block_descriptor_tmp_13;
      block[4] = a1;
      dispatch_after(v6, v7, block);
    }
    else
    {
      v8 = *(NSObject **)(v5 + 200);
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 0x40000000;
      v9[2] = __carplaysource_scheduleReadinessCallbackAfterTimeNs_block_invoke_2;
      v9[3] = &__block_descriptor_tmp_14;
      v9[4] = a1;
      dispatch_async(v8, v9);
    }
  }
}

void carplaysource_SuspendInternal(_QWORD *a1)
{
  OpaqueAudioConverter *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  void *v6;

  v2 = (OpaqueAudioConverter *)a1[24];
  if (v2)
  {
    AudioConverterDispose(v2);
    a1[24] = 0;
  }
  MirroredRingBufferFree();
  v3 = (const void *)a1[19];
  if (v3)
  {
    CFRelease(v3);
    a1[19] = 0;
  }
  v4 = (const void *)a1[21];
  if (v4)
  {
    CFRelease(v4);
    a1[21] = 0;
  }
  v5 = (const void *)a1[22];
  if (v5)
  {
    CFRelease(v5);
    a1[22] = 0;
  }
  v6 = (void *)a1[18];
  if (v6)
  {
    a1[18] = 0;
    free(v6);
  }
}

void __carplaysource_scheduleReadinessCallbackAfterTimeNs_block_invoke(uint64_t a1)
{
  carplaysource_ReadinessCallback(*(_QWORD *)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void carplaysource_ReadinessCallback(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  unsigned int (*v7)(uint64_t, _QWORD);
  uint64_t v8;
  unint64_t *Head;
  double v10;
  unint64_t v11;
  unint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  if (*(_BYTE *)DerivedStorage)
  {
    if (*(_BYTE *)(DerivedStorage + 264)
      || !CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(DerivedStorage + 168))
      || (v8 = mach_absolute_time(),
          Head = (unint64_t *)CMSimpleQueueGetHead(*(CMSimpleQueueRef *)(v3 + 168)),
          *(_BYTE *)(v3 + 264) = 1,
          v10 = (double)Head[4] + (double)*(unint64_t *)(v3 + 272) * *((double *)Head + 28),
          (unint64_t)v10 <= v8))
    {
      *(_QWORD *)(v3 + 240) = mach_absolute_time();
      v4 = *(_DWORD *)(v3 + 208);
      v5 = *(_DWORD *)(v3 + 68);
      v6 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
      if (*v6 < 2uLL || (v7 = (unsigned int (*)(uint64_t, _QWORD))v6[8]) != 0 && !v7(a1, v4 / v5))
      {
        if (!*(_QWORD *)(v3 + 224))
        {
          *(_QWORD *)(v3 + 224) = *(_QWORD *)(v3 + 240);
          ++*(_DWORD *)(v3 + 232);
        }
        carplaysource_scheduleReadinessCallbackAfterTimeNs(a1, 1000000);
      }
      else
      {
        if (*(_QWORD *)(v3 + 224))
        {
          if (gLogCategory_APAudioSourceCarPlay <= 30
            && (gLogCategory_APAudioSourceCarPlay != -1 || _LogCategory_Initialize()))
          {
            UpTicksPerSecond();
            LogPrintF();
          }
          *(_QWORD *)(v3 + 224) = 0;
        }
        if (*(_QWORD *)(v3 + 248))
        {
          kdebug_trace();
          (*(void (**)(_QWORD))(v3 + 248))(*(_QWORD *)(v3 + 256));
        }
      }
    }
    else
    {
      v11 = 1000000000 * ((unint64_t)v10 - v8);
      v12 = UpTicksPerSecond();
      carplaysource_scheduleReadinessCallbackAfterTimeNs(a1, v11 / v12 + 1000000);
      *(_QWORD *)(v3 + 240) = mach_absolute_time();
    }
  }
  else
  {
    carplaysource_SuspendInternal((_QWORD *)DerivedStorage);
  }
}

void __carplaysource_scheduleReadinessCallbackAfterTimeNs_block_invoke_2(uint64_t a1)
{
  carplaysource_ReadinessCallback(*(_QWORD *)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t carplaysource_AudioConverterInputCallBack(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *Head;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t result;

  v5 = *(_DWORD *)(a5 + 132);
  v6 = *(_DWORD *)(a5 + 128) + *(_DWORD *)(a5 + 140);
  *(_DWORD *)(a5 + 128) = v6;
  *(_DWORD *)(a5 + 140) = 0;
  v7 = v5 - v6;
  v8 = *(_DWORD *)(a5 + 24);
  if (*a2 * v8 >= v7)
    v9 = v7;
  else
    v9 = *a2 * v8;
  if (!v9)
    return 4294950522;
  v11 = *(_DWORD *)(a5 + 36);
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a5 + 104) + (*(_DWORD *)(a5 + 124) & v6);
  *(_DWORD *)(a3 + 8) = v11;
  *(_DWORD *)(a3 + 12) = v9;
  *a2 = v9 / v8;
  if (v8 <= v9)
  {
    v12 = *(_DWORD *)(a5 + 32);
    if (v12 <= v9)
    {
      v13 = v9 / v12;
      while (1)
      {
        Head = CMSimpleQueueGetHead(*(CMSimpleQueueRef *)(a5 + 168));
        v15 = *(_DWORD *)(a5 + 184);
        if (!v15)
        {
          CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a5 + 176), Head);
          v15 = *(_DWORD *)(a5 + 184);
        }
        if (*Head - v15 > v13)
          break;
        CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a5 + 168));
        v16 = *(_DWORD *)(a5 + 184);
        v17 = v13 - *Head;
        *(_DWORD *)(a5 + 184) = 0;
        v13 = v17 + v16;
        if (!(v17 + v16))
          goto LABEL_14;
      }
      *(_DWORD *)(a5 + 184) = v15 + v13;
    }
  }
LABEL_14:
  result = 0;
  *(_DWORD *)(a5 + 140) = v9;
  return result;
}

uint64_t APAudioEngineVendorGetTypeID()
{
  if (gAPAudioEngineVendorInitOnce != -1)
    dispatch_once_f(&gAPAudioEngineVendorInitOnce, 0, (dispatch_function_t)_APAudioEngineVendorGetTypeID);
  return gAPAudioEngineVendorTypeID;
}

uint64_t _APAudioEngineVendorGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPAudioEngineVendorTypeID = result;
  return result;
}

uint64_t APAudioEngineVendorCreate(const void *a1, const void *a2, uint64_t (*a3)(CFAllocatorRef, _QWORD, _QWORD, _QWORD *), _QWORD *a4)
{
  uint64_t Instance;
  _QWORD *v9;
  _QWORD *v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFAllocatorRef v13;
  uint64_t v14;

  if (!a3)
    return 4294960591;
  if (gAPAudioEngineVendorInitOnce != -1)
    dispatch_once_f(&gAPAudioEngineVendorInitOnce, 0, (dispatch_function_t)_APAudioEngineVendorGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294960568;
  v9 = (_QWORD *)Instance;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  v10 = (_QWORD *)(Instance + 16);
  if (a1)
    v11 = CFRetain(a1);
  else
    v11 = 0;
  *v10 = v11;
  if (a2)
    v12 = CFRetain(a2);
  else
    v12 = 0;
  v9[3] = v12;
  v9[4] = a3;
  v13 = CFGetAllocator(v9);
  v14 = a3(v13, v9[2], v9[3], v9 + 5);
  if ((_DWORD)v14)
    CFRelease(v9);
  else
    *a4 = v9;
  return v14;
}

uint64_t APAudioEngineVendorVend(_QWORD *cf, uint64_t a2)
{
  CFAllocatorRef v4;
  uint64_t (*v6)(CFAllocatorRef, _QWORD, _QWORD, uint64_t);

  v6 = (uint64_t (*)(CFAllocatorRef, _QWORD, _QWORD, uint64_t))cf[4];
  v4 = CFGetAllocator(cf);
  return v6(v4, cf[2], cf[3], a2);
}

void _APAudioEngineVendorFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
}

uint64_t APEndpointAggregateCreateAsSystemMusicAggregate(uint64_t a1, int a2, const void *a3, _QWORD *a4)
{
  return endpointAggregate_createInternal(a1, 0, 0, 0, 0, a2 != 2, a2 == 1, 0, a3, 0, a4);
}

uint64_t endpointAggregate_createInternal(uint64_t a1, int a2, const void *a3, const void *a4, char a5, int a6, int a7, uint64_t a8, const void *a9, const __CFDictionary *a10, _QWORD *a11)
{
  _BYTE *DerivedStorage;
  _BYTE *v20;
  BOOL v21;
  char v22;
  _BYTE *v23;
  int v24;
  const void *Value;
  const void *v26;
  CFTypeRef v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  const __CFAllocator *v31;
  CFMutableDictionaryRef Mutable;
  CFMutableArrayRef v33;
  dispatch_queue_t v34;
  dispatch_queue_t v35;
  const __CFAllocator *v36;
  CFMutableDictionaryRef v37;
  const __CFAllocator *v38;
  CFMutableDictionaryRef v39;
  const __CFAllocator *v40;
  CFMutableDictionaryRef v41;
  const __CFAllocator *v42;
  CFMutableDictionaryRef v43;
  CFMutableDictionaryRef v44;
  uint64_t v46;
  char label[100];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  FigEndpointAggregateGetClassID();
  v46 = CMDerivedObjectCreate();
  if ((_DWORD)v46)
    goto LABEL_56;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v20 = DerivedStorage;
  DerivedStorage[448] = a5;
  DerivedStorage[449] = a6;
  if (a6)
    v21 = a7 == 0;
  else
    v21 = 0;
  v22 = v21;
  DerivedStorage[450] = v22;
  v23 = DerivedStorage + 456;
  if (!FigCFDictionaryGetBooleanIfPresent())
    *v23 = APSMultiPrimariesEnabled();
  if (FigCFDictionaryGetIntIfPresent())
  {
    v24 = 0;
LABEL_16:
    *((_DWORD *)v20 + 120) = v24;
    goto LABEL_17;
  }
  if (IsAppleTV())
  {
    v24 = 4;
    goto LABEL_16;
  }
  if (APSIsAPMSpeaker())
  {
    v24 = 7;
    goto LABEL_16;
  }
  *((_DWORD *)v20 + 120) = 0;
LABEL_17:
  if (a10)
  {
    Value = CFDictionaryGetValue(a10, CFSTR("aggregateIsMemberOfHTGroup"));
    *((_QWORD *)v20 + 58) = Value;
    if (Value)
      CFRetain(Value);
    v26 = CFDictionaryGetValue(a10, CFSTR("aggregateIsPersistentConnectionOverride"));
    *((_QWORD *)v20 + 59) = v26;
    if (v26)
      CFRetain(v26);
    if (a9)
      goto LABEL_23;
LABEL_25:
    v27 = 0;
    goto LABEL_26;
  }
  *((_QWORD *)v20 + 58) = 0;
  *((_QWORD *)v20 + 59) = 0;
  if (!a9)
    goto LABEL_25;
LABEL_23:
  v27 = CFRetain(a9);
LABEL_26:
  *((_QWORD *)v20 + 55) = v27;
  v28 = FigSimpleMutexCreate();
  *(_QWORD *)v20 = v28;
  if (!v28)
    goto LABEL_54;
  if (a3)
  {
    v29 = (void *)CFRetain(a3);
  }
  else
  {
    UUIDGet();
    v30 = (const char *)UUIDtoCString();
    v29 = (void *)CFStringCreateWithCString(0, v30, 0x8000100u);
  }
  *((_QWORD *)v20 + 53) = v29;
  if (!v29)
    goto LABEL_54;
  if (a7)
  {
    if (!a6)
    {
      APSLogErrorAt();
      LODWORD(v46) = APSSignalErrorAt();
      return v46;
    }
    LODWORD(v46) = APEndpointLocalCreate(a1, (_QWORD *)v20 + 51);
    if ((_DWORD)v46)
    {
LABEL_56:
      APSLogErrorAt();
      return v46;
    }
  }
  v31 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], &endpointAggregate_createInternal_subEndpointEntryDictionaryCallbacks);
  *((_QWORD *)v20 + 1) = Mutable;
  if (!Mutable)
    goto LABEL_54;
  v33 = CFArrayCreateMutable(v31, 0, MEMORY[0x1E0C9B378]);
  *((_QWORD *)v20 + 4) = v33;
  if (!v33)
    goto LABEL_54;
  SNPrintF();
  v34 = dispatch_queue_create(label, 0);
  *((_QWORD *)v20 + 48) = v34;
  if (!v34)
    goto LABEL_54;
  SNPrintF();
  v35 = dispatch_queue_create(label, 0);
  *((_QWORD *)v20 + 49) = v35;
  if (!v35)
    goto LABEL_54;
  *((_DWORD *)v20 + 100) = a2;
  *((_QWORD *)v20 + 54) = a8;
  v20[162] = *((_DWORD *)v20 + 120) == 4;
  v20[162] = FigGetCFPreferenceNumberWithDefault();
  *((_QWORD *)v20 + 45) = 0;
  v36 = CFGetAllocator(0);
  v37 = CFDictionaryCreateMutable(v36, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *((_QWORD *)v20 + 13) = v37;
  if (!v37)
    goto LABEL_54;
  v38 = CFGetAllocator(0);
  v39 = CFDictionaryCreateMutable(v38, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *((_QWORD *)v20 + 16) = v39;
  if (!v39)
    goto LABEL_54;
  v40 = CFGetAllocator(0);
  v41 = CFDictionaryCreateMutable(v40, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *((_QWORD *)v20 + 21) = v41;
  if (!v41
    || (v42 = CFGetAllocator(0),
        v43 = CFDictionaryCreateMutable(v42, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
        (*((_QWORD *)v20 + 17) = v43) == 0)
    || (v44 = CFDictionaryCreateMutable(v31, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
        (*((_QWORD *)v20 + 47) = v44) == 0))
  {
LABEL_54:
    APSLogErrorAt();
    LODWORD(v46) = -16721;
    return v46;
  }
  if (a4)
    *((_QWORD *)v20 + 52) = CFRetain(a4);
  else
    *((_QWORD *)v20 + 52) = CFStringCreateF();
  if (gLogCategory_APEndpointAggregate <= 50
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *a11 = 0;
  return v46;
}

uint64_t APEndpointAggregateCreateAsSystemRemotePool(uint64_t a1, _QWORD *a2)
{
  return endpointAggregate_createInternal(a1, 3, 0, 0, 0, 0, 0, 0, 0, 0, a2);
}

uint64_t APEndpointAggregateCreateAsCluster(uint64_t a1, const void *a2, const void *a3, char a4, uint64_t a5, const void *a6, const __CFDictionary *a7, _QWORD *a8)
{
  return endpointAggregate_createInternal(a1, 2, a2, a3, a4, 0, 0, a5, a6, a7, a8);
}

void endpointAggregate_subEndpointEntryReleaseCallback(int a1, void *a2)
{
  free(a2);
}

uint64_t endpointAggregate_subEndpointEntryCopyDescriptionCallback(uint64_t result)
{
  if (result)
  {
    result = CFStringCreateF();
    if (!result)
    {
      APSLogErrorAt();
      return 0;
    }
  }
  return result;
}

BOOL endpointAggregate_subEndpointEntryEqualCallback(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

void endpointAggregate_Finalize()
{
  _QWORD *DerivedStorage;
  NSObject *v1;
  NSObject *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage[49];
  if (v1)
  {
    dispatch_release(v1);
    DerivedStorage[49] = 0;
  }
  v2 = DerivedStorage[48];
  if (v2)
  {
    dispatch_release(v2);
    DerivedStorage[48] = 0;
  }
  FigSimpleMutexDestroy();
  if (gLogCategory_APEndpointAggregate <= 50
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v3 = (const void *)DerivedStorage[31];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[31] = 0;
  }
  v4 = (const void *)DerivedStorage[32];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[32] = 0;
  }
  v5 = (const void *)DerivedStorage[8];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[8] = 0;
  }
  v6 = (const void *)DerivedStorage[9];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[9] = 0;
  }
  v7 = (const void *)DerivedStorage[10];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[10] = 0;
  }
  v8 = (const void *)DerivedStorage[11];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[11] = 0;
  }
  v9 = (const void *)DerivedStorage[13];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[13] = 0;
  }
  v10 = (const void *)DerivedStorage[14];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[14] = 0;
  }
  v11 = (const void *)DerivedStorage[1];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[1] = 0;
  }
  v12 = (const void *)DerivedStorage[3];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[3] = 0;
  }
  v13 = (const void *)DerivedStorage[4];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[4] = 0;
  }
  v14 = (const void *)DerivedStorage[16];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[16] = 0;
  }
  v15 = (const void *)DerivedStorage[17];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[17] = 0;
  }
  v16 = (const void *)DerivedStorage[21];
  if (v16)
  {
    CFRelease(v16);
    DerivedStorage[21] = 0;
  }
  v17 = (const void *)DerivedStorage[18];
  if (v17)
  {
    CFRelease(v17);
    DerivedStorage[18] = 0;
  }
  v18 = (const void *)DerivedStorage[19];
  if (v18)
  {
    CFRelease(v18);
    DerivedStorage[19] = 0;
  }
  v19 = (const void *)DerivedStorage[42];
  if (v19)
  {
    CFRelease(v19);
    DerivedStorage[42] = 0;
  }
  v20 = (const void *)DerivedStorage[47];
  if (v20)
  {
    CFRelease(v20);
    DerivedStorage[47] = 0;
  }
  v21 = (const void *)DerivedStorage[55];
  if (v21)
  {
    CFRelease(v21);
    DerivedStorage[55] = 0;
  }
  v22 = (const void *)DerivedStorage[53];
  if (v22)
  {
    CFRelease(v22);
    DerivedStorage[53] = 0;
  }
  v23 = (const void *)DerivedStorage[51];
  if (v23)
  {
    CFRelease(v23);
    DerivedStorage[51] = 0;
  }
  v24 = (const void *)DerivedStorage[52];
  if (v24)
  {
    CFRelease(v24);
    DerivedStorage[52] = 0;
  }
  v25 = (const void *)DerivedStorage[58];
  if (v25)
  {
    CFRelease(v25);
    DerivedStorage[58] = 0;
  }
  v26 = (const void *)DerivedStorage[59];
  if (v26)
  {
    CFRelease(v26);
    DerivedStorage[59] = 0;
  }
}

CFStringRef endpointAggregate_CopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<APEndpointAggregate %p>"), a1);
}

uint64_t endpointAggregate_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  _QWORD *DerivedStorage;
  const __CFString *v9;
  const __CFString **v10;
  void *v11;
  uint64_t v12;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t valuePtr;
  void *v19;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v19 = 0;
  if (gLogCategory_APEndpointAggregate <= 10
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4348]))
    {
      v9 = (const __CFString *)DerivedStorage[52];
LABEL_15:
      v11 = (void *)CFRetain(v9);
LABEL_16:
      v12 = 0;
      *a4 = v11;
      return v12;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4388]))
    {
      if (DerivedStorage[8])
        v9 = (const __CFString *)DerivedStorage[8];
      else
        v9 = (const __CFString *)*MEMORY[0x1E0CA4098];
      goto LABEL_15;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4468]))
    {
      v10 = (const __CFString **)MEMORY[0x1E0CA4968];
LABEL_14:
      v9 = *v10;
      goto LABEL_15;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43D8]))
    {
      v14 = *((_DWORD *)DerivedStorage + 100);
      if (v14 == 3)
      {
        v10 = (const __CFString **)MEMORY[0x1E0CA48B8];
      }
      else if (v14 == 2)
      {
        v10 = (const __CFString **)MEMORY[0x1E0CA48A8];
      }
      else
      {
        if (v14)
        {
          v9 = CFSTR("Unknown");
          goto LABEL_15;
        }
        v10 = (const __CFString **)MEMORY[0x1E0CA48B0];
      }
      goto LABEL_14;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4130]))
    {
LABEL_24:
      v10 = (const __CFString **)MEMORY[0x1E0C9AE40];
      goto LABEL_14;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42D8]))
    {
      v10 = (const __CFString **)MEMORY[0x1E0C9AE50];
      if (*((_DWORD *)DerivedStorage + 100) != 3)
        v10 = (const __CFString **)MEMORY[0x1E0C9AE40];
      goto LABEL_14;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43E0]))
    {
      v15 = *((_DWORD *)DerivedStorage + 100);
      if (v15 == 3)
      {
        valuePtr = 16;
      }
      else
      {
        valuePtr = 10;
        v16 = 14;
        if (v15 == 2 && *((_DWORD *)DerivedStorage + 120) == 4)
        {
          if (*((_BYTE *)DerivedStorage + 448))
          {
            valuePtr = 42;
            v16 = 46;
          }
          else
          {
            v16 = 14;
          }
        }
        v17 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 480);
        if (v17 > 0xD || ((1 << v17) & 0x2090) == 0)
          valuePtr = v16;
      }
      v11 = CFNumberCreate(a3, kCFNumberSInt64Type, &valuePtr);
      if (v11)
        goto LABEL_16;
      APSLogErrorAt();
      v12 = 4294950575;
    }
    else
    {
      if (CFEqual(a2, CFSTR("SupportsMuteControl")))
        goto LABEL_24;
      MEMORY[0x1CAA400CC](*DerivedStorage);
      v12 = endpointAggregate_copyPropertyInternal(a1, a2, a3, &v19);
      MEMORY[0x1CAA400E4](*DerivedStorage);
      if (!(_DWORD)v12)
      {
        v11 = v19;
        goto LABEL_16;
      }
      if ((_DWORD)v12 == -12784)
        return v12;
    }
  }
  else
  {
    APSLogErrorAt();
    v12 = 4294950536;
  }
  if (gLogCategory_APEndpointAggregate <= 90
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v12;
}

uint64_t endpointAggregate_SetProperty(const void *a1, const void *a2, const void *a3)
{
  _QWORD *DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  CFTypeID v9;
  uint64_t IsEnabledOrDisabled;
  int Value;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointAggregate <= 50
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*DerivedStorage);
  v7 = CMBaseObjectGetDerivedStorage();
  if (!a2)
    goto LABEL_39;
  v8 = v7;
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA37B8]))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44A0]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44B8]))
    {
      if (*(_DWORD *)(v8 + 400) != 3)
      {
        IsEnabledOrDisabled = endpointAggregate_setPropertyOnAllSubEndpoints((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
        goto LABEL_25;
      }
    }
    else
    {
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42B8])
        && !CFEqual(a2, CFSTR("IsHALMuted"))
        && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42C0])
        && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42C8]))
      {
        if (gLogCategory_APEndpointAggregate <= 30
          && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        IsEnabledOrDisabled = 4294954512;
        goto LABEL_25;
      }
      if (*(_DWORD *)(v8 + 400) != 3)
      {
        IsEnabledOrDisabled = endpointAggregate_setPropertyOnAllSubEndpoints((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
        if (!(_DWORD)IsEnabledOrDisabled)
          goto LABEL_25;
        goto LABEL_35;
      }
    }
LABEL_44:
    APSLogErrorAt();
    IsEnabledOrDisabled = 4294950570;
    goto LABEL_25;
  }
  if (!a3 || (v9 = CFGetTypeID(a3), v9 != CFBooleanGetTypeID()))
  {
LABEL_39:
    APSLogErrorAt();
    IsEnabledOrDisabled = 4294950576;
    goto LABEL_25;
  }
  if (*(_DWORD *)(v8 + 400) == 3)
    goto LABEL_44;
  if (!*(_BYTE *)(v8 + 449))
  {
    APSLogErrorAt();
    IsEnabledOrDisabled = 4294954509;
    goto LABEL_25;
  }
  if (endpointAggregate_isATVInHTGroup())
  {
    if (gLogCategory_APEndpointAggregate <= 50
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_24;
  }
  Value = CFBooleanGetValue((CFBooleanRef)a3);
  if (*(unsigned __int8 *)(v8 + 160) == Value)
  {
LABEL_24:
    IsEnabledOrDisabled = 0;
    goto LABEL_25;
  }
  *(_BYTE *)(v8 + 160) = Value;
  if (gLogCategory_APEndpointAggregate <= 50
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  IsEnabledOrDisabled = endpointAggregate_ensureLocalPlaybackIsEnabledOrDisabled(a1);
  if ((_DWORD)IsEnabledOrDisabled)
LABEL_35:
    APSLogErrorAt();
LABEL_25:
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return IsEnabledOrDisabled;
}

uint64_t endpointAggregate_copyPropertyInternal(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const void *v10;
  const void **v11;
  const void **v12;
  BOOL v13;
  const void *v14;
  unsigned int v16;
  int v18;
  const void **v19;
  BOOL v20;
  uint64_t v21;
  __CFDictionary *Int64;
  const void *v23;
  const __CFArray *v24;
  const __CFArray *v25;
  char v26;
  CFIndex v27;
  const void **v28;
  uint64_t valuePtr;
  __CFArray *v30;
  unsigned int EnabledFeatures;

  EnabledFeatures = 0;
  v30 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    APSLogErrorAt();
    return -16760;
  }
  v9 = DerivedStorage;
  v10 = (const void *)*MEMORY[0x1E0CA4260];
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4260])
    || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4258])
    || !*(_BYTE *)(v9 + 44))
  {
    if (CFEqual(a2, v10))
    {
      v11 = (const void **)MEMORY[0x1E0C9AE50];
      v12 = (const void **)MEMORY[0x1E0C9AE40];
      v13 = *(_DWORD *)(v9 + 40) == 2;
LABEL_7:
      if (!v13)
        v11 = v12;
      goto LABEL_9;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40A8]))
    {
      valuePtr = 0;
      if (*(_DWORD *)(v9 + 40) == 2)
        valuePtr = *(_QWORD *)(v9 + 56);
      v30 = CFNumberCreate(a3, kCFNumberSInt64Type, &valuePtr);
      if (v30)
      {
LABEL_16:
        if (!EnabledFeatures)
        {
LABEL_17:
          *a4 = v30;
          return EnabledFeatures;
        }
LABEL_36:
        APSLogErrorAt();
        return EnabledFeatures;
      }
      goto LABEL_47;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4258]))
    {
      v14 = *(const void **)(v9 + 424);
      goto LABEL_10;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA37B8]))
    {
      if (!*(_BYTE *)(v9 + 449))
      {
        APSLogErrorAt();
        return APSSignalErrorAt();
      }
      v11 = (const void **)MEMORY[0x1E0C9AE40];
      v12 = (const void **)MEMORY[0x1E0C9AE50];
      v13 = *(_BYTE *)(v9 + 160) == 0;
      goto LABEL_7;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4398]))
    {
      v14 = *(const void **)(v9 + 72);
      if (!v14)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (CFEqual(a2, CFSTR("EnabledFeatures")))
    {
      valuePtr = 0;
      EnabledFeatures = APEndpointGetEnabledFeatures(*(_QWORD *)(v9 + 128), *(_QWORD *)(v9 + 152) != 0, &valuePtr);
      if (EnabledFeatures)
        goto LABEL_36;
      v30 = CFNumberCreate(a3, kCFNumberSInt64Type, &valuePtr);
      if (v30)
        goto LABEL_16;
LABEL_47:
      APSLogErrorAt();
      return -16721;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43C8]))
    {
      v16 = endpointAggregate_copyStreams(a1, a3, &v30);
      goto LABEL_35;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA43D0]))
    {
      v16 = endpointAggregate_copyExposedSubEndpoints(a1, &v30);
      goto LABEL_35;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40E0]))
    {
      v11 = (const void **)MEMORY[0x1E0C9AE50];
      v18 = *(unsigned __int8 *)(v9 + 344);
LABEL_43:
      v19 = (const void **)MEMORY[0x1E0C9AE40];
      v20 = v18 == 0;
      goto LABEL_44;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44A8]))
    {
      v11 = (const void **)MEMORY[0x1E0C9AE50];
      v18 = *(unsigned __int8 *)(v9 + 352);
      goto LABEL_43;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44B0]))
    {
      v30 = CFNumberCreate(a3, kCFNumberSInt64Type, (const void *)(v9 + 360));
      if (v30)
        goto LABEL_16;
      goto LABEL_47;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4340]))
    {
      v11 = (const void **)MEMORY[0x1E0C9AE50];
      v18 = *(unsigned __int8 *)(v9 + 368);
      goto LABEL_43;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44B8]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA44A0]))
    {
      v16 = endpointAggregate_copyPropertyFromAnySubEndpoint(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)&v30);
      goto LABEL_35;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42B8])
      || CFEqual(a2, CFSTR("IsHALMuted"))
      || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42C0])
      || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42C8]))
    {
      LOBYTE(valuePtr) = 0;
      EnabledFeatures = endpointAggregate_isMuted(a1, (uint64_t)a2, (BOOL *)&valuePtr);
      if (EnabledFeatures)
        goto LABEL_36;
      v11 = (const void **)MEMORY[0x1E0C9AE50];
      v18 = valuePtr;
      goto LABEL_43;
    }
    if (CFEqual(a2, CFSTR("EndpointShowInfo")))
    {
      v16 = endpointAggregate_copyShowInfoDict(a1, &v30);
LABEL_35:
      EnabledFeatures = v16;
      if (!v16)
        goto LABEL_17;
      goto LABEL_36;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40C8])
      || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40D8])
      || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40E8])
      || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4408])
      || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4410]))
    {
      v14 = *(const void **)(v9 + 152);
      if (v14)
      {
LABEL_77:
        v14 = (const void *)endpointAggregate_copySubEndpointProperty((uint64_t)v14, (uint64_t)a3, (uint64_t)a2, (int *)&EnabledFeatures);
        goto LABEL_11;
      }
      v11 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_9:
      v14 = *v11;
LABEL_10:
      v14 = CFRetain(v14);
LABEL_11:
      v30 = (__CFArray *)v14;
      goto LABEL_16;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA41D8])
      || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA41F8])
      || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA41E8])
      || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA41F0])
      || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4208]))
    {
      v14 = *(const void **)(v9 + 152);
      if (v14)
        goto LABEL_77;
      v11 = (const void **)MEMORY[0x1E0C9AE50];
      goto LABEL_9;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA40F0]))
    {
      v21 = *(_QWORD *)(v9 + 152);
      if (v21)
        Int64 = (__CFDictionary *)endpointAggregate_copySubEndpointProperty(v21, (uint64_t)a3, (uint64_t)a2, (int *)&EnabledFeatures);
      else
        Int64 = (__CFDictionary *)CFNumberCreateInt64();
      v30 = Int64;
      if (Int64)
        goto LABEL_16;
      goto LABEL_47;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA41E0]))
    {
      v14 = *(const void **)(v9 + 152);
      if (!v14)
        goto LABEL_11;
      goto LABEL_77;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA42E0]))
    {
      v11 = (const void **)MEMORY[0x1E0C9AE50];
      v19 = (const void **)MEMORY[0x1E0C9AE40];
      v20 = *(_QWORD *)(v9 + 152) == 0;
LABEL_44:
      if (v20)
        v11 = v19;
      goto LABEL_9;
    }
    if (CFEqual(a2, CFSTR("IsEngaged")))
    {
      v11 = (const void **)MEMORY[0x1E0C9AE50];
      v18 = *(unsigned __int8 *)(v9 + 45);
      goto LABEL_43;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4470]))
    {
      v14 = *(const void **)(v9 + 144);
      if (!v14)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4228]))
    {
      v23 = *(const void **)(v9 + 88);
      if (v23)
      {
        v30 = (__CFArray *)CFRetain(v23);
        if (v30)
          goto LABEL_16;
      }
      APSLogErrorAt();
      return -17606;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4178]))
    {
      if (*(_DWORD *)(v9 + 400) == 2)
      {
        EnabledFeatures = endpointAggregate_copyClusterActivatedCompositionAsArray(a1, (uint64_t *)&v30);
        if (!EnabledFeatures)
          goto LABEL_17;
        goto LABEL_36;
      }
      return -16726;
    }
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA41A8]))
      return -12784;
    v24 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
    if (v24)
    {
      v25 = v24;
      if (CFArrayGetCount(v24) < 1)
      {
        CFRelease(v25);
      }
      else
      {
        v26 = 0;
        v27 = 0;
        do
        {
          CFArrayGetValueAtIndex(v25, v27);
          v26 |= APSGetFBOPropertyInt64() != 0;
          ++v27;
        }
        while (v27 < CFArrayGetCount(v25));
        CFRelease(v25);
        if (v26)
        {
          v28 = (const void **)MEMORY[0x1E0C9AE50];
          goto LABEL_121;
        }
      }
    }
    v28 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_121:
    v14 = *v28;
    if (!*v28)
      goto LABEL_11;
    goto LABEL_10;
  }
  APSLogErrorAt();
  EnabledFeatures = -72255;
  if (gLogCategory_APEndpointAggregate <= 30
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return EnabledFeatures;
}

uint64_t endpointAggregate_copyStreams(uint64_t a1, const __CFAllocator *a2, __CFArray **a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFMutableArrayRef Mutable;
  __CFArray *v9;
  const __CFArray *v10;
  const __CFArray *v11;
  uint64_t v12;
  CFRange v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  v7 = DerivedStorage;
  Mutable = CFArrayCreateMutable(a2, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    APSLogErrorAt();
    return 4294950575;
  }
  v9 = Mutable;
  v10 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
  v11 = v10;
  if (v10)
  {
    v15.length = CFArrayGetCount(v10);
    v15.location = 0;
    CFArrayAppendArray(v9, v11, v15);
  }
  v12 = *(_QWORD *)(v7 + 48);
  if (v12)
  {
    if ((v12 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    if (endpointAggregate_getFirstSubEndpointActivatedForFeatures(a1, 1))
      FigEndpointCopyFirstStreamOfType();
    goto LABEL_11;
  }
  if ((*(_QWORD *)(v7 + 56) & 1) != 0)
    goto LABEL_9;
LABEL_11:
  *a3 = v9;
  if (v11)
    CFRelease(v11);
  return 0;
}

uint64_t endpointAggregate_copyExposedSubEndpoints(uint64_t a1, __CFArray **a2)
{
  uint64_t DerivedStorage;
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex Count;
  const void *v7;
  CFIndex v8;
  __CFArray *MutableCopy;
  CFIndex FirstIndexOfValue;
  CFRange v12;
  CFRange v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  if (v4)
  {
    v5 = v4;
    Count = CFArrayGetCount(v4);
    v7 = *(const void **)(DerivedStorage + 408);
    if (v7 && (v8 = Count, v12.location = 0, v12.length = Count, CFArrayContainsValue(v5, v12, v7)))
    {
      MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v5);
      v13.location = 0;
      v13.length = v8;
      FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v5, v13, *(const void **)(DerivedStorage + 408));
      if (gLogCategory_APEndpointAggregate <= 30
        && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFArrayRemoveValueAtIndex(MutableCopy, FirstIndexOfValue);
      if (!a2)
        goto LABEL_11;
    }
    else
    {
      MutableCopy = (__CFArray *)CFRetain(v5);
      if (!a2)
      {
LABEL_11:
        if (MutableCopy)
          CFRelease(MutableCopy);
        goto LABEL_13;
      }
    }
    *a2 = MutableCopy;
LABEL_13:
    CFRelease(v5);
    return 0;
  }
  APSLogErrorAt();
  return 4294949690;
}

uint64_t endpointAggregate_copyPropertyFromAnySubEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  const __CFArray *v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex i;
  uint64_t CMBaseObject;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointAggregate <= 30
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v8 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  v9 = v8;
  if (*(_DWORD *)(DerivedStorage + 40) != 2)
  {
    APSLogErrorAt();
    v15 = 4294895039;
    if (!v9)
      return v15;
    goto LABEL_17;
  }
  if (!v8)
  {
    APSLogErrorAt();
    return 4294950575;
  }
  Count = CFArrayGetCount(v8);
  if (Count < 1)
  {
    v15 = 0;
LABEL_17:
    CFRelease(v9);
    return v15;
  }
  v11 = Count;
  for (i = 0; i != v11; ++i)
  {
    CFArrayGetValueAtIndex(v9, i);
    CMBaseObject = FigEndpointGetCMBaseObject();
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v14)
    {
      v15 = v14(CMBaseObject, a2, a3, a4);
      if (!(_DWORD)v15)
        break;
    }
    else
    {
      v15 = 4294954514;
    }
  }
  if (v9)
    goto LABEL_17;
  return v15;
}

uint64_t endpointAggregate_isMuted(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t DerivedStorage;
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  uint64_t v10;
  BOOL v11;
  int v12;
  unsigned int v14;

  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointAggregate <= 30
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v5 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  v6 = v5;
  if (*(_DWORD *)(DerivedStorage + 40) != 2)
  {
    APSLogErrorAt();
    v14 = -72257;
    if (!v6)
      return v14;
    goto LABEL_19;
  }
  if (!v5)
  {
    APSLogErrorAt();
    return -16721;
  }
  if (!a3)
  {
    APSLogErrorAt();
    v14 = -16720;
LABEL_19:
    CFRelease(v6);
    return v14;
  }
  Count = CFArrayGetCount(v5);
  if (Count < 1)
  {
    v11 = 0;
  }
  else
  {
    v8 = Count;
    for (i = 0; i != v8; ++i)
    {
      CFArrayGetValueAtIndex(v6, i);
      v10 = APSGetFBOPropertyInt64();
      v11 = v10 != 0;
      if (v10)
        v12 = 0;
      else
        v12 = 11;
      if (v12)
        break;
    }
  }
  *a3 = v11;
  if (v6)
    goto LABEL_19;
  return v14;
}

uint64_t endpointAggregate_copyShowInfoDict(uint64_t a1, __CFDictionary **a2)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const __CFArray *v11;
  const __CFArray *v12;
  uint64_t Count;
  uint64_t v14;
  CFMutableArrayRef v15;
  __CFArray *v16;
  CFIndex i;
  uint64_t CMBaseObject;
  void (*v19)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  uint64_t v20;
  void *value[2];
  __int16 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v23 = 0;
  value[1] = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    return 0;
  }
  v6 = Mutable;
  SNPrintF();
  CFDictionarySetCString();
  v7 = (const void *)*MEMORY[0x1E0C9AE50];
  v8 = (const void *)*MEMORY[0x1E0C9AE40];
  if (*(_DWORD *)(DerivedStorage + 40) == 2)
    v9 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v9 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(v6, CFSTR("Activated"), v9);
  CFDictionarySetValue(v6, CFSTR("Name"), CFSTR("APEndpointAggregate"));
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  if (*(_DWORD *)(DerivedStorage + 400) == 3)
    v10 = v7;
  else
    v10 = v8;
  CFDictionarySetValue(v6, CFSTR("IsRemoteControlEndpoint"), v10);
  v11 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  if (!v11)
  {
    v20 = 0;
    *a2 = v6;
    return v20;
  }
  v12 = v11;
  Count = CFArrayGetCount(v11);
  if (Count > 0)
  {
    v14 = Count;
    v15 = CFArrayCreateMutable(v4, Count, MEMORY[0x1E0C9B378]);
    if (!v15)
    {
      APSLogErrorAt();
      CFRelease(v6);
      v20 = 4294950575;
      goto LABEL_20;
    }
    v16 = v15;
    for (i = 0; i != v14; ++i)
    {
      value[0] = 0;
      CFArrayGetValueAtIndex(v12, i);
      CMBaseObject = FigEndpointGetCMBaseObject();
      v19 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
      if (v19)
        v19(CMBaseObject, CFSTR("EndpointShowInfo"), v4, value);
      if (value[0])
      {
        CFArrayAppendValue(v16, value[0]);
        if (value[0])
          CFRelease(value[0]);
      }
    }
    CFDictionarySetValue(v6, CFSTR("SubEndpointShowInfoDicts"), v16);
    CFRelease(v16);
  }
  v20 = 0;
  *a2 = v6;
LABEL_20:
  CFRelease(v12);
  return v20;
}

uint64_t endpointAggregate_copySubEndpointProperty(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t *);
  int v9;
  uint64_t v11;

  v11 = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v8)
  {
    v9 = -12782;
LABEL_7:
    APSLogErrorAt();
    if (!a4)
      return v11;
    goto LABEL_4;
  }
  v9 = v8(CMBaseObject, a3, a2, &v11);
  if (v9)
    goto LABEL_7;
  if (a4)
LABEL_4:
    *a4 = v9;
  return v11;
}

uint64_t endpointAggregate_copyClusterActivatedCompositionAsArray(uint64_t a1, uint64_t *a2)
{
  CFMutableDictionaryRef Mutable;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 400) != 2)
  {
    Mutable = 0;
    v7 = v10;
    v8 = -16726;
LABEL_20:
    *((_DWORD *)v7 + 6) = v8;
    goto LABEL_9;
  }
  if (gLogCategory_APEndpointAggregate <= 30
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    goto LABEL_19;
  CFDictionaryApplyBlock();
  if (*((_DWORD *)v10 + 6))
  {
    APSLogErrorAt();
    goto LABEL_9;
  }
  v4 = FigCFDictionaryCopyArrayOfValues();
  *a2 = v4;
  if (!v4)
  {
LABEL_19:
    APSLogErrorAt();
    v7 = v10;
    v8 = -16721;
    goto LABEL_20;
  }
LABEL_9:
  if (gLogCategory_APEndpointAggregate <= 30
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (Mutable)
    CFRelease(Mutable);
  v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

const void *endpointAggregate_getFirstSubEndpointActivatedForFeatures(uint64_t a1, uint64_t a2)
{
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const void *ValueAtIndex;

  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 40) == 2)
  {
    v3 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
    Count = CFArrayGetCount(v3);
    if (Count < 1)
    {
LABEL_6:
      ValueAtIndex = 0;
    }
    else
    {
      v5 = Count;
      v6 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v3, v6);
        if ((a2 & ~APSGetFBOPropertyInt64()) == 0)
          break;
        if (v5 == ++v6)
          goto LABEL_6;
      }
    }
    if (v3)
      CFRelease(v3);
  }
  else
  {
    APSLogErrorAt();
    return 0;
  }
  return ValueAtIndex;
}

void __endpointAggregate_copyClusterActivatedCompositionAsArray_block_invoke(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  const void *Value;
  const void *v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  uint64_t Int64;
  uint64_t v10;
  BOOL v11;
  const void *v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  CFTypeID v16;
  CFTypeID v18;
  const void *v19;
  __CFDictionary *MutableCopy;
  __CFDictionary *v21;

  Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA4458]);
  if (Value)
  {
    v6 = Value;
    v7 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), Value);
    if (v7)
    {
      v8 = v7;
      Int64 = CFDictionaryGetInt64();
      v10 = CFDictionaryGetInt64();
      if (Int64)
        v11 = 1;
      else
        v11 = v10 == 0;
      if (!v11)
      {
        FigCFDictionarySetValueFromKeyInDict();
        FigCFDictionarySetValueFromKeyInDict();
        if (gLogCategory_APEndpointAggregate > 30
          || gLogCategory_APEndpointAggregate == -1 && !_LogCategory_Initialize())
        {
          return;
        }
LABEL_28:
        LogPrintF();
        return;
      }
      if ((Int64 != 0) == (v10 != 0))
      {
        v12 = (const void *)*MEMORY[0x1E0CA3870];
        v13 = (const __CFString *)CFDictionaryGetValue(v8, (const void *)*MEMORY[0x1E0CA3870]);
        v14 = (const __CFString *)CFDictionaryGetValue(theDict, v12);
        if (v13)
        {
          v15 = v14;
          v16 = CFGetTypeID(v13);
          if (v16 == CFStringGetTypeID() && v15 != 0)
          {
            v18 = CFGetTypeID(v15);
            if (v18 == CFStringGetTypeID() && CFStringCompare(v13, v15, 1uLL) == kCFCompareGreaterThan)
            {
              CFDictionarySetValue(v8, v12, v15);
              if (gLogCategory_APEndpointAggregate <= 30
                && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
              {
                goto LABEL_28;
              }
            }
          }
        }
      }
    }
    else
    {
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
      if (MutableCopy)
      {
        v21 = MutableCopy;
        CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA3878], v6);
        FigCFDictionarySetValueFromKeyInDict();
        FigCFDictionarySetValueFromKeyInDict();
        if (gLogCategory_APEndpointAggregate <= 30
          && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v6, v21);
        CFRelease(v21);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -16721;
      }
    }
  }
  else
  {
    v19 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA3878]);
    if (gLogCategory_APEndpointAggregate <= 30
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v19, theDict);
  }
}

uint64_t endpointAggregate_isATVInHTGroup()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 464);
  if (!v1)
    return APSIsATVInHTGroup();
  if (v1 == *MEMORY[0x1E0C9AE50])
    return *(_DWORD *)(DerivedStorage + 480) == 4;
  return 0;
}

uint64_t endpointAggregate_ensureLocalPlaybackIsEnabledOrDisabled(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  _BOOL4 v4;
  int v5;
  int v6;
  const __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 449))
    return 0;
  v3 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 160) && *(_DWORD *)(DerivedStorage + 40) == 2)
  {
    if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 162))
      v4 = endpointAggregate_getSubEndpointCount((uint64_t)a1, 1) > 0;
    else
      v4 = 1;
    if (gLogCategory_APEndpointAggregate <= 30
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  if (*(_BYTE *)(v3 + 161))
    v6 = 1;
  else
    v6 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24) && APSGetFBOPropertyInt64() != 0;
  if (v6 == v5)
    return 0;
  if (!*(_QWORD *)(v3 + 408))
  {
    v9 = CMBaseObjectGetDerivedStorage();
    if (gLogCategory_APEndpointAggregate <= 50
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v10 = APEndpointGetAllAudioFeatures(*(_QWORD *)(v9 + 56)) & 0xFFFFFFFFFFFFFFDFLL;
    if (v5)
    {
      endpointAggregate_handleSubEndpointFeatureActivationStateChanged(a1, 0, 1, v10);
      endpointAggregate_setEnableLocalPlaybackOnAggregateStreams((uint64_t)a1, 1, v10);
    }
    else
    {
      endpointAggregate_setEnableLocalPlaybackOnAggregateStreams((uint64_t)a1, 0, v10);
      endpointAggregate_handleSubEndpointFeatureActivationStateChanged(a1, 0, 0, v10);
    }
    *(_BYTE *)(v9 + 161) = v5;
    endpointAggregate_updateIsVolumeControlSupported();
    return 0;
  }
  if (!a1 || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
    a1 = 0;
  v7 = *(const __CFString **)(v3 + 408);
  if (v5)
  {
    v8 = endpointAggregate_addEndpointInternal((uint64_t)a1, v7, 0, 0, 0);
    if ((_DWORD)v8)
      goto LABEL_29;
  }
  else
  {
    v8 = endpointAggregate_removeEndpointInternal((uint64_t)a1, v7, 0, 0);
    if ((_DWORD)v8)
LABEL_29:
      APSLogErrorAt();
  }
  return v8;
}

uint64_t endpointAggregate_setPropertyOnAllSubEndpoints(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  const __CFArray *v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex i;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  v7 = v6;
  if (*(_DWORD *)(DerivedStorage + 40) != 2)
  {
    APSLogErrorAt();
    v12 = 4294895039;
    if (!v7)
      return v12;
    goto LABEL_15;
  }
  if (!v6)
  {
    APSLogErrorAt();
    return 4294950575;
  }
  Count = CFArrayGetCount(v6);
  if (gLogCategory_APEndpointAggregate <= 50
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (Count < 1)
  {
    v12 = 0;
LABEL_15:
    CFRelease(v7);
    return v12;
  }
  for (i = 0; i != Count; ++i)
  {
    CFArrayGetValueAtIndex(v7, i);
    CMBaseObject = FigEndpointGetCMBaseObject();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v11)
      v11(CMBaseObject, a2, a3);
  }
  v12 = 0;
  if (v7)
    goto LABEL_15;
  return v12;
}

uint64_t endpointAggregate_addEndpointInternal(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const void *FigEndpoint;
  uint64_t DerivedStorage;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  CFIndex SubEndpointCount;
  const void *v18;
  CFTypeRef v19;
  uint64_t v20;
  _QWORD *Value;
  int v22;
  int v23;
  void (*v24)(const void *, uint64_t);
  void (*v25)(const void *, uint64_t);
  __CFDictionary *MutableCopy;
  const void *v27;
  const void *v28;
  const void *v29;
  uint64_t SubEndpointFeaturesToActivate;
  void (*v31)(const void *, uint64_t, __CFDictionary *, _QWORD, _QWORD *);
  uint64_t v33;
  unsigned int v34;
  CFTypeRef cf;

  FigEndpoint = (const void *)FigEndpointAggregateGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  APSGetFBOPropertyInt64();
  v11 = *(_QWORD *)(DerivedStorage + 48);
  if (!v11)
    v11 = *(_QWORD *)(DerivedStorage + 56);
  if (gLogCategory_APEndpointAggregate <= 50
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v12 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A004044E3744DuLL);
  *v12 = CFRetain(FigEndpoint);
  v12[1] = *(_QWORD *)(DerivedStorage + 120);
  v12[3] = a5;
  v12[4] = a4;
  v33 = a4;
  if (*(_DWORD *)(DerivedStorage + 40) == 2)
  {
    v13 = APSGetFBOPropertyInt64();
    v14 = APSGetFBOPropertyInt64();
    APSGetFBOPropertyInt64();
    if (*(_DWORD *)(DerivedStorage + 400) == 3)
    {
      if (!v14)
      {
        v15 = -72258;
LABEL_78:
        APSLogErrorAt();
        MutableCopy = 0;
        v27 = 0;
        goto LABEL_79;
      }
    }
    else
    {
      if (!v13)
      {
        v15 = -72258;
        goto LABEL_78;
      }
      if (v14)
      {
        v15 = -72258;
        goto LABEL_78;
      }
      v16 = CMBaseObjectGetDerivedStorage();
      cf = 0;
      SubEndpointCount = endpointAggregate_getSubEndpointCount((uint64_t)FigEndpoint, 1);
      if (*(_BYTE *)(v16 + 96) && !SubEndpointCount)
      {
        if (endpointAggregate_generateGroupID((uint64_t)FigEndpoint, (uint64_t *)&cf))
        {
          APSLogErrorAt();
        }
        else if (!FigCFEqual())
        {
          if (gLogCategory_APEndpointAggregate <= 50
            && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v18 = *(const void **)(v16 + 88);
          v19 = cf;
          *(_QWORD *)(v16 + 88) = cf;
          if (v19)
            CFRetain(v19);
          if (v18)
            CFRelease(v18);
          CMNotificationCenterGetDefaultLocalCenter();
          FigDispatchAsyncPostNotification();
        }
      }
      if (cf)
        CFRelease(cf);
    }
    FigEndpointAggregateGetFigEndpoint();
    v20 = CMBaseObjectGetDerivedStorage();
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v20 + 8), a2))
    {
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v20 + 8), a2);
    }
    else
    {
      if (*(_DWORD *)(v20 + 400) != 3 && APSGetFBOPropertyInt64())
      {
        if (*(_QWORD *)(v20 + 24))
        {
          APSLogErrorAt();
          v34 = -72258;
          APSLogErrorAt();
          v27 = 0;
          MutableCopy = 0;
          goto LABEL_64;
        }
        *(_QWORD *)(v20 + 24) = a2;
        if (a2)
          CFRetain(a2);
      }
      Value = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040F7F8B94BuLL);
      v23 = *(_DWORD *)(v20 + 16) + 1;
      *(_DWORD *)(v20 + 16) = v23;
      *(_DWORD *)Value = v23;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v20 + 8), a2, Value);
      if (gLogCategory_APEndpointAggregate >= 51)
      {
        ++Value[1];
LABEL_43:
        v34 = 0;
        *((_DWORD *)v12 + 4) = *(_DWORD *)Value;
        v24 = *(void (**)(const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (v24)
          v24(a2, DerivedStorage + 264);
        if (*(_DWORD *)(DerivedStorage + 400) != 3)
        {
          v25 = *(void (**)(const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
          if (v25)
            v25(a2, DerivedStorage + 304);
        }
        MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        if (a3)
          CFDictionaryMergeDictionary();
        v27 = (const void *)CFStringCreateF();
        CFDictionarySetValue(MutableCopy, CFSTR("ParentContextID"), v27);
        if (*(_DWORD *)(DerivedStorage + 400) != 3)
        {
          CFDictionarySetValue(MutableCopy, CFSTR("AudioOptions"), *(const void **)(DerivedStorage + 104));
          CFDictionarySetValue(MutableCopy, CFSTR("NetworkClock"), *(const void **)(DerivedStorage + 80));
          CFDictionarySetValue(MutableCopy, CFSTR("GroupID"), *(const void **)(DerivedStorage + 88));
          v28 = (const void *)*MEMORY[0x1E0C9AE50];
          CFDictionarySetValue(MutableCopy, CFSTR("IsGroupPlayback"), (const void *)*MEMORY[0x1E0C9AE50]);
          if (*(_DWORD *)(DerivedStorage + 400) == 2)
            v29 = v28;
          else
            v29 = (const void *)*MEMORY[0x1E0C9AE40];
          CFDictionarySetValue(MutableCopy, CFSTR("IsPartOfCluster"), v29);
        }
        SubEndpointFeaturesToActivate = endpointAggregate_getSubEndpointFeaturesToActivate((uint64_t)FigEndpoint, (uint64_t)a2, v11);
        if (gLogCategory_APEndpointAggregate <= 50
          && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v31 = *(void (**)(const void *, uint64_t, __CFDictionary *, _QWORD, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 8);
        if (v31)
          v31(a2, SubEndpointFeaturesToActivate, MutableCopy, endpointAggregate_activateSubEndpointCallback, v12);
        CFRetain(FigEndpoint);
        if (a2)
          CFRetain(a2);
        CFRetain((CFTypeRef)*MEMORY[0x1E0CA37A0]);
        APSDispatchAsyncFHelper();
LABEL_64:
        if (!v34)
          goto LABEL_68;
        goto LABEL_65;
      }
      if (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize())
        LogPrintF();
    }
    v22 = gLogCategory_APEndpointAggregate;
    ++Value[1];
    if (v22 <= 50 && (v22 != -1 || _LogCategory_Initialize()))
      LogPrintF();
    goto LABEL_43;
  }
  APSLogErrorAt();
  MutableCopy = 0;
  v27 = 0;
  v15 = -15580;
LABEL_79:
  v34 = v15;
LABEL_65:
  if (v33)
    endpointAggregate_scheduleAddOrRemoveSubEndpointCompletionCallback(FigEndpoint, a2);
  CFRelease((CFTypeRef)*v12);
  free(v12);
LABEL_68:
  if (v27)
    CFRelease(v27);
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v34;
}

uint64_t endpointAggregate_removeEndpointInternal(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  const void *FigEndpoint;
  uint64_t DerivedStorage;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  void (*v13)(const __CFString *, _QWORD);
  void (*v14)(const __CFString *, _QWORD);
  __CFDictionary *Mutable;
  void (*v16)(const __CFString *, __CFDictionary *, void (*)(const void *, uint64_t, uint64_t, uint64_t, const void **), _QWORD *);
  uint64_t v17;

  FigEndpoint = (const void *)FigEndpointAggregateGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointAggregate <= 50
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v10 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A004044E3744DuLL);
  *v10 = CFRetain(FigEndpoint);
  v10[1] = *(_QWORD *)(DerivedStorage + 120);
  v10[3] = a4;
  v10[4] = a3;
  *((_DWORD *)v10 + 4) = 0;
  if (*(_DWORD *)(DerivedStorage + 40) == 2)
  {
    if (*(_DWORD *)(DerivedStorage + 400) != 3)
    {
      v11 = APSGetFBOPropertyInt64();
      endpointAggregate_handleSubEndpointFeatureActivationStateChanged(FigEndpoint, a2, 0, v11);
    }
    v12 = endpointAggregate_removeEntryForSubEndpoint(a1, a2, 1);
    if (!(_DWORD)v12)
    {
      endpointAggregate_updateURLPlaybackSupportedState(FigEndpoint);
      endpointAggregate_updateClusterCompositionPropertiesFromSubEndpoint((uint64_t)FigEndpoint, a2, 1);
      endpointAggregate_unregisterCommChannelsForSubEndpointAndNotifyClientIfNeeded();
      if (*(_DWORD *)(DerivedStorage + 400) != 3)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        if (*(_DWORD *)(DerivedStorage + 400) != 3)
        {
          v13 = *(void (**)(const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
          if (v13)
            v13(a2, 0);
        }
      }
      v14 = *(void (**)(const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v14)
        v14(a2, 0);
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA3958], CFSTR("RemovedFromAggregate"));
      v16 = *(void (**)(const __CFString *, __CFDictionary *, void (*)(const void *, uint64_t, uint64_t, uint64_t, const void **), _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v16)
        v16(a2, Mutable, endpointAggregate_deactivateSubEndpointCallback, v10);
      CFRetain(FigEndpoint);
      CFRetain(a2);
      CFRetain((CFTypeRef)*MEMORY[0x1E0CA37A8]);
      APSDispatchAsyncFHelper();
      if (Mutable)
        CFRelease(Mutable);
      return 0;
    }
    v17 = v12;
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    v17 = 4294951716;
  }
  if (a3)
    endpointAggregate_scheduleAddOrRemoveSubEndpointCompletionCallback(FigEndpoint, a2);
  CFRelease((CFTypeRef)*v10);
  free(v10);
  return v17;
}

CFIndex endpointAggregate_getSubEndpointCount(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  CFIndex result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 8));
  if (a2 && result >= 1 && *(_QWORD *)(DerivedStorage + 24) && (a2 == 1 || *(_QWORD *)(DerivedStorage + 408)))
    --result;
  return result;
}

uint64_t endpointAggregate_handleSubEndpointFeatureActivationStateChanged(const void *a1, const __CFString *a2, uint64_t a3, int a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t AllAudioFeatures;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFArray *v18;
  CFIndex Count;
  CFIndex v20;
  CFIndex v21;
  uint64_t v22;
  const void *ValueAtIndex;
  uint64_t v24;
  uint64_t v25;
  __CFDictionary *Mutable;
  const __CFDictionary *v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  const void *v31;
  uint64_t v32;
  uint64_t CMBaseObject;
  void (*v34)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  const void *v35;
  int v36;
  __CFString **v37;
  const __CFString *v38;
  const __CFString *v39;
  uint64_t v40;
  const __CFString *v41;
  _BOOL4 v42;
  const __CFString *v43;
  int v44;
  uint64_t v45;
  const void *v46;
  const void *v47;
  const void *v48;
  uint64_t v49;
  const void *v50;
  uint64_t v51;
  const __CFString *v52;
  unsigned int v53;
  uint64_t Int64;
  char v55;
  CFTypeRef v56;
  CFTypeRef v57;
  CFTypeRef cf;
  void *value;
  __CFDictionary *v60[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = DerivedStorage;
  if (a2)
  {
    result = CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 8), a2);
    if (!(_DWORD)result)
      return result;
  }
  else if (!*(_BYTE *)(DerivedStorage + 450))
  {
    return APSLogErrorAt();
  }
  if (gLogCategory_APEndpointAggregate <= 50
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!(_DWORD)a3 || (v11 = *(_QWORD *)(v9 + 48)) == 0)
    v11 = *(_QWORD *)(v9 + 56);
  if ((a4 & v11 & 1) != 0)
    endpointAggregate_fireStreamsChangedNotification(a1, a3, 1);
  endpointAggregate_updateURLPlaybackSupportedState(a1);
  AllAudioFeatures = APEndpointGetAllAudioFeatures(v11);
  result = APEndpointGetAllAudioFeatures(a4);
  v13 = result & AllAudioFeatures;
  if (gLogCategory_APEndpointAggregate <= 30)
  {
    if (gLogCategory_APEndpointAggregate != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
    {
      APEndpointGetAllAudioFeatures(a4);
      result = LogPrintF();
    }
  }
  if (v13)
  {
    if (!(_DWORD)a3)
    {
      endpointAggregate_updateSubEndpointAggregateStreamMembershipForFeatures((uint64_t)a1, a2, v13, 0);
      endpointAggregate_notifyStreamObservers((uint64_t)a1, (uint64_t)a2);
      LODWORD(value) = 0;
      v17 = CMBaseObjectGetDerivedStorage();
      v18 = (const __CFArray *)CFDictionaryCopyKeys();
      Count = CFArrayGetCount(v18);
      if (Count < 1)
      {
        v22 = 0;
      }
      else
      {
        v20 = Count;
        v21 = 0;
        v22 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v18, v21);
          if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(v17 + 136), ValueAtIndex))
            v22 |= APEndpointGetFeatureFromStreamType((uint64_t)ValueAtIndex);
          ++v21;
        }
        while (v20 != v21);
        if (v22)
        {
          endpointAggregate_destroyAggregateStreams((uint64_t)a1, v22);
          v24 = CMBaseObjectGetDerivedStorage();
          v60[0] = 0;
          if (*(_DWORD *)(v24 + 400) != 3 && (v25 = v24, *(_QWORD *)(v24 + 80)) && *(_QWORD *)(v24 + 112))
          {
            Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            v27 = Mutable;
            if (!Mutable
              || (CFDictionarySetValue(Mutable, CFSTR("IsSharedAudioEngine"), (const void *)*MEMORY[0x1E0C9AE50]),
                  APEndpointCreateAudioOptions(v22, *(_QWORD *)(v25 + 80), v27, 0, v60)))
            {
              APSLogErrorAt();
            }
            else
            {
              CFDictionaryMergeDictionary();
              if (gLogCategory_APEndpointAggregate <= 50
                && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
            }
          }
          else
          {
            APSLogErrorAt();
            v27 = 0;
          }
          if (v60[0])
            CFRelease(v60[0]);
          if (v27)
            CFRelease(v27);
        }
      }
      if (v18)
        CFRelease(v18);
      endpointAggregate_fireStreamsChangedNotification(a1, 0, v22);
      v51 = v13 & ~v22;
      v50 = a1;
      return endpointAggregate_fireStreamsChangedNotification(v50, 1, v51);
    }
    endpointAggregate_updateSubEndpointAggregateStreamMembershipForFeatures((uint64_t)a1, a2, v13, 1);
    v14 = CMBaseObjectGetDerivedStorage();
    v60[0] = 0;
    cf = 0;
    value = 0;
    v56 = 0;
    v57 = 0;
    if (!*(_QWORD *)(v14 + 112) || (v15 = v14, *(_DWORD *)(v14 + 40) != 2))
    {
      APSLogErrorAt();
      LOBYTE(v16) = 0;
LABEL_124:
      endpointAggregate_destroyAggregateStreams((uint64_t)a1, v16);
      goto LABEL_99;
    }
    if ((v13 & 2) != 0)
    {
      v16 = 2 * (CFDictionaryContainsKey(*(CFDictionaryRef *)(v14 + 128), (const void *)*MEMORY[0x1E0CA4880]) == 0);
      if ((v13 & 8) == 0)
        goto LABEL_42;
    }
    else
    {
      v16 = 0;
      if ((v13 & 8) == 0)
        goto LABEL_42;
    }
    if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(v15 + 128), (const void *)*MEMORY[0x1E0CA4888]))
      v16 |= 8uLL;
LABEL_42:
    if (a2 && (v13 & 0x20) != 0)
    {
      v28 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 464);
      if (v28)
      {
        if (v28 != *MEMORY[0x1E0C9AE50])
          goto LABEL_49;
      }
      else if (!APSIsMemberOfHTGroup())
      {
        goto LABEL_49;
      }
      if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(v15 + 128), (const void *)*MEMORY[0x1E0CA4890]))
      {
        LOBYTE(v16) = v16 | 0x20;
        goto LABEL_50;
      }
    }
LABEL_49:
    if (!v16)
    {
LABEL_99:
      if (value)
        CFRelease(value);
      if (v60[0])
        CFRelease(v60[0]);
      if (cf)
        CFRelease(cf);
      if (v57)
        CFRelease(v57);
      if (v56)
        CFRelease(v56);
      endpointAggregate_notifyStreamObservers((uint64_t)a1, (uint64_t)a2);
      v50 = a1;
      v51 = v13;
      return endpointAggregate_fireStreamsChangedNotification(v50, 1, v51);
    }
LABEL_50:
    Int64 = CFDictionaryGetInt64();
    v29 = CFDictionaryGetInt64();
    v55 = v29 == 0;
    v30 = (~(_DWORD)v13 & 0xALL | v29) == 0;
    v31 = CFDictionaryGetValue(*(CFDictionaryRef *)(v15 + 112), (const void *)*MEMORY[0x1E0CA3748]);
    v32 = *MEMORY[0x1E0C9AE00];
    CMBaseObject = APSNetworkClockGetCMBaseObject();
    v34 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v34)
      v34(CMBaseObject, *MEMORY[0x1E0CF74E0], v32, &v57);
    endpointAggregate_copyPropertyFromAnySubEndpoint((uint64_t)a1, *MEMORY[0x1E0CA44A0], v32, (uint64_t)&v56);
    CFGetDouble();
    APSVolumeConvertSliderValueToDB();
    if ((v16 & 2) != 0)
    {
      v35 = (const void *)*MEMORY[0x1E0CA4880];
      if (endpointAggregate_createAndInitAudioStream((uint64_t)a1, *(const __CFDictionary **)(v15 + 104), *(_QWORD *)(v15 + 424), (uint64_t)a2, *(const void **)(v15 + 80), v30, *(const void **)(v15 + 72), 0, (const void *)*MEMORY[0x1E0CA4880], v31, v55, (CFTypeRef *)&value))goto LABEL_123;
      if (!(v29 | Int64))
      {
        if (*(_DWORD *)(v15 + 400) == 2)
        {
          v36 = FigCFEqual();
          v37 = kAPHALAudioDeviceCreationOptionDeviceType_Screen;
          v38 = *(const __CFString **)(v15 + 416);
          if (!v36)
            v37 = kAPHALAudioDeviceCreationOptionDeviceType_Audio;
          v39 = *v37;
          if (v36)
            v40 = 75;
          else
            v40 = 0;
        }
        else
        {
          v40 = 0;
          v38 = CFSTR("AirPlay");
          v39 = CFSTR("AggrAudio");
        }
        if (gLogCategory_APEndpointAggregate >= 51)
        {
          v42 = v39 != CFSTR("AggrAudio");
        }
        else
        {
          v53 = v40;
          if (gLogCategory_APEndpointAggregate != -1 || (v43 = v38, v44 = _LogCategory_Initialize(), v38 = v43, v44))
          {
            v41 = v38;
            LogPrintF();
            v38 = v41;
          }
          v42 = v39 != CFSTR("AggrAudio");
          v40 = v53;
          if (gLogCategory_APEndpointAggregate <= 50)
          {
            v52 = v38;
            if (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize())
            {
              APSVolumeConvertDBToSliderValue();
              v40 = v53;
              LogPrintF();
            }
            v38 = v52;
            v42 = v39 != CFSTR("AggrAudio");
          }
        }
        if (*(_QWORD *)(v15 + 432))
          v45 = *(_QWORD *)(v15 + 432);
        else
          v45 = (uint64_t)a1;
        APEndpointTriggerAudioHALDeviceCreation(v45, (uint64_t)value, v38, v39, v57, v40, v42, 0);
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v15 + 128), v35, value);
      endpointAggregate_addObserverInternal((uint64_t)a1, value);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    if ((v16 & 8) == 0)
    {
LABEL_86:
      if ((v16 & 0x20) == 0 || !*(_BYTE *)(v15 + 448))
        goto LABEL_98;
      v47 = (const void *)*MEMORY[0x1E0CA4890];
      if (!endpointAggregate_createAndInitAudioStream((uint64_t)a1, *(const __CFDictionary **)(v15 + 104), *(_QWORD *)(v15 + 424), (uint64_t)a2, *(const void **)(v15 + 80), 0, 0, 0, (const void *)*MEMORY[0x1E0CA4890], v31, 1, &cf))
      {
        if (Int64)
        {
LABEL_97:
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v15 + 128), v47, cf);
          endpointAggregate_addObserverInternal((uint64_t)a1, cf);
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
LABEL_98:
          endpointAggregate_updateEngagedState();
          goto LABEL_99;
        }
        v48 = (const void *)CFStringCreateF();
        if (gLogCategory_APEndpointAggregate <= 50
          && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v49 = *(_QWORD *)(v15 + 432);
        if (v49)
        {
          APEndpointTriggerAudioHALDeviceCreation(v49, (uint64_t)cf, v48, CFSTR("LowLatencyAudio"), v57, 0, 0, 0);
          if (v48)
            CFRelease(v48);
          goto LABEL_97;
        }
      }
      goto LABEL_123;
    }
    v46 = (const void *)*MEMORY[0x1E0CA4888];
    if (!endpointAggregate_createAndInitAudioStream((uint64_t)a1, *(const __CFDictionary **)(v15 + 104), *(_QWORD *)(v15 + 424), (uint64_t)a2, *(const void **)(v15 + 80), v30, *(const void **)(v15 + 72), value, (const void *)*MEMORY[0x1E0CA4888], v31, v55, (CFTypeRef *)v60))
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v15 + 128), v46, v60[0]);
      endpointAggregate_addObserverInternal((uint64_t)a1, v60[0]);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      goto LABEL_86;
    }
LABEL_123:
    APSLogErrorAt();
    goto LABEL_124;
  }
  return result;
}

void endpointAggregate_setEnableLocalPlaybackOnAggregateStreams(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  const __CFArray *v6;
  CFIndex v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v14;
  void (*v15)(uint64_t, const __CFString *, uint64_t);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 449) || *(_QWORD *)(DerivedStorage + 408))
  {
    APSLogErrorAt();
  }
  else
  {
    v6 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
    if (CFArrayGetCount(v6) >= 1)
    {
      v7 = 0;
      v8 = *MEMORY[0x1E0CA4820];
      v9 = *MEMORY[0x1E0C9AE00];
      v10 = (uint64_t *)MEMORY[0x1E0C9AE40];
      if (a2)
        v10 = (uint64_t *)MEMORY[0x1E0C9AE50];
      v11 = *v10;
      do
      {
        CFArrayGetValueAtIndex(v6, v7);
        cf = 0;
        CMBaseObject = FigEndpointStreamGetCMBaseObject();
        v13 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
        if (v13)
          v13(CMBaseObject, v8, v9, &cf);
        if (cf)
        {
          if ((APEndpointGetFeatureFromStreamType((uint64_t)cf) & a3) != 0)
          {
            v14 = FigEndpointStreamGetCMBaseObject();
            v15 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
            if (v15)
              v15(v14, CFSTR("enableLocalPlayback"), v11);
          }
          if (cf)
            CFRelease(cf);
        }
        ++v7;
      }
      while (v7 < CFArrayGetCount(v6));
    }
    if (v6)
      CFRelease(v6);
  }
}

void endpointAggregate_updateIsVolumeControlSupported()
{
  uint64_t DerivedStorage;
  const __CFArray *v1;
  const __CFArray *v2;
  CFIndex v3;
  int v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  if (v1)
  {
    v2 = v1;
    if (CFArrayGetCount(v1) < 1)
    {
LABEL_6:
      v4 = *(unsigned __int8 *)(DerivedStorage + 161);
    }
    else
    {
      v3 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(v2, v3);
        if (APSGetFBOPropertyInt64())
          break;
        if (++v3 >= CFArrayGetCount(v2))
          goto LABEL_6;
      }
      v4 = 1;
    }
    if (*(unsigned __int8 *)(DerivedStorage + 352) != v4)
    {
      if (gLogCategory_APEndpointAggregate <= 50
        && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_BYTE *)(DerivedStorage + 352) = v4;
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
    CFRelease(v2);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t endpointAggregate_fireStreamsChangedNotification(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const __CFAllocator *v8;
  uint64_t StreamsChangedNotificationPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!a3)
    return 0;
  v7 = DerivedStorage;
  if (gLogCategory_APEndpointAggregate <= 30
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v8 = CFGetAllocator(a1);
  StreamsChangedNotificationPayload = APEndpointCreateStreamsChangedNotificationPayload(v8, a3, *(_QWORD *)(v7 + 120), a2, (CFMutableDictionaryRef *)&cf);
  if ((_DWORD)StreamsChangedNotificationPayload)
  {
    v11 = StreamsChangedNotificationPayload;
    APSLogErrorAt();
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    v10 = FigDispatchAsyncPostNotification();
    v11 = 0;
    if ((_DWORD)v10)
    {
      v13 = v10;
      APSLogErrorAt();
      v11 = v13;
    }
  }
  if (cf)
    CFRelease(cf);
  return v11;
}

void endpointAggregate_updateURLPlaybackSupportedState(const void *a1)
{
  uint64_t DerivedStorage;
  int v3;
  uint64_t v4;
  uint64_t v5;
  const void *FirstSubEndpointActivatedForFeatures;
  uint64_t CMBaseObject;
  void (*v8)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v9;
  const void *v10;
  const void *v11;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v3 = *(_DWORD *)(DerivedStorage + 400);
  if (v3 != 3)
  {
    v4 = DerivedStorage;
    if (*(_DWORD *)(DerivedStorage + 40) != 2)
      goto LABEL_31;
    v5 = *(_QWORD *)(DerivedStorage + 48);
    if (v5)
    {
      if ((v5 & 4) == 0)
        goto LABEL_13;
    }
    else if ((*(_QWORD *)(DerivedStorage + 56) & 4) == 0)
    {
      goto LABEL_13;
    }
    if (v3 == 2 || !v3 && endpointAggregate_getSubEndpointCount((uint64_t)a1, 2) == 1)
    {
      FirstSubEndpointActivatedForFeatures = endpointAggregate_getFirstSubEndpointActivatedForFeatures((uint64_t)a1, 4);
      if (FirstSubEndpointActivatedForFeatures
        && (CMBaseObject = FigEndpointGetCMBaseObject(),
            (v8 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48)) != 0))
      {
        v8(CMBaseObject, *MEMORY[0x1E0CA4470], *MEMORY[0x1E0C9AE00], &cf);
        v9 = cf;
      }
      else
      {
        v9 = 0;
      }
      goto LABEL_14;
    }
LABEL_13:
    v9 = 0;
    FirstSubEndpointActivatedForFeatures = 0;
LABEL_14:
    if (*(const void **)(v4 + 152) == FirstSubEndpointActivatedForFeatures)
    {
      if (FigCFEqual())
        goto LABEL_26;
      v9 = cf;
    }
    v10 = *(const void **)(v4 + 144);
    *(_QWORD *)(v4 + 144) = v9;
    if (v9)
      CFRetain(v9);
    if (v10)
      CFRelease(v10);
    v11 = *(const void **)(v4 + 152);
    *(_QWORD *)(v4 + 152) = FirstSubEndpointActivatedForFeatures;
    if (FirstSubEndpointActivatedForFeatures)
      CFRetain(FirstSubEndpointActivatedForFeatures);
    if (v11)
      CFRelease(v11);
    if (!endpointAggregate_fireStreamsChangedNotification(a1, FirstSubEndpointActivatedForFeatures != 0, 4))goto LABEL_26;
LABEL_31:
    APSLogErrorAt();
LABEL_26:
    if (cf)
      CFRelease(cf);
  }
}

void endpointAggregate_updateSubEndpointAggregateStreamMembershipForFeatures(uint64_t a1, const __CFString *a2, char a3, int a4)
{
  uint64_t DerivedStorage;
  char AllAudioFeatures;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  const __CFString *v12;
  const void *ValueAtIndex;
  uint64_t v14;
  uint64_t v15;
  const void *Value;
  __CFSet *v17;
  CFMutableSetRef Mutable;
  const __CFSet *v19;
  __CFSet *v20;
  const __CFAllocator *allocator;
  CFArrayRef theArray;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theArray = 0;
  if (!a2 && !*(_BYTE *)(DerivedStorage + 450))
    goto LABEL_39;
  if (gLogCategory_APEndpointAggregate <= 30
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  AllAudioFeatures = APEndpointGetAllAudioFeatures(a3);
  APEndpointCreateStreamTypeArrayFromFeatures(AllAudioFeatures, &theArray);
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v10 = Count;
      v11 = 0;
      allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if (a2)
        v12 = a2;
      else
        v12 = CFSTR("LocalPlaybackID");
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v11);
        v14 = CMBaseObjectGetDerivedStorage();
        v15 = v14;
        if (a4)
        {
          if ((a2 || *(_BYTE *)(v14 + 450)) && ValueAtIndex)
          {
            Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v14 + 136), ValueAtIndex);
            if (Value)
            {
              v17 = (__CFSet *)CFRetain(Value);
              if (v17)
                goto LABEL_20;
            }
            Mutable = CFSetCreateMutable(allocator, 0, MEMORY[0x1E0C9B3B0]);
            if (Mutable)
            {
              v17 = Mutable;
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v15 + 136), ValueAtIndex, Mutable);
LABEL_20:
              CFSetAddValue(v17, v12);
              if (gLogCategory_APEndpointAggregate <= 30
                && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
              {
                CFSetGetCount(v17);
                LogPrintF();
              }
              CFRelease(v17);
              goto LABEL_36;
            }
          }
        }
        else if ((a2 || *(_BYTE *)(v14 + 450)) && ValueAtIndex)
        {
          v19 = (const __CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(v14 + 136), ValueAtIndex);
          if (v19)
          {
            v20 = v19;
            if (CFSetContainsValue(v19, v12))
            {
              CFSetRemoveValue(v20, v12);
              if (gLogCategory_APEndpointAggregate <= 30
                && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
              {
                CFSetGetCount(v20);
                LogPrintF();
              }
              if (!CFSetGetCount(v20))
                CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v15 + 136), ValueAtIndex);
            }
          }
          goto LABEL_36;
        }
        APSLogErrorAt();
LABEL_36:
        ++v11;
      }
      while (v10 != v11);
    }
  }
  else
  {
LABEL_39:
    APSLogErrorAt();
  }
  if (theArray)
    CFRelease(theArray);
}

uint64_t endpointAggregate_notifyStreamObservers(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (gLogCategory_APEndpointAggregate <= 50
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return CFDictionaryApplyBlock();
  }
  return result;
}

uint64_t endpointAggregate_createAndInitAudioStream(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, const void *a5, int a6, const void *a7, const void *a8, const void *a9, const void *a10, char a11, CFTypeRef *a12)
{
  uint64_t DerivedStorage;
  uint64_t v20;
  const __CFDictionary *Value;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!a9)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  if (a2
    && a5
    && ((v20 = DerivedStorage, a4) || *(_BYTE *)(DerivedStorage + 450))
    && (Value = (const __CFDictionary *)CFDictionaryGetValue(a2, a9)) != 0
    && (v22 = CFDictionaryGetValue(Value, CFSTR("AudioEngineVendor"))) != 0)
  {
    v23 = *MEMORY[0x1E0C9AE00];
    v24 = APEndpointStreamAggregateAudioCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], a9, a3, v22, a5, a4, 1, *(_DWORD *)(v20 + 400) == 2, *(_BYTE *)(v20 + 448), *(_BYTE *)(v20 + 450), a11, a10, &cf);
    if ((_DWORD)v24)
    {
      v26 = v24;
    }
    else
    {
      if (!a6)
      {
        *a12 = CFRetain(cf);
LABEL_15:
        if (gLogCategory_APEndpointAggregate <= 50
          && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v26 = 0;
        goto LABEL_20;
      }
      if (a8)
        v25 = APEndpointStreamInterruptingWrapperCreate(v23, cf, a8, a7, a12);
      else
        v25 = APEndpointStreamInterruptibleWrapperCreate(v23, cf, a7, a12);
      v26 = v25;
      if (!(_DWORD)v25)
        goto LABEL_15;
    }
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    v26 = 4294950576;
  }
LABEL_20:
  if (cf)
    CFRelease(cf);
  return v26;
}

void endpointAggregate_addObserverInternal(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  APSubEndpointAddRemoveObservingProtocolGetProtocolID();
  if (CMBaseObjectImplementsProtocol())
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 32), a2);
  }
  else
  {
    APSLogErrorAt();
    APSSignalErrorAt();
  }
}

void endpointAggregate_handleAggregateStreamInUseChanged()
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  endpointAggregate_updateEngagedState();
  JUMPOUT(0x1CAA400E4);
}

void endpointAggregate_updateEngagedState()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const __CFArray *v2;
  CFIndex v3;
  uint64_t v4;
  _BOOL4 v5;
  int v6;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v8;
  const void **v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 400) != 3)
  {
    v1 = DerivedStorage;
    v2 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
    if (CFArrayGetCount(v2) < 1)
    {
      v5 = 0;
LABEL_8:
      v6 = 0;
    }
    else
    {
      v3 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(v2, v3);
        v4 = APSGetFBOPropertyInt64();
        v5 = v4 != 0;
        if (v4)
          break;
        if (++v3 >= CFArrayGetCount(v2))
          goto LABEL_8;
      }
      v6 = 1;
    }
    if (*(unsigned __int8 *)(v1 + 45) == v6)
    {
LABEL_19:
      if (!v2)
        return;
      goto LABEL_20;
    }
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v8 = Mutable;
      *(_BYTE *)(v1 + 45) = v6;
      if (gLogCategory_APEndpointAggregate <= 50
        && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v9 = (const void **)MEMORY[0x1E0C9AE40];
      if (v5)
        v9 = (const void **)MEMORY[0x1E0C9AE50];
      CFDictionarySetValue(v8, CFSTR("IsEngaged"), *v9);
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      CFRelease(v8);
      goto LABEL_19;
    }
    APSLogErrorAt();
    if (v2)
LABEL_20:
      CFRelease(v2);
  }
}

void endpointAggregate_destroyAggregateStreams(uint64_t a1, char a2)
{
  uint64_t DerivedStorage;
  char AllAudioFeatures;
  CFIndex v5;
  const void *ValueAtIndex;
  const void *Value;
  const void *v8;
  void (*v9)(const void *);
  uint64_t v10;
  CFIndex v11;
  const void *v12;
  int v13;
  const __CFArray *v14;
  CFArrayRef theArray;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theArray = 0;
  AllAudioFeatures = APEndpointGetAllAudioFeatures(a2);
  APEndpointCreateStreamTypeArrayFromFeatures(AllAudioFeatures, &theArray);
  if (theArray)
  {
    if (CFArrayGetCount(theArray) >= 1)
    {
      v5 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v5);
        Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 128), ValueAtIndex);
        if (Value)
        {
          v8 = Value;
          if (gLogCategory_APEndpointAggregate <= 50
            && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v9 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
          if (v9)
            v9(v8);
          v10 = CMBaseObjectGetDerivedStorage();
          if (CFArrayGetCount(*(CFArrayRef *)(v10 + 32)) >= 1)
          {
            v11 = 0;
            while (1)
            {
              v12 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 32), v11);
              v13 = CFEqual(v8, v12);
              v14 = *(const __CFArray **)(v10 + 32);
              if (v13)
                break;
              if (++v11 >= CFArrayGetCount(v14))
                goto LABEL_17;
            }
            CFArrayRemoveValueAtIndex(v14, v11);
          }
LABEL_17:
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterRemoveWeakListener();
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 128), ValueAtIndex);
          APEndpointGetFeatureFromStreamType((uint64_t)ValueAtIndex);
        }
        ++v5;
      }
      while (v5 < CFArrayGetCount(theArray));
    }
    endpointAggregate_updateEngagedState();
  }
  else
  {
    APSLogErrorAt();
  }
  if (theArray)
    CFRelease(theArray);
}

uint64_t __endpointAggregate_notifyStreamObservers_block_invoke(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t FeatureFromStreamType;
  uint64_t result;

  FeatureFromStreamType = APEndpointGetFeatureFromStreamType(a2);
  result = APEndpointGetAllAudioFeatures(*(_QWORD *)(a1 + 32));
  if ((result & FeatureFromStreamType) != 0)
  {
    if (gLogCategory_APEndpointAggregate <= 50
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFRetain(a3);
    CFRetain(*(CFTypeRef *)(a1 + 48));
    return APSDispatchAsyncFHelper();
  }
  return result;
}

void endpointAggregate_notifyObserverNotificationQueueDispatch(uint64_t a1)
{
  int v2;
  CFTypeRef v3;
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(CFTypeRef, uint64_t);
  uint64_t v8;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(CFTypeRef *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  APSubEndpointAddRemoveObservingProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (v2)
  {
    if (!ProtocolVTable)
      goto LABEL_10;
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (!v6)
      goto LABEL_10;
    v7 = *(void (**)(CFTypeRef, uint64_t))(v6 + 8);
    if (!v7)
      goto LABEL_10;
LABEL_9:
    v7(v3, v4);
    goto LABEL_10;
  }
  if (ProtocolVTable)
  {
    v8 = *(_QWORD *)(ProtocolVTable + 16);
    if (v8)
    {
      v7 = *(void (**)(CFTypeRef, uint64_t))(v8 + 16);
      if (v7)
        goto LABEL_9;
    }
  }
LABEL_10:
  CFRelease(*(CFTypeRef *)(a1 + 8));
  CFRelease(*(CFTypeRef *)a1);
}

uint64_t endpointAggregate_getSubEndpointFeaturesToActivate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CMBaseObjectGetDerivedStorage();
  return APSGetFBOPropertyInt64() & a3;
}

void endpointAggregate_activateSubEndpointCallback(const __CFString *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  _QWORD *DerivedStorage;
  const __CFString *v9;
  _DWORD *Value;
  const void *v11;
  uint64_t v12;
  void (*v13)(const __CFString *, uint64_t);
  const void *v14;
  uint64_t v15;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a1 || (FigEndpointExtendedGetClassID(), v9 = a1, !CMBaseObjectIsMemberOfClass()))
    v9 = 0;
  MEMORY[0x1CAA400CC](*DerivedStorage);
  Value = CFDictionaryGetValue((CFDictionaryRef)DerivedStorage[1], a1);
  if (Value && *Value == *(_DWORD *)(a5 + 16))
  {
    if (gLogCategory_APEndpointAggregate <= 50
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (a4)
    {
      v11 = *(const void **)a5;
      if (!*(_QWORD *)a5 || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass()))
        v11 = 0;
      endpointAggregate_removeEntryForSubEndpoint((uint64_t)v11, a1, 0);
    }
    else
    {
      if (v9)
      {
        v12 = DerivedStorage[42];
        if (v12)
        {
          v13 = *(void (**)(const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 48);
          if (v13)
            v13(v9, v12);
        }
      }
      if (*((_DWORD *)DerivedStorage + 100) != 3)
      {
        v14 = *(const void **)a5;
        CMBaseObjectGetDerivedStorage();
        endpointAggregate_updateURLPlaybackSupportedState(v14);
        endpointAggregate_ensureLocalPlaybackIsEnabledOrDisabled(v14);
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        v15 = APSGetFBOPropertyInt64();
        if (v15)
          endpointAggregate_handleSubEndpointFeatureActivationStateChanged(v14, a1, 1, v15);
        endpointAggregate_updateIsVolumeControlSupported();
        endpointAggregate_updateVolumeControlType();
        endpointAggregate_updateIsMuteControlSupported();
        endpointAggregate_updateVideoPlaybackIsActive(v14);
        endpointAggregate_updateClusterCompositionPropertiesFromSubEndpoint((uint64_t)v14, a1, 0);
      }
    }
  }
  else if (gLogCategory_APEndpointAggregate <= 60
         && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  endpointAggregate_scheduleAddOrRemoveSubEndpointCompletionCallback(*(const void **)a5, a1);
  MEMORY[0x1CAA400E4](*DerivedStorage);
  CFRelease(*(CFTypeRef *)a5);
  free((void *)a5);
}

void endpointAggregate_postEndpointAddedOrRemovedNotification(uint64_t a1)
{
  uint64_t v2;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v4;
  uint64_t CMBaseObject;
  unsigned int (*v6)(uint64_t, _QWORD, uint64_t, void **);
  const void *v7;
  const void *v8;
  void *value;

  value = 0;
  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = Mutable;
    if (*(_QWORD *)a1
      && (CMBaseObject = FigEndpointGetCMBaseObject(),
          (v6 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48)) != 0)
      && !v6(CMBaseObject, *MEMORY[0x1E0CA4258], v2, &value))
    {
      CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0CA3798], value);
      if (gLogCategory_APEndpointAggregate <= 10
        && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    else
    {
      APSLogErrorAt();
    }
    CFRelease(v4);
    if (value)
      CFRelease(value);
  }
  else
  {
    APSLogErrorAt();
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v7 = *(const void **)(a1 + 8);
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(a1 + 16);
  if (v8)
    CFRelease(v8);
}

uint64_t endpointAggregate_scheduleAddOrRemoveSubEndpointCompletionCallback(const void *a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  CFRetain(a2);
  return APSDispatchAsyncFHelper();
}

uint64_t endpointAggregate_generateGroupID(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;

  CMBaseObjectGetDerivedStorage();
  v3 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 480);
  v4 = v3 > 0xD;
  v5 = (1 << v3) & 0x2090;
  if (!v4 && v5 != 0)
    APSCopyClusterInfo();
  v7 = APSCopyBootUUID();
  if ((_DWORD)v7)
  {
    v10 = v7;
    APSLogErrorAt();
  }
  else
  {
    v8 = APSCreateGroupID();
    v9 = (const void *)v8;
    v10 = 0;
    if (!a2)
      goto LABEL_10;
    *a2 = v8;
  }
  v9 = 0;
LABEL_10:
  if (v9)
    CFRelease(v9);
  return v10;
}

uint64_t endpointAggregate_removeEntryForSubEndpoint(uint64_t a1, const void *a2, int a3)
{
  uint64_t DerivedStorage;
  _QWORD *Value;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  FigEndpointAggregateGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 8), a2))
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 8), a2);
    v7 = Value[1];
    if (v7)
    {
      v8 = Value;
      Value[1] = v7 - 1;
      if (gLogCategory_APEndpointAggregate <= 50
        && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (a3 || !v8[1])
      {
        if (gLogCategory_APEndpointAggregate <= 50
          && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 8), a2);
        result = FigCFEqual();
        if ((_DWORD)result)
        {
          result = *(_QWORD *)(DerivedStorage + 24);
          if (result)
          {
            CFRelease((CFTypeRef)result);
            result = 0;
            *(_QWORD *)(DerivedStorage + 24) = 0;
          }
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      APSLogErrorAt();
      return 4294949690;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294895046;
  }
  return result;
}

void endpointAggregate_handleSubEndpointVolumeDidChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  _QWORD *v7;
  const void *v8;
  const void *TypedValue;
  __CFDictionary *Mutable;
  __CFDictionary *v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5
    && (v7 = (_QWORD *)DerivedStorage,
        v8 = (const void *)*MEMORY[0x1E0CA44A0],
        CFNumberGetTypeID(),
        TypedValue = (const void *)CFDictionaryGetTypedValue(),
        MEMORY[0x1CAA400CC](*v7),
        (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0))
  {
    v11 = Mutable;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA4258], (const void *)v7[53]);
    CFDictionarySetValue(v11, v8, TypedValue);
    if (gLogCategory_APEndpointAggregate <= 50
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    MEMORY[0x1CAA400E4](*v7);
    CFRelease(v11);
  }
  else
  {
    APSLogErrorAt();
  }
}

void endpointAggregate_handleSubEndpointIsMutedDidChange()
{
  _QWORD *DerivedStorage;
  __CFDictionary *Mutable;
  __CFDictionary *v2;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v2 = Mutable;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA4258], (const void *)DerivedStorage[53]);
    if (gLogCategory_APEndpointAggregate <= 50
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    MEMORY[0x1CAA400E4](*DerivedStorage);
    CFRelease(v2);
  }
  else
  {
    APSLogErrorAt();
  }
}

void endpointAggregate_handleSubEndpointVolumeControlSupportedChanged()
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  endpointAggregate_updateIsVolumeControlSupported();
  JUMPOUT(0x1CAA400E4);
}

void endpointAggregate_handleSubEndpointVolumeControlTypeChanged()
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  endpointAggregate_updateVolumeControlType();
  JUMPOUT(0x1CAA400E4);
}

void endpointAggregate_handleSubEndpointMuteControlSupportedChanged()
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  endpointAggregate_updateIsMuteControlSupported();
  JUMPOUT(0x1CAA400E4);
}

void endpointAggregate_handleSubEndpointAirPlayVideoPlaybackChanged(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  endpointAggregate_updateVideoPlaybackIsActive(a2);
  JUMPOUT(0x1CAA400E4);
}

void endpointAggregate_handleSubEndpointStreamsChanged(uint64_t a1, const void *a2, uint64_t a3, const __CFString *a4)
{
  _QWORD *DerivedStorage;
  uint64_t Int64;
  int v8;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Int64 = CFDictionaryGetInt64();
  v8 = CFDictionaryGetInt64();
  if (gLogCategory_APEndpointAggregate <= 30
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*DerivedStorage);
  endpointAggregate_handleSubEndpointFeatureActivationStateChanged(a2, a4, Int64 != 0, v8);
  JUMPOUT(0x1CAA400E4);
}

void endpointAggregate_handleSubEndpointDescriptionChanged(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (a5 && (CFDictionaryGetInt64() || CFDictionaryGetInt64() || CFDictionaryGetInt64()))
    endpointAggregate_updateClusterCompositionPropertiesFromSubEndpoint(a2, a4, 0);
  JUMPOUT(0x1CAA400E4);
}

void endpointAggregate_updateVolumeControlType()
{
  uint64_t DerivedStorage;
  const __CFArray *v1;
  const __CFArray *v2;
  uint64_t v3;
  CFIndex v4;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  if (v1)
  {
    v2 = v1;
    if (CFArrayGetCount(v1) < 1)
    {
      v3 = 0;
    }
    else
    {
      v3 = 0;
      v4 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(v2, v4);
        v5 = APSGetFBOPropertyInt64();
        if (v5 == 3)
          break;
        v6 = v5;
        if (CFArrayGetCount(v2) == 1)
          v3 = v6;
        if (++v4 >= CFArrayGetCount(v2))
          goto LABEL_11;
      }
      v3 = 3;
    }
LABEL_11:
    if (*(_QWORD *)(DerivedStorage + 360) != v3)
    {
      if (gLogCategory_APEndpointAggregate <= 50
        && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
      {
        APSGetFigEndpointVolumeControlTypeName();
        APSGetFigEndpointVolumeControlTypeName();
        LogPrintF();
      }
      *(_QWORD *)(DerivedStorage + 360) = v3;
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
    CFRelease(v2);
  }
  else
  {
    APSLogErrorAt();
  }
}

void endpointAggregate_updateIsMuteControlSupported()
{
  uint64_t DerivedStorage;
  const __CFArray *v1;
  const __CFArray *v2;
  CFIndex v3;
  int v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  if (v1)
  {
    v2 = v1;
    if (CFArrayGetCount(v1) < 1)
    {
      v4 = 0;
    }
    else
    {
      v3 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(v2, v3);
        if (APSGetFBOPropertyInt64())
          break;
        if (++v3 >= CFArrayGetCount(v2))
        {
          v4 = 0;
          goto LABEL_9;
        }
      }
      v4 = 1;
    }
LABEL_9:
    if (*(unsigned __int8 *)(DerivedStorage + 368) != v4)
    {
      if (gLogCategory_APEndpointAggregate <= 50
        && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_BYTE *)(DerivedStorage + 368) = v4;
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
    CFRelease(v2);
  }
  else
  {
    APSLogErrorAt();
  }
}

void endpointAggregate_updateVideoPlaybackIsActive(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFArray *v3;
  const __CFArray *v4;
  CFIndex v5;
  int v6;
  const __CFArray *v7;
  const __CFAllocator *v8;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  if (v3)
  {
    v4 = v3;
    if (CFArrayGetCount(v3) < 1)
    {
LABEL_6:
      v6 = 0;
    }
    else
    {
      v5 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(v4, v5);
        if (APSGetFBOPropertyInt64())
          break;
        if (++v5 >= CFArrayGetCount(v4))
          goto LABEL_6;
      }
      v6 = 1;
    }
    if (*(unsigned __int8 *)(DerivedStorage + 344) != v6)
    {
      *(_BYTE *)(DerivedStorage + 344) = v6;
      v8 = CFGetAllocator(a1);
      Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v10 = Mutable;
        FigCFDictionarySetInt64();
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
        CFRelease(v4);
        v7 = v10;
        goto LABEL_12;
      }
      APSLogErrorAt();
    }
    v7 = v4;
LABEL_12:
    CFRelease(v7);
    return;
  }
  APSLogErrorAt();
}

uint64_t endpointAggregate_updateClusterCompositionPropertiesFromSubEndpoint(uint64_t a1, const void *a2, int a3)
{
  uint64_t result;
  uint64_t DerivedStorage;
  const void *Int64;
  uint64_t v8;
  __CFDictionary *Mutable;
  uint64_t CMBaseObject;
  unsigned int (*v11)(uint64_t, _QWORD, uint64_t, const void **);
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v14;
  unsigned int (*v15)(uint64_t, _QWORD, uint64_t, void **);
  const void *v16;
  uint64_t v17;
  void (*v18)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v19;
  void (*v20)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v21;
  void (*v22)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v23;
  void (*v24)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v25;
  const void *v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef v33;
  void *value;
  CFTypeRef cf;
  const void *v36;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(result + 400) != 2)
    return result;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    CFHash(a2);
    Int64 = (const void *)CFNumberCreateInt64();
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 376), Int64);
    if (gLogCategory_APEndpointAggregate <= 30
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!Int64)
      goto LABEL_53;
    v25 = Int64;
  }
  else
  {
    v36 = 0;
    value = 0;
    cf = 0;
    v32 = 0;
    v33 = 0;
    v30 = 0;
    v31 = 0;
    v29 = 0;
    v8 = *MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      goto LABEL_25;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v11 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (!v11 || v11(CMBaseObject, *MEMORY[0x1E0CA4258], v8, &v36))
      goto LABEL_25;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA3878], v36);
    v12 = FigEndpointGetCMBaseObject();
    v13 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v13)
      v13(v12, *MEMORY[0x1E0CA4348], v8, &cf);
    FigCFDictionarySetValue();
    v14 = FigEndpointGetCMBaseObject();
    v15 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
    if (v15 && !v15(v14, *MEMORY[0x1E0CA43D8], v8, &value))
    {
      v16 = (const void *)*MEMORY[0x1E0CA3880];
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA3880], value);
      v17 = FigEndpointGetCMBaseObject();
      v18 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v18)
        v18(v17, *MEMORY[0x1E0CA4278], v8, &v33);
      FigCFDictionarySetValue();
      v19 = FigEndpointGetCMBaseObject();
      v20 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v20)
        v20(v19, *MEMORY[0x1E0CA4338], v8, &v32);
      FigCFDictionarySetValue();
      v21 = FigEndpointGetCMBaseObject();
      v22 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v22)
        v22(v21, CFSTR("RoomUUID"), v8, &v31);
      FigCFDictionarySetValue();
      v23 = FigEndpointGetCMBaseObject();
      v24 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v24)
        v24(v23, CFSTR("RoomName"), v8, &v30);
      FigCFDictionarySetValue();
      v27 = FigEndpointGetCMBaseObject();
      v28 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v28)
      {
        v28(v27, *MEMORY[0x1E0CA4458], v8, &v29);
        if (v29)
        {
          FigCFDictionarySetValue();
          CFDictionarySetValue(Mutable, v16, (const void *)*MEMORY[0x1E0CA48E0]);
        }
      }
      CFHash(a2);
      v26 = (const void *)CFNumberCreateInt64();
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 376), v26, Mutable);
      if (gLogCategory_APEndpointAggregate <= 30
        && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
LABEL_25:
      APSLogErrorAt();
      v26 = 0;
    }
    if (v36)
      CFRelease(v36);
    if (cf)
      CFRelease(cf);
    if (value)
      CFRelease(value);
    if (v33)
      CFRelease(v33);
    if (v32)
      CFRelease(v32);
    if (v31)
      CFRelease(v31);
    if (v30)
      CFRelease(v30);
    if (Mutable)
      CFRelease(Mutable);
    if (v26)
      CFRelease(v26);
    v25 = v29;
    if (!v29)
      goto LABEL_53;
  }
  CFRelease(v25);
LABEL_53:
  if (gLogCategory_APEndpointAggregate <= 50
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDispatchAsyncPostNotification();
}

void endpointAggregate_addOrRemoveSubEndpointCallCompletionCallback(CFTypeRef *a1)
{
  void (*v2)(CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, _QWORD, CFTypeRef);

  v2 = (void (*)(CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, _QWORD, CFTypeRef))a1[6];
  if (v2)
    v2(a1[1], *a1, a1[2], a1[3], *((unsigned int *)a1 + 8), a1[5]);
  CFRelease(*a1);
  CFRelease(a1[1]);
}

void endpointAggregate_unregisterCommChannelsForSubEndpointAndNotifyClientIfNeeded()
{
  CFMutableArrayRef Mutable;
  const __CFArray *v1;

  CMBaseObjectGetDerivedStorage();
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v1 = Mutable;
    CFDictionaryApplyBlock();
    CFArrayGetCount(v1);
    CFArrayApplyBlock();
    CFRelease(v1);
  }
  else
  {
    APSLogErrorAt();
  }
}

void endpointAggregate_deactivateSubEndpointCallback(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  _QWORD *DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  CFIndex v10;
  const void *ValueAtIndex;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex SubEndpointCount;
  BOOL v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  v8 = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v9 = v8;
    if (CFArrayGetCount(*(CFArrayRef *)(v8 + 32)) >= 1)
    {
      v10 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v9 + 32), v10);
        CFRetain(ValueAtIndex);
        CFRetain(a1);
        APSDispatchAsyncFHelper();
        ++v10;
      }
      while (v10 < CFArrayGetCount(*(CFArrayRef *)(v9 + 32)));
    }
  }
  if (*((_DWORD *)DerivedStorage + 100) != 3)
  {
    v12 = (uint64_t)*a5;
    v13 = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(v13 + 80))
    {
      v14 = v13;
      if (!CFDictionaryGetInt64())
      {
        SubEndpointCount = endpointAggregate_getSubEndpointCount(v12, 1);
        v16 = *(_QWORD *)(v14 + 24) && APSGetFBOPropertyInt64() != 0;
        if (SubEndpointCount <= 0 && !v16)
        {
          v17 = *(_QWORD *)(v14 + 80);
          v18 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
          if (!v18 || v18(v17))
            APSLogErrorAt();
        }
      }
    }
    endpointAggregate_ensureLocalPlaybackIsEnabledOrDisabled(*a5);
    endpointAggregate_updateIsVolumeControlSupported();
    endpointAggregate_updateVolumeControlType();
    endpointAggregate_updateIsMuteControlSupported();
    endpointAggregate_updateVideoPlaybackIsActive(*a5);
  }
  if (gLogCategory_APEndpointAggregate <= 50
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  endpointAggregate_scheduleAddOrRemoveSubEndpointCompletionCallback(*a5, a1);
  MEMORY[0x1CAA400E4](*DerivedStorage);
  CFRelease(*a5);
  free(a5);
}

void __endpointAggregate_unregisterCommChannelsForSubEndpointAndNotifyClientIfNeeded_block_invoke(uint64_t a1, void *value, CFTypeRef cf2)
{
  const void *v5;

  v5 = *(const void **)(a1 + 32);
  if (!v5 || CFEqual(v5, cf2))
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), value);
}

void __endpointAggregate_unregisterCommChannelsForSubEndpointAndNotifyClientIfNeeded_block_invoke_2(uint64_t a1, const void *a2)
{
  endpointAggregate_unregisterCommChannelAndNotifyClientIfNeeded(*(const void **)(a1 + 32), a2);
}

void endpointAggregate_unregisterCommChannelAndNotifyClientIfNeeded(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 168), a2))
  {
    APEndpointCallRCDelegateDidCloseAsync(a1, *(_QWORD *)(DerivedStorage + 120), a2, *(NSObject **)(DerivedStorage + 392), *(_QWORD *)(DerivedStorage + 240), *(_QWORD *)(DerivedStorage + 256));
    if (gLogCategory_APEndpointAggregate <= 50
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 168), a2);
  }
}

__CFString *endpointAggregate_subEndpointSupportProtocolCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("APEndpointCluster <FigEndpointSubEndpointSupportProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t endpointAggregate_CopySubEndpointProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v17 = 0;
  if (gLogCategory_APEndpointAggregate <= 30
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (!endpointAggregate_getSubEndpointWithID(a1, a2, &v17))
  {
    v13 = 4294949689;
    goto LABEL_19;
  }
  CMBaseObject = FigEndpointGetCMBaseObject();
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v12)
    v13 = v12(CMBaseObject, a3, a4, a5);
  else
    v13 = 4294954514;
  if (v17 && (_DWORD)v13)
  {
    v14 = FigEndpointGetCMBaseObject();
    v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (!v15)
    {
      v13 = 4294954514;
LABEL_18:
      APSLogErrorAt();
      goto LABEL_19;
    }
    v13 = v15(v14, a3, a4, a5);
  }
  if ((_DWORD)v13 != -12784 && (_DWORD)v13 != -6727 && (_DWORD)v13)
    goto LABEL_18;
LABEL_19:
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return v13;
}

uint64_t endpointAggregate_SetSubEndpointProperty(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  _QWORD *DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v10)(uint64_t, const void *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, const void *, uint64_t);
  uint64_t v17;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v17 = 0;
  if (gLogCategory_APEndpointAggregate <= 30
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (!endpointAggregate_getSubEndpointWithID(a1, a2, &v17))
  {
    v11 = 4294949689;
    goto LABEL_27;
  }
  CMBaseObject = FigEndpointGetCMBaseObject();
  v10 = *(uint64_t (**)(uint64_t, const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v10)
  {
    v11 = v10(CMBaseObject, a3, a4);
    if (!v17)
      goto LABEL_17;
    if (!(_DWORD)v11
      && (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA44A0])
       || CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA44B8])
       || CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA42B8])
       || CFEqual(a3, CFSTR("IsHALMuted"))))
    {
      v11 = 0;
      goto LABEL_27;
    }
  }
  else if (!v17)
  {
LABEL_25:
    v11 = 4294954514;
LABEL_26:
    APSLogErrorAt();
    goto LABEL_27;
  }
  v12 = FigEndpointGetCMBaseObject();
  v13 = *(uint64_t (**)(uint64_t, const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v13)
    goto LABEL_25;
  v11 = v13(v12, a3, a4);
LABEL_17:
  if ((_DWORD)v11 != -12784 && (_DWORD)v11 != -6727 && (_DWORD)v11 != 0)
    goto LABEL_26;
LABEL_27:
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return v11;
}

const void *endpointAggregate_getSubEndpointWithID(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  uint64_t v8;
  int v9;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  int v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  int v16;
  _BOOL4 v17;
  int v18;
  int v19;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  CFTypeRef v24;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointAggregate <= 30
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a3)
    *a3 = 0;
  v4 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  Count = CFArrayGetCount(v4);
  if (Count < 1)
  {
    v21 = 0;
    if (!v4)
      goto LABEL_48;
    goto LABEL_47;
  }
  v6 = Count;
  v7 = 0;
  v21 = 0;
  v23 = *MEMORY[0x1E0CA4258];
  v8 = *MEMORY[0x1E0C9AE00];
  v22 = *MEMORY[0x1E0CA4458];
  v9 = -1;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v4, v7);
    v24 = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v12)
      v12(CMBaseObject, v23, v8, &v24);
    v13 = FigCFEqual();
    if (gLogCategory_APEndpointAggregate <= 30
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (v24)
      CFRelease(v24);
    if (v13)
      break;
    v14 = FigEndpointGetCMBaseObject();
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v15)
      v15(v14, v22, v8, &v24);
    v16 = FigCFEqual();
    if (gLogCategory_APEndpointAggregate <= 30
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (v24)
      CFRelease(v24);
    if (v16)
    {
      v17 = APSGetFBOPropertyInt64() != 0;
      v18 = v17 | (2 * (APSGetFBOPropertyInt64() != 0));
      v19 = v18 | (4 * (APSGetFBOPropertyInt64() != 0));
      if (gLogCategory_APEndpointAggregate <= 30
        && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v19 <= v9)
      {
        if (a3)
          *a3 = ValueAtIndex;
      }
      else
      {
        if (a3)
          *a3 = v21;
        if (gLogCategory_APEndpointAggregate <= 30
          && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (!a3 && v19 == 3)
          break;
        v21 = ValueAtIndex;
        v9 = v19;
      }
    }
    if (v6 == ++v7)
      goto LABEL_46;
  }
  v21 = ValueAtIndex;
LABEL_46:
  if (v4)
LABEL_47:
    CFRelease(v4);
LABEL_48:
  if (gLogCategory_APEndpointAggregate <= 30
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v21;
}

uint64_t endpointAggregate_Activate(const void *a1, uint64_t a2, CFTypeRef a3, uint64_t a4)
{
  _QWORD *DerivedStorage;
  CFTypeID v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  const void *v13;
  CFTypeRef v14;
  uint64_t v15;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (gLogCategory_APEndpointAggregate <= 50
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a3 && (v9 = CFGetTypeID(a3), v9 != CFDictionaryGetTypeID()))
  {
    APSLogErrorAt();
    v11 = 4294950576;
  }
  else if (*((_DWORD *)DerivedStorage + 10))
  {
    APSLogErrorAt();
    v11 = 4294950569;
  }
  else if (*((_BYTE *)DerivedStorage + 44))
  {
    APSLogErrorAt();
    v11 = 4294950573;
  }
  else
  {
    v10 = CMBaseObjectGetDerivedStorage();
    if (CFDictionaryGetCount(*(CFDictionaryRef *)(v10 + 8)))
    {
      APSLogErrorAt();
      v11 = 4294895043;
    }
    else
    {
      v11 = endpointAggregate_copyActivationOptionsToStorage((uint64_t)a1, a2, a3, *((_DWORD *)DerivedStorage + 100) != 3, 1);
      if ((_DWORD)v11)
      {
        APSLogErrorAt();
      }
      else
      {
        *(_OWORD *)(DerivedStorage + 33) = 0u;
        *(_OWORD *)(DerivedStorage + 35) = 0u;
        *((_OWORD *)DerivedStorage + 19) = 0u;
        *((_OWORD *)DerivedStorage + 20) = 0u;
        DerivedStorage[37] = 0;
        DerivedStorage[38] = a1;
        DerivedStorage[33] = a1;
        DerivedStorage[34] = endpointAggregate_handleAuthRequiredInternal;
        DerivedStorage[36] = endpointAggregate_handleConnectedStateChangedInternal;
        DerivedStorage[35] = endpointAggregate_handleFailedInternal;
        DerivedStorage[40] = endpointAggregate_handleDidReceiveDataFromCommChannelInternal;
        DerivedStorage[41] = endpointAggregate_handleDidCloseCommChannelInternal;
        DerivedStorage[6] = a2;
        *((_DWORD *)DerivedStorage + 10) = 1;
        ++DerivedStorage[15];
      }
    }
  }
  v12 = CFRetain(a1);
  if (a3)
    a3 = CFRetain(a3);
  v13 = (const void *)DerivedStorage[10];
  if (v13)
    v14 = CFRetain(v13);
  else
    v14 = 0;
  if (*((_DWORD *)DerivedStorage + 100) != 3)
  {
    APSDispatchAsyncFHelper();
    goto LABEL_34;
  }
  v15 = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointAggregate <= 50
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if ((_DWORD)v11)
  {
    APSLogErrorAt();
    if (gLogCategory_APEndpointAggregate <= 90
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    endpointAggregate_clearActivationState(v12);
    if (!a4)
      goto LABEL_30;
  }
  else
  {
    *(_QWORD *)(v15 + 56) = a2;
    *(_DWORD *)(v15 + 40) = 2;
    if (gLogCategory_APEndpointAggregate <= 50
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!a4)
      goto LABEL_30;
  }
  CFRetain(v12);
  APSDispatchAsyncFHelper();
LABEL_30:
  CFRelease(v12);
  if (a3)
    CFRelease(a3);
  if (v14)
    CFRelease(v14);
LABEL_34:
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return v11;
}

uint64_t endpointAggregate_Deactivate(const void *a1)
{
  _QWORD *DerivedStorage;
  uint64_t v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointAggregate <= 50
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (*((_BYTE *)DerivedStorage + 44))
  {
    v3 = 4294950573;
LABEL_13:
    APSLogErrorAt();
    goto LABEL_9;
  }
  if (*((_DWORD *)DerivedStorage + 10) != 2)
  {
    v3 = 4294951716;
    goto LABEL_13;
  }
  if (endpointAggregate_getSubEndpointCount((uint64_t)a1, 2))
  {
    v3 = 4294895043;
    goto LABEL_13;
  }
  v3 = 0;
LABEL_9:
  CFRetain(a1);
  APSDispatchAsyncFHelper();
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return v3;
}

uint64_t endpointAggregate_Dissociate()
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (!*((_BYTE *)DerivedStorage + 44))
  {
    if (gLogCategory_APEndpointAggregate <= 50
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *((_BYTE *)DerivedStorage + 44) = 1;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return 0;
}

uint64_t endpointAggregate_SetDelegate(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  __int128 v9;
  _OWORD v10[2];
  uint64_t v11;

  if (!a2)
  {
    v6 = endpointAggregate_SetDelegateRouting(a1, 0);
    if ((_DWORD)v6)
    {
      v5 = v6;
    }
    else
    {
      v5 = endpointAggregate_SetDelegateRemoteControl(a1, 0);
      if (!(_DWORD)v5)
        return v5;
    }
LABEL_10:
    APSLogErrorAt();
    return v5;
  }
  v3 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v3;
  v11 = *(_QWORD *)(a2 + 32);
  v8[1] = 0;
  v8[0] = *(_QWORD *)&v10[0];
  v9 = *(_OWORD *)(a2 + 48);
  v4 = endpointAggregate_SetDelegateRouting(a1, (uint64_t)v10);
  if ((_DWORD)v4)
  {
    v5 = v4;
    goto LABEL_10;
  }
  v5 = endpointAggregate_SetDelegateRemoteControl(a1, (uint64_t)v8);
  if ((_DWORD)v5)
    goto LABEL_10;
  return v5;
}

uint64_t endpointAggregate_SetDelegateRouting(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  const void *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (*((_BYTE *)DerivedStorage + 44))
  {
    APSLogErrorAt();
    a2 = 4294950573;
  }
  else
  {
    if (gLogCategory_APEndpointAggregate <= 50
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v4 = (const void *)DerivedStorage[31];
    if (v4)
    {
      CFRelease(v4);
      DerivedStorage[31] = 0;
    }
    v5 = DerivedStorage + 22;
    if (a2)
    {
      v6 = *(_OWORD *)a2;
      v7 = *(_OWORD *)(a2 + 16);
      DerivedStorage[26] = *(_QWORD *)(a2 + 32);
      *v5 = v6;
      *((_OWORD *)DerivedStorage + 12) = v7;
      a2 = 0;
      DerivedStorage[31] = FigCFWeakReferenceHolderCreateWithReferencedObject();
    }
    else
    {
      DerivedStorage[26] = 0;
      *v5 = 0u;
      *((_OWORD *)DerivedStorage + 12) = 0u;
    }
  }
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return a2;
}

uint64_t endpointAggregate_SetDelegateRemoteControl(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  const void *v4;
  _OWORD *v5;
  __int128 v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (*((_BYTE *)DerivedStorage + 44))
  {
    APSLogErrorAt();
    a2 = 4294950573;
  }
  else
  {
    if (gLogCategory_APEndpointAggregate <= 50
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v4 = (const void *)DerivedStorage[32];
    if (v4)
    {
      CFRelease(v4);
      DerivedStorage[32] = 0;
    }
    v5 = DerivedStorage + 27;
    if (a2)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *v5 = *(_OWORD *)a2;
      *(_OWORD *)(DerivedStorage + 29) = v6;
      a2 = 0;
      DerivedStorage[32] = FigCFWeakReferenceHolderCreateWithReferencedObject();
    }
    else
    {
      *v5 = 0u;
      *(_OWORD *)(DerivedStorage + 29) = 0u;
    }
  }
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return a2;
}

uint64_t endpointAggregate_CreatePlaybackSession(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 10) != 2)
  {
    APSLogErrorAt();
    v6 = 4294951716;
    goto LABEL_8;
  }
  v4 = DerivedStorage[19];
  if (!v4)
  {
    APSLogErrorAt();
    v6 = 4294895039;
    goto LABEL_8;
  }
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (!v5)
  {
    v6 = 4294954514;
LABEL_7:
    APSLogErrorAt();
    goto LABEL_8;
  }
  v6 = v5(v4, a2);
  if ((_DWORD)v6)
    goto LABEL_7;
LABEL_8:
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return v6;
}

uint64_t endpointAggregate_UpdateFeatures(const void *a1, uint64_t a2, const void *a3)
{
  _QWORD *DerivedStorage;
  uint64_t v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointAggregate <= 50
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 100) == 3)
  {
    APSLogErrorAt();
    v6 = 4294950570;
  }
  else if (*((_DWORD *)DerivedStorage + 10))
  {
    if (a1)
      CFRetain(a1);
    if (a3)
      CFRetain(a3);
    APSDispatchAsyncFHelper();
    v6 = 0;
  }
  else
  {
    APSLogErrorAt();
    v6 = 4294949690;
  }
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return v6;
}

uint64_t endpointAggregate_copyActivationOptionsToStorage(uint64_t a1, char a2, const void *a3, int a4, int a5)
{
  uint64_t DerivedStorage;
  const void *v11;
  const void *v12;
  __CFDictionary *MutableCopy;
  _BOOL4 v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  int v20;
  uint64_t Int64;
  const __CFAllocator *v22;
  __CFDictionary *Mutable;
  int v24;
  __CFDictionary *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void **v29;
  const void *v30;
  const void *v31;
  uint64_t SharedContext;
  uint64_t v33;
  void *v34;
  uint64_t AudioStreamOptions;
  unsigned int v36;
  unsigned int v37;
  const void *v38;
  void *v39;
  char v40;
  uint64_t GroupID;
  const void *v42;
  CFTypeRef v43;
  uint64_t v44;
  uint64_t v45;
  const void *v46;
  const void *v47;
  CFTypeRef v48;
  uint64_t v50;
  char v51;
  CFTypeRef cf;
  CFTypeRef v53;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v53 = 0;
  v11 = *(const void **)(DerivedStorage + 112);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v51 = a2;
  if (a3)
  {
    v12 = (const void *)*MEMORY[0x1E0CA3748];
    if (CFDictionaryContainsKey((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E0CA3748]))
    {
      MutableCopy = (__CFDictionary *)CFRetain(a3);
    }
    else
    {
      v17 = (const void *)APSCreateNewUUIDString();
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, (CFDictionaryRef)a3);
      CFDictionaryAddValue(MutableCopy, v12, v17);
      if (v17)
        CFRelease(v17);
    }
    *(_QWORD *)(DerivedStorage + 112) = MutableCopy;
    v18 = CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E0CA3760]);
    v15 = CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E0CA3770]);
    v14 = CFDictionaryGetInt64() != 0;
    v16 = *(const void **)(DerivedStorage + 64);
    *(_QWORD *)(DerivedStorage + 64) = v18;
    if (v18)
      CFRetain(v18);
  }
  else
  {
    v14 = 0;
    v15 = 0;
    *(_QWORD *)(DerivedStorage + 112) = 0;
    v16 = *(const void **)(DerivedStorage + 64);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  if (v16)
    CFRelease(v16);
  v19 = *(const void **)(DerivedStorage + 72);
  *(_QWORD *)(DerivedStorage + 72) = v15;
  if (v15)
    CFRetain(v15);
  if (v19)
    CFRelease(v19);
  if (!a4)
  {
    v34 = 0;
    AudioStreamOptions = 0;
    Mutable = 0;
    v25 = 0;
    goto LABEL_78;
  }
  v20 = FigCFEqual();
  Int64 = APSSettingsGetInt64();
  v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v34 = 0;
    v25 = 0;
    AudioStreamOptions = 4294950575;
    goto LABEL_78;
  }
  v50 = a1;
  v24 = a5;
  v25 = CFDictionaryCreateMutable(v22, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v26 = (const void *)*MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(v25, CFSTR("IsSharedAudioEngine"), (const void *)*MEMORY[0x1E0C9AE50]);
  v27 = (const void *)*MEMORY[0x1E0C9AE40];
  if (v14)
    v28 = v26;
  else
    v28 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(v25, CFSTR("IsHTGroup"), v28);
  v29 = (const void **)MEMORY[0x1E0CF74F8];
  if (Int64)
    v29 = (const void **)MEMORY[0x1E0CF74E8];
  CFDictionarySetValue(Mutable, CFSTR("PreferredNetworkClockType"), *v29);
  CFDictionarySetValue(Mutable, CFSTR("AllowP2PForNTP"), v26);
  if (v20)
    v30 = v26;
  else
    v30 = v27;
  CFDictionarySetValue(Mutable, CFSTR("IgnoreClientPIDForMediaRemote"), v30);
  CFDictionarySetValue(Mutable, CFSTR("AudioEngineOptions"), v25);
  v31 = *(const void **)(DerivedStorage + 440);
  if (v31)
    CFDictionarySetValue(Mutable, CFSTR("NetworkClock"), v31);
  SharedContext = APEndpointCopyFromActivationOptionsOrCreateSharedContext((const __CFDictionary *)a3, v51, (uint64_t)Mutable, (unint64_t)&cf, 0, (__CFDictionary **)&v53);
  if ((_DWORD)SharedContext)
  {
    AudioStreamOptions = SharedContext;
    goto LABEL_97;
  }
  if (v24)
  {
    v33 = CMBaseObjectGetDerivedStorage();
    if (*(_DWORD *)(v33 + 400) || (v36 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 480), v36 > 0xD))
    {
      LOBYTE(v37) = 1;
      if (!a3)
        goto LABEL_45;
    }
    else
    {
      v37 = (0x1F6Fu >> v36) & 1;
      if (!a3)
        goto LABEL_45;
    }
    v38 = CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("GroupID"));
    if (v38)
    {
      v39 = (void *)CFRetain(v38);
      value = v39;
      if (v39)
        goto LABEL_51;
      if ((v37 & 1) == 0)
      {
LABEL_46:
        GroupID = endpointAggregate_generateGroupID(v50, (uint64_t *)&value);
        if (!(_DWORD)GroupID)
        {
          v40 = 1;
          v34 = value;
          goto LABEL_52;
        }
        AudioStreamOptions = GroupID;
        APSLogErrorAt();
        if (value)
          CFRelease(value);
LABEL_97:
        APSLogErrorAt();
        v34 = 0;
        goto LABEL_78;
      }
LABEL_42:
      if (*(_DWORD *)(v33 + 400) == 2
        && (endpointAggregate_isATVInHTGroup()
         || endpointAggregate_isPersistentConnection() && *(_DWORD *)(v33 + 480) == 7))
      {
        v34 = 0;
        v40 = 1;
        goto LABEL_52;
      }
      v39 = (void *)APSCreateNewUUIDString();
      value = v39;
      if (!v39)
      {
        APSLogErrorAt();
        AudioStreamOptions = 4294950575;
        goto LABEL_97;
      }
LABEL_51:
      v34 = v39;
      v40 = 0;
LABEL_52:
      if (gLogCategory_APEndpointAggregate <= 50
        && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v42 = *(const void **)(DerivedStorage + 88);
      *(_QWORD *)(DerivedStorage + 88) = v34;
      if (v34)
        CFRetain(v34);
      if (v42)
        CFRelease(v42);
      *(_BYTE *)(DerivedStorage + 96) = v40;
      goto LABEL_61;
    }
LABEL_45:
    value = 0;
    if ((v37 & 1) == 0)
      goto LABEL_46;
    goto LABEL_42;
  }
  v34 = 0;
LABEL_61:
  v43 = cf;
  v44 = CMBaseObjectGetDerivedStorage();
  value = 0;
  if (!*(_BYTE *)(v44 + 448))
    goto LABEL_69;
  v45 = v44;
  if (*(_DWORD *)(v44 + 480) != 4
    || (v46 = (const void *)*MEMORY[0x1E0CA4890],
        CFDictionaryContainsKey(*(CFDictionaryRef *)(v44 + 104), (const void *)*MEMORY[0x1E0CA4890])))
  {
    AudioStreamOptions = 0;
  }
  else
  {
    AudioStreamOptions = APEndpointCreateAudioStreamOptions((uint64_t)v46, (uint64_t)v43, v25);
    if ((_DWORD)AudioStreamOptions)
      APSLogErrorAt();
    else
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v45 + 104), v46, value);
  }
  if (value)
    CFRelease(value);
  if ((_DWORD)AudioStreamOptions)
  {
    APSLogErrorAt();
  }
  else
  {
LABEL_69:
    CFDictionaryMergeDictionary();
    if (gLogCategory_APEndpointAggregate <= 50
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v47 = *(const void **)(DerivedStorage + 80);
    v48 = cf;
    *(_QWORD *)(DerivedStorage + 80) = cf;
    if (v48)
      CFRetain(v48);
    if (v47)
      CFRelease(v47);
    AudioStreamOptions = 0;
  }
LABEL_78:
  if (cf)
    CFRelease(cf);
  if (v34)
    CFRelease(v34);
  if (v53)
    CFRelease(v53);
  if (v25)
    CFRelease(v25);
  if (Mutable)
    CFRelease(Mutable);
  return AudioStreamOptions;
}

uint64_t endpointAggregate_handleAuthRequiredInternal(const void *a1, uint64_t a2, uint64_t a3, const void *a4, const void *a5, uint64_t a6, uint64_t a7)
{
  _QWORD *DerivedStorage;
  uint64_t v13;
  _QWORD *v14;
  CFTypeRef v15;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (DerivedStorage[23])
  {
    if (DerivedStorage[31] && (v13 = FigCFWeakReferenceHolderCopyReferencedObject(), DerivedStorage[31]) && !v13)
    {
      if (gLogCategory_APEndpointAggregate <= 90
        && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      v14 = malloc_type_calloc(1uLL, 0x18uLL, 0xA00402214FCE6uLL);
      if (a1)
        v15 = CFRetain(a1);
      else
        v15 = 0;
      *v14 = v15;
      v14[1] = a6;
      v14[2] = a7;
      if (a4)
        CFRetain(a4);
      if (a1)
        CFRetain(a1);
      if (a5)
        CFRetain(a5);
      APSDispatchAsyncFHelper();
    }
  }
  return MEMORY[0x1CAA400E4](*DerivedStorage);
}

uint64_t endpointAggregate_handleConnectedStateChangedInternal(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  _QWORD *DerivedStorage;
  uint64_t v8;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (DerivedStorage[25])
  {
    if (DerivedStorage[31] && (v8 = FigCFWeakReferenceHolderCopyReferencedObject(), DerivedStorage[31]) && !v8)
    {
      if (gLogCategory_APEndpointAggregate <= 90
        && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      if (a5)
        CFRetain(a5);
      if (a1)
        CFRetain(a1);
      APSDispatchAsyncFHelper();
    }
  }
  return MEMORY[0x1CAA400E4](*DerivedStorage);
}

void endpointAggregate_handleFailedInternal(const void *a1, uint64_t a2, const __CFDictionary *a3, const void *a4)
{
  _QWORD *DerivedStorage;
  uint64_t v8;
  __CFDictionary *MutableCopy;
  __CFDictionary *v10;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (!DerivedStorage[24])
    goto LABEL_18;
  if (DerivedStorage[31])
  {
    v8 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (DerivedStorage[31])
    {
      if (!v8)
      {
        if (gLogCategory_APEndpointAggregate <= 90
          && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
LABEL_18:
        JUMPOUT(0x1CAA400E4);
      }
    }
  }
  if (a3)
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, a3);
  else
    MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v10 = MutableCopy;
  if (!MutableCopy)
  {
    APSLogErrorAt();
    goto LABEL_18;
  }
  CFDictionaryAddValue(MutableCopy, (const void *)*MEMORY[0x1E0CA3788], a1);
  CFDictionarySetInt64();
  if (a4)
    CFRetain(a4);
  CFRetain(v10);
  APSDispatchAsyncFHelper();
  MEMORY[0x1CAA400E4](*DerivedStorage);
  CFRelease(v10);
}

uint64_t endpointAggregate_handleDidReceiveDataFromCommChannelInternal(const void *a1, uint64_t a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t DerivedStorage;

  if (a1 && a3 && a4 && a5)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x1CAA400CC](*(_QWORD *)DerivedStorage);
    if (!*(_BYTE *)(DerivedStorage + 44)
      && *(_DWORD *)(DerivedStorage + 40) == 2
      && endpointAggregate_getSubEndpointCount((uint64_t)a5, 1) > 0
      && CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 8), a1))
    {
      if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 168), a3))
      {
        if (gLogCategory_APEndpointAggregate <= 50
          && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 168), a3, a1);
      }
      APEndpointCallRCDelegateDidReceiveDataAsync(a5, *(_QWORD *)(DerivedStorage + 120), a3, a4, *(NSObject **)(DerivedStorage + 392), *(_QWORD *)(DerivedStorage + 232), *(_QWORD *)(DerivedStorage + 256));
    }
    else
    {
      APSLogErrorAt();
    }
    JUMPOUT(0x1CAA400E4);
  }
  return APSLogErrorAt();
}

uint64_t endpointAggregate_handleDidCloseCommChannelInternal(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;

  if (a1 && a3 && a4)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x1CAA400CC](*(_QWORD *)DerivedStorage);
    if (*(_BYTE *)(DerivedStorage + 44))
      APSLogErrorAt();
    else
      endpointAggregate_unregisterCommChannelAndNotifyClientIfNeeded(a4, a3);
    JUMPOUT(0x1CAA400E4);
  }
  return APSLogErrorAt();
}

void endpointAggregate_activateInternal(uint64_t a1)
{
  CFTypeRef v2;
  _QWORD *DerivedStorage;
  uint64_t v4;
  const void *v5;
  const void *v6;

  v2 = *(CFTypeRef *)a1;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(a1 + 32))
  {
    APSLogErrorAt();
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_9;
  }
  else
  {
    if (gLogCategory_APEndpointAggregate <= 50
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    MEMORY[0x1CAA400CC](*DerivedStorage);
    if (*(_QWORD *)(a1 + 16) == DerivedStorage[15] && *((_DWORD *)DerivedStorage + 10) == 1)
    {
      *((_DWORD *)DerivedStorage + 10) = 2;
      v4 = *(_QWORD *)(a1 + 8);
      DerivedStorage[6] = 0;
      DerivedStorage[7] = v4;
      endpointAggregate_ensureLocalPlaybackIsEnabledOrDisabled(v2);
      MEMORY[0x1CAA400E4](*DerivedStorage);
LABEL_9:
      if (gLogCategory_APEndpointAggregate <= 50
        && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_22;
    }
    MEMORY[0x1CAA400E4](*DerivedStorage);
    APSLogErrorAt();
  }
  if (gLogCategory_APEndpointAggregate <= 90
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (*(_QWORD *)(a1 + 16) == DerivedStorage[15] && *((_DWORD *)DerivedStorage + 10) == 1)
    endpointAggregate_clearActivationState(v2);
  MEMORY[0x1CAA400E4](*DerivedStorage);
LABEL_22:
  if (*(_QWORD *)(a1 + 40))
  {
    CFRetain(v2);
    APSDispatchAsyncFHelper();
  }
  CFRelease(*(CFTypeRef *)a1);
  v5 = *(const void **)(a1 + 24);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 56);
  if (v6)
    CFRelease(v6);
}

uint64_t endpointAggregate_isPersistentConnection()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 472);
  if (v1)
    return v1 == *MEMORY[0x1E0C9AE50];
  v1 = *(_QWORD *)(DerivedStorage + 464);
  if (v1)
    return v1 == *MEMORY[0x1E0C9AE50];
  if (*(_BYTE *)(DerivedStorage + 448))
    return APSIsMemberOfPersistentGroup();
  return 0;
}

void endpointAggregate_authHandlingCompletionCallbackInternal(int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  void (*v5)(_QWORD, uint64_t, uint64_t, _QWORD);

  v5 = (void (*)(_QWORD, uint64_t, uint64_t, _QWORD))a4[1];
  if (v5)
    v5(*a4, a2, a3, a4[2]);
  if (*a4)
    CFRelease((CFTypeRef)*a4);
  free(a4);
}

void endpointAggregate_callDelegateHandleAuthRequiredInternal(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 16))(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 40);
  if (v4)
    CFRelease(v4);
}

void endpointAggregate_callDelegateHandleConnectedStateChangedInternal(uint64_t a1)
{
  const void *v2;
  const void *v3;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 8))(*(_QWORD *)a1, *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40));
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

void endpointAggregate_callDelegateHandleFailedInternal(uint64_t a1)
{
  const void *v2;
  const void *v3;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 8))(*(_QWORD *)a1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    CFRelease(v3);
}

void endpointAggregate_clearActivationState(const void *a1)
{
  uint64_t DerivedStorage;
  char AllAudioFeatures;
  uint64_t v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  endpointAggregate_updateURLPlaybackSupportedState(a1);
  *(_BYTE *)(DerivedStorage + 160) = 0;
  endpointAggregate_ensureLocalPlaybackIsEnabledOrDisabled(a1);
  *(_DWORD *)(DerivedStorage + 40) = 0;
  AllAudioFeatures = APEndpointGetAllAudioFeatures(*(_QWORD *)(DerivedStorage + 48) | *(_QWORD *)(DerivedStorage + 56));
  endpointAggregate_destroyAggregateStreams((uint64_t)a1, AllAudioFeatures);
  endpointAggregate_unregisterCommChannelsForSubEndpointAndNotifyClientIfNeeded();
  v4 = CMBaseObjectGetDerivedStorage();
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v4 + 32));
  *(_BYTE *)(DerivedStorage + 96) = 0;
  *(_QWORD *)(DerivedStorage + 48) = 0;
  *(_QWORD *)(DerivedStorage + 56) = 0;
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 136));
  v5 = *(const void **)(DerivedStorage + 64);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 72);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 80);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 88);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 104));
  v9 = *(const void **)(DerivedStorage + 112);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
}

void endpointAggregate_deactivateInternal(uint64_t a1)
{
  CFTypeRef v2;
  _QWORD *DerivedStorage;

  v2 = *(CFTypeRef *)a1;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(a1 + 32))
  {
    APSLogErrorAt();
  }
  else
  {
    MEMORY[0x1CAA400CC](*DerivedStorage);
    if (*(_QWORD *)(a1 + 16) == DerivedStorage[15] && *((_DWORD *)DerivedStorage + 10))
    {
      endpointAggregate_clearActivationState(v2);
      MEMORY[0x1CAA400E4](*DerivedStorage);
    }
    else
    {
      MEMORY[0x1CAA400E4](*DerivedStorage);
      APSLogErrorAt();
    }
  }
  if (*(_QWORD *)(a1 + 40))
  {
    CFRetain(v2);
    APSDispatchAsyncFHelper();
  }
  CFRelease(*(CFTypeRef *)a1);
}

void endpointAggregate_updateFeaturesInternalWithContext(uint64_t a1)
{
  _QWORD *DerivedStorage;
  CFTypeRef v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int isPersistentConnection;
  const __CFAllocator *v14;
  __CFDictionary *MutableCopy;
  __CFDictionary *v16;
  const void **v17;
  const void *v18;
  _QWORD *v19;
  _QWORD *v20;
  const void *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  v3 = *(CFTypeRef *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(const void **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v24 = *(_QWORD *)(a1 + 32);
  v25 = 0;
  v7 = CMBaseObjectGetDerivedStorage();
  v8 = v7;
  v9 = *(_QWORD *)(v7 + 48);
  if (!v9)
    v9 = *(_QWORD *)(v7 + 56);
  v23 = v5;
  if (gLogCategory_APEndpointAggregate <= 50
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v10 = v9 | v4;
  if ((v9 | v4) == v9 && v10 == v4)
    goto LABEL_32;
  if (v10 != v9 && v10 != v4)
  {
    v22 = -6705;
LABEL_42:
    v25 = v22;
LABEL_32:
    CFRetain(v3);
    APSDispatchAsyncFHelper();
    if (v25)
      APSLogErrorAt();
    goto LABEL_34;
  }
  isPersistentConnection = endpointAggregate_isPersistentConnection();
  v25 = endpointAggregate_copyActivationOptionsToStorage((uint64_t)v3, v4, v6, (v9 | v4) != v9, isPersistentConnection);
  if (v25)
  {
    APSLogErrorAt();
    goto LABEL_32;
  }
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    APSLogErrorAt();
    v22 = -16721;
    goto LABEL_42;
  }
  v16 = MutableCopy;
  v17 = (const void **)MEMORY[0x1E0C9AE50];
  if (*(_DWORD *)(v8 + 400) != 2)
    v17 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(MutableCopy, CFSTR("IsPartOfCluster"), *v17);
  if (v10 == v9)
  {
    v18 = 0;
  }
  else
  {
    v18 = (const void *)CFStringCreateF();
    CFDictionarySetValue(v16, CFSTR("ParentContextID"), v18);
  }
  CFDictionarySetValue(v16, CFSTR("AudioOptions"), *(const void **)(v8 + 104));
  *(_QWORD *)(v8 + 48) = v4;
  v19 = malloc_type_calloc(1uLL, 0x40uLL, 0x10A00407E6BCD4EuLL);
  if (v19)
  {
    v20 = v19;
    *v19 = v3;
    CFRetain(v3);
    v20[1] = v4;
    v20[2] = *(_QWORD *)(v8 + 120);
    *((_DWORD *)v20 + 6) = 0;
    v20[4] = v23;
    v20[5] = v24;
    v20[6] = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v20[7] = CFDictionaryGetCount(*(CFDictionaryRef *)(v8 + 8));
    if (gLogCategory_APEndpointAggregate <= 50
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFDictionaryApplyBlock();
  }
  else
  {
    APSLogErrorAt();
    v25 = -6728;
  }
  CFRelease(v16);
  if (v18)
    CFRelease(v18);
  if (v25)
    goto LABEL_32;
LABEL_34:
  MEMORY[0x1CAA400E4](*DerivedStorage);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v21 = *(const void **)(a1 + 16);
  if (v21)
    CFRelease(v21);
}

void __endpointAggregate_updateFeaturesInternal_block_invoke(_QWORD *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(const void *, uint64_t, uint64_t, _QWORD, uint64_t);
  int v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD block[8];
  int v14;

  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = *(uint64_t (**)(const void *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 80);
  if (v7)
    v8 = v7(a2, v4, v5, endpointaggregate_handleSubEndpointUpdateFeaturesCompleted, v6);
  else
    v8 = -12782;
  if (gLogCategory_APEndpointAggregate <= 50
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v8 == -12782)
  {
    if (a2)
      CFRetain(a2);
    v9 = a1[8];
    v10 = *(NSObject **)(v9 + 392);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __endpointAggregate_updateFeaturesInternal_block_invoke_2;
    block[3] = &__block_descriptor_tmp_139;
    v11 = a1[4];
    block[4] = a2;
    block[5] = v11;
    v14 = -12782;
    v12 = a1[6];
    block[6] = v9;
    block[7] = v12;
    dispatch_async(v10, block);
  }
}

void endpointaggregate_handleSubEndpointUpdateFeaturesCompleted(const void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  NSObject *v11;
  _QWORD block[8];
  int v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  v11 = *(NSObject **)(DerivedStorage + 392);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __endpointaggregate_handleSubEndpointUpdateFeaturesCompleted_block_invoke;
  block[3] = &__block_descriptor_tmp_141;
  block[4] = a1;
  block[5] = a2;
  v13 = a4;
  block[6] = a3;
  block[7] = a5;
  dispatch_async(v11, block);
}

void __endpointAggregate_updateFeaturesInternal_block_invoke_2(uint64_t a1)
{
  const void *v2;

  endpointaggregate_handleSubEndpointUpdateFeaturesCompletedInternal(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

void endpointaggregate_handleSubEndpointUpdateFeaturesCompletedInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *DerivedStorage;
  const void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  _OWORD v14[2];
  __int128 v15;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointAggregate <= 50
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFDictionarySetInt64();
  if (CFDictionaryGetCount(*(CFDictionaryRef *)(a3 + 48)) == *(_QWORD *)(a3 + 56))
  {
    v15 = 0u;
    memset(v14, 0, sizeof(v14));
    v10 = 0;
    v11 = &v10;
    v12 = 0x2000000000;
    v13 = 0;
    v6 = 0;
    v7 = &v6;
    v8 = 0x2000000000;
    v9 = 0;
    CFDictionaryApplyBlock();
    MEMORY[0x1CAA400CC](*DerivedStorage);
    if (gLogCategory_APEndpointAggregate <= 50
      && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (*((_BYTE *)v7 + 24))
    {
      *((_DWORD *)v11 + 6) = 0;
    }
    else if (*((_DWORD *)v11 + 6))
    {
      goto LABEL_17;
    }
    DerivedStorage[7] = *(_QWORD *)(a3 + 8);
LABEL_17:
    DerivedStorage[6] = 0;
    MEMORY[0x1CAA400E4](*DerivedStorage);
    *(_QWORD *)&v14[0] = CFRetain(*(CFTypeRef *)a3);
    *(int8x16_t *)((char *)v14 + 8) = vextq_s8(*(int8x16_t *)(a3 + 8), *(int8x16_t *)(a3 + 8), 8uLL);
    DWORD2(v14[1]) = *((_DWORD *)v11 + 6);
    v15 = *(_OWORD *)(a3 + 32);
    APSDispatchAsyncFHelper();
    if (*(_QWORD *)a3)
      CFRelease(*(CFTypeRef *)a3);
    v5 = *(const void **)(a3 + 48);
    if (v5)
      CFRelease(v5);
    free((void *)a3);
    _Block_object_dispose(&v6, 8);
    _Block_object_dispose(&v10, 8);
    return;
  }
  if (gLogCategory_APEndpointAggregate <= 50
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void __endpointaggregate_handleSubEndpointUpdateFeaturesCompleted_block_invoke(uint64_t a1)
{
  const void *v2;

  endpointaggregate_handleSubEndpointUpdateFeaturesCompletedInternal(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

uint64_t __endpointaggregate_handleSubEndpointUpdateFeaturesCompletedInternal_block_invoke(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  BOOL v4;

  result = FigCFNumberGetUInt64();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_DWORD *)(v3 + 24))
    v4 = 1;
  else
    v4 = (_DWORD)result == 0;
  if (v4)
  {
    if (!(_DWORD)result)
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    *(_DWORD *)(v3 + 24) = result;
  }
  return result;
}

uint64_t endpointAggregate_BorrowScreen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return endpointAggregate_borrowOrUnborrowScreen(a1, a2, a3, 0);
}

uint64_t endpointAggregate_UnborrowScreen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return endpointAggregate_borrowOrUnborrowScreen(a1, a2, a3, 1);
}

uint64_t endpointAggregate_DuckAudio(uint64_t a1, const __CFDictionary *a2)
{
  _QWORD *DerivedStorage;
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  CFIndex v9;
  const void *ValueAtIndex;
  const void *v11;
  uint64_t (*v12)(const void *, const __CFDictionary *);
  uint64_t v13;
  const void *v14;
  uint64_t v15;

  FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointAggregate <= 50
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (!a2)
  {
    v15 = 4294950576;
LABEL_33:
    APSLogErrorAt();
    MEMORY[0x1CAA400E4](*DerivedStorage);
    return v15;
  }
  if (!CFDictionaryContainsKey(a2, (const void *)*MEMORY[0x1E0CA3980]))
  {
    v15 = 4294950576;
    goto LABEL_33;
  }
  if (*((_DWORD *)DerivedStorage + 10) != 2)
  {
    v15 = 4294951716;
    goto LABEL_33;
  }
  v4 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  if (!v4)
  {
    v15 = 4294950575;
    goto LABEL_33;
  }
  v5 = v4;
  Count = CFArrayGetCount(v4);
  if (Count < 1)
  {
LABEL_21:
    v14 = (const void *)DerivedStorage[42];
    DerivedStorage[42] = a2;
    CFRetain(a2);
    if (v14)
      CFRelease(v14);
    v15 = 0;
  }
  else
  {
    v7 = Count;
    for (i = 0; i != v7; ++i)
    {
      if (CFArrayGetValueAtIndex(v5, i))
      {
        FigEndpointExtendedGetClassID();
        if (CMBaseObjectIsMemberOfClass())
          continue;
      }
      APSLogErrorAt();
      v15 = 4294950570;
      goto LABEL_25;
    }
    v9 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v5, v9);
      if (!ValueAtIndex
        || (v11 = ValueAtIndex, FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass()))
      {
        v11 = 0;
      }
      v12 = *(uint64_t (**)(const void *, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24)
                                                                           + 48);
      if (!v12)
      {
        v15 = 4294954514;
        goto LABEL_28;
      }
      v13 = v12(v11, a2);
      if ((_DWORD)v13)
        break;
      if (v7 == ++v9)
        goto LABEL_21;
    }
    v15 = v13;
LABEL_28:
    APSLogErrorAt();
  }
LABEL_25:
  MEMORY[0x1CAA400E4](*DerivedStorage);
  CFRelease(v5);
  return v15;
}

uint64_t endpointAggregate_SendCommand(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, _QWORD, uint64_t), uint64_t a5)
{
  _QWORD *DerivedStorage;
  const __CFArray *v11;
  const __CFArray *v12;
  CFIndex Count;
  CFIndex v14;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v17;
  void (*v18)(const void *, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v19;

  FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 10) != 2)
  {
    v19 = 4294951716;
LABEL_19:
    APSLogErrorAt();
    v12 = 0;
    goto LABEL_12;
  }
  v11 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  if (!v11)
  {
    v19 = 4294950575;
    goto LABEL_19;
  }
  v12 = v11;
  Count = CFArrayGetCount(v11);
  if (Count >= 1)
  {
    v14 = Count;
    for (i = 0; i != v14; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v12, i);
      if (!ValueAtIndex
        || (v17 = ValueAtIndex, FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass()))
      {
        v17 = 0;
      }
      v18 = *(void (**)(const void *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 24)
                                                                                  + 72);
      if (v18)
        v18(v17, a2, a3, 0, 0);
    }
  }
  v19 = 0;
LABEL_12:
  MEMORY[0x1CAA400E4](*DerivedStorage);
  if (a4)
    a4(a1, v19, 0, a5);
  if (v12)
    CFRelease(v12);
  return v19;
}

uint64_t endpointAggregate_SendData(const void *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t FigEndpoint;
  uint64_t DerivedStorage;
  const void *v12;
  _QWORD *RCSendDataCompletionContext;
  _QWORD *v14;
  void (*v15)(const void *, const void *, uint64_t, void (*)(uint64_t, uint64_t, int, uint64_t), _QWORD *);
  int v17;

  FigEndpoint = FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = endpointAggregate_copySubEndpointExtendedForRelayCommChannel(FigEndpoint, a2);
  if (v12)
  {
    RCSendDataCompletionContext = APEndpointCreateRCSendDataCompletionContext(a1, a2, *(NSObject **)(DerivedStorage + 392), a4, a5);
    if (RCSendDataCompletionContext)
    {
      v14 = RCSendDataCompletionContext;
      v15 = *(void (**)(const void *, const void *, uint64_t, void (*)(uint64_t, uint64_t, int, uint64_t), _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 96);
      if (v15)
        v15(v12, a2, a3, APEndpointCallRCSendDataCompletionFromContextAsync, v14);
LABEL_5:
      CFRelease(v12);
      return 0;
    }
    v17 = -16721;
  }
  else
  {
    v17 = -16725;
  }
  APSLogErrorAt();
  if (a4)
    APEndpointCallRCSendDataCompletionAsync(a1, a2, v17, *(dispatch_queue_t *)(DerivedStorage + 392), a4, a5);
  if (v12)
    goto LABEL_5;
  return 0;
}

uint64_t endpointAggregate_CloseCommChannel(uint64_t a1, const void *a2)
{
  uint64_t FigEndpoint;
  const void *v4;
  const void *v5;
  uint64_t (*v6)(const void *, const void *);
  uint64_t v7;

  FigEndpoint = FigEndpointExtendedGetFigEndpoint();
  v4 = endpointAggregate_copySubEndpointExtendedForRelayCommChannel(FigEndpoint, a2);
  if (!v4)
    return 4294950571;
  v5 = v4;
  v6 = *(uint64_t (**)(const void *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 104);
  if (!v6)
  {
    v7 = 4294954514;
LABEL_6:
    APSLogErrorAt();
    goto LABEL_7;
  }
  v7 = v6(v5, a2);
  if ((_DWORD)v7)
    goto LABEL_6;
LABEL_7:
  CFRelease(v5);
  return v7;
}

uint64_t endpointAggregate_AcquireAndCopyResource(uint64_t a1, uint64_t a2, const __CFDictionary *a3, _QWORD *a4)
{
  _QWORD *DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  const __CFDictionary *v11;
  const void *Value;
  CFTypeRef v13;
  CFTypeRef v14;
  uint64_t v15;

  FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointAggregate <= 50
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 10) == 2)
  {
    if (FigCFEqual())
    {
      v7 = CMBaseObjectGetDerivedStorage();
      if (a3 && (v8 = v7, (v9 = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA3718])) != 0))
      {
        v10 = v9;
        v11 = *(const __CFDictionary **)(v8 + 128);
        if (v11 && (Value = CFDictionaryGetValue(v11, v10)) != 0 && (v13 = CFRetain(Value)) != 0)
        {
          v14 = v13;
          if (gLogCategory_APEndpointAggregate <= 50
            && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v15 = 0;
          *a4 = v14;
        }
        else
        {
          APSLogErrorAt();
          v15 = 4294950571;
        }
      }
      else
      {
        APSLogErrorAt();
        v15 = 4294950576;
      }
    }
    else
    {
      if (gLogCategory_APEndpointAggregate <= 90
        && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v15 = 4294950570;
    }
  }
  else
  {
    v15 = 4294949690;
  }
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return v15;
}

uint64_t endpointAggregate_RelinquishResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *DerivedStorage;
  uint64_t v5;

  FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointAggregate <= 50
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 10) != 2)
  {
    v5 = 4294949690;
LABEL_13:
    APSLogErrorAt();
    goto LABEL_9;
  }
  if (!a3)
  {
    v5 = 4294950576;
    goto LABEL_13;
  }
  if (!FigCFEqual())
  {
    v5 = 4294950570;
    goto LABEL_13;
  }
  v5 = 0;
LABEL_9:
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return v5;
}

void endpointAggregate_CloseAllCommChannels()
{
  _QWORD *DerivedStorage;
  const __CFArray *v1;

  FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  v1 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  MEMORY[0x1CAA400E4](*DerivedStorage);
  if (v1)
  {
    CFArrayGetCount(v1);
    CFArrayApplyBlock();
    CFRelease(v1);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t endpointAggregate_borrowOrUnborrowScreen(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t FigEndpoint;
  _QWORD *DerivedStorage;
  const void *FirstSubEndpointActivatedForFeatures;
  const void *v10;
  uint64_t v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;

  FigEndpoint = FigEndpointExtendedGetFigEndpoint();
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 100) != 2)
  {
    APSLogErrorAt();
    v13 = 4294950570;
    goto LABEL_16;
  }
  if (*((_DWORD *)DerivedStorage + 10) != 2)
  {
    APSLogErrorAt();
    v13 = 4294951716;
    goto LABEL_16;
  }
  FirstSubEndpointActivatedForFeatures = endpointAggregate_getFirstSubEndpointActivatedForFeatures(FigEndpoint, 1);
  if (!FirstSubEndpointActivatedForFeatures
    || (v10 = FirstSubEndpointActivatedForFeatures,
        FigEndpointExtendedGetClassID(),
        !CMBaseObjectIsMemberOfClass()))
  {
    APSLogErrorAt();
    v13 = 4294949690;
    goto LABEL_16;
  }
  v11 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
  if (a4)
  {
    v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v11 + 24);
    if (v12)
      goto LABEL_7;
  }
  else
  {
    v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v11 + 16);
    if (v12)
    {
LABEL_7:
      v13 = v12(v10, a2, a3);
      if (!(_DWORD)v13)
        goto LABEL_16;
      goto LABEL_12;
    }
  }
  v13 = 4294954514;
LABEL_12:
  APSLogErrorAt();
  if (gLogCategory_APEndpointAggregate <= 90
    && (gLogCategory_APEndpointAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_16:
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return v13;
}

const void *endpointAggregate_copySubEndpointExtendedForRelayCommChannel(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;
  const void *Value;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 10) == 2)
  {
    Value = CFDictionaryGetValue((CFDictionaryRef)DerivedStorage[21], a2);
    if (Value)
    {
      FigEndpointExtendedGetClassID();
      if (!CMBaseObjectIsMemberOfClass())
        Value = 0;
      CFRetain(Value);
    }
    else
    {
      APSLogErrorAt();
    }
  }
  else
  {
    APSLogErrorAt();
    Value = 0;
  }
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return Value;
}

uint64_t endpointAggregate_AddEndpoint(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *DerivedStorage;
  uint64_t v11;

  FigEndpointAggregateGetFigEndpoint();
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  v11 = endpointAggregate_addEndpointInternal(a1, a2, a3, a4, a5);
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return v11;
}

uint64_t endpointAggregate_RemoveEndpoint(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *DerivedStorage;
  uint64_t v10;

  FigEndpointAggregateGetFigEndpoint();
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*DerivedStorage);
  v10 = endpointAggregate_removeEndpointInternal(a1, a2, a4, a5);
  MEMORY[0x1CAA400E4](*DerivedStorage);
  return v10;
}

uint64_t APEndpointStreamCarPlayAudioCreate(const __CFAllocator *a1, uint64_t a2, const void *a3, const void *a4, const void *a5, const __CFDictionary *a6, const void *a7, const void *a8, const void *a9, const void *a10, CFTypeRef *a11)
{
  uint64_t v17;
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v20)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v21;
  CFTypeRef v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t UpTimeNanoseconds;
  int v26;
  CFTypeRef *v27;
  char v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  char v35;
  uint64_t v36;
  void (*v37)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v38;
  void (*v39)(uint64_t, const __CFString *, uint64_t, CFStringRef *);
  int v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  uint64_t v46;
  void (*v47)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  uint64_t v48;
  void (*v49)(uint64_t, const __CFString *, uint64_t, CFStringRef *);
  const __CFString *v50;
  int v51;
  char IntWithDefault;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  dispatch_queue_t v58;
  dispatch_queue_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  CFStringRef theString;
  CFTypeRef v67;
  CFTypeRef cf;
  CFTypeRef v69;
  CFDictionaryRef v70;
  CFStringRef theString1;
  CFDictionaryRef theDict;
  char label[16];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v69 = 0;
  theString = 0;
  v67 = 0;
  v75 = 0u;
  v76 = 0u;
  *(_OWORD *)label = 0u;
  v74 = 0u;
  if (!a2 || !a3 || !a5 || !a8 || !a7 || !a10 || !a9 || !a11)
  {
    APSLogErrorAt();
    v31 = 4294950536;
    goto LABEL_87;
  }
  FigEndpointStreamGetClassID();
  v17 = CMDerivedObjectCreate();
  if ((_DWORD)v17)
  {
    v31 = v17;
    goto LABEL_15;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)DerivedStorage = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_QWORD *)(DerivedStorage + 24) = CFRetain(a3);
  *(_QWORD *)(DerivedStorage + 32) = CFRetain(a4);
  *(_QWORD *)(DerivedStorage + 40) = CFRetain(a5);
  *(_QWORD *)(DerivedStorage + 96) = CFRetain(a8);
  *(_QWORD *)(DerivedStorage + 8) = CFRetain(a7);
  *(_QWORD *)(DerivedStorage + 16) = CFRetain(a10);
  *(_QWORD *)(DerivedStorage + 104) = CFRetain(a9);
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(a7);
  v20 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
  if (!v20)
  {
    v31 = 4294954514;
    goto LABEL_15;
  }
  v21 = v20(CMBaseObject, CFSTR("DeviceID"), a1, &cf);
  if ((_DWORD)v21)
  {
    v31 = v21;
    goto LABEL_15;
  }
  v22 = cf;
  v23 = *(_QWORD *)(DerivedStorage + 32);
  v24 = *(_QWORD *)(DerivedStorage + 40);
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  *(_QWORD *)(DerivedStorage + 48) = CFStringCreateWithFormat(a1, 0, CFSTR("%@-%@-%@-%llu"), v22, v23, v24, UpTimeNanoseconds);
  v26 = CFEqual(a5, (CFTypeRef)*MEMORY[0x1E0CA4858]);
  v27 = (CFTypeRef *)MEMORY[0x1E0CA4860];
  if (v26)
  {
    v28 = 1;
    v29 = 1835100526;
    v30 = 1;
  }
  else if (CFEqual(a5, (CFTypeRef)*MEMORY[0x1E0CA4838]))
  {
    v28 = 0;
    v30 = 1;
    v29 = 1634497568;
  }
  else if (CFEqual(a5, (CFTypeRef)*MEMORY[0x1E0CA4840]))
  {
    v28 = 0;
    v30 = 1;
    v29 = 1635088495;
  }
  else
  {
    if (!CFEqual(a5, *v27))
    {
      v31 = 4294950536;
      goto LABEL_15;
    }
    v30 = 0;
    v28 = 1;
    v29 = 1869575779;
  }
  *(_DWORD *)(DerivedStorage + 68) = v29;
  *(_BYTE *)(DerivedStorage + 72) = v28;
  *(_BYTE *)(DerivedStorage + 73) = v30;
  if (APSSettingsGetInt64())
  {
    theDict = 0;
    v32 = *MEMORY[0x1E0C9AE00];
    v33 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 8));
    v34 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
    if (v34)
      v34(v33, CFSTR("HeadUnitRestrictions"), v32, &theDict);
    if (!theDict)
    {
      APSLogErrorAt();
      v31 = 0;
      goto LABEL_87;
    }
    v35 = CFDictionaryContainsKey(theDict, CFSTR("kAPCarPlay_ClockUnstable")) == 0;
  }
  else
  {
    v32 = *MEMORY[0x1E0C9AE00];
    v36 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 8));
    v37 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v37)
      v37(v36, CFSTR("Manufacturer"), v32, &v67);
    v38 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 8));
    v39 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v39)
      v39(v38, CFSTR("Model"), v32, &theString);
    v40 = FigCFEqual();
    v41 = 0;
    if (v40 && theString)
      v41 = CFStringFind(theString, CFSTR("NBTEvo"), 0).location != -1;
    v35 = !v41;
  }
  v42 = APAudioZeroTimeStampProviderCreate(2.017, (uint64_t)a1, v35, (uint64_t *)(DerivedStorage + 56));
  if ((_DWORD)v42)
  {
    v31 = v42;
    goto LABEL_15;
  }
  v43 = CMBaseObjectGetDerivedStorage();
  theString1 = 0;
  theDict = 0;
  if (APSSettingsGetInt64())
  {
    v70 = 0;
    v44 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v43 + 8));
    v45 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
    if (v45 && (v45(v44, CFSTR("HeadUnitRestrictions"), v32, &v70), v70))
      CFDictionaryContainsKey(v70, CFSTR("kAPCarPlay_DisableTimestampSmoothing"));
    else
      APSLogErrorAt();
  }
  else
  {
    v46 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v43 + 8));
    v47 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
    if (v47)
      v47(v46, CFSTR("Manufacturer"), v32, &theDict);
    v48 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v43 + 8));
    v49 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v49)
    {
      v49(v48, CFSTR("Model"), v32, &theString1);
      v50 = (const __CFString *)theDict;
      if (theDict)
      {
        if (theString1)
        {
          if (gLogCategory_APEndpointStreamCarPlayAudio <= 30)
          {
            if (gLogCategory_APEndpointStreamCarPlayAudio != -1
              || (v51 = _LogCategory_Initialize(), v50 = (const __CFString *)theDict, v51))
            {
              LogPrintF();
              v50 = (const __CFString *)theDict;
            }
          }
          if ((CFStringCompare(v50, CFSTR("SUZUKI"), 0) == kCFCompareEqualTo
             && CFStringCompare(theString1, CFSTR("Suzuki Harman MY15SN"), 0) == kCFCompareEqualTo
             || CFStringCompare((CFStringRef)theDict, CFSTR("JBL"), 0) == kCFCompareEqualTo
             && CFStringCompare(theString1, CFSTR("Legend CP100"), 0) == kCFCompareEqualTo)
            && gLogCategory_APEndpointStreamCarPlayAudio <= 50
            && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
      }
    }
  }
  IntWithDefault = APSSettingsGetIntWithDefault();
  if (theDict)
    CFRelease(theDict);
  if (theString1)
    CFRelease(theString1);
  *(_BYTE *)(DerivedStorage + 64) = IntWithDefault;
  if (gLogCategory_APEndpointStreamCarPlayAudio <= 50
    && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_QWORD *)(DerivedStorage + 392) = 0;
  *(_QWORD *)(DerivedStorage + 488) = 0;
  CMBaseObjectGetDerivedStorage();
  if (a6)
    CFDictionaryGetValue(a6, CFSTR("EventRecorder"));
  if (FigCFEqual())
  {
    v53 = APSEventRecorderCreate();
    if (!(_DWORD)v53)
      goto LABEL_78;
    v31 = v53;
LABEL_98:
    APSLogErrorAt();
    goto LABEL_15;
  }
  if (FigCFEqual())
  {
    v54 = APSEventRecorderCreate();
    if (!(_DWORD)v54)
      goto LABEL_78;
    v31 = v54;
    goto LABEL_98;
  }
  if (FigCFEqual())
  {
    v55 = APSEventRecorderCreate();
    if (!(_DWORD)v55)
      goto LABEL_78;
    v31 = v55;
    goto LABEL_98;
  }
  if (!FigCFEqual())
  {
    v31 = 4294950536;
    goto LABEL_98;
  }
  v56 = APSEventRecorderCreate();
  if ((_DWORD)v56)
  {
    v31 = v56;
    goto LABEL_98;
  }
LABEL_78:
  APSEventRecorderAddSignPostForEvent();
  v57 = APCarPlayAnalyticsCreate((uint64_t)a1, (uint64_t *)(DerivedStorage + 88));
  if ((_DWORD)v57)
  {
    v31 = v57;
    goto LABEL_15;
  }
  SNPrintF();
  v58 = dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 112) = v58;
  if (v58)
  {
    SNPrintF();
    v59 = dispatch_queue_create(label, 0);
    *(_QWORD *)(DerivedStorage + 120) = v59;
    if (v59)
    {
      SNPrintF();
      v60 = FigDispatchQueueCreateWithPriority();
      *(_QWORD *)(DerivedStorage + 168) = v60;
      if (v60)
      {
        SNPrintF();
        v61 = FigDispatchQueueCreateWithPriority();
        *(_QWORD *)(DerivedStorage + 352) = v61;
        if (v61)
        {
          SNPrintF();
          v62 = FigDispatchQueueCreateWithPriority();
          *(_QWORD *)(DerivedStorage + 416) = v62;
          if (v62)
          {
            if (!CFEqual(a5, *v27) || (v63 = APCarPlayAVVCServerRegisterStream(v69), !(_DWORD)v63))
            {
              v31 = 0;
              *a11 = v69;
              v69 = 0;
              goto LABEL_87;
            }
            v31 = v63;
LABEL_15:
            APSLogErrorAt();
            goto LABEL_87;
          }
        }
      }
    }
  }
  APSLogErrorAt();
  v31 = 4294950535;
LABEL_87:
  if (cf)
    CFRelease(cf);
  if (v69)
    CFRelease(v69);
  if (v67)
    CFRelease(v67);
  if (theString)
    CFRelease(theString);
  return v31;
}

uint64_t carAudioStream_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 40);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 48);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 80);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 96);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 104);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 104) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 56);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 136);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 136) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 144);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 144) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 152);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 152) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 160);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 160) = 0;
  }
  v14 = *(NSObject **)(DerivedStorage + 112);
  if (v14)
  {
    dispatch_release(v14);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v15 = *(NSObject **)(DerivedStorage + 120);
  if (v15)
  {
    dispatch_release(v15);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
  v16 = *(NSObject **)(DerivedStorage + 168);
  if (v16)
  {
    dispatch_release(v16);
    *(_QWORD *)(DerivedStorage + 168) = 0;
  }
  v17 = *(NSObject **)(DerivedStorage + 352);
  if (v17)
  {
    dispatch_release(v17);
    *(_QWORD *)(DerivedStorage + 352) = 0;
  }
  v18 = *(NSObject **)(DerivedStorage + 416);
  if (v18)
  {
    dispatch_release(v18);
    *(_QWORD *)(DerivedStorage + 416) = 0;
  }
  v19 = *(const void **)(DerivedStorage + 88);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v20 = *(const void **)(DerivedStorage + 368);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(DerivedStorage + 368) = 0;
  }
  v21 = *(const void **)(DerivedStorage + 376);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(DerivedStorage + 376) = 0;
  }
  v22 = *(const void **)(DerivedStorage + 384);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(DerivedStorage + 384) = 0;
  }
  v23 = *(const void **)(DerivedStorage + 432);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(DerivedStorage + 432) = 0;
  }
  v24 = *(const void **)(DerivedStorage + 448);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(DerivedStorage + 448) = 0;
  }
  v25 = *(const void **)(DerivedStorage + 456);
  if (v25)
  {
    CFRelease(v25);
    *(_QWORD *)(DerivedStorage + 456) = 0;
  }
  v26 = *(const void **)(DerivedStorage + 464);
  if (v26)
  {
    CFRelease(v26);
    *(_QWORD *)(DerivedStorage + 464) = 0;
  }
  v27 = *(const void **)(DerivedStorage + 392);
  if (v27)
  {
    CFRelease(v27);
    *(_QWORD *)(DerivedStorage + 392) = 0;
  }
  v28 = *(const void **)(DerivedStorage + 488);
  if (v28)
  {
    CFRelease(v28);
    *(_QWORD *)(DerivedStorage + 488) = 0;
  }
  return kdebug_trace();
}

__CFString *carAudioStream_copyDebugDescription(const void *a1)
{
  __CFString *Mutable;
  const __CFAllocator *v3;
  __CFDictionary *v4;
  __CFDictionary *v5;
  size_t v6;

  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APEndpointStreamCarPlayAudio %p>\n"), a1);
  v3 = CFGetAllocator(a1);
  v4 = carAudioStream_copyShowInfo((uint64_t)a1, v3);
  if (v4)
  {
    v5 = v4;
    ASPrintF();
    v6 = strlen(0);
    if (v6 && *(_BYTE *)(v6 - 1) == 10)
      *(_BYTE *)(v6 - 1) = 0;
    CFStringAppendFormat(Mutable, 0, CFSTR("%s"), 0);
    free(0);
    CFRelease(v5);
  }
  return Mutable;
}

uint64_t carAudioStream_copyProperty(uint64_t a1, void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  int v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t CMBaseObject;
  uint64_t (*v19)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v20;
  const void **v22;
  int v23;
  uint64_t block;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t *v28;
  uint64_t v29;
  CFTypeRef *v30;
  CFTypeRef *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamCarPlayAudio <= 30
    && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v34 = 0;
  v35 = &v34;
  v36 = 0x2000000000;
  v37 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = CFEqual(a2, CFSTR("AudioInputStatistics"));
  v10 = MEMORY[0x1E0C809B0];
  if (!v9)
  {
    if (CFEqual(a2, CFSTR("ConnectionID")))
    {
      v12 = v10;
      v13 = *(const void **)(DerivedStorage + 184);
LABEL_9:
      *a4 = v13;
      goto LABEL_13;
    }
    if (CFEqual(a2, CFSTR("AudioZeroTimeStampProvider")))
    {
      v12 = v10;
      v14 = *(const void **)(DerivedStorage + 56);
LABEL_12:
      *a4 = CFRetain(v14);
      goto LABEL_13;
    }
    if (CFEqual(a2, CFSTR("CarPlayAudioFormats")))
    {
      v12 = v10;
      CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 8));
      v19 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
      if (v19)
      {
        v20 = v19(CMBaseObject, CFSTR("CarPlayAudioFormats"), a3, a4);
        *((_DWORD *)v35 + 6) = v20;
        if (!v20)
          goto LABEL_13;
      }
      else
      {
        *((_DWORD *)v35 + 6) = -12782;
      }
      goto LABEL_28;
    }
    v12 = v10;
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4788]))
    {
      v14 = *(const void **)(DerivedStorage + 48);
      goto LABEL_12;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4790]))
    {
      v22 = (const void **)MEMORY[0x1E0C9AE50];
      if (!*(_BYTE *)(DerivedStorage + 176))
        v22 = (const void **)MEMORY[0x1E0C9AE40];
    }
    else
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA47C8]))
      {
        v14 = *(const void **)(DerivedStorage + 40);
        goto LABEL_12;
      }
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA47E8]))
      {
        if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4808]))
        {
          if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4820]))
          {
            *((_DWORD *)v35 + 6) = -12784;
            goto LABEL_13;
          }
          v14 = *(const void **)(DerivedStorage + 32);
          goto LABEL_12;
        }
        if (!FigCFEqual())
        {
          v13 = (const void *)*MEMORY[0x1E0C9AE40];
          goto LABEL_9;
        }
        v23 = APEndpointDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 8), (uint64_t)CFSTR("SupportsVocoderInfo"), a3, (uint64_t)a4);
        *((_DWORD *)v35 + 6) = v23;
        if (!v23)
          goto LABEL_13;
LABEL_28:
        APSLogErrorAt();
        goto LABEL_13;
      }
      if (APSGetFBOPropertyInt64() || APSGetFBOPropertyInt64() <= 2803308)
        v22 = (const void **)MEMORY[0x1E0C9AE40];
      else
        v22 = (const void **)MEMORY[0x1E0C9AE50];
    }
    v14 = *v22;
    goto LABEL_12;
  }
  v11 = *(NSObject **)(DerivedStorage + 168);
  v12 = MEMORY[0x1E0C809B0];
  block = MEMORY[0x1E0C809B0];
  v25 = 0x40000000;
  v26 = __carAudioStream_copyNonStateProperty_block_invoke;
  v27 = &unk_1E8267E10;
  v28 = &v34;
  v29 = DerivedStorage;
  v30 = a4;
  dispatch_sync(v11, &block);
LABEL_13:
  v15 = *((unsigned int *)v35 + 6);
  _Block_object_dispose(&v34, 8);
  if ((_DWORD)v15 == -12784)
  {
    v34 = 0;
    v35 = &v34;
    v36 = 0x2000000000;
    v37 = 0;
    v16 = CMBaseObjectGetDerivedStorage();
    v17 = *(NSObject **)(v16 + 120);
    block = v12;
    v25 = 0x40000000;
    v26 = __carAudioStream_copyStateProperty_block_invoke;
    v27 = &unk_1E8267E38;
    v28 = &v34;
    v29 = v16;
    v30 = (CFTypeRef *)a2;
    v31 = a4;
    v32 = a1;
    v33 = a3;
    dispatch_sync(v17, &block);
    v15 = *((unsigned int *)v35 + 6);
    _Block_object_dispose(&v34, 8);
    if ((_DWORD)v15 == -12784)
    {
      if (gLogCategory_APEndpointStreamCarPlayAudio <= 30
        && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return 4294954512;
    }
  }
  return v15;
}

uint64_t carAudioStream_setProperty(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  NSObject *v8;
  void (*v9)(uint64_t);
  void *v10;
  uint64_t *p_block;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD v17[7];
  uint64_t block;
  uint64_t v19;
  void (*v20)(uint64_t);
  void *v21;
  uint64_t v22;
  const void *v23;
  const void *v24;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamCarPlayAudio <= 10
    && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4768]))
  {
    if (*(_BYTE *)(DerivedStorage + 73))
    {
      v7 = CMBaseObjectGetDerivedStorage();
      CFRetain(a1);
      if (a3)
        CFRetain(a3);
      v8 = *(NSObject **)(v7 + 120);
      block = MEMORY[0x1E0C809B0];
      v9 = __carAudioStream_setAudioSource_block_invoke;
      v10 = &__block_descriptor_tmp_48;
LABEL_15:
      v19 = 0x40000000;
      v20 = v9;
      v21 = v10;
      v22 = v7;
      v23 = a1;
      v24 = a3;
LABEL_16:
      p_block = &block;
      goto LABEL_17;
    }
LABEL_33:
    APSLogErrorAt();
    return 4294954509;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4760]))
  {
    if (*(_BYTE *)(DerivedStorage + 72))
    {
      v7 = CMBaseObjectGetDerivedStorage();
      CFRetain(a1);
      if (a3)
        CFRetain(a3);
      v8 = *(NSObject **)(v7 + 120);
      block = MEMORY[0x1E0C809B0];
      v9 = __carAudioStream_setAudioSink_block_invoke;
      v10 = &__block_descriptor_tmp_50;
      goto LABEL_15;
    }
    goto LABEL_33;
  }
  if (CFEqual(a2, CFSTR("AudioFormatInfo")))
  {
    v13 = CMBaseObjectGetDerivedStorage();
    CFRetain(a1);
    if (a3)
      CFRetain(a3);
    v8 = *(NSObject **)(v13 + 120);
    block = MEMORY[0x1E0C809B0];
    v19 = 0x40000000;
    v20 = __carAudioStream_setAudioFormatInfo_block_invoke;
    v21 = &__block_descriptor_tmp_51;
    v22 = v13;
    v23 = a3;
    v24 = a1;
    goto LABEL_16;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4830]))
  {
    v14 = CMBaseObjectGetDerivedStorage();
    CFRetain(a1);
    if (a3)
      CFRetain(a3);
    v15 = *(NSObject **)(v14 + 120);
    v16 = MEMORY[0x1E0C809B0];
    block = MEMORY[0x1E0C809B0];
    v19 = 0x40000000;
    v20 = __carAudioStream_setVocoderInfo_block_invoke;
    v21 = &__block_descriptor_tmp_52;
    v22 = v14;
    v23 = a3;
    v24 = a1;
    dispatch_async(v15, &block);
    if (!a3)
      return 0;
    v8 = *(NSObject **)(v14 + 168);
    v17[0] = v16;
    v17[1] = 0x40000000;
    v17[2] = __carAudioStream_setVocoderInfo_block_invoke_2;
    v17[3] = &__block_descriptor_tmp_58;
    v17[4] = v14;
    v17[5] = a1;
    v17[6] = a3;
    p_block = v17;
LABEL_17:
    dispatch_async(v8, p_block);
    return 0;
  }
  if (gLogCategory_APEndpointStreamCarPlayAudio <= 30
    && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return 4294954512;
}

__CFDictionary *carAudioStream_copyShowInfo(uint64_t a1, const __CFAllocator *a2)
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  const void **v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = Mutable;
  if (Mutable)
  {
    CFDictionarySetValue(Mutable, CFSTR("Type"), *(const void **)(DerivedStorage + 32));
    CFDictionarySetValue(v5, CFSTR("Subtype"), *(const void **)(DerivedStorage + 40));
    CFDictionarySetValue(v5, CFSTR("Name"), *(const void **)(DerivedStorage + 24));
    CFDictionarySetValue(v5, CFSTR("ID"), *(const void **)(DerivedStorage + 48));
    v6 = (const void **)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(DerivedStorage + 176))
      v6 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(v5, CFSTR("Resumed"), *v6);
  }
  else
  {
    APSLogErrorAt();
  }
  return v5;
}

uint64_t __carAudioStream_copyNonStateProperty_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  CFAllocatorRef v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t);
  uint64_t result;

  v2 = a1[5];
  v3 = *(_QWORD *)(v2 + 368);
  if (v3)
  {
    v4 = CFGetAllocator(*(CFTypeRef *)(v2 + 368));
    v5 = a1[6];
    v6 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
    if (v6)
      result = v6(v3, CFSTR("Statistics"), v4, v5);
    else
      result = 4294954514;
  }
  else
  {
    result = 4294954512;
  }
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  return result;
}

CFTypeRef *__carAudioStream_copyStateProperty_block_invoke(CFTypeRef *result)
{
  CFTypeRef *v1;
  uint64_t v2;
  int v3;

  v1 = result;
  if (*((_BYTE *)result[5] + 128))
  {
    v2 = *((_QWORD *)result[4] + 1);
    v3 = -16762;
  }
  else
  {
    if (CFEqual(result[6], CFSTR("AudioFormatInfo")))
    {
      result = (CFTypeRef *)*((_QWORD *)v1[5] + 17);
      if (!result)
      {
LABEL_7:
        *(_QWORD *)v1[7] = result;
        return result;
      }
LABEL_4:
      result = (CFTypeRef *)CFRetain(result);
      goto LABEL_7;
    }
    if (CFEqual(v1[6], CFSTR("EndpointStreamShowInfo")))
    {
      result = (CFTypeRef *)carAudioStream_copyShowInfo((uint64_t)v1[8], (const __CFAllocator *)v1[9]);
      goto LABEL_7;
    }
    result = (CFTypeRef *)CFEqual(v1[6], (CFTypeRef)*MEMORY[0x1E0CA4830]);
    if ((_DWORD)result)
    {
      result = (CFTypeRef *)*((_QWORD *)v1[5] + 18);
      if (!result)
        goto LABEL_7;
      goto LABEL_4;
    }
    v2 = *((_QWORD *)v1[4] + 1);
    v3 = -12784;
  }
  *(_DWORD *)(v2 + 24) = v3;
  return result;
}

void __carAudioStream_setAudioSource_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 128))
  {
    if (gLogCategory_APEndpointStreamCarPlayAudio <= 30)
    {
      if (gLogCategory_APEndpointStreamCarPlayAudio != -1
        || (v3 = _LogCategory_Initialize(), v2 = *(_QWORD *)(a1 + 32), v3))
      {
        LogPrintF();
        v2 = *(_QWORD *)(a1 + 32);
      }
    }
    v4 = *(const void **)(v2 + 160);
    v5 = *(const void **)(a1 + 48);
    *(_QWORD *)(v2 + 160) = v5;
    if (v5)
      CFRetain(v5);
    if (v4)
      CFRelease(v4);
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
  v6 = *(const void **)(a1 + 48);
  if (v6)
    CFRelease(v6);
}

void __carAudioStream_setAudioSink_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 128))
  {
    if (gLogCategory_APEndpointStreamCarPlayAudio <= 30)
    {
      if (gLogCategory_APEndpointStreamCarPlayAudio != -1
        || (v3 = _LogCategory_Initialize(), v2 = *(_QWORD *)(a1 + 32), v3))
      {
        LogPrintF();
        v2 = *(_QWORD *)(a1 + 32);
      }
    }
    v4 = *(const void **)(v2 + 152);
    v5 = *(const void **)(a1 + 48);
    *(_QWORD *)(v2 + 152) = v5;
    if (v5)
      CFRetain(v5);
    if (v4)
      CFRelease(v4);
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
  v6 = *(const void **)(a1 + 48);
  if (v6)
    CFRelease(v6);
}

void __carAudioStream_setAudioFormatInfo_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 128))
  {
    v3 = *(const void **)(a1 + 40);
    if (v3)
    {
      v4 = *(const void **)(v2 + 136);
      *(_QWORD *)(v2 + 136) = v3;
      CFRetain(v3);
      if (v4)
        CFRelease(v4);
    }
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
  v5 = *(const void **)(a1 + 40);
  if (v5)
    CFRelease(v5);
}

void __carAudioStream_setVocoderInfo_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 128))
  {
    v3 = *(const void **)(v2 + 144);
    v4 = *(const void **)(a1 + 40);
    *(_QWORD *)(v2 + 144) = v4;
    if (v4)
      CFRetain(v4);
    if (v3)
      CFRelease(v3);
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
  v5 = *(const void **)(a1 + 40);
  if (v5)
    CFRelease(v5);
}

void __carAudioStream_setVocoderInfo_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t AudioType;
  const void *v4;
  int StreamType;
  uint64_t v6;
  const void *v7;
  const __CFAllocator *v8;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v10;
  void (*v11)(const void *, const __CFString *, CFMutableDictionaryRef, _QWORD, _QWORD);

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 176))
  {
    AudioType = APCarPlayAudioFormatInfoGetAudioType(*(_QWORD *)(v1 + 192));
    if (!AudioType)
    {
LABEL_18:
      APSLogErrorAt();
      return;
    }
    v4 = (const void *)AudioType;
    StreamType = APCarPlayAudioFormatInfoGetStreamType(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 192));
    if (StreamType == 100)
    {
      if (CFEqual(v4, CFSTR("telephony")))
      {
        v6 = FigCFWeakReferenceHolderCopyReferencedObject();
        if (v6)
        {
          v7 = (const void *)v6;
          v8 = CFGetAllocator(*(CFTypeRef *)(a1 + 40));
          Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (Mutable)
          {
            v10 = Mutable;
            FigCFDictionarySetInt64();
            FigCFDictionarySetValue();
            if (gLogCategory_APEndpointStreamCarPlayAudio <= 30
              && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v11 = *(void (**)(const void *, const __CFString *, CFMutableDictionaryRef, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 72);
            if (v11)
              v11(v7, CFSTR("updateVocoderInfo"), v10, 0, 0);
            CFRelease(v10);
          }
          else
          {
            APSLogErrorAt();
          }
          CFRelease(v7);
        }
      }
    }
    else if (!StreamType)
    {
      goto LABEL_18;
    }
  }
}

uint64_t carAudioStream_suspend(const void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  NSObject *v9;
  _QWORD block[9];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  v9 = *(NSObject **)(DerivedStorage + 168);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carAudioStream_suspend_block_invoke;
  block[3] = &__block_descriptor_tmp_60;
  block[4] = a1;
  block[5] = DerivedStorage;
  block[6] = a3;
  block[7] = a4;
  block[8] = a2;
  dispatch_async(v9, block);
  return 0;
}

uint64_t carAudioStream_resume(const void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD v13[14];
  _QWORD block[10];
  _QWORD v15[4];
  _QWORD v16[4];
  _QWORD v17[4];
  _QWORD v18[4];
  _QWORD v19[3];
  int v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x2000000000;
  v20 = 0;
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x2000000000;
  v18[3] = 0;
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x2000000000;
  v17[3] = 0;
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2000000000;
  v16[3] = 0;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2000000000;
  v15[3] = 0;
  v8 = *(NSObject **)(DerivedStorage + 120);
  v9 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carAudioStream_resume_block_invoke;
  block[3] = &unk_1E8267FE0;
  block[4] = v19;
  block[5] = v18;
  block[6] = v17;
  block[7] = v16;
  block[8] = v15;
  block[9] = DerivedStorage;
  dispatch_sync(v8, block);
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  v10 = *(NSObject **)(DerivedStorage + 168);
  v13[0] = v9;
  v13[1] = 0x40000000;
  v13[2] = __carAudioStream_resume_block_invoke_2;
  v13[3] = &unk_1E8268098;
  v13[4] = v19;
  v13[5] = v18;
  v13[6] = v17;
  v13[7] = v16;
  v13[8] = v15;
  v13[9] = DerivedStorage;
  v13[10] = a1;
  v13[11] = a2;
  v13[12] = a3;
  v13[13] = a4;
  dispatch_async(v10, v13);
  _Block_object_dispose(v15, 8);
  _Block_object_dispose(v16, 8);
  _Block_object_dispose(v17, 8);
  _Block_object_dispose(v18, 8);
  _Block_object_dispose(v19, 8);
  return 0;
}

uint64_t carAudioStream_flush(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  NSObject *v8;
  _QWORD v10[8];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 128))
  {
    APSLogErrorAt();
    return 4294950534;
  }
  else
  {
    v7 = DerivedStorage;
    CFRetain(a1);
    if (a3)
      CFRetain(a3);
    v8 = *(NSObject **)(v7 + 168);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 0x40000000;
    v10[2] = __carAudioStream_flush_block_invoke;
    v10[3] = &__block_descriptor_tmp_158;
    v10[4] = v7;
    v10[5] = a3;
    v10[6] = a1;
    v10[7] = a2;
    dispatch_async(v8, v10);
    return 0;
  }
}

uint64_t carAudioStream_dissociate(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD v9[5];
  _QWORD v10[5];
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = MEMORY[0x1E0C809B0];
  v5 = *(NSObject **)(v3 + 120);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carAudioStream_dissociateInternal_block_invoke;
  block[3] = &__block_descriptor_tmp_160;
  block[4] = v3;
  dispatch_sync(v5, block);
  v6 = *(NSObject **)(v3 + 168);
  v10[0] = v4;
  v10[1] = 0x40000000;
  v10[2] = __carAudioStream_dissociateInternal_block_invoke_2;
  v10[3] = &__block_descriptor_tmp_161;
  v10[4] = a1;
  dispatch_sync(v6, v10);
  if (CFEqual(*(CFTypeRef *)(v3 + 40), (CFTypeRef)*MEMORY[0x1E0CA4860]))
    APCarPlayAVVCServerRemoveStream(a1);
  CFRetain(a1);
  v7 = *(NSObject **)(DerivedStorage + 112);
  v9[0] = v4;
  v9[1] = 0x40000000;
  v9[2] = __carAudioStream_dissociate_block_invoke;
  v9[3] = &__block_descriptor_tmp_159;
  v9[4] = a1;
  dispatch_async(v7, v9);
  return 0;
}

uint64_t carAudioStream_control(int a1, CFTypeRef cf1, const void *a3)
{
  uint64_t DerivedStorage;
  NSObject *v5;
  _QWORD v7[6];

  if (!CFEqual(cf1, CFSTR("APCarPlayStreamAudioControl_SpeechEvent")))
    return 4294960561;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a3);
  v5 = *(NSObject **)(DerivedStorage + 416);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = __carAudioStream_handleSpeechEvent_block_invoke;
  v7[3] = &__block_descriptor_tmp_162;
  v7[4] = DerivedStorage;
  v7[5] = a3;
  dispatch_async(v5, v7);
  return 0;
}

void __carAudioStream_suspend_block_invoke(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const void *v6;
  _QWORD block[7];

  carAudioStream_suspendInternal(a1[4], 0);
  CFRetain((CFTypeRef)a1[4]);
  block[0] = MEMORY[0x1E0C809B0];
  block[2] = __carAudioStream_suspend_block_invoke_2;
  block[3] = &__block_descriptor_tmp_59;
  v3 = a1[4];
  v2 = a1[5];
  v4 = a1[7];
  block[4] = a1[6];
  block[5] = v3;
  v5 = *(NSObject **)(v2 + 112);
  block[1] = 0x40000000;
  block[6] = v4;
  dispatch_async(v5, block);
  v6 = (const void *)a1[8];
  if (v6)
    CFRelease(v6);
  CFRelease((CFTypeRef)a1[4]);
}

void carAudioStream_suspendInternal(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  const char *CStringPtr;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD *v17;
  void (*v18)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  const char *v23;
  _QWORD v24[6];
  _QWORD block[5];
  uint8_t buf[4];
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 176))
  {
    v5 = DerivedStorage;
    if (gLogCategory_APEndpointStreamCarPlayAudio <= 50
      && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v6 = LogCategoryCopyOSLogHandle();
    v7 = (void *)v6;
    v8 = MEMORY[0x1E0C81028];
    if (v6)
      v9 = v6;
    else
      v9 = MEMORY[0x1E0C81028];
    if (os_signpost_enabled(v9))
    {
      CStringPtr = CFStringGetCStringPtr(*(CFStringRef *)(v5 + 40), 0x8000100u);
      *(_DWORD *)buf = 136315138;
      v27 = CStringPtr;
      _os_signpost_emit_with_name_impl(&dword_1C943B000, v9, OS_SIGNPOST_EVENT, 0x2B8D0940uLL, "AP_SIGNPOST_CAR_AUDIOSTREAM_SUSPEND_START", "stream type=%s\n", buf, 0xCu);
    }
    if (v7)
      os_release(v7);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    if (APCarPlayAudioFormatInfoGetStreamType(*(_QWORD *)(v5 + 192)) == 102)
    {
      v11 = *(_QWORD *)(v5 + 16);
      v12 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v12)
        v12(v11);
    }
    else
    {
      v13 = MEMORY[0x1E0C809B0];
      if (*(_QWORD *)(v5 + 368))
      {
        v14 = *(NSObject **)(v5 + 352);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = __carAudioStream_suspendInternal_block_invoke;
        block[3] = &__block_descriptor_tmp_64;
        block[4] = v5;
        dispatch_sync(v14, block);
      }
      if (*(_QWORD *)(v5 + 432))
      {
        v15 = *(NSObject **)(v5 + 416);
        v24[0] = v13;
        v24[1] = 0x40000000;
        v24[2] = __carAudioStream_suspendInternal_block_invoke_2;
        v24[3] = &__block_descriptor_tmp_66;
        v24[4] = v5;
        v24[5] = a1;
        dispatch_sync(v15, v24);
        v16 = *(_QWORD *)(v5 + 432);
        v17 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
        if (*v17 >= 2uLL)
        {
          v18 = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))v17[3];
          if (v18)
            v18(v16, 0, 0, 0, 0);
        }
        *(_DWORD *)(v5 + 440) = 0;
      }
    }
    APCarPlayAnalyticsStopCollections(*(_QWORD *)(v5 + 88));
    APCarPlayAnalyticsSubmitToCarPlay(*(NSObject ***)(v5 + 88));
    carAudioStream_teardownTransportStreams(a1, a2);
    carAudioStream_teardownAudioProcessing();
    v19 = CMBaseObjectGetDerivedStorage();
    if (CFEqual(*(CFTypeRef *)(v19 + 40), (CFTypeRef)*MEMORY[0x1E0CA4858])
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual())
    {
      APSEventRecorderRecordEvent();
    }
    else
    {
      APSLogErrorAt();
    }
    *(_BYTE *)(v5 + 176) = 0;
    if (gLogCategory_APEndpointStreamCarPlayAudio <= 50
      && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v20 = LogCategoryCopyOSLogHandle();
    v21 = (void *)v20;
    if (v20)
      v22 = v20;
    else
      v22 = v8;
    if (os_signpost_enabled(v22))
    {
      v23 = CFStringGetCStringPtr(*(CFStringRef *)(v5 + 40), 0x8000100u);
      *(_DWORD *)buf = 136315138;
      v27 = v23;
      _os_signpost_emit_with_name_impl(&dword_1C943B000, v22, OS_SIGNPOST_EVENT, 0x2B8D0944uLL, "AP_SIGNPOST_CAR_AUDIOSTREAM_SUSPEND_END", "stream type=%s\n", buf, 0xCu);
    }
    if (v21)
      os_release(v21);
  }
}

void __carAudioStream_suspend_block_invoke_2(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD, _QWORD);

  v2 = *(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 32);
  if (v2)
    v2(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 48));
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void carAudioStream_handleFeedbackReceivedNotification(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  CFTypeID v8;
  uint64_t TypedValue;
  const void *v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  _QWORD v14[8];
  _QWORD block[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5 && (v8 = CFGetTypeID(a5), v8 != CFDictionaryGetTypeID()))
  {
    APSLogErrorAt();
  }
  else
  {
    CFArrayGetTypeID();
    TypedValue = CFDictionaryGetTypedValue();
    if (TypedValue)
    {
      v10 = (const void *)TypedValue;
      CFRetain(a2);
      v11 = *(NSObject **)(DerivedStorage + 416);
      v12 = MEMORY[0x1E0C809B0];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __carAudioStream_handleFeedbackReceivedNotification_block_invoke;
      block[3] = &__block_descriptor_tmp_70;
      block[4] = DerivedStorage;
      block[5] = a2;
      dispatch_async(v11, block);
      CFRetain(a2);
      CFRetain(v10);
      if (a5)
        CFRetain(a5);
      v13 = *(NSObject **)(DerivedStorage + 168);
      v14[0] = v12;
      v14[1] = 0x40000000;
      v14[2] = __carAudioStream_handleFeedbackReceivedNotification_block_invoke_2;
      v14[3] = &__block_descriptor_tmp_81;
      v14[4] = DerivedStorage;
      v14[5] = v10;
      v14[6] = a2;
      v14[7] = a5;
      dispatch_async(v13, v14);
    }
  }
}

void __carAudioStream_suspendInternal_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v2 + 360) = 0;
  *(_BYTE *)(v2 + 400) = 0;
  v3 = *(const void **)(v2 + 392);
  if (v3)
  {
    CFRelease(v3);
    v2 = *(_QWORD *)(a1 + 32);
  }
  v4 = *(const void **)(v2 + 376);
  if (v4)
  {
    CFRelease(v4);
    v2 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(const void **)(v2 + 368);
  if (v5)
    CFRelease(v5);
}

void __carAudioStream_suspendInternal_block_invoke_2(uint64_t a1)
{
  const void *v2;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 424) = 0;
  APSAudioStats_TerminateSession();
  if (gLogCategory_APEndpointStreamCarPlayAudio <= 50
    && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(const void **)(*(_QWORD *)(a1 + 32) + 504);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 504) = 0;
  }
}

void carAudioStream_teardownTransportStreams(uint64_t a1, int a2)
{
  uint64_t *DerivedStorage;
  uint64_t *v5;
  uint64_t StreamType;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, _QWORD);
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD);
  const void *v11;
  uint64_t CMBaseObject;
  uint64_t v13;
  void (*v14)(uint64_t);
  const void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  const void *v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, _QWORD);
  uint64_t v27;
  void (*v28)(uint64_t, const __CFString *, _QWORD);
  const void *v29;
  const void *v30;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  if (!a2 && (DerivedStorage[48] || DerivedStorage[58]))
  {
    StreamType = APCarPlayAudioFormatInfoGetStreamType(DerivedStorage[24]);
    if (gLogCategory_APEndpointStreamCarPlayAudio <= 50
      && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    switch((int)StreamType)
    {
        kdebug_trace();
        v7 = v5[12];
        v8 = *(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (v8)
          v8(v7, 96, 0);
        break;
      default:
        kdebug_trace();
        v9 = v5[12];
        v10 = *(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (v10)
          v10(v9, StreamType, 0);
        break;
    }
    kdebug_trace();
  }
  v11 = (const void *)v5[49];
  if (v11)
  {
    CFRelease(v11);
    v5[49] = 0;
  }
  if (v5[48])
  {
    CMBaseObject = FigTransportStreamGetCMBaseObject();
    if (CMBaseObject)
    {
      v13 = CMBaseObject;
      v14 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v14)
        v14(v13);
    }
    v15 = (const void *)v5[48];
    if (v15)
    {
      CFRelease(v15);
      v5[48] = 0;
    }
  }
  v16 = (const void *)v5[47];
  if (v16)
  {
    CFRelease(v16);
    v5[47] = 0;
  }
  if (v5[58])
  {
    v17 = FigTransportStreamGetCMBaseObject();
    if (v17)
    {
      v18 = v17;
      v19 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v19)
        v19(v18);
    }
    v20 = (const void *)v5[58];
    if (v20)
    {
      CFRelease(v20);
      v5[58] = 0;
    }
  }
  if (v5[57])
  {
    v21 = FigTransportStreamGetCMBaseObject();
    if (v21)
    {
      v22 = v21;
      v23 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v23)
        v23(v22);
    }
    v24 = (const void *)v5[57];
    if (v24)
    {
      CFRelease(v24);
      v5[57] = 0;
    }
  }
  if (*((_BYTE *)v5 + 472))
  {
    v25 = v5[2];
    v26 = *(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v26)
      v26(v25, a1, 0);
    *((_BYTE *)v5 + 472) = 0;
    v27 = APAudioEngineGetCMBaseObject(v5[2]);
    v28 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v28)
      v28(v27, CFSTR("cryptor"), 0);
  }
  v29 = (const void *)v5[56];
  if (v29)
  {
    CFRelease(v29);
    v5[56] = 0;
  }
  v30 = (const void *)v5[61];
  if (v30)
  {
    CFRelease(v30);
    v5[61] = 0;
  }
  v5[23] = 0;
}

void carAudioStream_teardownAudioProcessing()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (const void *)DerivedStorage[24];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[24] = 0;
  }
  v2 = (const void *)DerivedStorage[46];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[46] = 0;
  }
  v3 = (const void *)DerivedStorage[54];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[54] = 0;
  }
  v4 = CMBaseObjectGetDerivedStorage();
  if (CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(v4 + 408)) >= 1)
  {
    while (1)
    {
      v5 = CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(v4 + 408));
      if (!v5)
        break;
      CFRelease(v5);
    }
  }
  v6 = (const void *)DerivedStorage[51];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[51] = 0;
  }
}

void __carAudioStream_handleFeedbackReceivedNotification_block_invoke(uint64_t a1)
{
  const void *v2;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 504))
  {
    v2 = (const void *)APSAudioStats_CopySampleRateStatsAsString();
    if (gLogCategory_APEndpointStreamCarPlayAudio <= 50
      && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (v2)
      CFRelease(v2);
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __carAudioStream_handleFeedbackReceivedNotification_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  int StreamType;
  CFMutableDictionaryRef Mutable;
  const void *v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 192);
  if (v2)
  {
    StreamType = APCarPlayAudioFormatInfoGetStreamType(v2);
    CFArrayGetCount(*(CFArrayRef *)(a1 + 40));
    CFArrayApplyBlock();
    Mutable = 0;
    if (StreamType == 102)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetInt64();
      CFDictionarySetInt64();
    }
    if (APCarPlayAnalyticsCollectFromFeedbackResponse(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 88), *(CFTypeRef *)(a1 + 56), Mutable)&& gLogCategory_APEndpointStreamCarPlayAudio <= 60&& (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFRelease(*(CFTypeRef *)(a1 + 40));
    CFRelease(*(CFTypeRef *)(a1 + 48));
    v5 = *(const void **)(a1 + 56);
    if (v5)
      CFRelease(v5);
    if (Mutable)
      CFRelease(Mutable);
  }
}

double *__carAudioStream_handleFeedbackReceivedNotification_block_invoke_3(double *result, CFTypeRef cf)
{
  uint64_t v2;
  CFTypeID v3;
  int DoubleIfPresent;

  if (cf)
  {
    v2 = (uint64_t)result;
    v3 = CFGetTypeID(cf);
    result = (double *)CFDictionaryGetTypeID();
    if ((double *)v3 == result)
    {
      result = (double *)CFDictionaryGetInt64Ranged();
      if (*(_DWORD *)(v2 + 48) == (_DWORD)result)
      {
        DoubleIfPresent = FigCFDictionaryGetDoubleIfPresent();
        result = (double *)FigCFDictionaryGetDoubleIfPresent();
        if ((_DWORD)result
          && (result = (double *)FigCFDictionaryGetInt64IfPresent(), (_DWORD)result)
          && *(_BYTE *)(*(_QWORD *)(v2 + 32) + 200))
        {
          FigCFDictionaryGetInt64IfPresent();
          APSNetworkClockNTPConvertNTPToUpTicks();
          if (gLogCategory_APEndpointStreamCarPlayAudio <= 50
            && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          return (double *)carAudioStream_updateZeroTimeFromPhaseValues(0.0, *(_QWORD *)(v2 + 40), 0, 0);
        }
        else if (DoubleIfPresent)
        {
          if (gLogCategory_APEndpointStreamCarPlayAudio <= 50
            && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          return carAudioStream_updateZeroTimeFromSampleRate(0.0);
        }
        else if (gLogCategory_APEndpointStreamCarPlayAudio <= 60)
        {
          if (gLogCategory_APEndpointStreamCarPlayAudio != -1)
            return (double *)LogPrintF();
          result = (double *)_LogCategory_Initialize();
          if ((_DWORD)result)
            return (double *)LogPrintF();
        }
      }
    }
  }
  return result;
}

uint64_t carAudioStream_updateZeroTimeFromPhaseValues(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  double v8;
  double v9;
  double v10;
  __int128 v11;
  __int128 v12;
  double v13;
  double v14;
  double v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 272) = a1;
  *(_QWORD *)(DerivedStorage + 280) = a3;
  *(_DWORD *)(DerivedStorage + 328) = 3;
  *(double *)(DerivedStorage + 288) = (double)a4;
  if (gLogCategory_APEndpointStreamCarPlayAudio <= 50
    && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
  {
    mach_absolute_time();
    LogPrintF();
  }
  v8 = *(double *)APCarPlayAudioFormatInfoGetDescription(*(_QWORD *)(DerivedStorage + 192));
  if ((~*(_DWORD *)(DerivedStorage + 264) & 3) != 0)
  {
    v11 = *(_OWORD *)(DerivedStorage + 320);
    *(_OWORD *)(DerivedStorage + 240) = *(_OWORD *)(DerivedStorage + 304);
    *(_OWORD *)(DerivedStorage + 256) = v11;
    v12 = *(_OWORD *)(DerivedStorage + 288);
    *(_OWORD *)(DerivedStorage + 208) = *(_OWORD *)(DerivedStorage + 272);
    *(_OWORD *)(DerivedStorage + 224) = v12;
    *(double *)(DerivedStorage + 224) = (double)a4;
    *(double *)(DerivedStorage + 344) = v8;
  }
  else
  {
    v9 = a1 - *(double *)(DerivedStorage + 272);
    UpTicksToSecondsF();
    v13 = v9 / v10;
    if (vabdd_f64(*(double *)(DerivedStorage + 344), v8) > v8 * 0.00025
      && gLogCategory_APEndpointStreamCarPlayAudioTimeStamps <= 50
      && (gLogCategory_APEndpointStreamCarPlayAudioTimeStamps != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (vabdd_f64(*(double *)(DerivedStorage + 344), v13) > *(double *)(DerivedStorage + 344) * 0.00005
      && gLogCategory_APEndpointStreamCarPlayAudioTimeStamps <= 50
      && (gLogCategory_APEndpointStreamCarPlayAudioTimeStamps != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v14 = a1 - *(double *)(DerivedStorage + 208);
    UpTicksToSecondsF();
    *(double *)(DerivedStorage + 344) = v14 / v15;
  }
  return APAudioZeroTimeStampProviderSetZeroTimeStamp(*(_QWORD *)(DerivedStorage + 56), (_OWORD *)(DerivedStorage + 272));
}

double *carAudioStream_updateZeroTimeFromSampleRate(double a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  double *result;
  double v5;
  double v6;
  int v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  int v12;
  unsigned int v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = mach_absolute_time();
  result = (double *)APCarPlayAudioFormatInfoGetDescription(*(_QWORD *)(DerivedStorage + 192));
  v5 = *result;
  if (vabdd_f64(*result, a1) <= 2000.0)
  {
    v6 = a1;
    if ((~*(_DWORD *)(DerivedStorage + 328) & 3) == 0)
    {
      if (vabdd_f64(a1, v5) > v5 * 0.00025
        && gLogCategory_APEndpointStreamCarPlayAudioTimeStamps <= 50
        && (gLogCategory_APEndpointStreamCarPlayAudioTimeStamps != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v6 = a1;
      if (vabdd_f64(*(double *)(DerivedStorage + 344), a1) > *(double *)(DerivedStorage + 344) * 0.00005)
      {
        if (*(_BYTE *)(DerivedStorage + 64))
        {
          v6 = a1;
          if (gLogCategory_APEndpointStreamCarPlayAudioTimeStamps <= 50)
          {
            if (gLogCategory_APEndpointStreamCarPlayAudioTimeStamps != -1
              || (v6 = a1, _LogCategory_Initialize()))
            {
              LogPrintF();
              v6 = a1;
            }
          }
        }
        else if (gLogCategory_APEndpointStreamCarPlayAudioTimeStamps > 50)
        {
          v6 = *(double *)(DerivedStorage + 344);
        }
        else if (gLogCategory_APEndpointStreamCarPlayAudioTimeStamps != -1
               || (v7 = _LogCategory_Initialize(), v6 = *(double *)(DerivedStorage + 344), v7))
        {
          LogPrintF();
          v6 = *(double *)(DerivedStorage + 344);
        }
      }
    }
    if ((~*(_DWORD *)(DerivedStorage + 328) & 3) != 0)
    {
      *(_QWORD *)(DerivedStorage + 272) = 0;
      *(_QWORD *)(DerivedStorage + 280) = v3;
      *(_DWORD *)(DerivedStorage + 328) = 3;
      *(double *)(DerivedStorage + 344) = v5;
    }
    else
    {
      v8 = *(_QWORD *)(DerivedStorage + 280);
      if (v3 > v8)
      {
        *(double *)(DerivedStorage + 272) = *(double *)(DerivedStorage + 272)
                                          + v6 * (double)(v3 - v8) / (double)(unint64_t)UpTicksPerSecond();
        *(_QWORD *)(DerivedStorage + 280) = v3;
      }
    }
    if (gLogCategory_APEndpointStreamCarPlayAudio <= 50
      && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v9 = *(double *)(DerivedStorage + 344);
    v10 = vabdd_f64(v9, a1) / v5;
    if (v10 >= 0.0011)
      v11 = 0.01;
    else
      v11 = fmax(v10 / -0.0011 + 1.0, 0.01);
    if (gLogCategory_APEndpointStreamCarPlayAudioTimeStamps <= 30)
    {
      if (gLogCategory_APEndpointStreamCarPlayAudioTimeStamps != -1
        || (v12 = _LogCategory_Initialize(), v9 = *(double *)(DerivedStorage + 344), v12))
      {
        LogPrintF();
        v9 = *(double *)(DerivedStorage + 344);
      }
    }
    v13 = *(_DWORD *)(DerivedStorage + 336);
    *(double *)(DerivedStorage + 344) = (v11 * a1 + v9 * (double)v13) / (v11 + (double)v13);
    *(_DWORD *)(DerivedStorage + 336) = v13 + 1;
    return (double *)APAudioZeroTimeStampProviderSetZeroTimeStamp(*(_QWORD *)(DerivedStorage + 56), (_OWORD *)(DerivedStorage + 272));
  }
  else if (gLogCategory_APEndpointStreamCarPlayAudioTimeStamps <= 90)
  {
    if (gLogCategory_APEndpointStreamCarPlayAudioTimeStamps != -1)
      return (double *)LogPrintF();
    result = (double *)_LogCategory_Initialize();
    if ((_DWORD)result)
      return (double *)LogPrintF();
  }
  return result;
}

uint64_t APAudioEngineSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  CMBaseObject = APAudioEngineGetCMBaseObject(a1);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(CMBaseObject, a2, a3);
  else
    return 4294954514;
}

CFTypeRef __carAudioStream_resume_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  CFTypeRef v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef result;

  v2 = a1[9];
  v3 = *(_DWORD *)(v2 + 132) + 1;
  *(_DWORD *)(v2 + 132) = v3;
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v3;
  v4 = *(CFTypeRef *)(v2 + 152);
  if (v4)
    v4 = CFRetain(v4);
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = v4;
  v5 = *(CFTypeRef *)(a1[9] + 160);
  if (v5)
    v5 = CFRetain(v5);
  *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = v5;
  v6 = *(CFTypeRef *)(a1[9] + 136);
  if (v6)
    v6 = CFRetain(v6);
  *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = v6;
  result = *(CFTypeRef *)(a1[9] + 144);
  if (result)
    result = CFRetain(result);
  *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24) = result;
  return result;
}

void __carAudioStream_resume_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  NSObject *v5;
  const void *v6;
  uint64_t v7;
  uint64_t DerivedStorage;
  const void *v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Description;
  const __CFAllocator *v16;
  OSStatus v17;
  int v18;
  int v19;
  CFTypeRef v20;
  _QWORD *v21;
  uint64_t (*v22)(CFTypeRef, uint64_t);
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t (*v26)(uint64_t);
  int v27;
  CFTypeRef v28;
  _QWORD *v29;
  uint64_t (*v30)(CFTypeRef, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  int v41;
  uint64_t v42;
  uint64_t CMBaseObject;
  uint64_t (*v44)(uint64_t, const __CFString *, uint64_t);
  int v45;
  int v46;
  uint64_t v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  const __CFAllocator *v54;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v56;
  unsigned int StreamType;
  unsigned int v58;
  const void *AudioType;
  _BOOL4 v60;
  int v61;
  const void *v62;
  CFUUIDRef v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t);
  __CFDictionary *v67;
  uint64_t *v68;
  __CFDictionary *v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, _QWORD, _QWORD, CFTypeRef);
  uint64_t v72;
  uint64_t (*v73)(uint64_t);
  uint64_t v74;
  uint64_t (*v75)(uint64_t);
  int v76;
  const __CFAllocator *v77;
  const void *v78;
  CFUUIDRef v79;
  __CFDictionary *v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t, __CFDictionary *, uint64_t);
  uint64_t *v83;
  __CFDictionary *v84;
  uint64_t v85;
  uint64_t (*v86)(uint64_t, _QWORD, _QWORD, CFTypeRef);
  uint64_t v87;
  uint64_t (*v88)(uint64_t);
  uint64_t v89;
  __CFDictionary *v90;
  const void *v91;
  int v92;
  const void *v93;
  const void *v94;
  BOOL v95;
  uint64_t v96;
  uint64_t (*v97)(uint64_t, _QWORD, __CFDictionary *, CFTypeRef *, uint64_t, uint64_t);
  const void *v98;
  CFUUIDRef v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t, __CFDictionary *, uint64_t);
  uint64_t *v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t);
  uint64_t v106;
  uint64_t (*v107)(uint64_t);
  unsigned int v108;
  const __CFAllocator *v109;
  uint64_t v110;
  uint64_t AudioFormat;
  uint64_t (*v112)(uint64_t, CFTypeRef, uint64_t, _QWORD, _QWORD, _OWORD *);
  _QWORD *v113;
  _BYTE *v114;
  uint64_t v115;
  const void **v116;
  int v117;
  uint64_t (*v118)(uint64_t, _QWORD, const void *);
  const void *v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t (*v124)(uint64_t, const __CFString *, const void *);
  const void *v125;
  int v126;
  int DoubleIfPresent;
  double *v128;
  uint64_t v129;
  uint64_t v130;
  double *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  NSObject *v135;
  int v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t (*v139)(uint64_t);
  NSObject *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t (*v146)(uint64_t);
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t (*v153)(uint64_t, uint64_t, uint64_t, void (*)(const void *), uint64_t);
  uint64_t v154;
  _QWORD *v155;
  uint64_t (*v156)(uint64_t);
  int v157;
  int v158;
  __CFDictionary *v159;
  uint64_t v160;
  int v161;
  int v162;
  const void *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  const void *v169;
  const void *v170;
  _BOOL4 v171;
  const __CFDictionary *theDict;
  __CFDictionary *theDicta;
  void *v174;
  void *v175;
  CFTypeRef cf;
  _QWORD v177[7];
  int v178;
  _QWORD v179[6];
  _QWORD v180[5];
  _QWORD block[8];
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  char v189;
  int inited;
  __int128 v191;
  __int128 v192;
  int v193;
  uint64_t v194;
  char v195;
  CFTypeRef v196;
  uint64_t v197;
  uint64_t v198;
  double v199;
  int v200;
  uint64_t v201;
  _OWORD v202[3];
  int TransportStreamIDAndQuality;

  inited = 0;
  v186 = 0;
  v187 = &v186;
  v188 = 0x2000000000;
  v189 = 0;
  v182 = 0;
  v183 = &v182;
  v184 = 0x2000000000;
  v185 = 0;
  v2 = a1[9];
  v3 = "eRemoteControlSessionEventInternal";
  v4 = MEMORY[0x1E0C809B0];
  if (*(_BYTE *)(v2 + 176))
    goto LABEL_308;
  v5 = *(NSObject **)(v2 + 120);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carAudioStream_resume_block_invoke_3;
  block[3] = &unk_1E8268008;
  block[4] = &v186;
  block[5] = &v182;
  block[6] = a1[4];
  block[7] = v2;
  dispatch_sync(v5, block);
  if (*((_BYTE *)v187 + 24))
    goto LABEL_308;
  if (!*((_BYTE *)v183 + 24))
  {
    APSLogErrorAt();
LABEL_308:
    v6 = 0;
    goto LABEL_47;
  }
  if (gLogCategory_APEndpointStreamCarPlayAudio <= 50
    && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!FigCFEqual())
  {
    v6 = 0;
    goto LABEL_16;
  }
  v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v6)
  {
    v7 = APSGetFBOPropertyInt64();
    if (inited)
      goto LABEL_46;
    if (v7)
    {
      if (gLogCategory_APEndpointStreamCarPlayAudio <= 60
        && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_39;
    }
LABEL_16:
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_OWORD *)(DerivedStorage + 208) = 0u;
    *(_OWORD *)(DerivedStorage + 224) = 0u;
    *(_OWORD *)(DerivedStorage + 240) = 0u;
    *(_OWORD *)(DerivedStorage + 256) = 0u;
    *(_OWORD *)(DerivedStorage + 272) = 0u;
    *(_OWORD *)(DerivedStorage + 288) = 0u;
    *(_OWORD *)(DerivedStorage + 304) = 0u;
    *(_OWORD *)(DerivedStorage + 320) = 0u;
    *(_DWORD *)(DerivedStorage + 336) = 0;
    *(_QWORD *)(DerivedStorage + 344) = 0;
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    v9 = (const void *)a1[10];
    v10 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    v11 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
    v12 = *(const void **)(*(_QWORD *)(a1[7] + 8) + 24);
    v13 = CMBaseObjectGetDerivedStorage();
    if (!(v10 | v11) || !v12)
    {
      APSLogErrorAt();
      v19 = -16760;
      goto LABEL_45;
    }
    v14 = v13;
    *(_QWORD *)(v13 + 192) = CFRetain(v12);
    Description = APCarPlayAudioFormatInfoGetDescription((uint64_t)v12);
    APCarPlayAudioFormatInfoGetLatencyInfo((uint64_t)v12);
    if (v10)
    {
      *(_BYTE *)(v14 + 400) = 1;
      v16 = CFGetAllocator(v9);
      v17 = CMSimpleQueueCreate(v16, 20, (CMSimpleQueueRef *)(v14 + 408));
      if (v17)
      {
        v19 = v17;
        goto LABEL_44;
      }
      v18 = APSSetFBOPropertyInt64();
      if (v18 != -12784)
      {
        v19 = v18;
        if (v18 != -12782)
        {
          if (v18)
            goto LABEL_44;
        }
      }
      v20 = CFRetain((CFTypeRef)v10);
      *(_QWORD *)(v14 + 368) = v20;
      v21 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
      if (*v21 < 2uLL)
      {
        v19 = -12781;
        goto LABEL_44;
      }
      v22 = (uint64_t (*)(CFTypeRef, uint64_t))v21[2];
      if (!v22)
      {
        v19 = -12782;
        goto LABEL_44;
      }
      v23 = v22(v20, Description);
      if (v23)
      {
        v19 = v23;
        goto LABEL_44;
      }
      v24 = *(_QWORD *)(v14 + 368);
      v25 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
      if (*v25 < 2uLL)
      {
        v19 = -12781;
        goto LABEL_44;
      }
      v26 = (uint64_t (*)(uint64_t))v25[3];
      if (!v26)
      {
        v19 = -12782;
        goto LABEL_44;
      }
      v27 = v26(v24);
      if (v27)
      {
        v19 = v27;
        goto LABEL_44;
      }
    }
    if (!v11)
      goto LABEL_76;
    v28 = CFRetain((CFTypeRef)v11);
    *(_QWORD *)(v14 + 432) = v28;
    v29 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
    if (*v29 < 2uLL)
    {
      v19 = -12781;
    }
    else
    {
      v30 = (uint64_t (*)(CFTypeRef, uint64_t))v29[2];
      if (v30)
      {
        v31 = v30(v28, Description);
        if (v31)
        {
          v19 = v31;
          goto LABEL_44;
        }
        if (*(_DWORD *)(Description + 8) != 1819304813)
        {
          APCarPlayAudioFormatInfoGetStreamType((uint64_t)v12);
          if (gLogCategory_APEndpointStreamCarPlayAudio <= 50
            && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v41 = APSSetFBOPropertyInt64();
          if (v41)
          {
            v19 = v41;
            goto LABEL_44;
          }
        }
        if (APCarPlayAudioFormatInfoGetStreamType((uint64_t)v12) == 102)
        {
          v42 = *(_QWORD *)(v14 + 432);
          CMBaseObject = APAudioEngineGetCMBaseObject(*(_QWORD *)(v14 + 16));
          v44 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
          if (!v44)
          {
            v19 = -12782;
            goto LABEL_44;
          }
          v45 = v44(CMBaseObject, CFSTR("audioSource"), v42);
          if (v45)
          {
            v19 = v45;
            goto LABEL_44;
          }
        }
        else
        {
          v46 = APSSetFBOPropertyInt64();
          if (v46)
          {
            v19 = v46;
            goto LABEL_44;
          }
        }
        *(_WORD *)(v14 + 474) = 0;
        *(_QWORD *)(v14 + 480) = 0;
LABEL_76:
        inited = 0;
        v47 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
        v48 = *(const void **)(*(_QWORD *)(a1[8] + 8) + 24);
        v49 = a1[10];
        theDict = (const __CFDictionary *)a1[11];
        TransportStreamIDAndQuality = 0;
        v50 = CMBaseObjectGetDerivedStorage();
        v202[0] = xmmword_1E82680B8;
        v202[1] = *(_OWORD *)algn_1E82680C8;
        v202[2] = xmmword_1E82680D8;
        v201 = 0;
        v200 = 0;
        v198 = 0;
        v199 = 0.0;
        v196 = 0;
        v197 = 0;
        v195 = 0;
        v194 = 0;
        cf = (CFTypeRef)v49;
        v51 = FigCFWeakReferenceHolderCreateWithReferencedObject();
        if (v51)
        {
          v52 = (void *)v51;
          v53 = APSGetFBOPropertyInt64();
          v54 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (Mutable)
          {
            v56 = Mutable;
            v170 = v48;
            StreamType = APCarPlayAudioFormatInfoGetStreamType(v47);
            if (StreamType)
            {
              v58 = StreamType;
              v168 = v53;
              AudioType = (const void *)APCarPlayAudioFormatInfoGetAudioType(v47);
              v60 = v58 != 102 && v53 == 0;
              v171 = v60;
              if (v58 != 102)
              {
                if (v58 == 100 && CFEqual(AudioType, CFSTR("speechRecognition")) && !*(_QWORD *)(v50 + 368))
                {
                  v174 = v52;
                  if (gLogCategory_APEndpointStreamCarPlayAudio <= 50
                    && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
                  {
                    LogPrintF();
                  }
                  v61 = 0;
                  v164 = 0;
                  v167 = 0;
                  goto LABEL_89;
                }
                v167 = 0;
                v61 = 0;
LABEL_87:
                if (!*(_QWORD *)(v50 + 368))
                {
                  v162 = 0;
                  goto LABEL_110;
                }
                v174 = v52;
                v164 = 1;
LABEL_89:
                *(_QWORD *)&v191 = 0;
                v193 = 0;
                TransportStreamIDAndQuality = carAudioStream_getTransportStreamIDAndQuality(v58, 1, (uint64_t *)&v191, &v193);
                CFDictionaryRemoveAllValues(v56);
                CFDictionarySetInt64();
                v62 = (const void *)*MEMORY[0x1E0CA5448];
                v63 = CFUUIDGetConstantUUIDWithBytes(0, 0x26u, 0x5Au, 0xC5u, 0x1Bu, 0x30u, 0xC0u, 0x40u, 0xADu, 0x90u, 0xC8u, 0xF6u, 0x9Cu, 0x26u, 0xD1u, 0x88u, 0x26u);
                CFDictionarySetValue(v56, v62, v63);
                v64 = *(_QWORD *)(v50 + 96);
                v65 = v191;
                v66 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
                if (v66)
                {
                  v161 = v61;
                  v67 = v56;
                  v68 = (uint64_t *)(v50 + 384);
                  v69 = v67;
                  TransportStreamIDAndQuality = v66(v64, v65);
                  if (!TransportStreamIDAndQuality)
                  {
                    v70 = *v68;
                    v71 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 24);
                    if (v71)
                    {
                      TransportStreamIDAndQuality = v71(v70, carAudioStream_handleIncomingInputDataMessage, 0, cf);
                      if (!TransportStreamIDAndQuality)
                      {
                        v72 = *v68;
                        v73 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                        if (v73)
                        {
                          TransportStreamIDAndQuality = v73(v72);
                          if (!TransportStreamIDAndQuality)
                          {
                            kdebug_trace();
                            v74 = *v68;
                            v75 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                            if (v75)
                            {
                              TransportStreamIDAndQuality = v75(v74);
                              if (!TransportStreamIDAndQuality)
                              {
                                kdebug_trace();
                                v76 = APSGetFBOPropertyInt64();
                                if (!TransportStreamIDAndQuality)
                                {
                                  v56 = v69;
                                  if (v164)
                                  {
                                    v77 = CFGetAllocator(cf);
                                    APSRTPPacketHandlerCreate(v77, 2, 2u, 0, (uint64_t *)(v50 + 392));
                                  }
                                  v162 = v76;
                                  kdebug_trace();
                                  v52 = v174;
                                  v61 = v161;
LABEL_110:
                                  if (!theDict
                                    || !CFDictionaryContainsKey(theDict, CFSTR("StreamStartTimestamp"))
                                    || (CFDictionaryGetInt64(), !TransportStreamIDAndQuality)
                                    && (TransportStreamIDAndQuality = APSNetworkClockNTPConvertUpTicksToNTP()) == 0)
                                  {
                                    if (v58 == 107)
                                    {
                                      v89 = FigCFWeakReferenceHolderCopyReferencedObject();
                                      if (v89 && !v168 && !APSGetFBOPropertyInt64())
                                        FigGetCFPreferenceNumberWithDefault();
                                    }
                                    else
                                    {
                                      v89 = 0;
                                    }
                                    v169 = (const void *)v89;
                                    theDicta = v56;
                                    v175 = v52;
                                    v160 = v194;
                                    v90 = CFDictionaryCreateMutable(v54, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                                    if (v90)
                                    {
                                      v92 = APCarPlayAudioFormatInfoGetStreamType(v47);
                                      v93 = (const void *)APCarPlayAudioFormatInfoGetAudioType(v47);
                                      APCarPlayAudioFormatInfoGetDescription(v47);
                                      APCarPlayAudioFormatInfoGetAudioFormat(v47);
                                      v166 = v47;
                                      APCarPlayAudioFormatInfoGetLatencyInfo(v47);
                                      CFDictionarySetValue(v90, CFSTR("audioType"), v93);
                                      CFDictionarySetInt64();
                                      CFDictionarySetInt64();
                                      if (v170 && v92 == 100 && CFEqual(v93, CFSTR("telephony")))
                                        CFDictionarySetValue(v90, CFSTR("vocoderInfo"), v170);
                                      if (v61 >= 1)
                                      {
                                        CFDictionarySetInt64();
                                        CFDictionarySetInt64();
                                      }
                                      v94 = (const void *)*MEMORY[0x1E0C9AE50];
                                      v56 = theDicta;
                                      if (v162 >= 1)
                                      {
                                        CFDictionarySetValue(v90, CFSTR("input"), (const void *)*MEMORY[0x1E0C9AE50]);
                                        CFDictionarySetInt64();
                                      }
                                      CFDictionarySetValue(v90, CFSTR("supportsHighAccuracyTimestamps"), v94);
                                      if (v171)
                                        CFDictionarySetValue(v90, CFSTR("supportsRTPPacketRedundancy"), v94);
                                      v95 = v92 == 107;
                                      v52 = v175;
                                      if (v95)
                                      {
                                        if (v160)
                                          CFDictionarySetInt64();
                                        CFDictionarySetInt64();
                                      }
                                      TransportStreamIDAndQuality = 0;
                                      v96 = *(_QWORD *)(v50 + 96);
                                      v97 = *(uint64_t (**)(uint64_t, _QWORD, __CFDictionary *, CFTypeRef *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
                                      if (!v97)
                                      {
                                        TransportStreamIDAndQuality = -12782;
                                        goto LABEL_173;
                                      }
                                      v163 = v94;
                                      TransportStreamIDAndQuality = v97(v96, v58, v90, &v196, v50 + 448, v50 + 376);
                                      if (TransportStreamIDAndQuality)
                                      {
LABEL_173:
                                        APSLogErrorAt();
                                        v3 = "session_handleRemoteControlSessionEventInternal" + 13;
                                        v4 = MEMORY[0x1E0C809B0];
                                        goto LABEL_235;
                                      }
                                      kdebug_trace();
                                      *(_QWORD *)(v50 + 520) = CFDictionaryGetInt64();
                                      if (!*(_QWORD *)(v50 + 432))
                                      {
LABEL_188:
                                        if (!v167)
                                        {
LABEL_196:
                                          v113 = (_QWORD *)CMBaseObjectGetDerivedStorage();
                                          v114 = v113 + 25;
                                          if (!FigCFDictionaryGetBooleanIfPresent())
                                            *v114 = 0;
                                          v115 = v113[46];
                                          v116 = (const void **)MEMORY[0x1E0C9AE40];
                                          if (v115
                                            && (v117 = *v114,
                                                (v118 = *(uint64_t (**)(uint64_t, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56)) != 0)
                                            && (v117 ? (v119 = v163) : (v119 = *v116),
                                                (v120 = v118(v115, *MEMORY[0x1E0CA37C8], v119), v120 != -12784)
                                             && (v121 = v120, v120 != -12782)
                                             && v120))
                                          {
                                            APSLogErrorAt();
                                            v3 = "session_handleRemoteControlSessionEventInternal" + 13;
                                            v4 = MEMORY[0x1E0C809B0];
                                          }
                                          else
                                          {
                                            v122 = *v114;
                                            if (v58 != 102)
                                            {
LABEL_213:
                                              APAudioZeroTimeStampProviderSetHighAccuracySupport(v113[7], v122);
                                              if (gLogCategory_APEndpointStreamCarPlayAudio <= 50
                                                && (gLogCategory_APEndpointStreamCarPlayAudio != -1
                                                 || _LogCategory_Initialize()))
                                              {
                                                LogPrintF();
                                              }
                                              TransportStreamIDAndQuality = 0;
                                              DoubleIfPresent = FigCFDictionaryGetDoubleIfPresent();
                                              v4 = MEMORY[0x1E0C809B0];
                                              v56 = theDicta;
                                              v52 = v175;
                                              v91 = v169;
                                              if (DoubleIfPresent
                                                && FigCFDictionaryGetInt64IfPresent()
                                                && (v199 != 0.0 || v198))
                                              {
                                                FigCFDictionaryGetInt64IfPresent();
                                                TransportStreamIDAndQuality = APSNetworkClockNTPConvertNTPToUpTicks();
                                                if (TransportStreamIDAndQuality)
                                                {
                                                  APSLogErrorAt();
LABEL_232:
                                                  v3 = "session_handleRemoteControlSessionEventInternal" + 13;
                                                  goto LABEL_236;
                                                }
                                                carAudioStream_updateZeroTimeFromPhaseValues(v199, (uint64_t)cf, v198, v197);
                                              }
                                              else
                                              {
                                                APAudioZeroTimeStampProviderReset(*(_QWORD *)(v50 + 56));
                                                v128 = (double *)APCarPlayAudioFormatInfoGetDescription(*(_QWORD *)(v50 + 192));
                                                carAudioStream_updateZeroTimeFromSampleRate(*v128);
                                              }
                                              *(_QWORD *)(v50 + 184) = CFDictionaryGetInt64();
                                              if (gLogCategory_APEndpointStreamCarPlayAudio <= 50
                                                && (gLogCategory_APEndpointStreamCarPlayAudio != -1
                                                 || _LogCategory_Initialize()))
                                              {
                                                LogPrintF();
                                              }
                                              goto LABEL_232;
                                            }
                                            v123 = v113[2];
                                            v124 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
                                            if (v124)
                                            {
                                              if (v122)
                                                v125 = *v116;
                                              else
                                                v125 = v163;
                                              v126 = v124(v123, CFSTR("ForceZeroBasedSampleTimes"), v125);
                                              if (!v126)
                                              {
                                                LOBYTE(v122) = *v114;
                                                goto LABEL_213;
                                              }
                                              v121 = v126;
                                            }
                                            else
                                            {
                                              v121 = -12782;
                                            }
                                            v4 = MEMORY[0x1E0C809B0];
                                            APSLogErrorAt();
                                            v3 = "session_handleRemoteControlSessionEventInternal" + 13;
                                          }
                                          v56 = theDicta;
                                          v52 = v175;
                                          TransportStreamIDAndQuality = v121;
                                          APSLogErrorAt();
LABEL_235:
                                          v91 = v169;
                                          goto LABEL_236;
                                        }
                                        CFDictionaryGetInt64();
                                        if (!TransportStreamIDAndQuality)
                                        {
                                          TransportStreamIDAndQuality = APSSetFBOPropertyInt64();
                                          if (!TransportStreamIDAndQuality)
                                          {
                                            TransportStreamIDAndQuality = APAudioEngineSetProperty(*(_QWORD *)(v50 + 16), (uint64_t)CFSTR("cryptor"), *(_QWORD *)(v50 + 448));
                                            if (!TransportStreamIDAndQuality)
                                            {
                                              APCarPlayAudioFormatInfoGetDescription(v166);
                                              APCarPlayAudioFormatInfoGetLatencyInfo(v166);
                                              APSSetFBOPropertyInt64();
                                              if (!TransportStreamIDAndQuality)
                                              {
                                                v110 = *(_QWORD *)(v50 + 16);
                                                AudioFormat = APCarPlayAudioFormatInfoGetAudioFormat(v166);
                                                v112 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, _QWORD, _QWORD, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                                                if (v112)
                                                {
                                                  TransportStreamIDAndQuality = v112(v110, cf, AudioFormat, 0, 0, v202);
                                                  if (!TransportStreamIDAndQuality)
                                                  {
                                                    *(_BYTE *)(v50 + 472) = 1;
                                                    goto LABEL_196;
                                                  }
                                                }
                                                else
                                                {
                                                  TransportStreamIDAndQuality = -12782;
                                                }
                                              }
                                            }
                                          }
                                        }
                                        goto LABEL_173;
                                      }
                                      v191 = 0u;
                                      v192 = 0u;
                                      *(_QWORD *)&v191 = CFRetain(v175);
                                      *((_QWORD *)&v191 + 1) = MEMORY[0x1E0C98BC0];
                                      *(_QWORD *)&v192 = carAudioStream_acquireMessageBacking;
                                      *((_QWORD *)&v192 + 1) = carAudioStream_relinquishMessageBacking;
                                      TransportStreamIDAndQuality = carAudioStream_getTransportStreamIDAndQuality(v58, 0, &v201, &v200);
                                      if (TransportStreamIDAndQuality)
                                      {
                                        APSLogErrorAt();
                                        v3 = "session_handleRemoteControlSessionEventInternal" + 13;
                                        v4 = MEMORY[0x1E0C809B0];
                                        v52 = v175;
                                        goto LABEL_235;
                                      }
                                      CFDictionaryRemoveAllValues(theDicta);
                                      CFDictionarySetInt64();
                                      CFDictionarySetInt64();
                                      v98 = (const void *)*MEMORY[0x1E0CA5448];
                                      v99 = CFUUIDGetConstantUUIDWithBytes(0, 0x26u, 0x5Au, 0xC5u, 0x1Bu, 0x30u, 0xC0u, 0x40u, 0xADu, 0x90u, 0xC8u, 0xF6u, 0x9Cu, 0x26u, 0xD1u, 0x88u, 0x26u);
                                      CFDictionarySetValue(theDicta, v98, v99);
                                      v100 = *(_QWORD *)(v50 + 96);
                                      v101 = v201;
                                      v102 = *(uint64_t (**)(uint64_t, uint64_t, __CFDictionary *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
                                      if (v102)
                                      {
                                        v103 = (uint64_t *)(v50 + 464);
                                        TransportStreamIDAndQuality = v102(v100, v101, theDicta, v50 + 464);
                                        if (!TransportStreamIDAndQuality)
                                        {
                                          v56 = theDicta;
                                          CFDictionaryGetInt64();
                                          v52 = v175;
                                          if (TransportStreamIDAndQuality)
                                            goto LABEL_173;
                                          TransportStreamIDAndQuality = APSSetFBOPropertyInt64();
                                          if (!TransportStreamIDAndQuality)
                                          {
                                            v104 = *v103;
                                            v105 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 8);
                                            if (v105)
                                            {
                                              TransportStreamIDAndQuality = v105(v104);
                                              if (!TransportStreamIDAndQuality)
                                              {
                                                kdebug_trace();
                                                v106 = *v103;
                                                v107 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 16);
                                                v56 = theDicta;
                                                if (!v107)
                                                {
                                                  TransportStreamIDAndQuality = -12782;
                                                  goto LABEL_173;
                                                }
                                                TransportStreamIDAndQuality = v107(v106);
                                                if (TransportStreamIDAndQuality)
                                                  goto LABEL_173;
                                                kdebug_trace();
                                                FigCFDictionaryGetBooleanIfPresent();
                                                if (gLogCategory_APEndpointStreamCarPlayAudio <= 50
                                                  && (gLogCategory_APEndpointStreamCarPlayAudio != -1
                                                   || _LogCategory_Initialize()))
                                                {
                                                  LogPrintF();
                                                }
                                                v108 = v171 && v195 != 0 ? 2 : 1;
                                                v109 = CFGetAllocator(cf);
                                                TransportStreamIDAndQuality = APSRTPPacketHandlerCreate(v109, 1, v108, (uint64_t)&v191, (uint64_t *)(v50 + 488));
                                                if (TransportStreamIDAndQuality)
                                                  goto LABEL_173;
                                                goto LABEL_188;
                                              }
                                            }
                                            else
                                            {
                                              TransportStreamIDAndQuality = -12782;
                                            }
                                          }
                                          APSLogErrorAt();
                                          v3 = "session_handleRemoteControlSessionEventInternal" + 13;
                                          v4 = MEMORY[0x1E0C809B0];
LABEL_178:
                                          v56 = theDicta;
                                          goto LABEL_235;
                                        }
                                      }
                                      else
                                      {
                                        TransportStreamIDAndQuality = -12782;
                                      }
                                    }
                                    else
                                    {
                                      APSLogErrorAt();
                                      TransportStreamIDAndQuality = -6728;
                                    }
                                    APSLogErrorAt();
                                    v3 = "session_handleRemoteControlSessionEventInternal" + 13;
                                    v4 = MEMORY[0x1E0C809B0];
                                    v52 = v175;
                                    goto LABEL_178;
                                  }
LABEL_325:
                                  APSLogErrorAt();
                                  v90 = 0;
                                  v91 = 0;
                                  v3 = "session_handleRemoteControlSessionEventInternal" + 13;
                                  v4 = MEMORY[0x1E0C809B0];
                                  goto LABEL_236;
                                }
                              }
                            }
                            else
                            {
                              TransportStreamIDAndQuality = -12782;
                            }
                          }
                        }
                        else
                        {
                          TransportStreamIDAndQuality = -12782;
                        }
                      }
                    }
                    else
                    {
                      TransportStreamIDAndQuality = -12782;
                    }
                    APSLogErrorAt();
                    v3 = "session_handleRemoteControlSessionEventInternal" + 13;
                    v4 = MEMORY[0x1E0C809B0];
                    v52 = v174;
                    v56 = v69;
                    goto LABEL_139;
                  }
                  v56 = v69;
                }
                else
                {
                  TransportStreamIDAndQuality = -12782;
                }
                APSLogErrorAt();
                v3 = "session_handleRemoteControlSessionEventInternal" + 13;
                v4 = MEMORY[0x1E0C809B0];
                v52 = v174;
LABEL_139:
                v90 = 0;
                v91 = 0;
                goto LABEL_236;
              }
              CFDictionaryRemoveAllValues(v56);
              CFDictionarySetInt64();
              v78 = (const void *)*MEMORY[0x1E0CA5448];
              v79 = CFUUIDGetConstantUUIDWithBytes(0, 0x26u, 0x5Au, 0xC5u, 0x1Bu, 0x30u, 0xC0u, 0x40u, 0xADu, 0x90u, 0xC8u, 0xF6u, 0x9Cu, 0x26u, 0xD1u, 0x88u, 0x26u);
              CFDictionarySetValue(v56, v78, v79);
              v80 = v56;
              v81 = *(_QWORD *)(v50 + 96);
              v82 = *(uint64_t (**)(uint64_t, uint64_t, __CFDictionary *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 64);
              if (v82)
              {
                v165 = v47;
                v83 = (uint64_t *)(v50 + 456);
                v84 = v80;
                TransportStreamIDAndQuality = v82(v81, 1735287668, v80, v50 + 456);
                if (!TransportStreamIDAndQuality)
                {
                  v85 = *v83;
                  v86 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 24);
                  if (v86)
                  {
                    TransportStreamIDAndQuality = v86(v85, carAudioStream_handleOutputControlMessage, 0, cf);
                    if (!TransportStreamIDAndQuality)
                    {
                      v87 = *v83;
                      v88 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                      if (v88)
                      {
                        TransportStreamIDAndQuality = v88(v87);
                        if (!TransportStreamIDAndQuality)
                        {
                          v61 = APSGetFBOPropertyInt64();
                          v56 = v84;
                          if (TransportStreamIDAndQuality)
                            goto LABEL_325;
                          v167 = 1;
                          v47 = v165;
                          goto LABEL_87;
                        }
                      }
                      else
                      {
                        TransportStreamIDAndQuality = -12782;
                      }
                    }
                  }
                  else
                  {
                    TransportStreamIDAndQuality = -12782;
                  }
                }
              }
              else
              {
                v84 = v80;
                TransportStreamIDAndQuality = -12782;
              }
              APSLogErrorAt();
              v90 = 0;
              v91 = 0;
              v3 = "session_handleRemoteControlSessionEventInternal" + 13;
              v4 = MEMORY[0x1E0C809B0];
              v56 = v84;
LABEL_236:
              if (TransportStreamIDAndQuality)
                carAudioStream_teardownTransportStreams((uint64_t)cf, 0);
              CFRelease(v52);
              if (v91)
                CFRelease(v91);
              CFRelease(v56);
              if (v90)
                CFRelease(v90);
LABEL_242:
              if (v196)
                CFRelease(v196);
              inited = TransportStreamIDAndQuality;
              if (TransportStreamIDAndQuality)
                goto LABEL_46;
              if (APCarPlayAudioFormatInfoGetStreamType(*(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24)) == 102)
              {
                v129 = CMBaseObjectGetDerivedStorage();
                *(_QWORD *)(v129 + 536) = 0;
                *(_QWORD *)(v129 + 528) = 0;
              }
              if (APCarPlayAudioFormatInfoGetStreamType(*(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24)) != 107)
              {
                if (APCarPlayAudioFormatInfoGetDescription(*(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24)))
                {
                  v130 = *(_QWORD *)(a1[9] + 88);
                  v131 = (double *)APCarPlayAudioFormatInfoGetDescription(*(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24));
                  inited = APCarPlayAnalyticsInitASRCollection(v130, *v131);
                  if (inited)
                  {
                    if (gLogCategory_APEndpointStreamCarPlayAudio <= 60
                      && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
                    {
                      APCarPlayAudioFormatInfoGetDescription(*(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24));
                      LogPrintF();
                    }
                    inited = 0;
                  }
                }
                inited = APCarPlayAnalyticsInitAudioAnomaliesCollection(*(_QWORD *)(a1[9] + 88));
                if (inited)
                {
                  if (gLogCategory_APEndpointStreamCarPlayAudio <= 60
                    && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
                  {
                    LogPrintF();
                  }
                  inited = 0;
                }
                v132 = *(_QWORD *)(a1[9] + 88);
                v133 = APCarPlayAudioFormatInfoGetStreamType(*(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24));
                APCarPlayAnalyticsStartCollections(v132, v133, *(_QWORD *)(a1[9] + 520), 0);
              }
              v134 = a1[9];
              if (*(_QWORD *)(v134 + 368))
              {
                v135 = *(NSObject **)(v134 + 352);
                v180[0] = v4;
                v180[1] = 0x40000000;
                v180[2] = __carAudioStream_resume_block_invoke_4;
                v180[3] = &__block_descriptor_tmp_113;
                v180[4] = v134;
                dispatch_async(v135, v180);
              }
              v136 = APCarPlayAudioFormatInfoGetStreamType(*(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24));
              v137 = (_QWORD *)a1[9];
              if (v136 == 102)
              {
                v138 = v137[2];
                v139 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
                if (!v139)
                {
                  inited = -12782;
                  goto LABEL_46;
                }
                inited = v139(v138);
                if (inited)
                  goto LABEL_46;
                goto LABEL_271;
              }
              if (!v137[54])
              {
LABEL_271:
                v32 = 0;
LABEL_272:
                v144 = CMBaseObjectGetDerivedStorage();
                if (CFEqual(*(CFTypeRef *)(v144 + 40), (CFTypeRef)*MEMORY[0x1E0CA4858])
                  || FigCFEqual()
                  || FigCFEqual()
                  || FigCFEqual())
                {
                  APSEventRecorderRecordEvent();
                }
                else
                {
                  APSLogErrorAt();
                }
                *(_BYTE *)(a1[9] + 176) = 1;
                if (gLogCategory_APEndpointStreamCarPlayAudio <= 50
                  && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
                {
                  LogPrintF();
                }
LABEL_48:
                if (!inited)
                  goto LABEL_50;
                goto LABEL_49;
              }
              v140 = v137[52];
              v179[0] = v4;
              v179[1] = 0x40000000;
              v179[2] = __carAudioStream_resume_block_invoke_5;
              v179[3] = &unk_1E8268050;
              v179[4] = a1[7];
              v179[5] = v137;
              dispatch_async(v140, v179);
              v141 = *(_QWORD *)(a1[9] + 448);
              v142 = APCarPlayAudioFormatInfoGetDescription(*(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24));
              if (*(_DWORD *)(v142 + 20) <= 1u)
              {
                v145 = v142;
                if (v141)
                {
                  v146 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                  v147 = 1440;
                  if (v146)
                    v147 = 1440 - v146(v141);
                }
                else
                {
                  v147 = 1440;
                }
                v143 = v147 / *(_DWORD *)(v145 + 16);
                if ((double)(1000 * v143) / *(double *)v145 > 7.5)
                  v143 = (*(double *)v145 * 7.5 / 1000.0);
              }
              else
              {
                v143 = 1;
              }
              v148 = a1[9];
              *(_DWORD *)(v148 + 440) = v143;
              v149 = *(_QWORD *)(v148 + 432);
              v150 = *(_QWORD *)(v148 + 416);
              v151 = a1[10];
              v152 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
              if (*v152 < 2uLL)
              {
                v157 = -12781;
              }
              else
              {
                v153 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void (*)(const void *), uint64_t))v152[3];
                if (v153)
                {
                  inited = v153(v149, v143, v150, carAudioStreamHandleDataReady, v151);
                  if (inited)
                    goto LABEL_46;
                  dispatch_suspend(*(dispatch_object_t *)(a1[9] + 416));
                  v154 = *(_QWORD *)(a1[9] + 432);
                  v155 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
                  if (*v155 < 2uLL)
                  {
                    v158 = -12781;
                  }
                  else
                  {
                    v156 = (uint64_t (*)(uint64_t))v155[4];
                    if (v156)
                    {
                      inited = v156(v154);
                      if (!inited)
                      {
                        v32 = 1;
                        goto LABEL_272;
                      }
LABEL_305:
                      APSLogErrorAt();
                      v32 = 1;
                      goto LABEL_48;
                    }
                    v158 = -12782;
                  }
                  inited = v158;
                  goto LABEL_305;
                }
                v157 = -12782;
              }
              inited = v157;
              goto LABEL_46;
            }
            APSLogErrorAt();
            TransportStreamIDAndQuality = -16760;
            carAudioStream_teardownTransportStreams((uint64_t)cf, 0);
            CFRelease(v52);
            v159 = v56;
          }
          else
          {
            APSLogErrorAt();
            TransportStreamIDAndQuality = -16761;
            carAudioStream_teardownTransportStreams((uint64_t)cf, 0);
            v159 = (__CFDictionary *)v52;
          }
          CFRelease(v159);
        }
        else
        {
          APSLogErrorAt();
          TransportStreamIDAndQuality = -16761;
          carAudioStream_teardownTransportStreams(v49, 0);
        }
        v3 = "session_handleRemoteControlSessionEventInternal" + 13;
        v4 = MEMORY[0x1E0C809B0];
        goto LABEL_242;
      }
      v19 = -12782;
    }
LABEL_44:
    APSLogErrorAt();
    v3 = "eRemoteControlSessionEventInternal";
    v4 = MEMORY[0x1E0C809B0];
LABEL_45:
    carAudioStream_teardownAudioProcessing();
    inited = v19;
LABEL_46:
    APSLogErrorAt();
LABEL_47:
    v32 = 0;
    goto LABEL_48;
  }
  APSLogErrorAt();
LABEL_39:
  v32 = 0;
  inited = -6709;
LABEL_49:
  carAudioStream_suspendInternal(a1[10], 0);
LABEL_50:
  if (v32)
    dispatch_resume(*(dispatch_object_t *)(a1[9] + 416));
  CFRetain((CFTypeRef)a1[10]);
  v33 = a1[10];
  v34 = *(NSObject **)(a1[9] + 112);
  v177[0] = v4;
  v177[1] = *((_QWORD *)v3 + 227);
  v177[2] = __carAudioStream_resume_block_invoke_6;
  v177[3] = &__block_descriptor_tmp_116;
  v35 = a1[13];
  v177[4] = a1[12];
  v177[5] = v33;
  v178 = inited;
  v177[6] = v35;
  dispatch_async(v34, v177);
  v36 = *(const void **)(*(_QWORD *)(a1[5] + 8) + 24);
  if (v36)
    CFRelease(v36);
  v37 = *(const void **)(*(_QWORD *)(a1[6] + 8) + 24);
  if (v37)
    CFRelease(v37);
  v38 = *(const void **)(*(_QWORD *)(a1[7] + 8) + 24);
  if (v38)
    CFRelease(v38);
  v39 = *(const void **)(*(_QWORD *)(a1[8] + 8) + 24);
  if (v39)
    CFRelease(v39);
  v40 = (const void *)a1[11];
  if (v40)
    CFRelease(v40);
  CFRelease((CFTypeRef)a1[10]);
  if (v6)
    CFRelease(v6);
  _Block_object_dispose(&v182, 8);
  _Block_object_dispose(&v186, 8);
}

_QWORD *__carAudioStream_resume_block_invoke_3(_QWORD *result)
{
  *(_BYTE *)(*(_QWORD *)(result[4] + 8) + 24) = *(_BYTE *)(result[7] + 128);
  *(_BYTE *)(*(_QWORD *)(result[5] + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result[6] + 8) + 24) == *(_DWORD *)(result[7] + 132);
  return result;
}

CFTypeRef __carAudioStream_resume_block_invoke_4(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeRef result;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(const void **)(v2 + 392);
  if (v3)
  {
    CFRetain(v3);
    v2 = *(_QWORD *)(a1 + 32);
  }
  v4 = *(const void **)(v2 + 368);
  if (v4)
  {
    CFRetain(v4);
    v2 = *(_QWORD *)(a1 + 32);
  }
  result = *(CFTypeRef *)(v2 + 376);
  if (result)
  {
    result = CFRetain(result);
    v2 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(v2 + 360) = 1;
  return result;
}

uint64_t __carAudioStream_resume_block_invoke_5(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v2 + 424) = 1;
  *(_DWORD *)(v2 + 496) = 0;
  APCarPlayAudioFormatInfoGetDescription(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  result = APSAudioStatsCreate();
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 512) = 0;
  return result;
}

void carAudioStreamHandleDataReady(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t Description;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int *EmptyBBuf;
  _QWORD *v8;
  unsigned int (*v9)(uint64_t, uint64_t);
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t (*v20)(uint64_t, uint64_t, unint64_t, _QWORD *, uint64_t, uint64_t *, int *, _OWORD *, uint64_t);
  int v21;
  uint64_t v22;
  __int16 v23;
  unsigned int v24;
  size_t v25;
  uint64_t v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t, char *, size_t, char *, size_t, char *, unint64_t);
  const void *v33;
  CFTypeRef v34;
  CFTypeRef v35;
  NSObject *v36;
  uint64_t v37;
  _QWORD *v38;
  void (*v39)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t *, int *, _OWORD *, uint64_t);
  uint64_t v40;
  size_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  size_t lengthAtOffsetOut[9];
  int v46;
  uint64_t v47;
  __int16 v48;
  char *dataPointerOut;
  unsigned int v50;
  _OWORD v51[4];
  _QWORD v52[2];
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD v60[4];

  if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 424))
    return;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v59 = 0;
  memset(v60, 0, 10);
  v57 = 0;
  v58 = 0;
  v56 = 0;
  v55 = 0;
  v53 = 0;
  v54 = 0;
  v52[0] = 0;
  v52[1] = 0;
  memset(v51, 0, sizeof(v51));
  v50 = 0;
  Description = APCarPlayAudioFormatInfoGetDescription(*(_QWORD *)(DerivedStorage + 192));
  v4 = *(_QWORD *)(DerivedStorage + 432);
  v5 = *(unsigned int *)(DerivedStorage + 440);
  v6 = 0;
  EmptyBBuf = 0;
  v8 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v8 < 2uLL)
  {
LABEL_58:
    v37 = *(_QWORD *)(DerivedStorage + 432);
    v38 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
    if (*v38 >= 2uLL)
    {
      v39 = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t *, int *, _OWORD *, uint64_t))v38[9];
      if (v39)
        v39(v37, 0, 0, 0, 0, &v56, &v55, v51, v40);
    }
    if (!EmptyBBuf)
      goto LABEL_63;
    goto LABEL_62;
  }
  v9 = (unsigned int (*)(uint64_t, uint64_t))v8[8];
  if (v9 && !v9(v4, v5))
  {
    v6 = 0;
    EmptyBBuf = 0;
    goto LABEL_58;
  }
  EmptyBBuf = (int *)APSRTPPacketHandlerGetEmptyBBuf(*(_QWORD *)(DerivedStorage + 488));
  v10 = APSRTPPacketHandlerGetEmptyBBuf(*(_QWORD *)(DerivedStorage + 488));
  v6 = v10;
  v11 = *(unsigned int *)(DerivedStorage + 496);
  if (!EmptyBBuf || !v10)
  {
    if (!(_DWORD)v11
      && gLogCategory_APEndpointStreamCarPlayAudio <= 90
      && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    ++*(_DWORD *)(DerivedStorage + 496);
    goto LABEL_58;
  }
  if ((_DWORD)v11)
  {
    if (gLogCategory_APEndpointStreamCarPlayAudio <= 90)
    {
      if (gLogCategory_APEndpointStreamCarPlayAudio == -1)
      {
        if (!_LogCategory_Initialize())
          goto LABEL_16;
        v11 = *(unsigned int *)(DerivedStorage + 496);
      }
      v40 = v11;
      LogPrintF();
    }
LABEL_16:
    *(_DWORD *)(DerivedStorage + 496) = 0;
  }
  if (APSTransportMessageGetAudioDataPointer())
    goto LABEL_66;
  v12 = *(_QWORD *)(DerivedStorage + 448);
  if (!v12)
  {
    v43 = 0;
    v15 = v58;
    goto LABEL_25;
  }
  v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  v14 = v13 ? v13(v12) : 0;
  v43 = v14;
  v15 = v58 - v14;
  if (v58 <= v14)
  {
LABEL_66:
    APSLogErrorAt();
    goto LABEL_58;
  }
  v58 -= v14;
LABEL_25:
  v16 = *(_QWORD *)(DerivedStorage + 432);
  v44 = Description;
  if (*(_DWORD *)(Description + 20) <= 1u)
    v17 = 0;
  else
    v17 = v52;
  v18 = *(unsigned int *)(DerivedStorage + 440);
  v19 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v19 >= 2uLL)
  {
    v20 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD *, uint64_t, uint64_t *, int *, _OWORD *, uint64_t))v19[9];
    if (v20)
    {
      v21 = v20(v16, v59, v15, v17, v18, &v56, &v55, v51, v40);
      if (v21)
      {
        if (v21 == -16774)
          goto LABEL_62;
      }
      else
      {
        APSAudioStats_ProcessAudioBuffer();
        v22 = v44;
        if (!APSTransportMessageCreateReferencingBBufWithAudioDataLength() && v6[2])
        {
          *(_DWORD *)v6 = carAudioStream_getRTPPayloadType(*(_DWORD *)(DerivedStorage + 68));
          v23 = *(_WORD *)(DerivedStorage + 474) + 1;
          *(_WORD *)(DerivedStorage + 474) = v23;
          LOWORD(v60[0]) = v23;
          *(_DWORD *)((char *)v60 + 6) = 0;
          v24 = *(_BYTE *)(DerivedStorage + 200)
              ? (*(double *)v51 - (double)((unint64_t)(*(double *)v51 * 2.32830644e-10) << 32))
              : *(_DWORD *)(DerivedStorage + 480);
          *(_DWORD *)((char *)v60 + 2) = v24;
          if (!APSTransportMessageSetAudioDataHeader())
          {
            if (APSRTPPacketHandlerComposeRTPPacketWithBBuf(*(_QWORD *)(DerivedStorage + 488), v6, v43, EmptyBBuf, &v50))goto LABEL_55;
            if (!*(_QWORD *)(DerivedStorage + 448))
            {
LABEL_49:
              v33 = *(const void **)(DerivedStorage + 488);
              if (v33)
                v34 = CFRetain(v33);
              else
                v34 = 0;
              CFRetain(a1);
              v35 = *(CFTypeRef *)(DerivedStorage + 464);
              if (v35)
                v35 = CFRetain(v35);
              v36 = *(NSObject **)(DerivedStorage + 168);
              lengthAtOffsetOut[0] = MEMORY[0x1E0C809B0];
              lengthAtOffsetOut[1] = 0x40000000;
              lengthAtOffsetOut[2] = (size_t)__carAudioStream_sendOneAudioDataMessage_block_invoke;
              lengthAtOffsetOut[3] = (size_t)&__block_descriptor_tmp_154;
              v47 = v60[0];
              v48 = v60[1];
              lengthAtOffsetOut[4] = DerivedStorage;
              lengthAtOffsetOut[5] = (size_t)a1;
              lengthAtOffsetOut[6] = (size_t)v35;
              lengthAtOffsetOut[7] = (size_t)EmptyBBuf;
              v46 = v55;
              lengthAtOffsetOut[8] = (size_t)v34;
              dispatch_async(v36, lengthAtOffsetOut);
              *(_QWORD *)(DerivedStorage + 480) += (*(_DWORD *)(v22 + 20) * v55);
              return;
            }
            lengthAtOffsetOut[0] = 0;
            dataPointerOut = 0;
            if (APSTransportMessageGetAudioAADPointer()
              || CMBlockBufferGetDataPointer(*((CMBlockBufferRef *)EmptyBBuf + 2), 0, lengthAtOffsetOut, 0, &dataPointerOut))
            {
              goto LABEL_55;
            }
            v25 = lengthAtOffsetOut[0];
            v26 = v50;
            v27 = &dataPointerOut[v50];
            dataPointerOut = v27;
            if (v43)
            {
              if (CMBlockBufferGetDataPointer(*((CMBlockBufferRef *)EmptyBBuf + 2), lengthAtOffsetOut[0] - v43, 0, 0, &v57))
              {
LABEL_55:
                APSLogErrorAt();
                v6 = 0;
                goto LABEL_62;
              }
              v27 = dataPointerOut;
              v28 = v50;
              v41 = lengthAtOffsetOut[0];
              v42 = v57;
            }
            else
            {
              v41 = lengthAtOffsetOut[0];
              v42 = 0;
              v28 = v50;
            }
            v29 = *(_QWORD *)(DerivedStorage + 448);
            v31 = v53;
            v30 = v54;
            v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *, size_t, char *, size_t, char *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
            if (v32 && !v32(v29, v30, v31, v27, v25 - (v43 + v26), v27, v41 - v28, v42, v43))
            {
              v22 = v44;
              goto LABEL_49;
            }
            goto LABEL_55;
          }
        }
      }
    }
  }
  APSLogErrorAt();
LABEL_62:
  APSRTPPacketHandlerReturnBBuf(*(_QWORD *)(DerivedStorage + 488), EmptyBBuf);
LABEL_63:
  if (v6)
    APSRTPPacketHandlerReturnBBuf(*(_QWORD *)(DerivedStorage + 488), v6);
}

void __carAudioStream_resume_block_invoke_6(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD, _QWORD);

  v2 = *(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 32);
  if (v2)
    v2(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 48));
  if (!*(_DWORD *)(a1 + 56))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t carAudioStream_sendFlush(const void *a1, __int16 a2, int a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  uint64_t v8;
  _QWORD v10[7];
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  v7 = *(NSObject **)(DerivedStorage + 168);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = __carAudioStream_sendFlush_block_invoke;
  v10[3] = &unk_1E82680F0;
  v10[5] = a1;
  v10[6] = DerivedStorage;
  v12 = a2;
  v11 = a3;
  v10[4] = &v13;
  dispatch_async(v7, v10);
  v8 = *((unsigned int *)v14 + 6);
  _Block_object_dispose(&v13, 8);
  return v8;
}

uint64_t carAudioStream_sendMainHighMessage(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  NSObject *v8;
  _QWORD v10[7];
  int v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 == 1734700576)
  {
    v7 = DerivedStorage;
    CFRetain(a1);
    CFRetain(a3);
    v8 = *(NSObject **)(v7 + 168);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 0x40000000;
    v10[2] = __carAudioStream_sendMainHighMessage_block_invoke;
    v10[3] = &__block_descriptor_tmp_134;
    v11 = 1734700576;
    v10[4] = v7;
    v10[5] = a3;
    v10[6] = a1;
    dispatch_async(v8, v10);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960561;
  }
}

void carAudioStream_handleOutputControlMessage(const void *a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  NSObject *v10;
  _QWORD v11[8];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 == 1634168383)
  {
    v9 = DerivedStorage;
    CFRetain(a1);
    CFRetain(a3);
    CFRetain(a4);
    v10 = *(NSObject **)(v9 + 168);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = __carAudioStream_handleOutputControlMessage_block_invoke;
    v11[3] = &__block_descriptor_tmp_140_0;
    v11[4] = v9;
    v11[5] = a3;
    v11[6] = a4;
    v11[7] = a1;
    dispatch_async(v10, v11);
  }
}

uint64_t carAudioStream_getTransportStreamIDAndQuality(int a1, int a2, uint64_t *a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  switch(a1)
  {
    case 'd':
      v4 = 0;
      v5 = 1835626096;
      if (!a2)
        v5 = 1835100526;
      goto LABEL_14;
    case 'e':
      v4 = 0;
      v5 = 1634497568;
      goto LABEL_14;
    case 'f':
      v4 = 0;
      *a3 = 1734700576;
      v6 = 10;
      goto LABEL_15;
    case 'j':
      v4 = 0;
      v5 = 1635088495;
      goto LABEL_14;
    case 'k':
      v4 = 0;
      v5 = 1869575779;
      goto LABEL_14;
    case 'l':
      v4 = 0;
      v5 = 1635283556;
      goto LABEL_14;
    case 'm':
      v4 = 0;
      v5 = 1870033508;
LABEL_14:
      *a3 = v5;
      v6 = 3;
LABEL_15:
      *a4 = v6;
      break;
    default:
      if (gLogCategory_APEndpointStreamCarPlayAudio <= 50
        && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v4 = 4294950536;
      APSLogErrorAt();
      break;
  }
  return v4;
}

void carAudioStream_handleIncomingInputDataMessage(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  int v9;
  NSObject *v10;
  _QWORD block[8];
  int v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 > 1869575778)
  {
    if (a2 != 1870033508)
    {
      v9 = 1869575779;
LABEL_6:
      if (a2 != v9)
        return;
    }
  }
  else if (a2 != 1835100526)
  {
    v9 = 1836213604;
    goto LABEL_6;
  }
  CFRetain(a4);
  CFRetain(a3);
  v10 = *(NSObject **)(DerivedStorage + 352);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carAudioStream_handleIncomingInputDataMessage_block_invoke;
  block[3] = &__block_descriptor_tmp_144;
  block[4] = DerivedStorage;
  block[5] = a4;
  v12 = a2;
  block[6] = a1;
  block[7] = a3;
  dispatch_async(v10, block);
}

uint64_t carAudioStream_acquireMessageBacking(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, uint64_t);
  uint64_t v7;

  v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    v4 = (const void *)v3;
    v5 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 464);
    if (v5)
    {
      v6 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v6)
        v7 = v6(v5, 0, a2);
      else
        v7 = 4294954514;
    }
    else
    {
      APSLogErrorAt();
      v7 = 4294950533;
    }
    CFRelease(v4);
  }
  else
  {
    APSLogErrorAt();
    return 4294950534;
  }
  return v7;
}

uint64_t carAudioStream_relinquishMessageBacking(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    v4 = (const void *)v3;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v6 = *(_QWORD *)(DerivedStorage + 464);
    if (v6 && *(_BYTE *)(DerivedStorage + 176))
    {
      v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v7)
        v8 = v7(v6, a2);
      else
        v8 = 4294954514;
    }
    else
    {
      v8 = 0;
    }
    CFRelease(v4);
  }
  else
  {
    APSLogErrorAt();
    return 4294950534;
  }
  return v8;
}

void __carAudioStream_sendFlush_block_invoke(uint64_t a1)
{
  uint64_t v2;
  CFAllocatorRef v3;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  int v6;
  const __CFAllocator *v7;
  __CFDictionary *Mutable;
  CFStringRef v9;
  CFDataRef Data;
  CFTypeRef v11;
  uint64_t (*v12)(CFTypeRef, uint64_t, _QWORD, _QWORD);
  int v13;
  CFTypeRef cf;

  cf = 0;
  if (gLogCategory_APEndpointStreamCarPlayAudio <= 50
    && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 96);
  v3 = CFGetAllocator(*(CFTypeRef *)(a1 + 40));
  CMBaseObject = APSenderSessionGetCMBaseObject(v2);
  v5 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
  if (v5)
    v6 = v5(CMBaseObject, CFSTR("TransportControlStream"), v3, &cf);
  else
    v6 = -12782;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    APSLogErrorAt();
    Mutable = 0;
    v9 = 0;
    Data = 0;
    goto LABEL_17;
  }
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v9 = 0;
LABEL_29:
    Data = 0;
LABEL_31:
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -16761;
    goto LABEL_17;
  }
  v9 = CFStringCreateWithFormat(v7, 0, CFSTR("seq=%u;rtptime=%u"),
         *(unsigned __int16 *)(a1 + 60),
         *(unsigned int *)(a1 + 56));
  if (!v9)
  {
    APSLogErrorAt();
    goto LABEL_29;
  }
  CFDictionarySetValue(Mutable, CFSTR("RTP-Info"), v9);
  Data = CFPropertyListCreateData(v7, Mutable, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (!Data)
  {
    APSLogErrorAt();
    goto LABEL_31;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigCreateBlockBufferWithCFDataNoCopy();
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)
    || ((v11 = cf,
         (v12 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 56)) == 0)
      ? (v13 = -12782)
      : (v13 = v12(v11, 1718383464, 0, 0)),
        (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v13) != 0))
  {
    APSLogErrorAt();
  }
LABEL_17:
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (v9)
    CFRelease(v9);
  if (Data)
    CFRelease(Data);
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __carAudioStream_sendMainHighMessage_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 176))
  {
    carAudioStream_MarkPacket(*(_QWORD *)(v2 + 192));
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 464);
    v5 = *(unsigned int *)(a1 + 56);
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v6)
      v6(v4, v5, v3);
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

uint64_t carAudioStream_MarkPacket(uint64_t a1)
{
  unsigned int v1;

  v1 = APCarPlayAudioFormatInfoGetStreamType(a1) - 100;
  if ((v1 >= 7 || ((0x47u >> v1) & 1) == 0)
    && gLogCategory_APEndpointStreamCarPlayAudio <= 60
    && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return kdebug_trace();
}

void __carAudioStream_handleOutputControlMessage_block_invoke(uint64_t a1)
{
  CFTypeRef v2;
  int v3;

  v3 = 0;
  v2 = 0;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 176))
  {
    if (APSTransportMessageGetRetransmitRequest())
    {
      APSLogErrorAt();
    }
    else
    {
      if (gLogCategory_APEndpointStreamCarPlayAudio <= 30
        && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      --HIWORD(v3);
    }
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 56));
  if (v2)
    CFRelease(v2);
}

void __carAudioStream_handleOutputControlMessage_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t *);
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  v12 = 0;
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 176))
  {
    v3 = *(_QWORD *)(v2 + 456);
    v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v4
      || v4(v3, 4, &v12)
      || APSTransportMessageSetRetransmitResponseFutile()
      || (v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 456),
          v6 = v12,
          (v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 48)) == 0)
      || v7(v5, 560031598, v6))
    {
      APSLogErrorAt();
    }
    else if (gLogCategory_APEndpointStreamCarPlayAudio <= 30
           && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v8 + 536) += *(int *)(a1 + 48);
  v9 = v12;
  if (v12)
  {
    v10 = *(_QWORD *)(v8 + 456);
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v11)
      v11(v10, v9);
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __carAudioStream_handleOutputControlMessage_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  const void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 176))
  {
    v3 = *(_QWORD *)(v2 + 456);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v5)
      v5(v3, 1634168352, v4);
  }
  v6 = *(const void **)(a1 + 40);
  ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 528);
  CFRelease(v6);
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void __carAudioStream_handleIncomingInputDataMessage_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t DerivedStorage;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 360))
  {
    if (*(_BYTE *)(v2 + 400))
    {
      v3 = *(_QWORD *)(a1 + 40);
      v4 = *(_QWORD *)(v2 + 392);
      v5 = *(_QWORD *)(v2 + 368);
      v6 = *(_QWORD *)(v2 + 376);
      v7 = *(_DWORD *)(a1 + 64);
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(DerivedStorage + 408)) >= 1
        && gLogCategory_APEndpointStreamCarPlayAudio <= 50
        && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      kdebug_trace();
      if (CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(DerivedStorage + 408)) >= 1)
      {
        do
        {
          v9 = (void *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(DerivedStorage + 408));
          if (carAudioStream_processOneInputDataMessage(v3, v4, v5, v6, v7, v9)
            && gLogCategory_APEndpointStreamCarPlayAudio <= 90
            && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          if (v9)
            CFRelease(v9);
        }
        while (CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(DerivedStorage + 408)) > 0);
      }
      v2 = *(_QWORD *)(a1 + 32);
      *(_BYTE *)(v2 + 400) = 0;
    }
    carAudioStream_processOneInputDataMessage(*(_QWORD *)(a1 + 40), *(_QWORD *)(v2 + 392), *(_QWORD *)(v2 + 368), *(_QWORD *)(v2 + 376), *(_DWORD *)(a1 + 64), *(void **)(a1 + 56));
    goto LABEL_26;
  }
  if (!*(_BYTE *)(v2 + 400))
  {
    if (gLogCategory_APEndpointStreamCarPlayAudio > 30
      || gLogCategory_APEndpointStreamCarPlayAudio == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_26;
    }
LABEL_32:
    LogPrintF();
    goto LABEL_26;
  }
  if (gLogCategory_APEndpointStreamCarPlayAudio <= 30
    && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v10 = *(const void **)(a1 + 56);
  v11 = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(v11 + 408))
  {
    APSLogErrorAt();
    goto LABEL_26;
  }
  v12 = v11;
  CFRetain(v10);
  if (CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(v12 + 408), v10)
    && gLogCategory_APEndpointStreamCarPlayAudio <= 50
    && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
  {
    goto LABEL_32;
  }
LABEL_26:
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 56));
}

uint64_t carAudioStream_processOneInputDataMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6)
{
  uint64_t DerivedStorage;
  uint64_t Description;
  char RTPPayloadType;
  uint64_t NewMessage;
  uint64_t v15;
  _QWORD *v16;
  uint64_t (*v17)(uint64_t, void **, uint64_t *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  uint64_t (*v23)(uint64_t, void *, uint64_t, _QWORD, uint64_t, _OWORD *);
  uint64_t v24;
  uint64_t v25;
  _OWORD v27[3];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  void *v32;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v31 = 0;
  v32 = 0;
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  memset(v27, 0, sizeof(v27));
  if (*(_BYTE *)(DerivedStorage + 360))
  {
    Description = APCarPlayAudioFormatInfoGetDescription(*(_QWORD *)(DerivedStorage + 192));
    RTPPayloadType = carAudioStream_getRTPPayloadType(a5);
    NewMessage = APSRTPPacketHandlerReadNewMessage(a2, a6, RTPPayloadType);
    if ((_DWORD)NewMessage)
    {
      v25 = NewMessage;
    }
    else
    {
      if (!a4 || (v15 = APSRTPPacketHandlerDecryptCurrentMessage(a2, a4), !(_DWORD)v15))
      {
        while (APSRTPPacketHandlerGetNextPacket(a2, (uint64_t)&v29))
        {
          kdebug_trace();
          v16 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
          if (*v16 < 2uLL)
          {
            v25 = 4294954515;
            goto LABEL_21;
          }
          v17 = (uint64_t (*)(uint64_t, void **, uint64_t *))v16[5];
          if (!v17)
          {
            v25 = 4294954514;
            goto LABEL_21;
          }
          v18 = v17(a3, &v32, &v31);
          if ((_DWORD)v18)
          {
            v25 = v18;
            goto LABEL_21;
          }
          memcpy(v32, (const void *)v30, *((size_t *)&v30 + 1));
          *(double *)v27 = (double)bswap32(DWORD1(v29));
          v19 = 1;
          DWORD2(v28) = 1;
          v20 = *((_QWORD *)&v30 + 1);
          if (*(_DWORD *)(Description + 20) <= 1u)
            v19 = (DWORD2(v30) / *(_DWORD *)(Description + 16));
          v21 = v32;
          v22 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
          if (*v22 < 2uLL)
          {
            v25 = 4294954515;
            goto LABEL_21;
          }
          v23 = (uint64_t (*)(uint64_t, void *, uint64_t, _QWORD, uint64_t, _OWORD *))v22[6];
          if (!v23)
          {
            v25 = 4294954514;
            goto LABEL_21;
          }
          v24 = v23(a3, v21, v20, 0, v19, v27);
          if ((_DWORD)v24)
          {
            v25 = v24;
            goto LABEL_21;
          }
        }
        return 0;
      }
      v25 = v15;
    }
LABEL_21:
    APSLogErrorAt();
    return v25;
  }
  return 0;
}

uint64_t carAudioStream_getRTPPayloadType(int a1)
{
  uint64_t v1;

  if (a1 > 1835100525)
  {
    if (a1 > 1869575778)
    {
      if (a1 == 1869575779)
        return 107;
      if (a1 == 1870033508)
        return 109;
    }
    else
    {
      if (a1 == 1835100526)
        return 100;
      if (a1 == 1836213604)
        return 104;
    }
  }
  else if (a1 > 1635088494)
  {
    if (a1 == 1635088495)
      return 106;
    if (a1 == 1635283556)
      return 108;
  }
  else
  {
    if (a1 == 1634497568)
      return 101;
    if (a1 == 1634887012)
      return 105;
  }
  v1 = 1835100526;
  if (gLogCategory_APEndpointStreamCarPlayAudio <= 90
    && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v1;
}

void __carAudioStream_sendOneAudioDataMessage_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  const void *v10;
  const void *v11;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 176))
  {
    carAudioStream_MarkPacket(*(_QWORD *)(v2 + 192));
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v4 = mach_absolute_time();
    if (*(_QWORD *)(DerivedStorage + 512) && (unint64_t)UpTicksToMilliseconds() >= 0x33)
      carAudioStream_MarkPacket(*(_QWORD *)(DerivedStorage + 192));
    *(_QWORD *)(DerivedStorage + 512) = v4;
    v5 = *(_QWORD *)(a1 + 48);
    v6 = **(_DWORD **)(a1 + 56) - 100;
    if (v6 < 0xA && ((0x3F3u >> v6) & 1) != 0)
    {
      v7 = dword_1C964D7F0[v6];
    }
    else
    {
      v7 = 1835100526;
      if (gLogCategory_APEndpointStreamCarPlayAudio <= 90
        && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16);
    v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v9 && !v9(v5, v7, v8))
    {
      if (gLogCategory_APEndpointStreamCarPlayAudio > 10
        || gLogCategory_APEndpointStreamCarPlayAudio == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_23;
      }
LABEL_19:
      LogPrintF();
      goto LABEL_23;
    }
    if (gLogCategory_APEndpointStreamCarPlayAudio <= 50
      && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_19;
    }
  }
LABEL_23:
  APSRTPPacketHandlerReturnComposedBBuf(*(_QWORD *)(a1 + 64), *(_QWORD **)(a1 + 56));
  v10 = *(const void **)(a1 + 64);
  if (v10)
    CFRelease(v10);
  CFRelease(*(CFTypeRef *)(a1 + 40));
  v11 = *(const void **)(a1 + 48);
  if (v11)
    CFRelease(v11);
}

void __carAudioStream_flush_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, CMTime *);
  const void *v6;
  CMTime v7;
  CMTime time;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 176))
  {
    if (APCarPlayAudioFormatInfoGetStreamType(*(_QWORD *)(v2 + 192)) == 102)
    {
      *(_OWORD *)&v7.value = *MEMORY[0x1E0CA2E18];
      v7.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      FigCFDictionaryGetCMTimeIfPresent();
      if (gLogCategory_APEndpointStreamCarPlayAudio <= 30
        && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
      {
        time = v7;
        CMTimeGetSeconds(&time);
        LogPrintF();
      }
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      v4 = *(_QWORD *)(a1 + 56);
      v5 = *(void (**)(uint64_t, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v5)
      {
        time = v7;
        v5(v3, v4 & 1, &time);
      }
    }
    else if (gLogCategory_APEndpointStreamCarPlayAudio <= 30
           && (gLogCategory_APEndpointStreamCarPlayAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    APSLogErrorAt();
  }
  v6 = *(const void **)(a1 + 40);
  if (v6)
    CFRelease(v6);
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void __carAudioStream_dissociate_block_invoke(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t __carAudioStream_dissociateInternal_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 128) = 1;
  return result;
}

void __carAudioStream_dissociateInternal_block_invoke_2(uint64_t a1)
{
  carAudioStream_suspendInternal(*(_QWORD *)(a1 + 32), 1);
}

void __carAudioStream_handleSpeechEvent_block_invoke(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 424) && *(_BYTE *)(v2 + 176))
  {
    CFStringGetTypeID();
    if (CFDictionaryGetTypedValue())
      APSAudioStats_MarkEvent();
    else
      APSLogErrorAt();
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t APSenderSessionAirPlayCreate(int a1, const void *a2, const void *a3, const void *a4, int a5, int a6, NSObject *a7, char a8, double a9, char a10, char a11, CFTypeRef a12, const void *a13, const void *a14, char a15, const __CFDictionary *a16, CFTypeRef *a17)
{
  uint64_t v25;
  uint64_t DerivedStorage;
  uint64_t v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  unsigned int v31;
  CFAllocatorRef *v32;
  const __CFString *v33;
  char ShouldForcePairSetup;
  char v35;
  const __CFAllocator *v36;
  CFMutableDictionaryRef Mutable;
  uint64_t v38;
  const void *v39;
  const void *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  CFMutableArrayRef v49;
  uint64_t v50;
  uint64_t v51;
  __CFDictionary *v52;
  uint64_t v53;
  void (*v54)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v55;
  void (*v56)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v57;
  void (*v58)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v59;
  void (*v60)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v61;
  void (*v62)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v63;
  void (*v64)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v65;
  uint64_t v66;
  const void *v67;
  const void *v68;
  const void *v69;
  const void *v70;
  uint64_t CMBaseObject;
  uint64_t (*v72)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *);
  uint64_t v73;
  CFTypeRef v75;
  CFTypeRef v76;
  CFTypeRef v77;
  CFTypeRef v78;
  CFTypeRef v79;
  CFTypeRef cf;
  CFTypeRef v81;
  CFTypeRef v82;
  char label[64];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v75 = 0;
  v76 = 0;
  APSenderSessionGetClassID();
  v25 = CMDerivedObjectCreate();
  if ((_DWORD)v25)
  {
    v50 = v25;
    goto LABEL_89;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 8) = CFRetain(a2);
  v27 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 256) = v27;
  if (!v27)
  {
    v50 = 4294895476;
    goto LABEL_89;
  }
  *(_QWORD *)(DerivedStorage + 40) = a7;
  dispatch_retain(a7);
  *(_QWORD *)(DerivedStorage + 48) = CFRetain(a3);
  if (a4)
    v28 = CFRetain(a4);
  else
    v28 = 0;
  *(_QWORD *)(DerivedStorage + 56) = v28;
  *(_DWORD *)(DerivedStorage + 360) = -998653952;
  *(_BYTE *)(DerivedStorage + 364) = 0;
  *(_DWORD *)(DerivedStorage + 64) = a5;
  *(_DWORD *)(DerivedStorage + 80) = a6;
  *(_BYTE *)(DerivedStorage + 104) = a8;
  *(_BYTE *)(DerivedStorage + 105) = a11;
  *(_BYTE *)(DerivedStorage + 106) = a10;
  *(_BYTE *)(DerivedStorage + 107) = a15;
  *(double *)(DerivedStorage + 112) = a9;
  if (a13)
    v29 = CFRetain(a13);
  else
    v29 = 0;
  *(_QWORD *)(DerivedStorage + 88) = v29;
  if (a14)
    v30 = CFRetain(a14);
  else
    v30 = 0;
  *(_QWORD *)(DerivedStorage + 96) = v30;
  v31 = *(_DWORD *)(DerivedStorage + 64);
  v32 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v31 <= 8 && ((1 << v31) & 0x1C2) != 0)
  {
    v33 = CFSTR("None");
    *(_QWORD *)(DerivedStorage + 16) = CFSTR("None");
    goto LABEL_15;
  }
  if (a12)
  {
    *(_QWORD *)(DerivedStorage + 72) = CFRetain(a12);
    CMBaseObject = APSNetworkClockGetCMBaseObject();
    v72 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (!v72)
    {
      v50 = 4294954514;
      goto LABEL_89;
    }
    v73 = v72(CMBaseObject, *MEMORY[0x1E0CF74E0], *v32, &v75);
    if ((_DWORD)v73)
    {
      v50 = v73;
      goto LABEL_89;
    }
    if (FigCFEqual())
      v33 = CFSTR("PTP");
    else
      v33 = CFSTR("NTP");
    *(_QWORD *)(DerivedStorage + 16) = v33;
    *(_BYTE *)(DerivedStorage + 270) = 1;
LABEL_15:
    CFRetain(v33);
    ShouldForcePairSetup = APManagedConfigurationShouldForcePairSetup();
    if (*(_DWORD *)(DerivedStorage + 64) == 5)
      v35 = 0;
    else
      v35 = ShouldForcePairSetup;
    *(_BYTE *)(DerivedStorage + 392) = v35;
    v36 = *v32;
    Mutable = CFDictionaryCreateMutable(*v32, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(DerivedStorage + 184) = Mutable;
    if (Mutable)
    {
      SNPrintF();
      *(_QWORD *)(DerivedStorage + 152) = dispatch_queue_create(label, 0);
      SNPrintF();
      *(_QWORD *)(DerivedStorage + 32) = dispatch_queue_create(label, 0);
      SNPrintF();
      *(_QWORD *)(DerivedStorage + 24) = dispatch_queue_create(label, 0);
      v38 = CMBaseObjectGetDerivedStorage();
      if (a16)
        CFDictionaryGetValue(a16, CFSTR("eventRecorder"));
      v39 = (const void *)CFStringCreateF();
      v40 = *(const void **)(v38 + 128);
      if (v40)
      {
        CFRelease(v40);
        *(_QWORD *)(v38 + 128) = 0;
      }
      v41 = *(const void **)(v38 + 136);
      if (v41)
      {
        CFRelease(v41);
        *(_QWORD *)(v38 + 136) = 0;
      }
      v42 = APSEventRecorderCreate();
      if ((_DWORD)v42)
      {
        v50 = v42;
      }
      else
      {
        if (*(_DWORD *)(v38 + 64) == 5)
        {
          v43 = APSEventRecorderAddSignPostForEvent();
          if ((_DWORD)v43)
          {
            v50 = v43;
            goto LABEL_106;
          }
          v44 = APSEventRecorderAddSignPostForEvent();
          if ((_DWORD)v44)
          {
            v50 = v44;
            goto LABEL_106;
          }
          v45 = APSEventRecorderAddSignPostForEvent();
          if ((_DWORD)v45)
          {
            v50 = v45;
            goto LABEL_106;
          }
          v46 = APSEventRecorderAddSignPostForEvent();
          if ((_DWORD)v46)
          {
            v50 = v46;
            goto LABEL_106;
          }
          v47 = APSEventRecorderAddSignPostForEvent();
          if ((_DWORD)v47)
          {
            v50 = v47;
            goto LABEL_106;
          }
          v48 = APSEventRecorderAddSignPostForEvent();
          if ((_DWORD)v48)
          {
            v50 = v48;
            goto LABEL_106;
          }
        }
        v49 = CFArrayCreateMutable(v36, 0, MEMORY[0x1E0C9B378]);
        *(_QWORD *)(v38 + 136) = v49;
        if (v49)
        {
          v50 = 0;
          goto LABEL_35;
        }
        v50 = 4294895476;
      }
LABEL_106:
      APSLogErrorAt();
LABEL_35:
      if (v39)
        CFRelease(v39);
      if (!(_DWORD)v50)
      {
        if (a16)
        {
          *(_BYTE *)(DerivedStorage + 120) = CFDictionaryGetInt64() != 0;
          *(_BYTE *)(DerivedStorage + 121) = CFDictionaryGetInt64() != 0;
        }
        v51 = CMBaseObjectGetDerivedStorage();
        v81 = 0;
        v82 = 0;
        v79 = 0;
        cf = 0;
        v77 = 0;
        v78 = 0;
        v52 = CFDictionaryCreateMutable(v36, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v52)
        {
          v53 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v51 + 48));
          v54 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
          if (v54)
            v54(v53, CFSTR("Company"), 0, &cf);
          v55 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v51 + 48));
          v56 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
          if (v56)
            v56(v55, CFSTR("Manufacturer"), 0, &v79);
          v57 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v51 + 48));
          v58 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
          if (v58)
            v58(v57, CFSTR("Model"), 0, &v78);
          v59 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v51 + 48));
          v60 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
          if (v60)
            v60(v59, CFSTR("OSVersion"), 0, &v77);
          v61 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v51 + 48));
          v62 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
          if (v62)
            v62(v61, CFSTR("StatusFlags"), 0, &v81);
          v63 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v51 + 48));
          v64 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
          if (v64)
            v64(v63, CFSTR("AirPlaySecurity"), 0, &v82);
          v65 = APSGetFBOPropertyInt64();
          v66 = APSGetFBOPropertyInt64();
          APSGetFBOPropertyInt64();
          FigCFDictionarySetValue();
          FigCFDictionarySetValue();
          FigCFDictionarySetValue();
          FigCFDictionarySetValue();
          FigCFDictionarySetValue();
          FigCFDictionarySetValue();
          v67 = (const void *)*MEMORY[0x1E0C9AE50];
          v68 = (const void *)*MEMORY[0x1E0C9AE40];
          if (v66)
            v69 = (const void *)*MEMORY[0x1E0C9AE50];
          else
            v69 = (const void *)*MEMORY[0x1E0C9AE40];
          CFDictionarySetValue(v52, CFSTR("unifiedAuthPairing"), v69);
          if (v65)
            v70 = v67;
          else
            v70 = v68;
          CFDictionarySetValue(v52, CFSTR("supportsVideoV2"), v70);
          CFDictionarySetInt64();
          *(_QWORD *)(DerivedStorage + 432) = v52;
          if (cf)
            CFRelease(cf);
          v50 = 0;
        }
        else
        {
          v50 = 4294895476;
          APSLogErrorAt();
        }
        if (v79)
          CFRelease(v79);
        if (v78)
          CFRelease(v78);
        if (v77)
          CFRelease(v77);
        if (v81)
          CFRelease(v81);
        if (v82)
          CFRelease(v82);
        if (v52)
        {
          if (gLogCategory_APSenderSessionAirPlay <= 30
            && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v50 = 0;
          *a17 = v76;
          v76 = 0;
          goto LABEL_85;
        }
      }
      goto LABEL_89;
    }
    v50 = 4294895476;
LABEL_89:
    APSLogErrorAt();
    goto LABEL_90;
  }
  APSLogErrorAt();
  v50 = 4294895475;
LABEL_90:
  if (v76)
    CFRelease(v76);
LABEL_85:
  if (v75)
    CFRelease(v75);
  return v50;
}

void APSenderSessionGetPreferredAndEligibleTransportsBasedOnUsage(int a1, uint64_t a2, int *a3, int *a4, _BYTE *a5)
{
  const __CFString *v9;
  const __CFString *v10;
  char v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  int HasPrefix;
  _BOOL4 isDirectLinkEligible;
  char v28;

  if (!IsAppleInternalBuild())
  {
    v10 = 0;
    goto LABEL_7;
  }
  v9 = (const __CFString *)APSSettingsCopyValue();
  v10 = v9;
  if (!v9)
  {
LABEL_7:
    v11 = 1;
    goto LABEL_8;
  }
  if (CFStringGetLength(v9) >= 1)
  {
    if (CFStringHasPrefix(v10, CFSTR("awdl")))
    {
      v11 = 0;
      v12 = 2;
      v13 = 2;
    }
    else
    {
      HasPrefix = CFStringHasPrefix(v10, CFSTR("nan"));
      v11 = 0;
      if (HasPrefix)
        v12 = 4;
      else
        v12 = 1;
      if (HasPrefix)
        v13 = 4;
      else
        v13 = 9;
    }
    goto LABEL_56;
  }
  v11 = 0;
LABEL_8:
  v14 = 9;
  v12 = 1;
  if (a1 > 3)
  {
    if (a1 == 4)
    {
      v19 = APSGetFBOPropertyInt64();
      if (v19)
        v20 = 4;
      else
        v20 = 2;
      v21 = 4 * (v19 != 0);
      if (v19)
        v22 = 12;
      else
        v22 = 8;
      v23 = APSGetFBOPropertyInt64();
      v24 = v22 | 2;
      if (v23)
        v25 = v20;
      else
        v25 = v21;
      if (!v23)
        v24 = v22;
      v14 = v24 | 1;
      if (v25 <= 1)
        v12 = 1;
      else
        v12 = v25;
    }
    else if (a1 == 11 && APSSettingsIsFeatureEnabled())
    {
      v15 = APSIsVirtualMachine();
      if (v15)
        v12 = 1;
      else
        v12 = 4;
      if (v15)
        v14 = 9;
      else
        v14 = 13;
    }
  }
  else if (a1)
  {
    if (a1 == 3)
    {
      v12 = 4;
      if (APSGetAllowPersistentGroupsOnInfra())
        v12 = APSIsVirtualMachine() ? 1 : 4;
      else
        v14 = 8;
      if (APSSettingsGetIntWithDefault())
        v14 |= 4u;
    }
  }
  else
  {
    if (APSGetFBOPropertyInt64())
      v16 = 12;
    else
      v16 = 8;
    v17 = APSGetFBOPropertyInt64();
    v18 = v16 | 2;
    if (!v17)
      v18 = v16;
    v14 = v18 | 1;
    v12 = 1;
  }
  isDirectLinkEligible = apsession_isDirectLinkEligible();
  v13 = v14 & 7;
  if (isDirectLinkEligible)
    v13 = v14;
LABEL_56:
  if ((a1 - 1) > 0xA)
  {
    v28 = 0;
    if (!a3)
      goto LABEL_61;
    goto LABEL_60;
  }
  v28 = byte_1C964D8C0[a1 - 1];
  if (a3)
LABEL_60:
    *a3 = v12;
LABEL_61:
  if (a4)
    *a4 = v13;
  if (a5)
    *a5 = v28;
  if ((v11 & 1) == 0)
    CFRelease(v10);
}

BOOL apsession_isDirectLinkEligible()
{
  return !APSGetFBOPropertyInt64() && APSGetFBOPropertyInt64() == 0;
}

uint64_t APSenderSessionGetFallbackConnectionType(int a1, char a2, int a3, _DWORD *a4)
{
  int v6;
  uint64_t result;
  int v8;

  if (a3 == -71890 && !a4[2])
    a4[2] = 1;
  v6 = a4[1];
  switch(a1)
  {
    case 4:
      if ((a2 & 2) != 0 && (v6 & 2) == 0)
      {
        result = 2;
        break;
      }
      goto LABEL_20;
    case 2:
      if ((a2 & 4) != 0 && (v6 & 4) == 0)
      {
        result = 4;
        break;
      }
LABEL_20:
      if ((v6 & 1) != 0)
        result = 0;
      else
        result = a2 & 1;
      break;
    case 1:
      if (v6)
      {
        if (a4[2] == 1)
        {
          result = 2;
          a4[2] = 2;
          break;
        }
LABEL_19:
        result = 0;
        break;
      }
      if ((a2 & 4) != 0)
        result = 4;
      else
        result = a2 & 2;
      break;
    default:
      if (gLogCategory_APSenderSessionAirPlay > 90)
        goto LABEL_19;
      if (gLogCategory_APSenderSessionAirPlay != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      {
        LogPrintF();
        goto LABEL_19;
      }
      break;
  }
  v8 = a4[1] | a1;
  *a4 = a1;
  a4[1] = v8;
  return result;
}

void APSenderSessionAirPlayPerformPairingPeersListManagement(uint64_t a1, CFArrayRef theArray, const __CFArray *a3)
{
  uint64_t v5;

  v5 = 0;
  if (theArray)
  {
    CFArrayGetCount(theArray);
    if (!a3)
      goto LABEL_5;
  }
  else if (!a3)
  {
LABEL_5:
    apsession_copyTransportControlStream(a1, &v5);
  }
  CFArrayGetCount(a3);
  goto LABEL_5;
}

void apsession_copyTransportControlStream(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
  v4 = *(CFTypeRef *)(DerivedStorage + 288);
  if (v4)
    v4 = CFRetain(v4);
  *a2 = v4;
  JUMPOUT(0x1CAA400E4);
}

uint64_t apsession_Invalidate(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  uint64_t v4;
  _QWORD block[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionAirPlay <= 50
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
  apsession_invalidateAndClearTransportStreams(a1);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 256));
  v3 = *(NSObject **)(DerivedStorage + 152);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __apsession_Invalidate_block_invoke;
  block[3] = &unk_1E82684E0;
  block[4] = &v7;
  block[5] = a1;
  dispatch_sync(v3, block);
  if (*((_DWORD *)v8 + 6))
  {
    APSLogErrorAt();
    v4 = *((unsigned int *)v8 + 6);
  }
  else
  {
    v4 = 0;
  }
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t apsession_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionAirPlay <= 50
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    MEMORY[0x1CAA3FC58](DerivedStorage + 304);
    *(_QWORD *)(DerivedStorage + 304) = 0;
    v1 = *(const void **)(DerivedStorage + 280);
    if (v1)
    {
      if (gLogCategory_APSenderSessionAirPlay > 50)
        goto LABEL_12;
      if (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize())
        LogPrintF();
      v1 = *(const void **)(DerivedStorage + 280);
      if (v1)
      {
LABEL_12:
        CFRelease(v1);
        *(_QWORD *)(DerivedStorage + 280) = 0;
      }
    }
    v2 = *(const void **)(DerivedStorage + 432);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(DerivedStorage + 432) = 0;
    }
    v3 = *(const void **)(DerivedStorage + 440);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(DerivedStorage + 440) = 0;
    }
    v4 = *(const void **)(DerivedStorage + 488);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(DerivedStorage + 488) = 0;
    }
    v5 = *(const void **)(DerivedStorage + 128);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(DerivedStorage + 128) = 0;
    }
    v6 = *(const void **)(DerivedStorage + 136);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(DerivedStorage + 136) = 0;
    }
    v7 = *(const void **)(DerivedStorage + 144);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(DerivedStorage + 144) = 0;
    }
    v8 = *(const void **)(DerivedStorage + 88);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(DerivedStorage + 88) = 0;
    }
    v9 = *(const void **)(DerivedStorage + 96);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(DerivedStorage + 96) = 0;
    }
    v10 = *(const void **)(DerivedStorage + 72);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(DerivedStorage + 72) = 0;
    }
    v11 = *(NSObject **)(DerivedStorage + 40);
    if (v11)
    {
      dispatch_release(v11);
      *(_QWORD *)(DerivedStorage + 40) = 0;
    }
    v12 = *(NSObject **)(DerivedStorage + 32);
    if (v12)
    {
      dispatch_release(v12);
      *(_QWORD *)(DerivedStorage + 32) = 0;
    }
    v13 = *(NSObject **)(DerivedStorage + 152);
    if (v13)
    {
      dispatch_release(v13);
      *(_QWORD *)(DerivedStorage + 152) = 0;
    }
    v14 = *(NSObject **)(DerivedStorage + 24);
    if (v14)
    {
      dispatch_release(v14);
      *(_QWORD *)(DerivedStorage + 24) = 0;
    }
    v15 = *(const void **)(DerivedStorage + 8);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(DerivedStorage + 8) = 0;
    }
    v16 = *(const void **)(DerivedStorage + 16);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(DerivedStorage + 16) = 0;
    }
    v17 = *(const void **)(DerivedStorage + 168);
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(DerivedStorage + 168) = 0;
    }
    v18 = *(const void **)(DerivedStorage + 216);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(DerivedStorage + 216) = 0;
    }
    v19 = *(const void **)(DerivedStorage + 224);
    if (v19)
    {
      CFRelease(v19);
      *(_QWORD *)(DerivedStorage + 224) = 0;
    }
    v20 = *(const void **)(DerivedStorage + 232);
    if (v20)
    {
      CFRelease(v20);
      *(_QWORD *)(DerivedStorage + 232) = 0;
    }
    v21 = *(const void **)(DerivedStorage + 248);
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(DerivedStorage + 248) = 0;
    }
    v22 = *(const void **)(DerivedStorage + 184);
    if (v22)
    {
      CFRelease(v22);
      *(_QWORD *)(DerivedStorage + 184) = 0;
    }
    return FigSimpleMutexDestroy();
  }
  else
  {
    result = gLogCategory_APSenderSessionAirPlay;
    if (gLogCategory_APSenderSessionAirPlay <= 100)
      result = apsession_Finalize_cold_1(gLogCategory_APSenderSessionAirPlay);
    __break(1u);
  }
  return result;
}

__CFString *apsession_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APSenderSessionAirPlay %p %@>"), a1, *(_QWORD *)(DerivedStorage + 8));
  return Mutable;
}

uint64_t apsession_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const void *UInt64;
  uint64_t ConnectionLatencyHint;
  CFNumberRef v12;
  const void **v14;
  uint64_t v15;
  uint64_t Int64;
  uint64_t v17;
  CFDictionaryRef Copy;
  int v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionAirPlay <= 10
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a4)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  if (*(_BYTE *)DerivedStorage && !CFEqual(a2, CFSTR("InitialRTCStats")))
    return 4294954511;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
  v9 = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("TransportControlStream")))
  {
    if (CFEqual(a2, CFSTR("InitialVolumeDB")))
    {
      v12 = CFNumberCreate(a3, kCFNumberFloat32Type, (const void *)(v9 + 360));
      *a4 = v12;
      if (v12)
        goto LABEL_14;
      ConnectionLatencyHint = 4294895476;
LABEL_47:
      APSLogErrorAt();
      goto LABEL_15;
    }
    if (CFEqual(a2, CFSTR("InitialIsMuted")))
    {
      v14 = (const void **)MEMORY[0x1E0C9AE50];
      if (!*(_BYTE *)(v9 + 364))
        v14 = (const void **)MEMORY[0x1E0C9AE40];
    }
    else
    {
      if (CFEqual(a2, CFSTR("MediaControlClientPassword")))
      {
        UInt64 = *(const void **)(v9 + 352);
        if (!UInt64)
          goto LABEL_11;
        goto LABEL_10;
      }
      if (CFEqual(a2, CFSTR("TransportSession")))
      {
        UInt64 = *(const void **)(v9 + 280);
        if (!UInt64)
        {
          ConnectionLatencyHint = 4294960587;
          goto LABEL_15;
        }
        goto LABEL_10;
      }
      if (!CFEqual(a2, CFSTR("IsConnectedOnPeerToPeerInterface")))
      {
        if (CFEqual(a2, CFSTR("ControlConnectionInterfaceLatencyHint")))
        {
          v19 = 0;
          ConnectionLatencyHint = apsession_getConnectionLatencyHint(a1, &v19);
          Int64 = CFNumberCreateInt64();
          *a4 = Int64;
          if (Int64)
            goto LABEL_15;
          ConnectionLatencyHint = 4294895476;
        }
        else
        {
          if (CFEqual(a2, CFSTR("KeyHolder")))
          {
            UInt64 = *(const void **)(v9 + 192);
            if (!UInt64)
              goto LABEL_11;
            goto LABEL_10;
          }
          if (CFEqual(a2, CFSTR("ShowInfo")))
          {
            UInt64 = apsession_copyShowInfo();
            goto LABEL_11;
          }
          if (CFEqual(a2, CFSTR("AuthenticationData")))
          {
            v17 = *(_QWORD *)(v9 + 368);
            if (v17)
              ConnectionLatencyHint = APAuthenticationClientCopyProperty(v17, 0x1E827A5F0, (uint64_t)a3, (uint64_t)a4);
            else
              ConnectionLatencyHint = 4294954513;
            goto LABEL_15;
          }
          if (CFEqual(a2, CFSTR("InitialRTCStats")))
          {
            apsession_updateSenderSessionMetricsForRTCStats();
            Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFDictionaryRef *)(v9 + 432));
            *a4 = Copy;
            if (Copy)
              goto LABEL_14;
            ConnectionLatencyHint = 4294895476;
          }
          else
          {
            if (CFEqual(a2, CFSTR("ReceiverSuppliedRTCStats")))
            {
              UInt64 = *(const void **)(v9 + 440);
              if (!UInt64)
                goto LABEL_11;
              goto LABEL_10;
            }
            if (CFEqual(a2, CFSTR("ActivationMsgsProcessingTimeMs")))
            {
              UInt64 = (const void *)FigCFNumberCreateUInt64();
              if (UInt64)
                goto LABEL_11;
              ConnectionLatencyHint = 4294895476;
            }
            else if (CFEqual(a2, CFSTR("ActivationMsgsRoundTripTimeMs")))
            {
              UInt64 = (const void *)FigCFNumberCreateUInt64();
              if (UInt64)
                goto LABEL_11;
              ConnectionLatencyHint = 4294895476;
            }
            else
            {
              if (!CFEqual(a2, CFSTR("ActivationConnectionTimeMs")))
              {
                if (CFEqual(a2, CFSTR("EventRecorder")))
                {
                  UInt64 = *(const void **)(v9 + 128);
                  if (!UInt64)
                    goto LABEL_11;
                  goto LABEL_10;
                }
                if (CFEqual(a2, CFSTR("LocalNetworkIPAddress")))
                {
                  UInt64 = *(const void **)(v9 + 224);
                  if (!UInt64)
                    goto LABEL_11;
                  goto LABEL_10;
                }
                if (CFEqual(a2, CFSTR("PWDEncryptorEncryptionContext")))
                {
                  UInt64 = *(const void **)(v9 + 472);
                  if (UInt64)
                    goto LABEL_10;
                }
                else
                {
                  if (!CFEqual(a2, CFSTR("PWDProtectionFlags")))
                  {
                    if (!CFEqual(a2, CFSTR("GroupID")))
                    {
                      ConnectionLatencyHint = 4294954512;
                      goto LABEL_15;
                    }
                    UInt64 = *(const void **)(v9 + 488);
                    if (!UInt64)
                      goto LABEL_11;
                    goto LABEL_10;
                  }
                  if (*(_QWORD *)(v9 + 480))
                  {
                    UInt64 = (const void *)CFNumberCreateInt64();
                    goto LABEL_11;
                  }
                }
                ConnectionLatencyHint = 4294954509;
                goto LABEL_15;
              }
              UInt64 = (const void *)FigCFNumberCreateUInt64();
              if (UInt64)
                goto LABEL_11;
              ConnectionLatencyHint = 4294895476;
            }
          }
        }
        goto LABEL_47;
      }
      v15 = *(_QWORD *)(v9 + 280);
      if (!v15)
      {
        APSLogErrorAt();
        ConnectionLatencyHint = 4294895467;
        goto LABEL_15;
      }
      if (!*(_QWORD *)(v9 + 288))
        goto LABEL_42;
      if (!FigTransportSessionCopyProperty(v15, *MEMORY[0x1E0CF1ED0], *MEMORY[0x1E0C9AE00], (uint64_t)a4))
      {
LABEL_14:
        ConnectionLatencyHint = 0;
        goto LABEL_15;
      }
      v14 = (const void **)MEMORY[0x1E0C9AE40];
    }
    UInt64 = *v14;
    goto LABEL_10;
  }
  UInt64 = *(const void **)(v9 + 288);
  if (!UInt64)
  {
LABEL_42:
    APSLogErrorAt();
    ConnectionLatencyHint = 4294895466;
    goto LABEL_15;
  }
LABEL_10:
  UInt64 = CFRetain(UInt64);
LABEL_11:
  ConnectionLatencyHint = 0;
  *a4 = UInt64;
LABEL_15:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 256));
  return ConnectionLatencyHint;
}

uint64_t apsession_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeID v7;
  uint64_t *v8;
  const void *v9;
  uint64_t v10;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, _QWORD, uint64_t);
  uint64_t v13;
  const void *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionAirPlay <= 30
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294954511;
  }
  if (!a2)
  {
    v13 = 4294895475;
    APSLogErrorAt();
    return v13;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
  v6 = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("AuthorizationString")))
  {
    if (!a3)
    {
      v8 = (uint64_t *)(v6 + 352);
      v9 = *(const void **)(v6 + 352);
      *(_QWORD *)(v6 + 352) = 0;
      if (!v9)
      {
LABEL_12:
        if (*(_QWORD *)(v6 + 288))
        {
          v10 = *v8;
          CMBaseObject = FigTransportStreamGetCMBaseObject();
          v12 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (v12)
            v12(CMBaseObject, *MEMORY[0x1E0CF1FA8], v10);
        }
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
        goto LABEL_20;
      }
LABEL_11:
      CFRelease(v9);
      goto LABEL_12;
    }
    v7 = CFGetTypeID(a3);
    if (v7 == CFStringGetTypeID())
    {
      v8 = (uint64_t *)(v6 + 352);
      v9 = *(const void **)(v6 + 352);
      *(_QWORD *)(v6 + 352) = a3;
      CFRetain(a3);
      if (!v9)
        goto LABEL_12;
      goto LABEL_11;
    }
    goto LABEL_34;
  }
  if (CFEqual(a2, CFSTR("DACPID")))
  {
    *(_QWORD *)(v6 + 400) = CFGetInt64();
  }
  else if (CFEqual(a2, CFSTR("DACPRemoteID")))
  {
    *(_DWORD *)(v6 + 408) = CFGetInt64();
  }
  else if (CFEqual(a2, CFSTR("PublishEncryptionKeyDiagnosticMode")))
  {
    *(_BYTE *)(v6 + 344) = CFGetInt64() != 0;
  }
  else
  {
    if (CFEqual(a2, CFSTR("GroupID")))
    {
      v15 = *(const void **)(v6 + 488);
      *(_QWORD *)(v6 + 488) = a3;
      if (a3)
        CFRetain(a3);
      if (v15)
        CFRelease(v15);
      goto LABEL_20;
    }
    if (CFEqual(a2, CFSTR("IsMediaSession")))
    {
      v16 = *(_DWORD *)(v6 + 64);
      if (v16 > 8 || ((1 << v16) & 0x1C2) == 0)
      {
        v17 = CFGetInt64();
        v18 = v17 != 0;
        if (*(unsigned __int8 *)(v6 + 270) != v18)
        {
          if (gLogCategory_APSenderSessionAirPlay <= 50
            && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          *(_BYTE *)(v6 + 270) = v18;
        }
        goto LABEL_20;
      }
LABEL_34:
      APSLogErrorAt();
    }
  }
LABEL_20:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 256));
  return 0;
}

uint64_t apsession_invalidateAndClearTransportStreams(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(_QWORD *)(DerivedStorage + 56);
  if (result && *(_DWORD *)(DerivedStorage + 208))
  {
    result = APSConnectionInterfaceManagerReleaseInterfaceSelection();
    *(_DWORD *)(DerivedStorage + 208) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 280))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CFRetain(a1);
    *(_QWORD *)(DerivedStorage + 288) = 0;
    *(_QWORD *)(DerivedStorage + 296) = 0;
    *(_QWORD *)(DerivedStorage + 336) = 0;
    result = APSDispatchAsyncFHelper();
    *(_BYTE *)(DerivedStorage + 266) = 0;
    *(_WORD *)(DerivedStorage + 264) = 0;
  }
  return result;
}

void apsession_handleTransportSessionDisconnected(uint64_t a1, const void *a2, uint64_t a3, const void *a4, const void *a5)
{
  uint64_t DerivedStorage;
  CFTypeID v9;
  int Int64;
  BOOL v11;
  int v12;
  NSObject *v13;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a5)
    goto LABEL_6;
  v9 = CFGetTypeID(a5);
  if (v9 != CFDictionaryGetTypeID())
  {
    a5 = 0;
LABEL_6:
    Int64 = -16613;
    goto LABEL_13;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)a5, (const void *)*MEMORY[0x1E0CF1E90])
    || *(_DWORD *)(DerivedStorage + 64) == 5
    && CFDictionaryContainsKey((CFDictionaryRef)a5, (const void *)*MEMORY[0x1E0CF1E88]))
  {
    Int64 = CFDictionaryGetInt64();
  }
  else
  {
    Int64 = -16613;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)a5, (const void *)*MEMORY[0x1E0CF1E98]))
    a5 = (const void *)CFDictionaryGetInt64();
  else
    a5 = 0;
LABEL_13:
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
  if (*(const void **)(DerivedStorage + 280) != a4)
  {
    if (gLogCategory_APSenderSessionAirPlay <= 50
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    JUMPOUT(0x1CAA400E4);
  }
  if (*(_BYTE *)(DerivedStorage + 269))
    v11 = a5 == (const void *)1702260340;
  else
    v11 = 0;
  v12 = !v11;
  if (*(_BYTE *)(DerivedStorage + 271))
  {
    if (!*(_DWORD *)(DerivedStorage + 276))
    {
      if (gLogCategory_APSenderSessionAirPlay <= 50
        && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v12)
        apsession_invalidateAndClearTransportStreams(a2);
      apsession_dispatchPostFailedNotification(a2);
    }
  }
  else
  {
    *(_DWORD *)(DerivedStorage + 272) = Int64;
    if (gLogCategory_APSenderSessionAirPlay <= 50
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 256));
  if (gLogCategory_APSenderSessionAirPlay <= 50
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a2);
  CFRetain(a4);
  v13 = *(NSObject **)(DerivedStorage + 152);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __apsession_handleTransportSessionDisconnected_block_invoke;
  block[3] = &__block_descriptor_tmp_40;
  block[4] = a4;
  block[5] = DerivedStorage;
  block[6] = a2;
  dispatch_async(v13, block);
}

void apsession_handleTransportSessionKeepAliveResponseReceived(int a1, const void *a2, int a3, int a4, CFTypeRef cf)
{
  CFPropertyListRef v5;
  CFTypeID v7;
  const __CFAllocator *v8;

  v5 = cf;
  if (cf)
  {
    v7 = CFGetTypeID(cf);
    if (v7 == CFDictionaryGetTypeID() && (CMBlockBufferGetTypeID(), CFDictionaryGetTypedValue()))
    {
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if (FigCreateCFDataWithBlockBufferNoCopy())
      {
        APSLogErrorAt();
        v5 = 0;
        goto LABEL_15;
      }
      v5 = CFPropertyListCreateWithData(v8, 0, 0, 0, 0);
      if (!v5)
      {
        APSLogErrorAt();
        goto LABEL_15;
      }
    }
    else
    {
      v5 = 0;
    }
  }
  if (gLogCategory_APSenderSessionAirPlay <= 30
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMBaseObjectGetDerivedStorage();
  CFRetain(a2);
  if (v5)
    CFRetain(v5);
  APSDispatchAsyncFHelper();
LABEL_15:
  if (v5)
    CFRelease(v5);
}

void apsession_invalidateTransportStreams(CFTypeRef *a1)
{
  CFTypeRef v2;
  void (*v3)(CFTypeRef, _QWORD, _QWORD, _QWORD);
  uint64_t CMBaseObject;
  uint64_t v5;
  void (*v6)(uint64_t);
  CFTypeRef v7;
  void (*v8)(CFTypeRef, _QWORD, _QWORD, _QWORD);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  CFTypeRef v12;
  void (*v13)(CFTypeRef, _QWORD, _QWORD, _QWORD);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);

  v2 = a1[1];
  if (v2)
  {
    v3 = *(void (**)(CFTypeRef, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v3)
      v3(v2, 0, 0, 0);
    CMBaseObject = FigTransportStreamGetCMBaseObject();
    if (CMBaseObject)
    {
      v5 = CMBaseObject;
      v6 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v6)
        v6(v5);
    }
    if (gLogCategory_APSenderSessionAirPlay <= 50
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFRelease(a1[1]);
  }
  v7 = a1[2];
  if (v7)
  {
    v8 = *(void (**)(CFTypeRef, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v8)
      v8(v7, 0, 0, 0);
    v9 = FigTransportStreamGetCMBaseObject();
    if (v9)
    {
      v10 = v9;
      v11 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v11)
        v11(v10);
    }
    if (gLogCategory_APSenderSessionAirPlay <= 50
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFRelease(a1[2]);
  }
  v12 = a1[3];
  if (v12)
  {
    v13 = *(void (**)(CFTypeRef, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v13)
      v13(v12, 0, 0, 0);
    v14 = FigTransportStreamGetCMBaseObject();
    if (v14)
    {
      v15 = v14;
      v16 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v16)
        v16(v15);
    }
    if (gLogCategory_APSenderSessionAirPlay <= 50
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFRelease(a1[3]);
  }
  CFRelease(*a1);
}

uint64_t apsession_dispatchPostFailedNotification(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  return APSDispatchAsyncFHelper();
}

void __apsession_handleTransportSessionDisconnected_block_invoke(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 280))
    apsession_disconnectControlStream(*(_QWORD *)(a1 + 48));
  if (gLogCategory_APSenderSessionAirPlay <= 50
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRelease(*(CFTypeRef *)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void apsession_disconnectControlStream(uint64_t a1)
{
  uint64_t DerivedStorage;
  unsigned int v3;
  BOOL v4;
  int v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionAirPlay <= 50
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v3 = *(_DWORD *)(DerivedStorage + 64);
  v4 = v3 > 8;
  v5 = (1 << v3) & 0x1C2;
  if (v4 || v5 == 0)
    apsession_stopSenderNetworkClockIfNeeded(a1);
  apsession_ensureDisconnected(a1);
}

void apsession_postFailedNotificationCallback(uint64_t a1)
{
  apsession_postFailedNotification(*(const void **)a1, *(unsigned int *)(a1 + 8), *(const void **)(a1 + 16));
  CFRelease(*(CFTypeRef *)a1);
}

void apsession_postFailedNotification(const void *a1, uint64_t a2, const void *a3)
{
  const __CFAllocator *v5;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;

  CMBaseObjectGetDerivedStorage();
  v5 = CFGetAllocator(a1);
  Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v7 = Mutable;
    CFDictionarySetInt64();
    CFDictionarySetValue(v7, CFSTR("SessionState"), a3);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFRelease(v7);
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
}

uint64_t apsession_stopSenderNetworkClockIfNeeded(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  const void *TimingPeerIdentifier;
  const void *v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, const void *, _QWORD, _QWORD);
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);

  result = CMBaseObjectGetDerivedStorage();
  v3 = result;
  if (!*(_QWORD *)(result + 72) || !*(_BYTE *)(result + 162))
    goto LABEL_21;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (*(_BYTE *)(v3 + 177) || *(__CFString **)(v3 + 16) != CFSTR("PTP"))
    goto LABEL_5;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 232)
    || (v6 = DerivedStorage, (TimingPeerIdentifier = apsession_getTimingPeerIdentifier()) == 0))
  {
    APSLogErrorAt();
    goto LABEL_5;
  }
  v8 = TimingPeerIdentifier;
  v9 = *(_QWORD *)(v6 + 72);
  v10 = *(unsigned int (**)(uint64_t, const void *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 40);
  if (v10 && !v10(v9, v8, 0, 0))
  {
    v4 = gLogCategory_APSenderSessionAirPlay;
    if (gLogCategory_APSenderSessionAirPlay > 30)
      goto LABEL_6;
    if (gLogCategory_APSenderSessionAirPlay == -1 && !_LogCategory_Initialize())
    {
LABEL_5:
      v4 = gLogCategory_APSenderSessionAirPlay;
LABEL_6:
      if (v4 <= 40 && (v4 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      goto LABEL_18;
    }
LABEL_24:
    LogPrintF();
    goto LABEL_5;
  }
  if (gLogCategory_APSenderSessionAirPlay <= 90)
  {
    if (gLogCategory_APSenderSessionAirPlay == -1 && !_LogCategory_Initialize())
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_18:
  v11 = *(_QWORD *)(v3 + 72);
  result = CMBaseObjectGetVTable();
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 88);
  if (v12)
    result = v12(v11, a1);
  *(_BYTE *)(v3 + 162) = 0;
LABEL_21:
  *(_DWORD *)(v3 + 240) = 0;
  return result;
}

void apsession_ensureDisconnected(uint64_t a1)
{
  uint64_t v2;

  CMBaseObjectGetDerivedStorage();
  v2 = 0;
  apsession_copyTransportSession(a1, &v2);
}

void sub_1C946CB8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  const void *v16;
  uint64_t v17;
  void (*v18)();
  _BOOL4 v19;
  uint64_t CMBaseObject;
  uint64_t v21;
  void (*v22)(uint64_t);
  const void *v23;

  if (*(_BYTE *)(v17 + 176))
  {
    if (v23)
    {
      v18 = *(void (**)())(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
      if (v18)
        v18();
    }
    *(_BYTE *)(v17 + 176) = 0;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(v17 + 256));
  if (*(_BYTE *)(v17 + 264))
    v19 = *(_BYTE *)(v17 + 265) != 0;
  else
    v19 = 0;
  apsession_invalidateAndClearTransportStreams(v16);
  if (*(_QWORD *)(v17 + 280))
  {
    CMBaseObject = FigTransportSessionGetCMBaseObject();
    if (CMBaseObject)
    {
      v21 = CMBaseObject;
      v22 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v22)
        v22(v21);
    }
    apsession_setTransportSession((uint64_t)v16, 0);
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(v17 + 256));
  if (v19)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  if (v23)
    CFRelease(v23);
  if (gLogCategory_APSenderSessionAirPlay <= 50
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void apsession_handlePeerListChangedNotification(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const void *TimingPeerIdentifier;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, const void *, BOOL, CFArrayRef *);
  CFArrayRef theArray;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef cf;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theArray = 0;
  TimingPeerIdentifier = apsession_getTimingPeerIdentifier();
  if (*(_BYTE *)DerivedStorage)
  {
    if (gLogCategory_APSenderSessionAirPlay <= 50
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else if (*(__CFString **)(DerivedStorage + 16) == CFSTR("PTP"))
  {
    v5 = TimingPeerIdentifier;
    v6 = APSGetFBOPropertyInt64();
    v7 = *(_QWORD *)(DerivedStorage + 72);
    v8 = *(unsigned int (**)(uint64_t, const void *, BOOL, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 56);
    if (!v8 || v8(v7, v5, v6 != 0, &theArray))
    {
      APSLogErrorAt();
    }
    else
    {
      if (gLogCategory_APSenderSessionAirPlay <= 50
        && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        CFArrayGetCount(theArray);
        if (gLogCategory_APSenderSessionAirPlay == -1)
          _LogCategory_Initialize();
        LogPrintF();
      }
      v13 = 0;
      v11 = 0;
      cf = 0;
      v10 = 0;
      if (theArray && !apsession_isCancelled())
        apsession_copyTransportControlStream(a2, &v13);
      APSLogErrorAt();
      if (cf)
        CFRelease(cf);
      if (v11)
        CFRelease(v11);
      if (v10)
        CFRelease(v10);
      if (gLogCategory_APSenderSessionAirPlay <= 50
        && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
  }
  if (theArray)
    CFRelease(theArray);
}

const void *apsession_getTimingPeerIdentifier()
{
  uint64_t DerivedStorage;
  const __CFDictionary *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const __CFDictionary **)(DerivedStorage + 248);
  if (v1)
    return CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E0CF74B8]);
  else
    return *(const void **)(DerivedStorage + 216);
}

uint64_t apsession_isCancelled()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionAirPlay <= 30
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
  v1 = *(unsigned __int8 *)(DerivedStorage + 267);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 256));
  return v1;
}

void apsession_copyTransportSession(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
  v4 = *(CFTypeRef *)(DerivedStorage + 280);
  if (v4)
    v4 = CFRetain(v4);
  *a2 = v4;
  JUMPOUT(0x1CAA400E4);
}

void apsession_setTransportSession(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  v5 = *(const void **)(DerivedStorage + 280);
  if (v5 == a2)
  {
    *(_QWORD *)(DerivedStorage + 280) = a2;
    v6 = a2;
    if (!a2)
      return;
    goto LABEL_21;
  }
  if (v5
    && gLogCategory_APSenderSessionAirPlay <= 50
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    if (gLogCategory_APSenderSessionAirPlay <= 50
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_BYTE *)(v4 + 279) = 0;
    *(_QWORD *)(v4 + 271) = 0;
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    if (gLogCategory_APSenderSessionAirPlay <= 30
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v6 = *(const void **)(v4 + 280);
    *(_QWORD *)(v4 + 280) = a2;
LABEL_21:
    CFRetain(a2);
    if (v6)
      goto LABEL_22;
    return;
  }
  v6 = *(const void **)(v4 + 280);
  *(_QWORD *)(v4 + 280) = 0;
  if (v6)
LABEL_22:
    CFRelease(v6);
}

void apsession_postFeedbackReceivedNotificationCallback(uint64_t a1)
{
  const void *v2;

  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFRelease(*(CFTypeRef *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
}

uint64_t FigTransportSessionCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  CMBaseObject = FigTransportSessionGetCMBaseObject();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(CMBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t apsession_getConnectionLatencyHint(uint64_t a1, int *a2)
{
  uint64_t DerivedStorage;
  int v4;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v7;
  int v8;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (*(_QWORD *)(DerivedStorage + 280))
  {
    if (*(_QWORD *)(DerivedStorage + 288))
    {
      if (APSGetFBOPropertyInt64())
        goto LABEL_7;
      v4 = APSGetFBOPropertyInt64();
      CMBaseObject = FigTransportStreamGetCMBaseObject();
      v6 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v6)
        v6(CMBaseObject, *MEMORY[0x1E0CF1E70], *MEMORY[0x1E0C9AE00], &cf);
      if (v4 == 2)
      {
LABEL_7:
        v7 = 0;
        v8 = 1;
      }
      else
      {
        v7 = 0;
        if (APSIsDirectLinkInterface())
          v8 = -1;
        else
          v8 = 0;
      }
    }
    else
    {
      v7 = 4294895466;
      APSLogErrorAt();
      v8 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    v8 = 0;
    v7 = 4294895467;
  }
  if (a2)
    *a2 = v8;
  if (cf)
    CFRelease(cf);
  return v7;
}

__CFDictionary *apsession_copyShowInfo()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  __CFDictionary *Mutable;
  __CFDictionary *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  uint64_t CMBaseObject;
  unsigned int (*v10)(uint64_t, _QWORD, uint64_t, void **);
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  v1 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = Mutable;
  v4 = (const void *)*MEMORY[0x1E0C9AE50];
  v5 = (const void *)*MEMORY[0x1E0C9AE40];
  if (*(_BYTE *)(DerivedStorage + 264))
    v6 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v6 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(Mutable, CFSTR("isConnected"), v6);
  if (*(_BYTE *)(DerivedStorage + 266))
    v7 = v4;
  else
    v7 = v5;
  CFDictionarySetValue(v3, CFSTR("isSessionStarted"), v7);
  if (*(_BYTE *)(DerivedStorage + 267))
    v8 = v4;
  else
    v8 = v5;
  CFDictionarySetValue(v3, CFSTR("isCancelled"), v8);
  if (*(_QWORD *)(DerivedStorage + 280))
  {
    CMBaseObject = FigTransportSessionGetCMBaseObject();
    v10 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
    if (!v10 || v10(CMBaseObject, *MEMORY[0x1E0CF1ED8], v1, &value))
      APSLogErrorAt();
    else
      CFDictionarySetValue(v3, CFSTR("TransportSessionInfo"), value);
  }
  if (value)
    CFRelease(value);
  return v3;
}

uint64_t APAuthenticationClientCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  CMBaseObject = APAuthenticationClientGetCMBaseObject();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(CMBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t apsession_updateSenderSessionMetricsForRTCStats()
{
  double v0;
  uint64_t DerivedStorage;
  uint64_t result;
  CFIndex v3;
  CFIndex v4;
  double v5;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionAirPlay <= 30
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursiveEx())
    CFDictionarySetInt64();
  if (!APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursiveEx())
    CFDictionarySetInt64();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  APSEventRecorderGetEventTimeRecursive();
  if (v0 != 0.0)
    APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive();
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(_QWORD *)(DerivedStorage + 136);
  if (result)
  {
    result = CFArrayGetCount((CFArrayRef)result);
    v3 = result - 1;
    if (result >= 1)
    {
      v4 = result;
      CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 136), 0);
      CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 136), v3);
      APSEventRecorderGetEventTime();
      if (v5 == 0.0)
      {
        result = APSEventRecorderGetTimeSinceEventInMilliSecond();
        v3 = v4;
        if (!result)
        {
LABEL_16:
          if (v3)
            return CFDictionarySetInt64();
          return result;
        }
      }
      else
      {
        result = APSEventRecorderGetTimeBetweenEventsInMilliSecond();
        if (!result)
          goto LABEL_16;
      }
      result = CFDictionarySetInt64();
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t FigTransportStreamCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  CMBaseObject = FigTransportStreamGetCMBaseObject();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(CMBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

BOOL apsession_IsConnected()
{
  uint64_t DerivedStorage;
  _BOOL8 v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionAirPlay <= 30
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
  if (*(_BYTE *)(DerivedStorage + 264))
    v1 = *(_BYTE *)(DerivedStorage + 265) != 0;
  else
    v1 = 0;
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 256));
  return v1;
}

uint64_t apsession_IsActive()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionAirPlay <= 30
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
  v1 = *(unsigned __int8 *)(DerivedStorage + 266);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 256));
  return v1;
}

uint64_t apsession_EnsureStarted()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t apsession_UpdateSession()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t apsession_SetupStreamCreatingResponse()
{
  if (!*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return APSDispatchSyncTask();
  APSLogErrorAt();
  return 4294954511;
}

uint64_t apsession_TeardownStream()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t apsession_CreateTransportStream(uint64_t a1)
{
  uint64_t v3;

  v3 = 0;
  if (!*(_BYTE *)CMBaseObjectGetDerivedStorage())
    apsession_copyTransportSession(a1, &v3);
  APSLogErrorAt();
  return APSSignalErrorAt();
}

uint64_t apsession_CreateTransportStreamWithID(uint64_t a1)
{
  uint64_t v3;

  v3 = 0;
  if (!*(_BYTE *)CMBaseObjectGetDerivedStorage())
    apsession_copyTransportSession(a1, &v3);
  APSLogErrorAt();
  return APSSignalErrorAt();
}

uint64_t apsession_PrepareForTeardown(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionAirPlay <= 50
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
  *(_BYTE *)(DerivedStorage + 267) = 1;
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 256));
  CFRetain(a1);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 152), a1, (dispatch_function_t)apsession_prepareForTeardownInternal);
  return 0;
}

uint64_t apsession_EnsureStopped()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
  *(_BYTE *)(DerivedStorage + 267) = 1;
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 256));
  return APSDispatchSyncTask();
}

uint64_t apsession_SendAudioContentTypeUpdate()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t apsession_SetEventCallbacks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](DerivedStorage[32]);
  MEMORY[0x1CAA3FC58](DerivedStorage + 38);
  DerivedStorage[38] = 0;
  DerivedStorage[39] = a3;
  DerivedStorage[40] = a4;
  DerivedStorage[41] = a5;
  if (a2)
    FigCFWeakReferenceStore();
  MEMORY[0x1CAA400E4](DerivedStorage[32]);
  return 0;
}

uint64_t apsession_PerformStage1StartTransaction(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;

  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 64) != 5)
    return 0;
  v5 = APSDispatchSyncTask();
  if ((_DWORD)v5)
    APSLogErrorAt();
  else
    *a4 = 0;
  return v5;
}

uint64_t apsession_PerformStage2StartTransaction()
{
  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 64) == 5)
    return APSDispatchSyncTask();
  else
    return 0;
}

uint64_t apsession_BroadcastKeysForDiagnosticsData()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t apsession_ensureStartedInternal(uint64_t a1)
{
  uint64_t started;
  uint64_t v3;
  uint64_t v4[2];
  _QWORD v5[4];

  v5[0] = a1;
  memset(&v5[1], 0, 24);
  v4[0] = a1;
  v4[1] = 0;
  started = apsession_ensureStartedInternalStage1StartTransaction((uint64_t)v5);
  if (!(_DWORD)started)
    apsession_ensureStartedInternalStage2StartTransaction(v4);
  v3 = started;
  APSLogErrorAt();
  return v3;
}

uint64_t apsession_ensureStartedInternalStage1StartTransaction(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  int v4;
  int v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  void *v26;
  NSObject *v27;
  uint64_t v28;
  _QWORD *v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  const void *v33;
  uint64_t v34;
  void *v35;
  NSObject *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  NSObject *v41;
  uint64_t v42;
  void *v43;
  NSObject *v44;
  const void *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  const void *v50;
  CFTypeRef cf;
  uint64_t v52;
  uint8_t buf[8];
  unsigned int v54;

  v2 = *(const void **)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionAirPlay <= 30
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    v23 = 4294954511;
    goto LABEL_117;
  }
  if (*(_BYTE *)(DerivedStorage + 177))
  {
    v23 = 4294895467;
    goto LABEL_161;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
  v4 = *(unsigned __int8 *)(DerivedStorage + 266);
  v5 = *(unsigned __int8 *)(DerivedStorage + 268);
  v6 = *(const void **)(DerivedStorage + 384);
  v7 = *(const void **)(a1 + 16);
  *(_QWORD *)(DerivedStorage + 384) = v7;
  if (v7)
    CFRetain(v7);
  if (v6)
    CFRelease(v6);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 256));
  if (v4)
  {
    v23 = 0;
    goto LABEL_117;
  }
  if (v5)
  {
    v23 = 4294960587;
    goto LABEL_161;
  }
  v8 = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(v8 + 416) = 0;
  *(_QWORD *)(v8 + 424) = 0;
  CFArrayGetCount(*(CFArrayRef *)(v8 + 136));
  v9 = (const void *)CFStringCreateF();
  APSEventRecorderRemoveChildEventRecorderFromParent();
  if (*(_QWORD *)(v8 + 144))
  {
    CFRelease(*(CFTypeRef *)(v8 + 144));
    *(_QWORD *)(v8 + 144) = 0;
  }
  v10 = APSEventRecorderCreate();
  if ((_DWORD)v10)
  {
    v23 = v10;
  }
  else
  {
    if (*(_DWORD *)(v8 + 64) == 5)
    {
      v11 = APSEventRecorderAddSignPostForEvent();
      if ((_DWORD)v11)
      {
        v23 = v11;
        goto LABEL_159;
      }
      v12 = APSEventRecorderAddSignPostForEvent();
      if ((_DWORD)v12)
      {
        v23 = v12;
        goto LABEL_159;
      }
      v13 = APSEventRecorderAddSignPostForEvent();
      if ((_DWORD)v13)
      {
        v23 = v13;
        goto LABEL_159;
      }
      v14 = APSEventRecorderAddSignPostForEvent();
      if ((_DWORD)v14)
      {
        v23 = v14;
        goto LABEL_159;
      }
      v15 = APSEventRecorderAddSignPostForEvent();
      if ((_DWORD)v15)
      {
        v23 = v15;
        goto LABEL_159;
      }
      v16 = APSEventRecorderAddSignPostForEvent();
      if ((_DWORD)v16)
      {
        v23 = v16;
        goto LABEL_159;
      }
      v17 = APSEventRecorderAddSignPostForEvent();
      if ((_DWORD)v17)
      {
        v23 = v17;
        goto LABEL_159;
      }
      v18 = APSEventRecorderAddSignPostForEvent();
      if ((_DWORD)v18)
      {
        v23 = v18;
        goto LABEL_159;
      }
      v19 = APSEventRecorderAddSignPostForEvent();
      if ((_DWORD)v19)
      {
        v23 = v19;
        goto LABEL_159;
      }
      v20 = APSEventRecorderAddSignPostForEvent();
      if ((_DWORD)v20)
      {
        v23 = v20;
        goto LABEL_159;
      }
      v21 = APSEventRecorderAddSignPostForEvent();
      if ((_DWORD)v21)
      {
        v23 = v21;
        goto LABEL_159;
      }
      v22 = APSEventRecorderAddSignPostForEvent();
      if ((_DWORD)v22)
      {
        v23 = v22;
        goto LABEL_159;
      }
    }
    v23 = MEMORY[0x1CAA3DC60](*(_QWORD *)(v8 + 128), *(_QWORD *)(v8 + 144));
    if (!(_DWORD)v23)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(v8 + 136), *(const void **)(v8 + 144));
      goto LABEL_31;
    }
  }
LABEL_159:
  APSLogErrorAt();
LABEL_31:
  if (v9)
    CFRelease(v9);
  if (!(_DWORD)v23)
  {
    APSEventRecorderRecordEvent();
    if (IsAppleInternalBuild()
      && gLogCategory_APSenderSessionAirPlay <= 50
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    mach_absolute_time();
    v23 = apsession_ensureConnectedInternal(v2);
    mach_absolute_time();
    if (IsAppleInternalBuild())
    {
      v24 = (_DWORD)v23 ? 90 : 50;
      if (v24 >= gLogCategory_APSenderSessionAirPlay
        && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        UpTicksToMilliseconds();
        LogPrintF();
      }
    }
    if (!(_DWORD)v23)
    {
      if (*(_QWORD *)(DerivedStorage + 144))
        APSEventRecorderRecordEvent();
      if (*(_DWORD *)(DerivedStorage + 64) == 5)
      {
        v25 = LogCategoryCopyOSLogHandle();
        v26 = (void *)v25;
        if (v25)
          v27 = v25;
        else
          v27 = MEMORY[0x1E0C81028];
        if (os_signpost_enabled(v27))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1C943B000, v27, OS_SIGNPOST_EVENT, 0x2B8D081CuLL, "AP_SIGNPOST_CAR_AUTHORIZE_START", (const char *)&unk_1C965D452, buf, 2u);
        }
        if (v26)
          os_release(v26);
      }
      v54 = 0;
      v28 = CMBaseObjectGetDerivedStorage();
      v52 = 0;
      *(_QWORD *)buf = 0;
      if (*(_BYTE *)(v28 + 106))
      {
        if (gLogCategory_APSenderSessionAirPlay <= 90
          && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      else
      {
        v29 = (_QWORD *)v28;
        if (*(_DWORD *)(v28 + 64) != 10)
        {
          v30 = 0;
          v31 = 0;
          if (APSGetFBOPropertyInt64())
            goto LABEL_71;
          APSGetFBOPropertyInt64();
          if (!v54)
          {
            MEMORY[0x1CAA400CC](v29[32]);
            v32 = (CFTypeRef)v29[46];
            if (v32)
              v32 = CFRetain(v32);
            cf = v32;
            v33 = (const void *)v29[47];
            if (v33)
              v30 = CFRetain(v33);
            else
              v30 = 0;
            v50 = (const void *)v29[48];
            if (v50)
              v31 = CFRetain(v50);
            else
              v31 = 0;
            MEMORY[0x1CAA400E4](v29[32]);
            if (!cf)
              apsession_copyTransportControlStream((uint64_t)v2, &v52);
            CFRelease(cf);
LABEL_71:
            if (*(_QWORD *)buf)
              CFRelease(*(CFTypeRef *)buf);
            if (v30)
              CFRelease(v30);
            if (v31)
              CFRelease(v31);
            v23 = v54;
            if (*(_QWORD *)(DerivedStorage + 144))
              APSEventRecorderRecordEvent();
            if (*(_DWORD *)(DerivedStorage + 64) == 5)
            {
              v34 = LogCategoryCopyOSLogHandle();
              v35 = (void *)v34;
              if (v34)
                v36 = v34;
              else
                v36 = MEMORY[0x1E0C81028];
              if (os_signpost_enabled(v36))
              {
                *(_WORD *)buf = 0;
                _os_signpost_emit_with_name_impl(&dword_1C943B000, v36, OS_SIGNPOST_EVENT, 0x2B8D089CuLL, "AP_SIGNPOST_CAR_AUTHORIZE_COMPLETE", (const char *)&unk_1C965D452, buf, 2u);
              }
              if (v35)
                os_release(v35);
            }
            if (!(_DWORD)v23)
            {
              v37 = apsession_ensureKeyHolderSetUp();
              if ((_DWORD)v37)
              {
                v23 = v37;
              }
              else
              {
                v38 = *(_DWORD *)(DerivedStorage + 64);
                if (v38 <= 8 && ((1 << v38) & 0x1C2) != 0
                  || (v48 = apsession_ensureSenderNetworkClockStarted((uint64_t)v2), !(_DWORD)v48))
                {
                  if (*(_QWORD *)(DerivedStorage + 144))
                    APSEventRecorderRecordEvent();
                  if (*(_DWORD *)(DerivedStorage + 64) == 5)
                  {
                    v39 = LogCategoryCopyOSLogHandle();
                    v40 = (void *)v39;
                    if (v39)
                      v41 = v39;
                    else
                      v41 = MEMORY[0x1E0C81028];
                    if (os_signpost_enabled(v41))
                    {
                      *(_WORD *)buf = 0;
                      _os_signpost_emit_with_name_impl(&dword_1C943B000, v41, OS_SIGNPOST_EVENT, 0x2B8D08A8uLL, "AP_SIGNPOST_CAR_SETUPMESSAGE_START", (const char *)&unk_1C965D452, buf, 2u);
                    }
                    if (v40)
                      os_release(v40);
                  }
                  v23 = apsession_ensureControlStreamSetup((uint64_t)v2);
                  if (*(_QWORD *)(DerivedStorage + 144))
                    APSEventRecorderRecordEvent();
                  if (*(_DWORD *)(DerivedStorage + 64) == 5)
                  {
                    v42 = LogCategoryCopyOSLogHandle();
                    v43 = (void *)v42;
                    if (v42)
                      v44 = v42;
                    else
                      v44 = MEMORY[0x1E0C81028];
                    if (os_signpost_enabled(v44))
                    {
                      *(_WORD *)buf = 0;
                      _os_signpost_emit_with_name_impl(&dword_1C943B000, v44, OS_SIGNPOST_EVENT, 0x2B8D08ACuLL, "AP_SIGNPOST_CAR_SETUPMESSAGE_COMPLETE", (const char *)&unk_1C965D452, buf, 2u);
                    }
                    if (v43)
                      os_release(v43);
                  }
                  if (!(_DWORD)v23)
                  {
                    if (*(__CFString **)(DerivedStorage + 16) != CFSTR("PTP"))
                      goto LABEL_116;
                    v45 = *(const void **)(DerivedStorage + 248);
                    *(_QWORD *)(DerivedStorage + 248) = 0;
                    if (v45)
                      CFRelease(v45);
                    v46 = apsession_addPeerToNetworkClock();
                    if ((_DWORD)v46)
                    {
                      v23 = v46;
                    }
                    else
                    {
LABEL_116:
                      v23 = apsession_ensureEventStreamCreated((uint64_t)v2, 0);
                      if (!(_DWORD)v23)
                        goto LABEL_117;
                    }
                  }
                }
                else
                {
                  v23 = v48;
                }
              }
            }
            goto LABEL_161;
          }
          APSLogErrorAt();
        }
      }
      v30 = 0;
      v31 = 0;
      goto LABEL_71;
    }
  }
LABEL_161:
  APSLogErrorAt();
LABEL_117:
  if ((_DWORD)v23)
    v47 = 90;
  else
    v47 = 50;
  if (v47 >= gLogCategory_APSenderSessionAirPlay
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if ((_DWORD)v23)
    apsession_recordActivationMessageTiming((uint64_t)v2);
  return v23;
}

void apsession_ensureStartedInternalStage2StartTransaction(uint64_t *a1)
{
  uint64_t v1;
  uint64_t DerivedStorage;
  unint64_t v3;
  int v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  int v12;
  _BOOL4 v13;
  uint64_t v14;
  int Info;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  const __CFAllocator *v22;
  __CFDictionary *Mutable;
  __CFDictionary *v24;
  const void **v25;
  int v26;
  uint64_t v27;
  CFTypeRef v28;
  const char *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  CFTypeRef v34;
  uint64_t v35;
  const void *v36;
  CFTypeRef v37;
  unint64_t v38;
  const CFDictionaryKeyCallBacks *v39;
  const CFDictionaryValueCallBacks *v40;
  __CFDictionary *v41;
  __CFDictionary *v42;
  const char *v43;
  BOOL v44;
  const void *TypedValue;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  void *v50;
  NSObject *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  void *v56;
  NSObject *v57;
  int v58;
  int v59;
  int v60;
  _QWORD *v61;
  __CFDictionary *v62;
  uint64_t v63;
  CFTypeRef v64;
  CFTypeRef cf;
  BOOL v66;
  CFTypeRef v67;
  uint8_t buf[8];

  v1 = *a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = 0x1ED52E000uLL;
  if (gLogCategory_APSenderSessionAirPlay <= 30
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    Info = -12785;
    goto LABEL_182;
  }
  if (*(_BYTE *)(DerivedStorage + 177))
  {
    Info = -71829;
    goto LABEL_216;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
  v4 = *(unsigned __int8 *)(DerivedStorage + 266);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 256));
  if (v4)
  {
    Info = 0;
    goto LABEL_182;
  }
  if (*(_QWORD *)(DerivedStorage + 144))
    APSEventRecorderRecordEvent();
  if (*(_DWORD *)(DerivedStorage + 64) == 5)
  {
    v5 = LogCategoryCopyOSLogHandle();
    v6 = (void *)v5;
    if (v5)
      v7 = v5;
    else
      v7 = MEMORY[0x1E0C81028];
    if (os_signpost_enabled(v7))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C943B000, v7, OS_SIGNPOST_EVENT, 0x2B8D08B0uLL, "AP_SIGNPOST_CAR_INFOMESSAGE_START", (const char *)&unk_1C965D452, buf, 2u);
    }
    if (v6)
      os_release(v6);
  }
  mach_absolute_time();
  v8 = *(_DWORD *)(DerivedStorage + 64);
  v9 = v8 == 9 || v8 == 4;
  if (v9
    && APSIsInAirPlaySenderSystemServer()
    && FVDUtilsEncryptedEncodeSupported()
    && APSSettingsIsFeatureEnabled())
  {
    v10 = *(_QWORD *)(DerivedStorage + 48);
    v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v11)
      v12 = v11(v10, 87);
    else
      v12 = 0;
    v13 = v12 != 0;
  }
  else
  {
    v13 = 0;
  }
  v14 = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionAirPlay <= 30
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(v14 + 164))
  {
    Info = 0;
  }
  else
  {
    Info = apsession_fetchInfo(v1);
    if (Info)
      APSLogErrorAt();
    else
      *(_BYTE *)(v14 + 164) = 1;
  }
  mach_absolute_time();
  if (*(_QWORD *)(DerivedStorage + 144))
    APSEventRecorderRecordEvent();
  if (*(_DWORD *)(DerivedStorage + 64) == 5)
  {
    v16 = LogCategoryCopyOSLogHandle();
    v17 = (void *)v16;
    if (v16)
      v18 = v16;
    else
      v18 = MEMORY[0x1E0C81028];
    if (os_signpost_enabled(v18))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C943B000, v18, OS_SIGNPOST_EVENT, 0x2B8D08B4uLL, "AP_SIGNPOST_CAR_INFOMESSAGE_COMPLETE", (const char *)&unk_1C965D452, buf, 2u);
    }
    if (v17)
      os_release(v17);
  }
  if (IsAppleInternalBuild()
    && gLogCategory_APSenderSessionAirPlay <= 50
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    UpTicksToMilliseconds();
    LogPrintF();
  }
  if (Info)
    goto LABEL_216;
  v19 = *(_DWORD *)(DerivedStorage + 64);
  if (v19 > 8 || ((1 << v19) & 0x1C2) == 0)
  {
    APSEventRecorderRecordEvent();
    mach_absolute_time();
    v27 = CMBaseObjectGetDerivedStorage();
    LODWORD(v67) = 0;
    *(_QWORD *)buf = 0;
    if (gLogCategory_APSenderSessionAirPlay <= 30
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!*(_BYTE *)(v27 + 163))
    {
      if (APSGetFBOPropertyInt64())
        apsession_copyTransportControlStream(v1, buf);
      if (gLogCategory_APSenderSessionAirPlay <= 30
        && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_BYTE *)(v27 + 163) = 1;
    }
    if (gLogCategory_APSenderSessionAirPlay <= 50
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    mach_absolute_time();
    APSEventRecorderRecordEvent();
    if (IsAppleInternalBuild()
      && gLogCategory_APSenderSessionAirPlay <= 50
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      UpTicksToMilliseconds();
      LogPrintF();
    }
  }
  if (!v13)
    goto LABEL_154;
  v20 = CMBaseObjectGetDerivedStorage();
  v67 = 0;
  v66 = 0;
  v64 = 0;
  cf = 0;
  if (!*(_QWORD *)(v20 + 168))
  {
    Info = -71829;
    APSLogErrorAt();
    v28 = 0;
    v24 = 0;
    goto LABEL_143;
  }
  v21 = (_QWORD *)v20;
  v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v24 = Mutable;
  v25 = (const void **)MEMORY[0x1E0C9AE50];
  if (!v21[21])
    v25 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(Mutable, CFSTR("displayCapabilities"), *v25);
  v62 = v24;
  v26 = APPWDKeyExchangeSenderSessionCreate((uint64_t)v24, &v67);
  if (v26)
  {
    Info = v26;
    APSLogErrorAt();
    v28 = 0;
    goto LABEL_143;
  }
  if (gLogCategory_APSenderSessionAirPlay <= 50)
  {
    if (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize())
      LogPrintF();
    if (gLogCategory_APSenderSessionAirPlay <= 50
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  v61 = v21;
  v28 = 0;
  v29 = "OSStatus apsession_performPWDKeyExchange(APSenderSessionRef)";
  v63 = v1;
  while (1)
  {
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    v30 = *(_DWORD *)(v3 + 3136);
    if (v30 <= 30)
    {
      if (v30 != -1)
        goto LABEL_78;
      if (!_LogCategory_Initialize())
        goto LABEL_85;
      v30 = *(_DWORD *)(v3 + 3136);
      if (v30 <= 30)
      {
LABEL_78:
        if (v30 == -1)
          _LogCategory_Initialize();
      }
      LogPrintF();
    }
LABEL_85:
    v31 = APPWDKeyExchangeSenderSessionPerformKeyExchange((uint64_t)v67, (uint64_t)v28, &cf, &v66);
    if (v31)
    {
      Info = v31;
LABEL_210:
      APSLogErrorAt();
      v24 = v62;
      goto LABEL_143;
    }
    v32 = *(_DWORD *)(v3 + 3136);
    if (v66)
    {
      if (v32 > 50)
        goto LABEL_133;
      v24 = v62;
      if (v32 == -1 && !_LogCategory_Initialize())
        goto LABEL_137;
LABEL_132:
      LogPrintF();
LABEL_137:
      v47 = *(_DWORD *)(v3 + 3136);
      if (v47 <= 50 && (v47 != -1 || _LogCategory_Initialize()))
        LogPrintF();
LABEL_141:
      v48 = APPWDKeyExchangeSenderSessionCopyEncoderEncryptionContext((uint64_t)v67, (uint64_t)&v64);
      if (v48)
      {
        Info = v48;
        v60 = *(_DWORD *)(v3 + 3136);
        if (v60 <= 90 && (v60 != -1 || _LogCategory_Initialize()))
          LogPrintF();
      }
      else
      {
        MEMORY[0x1CAA400CC](v61[32]);
        v61[59] = v64;
        v64 = 0;
        v61[60] = CFDictionaryGetInt64();
        MEMORY[0x1CAA400E4](v61[32]);
        Info = 0;
      }
LABEL_143:
      if (v67)
      {
        APPWDKeyExchangeSenderSessionInvalidate((uint64_t)v67);
        CFRelease(v67);
        v67 = 0;
      }
      if (v24)
        CFRelease(v24);
      if (v28)
        CFRelease(v28);
      if (cf)
        CFRelease(cf);
      if (v64)
        CFRelease(v64);
      if (!Info)
      {
LABEL_154:
        if (*(_QWORD *)(DerivedStorage + 144))
          APSEventRecorderRecordEvent();
        if (*(_DWORD *)(DerivedStorage + 64) == 5)
        {
          v49 = LogCategoryCopyOSLogHandle();
          v50 = (void *)v49;
          if (v49)
            v51 = v49;
          else
            v51 = MEMORY[0x1E0C81028];
          if (os_signpost_enabled(v51))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl(&dword_1C943B000, v51, OS_SIGNPOST_EVENT, 0x2B8D08A0uLL, "AP_SIGNPOST_CAR_STARTSESSION_START", (const char *)&unk_1C965D452, buf, 2u);
          }
          if (v50)
            os_release(v50);
        }
        v52 = CMBaseObjectGetDerivedStorage();
        *(_QWORD *)buf = 0;
        MEMORY[0x1CAA400CC](*(_QWORD *)(v52 + 256));
        v53 = *(unsigned __int8 *)(v52 + 266);
        MEMORY[0x1CAA400E4](*(_QWORD *)(v52 + 256));
        v54 = *(_DWORD *)(v3 + 3136);
        if (v54 <= 30 && (v54 != -1 || _LogCategory_Initialize()))
          LogPrintF();
        if (!v53)
          apsession_copyTransportControlStream(v1, buf);
        if (*(_QWORD *)(DerivedStorage + 144))
          APSEventRecorderRecordEvent();
        if (*(_DWORD *)(DerivedStorage + 64) == 5)
        {
          v55 = LogCategoryCopyOSLogHandle();
          v56 = (void *)v55;
          if (v55)
            v57 = v55;
          else
            v57 = MEMORY[0x1E0C81028];
          if (os_signpost_enabled(v57))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl(&dword_1C943B000, v57, OS_SIGNPOST_EVENT, 0x2B8D08A4uLL, "AP_SIGNPOST_CAR_STARTSESSION_COMPLETE", (const char *)&unk_1C965D452, buf, 2u);
          }
          if (v56)
            os_release(v56);
        }
        MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
        *(_BYTE *)(DerivedStorage + 268) = 1;
        MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 256));
        apsession_getKeepAliveMode();
        apsession_ensureKeepAliveStarted(v1);
      }
LABEL_216:
      APSLogErrorAt();
LABEL_182:
      if (Info)
        v58 = 90;
      else
        v58 = 50;
      v59 = *(_DWORD *)(v3 + 3136);
      if (v58 >= v59 && (v59 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      apsession_recordActivationMessageTiming(v1);
    }
    if (v32 <= 50 && (v32 != -1 || _LogCategory_Initialize()))
      LogPrintF();
    if (v28)
      CFRelease(v28);
    v33 = *(_DWORD *)(v3 + 3136);
    if (v33 <= 30)
    {
      if (v33 != -1)
        goto LABEL_95;
      if (!_LogCategory_Initialize())
        goto LABEL_102;
      v33 = *(_DWORD *)(v3 + 3136);
      if (v33 <= 30)
      {
LABEL_95:
        if (v33 == -1)
          _LogCategory_Initialize();
      }
      LogPrintF();
    }
LABEL_102:
    v34 = cf;
    v35 = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)buf = 0;
    MEMORY[0x1CAA400CC](*(_QWORD *)(v35 + 256));
    v36 = *(const void **)(v35 + 288);
    if (!v36)
    {
      MEMORY[0x1CAA400E4](*(_QWORD *)(v35 + 256));
LABEL_109:
      APSLogErrorAt();
      v28 = 0;
      Info = 0;
      goto LABEL_117;
    }
    v37 = CFRetain(v36);
    MEMORY[0x1CAA400E4](*(_QWORD *)(v35 + 256));
    if (!v37)
      goto LABEL_109;
    v38 = v3;
    v39 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v40 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    v41 = CFDictionaryCreateMutable(v22, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(v41, CFSTR("data"), v34);
    v42 = CFDictionaryCreateMutable(v22, 0, v39, v40);
    CFDictionarySetValue(v42, CFSTR("params"), v41);
    CFDictionarySetValue(v42, CFSTR("type"), CFSTR("performPWDKeyExchange"));
    Info = APTransportStreamSendPlistMessageCreatingPlistReply();
    if (Info || !*(_QWORD *)buf)
    {
      APSLogErrorAt();
      v28 = 0;
    }
    else
    {
      v43 = v29;
      v44 = CFDictionaryGetInt64() != 0;
      CFDataGetTypeID();
      TypedValue = (const void *)CFDictionaryGetTypedValue();
      if (TypedValue)
        v28 = CFRetain(TypedValue);
      else
        v28 = 0;
      v66 = v44;
      v29 = v43;
    }
    CFRelease(v37);
    if (v42)
      CFRelease(v42);
    if (v41)
      CFRelease(v41);
    v3 = v38;
LABEL_117:
    if (*(_QWORD *)buf)
      CFRelease(*(CFTypeRef *)buf);
    v1 = v63;
    if (Info)
      goto LABEL_210;
    v46 = *(_DWORD *)(v3 + 3136);
    if (v66)
    {
      if (v46 <= 50)
      {
        v24 = v62;
        if (v46 == -1 && !_LogCategory_Initialize())
          goto LABEL_137;
        goto LABEL_132;
      }
LABEL_133:
      v24 = v62;
      goto LABEL_141;
    }
    if (v46 <= 50 && (v46 != -1 || _LogCategory_Initialize()))
      LogPrintF();
  }
}

uint64_t apsession_ensureConnectedInternal(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  _BOOL4 v7;
  BOOL v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  int FallbackConnectionType;
  int v20;
  int v21;
  __CFDictionary *v22;
  int v23;
  const CFDictionaryValueCallBacks *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t CMBaseObject;
  uint64_t (*v29)(uint64_t, const __CFString *, const __CFAllocator *, const void **);
  int v30;
  __CFDictionary *Mutable;
  const void *v32;
  const void *v33;
  uint64_t SharedTransport;
  uint64_t v35;
  const void *v36;
  uint64_t (*v37)(uint64_t, const __CFAllocator *, uint64_t, const void *, __CFDictionary *, const void **);
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t);
  void (*v41)(const void *);
  uint64_t v42;
  uint64_t v43;
  const void *v44;
  int v45;
  const CFDictionaryKeyCallBacks *v46;
  __CFDictionary *v47;
  uint64_t v48;
  void (*v49)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CMTimeValue v50;
  unsigned int v51;
  int v52;
  const void *v53;
  __CFDictionary *v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, __CFDictionary *, uint64_t);
  uint64_t *v57;
  int v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, _QWORD, _QWORD, const void *);
  int v61;
  uint64_t ShortVersionLength;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, CFStringRef);
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, const __CFString *);
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, void *);
  void *v72;
  unsigned int v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, void *);
  const void *v76;
  CFTypeRef v77;
  int v78;
  uint64_t (*v79)(CFTypeRef);
  int v80;
  uint64_t (*v81)(CFTypeRef);
  int v82;
  uint64_t v83;
  CFAllocatorRef v84;
  uint64_t v85;
  void (*v86)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  BOOL v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  NSObject *v92;
  int InitialInfo;
  uint64_t v94;
  void *v95;
  NSObject *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BOOL4 v100;
  uint64_t v101;
  void (*v102)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int PairingClient;
  uint64_t (*v109)(uint64_t, _QWORD);
  int v110;
  const void *v111;
  CFTypeRef v112;
  int v113;
  int v114;
  int v115;
  int v116;
  BOOL v117;
  int v118;
  CFTypeRef v119;
  BOOL v120;
  int v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  _BOOL4 v126;
  int isTransientPairingSupported;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  CFTypeRef v134;
  uint64_t (*v135)(CFTypeRef, CFTypeRef *);
  int v136;
  CFTypeRef v137;
  uint64_t (*v138)(CFTypeRef, CFTypeRef *);
  const void *v139;
  CFTypeRef v140;
  unsigned int v141;
  int v142;
  int v143;
  BOOL v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  BOOL v154;
  char v155;
  char v156;
  int v157;
  char v158;
  CFTypeRef v159;
  CMTimeValue v160;
  uint64_t (*v161)(CMTimeValue);
  int v162;
  int v163;
  char v164;
  int v165;
  CFTypeRef v166;
  const void *v167;
  int v168;
  int v169;
  uint64_t v170;
  void *v171;
  NSObject *v172;
  uint64_t v173;
  const void *v174;
  const void *v175;
  const void *v176;
  const __CFAllocator *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t (*v180)(uint64_t, uint64_t, const __CFString *);
  int v181;
  BOOL v183;
  int v184;
  BOOL v185;
  BOOL v186;
  int v188;
  uint64_t (*v189)(uint64_t, _QWORD);
  int v190;
  const void *v191;
  CFTypeRef v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  void *v200;
  uint64_t v201;
  void *v202;
  CFStringRef cf;
  void *v204;
  void *v205;
  void *v206;
  void *key;
  uint64_t v208;
  const void *v209;
  __CFDictionary *theDict;
  uint64_t v211;
  void *value;
  char v213;
  int v214;
  uint64_t v215;
  int v216;
  const __CFAllocator *v217;
  char v218;
  const void *v219;
  const __CFString *v220;
  __CFDictionary *v221;
  UInt8 buffer[8];
  uint64_t v223;
  uint64_t v224;
  int v225;
  const __CFData *v226;
  CFTypeRef v227;
  CFTypeRef v228;
  char v229;
  int v230;
  CFTypeRef v231;
  int v232;
  CFTypeRef buf[4];
  char v234;
  const void *v235;
  const void *v236[2];
  CFRange v237;

  v230 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v229 = 0;
  v227 = 0;
  v228 = 0;
  v226 = 0;
  *(_QWORD *)buffer = 0;
  v223 = 0;
  v225 = 0;
  v224 = 0;
  v219 = 0;
  v220 = 0;
  v221 = 0;
  if (gLogCategory_APSenderSessionAirPlay <= 30
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    v22 = 0;
    v230 = APSSignalErrorAt();
    goto LABEL_584;
  }
  v3 = APSGetFBOPropertyInt64();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
  if (*(_BYTE *)(DerivedStorage + 264))
  {
    v4 = *(unsigned __int8 *)(DerivedStorage + 265);
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 256));
    if (v4)
    {
      if (gLogCategory_APSenderSessionAirPlay > 30
        || gLogCategory_APSenderSessionAirPlay == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_583;
      }
      goto LABEL_10;
    }
  }
  else
  {
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 256));
  }
  LODWORD(buf[0]) = 0;
  v5 = CMBaseObjectGetDerivedStorage();
  LODWORD(v231) = 0;
  LODWORD(v236[0]) = 0;
  LODWORD(v235) = 0;
  if (apsession_isCancelled())
  {
    APSLogErrorAt();
    v230 = -71832;
LABEL_522:
    v169 = gLogCategory_APSenderSessionAirPlay;
    goto LABEL_523;
  }
  APSenderSessionGetPreferredAndEligibleTransportsBasedOnUsage(*(_DWORD *)(v5 + 64), *(_QWORD *)(v5 + 48), (int *)&v231, (int *)&v235, &v229);
  v6 = apsession_determineTransportAvailabilityAndWaitIfNeeded((uint64_t)a1, 8, (int)v235, v236, 0, (int *)buf);
  v7 = v6 == 0;
  if (LODWORD(buf[0]))
    goto LABEL_529;
  apsession_determineTransportAvailabilityAndWaitIfNeeded((uint64_t)a1, 1, (int)v235, v236, 0, (int *)buf);
  if (LODWORD(buf[0]))
    goto LABEL_529;
  v8 = !v6 && (_DWORD)v231 == 4;
  v9 = v8;
  if (apsession_determineTransportAvailabilityAndWaitIfNeeded((uint64_t)a1, 4, (int)v235, v236, v9, (int *)buf))
  {
    if (v6)
    {
      v7 = 0;
      v10 = 8;
    }
    else if ((_DWORD)v231 != 4 && ((uint64_t)v236[0] & 1) != 0)
    {
      v10 = 0;
      v7 = 1;
    }
    else
    {
      v7 = 0;
      v10 = 4;
    }
  }
  else
  {
    v10 = 8 * (v6 != 0);
    if ((_DWORD)v231 == 4)
      LODWORD(v231) = 2;
  }
  if (LODWORD(buf[0]))
    goto LABEL_529;
  v11 = (_DWORD)v231 == 2 && v7;
  v12 = apsession_determineTransportAvailabilityAndWaitIfNeeded((uint64_t)a1, 2, (int)v235, v236, v11, (int *)buf);
  if (!v10 && v12)
  {
    if ((_DWORD)v231 != 2 && ((uint64_t)v236[0] & 1) != 0)
      v10 = 0;
    else
      v10 = 2;
  }
  if (LODWORD(buf[0]))
  {
LABEL_529:
    APSLogErrorAt();
    v13 = 0;
    v213 = 0;
  }
  else
  {
    if (v10 <= 1)
      v13 = 1;
    else
      v13 = v10;
    if (gLogCategory_APSenderSessionAirPlay <= 50
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v213 = (char)v236[0];
  }
  v230 = (int)buf[0];
  if (LODWORD(buf[0]))
  {
    if (LODWORD(buf[0]) != -71832)
      goto LABEL_582;
    goto LABEL_522;
  }
  if ((v213 & 0xF) == 0)
  {
    if (gLogCategory_APSenderSessionAirPlay <= 90
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v22 = 0;
    v23 = -6705;
    goto LABEL_76;
  }
  if (*(_QWORD *)(DerivedStorage + 144))
    APSEventRecorderRecordEvent();
  if (*(_DWORD *)(DerivedStorage + 64) == 5)
  {
    v14 = LogCategoryCopyOSLogHandle();
    v15 = (void *)v14;
    if (v14)
      v16 = v14;
    else
      v16 = MEMORY[0x1E0C81028];
    if (os_signpost_enabled(v16))
    {
      LOWORD(buf[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C943B000, v16, OS_SIGNPOST_EVENT, 0x2B8D08D4uLL, "AP_SIGNPOST_CAR_INITIALCONNECTION_START", (const char *)&unk_1C965D452, (uint8_t *)buf, 2u);
    }
    if (v15)
      os_release(v15);
  }
  v208 = DerivedStorage;
  mach_absolute_time();
  v17 = CMBaseObjectGetDerivedStorage();
  v18 = v17;
  if (v13 == 8)
    FallbackConnectionType = 1;
  else
    FallbackConnectionType = v13;
  MEMORY[0x1CAA400CC](*(_QWORD *)(v17 + 256));
  v20 = *(unsigned __int8 *)(v18 + 264);
  MEMORY[0x1CAA400E4](*(_QWORD *)(v18 + 256));
  v201 = v3;
  if (!v20)
  {
    if (gLogCategory_APSenderSessionAirPlay <= 50
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v211 = CMBaseObjectGetDerivedStorage();
    v21 = 0;
    v232 = 0;
    v231 = 0;
    value = (void *)*MEMORY[0x1E0C9AE50];
    key = (void *)*MEMORY[0x1E0CF1EA0];
    v202 = (void *)*MEMORY[0x1E0CF1EC8];
    v205 = (void *)*MEMORY[0x1E0CF1E60];
    v206 = (void *)*MEMORY[0x1E0CF1EA8];
    v209 = (const void *)*MEMORY[0x1E0C9AE40];
    v199 = (void *)*MEMORY[0x1E0CF1E58];
    v200 = (void *)*MEMORY[0x1E0CF1E50];
    v204 = (void *)*MEMORY[0x1E0CF1E68];
    v196 = *MEMORY[0x1E0CF1FF0];
    v197 = *MEMORY[0x1E0CF1FE8];
    v195 = *MEMORY[0x1E0CF1FA8];
    v193 = *MEMORY[0x1E0CF1F40];
    v194 = *MEMORY[0x1E0CF1FE0];
    v217 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v24 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    while (1)
    {
      v25 = FallbackConnectionType;
      FallbackConnectionType = APSenderSessionGetFallbackConnectionType(FallbackConnectionType, v213, v21, &v231);
      ++*(_QWORD *)(v211 + 424);
      v26 = CMBaseObjectGetDerivedStorage();
      v216 = v25;
      if (apsession_isCancelled())
      {
        APSLogErrorAt();
        v32 = 0;
        goto LABEL_253;
      }
      v27 = CMBaseObjectGetDerivedStorage();
      v235 = 0;
      v236[0] = 0;
      CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v27 + 48));
      v29 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (!v29)
        break;
      v30 = v29(CMBaseObject, CFSTR("TransportDevice"), v217, v236);
      if (v30)
      {
        v21 = v30;
        goto LABEL_91;
      }
      APTransportDeviceGetTransportsRequiringBroker();
      Mutable = CFDictionaryCreateMutable(v217, 0, MEMORY[0x1E0C9B390], v24);
      if (Mutable)
      {
        CFDictionarySetInt64();
        CFDictionarySetInt64();
        if (APSGetAllowPersistentGroupsOnInfra())
          CFDictionarySetValue(Mutable, key, value);
        if (FallbackConnectionType)
        {
          if (gLogCategory_APSenderSessionAirPlay <= 40
            && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          CMTimeMake((CMTime *)buf, 15000, 1000);
          FigCFDictionarySetCMTime();
        }
        if (gLogCategory_APSenderSessionAirPlay <= 30
          && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v33 = *(const void **)(v27 + 144);
        if (v33)
          CFDictionarySetValue(Mutable, v206, v33);
        if (*(_DWORD *)(v27 + 64) == 5)
          CFDictionarySetValue(Mutable, v202, value);
        SharedTransport = APTransportGetSharedTransport();
        v35 = *(_QWORD *)(v27 + 8);
        v36 = v236[0];
        v37 = *(uint64_t (**)(uint64_t, const __CFAllocator *, uint64_t, const void *, __CFDictionary *, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v37)
        {
          v21 = v37(SharedTransport, v217, v35, v36, Mutable, &v235);
          if (v21)
          {
            v32 = 0;
          }
          else
          {
            v32 = v235;
            v235 = 0;
          }
        }
        else
        {
          v32 = 0;
          v21 = -12782;
        }
      }
      else
      {
        APSLogErrorAt();
        v32 = 0;
        v21 = -71820;
      }
LABEL_106:
      if (v236[0])
        CFRelease(v236[0]);
      if (Mutable)
        CFRelease(Mutable);
      if (v235)
        CFRelease(v235);
      if (v21)
      {
        APSLogErrorAt();
        v77 = 0;
        goto LABEL_217;
      }
      MEMORY[0x1CAA400CC](*(_QWORD *)(v26 + 256));
      if (*(_QWORD *)(v26 + 280))
      {
        apsession_invalidateAndClearTransportStreams(a1);
        v38 = FigTransportSessionGetCMBaseObject();
        if (v38)
        {
          v39 = v38;
          v40 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v40)
            v40(v39);
        }
      }
      apsession_setTransportSession((uint64_t)a1, v32);
      MEMORY[0x1CAA400E4](*(_QWORD *)(v26 + 256));
      if (apsession_isCancelled())
      {
        APSLogErrorAt();
LABEL_253:
        v77 = 0;
LABEL_258:
        v21 = -71832;
        goto LABEL_217;
      }
      v41 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v41)
        v41(v32);
      MEMORY[0x1CAA400CC](*(_QWORD *)(v26 + 256));
      v42 = CMBaseObjectGetDerivedStorage();
      buf[0] = 0;
      if (*(_QWORD *)(v42 + 288))
      {
        v21 = 0;
        goto LABEL_195;
      }
      v43 = v42;
      v44 = a1;
      v45 = FallbackConnectionType;
      v46 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      theDict = CFDictionaryCreateMutable(v217, 0, MEMORY[0x1E0C9B390], v24);
      if (!theDict)
      {
        APSLogErrorAt();
        v47 = 0;
        v21 = -71820;
        FallbackConnectionType = v45;
        a1 = v44;
LABEL_261:
        v54 = theDict;
        goto LABEL_189;
      }
      v47 = CFDictionaryCreateMutable(v217, 0, v46, v24);
      if (!v47)
      {
        APSLogErrorAt();
        v21 = -71820;
        FallbackConnectionType = v45;
        a1 = v44;
        v24 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
        goto LABEL_261;
      }
      v48 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v43 + 48));
      v49 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      FallbackConnectionType = v45;
      if (v49)
      {
        v49(v48, CFSTR("TransportDevice"), v217, buf);
        v50 = (CMTimeValue)buf[0];
      }
      else
      {
        v50 = 0;
      }
      a1 = v44;
      v51 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 64) - 1;
      if (v51 < 8 && ((0xF5u >> v51) & 1) != 0)
      {
        v52 = 1;
      }
      else if ((v216 & 4) != 0)
      {
        v52 = 1;
      }
      else if (v50)
      {
        if ((v216 & 1) == 0
          || ((LOBYTE(v236[0]) = 0,
               LOBYTE(v235) = 0,
               APTransportDeviceGetInfraReachability(),
               !apsession_isDirectLinkEligible())
           || (v52 = LOBYTE(v236[0]), !LOBYTE(v236[0])))
          && (v52 = v235, !(_BYTE)v235))
        {
          APTransportDeviceShouldPerformTrafficRegistration();
          v52 = 0;
        }
      }
      else
      {
        v52 = 0;
      }
      v24 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      if (gLogCategory_APSenderSessionAirPlay <= 50
        && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v52)
        v53 = v209;
      else
        v53 = value;
      CFDictionarySetValue(v47, v205, v53);
      if (*(_QWORD *)(v43 + 96))
      {
        if (gLogCategory_APSenderSessionAirPlay <= 50
          && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CFDictionarySetValue(v47, v200, value);
        CFDictionarySetValue(v47, v199, *(const void **)(v43 + 96));
      }
      v54 = theDict;
      CFDictionarySetValue(theDict, v204, v47);
      CFDictionarySetInt64();
      v55 = *(_QWORD *)(v43 + 280);
      v56 = *(uint64_t (**)(uint64_t, uint64_t, __CFDictionary *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 32);
      if (v56)
      {
        v57 = (uint64_t *)(v43 + 288);
        v58 = v56(v55, 1668575852, theDict, v43 + 288);
        if (!v58)
        {
          v59 = *v57;
          v60 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 24);
          if (v60)
          {
            v61 = v60(v59, apsession_controlStreamMessageCallback, 0, a1);
            if (!v61)
            {
              ShortVersionLength = APSVersionUtilsGetShortVersionLength();
              cf = CFStringCreateWithFormat(v217, 0, CFSTR("AirPlay/%.*s"), ShortVersionLength, "800.74.1.2");
              if (cf)
              {
                v198 = APSGetFBOPropertyInt64();
                v63 = FigTransportStreamGetCMBaseObject();
                v64 = *(void (**)(uint64_t, uint64_t, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
                if (v64)
                  v64(v63, v197, cf);
                v65 = FigTransportStreamGetCMBaseObject();
                v66 = *(void (**)(uint64_t, uint64_t, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
                if (v66)
                  v66(v65, v196, CFSTR("iTunes"));
                v67 = *(_QWORD *)(v43 + 352);
                v68 = FigTransportStreamGetCMBaseObject();
                v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
                if (v69)
                  v69(v68, v195, v67);
                v70 = *v57;
                v71 = *(void (**)(uint64_t, uint64_t, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
                if (v71)
                {
                  if (v198)
                    v72 = value;
                  else
                    v72 = (void *)v209;
                  v71(v70, v194, v72);
                }
                APSenderSessionMessageSendTimeout();
                APSSetFBOPropertyInt64();
                v73 = *(_DWORD *)(v43 + 64);
                if (v73 <= 8 && ((1 << v73) & 0x1C2) != 0)
                {
                  v74 = *v57;
                  v75 = *(void (**)(uint64_t, uint64_t, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
                  if (v75)
                    v75(v74, v193, value);
                  v73 = *(_DWORD *)(v43 + 64);
                }
                if ((v73 > 8 || ((1 << v73) & 0x1C2) == 0)
                  && (!*(_QWORD *)(v43 + 400) || !*(_DWORD *)(v43 + 408))
                  && gLogCategory_APSenderSessionAirPlay <= 60
                  && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
                {
                  LogPrintF();
                }
                APSSetFBOPropertyInt64();
                APSSetFBOPropertyInt64();
                if (gLogCategory_APSenderSessionAirPlay <= 50
                  && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
                {
                  LogPrintF();
                }
                CFRelease(cf);
                v21 = 0;
              }
              else
              {
                APSLogErrorAt();
                v21 = -6728;
              }
              goto LABEL_188;
            }
            v21 = v61;
          }
          else
          {
            v21 = -12782;
          }
          APSLogErrorAt();
LABEL_188:
          v24 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
          goto LABEL_189;
        }
        v21 = v58;
        v24 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      }
      else
      {
        v21 = -12782;
      }
      APSLogErrorAt();
LABEL_189:
      if (buf[0])
        CFRelease(buf[0]);
      if (v54)
        CFRelease(v54);
      if (v47)
        CFRelease(v47);
LABEL_195:
      v76 = *(const void **)(v26 + 288);
      if (v76)
        v77 = CFRetain(v76);
      else
        v77 = 0;
      MEMORY[0x1CAA400E4](*(_QWORD *)(v26 + 256));
      if (v21)
        goto LABEL_216;
      if (apsession_isCancelled())
        goto LABEL_257;
      if (*(_QWORD *)(v26 + 56))
      {
        v78 = APSConnectionInterfaceManagerSelectInterface();
        if (v78)
        {
          v21 = v78;
LABEL_216:
          APSLogErrorAt();
          goto LABEL_217;
        }
      }
      else if (gLogCategory_APSenderSessionAirPlay <= 40
             && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v79 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v79)
      {
        v21 = -12782;
        goto LABEL_216;
      }
      v80 = v79(v77);
      if (v80)
      {
        v21 = v80;
        goto LABEL_216;
      }
      if (apsession_isCancelled())
        goto LABEL_257;
      v81 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (!v81)
      {
        v21 = -12782;
        goto LABEL_216;
      }
      v82 = v81(v77);
      if (v82)
      {
        v21 = v82;
        goto LABEL_216;
      }
      if (apsession_isCancelled())
      {
LABEL_257:
        APSLogErrorAt();
        goto LABEL_258;
      }
      MEMORY[0x1CAA400CC](*(_QWORD *)(v26 + 256));
      *(_BYTE *)(v26 + 264) = 1;
      MEMORY[0x1CAA400E4](*(_QWORD *)(v26 + 256));
      v21 = 0;
LABEL_217:
      MEMORY[0x1CAA400CC](*(_QWORD *)(v26 + 256));
      *(_BYTE *)(v26 + 271) = 1;
      if (!v21)
        v21 = *(_DWORD *)(v26 + 272);
      *(_DWORD *)(v26 + 276) = v21;
      MEMORY[0x1CAA400E4](*(_QWORD *)(v26 + 256));
      if (v21)
      {
        buf[0] = 0;
        v83 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 48);
        v84 = CFGetAllocator(a1);
        v85 = APEndpointDescriptionGetCMBaseObject(v83);
        v86 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
        if (v86)
        {
          v86(v85, CFSTR("TransportDevice"), v84, buf);
          if (buf[0])
          {
            if (gLogCategory_APSenderSessionAirPlay <= 50
              && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            APTransportDeviceReconfirm();
            if (buf[0])
              CFRelease(buf[0]);
          }
        }
        if (*(_QWORD *)(v26 + 56) && *(_DWORD *)(v26 + 208))
        {
          APSConnectionInterfaceManagerReleaseInterfaceSelection();
          *(_DWORD *)(v26 + 208) = 0;
        }
      }
      if (v77)
        CFRelease(v77);
      if (v32)
        CFRelease(v32);
      if (!v21)
        goto LABEL_274;
      if (FallbackConnectionType)
        v87 = v21 == -71832;
      else
        v87 = 1;
      v88 = v87;
      if (gLogCategory_APSenderSessionAirPlay <= 50
        && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if ((v88 & 1) != 0)
      {
        APSLogErrorAt();
        APSLogErrorAt();
        goto LABEL_273;
      }
    }
    v21 = -12782;
LABEL_91:
    APSLogErrorAt();
    v32 = 0;
    Mutable = 0;
    goto LABEL_106;
  }
  v21 = 0;
LABEL_273:
  v216 = 1;
LABEL_274:
  v230 = v21;
  mach_absolute_time();
  v89 = v208;
  MEMORY[0x1CAA400CC](*(_QWORD *)(v208 + 256));
  *(_QWORD *)(v208 + 464) = UpTicksToMilliseconds();
  MEMORY[0x1CAA400E4](*(_QWORD *)(v208 + 256));
  if (*(_QWORD *)(v208 + 144))
    APSEventRecorderRecordEvent();
  if (*(_DWORD *)(v208 + 64) == 5)
  {
    v90 = LogCategoryCopyOSLogHandle();
    v91 = (void *)v90;
    if (v90)
      v92 = v90;
    else
      v92 = MEMORY[0x1E0C81028];
    if (os_signpost_enabled(v92))
    {
      LOWORD(buf[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C943B000, v92, OS_SIGNPOST_EVENT, 0x2B8D08D8uLL, "AP_SIGNPOST_CAR_INITIALCONNECTION_COMPLETE", (const char *)&unk_1C965D452, (uint8_t *)buf, 2u);
    }
    if (v91)
      os_release(v91);
  }
  if (IsAppleInternalBuild()
    && gLogCategory_APSenderSessionAirPlay <= 50
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    UpTicksToMilliseconds();
    LogPrintF();
  }
  if (!v21)
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(v208 + 256));
    CFDictionarySetInt64();
    MEMORY[0x1CAA400E4](*(_QWORD *)(v208 + 256));
    if (*(_DWORD *)(v208 + 64) != 5)
    {
      APSEventRecorderRecordEvent();
      mach_absolute_time();
      InitialInfo = apsession_fetchInitialInfo((uint64_t)a1);
      v230 = InitialInfo;
      mach_absolute_time();
      APSEventRecorderRecordEvent();
      if (IsAppleInternalBuild()
        && gLogCategory_APSenderSessionAirPlay <= 50
        && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        UpTicksToMilliseconds();
        LogPrintF();
      }
      if (InitialInfo == -71831)
        goto LABEL_583;
      if (InitialInfo)
      {
        if (gLogCategory_APSenderSessionAirPlay <= 40
          && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v230 = 0;
      }
    }
    if (*(_QWORD *)(v208 + 144))
      APSEventRecorderRecordEvent();
    if (*(_DWORD *)(v208 + 64) == 5)
    {
      v94 = LogCategoryCopyOSLogHandle();
      v95 = (void *)v94;
      if (v94)
        v96 = v94;
      else
        v96 = MEMORY[0x1E0C81028];
      if (os_signpost_enabled(v96))
      {
        LOWORD(buf[0]) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C943B000, v96, OS_SIGNPOST_EVENT, 0x2B8D0814uLL, "AP_SIGNPOST_CAR_PAIRING_START", (const char *)&unk_1C965D452, (uint8_t *)buf, 2u);
      }
      if (v95)
        os_release(v95);
    }
    v97 = CMBaseObjectGetDerivedStorage();
    v98 = APSGetFBOPropertyInt64();
    v99 = CMBaseObjectGetDerivedStorage();
    if (*(_DWORD *)(v99 + 64) == 10)
    {
      v100 = 0;
    }
    else if (*(_BYTE *)(v99 + 106))
    {
      v100 = 0;
    }
    else
    {
      v100 = APSGetFBOPropertyInt64() || APSGetFBOPropertyInt64() || apsession_getTransportsRequiringBroker() != 0;
    }
    v234 = 0;
    if (APSGetFBOPropertyInt64() && (IsAppleInternalBuild() || APSSettingsGetInt64()))
    {
      buf[0] = 0;
      v101 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v97 + 48));
      v102 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v102)
        v102(v101, CFSTR("SerialNumber"), *MEMORY[0x1E0C9AE00], buf);
      if (gLogCategory_APSenderSessionAirPlay <= 50
        && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (buf[0])
        CFRelease(buf[0]);
    }
    if (v100 && !v98)
    {
      APSLogErrorAt();
      LODWORD(v105) = -71827;
      goto LABEL_545;
    }
    v103 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x1CAA400CC](*(_QWORD *)(v103 + 256));
    if (APSGetFBOPropertyInt64()
      || APSGetFBOPropertyInt64()
      || APSGetFBOPropertyInt64()
      || APSGetFBOPropertyInt64()
      || APSGetFBOPropertyInt64() == 2
      || *(_BYTE *)(v103 + 392))
    {
      MEMORY[0x1CAA400E4](*(_QWORD *)(v103 + 256));
    }
    else
    {
      v168 = *(_DWORD *)(v103 + 64);
      MEMORY[0x1CAA400E4](*(_QWORD *)(v103 + 256));
      if ((v168 - 7) >= 3)
        goto LABEL_511;
    }
    if (apsession_isCancelled())
      goto LABEL_531;
    v104 = CMBaseObjectGetDerivedStorage();
    v105 = APSGetFBOPropertyInt64();
    v106 = APSGetFBOPropertyInt64();
    v107 = APSGetFBOPropertyInt64();
    buf[0] = 0;
    if (v106 == 2)
    {
      if (!v105 || !v107)
      {
        APSLogErrorAt();
        v115 = 0;
        v114 = 0;
        LODWORD(v105) = -71827;
        goto LABEL_363;
      }
    }
    else
    {
      if (!v105)
        goto LABEL_362;
      if (!v107 || *(_BYTE *)(v104 + 160))
      {
        LODWORD(v105) = 0;
        goto LABEL_362;
      }
    }
    ++*(_QWORD *)(v104 + 416);
    PairingClient = apsession_createPairingClient((uint64_t)a1, 1, 0, 0, v100, 0, 0, buf);
    if (PairingClient)
    {
      LODWORD(v105) = PairingClient;
      goto LABEL_361;
    }
    v105 = (uint64_t)buf[0];
    v109 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v109)
    {
      v110 = v109(v105, 0);
      LODWORD(v105) = v110;
      if (v110 == -71164 || v110 == -71145)
      {
        APSLogErrorAt();
        v115 = 0;
        v113 = 1;
        v114 = 1;
        goto LABEL_365;
      }
      if (!v110)
      {
        MEMORY[0x1CAA400CC](*(_QWORD *)(v104 + 256));
        v111 = *(const void **)(v104 + 376);
        v112 = buf[0];
        *(CFTypeRef *)(v104 + 376) = buf[0];
        if (v112)
          CFRetain(v112);
        if (v111)
          CFRelease(v111);
        MEMORY[0x1CAA400E4](*(_QWORD *)(v104 + 256));
        LODWORD(v105) = 0;
        v113 = 0;
        v114 = 0;
        v115 = 1;
LABEL_365:
        if (v106 == 2)
          v116 = v115;
        else
          v116 = 1;
        if ((_DWORD)v105)
          v116 = 1;
        if (!v116)
          LODWORD(v105) = -71827;
        if ((_DWORD)v105)
          v117 = v106 == 2;
        else
          v117 = 0;
        if (v117)
          v118 = 1;
        else
          v118 = v114;
        v119 = buf[0];
        if ((_DWORD)v105 || buf[0])
        {
          if (v118)
            v120 = (_DWORD)v105 == 0;
          else
            v120 = 1;
          if (v120)
            v121 = 50;
          else
            v121 = 90;
          if (v121 >= gLogCategory_APSenderSessionAirPlay)
          {
            if (gLogCategory_APSenderSessionAirPlay != -1 || (v122 = _LogCategory_Initialize(), v119 = buf[0], v122))
            {
              LogPrintF();
              v119 = buf[0];
            }
          }
          v234 = v115;
          if (v119)
            CFRelease(v119);
        }
        else
        {
          v234 = v115;
        }
        if (!v113)
          goto LABEL_544;
        if ((_DWORD)v105 && v118)
          goto LABEL_543;
        if (apsession_isCancelled())
        {
          APSLogErrorAt();
          LODWORD(v105) = -71832;
          goto LABEL_544;
        }
        v123 = CMBaseObjectGetDerivedStorage();
        v124 = APSGetFBOPropertyInt64();
        v125 = APSGetFBOPropertyInt64();
        buf[0] = 0;
        v231 = 0;
        v126 = v124 == 1 || *(_DWORD *)(v123 + 64) == 3;
        isTransientPairingSupported = apsession_isTransientPairingSupported();
        v128 = *(_DWORD *)(v123 + 64);
        if (!isTransientPairingSupported && v128 == 10)
          v126 = 1;
        v129 = 0;
        v130 = 1;
        v131 = 0;
        v132 = 0;
        if (v128 == 7 || v128 == 9)
          goto LABEL_445;
        if (v128 == 8)
        {
          if (!APSGetFBOPropertyInt64())
          {
            if (gLogCategory_APSenderSessionAirPlay <= 40
              && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v129 = 0;
            v131 = 0;
            v132 = 0;
            goto LABEL_445;
          }
          v128 = *(_DWORD *)(v123 + 64);
        }
        if (v128 != 10 && (!v126 && *(_BYTE *)(v123 + 160) || !APSGetFBOPropertyInt64()))
        {
          v129 = 0;
          goto LABEL_443;
        }
        ++*(_QWORD *)(v123 + 416);
        v133 = apsession_createPairingClient((uint64_t)a1, 0, 1, 0, v100, 0, 0, &v231);
        if (v133)
        {
          v129 = v133;
          goto LABEL_442;
        }
        v134 = v231;
        v135 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (v135)
        {
          v129 = v135(v134, buf);
          if (!v129)
            goto LABEL_428;
        }
        else
        {
          v129 = -12782;
        }
        if (*(_DWORD *)(v123 + 64) == 8)
        {
          if (buf[0])
          {
            CFRelease(buf[0]);
            buf[0] = 0;
          }
          if (v231)
          {
            CFRelease(v231);
            v231 = 0;
          }
          ++*(_QWORD *)(v123 + 416);
          v136 = apsession_createPairingClient((uint64_t)a1, 0, 1, 1, v100, 0, 0, &v231);
          if (v136)
          {
            v129 = v136;
            goto LABEL_442;
          }
          v137 = v231;
          v138 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
          if (!v138)
          {
            v129 = -12782;
LABEL_437:
            if (*(_DWORD *)(v123 + 64) == 8)
            {
              v129 = -17602;
LABEL_439:
              APSLogErrorAt();
              v131 = 0;
              v132 = 1;
              goto LABEL_445;
            }
            if (!v126)
            {
LABEL_443:
              v131 = 0;
              goto LABEL_444;
            }
            v129 = -17602;
LABEL_442:
            APSLogErrorAt();
            goto LABEL_443;
          }
          v129 = v138(v137, buf);
        }
        if (v129 == -71164 || v129 == -71145)
          goto LABEL_439;
        if (!v129)
        {
LABEL_428:
          MEMORY[0x1CAA400CC](*(_QWORD *)(v123 + 256));
          v139 = *(const void **)(v123 + 376);
          v140 = v231;
          *(_QWORD *)(v123 + 376) = v231;
          if (v140)
            CFRetain(v140);
          if (v139)
            CFRelease(v139);
          MEMORY[0x1CAA400E4](*(_QWORD *)(v123 + 256));
          v141 = *(_DWORD *)(v123 + 64);
          if (v141 <= 8)
          {
            v131 = 1;
            if (((1 << v141) & 0x1C2) != 0)
              goto LABEL_434;
          }
          v129 = 0;
          v166 = buf[0];
          v131 = 1;
          v130 = 0;
          v132 = 0;
          if (buf[0] && v125)
          {
            v167 = *(const void **)(v123 + 200);
            *(CFTypeRef *)(v123 + 200) = buf[0];
            CFRetain(v166);
            if (v167)
              CFRelease(v167);
LABEL_434:
            v129 = 0;
            v130 = 0;
LABEL_444:
            v132 = 0;
          }
LABEL_445:
          v142 = v131 | !v126;
          if (v129)
            v142 = 1;
          if (v142)
            LODWORD(v105) = v129;
          else
            LODWORD(v105) = -71827;
          if (v126 && (_DWORD)v105 != 0)
            v143 = 1;
          else
            v143 = v132;
          if ((_DWORD)v105 || v231)
          {
            v144 = !v143 || (_DWORD)v105 == 0;
            v145 = v144 ? 50 : 90;
            if (v145 >= gLogCategory_APSenderSessionAirPlay
              && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
          }
          v234 = v131;
          if (buf[0])
            CFRelease(buf[0]);
          if (v231)
            CFRelease(v231);
          if (!v130)
            goto LABEL_544;
          if (!(_DWORD)v105 || !v143)
          {
            v218 = v100;
            if (apsession_isCancelled())
            {
              APSLogErrorAt();
              LODWORD(v105) = -71832;
              v89 = v208;
              goto LABEL_545;
            }
            v146 = CMBaseObjectGetDerivedStorage();
            v147 = APSGetFBOPropertyInt64();
            v148 = APSGetFBOPropertyInt64();
            v149 = APSGetFBOPropertyInt64();
            v150 = APSGetFBOPropertyInt64();
            v151 = apsession_isTransientPairingSupported();
            v152 = *(_DWORD *)(v146 + 64);
            v154 = v152 != 9 && v152 != 7;
            v231 = 0;
            v235 = 0;
            v236[0] = 0;
            if (*(_BYTE *)(v146 + 160))
            {
              LODWORD(v105) = 0;
              v155 = 0;
              v156 = 0;
              v157 = 1;
LABEL_481:
              v158 = 1;
              goto LABEL_482;
            }
            buf[0] = 0;
            v215 = v150;
            v214 = v151;
            if (apsession_createPairingClient((uint64_t)a1, 0, 0, 0, 0, 0, 0, buf))
            {
              APSLogErrorAt();
            }
            else
            {
              v160 = (CMTimeValue)buf[0];
              v161 = *(uint64_t (**)(CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
              if (v161)
              {
                v162 = v161(v160);
                goto LABEL_607;
              }
            }
            v162 = 0;
LABEL_607:
            if (buf[0])
              CFRelease(buf[0]);
            LODWORD(v105) = 0;
            if (v148)
              v183 = v149 == 0;
            else
              v183 = 1;
            v184 = v183;
            if (v147)
              v185 = 0;
            else
              v185 = v162 == 0;
            v157 = 1;
            v155 = 0;
            v156 = 0;
            if (v185)
              goto LABEL_481;
            v158 = 1;
            if (v184)
            {
              if (v215)
                v186 = v214 == 0;
              else
                v186 = 1;
              if (!v186 && v154)
              {
                LODWORD(v105) = 0;
              }
              else
              {
                apsession_copyAPPairingGroupInfo();
                ++*(_QWORD *)(v146 + 416);
                v188 = apsession_createPairingClient((uint64_t)a1, 0, 0, 0, v218, v236[0], v235, &v231);
                if (v188)
                {
                  LODWORD(v105) = v188;
                  APSLogErrorAt();
                }
                else
                {
                  v105 = (uint64_t)v231;
                  v189 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
                  if (!v189)
                  {
                    v155 = 0;
                    v156 = 0;
                    LODWORD(v105) = -12782;
                    goto LABEL_482;
                  }
                  v190 = v189(v105, 0);
                  LODWORD(v105) = v190;
                  if (v190 == -71164 || v190 == -71145)
                  {
                    APSLogErrorAt();
                    v155 = 0;
                    v158 = 0;
                    v156 = 1;
                    goto LABEL_482;
                  }
                  if (!v190)
                  {
                    MEMORY[0x1CAA400CC](*(_QWORD *)(v146 + 256));
                    v191 = *(const void **)(v146 + 376);
                    v192 = v231;
                    *(_QWORD *)(v146 + 376) = v231;
                    if (v192)
                      CFRetain(v192);
                    if (v191)
                      CFRelease(v191);
                    MEMORY[0x1CAA400E4](*(_QWORD *)(v146 + 256));
                    LODWORD(v105) = 0;
                    v157 = 0;
                    v156 = 0;
                    v155 = 1;
                    goto LABEL_482;
                  }
                }
              }
              v155 = 0;
              v156 = 0;
            }
LABEL_482:
            if (v236[0])
              CFRelease(v236[0]);
            if (v235)
              CFRelease(v235);
            if (v231)
            {
              CFRelease(v231);
              v159 = v231;
              if ((_DWORD)v105)
              {
LABEL_494:
                if ((((_DWORD)v105 != 0) & v156) != 0)
                  v163 = 90;
                else
                  v163 = 50;
                if (v163 >= gLogCategory_APSenderSessionAirPlay
                  && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
                {
                  LogPrintF();
                }
LABEL_502:
                v234 = v155;
                if (v157)
                {
                  if ((_DWORD)v105)
                    v164 = v158;
                  else
                    v164 = 1;
                  v89 = v208;
                  if ((v164 & 1) != 0)
                  {
                    if (apsession_isCancelled())
                    {
LABEL_531:
                      APSLogErrorAt();
                      LODWORD(v105) = -71832;
                      goto LABEL_545;
                    }
                    v165 = apsession_tryAPPairSetupAndVerify((uint64_t)a1, v216, v218, &v234);
                    if (!v165)
                    {
                      if (v234)
                      {
                        if (!apsession_isCancelled())
                        {
LABEL_511:
                          LODWORD(v105) = 0;
                          goto LABEL_545;
                        }
                        goto LABEL_531;
                      }
                      APSLogErrorAt();
                      LODWORD(v105) = -71829;
LABEL_545:
                      MEMORY[0x1CAA400CC](*(_QWORD *)(v97 + 256));
                      CFDictionarySetInt64();
                      MEMORY[0x1CAA400E4](*(_QWORD *)(v97 + 256));
                      v230 = v105;
                      if (*(_QWORD *)(v89 + 144))
                        APSEventRecorderRecordEvent();
                      if (*(_DWORD *)(v89 + 64) == 5)
                      {
                        v170 = LogCategoryCopyOSLogHandle();
                        v171 = (void *)v170;
                        if (v170)
                          v172 = v170;
                        else
                          v172 = MEMORY[0x1E0C81028];
                        if (os_signpost_enabled(v172))
                        {
                          LOWORD(buf[0]) = 0;
                          _os_signpost_emit_with_name_impl(&dword_1C943B000, v172, OS_SIGNPOST_EVENT, 0x2B8D0818uLL, "AP_SIGNPOST_CAR_PAIRING_COMPLETE", (const char *)&unk_1C965D452, (uint8_t *)buf, 2u);
                        }
                        if (v171)
                          os_release(v171);
                      }
                      if ((_DWORD)v105)
                        goto LABEL_582;
                      v173 = (uint64_t)v228;
                      if (!v228)
                        apsession_copyTransportControlStream((uint64_t)a1, &v228);
                      v174 = *(const void **)(v89 + 216);
                      if (v174)
                      {
                        CFRelease(v174);
                        *(_QWORD *)(v89 + 216) = 0;
                      }
                      v175 = *(const void **)(v89 + 224);
                      if (v175)
                      {
                        CFRelease(v175);
                        *(_QWORD *)(v89 + 224) = 0;
                      }
                      v176 = *(const void **)(v89 + 232);
                      if (v176)
                      {
                        CFRelease(v176);
                        *(_QWORD *)(v89 + 232) = 0;
                      }
                      v177 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                      v230 = FigTransportStreamCopyProperty(v173, *MEMORY[0x1E0CF1FC8], *MEMORY[0x1E0C9AE00], (uint64_t)&v227);
                      if (v230)
                        goto LABEL_582;
                      v230 = APSNetworkAddressCopyStringRepresentationWithFlags();
                      if (v230)
                        goto LABEL_582;
                      v178 = *MEMORY[0x1E0CF1F68];
                      v230 = FigTransportStreamCopyProperty(v173, *MEMORY[0x1E0CF1F68], (uint64_t)v177, v89 + 224);
                      if (v230)
                        goto LABEL_582;
                      v230 = FigTransportStreamCopyProperty(v173, *MEMORY[0x1E0CF1F58], (uint64_t)v177, v89 + 232);
                      if (v230)
                        goto LABEL_582;
                      if (v201)
                      {
                        v230 = apsession_ensureKeyHolderSetUp();
                        if (v230)
                          goto LABEL_582;
                        v179 = *(_QWORD *)(v89 + 192);
                        v180 = *(uint64_t (**)(uint64_t, uint64_t, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 80);
                        if (v180)
                          v181 = v180(v173, v179, CFSTR("Ctrl"));
                        else
                          v181 = -12782;
                        v230 = v181;
                        if (*(_BYTE *)(v89 + 344))
                        {
                          APSGetFBOPropertyInt64();
                          if (!v230)
                          {
                            v230 = FigTransportStreamCopyProperty(v173, v178, (uint64_t)v177, (uint64_t)&v226);
                            if (!v230)
                            {
                              if (v226)
                              {
                                v237.location = 0;
                                v237.length = 28;
                                CFDataGetBytes(v226, v237, buffer);
                                SockAddrGetPort();
                                v22 = CFDictionaryCreateMutable(v177, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                                if (v22)
                                {
                                  CFDictionarySetInt64();
                                  CFDictionarySetInt64();
                                  CFDictionarySetValue(v22, CFSTR("localSendsWithReadKey"), (const void *)*MEMORY[0x1E0C9AE40]);
                                  v219 = a1;
                                  v220 = CFSTR("Ctrl");
                                  v221 = v22;
                                  v230 = apsession_broadcastKeysForDiagnosticsDataInternal((uint64_t)&v219);
                                  if (v230)
                                  {
                                    APSLogErrorAt();
                                    goto LABEL_584;
                                  }
                                  goto LABEL_581;
                                }
                                APSLogErrorAt();
                                v23 = -71820;
                              }
                              else
                              {
                                APSLogErrorAt();
                                v22 = 0;
                                v23 = -71829;
                              }
LABEL_76:
                              v230 = v23;
                              goto LABEL_584;
                            }
                          }
LABEL_582:
                          APSLogErrorAt();
                          goto LABEL_583;
                        }
                      }
                      v22 = 0;
LABEL_581:
                      MEMORY[0x1CAA400CC](*(_QWORD *)(v89 + 256));
                      *(_BYTE *)(v89 + 265) = 1;
                      MEMORY[0x1CAA400E4](*(_QWORD *)(v89 + 256));
                      CMNotificationCenterGetDefaultLocalCenter();
                      FigDispatchAsyncPostNotification();
                      goto LABEL_584;
                    }
                    LODWORD(v105) = v165;
                  }
                  APSLogErrorAt();
                  goto LABEL_545;
                }
LABEL_544:
                v89 = v208;
                goto LABEL_545;
              }
            }
            else
            {
              v159 = 0;
              if ((_DWORD)v105)
                goto LABEL_494;
            }
            if (!v159)
              goto LABEL_502;
            goto LABEL_494;
          }
LABEL_543:
          APSLogErrorAt();
          goto LABEL_544;
        }
        goto LABEL_437;
      }
    }
    else
    {
      LODWORD(v105) = -12782;
    }
    if (v106 == 2)
    {
      LODWORD(v105) = -72279;
LABEL_361:
      APSLogErrorAt();
    }
LABEL_362:
    v115 = 0;
    v114 = 0;
LABEL_363:
    v113 = 1;
    goto LABEL_365;
  }
  if (v21 != -71832)
    goto LABEL_582;
  v169 = gLogCategory_APSenderSessionAirPlay;
LABEL_523:
  if (v169 > 50 || v169 == -1 && !_LogCategory_Initialize())
    goto LABEL_583;
LABEL_10:
  LogPrintF();
LABEL_583:
  v22 = 0;
LABEL_584:
  if (v228)
    CFRelease(v228);
  if (v227)
    CFRelease(v227);
  if (v22)
    CFRelease(v22);
  if (v226)
    CFRelease(v226);
  if (v230)
    apsession_recordActivationMessageTiming((uint64_t)a1);
  return 0;
}

uint64_t apsession_ensureKeyHolderSetUp()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  const void *v6;
  CFTypeRef v7;
  const void *v8;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  const void *v15;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 192))
    return 0;
  v1 = DerivedStorage;
  v2 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v3 = APSGetFBOPropertyInt64();
  if (*(_BYTE *)(v2 + 106))
    v4 = v3 == 0;
  else
    v4 = 0;
  if (v4)
  {
    if (gLogCategory_APSenderSessionAirPlay <= 90
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v13 = 0;
    v7 = 0;
    v9 = 0;
  }
  else
  {
    v5 = v3;
    MEMORY[0x1CAA400CC](*(_QWORD *)(v2 + 256));
    v6 = *(const void **)(v2 + 376);
    if (v6)
      v7 = CFRetain(v6);
    else
      v7 = 0;
    v8 = *(const void **)(v2 + 368);
    if (v8)
      v9 = CFRetain(v8);
    else
      v9 = 0;
    MEMORY[0x1CAA400E4](*(_QWORD *)(v2 + 256));
    v10 = *MEMORY[0x1E0C9AE00];
    if (v5)
    {
      v11 = APKeyHolderCoreUtilsCreate(v10, v7, &cf);
      if (!(_DWORD)v11)
      {
        if (gLogCategory_APSenderSessionAirPlay <= 50
          && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
        {
LABEL_23:
          LogPrintF();
        }
LABEL_43:
        v13 = 0;
        v14 = cf;
        cf = 0;
        if (!v7)
          goto LABEL_30;
LABEL_29:
        CFRelease(v7);
        goto LABEL_30;
      }
      v13 = v11;
    }
    else
    {
      v12 = APKeyHolderLegacyCreate(v10, v7, v9, &cf);
      if (!(_DWORD)v12)
      {
        if (gLogCategory_APSenderSessionAirPlay <= 50
          && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
        {
          goto LABEL_23;
        }
        goto LABEL_43;
      }
      v13 = v12;
    }
    APSLogErrorAt();
  }
  if (cf)
    CFRelease(cf);
  v14 = 0;
  if (v7)
    goto LABEL_29;
LABEL_30:
  if (v9)
    CFRelease(v9);
  if ((_DWORD)v13)
  {
    APSLogErrorAt();
    if (!v14)
      return v13;
    goto LABEL_38;
  }
  v15 = *(const void **)(v1 + 192);
  *(_QWORD *)(v1 + 192) = v14;
  if (v14)
    CFRetain(v14);
  if (v15)
    CFRelease(v15);
  if (v14)
LABEL_38:
    CFRelease(v14);
  return v13;
}

uint64_t apsession_ensureSenderNetworkClockStarted(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  CFTypeRef v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t updated;
  UInt8 buffer[8];
  uint64_t v12;
  uint64_t v13;
  int v14;
  CFRange v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)buffer = 0;
  v12 = 0;
  v14 = 0;
  v13 = 0;
  if (apsession_isCancelled())
  {
    v4 = 0;
    v8 = 4294895464;
    goto LABEL_17;
  }
  if (*(_BYTE *)(DerivedStorage + 162))
  {
    v4 = 0;
    goto LABEL_23;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
  v3 = *(const void **)(DerivedStorage + 288);
  if (v3)
    v4 = CFRetain(v3);
  else
    v4 = 0;
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 256));
  if (gLogCategory_APSenderSessionAirPlay <= 40
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v5 = *(_QWORD *)(DerivedStorage + 72);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
  if (!v6)
  {
    v8 = 4294954514;
LABEL_16:
    APSLogErrorAt();
LABEL_17:
    if (gLogCategory_APSenderSessionAirPlay <= 90
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    apsession_stopSenderNetworkClockIfNeeded(a1);
    if (v4)
      goto LABEL_28;
    return v8;
  }
  v7 = v6(v5, a1);
  if ((_DWORD)v7)
  {
    v8 = v7;
    goto LABEL_16;
  }
  *(_BYTE *)(DerivedStorage + 162) = 1;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  *(_DWORD *)(DerivedStorage + 240) = APSGetFBOPropertyInt64();
  if (gLogCategory_APSenderSessionAirPlay <= 30
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(__CFString **)(DerivedStorage + 16) == CFSTR("PTP"))
  {
    v15.location = 0;
    v15.length = 28;
    CFDataGetBytes(*(CFDataRef *)(DerivedStorage + 224), v15, buffer);
    updated = APSNetworkClockDetermineAndSetOrUpdateLocalPeerInfo();
    if ((_DWORD)updated)
    {
      v8 = updated;
      goto LABEL_16;
    }
  }
LABEL_23:
  if (gLogCategory_APSenderSessionAirPlay <= 50
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v8 = 0;
  if (v4)
LABEL_28:
    CFRelease(v4);
  return v8;
}

uint64_t apsession_ensureControlStreamSetup(uint64_t a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionAirPlay <= 30
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*(_BYTE *)(DerivedStorage + 161))
    apsession_requestControlSetupWithResponse(a1);
  return 0;
}

uint64_t apsession_ensureLowPowerKeepAliveStreamSetup(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;
  CFTypeRef v7;
  uint64_t v8;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v10;
  uint64_t (*v11)(uint64_t, uint64_t, CFMutableDictionaryRef, CFTypeRef *);
  uint64_t v12;
  uint64_t CMBaseObject;
  uint64_t v14;
  void (*v15)(uint64_t);
  const void *v16;
  uint64_t (*v17)(CFTypeRef);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 0;
  v5 = DerivedStorage;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
  v6 = *(const void **)(v5 + 336);
  if (v6)
  {
    v7 = CFRetain(v6);
    MEMORY[0x1CAA400E4](*(_QWORD *)(v5 + 256));
    if (v7)
    {
      v8 = 0;
LABEL_29:
      CFRelease(v7);
      return v8;
    }
  }
  else
  {
    MEMORY[0x1CAA400E4](*(_QWORD *)(v5 + 256));
  }
  cf = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v7 = 0;
    v8 = 4294895476;
    goto LABEL_28;
  }
  v10 = Mutable;
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  v11 = *(uint64_t (**)(uint64_t, uint64_t, CFMutableDictionaryRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 64);
  if (v11)
  {
    v12 = v11(a1, 1802529910, v10, &cf);
    if ((_DWORD)v12)
    {
      v8 = v12;
    }
    else
    {
      v8 = APSSetFBOPropertyInt64();
      if (!(_DWORD)v8)
      {
        v7 = cf;
        cf = 0;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v8 = 4294954514;
  }
  APSLogErrorAt();
  v7 = 0;
LABEL_13:
  CFRelease(v10);
  if (cf)
  {
    CMBaseObject = FigTransportStreamGetCMBaseObject();
    if (CMBaseObject)
    {
      v14 = CMBaseObject;
      v15 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v15)
        v15(v14);
    }
    CFRelease(cf);
  }
  if (!(_DWORD)v8)
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(v5 + 256));
    v16 = *(const void **)(v5 + 336);
    *(_QWORD *)(v5 + 336) = v7;
    if (v7)
      CFRetain(v7);
    if (v16)
      CFRelease(v16);
    MEMORY[0x1CAA400E4](*(_QWORD *)(v5 + 256));
    v17 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v17)
    {
      v8 = v17(v7);
      if (!(_DWORD)v8)
      {
        if (!v7)
          return v8;
        goto LABEL_29;
      }
    }
    else
    {
      v8 = 4294954514;
    }
  }
LABEL_28:
  APSLogErrorAt();
  if (v7)
    goto LABEL_29;
  return v8;
}

uint64_t apsession_addPeerToNetworkClock()
{
  _QWORD *DerivedStorage;
  uint64_t updated;
  uint64_t v2;
  uint64_t v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage[29])
  {
    v3 = 4294895467;
    goto LABEL_21;
  }
  if (DerivedStorage[31])
  {
    updated = APSNetworkClockAddOrUpdatePeerFromSerializablePeerDictionary();
    if (!(_DWORD)updated)
    {
      if (gLogCategory_APSenderSessionAirPlay > 30
        || gLogCategory_APSenderSessionAirPlay == -1 && !_LogCategory_Initialize())
      {
        return 0;
      }
      goto LABEL_11;
    }
    v3 = updated;
LABEL_21:
    APSLogErrorAt();
    return v3;
  }
  if (!DerivedStorage[27])
  {
    v3 = 4294895467;
    goto LABEL_21;
  }
  v2 = APSNetworkClockAddOrUpdatePeerWithAddressAndInterfaceNameStrings();
  if ((_DWORD)v2)
  {
    v3 = v2;
    goto LABEL_21;
  }
  if (gLogCategory_APSenderSessionAirPlay > 30
    || gLogCategory_APSenderSessionAirPlay == -1 && !_LogCategory_Initialize())
  {
    return 0;
  }
LABEL_11:
  LogPrintF();
  return 0;
}

uint64_t apsession_ensureEventStreamCreated(uint64_t a1, int a2)
{
  uint64_t v5;

  CMBaseObjectGetDerivedStorage();
  v5 = 0;
  if (a2)
  {
    APSGetFBOPropertyInt64();
    apsession_copyTransportSession(a1, &v5);
  }
  return 0;
}

void apsession_recordActivationMessageTiming(uint64_t a1)
{
  uint64_t v2;

  CMBaseObjectGetDerivedStorage();
  v2 = 0;
  apsession_copyTransportControlStream(a1, &v2);
}

void sub_1C9474B08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef cf, CFTypeRef a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _QWORD *v18;
  const void *v19;
  uint64_t CMBaseObject;
  unsigned int (*v21)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v25;
  CFTypeRef v26;
  const void *v27;

  v19 = v27;
  if (v27)
  {
    CMBaseObject = FigTransportStreamGetCMBaseObject();
    v21 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
    if (!v21
      || (v22 = *MEMORY[0x1E0C9AE00], v21(CMBaseObject, *MEMORY[0x1E0CF1F20], *MEMORY[0x1E0C9AE00], &v26))
      || (v23 = FigTransportStreamGetCMBaseObject(),
          (v24 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48)) == 0)
      || v24(v23, *MEMORY[0x1E0CF1F18], v22, &v25))
    {
      APSLogErrorAt();
    }
    else
    {
      MEMORY[0x1CAA400CC](v18[32]);
      v18[56] = FigCFNumberGetUInt64();
      v18[57] = FigCFNumberGetUInt64();
      MEMORY[0x1CAA400E4](v18[32]);
    }
  }
  if (v26)
    CFRelease(v26);
  if (v25)
    CFRelease(v25);
  if (v19)
    CFRelease(v19);
}

uint64_t apsession_fetchInitialInfo(uint64_t a1)
{
  uint64_t Info;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionAirPlay <= 30
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  Info = apsession_fetchInfo(a1);
  if ((_DWORD)Info)
    APSLogErrorAt();
  return Info;
}

uint64_t apsession_broadcastKeysForDiagnosticsDataInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD, CFDataRef *, _QWORD, CFDataRef *);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, const __CFString *, uint64_t, CFDataRef *);
  CFDataRef Data;
  int v16;
  CFTypeRef cf;
  CFTypeRef v18;
  CFDataRef v19;
  int v20;
  int v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  UInt8 buffer[8];
  uint64_t v27;
  uint64_t v28;
  int v29;
  CFTypeRef propertyList;
  CFDataRef v31;
  CFDataRef theData;
  unsigned int Formatted;
  uint64_t v34;
  CFRange v35;

  v34 = *MEMORY[0x1E0C80C00];
  Formatted = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v31 = 0;
  theData = 0;
  propertyList = 0;
  *(_QWORD *)buffer = 0;
  v27 = 0;
  v29 = 0;
  v28 = 0;
  v25 = 0;
  v24 = 0;
  v23 = 0;
  v22 = 0;
  v21 = -1;
  v20 = -1;
  v18 = 0;
  v19 = 0;
  cf = 0;
  if (!*(_BYTE *)(DerivedStorage + 344))
    goto LABEL_32;
  v3 = DerivedStorage;
  if (!*(_QWORD *)(DerivedStorage + 192)
    || !*(_QWORD *)(DerivedStorage + 216)
    || !*(_QWORD *)(DerivedStorage + 224)
    || !*(_QWORD *)(DerivedStorage + 232)
    || !*(_QWORD *)(a1 + 16))
  {
    goto LABEL_32;
  }
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 48));
  v5 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v5)
  {
    Formatted = -12782;
    goto LABEL_32;
  }
  v6 = *MEMORY[0x1E0C9AE00];
  Formatted = v5(CMBaseObject, CFSTR("Name"), *MEMORY[0x1E0C9AE00], &v18);
  if (Formatted)
    goto LABEL_32;
  v7 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v3 + 48));
  v8 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v8)
  {
    Formatted = -12782;
    goto LABEL_32;
  }
  Formatted = v8(v7, CFSTR("DeviceID"), v6, &cf);
  if (Formatted)
    goto LABEL_32;
  v9 = *(_QWORD *)(v3 + 192);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFDataRef *, _QWORD, CFDataRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 64);
  if (!v11)
  {
    Formatted = -12782;
    goto LABEL_32;
  }
  Formatted = v11(v9, v10, 0, &theData, 0, &v31);
  if (Formatted)
    goto LABEL_32;
  if (CFDataGetLength(theData) <= 31
    || CFDataGetLength(v31) <= 31
    || (FigCFDictionaryGetInt32IfPresent(),
        FigCFDictionaryGetInt32IfPresent(),
        FigCFDictionaryGetBooleanIfPresent(),
        v35.location = 0,
        v35.length = 28,
        CFDataGetBytes(*(CFDataRef *)(v3 + 224), v35, buffer),
        buffer[1] != 2)
    && buffer[1] != 30)
  {
    APSLogErrorAt();
    Data = 0;
    goto LABEL_57;
  }
  Formatted = SockAddrToString();
  if (Formatted || (APSGetDeviceID(), Formatted))
  {
LABEL_32:
    APSLogErrorAt();
    Data = 0;
    goto LABEL_33;
  }
  GestaltGetData();
  if (Formatted)
    LOBYTE(v22) = 0;
  v12 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v3 + 48));
  v13 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFDataRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v13)
  {
    Formatted = -12782;
    goto LABEL_32;
  }
  Formatted = v13(v12, CFSTR("MACAddress"), v6, &v19);
  if (Formatted)
    goto LABEL_32;
  CFDataGetBytePtr(theData);
  CFDataGetBytePtr(v31);
  CFDataGetBytePtr(v19);
  Formatted = CFPropertyListCreateFormatted();
  if (Formatted)
    goto LABEL_32;
  if (gLogCategory_APSenderSessionAirPlay <= 30
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  Data = CFPropertyListCreateData(0, propertyList, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (!Data)
  {
    APSLogErrorAt();
    v16 = -6700;
    goto LABEL_58;
  }
  if (!CFGetCString())
  {
LABEL_57:
    v16 = -71821;
LABEL_58:
    Formatted = v16;
    goto LABEL_33;
  }
  Formatted = APTDiagnosticMulticastDataToAllHosts();
  if (Formatted)
    APSLogErrorAt();
LABEL_33:
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  if (v19)
    CFRelease(v19);
  if (propertyList)
    CFRelease(propertyList);
  if (Data)
    CFRelease(Data);
  if (theData)
    CFRelease(theData);
  if (v31)
    CFRelease(v31);
  return Formatted;
}

uint64_t apsession_determineTransportAvailabilityAndWaitIfNeeded(uint64_t a1, int a2, int a3, _DWORD *a4, int a5, int *a6)
{
  uint64_t isTransportTypeAvailable;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  useconds_t v16;
  unint64_t v17;
  int v19;

  if (!a4)
  {
    APSLogErrorAt();
    goto LABEL_37;
  }
  if (apsession_isCancelled())
  {
LABEL_38:
    APSLogErrorAt();
    v13 = 0;
    v19 = -71832;
    goto LABEL_32;
  }
  if ((a2 & ~a3) != 0)
  {
LABEL_37:
    v19 = 0;
    v13 = 0;
    goto LABEL_32;
  }
  isTransportTypeAvailable = apsession_isTransportTypeAvailable(a1, a2);
  v13 = isTransportTypeAvailable;
  if (a5 && !(_DWORD)isTransportTypeAvailable)
  {
    v14 = 20;
    if (a2 != 4)
      v14 = 0;
    if (a2 == 2)
      v15 = 10;
    else
      v15 = v14;
    if (((a2 - 2) & 0xFFFFFFFD) != 0)
      v16 = 0;
    else
      v16 = 500000;
    if (gLogCategory_APSenderSessionAirPlay <= 50
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
      if (v15)
      {
LABEL_19:
        v17 = 1;
        while (!apsession_isCancelled())
        {
          usleep(v16);
          v13 = apsession_isTransportTypeAvailable(a1, a2);
          if (gLogCategory_APSenderSessionAirPlay <= 50
            && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          if (!(_DWORD)v13 && v17++ < v15)
            continue;
          goto LABEL_28;
        }
        goto LABEL_38;
      }
    }
    else if (v15)
    {
      goto LABEL_19;
    }
    v19 = 0;
    v13 = 0;
    goto LABEL_32;
  }
LABEL_28:
  v19 = 0;
  if ((_DWORD)v13)
    *a4 |= a2;
LABEL_32:
  if (a6)
    *a6 = v19;
  return v13;
}

uint64_t apsession_isTransportTypeAvailable(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  unsigned int (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t IsReachable;
  int v7;
  uint64_t v8;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 48));
  v5 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (!v5 || v5(CMBaseObject, CFSTR("TransportDevice"), *MEMORY[0x1E0C9AE00], &cf))
  {
    APSLogErrorAt();
LABEL_5:
    IsReachable = 0;
  }
  else
  {
    switch(a2)
    {
      case 1:
      case 2:
      case 8:
        IsReachable = APTransportDeviceIsReachable();
        break;
      case 4:
        v7 = *(_DWORD *)(DerivedStorage + 64);
        v8 = APTransportDeviceIsReachable();
        IsReachable = v8;
        if (v7 == 3 && (_DWORD)v8)
          IsReachable = APTransportDeviceIsReachable() != 0;
        break;
      default:
        if (gLogCategory_APSenderSessionAirPlay <= 90
          && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_5;
    }
  }
  if (cf)
    CFRelease(cf);
  return IsReachable;
}

uint64_t apsession_controlStreamMessageCallback(const void *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a4);
  CFRetain(a1);
  return APSDispatchAsyncFHelper();
}

void apsession_controlStreamMessageCallbackInternal(uint64_t a1)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 != 1651470958)
  {
    if (v2 == 1684628836)
    {
      apsession_handleTransportStreamDisconnected(*(void **)(a1 + 16));
    }
    else if (gLogCategory_APSenderSessionAirPlay <= 50
           && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  CFRelease(*(CFTypeRef *)(a1 + 16));
  CFRelease(*(CFTypeRef *)a1);
}

void apsession_handleTransportStreamDisconnected(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionAirPlay <= 90
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 152), a1, (dispatch_function_t)apsession_handleDeferredTeardownControlStream);
  apsession_postFailedNotification(a1, 4294950683, CFSTR("InProgress"));
}

void apsession_handleDeferredTeardownControlStream(uint64_t a1)
{
  apsession_disconnectControlStream(a1);
}

uint64_t apsession_fetchInfo(uint64_t a1)
{
  CFTypeRef v3[3];

  memset(v3, 0, sizeof(v3));
  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 64) != 10)
    apsession_copyTransportControlStream(a1, v3);
  return 0;
}

uint64_t apsession_tryAPPairSetupAndVerify(uint64_t a1, int a2, char a3, char *a4)
{
  uint64_t DerivedStorage;
  int isTransientPairingSupported;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BOOL8 v15;
  unsigned int v16;
  const __CFString *v17;
  _BOOL4 v18;
  const void *v19;
  CFTypeRef v20;
  int isBrokerAssistedConnection;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  const void *v29;
  CFTypeRef v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CFTypeRef v36;
  uint64_t (*v37)(CFTypeRef, CFTypeRef, _BOOL8, _QWORD, CFTypeRef *, CFTypeRef *, _QWORD, _QWORD, uint64_t, const char *, uint64_t);
  CFTypeRef v38;
  CFTypeRef v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t CMBaseObject;
  void (*v43)(uint64_t, const __CFString *, CFTypeRef);
  uint64_t v44;
  void (*v45)(uint64_t, const __CFString *, CFTypeRef);
  CFTypeRef v46;
  uint64_t (*v47)(CFTypeRef, _QWORD);
  uint64_t v48;
  const void *v49;
  CFTypeRef v50;
  char v51;
  uint64_t v53;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  int v62;
  char v64;
  int v65;
  CFTypeRef v66;
  CFTypeRef v67;
  CFTypeRef v68;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  isTransientPairingSupported = apsession_isTransientPairingSupported();
  v9 = APSGetFBOPropertyInt64();
  v61 = APSGetFBOPropertyInt64();
  v59 = APSGetFBOPropertyInt64();
  v62 = *(_DWORD *)(DerivedStorage + 64);
  v67 = 0;
  v68 = 0;
  v66 = 0;
  if (gLogCategory_APSenderSessionAirPlay <= 50
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    if ((a2 - 1) > 7)
      v10 = "UNKNOWN";
    else
      v10 = off_1E82685E8[a2 - 1];
    v57 = v10;
    v58 = *(_QWORD *)(DerivedStorage + 8);
    v56 = a1;
    LogPrintF();
  }
  v11 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(v11 + 256));
  v12 = APSGetFBOPropertyInt64();
  v60 = a3;
  if (APSGetFBOPropertyInt64() || *(_BYTE *)(v11 + 392))
  {
    v13 = v9;
    v14 = 1;
LABEL_12:
    v15 = 1;
    goto LABEL_13;
  }
  v65 = a2;
  v13 = v9;
  v31 = *(_DWORD *)(v11 + 64);
  v14 = 1;
  if (v31 == 7)
    goto LABEL_12;
  v15 = 1;
  if (v31 != 9)
  {
    if (APSGetFBOPropertyInt64())
    {
      v14 = 0;
    }
    else
    {
      v53 = APSGetFBOPropertyInt64();
      v14 = 0;
      v15 = v65 == 2 && v12 == 0 || v53 != 0;
    }
  }
LABEL_13:
  MEMORY[0x1CAA400E4](*(_QWORD *)(v11 + 256));
  v16 = 0;
  if (isTransientPairingSupported && (v14 & 1) == 0)
  {
    if (v13 | v61)
      v16 = 1;
    else
      v16 = !v15;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
  v17 = *(const __CFString **)(DerivedStorage + 352);
  if (v17)
  {
    v18 = CFStringGetLength(v17) != 0;
    v19 = *(const void **)(DerivedStorage + 352);
    if (v19)
    {
      v20 = CFRetain(v19);
      goto LABEL_23;
    }
  }
  else
  {
    v18 = 0;
  }
  v20 = 0;
LABEL_23:
  isBrokerAssistedConnection = apsession_isBrokerAssistedConnection();
  v22 = (const void *)*MEMORY[0x1E0C9AE50];
  v23 = (const void *)*MEMORY[0x1E0C9AE40];
  v64 = v16;
  if (v16)
    v24 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v24 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 432), CFSTR("transientPairing"), v24);
  if (v15)
    v25 = v22;
  else
    v25 = v23;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 432), CFSTR("pairingRequiresCode"), v25);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 256));
  if (v18)
  {
    v26 = v62 != 6 && isBrokerAssistedConnection == 0;
    v27 = (v61 == 0) & ~v14;
    if (!v26)
      v27 = 1;
  }
  else
  {
    v27 = 0;
  }
  if (!v15 | v27)
    goto LABEL_57;
  if (v62 == 6)
  {
    v28 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x1CAA400CC](*(_QWORD *)(v28 + 256));
    v29 = *(const void **)(v28 + 288);
    if (v29)
    {
      v30 = CFRetain(v29);
      MEMORY[0x1CAA400E4](*(_QWORD *)(v28 + 256));
      if (v30)
      {
        if (gLogCategory_APSenderSessionAirPlay <= 50
          && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
        {
          v56 = a1;
          LogPrintF();
        }
        v34 = APTransportStreamSendPlistMessageCreatingPlistReply();
        if ((_DWORD)v34)
        {
          v33 = v34;
          v32 = 0;
LABEL_52:
          if (gLogCategory_APSenderSessionAirPlay <= 50
            && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          if ((v32 & 1) == 0)
            CFRelease(v30);
          goto LABEL_83;
        }
        CFRelease(v30);
        goto LABEL_56;
      }
    }
    else
    {
      MEMORY[0x1CAA400E4](*(_QWORD *)(v28 + 256));
    }
    APSLogErrorAt();
    v30 = 0;
    v32 = 1;
    v33 = 4294895467;
    goto LABEL_52;
  }
LABEL_56:
  if (*(_BYTE *)(DerivedStorage + 105))
  {
    APSLogErrorAt();
    v51 = 0;
    v33 = 4294949696;
    goto LABEL_84;
  }
LABEL_57:
  apsession_copyAPPairingGroupInfo();
  ++*(_QWORD *)(DerivedStorage + 416);
  v35 = apsession_createPairingClient(a1, 0, 0, 0, v60, 0, 0, &v68);
  if ((_DWORD)v35)
  {
    v33 = v35;
    goto LABEL_83;
  }
  APSEventRecorderRecordEvent();
  v36 = v68;
  v37 = *(uint64_t (**)(CFTypeRef, CFTypeRef, _BOOL8, _QWORD, CFTypeRef *, CFTypeRef *, _QWORD, _QWORD, uint64_t, const char *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v37)
    v33 = v37(v36, v20, v15, v16, &v67, &v66, 0, 0, v56, v57, v58);
  else
    v33 = 4294954514;
  APSEventRecorderRecordEvent();
  *(_BYTE *)(DerivedStorage + 160) = (_DWORD)v33 != 0;
  if ((_DWORD)v33)
    goto LABEL_83;
  if (!v59 && (v16 & 1) == 0)
  {
    v38 = v67;
    v39 = v66;
    v40 = CMBaseObjectGetDerivedStorage();
    v41 = v40;
    if (v38)
    {
      CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v40 + 48));
      v43 = *(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
      if (v43)
        v43(CMBaseObject, CFSTR("PairingPeerCUAirPlayIdentifier"), v38);
    }
    LOBYTE(v16) = v64;
    if (v39)
    {
      v44 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(v41 + 48));
      v45 = *(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
      if (v45)
        v45(v44, CFSTR("PairingPeerPublicKey"), v39);
    }
  }
  if ((v16 & 1) == 0)
    ++*(_QWORD *)(DerivedStorage + 416);
  v46 = v68;
  v47 = *(uint64_t (**)(CFTypeRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v47)
  {
    v33 = 4294954514;
LABEL_83:
    APSLogErrorAt();
    v51 = 0;
    goto LABEL_84;
  }
  v48 = v47(v46, 0);
  if ((_DWORD)v48)
  {
    v33 = v48;
    goto LABEL_83;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
  v49 = *(const void **)(DerivedStorage + 376);
  v50 = v68;
  *(_QWORD *)(DerivedStorage + 376) = v68;
  if (v50)
    CFRetain(v50);
  if (v49)
    CFRelease(v49);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 256));
  v33 = 0;
  v51 = 1;
LABEL_84:
  if (a4)
    *a4 = v51;
  if (gLogCategory_APSenderSessionAirPlay <= 90
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v68)
    CFRelease(v68);
  if (v20)
    CFRelease(v20);
  if (v67)
    CFRelease(v67);
  if (v66)
    CFRelease(v66);
  return v33;
}

uint64_t apsession_getTransportsRequiringBroker()
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  void (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t TransportsRequiringBroker;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 48));
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (!v2)
    return 0;
  v2(CMBaseObject, CFSTR("TransportDevice"), *MEMORY[0x1E0C9AE00], &cf);
  if (!cf)
    return 0;
  TransportsRequiringBroker = APTransportDeviceGetTransportsRequiringBroker();
  if (cf)
    CFRelease(cf);
  return TransportsRequiringBroker;
}

uint64_t apsession_createPairingClient(uint64_t a1, char a2, int a3, char a4, char a5, const void *a6, const void *a7, _QWORD *a8)
{
  uint64_t DerivedStorage;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BOOL4 v21;
  BOOL v22;
  char v23;
  _BOOL4 v25;
  CFStringRef v26;
  CFStringRef v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t CMBaseObject;
  void (*v32)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  __CFString **v33;
  const __CFString *v34;
  CFTypeRef *p_cf;
  const void *v36;
  int v37;
  BOOL v38;
  char v39;
  int v40;
  char v42;
  const void *v43;
  const void *v44;
  char v45;
  _QWORD *v46;
  _BOOL4 v47;
  CFTypeRef v48;
  CFTypeRef cf;
  int v50;
  __int16 v51;
  int v52;
  char v53[4];
  uint64_t v54;
  __int16 v55;
  int v56;
  __int16 v57;
  char cStr[64];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v48 = 0;
  cf = 0;
  v46 = a8;
  if (!a8)
  {
    APSLogErrorAt();
    *(_DWORD *)v53 = -71821;
    goto LABEL_60;
  }
  v16 = DerivedStorage;
  v43 = a7;
  v17 = APSGetFBOPropertyInt64();
  v18 = APSGetFBOPropertyInt64();
  v19 = *(_DWORD *)(v16 + 64);
  v21 = v19 == 9 || v19 == 7;
  v42 = a3;
  if (a3)
    v22 = v19 == 8;
  else
    v22 = 0;
  v23 = v22;
  v52 = 0;
  v25 = v19 != 5 && v18 != 0;
  v47 = v25;
  v51 = 0;
  v50 = 0;
  APSGetDeviceID();
  v45 = a5;
  v44 = a6;
  HardwareAddressToCString();
  v26 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  if (!v26)
  {
    APSLogErrorAt();
    v27 = 0;
    *(_DWORD *)v53 = -71820;
    goto LABEL_67;
  }
  v55 = 0;
  v54 = 0;
  v56 = v50;
  v57 = v51;
  UUIDtoCString();
  v27 = CFStringCreateWithCString(0, v53, 0x8000100u);
  if (!v27)
  {
    APSLogErrorAt();
    v52 = -71820;
    CFRelease(v26);
    v26 = 0;
  }
  *(_DWORD *)v53 = v52;
  if (v52)
  {
LABEL_67:
    APSLogErrorAt();
    if (!v27)
      goto LABEL_58;
LABEL_57:
    CFRelease(v27);
    goto LABEL_58;
  }
  v28 = *(_QWORD *)(v16 + 48);
  v29 = a2;
  v30 = *MEMORY[0x1E0C9AE00];
  if (v17)
  {
    if (v47)
    {
      CMBaseObject = APEndpointDescriptionGetCMBaseObject(v28);
      v32 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (!v32)
        goto LABEL_34;
      v33 = kAPEndpointDescriptionProperty_PairingPeerCUSystemIdentifier;
    }
    else
    {
      CMBaseObject = APEndpointDescriptionGetCMBaseObject(v28);
      v32 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (!v32)
        goto LABEL_34;
      v33 = kAPEndpointDescriptionProperty_PairingPeerCUAirPlayIdentifier;
    }
    v34 = *v33;
    p_cf = &cf;
  }
  else
  {
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(v28);
    v32 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (!v32)
      goto LABEL_34;
    v34 = CFSTR("PairingPeerPublicKey");
    p_cf = &v48;
  }
  v32(CMBaseObject, v34, v30, p_cf);
LABEL_34:
  MEMORY[0x1CAA400CC](*(_QWORD *)(v16 + 256));
  v36 = *(const void **)(v16 + 288);
  if (v36)
  {
    if (v17)
    {
      v37 = APSGetFBOPropertyInt64();
      if (*(_DWORD *)v53)
        v38 = 0;
      else
        v38 = v37 == 32;
      v39 = v38;
      v40 = APPairingClientCoreUtilsCreate(v30, v27, *(_BYTE *)(v16 + 105), v47, v21, v29, v42, v23, a4, v45, v39, cf, v44, v43, *(const void **)(v16 + 288), v46);
    }
    else
    {
      v40 = APPairingClientLegacyCreate(v30, v26, v48, v36, v46);
    }
    *(_DWORD *)v53 = v40;
  }
  else
  {
    if (gLogCategory_APSenderSessionAirPlay <= 90
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_DWORD *)v53 = -71829;
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(v16 + 256));
  if (*(_DWORD *)v53)
    goto LABEL_67;
  if (gLogCategory_APSenderSessionAirPlay > 50
    || gLogCategory_APSenderSessionAirPlay == -1 && !_LogCategory_Initialize())
  {
    if (!v27)
      goto LABEL_58;
    goto LABEL_57;
  }
  LogPrintF();
  if (v27)
    goto LABEL_57;
LABEL_58:
  if (v26)
    CFRelease(v26);
LABEL_60:
  if (cf)
    CFRelease(cf);
  if (v48)
    CFRelease(v48);
  return *(unsigned int *)v53;
}

uint64_t apsession_isTransientPairingSupported()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  LOBYTE(result) = APSGetFBOPropertyInt64() != 0;
  if (*(_DWORD *)(DerivedStorage + 64) == 10)
    LOBYTE(result) = APSSettingsGetIntWithDefault();
  return result;
}

void apsession_copyAPPairingGroupInfo()
{
  uint64_t DerivedStorage;
  int isBrokerAssistedConnection;
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (APSIsPairingGroupEnabled())
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
    isBrokerAssistedConnection = apsession_isBrokerAssistedConnection();
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 256));
    if (isBrokerAssistedConnection)
    {
      CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 48));
      v3 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
      if (v3)
      {
        v3(CMBaseObject, CFSTR("TransportDevice"), *MEMORY[0x1E0C9AE00], &cf);
        if (cf)
        {
          APTransportDeviceCopyBrokeredReceiverInfo();
          if (cf)
            CFRelease(cf);
        }
      }
    }
  }
}

uint64_t apsession_isBrokerAssistedConnection()
{
  uint64_t result;
  int v1;

  result = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 288);
  if (result)
  {
    v1 = APSGetFBOPropertyInt64();
    return (apsession_getTransportsRequiringBroker() & v1) != 0;
  }
  return result;
}

uint64_t APPairingClientCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  CMBaseObject = APPairingClientGetCMBaseObject();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(CMBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

void apsession_requestControlSetupWithResponse(uint64_t a1)
{
  _QWORD v2[2];

  CMBaseObjectGetDerivedStorage();
  v2[0] = 0;
  v2[1] = 0;
  apsession_copyTransportControlStream(a1, v2);
}

uint64_t sub_1C94770FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  int v27;
  __CFDictionary *Mutable;
  __CFDictionary *v29;
  const void **v30;
  uint64_t appended;
  uint64_t v32;
  uint64_t v33;
  const void *v35;
  const void *v36;

  if (!v35)
  {
    v33 = 4294895475;
    APSLogErrorAt();
    return v33;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    CFRelease(v35);
    return 4294895476;
  }
  v29 = Mutable;
  v30 = (const void **)MEMORY[0x1E0C9AE50];
  if (!v27)
    v30 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(Mutable, CFSTR("updateSessionRequest"), *v30);
  appended = apsession_appendControlSetupRequest(v25, v29, v26);
  if ((_DWORD)appended)
  {
    v33 = appended;
  }
  else
  {
    if (gLogCategory_APSenderSessionAirPlay <= 10
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v32 = APTransportStreamSendPlistMessageCreatingPlistReply();
    if (!(_DWORD)v32)
    {
      if (gLogCategory_APSenderSessionAirPlay <= 10
        && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v33 = 0;
      if (v24)
      {
        *v24 = v36;
        v36 = 0;
      }
      goto LABEL_17;
    }
    v33 = v32;
  }
  APSLogErrorAt();
LABEL_17:
  CFRelease(v35);
  CFRelease(v29);
  if (v36)
    CFRelease(v36);
  return v33;
}

uint64_t apsession_appendControlSetupRequest(uint64_t a1, __CFDictionary *a2, void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  const void *v9;
  CFTypeRef v10;
  const void *v11;
  CFTypeRef v12;
  const void *v13;
  CFTypeRef v14;
  int v15;
  const void *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void **, CFTypeRef *);
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t CMBaseObject;
  uint64_t (*v25)(uint64_t, _QWORD, _QWORD, CFDataRef *);
  uint64_t v26;
  const __CFAllocator *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, _QWORD, const __CFAllocator *, CFUUIDRef *);
  CFStringRef v30;
  const void *v31;
  void *v32;
  const void *v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t (*v38)(uint64_t, BOOL, CFArrayRef *, CFTypeRef *);
  unsigned int v40;
  const void *v41;
  const __CFDictionary *v42;
  const __CFDictionary *v43;
  CFTypeRef v44;
  const void *v45;
  const void *v46;
  const void *v47;
  unsigned int v48;
  const void *v49;
  const void *v50;
  const void *v51;
  const __CFString *v52;
  const __CFString *v53;
  const void *v54;
  const void *v55;
  const void *v56;
  CFTypeRef v57;
  _BOOL4 v58;
  const void *v59;
  int v60;
  uint64_t v61;
  _BOOL4 v62;
  uint64_t v63;
  _BOOL4 v64;
  CFTypeRef v65;
  void *v66;
  void *v67;
  CFTypeRef cf2;
  CFTypeRef cf1;
  CFArrayRef theArray;
  CFTypeRef v71;
  CFTypeRef v72;
  int v73;
  __int16 v74;
  CFTypeRef cf;
  void *value;
  CFUUIDRef uuid;
  CFDataRef theData;
  unsigned int v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v79 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  uuid = 0;
  theData = 0;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v83 = 0u;
  v81 = 0u;
  v82 = 0u;
  v80 = 0u;
  cf = 0;
  value = 0;
  v74 = 0;
  v73 = 0;
  v6 = APSGetFBOPropertyInt64();
  v72 = 0;
  v7 = APSGetFBOPropertyInt64();
  theArray = 0;
  v71 = 0;
  v8 = APSSettingsGetInt64() == 0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
  v9 = *(const void **)(DerivedStorage + 280);
  if (v9)
    v10 = CFRetain(v9);
  else
    v10 = 0;
  v11 = *(const void **)(DerivedStorage + 288);
  if (v11)
    v12 = CFRetain(v11);
  else
    v12 = 0;
  v13 = *(const void **)(DerivedStorage + 488);
  v66 = a3;
  if (v13)
    v14 = CFRetain(v13);
  else
    v14 = 0;
  v15 = *(unsigned __int8 *)(DerivedStorage + 270);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 256));
  if (v10)
  {
    if (!v12)
    {
      APSLogErrorAt();
      v30 = 0;
      v16 = 0;
      v79 = APSSignalErrorAt();
      goto LABEL_74;
    }
    if (a2)
      v64 = CFDictionaryGetInt64() != 0;
    else
      v64 = 0;
    v63 = v7;
    if (*(_DWORD *)(DerivedStorage + 64) == 5)
    {
      v16 = (const void *)MGCopyAnswer();
      if (v16)
      {
        CFDictionarySetValue(a2, CFSTR("deviceID"), v16);
      }
      else
      {
        APSGetDeviceID();
        HardwareAddressToCString();
        CFDictionarySetCString();
      }
    }
    else
    {
      APSGetDeviceID();
      HardwareAddressToCString();
      CFDictionarySetCString();
      v16 = 0;
    }
    v62 = v8;
    v17 = *(_DWORD *)(DerivedStorage + 64);
    if (v17 <= 4 && v17 != 3)
    {
      APSCopyBootUUID();
      FigCFDictionarySetValue();
    }
    v18 = *(_QWORD *)(DerivedStorage + 192);
    if (v18 && !v6)
    {
      v19 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v19)
        v19(v18);
      CFDictionarySetInt64();
      v20 = *(_QWORD *)(DerivedStorage + 192);
      v21 = *(uint64_t (**)(uint64_t, void **, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (!v21)
      {
        v79 = -12782;
        goto LABEL_73;
      }
      v79 = v21(v20, &value, &cf);
      if (v79)
        goto LABEL_73;
      v22 = *(_QWORD *)(DerivedStorage + 192);
      v23 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (!v23)
      {
        v79 = -12782;
        goto LABEL_73;
      }
      v79 = v23(v22);
      if (v79)
      {
LABEL_73:
        APSLogErrorAt();
        v30 = 0;
        goto LABEL_74;
      }
      CFDictionarySetValue(a2, CFSTR("ekey"), value);
      CFDictionarySetValue(a2, CFSTR("eiv"), cf);
    }
    CMBaseObject = FigTransportStreamGetCMBaseObject();
    v25 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFDataRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
    if (v25)
    {
      v26 = CMBaseObject;
      v27 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v79 = v25(v26, *MEMORY[0x1E0CF1F60], *MEMORY[0x1E0C9AE00], &theData);
      if (!v79)
      {
        CFDataGetBytePtr(theData);
        HardwareAddressToCString();
        CFDictionarySetCString();
        LOBYTE(v80) = 0;
        GetDeviceModelString();
        CFDictionarySetCString();
        LOBYTE(v80) = 0;
        APSGetDeviceNameCString();
        CFDictionarySetCString();
        LOBYTE(v80) = 0;
        GetSystemBuildVersionString();
        CFDictionarySetCString();
        v28 = FigTransportSessionGetCMBaseObject();
        v29 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, CFUUIDRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
        if (v29)
        {
          v79 = v29(v28, *MEMORY[0x1E0CA5440], v27, &uuid);
          if (!v79)
          {
            v61 = (uint64_t)v27;
            v30 = CFUUIDCreateString(v27, uuid);
            if (!v30)
            {
              APSLogErrorAt();
              v79 = -71820;
              goto LABEL_74;
            }
            v60 = v15;
            CFDictionarySetValue(a2, CFSTR("sessionUUID"), v30);
            APSVersionUtilsGetShortVersionLength();
            CFDictionarySetCString();
            v31 = (const void *)*MEMORY[0x1E0C9AE50];
            v32 = (void *)*MEMORY[0x1E0C9AE40];
            if (*(_BYTE *)(DerivedStorage + 120))
              v33 = (const void *)*MEMORY[0x1E0C9AE50];
            else
              v33 = (const void *)*MEMORY[0x1E0C9AE40];
            CFDictionarySetValue(a2, CFSTR("statsCollectionEnabled"), v33);
            if (*(_BYTE *)(DerivedStorage + 121))
              CFDictionarySetValue(a2, CFSTR("highFreqStatsCollectionEnabled"), v31);
            if (*(_DWORD *)(DerivedStorage + 240))
              CFDictionarySetInt64();
            v34 = *(_DWORD *)(DerivedStorage + 64);
            if (v34 <= 8 && ((1 << v34) & 0x1C2) != 0)
            {
              CFDictionarySetValue(a2, CFSTR("isRemoteControlOnly"), v31);
              v34 = *(_DWORD *)(DerivedStorage + 64);
            }
            if (v34 == 9 || v34 == 4)
            {
              CFDictionarySetValue(a2, CFSTR("isScreenMirroringSession"), v31);
              v34 = *(_DWORD *)(DerivedStorage + 64);
            }
            if (v34 == 5)
            {
              v35 = APSGetFBOPropertyInt64();
              if (v79)
              {
                APSLogErrorAt();
              }
              else
              {
                if (v35 == 2)
                  CFDictionarySetValue(a2, CFSTR("keepAliveLowPower"), v31);
                if (v66)
                  CFDictionarySetValue(a2, CFSTR("features"), v66);
              }
              goto LABEL_74;
            }
            v67 = v32;
            if (IsAppleInternalBuild())
            {
              LOBYTE(v80) = 0;
              GetDeviceInternalModelString();
              CFDictionarySetCString();
              LOBYTE(v80) = 0;
              GetDeviceUniqueID();
              CFDictionarySetCString();
            }
            CFDictionarySetValue(a2, CFSTR("timingProtocol"), *(const void **)(DerivedStorage + 16));
            if (*(__CFString **)(DerivedStorage + 16) == CFSTR("PTP") && !v64)
            {
              v65 = v14;
              v36 = *(_QWORD *)(DerivedStorage + 72);
              v37 = *(_DWORD *)(DerivedStorage + 64);
              v38 = *(uint64_t (**)(uint64_t, BOOL, CFArrayRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 64);
              if (v38)
              {
                v79 = v38(v36, v37 == 3, &theArray, &v71);
                if (!v79)
                {
                  CFDictionarySetValue(a2, CFSTR("timingPeerInfo"), v71);
                  CFDictionarySetValue(a2, CFSTR("timingPeerList"), theArray);
                  v14 = v65;
                  if (gLogCategory_APSenderSessionAirPlay <= 50
                    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
                  {
                    CFArrayGetCount(theArray);
                    if (gLogCategory_APSenderSessionAirPlay == -1)
                      _LogCategory_Initialize();
                    LogPrintF();
                  }
                  goto LABEL_103;
                }
              }
              else
              {
                v79 = -12782;
              }
              APSLogErrorAt();
              v14 = v65;
              goto LABEL_74;
            }
LABEL_103:
            v40 = *(_DWORD *)(DerivedStorage + 64);
            if (v40 <= 8 && ((1 << v40) & 0x1C2) != 0 || !v63)
            {
LABEL_105:
              if (softLinkDiagnosticLogSubmissionEnabled())
              {
                CFDictionarySetValue(a2, CFSTR("diagnosticsAndUsage"), v31);
                if (IsAppleInternalBuild())
                  v41 = v31;
                else
                  v41 = v67;
                CFDictionarySetValue(a2, CFSTR("internalBuild"), v41);
              }
              v42 = (const __CFDictionary *)_CFCopySystemVersionDictionary();
              if (v42)
              {
                v43 = v42;
                v44 = v14;
                v45 = CFDictionaryGetValue(v42, (const void *)*MEMORY[0x1E0C9AB98]);
                v46 = CFDictionaryGetValue(v43, (const void *)*MEMORY[0x1E0C9ABB0]);
                if (v45)
                  CFDictionarySetValue(a2, CFSTR("osName"), v45);
                if (v46)
                  CFDictionarySetValue(a2, CFSTR("osVersion"), v46);
                CFRelease(v43);
                v14 = v44;
              }
              if (*(_DWORD *)(DerivedStorage + 64) == 10)
              {
                CelestialGetModelSpecificName();
                v47 = (const void *)CelestialCFCreatePropertyListForModelAndBundleIdentifier();
                if (v47 || (v47 = (const void *)CelestialCFCreatePropertyList()) != 0)
                {
                  CFDictionarySetValue(a2, CFSTR("sidePlaySessionBehaviors"), v47);
                  CFRelease(v47);
                }
              }
LABEL_74:
              CFRelease(v10);
              if (!v12)
                goto LABEL_76;
              goto LABEL_75;
            }
            v48 = (v40 > 0xB) | (0x7F3u >> v40);
            if (!APSIsAPMSpeaker() && !IsAppleTV())
              v62 = 0;
            if ((v48 & 1) != 0)
              v49 = v67;
            else
              v49 = v31;
            CFDictionarySetValue(a2, CFSTR("isMultiSelectAirPlay"), v49);
            if (v14)
            {
              if (v62)
                v50 = v31;
              else
                v50 = v67;
              CFDictionarySetValue(a2, CFSTR("groupContainsGroupLeader"), v50);
              CFDictionarySetValue(a2, CFSTR("groupUUID"), v14);
              if ((v48 & 1) != 0 || (v51 = v31, !*(_BYTE *)(DerivedStorage + 104)))
                v51 = v67;
              CFDictionarySetValue(a2, CFSTR("senderSupportsRelay"), v51);
            }
            if (IsAppleTV() && *(_DWORD *)(DerivedStorage + 64) == 3)
            {
              CFDictionarySetValue(a2, CFSTR("isHomeTheaterSession"), v31);
              APSHDMIVideoLatencyMs();
              CFDictionarySetInt64();
              v52 = CFSTR("isPersistentConnection");
              v53 = CFSTR("surviveAudioInterruption");
              v54 = v67;
            }
            else
            {
              v54 = v67;
              if (!APSIsAPMSpeaker() || *(_DWORD *)(DerivedStorage + 64) != 11)
              {
LABEL_145:
                v56 = *(const void **)(DerivedStorage + 88);
                if (v56)
                  CFDictionarySetValue(a2, CFSTR("hijackID"), v56);
                if (*(_DWORD *)(DerivedStorage + 80))
                  CFDictionarySetInt64();
                if (*(_BYTE *)(DerivedStorage + 107))
                {
                  CFDictionarySetValue(a2, CFSTR("applyFadeOnFirstMediaAudioSession"), v31);
                  CFDictionarySetDouble();
                }
                if (APSIsAPMSpeaker())
                {
                  cf2 = 0;
                  cf1 = 0;
                  APSCopyTightSyncInfo();
                  APEndpointDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 48), (uint64_t)CFSTR("TightSyncUUID"), v61, (uint64_t)&cf2);
                  v57 = cf1;
                  v58 = 1;
                  if (cf1 && cf2)
                  {
                    v58 = CFEqual(cf1, cf2) == 0;
                    v57 = cf1;
                  }
                  if (v57)
                    CFRelease(v57);
                  if (cf2)
                    CFRelease(cf2);
                  if (v58)
                    v59 = v67;
                  else
                    v59 = v31;
                  CFDictionarySetValue(a2, CFSTR("isTightSyncBuddyConnection"), v59);
                }
                goto LABEL_105;
              }
              v52 = CFSTR("surviveAudioInterruption");
              v53 = CFSTR("isPersistentConnection");
            }
            CFDictionarySetValue(a2, v53, v31);
            CFDictionarySetValue(a2, v52, v31);
            if (v60)
              v55 = v54;
            else
              v55 = v31;
            CFDictionarySetValue(a2, CFSTR("isNonMediaSession"), v55);
            goto LABEL_145;
          }
        }
        else
        {
          v79 = -12782;
        }
      }
    }
    else
    {
      v79 = -12782;
    }
    goto LABEL_73;
  }
  APSLogErrorAt();
  v16 = 0;
  v30 = 0;
  v79 = APSSignalErrorAt();
  if (v12)
LABEL_75:
    CFRelease(v12);
LABEL_76:
  if (value)
    CFRelease(value);
  if (cf)
    CFRelease(cf);
  if (theData)
    CFRelease(theData);
  if (uuid)
    CFRelease(uuid);
  if (v30)
    CFRelease(v30);
  if (v16)
    CFRelease(v16);
  if (v14)
    CFRelease(v14);
  if (v72)
    CFRelease(v72);
  if (v71)
    CFRelease(v71);
  if (theArray)
    CFRelease(theArray);
  return v79;
}

uint64_t initDiagnosticLogSubmissionEnabled()
{
  if (CrashReporterSupportLibrary_sOnce != -1)
    dispatch_once(&CrashReporterSupportLibrary_sOnce, &__block_literal_global_0);
  softLinkDiagnosticLogSubmissionEnabled = (uint64_t (*)())dlsym((void *)CrashReporterSupportLibrary_sLib, "DiagnosticLogSubmissionEnabled");
  return softLinkDiagnosticLogSubmissionEnabled();
}

void apsession_eventStreamMessageCallback(const void *a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  const void *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
  if (*(_QWORD *)(DerivedStorage + 304))
    v8 = (const void *)MEMORY[0x1CAA3FC88](DerivedStorage + 304);
  else
    v8 = 0;
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 256));
  if (v8)
  {
    CFRetain(a1);
    if (a3)
      CFRetain(a3);
    CFRetain(a4);
    CFRetain(v8);
    APSDispatchAsyncFHelper();
    CFRelease(v8);
  }
  else if (gLogCategory_APSenderSessionAirPlay <= 30
         && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

uint64_t apsession_eventStreamCreateReplyCallback()
{
  _QWORD *DerivedStorage;
  const void *v1;
  uint64_t v2;
  uint64_t v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](DerivedStorage[32]);
  if (DerivedStorage[38])
    v1 = (const void *)MEMORY[0x1CAA3FC88](DerivedStorage + 38);
  else
    v1 = 0;
  v2 = DerivedStorage[41];
  MEMORY[0x1CAA400E4](DerivedStorage[32]);
  if (v1)
  {
    if (v2)
      v3 = APSDispatchSyncTask();
    else
      v3 = 0;
    CFRelease(v1);
  }
  else
  {
    APSLogErrorAt();
    return 4294895467;
  }
  return v3;
}

void apsession_eventStreamMessageCallbackInternal(uint64_t a1)
{
  const void *v2;
  const void *v3;

  CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(a1 + 8) == 1684628836)
  {
    apsession_handleTransportStreamDisconnected(*(void **)(a1 + 24));
  }
  else if (*(_QWORD *)(a1 + 48))
  {
    CFRetain(*(CFTypeRef *)a1);
    v2 = *(const void **)(a1 + 16);
    if (v2)
      CFRetain(v2);
    CFRetain(*(CFTypeRef *)(a1 + 32));
    APSDispatchAsyncFHelper();
  }
  CFRelease(*(CFTypeRef *)(a1 + 24));
  CFRelease(*(CFTypeRef *)a1);
  v3 = *(const void **)(a1 + 16);
  if (v3)
    CFRelease(v3);
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void apsession_eventStreamDeferredMessageCallback(uint64_t a1)
{
  const void *v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 48))(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40));
  CFRelease(*(CFTypeRef *)a1);
  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t apsession_eventStreamCallReplyCallback(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 56))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32));
}

uint64_t apsession_getKeepAliveMode()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const void *v2;
  CFTypeRef v3;
  uint64_t v4;
  BOOL v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 64) != 5)
    return 2;
  v1 = DerivedStorage;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 256));
  v2 = *(const void **)(v1 + 336);
  if (v2)
    v3 = CFRetain(v2);
  else
    v3 = 0;
  MEMORY[0x1CAA400E4](*(_QWORD *)(v1 + 256));
  if (CFDictionaryGetCount(*(CFDictionaryRef *)(v1 + 184)))
    v5 = 1;
  else
    v5 = v3 == 0;
  if (v5)
    v4 = 2;
  else
    v4 = 4;
  if (v3)
    CFRelease(v3);
  return v4;
}

void apsession_ensureKeepAliveStarted(uint64_t a1)
{
  uint64_t v2;
  int v3;

  v3 = 0;
  CMBaseObjectGetDerivedStorage();
  v2 = 0;
  apsession_copyTransportSession(a1, &v2);
}

uint64_t sub_1C9478510()
{
  int v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t (*v3)();
  const void *v5;
  unsigned int v6;

  if (*(_BYTE *)(v1 + 176))
  {
    if (APSGetFBOPropertyInt64() == v0)
    {
      if (*(_BYTE *)(v1 + 176))
        goto LABEL_18;
    }
    else
    {
      v2 = *(uint64_t (**)())(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
      if (!v2)
      {
        v6 = -12782;
        goto LABEL_17;
      }
      v6 = v2();
      if (v6)
      {
LABEL_17:
        APSLogErrorAt();
        goto LABEL_18;
      }
      *(_BYTE *)(v1 + 176) = 0;
    }
  }
  v6 = APSSetFBOPropertyInt64();
  if (v6)
    goto LABEL_17;
  v3 = *(uint64_t (**)())(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v3)
  {
    v6 = -12782;
    goto LABEL_17;
  }
  v6 = v3();
  if (v6)
    goto LABEL_17;
  *(_BYTE *)(v1 + 176) = 1;
  if (gLogCategory_APSenderSessionAirPlay <= 50
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_18:
  if (v5)
    CFRelease(v5);
  return v6;
}

void apsession_updateReceiverInfoForRTCStats()
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  void (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 48));
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v2)
    v2(CMBaseObject, CFSTR("OSBuildVersion"), *MEMORY[0x1E0C9AE00], &cf);
  FigCFDictionarySetValue();
  if (cf)
    CFRelease(cf);
}

uint64_t apsession_updateSessionInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  unsigned int v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionAirPlay <= 30
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294954511;
  }
  else if (*(_BYTE *)(DerivedStorage + 177))
  {
    APSLogErrorAt();
    return 4294895467;
  }
  else
  {
    v3 = *(_DWORD *)(DerivedStorage + 64) - 1;
    if (v3 >= 8 || ((0xE1u >> v3) & 1) == 0)
      apsession_requestControlSetupWithResponse(a1);
    return 0;
  }
}

uint64_t apsession_setupStreamCreatingResponseInternal(uint64_t a1)
{
  _BYTE *DerivedStorage;
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef cf[16];

  cf[14] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionAirPlay <= 40
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*DerivedStorage)
    return 0;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = (v3 - 111) > 0x13 || ((1 << (v3 - 111)) & 0x80201) == 0;
  if (v4 && apsession_registryContainsStream())
    return 0;
  v5 = apsession_ensureStartedInternal(*(_QWORD *)a1);
  if ((_DWORD)v5)
  {
    v7 = v5;
  }
  else
  {
    v6 = *(_QWORD *)a1;
    CMBaseObjectGetDerivedStorage();
    cf[0] = 0;
    cf[1] = 0;
    cf[12] = 0;
    cf[13] = 0;
    APSGetFBOPropertyInt64();
    if (gLogCategory_APSenderSessionAirPlay <= 30
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!apsession_isCancelled())
      apsession_copyTransportControlStream(v6, cf);
    APSLogErrorAt();
    v7 = 4294895464;
  }
  APSLogErrorAt();
  apsession_dispatchPostFailedNotification(*(const void **)a1);
  return v7;
}

uint64_t apsession_registryContainsStream()
{
  uint64_t DerivedStorage;
  const void *v1;
  uint64_t v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = (const void *)CFStringCreateF();
  v2 = CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 184), v1);
  if (v1)
    CFRelease(v1);
  return v2;
}

uint64_t apsession_restartKeepAliveInDifferentModeIfNeeded(uint64_t a1)
{
  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 64) == 5)
  {
    apsession_getKeepAliveMode();
    apsession_ensureKeepAliveStarted(a1);
  }
  return 0;
}

uint64_t __apsession_generateUniqueStreamIDFromRegistry_block_invoke(uint64_t a1)
{
  unint64_t Int64;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;

  Int64 = CFDictionaryGetInt64();
  result = CFDictionaryGetInt64();
  if (result == *(_DWORD *)(a1 + 40))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v5 = *(_QWORD *)(v4 + 24);
    if (v5 <= Int64)
      v5 = Int64;
    *(_QWORD *)(v4 + 24) = v5 + 1;
  }
  return result;
}

uint64_t apsession_teardownStreamInternal(uint64_t *a1)
{
  _BYTE *DerivedStorage;
  uint64_t v4;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v4 = 0;
  if (gLogCategory_APSenderSessionAirPlay <= 30
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*DerivedStorage)
  {
    if (a1[2])
      CFDictionaryGetInt64();
    if (apsession_registryContainsStream())
      apsession_copyTransportControlStream(*a1, &v4);
    APSLogErrorAt();
  }
  return 0;
}

void apsession_sendTeardownWithStreamDescArray(uint64_t a1)
{
  _QWORD v2[2];

  CMBaseObjectGetDerivedStorage();
  v2[0] = 0;
  v2[1] = 0;
  apsession_copyTransportControlStream(a1, v2);
}

uint64_t sub_1C947A414(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFDictionaryRef theDict, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  const void *v23;
  __CFDictionary *Mutable;
  __CFDictionary *v25;
  uint64_t v26;
  const void *v27;
  const void *Value;
  const void *v30;
  const __CFDictionary *v31;

  if (!v30)
    return 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v25 = Mutable;
    if (v23)
    {
      CFDictionarySetValue(Mutable, CFSTR("streams"), v23);
    }
    else
    {
      MEMORY[0x1CAA400CC](*(_QWORD *)(v22 + 256));
      *(_BYTE *)(v22 + 269) = 1;
      MEMORY[0x1CAA400E4](*(_QWORD *)(v22 + 256));
    }
    if (gLogCategory_APSenderSessionAirPlay <= 10
      && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v26 = APTransportStreamSendPlistMessageCreatingPlistReply();
    if ((_DWORD)v26)
    {
      APSLogErrorAt();
    }
    else if (!v23 && v31)
    {
      MEMORY[0x1CAA400CC](*(_QWORD *)(v22 + 256));
      v27 = *(const void **)(v22 + 440);
      Value = CFDictionaryGetValue(v31, CFSTR("teardownMetricsPayload"));
      *(_QWORD *)(v22 + 440) = Value;
      if (Value)
        CFRetain(Value);
      if (v27)
        CFRelease(v27);
      MEMORY[0x1CAA400E4](*(_QWORD *)(v22 + 256));
    }
    CFRelease(v25);
    if (v31)
      CFRelease(v31);
  }
  else
  {
    APSLogErrorAt();
    v26 = 4294895476;
  }
  CFRelease(v30);
  return v26;
}

void apsession_prepareForTeardownInternal(const void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionAirPlay <= 50
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(__CFString **)(DerivedStorage + 16) == CFSTR("PTP"))
    apsession_stopSenderNetworkClockIfNeeded((uint64_t)a1);
  *(_BYTE *)(DerivedStorage + 177) = 1;
  CFRelease(a1);
}

uint64_t apsession_ensureStoppedInternal(uint64_t a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionAirPlay <= 30
    && (gLogCategory_APSenderSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294954511;
  }
  else
  {
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 184));
    if (apsession_IsConnected())
      apsession_sendTeardownWithStreamDescArray(a1);
    return 0;
  }
}

uint64_t apsession_sendAudioContentTypeUpdateInternal(uint64_t *a1)
{
  uint64_t DerivedStorage;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = 0;
  if (!*(_BYTE *)DerivedStorage && *(_DWORD *)(DerivedStorage + 64) != 5)
    apsession_copyTransportControlStream(*a1, &v4);
  return 0;
}

uint64_t APAudioSinkSharedMemRemote_ServerDied()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 24) = 0;
  return result;
}

uint64_t APAudioSinkSharedMemRemoteCreate(uint64_t a1, __int128 *a2, _QWORD *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t DerivedStorage;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t uint64;
  uint64_t v19;

  if (!a5 || !a3)
  {
    APSLogErrorAt();
    return 4294950504;
  }
  FigEndpointAudioSinkGetClassID();
  v9 = CMDerivedObjectCreate();
  if ((_DWORD)v9)
  {
    v19 = v9;
LABEL_16:
    APSLogErrorAt();
    return v19;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)DerivedStorage = 0;
  *(_QWORD *)(DerivedStorage + 8) = a4;
  *(_BYTE *)(DerivedStorage + 24) = 0;
  v11 = a3[4];
  v12 = *((_OWORD *)a3 + 1);
  *(_OWORD *)(DerivedStorage + 80) = *(_OWORD *)a3;
  *(_OWORD *)(DerivedStorage + 96) = v12;
  *(_QWORD *)(DerivedStorage + 112) = v11;
  v14 = *a2;
  v13 = a2[1];
  *(_QWORD *)(DerivedStorage + 72) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(DerivedStorage + 40) = v14;
  *(_OWORD *)(DerivedStorage + 56) = v13;
  v15 = CMBaseObjectGetDerivedStorage();
  v16 = FigXPCCreateBasicMessage();
  if ((_DWORD)v16)
  {
    v19 = v16;
LABEL_14:
    APSLogErrorAt();
    goto LABEL_16;
  }
  xpc_dictionary_set_data(0, kAPCarPlayAVVCMsgParam_XPCSinkOutputFormat[0], a3, 0x28uLL);
  v17 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v17)
  {
    v19 = v17;
    goto LABEL_14;
  }
  uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
  *(_QWORD *)(v15 + 16) = uint64;
  if (!uint64)
  {
    APSLogErrorAt();
    v19 = 4294960578;
    goto LABEL_16;
  }
  FigXPCRemoteClientAssociateObject();
  v19 = 0;
  *(_BYTE *)(v15 + 24) = 1;
  *a5 = 0;
  return v19;
}

uint64_t APAudioSinkSharedMemRemote_GetObjectID()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
}

uint64_t sharedMemSinkRemote_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  uint64_t v2;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioSinkSharedMemRemote <= 30
    && (gLogCategory_APAudioSinkSharedMemRemote != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v1 = *(const void **)(DerivedStorage + 32);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v2 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(v2 + 24)
    && (FigXPCCreateBasicMessage() || FigXPCRemoteClientSendSyncMessage()))
  {
    result = APSLogErrorAt();
  }
  else
  {
    result = FigXPCRemoteClientDisassociateObject();
    *(_QWORD *)(v2 + 16) = 0;
  }
  *(_BYTE *)(v2 + 24) = 0;
  return result;
}

CFMutableStringRef sharedMemSinkRemote_CopyDebugDescription(const void *a1)
{
  CFMutableStringRef Mutable;

  CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendF();
  CFStringAppendF();
  CFStringAppendF();
  CFGetRetainCount(a1);
  CFStringAppendF();
  return Mutable;
}

uint64_t sharedMemSinkRemote_CopyProperty()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 16))
  {
    if (*(_BYTE *)(DerivedStorage + 24))
    {
      return FigXPCSendStdCopyPropertyMessage();
    }
    else
    {
      APSLogErrorAt();
      return 4294960587;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960578;
  }
}

uint64_t sharedMemSinkRemote_SetProperty()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 16))
  {
    if (*(_BYTE *)(DerivedStorage + 24))
    {
      return FigXPCSendStdSetPropertyMessage();
    }
    else
    {
      APSLogErrorAt();
      return 4294960587;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960578;
  }
}

uint64_t sharedMemSinkRemote_GetInputFormat(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 16))
  {
    APSLogErrorAt();
    return 4294960578;
  }
  if (!*(_BYTE *)(DerivedStorage + 24))
  {
    APSLogErrorAt();
    return 4294960587;
  }
  v4 = FigXPCCreateBasicMessage();
  if ((_DWORD)v4)
  {
    v6 = v4;
    goto LABEL_11;
  }
  v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v5)
  {
    v6 = v5;
    goto LABEL_11;
  }
  v6 = APCarPlayXPCUtils_UnpackASBD(0, kAPCarPlayAVVCMsgParam_XPCSinkInputFormat[0], 1, a2);
  if ((_DWORD)v6)
LABEL_11:
    APSLogErrorAt();
  return v6;
}

uint64_t sharedMemSinkRemote_SetInputFormat(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 16))
  {
    APSLogErrorAt();
    return 4294960578;
  }
  if (!*(_BYTE *)(DerivedStorage + 24))
  {
    APSLogErrorAt();
    return 4294960587;
  }
  v4 = FigXPCCreateBasicMessage();
  if ((_DWORD)v4)
  {
    v5 = v4;
    goto LABEL_9;
  }
  xpc_dictionary_set_data(0, kAPCarPlayAVVCMsgParam_XPCSinkInputFormat[0], a2, 0x28uLL);
  v5 = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)v5)
LABEL_9:
    APSLogErrorAt();
  return v5;
}

uint64_t sharedMemSinkRemote_Resume()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 16))
  {
    APSLogErrorAt();
    return 4294960578;
  }
  v1 = DerivedStorage;
  if (!*(_BYTE *)(DerivedStorage + 24))
  {
    APSLogErrorAt();
    return 4294960587;
  }
  if (gLogCategory_APAudioSinkSharedMemRemote <= 30
    && (gLogCategory_APAudioSinkSharedMemRemote != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = FigXPCCreateBasicMessage();
  if ((_DWORD)v2)
  {
    value = v2;
    goto LABEL_20;
  }
  v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v3)
  {
    value = v3;
    goto LABEL_20;
  }
  value = (uint64_t)xpc_dictionary_get_value(0, kAPCarPlayAVVCMsgParam_SharedMemoryBuffer[0]);
  if (!value)
    goto LABEL_20;
  if (!xpc_dictionary_get_value(0, kAPCarPlayAVVCMsgParam_SharedMemoryState))
  {
    APSLogErrorAt();
    return 0;
  }
  value = APSSharedRingBuffer_CreateWithBufferAndState();
  if ((_DWORD)value)
  {
LABEL_20:
    APSLogErrorAt();
    return value;
  }
  *(_BYTE *)(v1 + 120) = 1;
  *(_DWORD *)(v1 + 124) = 4;
  *(_BYTE *)v1 = 1;
  return value;
}

uint64_t sharedMemSinkRemote_Suspend()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 16))
  {
    APSLogErrorAt();
    return 4294960578;
  }
  v1 = DerivedStorage;
  if (!*(_BYTE *)(DerivedStorage + 24))
    return 0;
  *(_BYTE *)DerivedStorage = 0;
  v2 = FigXPCCreateBasicMessage();
  if ((_DWORD)v2)
  {
    v5 = v2;
LABEL_12:
    APSLogErrorAt();
    return v5;
  }
  v3 = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)v3)
  {
    v5 = v3;
    goto LABEL_12;
  }
  v4 = *(const void **)(v1 + 32);
  if (!v4)
    return 0;
  CFRelease(v4);
  v5 = 0;
  *(_QWORD *)(v1 + 32) = 0;
  return v5;
}

uint64_t sharedMemSinkRemote_ReadPackets(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int *a8)
{
  uint64_t DerivedStorage;
  uint64_t v15;
  uint64_t DataFromSharedRing;
  uint64_t v17;
  uint64_t v18;
  uint64_t DataWithEndiannessConversion;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 16))
  {
    APSLogErrorAt();
    return 4294960578;
  }
  v15 = DerivedStorage;
  if (!*(_BYTE *)(DerivedStorage + 24) || !*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294960587;
  }
  if (!a7 || !a8)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  if (*(_BYTE *)(DerivedStorage + 120))
  {
    DataFromSharedRing = sharedMemSinkRemote_readDataFromSharedRing(a1, DerivedStorage + 124, 4);
    if ((_DWORD)DataFromSharedRing)
      return DataFromSharedRing;
    *(_BYTE *)(v15 + 120) = 0;
  }
  if (*(unsigned int *)(v15 + 124) > a4)
  {
    APSLogErrorAt();
    return 4294960533;
  }
  if (*(_DWORD *)(v15 + 88) == 1819304813)
  {
    v17 = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(v17 + 16))
    {
      v18 = v17;
      if (*(_BYTE *)(v17 + 24))
      {
        if (APSSharedRingBuffer_IsDataAvailable())
        {
          if (((*(_DWORD *)(v18 + 92) ^ *(_DWORD *)(v18 + 52)) & 2) != 0)
            DataWithEndiannessConversion = APSSharedRingBuffer_ReadDataWithEndiannessConversion();
          else
            DataWithEndiannessConversion = APSSharedRingBuffer_ReadData();
          v23 = DataWithEndiannessConversion;
          if (!(_DWORD)DataWithEndiannessConversion)
          {
            v22 = *(_DWORD *)(v15 + 124) / *(_DWORD *)(v15 + 104);
            goto LABEL_21;
          }
          APSLogErrorAt();
        }
        else
        {
          APSLogErrorAt();
          v23 = 4294960531;
        }
      }
      else
      {
        APSLogErrorAt();
        v23 = 4294960587;
      }
    }
    else
    {
      APSLogErrorAt();
      v23 = 4294960578;
    }
LABEL_33:
    APSLogErrorAt();
    return v23;
  }
  v20 = sharedMemSinkRemote_readDataFromSharedRing(a1, a3, *(unsigned int *)(v15 + 124));
  if ((_DWORD)v20)
  {
    v23 = v20;
    goto LABEL_33;
  }
  v21 = *(_DWORD *)(v15 + 124);
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  *(_DWORD *)(a5 + 12) = v21;
  v22 = 1;
LABEL_21:
  v23 = 0;
  *a8 = v22;
  *a7 = *(unsigned int *)(v15 + 124);
  *(_BYTE *)(v15 + 120) = 1;
  *(_DWORD *)(v15 + 124) = 0;
  return v23;
}

uint64_t sharedMemSinkRemote_readDataFromSharedRing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t Data;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 16))
  {
    if (*(_BYTE *)(DerivedStorage + 24))
    {
      if (APSSharedRingBuffer_IsDataAvailable())
      {
        Data = APSSharedRingBuffer_ReadData();
        if ((_DWORD)Data)
        {
          v6 = Data;
          APSLogErrorAt();
        }
        else if (a3 == a3)
        {
          return 0;
        }
        else
        {
          APSLogErrorAt();
          return 4294960550;
        }
      }
      else
      {
        return 4294960531;
      }
    }
    else
    {
      APSLogErrorAt();
      return 4294960587;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960578;
  }
  return v6;
}

uint64_t APGetEndpointManagerCarPlay(_QWORD *a1)
{
  if (!MGGetBoolAnswer())
  {
    APGetEndpointManagerCarPlay_sCreationResult = APSSignalErrorAt();
    return APGetEndpointManagerCarPlay_sCreationResult;
  }
  if (APGetEndpointManagerCarPlay_sCreateOnce != -1)
  {
    dispatch_once(&APGetEndpointManagerCarPlay_sCreateOnce, &__block_literal_global_1);
    if (!a1)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (a1)
LABEL_4:
    *a1 = APGetEndpointManagerCarPlay_sEndpointManager;
LABEL_5:
  if (gLogCategory_APEndpointManagerCarPlayFactory <= 50
    && (gLogCategory_APEndpointManagerCarPlayFactory != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return APGetEndpointManagerCarPlay_sCreationResult;
}

uint64_t APEndpointManagerCreate(_QWORD *a1)
{
  CFTypeRef v2;

  if (APEndpointManagerGetShared_once != -1)
    dispatch_once(&APEndpointManagerGetShared_once, &__block_literal_global_2);
  v2 = (CFTypeRef)APEndpointManagerGetShared_sAPEndpointManager;
  if (APEndpointManagerGetShared_sAPEndpointManager)
    v2 = CFRetain((CFTypeRef)APEndpointManagerGetShared_sAPEndpointManager);
  *a1 = v2;
  return gCreationErr;
}

uint64_t APEndpointManagerGetShared()
{
  if (APEndpointManagerGetShared_once != -1)
    dispatch_once(&APEndpointManagerGetShared_once, &__block_literal_global_2);
  return APEndpointManagerGetShared_sAPEndpointManager;
}

uint64_t APEndpointManagerCreateEx(uint64_t a1, _QWORD *a2)
{
  return manager_create(a2);
}

uint64_t manager_create(_QWORD *a1)
{
  __int128 v2;
  __int128 v3;
  const __CFAllocator *v4;
  uint64_t v5;
  uint64_t DerivedStorage;
  dispatch_queue_t v7;
  uint64_t v8;
  CFMutableDictionaryRef v9;
  CFMutableDictionaryRef v10;
  CFMutableSetRef v11;
  CFMutableArrayRef Mutable;
  CFMutableSetRef v13;
  int v14;
  uint64_t v15;
  CFMutableDictionaryRef v16;
  CFMutableDictionaryRef v17;
  uint64_t v18;
  char *v19;
  CFMutableStringRef v20;
  const __CFURL *v21;
  const __CFURL *v22;
  CFPlugInRef v23;
  __CFBundle *v24;
  const __CFUUID *v25;
  const __CFArray *FactoriesForPlugInTypeInPlugIn;
  const __CFArray *v27;
  const __CFUUID *ValueAtIndex;
  const __CFUUID *v29;
  __CFString *v30;
  const __CFUUID *v31;
  void *v32;
  void *v33;
  unsigned int (*v34)(void *, _QWORD, _QWORD, uint64_t *);
  const __CFUUID *v35;
  CFUUIDBytes v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t Int64;
  char IntWithDefault;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const void *v44;
  uint64_t v45;
  NSObject *v46;
  CFMutableDictionaryRef v47;
  __CFDictionary *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  CFMutableSetRef v52;
  NSObject *v53;
  char *v54;
  NSObject *v55;
  dispatch_time_t v56;
  uint64_t v57;
  int v58;
  const void *v59;
  const void *v60;
  int v61;
  const void *v62;
  int v63;
  BOOL v64;
  const void *v66;
  uint64_t v67;
  const void *v68;
  int v69;
  int v70;
  const void *v71;
  _BOOL4 v72;
  int IsFeatureEnabled;
  int v75;
  const void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  uint64_t v87;
  void *v88;
  void (*v89)(void *);
  NSObject *v91;
  const void *v92;
  _QWORD *v93;
  _QWORD v94[6];
  _QWORD block[5];
  CFSetCallBacks callBacks;
  CFDictionaryKeyCallBacks keyCallBacks;
  void *v98;
  uint64_t handler;
  uint64_t v100;
  void *v101;
  void *v102;
  uint64_t v103;
  const void *v104;

  v98 = 0;
  v2 = *(_OWORD *)(MEMORY[0x1E0C9B390] + 16);
  *(_OWORD *)&keyCallBacks.version = *MEMORY[0x1E0C9B390];
  *(_OWORD *)&keyCallBacks.release = v2;
  v3 = *(_OWORD *)(MEMORY[0x1E0C9B3B0] + 16);
  *(_OWORD *)&callBacks.version = *MEMORY[0x1E0C9B3B0];
  *(_OWORD *)&callBacks.release = v3;
  keyCallBacks.equal = (CFDictionaryEqualCallBack)manager_transportDeviceEqual;
  keyCallBacks.hash = (CFDictionaryHashCallBack)manager_transportDeviceHash;
  callBacks.equal = (CFSetEqualCallBack)manager_transportDeviceEqual;
  callBacks.hash = (CFSetHashCallBack)manager_transportDeviceHash;
  LogSetAppID();
  if (!a1)
  {
    APSLogErrorAt();
    v42 = 4294950586;
    goto LABEL_146;
  }
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigEndpointManagerGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
    v42 = v5;
    goto LABEL_172;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = dispatch_queue_create("com.apple.airplay.apendpointManager.notification", 0);
  *(_QWORD *)(DerivedStorage + 8) = v7;
  if (!v7)
    goto LABEL_153;
  v8 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 64) = v8;
  if (!v8)
    goto LABEL_153;
  *(_QWORD *)(DerivedStorage + 88) = CFRetain((CFTypeRef)*MEMORY[0x1E0CA39F0]);
  v9 = CFDictionaryCreateMutable(v4, 0, &keyCallBacks, MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 168) = v9;
  if (!v9)
    goto LABEL_153;
  v10 = CFDictionaryCreateMutable(v4, 0, &keyCallBacks, MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 176) = v10;
  if (!v10)
    goto LABEL_153;
  v11 = CFSetCreateMutable(v4, 0, &callBacks);
  *(_QWORD *)(DerivedStorage + 184) = v11;
  if (!v11)
    goto LABEL_153;
  Mutable = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 192) = Mutable;
  if (!Mutable)
    goto LABEL_153;
  v13 = CFSetCreateMutable(v4, 0, MEMORY[0x1E0C9B3B0]);
  *(_QWORD *)(DerivedStorage + 208) = v13;
  if (!v13)
    goto LABEL_153;
  *(_BYTE *)DerivedStorage = 1;
  *(_BYTE *)(DerivedStorage + 2) = APSIsEndpointClusteringEnabled();
  if (gLogCategory_APEndpointManager <= 50
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_BYTE *)(DerivedStorage + 3) = APSMultiPrimariesEnabled();
  if (gLogCategory_APEndpointManager <= 50)
  {
    if (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize())
      LogPrintF();
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      APSIsProximitySenderEnabled();
      LogPrintF();
    }
  }
  if (APSSettingsIsFeatureEnabled())
  {
    APBrokerManagerCreate();
    if (!*(_QWORD *)(DerivedStorage + 288))
    {
      APSLogErrorAt();
      v42 = 4294960568;
      goto LABEL_146;
    }
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  *(_BYTE *)(DerivedStorage + 352) = 0;
  *(_BYTE *)(DerivedStorage + 352) = APSSettingsIsFeatureEnabled();
  if (IsAppleTV())
  {
    v14 = 4;
  }
  else
  {
    if (!APSIsAPMSpeaker())
    {
      v14 = 0;
      *(_DWORD *)(DerivedStorage + 348) = 0;
      goto LABEL_33;
    }
    v14 = 7;
  }
  *(_DWORD *)(DerivedStorage + 348) = v14;
LABEL_33:
  *(_DWORD *)(DerivedStorage + 4) = 0;
  if (*(_BYTE *)(DerivedStorage + 2) && (v14 == 7 || v14 == 4))
  {
    *(_DWORD *)(DerivedStorage + 4) = 2;
    v15 = APEndpointLocalCreateWithEndpointDescription((uint64_t)v4, 0, 0, (_QWORD *)(DerivedStorage + 256));
    if ((_DWORD)v15)
    {
      v42 = v15;
      goto LABEL_172;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    manager_updateEndpointPSGInfoIfNeeded();
    *(_BYTE *)(DerivedStorage + 161) = APSGetFBOPropertyInt64() == 0;
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
    manager_updateExposedLocalEndpoint((uint64_t)v98, *(const void **)(DerivedStorage + 256));
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 64));
  }
  v16 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 216) = v16;
  if (!v16)
    goto LABEL_153;
  v17 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 224) = v17;
  if (!v17)
    goto LABEL_153;
  v93 = a1;
  v18 = MEMORY[0x1E0C809B0];
  v19 = "session_handleRemoteControlSessionEventInternal" + 13;
  if (*(_DWORD *)(DerivedStorage + 348) == 7
    || !APSIsRemoteHALPluginLoadingEnabled()
    || !APSIsInAirPlaySenderSystemServer()
    || APSIsInAudioSystemServer())
  {
    goto LABEL_65;
  }
  v20 = CFStringCreateMutable(v4, 0);
  handler = 0;
  CFStringAppendFormat(v20, 0, CFSTR("/System/Library/Audio/Plug-Ins/HAL/%@"), CFSTR("AirPlayHalogen.driver"));
  v21 = CFURLCreateWithFileSystemPath(0, v20, kCFURLPOSIXPathStyle, 1u);
  if (v21)
  {
    v22 = v21;
    v23 = CFPlugInCreate(0, v21);
    if (v23)
    {
      v24 = v23;
      v25 = CFUUIDGetConstantUUIDWithBytes(0, 0x44u, 0x3Au, 0xBAu, 0xB8u, 0xE7u, 0xB3u, 0x49u, 0x1Au, 0xB9u, 0x85u, 0xBEu, 0xB9u, 0x18u, 0x70u, 0x30u, 0xDBu);
      FactoriesForPlugInTypeInPlugIn = CFPlugInFindFactoriesForPlugInTypeInPlugIn(v25, v24);
      if (FactoriesForPlugInTypeInPlugIn)
      {
        v27 = FactoriesForPlugInTypeInPlugIn;
        if (CFArrayGetCount(FactoriesForPlugInTypeInPlugIn) <= 0)
        {
          if (gLogCategory_APEndpointManager <= 90
            && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        else
        {
          ValueAtIndex = (const __CFUUID *)CFArrayGetValueAtIndex(v27, 0);
          if (ValueAtIndex
            && (v29 = ValueAtIndex,
                v30 = v20,
                v31 = CFUUIDGetConstantUUIDWithBytes(0, 0x44u, 0x3Au, 0xBAu, 0xB8u, 0xE7u, 0xB3u, 0x49u, 0x1Au, 0xB9u, 0x85u, 0xBEu, 0xB9u, 0x18u, 0x70u, 0x30u, 0xDBu), (v32 = CFPlugInInstanceCreate(0, v29, v31)) != 0))
          {
            v33 = v32;
            v34 = *(unsigned int (**)(void *, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)v32 + 8);
            v35 = CFUUIDGetConstantUUIDWithBytes(0, 0xEEu, 0xA5u, 0x77u, 0x3Du, 0xCCu, 0x43u, 0x49u, 0xF1u, 0x8Eu, 0, 0x8Fu, 0x96u, 0xE7u, 0xD2u, 0x3Bu, 0x17u);
            v36 = CFUUIDGetUUIDBytes(v35);
            if (v34(v33, *(_QWORD *)&v36.byte0, *(_QWORD *)&v36.byte8, &handler))
            {
              APSLogErrorAt();
              v20 = v30;
            }
            else
            {
              v20 = v30;
              if (!handler)
                APSLogErrorAt();
            }
            (*(void (**)(void *))(*(_QWORD *)v33 + 24))(v33);
          }
          else
          {
            APSLogErrorAt();
          }
        }
        CFRelease(v22);
        v18 = MEMORY[0x1E0C809B0];
      }
      else
      {
        APSLogErrorAt();
        v27 = v22;
      }
      CFRelease(v27);
      CFRelease(v24);
      v19 = "eRemoteControlSessionEventInternal";
    }
    else
    {
      APSLogErrorAt();
      CFRelease(v22);
    }
  }
  else
  {
    APSLogErrorAt();
  }
  if (v20)
    CFRelease(v20);
  v37 = handler;
  *(_QWORD *)(DerivedStorage + 304) = handler;
  if (v37)
  {
    v38 = *(NSObject **)(DerivedStorage + 8);
    block[0] = v18;
    block[1] = *((_QWORD *)v19 + 224);
    block[2] = __manager_create_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = v98;
    dispatch_sync(v38, block);
LABEL_65:
    Int64 = APSSettingsGetInt64();
    IntWithDefault = APSSettingsGetIntWithDefault();
    if (Int64)
    {
      v41 = APSNetworkClockNTPServerCreate();
      if ((_DWORD)v41)
      {
        v42 = v41;
LABEL_172:
        APSLogErrorAt();
        goto LABEL_146;
      }
    }
    else
    {
      v43 = APSNetworkClockPTPCreate();
      if ((_DWORD)v43)
      {
        v42 = v43;
        goto LABEL_172;
      }
    }
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (IntWithDefault)
    {
      v44 = v98;
      v45 = CMBaseObjectGetDerivedStorage();
      v46 = dispatch_queue_create("com.apple.airplay.apendpointManager.clockstart", 0);
      if (gLogCategory_APEndpointManager <= 30
        && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFRetain(v44);
      handler = v18;
      v100 = *((_QWORD *)v19 + 224);
      v101 = __manager_asyncStartNetworkClock_block_invoke;
      v102 = &__block_descriptor_48_e5_v8__0l;
      v103 = v45;
      v104 = v44;
      dispatch_async(v46, &handler);
      if (gLogCategory_APEndpointManager <= 30
        && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v46)
        dispatch_release(v46);
    }
    v47 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v47)
    {
      v48 = v47;
      APSEventRecorderCreate();
      v49 = *(const void **)(DerivedStorage + 296);
      if (v49)
        CFDictionarySetValue(v48, CFSTR("eventRecorder"), v49);
      v50 = (uint64_t)v98;
      v51 = CMBaseObjectGetDerivedStorage();
      v52 = CFSetCreateMutable(v4, 0, MEMORY[0x1E0C9B3B0]);
      *(_QWORD *)(v51 + 248) = v52;
      if (v52
        && (v53 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v51 + 8)),
            (*(_QWORD *)(v51 + 312) = v53) != 0))
      {
        handler = v18;
        v54 = v19;
        v100 = *((_QWORD *)v19 + 224);
        v101 = __manager_initAndStartDeviceMetricsTimer_block_invoke;
        v102 = &__block_descriptor_40_e5_v8__0l;
        v103 = v50;
        dispatch_source_set_event_handler(v53, &handler);
        v55 = *(NSObject **)(v51 + 312);
        v56 = dispatch_time(0, 10800000000000);
        dispatch_source_set_timer(v55, v56, 0x4E94914F0000uLL, 0x3B9ACA00uLL);
        dispatch_resume(*(dispatch_object_t *)(v51 + 312));
      }
      else
      {
        APSLogErrorAt();
        v91 = *(NSObject **)(v51 + 312);
        if (v91)
        {
          dispatch_source_cancel(*(dispatch_source_t *)(v51 + 312));
          dispatch_release(v91);
          *(_QWORD *)(v51 + 312) = 0;
        }
        v54 = v19;
        v92 = *(const void **)(v51 + 248);
        if (v92)
        {
          CFRelease(v92);
          *(_QWORD *)(v51 + 248) = 0;
        }
      }
      v57 = v18;
      v58 = *(_DWORD *)(DerivedStorage + 348);
      if (v58 == 13 || v58 == 7)
      {
        v59 = (const void *)*MEMORY[0x1E0C9AE50];
        v60 = (const void *)*MEMORY[0x1E0C9AE40];
      }
      else
      {
        v61 = APSIsDemoModeEnabled();
        v59 = (const void *)*MEMORY[0x1E0C9AE50];
        v60 = (const void *)*MEMORY[0x1E0C9AE40];
        v62 = (const void *)*MEMORY[0x1E0C9AE50];
        if (!v61)
          goto LABEL_95;
      }
      v62 = v60;
LABEL_95:
      CFDictionarySetValue(v48, CFSTR("fullAWDLAllowed"), v62);
      v63 = *(_DWORD *)(DerivedStorage + 348);
      if (APSIsDemoModeEnabled())
        v64 = 1;
      else
        v64 = v63 == 13;
      if (v64 || v63 == 7)
        v66 = v60;
      else
        v66 = v59;
      CFDictionarySetValue(v48, CFSTR("partialAWDLAllowed"), v66);
      if (!APSHasNANSupport() || (v67 = APSSettingsGetInt64(), v68 = v59, !v67))
        v68 = v60;
      CFDictionarySetValue(v48, CFSTR("openFullNANAllowed"), v68);
      v69 = *(_DWORD *)(DerivedStorage + 348);
      v70 = APSHasNANSupport();
      v71 = v60;
      if (v70)
      {
        if (v69 == 4)
        {
          v72 = 1;
        }
        else
        {
          IsFeatureEnabled = APSSettingsIsFeatureEnabled();
          v72 = v69 == 7 && IsFeatureEnabled != 0;
        }
        if (IsAppleInternalBuild())
        {
          v75 = APSSettingsGetIntWithDefault();
          v71 = v60;
          if (!v75)
            goto LABEL_119;
          goto LABEL_118;
        }
        v71 = v60;
        if (v72)
LABEL_118:
          v71 = v59;
      }
LABEL_119:
      CFDictionarySetValue(v48, CFSTR("securePartialNANAllowed"), v71);
      FigCFDictionarySetValue();
      if (APSCanSendToAltReceiver())
        v76 = v59;
      else
        v76 = v60;
      CFDictionarySetValue(v48, CFSTR("browseForAltReceiver"), v76);
      v77 = APBrowserControllerCreate((uint64_t)v4, (uint64_t)v48, (_QWORD *)(DerivedStorage + 272));
      if ((_DWORD)v77)
      {
        v42 = v77;
      }
      else
      {
        v78 = APBrowserControllerSetEventHandlers(*(_QWORD *)(DerivedStorage + 272), (uint64_t)manager_handleDevicePresenceChanged, (uint64_t)manager_handleBrowserAddOrUpdateEvent, (uint64_t)manager_handleBrowserRemoveEvent, (uint64_t)manager_handleDiscoveryModeChanged, 0, (uint64_t)v98);
        if ((_DWORD)v78)
        {
          v42 = v78;
        }
        else
        {
          v79 = AirPlayDebugIPCEnableForEndpointManager(v98);
          if ((_DWORD)v79)
          {
            v42 = v79;
          }
          else
          {
            *(_QWORD *)(DerivedStorage + 16) = -1;
            *(_QWORD *)(DerivedStorage + 24) = -1;
            manager_registerForNotifications((uint64_t)v98);
            manager_handlePreferencesChanged(v98, 1);
            v80 = APSXPCServerAddCommandHandler();
            if ((_DWORD)v80)
            {
              v42 = v80;
            }
            else
            {
              v81 = APSXPCServerAddCommandHandler();
              if ((_DWORD)v81)
              {
                v42 = v81;
              }
              else
              {
                CMNotificationCenterGetDefaultLocalCenter();
                FigNotificationCenterAddWeakListener();
                v82 = APSXPCServerAddCommandHandler();
                if ((_DWORD)v82)
                {
                  v42 = v82;
                }
                else
                {
                  CMNotificationCenterGetDefaultLocalCenter();
                  FigNotificationCenterAddWeakListener();
                  v83 = APSXPCServerAddCommandHandler();
                  if ((_DWORD)v83)
                  {
                    v42 = v83;
                  }
                  else
                  {
                    v84 = APSXPCServerAddCommandHandler();
                    if ((_DWORD)v84)
                    {
                      v42 = v84;
                    }
                    else
                    {
                      v85 = APSXPCServerAddCommandHandler();
                      if ((_DWORD)v85)
                      {
                        v42 = v85;
                      }
                      else
                      {
                        if (introspector_getCollectionOfEndpointManagers_once != -1)
                          dispatch_once(&introspector_getCollectionOfEndpointManagers_once, &__block_literal_global_386);
                        if (introspector_getCollectionOfEndpointManagers_coll)
                        {
                          v86 = *(NSObject **)introspector_getCollectionOfEndpointManagers_coll;
                          v94[0] = v57;
                          v94[1] = *((_QWORD *)v54 + 224);
                          v94[2] = __manager_create_block_invoke_2;
                          v94[3] = &__block_descriptor_48_e5_v8__0l;
                          v94[4] = introspector_getCollectionOfEndpointManagers_coll;
                          v94[5] = v98;
                          dispatch_sync(v86, v94);
                        }
                        APSIntrospectorAddCommand();
                        APSIntrospectorAddCommand();
                        APSIntrospectorAddCommand();
                        APSIntrospectorAddCommand();
                        APSIntrospectorAddCommand();
                        APSIntrospectorAddCommand();
                        APSIntrospectorAddCommand();
                        v87 = APSXPCServerAddCommandHandler();
                        if (!(_DWORD)v87)
                        {
                          if (*(_QWORD *)(DerivedStorage + 280))
                          {
                            CMNotificationCenterGetDefaultLocalCenter();
                            FigNotificationCenterAddWeakListener();
                          }
                          if (gLogCategory_APEndpointManager <= 50
                            && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
                          {
                            LogPrintF();
                          }
                          v42 = 0;
                          *v93 = v98;
                          v98 = 0;
                          goto LABEL_145;
                        }
                        v42 = v87;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      APSLogErrorAt();
LABEL_145:
      CFRelease(v48);
      goto LABEL_146;
    }
LABEL_153:
    APSLogErrorAt();
    v42 = 4294950585;
    goto LABEL_146;
  }
  APSLogErrorAt();
  v42 = 4294895506;
LABEL_146:
  v88 = v98;
  if (v98)
  {
    v89 = *(void (**)(void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v89)
      v89(v88);
    CFRelease(v98);
  }
  return v42;
}

CFHashCode manager_transportDeviceHash()
{
  const void *DiscoveryID;

  DiscoveryID = (const void *)APTransportDeviceGetDiscoveryID();
  return CFHash(DiscoveryID);
}

uint64_t manager_handleEndpointDescriptionChanged(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  int v8;
  uint64_t Int64;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t CMBaseObject;
  void (*v14)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  const void *v15;
  CFTypeRef v16;
  _BOOL4 v17;
  CFTypeRef cf;
  CFTypeRef v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  v8 = FigCFEqual();
  if (!a5 || !v8)
    goto LABEL_37;
  Int64 = CFDictionaryGetInt64();
  v10 = CFDictionaryGetInt64();
  v11 = CFDictionaryGetInt64();
  if (*(_BYTE *)(DerivedStorage + 160) || !Int64)
  {
    if (!(Int64 | v10))
      goto LABEL_32;
  }
  else
  {
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_BYTE *)(DerivedStorage + 160) = 1;
    CFRetain(a2);
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a2, (dispatch_function_t)manager_notifyAvailableEndpointsChanged);
  }
  cf = 0;
  v20 = 0;
  manager_copyOrCreateClusterForEndpoint(a2, *(_QWORD *)(DerivedStorage + 256), &v20);
  v12 = manager_determineLocalClusterAction((uint64_t)a2, (uint64_t)v20);
  if (v12 == 2)
  {
    manager_deactivateLocalCluster((uint64_t)a2, (uint64_t)v20);
  }
  else if (v12 == 1)
  {
    manager_activateLocalCluster(a2, (uint64_t)v20);
  }
  CMBaseObject = FigEndpointGetCMBaseObject();
  v14 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v14)
    v14(CMBaseObject, *MEMORY[0x1E0CA4380], *MEMORY[0x1E0C9AE00], &cf);
  if (!FigCFEqual())
  {
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v15 = *(const void **)(DerivedStorage + 128);
    v16 = cf;
    *(_QWORD *)(DerivedStorage + 128) = cf;
    if (v16)
      CFRetain(v16);
    if (v15)
      CFRelease(v15);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  if (cf)
    CFRelease(cf);
  if (v20)
    CFRelease(v20);
LABEL_32:
  if (!*(_BYTE *)(DerivedStorage + 161) || !v11)
  {
LABEL_37:
    v17 = APSGetFBOPropertyInt64() != 0;
    goto LABEL_40;
  }
  *(_BYTE *)(DerivedStorage + 161) = 0;
  if (gLogCategory_APEndpointManager <= 50
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  manager_updateEndpointPSGInfoIfNeeded();
  v17 = 1;
LABEL_40:
  manager_notifyAvailableEndpointsChangedWithThrottleIfNeeded(a2, v17);
  return MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 64));
}

void manager_updateEndpointPSGInfoIfNeeded()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  _QWORD *v2;
  const __CFAllocator **v3;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, _QWORD, const __CFAllocator *, CFDictionaryRef *);
  uint64_t v6;
  const __CFAllocator *v7;
  int v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  int v11;
  CFTypeRef v12;
  uint64_t Value;
  const __CFDictionary *v14;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v16;
  CFMutableDictionaryRef v17;
  CFMutableDictionaryRef v18;
  uint64_t v19;
  void (*v20)(uint64_t, const __CFString *, CFMutableDictionaryRef);
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, CFMutableDictionaryRef);
  uint64_t v23;
  void (*v24)(uint64_t, _QWORD, CFMutableDictionaryRef);
  uint64_t v25;
  void (*v26)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v27;
  CFTypeRef cf;
  CFDictionaryRef theDict;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v27 = 0;
  v1 = APSGetFBOPropertyInt64();
  if (!*(_QWORD *)(DerivedStorage + 280))
    return;
  v2 = (_QWORD *)MEMORY[0x1E0CF7558];
  v3 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (v1)
  {
    cf = 0;
    theDict = 0;
    if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 280))
    {
LABEL_34:
      if (theDict)
        CFRelease(theDict);
      goto LABEL_36;
    }
    CMBaseObject = APSPSGDataSourceGetCMBaseObject();
    v5 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
    if (v5)
    {
      v6 = *v2;
      v7 = *v3;
      v8 = v5(CMBaseObject, *v2, *v3, &theDict);
      if (theDict)
      {
        if (!v8)
        {
          v9 = FigEndpointGetCMBaseObject();
          v10 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
          if (v10)
          {
            v11 = v10(v9, *MEMORY[0x1E0CA4258], v7, &cf);
            v12 = cf;
            if (!cf || v11)
            {
LABEL_32:
              if (v12)
                CFRelease(v12);
              goto LABEL_34;
            }
            Value = FigCFDictionaryGetValue();
            if (Value)
            {
              v14 = (const __CFDictionary *)Value;
              if (CFDictionaryGetInt64())
              {
                if (gLogCategory_APEndpointManager <= 30
                  && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
                {
                  LogPrintF();
                }
              }
              else
              {
                MutableCopy = CFDictionaryCreateMutableCopy(v7, 0, theDict);
                if (MutableCopy)
                {
                  v16 = MutableCopy;
                  v17 = CFDictionaryCreateMutableCopy(v7, 0, v14);
                  if (v17)
                  {
                    v18 = v17;
                    FigCFDictionarySetValue();
                    FigCFDictionarySetValue();
                    v19 = FigEndpointGetCMBaseObject();
                    v20 = *(void (**)(uint64_t, const __CFString *, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
                    if (v20)
                      v20(v19, CFSTR("PermanentSpeakerGroupingInfo"), v18);
                    v21 = APSPSGDataSourceGetCMBaseObject();
                    v22 = *(void (**)(uint64_t, uint64_t, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 56);
                    if (v22)
                      v22(v21, v6, v16);
                    v23 = APSPSGDataSourceGetCMBaseObject();
                    v24 = *(void (**)(uint64_t, _QWORD, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 56);
                    if (v24)
                      v24(v23, *MEMORY[0x1E0CF7560], v18);
                    if (gLogCategory_APEndpointManager <= 30
                      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
                    {
                      LogPrintF();
                    }
                    CFRelease(v18);
                  }
                  CFRelease(v16);
                }
              }
            }
          }
        }
      }
    }
    v12 = cf;
    goto LABEL_32;
  }
LABEL_36:
  v25 = APSPSGDataSourceGetCMBaseObject();
  v26 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v26)
    v26(v25, *v2, *v3, &v27);
  manager_updatePSGInfoOnEndpoint();
  if (v27)
    CFRelease(v27);
}

void manager_updateExposedLocalEndpoint(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointManager <= 50
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (FigCFEqual())
  {
    APSLogErrorAt();
  }
  else
  {
    if (*(_QWORD *)(DerivedStorage + 240))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      if (manager_exposedLocalEndpointIsPersistentlyConnectedCluster())
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        if (*(_DWORD *)(DerivedStorage + 348) == 4)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterRemoveWeakListener();
        }
      }
      v4 = *(const void **)(DerivedStorage + 240);
    }
    else
    {
      v4 = 0;
    }
    *(_QWORD *)(DerivedStorage + 240) = a2;
    if (a2)
      CFRetain(a2);
    if (v4)
      CFRelease(v4);
    if (*(_QWORD *)(DerivedStorage + 240))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      if (manager_exposedLocalEndpointIsPersistentlyConnectedCluster())
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        if (*(_DWORD *)(DerivedStorage + 348) == 4)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
        }
      }
    }
  }
}

void __manager_create_block_invoke()
{
  manager_asyncRegisterAirPlayHALDriverInternal();
}

void manager_asyncRegisterAirPlayHALDriverInternal()
{
  const void *v0;
  int v1;
  int v2;

  if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 1))
  {
    v0 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    v1 = AudioServerPlugInRegisterRemote();
    if (v1)
      v2 = 60;
    else
      v2 = 50;
    if (v2 >= gLogCategory_APEndpointManager
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (v1)
    {
      if (gLogCategory_APEndpointManager <= 60
        && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      manager_AudioServerPluginInterruptionHandler(v0);
    }
    if (v0)
      CFRelease(v0);
  }
}

void manager_handleDevicePresenceChanged(char a1, uint64_t a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  manager_setAVDevicePresence(a2, a1);
  if (gLogCategory_APEndpointManager <= 30
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  JUMPOUT(0x1CAA400E4);
}

void manager_handleBrowserAddOrUpdateEvent(const void *a1, void *a2)
{
  uint64_t DerivedStorage;
  const __CFDictionary *v5;
  uint64_t v6;
  _BOOL4 v7;
  CFTypeRef v8;
  uint64_t CMBaseObject;
  unsigned int (*v10)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int IsLegacyPresent;
  uint64_t v12;
  int IsModernPresent;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  int IsSelf;
  int IsModernPresentOnInfra;
  int IsPresentOnInfra;
  int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  BOOL v32;
  int v33;
  CFTypeRef v34;
  CFTypeRef v35;
  CFTypeRef cf;

  v35 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v34 = 0;
  if (!APTransportDeviceIsAssistedDevice())
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
    if (!FigCFEqual())
    {
      v6 = *MEMORY[0x1E0C9AE00];
      if (APEndpointDescriptionAirPlayCreateWithTransportDevice(*MEMORY[0x1E0C9AE00], a1, 0, &v34))
      {
        APSLogErrorAt();
      }
      else
      {
        v7 = manager_areEndpointsPresent();
        v8 = v34;
        CMBaseObjectGetDerivedStorage();
        if (APSGetFBOPropertyInt64()
          || APSGetFBOPropertyInt64()
          || !manager_deviceIsAllowed((uint64_t)a2, (uint64_t)v8))
        {
          if (gLogCategory_APEndpointManager <= 30
            && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        else
        {
          cf = 0;
          CMBaseObject = APEndpointDescriptionGetCMBaseObject(v34);
          v10 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
          if (!v10 || v10(CMBaseObject, CFSTR("TransportDevice"), v6, &cf))
            goto LABEL_36;
          IsLegacyPresent = APTransportDeviceIsLegacyPresent();
          v12 = APSGetFBOPropertyInt64();
          IsModernPresent = APTransportDeviceIsModernPresent();
          v14 = APSGetFBOPropertyInt64();
          v15 = APSGetFBOPropertyInt64();
          if (v15)
          {
            v16 = v15;
            v17 = APSCanSendToAltReceiver();
            v18 = -64;
            if (!v17)
              v18 = -48;
            if ((v18 & v16) != 0)
              goto LABEL_36;
          }
          APSGetFBOPropertyInt64();
          if (!APTransportDeviceHasMinimumRelationship())
          {
LABEL_36:
            v22 = 0;
          }
          else
          {
            if (v14)
              v19 = 0;
            else
              v19 = IsLegacyPresent == 0;
            v20 = !v19;
            if (IsModernPresent && (v20 & 1) != 0 || (v21 = APSGetFBOPropertyInt64(), IsModernPresent) && v21)
            {
              v22 = 1;
            }
            else
            {
              if (IsLegacyPresent)
                v23 = v12 == 0;
              else
                v23 = 0;
              v22 = v23 && v14 == 0;
            }
          }
          if (cf)
            CFRelease(cf);
          if (v22)
          {
            IsSelf = APTransportDeviceIsSelf();
            IsModernPresentOnInfra = APTransportDeviceIsModernPresentOnInfra();
            IsPresentOnInfra = APTransportDeviceIsPresentOnInfra();
            if (IsSelf)
            {
              if (*(_BYTE *)(DerivedStorage + 120))
                manager_handleEndpointEvent(a2, a1, 1, 1, IsModernPresentOnInfra);
            }
            else
            {
              v28 = IsPresentOnInfra;
              v29 = APSGetFBOPropertyInt64();
              v30 = *(_DWORD *)(DerivedStorage + 348);
              v31 = 1;
              if (v30 <= 0xD && ((1 << v30) & 0x2090) != 0)
                v31 = v28;
              if (v29)
                v32 = IsModernPresentOnInfra == 0;
              else
                v32 = 1;
              v33 = !v32;
              manager_handleEndpointEvent(a2, a1, 0, 0, v31);
              manager_handleEndpointEvent(a2, a1, 1, 0, v33);
              if (v31 || v33)
                manager_gatherDeviceMetrics((uint64_t)a2, (uint64_t)v34);
            }
          }
          else
          {
            if (gLogCategory_APEndpointManager <= 30
              && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            manager_removeAllEndpointsForTransportDeviceIfNeeded(a2, a1);
          }
        }
        if (v7 != manager_areEndpointsPresent())
        {
          if (gLogCategory_APEndpointManager <= 40
            && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          manager_postEndpointPresentChangedNotification();
        }
      }
    }
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 64));
    goto LABEL_78;
  }
  if (APEndpointCreateWithTransportDevice(*MEMORY[0x1E0C9AE00], a1, *(const void **)(DerivedStorage + 272), (uint64_t)a2, 0, &v35))
  {
    APSLogErrorAt();
LABEL_78:
    v5 = 0;
    goto LABEL_79;
  }
  v5 = (const __CFDictionary *)APTransportDeviceCopyAssistedInfo();
  if (!v5 || manager_injectEndpoint(a2, v5, a1, v35))
  {
    APSLogErrorAt();
  }
  else if (gLogCategory_APEndpointManager <= 50
         && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_79:
  if (v34)
    CFRelease(v34);
  if (v35)
    CFRelease(v35);
  if (v5)
    CFRelease(v5);
}

void manager_handleBrowserRemoveEvent(const void *a1, void *a2)
{
  uint64_t DerivedStorage;
  _BOOL4 v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  v5 = manager_areEndpointsPresent();
  manager_removeAllEndpointsForTransportDeviceIfNeeded(a2, a1);
  if (v5 != manager_areEndpointsPresent())
  {
    if (gLogCategory_APEndpointManager <= 40
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    manager_postEndpointPresentChangedNotification();
  }
  JUMPOUT(0x1CAA400E4);
}

uint64_t manager_registerForNotifications(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t result;
  unsigned int v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[5];
  _QWORD handler[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = MEMORY[0x1E0C809B0];
  v4 = *(NSObject **)(DerivedStorage + 8);
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __manager_registerForNotifications_block_invoke;
  handler[3] = &__block_descriptor_40_e8_v12__0i8l;
  handler[4] = a1;
  notify_register_dispatch("com.apple.airplay.prefsChanged", (int *)(DerivedStorage + 16), v4, handler);
  v5 = *(NSObject **)(DerivedStorage + 8);
  v12[0] = v3;
  v12[1] = 3221225472;
  v12[2] = __manager_registerForNotifications_block_invoke_2;
  v12[3] = &__block_descriptor_40_e8_v12__0i8l;
  v12[4] = a1;
  result = notify_register_dispatch("com.apple.airplay.stopSenderSession", (int *)(DerivedStorage + 24), v5, v12);
  v7 = *(_DWORD *)(DerivedStorage + 348);
  if (v7 <= 0xD && ((1 << v7) & 0x2090) != 0 && !*(_BYTE *)(DerivedStorage + 3))
  {
    v8 = *(NSObject **)(DerivedStorage + 8);
    v11[0] = v3;
    v11[1] = 3221225472;
    v11[2] = __manager_registerForNotifications_block_invoke_3;
    v11[3] = &__block_descriptor_48_e8_v12__0i8l;
    v11[4] = DerivedStorage;
    v11[5] = a1;
    result = notify_register_dispatch("com.apple.airplay.active", (int *)(DerivedStorage + 20), v8, v11);
    v7 = *(_DWORD *)(DerivedStorage + 348);
  }
  if (v7 == 7)
  {
    v9 = *(NSObject **)(DerivedStorage + 8);
    v10[0] = v3;
    v10[1] = 3221225472;
    v10[2] = __manager_registerForNotifications_block_invoke_4;
    v10[3] = &__block_descriptor_48_e8_v12__0i8l;
    v10[4] = DerivedStorage;
    v10[5] = a1;
    return notify_register_dispatch("kAirPlayWHANotification_GroupMemberInterruptedByPreWHASender", (int *)(DerivedStorage + 28), v9, v10);
  }
  return result;
}

void manager_handlePreferencesChanged(void *a1, int a2)
{
  uint64_t DerivedStorage;
  unsigned int v5;
  BOOL v6;
  int v7;
  const void *v9;
  NSObject *v10;
  const void *v11;
  int v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  APSSettingsSynchronize();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  v5 = *(_DWORD *)(DerivedStorage + 348);
  v6 = v5 > 0xD;
  v7 = (1 << v5) & 0x2090;
  if (!v6 && v7 != 0)
    *(_BYTE *)(DerivedStorage + 120) = APSSettingsGetIntWithDefault() != 0;
  APSCopyTightSyncInfo();
  if (!FigCFEqual())
  {
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v9 = *(const void **)(DerivedStorage + 136);
    *(_QWORD *)(DerivedStorage + 136) = 0;
    if (v9)
      CFRelease(v9);
    if (!a2 && !*(_QWORD *)(DerivedStorage + 136))
    {
      v10 = *(NSObject **)(DerivedStorage + 152);
      if (v10)
      {
        dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 152));
        dispatch_release(v10);
        *(_QWORD *)(DerivedStorage + 152) = 0;
      }
    }
  }
  v11 = (const void *)APSSettingsCopyValue();
  v12 = FigCFEqual();
  if (!v12)
  {
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v13 = *(const void **)(DerivedStorage + 104);
    *(_QWORD *)(DerivedStorage + 104) = v11;
    if (v11)
      CFRetain(v11);
    if (v13)
      CFRelease(v13);
  }
  v14 = (const void *)APSSettingsCopyValue();
  if (FigCFEqual())
  {
    if (v12)
    {
      if (!a2)
        goto LABEL_41;
      goto LABEL_39;
    }
  }
  else
  {
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v15 = *(const void **)(DerivedStorage + 112);
    *(_QWORD *)(DerivedStorage + 112) = v14;
    if (v14)
      CFRetain(v14);
    if (v15)
      CFRelease(v15);
  }
  manager_updateAllowedDevices((uint64_t)a1);
  manager_updateAllowedDevices((uint64_t)a1);
  if (!a2)
    goto LABEL_41;
LABEL_39:
  v16 = *(const void **)(DerivedStorage + 256);
  if (v16)
    manager_updateEndpointClusterMembershipIfNeeded(a1, v16, 0, 0);
LABEL_41:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 64));
  if (v11)
    CFRelease(v11);
  if (v14)
    CFRelease(v14);
}

uint64_t manager_handleActivateEndpointCommand(uint64_t a1, const void *a2, _QWORD *a3)
{
  const void *TestInfoDictionary;
  uint64_t v6;

  if (a2)
  {
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (IsAppleInternalBuild() && CFDictionaryGetInt64())
    {
      TestInfoDictionary = (const void *)APAdvertiserInfoCreateTestInfoDictionary();
      CFDictionaryMergeDictionary();
    }
    else
    {
      TestInfoDictionary = CFRetain(a2);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    *a3 = 0;
    if (TestInfoDictionary)
      CFRelease(TestInfoDictionary);
    return 0;
  }
  else
  {
    v6 = 4294950586;
    APSLogErrorAt();
  }
  return v6;
}

void manager_handleCreateEndpointWithEndpointInfoNotification(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  const __CFAllocator *v7;
  void *v8;
  const void *Value;
  __int16 Int64;
  uint64_t v11;
  uint64_t v12;
  __CFDictionary *Mutable;
  const void *v14;
  BOOL v15;
  const void *v16;
  CFTypeRef v17;
  CFTypeRef v18;
  int v19;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointManager <= 50)
  {
    if (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize())
      LogPrintF();
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  if (!CFDictionaryContainsKey(a5, CFSTR("NetworkAddress")))
  {
    if (APBrowserControllerDiscoverAndInjectEndpoint())
      APSLogErrorAt();
    return;
  }
  v18 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v19 = APAdvertiserInfoCreate();
  if (v19)
  {
    APSLogErrorAt();
    v17 = 0;
    Value = 0;
    v8 = 0;
LABEL_35:
    Mutable = 0;
    goto LABEL_24;
  }
  CFDictionaryApplyBlock();
  v8 = (void *)CFDictionaryCopyCString();
  TextToHardwareAddressScalar();
  Value = CFDictionaryGetValue(a5, CFSTR("NetworkAddress"));
  if (!Value)
  {
    v19 = -16713;
    APSLogErrorAt();
    v17 = 0;
    goto LABEL_35;
  }
  Int64 = CFDictionaryGetInt64();
  v11 = CFDictionaryGetInt64();
  v12 = CFDictionaryGetInt64();
  Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetInt64();
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CF1DF0], 0);
  v14 = (const void *)*MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CF1E00], (const void *)*MEMORY[0x1E0C9AE50]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CF1E08], v14);
  if (v12)
    v15 = 1;
  else
    v15 = v11 == 0;
  if (v15)
    v16 = (const void *)*MEMORY[0x1E0C9AE40];
  else
    v16 = v14;
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CF1DF8], v16);
  v19 = APSNetworkAddressCreateWithString();
  if (v19)
    goto LABEL_36;
  if (Int64)
    APSNetworkAddressSetPort();
  v19 = APTransportDeviceCreateWithNetworkAddress();
  if (v19)
  {
LABEL_36:
    APSLogErrorAt();
    v17 = 0;
    Value = 0;
LABEL_24:
    free(v8);
    if (!Mutable)
      goto LABEL_26;
    goto LABEL_25;
  }
  v19 = APEndpointCreateWithTransportDevice((uint64_t)v7, 0, 0, (uint64_t)a2, 0, &v18);
  if (!v19)
  {
    v17 = v18;
    v18 = 0;
    Value = 0;
    goto LABEL_24;
  }
  APSLogErrorAt();
  v17 = v18;
  free(v8);
  if (v17)
  {
    CFRelease(v17);
    v17 = 0;
  }
  Value = 0;
  if (!Mutable)
    goto LABEL_26;
LABEL_25:
  CFRelease(Mutable);
LABEL_26:
  if (!v19 && !manager_injectEndpoint(a2, a5, Value, v17))
  {
    if (!v17)
      return;
    goto LABEL_29;
  }
  APSLogErrorAt();
  if (v17)
LABEL_29:
    CFRelease(v17);
}

uint64_t manager_handleClearEndpointCommand(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;

  if (gLogCategory_APEndpointManager <= 50
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    v5 = 0;
    *a3 = 0;
  }
  else
  {
    v5 = 4294950586;
    APSLogErrorAt();
  }
  return v5;
}

void manager_handleClearEndpointWithEndpointIDNotification(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  void *v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v11 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  v4 = (void *)CFDictionaryCopyCString();
  if (v11)
  {
    APSLogErrorAt();
  }
  else
  {
    TextToHardwareAddressScalar();
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFDictionaryApplyBlock();
    v5 = v8;
    if (v8[3])
    {
      if (gLogCategory_APEndpointManager <= 50)
      {
        if (gLogCategory_APEndpointManager != -1 || (v6 = _LogCategory_Initialize(), v5 = v8, v6))
        {
          LogPrintF();
          v5 = v8;
        }
      }
      manager_removeEndpointIfNeeded(a2, v5[3], 1);
    }
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 64));
  free(v4);
  _Block_object_dispose(&v7, 8);
}

void sub_1C947EF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t manager_handleUpdateLocalEndpointAuthStringCommand(uint64_t a1, const __CFDictionary *Value, _QWORD *a3)
{
  uint64_t DerivedStorage;
  const __CFArray *v6;
  const void *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, _QWORD, const __CFDictionary *);

  if (APEndpointManagerGetShared_once != -1)
    dispatch_once(&APEndpointManagerGetShared_once, &__block_literal_global_2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (Value)
    Value = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("AuthString"));
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  if (FigCFEqual())
  {
    v6 = 0;
  }
  else
  {
    v8 = *(const void **)(DerivedStorage + 232);
    *(_QWORD *)(DerivedStorage + 232) = Value;
    if (Value)
      CFRetain(Value);
    if (v8)
      CFRelease(v8);
    v6 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
    Count = CFArrayGetCount(v6);
    if (Count >= 1)
    {
      v10 = Count;
      v11 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(v6, v11);
        if (APSGetFBOPropertyInt64())
          break;
        if (v10 == ++v11)
          goto LABEL_7;
      }
      CMBaseObject = FigEndpointGetCMBaseObject();
      v13 = *(void (**)(uint64_t, _QWORD, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
      if (v13)
        v13(CMBaseObject, *MEMORY[0x1E0CA4378], Value);
    }
  }
LABEL_7:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 64));
  *a3 = 0;
  if (v6)
    CFRelease(v6);
  return 0;
}

uint64_t manager_handleUpdateLocalInfoDictCommand(int a1, CFDictionaryRef theDict, _QWORD *a3)
{
  const void *Value;
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, const __CFString *, const void *);

  if (APEndpointManagerGetShared_once != -1)
    dispatch_once(&APEndpointManagerGetShared_once, &__block_literal_global_2);
  *a3 = 0;
  Value = CFDictionaryGetValue(theDict, CFSTR("InfoDict"));
  if (MEMORY[0x1CAA3DF18]())
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(_QWORD *)(DerivedStorage + 336))
      *(_QWORD *)(DerivedStorage + 336) = os_transaction_create();
  }
  v7 = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointManager <= 30
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (Value)
  {
    if (*(_QWORD *)(v7 + 256))
    {
      CMBaseObject = FigEndpointGetCMBaseObject();
      v9 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
      if (v9)
        v9(CMBaseObject, CFSTR("EndpointInfo"), Value);
    }
  }
  return 0;
}

uint64_t manager_handleDiscoveryBrokerRequest(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t TypedValue;
  const void *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  if (APEndpointManagerGetShared_once != -1)
    dispatch_once(&APEndpointManagerGetShared_once, &__block_literal_global_2);
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointManager <= 30
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a2
    || (CFStringGetTypeID(), (TypedValue = CFDictionaryGetTypedValue()) == 0)
    || (v6 = (const void *)TypedValue, CFStringGetTypeID(), (v7 = CFDictionaryGetTypedValue()) == 0))
  {
LABEL_37:
    APSLogErrorAt();
    result = 4294960591;
    if (!a3)
      return result;
    goto LABEL_35;
  }
  v8 = (const void *)v7;
  if (CFEqual(v6, CFSTR("Authenticate")))
  {
    CFStringGetTypeID();
    if (CFDictionaryGetTypedValue())
    {
      CFStringGetTypeID();
      v9 = CFDictionaryGetTypedValue();
      if (gLogCategory_APEndpointManager <= 50
        && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
      {
        if (v9)
          IsAppleInternalBuild();
        IsAppleInternalBuild();
        LogPrintF();
      }
      CFRetain(v8);
      APBrokerManagerAuthenticateBrokerGroup();
      goto LABEL_34;
    }
    goto LABEL_37;
  }
  if (CFEqual(v6, CFSTR("GetInfo")))
  {
    CFStringGetTypeID();
    v10 = CFDictionaryGetTypedValue();
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      if (v10)
        IsAppleInternalBuild();
      LogPrintF();
    }
    CFRetain(v8);
    APBrokerManagerGetInfoFromBrokerGroup();
LABEL_34:
    result = 0;
    if (!a3)
      return result;
    goto LABEL_35;
  }
  if (gLogCategory_APEndpointManager <= 90
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  result = 4294960561;
  if (a3)
LABEL_35:
    *a3 = 0;
  return result;
}

void __manager_create_block_invoke_2(uint64_t a1)
{
  CFSetAddValue(*(CFMutableSetRef *)(*(_QWORD *)(a1 + 32) + 8), *(const void **)(a1 + 40));
}

void manager_connectToAddressIntrospectorCmd(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  CFStringRef v4;
  __CFDictionary *TestInfoDictionary;

  if (a3 < 2)
  {
LABEL_7:
    FPrintF();
    return;
  }
  v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(const char **)(a4 + 8), 0x8000100u);
  TestInfoDictionary = (__CFDictionary *)APAdvertiserInfoCreateTestInfoDictionary();
  CFDictionarySetValue(TestInfoDictionary, (const void *)*MEMORY[0x1E0CF1C90], v4);
  CFDictionarySetValue(TestInfoDictionary, CFSTR("NetworkAddress"), v4);
  if (CFDictionaryCreateFromNameTypeValueArgList())
  {
    FPrintF();
    if (v4)
      CFRelease(v4);
    if (TestInfoDictionary)
      CFRelease(TestInfoDictionary);
    goto LABEL_7;
  }
  CFDictionaryMergeDictionary();
  FPrintF();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v4)
    CFRelease(v4);
  if (TestInfoDictionary)
    CFRelease(TestInfoDictionary);
}

void manager_introspector_listEndpoints(uint64_t a1, uint64_t a2, int a3, char **a4)
{
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t CMBaseObject;
  unsigned int (*v13)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  __CFArray *v14;
  CFTypeID v15;
  CFIndex Count;
  CFIndex v17;
  uint64_t v18;
  const void *ValueAtIndex;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  CFTypeID v28;
  CFIndex v29;
  CFIndex j;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char i;
  CFTypeRef cf;
  CFTypeRef v38;
  CFTypeRef v39;
  CFTypeRef v40;
  CFArrayRef v41[2];

  v41[0] = 0;
  if (a1)
  {
    v8 = 0;
    v9 = 0;
    for (i = 1; ; i = 0)
    {
      do
      {
        v10 = v9;
        v11 = getopt(a3, a4, "va");
        v9 = 1;
      }
      while (v11 == 97);
      if (v11 == -1)
        break;
      if (v11 != 118)
        goto LABEL_13;
      v8 = 1;
      v9 = v10;
    }
    if (*MEMORY[0x1E0C844E0] < a3)
    {
LABEL_13:
      FPrintF();
      FPrintF();
      FPrintF();
      goto LABEL_14;
    }
    if ((_DWORD)v10)
    {
      CMBaseObject = FigEndpointManagerGetCMBaseObject();
      v13 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
      if (!v13 || v13(CMBaseObject, *MEMORY[0x1E0CA3A28], *MEMORY[0x1E0C9AE00], v41))
      {
        APSLogErrorAt();
        goto LABEL_50;
      }
      v14 = v41[0];
      if (!v41[0])
        goto LABEL_50;
LABEL_16:
      v15 = CFGetTypeID(v14);
      if (v15 == CFArrayGetTypeID())
      {
        Count = CFArrayGetCount(v41[0]);
        FPrintF();
        if (Count >= 1)
        {
          v17 = 0;
          v35 = *MEMORY[0x1E0CA41A0];
          v18 = *MEMORY[0x1E0C9AE00];
          v34 = *MEMORY[0x1E0CA4258];
          v33 = *MEMORY[0x1E0CA4348];
          v32 = *MEMORY[0x1E0CA43D0];
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v41[0], v17);
            if (APSGetFBOPropertyInt64())
            {
              v39 = 0;
              v40 = 0;
              v38 = 0;
              cf = 0;
              APSGetFBOPropertyInt64();
              v20 = FigEndpointGetCMBaseObject();
              v21 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
              if (v21)
                v21(v20, v35, v18, &v40);
              v22 = FigEndpointGetCMBaseObject();
              v23 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
              if (v23)
                v23(v22, v34, v18, &v39);
              v24 = FigEndpointGetCMBaseObject();
              v25 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
              if (v25)
                v25(v24, v33, v18, &v38);
              APSGetFBOPropertyInt64();
              v26 = FigEndpointGetCMBaseObject();
              v27 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
              if (v27)
                v27(v26, v32, v18, &cf);
              if (cf && (v28 = CFGetTypeID(cf), v28 == CFArrayGetTypeID()))
                v29 = CFArrayGetCount((CFArrayRef)cf);
              else
                v29 = 0;
              FPrintF();
              if ((i & 1) == 0)
                FPrintF();
              FPrintF();
              if (v29 >= 1)
              {
                for (j = 0; j != v29; ++j)
                {
                  v31 = CFArrayGetValueAtIndex((CFArrayRef)cf, j);
                  manager_introspector_showEndpointInfo(a2, 2, (uint64_t)v31, v8);
                }
              }
              if (v40)
                CFRelease(v40);
              if (v39)
                CFRelease(v39);
              if (v38)
                CFRelease(v38);
              if (cf)
                CFRelease(cf);
            }
            else
            {
              manager_introspector_showEndpointInfo(a2, 0, (uint64_t)ValueAtIndex, v8);
            }
            ++v17;
          }
          while (v17 != Count);
        }
        goto LABEL_51;
      }
LABEL_50:
      FPrintF();
LABEL_51:
      if (v41[0])
        CFRelease(v41[0]);
      return;
    }
    v14 = manager_copyEndpoints(a1, 0);
    v41[0] = v14;
    if (v14)
      goto LABEL_16;
  }
  APSLogErrorAt();
LABEL_14:
  FPrintF();
}

void manager_introspector_copyProperty(uint64_t a1, int a2, int a3, char **a4)
{
  char v7;
  unsigned __int8 v8;
  int v9;
  int *v10;
  uint64_t v11;
  const char *v12;
  int v13;
  const __CFAllocator *v14;
  const __CFAllocator *v15;
  const char *v16;
  CFStringRef v17;
  uint64_t v18;
  CFStringRef v19;
  int v20;
  uint64_t CMBaseObject;
  unsigned int (*v22)(uint64_t, CFStringRef, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, CFStringRef, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeID v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, CFStringRef, const __CFAllocator *, CFTypeRef *);
  CFTypeRef cf;

  cf = 0;
  if (!a1)
  {
    APSLogErrorAt();
    goto LABEL_10;
  }
  v7 = 0;
  do
  {
    v8 = v7;
    v9 = getopt(a3, a4, "r");
    v7 = 1;
  }
  while (v9 == 114);
  if (v9 != -1 || (v10 = (int *)MEMORY[0x1E0C844E0], v11 = (int)*MEMORY[0x1E0C844E0], (int)v11 >= a3))
  {
    FPrintF();
LABEL_9:
    FPrintF();
    FPrintF();
    FPrintF();
    FPrintF();
    FPrintF();
LABEL_10:
    FPrintF();
    return;
  }
  v12 = a4[v11];
  v13 = strncmp(v12, "desc@", 5uLL);
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v13)
  {
    v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v16 = v12;
  }
  else
  {
    v16 = v12 + 5;
    v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  }
  v17 = CFStringCreateWithCString(v15, v16, 0x8000100u);
  v18 = *v10 + 1;
  *v10 = v18;
  if ((int)v18 >= a3)
  {
    FPrintF();
    v19 = 0;
LABEL_59:
    if (v17)
      CFRelease(v17);
    if (v19)
      CFRelease(v19);
    goto LABEL_9;
  }
  v19 = CFStringCreateWithCString(v14, a4[v18], 0x8000100u);
  v20 = *v10 + 1;
  *v10 = v20;
  if (v20 < a3)
  {
    FPrintF();
    goto LABEL_59;
  }
  if (FigCFEqual())
  {
    CMBaseObject = FigEndpointManagerGetCMBaseObject();
    v22 = *(unsigned int (**)(uint64_t, CFStringRef, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
    if (v22 && !v22(CMBaseObject, v19, v14, &cf))
    {
      v23 = 0;
LABEL_22:
      v26 = 0;
      goto LABEL_23;
    }
    FPrintF();
    v23 = 0;
LABEL_53:
    v26 = 0;
    if (!v17)
      goto LABEL_25;
    goto LABEL_24;
  }
  v23 = manager_introspector_copyMatchingEndpoint(a1, (uint64_t)v17, v8);
  if (!v23)
    goto LABEL_52;
  if (v13)
  {
    v24 = FigEndpointGetCMBaseObject();
    v25 = *(unsigned int (**)(uint64_t, CFStringRef, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
    if (v25 && !v25(v24, v19, v14, &cf))
      goto LABEL_22;
    goto LABEL_52;
  }
  v27 = FigEndpointGetCMBaseObject();
  v28 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v28 || v28(v27, CFSTR("EndpointDescription"), v14, &cf))
  {
LABEL_52:
    FPrintF();
    goto LABEL_53;
  }
  if (!cf || (v29 = CFGetTypeID(cf), v29 != APEndpointDescriptionGetTypeID()))
  {
    if (gLogCategory_APEndpointManager <= 60)
    {
      if (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize())
        LogPrintF();
      if (gLogCategory_APEndpointManager <= 60
        && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    goto LABEL_52;
  }
  v26 = cf;
  cf = 0;
  v30 = APEndpointDescriptionGetCMBaseObject(v26);
  v31 = *(uint64_t (**)(uint64_t, CFStringRef, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
  if (v31)
    v31(v30, v19, v14, &cf);
LABEL_23:
  FPrintF();
  if (v17)
LABEL_24:
    CFRelease(v17);
LABEL_25:
  if (v23)
    CFRelease(v23);
  if (v19)
    CFRelease(v19);
  if (cf)
    CFRelease(cf);
  if (v26)
    CFRelease(v26);
}

void manager_introspector_setProperty(uint64_t a1, int a2, int a3, char **a4)
{
  char v7;
  unsigned __int8 v8;
  int v9;
  int *v10;
  uint64_t v11;
  const __CFAllocator *v12;
  CFStringRef v13;
  uint64_t v14;
  CFStringRef v15;
  int v16;
  int v17;
  CFTypeRef v18;
  uint64_t CMBaseObject;
  uint64_t (*v20)(uint64_t, CFStringRef, _QWORD);

  if (!a1)
  {
    APSLogErrorAt();
    FPrintF();
    return;
  }
  v7 = 0;
  do
  {
    v8 = v7;
    v9 = getopt(a3, a4, "r");
    v7 = 1;
  }
  while (v9 == 114);
  if (v9 != -1 || (v10 = (int *)MEMORY[0x1E0C844E0], v11 = (int)*MEMORY[0x1E0C844E0], (int)v11 >= a3))
  {
    FPrintF();
LABEL_14:
    FPrintF();
    FPrintF();
    FPrintF();
    FPrintF();
    FPrintF();
    return;
  }
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v13 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4[v11], 0x8000100u);
  v14 = *v10 + 1;
  *v10 = v14;
  if ((int)v14 >= a3)
  {
    FPrintF();
    v15 = 0;
LABEL_26:
    if (v13)
      CFRelease(v13);
    if (v15)
      CFRelease(v15);
    goto LABEL_14;
  }
  v15 = CFStringCreateWithCString(v12, a4[v14], 0x8000100u);
  v16 = *v10 + 1;
  *v10 = v16;
  if (v16 >= a3 || CFCreateObjectFromString() || (v17 = *v10 + 1, *v10 = v17, v17 < a3))
  {
    FPrintF();
    goto LABEL_26;
  }
  v18 = manager_introspector_copyMatchingEndpoint(a1, (uint64_t)v13, v8);
  if (v18)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v20 = *(uint64_t (**)(uint64_t, CFStringRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v20)
      v20(CMBaseObject, v15, 0);
  }
  FPrintF();
  if (v13)
    CFRelease(v13);
  if (v18)
    CFRelease(v18);
  if (v15)
    CFRelease(v15);
}

void manager_introspector_copySubEndpointProperty(uint64_t a1, int a2, int a3, char **a4)
{
  char v7;
  unsigned __int8 v8;
  int v9;
  int *v10;
  uint64_t v11;
  const __CFAllocator *v12;
  CFStringRef v13;
  uint64_t v14;
  CFStringRef v15;
  uint64_t v16;
  CFStringRef v17;
  int v18;
  CFTypeRef v19;
  uint64_t ProtocolVTable;
  uint64_t v21;
  uint64_t (*v22)(CFTypeRef, CFStringRef, CFStringRef, const __CFAllocator *, CFTypeRef *);
  CFTypeRef cf;

  cf = 0;
  if (!a1)
  {
    APSLogErrorAt();
    goto LABEL_16;
  }
  v7 = 0;
  do
  {
    v8 = v7;
    v9 = getopt(a3, a4, "r");
    v7 = 1;
  }
  while (v9 == 114);
  if (v9 != -1 || (v10 = (int *)MEMORY[0x1E0C844E0], v11 = (int)*MEMORY[0x1E0C844E0], (int)v11 >= a3))
  {
    FPrintF();
LABEL_15:
    FPrintF();
    FPrintF();
    FPrintF();
LABEL_16:
    FPrintF();
    return;
  }
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v13 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4[v11], 0x8000100u);
  v14 = *v10 + 1;
  *v10 = v14;
  if ((int)v14 >= a3)
  {
    FPrintF();
    v15 = 0;
LABEL_33:
    v17 = 0;
LABEL_35:
    if (v13)
      CFRelease(v13);
    if (v15)
      CFRelease(v15);
    if (v17)
      CFRelease(v17);
    goto LABEL_15;
  }
  v15 = CFStringCreateWithCString(v12, a4[v14], 0x8000100u);
  v16 = *v10 + 1;
  *v10 = v16;
  if ((int)v16 >= a3)
  {
    FPrintF();
    goto LABEL_33;
  }
  v17 = CFStringCreateWithCString(v12, a4[v16], 0x8000100u);
  v18 = *v10 + 1;
  *v10 = v18;
  if (v18 < a3)
  {
    FPrintF();
    goto LABEL_35;
  }
  v19 = manager_introspector_copyMatchingEndpoint(a1, (uint64_t)v13, v8);
  if (v19)
  {
    FigEndpointSubEndpointSupportProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v21 = *(_QWORD *)(ProtocolVTable + 16);
      if (v21)
      {
        v22 = *(uint64_t (**)(CFTypeRef, CFStringRef, CFStringRef, const __CFAllocator *, CFTypeRef *))(v21 + 8);
        if (v22)
          v22(v19, v15, v17, v12, &cf);
      }
    }
  }
  FPrintF();
  if (v13)
    CFRelease(v13);
  if (v15)
    CFRelease(v15);
  if (v19)
    CFRelease(v19);
  if (v17)
    CFRelease(v17);
  if (cf)
    CFRelease(cf);
}

void manager_introspector_setSubEndpointProperty(uint64_t a1, int a2, int a3, char **a4)
{
  char v7;
  unsigned __int8 v8;
  int v9;
  int *v10;
  uint64_t v11;
  const __CFAllocator *v12;
  CFStringRef v13;
  uint64_t v14;
  CFStringRef v15;
  uint64_t v16;
  CFStringRef v17;
  int v18;
  int v19;
  CFTypeRef v20;
  uint64_t ProtocolVTable;
  uint64_t v22;
  uint64_t (*v23)(CFTypeRef, CFStringRef, CFStringRef, _QWORD);

  if (!a1)
  {
    APSLogErrorAt();
    FPrintF();
    return;
  }
  v7 = 0;
  do
  {
    v8 = v7;
    v9 = getopt(a3, a4, "r");
    v7 = 1;
  }
  while (v9 == 114);
  if (v9 != -1 || (v10 = (int *)MEMORY[0x1E0C844E0], v11 = (int)*MEMORY[0x1E0C844E0], (int)v11 >= a3))
  {
    FPrintF();
LABEL_17:
    FPrintF();
    FPrintF();
    FPrintF();
    FPrintF();
    FPrintF();
    return;
  }
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v13 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4[v11], 0x8000100u);
  v14 = *v10 + 1;
  *v10 = v14;
  if ((int)v14 >= a3)
  {
    FPrintF();
    v15 = 0;
LABEL_32:
    v17 = 0;
LABEL_34:
    if (v13)
      CFRelease(v13);
    if (v15)
      CFRelease(v15);
    if (v17)
      CFRelease(v17);
    goto LABEL_17;
  }
  v15 = CFStringCreateWithCString(v12, a4[v14], 0x8000100u);
  v16 = *v10 + 1;
  *v10 = v16;
  if ((int)v16 >= a3)
  {
    FPrintF();
    goto LABEL_32;
  }
  v17 = CFStringCreateWithCString(v12, a4[v16], 0x8000100u);
  v18 = *v10 + 1;
  *v10 = v18;
  if (v18 >= a3 || CFCreateObjectFromString() || (v19 = *v10 + 1, *v10 = v19, v19 < a3))
  {
    FPrintF();
    goto LABEL_34;
  }
  v20 = manager_introspector_copyMatchingEndpoint(a1, (uint64_t)v13, v8);
  if (v20)
  {
    FigEndpointSubEndpointSupportProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v22 = *(_QWORD *)(ProtocolVTable + 16);
      if (v22)
      {
        v23 = *(uint64_t (**)(CFTypeRef, CFStringRef, CFStringRef, _QWORD))(v22 + 16);
        if (v23)
          v23(v20, v15, v17, 0);
      }
    }
  }
  FPrintF();
  if (v13)
    CFRelease(v13);
  if (v15)
    CFRelease(v15);
  if (v20)
    CFRelease(v20);
  if (v17)
    CFRelease(v17);
}

void manager_introspector_sendCommand(uint64_t a1, int a2, int a3, char **a4)
{
  char v7;
  unsigned __int8 v8;
  int v9;
  int *v10;
  uint64_t v11;
  const __CFAllocator *v12;
  CFStringRef v13;
  uint64_t v14;
  CFStringRef v15;
  CFTypeRef v16;
  uint64_t (*v17)(CFTypeRef, CFStringRef, _QWORD, _QWORD, _QWORD);

  if (!a1)
  {
    APSLogErrorAt();
    FPrintF();
    return;
  }
  v7 = 0;
  do
  {
    v8 = v7;
    v9 = getopt(a3, a4, "r");
    v7 = 1;
  }
  while (v9 == 114);
  if (v9 != -1 || (v10 = (int *)MEMORY[0x1E0C844E0], v11 = (int)*MEMORY[0x1E0C844E0], (int)v11 >= a3))
  {
    FPrintF();
LABEL_13:
    FPrintF();
    FPrintF();
    FPrintF();
    FPrintF();
    FPrintF();
    FPrintF();
    return;
  }
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v13 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4[v11], 0x8000100u);
  v14 = *v10 + 1;
  *v10 = v14;
  if ((int)v14 >= a3)
  {
    FPrintF();
    v15 = 0;
LABEL_25:
    if (v13)
      CFRelease(v13);
    if (v15)
      CFRelease(v15);
    goto LABEL_13;
  }
  v15 = CFStringCreateWithCString(v12, a4[v14], 0x8000100u);
  ++*v10;
  if (CFDictionaryCreateFromNameTypeValueArgList())
  {
    FPrintF();
    goto LABEL_25;
  }
  v16 = manager_introspector_copyMatchingEndpoint(a1, (uint64_t)v13, v8);
  if (v16)
  {
    FigEndpointExtendedGetClassID();
    if (CMBaseObjectIsMemberOfClass())
    {
      v17 = *(uint64_t (**)(CFTypeRef, CFStringRef, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 24)
                                                                                     + 72);
      if (v17)
        v17(v16, v15, 0, 0, 0);
    }
  }
  FPrintF();
  if (v13)
    CFRelease(v13);
  if (v16)
    CFRelease(v16);
  if (v15)
    CFRelease(v15);
}

uint64_t manager_handleTriggerSenderStateUpdate()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  if (APEndpointManagerGetShared_once != -1)
    dispatch_once(&APEndpointManagerGetShared_once, &__block_literal_global_2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointManager <= 50
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  v1 = manager_getAndPostSenderStateUpdate();
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 64));
  return v1;
}

void manager_handlePSGDataSourceGroupInfoChanged(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  __CFArray *v6;
  __CFArray *v7;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  if (*(_QWORD *)(DerivedStorage + 280))
  {
    CMBaseObject = APSPSGDataSourceGetCMBaseObject();
    v5 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v5)
      v5(CMBaseObject, *MEMORY[0x1E0CF7558], *MEMORY[0x1E0C9AE00], &cf);
    v6 = manager_copyEndpoints(a2, 1);
    v7 = v6;
    if (v6)
    {
      CFArrayGetCount(v6);
      CFArrayApplyBlock();
    }
    else
    {
      APSLogErrorAt();
    }
  }
  else
  {
    APSLogErrorAt();
    v7 = 0;
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 64));
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
}

uint64_t manager_Invalidate(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)manager_invalidateInternal);
  return 0;
}

void manager_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  void (*v7)(uint64_t, uint64_t);
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  uint64_t v20;
  const void *v21;
  const void *v22;
  NSObject *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  NSObject *v31;
  void *v32;
  _QWORD block[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 344)
    && gLogCategory_APEndpointManager <= 50
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 1))
  {
    if (introspector_getCollectionOfEndpointManagers_once != -1)
      dispatch_once(&introspector_getCollectionOfEndpointManagers_once, &__block_literal_global_386);
    if (introspector_getCollectionOfEndpointManagers_coll)
    {
      v3 = *(NSObject **)introspector_getCollectionOfEndpointManagers_coll;
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __manager_Finalize_block_invoke;
      block[3] = &__block_descriptor_48_e5_v8__0l;
      block[4] = introspector_getCollectionOfEndpointManagers_coll;
      block[5] = a1;
      dispatch_sync(v3, block);
    }
    v4 = *(NSObject **)(DerivedStorage + 8);
    if (v4)
    {
      dispatch_release(v4);
      *(_QWORD *)(DerivedStorage + 8) = 0;
    }
    v5 = *(_QWORD *)(DerivedStorage + 264);
    if (v5)
    {
      if (gLogCategory_APEndpointManager <= 50)
      {
        if (gLogCategory_APEndpointManager != -1
          || (v6 = _LogCategory_Initialize(), v5 = *(_QWORD *)(DerivedStorage + 264), v6))
        {
          LogPrintF();
          v5 = *(_QWORD *)(DerivedStorage + 264);
        }
      }
      v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
      if (v7)
        v7(v5, a1);
    }
    FigSimpleMutexDestroy();
    v8 = *(const void **)(DerivedStorage + 104);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(DerivedStorage + 104) = 0;
    }
    v9 = *(const void **)(DerivedStorage + 112);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(DerivedStorage + 112) = 0;
    }
    v10 = *(const void **)(DerivedStorage + 168);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(DerivedStorage + 168) = 0;
    }
    v11 = *(const void **)(DerivedStorage + 176);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(DerivedStorage + 176) = 0;
    }
    v12 = *(const void **)(DerivedStorage + 192);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(DerivedStorage + 192) = 0;
    }
    v13 = *(const void **)(DerivedStorage + 208);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(DerivedStorage + 208) = 0;
    }
    v14 = *(const void **)(DerivedStorage + 184);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(DerivedStorage + 184) = 0;
    }
    v15 = *(const void **)(DerivedStorage + 216);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(DerivedStorage + 216) = 0;
    }
    v16 = *(const void **)(DerivedStorage + 224);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(DerivedStorage + 224) = 0;
    }
    v17 = *(const void **)(DerivedStorage + 232);
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(DerivedStorage + 232) = 0;
    }
    v18 = *(const void **)(DerivedStorage + 128);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(DerivedStorage + 128) = 0;
    }
    v19 = *(const void **)(DerivedStorage + 264);
    if (v19)
    {
      CFRelease(v19);
      *(_QWORD *)(DerivedStorage + 264) = 0;
    }
    v20 = *(_QWORD *)(DerivedStorage + 304);
    if (v20)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
      *(_QWORD *)(DerivedStorage + 304) = 0;
    }
    v21 = *(const void **)(DerivedStorage + 296);
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(DerivedStorage + 296) = 0;
    }
    v22 = *(const void **)(DerivedStorage + 248);
    if (v22)
    {
      CFRelease(v22);
      *(_QWORD *)(DerivedStorage + 248) = 0;
    }
    v23 = *(NSObject **)(DerivedStorage + 312);
    if (v23)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 312));
      dispatch_release(v23);
      *(_QWORD *)(DerivedStorage + 312) = 0;
    }
    v24 = *(const void **)(DerivedStorage + 88);
    if (v24)
    {
      CFRelease(v24);
      *(_QWORD *)(DerivedStorage + 88) = 0;
    }
    v25 = *(const void **)(DerivedStorage + 272);
    if (v25)
    {
      CFRelease(v25);
      *(_QWORD *)(DerivedStorage + 272) = 0;
    }
    v26 = *(const void **)(DerivedStorage + 256);
    if (v26)
    {
      CFRelease(v26);
      *(_QWORD *)(DerivedStorage + 256) = 0;
    }
    v27 = *(const void **)(DerivedStorage + 280);
    if (v27)
    {
      CFRelease(v27);
      *(_QWORD *)(DerivedStorage + 280) = 0;
    }
    v28 = *(const void **)(DerivedStorage + 288);
    if (v28)
    {
      CFRelease(v28);
      *(_QWORD *)(DerivedStorage + 288) = 0;
    }
    v29 = *(const void **)(DerivedStorage + 240);
    if (v29)
    {
      CFRelease(v29);
      *(_QWORD *)(DerivedStorage + 240) = 0;
    }
    v30 = *(const void **)(DerivedStorage + 136);
    if (v30)
    {
      CFRelease(v30);
      *(_QWORD *)(DerivedStorage + 136) = 0;
    }
    v31 = *(NSObject **)(DerivedStorage + 152);
    if (v31)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 152));
      dispatch_release(v31);
      *(_QWORD *)(DerivedStorage + 152) = 0;
    }
    v32 = *(void **)(DerivedStorage + 336);
    if (v32)
    {

      *(_QWORD *)(DerivedStorage + 336) = 0;
    }
  }
  else
  {
    if (gLogCategory_APEndpointManager <= 100)
      manager_Finalize_cold_1(gLogCategory_APEndpointManager);
    __break(1u);
  }
}

__CFString *manager_CopyDebugDescription(uint64_t a1)
{
  uint64_t v2;
  __CFString *Mutable;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v6;
  CFTypeRef v7;
  size_t v8;
  CFTypeRef cf;

  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  cf = 0;
  CFStringAppendFormat(Mutable, 0, CFSTR("<APEndpointManager %p>"), a1);
  CMBaseObject = FigEndpointManagerGetCMBaseObject();
  v5 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v5)
  {
    v6 = v5(CMBaseObject, CFSTR("ShowInfo"), v2, &cf);
    v7 = cf;
    if (!v6)
    {
      ASPrintF();
      v8 = strlen(0);
      if (v8 && *(_BYTE *)(v8 - 1) == 10)
        *(_BYTE *)(v8 - 1) = 0;
      CFStringAppendFormat(Mutable, 0, CFSTR("%s"), 0);
      free(0);
      v7 = cf;
    }
    if (v7)
      CFRelease(v7);
  }
  return Mutable;
}

uint64_t manager_SetProperty()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointManager <= 30
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 64));
  return 4294954512;
}

void manager_invalidateInternal(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  const void *v12;
  const __CFArray *v13;
  uint64_t v14;
  NSObject *v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 1))
  {
    v3 = DerivedStorage;
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_BYTE *)(v3 + 1) = 1;
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    if (*(_QWORD *)(v3 + 280))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    if (*(_QWORD *)(v3 + 288))
      APBrokerManagerInvalidate();
    if (*(_QWORD *)(v3 + 256))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    AirPlayDebugIPCDisableForEndpointManager(a1);
    v4 = *(NSObject **)(v3 + 56);
    if (v4)
    {
      dispatch_source_cancel(v4);
      v5 = *(NSObject **)(v3 + 56);
      if (v5)
      {
        dispatch_release(v5);
        *(_QWORD *)(v3 + 56) = 0;
      }
    }
    v6 = *(_DWORD *)(v3 + 16);
    if (v6 != -1)
    {
      notify_cancel(v6);
      *(_DWORD *)(v3 + 16) = -1;
    }
    v7 = *(_DWORD *)(v3 + 24);
    if (v7 != -1)
    {
      notify_cancel(v7);
      *(_DWORD *)(v3 + 24) = -1;
    }
    v8 = *(_DWORD *)(v3 + 20);
    if (v8 != -1)
    {
      notify_cancel(v8);
      *(_DWORD *)(v3 + 20) = -1;
    }
    v9 = *(_DWORD *)(v3 + 28);
    if (v9 != -1)
    {
      notify_cancel(v9);
      *(_DWORD *)(v3 + 28) = -1;
    }
    MEMORY[0x1CAA400CC](*(_QWORD *)(v3 + 64));
    CFArrayGetCount(*(CFArrayRef *)(v3 + 192));
    CFArrayApplyBlock();
    v10 = *(_QWORD *)(v3 + 200);
    if (v10)
    {
      v11 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v11)
        v11(v10);
      v12 = *(const void **)(v3 + 200);
      if (v12)
      {
        CFRelease(v12);
        *(_QWORD *)(v3 + 200) = 0;
      }
    }
    v13 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
    CFArrayGetCount(v13);
    CFArrayApplyBlock();
    CFDictionaryApplyBlock();
    manager_removeAllEndpointsIfNeeded(a1, *(const __CFDictionary **)(v3 + 168));
    manager_removeAllEndpointsIfNeeded(a1, *(const __CFDictionary **)(v3 + 176));
    manager_updateExposedLocalEndpoint((uint64_t)a1, 0);
    MEMORY[0x1CAA400E4](*(_QWORD *)(v3 + 64));
    v14 = *(_QWORD *)(v3 + 272);
    if (v14 && APBrowserControllerInvalidate(v14))
    {
      APSLogErrorAt();
      if (!v13)
        return;
      goto LABEL_33;
    }
    v15 = *(NSObject **)(v3 + 312);
    if (v15)
      dispatch_source_cancel(v15);
    if (v13)
LABEL_33:
      CFRelease(v13);
  }
}

uint64_t __manager_invalidateInternal_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (*v4)(uint64_t);

  result = CMBaseObjectGetVTable();
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 32);
  if (v4)
    return v4(a2);
  return result;
}

void __manager_invalidateInternal_block_invoke_2(uint64_t a1, const void *a2)
{
  manager_removeCluster(*(_QWORD *)(a1 + 32), a2);
}

void manager_removeCluster(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, uint64_t, CFArrayRef *);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFIndex Count;
  CFIndex v12;
  CFIndex i;
  const void *ValueAtIndex;
  void (*v15)(const void *);
  uint64_t v16;
  void (*v17)(uint64_t, _QWORD, uint64_t, void **);
  CFTypeRef cf;
  CFArrayRef theArray;
  void *key;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theArray = 0;
  key = 0;
  cf = 0;
  v5 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v7 = *(void (**)(uint64_t, _QWORD, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v7)
    v7(CMBaseObject, *MEMORY[0x1E0CA43D0], v5, &theArray);
  v8 = APSGetFBOPropertyInt64();
  v9 = FigEndpointGetCMBaseObject();
  v10 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v10)
    v10(v9, *MEMORY[0x1E0CA41A0], v5, &cf);
  if (gLogCategory_APEndpointManager <= 50
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    APEndpointFigEndpointClusterTypeToAPSClusterType(cf);
    APSClusterTypeToDescriptionString();
    LogPrintF();
  }
  if (v8)
    manager_updateExposedLocalEndpoint(a1, *(_QWORD *)(DerivedStorage + 256));
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v12 = Count;
      for (i = 0; i != v12; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        if (gLogCategory_APEndpointManager <= 50
          && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        manager_removeEndpointFromCluster(a1, a2, ValueAtIndex);
      }
    }
  }
  v15 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v15)
    v15(a2);
  v16 = FigEndpointGetCMBaseObject();
  v17 = *(void (**)(uint64_t, _QWORD, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v17 && (v17(v16, *MEMORY[0x1E0CA4258], v5, &key), key))
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 224), key);
    APBrowserControllerRegisterClusterNeedsDiscovery();
  }
  else
  {
    APSLogErrorAt();
  }
  if (theArray)
    CFRelease(theArray);
  if (key)
    CFRelease(key);
  if (cf)
    CFRelease(cf);
}

uint64_t __manager_invalidateInternal_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t (*v5)(uint64_t);

  result = CMBaseObjectGetVTable();
  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 32);
  if (v5)
    return v5(a3);
  return result;
}

void manager_removeAllEndpointsIfNeeded(void *a1, const __CFDictionary *a2)
{
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex v6;
  const void *ValueAtIndex;

  CMBaseObjectGetDerivedStorage();
  v4 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  if (v4)
  {
    v5 = v4;
    if (CFArrayGetCount(v4) >= 1)
    {
      v6 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v5, v6);
        manager_removeEndpointForTransportDeviceIfNeeded(a1, ValueAtIndex, a2, 1);
        ++v6;
      }
      while (v6 < CFArrayGetCount(v5));
    }
    CFRelease(v5);
  }
}

void manager_handleClusterSubEndpointFailed(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  const void *Value;
  const void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  Value = CFDictionaryGetValue(a5, CFSTR("SubEndpoint"));
  if (Value)
  {
    v9 = Value;
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (manager_updateEndpointClusterMembershipIfNeeded(a2, v9, 1, 0)
      || (manager_removeEndpointIfNeeded((uint64_t)a2, (uint64_t)v9, 0), !APSGetFBOPropertyInt64())
      && manager_updateEndpointClusterMembershipIfNeeded(a2, v9, 0, 0))
    {
      APSLogErrorAt();
    }
  }
  JUMPOUT(0x1CAA400E4);
}

void manager_handleClusterDiscoveryModeCriteriaChanged()
{
  uint64_t CMBaseObject;
  void (*v1)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  if (gLogCategory_APEndpointManager <= 30
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  cf = 0;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 2))
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v1 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v1)
      v1(CMBaseObject, *MEMORY[0x1E0CA4258], *MEMORY[0x1E0C9AE00], &cf);
    APSGetFBOPropertyInt64();
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (APBrowserControllerRegisterClusterNeedsDiscovery())
      APSLogErrorAt();
    if (cf)
      CFRelease(cf);
  }
}

uint64_t manager_removeEndpointFromCluster(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(result + 2))
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(result + 216), a3);
    result = APSGetFBOPropertyInt64();
    if (!result)
    {
      APEndpointClusterRemoveSubEndpoint(a2, a3);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      return FigNotificationCenterAddWeakListener();
    }
  }
  return result;
}

uint64_t manager_updateEndpointClusterMembershipIfNeeded(void *a1, const void *a2, int a3, int a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  const void *Value;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const void *v15;
  CFTypeRef v16;
  BOOL v17;
  int v18;
  _BOOL4 v19;
  int v20;
  uint64_t CMBaseObject;
  void (*v22)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  CFIndex Count;
  CFTypeRef v24;
  const void *v25;
  const __CFAllocator *v26;
  CFMutableSetRef Mutable;
  CFMutableSetRef v28;
  CFMutableArrayRef v29;
  const __CFArray *v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  int v35;
  const void *v36;
  CFArrayRef v37[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v36 = 0;
  if (!*(_BYTE *)(DerivedStorage + 2))
    return 0;
  v9 = DerivedStorage;
  if (APSGetFBOPropertyInt64())
    goto LABEL_3;
  if (!a3)
    APEndpointCopyClusterInfo((uint64_t)a2, (uint64_t)&v36, 0, 0, 0, 0, 0, 0);
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 216), a2);
  v12 = APSGetFBOPropertyInt64();
  v13 = v12;
  if (!a4 || v12)
  {
    v14 = FigCFEqual();
    if (Value && (v15 = CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 224), Value)) != 0)
    {
      v16 = CFRetain(v15);
      if (v16)
      {
        if (v14)
          v17 = 1;
        else
          v17 = v13 == 0;
        v18 = !v17;
        if (v14)
        {
          v19 = 0;
        }
        else
        {
          v35 = v18;
          v37[0] = 0;
          CMBaseObject = FigEndpointGetCMBaseObject();
          v22 = *(void (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
          if (v22 && (v22(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], v37), v37[0]))
          {
            Count = CFArrayGetCount(v37[0]);
            if (v37[0])
              CFRelease(v37[0]);
          }
          else
          {
            Count = 0;
          }
          v19 = Count == 1;
          v18 = v35;
        }
        v34 = 0;
        v20 = v18 | v19 | a4;
LABEL_28:
        if (gLogCategory_APEndpointManager <= 30
          && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (v14 && !v20)
        {
          v10 = 0;
        }
        else
        {
          v24 = 0;
          if (!v14 && v36)
          {
            v25 = CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 224), v36);
            v24 = v25 ? CFRetain(v25) : 0;
            if (gLogCategory_APEndpointManager <= 30
              && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
          }
          v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
          if (Mutable)
          {
            v28 = Mutable;
            v29 = CFArrayCreateMutable(v26, 0, MEMORY[0x1E0C9B378]);
            if (!v29)
            {
              APSLogErrorAt();
              v10 = 4294960568;
LABEL_76:
              CFRelease(v28);
              if (!v24)
                goto LABEL_78;
              goto LABEL_77;
            }
            v30 = v29;
            if (v20)
            {
              v31 = manager_addClusterSubEndpoints();
              if ((_DWORD)v31)
              {
                v10 = v31;
                goto LABEL_91;
              }
              manager_removeCluster(a1, v16);
              if (gLogCategory_APEndpointManager > 30
                || gLogCategory_APEndpointManager == -1 && !_LogCategory_Initialize())
              {
LABEL_63:
                if (!v13 || !v24)
                {
LABEL_70:
                  CFSetApplyBlock();
                  CFArrayGetCount(v30);
                  CFArrayApplyBlock();
                  manager_notifyAvailableEndpointsChangedWithThrottleIfNeeded(a1, 1);
                  if (gLogCategory_APEndpointManager <= 30
                    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
                  {
                    LogPrintF();
                  }
                  v10 = 0;
                  goto LABEL_75;
                }
                v32 = manager_addClusterSubEndpoints();
                if (!(_DWORD)v32)
                {
                  manager_removeCluster(a1, v24);
                  if (gLogCategory_APEndpointManager <= 30
                    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
                  {
                    CFSetGetCount(v28);
                    LogPrintF();
                  }
                  goto LABEL_70;
                }
                v10 = v32;
LABEL_91:
                APSLogErrorAt();
LABEL_75:
                CFRelease(v30);
                goto LABEL_76;
              }
            }
            else if ((v34 & 1) != 0)
            {
              if (!v36)
                goto LABEL_63;
              CFSetAddValue(v28, a2);
              if (gLogCategory_APEndpointManager > 30
                || gLogCategory_APEndpointManager == -1 && !_LogCategory_Initialize())
              {
                goto LABEL_63;
              }
            }
            else
            {
              manager_removeEndpointFromCluster((uint64_t)a1, v16, a2);
              CFSetAddValue(v28, a2);
              if (gLogCategory_APEndpointManager > 30
                || gLogCategory_APEndpointManager == -1 && !_LogCategory_Initialize())
              {
                goto LABEL_63;
              }
            }
            CFSetGetCount(v28);
            LogPrintF();
            goto LABEL_63;
          }
          APSLogErrorAt();
          v10 = 4294960568;
          if (v24)
LABEL_77:
            CFRelease(v24);
        }
LABEL_78:
        if (v16)
          CFRelease(v16);
        goto LABEL_80;
      }
    }
    else
    {
      v16 = 0;
    }
    v20 = 0;
    v34 = 1;
    goto LABEL_28;
  }
  APSLogErrorAt();
LABEL_3:
  v10 = 0;
LABEL_80:
  if (v36)
    CFRelease(v36);
  return v10;
}

void manager_removeEndpointIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v8;
  uint64_t v9;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v7 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v7)
    v7(CMBaseObject, CFSTR("TransportDevice"), *MEMORY[0x1E0C9AE00], &cf);
  v8 = APSGetFBOPropertyInt64();
  v9 = 176;
  if (!v8)
    v9 = 168;
  manager_removeEndpointForTransportDeviceIfNeeded(a1, cf, *(_QWORD *)(DerivedStorage + v9), a3);
  if (cf)
    CFRelease(cf);
}

uint64_t manager_addClusterSubEndpoints()
{
  uint64_t CMBaseObject;
  uint64_t (*v1)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  uint64_t v2;
  uint64_t v3;
  CFArrayRef v5;

  v5 = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v1 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v1)
  {
    v3 = 4294954514;
LABEL_6:
    APSLogErrorAt();
    goto LABEL_7;
  }
  v2 = v1(CMBaseObject, *MEMORY[0x1E0CA43D0], *MEMORY[0x1E0C9AE00], &v5);
  if ((_DWORD)v2)
  {
    v3 = v2;
    goto LABEL_6;
  }
  v3 = (uint64_t)v5;
  if (!v5)
    return v3;
  CFArrayGetCount(v5);
  CFArrayApplyBlock();
  v3 = 0;
LABEL_7:
  if (v5)
    CFRelease(v5);
  return v3;
}

void __manager_updateEndpointClusterMembershipIfNeeded_block_invoke(uint64_t a1, void *value)
{
  if (*(void **)(a1 + 32) == value && *(_BYTE *)(a1 + 48))
    CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 40), 0, value);
  else
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), value);
}

void __manager_updateEndpointClusterMembershipIfNeeded_block_invoke_2(uint64_t a1, const void *a2)
{
  int v3;
  CFTypeRef v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t CMBaseObject;
  void (*v8)(uint64_t, _QWORD, _QWORD, void **);
  CFTypeRef cf;
  void *value;

  cf = 0;
  if (*(_BYTE *)(a1 + 48) && *(const void **)(a1 + 32) == a2)
  {
    if (gLogCategory_APEndpointManager <= 30
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    v3 = manager_copyOrCreateClusterForEndpoint(*(_QWORD *)(a1 + 40), a2, &cf);
    if (gLogCategory_APEndpointManager <= 30
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (v3)
    {
      APSLogErrorAt();
    }
    else
    {
      v4 = cf;
      if (!cf)
        return;
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      value = 0;
      if (*(_BYTE *)(DerivedStorage + 2))
      {
        v6 = DerivedStorage;
        CMBaseObject = FigEndpointGetCMBaseObject();
        v8 = *(void (**)(uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v8 && (v8(CMBaseObject, *MEMORY[0x1E0CA4380], *MEMORY[0x1E0C9AE00], &value), value))
        {
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v6 + 216), a2, value);
          if (!APSGetFBOPropertyInt64())
          {
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterRemoveWeakListener();
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterRemoveWeakListener();
            APEndpointClusterAddSubEndpoint(v4, a2);
          }
        }
        else
        {
          APSLogErrorAt();
        }
        if (value)
          CFRelease(value);
      }
    }
  }
  if (cf)
    CFRelease(cf);
}

uint64_t manager_copyOrCreateClusterForEndpoint(const void *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  void *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  void *value;
  CFTypeRef cf;
  int v17;
  uint64_t v18;
  void *key;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = 0;
  key = 0;
  v17 = 0;
  value = 0;
  cf = 0;
  if (a3)
  {
    v7 = DerivedStorage;
    if (*(_BYTE *)(DerivedStorage + 2)
      && (APEndpointCopyClusterInfo(a2, (uint64_t)&key, &v18, &v17, 0, 0, 0, (uint64_t)&cf), key))
    {
      v8 = CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 224), key);
      if (v8)
      {
        v9 = (void *)CFRetain(v8);
        value = v9;
        if (v9)
        {
LABEL_16:
          v13 = 0;
          *a3 = v9;
          value = 0;
          goto LABEL_17;
        }
      }
      else
      {
        value = 0;
      }
      v10 = APSGetFBOPropertyInt64();
      if (v10)
        v11 = (const void *)a2;
      else
        v11 = 0;
      v12 = APEndpointClusterCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], v11, key, v17, cf, v18, *(const void **)(v7 + 264), 0, (CFTypeRef *)&value);
      if (!(_DWORD)v12)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        if (v10)
        {
          manager_updateExposedLocalEndpoint((uint64_t)a1, value);
          if (manager_determineLocalClusterAction((uint64_t)a1, (uint64_t)value) == 1)
          {
            *(_DWORD *)(v7 + 328) = 0;
            manager_activateLocalCluster(a1, (uint64_t)value);
          }
        }
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v7 + 224), key, value);
        v9 = value;
        goto LABEL_16;
      }
      v13 = v12;
      APSLogErrorAt();
      if (value)
        CFRelease(value);
    }
    else
    {
      v13 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    v13 = 4294960591;
  }
LABEL_17:
  if (cf)
    CFRelease(cf);
  if (key)
    CFRelease(key);
  return v13;
}

void manager_notifyAvailableEndpointsChangedWithThrottleIfNeeded(void *a1, int a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 || FigCFEqual() || FigCFEqual())
  {
    CFRetain(a1);
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)manager_notifyAvailableEndpointsChangedWithThrottle);
  }
}

void __manager_addClusterSubEndpoints_block_invoke(uint64_t a1, const void *a2)
{
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), a2);
}

uint64_t manager_determineLocalClusterAction(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!a2)
  {
    APSLogErrorAt();
    return a2;
  }
  v4 = DerivedStorage;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v6 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v6)
  {
    v6(CMBaseObject, *MEMORY[0x1E0CA41A0], *MEMORY[0x1E0C9AE00], &cf);
    v7 = cf;
  }
  else
  {
    v7 = 0;
  }
  v8 = APEndpointFigEndpointClusterTypeToAPSClusterType(v7);
  if (v8 == 1)
  {
    if (*(_BYTE *)(v4 + 352))
    {
      v9 = APSGetFBOPropertyInt64();
      v10 = APSGetFBOPropertyInt64();
      if (v9)
        v11 = v10 == 0;
      else
        v11 = 0;
      if (v11)
      {
        a2 = 1;
      }
      else
      {
        if (v10)
          v12 = v9 == 0;
        else
          v12 = 0;
        if (v12)
          a2 = 2;
        else
          a2 = 0;
      }
      goto LABEL_21;
    }
  }
  else if (v8 == 2 && *(_DWORD *)(v4 + 348) == 4)
  {
    a2 = APSGetFBOPropertyInt64() == 0;
    goto LABEL_21;
  }
  a2 = 0;
LABEL_21:
  if (cf)
    CFRelease(cf);
  return a2;
}

void manager_activateLocalCluster(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v13;
  int v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, __CFDictionary *, _QWORD, _QWORD *);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (*(_BYTE *)(DerivedStorage + 1)
    || (v5 = DerivedStorage,
        v6 = *MEMORY[0x1E0C9AE00],
        (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0))
  {
    APSLogErrorAt();
    return;
  }
  v8 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("ActivatedByManager"), (const void *)*MEMORY[0x1E0C9AE50]);
  CFDictionarySetValue(v8, CFSTR("NetworkClock"), *(const void **)(v5 + 264));
  v9 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (!v9)
    goto LABEL_21;
  v10 = v9;
  *v9 = CFRetain(a1);
  CMBaseObject = FigEndpointGetCMBaseObject();
  v12 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v12)
  {
    v12(CMBaseObject, *MEMORY[0x1E0CA41A0], v6, &cf);
    v13 = cf;
  }
  else
  {
    v13 = 0;
  }
  v14 = APEndpointFigEndpointClusterTypeToAPSClusterType(v13);
  if (gLogCategory_APEndpointManager <= 50
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    APSClusterTypeToDescriptionString();
    LogPrintF();
  }
  if (v14 == 2)
  {
    v15 = 32;
  }
  else
  {
    if (v14 != 1)
    {
      if (gLogCategory_APEndpointManager <= 90
        && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_22;
    }
    v15 = 0;
  }
  v16 = *(unsigned int (**)(uint64_t, uint64_t, __CFDictionary *, _QWORD, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 8);
  if (!v16 || v16(a2, v15, v8, manager_activateLocalClusterCallback, v10))
LABEL_21:
    APSLogErrorAt();
LABEL_22:
  CFRelease(v8);
  if (cf)
    CFRelease(cf);
}

void manager_activateLocalClusterCallback(const void *a1, uint64_t a2, uint64_t a3, int a4, const void **a5)
{
  const void *v8;
  uint64_t DerivedStorage;
  int v10;
  int v11;
  unsigned int v12;
  dispatch_time_t v13;
  NSObject *v14;
  _QWORD block[6];

  v8 = *a5;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointManager <= 50
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a4)
  {
    if (a4 == -16723)
    {
      if (gLogCategory_APEndpointManager <= 50
        && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      v10 = *(_DWORD *)(DerivedStorage + 328);
      *(_DWORD *)(DerivedStorage + 328) = v10 + 1;
      if (v10 <= 4)
        v11 = 100;
      else
        v11 = 1000;
      if (v10 <= 9)
        v12 = v11;
      else
        v12 = 5000;
      if (v8)
        CFRetain(v8);
      if (a1)
        CFRetain(a1);
      if (gLogCategory_APEndpointManager <= 50
        && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v13 = dispatch_time(0, 1000000 * v12);
      v14 = *(NSObject **)(DerivedStorage + 8);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __manager_activateLocalClusterCallback_block_invoke;
      block[3] = &__block_descriptor_48_e5_v8__0l;
      block[4] = v8;
      block[5] = a1;
      dispatch_after(v13, v14, block);
    }
  }
  else
  {
    *(_DWORD *)(DerivedStorage + 328) = 0;
  }
  if (v8)
    CFRelease(v8);
  free(a5);
}

void __manager_activateLocalClusterCallback_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t DerivedStorage;
  const void *v5;
  const void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  manager_activateLocalCluster(v2, v3);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 64));
  v5 = *(const void **)(a1 + 32);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 40);
  if (v6)
    CFRelease(v6);
}

uint64_t manager_handleEndpointIsInUseDidChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  _BOOL8 v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = CFDictionaryGetInt64();
  if (!result)
  {
    v8 = CFDictionaryGetInt64() != 0;
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
    manager_removeEndpointIfNeeded(a2, a4, v8);
    JUMPOUT(0x1CAA400E4);
  }
  return result;
}

void manager_notifyAvailableEndpointsChangedWithThrottle(const void *a1)
{
  uint64_t DerivedStorage;
  OpaqueCMClock *HostTimeClock;
  int64_t value;
  dispatch_source_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  dispatch_time_t v10;
  _QWORD v11[5];
  _QWORD handler[5];
  CMTime rhs;
  CMTime time2;
  CMTime time1;
  CMTime v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v16, HostTimeClock);
  if ((*(_BYTE *)(DerivedStorage + 44) & 1) != 0
    && (time1 = *(CMTime *)(DerivedStorage + 32), time2 = v16, CMTimeCompare(&time1, &time2) > 0))
  {
    if (*(_QWORD *)(DerivedStorage + 56))
    {
      if (gLogCategory_APEndpointManager <= 10
        && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      time2 = *(CMTime *)(DerivedStorage + 32);
      rhs = v16;
      CMTimeSubtract(&time1, &time2, &rhs);
      time2 = time1;
      CMTimeConvertScale(&time1, &time2, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      if ((time1.flags & 0x1D) != 1)
        goto LABEL_25;
      value = time1.value;
      time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      if (CMTimeCompare(&time1, &time2) < 0)
        goto LABEL_25;
      if (gLogCategory_APEndpointManager <= 10
        && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v5 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(DerivedStorage + 8));
      *(_QWORD *)(DerivedStorage + 56) = v5;
      if (v5)
      {
        CFRetain(a1);
        v6 = MEMORY[0x1E0C809B0];
        v7 = *(NSObject **)(DerivedStorage + 56);
        handler[0] = MEMORY[0x1E0C809B0];
        handler[1] = 3221225472;
        handler[2] = __manager_notifyAvailableEndpointsChangedWithThrottle_block_invoke;
        handler[3] = &__block_descriptor_40_e5_v8__0l;
        handler[4] = a1;
        dispatch_source_set_cancel_handler(v7, handler);
        v8 = *(NSObject **)(DerivedStorage + 56);
        v11[0] = v6;
        v11[1] = 3221225472;
        v11[2] = __manager_notifyAvailableEndpointsChangedWithThrottle_block_invoke_2;
        v11[3] = &__block_descriptor_40_e5_v8__0l;
        v11[4] = a1;
        dispatch_source_set_event_handler(v8, v11);
        v9 = *(NSObject **)(DerivedStorage + 56);
        v10 = dispatch_time(0, value);
        dispatch_source_set_timer(v9, v10, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
        dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 56));
      }
      else
      {
LABEL_25:
        APSLogErrorAt();
        APSSignalErrorAt();
      }
    }
  }
  else
  {
    if (gLogCategory_APEndpointManager <= 10
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFRetain(a1);
    manager_notifyAvailableEndpointsChanged(a1);
  }
  if (a1)
    CFRelease(a1);
}

void __manager_notifyAvailableEndpointsChangedWithThrottle_block_invoke(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    CFRelease(v1);
}

void __manager_notifyAvailableEndpointsChangedWithThrottle_block_invoke_2(uint64_t a1)
{
  CFRetain(*(CFTypeRef *)(a1 + 32));
  manager_notifyAvailableEndpointsChanged(*(const void **)(a1 + 32));
}

void manager_removeEndpointForTransportDeviceIfNeeded(void *a1, const void *a2, const __CFDictionary *a3, int a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v9 = DerivedStorage;
    if (a4)
      CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 184), a2);
    if (CFDictionaryGetValue(a3, a2) && !APSGetFBOPropertyInt64())
    {
      if (CFSetContainsValue(*(CFSetRef *)(v9 + 184), a2))
        manager_removeEndpointForTransportDevice(a1, a3, a2);
    }
  }
  else
  {
    APSLogErrorAt();
  }
}

void manager_removeEndpointForTransportDevice(void *a1, const __CFDictionary *a2, const void *a3)
{
  CFDictionaryRef *DerivedStorage;
  const void *Value;
  const void *v8;
  void (*v9)(const void *);

  DerivedStorage = (CFDictionaryRef *)CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(a2, a3);
  if (Value)
  {
    v8 = Value;
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    manager_updateEndpointClusterMembershipIfNeeded(a1, v8, 1, 0);
    if (!APSGetFBOPropertyInt64())
      manager_updateAggregatedInterruptingSessionStateIfNeeded((uint64_t)a1, v8, 0);
    v9 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v9)
      v9(v8);
    if (APTransportDeviceIsAssistedDevice())
    {
      APBrowserControllerRemoveInjectedEndpoint();
      if (gLogCategory_APEndpointManager <= 50
        && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    CFDictionaryRemoveValue(a2, a3);
    if (!CFDictionaryContainsKey(DerivedStorage[21], a3) && !CFDictionaryContainsKey(DerivedStorage[22], a3))
      CFSetRemoveValue(DerivedStorage[23], a3);
    manager_notifyAvailableEndpointsChangedWithThrottleIfNeeded(a1, 1);
  }
}

void manager_handleInterruptingSessionStateDidChange(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  _BOOL4 v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = CFDictionaryGetInt64() != 0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  manager_updateAggregatedInterruptingSessionStateIfNeeded(a2, a4, v7);
  JUMPOUT(0x1CAA400E4);
}

CFIndex manager_updateAggregatedInterruptingSessionStateIfNeeded(uint64_t a1, const void *a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFIndex Count;
  int v8;
  uint64_t v9;
  CFIndex result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = CMBaseObjectGetDerivedStorage();
  Count = CFSetGetCount(*(CFSetRef *)(v6 + 208));
  v8 = CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 208), a2);
  if (a3)
  {
    if (!v8)
    {
      CFSetSetValue(*(CFMutableSetRef *)(DerivedStorage + 208), a2);
      goto LABEL_15;
    }
    if (gLogCategory_APEndpointManager <= 90
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_11;
    }
  }
  else
  {
    if (v8)
    {
      CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 208), a2);
      goto LABEL_15;
    }
    if (gLogCategory_APEndpointManager <= 30
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
LABEL_11:
      LogPrintF();
    }
  }
LABEL_15:
  v9 = CMBaseObjectGetDerivedStorage();
  result = CFSetGetCount(*(CFSetRef *)(v9 + 208));
  if (Count > 0 != result > 0)
  {
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return manager_getAndPostSenderStateUpdate();
  }
  return result;
}

uint64_t manager_getAndPostSenderStateUpdate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  __CFDictionary *Mutable;
  uint64_t CMBaseObject;
  uint64_t (*v4)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v5;
  uint64_t v6;
  CFIndex Count;
  const void **v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD block[5];
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v9 = 4294960568;
    goto LABEL_15;
  }
  if (*(_QWORD *)(DerivedStorage + 240))
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v4 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v4)
    {
      v5 = v4(CMBaseObject, CFSTR("LocalRouteState"), v1, &cf);
      if (!(_DWORD)v5)
      {
        FigCFDictionarySetValueFromKeyInDict();
        FigCFDictionarySetValueFromKeyInDict();
        FigCFDictionarySetValueFromKeyInDict();
        goto LABEL_6;
      }
      v9 = v5;
    }
    else
    {
      v9 = 4294954514;
    }
    APSLogErrorAt();
    goto LABEL_15;
  }
LABEL_6:
  v6 = CMBaseObjectGetDerivedStorage();
  Count = CFSetGetCount(*(CFSetRef *)(v6 + 208));
  v8 = (const void **)MEMORY[0x1E0C9AE50];
  if (Count < 1)
    v8 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(Mutable, CFSTR("NonBuddyConnectionActive"), *v8);
  if (gLogCategory_APEndpointManager <= 50
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(Mutable);
  v10 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __manager_getAndPostSenderStateUpdate_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = Mutable;
  dispatch_async(v10, block);
  v9 = 0;
LABEL_15:
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  return v9;
}

void __manager_getAndPostSenderStateUpdate_block_invoke(uint64_t a1)
{
  APSXPCServerPostEvent();
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

BOOL manager_isEndpointLocalAndSuppressed()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return (*(_BYTE *)(DerivedStorage + 160) || *(_BYTE *)(DerivedStorage + 161)) && APSGetFBOPropertyInt64() != 0;
}

void manager_copyEndpointInfoForShowInfo(CFArrayRef theArray, __CFArray **a2, __CFArray **a3)
{
  uint64_t Count;
  const __CFAllocator *v7;
  CFMutableArrayRef Mutable;
  __CFArray *v9;
  __CFArray *v10;
  CFIndex i;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  __CFArray **v14;
  void *value;

  value = 0;
  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    APSLogErrorAt();
    return;
  }
  v9 = Mutable;
  v10 = CFArrayCreateMutable(v7, Count, MEMORY[0x1E0C9B378]);
  if (v10)
  {
    v14 = a3;
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        CFArrayGetValueAtIndex(theArray, i);
        value = 0;
        CMBaseObject = FigEndpointGetCMBaseObject();
        v13 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
        if (v13)
          v13(CMBaseObject, CFSTR("EndpointShowInfo"), v7, &value);
        if (value)
        {
          CFArrayAppendValue(v9, value);
          if (CFDictionaryGetInt64())
            CFArrayAppendValue(v10, value);
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
        }
      }
    }
    if (a2)
    {
      *a2 = v10;
      v10 = 0;
    }
    if (v14)
    {
      *v14 = v9;
      if (!v10)
        return;
      goto LABEL_20;
    }
  }
  else
  {
    APSLogErrorAt();
  }
  CFRelease(v9);
  if (!v10)
    return;
LABEL_20:
  CFRelease(v10);
}

const __CFDictionary *manager_AppendEndpointShowInfo(const __CFDictionary *result, uint64_t a2, uint64_t a3)
{
  const __CFDictionary *v5;
  uint64_t Int64;
  const __CFArray *Value;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;

  if (result)
  {
    v5 = result;
    CFDictionaryGetValue(result, CFSTR("EndpointHash"));
    DataBuffer_AppendF();
    CFDictionaryGetValue(v5, CFSTR("Name"));
    DataBuffer_AppendF();
    Int64 = CFDictionaryGetInt64();
    if (CFDictionaryGetInt64())
    {
      CFDictionaryGetValue(v5, CFSTR("PersistentGroupType"));
      CFDictionaryGetValue(v5, CFSTR("PersistentGroupUUID"));
      CFDictionaryGetInt64Ranged();
      Value = (const __CFArray *)CFDictionaryGetValue(v5, CFSTR("SubEndpointShowInfoDicts"));
      if (Value)
      {
        v8 = Value;
        Count = CFArrayGetCount(Value);
        result = (const __CFDictionary *)DataBuffer_AppendF();
        if (Count >= 1)
        {
          for (i = 0; i != Count; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v8, i);
            DataBuffer_AppendF();
            result = (const __CFDictionary *)manager_AppendEndpointShowInfo(ValueAtIndex, a2, a3);
          }
        }
      }
      else
      {
        return (const __CFDictionary *)DataBuffer_AppendF();
      }
    }
    else
    {
      if (CFDictionaryGetValue(v5, CFSTR("DiscoveryID")))
        DataBuffer_AppendF();
      CFDictionaryGetValue(v5, CFSTR("DeviceID"));
      DataBuffer_AppendF();
      CFDictionaryGetValue(v5, CFSTR("Model"));
      DataBuffer_AppendF();
      CFDictionaryGetValue(v5, CFSTR("SourceVersion"));
      DataBuffer_AppendF();
      CFDictionaryGetValue(v5, CFSTR("Hidden"));
      DataBuffer_AppendF();
      CFDictionaryGetValue(v5, CFSTR("AirPlayFeatures"));
      APSFeaturesCopyStringRepresentation();
      DataBuffer_AppendF();
      CFDictionaryGetInt64();
      DataBuffer_AppendF();
      CFDictionaryGetValue(v5, CFSTR("SelectionState"));
      DataBuffer_AppendF();
      CFDictionaryGetValue(v5, CFSTR("Started"));
      CFDictionaryGetValue(v5, CFSTR("VideoPlaying"));
      DataBuffer_AppendF();
      CFDictionaryGetInt64();
      DataBuffer_AppendF();
      CFDictionaryGetValue(v5, CFSTR("IsRemoteControlEndpoint"));
      DataBuffer_AppendF();
      CFDictionaryGetValue(v5, CFSTR("IsClusterLeader"));
      DataBuffer_AppendF();
      CFDictionaryGetInt64Ranged();
      DataBuffer_AppendF();
      CFDictionaryGetInt64Ranged();
      DataBuffer_AppendF();
      if (Int64)
        DataBuffer_AppendF();
      v12 = (const __CFDictionary *)CFDictionaryGetValue(v5, CFSTR("SenderSessionInfo"));
      if (v12)
      {
        v13 = (const __CFDictionary *)CFDictionaryGetValue(v12, CFSTR("TransportSessionInfo"));
        if (v13)
        {
          if (CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E0CF1EE8]))
            DataBuffer_AppendF();
        }
      }
      result = (const __CFDictionary *)DataBuffer_AppendF();
      if ((_DWORD)a2)
      {
        v14 = CFDictionaryGetValue(v5, CFSTR("StreamInfo_Screen"));
        manager_AppendEndpointStreamShowInfo((uint64_t)v14);
        v15 = CFDictionaryGetValue(v5, CFSTR("StreamInfo_RealTimeAudio"));
        manager_AppendEndpointStreamShowInfo((uint64_t)v15);
        v16 = CFDictionaryGetValue(v5, CFSTR("StreamInfo_BufferedAudio"));
        manager_AppendEndpointStreamShowInfo((uint64_t)v16);
        v17 = CFDictionaryGetValue(v5, CFSTR("StreamInfo_LowLatencyAudio"));
        return (const __CFDictionary *)manager_AppendEndpointStreamShowInfo((uint64_t)v17);
      }
    }
  }
  return result;
}

void __manager_copyShowInfo_block_invoke(uint64_t a1, const void *a2, CFDictionaryRef theDict)
{
  const void *Value;
  const __CFAllocator *v7;
  CFIndex Count;
  __CFDictionary *MutableCopy;
  __CFDictionary *v10;
  const void *v11;
  __CFArray *v12;
  CFMutableArrayRef Mutable;

  Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CF7538]);
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Count = CFDictionaryGetCount(theDict);
  MutableCopy = CFDictionaryCreateMutableCopy(v7, Count + 1, theDict);
  if (!MutableCopy)
    __manager_copyShowInfo_block_invoke_cold_1();
  v10 = MutableCopy;
  CFDictionaryAddValue(MutableCopy, CFSTR("deviceID"), a2);
  v11 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), Value);
  if (v11)
  {
    v12 = (__CFArray *)CFRetain(v11);
    if (v12)
    {
      Mutable = v12;
      CFArrayAppendValue(v12, v10);
LABEL_6:
      CFRelease(Mutable);
      goto LABEL_7;
    }
  }
  Mutable = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), Value, Mutable);
  CFArrayAppendValue(Mutable, v10);
  if (Mutable)
    goto LABEL_6;
LABEL_7:
  CFRelease(v10);
}

void __manager_copyShowInfo_block_invoke_2(int a1, int a2, CFArrayRef theArray)
{
  const __CFDictionary *ValueAtIndex;
  CFIndex Count;
  const __CFDictionary *v6;
  const __CFString *Value;
  const __CFString *v8;
  const __CFAllocator *v9;
  const void *v10;
  CFIndex v11;
  const void *v12;
  CFIndex Length;
  __CFString *MutableCopy;
  __CFString *v15;

  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 0);
  Count = CFArrayGetCount(theArray);
  CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CF7520]);
  DataBuffer_AppendF();
  if (Count >= 1)
  {
    v6 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 0);
    Value = (const __CFString *)CFDictionaryGetValue(v6, CFSTR("deviceID"));
    if (Value)
    {
      v8 = Value;
      v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v10 = (const void *)*MEMORY[0x1E0CF7518];
      v11 = 1;
      v12 = (const void *)*MEMORY[0x1E0CF7510];
      while (1)
      {
        Length = CFStringGetLength(v8);
        MutableCopy = CFStringCreateMutableCopy(v9, Length, v8);
        if (!MutableCopy)
          break;
        v15 = MutableCopy;
        CFStringTrim(MutableCopy, CFSTR("PSGDataSource::PSGInfo::"));
        DataBuffer_AppendF();
        if (CFDictionaryContainsKey(v6, v10))
        {
          CFDictionaryGetValue(v6, v10);
          DataBuffer_AppendF();
        }
        if (CFDictionaryContainsKey(v6, v12))
        {
          CFDictionaryGetInt64();
          DataBuffer_AppendF();
        }
        DataBuffer_AppendF();
        if (Count == v11)
          goto LABEL_12;
        v6 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v11);
        v8 = (const __CFString *)CFDictionaryGetValue(v6, CFSTR("deviceID"));
        ++v11;
        if (!v8)
          goto LABEL_11;
      }
      APSLogErrorAt();
    }
    else
    {
      v15 = 0;
LABEL_11:
      APSLogErrorAt();
      if (v15)
LABEL_12:
        CFRelease(v15);
    }
  }
}

uint64_t manager_AppendEndpointStreamShowInfo(uint64_t result)
{
  const __CFDictionary *v1;
  const void *v2;
  void *value;

  if (result)
  {
    v1 = (const __CFDictionary *)result;
    CFDictionaryGetInt64();
    DataBuffer_AppendF();
    CFDictionaryGetInt64();
    DataBuffer_AppendF();
    CFDictionaryGetValue(v1, CFSTR("Type"));
    DataBuffer_AppendF();
    value = (void *)CFDictionaryGetValue(v1, CFSTR("Subtype"));
    if (value)
      DataBuffer_AppendF();
    CFDictionaryGetValue(v1, CFSTR("Name"));
    DataBuffer_AppendF();
    if (CFDictionaryGetValueIfPresent(v1, CFSTR("ScreenInfo"), (const void **)&value))
    {
      v2 = (const void *)FigCFCopyCompactDescription();
      DataBuffer_AppendF();
      if (v2)
        CFRelease(v2);
    }
    return DataBuffer_AppendF();
  }
  return result;
}

uint64_t manager_ConfigureForMaximumDiscovery()
{
  uint64_t v0;

  CMBaseObjectGetDerivedStorage();
  v0 = APBrowserControllerConfigureForMaximumDiscovery();
  if ((_DWORD)v0)
    APSLogErrorAt();
  return v0;
}

uint64_t manager_CreateAggregateEndpoint(uint64_t a1, int a2, void **a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  if (a2 == 3)
  {
    v8 = APEndpointAggregateCreateAsSystemRemotePool(*MEMORY[0x1E0C9AE00], &value);
    if ((_DWORD)v8)
    {
      v7 = v8;
      goto LABEL_20;
    }
    goto LABEL_6;
  }
  if (!a2)
  {
    v6 = APEndpointAggregateCreateAsSystemMusicAggregate(*MEMORY[0x1E0C9AE00], *(_DWORD *)(DerivedStorage + 4), *(const void **)(DerivedStorage + 264), &value);
    if ((_DWORD)v6)
    {
      v7 = v6;
LABEL_20:
      APSLogErrorAt();
      goto LABEL_16;
    }
LABEL_6:
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 192), value);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    v7 = 0;
    *a3 = value;
    value = 0;
    goto LABEL_16;
  }
  if (gLogCategory_APEndpointManager <= 90
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v7 = 4294950586;
LABEL_16:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 64));
  if (value)
    CFRelease(value);
  return v7;
}

uint64_t manager_CopyRemoteControlDepotEndpoint(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v5;
  _QWORD v7[3];
  unsigned int v8;

  v8 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = &v8;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  if (manager_CopyRemoteControlDepotEndpoint_createDepotOnce != -1)
    dispatch_once_f(&manager_CopyRemoteControlDepotEndpoint_createDepotOnce, v7, (dispatch_function_t)manager_createRemoteControlEndpointDepotInternalOnce);
  v5 = *(CFTypeRef *)(DerivedStorage + 200);
  if (v5)
    v5 = CFRetain(v5);
  *a2 = v5;
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 64));
  return v8;
}

void manager_handleAggregateEndpointDissociated(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  const __CFArray *v6;
  CFIndex FirstIndexOfValue;
  CFRange v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointManager <= 50
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  v6 = *(const __CFArray **)(DerivedStorage + 192);
  v8.length = CFArrayGetCount(v6);
  v8.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v6, v8, a4);
  if (FirstIndexOfValue == -1)
    APSLogErrorAt();
  else
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 192), FirstIndexOfValue);
  JUMPOUT(0x1CAA400E4);
}

uint64_t manager_createRemoteControlEndpointDepotInternalOnce(uint64_t a1)
{
  uint64_t DerivedStorage;
  int AsSystemRemotePool;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  AsSystemRemotePool = APEndpointAggregateCreateAsSystemRemotePool(*MEMORY[0x1E0C9AE00], (_QWORD *)(DerivedStorage + 200));
  if (AsSystemRemotePool)
  {
    result = APSLogErrorAt();
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    result = FigNotificationCenterAddWeakListener();
  }
  **(_DWORD **)(a1 + 16) = AsSystemRemotePool;
  return result;
}

void manager_deactivateLocalCluster(uint64_t a1, uint64_t a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v4;
  unsigned int (*v5)(uint64_t, __CFDictionary *, _QWORD, _QWORD);

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("ActivatedByManager"), (const void *)*MEMORY[0x1E0C9AE50]);
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v5 = *(unsigned int (**)(uint64_t, __CFDictionary *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 16);
    if (!v5 || v5(a2, v4, 0, 0))
      APSLogErrorAt();
    CFRelease(v4);
  }
  else
  {
    APSLogErrorAt();
  }
}

void manager_updatePSGInfoOnEndpoint()
{
  uint64_t CMBaseObject;
  void (*v1)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, const __CFString *, uint64_t);
  CFTypeRef cf;

  cf = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v1 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v1)
  {
    v1(CMBaseObject, *MEMORY[0x1E0CA4258], *MEMORY[0x1E0C9AE00], &cf);
    if (cf)
    {
      Value = FigCFDictionaryGetValue();
      if (Value)
      {
        v3 = Value;
        if (gLogCategory_APEndpointManager <= 30
          && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v4 = FigEndpointGetCMBaseObject();
        v5 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
        if (v5)
          v5(v4, CFSTR("PermanentSpeakerGroupingInfo"), v3);
      }
      if (cf)
        CFRelease(cf);
    }
  }
}

void manager_handleLocalRouteStateChanged()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  manager_getAndPostSenderStateUpdate();
  JUMPOUT(0x1CAA400E4);
}

void manager_handleClusterChangeDeactivationFinish(uint64_t a1, void *a2, uint64_t a3, const void *a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const void *v10;
  const void *Value;
  uint64_t v12;
  const void *v13;
  const __CFArray *v14;
  int v15;
  CFIndex v16;
  const void *ValueAtIndex;
  uint64_t v18;
  int v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = APSGetFBOPropertyInt64();
  if (v9)
    v10 = a4;
  else
    v10 = 0;
  if (v9)
    Value = 0;
  else
    Value = a4;
  if (gLogCategory_APEndpointManager <= 50
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  if (v10)
  {
    if (a5)
      Value = CFDictionaryGetValue(a5, CFSTR("SourceEndpoint"));
    a4 = Value;
    if (!Value)
    {
      if (gLogCategory_APEndpointManager <= 90
        && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      manager_removeCluster((uint64_t)a2, v10);
      goto LABEL_27;
    }
  }
  else if (!Value)
  {
    goto LABEL_27;
  }
  if (gLogCategory_APEndpointManager <= 50
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (manager_updateEndpointClusterMembershipIfNeeded(a2, a4, 0, 1))
    APSLogErrorAt();
LABEL_27:
  if (*(_BYTE *)(DerivedStorage + 160))
  {
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_BYTE *)(DerivedStorage + 160) = 0;
    v12 = CMBaseObjectGetDerivedStorage();
    v13 = CFDictionaryGetValue(*(CFDictionaryRef *)(v12 + 216), *(const void **)(v12 + 256));
    CFDictionaryGetValue(*(CFDictionaryRef *)(v12 + 224), v13);
    v14 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
    if (CFArrayGetCount(v14) < 1)
      goto LABEL_60;
    v15 = 0;
    v16 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v14, v16);
      v18 = APSGetFBOPropertyInt64();
      v19 = FigCFEqual();
      if (v18)
      {
        if (!v19)
        {
          if (gLogCategory_APEndpointManager <= 90
            && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          manager_removeCluster((uint64_t)a2, ValueAtIndex);
          v15 = -71790;
        }
      }
      else if (v19)
      {
        v15 = -71790;
        if (gLogCategory_APEndpointManager <= 90
          && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      ++v16;
    }
    while (v16 < CFArrayGetCount(v14));
    if (!v15)
    {
LABEL_60:
      if (gLogCategory_APEndpointManager <= 30
        && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    if (v14)
      CFRelease(v14);
  }
  CFRetain(a2);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a2, (dispatch_function_t)manager_notifyAvailableEndpointsChanged);
  JUMPOUT(0x1CAA400E4);
}

BOOL manager_exposedLocalEndpointIsPersistentlyConnectedCluster()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v4;
  int v5;
  _BOOL8 v6;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!*(_QWORD *)(DerivedStorage + 256))
    return 0;
  v1 = DerivedStorage;
  if (FigCFEqual())
  {
LABEL_9:
    v6 = 0;
    goto LABEL_11;
  }
  CMBaseObject = FigEndpointGetCMBaseObject();
  v3 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v3)
  {
    v3(CMBaseObject, *MEMORY[0x1E0CA41A0], *MEMORY[0x1E0C9AE00], &cf);
    v4 = cf;
  }
  else
  {
    v4 = 0;
  }
  v5 = APEndpointFigEndpointClusterTypeToAPSClusterType(v4);
  if (v5 != 1)
  {
    if (v5 == 2)
    {
      v6 = *(_DWORD *)(v1 + 348) == 4;
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  v6 = *(_BYTE *)(v1 + 352) != 0;
LABEL_11:
  if (cf)
    CFRelease(cf);
  return v6;
}

void manager_handleClusterChangeDeactivationRequired(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t Int64;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Int64 = CFDictionaryGetInt64();
  if (gLogCategory_APEndpointManager <= 50
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  if (Int64 && !*(_BYTE *)(DerivedStorage + 160))
  {
    *(_BYTE *)(DerivedStorage + 160) = Int64 != 0;
    CFRetain(a2);
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a2, (dispatch_function_t)manager_notifyAvailableEndpointsChanged);
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 64));
  manager_deactivateLocalCluster((uint64_t)a2, a4);
}

void manager_handleNonPersistentReceiverSessionStartedOnLocalHTSecondary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;

  if (a5)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      APSLogErrorAt();
      return;
    }
    v6 = Mutable;
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
  }
  else
  {
    v6 = 0;
  }
  if (gLogCategory_APEndpointManager <= 50
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APSXPCServerPostEvent();
  if (v6)
    CFRelease(v6);
}

void __manager_asyncRegisterAirPlayHALDriverInternal_block_invoke(uint64_t a1)
{
  if (gLogCategory_APEndpointManager <= 50
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  manager_AudioServerPluginInterruptionHandler(*(const void **)(a1 + 32));
}

void manager_AudioServerPluginInterruptionHandler(const void *a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t DerivedStorage;
  dispatch_time_t v5;
  NSObject *v6;
  _QWORD block[5];

  v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2)
  {
    v3 = (const void *)v2;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (a1)
      CFRetain(a1);
    v5 = dispatch_time(0, 1000000000);
    v6 = *(NSObject **)(DerivedStorage + 8);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __manager_AudioServerPluginInterruptionHandler_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = a1;
    dispatch_after(v5, v6, block);
    CFRelease(v3);
  }
}

void __manager_asyncStartNetworkClock_block_invoke(uint64_t a1)
{
  uint64_t i;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  int v7;

  for (i = *(_QWORD *)(a1 + 32); !*(_BYTE *)(i + 1); i = *(_QWORD *)(a1 + 32))
  {
    if (gLogCategory_APEndpointManager <= 30)
    {
      if (gLogCategory_APEndpointManager != -1 || (v3 = _LogCategory_Initialize(), i = *(_QWORD *)(a1 + 32), v3))
      {
        LogPrintF();
        i = *(_QWORD *)(a1 + 32);
      }
    }
    v4 = *(_QWORD *)(i + 264);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
    if (v6)
      v7 = v6(v4, v5);
    else
      v7 = -12782;
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!v7)
      break;
    sleep(2u);
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __manager_initAndStartDeviceMetricsTimer_block_invoke()
{
  uint64_t DerivedStorage;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v2;
  const __CFSet *v3;
  unsigned int Count;
  uint64_t v5;
  unsigned int v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (APSRTCReportingAgentCreate())
  {
    APSLogErrorAt();
  }
  else
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v2 = Mutable;
      MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
      v3 = *(const __CFSet **)(DerivedStorage + 248);
      if (v3)
      {
        Count = CFSetGetCount(v3);
        v5 = 5;
        do
        {
          if (v5 == -1)
            break;
          v6 = dword_1C964D8D8[v5--];
        }
        while (v6 > Count);
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        CFDictionarySetValue(v2, CFSTR("sessionType"), CFSTR("Discovery"));
        APSRTCReportingAgentSendEvent();
        if (gLogCategory_APEndpointManager <= 30
          && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CFSetRemoveAllValues(*(CFMutableSetRef *)(DerivedStorage + 248));
        if (gLogCategory_APEndpointManager <= 50
          && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        *(_QWORD *)(DerivedStorage + 320) = 0;
      }
      MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 64));
      CFRelease(v2);
    }
  }
}

uint64_t manager_setAVDevicePresence(uint64_t a1, char a2)
{
  uint64_t DerivedStorage;
  int v4;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = manager_areEndpointsPresent();
  *(_BYTE *)(DerivedStorage + 96) = a2;
  result = manager_areEndpointsPresent();
  if (v4 != (_DWORD)result)
  {
    if (gLogCategory_APEndpointManager <= 40
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return manager_postEndpointPresentChangedNotification();
  }
  return result;
}

uint64_t manager_postEndpointPresentChangedNotification()
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointManager <= 40
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDispatchAsyncPostNotification();
}

uint64_t manager_injectEndpoint(void *a1, const __CFDictionary *a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t Int64;
  const void *Value;
  _QWORD *v11;
  uint64_t CMBaseObject;
  uint64_t (*v13)(uint64_t, const __CFString *, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(const void *, const __CFString *, _QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, _QWORD, const void *);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(const void *, _QWORD, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 64));
  if (CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 168), a3))
  {
    if (gLogCategory_APEndpointManager <= 90
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    manager_removeEndpointForTransportDeviceIfNeeded(a1, a3, *(const __CFDictionary **)(DerivedStorage + 168), 1);
  }
  Int64 = CFDictionaryGetInt64();
  Value = CFDictionaryGetValue(a2, CFSTR("AuthString"));
  v11 = (_QWORD *)MEMORY[0x1E0C9AE50];
  if (Int64)
  {
    CMBaseObject = FigEndpointGetCMBaseObject();
    v13 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v13)
    {
      v15 = 4294954514;
      goto LABEL_28;
    }
    v14 = v13(CMBaseObject, CFSTR("ScreenUsageMode"), *MEMORY[0x1E0CC6790]);
    if ((_DWORD)v14)
    {
      v15 = v14;
LABEL_28:
      APSLogErrorAt();
      goto LABEL_36;
    }
  }
  else if (!CFDictionaryGetInt64())
  {
    goto LABEL_14;
  }
  v16 = *(uint64_t (**)(const void *, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
  if (!v16)
  {
    v15 = 4294954514;
    goto LABEL_28;
  }
  v17 = v16(a4, CFSTR("StartSilentAudio"), *v11);
  if ((_DWORD)v17)
  {
    v15 = v17;
    goto LABEL_28;
  }
LABEL_14:
  if (Value)
  {
    v18 = FigEndpointGetCMBaseObject();
    v19 = *(uint64_t (**)(uint64_t, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v19)
    {
      v15 = 4294954514;
      goto LABEL_28;
    }
    v20 = v19(v18, *MEMORY[0x1E0CA4378], Value);
    if ((_DWORD)v20)
    {
      v15 = v20;
      goto LABEL_28;
    }
  }
  v21 = CFDictionaryGetInt64();
  v22 = *(void (**)(const void *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v22)
  {
    if (v21)
      v23 = *MEMORY[0x1E0C9AE40];
    else
      v23 = *v11;
    v22(a4, *MEMORY[0x1E0CA4130], v23);
  }
  if (gLogCategory_APEndpointManager <= 50
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  manager_addEndpoint(a1, a3, a4, *(__CFDictionary **)(DerivedStorage + 168));
  manager_postEndpointPresentChangedNotification();
  if (gLogCategory_APEndpointManager <= 50
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  v24 = FigDispatchAsyncPostNotification();
  v15 = 0;
  if ((_DWORD)v24)
  {
    v26 = v24;
    APSLogErrorAt();
    v15 = v26;
  }
LABEL_36:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 64));
  return v15;
}

void manager_handleEndpointEvent(void *a1, const void *a2, int a3, int a4, int a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFDictionary *v14;
  const void *Value;
  int v16;
  int updated;
  __CFDictionary *v18;
  uint64_t v19;
  const __CFDictionary *v20;
  uint64_t v21;
  __CFDictionary *Mutable;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  int v28;
  uint64_t v29;
  uint64_t CMBaseObject;
  uint64_t (*v31)(uint64_t, _QWORD, uint64_t);
  int v32;
  int v33;
  int v34;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    v11 = CMBaseObjectGetDerivedStorage();
    v12 = v11;
    cf = 0;
    v13 = 168;
    if (a3)
      v13 = 176;
    v14 = *(const __CFDictionary **)(v11 + v13);
    CFSetRemoveValue(*(CFMutableSetRef *)(v11 + 184), a2);
    if (CFDictionaryContainsKey(v14, a2))
    {
      Value = CFDictionaryGetValue(v14, a2);
      v16 = APEndpointUpdateWithTransportDevice((uint64_t)Value, a2);
      if (v16)
      {
        updated = v16;
      }
      else
      {
        updated = manager_updateEndpointClusterMembershipIfNeeded(a1, Value, 0, 0);
        if (!updated)
        {
LABEL_7:
          v18 = 0;
LABEL_29:
          if (cf)
            CFRelease(cf);
          if (v18)
            CFRelease(v18);
          if (updated)
            APSLogErrorAt();
          return;
        }
      }
      APSLogErrorAt();
      goto LABEL_7;
    }
    v21 = *MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v18 = Mutable;
    if (!Mutable)
    {
      APSLogErrorAt();
      updated = -16711;
      goto LABEL_29;
    }
    v23 = *(const void **)(v12 + 296);
    if (v23)
      CFDictionaryAddValue(Mutable, CFSTR("EventRecorder"), v23);
    v24 = (const void *)*MEMORY[0x1E0C9AE50];
    v25 = (const void *)*MEMORY[0x1E0C9AE40];
    if (a3)
      v26 = (const void *)*MEMORY[0x1E0C9AE50];
    else
      v26 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(v18, CFSTR("IsRemoteControlOnly"), v26);
    if (a4)
      v27 = v24;
    else
      v27 = v25;
    CFDictionarySetValue(v18, CFSTR("RepresentsLocalDevice"), v27);
    v28 = APEndpointCreateWithTransportDevice(v21, a2, *(const void **)(v12 + 272), (uint64_t)a1, v18, &cf);
    if (v28)
    {
      updated = v28;
    }
    else
    {
      if (!a3 || !a4)
        goto LABEL_27;
      v29 = *(_QWORD *)(v12 + 232);
      CMBaseObject = FigEndpointGetCMBaseObject();
      v31 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v31)
      {
        v32 = v31(CMBaseObject, *MEMORY[0x1E0CA4378], v29);
        if (!v32)
        {
LABEL_27:
          manager_addEndpoint(a1, a2, cf, v14);
          v33 = manager_updateEndpointClusterMembershipIfNeeded(a1, cf, 0, 0);
          if (v33)
          {
            v34 = v33;
            APSLogErrorAt();
            updated = v34;
          }
          else
          {
            updated = 0;
          }
          goto LABEL_29;
        }
        updated = v32;
      }
      else
      {
        updated = -12782;
      }
    }
    APSLogErrorAt();
    goto LABEL_29;
  }
  v19 = 176;
  if (!a3)
    v19 = 168;
  v20 = *(const __CFDictionary **)(DerivedStorage + v19);
  if (CFDictionaryGetValue(v20, a2) && !APSGetFBOPropertyInt64())
    manager_removeEndpointForTransportDevice(a1, v20, a2);
}

void manager_gatherDeviceMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, const __CFString *, _QWORD, void **);
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  if (*(_QWORD *)(DerivedStorage + 248))
  {
    v4 = DerivedStorage;
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(a2);
    v6 = *(void (**)(uint64_t, const __CFString *, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v6 && (v6(CMBaseObject, CFSTR("DeviceID"), *MEMORY[0x1E0C9AE00], &value), value))
    {
      if (!CFSetContainsValue(*(CFSetRef *)(v4 + 248), value))
      {
        if (APSGetFBOPropertyInt64())
          ++*(_DWORD *)(v4 + 320);
        else
          ++*(_DWORD *)(v4 + 324);
        CFSetAddValue(*(CFMutableSetRef *)(v4 + 248), value);
      }
    }
    else
    {
      APSLogErrorAt();
    }
    if (value)
      CFRelease(value);
  }
}

void manager_removeAllEndpointsForTransportDeviceIfNeeded(void *a1, const void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  manager_removeEndpointForTransportDeviceIfNeeded(a1, a2, *(const __CFDictionary **)(DerivedStorage + 168), 1);
  manager_removeEndpointForTransportDeviceIfNeeded(a1, a2, *(const __CFDictionary **)(DerivedStorage + 176), 1);
}

void manager_addEndpoint(void *a1, const void *a2, const void *a3, __CFDictionary *a4)
{
  CMBaseObjectGetDerivedStorage();
  CFDictionarySetValue(a4, a2, a3);
  manager_updateEndpointPSGInfoIfNeeded();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  manager_notifyAvailableEndpointsChangedWithThrottleIfNeeded(a1, 1);
}

uint64_t manager_deviceIsAllowed(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v12;
  void (*v13)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v14;
  uint64_t v15;
  CFTypeID v16;
  CFIndex Count;
  CFIndex v18;
  CFIndex v19;
  uint64_t v20;
  BOOL v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeID v30;
  CFIndex v31;
  CFIndex v32;
  const void *ValueAtIndex;
  CFIndex v34;
  CFIndex v35;
  const void *v36;
  int v37;
  uint64_t v38;
  void (*v39)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v40;
  CFTypeRef v42;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    APSLogErrorAt();
    return 0;
  }
  v4 = DerivedStorage;
  v5 = (uint64_t *)MEMORY[0x1E0C9AE00];
  v6 = (_DWORD *)&unk_1ED52F000;
  if (*(_QWORD *)(DerivedStorage + 104))
  {
    v7 = CMBaseObjectGetDerivedStorage();
    v42 = 0;
    cf = 0;
    if (*(_QWORD *)(v7 + 104))
    {
      v8 = v7;
      v9 = *v5;
      CMBaseObject = APEndpointDescriptionGetCMBaseObject(a2);
      v11 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v11)
        v11(CMBaseObject, CFSTR("DeviceID"), v9, &cf);
      v12 = APEndpointDescriptionGetCMBaseObject(a2);
      v13 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v13)
        v13(v12, CFSTR("Name"), v9, &v42);
      v14 = CFGetHardwareAddress();
      if (v14)
      {
        v15 = v14;
        v16 = CFGetTypeID(*(CFTypeRef *)(v8 + 104));
        if (v16 == CFArrayGetTypeID())
        {
          Count = CFArrayGetCount(*(CFArrayRef *)(v8 + 104));
          v18 = Count - 1;
          if (Count < 1)
          {
            v21 = 0;
          }
          else
          {
            v19 = 0;
            do
            {
              CFArrayGetValueAtIndex(*(CFArrayRef *)(v8 + 104), v19);
              v20 = CFGetHardwareAddress();
              v21 = v20 == v15;
            }
            while (v20 != v15 && v18 != v19++);
          }
          v6 = &unk_1ED52F000;
        }
        else
        {
          v21 = v15 == CFGetHardwareAddress();
        }
      }
      else
      {
        v21 = 0;
      }
    }
    else
    {
      v21 = 1;
    }
    v23 = v6[72];
    if (v23 <= 20 && (v23 != -1 || _LogCategory_Initialize()))
      LogPrintF();
    if (cf)
      CFRelease(cf);
    if (v42)
      CFRelease(v42);
    if (v21)
      return 1;
    v5 = (uint64_t *)MEMORY[0x1E0C9AE00];
    if (*(_QWORD *)(v4 + 112))
      goto LABEL_35;
    return 0;
  }
  if (!*(_QWORD *)(DerivedStorage + 112))
    return 1;
LABEL_35:
  v25 = CMBaseObjectGetDerivedStorage();
  v42 = 0;
  cf = 0;
  v26 = *v5;
  if (*(_QWORD *)(v25 + 112))
  {
    v27 = v25;
    v28 = APEndpointDescriptionGetCMBaseObject(a2);
    v29 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v29 && (v29(v28, CFSTR("Name"), v26, &cf), cf))
    {
      v30 = CFGetTypeID(*(CFTypeRef *)(v27 + 112));
      if (v30 != CFArrayGetTypeID())
      {
        v24 = CFEqual(cf, *(CFTypeRef *)(v27 + 112));
        goto LABEL_52;
      }
      v31 = CFArrayGetCount(*(CFArrayRef *)(v27 + 112));
      if (v31 >= 1)
      {
        v32 = v31;
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v27 + 112), 0);
        if (!CFEqual(cf, ValueAtIndex))
        {
          v34 = 1;
          do
          {
            v35 = v34;
            if (v32 == v34)
              break;
            v36 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v27 + 112), v34);
            v37 = CFEqual(cf, v36);
            v34 = v35 + 1;
          }
          while (!v37);
          v24 = v35 < v32;
          goto LABEL_52;
        }
        goto LABEL_41;
      }
    }
    else
    {
      APSLogErrorAt();
    }
    v24 = 0;
    goto LABEL_52;
  }
LABEL_41:
  v24 = 1;
LABEL_52:
  v38 = APEndpointDescriptionGetCMBaseObject(a2);
  v39 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (v39)
    v39(v38, CFSTR("DeviceID"), v26, &v42);
  v40 = v6[72];
  if (v40 <= 20 && (v40 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (v42)
    CFRelease(v42);
  if (cf)
    CFRelease(cf);
  return v24;
}

void __manager_registerForNotifications_block_invoke(uint64_t a1)
{
  manager_handlePreferencesChanged(*(void **)(a1 + 32), 0);
}

uint64_t __manager_registerForNotifications_block_invoke_2()
{
  if (gLogCategory_APEndpointManager <= 50
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t __manager_registerForNotifications_block_invoke_3(uint64_t a1, int token)
{
  int v2;
  uint64_t result;
  _BOOL4 v5;
  BOOL v6;
  uint64_t state64;

  state64 = 0;
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 348);
  result = notify_get_state(token, &state64);
  if (gLogCategory_APEndpointManager <= 50)
  {
    if (gLogCategory_APEndpointManager != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      result = LogPrintF();
  }
  v5 = v2 != 4 || state64 == 1;
  if (state64)
    v6 = !v5;
  else
    v6 = 1;
  if (!v6)
  {
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  return result;
}

void __manager_registerForNotifications_block_invoke_4(uint64_t a1)
{
  MEMORY[0x1CAA400CC](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 136))
  {
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  JUMPOUT(0x1CAA400E4);
}

void manager_updateAllowedDevices(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  unsigned int (*v8)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  v2 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
  cf = 0;
  Count = CFArrayGetCount(v2);
  if (Count >= 1)
  {
    v4 = Count;
    v5 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, v5);
      CMBaseObject = FigEndpointGetCMBaseObject();
      v8 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
      if (!v8 || v8(CMBaseObject, CFSTR("EndpointDescription"), 0, &cf))
        break;
      if (!manager_deviceIsAllowed(a1, (uint64_t)cf))
        manager_removeEndpointIfNeeded(a1, (uint64_t)ValueAtIndex, 1);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if (v4 == ++v5)
        goto LABEL_13;
    }
    APSLogErrorAt();
    if (cf)
      CFRelease(cf);
  }
LABEL_13:
  if (v2)
    CFRelease(v2);
}

uint64_t __manager_endpointCreateWithEndpointInfo_block_invoke()
{
  return APAdvertiserInfoSetProperty();
}

uint64_t __manager_handleClearEndpointWithEndpointIDNotification_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  APTransportDeviceGetDiscoveryID();
  result = CFGetInt64();
  if (result == *(_QWORD *)(a1 + 40))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
  return result;
}

void __manager_handleDiscoveryBrokerRequest_block_invoke(uint64_t a1)
{
  int v2;
  __CFDictionary *Mutable;
  __CFDictionary *v4;

  v2 = gLogCategory_APEndpointManager;
  if (gLogCategory_APEndpointManager <= 50)
  {
    if (gLogCategory_APEndpointManager == -1)
    {
      if (!_LogCategory_Initialize())
        goto LABEL_13;
      v2 = gLogCategory_APEndpointManager;
    }
    if (v2 <= 30)
    {
      if (v2 != -1
        || (_LogCategory_Initialize(), v2 = gLogCategory_APEndpointManager, gLogCategory_APEndpointManager <= 30))
      {
        if (v2 == -1)
          _LogCategory_Initialize();
      }
    }
    LogPrintF();
  }
LABEL_13:
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("RequestType"), CFSTR("Authenticate"));
    CFDictionarySetInt64();
    FigCFDictionarySetValue();
    FigCFDictionarySetValueFromKeyInDict();
    if (gLogCategory_APEndpointManager <= 30
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    APSXPCServerPostEvent();
    CFRelease(v4);
  }
  else
  {
    APSLogErrorAt();
    if (gLogCategory_APEndpointManager <= 90
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void __manager_handleDiscoveryBrokerRequest_block_invoke_2(uint64_t a1)
{
  int v2;
  __CFDictionary *Mutable;
  __CFDictionary *v4;

  v2 = gLogCategory_APEndpointManager;
  if (gLogCategory_APEndpointManager <= 50)
  {
    if (gLogCategory_APEndpointManager == -1)
    {
      if (!_LogCategory_Initialize())
        goto LABEL_13;
      v2 = gLogCategory_APEndpointManager;
    }
    if (v2 <= 30)
    {
      if (v2 != -1
        || (_LogCategory_Initialize(), v2 = gLogCategory_APEndpointManager, gLogCategory_APEndpointManager <= 30))
      {
        if (v2 == -1)
          _LogCategory_Initialize();
      }
    }
    LogPrintF();
  }
LABEL_13:
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("RequestType"), CFSTR("GetInfo"));
    CFDictionarySetInt64();
    FigCFDictionarySetValue();
    FigCFDictionarySetValueFromKeyInDict();
    if (gLogCategory_APEndpointManager <= 30
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    APSXPCServerPostEvent();
    CFRelease(v4);
  }
  else
  {
    APSLogErrorAt();
    if (gLogCategory_APEndpointManager <= 90
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t __introspector_getCollectionOfEndpointManagers_block_invoke()
{
  uint64_t result;
  CFMutableSetRef Mutable;
  uint64_t v2;

  result = IsAppleInternalBuild();
  if ((_DWORD)result)
  {
    introspector_getCollectionOfEndpointManagers_coll = (uint64_t)malloc_type_calloc(1uLL, 0x18uLL, 0xF00401F3BCE50uLL);
    *(_QWORD *)introspector_getCollectionOfEndpointManagers_coll = dispatch_queue_create("CollectionOfEndpointManagers", 0);
    Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    v2 = introspector_getCollectionOfEndpointManagers_coll;
    *(_QWORD *)(introspector_getCollectionOfEndpointManagers_coll + 8) = Mutable;
    *(_QWORD *)(v2 + 16) = "EndpointManagers";
    return APSIntrospectorAddCommand();
  }
  return result;
}

void manager_introspector_showEndpointInfo(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;

  v13 = 0;
  v14 = 0;
  v12 = 0;
  v5 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = FigEndpointGetCMBaseObject();
  v7 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v7)
    v7(CMBaseObject, *MEMORY[0x1E0CA4258], v5, &v14);
  v8 = FigEndpointGetCMBaseObject();
  v9 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v9)
    v9(v8, *MEMORY[0x1E0CA4348], v5, &v13);
  v10 = FigEndpointGetCMBaseObject();
  v11 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v11)
    v11(v10, *MEMORY[0x1E0CA4338], v5, &v12);
  APSGetFBOPropertyInt64();
  APSGetFBOPropertyInt64();
  APSGetFBOPropertyInt64();
  FPrintF();
  if (a4)
    FPrintF();
  FPrintF();
  if (v14)
    CFRelease(v14);
  if (v13)
    CFRelease(v13);
  if (v12)
    CFRelease(v12);
}

CFTypeRef manager_introspector_copyMatchingEndpoint(uint64_t a1, uint64_t a2, int a3)
{
  __CFArray *v3;
  __CFArray *v4;
  CFTypeID v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  uint64_t v9;
  const void *ValueAtIndex;
  uint64_t v11;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  int v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  const void *v17;
  const void *v18;
  CFTypeRef v19;
  uint64_t v21;
  uint64_t v22;
  CFTypeRef v24;
  CFTypeRef cf;

  v24 = 0;
  cf = 0;
  v3 = manager_copyEndpoints(a1, 0);
  v4 = v3;
  if (!v3 || (v5 = CFGetTypeID(v3), v5 != CFArrayGetTypeID()))
  {
    APSLogErrorAt();
LABEL_28:
    v17 = 0;
    v18 = 0;
    v19 = 0;
    if (!v4)
      goto LABEL_51;
LABEL_50:
    CFRelease(v4);
    goto LABEL_51;
  }
  Count = CFArrayGetCount(v4);
  if (Count < 1)
  {
    v19 = 0;
    v18 = 0;
    v17 = 0;
    goto LABEL_50;
  }
  v7 = Count;
  v8 = 0;
  v22 = *MEMORY[0x1E0CA4258];
  v9 = *MEMORY[0x1E0C9AE00];
  v21 = *MEMORY[0x1E0CA4348];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v4, v8);
    v11 = APSGetFBOPropertyInt64();
    CMBaseObject = FigEndpointGetCMBaseObject();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v13)
      v13(CMBaseObject, v22, v9, &cf);
    v14 = v11 != 0;
    if (FigCFEqual() && v14 == a3)
    {
      if (gLogCategory_APEndpointManager <= 50
        && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_36;
      }
LABEL_46:
      v19 = CFRetain(ValueAtIndex);
      v17 = 0;
LABEL_49:
      v18 = 0;
      if (!v4)
        goto LABEL_51;
      goto LABEL_50;
    }
    v15 = FigEndpointGetCMBaseObject();
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v16)
      v16(v15, v21, v9, &v24);
    if (FigCFEqual() && v14 == a3)
    {
      if (gLogCategory_APEndpointManager > 50
        || gLogCategory_APEndpointManager == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_46;
      }
LABEL_36:
      LogPrintF();
      goto LABEL_46;
    }
    v17 = (const void *)CFStringCreateF();
    if (FigCFEqual())
    {
      if (gLogCategory_APEndpointManager <= 50
        && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v19 = CFRetain(ValueAtIndex);
      goto LABEL_49;
    }
    v18 = (const void *)CFStringCreateF();
    if (FigCFEqual())
      break;
    if (gLogCategory_APEndpointManager <= 50
      && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v24)
    {
      CFRelease(v24);
      v24 = 0;
    }
    if (v17)
      CFRelease(v17);
    if (v18)
      CFRelease(v18);
    if (v7 == ++v8)
      goto LABEL_28;
  }
  if (gLogCategory_APEndpointManager <= 50
    && (gLogCategory_APEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v19 = CFRetain(ValueAtIndex);
  if (v4)
    goto LABEL_50;
LABEL_51:
  if (cf)
    CFRelease(cf);
  if (v24)
    CFRelease(v24);
  if (v17)
    CFRelease(v17);
  if (v18)
    CFRelease(v18);
  return v19;
}

void __manager_handlePSGDataSourceGroupInfoChanged_block_invoke()
{
  manager_updatePSGInfoOnEndpoint();
}

uint64_t AirPlayDebugIPCEnableForEndpointManager(const void *a1)
{
  CFTypeID v2;
  uint64_t Count;
  CFRange v5;

  if (a1)
  {
    v2 = CFGetTypeID(a1);
    if (v2 == FigEndpointManagerGetTypeID())
    {
      if (!IsAppleInternalBuild())
      {
        if (gLogCategory_AirPlayDebugIPCUtilities > 40
          || gLogCategory_AirPlayDebugIPCUtilities == -1 && !_LogCategory_Initialize())
        {
          return 0;
        }
LABEL_14:
        LogPrintF();
        return 0;
      }
      if (AirPlayDebugIPCEnableForEndpointManager_initOnce != -1)
        dispatch_once_f(&AirPlayDebugIPCEnableForEndpointManager_initOnce, &sEndpointManagers, (dispatch_function_t)airPlayDebugIPC_initEndpointManagerArray);
      if (sEndpointManagers)
      {
        Count = CFArrayGetCount((CFArrayRef)sEndpointManagers);
        v5.location = 0;
        v5.length = Count;
        if (!CFArrayContainsValue((CFArrayRef)sEndpointManagers, v5, a1))
        {
          CFArrayAppendValue((CFMutableArrayRef)sEndpointManagers, a1);
          if (Count > 0)
            return 0;
          DebugIPC_EnsureInitialized();
          if (gLogCategory_AirPlayDebugIPCUtilities > 30
            || gLogCategory_AirPlayDebugIPCUtilities == -1 && !_LogCategory_Initialize())
          {
            return 0;
          }
          goto LABEL_14;
        }
      }
    }
  }
  APSLogErrorAt();
  return APSSignalErrorAt();
}

CFMutableArrayRef airPlayDebugIPC_initEndpointManagerArray(CFMutableArrayRef *a1)
{
  CFMutableArrayRef result;

  result = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  *a1 = result;
  return result;
}

uint64_t airPlayDebugIPC_handleEvent(const __CFDictionary *a1, CFMutableDictionaryRef *a2)
{
  uint64_t v4;
  const void *Value;
  const void *v6;
  CFTypeID v7;
  const void *v8;
  CFTypeID v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Formatted;
  CFIndex Count;
  CFIndex v14;
  CFIndex v15;
  uint64_t v16;
  const void *ValueAtIndex;
  CFTypeID v18;
  uint64_t CMBaseObject;
  unsigned int (*v20)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  uint64_t v21;
  uint64_t v22;
  CFMutableDictionaryRef v23;
  CFMutableDictionaryRef Mutable;
  const void *v26;
  uint64_t Int64;
  uint64_t v28;
  CFIndex v29;
  CFIndex v30;
  CFIndex v31;
  uint64_t v32;
  const void *v33;
  const void *v34;
  CFIndex v35;
  CFIndex v36;
  CFIndex v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  int v41;
  uint64_t v42;
  const void *v43;
  const __CFString *v44;
  uint64_t v45;
  uint64_t v46;
  const void *v47;
  const void *v48;
  CFMutableDictionaryRef *v49;
  CFTypeRef cf;
  CFMutableDictionaryRef theDict;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  CFDictionaryRef v58;

  v57 = 0;
  v55 = 0u;
  v56 = 0u;
  v54 = 0u;
  v52 = 0;
  v53 = 0;
  cf = 0;
  theDict = 0;
  if (!sEndpointManagers)
    goto LABEL_78;
  v4 = 4294895275;
  DataBuffer_Init();
  Value = CFDictionaryGetValue(a1, CFSTR("command"));
  if (!Value)
  {
LABEL_57:
    Mutable = 0;
    goto LABEL_33;
  }
  v6 = Value;
  v7 = CFGetTypeID(Value);
  if (v7 != CFStringGetTypeID())
    goto LABEL_78;
  if (CFEqual(v6, CFSTR("logging")))
  {
    v8 = CFDictionaryGetValue(a1, CFSTR("value"));
    if (!v8)
    {
LABEL_8:
      v11 = LogShow();
      if ((_DWORD)v11)
      {
        v4 = v11;
        goto LABEL_89;
      }
      Formatted = CFPropertyListCreateFormatted();
      if ((_DWORD)Formatted)
      {
        v4 = Formatted;
LABEL_89:
        APSLogErrorAt();
        goto LABEL_57;
      }
      goto LABEL_29;
    }
    v9 = CFGetTypeID(v8);
    if (v9 == CFStringGetTypeID())
    {
      v10 = LogControlCF();
      if ((_DWORD)v10)
      {
        v4 = v10;
        goto LABEL_89;
      }
      goto LABEL_8;
    }
    goto LABEL_78;
  }
  if (CFEqual(v6, CFSTR("show")))
  {
    v49 = a2;
    Count = CFArrayGetCount((CFArrayRef)sEndpointManagers);
    if (Count >= 1)
    {
      v14 = Count;
      v15 = 0;
      v16 = *MEMORY[0x1E0C9AE00];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)sEndpointManagers, v15);
        DataBuffer_AppendF();
        v58 = 0;
        if (ValueAtIndex && (v18 = CFGetTypeID(ValueAtIndex), v18 == FigEndpointManagerGetTypeID()))
        {
          CMBaseObject = FigEndpointManagerGetCMBaseObject();
          v20 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v20
            && !v20(CMBaseObject, CFSTR("ShowInfo"), v16, &v58)
            && CFDictionaryGetValue(v58, CFSTR("DetailedDescription")))
          {
            DataBuffer_AppendF();
          }
          else
          {
            APSLogErrorAt();
          }
        }
        else
        {
          APSLogErrorAt();
          APSSignalErrorAt();
        }
        if (v58)
          CFRelease(v58);
        DataBuffer_AppendF();
        ++v15;
      }
      while (v14 != v15);
    }
    v21 = DataBuffer_Commit();
    if ((_DWORD)v21)
    {
      v4 = v21;
      goto LABEL_89;
    }
    v22 = CFPropertyListCreateFormatted();
    a2 = v49;
    if ((_DWORD)v22)
    {
      v4 = v22;
      goto LABEL_89;
    }
    goto LABEL_29;
  }
  if (CFEqual(v6, CFSTR("activate")))
  {
    v26 = CFDictionaryGetValue(a1, CFSTR("value"));
    Int64 = CFDictionaryGetInt64();
    if (v26)
    {
      v28 = Int64;
      v29 = CFArrayGetCount((CFArrayRef)sEndpointManagers);
      if (v29 >= 1)
      {
        v30 = v29;
        v31 = 0;
        while (1)
        {
          v47 = CFArrayGetValueAtIndex((CFArrayRef)sEndpointManagers, v31);
          DataBuffer_AppendF();
          v32 = airPlayDebugIPC_copyEndpointWithID((uint64_t)v47, v26, &cf);
          if ((_DWORD)v32)
          {
            v45 = v32;
            APSLogErrorAt();
            Mutable = 0;
            v4 = v45;
            goto LABEL_33;
          }
          if (cf)
            break;
          if (v30 == ++v31)
            goto LABEL_55;
        }
        DataBuffer_AppendF();
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!Mutable)
        {
          APSLogErrorAt();
          v46 = APSSignalErrorAt();
          if ((_DWORD)v46)
          {
            v4 = v46;
            goto LABEL_89;
          }
        }
        if (!v28)
        {
          DataBuffer_AppendF();
          v4 = APSSignalErrorAt();
          goto LABEL_33;
        }
        v39 = FigEndpointActivateSync();
        if ((_DWORD)v39)
        {
          v4 = v39;
          APSLogErrorAt();
          goto LABEL_33;
        }
        if (Mutable)
          CFRelease(Mutable);
        goto LABEL_29;
      }
LABEL_55:
      DataBuffer_AppendF();
LABEL_56:
      v4 = APSSignalErrorAt();
      goto LABEL_57;
    }
    goto LABEL_78;
  }
  if (CFEqual(v6, CFSTR("deactivate")))
  {
    v33 = CFDictionaryGetValue(a1, CFSTR("value"));
    if (v33)
    {
      v34 = v33;
      v35 = CFArrayGetCount((CFArrayRef)sEndpointManagers);
      if (v35 >= 1)
      {
        v36 = v35;
        v37 = 0;
        while (1)
        {
          v48 = CFArrayGetValueAtIndex((CFArrayRef)sEndpointManagers, v37);
          DataBuffer_AppendF();
          v38 = airPlayDebugIPC_copyEndpointWithID((uint64_t)v48, v34, &cf);
          if ((_DWORD)v38)
          {
            v4 = v38;
            goto LABEL_89;
          }
          if (cf)
            break;
          if (v36 == ++v37)
            goto LABEL_55;
        }
        DataBuffer_AppendF();
        v42 = FigEndpointDeactivate();
        if (!(_DWORD)v42)
          goto LABEL_29;
        v4 = v42;
        goto LABEL_89;
      }
      goto LABEL_55;
    }
LABEL_78:
    APSLogErrorAt();
    goto LABEL_56;
  }
  if (CFEqual(v6, CFSTR("disable")))
  {
    v40 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA3A40]);
    if (!v40)
      goto LABEL_29;
    v41 = 0;
LABEL_72:
    airPlayDebugIPC_overrideEndpointManagerEnabled(v40, v41);
    goto LABEL_29;
  }
  if (!CFEqual(v6, CFSTR("enable")))
  {
    if (!CFEqual(v6, CFSTR("stats")))
    {
      v4 = 4294895272;
      if (gLogCategory_AirPlayDebugIPCUtilities <= 50
        && (gLogCategory_AirPlayDebugIPCUtilities != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_57;
    }
    v43 = CFDictionaryGetValue(a1, CFSTR("value"));
    v44 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("filePath"));
    airPlayDebugIPC_showStats(v43, v44);
    goto LABEL_29;
  }
  v40 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA3A40]);
  if (v40)
  {
    v41 = 1;
    goto LABEL_72;
  }
LABEL_29:
  if (theDict)
  {
    CFDictionarySetValue(theDict, CFSTR("responseType"), v6);
    v23 = theDict;
  }
  else
  {
    v23 = 0;
  }
  Mutable = 0;
  v4 = 0;
  *a2 = v23;
  theDict = 0;
LABEL_33:
  DataBuffer_Free();
  if (theDict)
    CFRelease(theDict);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  free(0);
  return v4;
}

uint64_t AirPlayDebugIPCDisableForEndpointManager(const void *a1)
{
  CFTypeID v2;
  uint64_t Count;
  CFIndex FirstIndexOfValue;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef cf;
  CFRange v9;

  cf = 0;
  if (a1
    && (v2 = CFGetTypeID(a1), v2 == FigEndpointManagerGetTypeID())
    && sEndpointManagers
    && (Count = CFArrayGetCount((CFArrayRef)sEndpointManagers),
        v9.location = 0,
        v9.length = Count,
        FirstIndexOfValue = CFArrayGetFirstIndexOfValue((CFArrayRef)sEndpointManagers, v9, a1),
        FirstIndexOfValue != -1))
  {
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)sEndpointManagers, FirstIndexOfValue);
    if (Count <= 1)
    {
      DebugIPC_EnsureFinalized();
      if (gLogCategory_AirPlayDebugIPCUtilities <= 30
        && (gLogCategory_AirPlayDebugIPCUtilities != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    CMBaseObject = FigEndpointManagerGetCMBaseObject();
    v6 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v6)
    {
      v6(CMBaseObject, *MEMORY[0x1E0CA3A40], *MEMORY[0x1E0C9AE00], &cf);
      if (cf)
        CFRelease(cf);
    }
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
}

uint64_t airPlayDebugIPC_copyEndpointWithID(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  uint64_t v7;
  uint64_t v8;
  CFIndex Count;
  CFIndex v10;
  uint64_t v11;
  const void *ValueAtIndex;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v15;
  CFTypeRef cf1;
  CFArrayRef theArray;

  cf1 = 0;
  theArray = 0;
  CMBaseObject = FigEndpointManagerGetCMBaseObject();
  v6 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v6)
  {
    v15 = 4294954514;
LABEL_13:
    APSLogErrorAt();
    goto LABEL_19;
  }
  v7 = *MEMORY[0x1E0C9AE00];
  v8 = v6(CMBaseObject, *MEMORY[0x1E0CA3A28], *MEMORY[0x1E0C9AE00], &theArray);
  if ((_DWORD)v8)
  {
    v15 = v8;
    goto LABEL_13;
  }
  if (!theArray)
  {
    v15 = 0;
LABEL_18:
    *a3 = 0;
    goto LABEL_19;
  }
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
    v10 = 0;
    v15 = 0;
  }
  else
  {
    v10 = 0;
    v11 = *MEMORY[0x1E0CA4258];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v10);
      v13 = FigEndpointGetCMBaseObject();
      v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
      v15 = v14 ? v14(v13, v11, v7, &cf1) : 4294954514;
      if (CFEqual(cf1, a2))
        break;
      if (Count == ++v10)
        goto LABEL_18;
    }
    *a3 = CFRetain(ValueAtIndex);
  }
  if (v10 == Count)
    goto LABEL_18;
LABEL_19:
  if (theArray)
    CFRelease(theArray);
  if (cf1)
    CFRelease(cf1);
  return v15;
}

void airPlayDebugIPC_overrideEndpointManagerEnabled(const void *a1, int a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t CMBaseObject;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v11;
  void (*v12)(uint64_t, const __CFString *, uint64_t);
  uint64_t v13;
  CFTypeRef cf2;

  cf2 = 0;
  if (sEndpointManagers)
  {
    Count = CFArrayGetCount((CFArrayRef)sEndpointManagers);
    if (Count >= 1)
    {
      v5 = Count;
      v6 = 0;
      v7 = *MEMORY[0x1E0CA3A40];
      v8 = *MEMORY[0x1E0C9AE00];
      while (1)
      {
        CFArrayGetValueAtIndex((CFArrayRef)sEndpointManagers, v6);
        CMBaseObject = FigEndpointManagerGetCMBaseObject();
        v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
        if (!v10 || v10(CMBaseObject, v7, v8, &cf2))
        {
          APSLogErrorAt();
          return;
        }
        if (CFEqual(a1, cf2))
          break;
        if (cf2)
        {
          CFRelease(cf2);
          cf2 = 0;
        }
        if (v5 == ++v6)
          return;
      }
      v11 = FigEndpointManagerGetCMBaseObject();
      v12 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v12)
      {
        if (a2)
          v13 = *MEMORY[0x1E0C9AE50];
        else
          v13 = *MEMORY[0x1E0C9AE40];
        v12(v11, CFSTR("OverrideEndpointManagerEnabled"), v13);
      }
      if (cf2)
        CFRelease(cf2);
    }
  }
}

void airPlayDebugIPC_showStats(const void *a1, const __CFString *a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t CMBaseObject;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v11;
  unsigned int (*v12)(uint64_t, _QWORD, uint64_t, CFArrayRef *);
  uint64_t v13;
  unsigned int (*v14)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFIndex v15;
  char *v16;
  CFTypeRef cf;
  CFArrayRef theArray;
  CFTypeRef cf2;

  theArray = 0;
  cf2 = 0;
  cf = 0;
  if (sEndpointManagers && (Count = CFArrayGetCount((CFArrayRef)sEndpointManagers), Count >= 1))
  {
    v5 = Count;
    v6 = 0;
    v7 = *MEMORY[0x1E0CA3A40];
    v8 = *MEMORY[0x1E0C9AE00];
    while (1)
    {
      CFArrayGetValueAtIndex((CFArrayRef)sEndpointManagers, v6);
      CMBaseObject = FigEndpointManagerGetCMBaseObject();
      v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
      if (!v10 || v10(CMBaseObject, v7, v8, &cf2))
        goto LABEL_20;
      if (CFEqual(a1, cf2))
        break;
      if (cf2)
      {
        CFRelease(cf2);
        cf2 = 0;
      }
      if (v5 == ++v6)
        goto LABEL_21;
    }
    v11 = FigEndpointManagerGetCMBaseObject();
    v12 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
    if (!v12 || v12(v11, *MEMORY[0x1E0CA3A28], v8, &theArray))
      goto LABEL_20;
    if (CFArrayGetCount(theArray) < 1)
      goto LABEL_21;
    CFArrayGetValueAtIndex(theArray, 0);
    v13 = FigEndpointGetCMBaseObject();
    v14 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
    if (!v14 || v14(v13, CFSTR("Statistics"), 0, &cf))
    {
LABEL_20:
      APSLogErrorAt();
      goto LABEL_21;
    }
    v15 = CFStringGetLength(a2) + 1;
    v16 = (char *)malloc_type_malloc(v15, 0xEEFC2FD7uLL);
    if (!CFStringGetCString(a2, v16, v15, 0x8000100u) || CFPropertyListWriteToFilePath())
      APSLogErrorAt();
  }
  else
  {
LABEL_21:
    v16 = 0;
  }
  if (cf2)
  {
    CFRelease(cf2);
    cf2 = 0;
  }
  if (theArray)
    CFRelease(theArray);
  if (cf)
    CFRelease(cf);
  if (v16)
    free(v16);
}

uint64_t APMessageRingGetTypeID()
{
  if (APMessageRingGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APMessageRingGetTypeID_sInitOnce, &APMessageRingGetTypeID_sTypeID, (dispatch_function_t)ring_getTypeID);
  return APMessageRingGetTypeID_sTypeID;
}

uint64_t ring_getTypeID(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APMessageRingCreate(uint64_t a1, size_t a2, __int16 a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t Instance;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a4)
  {
    if (APMessageRingGetTypeID_sInitOnce != -1)
      dispatch_once_f(&APMessageRingGetTypeID_sInitOnce, &APMessageRingGetTypeID_sTypeID, (dispatch_function_t)ring_getTypeID);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v12 = Instance;
      *(_QWORD *)(Instance + 96) = 0;
      *(_OWORD *)(Instance + 64) = 0u;
      *(_OWORD *)(Instance + 80) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      *(_OWORD *)(Instance + 48) = 0u;
      *(_OWORD *)(Instance + 16) = 0u;
      v13 = FigSimpleMutexCreate();
      *(_QWORD *)(v12 + 16) = v13;
      if (!v13)
        goto LABEL_23;
      *(_WORD *)(v12 + 24) = a3;
      *(_WORD *)(v12 + 26) = a3;
      v14 = malloc_type_calloc(a2, 8uLL, 0x2004093837F09uLL);
      *(_QWORD *)(v12 + 40) = v14;
      if (!v14
        || (v15 = malloc_type_calloc(a2, 8uLL, 0x2004093837F09uLL), (*(_QWORD *)(v12 + 48) = v15) == 0)
        || (v16 = malloc_type_calloc(a2, 4uLL, 0x100004052888210uLL), (*(_QWORD *)(v12 + 56) = v16) == 0)
        || (v17 = malloc_type_calloc(a2, 0x18uLL, 0x1000040504FFAC1uLL), (*(_QWORD *)(v12 + 72) = v17) == 0))
      {
LABEL_23:
        APSLogErrorAt();
        v21 = 4294960568;
LABEL_24:
        CFRelease((CFTypeRef)v12);
        return v21;
      }
      *(_QWORD *)(v12 + 32) = a2;
      *(_QWORD *)(v12 + 96) = CFRetain(a4);
      if (a2)
      {
        v18 = 0;
        v19 = a2;
        while (1)
        {
          v20 = APTransportStreamSendBackingProviderAcquireBBuf();
          if ((_DWORD)v20)
            break;
          v18 += 8;
          if (!--v19)
            goto LABEL_14;
        }
        v21 = v20;
        APSLogErrorAt();
        goto LABEL_24;
      }
LABEL_14:
      if (gLogCategory_APMessageRing <= 50
        && (gLogCategory_APMessageRing != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v21 = 0;
      *a7 = v12;
    }
    else
    {
      APSLogErrorAt();
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v21;
}

uint64_t APMessageRingGetUsedCount(uint64_t a1)
{
  uint64_t v2;

  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 16));
  v2 = (unsigned __int16)(*(_WORD *)(a1 + 26) - *(_WORD *)(a1 + 24));
  MEMORY[0x1CAA400E4](*(_QWORD *)(a1 + 16));
  return v2;
}

uint64_t APMessageRingGetNextFreeBacking(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int16 *)(a1 + 26);
  if (v2 == (unsigned __int16)(v3 - *(_WORD *)(a1 + 24)))
    v4 = 0;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (v3 % v2));
  MEMORY[0x1CAA400E4](*(_QWORD *)(a1 + 16));
  return v4;
}

uint64_t APMessageRingGetNextEnqueueSequenceNumber(uint64_t a1)
{
  uint64_t v2;

  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 16));
  v2 = *(unsigned __int16 *)(a1 + 26);
  MEMORY[0x1CAA400E4](*(_QWORD *)(a1 + 16));
  return v2;
}

uint64_t APMessageRingEnqueueMessageForSending(uint64_t a1, OpaqueCMBlockBuffer *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)a3;
  v5 = *(_QWORD *)(a3 + 16);
  return APMessageRingEnqueueMessageForSendingWithPayloadCount(a1, a2, &v4, 1);
}

uint64_t APMessageRingEnqueueMessageForSendingWithPayloadCount(uint64_t a1, OpaqueCMBlockBuffer *a2, __int128 *a3, int a4)
{
  OpaqueCMBlockBuffer *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const void *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char *v19;
  char *dataPointerOut;

  v19 = 0;
  dataPointerOut = 0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 16));
  if (*(_QWORD *)(a1 + 32) == (unsigned __int16)(*(_WORD *)(a1 + 26) - *(_WORD *)(a1 + 24)))
  {
    APSLogErrorAt();
    v17 = 4294960587;
  }
  else
  {
    if (!a4 || -65536 * a4 >= 0x10000)
      goto LABEL_18;
    CMBlockBufferGetDataPointer(a2, 0, 0, 0, &dataPointerOut);
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(unsigned __int16 *)(a1 + 26);
    if (v9 != (unsigned __int16)(v10 - *(_WORD *)(a1 + 24)))
      v8 = *(OpaqueCMBlockBuffer **)(*(_QWORD *)(a1 + 48) + 8 * (v10 % v9));
    CMBlockBufferGetDataPointer(v8, 0, 0, 0, &v19);
    if (dataPointerOut == v19)
    {
      APSTransportMessageSetAudioDataSequenceNumber();
      if (gLogCategory_APMessageRing <= 10
        && (gLogCategory_APMessageRing != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v11 = *(_QWORD *)(a1 + 40);
      v12 = (unint64_t)*(unsigned __int16 *)(a1 + 26) % *(_QWORD *)(a1 + 32);
      v13 = *(const void **)(v11 + 8 * v12);
      if (a2)
        CFRetain(a2);
      *(_QWORD *)(v11 + 8 * v12) = a2;
      if (v13)
        CFRelease(v13);
      v14 = (unint64_t)*(unsigned __int16 *)(a1 + 26) % *(_QWORD *)(a1 + 32);
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * v14) = a4;
      v15 = *(_QWORD *)(a1 + 72) + 24 * v14;
      v16 = *a3;
      *(_QWORD *)(v15 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v15 = v16;
      APTransportStreamSendBackingProviderUpdateAcquiredBBuf();
      v17 = 0;
      ++*(_WORD *)(a1 + 26);
    }
    else
    {
LABEL_18:
      APSLogErrorAt();
      v17 = 4294960591;
    }
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(a1 + 16));
  return v17;
}

uint64_t APMessageRingGetNextUnsentMessage(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;

  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 16));
  v4 = *(unsigned __int16 *)(a1 + 24);
  if (*(unsigned __int16 *)(a1 + 26) == (_DWORD)v4)
  {
    v5 = 0;
  }
  else
  {
    v6 = v4 % *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6);
    if (a2)
    {
      v7 = *(_QWORD *)(a1 + 72) + 24 * v6;
      v8 = *(_OWORD *)v7;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)a2 = v8;
    }
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(a1 + 16));
  return v5;
}

uint64_t APMessageRingMarkMessageAsSent(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;

  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 16));
  v4 = *(unsigned __int16 *)(a1 + 24);
  if (*(unsigned __int16 *)(a1 + 26) == (_DWORD)v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * (v4 % *(_QWORD *)(a1 + 32)));
  if (v5 == a2)
  {
    *(_WORD *)(a1 + 24) = v4 + 1;
    v6 = *(const void **)(a1 + 80);
    if (v6)
    {
      CFRelease(v6);
      v7 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    else
    {
      v7 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    v7 = 4294960591;
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(a1 + 16));
  return v7;
}

uint64_t APMessageRingGetMessageAtSequenceNumber(_QWORD *a1, unsigned int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v8;
  int AudioDataSequenceNumber;
  int v10;
  unint64_t v11;
  __int128 v12;

  MEMORY[0x1CAA400CC](a1[2]);
  v8 = *(_QWORD *)(a1[5] + 8 * ((unint64_t)a2 % a1[4]));
  if (!v8)
  {
LABEL_9:
    v10 = 0;
    goto LABEL_12;
  }
  AudioDataSequenceNumber = APSTransportMessageGetAudioDataSequenceNumber();
  if (AudioDataSequenceNumber)
  {
    v10 = AudioDataSequenceNumber;
    APSLogErrorAt();
  }
  else
  {
    if (!a2)
    {
      if (a3)
      {
        v10 = 0;
        v11 = a1[9] + 24 * ((unint64_t)a2 % a1[4]);
        v12 = *(_OWORD *)v11;
        *(_QWORD *)(a3 + 16) = *(_QWORD *)(v11 + 16);
        *(_OWORD *)a3 = v12;
        goto LABEL_12;
      }
      goto LABEL_9;
    }
    if (gLogCategory_APMessageRing <= 30
      && (gLogCategory_APMessageRing != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v10 = 0;
    v8 = 0;
  }
LABEL_12:
  MEMORY[0x1CAA400E4](a1[2]);
  if (a4)
    *a4 = v10;
  return v8;
}

uint64_t APMessageRingFlush(uint64_t a1, _WORD *a2)
{
  __int16 v4;
  const void *v5;

  if (a1)
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 16));
    if (gLogCategory_APMessageRing <= 50
      && (gLogCategory_APMessageRing != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v4 = *(_WORD *)(a1 + 26);
    *(_WORD *)(a1 + 24) = v4;
    v5 = *(const void **)(a1 + 80);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 80) = 0;
      v4 = *(_WORD *)(a1 + 26);
    }
    *a2 = v4;
    MEMORY[0x1CAA400E4](*(_QWORD *)(a1 + 16));
  }
  return 0;
}

void APMessageRingSetMaxPacketRedundancy(uint64_t a1, int a2)
{
  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 64) = a2;
  JUMPOUT(0x1CAA400E4);
}

uint64_t APMessageRingGetMaxPacketRedundancy(uint64_t a1)
{
  uint64_t v2;

  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 16));
  v2 = *(unsigned int *)(a1 + 64);
  MEMORY[0x1CAA400E4](*(_QWORD *)(a1 + 16));
  return v2;
}

void APMessageRingSetTargetPayloadRedundancy(uint64_t a1, int a2)
{
  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 68) = a2;
  JUMPOUT(0x1CAA400E4);
}

uint64_t APMessageRingGetTargetPayloadRedundancy(uint64_t a1)
{
  uint64_t v2;

  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 16));
  v2 = *(unsigned int *)(a1 + 68);
  MEMORY[0x1CAA400E4](*(_QWORD *)(a1 + 16));
  return v2;
}

uint64_t APMessageRingCopyNextBurst(uint64_t a1, const __CFAllocator *a2, CFTypeRef *a3)
{
  CFMutableArrayRef Mutable;
  __CFArray *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int16 v10;
  const void *v11;
  int v12;
  const void *v13;
  uint64_t v14;

  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 16));
  if (*(unsigned __int16 *)(a1 + 26) == *(unsigned __int16 *)(a1 + 24))
  {
    v14 = 4294960546;
LABEL_15:
    APSLogErrorAt();
    MEMORY[0x1CAA400E4](*(_QWORD *)(a1 + 16));
    return v14;
  }
  Mutable = CFArrayCreateMutable(a2, (*(_DWORD *)(a1 + 64) + 1), MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v14 = 4294960568;
    goto LABEL_15;
  }
  v7 = Mutable;
  v8 = 0;
  v9 = 0;
  v10 = *(_WORD *)(a1 + 24);
  do
  {
    if (v8 > *(_DWORD *)(a1 + 68))
      break;
    v11 = *(const void **)(*(_QWORD *)(a1 + 40) + 8 * ((unint64_t)v10 % *(_QWORD *)(a1 + 32)));
    if (!v11)
      break;
    if (APSTransportMessageGetAudioDataSequenceNumber())
      break;
    if (v10)
      break;
    CFArrayAppendValue(v7, v11);
    ++v9;
    v12 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * (0uLL % *(_QWORD *)(a1 + 32)));
    v8 += v12;
    v10 = -(__int16)v12;
  }
  while (v9 <= *(_DWORD *)(a1 + 64));
  APSCFArrayReverse();
  v13 = *(const void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v7;
  CFRetain(v7);
  if (v13)
    CFRelease(v13);
  *a3 = CFRetain(v7);
  MEMORY[0x1CAA400E4](*(_QWORD *)(a1 + 16));
  CFRelease(v7);
  return 0;
}

uint64_t APMessageRingMarkBurstAsSent(uint64_t a1, uint64_t a2)
{
  const void *v4;

  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 16));
  if (!a2)
    goto LABEL_9;
  v4 = *(const void **)(a1 + 80);
  if (v4 != (const void *)a2)
  {
    if (v4 && CFEqual((CFTypeRef)a2, v4))
    {
      a2 = *(_QWORD *)(a1 + 80);
      ++*(_WORD *)(a1 + 24);
      if (!a2)
        goto LABEL_10;
      goto LABEL_8;
    }
LABEL_9:
    APSLogErrorAt();
    a2 = 4294960591;
    goto LABEL_10;
  }
  ++*(_WORD *)(a1 + 24);
LABEL_8:
  CFRelease((CFTypeRef)a2);
  a2 = 0;
  *(_QWORD *)(a1 + 80) = 0;
LABEL_10:
  MEMORY[0x1CAA400E4](*(_QWORD *)(a1 + 16));
  return a2;
}

uint64_t ring_Finalize(_QWORD *a1)
{
  unint64_t v2;
  const void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  const void *v8;
  const void *v9;

  if (gLogCategory_APMessageRing <= 50 && (gLogCategory_APMessageRing != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (a1[4])
  {
    v2 = 0;
    do
    {
      v3 = *(const void **)(a1[5] + 8 * v2);
      if (v3)
      {
        CFRelease(v3);
        *(_QWORD *)(a1[5] + 8 * v2) = 0;
      }
      APTransportStreamSendBackingProviderRelinquishBBuf();
      ++v2;
    }
    while (v2 < a1[4]);
  }
  v4 = (void *)a1[5];
  if (v4)
  {
    free(v4);
    a1[5] = 0;
  }
  v5 = (void *)a1[6];
  if (v5)
  {
    free(v5);
    a1[6] = 0;
  }
  v6 = (void *)a1[7];
  if (v6)
  {
    free(v6);
    a1[7] = 0;
  }
  v7 = (void *)a1[9];
  if (v7)
  {
    free(v7);
    a1[9] = 0;
  }
  v8 = (const void *)a1[12];
  if (v8)
    CFRelease(v8);
  v9 = (const void *)a1[10];
  if (v9)
    CFRelease(v9);
  return FigSimpleMutexDestroy();
}

uint64_t SPEndpointManagerCreate(_QWORD *a1)
{
  CFTypeRef v2;

  if (SPEndpointManagerGetShared_once != -1)
    dispatch_once(&SPEndpointManagerGetShared_once, &__block_literal_global_3);
  v2 = (CFTypeRef)SPEndpointManagerGetShared_sSPEndpointManager;
  if (SPEndpointManagerGetShared_sSPEndpointManager)
    v2 = CFRetain((CFTypeRef)SPEndpointManagerGetShared_sSPEndpointManager);
  *a1 = v2;
  return gCreationErr_0;
}

uint64_t SPEndpointManagerGetShared()
{
  if (SPEndpointManagerGetShared_once != -1)
    dispatch_once(&SPEndpointManagerGetShared_once, &__block_literal_global_3);
  return SPEndpointManagerGetShared_sSPEndpointManager;
}

CFHashCode spmanager_transportDeviceHash()
{
  const void *DiscoveryID;

  DiscoveryID = (const void *)APTransportDeviceGetDiscoveryID();
  return CFHash(DiscoveryID);
}

void spmanager_browserEventHandler(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  const __CFAllocator *v8;
  uint64_t DerivedStorage;
  CFTypeRef v10;
  int IsSelf;
  int IsPresentOnInfra;
  int v13;
  CFTypeRef v14;
  uint64_t v15;
  uint64_t v16;
  const __CFDictionary *v17;
  uint64_t v18;
  const __CFDictionary *v19;
  uint64_t v20;
  const void *v21;
  const void *v22;
  int v23;
  __CFDictionary *Mutable;
  const __CFDictionary *v25;
  const void *v26;
  int v27;
  CFTypeRef v28;
  const void *v29;
  const void *v30;
  CFStringRef v31;
  const __CFString *v32;
  uint64_t v33;
  uint64_t CMBaseObject;
  void (*v35)(uint64_t, _QWORD, const __CFAllocator *, void **);
  int v36;
  int v37;
  uint64_t v38;
  __CFDictionary *theDict;
  CFTypeRef v40;
  CFTypeRef cf;
  void *value;

  if (gLogCategory_SPEndpointManager <= 30
    && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
  {
    v38 = a3;
    LogPrintF();
  }
  if ((a2 - 3) < 2)
  {
    if (!a3)
      goto LABEL_114;
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (APTransportDeviceCreate())
      goto LABEL_115;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v40 = 0;
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 24));
    if (gLogCategory_SPEndpointManager <= 30
      && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
    {
      v38 = *(unsigned __int16 *)(DerivedStorage + 34);
      LogPrintF();
    }
    if (!*(_WORD *)(DerivedStorage + 34))
      goto LABEL_128;
    if (APSSettingsGetInt64() && IsAppleInternalBuild())
    {
      if (gLogCategory_SPEndpointManager <= 50
        && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (APEndpointDescriptionAirPlayCreateWithTransportDevice((uint64_t)v8, 0, 0, &v40))
        goto LABEL_52;
    }
    else if (SPEndpointDescriptionCreateWithTransportDevice((uint64_t)v8, 0, &v40))
    {
LABEL_52:
      APSLogErrorAt();
      goto LABEL_128;
    }
    v10 = v40;
    CMBaseObjectGetDerivedStorage();
    if (!spmanager_deviceIsAllowlisted((uint64_t)a4, (_BOOL8)v10))
    {
      if (gLogCategory_SPEndpointManager <= 30
        && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_128;
    }
    IsSelf = APTransportDeviceIsSelf();
    IsPresentOnInfra = APTransportDeviceIsPresentOnInfra();
    if (IsSelf)
    {
LABEL_128:
      MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 24));
      if (v40)
        CFRelease(v40);
      return;
    }
    v13 = IsPresentOnInfra;
    v14 = v40;
    v15 = CMBaseObjectGetDerivedStorage();
    if (!v13)
    {
      v19 = *(const __CFDictionary **)(v15 + 48);
      if (CFDictionaryGetValue(v19, 0))
      {
        if (gLogCategory_SPEndpointManager <= 50
          && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (!APSGetFBOPropertyInt64())
          spmanager_removeEndpointForTransportDevice((uint64_t)a4, v19, 0);
      }
      goto LABEL_128;
    }
    v16 = CMBaseObjectGetDerivedStorage();
    cf = 0;
    v17 = *(const __CFDictionary **)(v16 + 48);
    if (gLogCategory_SPEndpointManager <= 30
      && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (CFSetContainsValue(*(CFSetRef *)(v16 + 56), 0))
    {
      if (gLogCategory_SPEndpointManager <= 50
        && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
      {
        APTransportDeviceGetDiscoveryID();
        LogPrintF();
      }
      CFSetRemoveValue(*(CFMutableSetRef *)(v16 + 56), 0);
    }
    if (CFDictionaryContainsKey(v17, 0))
    {
      if (gLogCategory_SPEndpointManager <= 50
        && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
      {
        APTransportDeviceGetDiscoveryID();
        LogPrintF();
      }
      goto LABEL_122;
    }
    theDict = v17;
    v20 = CMBaseObjectGetDerivedStorage();
    if (APTransportDeviceGetAdvertiserInfo())
    {
      v21 = (const void *)APAdvertiserInfoCopyProperty();
      if (v21)
      {
        v22 = v21;
        v23 = CFSetContainsValue(*(CFSetRef *)(v20 + 96), v21);
LABEL_69:
        if (gLogCategory_SPEndpointManager <= 50
          && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (v22)
          CFRelease(v22);
        if (!v23)
          goto LABEL_122;
        Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v25 = Mutable;
        if (!Mutable)
        {
          APSLogErrorAt();
          v37 = -16711;
          goto LABEL_123;
        }
        v26 = *(const void **)(v16 + 160);
        if (v26)
          CFDictionarySetValue(Mutable, CFSTR("EventRecorder"), v26);
        v27 = SPEndpointCreateWithEndpointDescription((uint64_t)v8, v14, v25, &cf);
        if (v27)
        {
          v37 = v27;
          APSLogErrorAt();
          goto LABEL_123;
        }
        v28 = cf;
        CMBaseObjectGetDerivedStorage();
        if (APTransportDeviceGetAdvertiserInfo())
        {
          v29 = (const void *)APAdvertiserInfoCopyProperty();
          if (!v29)
            v29 = (const void *)APAdvertiserInfoCopyProperty();
          v30 = (const void *)APAdvertiserInfoCopyProperty();
          v31 = CFStringCreateWithFormat(v8, 0, CFSTR("%@ ('%@')"), v29, v30);
          if (v29)
            CFRelease(v29);
          if (v30)
            CFRelease(v30);
        }
        else
        {
          if (gLogCategory_SPEndpointManager <= 90
            && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v31 = CFStringCreateWithFormat(v8, 0, CFSTR("%@ ('%@')"), 0, 0, v38);
        }
        if (gLogCategory_SPEndpointManager <= 50
          && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
        {
          APTransportDeviceGetDiscoveryID();
          LogPrintF();
        }
        CFDictionarySetValue(theDict, 0, v28);
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        if (!APSGetFBOPropertyInt64())
        {
          v32 = v31;
          spmanager_activationAttemptsClearIfExpired();
          v33 = CMBaseObjectGetDerivedStorage();
          value = 0;
          CMBaseObject = FigEndpointGetCMBaseObject();
          v35 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
          if (v35 && (v35(CMBaseObject, *MEMORY[0x1E0CA4258], v8, &value), value))
          {
            v36 = CFSetContainsValue(*(CFSetRef *)(v33 + 64), value);
            if (value)
              CFRelease(value);
            v31 = v32;
            if (v36)
            {
              if (gLogCategory_SPEndpointManager <= 50
                && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              spmanager_checkHubbedDevices(a4, 0);
              goto LABEL_109;
            }
          }
          else
          {
            v31 = v32;
          }
          spmanager_activateEndpoint(a4, (uint64_t)v28);
        }
LABEL_109:
        if (v31)
          CFRelease(v31);
        v37 = 0;
LABEL_123:
        if (cf)
          CFRelease(cf);
        if (v25)
          CFRelease(v25);
        if (!v37)
          goto LABEL_128;
        goto LABEL_52;
      }
      if (gLogCategory_SPEndpointManager <= 90)
      {
        if (gLogCategory_SPEndpointManager == -1 && !_LogCategory_Initialize())
          goto LABEL_140;
        goto LABEL_121;
      }
    }
    else if (gLogCategory_SPEndpointManager <= 90)
    {
      if (gLogCategory_SPEndpointManager == -1 && !_LogCategory_Initialize())
        goto LABEL_140;
LABEL_121:
      LogPrintF();
LABEL_140:
      v22 = 0;
      v23 = 0;
      goto LABEL_69;
    }
LABEL_122:
    v37 = 0;
    v25 = 0;
    goto LABEL_123;
  }
  if ((a2 - 7) < 2)
    return;
  if (a2 == 5)
  {
    if (a3)
    {
      if (!APTransportDeviceCreate())
      {
        v7 = CMBaseObjectGetDerivedStorage();
        MEMORY[0x1CAA400CC](*(_QWORD *)(v7 + 24));
        if (gLogCategory_SPEndpointManager <= 50
          && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
        {
          APTransportDeviceGetDiscoveryID();
          LogPrintF();
        }
        v18 = CMBaseObjectGetDerivedStorage();
        if (gLogCategory_SPEndpointManager <= 50
          && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
        {
          APTransportDeviceGetDiscoveryID();
          LogPrintF();
        }
        spmanager_removeEndpointForTransportDeviceIfNeeded((uint64_t)a4, 0, *(const __CFDictionary **)(v18 + 48), 1, 0);
        MEMORY[0x1CAA400E4](*(_QWORD *)(v7 + 24));
        return;
      }
LABEL_115:
      APSLogErrorAt();
      return;
    }
LABEL_114:
    APSSignalErrorAt();
    return;
  }
  if (gLogCategory_SPEndpointManager <= 60
    && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void spmanager_handleHubbedDevicesChanged(uint64_t a1, void *a2)
{
  _QWORD *DerivedStorage;
  uint64_t CMBaseObject;
  unsigned int (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const void *v6;
  CFTypeRef v7;
  CFTypeRef cf;

  if (gLogCategory_SPEndpointManager <= 40
    && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  MEMORY[0x1CAA400CC](DerivedStorage[3]);
  CMBaseObject = SPHubbedDevicesProviderGetCMBaseObject(DerivedStorage[13]);
  v5 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (v5 && !v5(CMBaseObject, CFSTR("HubbedDevices"), *MEMORY[0x1E0C9AE00], &cf) && !FigCFEqual())
  {
    if (gLogCategory_SPEndpointManager <= 50
      && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v6 = (const void *)DerivedStorage[12];
    v7 = cf;
    DerivedStorage[12] = cf;
    if (v7)
      CFRetain(v7);
    if (v6)
      CFRelease(v6);
    if (DerivedStorage[12])
      spmanager_checkHubbedDevices(a2, 1);
  }
  MEMORY[0x1CAA400E4](DerivedStorage[3]);
  if (cf)
    CFRelease(cf);
}

void spmanager_handlePreferencesChanged(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  unsigned int (*v11)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  APSSettingsSynchronize();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 24));
  v3 = (const void *)APSSettingsCopyValue();
  if (!FigCFEqual())
  {
    if (gLogCategory_SPEndpointManager <= 40
      && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v4 = *(const void **)(DerivedStorage + 40);
    *(_QWORD *)(DerivedStorage + 40) = v3;
    if (v3)
      CFRetain(v3);
    if (v4)
      CFRelease(v4);
    if (*(_QWORD *)(DerivedStorage + 40))
    {
      v5 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
      cf = 0;
      Count = CFArrayGetCount(v5);
      if (Count >= 1)
      {
        v7 = Count;
        v8 = 0;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v5, v8);
          CMBaseObject = FigEndpointGetCMBaseObject();
          v11 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
          if (!v11 || v11(CMBaseObject, CFSTR("EndpointDescription"), 0, &cf))
            break;
          if (!spmanager_deviceIsAllowlisted(a1, (_BOOL8)cf))
            spmanager_removeEndpointIfNeeded(a1, (uint64_t)ValueAtIndex, 1, 0);
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          if (v7 == ++v8)
            goto LABEL_26;
        }
        APSLogErrorAt();
        if (cf)
          CFRelease(cf);
      }
LABEL_26:
      if (v5)
        CFRelease(v5);
    }
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 24));
  if (v3)
    CFRelease(v3);
}

void __spmanager_create_block_invoke(uint64_t a1)
{
  CFSetAddValue(*(CFMutableSetRef *)(*(_QWORD *)(a1 + 32) + 8), *(const void **)(a1 + 40));
}

uint64_t spmanager_introspector_setDiscoveryMode(const void *a1, uint64_t a2, int a3, uint64_t a4)
{
  _BOOL4 v5;

  if (!a1 || a3 < 2)
    return FPrintF();
  v5 = strcmp(*(const char **)(a4 + 8), "1") == 0;
  FPrintF();
  return spmanager_setDiscoveryNeeded(a1, v5, 0, 0);
}

void spmanager_introspector_activateEndpoint(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  CFStringRef v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  const void *v11;
  _DWORD *v12;
  void (*v13)(const void *, uint64_t, _QWORD, _QWORD, _DWORD *);

  if (!a1 || a3 < 2)
  {
LABEL_15:
    FPrintF();
    return;
  }
  v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(const char **)(a4 + 8), 0x8000100u);
  if (a3 == 2 || (v8 = atol(*(const char **)(a4 + 16))) == 0)
  {
    v9 = 10;
  }
  else
  {
    v9 = v8;
    if (gLogCategory_SPEndpointManager <= 50
      && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  v10 = spmanager_introspector_copyMatchingEndpoint(a1);
  if (!v10)
  {
    FPrintF();
    if (v7)
      CFRelease(v7);
    goto LABEL_15;
  }
  v11 = v10;
  v12 = malloc_type_calloc(1uLL, 8uLL, 0x10000404A09149AuLL);
  *(_BYTE *)v12 = 1;
  v12[1] = ++spmanager_introspector_getNextIndex_sIndex;
  FPrintF();
  if (gLogCategory_SPEndpointManager <= 50
    && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v13 = *(void (**)(const void *, uint64_t, _QWORD, _QWORD, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 8);
  if (v13)
    v13(v11, v9, 0, spmanager_introspector_activateEndpointCallback, v12);
  FPrintF();
  if (v7)
    CFRelease(v7);
  CFRelease(v11);
}

void spmanager_introspector_deactivateEndpoint(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  const __CFAllocator *v5;
  CFStringRef v6;
  CFTypeRef v7;
  const void *v8;
  _DWORD *v9;
  void *v10;
  CFDictionaryRef v11;
  void (*v12)(const void *, CFDictionaryRef, void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *), _DWORD *);
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  if (!a1 || a3 < 2)
  {
LABEL_9:
    FPrintF();
    return;
  }
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(const char **)(a4 + 8), 0x8000100u);
  v7 = spmanager_introspector_copyMatchingEndpoint(a1);
  if (!v7)
  {
    FPrintF();
    if (v6)
      CFRelease(v6);
    goto LABEL_9;
  }
  v8 = v7;
  v9 = malloc_type_calloc(1uLL, 8uLL, 0x10000404A09149AuLL);
  v10 = (void *)*MEMORY[0x1E0CA3958];
  values = CFSTR("Introspector deactivation request");
  keys[0] = v10;
  *(_BYTE *)v9 = 0;
  v9[1] = ++spmanager_introspector_getNextIndex_sIndex;
  v11 = CFDictionaryCreate(v5, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FPrintF();
  if (gLogCategory_SPEndpointManager <= 50
    && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v12 = *(void (**)(const void *, CFDictionaryRef, void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *), _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v12)
    v12(v8, v11, spmanager_introspector_activateEndpointCallback, v9);
  FPrintF();
  if (v6)
    CFRelease(v6);
  CFRelease(v8);
  if (v11)
    CFRelease(v11);
}

void spmanager_introspector_listEndpoints(uint64_t a1, uint64_t a2)
{
  if (a1)
    introspector_listEndpoints(a1, a2);
}

uint64_t spmanager_introspector_toggleListenForAvailable()
{
  int v0;

  v0 = spmanager_introspector_toggleListenForAvailable_listening;
  spmanager_introspector_toggleListenForAvailable_listening = spmanager_introspector_toggleListenForAvailable_listening == 0;
  CMNotificationCenterGetDefaultLocalCenter();
  if (v0)
    CMNotificationCenterRemoveListener();
  else
    CMNotificationCenterAddListener();
  return FPrintF();
}

void spmanager_introspector_homeHubInfo()
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  void (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObject = SPHubbedDevicesProviderGetCMBaseObject(*(_QWORD *)(DerivedStorage + 104));
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v2)
    v2(CMBaseObject, CFSTR("HubbedDevices"), *MEMORY[0x1E0C9AE00], &cf);
  FigServer_IsAirplayd();
  FPrintF();
  FPrintF();
  FPrintF();
  FPrintF();
  if (cf)
    CFRelease(cf);
}

uint64_t spmanager_Invalidate(void *a1)
{
  NSObject *v2;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 1))
  {
    v2 = dispatch_queue_create("com.apple.airplay.spendpointManager.invalidatequeue", 0);
    dispatch_sync_f(v2, a1, (dispatch_function_t)spmanager_invalidateInternal);
    if (v2)
      dispatch_release(v2);
  }
  return 0;
}

void spmanager_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  _QWORD block[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 1)
    && gLogCategory_SPEndpointManager <= 50
    && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    if (introspector_getCollectionOfSPEndpointManagers_once != -1)
      dispatch_once(&introspector_getCollectionOfSPEndpointManagers_once, &__block_literal_global_195);
    if (introspector_getCollectionOfSPEndpointManagers_coll)
    {
      v3 = *(NSObject **)introspector_getCollectionOfSPEndpointManagers_coll;
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __spmanager_Finalize_block_invoke;
      block[3] = &__block_descriptor_tmp_98;
      block[4] = introspector_getCollectionOfSPEndpointManagers_coll;
      block[5] = a1;
      dispatch_sync(v3, block);
    }
    v4 = *(NSObject **)(DerivedStorage + 8);
    if (v4)
    {
      dispatch_release(v4);
      *(_QWORD *)(DerivedStorage + 8) = 0;
    }
    FigSimpleMutexDestroy();
    v5 = *(const void **)(DerivedStorage + 40);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(DerivedStorage + 40) = 0;
    }
    v6 = *(const void **)(DerivedStorage + 48);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(DerivedStorage + 48) = 0;
    }
    v7 = *(const void **)(DerivedStorage + 56);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(DerivedStorage + 56) = 0;
    }
    v8 = *(const void **)(DerivedStorage + 64);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(DerivedStorage + 64) = 0;
    }
    v9 = *(const void **)(DerivedStorage + 96);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(DerivedStorage + 96) = 0;
    }
    v10 = *(const void **)(DerivedStorage + 104);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(DerivedStorage + 104) = 0;
    }
    v11 = *(const void **)(DerivedStorage + 160);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(DerivedStorage + 160) = 0;
    }
    v12 = *(const void **)(DerivedStorage + 152);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(DerivedStorage + 152) = 0;
    }
  }
  else
  {
    if (gLogCategory_SPEndpointManager <= 100)
      spmanager_Finalize_cold_1(gLogCategory_SPEndpointManager);
    __break(1u);
  }
}

__CFString *spmanager_CopyDebugDescription(uint64_t a1)
{
  uint64_t v2;
  __CFString *Mutable;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v6;
  CFTypeRef v7;
  size_t v8;
  CFTypeRef cf;

  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  cf = 0;
  CFStringAppendFormat(Mutable, 0, CFSTR("<SPEndpointManager %p>"), a1);
  CMBaseObject = FigEndpointManagerGetCMBaseObject();
  v5 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v5)
  {
    v6 = v5(CMBaseObject, CFSTR("ShowInfo"), v2, &cf);
    v7 = cf;
    if (!v6)
    {
      ASPrintF();
      v8 = strlen(0);
      if (v8 && *(_BYTE *)(v8 - 1) == 10)
        *(_BYTE *)(v8 - 1) = 0;
      CFStringAppendFormat(Mutable, 0, CFSTR("%s"), 0);
      free(0);
      v7 = cf;
    }
    if (v7)
      CFRelease(v7);
  }
  return Mutable;
}

uint64_t spmanager_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  CFNumberRef v10;
  uint64_t v12;
  CFMutableStringRef Mutable;
  uint64_t CMBaseObject;
  uint64_t (*v15)(uint64_t, _QWORD, const __CFAllocator *, CFDictionaryRef *);
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t ModeString;
  const __CFSet *v20;
  CFTypeID v21;
  CFTypeID TypeID;
  CFIndex Count;
  const __CFSet *v24;
  CFTypeID v25;
  CFTypeID v26;
  CFIndex v27;
  CFMutableDictionaryRef v28;
  __CFDictionary *v29;
  __CFString *v30;
  const __CFAllocator *v31;
  const __CFArray *v32;
  const __CFArray *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CFIndex v37;
  __CFArray *v38;
  const __CFArray *v39;
  uint64_t v40;
  void (*v41)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  const void *v42;
  __CFArray *v43;
  CFArrayRef v44;
  CFIndex j;
  const char *v46;
  CFIndex i;
  uint64_t v48;
  __CFString *v49;
  const char *v50;
  const char *v51;
  const void *v52;
  __CFString *v53;
  CFMutableDictionaryRef theDict;
  __CFString *theString;
  CFArrayRef theArray;
  _OWORD valuePtr[3];
  uint64_t v58;
  void *value[11];
  CFDictionaryRef v60[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpointManager <= 10
    && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
  {
    v50 = "OSStatus spmanager_CopyProperty(CMBaseObjectRef, CFStringRef, CFAllocatorRef, void *)";
    v52 = a2;
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294950584;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3A40]))
  {
    v9 = 0;
    *a4 = CFRetain((CFTypeRef)*MEMORY[0x1E0CA3A78]);
    return v9;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3A50]))
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 24));
    CMBaseObjectGetDerivedStorage();
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3A28]))
    {
      v9 = 0;
      *a4 = spmanager_copyAvailableEndpoints(a1, a3);
LABEL_13:
      MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 24));
      return v9;
    }
    if (!CFEqual(a2, CFSTR("ShowInfo")))
    {
      if (gLogCategory_SPEndpointManager <= 30
        && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v9 = 4294954512;
      goto LABEL_13;
    }
    CMBaseObjectGetDerivedStorage();
    v58 = 0;
    value[0] = 0;
    memset(valuePtr, 0, sizeof(valuePtr));
    DataBuffer_Init();
    v12 = CMBaseObjectGetDerivedStorage();
    v60[0] = 0;
    Mutable = CFStringCreateMutable(a3, 0);
    if (!Mutable)
    {
      APSLogErrorAt();
      v9 = 4294960568;
      goto LABEL_91;
    }
    CMBaseObject = APBrowserGetCMBaseObject();
    v15 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
    if (v15)
    {
      v16 = v15(CMBaseObject, *MEMORY[0x1E0CF1E28], a3, v60);
      if (!(_DWORD)v16)
      {
        v17 = CFDictionaryGetValue(v60[0], (const void *)*MEMORY[0x1E0CF1E30]);
        CFStringAppendFormat(Mutable, 0, CFSTR("\n%@"), v17);
        CFStringAppend(Mutable, CFSTR("\n"));
        CFStringAppend(Mutable, CFSTR("+-+ SPEndpointManager state +-+\n"));
        CFStringAppend(Mutable, CFSTR("\n"));
        v18 = 116;
        if (!*(_BYTE *)(v12 + 32))
          v18 = 102;
        CFStringAppendFormat(Mutable, 0, CFSTR("DiscoveryNeeded: %c\n"), v18, v50, v52);
        ModeString = APBrowserGetModeString();
        CFStringAppendFormat(Mutable, 0, CFSTR("DiscoveryMode: %s\n"), ModeString);
        CFStringAppend(Mutable, CFSTR("\n"));
        v20 = *(const __CFSet **)(v12 + 40);
        if (v20
          && (v21 = CFGetTypeID(v20), TypeID = CFArrayGetTypeID(), v20 = *(const __CFSet **)(v12 + 40), v21 == TypeID))
        {
          Count = CFSetGetCount(v20);
          CFStringAppendFormat(Mutable, 0, CFSTR("AllowlistedDevices: (%ld)\n"), Count);
          CFArrayGetCount(*(CFArrayRef *)(v12 + 40));
          value[6] = (void *)MEMORY[0x1E0C809B0];
          value[7] = (void *)0x40000000;
          value[8] = __spmanager_copyDescription_block_invoke;
          value[9] = &__block_descriptor_tmp_127;
          value[10] = Mutable;
          CFArrayApplyBlock();
        }
        else
        {
          CFStringAppendFormat(Mutable, 0, CFSTR("AllowlistedDevices: %@\n"), v20);
        }
        CFStringAppend(Mutable, CFSTR("\n"));
        v24 = *(const __CFSet **)(v12 + 96);
        if (v24 && (v25 = CFGetTypeID(v24), v26 = CFSetGetTypeID(), v24 = *(const __CFSet **)(v12 + 96), v25 == v26))
        {
          v27 = CFSetGetCount(v24);
          CFStringAppendFormat(Mutable, 0, CFSTR("HubbedDeviceIDs: (%ld)\n"), v27);
          value[1] = (void *)MEMORY[0x1E0C809B0];
          value[2] = (void *)0x40000000;
          value[3] = __spmanager_copyDescription_block_invoke_2;
          value[4] = &__block_descriptor_tmp_132;
          value[5] = Mutable;
          CFSetApplyBlock();
        }
        else
        {
          CFStringAppendFormat(Mutable, 0, CFSTR("HubbedDeviceIDs: %@\n"), v24);
        }
        v9 = 0;
LABEL_35:
        if (v60[0])
          CFRelease(v60[0]);
        if (!(_DWORD)v9)
        {
          v28 = CFDictionaryCreateMutable(a3, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v28)
          {
            v29 = v28;
            v30 = CFStringCreateMutable(a3, 0);
            CFStringAppend(v30, Mutable);
            v31 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v32 = spmanager_copyAvailableEndpoints(a1, (const __CFAllocator *)*MEMORY[0x1E0C9AE00]);
            v33 = v32;
            theString = v30;
            if (v32)
            {
              v34 = CFArrayGetCount(v32);
              if (v34 >= 1)
              {
                v53 = Mutable;
                theDict = v29;
                v35 = 0;
                v36 = 0;
                v37 = 0;
                theArray = 0;
                v38 = 0;
                do
                {
                  v39 = v33;
                  CFArrayGetValueAtIndex(v33, v37);
                  value[0] = 0;
                  v40 = FigEndpointGetCMBaseObject();
                  v41 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                  if (v41)
                    v41(v40, CFSTR("EndpointShowInfo"), v31, value);
                  v42 = value[0];
                  if (value[0])
                  {
                    v33 = v39;
                    if (!v38)
                    {
                      v38 = CFArrayCreateMutable(v31, v34, MEMORY[0x1E0C9B378]);
                      v42 = value[0];
                    }
                    CFArrayAppendValue(v38, v42);
                    if (CFDictionaryGetInt64())
                    {
                      v43 = theArray;
                      if (!theArray)
                        v43 = CFArrayCreateMutable(v31, v34, MEMORY[0x1E0C9B378]);
                      theArray = v43;
                      CFArrayAppendValue(v43, value[0]);
                      ++v35;
                    }
                    ++v36;
                    if (value[0])
                    {
                      CFRelease(value[0]);
                      value[0] = 0;
                    }
                  }
                  else
                  {
                    v33 = v39;
                  }
                  ++v37;
                }
                while (v34 != v37);
                if (v35 == 1)
                {
                  DataBuffer_AppendF();
                  v29 = theDict;
                  v44 = theArray;
                }
                else
                {
                  DataBuffer_AppendF();
                  v29 = theDict;
                  v44 = theArray;
                  if (!v35)
                  {
                    Mutable = v53;
                    goto LABEL_65;
                  }
                  if (v35 < 1)
                  {
LABEL_63:
                    CFDictionarySetValue(v29, CFSTR("ActivatedEndpointShowInfos"), v44);
                    Mutable = v53;
                    if (v44)
                    {
                      CFRelease(v44);
                      v44 = 0;
                    }
LABEL_65:
                    v46 = "";
                    if (v34 != 1)
                      v46 = "s";
                    v51 = v46;
                    DataBuffer_AppendF();
                    if (v38)
                    {
                      if (v36 >= 1)
                      {
                        for (i = 0; i != v36; ++i)
                        {
                          value[0] = (void *)CFArrayGetValueAtIndex(v38, i);
                          spmanager_AppendEndpointShowInfo((const __CFDictionary *)value[0], 0);
                        }
                      }
                      CFDictionarySetValue(v29, CFSTR("EndpointShowInfos"), v38);
                      CFRelease(v38);
                    }
                    v48 = DataBuffer_Append();
                    if ((_DWORD)v48)
                    {
                      v9 = v48;
                    }
                    else
                    {
                      v9 = DataBuffer_Commit();
                      v49 = theString;
                      if (!(_DWORD)v9)
                      {
                        CFStringAppendFormat(theString, 0, CFSTR("%s"), 0, v51);
                        CFDictionarySetValue(v29, CFSTR("DetailedDescription"), theString);
                        goto LABEL_75;
                      }
                    }
                    APSLogErrorAt();
                    CFRelease(v29);
                    v29 = 0;
                    v49 = theString;
LABEL_75:
                    DataBuffer_Free();
                    if (v33)
                      CFRelease(v33);
                    if (v49)
                      CFRelease(v49);
                    if (!Mutable)
                      goto LABEL_81;
LABEL_80:
                    CFRelease(Mutable);
LABEL_81:
                    if (v44)
                      CFRelease(v44);
                    if (!(_DWORD)v9)
                      *a4 = v29;
                    goto LABEL_13;
                  }
                }
                for (j = 0; j != v35; ++j)
                {
                  value[0] = (void *)CFArrayGetValueAtIndex(v44, j);
                  spmanager_AppendEndpointShowInfo((const __CFDictionary *)value[0], 1);
                }
                goto LABEL_63;
              }
            }
            else
            {
              v34 = 0;
            }
            DataBuffer_AppendF();
            v38 = 0;
            v36 = 0;
            v44 = 0;
            goto LABEL_65;
          }
          APSLogErrorAt();
          v9 = 4294950585;
LABEL_93:
          DataBuffer_Free();
          v29 = 0;
          v44 = 0;
          if (!Mutable)
            goto LABEL_81;
          goto LABEL_80;
        }
LABEL_91:
        APSLogErrorAt();
        goto LABEL_93;
      }
      v9 = v16;
    }
    else
    {
      v9 = 4294954514;
    }
    APSLogErrorAt();
    CFRelease(Mutable);
    Mutable = 0;
    goto LABEL_35;
  }
  *(_QWORD *)&valuePtr[0] = 8;
  v10 = CFNumberCreate(a3, kCFNumberSInt64Type, valuePtr);
  *a4 = v10;
  if (v10)
    return 0;
  APSLogErrorAt();
  return 4294950585;
}

uint64_t spmanager_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpointManager <= 10
    && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294950584;
  }
  else if (CFEqual(a2, CFSTR("SPEndpointManagerProperty_HubbedDeviceIDs")))
  {
    CMBaseObject = SPHubbedDevicesProviderGetCMBaseObject(*(_QWORD *)(DerivedStorage + 104));
    v7 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v7)
      return v7(CMBaseObject, CFSTR("HubbedDevices"), a3);
    else
      return 4294954514;
  }
  else
  {
    if (gLogCategory_SPEndpointManager <= 30
      && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 4294954512;
  }
}

_BYTE *spmanager_invalidateInternal(void *a1)
{
  _BYTE *result;
  _BYTE *v3;
  int v4;
  const void *v5;
  uint64_t CMBaseObject;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    v3 = result;
    if (gLogCategory_SPEndpointManager <= 50
      && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    AirPlayDebugIPCDisableForEndpointManager(a1);
    v4 = *((_DWORD *)v3 + 4);
    if (v4 != -1)
    {
      notify_cancel(v4);
      *((_DWORD *)v3 + 4) = -1;
    }
    MEMORY[0x1CAA400CC](*((_QWORD *)v3 + 3));
    v5 = (const void *)*((_QWORD *)v3 + 12);
    if (v5)
      CFRelease(v5);
    *((_QWORD *)v3 + 12) = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3B0]);
    spmanager_checkHubbedDevices(a1, 0);
    MEMORY[0x1CAA400E4](*((_QWORD *)v3 + 3));
    *v3 = 1;
    SPHubbedDevicesProviderRemoveListener(*((_QWORD *)v3 + 13), (uint64_t)a1);
    CMBaseObject = SPHubbedDevicesProviderGetCMBaseObject(*((_QWORD *)v3 + 13));
    if (CMBaseObject)
    {
      v7 = CMBaseObject;
      v8 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v8)
        v8(v7);
    }
    result = (_BYTE *)*((_QWORD *)v3 + 19);
    if (result)
    {
      v9 = APBrowserGetCMBaseObject();
      if (!v9
        || (v10 = v9, (v11 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24)) == 0)
        || (result = (_BYTE *)v11(v10), (_DWORD)result))
      {
        result = (_BYTE *)APSLogErrorAt();
      }
    }
  }
  if (gLogCategory_SPEndpointManager <= 50)
  {
    if (gLogCategory_SPEndpointManager != -1)
      return (_BYTE *)LogPrintF();
    result = (_BYTE *)_LogCategory_Initialize();
    if ((_DWORD)result)
      return (_BYTE *)LogPrintF();
  }
  return result;
}

void spmanager_checkHubbedDevices(void *a1, int a2)
{
  uint64_t DerivedStorage;
  const __CFSet *Count;
  __int128 context;
  CFSetRef theSet[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  context = 0u;
  *(_OWORD *)theSet = 0u;
  if (gLogCategory_SPEndpointManager <= 50
    && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage
    || (theSet[0] = 0,
        context = (unint64_t)a1,
        (theSet[1] = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0])) == 0))
  {
    APSLogErrorAt();
  }
  else
  {
    spmanager_activationAttemptsClearIfExpired();
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 48), (CFDictionaryApplierFunction)checkEndpointHubbedState, &context);
    Count = (const __CFSet *)CFSetGetCount(*(CFSetRef *)(DerivedStorage + 96));
    if (CFSetGetCount(theSet[1]) >= 1)
    {
      if (gLogCategory_SPEndpointManager <= 40
        && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFSetApplyFunction(theSet[1], (CFSetApplierFunction)removeNonHubbedEndpoint, a1);
    }
    if (gLogCategory_SPEndpointManager <= 50
      && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    spmanager_setDiscoveryNeeded(a1, *((_QWORD *)&context + 1) < (uint64_t)Count, (CFSetRef)((char *)theSet[0] + *((_QWORD *)&context + 1)) == Count, a2);
    if (theSet[1])
      CFRelease(theSet[1]);
  }
  if (gLogCategory_SPEndpointManager <= 50
    && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

__n128 spmanager_activationAttemptsClearIfExpired()
{
  uint64_t DerivedStorage;
  __n128 result;
  uint64_t v2;
  CMTime *v3;
  OpaqueCMClock *HostTimeClock;
  uint64_t v5;
  CMTime rhs;
  CMTime lhs;
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_BYTE *)(DerivedStorage + 84) & 1) != 0)
  {
    v2 = DerivedStorage;
    v3 = (CMTime *)(DerivedStorage + 72);
    HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&lhs, HostTimeClock);
    rhs = *v3;
    CMTimeSubtract(&time, &lhs, &rhs);
    result.n128_f64[0] = CMTimeGetSeconds(&time);
    if (result.n128_f64[0] >= (double)*(unint64_t *)(v2 + 144))
    {
      if (gLogCategory_SPEndpointManager <= 50
        && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFSetRemoveAllValues(*(CFMutableSetRef *)(v2 + 64));
      v5 = MEMORY[0x1E0CA2E18];
      result = *(__n128 *)MEMORY[0x1E0CA2E18];
      *(_OWORD *)&v3->value = *MEMORY[0x1E0CA2E18];
      v3->epoch = *(_QWORD *)(v5 + 16);
    }
  }
  return result;
}

void checkEndpointHubbedState(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  unsigned int (*v7)(uint64_t, _QWORD, _QWORD, void **);
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v7 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v7 || v7(CMBaseObject, *MEMORY[0x1E0CA4258], *MEMORY[0x1E0C9AE00], &value))
  {
    APSLogErrorAt();
  }
  else
  {
    v8 = CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 96), value);
    v9 = APSGetFBOPropertyInt64();
    if (gLogCategory_SPEndpointManager <= 30
      && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (v8)
    {
      if (v9)
      {
        if (gLogCategory_SPEndpointManager <= 50
          && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        ++*(_QWORD *)(a3 + 8);
      }
      else if (CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 64), value))
      {
        if (gLogCategory_SPEndpointManager <= 50
          && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        ++*(_QWORD *)(a3 + 16);
      }
      else
      {
        if (gLogCategory_SPEndpointManager <= 50
          && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v13 = *(const void **)a3;
        ++*(_QWORD *)(a3 + 8);
        spmanager_activateEndpoint(v13, (uint64_t)a2);
      }
    }
    else if (v9)
    {
      if (gLogCategory_SPEndpointManager <= 50
        && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v10 = value;
      v11 = CMBaseObjectGetDerivedStorage();
      CFSetRemoveValue(*(CFMutableSetRef *)(v11 + 64), v10);
      if (gLogCategory_SPEndpointManager <= 50
        && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (!CFSetGetCount(*(CFSetRef *)(v11 + 64)))
      {
        v12 = MEMORY[0x1E0CA2E18];
        *(_OWORD *)(v11 + 72) = *MEMORY[0x1E0CA2E18];
        *(_QWORD *)(v11 + 88) = *(_QWORD *)(v12 + 16);
      }
      spmanager_deactivateEndpoint(*(const void **)a3, (uint64_t)a2, CFSTR("NoLongerHubbed"));
    }
    else
    {
      if (gLogCategory_SPEndpointManager <= 50
        && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFSetAddValue(*(CFMutableSetRef *)(a3 + 24), a2);
    }
  }
  if (value)
    CFRelease(value);
}

uint64_t removeNonHubbedEndpoint(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v3;

  v3 = 0;
  result = spmanager_removeEndpointIfNeeded(a2, a1, 1, &v3);
  if (gLogCategory_SPEndpointManager <= 50)
  {
    if (gLogCategory_SPEndpointManager != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

uint64_t spmanager_setDiscoveryNeeded(const void *a1, int a2, int a3, int a4)
{
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;

  result = CMBaseObjectGetDerivedStorage();
  v9 = result;
  if (!a2)
  {
    v10 = *(_DWORD *)(result + 36) > 0;
    if (!a3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v10 = 1;
  if (a3)
LABEL_3:
    LOBYTE(a3) = *(_DWORD *)(result + 36) == 0;
LABEL_4:
  if (*(unsigned __int8 *)(result + 32) != v10
    || (a4 ? (v11 = v10) : (v11 = 0), (v10 & a3 & 1) != 0 || v11))
  {
    if (gLogCategory_SPEndpointManager <= 50
      && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_BYTE *)(v9 + 32) = v10;
    CFRetain(a1);
    return APSDispatchAsyncFHelper();
  }
  else if (gLogCategory_SPEndpointManager <= 50)
  {
    if (gLogCategory_SPEndpointManager != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

void spmanager_activateEndpoint(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  _BYTE *v7;
  unsigned int (*v8)(uint64_t, uint64_t, __CFDictionary *, _QWORD, _BYTE *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v6 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("SupportsMultipleStreams"), (const void *)*MEMORY[0x1E0C9AE50]);
    v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200405F07FB98uLL);
    *(_QWORD *)v7 = CFRetain(a1);
    v7[8] = 1;
    ++*(_DWORD *)(DerivedStorage + 36);
    if (gLogCategory_SPEndpointManager <= 50
      && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v8 = *(unsigned int (**)(uint64_t, uint64_t, __CFDictionary *, _QWORD, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 8);
    if (!v8 || v8(a2, 8, v6, spmanager_activateEndpointCallback, v7))
      APSLogErrorAt();
    CFRelease(v6);
  }
  else
  {
    APSLogErrorAt();
  }
}

void spmanager_deactivateEndpoint(const void *a1, uint64_t a2, const void *a3)
{
  _BYTE *v6;
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  unsigned int (*v9)(uint64_t, __CFDictionary *, uint64_t (*)(), _BYTE *);

  v6 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200405F07FB98uLL);
  *(_QWORD *)v6 = CFRetain(a1);
  v6[8] = 0;
  if (gLogCategory_SPEndpointManager <= 50
    && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a3)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v8 = Mutable;
    if (Mutable)
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA3958], a3);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int (**)(uint64_t, __CFDictionary *, uint64_t (*)(), _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v9 && !v9(a2, v8, spmanager_activateEndpointCallback, v6))
  {
    if (!v8)
      return;
    goto LABEL_12;
  }
  APSLogErrorAt();
  if (v8)
LABEL_12:
    CFRelease(v8);
}

void spmanager_activateEndpointCallback(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v12;
  uint64_t v13;
  OpaqueCMClock *HostTimeClock;
  int v15;
  CFTypeRef cf;
  CMTime v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (gLogCategory_SPEndpointManager <= 50
    && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a4)
  {
    v9 = CMBaseObjectGetDerivedStorage();
    if (gLogCategory_SPEndpointManager <= 40
      && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (*(_BYTE *)(v9 + 112))
      dispatch_async(*(dispatch_queue_t *)(v9 + 8), &__block_literal_global_67);
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 24));
  if (*((_BYTE *)a5 + 8))
  {
    --*(_DWORD *)(DerivedStorage + 36);
    CMBaseObject = FigEndpointGetCMBaseObject();
    v11 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v11 && (v11(CMBaseObject, *MEMORY[0x1E0CA4258], *MEMORY[0x1E0C9AE00], &cf), (v12 = cf) != 0))
    {
      v13 = CMBaseObjectGetDerivedStorage();
      if (gLogCategory_SPEndpointManager <= 50
        && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFSetAddValue(*(CFMutableSetRef *)(v13 + 64), v12);
      if ((*(_BYTE *)(v13 + 84) & 1) == 0)
      {
        if (gLogCategory_SPEndpointManager <= 50
          && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        HostTimeClock = CMClockGetHostTimeClock();
        CMClockGetTime(&v17, HostTimeClock);
        *(CMTime *)(v13 + 72) = v17;
      }
    }
    else if (gLogCategory_SPEndpointManager <= 90
           && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  if (a4 || (v15 = *((unsigned __int8 *)a5 + 8), !*((_BYTE *)a5 + 8)))
  {
    spmanager_removeEndpointIfNeeded(*a5, a1, 0, 0);
    v15 = *((unsigned __int8 *)a5 + 8);
  }
  spmanager_checkHubbedDevices(*a5, v15 == 0);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 24));
  if (*a5)
    CFRelease((CFTypeRef)*a5);
  free(a5);
  if (cf)
    CFRelease(cf);
}

uint64_t spmanager_removeEndpointIfNeeded(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v10;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v9)
    v10 = v9(CMBaseObject, CFSTR("TransportDevice"), *MEMORY[0x1E0C9AE00], &cf);
  else
    v10 = 4294954514;
  if (gLogCategory_SPEndpointManager <= 50
    && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
  {
    if (cf)
      APTransportDeviceGetDiscoveryID();
    LogPrintF();
  }
  if ((_DWORD)v10)
    APSLogErrorAt();
  else
    spmanager_removeEndpointForTransportDeviceIfNeeded(a1, cf, *(const __CFDictionary **)(DerivedStorage + 48), a3, a4);
  if (cf)
    CFRelease(cf);
  return v10;
}

void __spmanager_notifyAvailableEndpointsChanged_block_invoke()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("TestOnly_ActiveSidePlayEndpointsChanged"), 0, 0, 1u);
}

uint64_t spmanager_removeEndpointForTransportDeviceIfNeeded(uint64_t a1, const void *a2, const __CFDictionary *a3, int a4, char *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t result;
  char v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    result = APSLogErrorAt();
    goto LABEL_15;
  }
  v11 = DerivedStorage;
  if (gLogCategory_SPEndpointManager <= 50
    && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a4 && !CFSetContainsValue(*(CFSetRef *)(v11 + 56), a2))
  {
    if (gLogCategory_SPEndpointManager <= 50
      && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
    {
      APTransportDeviceGetDiscoveryID();
      LogPrintF();
    }
    CFSetAddValue(*(CFMutableSetRef *)(v11 + 56), a2);
  }
  result = (uint64_t)CFDictionaryGetValue(a3, a2);
  if (!result
    || (result = APSGetFBOPropertyInt64()) != 0
    || (result = CFSetContainsValue(*(CFSetRef *)(v11 + 56), a2), !(_DWORD)result))
  {
LABEL_15:
    v13 = 0;
    if (!a5)
      return result;
    goto LABEL_16;
  }
  result = (uint64_t)spmanager_removeEndpointForTransportDevice(a1, a3, a2);
  v13 = 1;
  if (a5)
LABEL_16:
    *a5 = v13;
  return result;
}

const void *spmanager_removeEndpointForTransportDevice(uint64_t a1, const __CFDictionary *a2, const void *a3)
{
  const void *result;
  const void *v7;
  void (*v8)(const void *);

  CMBaseObjectGetDerivedStorage();
  result = CFDictionaryGetValue(a2, a3);
  if (result)
  {
    v7 = result;
    if (gLogCategory_SPEndpointManager <= 50
      && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
    {
      APTransportDeviceGetDiscoveryID();
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v8 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v8)
      v8(v7);
    CFDictionaryRemoveValue(a2, a3);
    return (const void *)spmanager_checkHubbedDevices(a1, 0);
  }
  return result;
}

void spmanager_handleEndpointFailed(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = APSGetFBOPropertyInt64();
  if (gLogCategory_SPEndpointManager <= 50)
  {
    if (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize())
      LogPrintF();
    if (gLogCategory_SPEndpointManager <= 50
      && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  if (v6)
    spmanager_deactivateEndpoint(a2, a4, CFSTR("ConnectionFailed"));
}

void spmanager_handleEndpointDissociated(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpointManager <= 50)
  {
    if (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize())
      LogPrintF();
    if (gLogCategory_SPEndpointManager <= 50
      && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 24));
  spmanager_removeEndpointIfNeeded(a2, a4, 0, 0);
  JUMPOUT(0x1CAA400E4);
}

void spmanager_deferredHandleDiscoveryStateChanged(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  int64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  dispatch_time_t v8;
  NSObject *v9;
  NSObject *v10;
  dispatch_time_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 24));
  if (gLogCategory_SPEndpointManager <= 50
    && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 9))
    {
      if (*(_WORD *)(DerivedStorage + 34))
      {
        v3 = *(NSObject **)(DerivedStorage + 120);
        if (v3)
        {
          v4 = 0;
LABEL_20:
          v8 = dispatch_time(0, v4);
          dispatch_source_set_timer(v3, v8, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
          goto LABEL_25;
        }
      }
    }
    if (*(_BYTE *)(a1 + 10))
    {
      v3 = *(NSObject **)(DerivedStorage + 120);
      if (v3)
      {
        if (*(_WORD *)(DerivedStorage + 34))
          v4 = 1000000000 * *(_QWORD *)(DerivedStorage + 128);
        else
          v4 = 0;
        goto LABEL_20;
      }
    }
    v6 = *(void **)a1;
    v7 = CMBaseObjectGetDerivedStorage();
    if (gLogCategory_SPEndpointManager <= 50
      && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v9 = *(NSObject **)(v7 + 120);
    if (v9)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(v7 + 120));
      dispatch_release(v9);
      *(_QWORD *)(v7 + 120) = 0;
    }
    *(_QWORD *)(v7 + 120) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v7 + 8));
    CFRetain(v6);
    dispatch_set_context(*(dispatch_object_t *)(v7 + 120), v6);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v7 + 120), (dispatch_function_t)spmanager_discoveryTimerFired);
    dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v7 + 120), (dispatch_function_t)spmanager_discoveryTimerCancelled);
    v10 = *(NSObject **)(v7 + 120);
    v11 = dispatch_time(0, 0);
    dispatch_source_set_timer(v10, v11, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    dispatch_resume(*(dispatch_object_t *)(v7 + 120));
  }
  else
  {
    v5 = *(NSObject **)(DerivedStorage + 120);
    if (v5)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 120));
      dispatch_release(v5);
      *(_QWORD *)(DerivedStorage + 120) = 0;
    }
  }
LABEL_25:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 24));
  CFRelease(*(CFTypeRef *)a1);
}

void spmanager_discoveryTimerFired(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  dispatch_time_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 24));
  if (*(_WORD *)(DerivedStorage + 34) && !*(_DWORD *)(DerivedStorage + 36))
  {
    v4 = 0;
    v3 = (uint64_t *)(DerivedStorage + 136);
  }
  else
  {
    v3 = (uint64_t *)(DerivedStorage + 128);
    v4 = 2;
  }
  v5 = *v3;
  if (gLogCategory_SPEndpointManager <= 50
    && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  spmanager_setDiscoveryMode(a1, v4);
  v6 = *(NSObject **)(DerivedStorage + 120);
  v7 = dispatch_time(0, 1000000000 * v5);
  dispatch_source_set_timer(v6, v7, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
  JUMPOUT(0x1CAA400E4);
}

void spmanager_discoveryTimerCancelled(const void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_SPEndpointManager <= 50
    && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 24));
  spmanager_setDiscoveryMode((uint64_t)a1, 0);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 24));
  CFRelease(a1);
}

uint64_t spmanager_setDiscoveryMode(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  const __CFDictionary *v6;
  const __CFArray *v7;
  const __CFArray *v8;
  CFIndex v9;
  const void *ValueAtIndex;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);

  result = CMBaseObjectGetDerivedStorage();
  v5 = result;
  if (gLogCategory_SPEndpointManager <= 50)
  {
    if (gLogCategory_SPEndpointManager != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
    {
      APBrowserGetModeString();
      APBrowserGetModeString();
      result = LogPrintF();
    }
  }
  if (*(unsigned __int16 *)(v5 + 34) != (_DWORD)a2)
  {
    *(_WORD *)(v5 + 34) = a2;
    if (!(_DWORD)a2)
    {
      v6 = *(const __CFDictionary **)(v5 + 48);
      CMBaseObjectGetDerivedStorage();
      if (gLogCategory_SPEndpointManager <= 50
        && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v7 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
      if (v7)
      {
        v8 = v7;
        if (CFArrayGetCount(v7) >= 1)
        {
          v9 = 0;
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v8, v9);
            spmanager_removeEndpointForTransportDeviceIfNeeded(a1, ValueAtIndex, v6, 1, 0);
            ++v9;
          }
          while (v9 < CFArrayGetCount(v8));
        }
        CFRelease(v8);
      }
    }
    v11 = *(_QWORD *)(v5 + 152);
    v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v12)
      return APSLogErrorAt();
    result = v12(v11, a2);
    if ((_DWORD)result)
      return APSLogErrorAt();
  }
  return result;
}

CFMutableArrayRef spmanager_copyAvailableEndpoints(uint64_t a1, const __CFAllocator *a2)
{
  uint64_t DerivedStorage;
  CFMutableArrayRef Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFArrayCreateMutable(a2, 0, MEMORY[0x1E0C9B378]);
  if (*(_QWORD *)(DerivedStorage + 48))
    CFDictionaryApplyBlock();
  return Mutable;
}

void __spmanager_copyAvailableEndpoints_block_invoke(uint64_t a1, uint64_t a2, const void *a3)
{
  if (APSGetFBOPropertyInt64())
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), a3);
}

const __CFDictionary *spmanager_AppendEndpointShowInfo(const __CFDictionary *result, int a2)
{
  const __CFDictionary *v3;
  const __CFDictionary *Value;
  const __CFDictionary *v5;
  const __CFDictionary *v6;

  if (result)
  {
    v3 = result;
    CFDictionaryGetValue(result, CFSTR("EndpointHash"));
    DataBuffer_AppendF();
    CFDictionaryGetValue(v3, CFSTR("Name"));
    DataBuffer_AppendF();
    if (CFDictionaryGetValue(v3, CFSTR("DiscoveryID")))
      DataBuffer_AppendF();
    CFDictionaryGetValue(v3, CFSTR("DeviceID"));
    DataBuffer_AppendF();
    CFDictionaryGetValue(v3, CFSTR("Model"));
    DataBuffer_AppendF();
    CFDictionaryGetValue(v3, CFSTR("SourceVersion"));
    DataBuffer_AppendF();
    CFDictionaryGetValue(v3, CFSTR("AirPlayFeatures"));
    APSFeaturesCopyStringRepresentation();
    DataBuffer_AppendF();
    CFDictionaryGetInt64();
    DataBuffer_AppendF();
    CFDictionaryGetInt64();
    DataBuffer_AppendF();
    Value = (const __CFDictionary *)CFDictionaryGetValue(v3, CFSTR("SenderSessionInfo"));
    if (Value)
    {
      v5 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("TransportSessionInfo"));
      if (v5)
      {
        if (CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E0CF1EE8]))
          DataBuffer_AppendF();
      }
    }
    result = (const __CFDictionary *)DataBuffer_AppendF();
    if (a2)
    {
      result = (const __CFDictionary *)CFDictionaryGetValue(v3, CFSTR("StreamInfo_BufferedAudio"));
      if (result)
      {
        v6 = result;
        CFDictionaryGetInt64();
        DataBuffer_AppendF();
        CFDictionaryGetInt64();
        DataBuffer_AppendF();
        CFDictionaryGetValue(v6, CFSTR("Type"));
        DataBuffer_AppendF();
        if (CFDictionaryGetValue(v6, CFSTR("Subtype")))
          DataBuffer_AppendF();
        CFDictionaryGetValue(v6, CFSTR("Name"));
        DataBuffer_AppendF();
        return (const __CFDictionary *)DataBuffer_AppendF();
      }
    }
  }
  return result;
}

void __spmanager_copyDescription_block_invoke(uint64_t a1, uint64_t a2)
{
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), 0, CFSTR("  %@\n"), a2);
}

void __spmanager_copyDescription_block_invoke_2(uint64_t a1, uint64_t a2)
{
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), 0, CFSTR("  %@\n"), a2);
}

BOOL spmanager_deviceIsAllowlisted(uint64_t a1, _BOOL8 a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v8;
  void (*v9)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v10;
  const void *v11;
  CFTypeID v12;
  CFIndex Count;
  CFIndex v14;
  CFIndex v15;
  const void *ValueAtIndex;
  uint64_t v17;
  BOOL v18;
  CFTypeRef v20;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v20 = 0;
  cf = 0;
  if (!a2)
  {
    APSLogErrorAt();
    goto LABEL_24;
  }
  v4 = DerivedStorage;
  if (!*(_QWORD *)(DerivedStorage + 40))
  {
    a2 = 1;
    goto LABEL_24;
  }
  v5 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(a2);
  v7 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v7)
    v7(CMBaseObject, CFSTR("DeviceID"), v5, &cf);
  v8 = APEndpointDescriptionGetCMBaseObject(a2);
  v9 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v9)
    v9(v8, CFSTR("Name"), v5, &v20);
  v10 = CFGetHardwareAddress();
  v11 = *(const void **)(v4 + 40);
  if (!v11 || !v10)
    goto LABEL_22;
  v12 = CFGetTypeID(v11);
  if (v12 != CFArrayGetTypeID())
  {
    a2 = v10 == CFGetHardwareAddress();
    goto LABEL_24;
  }
  Count = CFArrayGetCount(*(CFArrayRef *)(v4 + 40));
  v14 = Count - 1;
  if (Count >= 1)
  {
    v15 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 40), v15);
      v17 = CFGetHardwareAddress();
      if (gLogCategory_SPEndpointManager <= 30
        && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
      {
        CFGetTypeID(ValueAtIndex);
        CFGetTypeID(cf);
        LogPrintF();
      }
      v18 = v17 == v10;
      a2 = v17 == v10;
      v18 = v18 || v14 == v15++;
    }
    while (!v18);
  }
  else
  {
LABEL_22:
    a2 = 0;
  }
LABEL_24:
  if (gLogCategory_SPEndpointManager <= 30
    && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (cf)
    CFRelease(cf);
  if (v20)
    CFRelease(v20);
  return a2;
}

void __spmanager_registerForNotifications_block_invoke(uint64_t a1)
{
  spmanager_handlePreferencesChanged(*(_QWORD *)(a1 + 32));
}

uint64_t __introspector_getCollectionOfSPEndpointManagers_block_invoke()
{
  uint64_t result;
  CFMutableSetRef Mutable;
  uint64_t v2;

  result = IsAppleInternalBuild();
  if ((_DWORD)result)
  {
    introspector_getCollectionOfSPEndpointManagers_coll = (uint64_t)malloc_type_calloc(1uLL, 0x18uLL, 0x70040EA3A3B56uLL);
    *(_QWORD *)introspector_getCollectionOfSPEndpointManagers_coll = dispatch_queue_create("CollectionOfSPEndpointManagers", 0);
    Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    v2 = introspector_getCollectionOfSPEndpointManagers_coll;
    *(_QWORD *)(introspector_getCollectionOfSPEndpointManagers_coll + 8) = Mutable;
    *(_QWORD *)(v2 + 16) = "SPEndpointManagers";
    return APSIntrospectorAddCommand();
  }
  return result;
}

CFTypeRef spmanager_introspector_copyMatchingEndpoint(uint64_t a1)
{
  uint64_t v1;
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  uint64_t v7;
  uint64_t v8;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  void (*v11)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  CFTypeRef v14;
  CFTypeRef v16;
  CFTypeRef cf;

  v16 = 0;
  cf = 0;
  v1 = *MEMORY[0x1E0C9AE00];
  v2 = spmanager_copyAvailableEndpoints(a1, (const __CFAllocator *)*MEMORY[0x1E0C9AE00]);
  if (v2)
  {
    v3 = v2;
    Count = CFArrayGetCount(v2);
    if (Count < 1)
    {
LABEL_19:
      v14 = 0;
    }
    else
    {
      v5 = Count;
      v6 = 0;
      v7 = *MEMORY[0x1E0CA4258];
      v8 = *MEMORY[0x1E0CA4348];
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v3, v6);
        CMBaseObject = FigEndpointGetCMBaseObject();
        v11 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
        if (v11)
          v11(CMBaseObject, v7, v1, &cf);
        if (FigCFEqual())
          break;
        v12 = FigEndpointGetCMBaseObject();
        v13 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
        if (v13)
          v13(v12, v8, v1, &v16);
        if (FigCFEqual())
        {
          if (gLogCategory_SPEndpointManager > 50
            || gLogCategory_SPEndpointManager == -1 && !_LogCategory_Initialize())
          {
            goto LABEL_30;
          }
LABEL_26:
          LogPrintF();
          goto LABEL_30;
        }
        if (gLogCategory_SPEndpointManager <= 50
          && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (v16)
        {
          CFRelease(v16);
          v16 = 0;
        }
        if (v5 == ++v6)
          goto LABEL_19;
      }
      if (gLogCategory_SPEndpointManager <= 50
        && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_26;
      }
LABEL_30:
      v14 = CFRetain(ValueAtIndex);
    }
    CFRelease(v3);
  }
  else
  {
    v14 = 0;
  }
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  return v14;
}

void spmanager_introspector_activateEndpointCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (gLogCategory_SPEndpointManager <= 50
    && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  else if (!a5)
  {
    return;
  }
  free(a5);
}

void introspector_listEndpoints(uint64_t a1, uint64_t a2)
{
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeID v5;
  CFIndex Count;
  CFIndex i;
  CFTypeRef cf[67];

  cf[65] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  CMBaseObject = FigEndpointManagerGetCMBaseObject();
  v4 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v4
    && (v4(CMBaseObject, *MEMORY[0x1E0CA3A28], *MEMORY[0x1E0C9AE00], cf), cf[0])
    && (v5 = CFGetTypeID(cf[0]), v5 == CFArrayGetTypeID()))
  {
    Count = CFArrayGetCount((CFArrayRef)cf[0]);
    if (a2)
    {
      FPrintF();
    }
    else if (gLogCategory_SPEndpointManager <= 50
           && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        CFArrayGetValueAtIndex((CFArrayRef)cf[0], i);
        __strlcpy_chk();
        APSGetFBOPropertyCString();
        __strlcpy_chk();
        APSGetFBOPropertyCString();
        APSGetFBOPropertyInt64();
        APSGetFBOPropertyInt64();
        if (a2)
        {
          FPrintF();
        }
        else if (gLogCategory_SPEndpointManager <= 50
               && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
    }
  }
  else if (a2)
  {
    FPrintF();
  }
  else if (gLogCategory_SPEndpointManager <= 50
         && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (cf[0])
    CFRelease(cf[0]);
}

void spmanager_introspector_handleAvailableEndpointNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (gLogCategory_SPEndpointManager <= 50
    && (gLogCategory_SPEndpointManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  introspector_listEndpoints(a4, 0);
}

uint64_t APEndpointStreamScreenUDPCreate(int a1, const __CFDictionary *a2, CFTypeRef cf, const void *a4, const void *a5, const void *a6, const void *a7, int a8, CFTypeRef *a9)
{
  CFTypeID v15;
  CFTypeID v16;
  uint64_t DerivedStorage;
  dispatch_queue_t v18;
  CFTypeRef v19;
  uint64_t CMBaseObject;
  uint64_t (*v21)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  const __CFAllocator *v22;
  const void *ValueAtIndex;
  uint64_t v24;
  int v25;
  int v26;
  CFTypeRef v27;
  const void *Value;
  const void *v29;
  CFTypeID v30;
  const char *v31;
  uint64_t v32;
  const void *v33;
  unsigned int v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t);
  const void *v39;
  const void *v40;
  CFDictionaryRef *v41;
  char v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const void *v46;
  const void **v47;
  const void *v48;
  const void *v49;
  CFTypeID v50;
  const void *v51;
  __CFDictionary *Mutable;
  CFDictionaryRef v53;
  const void *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t UpTimeNanoseconds;
  CFTypeRef v59;
  int v60;
  double v61;
  double v62;
  uint64_t v63;
  const char *v64;
  const char *v65;
  const char *v66;
  const char *v67;
  const char *v68;
  const char *v69;
  const __CFDictionary *v70;
  APEndpointStreamScreenAVCWrapper *v71;
  const __CFDictionary *DisplayHDRMode;
  _BOOL8 v73;
  BOOL v74;
  _BOOL8 v75;
  unsigned int v77;
  CFTypeRef v78;
  double v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  const char *v85;
  uint64_t v86;
  const char *v87;
  const char *v88;
  const char *v89;
  const char *v90;
  CFDictionaryRef dict[5];
  char v92;
  CFTypeRef v93;
  CFTypeRef v94;
  CFArrayRef theArray;
  CFTypeRef v96;
  unsigned int v97;
  CFTypeRef cfa;
  CFTypeRef v99;
  CFTypeRef v100;
  CFDictionaryRef v101;
  int v102;
  char label[64];
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  theArray = 0;
  v96 = 0;
  v93 = 0;
  v94 = 0;
  v92 = 0;
  if (!cf || (v15 = CFGetTypeID(cf), v15 != CFStringGetTypeID()))
  {
    v97 = -16760;
LABEL_172:
    APSLogErrorAt();
    goto LABEL_155;
  }
  if (!a5 || (v16 = CFGetTypeID(a5), v16 != APEndpointDescriptionGetTypeID()))
  {
    v97 = -16760;
    goto LABEL_172;
  }
  if (!a9)
  {
    v97 = -16760;
    goto LABEL_172;
  }
  if (!a7)
  {
    v97 = -16760;
    goto LABEL_172;
  }
  FigEndpointStreamGetClassID();
  v97 = CMDerivedObjectCreate();
  if (v97)
    goto LABEL_36;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 260) = 60;
  *(_WORD *)(DerivedStorage + 250) = 256;
  *(_BYTE *)(DerivedStorage + 255) = 0;
  *(_BYTE *)(DerivedStorage + 252) = APSSettingsGetInt64() == 0;
  *(_BYTE *)(DerivedStorage + 113) = FigGetCFPreferenceNumberWithDefault();
  *(_BYTE *)(DerivedStorage + 112) = FigGetCFPreferenceNumberWithDefault();
  *(_BYTE *)(DerivedStorage + 251) = FigGetCFPreferenceNumberWithDefault();
  if (gLogCategory_APEndpointStreamScreenUDP <= 40
    && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_BYTE *)(DerivedStorage + 252) = FigGetCFPreferenceNumberWithDefault();
  if (gLogCategory_APEndpointStreamScreenUDP <= 40
    && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_DWORD *)(DerivedStorage + 264) = FigGetCFPreferenceNumberWithDefault();
  if (gLogCategory_APEndpointStreamScreenUDP <= 40
    && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_BYTE *)(DerivedStorage + 268) = FigGetCFPreferenceNumberWithDefault();
  if (gLogCategory_APEndpointStreamScreenUDP <= 40
    && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  SNPrintF();
  *(_QWORD *)DerivedStorage = dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 16) = os_transaction_create();
  SNPrintF();
  *(_QWORD *)(DerivedStorage + 64) = dispatch_queue_create(label, 0);
  v78 = v96;
  SNPrintF();
  v18 = dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 128) = v18;
  if (v18)
  {
    *(_QWORD *)(DerivedStorage + 8) = CFRetain(cf);
    v19 = CFRetain(a5);
    *(_QWORD *)(DerivedStorage + 72) = v19;
    CMBaseObject = APEndpointDescriptionGetCMBaseObject(v19);
    v21 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (!v21)
    {
      v97 = -12782;
      goto LABEL_36;
    }
    v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v97 = v21(CMBaseObject, CFSTR("DisplayDescriptionArray"), *MEMORY[0x1E0C9AE00], &theArray);
    if (v97)
    {
LABEL_36:
      APSLogErrorAt();
      goto LABEL_154;
    }
    if (theArray && CFArrayGetCount(theArray) > 0)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
      if (!ValueAtIndex)
      {
        v97 = -16760;
        goto LABEL_36;
      }
      v24 = (uint64_t)ValueAtIndex;
      if (a6)
      {
        *(_QWORD *)(DerivedStorage + 80) = CFRetain(a6);
        APEndpointDisplayDescriptionCopyProperty(v24, (uint64_t)CFSTR("UUID"), (uint64_t)v22, (uint64_t)&v94);
        if (!v94)
        {
          v97 = -16760;
          goto LABEL_36;
        }
        APEndpointDisplayDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 80), (uint64_t)CFSTR("UUID"), (uint64_t)v22, (uint64_t)&v93);
        if (FigCFEqual())
          v25 = 110;
        else
          v25 = 111;
      }
      else
      {
        *(_QWORD *)(DerivedStorage + 80) = CFRetain(ValueAtIndex);
        v25 = 110;
      }
      *(_DWORD *)(DerivedStorage + 96) = v25;
      if (a4)
        v27 = CFRetain(a4);
      else
        v27 = 0;
      *(_QWORD *)(DerivedStorage + 48) = v27;
      *(_QWORD *)(DerivedStorage + 56) = CFRetain(a7);
      if (!a2)
      {
        v32 = CMBaseObjectGetDerivedStorage();
        v29 = 0;
        goto LABEL_57;
      }
      Value = CFDictionaryGetValue(a2, CFSTR("clientPID"));
      v29 = Value;
      if (!Value || (v30 = CFGetTypeID(Value), v30 == CFNumberGetTypeID()))
      {
        FigCFDictionaryGetBooleanIfPresent();
        FigCFDictionaryGetBooleanIfPresent();
        if (gLogCategory_APEndpointStreamScreenUDP <= 50
          && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
        {
          if (*(_BYTE *)(DerivedStorage + 249))
            v31 = "";
          else
            v31 = "not ";
          v78 = v31;
          LogPrintF();
        }
        FigCFDictionaryGetBooleanIfPresent();
        if (!*(_BYTE *)(DerivedStorage + 248) || CFGetInt64() > 0)
        {
          v32 = CMBaseObjectGetDerivedStorage();
          CFDictionaryGetValue(a2, CFSTR("EventRecorder"));
LABEL_57:
          v33 = *(const void **)(v32 + 272);
          if (v33)
          {
            CFRelease(v33);
            *(_QWORD *)(v32 + 272) = 0;
          }
          v34 = APSEventRecorderCreate();
          if (v34)
          {
            v77 = v34;
            APSLogErrorAt();
            v97 = v77;
            goto LABEL_36;
          }
          APSEventRecorderAddSignPostForEvent();
          v97 = 0;
          v35 = *(_QWORD *)(DerivedStorage + 80);
          dict[0] = 0;
          v100 = 0;
          v101 = 0;
          v99 = 0;
          cfa = 0;
          v36 = *(const void **)(DerivedStorage + 192);
          if (v36)
          {
            CFRelease(v36);
            *(_QWORD *)(DerivedStorage + 192) = 0;
          }
          v37 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 72));
          v38 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (!v38)
          {
            v102 = -12782;
            goto LABEL_87;
          }
          v102 = v38(v37, CFSTR("Name"), v22, DerivedStorage + 192);
          if (v102)
            goto LABEL_87;
          v39 = *(const void **)(DerivedStorage + 144);
          if (v39)
          {
            CFRelease(v39);
            *(_QWORD *)(DerivedStorage + 144) = 0;
          }
          v102 = APEndpointDisplayDescriptionCopyProperty(v35, (uint64_t)CFSTR("EDID"), (uint64_t)v22, DerivedStorage + 144);
          if (v102)
            goto LABEL_87;
          v41 = (CFDictionaryRef *)(DerivedStorage + 208);
          v40 = *(const void **)(DerivedStorage + 208);
          if (v40)
          {
            CFRelease(v40);
            *v41 = 0;
          }
          v42 = *(_BYTE *)(DerivedStorage + 251);
          if (v42)
          {
            v102 = APEndpointDisplayDescriptionCopyProperty(v35, (uint64_t)CFSTR("HDRInfo"), (uint64_t)v22, DerivedStorage + 208);
            if (v102)
              goto LABEL_87;
            if (!*v41
              || (v43 = (const void *)*MEMORY[0x1E0CC6510],
                  (v44 = CFDictionaryGetValue(*v41, (const void *)*MEMORY[0x1E0CC6510])) == 0))
            {
              v42 = 0;
              goto LABEL_75;
            }
            v45 = v44;
            v46 = (const void *)*MEMORY[0x1E0CC6500];
            if (!CFEqual(v44, (CFTypeRef)*MEMORY[0x1E0CC6500]))
            {
              if (!CFEqual(v45, (CFTypeRef)*MEMORY[0x1E0CC64F8]))
              {
                v42 = 0;
                goto LABEL_75;
              }
              if (!*(_BYTE *)(DerivedStorage + 252))
              {
                Mutable = CFDictionaryCreateMutable(v22, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                CFDictionarySetValue(Mutable, v43, v46);
                v53 = *v41;
                *v41 = Mutable;
                if (Mutable)
                  CFRetain(Mutable);
                if (v53)
                  CFRelease(v53);
                CFRelease(Mutable);
              }
            }
            v42 = APSHasHDRSenderSupport() != 0;
          }
LABEL_75:
          *(_BYTE *)(DerivedStorage + 250) = v42;
          v102 = APEndpointDisplayDescriptionCopyProperty(v35, (uint64_t)CFSTR("PixelSizeMax"), (uint64_t)v22, (uint64_t)dict);
          if (!v102)
          {
            CGSizeMakeWithDictionaryRepresentation(dict[0], (CGSize *)(DerivedStorage + 152));
            v102 = APEndpointDisplayDescriptionCopyProperty(v35, (uint64_t)CFSTR("PhysicalSize"), (uint64_t)v22, (uint64_t)&v101);
            if (!v102)
            {
              CGSizeMakeWithDictionaryRepresentation(v101, (CGSize *)(DerivedStorage + 168));
              v47 = (const void **)(DerivedStorage + 184);
              v102 = APEndpointDescriptionCopyProperty(*(_QWORD *)(DerivedStorage + 72), (uint64_t)CFSTR("receiverHDRCapability"), (uint64_t)v22, DerivedStorage + 184);
              if (!v102)
              {
                v48 = (const void *)APSSettingsCopyValue();
                v49 = v48;
                if (!v102)
                {
                  if (v48)
                  {
                    v50 = CFGetTypeID(v48);
                    if (v50 == CFStringGetTypeID())
                    {
                      v51 = *v47;
                      *v47 = v49;
                      CFRetain(v49);
                      if (v51)
                        CFRelease(v51);
                      if (gLogCategory_APEndpointStreamScreenUDP <= 50
                        && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
                      {
                        v78 = *v47;
                        LogPrintF();
                      }
                    }
                  }
                }
                v102 = 0;
                *(_BYTE *)(DerivedStorage + 256) = APSGetFBOPropertyInt64() != 0;
                if (v102)
                  goto LABEL_184;
                v55 = (_QWORD *)(DerivedStorage + 200);
                v54 = *(const void **)(DerivedStorage + 200);
                if (v54)
                {
                  CFRelease(v54);
                  *v55 = 0;
                }
                v102 = APEndpointDisplayDescriptionCopyProperty(v35, (uint64_t)CFSTR("UUID"), (uint64_t)v22, DerivedStorage + 200);
                if (v102)
                {
LABEL_184:
                  APSLogErrorAt();
                  goto LABEL_125;
                }
                v56 = *(_QWORD *)(DerivedStorage + 200);
                v57 = *MEMORY[0x1E0CA48A0];
                UpTimeNanoseconds = FigGetUpTimeNanoseconds();
                *(_QWORD *)(DerivedStorage + 88) = CFStringCreateWithFormat(v22, 0, CFSTR("%@-%@-%llx"), v56, v57, UpTimeNanoseconds);
                APEndpointDisplayDescriptionCopyProperty(v35, (uint64_t)CFSTR("MaxFPS"), (uint64_t)v22, (uint64_t)&v100);
                if (v100)
                  *(_DWORD *)(DerivedStorage + 260) = CFGetInt64();
                APEndpointDisplayDescriptionCopyProperty(v35, (uint64_t)CFSTR("IsOverscanned"), (uint64_t)v22, (uint64_t)&v99);
                v59 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
                *(_BYTE *)(DerivedStorage + 253) = v99 == (CFTypeRef)*MEMORY[0x1E0C9AE50];
                APEndpointDisplayDescriptionCopyProperty(v35, (uint64_t)CFSTR("SupportsRotation"), (uint64_t)v22, (uint64_t)&cfa);
                v60 = cfa == v59;
                *(_BYTE *)(DerivedStorage + 254) = v60;
                v61 = *(double *)(DerivedStorage + 152);
                v62 = *(double *)(DerivedStorage + 160);
                v63 = *(unsigned int *)(DerivedStorage + 260);
                *(double *)(DerivedStorage + 232) = v61 * v62 * (double)(int)v63;
                if (gLogCategory_APEndpointStreamScreenUDP <= 50)
                {
                  if (gLogCategory_APEndpointStreamScreenUDP != -1)
                  {
LABEL_105:
                    if (*(_QWORD *)(DerivedStorage + 144))
                      v64 = "present";
                    else
                      v64 = "none";
                    v65 = "yes";
                    if (*(_BYTE *)(DerivedStorage + 250))
                      v66 = "yes";
                    else
                      v66 = "no";
                    if (*(_BYTE *)(DerivedStorage + 253))
                      v67 = "yes";
                    else
                      v67 = "no";
                    if (v60)
                      v68 = "yes";
                    else
                      v68 = "no";
                    if (*(_BYTE *)(DerivedStorage + 256))
                      v69 = "yes";
                    else
                      v69 = "no";
                    if (!*(_BYTE *)(DerivedStorage + 255))
                      v65 = "no";
                    v89 = v69;
                    v90 = v65;
                    v87 = v67;
                    v88 = v68;
                    v85 = v66;
                    v86 = v63;
                    v83 = *(_QWORD *)(DerivedStorage + 200);
                    v84 = v64;
                    v81 = *(_QWORD *)(DerivedStorage + 168);
                    v82 = *(_QWORD *)(DerivedStorage + 176);
                    v79 = v61;
                    v80 = v62;
                    v78 = *(CFTypeRef *)(DerivedStorage + 192);
                    LogPrintF();
                    goto LABEL_124;
                  }
                  if (_LogCategory_Initialize())
                  {
                    v61 = *(double *)(DerivedStorage + 152);
                    v62 = *(double *)(DerivedStorage + 160);
                    v63 = *(unsigned int *)(DerivedStorage + 260);
                    v60 = *(unsigned __int8 *)(DerivedStorage + 254);
                    goto LABEL_105;
                  }
                }
LABEL_124:
                if (!*v55)
                {
                  APSLogErrorAt();
                  if (gLogCategory_APEndpointStreamScreenUDP <= 90
                    && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
                  {
                    LogPrintF();
                  }
                  v102 = -16760;
                }
LABEL_125:
                if (dict[0])
                  CFRelease(dict[0]);
                if (v101)
                  CFRelease(v101);
                if (v100)
                  CFRelease(v100);
                if (v99)
                  CFRelease(v99);
                if (cfa)
                  CFRelease(cfa);
                if (v49)
                  CFRelease(v49);
                v97 = v102;
                if (!v102)
                {
                  if (*(_BYTE *)(DerivedStorage + 249) && v92)
                  {
                    if (gLogCategory_APEndpointStreamScreenUDP <= 50
                      && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
                    {
                      v78 = v96;
                      LogPrintF();
                    }
                    *(_QWORD *)(DerivedStorage + 240) = 1;
                  }
                  v70 = (const __CFDictionary *)v96;
                  v71 = [APEndpointStreamScreenAVCWrapper alloc];
                  DisplayHDRMode = screenstreamudp_getDisplayHDRMode(DerivedStorage);
                  v73 = *(_QWORD *)(DerivedStorage + 240) == 1;
                  v74 = *(_BYTE *)(DerivedStorage + 255) == 0;
                  dict[0] = v70;
                  dict[1] = (CFDictionaryRef)screenstreamudp_handleResumed;
                  v75 = !v74;
                  dict[2] = (CFDictionaryRef)screenstreamudp_handleSuspended;
                  dict[3] = (CFDictionaryRef)screenstreamudp_handleFailed;
                  dict[4] = (CFDictionaryRef)screenstreamudp_handleClearScreen;
                  *(_QWORD *)(DerivedStorage + 40) = -[APEndpointStreamScreenAVCWrapper initWithClientPID:hdrMode:presentationMode:hdrMirroringSupported:eventHandlers:error:](v71, "initWithClientPID:hdrMode:presentationMode:hdrMirroringSupported:eventHandlers:error:", v29, DisplayHDRMode, v73, v75, dict, &v97, v78, *(_QWORD *)&v79, *(_QWORD *)&v80, v81, v82, v83, v84, v85, v86, v87,
                                                       v88,
                                                       v89,
                                                       v90);
                  if (!v97)
                  {
                    *(_BYTE *)(DerivedStorage + 25) = 1;
                    if (gLogCategory_APEndpointStreamScreenUDP <= 50
                      && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
                    {
                      LogPrintF();
                    }
                    *a9 = v96;
                    v96 = 0;
LABEL_154:
                    if (!v97)
                      goto LABEL_159;
                    goto LABEL_155;
                  }
                }
                goto LABEL_36;
              }
            }
          }
LABEL_87:
          APSLogErrorAt();
          v49 = 0;
          goto LABEL_125;
        }
      }
    }
    APSLogErrorAt();
    v26 = -16760;
  }
  else
  {
    APSLogErrorAt();
    v26 = -16761;
  }
  v97 = v26;
LABEL_155:
  if (gLogCategory_APEndpointStreamScreenUDP <= 90
    && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_159:
  if (theArray)
    CFRelease(theArray);
  if (v93)
    CFRelease(v93);
  if (v94)
    CFRelease(v94);
  if (v96)
    CFRelease(v96);
  return v97;
}

void screenstreamudp_handleResumed(const void *a1, _QWORD *a2, int a3)
{
  CMBaseObjectGetDerivedStorage();
  if (!a3)
    screenstreamudp_setResumedAndNotifyObservers(a1, 1);
  screenstreamudp_dispatchCallback(a1, a2, a3);
}

void screenstreamudp_handleSuspended(const void *a1, _QWORD *a2, int a3)
{
  CMBaseObjectGetDerivedStorage();
  screenstreamudp_setResumedAndNotifyObservers(a1, 0);
  screenstreamudp_dispatchCallback(a1, a2, a3);
}

void screenstreamudp_handleFailed(const void *a1, int a2, const void *a3)
{
  CMBaseObjectGetDerivedStorage();
  screenstreamudp_handleFatalError(a1, a2, a3);
}

void screenstreamudp_handleClearScreen(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  const void **v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 24))
    screenstreamudp_handleClearScreen_cold_1();
  v4 = DerivedStorage;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v6 = Mutable;
    if (!*(_BYTE *)(v4 + 112) || !*(_QWORD *)(v4 + 120))
    {
LABEL_12:
      CFRelease(v6);
      return;
    }
    v7 = (const void **)MEMORY[0x1E0C9AE50];
    if (!a2)
      v7 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(Mutable, CFSTR("isScreenCleared"), *v7);
    if (!APTransportStreamSendPlistMessageCreatingPlistReply())
    {
      if (gLogCategory_APEndpointStreamScreenUDP <= 40
        && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_12;
    }
    APSLogErrorAt();
    CFRelease(v6);
  }
  else
  {
    APSLogErrorAt();
  }
  if (gLogCategory_APEndpointStreamScreenUDP <= 90
    && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

const __CFDictionary *screenstreamudp_getDisplayHDRMode(uint64_t a1)
{
  const __CFDictionary *result;

  if (APSHasHDRSenderSupport())
  {
    result = *(const __CFDictionary **)(a1 + 208);
    if (result)
      result = (const __CFDictionary *)CFDictionaryGetValue(result, (const void *)*MEMORY[0x1E0CC6510]);
  }
  else
  {
    result = 0;
  }
  if (!result)
    return (const __CFDictionary *)*MEMORY[0x1E0CC6508];
  return result;
}

void sub_1C94919E4()
{
  objc_end_catch();
  JUMPOUT(0x1C94919ECLL);
}

void screenstreamudp_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  __int128 v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  NSObject *v16;
  NSObject *v17;
  void *v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamScreenUDP <= 50
    && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }

  v1 = *(const void **)(DerivedStorage + 144);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 144) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 192);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 192) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 200);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 200) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 184);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 184) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 208);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 208) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 224);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 224) = 0;
  }
  v7 = *MEMORY[0x1E0C9D820];
  *(_OWORD *)(DerivedStorage + 152) = *MEMORY[0x1E0C9D820];
  *(_OWORD *)(DerivedStorage + 168) = v7;
  v8 = *(const void **)(DerivedStorage + 8);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 272);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 272) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 48);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 88);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 80);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 72);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  v14 = *(const void **)(DerivedStorage + 56);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v15 = *(const void **)(DerivedStorage + 32);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v16 = *(NSObject **)(DerivedStorage + 64);
  if (v16)
  {
    dispatch_release(v16);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v17 = *(NSObject **)(DerivedStorage + 128);
  if (v17)
  {
    dispatch_release(v17);
    *(_QWORD *)(DerivedStorage + 128) = 0;
  }
  v18 = *(void **)(DerivedStorage + 16);
  if (v18)
  {

    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
}

__CFString *screenstreamudp_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  __CFString *v4;
  const char *v5;
  const char *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4 = Mutable;
  v5 = "yes";
  if (*(_BYTE *)(DerivedStorage + 25))
    v6 = "yes";
  else
    v6 = "no";
  if (!*(_BYTE *)(DerivedStorage + 26))
    v5 = "no";
  CFStringAppendFormat(Mutable, 0, CFSTR("<APEndpointStreamScreenUDP %p '%@', activated: %s resumed: %s >"), a1, *(_QWORD *)(DerivedStorage + 8), v6, v5);
  return v4;
}

uint64_t screenstreamudp_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, __CFDictionary **a4)
{
  uint64_t DerivedStorage;
  const __CFString **v7;
  const __CFString *v8;
  __CFDictionary *v9;
  __CFDictionary *v10;
  uint64_t result;
  __CFDictionary *Mutable;
  double *v13;
  double v14;
  double v15;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamScreenUDP <= 30
    && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4820]))
  {
    v7 = (const __CFString **)MEMORY[0x1E0CA48A0];
LABEL_7:
    v8 = *v7;
LABEL_14:
    v9 = (__CFDictionary *)CFRetain(v8);
LABEL_15:
    v10 = v9;
LABEL_16:
    result = 0;
    *a4 = v10;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA47C8]))
  {
    if (*(_DWORD *)(DerivedStorage + 96) == 110)
      v8 = (const __CFString *)*MEMORY[0x1E0CA4870];
    else
      v8 = CFSTR("ScreenAlt");
    goto LABEL_14;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4788]))
  {
    v8 = *(const __CFString **)(DerivedStorage + 88);
    goto LABEL_14;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC66F0]))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (*(_QWORD *)(DerivedStorage + 240) == 1)
    {
      v13 = (double *)MEMORY[0x1E0C9D820];
      APSScreenGetMediaPresentationParams();
      if (gLogCategory_APEndpointStreamScreenUDP <= 50
        && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      FigCFDictionarySetCGSize();
      if (*(_BYTE *)(DerivedStorage + 250))
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC6658], *(const void **)(DerivedStorage + 208));
      FigCFDictionarySetInt32();
      v15 = *v13;
      v14 = v13[1];
    }
    else
    {
      FigCFDictionarySetInt32();
      v15 = *MEMORY[0x1E0C9D820];
      v14 = *(double *)(MEMORY[0x1E0C9D820] + 8);
      if (*(double *)(DerivedStorage + 152) != *MEMORY[0x1E0C9D820] || *(double *)(DerivedStorage + 160) != v14)
        FigCFDictionarySetCGSize();
    }
    if (*(double *)(DerivedStorage + 168) != v15 || *(double *)(DerivedStorage + 176) != v14)
      FigCFDictionarySetCGSize();
    v17 = *(const void **)(DerivedStorage + 192);
    if (v17)
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC6638], v17);
    v18 = *(const void **)(DerivedStorage + 144);
    if (v18)
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC6630], v18);
    v19 = *(const void **)(DerivedStorage + 200);
    if (v19)
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC6650], v19);
    v20 = (const void *)*MEMORY[0x1E0C9AE50];
    v21 = (const void *)*MEMORY[0x1E0C9AE40];
    if (*(_BYTE *)(DerivedStorage + 253))
      v22 = (const void *)*MEMORY[0x1E0C9AE50];
    else
      v22 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC6660], v22);
    if (*(_BYTE *)(DerivedStorage + 254))
      v23 = v20;
    else
      v23 = v21;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC6670], v23);
    result = 0;
    *a4 = Mutable;
  }
  else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC6720]))
  {
    return 0;
  }
  else
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4790]) || CFEqual(a2, CFSTR("IsPlaying")))
    {
      v7 = (const __CFString **)MEMORY[0x1E0C9AE50];
      if (!*(_BYTE *)(DerivedStorage + 26))
        v7 = (const __CFString **)MEMORY[0x1E0C9AE40];
      goto LABEL_7;
    }
    if (CFEqual(a2, CFSTR("EndpointStreamShowInfo")))
    {
      v9 = screenstreamudp_copyShowInfo(DerivedStorage);
      goto LABEL_15;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA47B0]))
    {
      v9 = screenstreamudp_copyOutputLatency();
      goto LABEL_15;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4828]))
    {
      v8 = *(const __CFString **)(DerivedStorage + 224);
      if (!v8)
      {
        v10 = 0;
        goto LABEL_16;
      }
      goto LABEL_14;
    }
    if (CFEqual(a2, CFSTR("screenStreamType")))
    {
      v8 = CFSTR("screenStreamUDP");
      goto LABEL_14;
    }
    if (gLogCategory_APEndpointStreamScreenUDP <= 30
      && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 4294954512;
  }
  return result;
}

uint64_t screenstreamudp_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  const void *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamScreenUDP <= 30
    && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC6708]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC6700]))
    return 0;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4828]))
  {
    v7 = *(const void **)(DerivedStorage + 224);
    *(_QWORD *)(DerivedStorage + 224) = a3;
    if (a3)
      CFRetain(a3);
    if (v7)
      CFRelease(v7);
    return 0;
  }
  if (gLogCategory_APEndpointStreamScreenUDP <= 30
    && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return 4294954512;
}

__CFDictionary *screenstreamudp_copyShowInfo(uint64_t a1)
{
  __CFDictionary *Mutable;
  __CFDictionary *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = Mutable;
  v4 = (const void *)*MEMORY[0x1E0C9AE50];
  v5 = (const void *)*MEMORY[0x1E0C9AE40];
  if (*(_BYTE *)(a1 + 25))
    v6 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v6 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(Mutable, CFSTR("Activated"), v6);
  if (*(_BYTE *)(a1 + 26))
    v7 = v4;
  else
    v7 = v5;
  CFDictionarySetValue(v3, CFSTR("Resumed"), v7);
  CFDictionarySetValue(v3, CFSTR("Type"), (const void *)*MEMORY[0x1E0CA48A0]);
  CFDictionarySetValue(v3, CFSTR("Name"), *(const void **)(a1 + 8));
  return v3;
}

CFDictionaryRef screenstreamudp_copyOutputLatency()
{
  int v0;
  const __CFAllocator *v1;
  CMTime v3;
  CMTime v4;

  v4 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v0 = APSScreenLatencyMs();
  CMTimeMake(&v4, v0, 1000);
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = v4;
  return CMTimeCopyAsDictionary(&v3, v1);
}

uint64_t screenstreamudp_Suspend(const void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  NSObject **DerivedStorage;
  const void *v9;
  CFTypeRef v10;
  const void *v11;
  void (*v12)(const void *, _QWORD, _QWORD, _QWORD);
  uint64_t CMBaseObject;
  uint64_t v14;
  void (*v15)(uint64_t);
  NSObject *v16;
  uint64_t v17;
  _QWORD block[10];

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamScreenUDP <= 50
    && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v9 = *(const void **)(CMBaseObjectGetDerivedStorage() + 120);
  if (v9)
  {
    v10 = CFRetain(v9);
    if (v10)
    {
      v11 = v10;
      v12 = *(void (**)(const void *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 24);
      if (v12)
        v12(v11, 0, 0, 0);
      CMBaseObject = FigTransportStreamGetCMBaseObject();
      if (CMBaseObject)
      {
        v14 = CMBaseObject;
        v15 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v15)
          v15(v14);
      }
      CFRelease(v11);
    }
  }
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  v16 = *DerivedStorage;
  if (a3)
    v17 = a4;
  else
    v17 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __screenstreamudp_Suspend_block_invoke;
  block[3] = &__block_descriptor_80_e5_v8__0l;
  block[4] = a1;
  block[5] = a2;
  block[6] = a3;
  block[7] = a3;
  block[8] = v17;
  block[9] = 0;
  dispatch_async(v16, block);
  return 0;
}

uint64_t screenstreamudp_Resume(const void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  NSObject **DerivedStorage;
  NSObject *v9;
  uint64_t v10;
  _QWORD block[10];

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamScreenUDP <= 50
    && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  v9 = *DerivedStorage;
  if (a3)
    v10 = a4;
  else
    v10 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __screenstreamudp_Resume_block_invoke;
  block[3] = &__block_descriptor_80_e5_v8__0l;
  block[4] = a1;
  block[5] = a2;
  block[6] = a3;
  block[7] = a3;
  block[8] = v10;
  block[9] = 0;
  dispatch_async(v9, block);
  return 0;
}

uint64_t screenstreamudp_Dissociate(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *(NSObject **)CMBaseObjectGetDerivedStorage();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __screenstreamudp_Dissociate_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_sync(v2, block);
  return 0;
}

uint64_t screenstreamudp_Control(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject **DerivedStorage;
  NSObject *v6;
  uint64_t v7;
  _QWORD block[7];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    v6 = *DerivedStorage;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __screenstreamudp_Control_block_invoke;
    block[3] = &unk_1E8268E00;
    block[4] = &v10;
    block[5] = a1;
    block[6] = a3;
    dispatch_sync(v6, block);
    v7 = *((unsigned int *)v11 + 6);
  }
  else
  {
    if (gLogCategory_APEndpointStreamScreenUDP <= 90
      && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v7 = 4294950536;
    *((_DWORD *)v11 + 6) = -16760;
  }
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_1C9493B68(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void screenstreamudp_teardownStream()
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t v2;
  void (*v3)(uint64_t);
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD);
  const void *v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamScreenUDP <= 40
    && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_QWORD *)(DerivedStorage + 120))
  {
    CMBaseObject = FigTransportStreamGetCMBaseObject();
    if (CMBaseObject)
    {
      v2 = CMBaseObject;
      v3 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v3)
        v3(v2);
    }
    v4 = *(const void **)(DerivedStorage + 120);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(DerivedStorage + 120) = 0;
    }
  }
  if (*(_QWORD *)(DerivedStorage + 48))
  {
    v5 = FigTransportStreamGetCMBaseObject();
    if (v5)
    {
      v6 = v5;
      v7 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v7)
        v7(v6);
    }
    v8 = *(_QWORD *)(DerivedStorage + 48);
    v9 = *(unsigned int *)(DerivedStorage + 96);
    v10 = *(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v10)
      v10(v8, v9, 0);
  }
  v11 = *(const void **)(DerivedStorage + 104);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 104) = 0;
  }
}

void screenstreamudp_dispatchCallback(const void *a1, _QWORD *a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  NSObject *v8;
  _QWORD block[6];
  int v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (*a2)
    {
      v7 = DerivedStorage;
      CFRetain(a1);
      v8 = *(NSObject **)(v7 + 64);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __screenstreamudp_dispatchCallback_block_invoke;
      block[3] = &__block_descriptor_52_e5_v8__0l;
      block[4] = a2;
      block[5] = a1;
      v10 = a3;
      dispatch_async(v8, block);
    }
  }
}

void screenstreamudp_handleFatalError(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD v10[5];
  _QWORD block[7];
  int v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamScreenUDP <= 90
    && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  if (a3)
    CFRetain(a3);
  v7 = *(NSObject **)(DerivedStorage + 64);
  v8 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __screenstreamudp_handleFatalError_block_invoke;
  block[3] = &__block_descriptor_60_e5_v8__0l;
  v12 = a2;
  block[4] = a3;
  block[5] = DerivedStorage;
  block[6] = a1;
  dispatch_async(v7, block);
  CFRetain(a1);
  v9 = *(NSObject **)DerivedStorage;
  v10[0] = v8;
  v10[1] = 3221225472;
  v10[2] = __screenstreamudp_handleFatalError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e5_v8__0l;
  v10[4] = a1;
  dispatch_async(v9, v10);
}

void __screenstreamudp_dispatchCallback_block_invoke(uint64_t a1)
{
  (**(void (***)(_QWORD, _QWORD, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __screenstreamudp_handleFatalError_block_invoke(uint64_t a1)
{
  __CFDictionary *Mutable;
  const void *v3;
  const void *v4;
  const void *v5;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA46E8], v3);
    v4 = *(const void **)(a1 + 32);
    if (v4)
    {
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 40) + 27) && CFEqual(v4, CFSTR("Resume failed")))
        CFDictionarySetValue(Mutable, CFSTR("APEndpointStream_IsStartupFailure"), (const void *)*MEMORY[0x1E0C9AE50]);
    }
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (Mutable)
    CFRelease(Mutable);
  v5 = *(const void **)(a1 + 32);
  if (v5)
    CFRelease(v5);
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void __screenstreamudp_handleFatalError_block_invoke_2(uint64_t a1)
{
  screenstreamudp_dissociateInternal(*(const void **)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void screenstreamudp_dissociateInternal(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  NSObject *v4;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 24))
  {
    v3 = DerivedStorage;
    if (*(_BYTE *)(DerivedStorage + 25))
    {
      if (gLogCategory_APEndpointStreamScreenUDP <= 50
        && (gLogCategory_APEndpointStreamScreenUDP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (*(_BYTE *)(v3 + 26))
      {
        objc_msgSend(*(id *)(v3 + 40), "stopWithCompletion:", 0);
        screenstreamudp_teardownStream();
      }
      *(_BYTE *)(v3 + 26) = 0;
      *(_WORD *)(v3 + 24) = 1;
      CFRetain(a1);
      v4 = *(NSObject **)(v3 + 64);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __screenstreamudp_dissociateInternal_block_invoke;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = a1;
      dispatch_async(v4, block);
    }
  }
}

void __screenstreamudp_dissociateInternal_block_invoke(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void screenstreamudp_setResumedAndNotifyObservers(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  BOOL v5;
  NSObject *v6;
  _QWORD block[6];
  char v8;
  BOOL v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(unsigned __int8 *)(DerivedStorage + 26) != a2;
  *(_BYTE *)(DerivedStorage + 26) = a2;
  APSEventRecorderRecordEvent();
  CFRetain(a1);
  v6 = *(NSObject **)(DerivedStorage + 64);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __screenstreamudp_setResumedAndNotifyObservers_block_invoke;
  block[3] = &__block_descriptor_50_e5_v8__0l;
  v8 = a2;
  v9 = v5;
  block[4] = a1;
  block[5] = DerivedStorage;
  dispatch_async(v6, block);
}

void __screenstreamudp_setResumedAndNotifyObservers_block_invoke(uint64_t a1)
{
  __CFDictionary *Mutable;
  __CFDictionary *v3;
  const void **v4;

  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (*(_BYTE *)(a1 + 49))
  {
    APEndpointStreamUpdateNowPlayingTransaction(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 48), &gLogCategory_APEndpointStreamScreenUDP, (const void **)(*(_QWORD *)(a1 + 40) + 32));
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v3 = Mutable;
    v4 = (const void **)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(a1 + 48))
      v4 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(Mutable, CFSTR("IsPlaying"), *v4);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFRelease(v3);
  }
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t initValAVCMediaStreamNegotiatorHDRMode()
{
  uint64_t *v0;
  uint64_t result;

  if (AVConferenceLibrary_sOnce != -1)
    dispatch_once(&AVConferenceLibrary_sOnce, &__block_literal_global_4);
  v0 = (uint64_t *)dlsym((void *)AVConferenceLibrary_sLib, "AVCMediaStreamNegotiatorHDRMode");
  if (v0)
  {
    result = *v0;
    constantValAVCMediaStreamNegotiatorHDRMode = result;
  }
  else
  {
    result = constantValAVCMediaStreamNegotiatorHDRMode;
  }
  getAVCMediaStreamNegotiatorHDRMode = AVCMediaStreamNegotiatorHDRModeFunction;
  return result;
}

uint64_t AVCMediaStreamNegotiatorHDRModeFunction()
{
  return constantValAVCMediaStreamNegotiatorHDRMode;
}

Class initAVCMediaStreamNegotiator()
{
  Class result;

  if (AVConferenceLibrary_sOnce != -1)
    dispatch_once(&AVConferenceLibrary_sOnce, &__block_literal_global_4);
  result = objc_getClass("AVCMediaStreamNegotiator");
  classAVCMediaStreamNegotiator = (uint64_t)result;
  getAVCMediaStreamNegotiatorClass = AVCMediaStreamNegotiatorFunction;
  return result;
}

uint64_t AVCMediaStreamNegotiatorFunction()
{
  return classAVCMediaStreamNegotiator;
}

Class initAVCScreenCaptureConfiguration()
{
  Class result;

  if (AVConferenceLibrary_sOnce != -1)
    dispatch_once(&AVConferenceLibrary_sOnce, &__block_literal_global_4);
  result = objc_getClass("AVCScreenCaptureConfiguration");
  classAVCScreenCaptureConfiguration = (uint64_t)result;
  getAVCScreenCaptureConfigurationClass = AVCScreenCaptureConfigurationFunction;
  return result;
}

uint64_t AVCScreenCaptureConfigurationFunction()
{
  return classAVCScreenCaptureConfiguration;
}

Class initAVCScreenCapture()
{
  Class result;

  if (AVConferenceLibrary_sOnce != -1)
    dispatch_once(&AVConferenceLibrary_sOnce, &__block_literal_global_4);
  result = objc_getClass("AVCScreenCapture");
  classAVCScreenCapture = (uint64_t)result;
  getAVCScreenCaptureClass = AVCScreenCaptureFunction;
  return result;
}

uint64_t AVCScreenCaptureFunction()
{
  return classAVCScreenCapture;
}

uint64_t initValkAVCMediaStreamOptionCallID()
{
  uint64_t *v0;
  uint64_t result;

  if (AVConferenceLibrary_sOnce != -1)
    dispatch_once(&AVConferenceLibrary_sOnce, &__block_literal_global_4);
  v0 = (uint64_t *)dlsym((void *)AVConferenceLibrary_sLib, "kAVCMediaStreamOptionCallID");
  if (v0)
  {
    result = *v0;
    constantValkAVCMediaStreamOptionCallID = result;
  }
  else
  {
    result = constantValkAVCMediaStreamOptionCallID;
  }
  getkAVCMediaStreamOptionCallID = kAVCMediaStreamOptionCallIDFunction;
  return result;
}

uint64_t kAVCMediaStreamOptionCallIDFunction()
{
  return constantValkAVCMediaStreamOptionCallID;
}

uint64_t initValkAVCMediaStreamOptionRunInProcess()
{
  uint64_t *v0;
  uint64_t result;

  if (AVConferenceLibrary_sOnce != -1)
    dispatch_once(&AVConferenceLibrary_sOnce, &__block_literal_global_4);
  v0 = (uint64_t *)dlsym((void *)AVConferenceLibrary_sLib, "kAVCMediaStreamOptionRunInProcess");
  if (v0)
  {
    result = *v0;
    constantValkAVCMediaStreamOptionRunInProcess = result;
  }
  else
  {
    result = constantValkAVCMediaStreamOptionRunInProcess;
  }
  getkAVCMediaStreamOptionRunInProcess = kAVCMediaStreamOptionRunInProcessFunction;
  return result;
}

uint64_t kAVCMediaStreamOptionRunInProcessFunction()
{
  return constantValkAVCMediaStreamOptionRunInProcess;
}

uint64_t initValkAVCMediaStreamOptionClientPID()
{
  uint64_t *v0;
  uint64_t result;

  if (AVConferenceLibrary_sOnce != -1)
    dispatch_once(&AVConferenceLibrary_sOnce, &__block_literal_global_4);
  v0 = (uint64_t *)dlsym((void *)AVConferenceLibrary_sLib, "kAVCMediaStreamOptionClientPID");
  if (v0)
  {
    result = *v0;
    constantValkAVCMediaStreamOptionClientPID = result;
  }
  else
  {
    result = constantValkAVCMediaStreamOptionClientPID;
  }
  getkAVCMediaStreamOptionClientPID = kAVCMediaStreamOptionClientPIDFunction;
  return result;
}

uint64_t kAVCMediaStreamOptionClientPIDFunction()
{
  return constantValkAVCMediaStreamOptionClientPID;
}

Class initAVCVideoStream()
{
  Class result;

  if (AVConferenceLibrary_sOnce != -1)
    dispatch_once(&AVConferenceLibrary_sOnce, &__block_literal_global_4);
  result = objc_getClass("AVCVideoStream");
  classAVCVideoStream = (uint64_t)result;
  getAVCVideoStreamClass = AVCVideoStreamFunction;
  return result;
}

uint64_t AVCVideoStreamFunction()
{
  return classAVCVideoStream;
}

Class initAVCDaemonProcessInfo()
{
  Class result;

  if (AVConferenceLibrary_sOnce != -1)
    dispatch_once(&AVConferenceLibrary_sOnce, &__block_literal_global_4);
  result = objc_getClass("AVCDaemonProcessInfo");
  classAVCDaemonProcessInfo = (uint64_t)result;
  getAVCDaemonProcessInfoClass = AVCDaemonProcessInfoFunction;
  return result;
}

uint64_t AVCDaemonProcessInfoFunction()
{
  return classAVCDaemonProcessInfo;
}

uint64_t initValAVCKeyDaemonProcessInfoUniquePID()
{
  uint64_t *v0;
  uint64_t result;

  if (AVConferenceLibrary_sOnce != -1)
    dispatch_once(&AVConferenceLibrary_sOnce, &__block_literal_global_4);
  v0 = (uint64_t *)dlsym((void *)AVConferenceLibrary_sLib, "AVCKeyDaemonProcessInfoUniquePID");
  if (v0)
  {
    result = *v0;
    constantValAVCKeyDaemonProcessInfoUniquePID = result;
  }
  else
  {
    result = constantValAVCKeyDaemonProcessInfoUniquePID;
  }
  getAVCKeyDaemonProcessInfoUniquePID = AVCKeyDaemonProcessInfoUniquePIDFunction;
  return result;
}

uint64_t AVCKeyDaemonProcessInfoUniquePIDFunction()
{
  return constantValAVCKeyDaemonProcessInfoUniquePID;
}

uint64_t APEndpointCarPlayRemote_ServerDied()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t APEndpointCarPlayRemoteCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  if (!a3)
  {
    APSLogErrorAt();
    return 4294950576;
  }
  FigEndpointExtendedGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
    v10 = v5;
    goto LABEL_19;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 8) = a2;
  *(_BYTE *)(DerivedStorage + 16) = 0;
  CMBaseObjectGetDerivedStorage();
  v7 = FigXPCCreateBasicMessage();
  if ((_DWORD)v7)
  {
    v10 = v7;
LABEL_22:
    APSLogErrorAt();
    goto LABEL_6;
  }
  v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)v8)
  {
    APSLogErrorAt();
    v10 = 0;
    goto LABEL_6;
  }
  v10 = v8;
  if ((_DWORD)v8 != -6720)
    goto LABEL_22;
LABEL_6:
  if ((_DWORD)v10)
  {
    if ((_DWORD)v10 == -6720)
      return v10;
LABEL_19:
    APSLogErrorAt();
    return v10;
  }
  if (gLogCategory_APEndpointCarPlayRemote <= 50
    && (gLogCategory_APEndpointCarPlayRemote != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v10 = 0;
  *a3 = 0;
  return v10;
}

uint64_t carEndpointRemote_Finalize()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointCarPlayRemote <= 30
    && (gLogCategory_APEndpointCarPlayRemote != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  result = FigXPCRemoteClientDisassociateObject();
  *(_QWORD *)DerivedStorage = 0;
  *(_BYTE *)(DerivedStorage + 16) = 0;
  return result;
}

CFMutableStringRef carEndpointRemote_CopyDebugDescription()
{
  CFMutableStringRef Mutable;

  CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendF();
  CFStringAppendF();
  CFStringAppendF();
  return Mutable;
}

uint64_t carEndpointRemote_CopyProperty()
{
  uint64_t v0;

  CMBaseObjectGetDerivedStorage();
  v0 = FigXPCSendStdCopyPropertyMessage();
  if ((_DWORD)v0)
    APSLogErrorAt();
  return v0;
}

uint64_t carEndpointRemote_SetProperty()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    if (*(_BYTE *)(DerivedStorage + 16))
    {
      v1 = FigXPCSendStdSetPropertyMessage();
      if ((_DWORD)v1)
        APSLogErrorAt();
    }
    else
    {
      APSLogErrorAt();
      return 4294960587;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960578;
  }
  return v1;
}

uint64_t APEndpointPlaybackSessionCreatePlayParamsWithTimesInSeconds(const __CFDictionary *a1, CFMutableDictionaryRef *a2)
{
  uint64_t TypedValue;
  const __CFDictionary *v5;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v7;
  uint64_t result;
  __CFDictionary *v9;
  CMTime time;

  if (a1)
  {
    CFDictionaryGetTypeID();
    TypedValue = CFDictionaryGetTypedValue();
    if (TypedValue)
    {
      v5 = (const __CFDictionary *)TypedValue;
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a1);
      if (MutableCopy)
      {
        v7 = MutableCopy;
        CMTimeMakeFromDictionary(&time, v5);
        CMTimeGetSeconds(&time);
        CFDictionarySetDouble();
        result = 0;
        *a2 = v7;
      }
      else
      {
        APSLogErrorAt();
        return 4294950555;
      }
    }
    else
    {
      v9 = (__CFDictionary *)CFRetain(a1);
      result = 0;
      *a2 = v9;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950556;
  }
  return result;
}

uint64_t APEndpointPlaybackSessionCreatePlayPlaybackInfoTimesInCMTime(CFDictionaryRef theDict, __CFDictionary **a2)
{
  __CFDictionary *MutableCopy;
  __CFDictionary *v4;
  const void *Value;
  const void *v6;
  uint64_t result;

  if (theDict)
  {
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
    if (MutableCopy)
    {
      v4 = MutableCopy;
      apPlaybackUtil_convertRangeSecondsToCMTime(MutableCopy, (const void *)*MEMORY[0x1E0CA3F48]);
      apPlaybackUtil_convertRangeSecondsToCMTime(v4, (const void *)*MEMORY[0x1E0CA3F10]);
      Value = CFDictionaryGetValue(v4, CFSTR("positionCMTime"));
      if (Value)
      {
        CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0CA3F30], Value);
        CFDictionaryRemoveValue(v4, CFSTR("positionCMTime"));
      }
      else
      {
        apPlaybackUtil_convertSecondsToCMTime();
      }
      v6 = CFDictionaryGetValue(v4, CFSTR("durationCMTime"));
      if (v6)
      {
        CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0CA3EF8], v6);
        CFDictionaryRemoveValue(v4, CFSTR("durationCMTime"));
      }
      else
      {
        apPlaybackUtil_convertSecondsToCMTime();
      }
      result = 0;
      *a2 = v4;
    }
    else
    {
      APSLogErrorAt();
      return 4294950555;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950556;
  }
  return result;
}

void apPlaybackUtil_convertRangeSecondsToCMTime(__CFDictionary *a1, const void *a2)
{
  const __CFArray *TypedValue;
  uint64_t Count;
  const __CFAllocator *v6;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  uint64_t TypedValueAtIndex;
  const __CFDictionary *v13;
  CFMutableDictionaryRef v14;
  CFMutableDictionaryRef v15;
  __CFDictionary *v16;
  const void *v17;
  CMTime v18;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  CFArrayGetTypeID();
  TypedValue = (const __CFArray *)CFDictionaryGetTypedValue();
  if (TypedValue)
  {
    Count = CFArrayGetCount(TypedValue);
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v8 = Mutable;
      v16 = a1;
      v17 = a2;
      if (Count < 1)
      {
LABEL_10:
        CFDictionarySetValue(v16, v17, v8);
      }
      else
      {
        v9 = 0;
        v10 = (const void *)*MEMORY[0x1E0CA4058];
        v11 = (const void *)*MEMORY[0x1E0CA4050];
        while (1)
        {
          CFDictionaryGetTypeID();
          TypedValueAtIndex = CFArrayGetTypedValueAtIndex();
          if (!TypedValueAtIndex
            || (v13 = (const __CFDictionary *)TypedValueAtIndex,
                (v14 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0))
          {
            APSLogErrorAt();
            goto LABEL_11;
          }
          v15 = v14;
          apPlaybackUtil_getCMTimeFromRangeForKeys(v13, CFSTR("startCMTime"), v10, &v18);
          value = v18.value;
          timescale = v18.timescale;
          if ((v18.flags & 1) == 0)
            break;
          v18.value = value;
          v18.timescale = timescale;
          FigCFDictionarySetCMTime();
          apPlaybackUtil_getCMTimeFromRangeForKeys(v13, CFSTR("durationCMTime"), v11, &v18);
          value = v18.value;
          timescale = v18.timescale;
          if ((v18.flags & 1) == 0)
            break;
          v18.value = value;
          v18.timescale = timescale;
          FigCFDictionarySetCMTime();
          CFArrayAppendValue(v8, v15);
          CFRelease(v15);
          if (Count == ++v9)
            goto LABEL_10;
        }
        APSLogErrorAt();
        CFRelease(v15);
      }
LABEL_11:
      CFRelease(v8);
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

uint64_t apPlaybackUtil_convertSecondsToCMTime()
{
  Float64 v0;
  uint64_t result;
  CMTime v2;
  int v3;

  v3 = 0;
  CFDictionaryGetDouble();
  CMTimeMakeWithSeconds(&v2, v0, 1000);
  result = FigCFDictionarySetCMTime();
  v3 = result;
  if ((_DWORD)result)
    return APSLogErrorAt();
  return result;
}

uint64_t APEndpointPlaybackSessionGetMediaTypeFromPlayParams(const __CFDictionary *a1)
{
  _BOOL4 v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  if (CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E0CA3E08]))
    v2 = 1;
  else
    v2 = CFDictionaryContainsKey(a1, CFSTR("IsTLSEnabled")) != 0;
  v3 = CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E0CA3D30]);
  v4 = CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E0CA3C20]);
  v5 = 2 * ((v3 | v4 | CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E0CA3C28])) != 0);
  if (v3 | v4)
    v6 = 3;
  else
    v6 = 1;
  if (v2)
    return v5;
  else
    return v6;
}

void APEndpointPlaybackSessionGetRTCMediaTypeFromPlayParams(const __CFDictionary *a1)
{
  int MediaTypeFromPlayParams;

  MediaTypeFromPlayParams = APEndpointPlaybackSessionGetMediaTypeFromPlayParams(a1);
  CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA3DD8]);
  __asm { BR              X10 }
}

const __CFString *sub_1C9496C24()
{
  if (FigCFEqual())
    return CFSTR("HLSNonEncrypted");
  else
    return CFSTR("RemoteFileNonEncrypted");
}

uint64_t APEndpointPlaybackSessionCreateVideoSyncTimeHistogram(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;

  if (APEndpointPlaybackSessionCreateVideoSyncTimeHistogram_once != -1)
    dispatch_once(&APEndpointPlaybackSessionCreateVideoSyncTimeHistogram_once, &__block_literal_global_5);
  result = APEndpointPlaybackSessionCreateVideoSyncTimeHistogram_histogramCreationOptions;
  if (APEndpointPlaybackSessionCreateVideoSyncTimeHistogram_histogramCreationOptions)
  {
    v3 = APSStatsHistogramCreate();
    *a1 = v3;
    if (v3)
    {
      return 0;
    }
    else
    {
      APSLogErrorAt();
      return 4294950555;
    }
  }
  return result;
}

uint64_t APEndpointPlaybackSessionStatsCreate(const void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  __CFDictionary *Mutable;
  uint64_t v10;
  _QWORD *v12;

  v12 = 0;
  if (!a4)
  {
    APSLogErrorAt();
    v10 = 4294960591;
    goto LABEL_9;
  }
  v7 = malloc_type_calloc(1uLL, 0x38uLL, 0x10200409E74B7CDuLL);
  v12 = v7;
  v8 = FigSimpleMutexCreate();
  *v7 = v8;
  if (!v8)
    goto LABEL_14;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7[1] = Mutable;
  if (!Mutable)
    goto LABEL_14;
  if (!a1)
    goto LABEL_15;
  CFDictionarySetValue(Mutable, CFSTR("videoSessionType"), a1);
  FigCFDictionaryGetDoubleIfPresent();
  APEndpointPlaybackSessionCreateVideoSyncTimeHistogram(v7 + 5);
  if (!v7[5])
  {
LABEL_14:
    APSLogErrorAt();
    v10 = 4294950555;
    goto LABEL_9;
  }
  if (!a2)
  {
LABEL_15:
    APSLogErrorAt();
    v10 = 4294950556;
    goto LABEL_9;
  }
  v10 = APSEventRecorderCreate();
  if ((_DWORD)v10)
  {
    APSLogErrorAt();
  }
  else
  {
    *a4 = v7;
    v12 = 0;
  }
LABEL_9:
  APEndpointPlaybackSessionStatsDestroy((uint64_t *)&v12);
  return v10;
}

void APEndpointPlaybackSessionStatsDestroy(uint64_t *a1)
{
  uint64_t v1;
  const void *v3;
  const void *v4;
  void *v5;

  v1 = *a1;
  if (*a1)
  {
    v3 = *(const void **)(v1 + 40);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(*a1 + 40) = 0;
      v1 = *a1;
    }
    v4 = *(const void **)(v1 + 8);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(*a1 + 8) = 0;
    }
    FigSimpleMutexDestroy();
    v5 = (void *)*a1;
    if (!*(_QWORD *)(*a1 + 48)
      || (CFRelease(*(CFTypeRef *)(*a1 + 48)), *(_QWORD *)(*a1 + 48) = 0, (v5 = (void *)*a1) != 0))
    {
      *a1 = 0;
      free(v5);
    }
  }
}

void APEndpointPlaybackSessionStatsUpdateAtPlay(uint64_t a1, const __CFDictionary *a2)
{
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  MEMORY[0x1CAA400CC](*(_QWORD *)a1);
  APSEventRecorderRecordEvent();
  APSEventRecorderGetTimeBetweenCFAbsoluteTimeAndEventInMilliSecond();
  CFStringGetTypeID();
  CFDictionaryGetTypedValue();
  APEndpointPlaybackSessionGetRTCMediaTypeFromPlayParams(a2);
  CFDictionarySetInt64();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  if (CFDictionaryContainsKey(a2, (const void *)*MEMORY[0x1E0CA3D78]))
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 8), CFSTR("storeHLSProvided"), (const void *)*MEMORY[0x1E0C9AE50]);
  if (*(_BYTE *)(a1 + 32))
    APSEventRecorderRecordEvent();
  JUMPOUT(0x1CAA400E4);
}

void APEndpointPlaybackSessionStatsUpdateAtInvalidate(uint64_t a1)
{
  double v2;
  double v3;
  const void *v4;

  FigSimpleMutexCheckIsNotLockedOnThisThread();
  MEMORY[0x1CAA400CC](*(_QWORD *)a1);
  if (!*(_BYTE *)(a1 + 33))
  {
    APSEventRecorderRecordEvent();
    APSEventRecorderGetEventTime();
    if (v2 != 0.0)
    {
      APSEventRecorderGetTimeBetweenEventsInMilliSecond();
      CFDictionarySetInt64();
    }
    APSEventRecorderGetEventTime();
    if (v3 != 0.0)
    {
      if (*(_BYTE *)(a1 + 32))
        *(_QWORD *)(a1 + 24) += APSEventRecorderGetTimeBetweenEventsInMilliSecond();
      CFDictionarySetInt64();
      if (*(_QWORD *)(a1 + 40))
      {
        v4 = (const void *)APSStatsHistogramCopyValuesAsRTCString();
        FigCFDictionarySetValue();
        if (v4)
          CFRelease(v4);
      }
    }
    *(_BYTE *)(a1 + 33) = 1;
  }
  JUMPOUT(0x1CAA400E4);
}

void APEndpointPlaybackSessionStatsUpdateAtStartUpComplete(uint64_t a1)
{
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  MEMORY[0x1CAA400CC](*(_QWORD *)a1);
  if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 8), CFSTR("videoStartupTimeMs")))
  {
    APSEventRecorderRecordEvent();
    APSEventRecorderGetTimeBetweenEventsInMilliSecond();
    CFDictionarySetInt64();
  }
  JUMPOUT(0x1CAA400E4);
}

void APEndpointPlaybackSessionStatsSetLastError(_QWORD *a1)
{
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  MEMORY[0x1CAA400CC](*a1);
  CFDictionarySetInt64();
  JUMPOUT(0x1CAA400E4);
}

void APEndpointPlaybackSessionSetIsParticipatingInCoordinatedPlayback(uint64_t a1, int a2)
{
  double v4;
  double v5;

  FigSimpleMutexCheckIsNotLockedOnThisThread();
  MEMORY[0x1CAA400CC](*(_QWORD *)a1);
  if (*(unsigned __int8 *)(a1 + 32) != a2)
  {
    *(_BYTE *)(a1 + 32) = a2;
    if (a2)
    {
      APSEventRecorderGetEventTime();
      if (v4 != 0.0)
        APSEventRecorderRecordEvent();
    }
    else
    {
      APSEventRecorderRecordEvent();
      APSEventRecorderGetEventTime();
      if (v5 != 0.0)
        *(_QWORD *)(a1 + 24) += APSEventRecorderGetTimeBetweenEventsInMilliSecond();
    }
  }
  JUMPOUT(0x1CAA400E4);
}

uint64_t APEndpointPlaybackSessionSetVideoSyncTime(_QWORD *a1, uint64_t a2)
{
  CMTime v5;

  FigSimpleMutexCheckIsNotLockedOnThisThread();
  MEMORY[0x1CAA400CC](*a1);
  if ((*(_BYTE *)(a2 + 12) & 1) != 0 && a1[5])
  {
    v5 = *(CMTime *)a2;
    CMTimeGetSeconds(&v5);
    APSStatsHistogramAddValue();
  }
  return MEMORY[0x1CAA400E4](*a1);
}

void APEndpointPlaybackSessionCopyRTCStats(uint64_t a1, CFDictionaryRef *a2)
{
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  MEMORY[0x1CAA400CC](*(_QWORD *)a1);
  *a2 = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFDictionaryRef *)(a1 + 8));
  JUMPOUT(0x1CAA400E4);
}

void APEndpointPlaybackSessionUpdateNowPlayingTransaction(uint64_t a1, int a2, int *a3, const void **a4)
{
  const void *v6;

  if (*a3 <= 50 && (*a3 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (a4)
  {
    v6 = *a4;
    if (a2)
    {
      if (!v6)
        APSWiFiTransactionCreate();
    }
    else if (v6)
    {
      CFRelease(v6);
      *a4 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
  }
}

void APEndpointPlaybackSessionSetV2Item(uint64_t a1, __CFDictionary *a2)
{
  uint64_t Value;
  const void *v4;
  __CFDictionary *Mutable;

  Value = FigCFDictionaryGetValue();
  if (Value)
  {
    v4 = (const void *)Value;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("uuid"), v4);
    CFDictionarySetValue(a2, CFSTR("item"), Mutable);
    if (Mutable)
      CFRelease(Mutable);
  }
}

CMTime *apPlaybackUtil_getCMTimeFromRangeForKeys@<X0>(const __CFDictionary *a1@<X0>, const void *a2@<X1>, const void *a3@<X2>, CMTime *a4@<X8>)
{
  uint64_t v7;
  const __CFDictionary *Value;
  CMTime *v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  CFTypeID v12;
  CMTime *result;
  Float64 valuePtr;

  v7 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a4->value = *MEMORY[0x1E0CA2E18];
  a4->epoch = *(_QWORD *)(v7 + 16);
  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    v9 = a4;
    return CMTimeMakeFromDictionary(v9, Value);
  }
  v10 = (const __CFNumber *)CFDictionaryGetValue(a1, a3);
  v11 = v10;
  if (!v10 || (v12 = CFGetTypeID(v10), v12 != CFNumberGetTypeID()))
  {
    v9 = a4;
    Value = v11;
    return CMTimeMakeFromDictionary(v9, Value);
  }
  valuePtr = 0.0;
  result = (CMTime *)CFNumberGetValue(v11, kCFNumberFloat64Type, &valuePtr);
  if ((_DWORD)result)
    return CMTimeMakeWithSeconds(a4, valuePtr, 1000);
  return result;
}

uint64_t APAudioSinkSharedMemCreate(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if (a3 && a2)
  {
    FigEndpointAudioSinkGetClassID();
    v5 = CMDerivedObjectCreate();
    if ((_DWORD)v5)
    {
      v11 = v5;
      APSLogErrorAt();
    }
    else
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v7 = *((_QWORD *)a2 + 4);
      v8 = a2[1];
      *(_OWORD *)(DerivedStorage + 48) = *a2;
      *(_OWORD *)(DerivedStorage + 64) = v8;
      *(_QWORD *)(DerivedStorage + 80) = v7;
      v10 = *a2;
      v9 = a2[1];
      *(_QWORD *)(DerivedStorage + 40) = *((_QWORD *)a2 + 4);
      *(_OWORD *)(DerivedStorage + 8) = v10;
      *(_OWORD *)(DerivedStorage + 24) = v9;
      if (gLogCategory_APAudioSinkSharedMem <= 30
        && (gLogCategory_APAudioSinkSharedMem != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v11 = 0;
      *a3 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950504;
  }
  return v11;
}

void sharedMemSink_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioSinkSharedMem <= 30
    && (gLogCategory_APAudioSinkSharedMem != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v1 = *(const void **)(DerivedStorage + 96);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
}

__CFString *sharedMemSink_CopyDebugDescription()
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APAudioSinkSharedMem>"));
  return Mutable;
}

uint64_t sharedMemSink_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("SharedMemoryBuffer")))
  {
    if (*(_QWORD *)(DerivedStorage + 96))
      APSSharedRingBuffer_GetSharedMemoryBuffer();
LABEL_7:
    v7 = FigXPCRetain();
    result = 0;
    *a4 = v7;
    return result;
  }
  if (CFEqual(a2, CFSTR("SharedMemoryBufferState")))
  {
    if (*(_QWORD *)(DerivedStorage + 96))
      APSSharedRingBuffer_GetSharedMemoryState();
    goto LABEL_7;
  }
  return 4294954512;
}

uint64_t sharedMemSink_GetInputFormat(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  __int128 v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(DerivedStorage + 40);
  v5 = *(_OWORD *)(DerivedStorage + 24);
  *(_OWORD *)a2 = *(_OWORD *)(DerivedStorage + 8);
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = v4;
  return 0;
}

uint64_t sharedMemSink_SetInputFormat(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage + 48;
  if (a2)
    v4 = a2;
  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(DerivedStorage + 8) = *(_OWORD *)v4;
  *(_OWORD *)(DerivedStorage + 24) = v6;
  *(_QWORD *)(DerivedStorage + 40) = v5;
  return 0;
}

uint64_t sharedMemSink_Resume()
{
  _BYTE *DerivedStorage;
  _BYTE *v1;
  uint64_t v2;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return 0;
  v1 = DerivedStorage;
  if (gLogCategory_APAudioSinkSharedMem <= 30
    && (gLogCategory_APAudioSinkSharedMem != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*((_DWORD *)v1 + 4) == *((_DWORD *)v1 + 14))
  {
    v2 = APSSharedRingBuffer_Create();
    if ((_DWORD)v2)
    {
      APSLogErrorAt();
    }
    else
    {
      APSSharedRingBuffer_ClearDataInBuffer();
      *v1 = 1;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960587;
  }
  return v2;
}

uint64_t sharedMemSink_Suspend()
{
  _BYTE *DerivedStorage;
  _BYTE *v1;
  uint64_t result;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
    return 4294950503;
  v1 = DerivedStorage;
  if (gLogCategory_APAudioSinkSharedMem <= 30
    && (gLogCategory_APAudioSinkSharedMem != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *v1 = 0;
  result = *((_QWORD *)v1 + 12);
  if (result)
  {
    CFRelease((CFTypeRef)result);
    result = 0;
    *((_QWORD *)v1 + 12) = 0;
  }
  return result;
}

uint64_t sharedMemSink_AcquireBuffer(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 104) || (v6 = DerivedStorage, !APSSharedRingBuffer_IsSpaceAvailable()))
  {
    APSLogErrorAt();
    return 4294960568;
  }
  else
  {
    v7 = APSSharedRingBuffer_GetWritePointer();
    if (v7)
    {
      v8 = v7;
      result = 0;
      v8 += 4;
      *a2 = v8;
      *a3 = 1440;
      *(_QWORD *)(v6 + 104) = v8;
    }
    else
    {
      APSLogErrorAt();
      return 4294960587;
    }
  }
  return result;
}

uint64_t sharedMemSink_CommitBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(DerivedStorage + 104);
  if (!v4 || v4 != a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  v5 = DerivedStorage;
  v6 = APSSharedRingBuffer_WriteData();
  if ((_DWORD)v6)
  {
    v7 = v6;
    goto LABEL_9;
  }
  v7 = APSSharedRingBuffer_UpdateWriteState();
  if ((_DWORD)v7)
  {
LABEL_9:
    APSLogErrorAt();
    return v7;
  }
  *(_QWORD *)(v5 + 104) = 0;
  return v7;
}

void APDemoManagerStart()
{
  NSObject *v0;
  _QWORD block[5];

  if (demoManagerGetShared_once != -1)
    dispatch_once(&demoManagerGetShared_once, &__block_literal_global_35);
  if (demoManagerGetShared_manager)
  {
    v0 = *(NSObject **)demoManagerGetShared_manager;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __APDemoManagerStart_block_invoke;
    block[3] = &__block_descriptor_tmp_7;
    block[4] = demoManagerGetShared_manager;
    dispatch_async(v0, block);
  }
}

uint64_t APDemoManagerIsDemoSession(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t CMBaseObject;
  unsigned int (*v6)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v11;
  CFTypeRef cf;

  v11 = 0;
  cf = 0;
  if (demoManagerGetShared_once != -1)
    dispatch_once(&demoManagerGetShared_once, &__block_literal_global_35);
  v4 = 0;
  if (a2 && a1 && demoManagerGetShared_manager)
  {
    if (APSGetFBOPropertyInt64() && !APSGetFBOPropertyInt64())
    {
      CMBaseObject = APSenderSessionGetCMBaseObject(a2);
      v6 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
      if (v6)
      {
        v7 = *MEMORY[0x1E0C9AE00];
        if (!v6(CMBaseObject, CFSTR("TransportControlStream"), *MEMORY[0x1E0C9AE00], &cf))
        {
          if (cf)
          {
            v8 = FigTransportStreamGetCMBaseObject();
            v9 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
            if (v9)
            {
              v9(v8, *MEMORY[0x1E0CF1E70], v7, &v11);
              if (v11)
              {
                v4 = APSIsDirectLinkInterface();
                goto LABEL_16;
              }
            }
          }
        }
      }
      APSLogErrorAt();
    }
    v4 = 0;
  }
LABEL_16:
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  return v4;
}

CFTypeRef APDemoManagerCopyDeviceInfo()
{
  CFTypeRef result;

  if (APDemoManagerCopyDeviceInfo_once != -1)
    dispatch_once(&APDemoManagerCopyDeviceInfo_once, &__block_literal_global_6);
  result = (CFTypeRef)APDemoManagerCopyDeviceInfo_deviceInfo;
  if (APDemoManagerCopyDeviceInfo_deviceInfo)
    return CFRetain((CFTypeRef)APDemoManagerCopyDeviceInfo_deviceInfo);
  return result;
}

uint64_t __demoManagerGetShared_block_invoke()
{
  uint64_t result;

  result = APSIsDemoModeEnabled();
  if ((_DWORD)result)
  {
    demoManagerGetShared_manager = (uint64_t)malloc_type_calloc(1uLL, 0x38uLL, 0x1060040781CD4F9uLL);
    result = (uint64_t)dispatch_queue_create("com.apple.airplay.demomanager", 0);
    *(_QWORD *)demoManagerGetShared_manager = result;
    if (gLogCategory_APDemoManager <= 50)
    {
      if (gLogCategory_APDemoManager != -1)
        return LogPrintF();
      result = _LogCategory_Initialize();
      if ((_DWORD)result)
        return LogPrintF();
    }
  }
  return result;
}

void callback_ipAddressChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (gLogCategory_APDemoManager <= 50 && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
    LogPrintF();
  demoManagerDiscoverLink(a3);
}

void __demoManagerStartLinkDiscovery_block_invoke(uint64_t a1)
{
  demoManagerDiscoverLink(*(_QWORD *)(a1 + 32));
}

void demoManagerDiscoverLink(uint64_t a1)
{
  ifaddrs *v2;
  const __CFAllocator *v3;
  sockaddr *ifa_addr;
  const char *ifa_name;
  CFStringRef v6;
  uint64_t *v7;
  int *v8;
  int v9;
  const void *v10;
  CFMutableDictionaryRef Mutable;
  int v12;
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, const __CFString *);
  uint64_t v15;
  unsigned int (*v16)(uint64_t, _QWORD, _QWORD);
  ifaddrs *v17;
  char v18[46];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (gLogCategory_APDemoManager <= 50 && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v17 = 0;
  if (getifaddrs(&v17) < 0)
  {
    v8 = __error();
    if (gLogCategory_APDemoManager > 90)
    {
LABEL_42:
      demoManagerStopEndpointDiscovery(a1);
      v10 = *(const void **)(a1 + 8);
      if (v10)
      {
        CFRelease(v10);
        *(_QWORD *)(a1 + 8) = 0;
      }
      return;
    }
    v9 = *v8;
    if (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize())
    {
      strerror(v9);
      LogPrintF();
    }
LABEL_38:
    if (gLogCategory_APDemoManager <= 50
      && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_42;
  }
  v2 = v17;
  if (!v17)
  {
    MEMORY[0x1CAA40C3C](0);
    goto LABEL_38;
  }
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  do
  {
    ifa_addr = v2->ifa_addr;
    if (ifa_addr)
    {
      if (ifa_addr->sa_family == 30
        && (v2->ifa_flags & 9) == 1
        && (ifa_name = v2->ifa_name, !strncmp(ifa_name, "en", 2uLL)))
      {
        v6 = CFStringCreateWithCString(v3, ifa_name, 0x8000100u);
        if (!APSIsDirectLinkInterface())
        {
          LODWORD(ifa_addr) = 0;
          if (!v6)
            goto LABEL_13;
LABEL_24:
          CFRelease(v6);
          goto LABEL_13;
        }
        if (gLogCategory_APDemoManager <= 50
          && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
        {
          inet_ntop(30, &ifa_addr->sa_data[6], v18, 0x2Eu);
          LogPrintF();
        }
        LODWORD(ifa_addr) = 1;
        if (v6)
          goto LABEL_24;
      }
      else
      {
        LODWORD(ifa_addr) = 0;
      }
    }
LABEL_13:
    if ((_DWORD)ifa_addr)
      break;
    v2 = v2->ifa_next;
  }
  while (v2);
  MEMORY[0x1CAA40C3C](v17);
  if (!(_DWORD)ifa_addr)
    goto LABEL_38;
  if (*(_QWORD *)(a1 + 24))
    goto LABEL_29;
  if (FigRoutingContextCopySystemMirroringContext())
    goto LABEL_60;
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
LABEL_29:
  v7 = (uint64_t *)(a1 + 16);
  if (!*(_QWORD *)(a1 + 16))
  {
    if (gLogCategory_APDemoManager <= 50
      && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetInt32();
    v12 = FigRouteDiscovererCreate();
    if (v12)
    {
      APSLogErrorAt();
      if (Mutable)
        goto LABEL_49;
    }
    else
    {
      v13 = *v7;
      v14 = *(void (**)(uint64_t, _QWORD, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v14)
        v14(v13, *MEMORY[0x1E0D48BB0], CFSTR("APDemoManager"));
      if (Mutable)
LABEL_49:
        CFRelease(Mutable);
    }
    if (v12)
      goto LABEL_60;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterRemoveListener();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  if (*(_BYTE *)(a1 + 48))
    goto LABEL_58;
  if (gLogCategory_APDemoManager <= 50 && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v15 = *v7;
  v16 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v16 || v16(v15, *MEMORY[0x1E0D48BB8], *MEMORY[0x1E0D48B60]))
  {
LABEL_60:
    APSLogErrorAt();
    if (gLogCategory_APDemoManager <= 90
      && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    demoManagerStopEndpointDiscovery(a1);
  }
  else
  {
LABEL_58:
    *(_BYTE *)(a1 + 48) = 1;
    demoManagerActivateEndpointIfNeeded((_QWORD *)a1);
  }
}

uint64_t demoManagerStopEndpointDiscovery(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t result;

  if (*(_QWORD *)(a1 + 16) && *(_BYTE *)(a1 + 48))
  {
    if (gLogCategory_APDemoManager <= 50
      && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v2 = *(_QWORD *)(a1 + 16);
    v3 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v3)
      v3(v2, *MEMORY[0x1E0D48BB8], *MEMORY[0x1E0D48B70]);
  }
  CMNotificationCenterGetDefaultLocalCenter();
  result = CMNotificationCenterRemoveListener();
  *(_BYTE *)(a1 + 48) = 0;
  return result;
}

void callback_currentRouteChanged(uint64_t a1, NSObject **a2)
{
  NSObject *v3;
  _QWORD block[5];

  if (gLogCategory_APDemoManager <= 50 && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v3 = *a2;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __callback_currentRouteChanged_block_invoke;
  block[3] = &__block_descriptor_tmp_54;
  block[4] = a2;
  dispatch_async(v3, block);
}

void callback_availableEndpointsChanged(uint64_t a1, NSObject **a2)
{
  NSObject *v3;
  _QWORD block[5];

  if (gLogCategory_APDemoManager <= 50 && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v3 = *a2;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __callback_availableEndpointsChanged_block_invoke;
  block[3] = &__block_descriptor_tmp_62;
  block[4] = a2;
  dispatch_async(v3, block);
}

void demoManagerActivateEndpointIfNeeded(_QWORD *a1)
{
  uint64_t v2;
  unsigned int (*v3)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  uint64_t v4;
  CFIndex Count;
  CFIndex v6;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  const void *v10;
  int v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, uint64_t);
  uint64_t v17;
  unsigned int (*v18)(uint64_t, const void *, _QWORD);
  CFTypeRef cf;
  CFArrayRef theArray;
  CFTypeRef v21;

  theArray = 0;
  v21 = 0;
  cf = 0;
  if (!a1[2])
    goto LABEL_12;
  if (gLogCategory_APDemoManager <= 50 && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v2 = a1[2];
  v3 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
  if (!v3 || (v4 = *MEMORY[0x1E0C9AE00], v3(v2, *MEMORY[0x1E0D48BA8], *MEMORY[0x1E0C9AE00], &theArray)))
  {
LABEL_12:
    APSLogErrorAt();
    goto LABEL_28;
  }
  if (!theArray)
  {
LABEL_28:
    if (gLogCategory_APDemoManager > 50 || gLogCategory_APDemoManager == -1 && !_LogCategory_Initialize())
      goto LABEL_32;
LABEL_30:
    LogPrintF();
    goto LABEL_32;
  }
  Count = CFArrayGetCount(theArray);
  if (gLogCategory_APDemoManager <= 50 && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (Count < 1)
    goto LABEL_25;
  v6 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v6);
    if (APSGetFBOPropertyInt64())
      break;
    if (Count == ++v6)
      goto LABEL_25;
  }
  if (!ValueAtIndex)
  {
LABEL_25:
    v10 = (const void *)a1[1];
    a1[1] = 0;
    v11 = 1;
    if (!v10)
      goto LABEL_27;
    goto LABEL_26;
  }
  CMBaseObject = FigEndpointGetCMBaseObject();
  v9 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v9)
    v9(CMBaseObject, *MEMORY[0x1E0CA4348], v4, &v21);
  if (gLogCategory_APDemoManager <= 50 && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v12 = FigEndpointGetCMBaseObject();
  v13 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v13)
    v13(v12, *MEMORY[0x1E0CA4260], v4, &cf);
  if (cf == (CFTypeRef)*MEMORY[0x1E0C9AE50])
  {
    if (gLogCategory_APDemoManager <= 50
      && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    demoManagerStopEndpointDiscovery((uint64_t)a1);
LABEL_65:
    v10 = (const void *)a1[1];
    a1[1] = ValueAtIndex;
    CFRetain(ValueAtIndex);
    v11 = 0;
    if (!v10)
    {
LABEL_27:
      if (!v11)
        goto LABEL_32;
      goto LABEL_28;
    }
LABEL_26:
    CFRelease(v10);
    goto LABEL_27;
  }
  if (ValueAtIndex == (const void *)a1[1])
  {
    if (gLogCategory_APDemoManager <= 50
      && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_65;
  }
  if (a1[4])
  {
    if (gLogCategory_APDemoManager <= 50
      && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v14 = a1[4];
    v15 = FigEndpointGetCMBaseObject();
    v16 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v16)
      v16(v15, *MEMORY[0x1E0CA4378], v14);
  }
  if (gLogCategory_APDemoManager <= 50 && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v17 = a1[3];
  v18 = *(unsigned int (**)(uint64_t, const void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v18 && !v18(v17, ValueAtIndex, 0))
    goto LABEL_65;
  if (gLogCategory_APDemoManager <= 90 && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
    goto LABEL_30;
LABEL_32:
  if (cf)
    CFRelease(cf);
  if (theArray)
    CFRelease(theArray);
  if (v21)
    CFRelease(v21);
}

void __callback_currentRouteChanged_block_invoke(uint64_t a1)
{
  NSObject **v1;
  NSObject *v2;
  unsigned int (*v3)(NSObject *, NSObject **);
  uint64_t v4;
  NSObject *v5;
  BOOL v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  void (*v11)(NSObject *, const __CFString *, _QWORD, _QWORD, _QWORD);
  _QWORD block[5];
  NSObject *v13;

  v1 = *(NSObject ***)(a1 + 32);
  v13 = 0;
  v2 = v1[3];
  if (!v2
    || (v3 = *(unsigned int (**)(NSObject *, NSObject **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24)) == 0
    || v3(v2, &v13))
  {
    APSLogErrorAt();
    goto LABEL_23;
  }
  if (v13)
  {
    v4 = APSGetFBOPropertyInt64();
    v5 = v13;
    if (v4)
      v6 = 1;
    else
      v6 = v13 == 0;
    if (!v6)
    {
      CFRelease(v13);
      v5 = 0;
      v13 = 0;
    }
  }
  else
  {
    v5 = 0;
  }
  v7 = v1[1];
  if (!v7)
  {
    if (v5)
    {
      v1[1] = v5;
      CFRetain(v5);
      if (gLogCategory_APDemoManager <= 50
        && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_27;
    }
LABEL_23:
    demoManagerStopEndpointDiscovery((uint64_t)v1);
    v8 = v1[1];
    if (v8)
    {
      CFRelease(v8);
      v1[1] = 0;
    }
    v9 = *v1;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __demoManagerCheckCurrentRoute_block_invoke;
    block[3] = &__block_descriptor_tmp_59_0;
    block[4] = v1;
    dispatch_async(v9, block);
    goto LABEL_32;
  }
  if (gLogCategory_APDemoManager <= 50 && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (v5 != v7)
  {
    usleep(0x186A0u);
    goto LABEL_23;
  }
LABEL_27:
  demoManagerStopEndpointDiscovery((uint64_t)v1);
  v10 = v13;
  if (!v13 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass()))
    v10 = 0;
  v11 = *(void (**)(NSObject *, const __CFString *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 24)
                                                                                      + 72);
  if (v11)
    v11(v10, CFSTR("CreateAPDemoHIDChannel"), 0, 0, 0);
LABEL_32:
  if (v13)
    CFRelease(v13);
}

uint64_t __demoManagerCheckCurrentRoute_block_invoke(uint64_t a1)
{
  return demoManagerDiscoverLink(*(_QWORD *)(a1 + 32));
}

void __callback_availableEndpointsChanged_block_invoke(uint64_t a1)
{
  demoManagerActivateEndpointIfNeeded(*(_QWORD **)(a1 + 32));
}

uint64_t APEndpointRemoteControlSessionAirPlayCreate(const __CFAllocator *a1, const void *a2, uint64_t a3, CFDictionaryRef theDict, uint64_t a5, _QWORD *a6)
{
  const void *Value;
  const void *v13;
  const void *v14;
  const void *v15;
  uint64_t Int64;
  uint64_t v17;
  uint64_t DerivedStorage;
  unsigned int v19;
  CFTypeRef v20;
  CFStringRef v21;
  BOOL v22;
  uint64_t v23;
  dispatch_queue_t v24;
  dispatch_queue_t v25;
  dispatch_queue_t v26;
  const __CFAllocator *v27;
  const __CFUUID *v28;
  const __CFUUID *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v33;
  uint64_t v34;
  char label[16];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)label = 0u;
  v36 = 0u;
  if (!a2 || !a3 || !theDict || (Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA4518])) == 0)
  {
    APSLogErrorAt();
    return 4294949866;
  }
  v13 = Value;
  v34 = a5;
  v14 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA4520]);
  v15 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA38D8]);
  Int64 = CFDictionaryGetInt64();
  FigEndpointRemoteControlSessionGetClassID();
  v17 = CMDerivedObjectCreate();
  if ((_DWORD)v17)
  {
    v31 = v17;
LABEL_37:
    APSLogErrorAt();
    return v31;
  }
  v33 = a6;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  do
    v19 = __ldaxr((unsigned int *)&APEndpointRemoteControlSessionAirPlayCreate_sSessionCounter);
  while (__stlxr(v19 + 1, (unsigned int *)&APEndpointRemoteControlSessionAirPlayCreate_sSessionCounter));
  if (v15)
  {
    v20 = CFRetain(v15);
    *(_QWORD *)DerivedStorage = v20;
    if (!v20)
      goto LABEL_38;
  }
  else
  {
    v21 = CFStringCreateWithFormat(a1, 0, CFSTR("%@-RCS-%d"), a3, v19 + 1);
    *(_QWORD *)DerivedStorage = v21;
    if (!v21)
    {
LABEL_38:
      APSLogErrorAt();
      return 4294949865;
    }
  }
  *(_BYTE *)(DerivedStorage + 8) = CFDictionaryGetInt64() != 0;
  *(_BYTE *)(DerivedStorage + 9) = CFDictionaryGetInt64() != 0;
  *(_BYTE *)(DerivedStorage + 10) = CFDictionaryGetInt64() != 0;
  v22 = CFDictionaryGetInt64() != 0;
  *(_DWORD *)(DerivedStorage + 104) = 50;
  *(_BYTE *)(DerivedStorage + 11) = v22;
  FigCFDictionaryGetInt32IfPresent();
  v23 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 112) = v23;
  if (!v23)
    goto LABEL_38;
  SNPrintF();
  *(_QWORD *)(DerivedStorage + 80) = os_transaction_create();
  SNPrintF();
  v24 = dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 160) = v24;
  if (!v24)
    goto LABEL_38;
  SNPrintF();
  v25 = dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 24) = v25;
  if (!v25)
    goto LABEL_38;
  SNPrintF();
  v26 = dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 32) = v26;
  if (!v26)
    goto LABEL_38;
  *(_QWORD *)(DerivedStorage + 40) = CFRetain(v13);
  if (v14)
  {
    *(_QWORD *)(DerivedStorage + 48) = CFRetain(v14);
  }
  else
  {
    v27 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v28 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
    if (v28)
    {
      v29 = v28;
      *(_QWORD *)(DerivedStorage + 48) = CFUUIDCreateString(v27, v28);
      CFRelease(v29);
    }
  }
  if (!*(_QWORD *)(DerivedStorage + 48))
    goto LABEL_38;
  *(_QWORD *)(DerivedStorage + 56) = v34;
  *(_QWORD *)(DerivedStorage + 16) = CFRetain(a2);
  *(_BYTE *)(DerivedStorage + 120) = 0;
  if (Int64)
  {
    *(_QWORD *)(DerivedStorage + 168) = Int64;
    v30 = apEndpointRemoteControlSession_ensureAndCopyTransportStreams(0, 0);
    if ((_DWORD)v30)
    {
      v31 = v30;
      goto LABEL_37;
    }
  }
  *(_QWORD *)(DerivedStorage + 64) = 0;
  FigCFDictionaryGetInt64IfPresent();
  *(_DWORD *)(DerivedStorage + 72) = 0;
  FigCFDictionaryGetInt32IfPresent();
  if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 50
    && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    IsAppleInternalBuild();
    LogPrintF();
  }
  v31 = 0;
  *v33 = 0;
  return v31;
}

uint64_t apEndpointRemoteControlSession_ensureAndCopyTransportStreams(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;
  const void *v6;
  const void *v7;
  CFTypeRef v8;
  uint64_t v9;
  uint64_t v10;
  __CFDictionary *v11;
  int v12;
  const __CFAllocator *v13;
  CFMutableDictionaryRef v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, CFMutableDictionaryRef, CFTypeRef *);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, CFMutableDictionaryRef, CFTypeRef *);
  __CFDictionary *Mutable;
  const void **v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, __CFDictionary *, CFTypeRef *, _QWORD, _QWORD);
  uint64_t Int64;
  CFMutableDictionaryRef v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, CFMutableDictionaryRef, CFTypeRef *);
  uint64_t CMBaseObject;
  uint64_t (*v29)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFStringRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  uint64_t (*v33)(CFTypeRef, CFTypeRef, CFStringRef);
  int v34;
  const void *v35;
  CFTypeRef v36;
  const void *v37;
  CFTypeRef v38;
  CFTypeRef v39;
  uint64_t (*v40)(CFTypeRef, _QWORD, uint64_t (*)(uint64_t, int, uint64_t, uint64_t, _QWORD *), const void *);
  CFTypeRef v41;
  void (*v42)(CFTypeRef);
  CFTypeRef v43;
  void (*v44)(CFTypeRef);
  CFTypeRef v45;
  void (*v46)(CFTypeRef);
  char v47;
  CFTypeRef v48;
  void (*v49)(CFTypeRef);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  CFMutableDictionaryRef v54;
  __CFDictionary *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t);
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t);
  uint64_t v62;
  unsigned int (*v63)(uint64_t, CFStringRef, __CFDictionary *);
  char v65;
  uint64_t v66;
  CFTypeRef v67;
  CFTypeRef v68;
  CFTypeRef cf;
  CFTypeRef v70;
  unsigned int v71;
  UInt8 buffer[8];
  uint64_t v73;
  uint64_t v74;
  int v75;
  CFTypeRef v76[2];
  CFRange v77;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 112));
  if (*(_BYTE *)(DerivedStorage + 120))
  {
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 112));
    return 4294949864;
  }
  v5 = *(const void **)(DerivedStorage + 144);
  if (v5)
    v6 = CFRetain(v5);
  else
    v6 = 0;
  v7 = *(const void **)(DerivedStorage + 152);
  if (v7)
    v8 = CFRetain(v7);
  else
    v8 = 0;
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 112));
  if (v6)
    goto LABEL_144;
  v71 = 0;
  v9 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v70 = 0;
  v10 = *(_QWORD *)(v9 + 168);
  v67 = 0;
  v68 = 0;
  if (apEndpointRemoteControlSession_isInvalidated())
  {
    v6 = 0;
    v14 = 0;
    v25 = 0;
    v11 = 0;
    v30 = 0;
    goto LABEL_83;
  }
  if (*(_QWORD *)(v9 + 168))
  {
    v11 = 0;
LABEL_13:
    v12 = 0;
    goto LABEL_14;
  }
  if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 50
    && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = Mutable;
  if (!Mutable)
  {
    APSLogErrorAt();
    v6 = 0;
    v14 = 0;
    goto LABEL_177;
  }
  CFDictionarySetValue(Mutable, CFSTR("clientTypeUUID"), *(const void **)(v9 + 40));
  CFDictionarySetValue(v11, CFSTR("clientUUID"), *(const void **)(v9 + 48));
  CFDictionarySetValue(v11, CFSTR("channelID"), *(const void **)v9);
  CFDictionarySetInt64();
  v21 = (const void **)MEMORY[0x1E0C9AE50];
  if (*(_BYTE *)(v9 + 8))
  {
    CFDictionarySetValue(v11, CFSTR("wantsDedicatedSocket"), (const void *)*MEMORY[0x1E0C9AE50]);
    v71 = RandomBytes();
    if (v71)
    {
      APSLogErrorAt();
      goto LABEL_118;
    }
    CFDictionarySetInt64();
  }
  if (*(_BYTE *)(v9 + 10))
    CFDictionarySetValue(v11, CFSTR("sendMessageAsIs"), *v21);
  v22 = *(_QWORD *)(v9 + 16);
  v23 = *(uint64_t (**)(uint64_t, uint64_t, __CFDictionary *, CFTypeRef *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 40);
  if (!v23)
  {
    v71 = -12782;
    goto LABEL_49;
  }
  v71 = v23(v22, 130, v11, &v70, 0, 0);
  if (v71)
  {
LABEL_49:
    if (gLogCategory_APEndpointRemoteControlSessionAirPlay > 90
      || gLogCategory_APEndpointRemoteControlSessionAirPlay == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_118;
    }
LABEL_51:
    LogPrintF();
LABEL_118:
    v6 = 0;
    v14 = 0;
    goto LABEL_119;
  }
  *(_QWORD *)(v9 + 168) = CFDictionaryGetInt64();
  if (v71)
  {
    if (gLogCategory_APEndpointRemoteControlSessionAirPlay > 90
      || gLogCategory_APEndpointRemoteControlSessionAirPlay == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_118;
    }
    goto LABEL_51;
  }
  Int64 = CFDictionaryGetInt64();
  if (!*(_BYTE *)(v9 + 8) || !(Int64 << 32))
  {
    if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 50
      && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_13;
  }
  if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 50
    && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v12 = 1;
LABEL_14:
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v14 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v14)
  {
    APSLogErrorAt();
    v6 = 0;
LABEL_177:
    v25 = 0;
LABEL_178:
    v30 = 0;
    v34 = -17431;
    goto LABEL_84;
  }
  v66 = v10;
  FigCFDictionarySetInt64();
  FigCFDictionarySetInt32();
  v65 = v12;
  if (v12)
  {
    FigCFDictionarySetInt32();
    v15 = *(_QWORD *)(v9 + 16);
    v16 = APTransportStreamIDMakeWithPort();
    v17 = *(uint64_t (**)(uint64_t, uint64_t, CFMutableDictionaryRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 64);
    if (v17)
    {
      v71 = v17(v15, v16, v14, &cf);
      if (!v71)
      {
        if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 50
          && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v68 = CFRetain(cf);
        if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 50
          && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(v9 + 16));
        v29 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v29)
        {
          v71 = v29(CMBaseObject, CFSTR("KeyHolder"), v13, &v67);
          if (!v71)
          {
            v30 = APKeyHolderCoreUtilsEncryptionContextDataStreamCreateWithSeed(v13, 0);
            if (!v30)
            {
              APSLogErrorAt();
              v6 = 0;
              v25 = 0;
              v34 = -6728;
              goto LABEL_84;
            }
            v31 = cf;
            v32 = v67;
            v33 = *(uint64_t (**)(CFTypeRef, CFTypeRef, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 80);
            if (v33)
            {
              v71 = v33(v31, v32, v30);
              if (!v71)
              {
                v25 = 0;
                goto LABEL_81;
              }
            }
            else
            {
              v71 = -12782;
            }
            APSLogErrorAt();
            v6 = 0;
            v25 = 0;
            goto LABEL_121;
          }
        }
        else
        {
          v71 = -12782;
        }
      }
    }
    else
    {
      v71 = -12782;
    }
    goto LABEL_76;
  }
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  v18 = *(_QWORD *)(v9 + 16);
  v19 = *(uint64_t (**)(uint64_t, CFMutableDictionaryRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 56);
  if (!v19)
  {
    v71 = -12782;
    goto LABEL_76;
  }
  v71 = v19(v18, v14, &cf);
  if (v71)
  {
LABEL_76:
    APSLogErrorAt();
    v6 = 0;
LABEL_119:
    v25 = 0;
    goto LABEL_120;
  }
  if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 50
    && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v25 = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v25)
  {
    APSLogErrorAt();
    v6 = 0;
    goto LABEL_178;
  }
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  v26 = *(_QWORD *)(v9 + 16);
  v27 = *(uint64_t (**)(uint64_t, CFMutableDictionaryRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 56);
  if (!v27)
  {
    v71 = -12782;
    goto LABEL_67;
  }
  v71 = v27(v26, v25, &v68);
  if (v71)
  {
LABEL_67:
    APSLogErrorAt();
    v6 = 0;
LABEL_120:
    v30 = 0;
    goto LABEL_121;
  }
  if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 50
    && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v30 = 0;
LABEL_81:
  MEMORY[0x1CAA400CC](*(_QWORD *)(v9 + 112));
  if (*(_BYTE *)(v9 + 120))
  {
    MEMORY[0x1CAA400E4](*(_QWORD *)(v9 + 112));
    v6 = 0;
LABEL_83:
    v34 = -17432;
LABEL_84:
    v71 = v34;
    goto LABEL_121;
  }
  v35 = *(const void **)(v9 + 144);
  v36 = cf;
  *(_QWORD *)(v9 + 144) = cf;
  if (v36)
    CFRetain(v36);
  if (v35)
    CFRelease(v35);
  v37 = *(const void **)(v9 + 152);
  v38 = v68;
  *(_QWORD *)(v9 + 152) = v68;
  if (v38)
    CFRetain(v38);
  if (v37)
    CFRelease(v37);
  MEMORY[0x1CAA400E4](*(_QWORD *)(v9 + 112));
  v6 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_QWORD *)(v9 + 176) = v6;
  if (v6)
  {
    v39 = v68;
    v40 = *(uint64_t (**)(CFTypeRef, _QWORD, uint64_t (*)(uint64_t, int, uint64_t, uint64_t, _QWORD *), const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v40)
    {
      v71 = v40(v39, apEndpointRemoteControlSession_handleMessage, apEndpointRemoteControlSession_handleMessageCreatingReply, v6);
      if (!v71)
      {
        v41 = cf;
        v42 = *(void (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v42)
          v42(v41);
        v43 = v68;
        v44 = *(void (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v44)
          v44(v43);
        v45 = cf;
        v46 = *(void (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v46)
          v46(v45);
        if (v66)
          v47 = 1;
        else
          v47 = v65;
        if ((v47 & 1) == 0)
        {
          v48 = v68;
          v49 = *(void (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
          if (v49)
            v49(v48);
        }
        v50 = CMBaseObjectGetDerivedStorage();
        v76[0] = 0;
        v75 = 0;
        v73 = 0;
        v74 = 0;
        *(_QWORD *)buffer = 0;
        if (*(_BYTE *)(v50 + 11))
        {
          v51 = v50;
          v52 = FigTransportStreamGetCMBaseObject();
          v53 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
          if (v53
            && (v53(v52, *MEMORY[0x1E0CF1F68], v13, v76), v76[0])
            && (v77.location = 0,
                v77.length = 28,
                CFDataGetBytes((CFDataRef)v76[0], v77, buffer),
                SockAddrGetPort(),
                (v54 = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0))
          {
            v55 = v54;
            CFDictionarySetInt64();
            CFDictionarySetInt64();
            CFDictionarySetValue(v55, CFSTR("localSendsWithReadKey"), (const void *)*MEMORY[0x1E0C9AE40]);
            if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 50
              && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v62 = *(_QWORD *)(v51 + 16);
            v63 = *(unsigned int (**)(uint64_t, CFStringRef, __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 120);
            if ((!v63 || v63(v62, v30, v55))
              && gLogCategory_APEndpointRemoteControlSessionAirPlay <= 90
              && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            CFRelease(v55);
          }
          else
          {
            APSLogErrorAt();
          }
        }
        else if (IsAppleInternalBuild()
               && gLogCategory_APEndpointRemoteControlSessionAirPlay <= 60
               && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (v76[0])
          CFRelease(v76[0]);
        v8 = v68;
        v6 = cf;
        v68 = 0;
        cf = 0;
        goto LABEL_121;
      }
    }
    else
    {
      v71 = -12782;
    }
    APSLogErrorAt();
    v6 = 0;
  }
LABEL_121:
  if (v70)
    CFRelease(v70);
  if (v14)
    CFRelease(v14);
  if (v25)
    CFRelease(v25);
  if (v11)
    CFRelease(v11);
  if (v67)
    CFRelease(v67);
  if (v30)
    CFRelease(v30);
  if (cf)
  {
    v56 = FigTransportStreamGetCMBaseObject();
    if (v56)
    {
      v57 = v56;
      v58 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v58)
        v58(v57);
    }
    CFRelease(cf);
    cf = 0;
  }
  if (v68)
  {
    v59 = FigTransportStreamGetCMBaseObject();
    if (v59)
    {
      v60 = v59;
      v61 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v61)
        v61(v60);
    }
    CFRelease(v68);
  }
  v4 = v71;
  if (v71)
  {
    APSLogErrorAt();
LABEL_170:
    if (v6)
      CFRelease(v6);
    goto LABEL_172;
  }
LABEL_144:
  v4 = 0;
  if (!a2)
    goto LABEL_170;
  *a2 = v6;
LABEL_172:
  if (v8)
    CFRelease(v8);
  return v4;
}

uint64_t apEndpointRemoteControlSession_Invalidate(const void *a1)
{
  if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 50
    && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  apEndpointRemoteControlSession_invalidateInternal(a1);
  return 0;
}

uint64_t apEndpointRemoteControlSession_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 50
    && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_QWORD *)(DerivedStorage + 128) = 0;
  v1 = *(const void **)(DerivedStorage + 136);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 136) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 40);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 176);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 176) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v4 = *(const void **)(DerivedStorage + 16);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 48);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v6 = *(NSObject **)(DerivedStorage + 160);
  if (v6)
  {
    dispatch_release(v6);
    *(_QWORD *)(DerivedStorage + 160) = 0;
  }
  v7 = *(NSObject **)(DerivedStorage + 24);
  if (v7)
  {
    dispatch_release(v7);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v8 = *(NSObject **)(DerivedStorage + 32);
  if (v8)
  {
    dispatch_release(v8);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v9 = *(void **)(DerivedStorage + 80);
  if (v9)
  {
    os_release(v9);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  return FigSimpleMutexDestroy();
}

CFStringRef apEndpointRemoteControlSession_CopyDebugDesc()
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat(0, 0, CFSTR("<APEndpointRemoteControlSessionAirPlay '%@'>"), *DerivedStorage);
}

uint64_t apEndpointRemoteControlSession_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  CFTypeRef *DerivedStorage;
  CFTypeRef v7;
  uint64_t result;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("SessionID")))
    goto LABEL_6;
  if (CFEqual(a2, CFSTR("clientUUID")))
  {
    DerivedStorage += 6;
LABEL_6:
    v7 = CFRetain(*DerivedStorage);
    result = 0;
    *a4 = v7;
    return result;
  }
  if (CFEqual(a2, CFSTR("clientTypeUUID")))
  {
    DerivedStorage += 5;
    goto LABEL_6;
  }
  return 4294949862;
}

void apEndpointRemoteControlSession_invalidateInternal(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  uint64_t v4;
  CFTypeRef v5;
  const void *v6;
  CFTypeRef v7;
  const void *v8;
  const void *v9;
  CFTypeRef v10;
  const void *v11;
  void (*v12)(CFTypeRef, _QWORD, _QWORD, _QWORD);
  uint64_t CMBaseObject;
  uint64_t v14;
  void (*v15)(uint64_t);
  void (*v16)(CFTypeRef, _QWORD, _QWORD, _QWORD);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  const void *v20;
  CFTypeRef v21;
  NSObject *v22;
  _QWORD block[5];
  CFTypeRef v24;
  uint64_t v25;
  CFTypeRef v26;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v24 = 0;
  v25 = 0;
  v26 = 0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 112));
  if (*(_BYTE *)(DerivedStorage + 120))
    JUMPOUT(0x1CAA400E4);
  *(_BYTE *)(DerivedStorage + 120) = 1;
  v4 = *(_QWORD *)(DerivedStorage + 128);
  v3 = *(const void **)(DerivedStorage + 136);
  if (v3)
    v5 = CFRetain(v3);
  else
    v5 = 0;
  v6 = *(const void **)(DerivedStorage + 144);
  if (v6)
  {
    v7 = CFRetain(v6);
    v8 = *(const void **)(DerivedStorage + 144);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(DerivedStorage + 144) = 0;
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = *(const void **)(DerivedStorage + 152);
  if (v9)
  {
    v10 = CFRetain(v9);
    v11 = *(const void **)(DerivedStorage + 152);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(DerivedStorage + 152) = 0;
    }
  }
  else
  {
    v10 = 0;
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 112));
  if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 50
    && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v7)
  {
    v12 = *(void (**)(CFTypeRef, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v12)
      v12(v7, 0, 0, 0);
    CMBaseObject = FigTransportStreamGetCMBaseObject();
    if (CMBaseObject)
    {
      v14 = CMBaseObject;
      v15 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v15)
        v15(v14);
    }
  }
  if (v10)
  {
    v16 = *(void (**)(CFTypeRef, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v16)
      v16(v10, 0, 0, 0);
    v17 = FigTransportStreamGetCMBaseObject();
    if (v17)
    {
      v18 = v17;
      v19 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v19)
        v19(v18);
    }
  }
  if (!v4)
    goto LABEL_41;
  if (v5)
  {
    v20 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v20)
    {
      if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 60
        && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
LABEL_41:
      v20 = 0;
      goto LABEL_42;
    }
  }
  else
  {
    v20 = 0;
  }
  v24 = CFRetain(a1);
  v25 = v4;
  if (v20)
    v21 = CFRetain(v20);
  else
    v21 = 0;
  v26 = v21;
  APSDispatchAsyncFHelper();
LABEL_42:
  CFRetain(a1);
  v22 = *(NSObject **)(DerivedStorage + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __apEndpointRemoteControlSession_invalidateInternal_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  block[4] = a1;
  dispatch_async(v22, block);
  if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 50
    && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v5)
    CFRelease(v5);
  if (v20)
    CFRelease(v20);
  if (v7)
    CFRelease(v7);
  if (v10)
    CFRelease(v10);
}

void apEndpointRemoteControlSession_callEventHandlerAboutInvalidation(uint64_t a1)
{
  char v2;
  const void *v3;

  if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 50
    && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  else if (!a1)
  {
    goto LABEL_18;
  }
  if (*(_QWORD *)(a1 + 16))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*(_QWORD *)a1, *MEMORY[0x1E0CA4560], 0);
    v2 = 1;
    goto LABEL_8;
  }
LABEL_18:
  APSLogErrorAt();
  v2 = 0;
LABEL_8:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v3 = *(const void **)(a1 + 16);
  if (v3)
    CFRelease(v3);
  if ((v2 & 1) == 0
    && gLogCategory_APEndpointRemoteControlSessionAirPlay <= 90
    && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void __apEndpointRemoteControlSession_invalidateInternal_block_invoke(uint64_t a1)
{
  _QWORD *DerivedStorage;
  NSObject *v3;
  _QWORD block[7];
  _QWORD v5[4];
  _QWORD v6[4];

  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  if (CMNotificationCenterPostNotification())
  {
    APSLogErrorAt();
    if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 90
      && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x2000000000;
  v6[3] = 0;
  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x2000000000;
  v5[3] = 0;
  v3 = DerivedStorage[20];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __apEndpointRemoteControlSession_logSummaryAndResetCounters_block_invoke;
  block[3] = &unk_1E82692B0;
  block[5] = v5;
  block[6] = DerivedStorage;
  block[4] = v6;
  dispatch_sync(v3, block);
  if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 50
    && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    IsAppleInternalBuild();
    LogPrintF();
  }
  DerivedStorage[11] = 0;
  DerivedStorage[12] = 0;
  _Block_object_dispose(v5, 8);
  _Block_object_dispose(v6, 8);
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

_QWORD *__apEndpointRemoteControlSession_logSummaryAndResetCounters_block_invoke(_QWORD *result)
{
  uint64_t v1;

  v1 = result[6];
  *(_QWORD *)(*(_QWORD *)(result[4] + 8) + 24) = *(_QWORD *)(v1 + 184);
  *(_QWORD *)(*(_QWORD *)(result[5] + 8) + 24) = *(_QWORD *)(v1 + 192);
  *(_QWORD *)(v1 + 184) = 0;
  *(_QWORD *)(v1 + 192) = 0;
  return result;
}

uint64_t apEndpointRemoteControlSession_SendMessage(const void *a1, const void *a2)
{
  __CFDictionary *v2;
  __CFDictionary *v3;
  uint64_t DerivedStorage;
  uint64_t v7;
  __CFDictionary *Mutable;
  __CFDictionary *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = DerivedStorage;
  if (!a2)
  {
    v2 = 0;
    v3 = 0;
    goto LABEL_8;
  }
  if (*(_BYTE *)(DerivedStorage + 10))
  {
    v2 = 0;
    v3 = 0;
    CFRetain(a2);
LABEL_8:
    MEMORY[0x1CAA400CC](*(_QWORD *)(v7 + 112));
    MEMORY[0x1CAA400E4](*(_QWORD *)(v7 + 112));
    goto LABEL_9;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v2 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("data"), a2);
    v9 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v3 = v9;
    if (v9)
    {
      CFDictionarySetValue(v9, CFSTR("params"), v2);
      CFRetain(v3);
      goto LABEL_8;
    }
  }
  else
  {
    CUFatalErrorF();
  }
  APSLogErrorAt();
LABEL_9:
  CFRetain(a1);
  if (a2)
    CFDataGetLength((CFDataRef)a2);
  APSDispatchAsyncFHelper();
  if (v2)
    CFRelease(v2);
  if (v3)
    CFRelease(v3);
  return 0;
}

uint64_t apEndpointRemoteControlSession_SetEventHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *DerivedStorage;
  const void *v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](DerivedStorage[14]);
  v6 = (const void *)DerivedStorage[17];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[17] = 0;
  }
  DerivedStorage[16] = 0;
  if (a2)
  {
    DerivedStorage[16] = a2;
    if (a3)
      DerivedStorage[17] = FigCFWeakReferenceHolderCreateWithReferencedObject();
  }
  MEMORY[0x1CAA400E4](DerivedStorage[14]);
  return 0;
}

uint64_t apEndpointRemoteControlSession_Teardown(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 50
    && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!apEndpointRemoteControlSession_isInvalidated())
  {
    CFRetain(a1);
    v3 = *(NSObject **)(DerivedStorage + 32);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __apEndpointRemoteControlSession_Teardown_block_invoke;
    block[3] = &__block_descriptor_tmp_52_0;
    block[4] = a1;
    dispatch_async(v3, block);
  }
  return 0;
}

uint64_t apEndpointRemoteControlSession_Start(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  uint64_t v4;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 50
    && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 112));
  if (*(_BYTE *)(DerivedStorage + 120))
  {
    APSLogErrorAt();
    v4 = 4294949863;
  }
  else
  {
    CFRetain(a1);
    v3 = *(NSObject **)(DerivedStorage + 160);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __apEndpointRemoteControlSession_Start_block_invoke;
    block[3] = &__block_descriptor_tmp_60_0;
    block[4] = a1;
    dispatch_async(v3, block);
    v4 = 0;
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 112));
  return v4;
}

void apEndpointRemoteControlSession_sendMessageInternal(unsigned int *a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, CFTypeRef, _QWORD);
  CFTypeRef *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  CFTypeRef v12;
  CFTypeRef cf;
  CFTypeRef v14;

  v2 = *((_QWORD *)a1 + 1);
  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = 0;
  cf = 0;
  if (*a1)
  {
    APSLogErrorAt();
    v5 = *a1;
  }
  else
  {
    v4 = apEndpointRemoteControlSession_ensureAndCopyTransportStreams(v2, &cf);
    if ((_DWORD)v4 == -17432)
    {
      if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 30
        && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v5 = 4294949864;
    }
    else
    {
      v5 = v4;
      if ((_DWORD)v4)
      {
        APSLogErrorAt();
      }
      else if (cf)
      {
        ++*(_QWORD *)(DerivedStorage + 184);
        if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= *(_DWORD *)(DerivedStorage + 104)
          && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        *(_QWORD *)(DerivedStorage + 192) += *((_QWORD *)a1 + 4);
        if (*((_BYTE *)a1 + 56))
        {
          if (*(_BYTE *)(DerivedStorage + 10))
            v6 = APTransportStreamSendData();
          else
            v6 = APTransportStreamSendPlistMessage();
        }
        else if (*(_BYTE *)(DerivedStorage + 10))
        {
          v6 = APTransportStreamSendDataCreatingReplyData();
        }
        else
        {
          v6 = APTransportStreamSendPlistMessageCreatingPlistReply();
        }
        v5 = v6;
        if ((_DWORD)v6
          && gLogCategory_APEndpointRemoteControlSessionAirPlay <= 90
          && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      else
      {
        APSLogErrorAt();
        v5 = 4294949863;
      }
    }
  }
  v7 = (void (*)(uint64_t, CFTypeRef, _QWORD))*((_QWORD *)a1 + 5);
  if (v7)
  {
    v8 = &v12;
    if (!*(_BYTE *)(DerivedStorage + 10))
      v8 = &v14;
    v7(v5, *v8, *((_QWORD *)a1 + 6));
  }
  if (cf)
    CFRelease(cf);
  if (v14)
    CFRelease(v14);
  v9 = (const void *)*((_QWORD *)a1 + 1);
  if (v9)
    CFRelease(v9);
  v10 = (const void *)*((_QWORD *)a1 + 2);
  if (v10)
    CFRelease(v10);
  v11 = (const void *)*((_QWORD *)a1 + 3);
  if (v11)
    CFRelease(v11);
  if (v12)
    CFRelease(v12);
}

uint64_t apEndpointRemoteControlSession_isInvalidated()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 112));
  v1 = *(unsigned __int8 *)(DerivedStorage + 120);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 112));
  return v1;
}

void __apEndpointRemoteControlSession_teardownInternal_block_invoke(uint64_t a1)
{
  uint64_t DerivedStorage;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, CFMutableDictionaryRef);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!apEndpointRemoteControlSession_isInvalidated())
  {
    if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 50
      && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v4 = Mutable;
      CFDictionarySetInt64();
      v5 = *(_QWORD *)(DerivedStorage + 16);
      v6 = *(void (**)(uint64_t, uint64_t, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 48);
      if (v6)
        v6(v5, 130, v4);
      CFRelease(v4);
    }
    else
    {
      APSLogErrorAt();
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

uint64_t apEndpointRemoteControlSession_handleMessage(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return apEndpointRemoteControlSession_startMessageHandling(a2, a3, a4, 0);
}

uint64_t apEndpointRemoteControlSession_handleMessageCreatingReply(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return apEndpointRemoteControlSession_startMessageHandling(a2, a3, a4, a5);
}

uint64_t apEndpointRemoteControlSession_startMessageHandling(int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  const void *v6;
  uint64_t DerivedStorage;
  const void *v8;
  uint64_t v9;
  uint64_t CFDataWithBlockBufferNoCopy;

  if (a1 != 1668116068)
    return 0;
  v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5)
    return 0;
  v6 = (const void *)v5;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 112));
  if (*(_BYTE *)(DerivedStorage + 120))
  {
    v8 = 0;
    v9 = 4294949863;
    goto LABEL_16;
  }
  CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
  if (!(_DWORD)CFDataWithBlockBufferNoCopy)
  {
    if (*(_QWORD *)(DerivedStorage + 136))
    {
      v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      if (!v8)
      {
        if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= 60
          && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v9 = 0;
        goto LABEL_23;
      }
    }
    else
    {
      v8 = 0;
    }
    CFRetain(v6);
    if (v8)
      CFRetain(v8);
    APSDispatchAsyncFHelper();
    v9 = 0;
    if (a4)
      *a4 = 0;
    goto LABEL_16;
  }
  v9 = CFDataWithBlockBufferNoCopy;
  APSLogErrorAt();
LABEL_23:
  v8 = 0;
LABEL_16:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 112));
  CFRelease(v6);
  if (v8)
    CFRelease(v8);
  return v9;
}

void apEndpointRemoteControlSession_handleMessageInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFDictionary *v4;
  const __CFData *v5;
  const void *v6;
  const __CFDictionary *Value;
  const void *v8;
  const void *v9;
  const void *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(a1 + 8))
  {
    APSLogErrorAt();
    v5 = 0;
    v4 = 0;
    goto LABEL_21;
  }
  v3 = DerivedStorage;
  if (apEndpointRemoteControlSession_isInvalidated())
  {
    if (gLogCategory_APEndpointRemoteControlSessionAirPlay > 60
      || gLogCategory_APEndpointRemoteControlSessionAirPlay == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_20;
    }
LABEL_9:
    LogPrintF();
LABEL_20:
    v5 = 0;
    v4 = 0;
    goto LABEL_21;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    if (gLogCategory_APEndpointRemoteControlSessionAirPlay > 90
      || gLogCategory_APEndpointRemoteControlSessionAirPlay == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_20;
    }
    goto LABEL_9;
  }
  CFDataGetLength(*(CFDataRef *)(a1 + 8));
  CFDataGetBytePtr(*(CFDataRef *)(a1 + 8));
  if (!*(_BYTE *)(v3 + 10))
  {
    CFDictionaryGetTypeID();
    v4 = (const __CFDictionary *)CFCreateWithPlistBytes();
    Value = (const __CFDictionary *)CFDictionaryGetValue(v4, CFSTR("params"));
    if (!Value || (v8 = CFDictionaryGetValue(Value, CFSTR("data"))) == 0)
    {
      APSLogErrorAt();
      v5 = 0;
      goto LABEL_21;
    }
    v6 = v8;
    goto LABEL_13;
  }
  v4 = 0;
  v5 = 0;
  v6 = *(const void **)(a1 + 8);
  if (v6)
  {
LABEL_13:
    CFRetain(v6);
    v5 = (const __CFData *)v6;
  }
  ++*(_QWORD *)(v3 + 88);
  if (gLogCategory_APEndpointRemoteControlSessionAirPlay <= *(_DWORD *)(v3 + 104)
    && (gLogCategory_APEndpointRemoteControlSessionAirPlay != -1 || _LogCategory_Initialize()))
  {
    CFDataGetLength(v5);
    LogPrintF();
  }
  *(_QWORD *)(v3 + 96) += CFDataGetLength(v5);
  (*(void (**)(_QWORD, _QWORD, const __CFData *, _QWORD))(a1 + 16))(*(_QWORD *)a1, *MEMORY[0x1E0CA4558], v5, *(_QWORD *)(a1 + 24));
LABEL_21:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v9 = *(const void **)(a1 + 8);
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(a1 + 24);
  if (v10)
    CFRelease(v10);
  if (v4)
    CFRelease(v4);
  if (v5)
    CFRelease(v5);
}

uint64_t APVirtualDisplayTestSinkCreate(int a1, const void *a2, const void *a3, CFTypeRef *a4)
{
  const __CFAllocator *v8;
  uint64_t v9;
  uint64_t DerivedStorage;
  const void *v11;
  const void *v12;
  CFURLRef v13;
  CFURLRef v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, CMTime *);
  uint64_t v19;
  const CFDictionaryKeyCallBacks *v20;
  const CFDictionaryValueCallBacks *v21;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v23;
  uint64_t v24;
  uint64_t value_low;
  void (*v26)(uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CMTime v31;
  CFTypeRef cf;

  cf = 0;
  if ((a1 - 4) <= 0xFFFFFFFC)
  {
    APSLogErrorAt();
    return 4294954516;
  }
  if (a2 && a3 && a4)
  {
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    FigVirtualDisplaySinkGetClassID();
    v9 = CMDerivedObjectCreate();
    if ((_DWORD)v9)
    {
      v29 = v9;
      APSLogErrorAt();
      goto LABEL_26;
    }
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)DerivedStorage = a1;
    *(_DWORD *)(DerivedStorage + 4) = 0;
    CMTimeMake(&v31, 2, 30);
    *(CMTime *)(DerivedStorage + 32) = v31;
    *(_QWORD *)(DerivedStorage + 8) = CFRetain(a2);
    *(_QWORD *)(DerivedStorage + 16) = CFRetain(a3);
    *(_QWORD *)(DerivedStorage + 120) = SecondsToUpTicks();
    *(_QWORD *)(DerivedStorage + 280) = -1;
    if (*(_DWORD *)DerivedStorage != 2)
    {
      v29 = 0;
      *a4 = cf;
      return v29;
    }
    CFStringGetTypeID();
    v11 = (const void *)CFPrefs_CopyTypedValue();
    if (v11)
    {
      v12 = v11;
      LODWORD(v31.value) = 0;
      *(_QWORD *)(DerivedStorage + 160) = CFRetain(v11);
      *(_QWORD *)(DerivedStorage + 144) = dispatch_queue_create("FigVirtualDisplayTestSinkQueue", 0);
      *(_QWORD *)(DerivedStorage + 152) = dispatch_semaphore_create(0);
      v13 = CFURLCreateWithFileSystemPath(v8, *(CFStringRef *)(DerivedStorage + 160), kCFURLPOSIXPathStyle, 0);
      if (!v13)
      {
        APSLogErrorAt();
        v29 = 4294954510;
        goto LABEL_24;
      }
      v14 = v13;
      CFRunLoopGetCurrent();
      v15 = (uint64_t *)(DerivedStorage + 168);
      v16 = FigAssetReaderCreateWithURLAndFormatReader();
      if ((_DWORD)v16)
      {
        v29 = v16;
      }
      else
      {
        v17 = *v15;
        v18 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v18)
        {
          v19 = v18(v17, &v31);
          if (!(_DWORD)v19)
          {
            if (LODWORD(v31.value))
            {
              v20 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
              v21 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
              Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC3B00], (const void *)*MEMORY[0x1E0CC3B20]);
              v23 = CFDictionaryCreateMutable(v8, 0, v20, v21);
              FigCFDictionarySetInt32();
              FigCFDictionarySetInt32();
              FigCFDictionarySetInt32();
              v24 = *v15;
              value_low = LODWORD(v31.value);
              v26 = *(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 24);
              if (v26)
                v26(v24, value_low, 0, DerivedStorage + 176);
              v27 = MEMORY[0x1E0CA2E68];
              *(_OWORD *)(DerivedStorage + 180) = *MEMORY[0x1E0CA2E68];
              *(_QWORD *)(DerivedStorage + 196) = *(_QWORD *)(v27 + 16);
              v28 = MEMORY[0x1E0CA2E30];
              *(_OWORD *)(DerivedStorage + 204) = *MEMORY[0x1E0CA2E30];
              *(_QWORD *)(DerivedStorage + 220) = *(_QWORD *)(v28 + 16);
              if (v23)
                CFRelease(v23);
              if (Mutable)
                CFRelease(Mutable);
              CFRelease(v14);
              goto LABEL_20;
            }
            APSLogErrorAt();
            v29 = FigSignalErrorAt();
            CFRelease(v14);
            if (!(_DWORD)v29)
            {
LABEL_20:
              v29 = 0;
              *a4 = cf;
              cf = 0;
LABEL_25:
              CFRelease(v12);
              goto LABEL_26;
            }
LABEL_24:
            APSLogErrorAt();
            goto LABEL_25;
          }
          v29 = v19;
        }
        else
        {
          v29 = 4294954514;
        }
      }
      APSLogErrorAt();
      CFRelease(v14);
      goto LABEL_24;
    }
  }
  APSLogErrorAt();
  v29 = 4294954516;
LABEL_26:
  if (cf)
    CFRelease(cf);
  return v29;
}

void vdsink_Finalize()
{
  _QWORD *DerivedStorage;
  NSObject *v1;
  NSObject *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  NSObject *v14;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  vdsink_networkStop();
  v1 = DerivedStorage[19];
  if (v1)
    dispatch_release(v1);
  v2 = DerivedStorage[18];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)DerivedStorage[20];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[20] = 0;
  }
  v4 = (const void *)DerivedStorage[21];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[21] = 0;
  }
  v5 = (const void *)DerivedStorage[30];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[30] = 0;
  }
  v6 = (const void *)DerivedStorage[31];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[31] = 0;
  }
  v7 = (const void *)DerivedStorage[32];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[32] = 0;
  }
  v8 = (const void *)DerivedStorage[1];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[1] = 0;
  }
  v9 = (const void *)DerivedStorage[2];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[2] = 0;
  }
  v10 = (const void *)DerivedStorage[12];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[12] = 0;
  }
  v11 = (const void *)DerivedStorage[13];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[13] = 0;
  }
  v12 = (const void *)DerivedStorage[14];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[14] = 0;
  }
  v13 = (const void *)DerivedStorage[11];
  if (v13)
  {
    _Block_release(v13);
    DerivedStorage[11] = 0;
  }
  v14 = DerivedStorage[3];
  if (v14)
  {
    dispatch_release(v14);
    DerivedStorage[3] = 0;
  }
  if (gLogCategory_APVirtualDisplayTestSink <= 30
    && (gLogCategory_APVirtualDisplayTestSink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

CFStringRef vdsink_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APVirtualDisplayTestSink %p]"), a1);
}

uint64_t vdsink_CopyProperty(int a1, CFTypeRef cf1, uint64_t a3, _QWORD *a4)
{
  CFTypeRef v6;
  uint64_t result;

  if (gLogCategory_APVirtualDisplayTestSink <= 30
    && (gLogCategory_APVirtualDisplayTestSink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0CC6740]))
    return 4294954512;
  v6 = CFRetain(CFSTR("AirPlay"));
  result = 0;
  *a4 = v6;
  return result;
}

uint64_t vdsink_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t *DerivedStorage;
  int v6;
  const void *v7;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v6 = gLogCategory_APVirtualDisplayTestSink;
  if (gLogCategory_APVirtualDisplayTestSink <= 30)
  {
    if (gLogCategory_APVirtualDisplayTestSink == -1)
    {
      if (!_LogCategory_Initialize())
        goto LABEL_13;
      v6 = gLogCategory_APVirtualDisplayTestSink;
    }
    if (v6 <= 20)
    {
      if (v6 != -1
        || (_LogCategory_Initialize(),
            v6 = gLogCategory_APVirtualDisplayTestSink,
            gLogCategory_APVirtualDisplayTestSink <= 20))
      {
        if (v6 == -1)
          _LogCategory_Initialize();
      }
    }
    LogPrintF();
  }
LABEL_13:
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC6710]))
  {
    v7 = (const void *)DerivedStorage[14];
    DerivedStorage[14] = (uint64_t)a3;
    if (!a3)
      goto LABEL_16;
    goto LABEL_15;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC6738]))
  {
    v7 = (const void *)DerivedStorage[12];
    DerivedStorage[12] = (uint64_t)a3;
    if (!a3)
      goto LABEL_16;
    goto LABEL_15;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC6728]))
  {
    v7 = (const void *)DerivedStorage[13];
    DerivedStorage[13] = (uint64_t)a3;
    if (!a3)
    {
LABEL_16:
      if (v7)
        CFRelease(v7);
      return 0;
    }
LABEL_15:
    CFRetain(a3);
    goto LABEL_16;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC66E8]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC6730]))
    return 0;
  return FigEndpointStreamSetProperty(DerivedStorage[1], (uint64_t)a2, (uint64_t)a3);
}

uint64_t vdsink_networkStop()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  int v2;
  int v3;
  const void *v4;
  int v5;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  if (*(_QWORD *)(DerivedStorage + 272))
  {
    v2 = *(_DWORD *)(DerivedStorage + 280);
    if ((v2 & 0x80000000) == 0)
    {
      if (close(v2) && *__error())
        __error();
      *(_DWORD *)(v1 + 280) = -1;
    }
    SendSelfConnectedLoopbackMessage();
    v3 = pthread_join(*(pthread_t *)(v1 + 264), 0);
    *(_QWORD *)(v1 + 272) = 0;
  }
  else
  {
    v3 = 0;
  }
  v4 = *(const void **)(v1 + 320);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(v1 + 320) = 0;
  }
  v5 = *(_DWORD *)(v1 + 280);
  if ((v5 & 0x80000000) == 0)
  {
    if (close(v5) && *__error())
      __error();
    *(_DWORD *)(v1 + 280) = -1;
  }
  result = *(unsigned int *)(v1 + 284);
  if ((result & 0x80000000) == 0)
  {
    result = close(result);
    if ((_DWORD)result)
    {
      result = (uint64_t)__error();
      if (*(_DWORD *)result)
        result = (uint64_t)__error();
    }
    *(_DWORD *)(v1 + 284) = -1;
  }
  if (v3)
  {
    if (gLogCategory_APVirtualDisplayTestSink <= 60)
    {
      if (gLogCategory_APVirtualDisplayTestSink != -1)
        return LogPrintF();
      result = _LogCategory_Initialize();
      if ((_DWORD)result)
        return LogPrintF();
    }
  }
  return result;
}

uint64_t FigEndpointStreamSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  CMBaseObject = FigEndpointStreamGetCMBaseObject();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(CMBaseObject, a2, a3);
  else
    return 4294954514;
}

uint64_t vdsink_Start(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  NSObject *v6;
  _QWORD block[5];
  int v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APVirtualDisplayTestSink <= 30
    && (gLogCategory_APVirtualDisplayTestSink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_DWORD *)(DerivedStorage + 4))
  {
    APSLogErrorAt();
    v5 = 4294954516;
    if (!a3)
      return v5;
    goto LABEL_7;
  }
  v5 = 0;
  *(_DWORD *)(DerivedStorage + 4) = 2;
  if (a3)
  {
LABEL_7:
    v6 = *(NSObject **)(DerivedStorage + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __vdsink_Start_block_invoke;
    block[3] = &unk_1E8269408;
    block[4] = a3;
    v9 = v5;
    dispatch_async(v6, block);
  }
  return v5;
}

uint64_t vdsink_Stop(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  NSObject *v5;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APVirtualDisplayTestSink <= 30
    && (gLogCategory_APVirtualDisplayTestSink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_DWORD *)(DerivedStorage + 4) != 2)
  {
    APSLogErrorAt();
    v4 = 4294954516;
    if (!a2)
      return v4;
    goto LABEL_12;
  }
  *(_DWORD *)(DerivedStorage + 4) = 0;
  if (*(_DWORD *)DerivedStorage == 3)
  {
    vdsink_networkStop();
  }
  else
  {
    v4 = 0;
    if (*(_DWORD *)DerivedStorage != 2)
      goto LABEL_11;
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(DerivedStorage + 152), 0xFFFFFFFFFFFFFFFFLL);
  }
  v4 = 0;
LABEL_11:
  if (a2)
  {
LABEL_12:
    v5 = *(NSObject **)(DerivedStorage + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __vdsink_Stop_block_invoke;
    block[3] = &unk_1E8269430;
    block[4] = a2;
    dispatch_async(v5, block);
  }
  return v4;
}

uint64_t vdsink_PushFrame(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, uint64_t a9, void *a10, int a11)
{
  uint64_t DerivedStorage;
  double v21;
  double v22;
  double v23;
  double v24;
  double v26;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v28;
  const __CFAllocator *v29;
  CFNumberRef v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  const __CFArray *SampleAttachmentsArray;
  const __CFArray *v40;
  CFIndex Count;
  CFIndex v42;
  CFIndex v43;
  __CFArray *Mutable;
  const void *v45;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const void *v48;
  __CFDictionary *v49;
  NSObject *v50;
  const __CFNumber *v52;
  const __CFDictionary *v53;
  int valuePtr;
  _QWORD block[7];
  CGRect v56;
  CGRect v57;

  valuePtr = a11;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v22 = *(double *)(DerivedStorage + 72);
  v21 = *(double *)(DerivedStorage + 80);
  v24 = *(double *)(DerivedStorage + 56);
  v23 = *(double *)(DerivedStorage + 64);
  if (v22 != v24 || v21 != v23)
  {
    v26 = v24 / v22;
    if (v24 / v22 >= v23 / v21)
      v26 = v23 / v21;
    a7 = a7 * v26;
    a8 = a8 * v26;
    a5 = (v24 - v22 * v26) * 0.5 + a5 * v26;
    a6 = (v23 - v21 * v26) * 0.5 + a6 * v26;
  }
  v56.origin.x = a1;
  v56.origin.y = a2;
  v56.size.width = a3;
  v56.size.height = a4;
  DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v56);
  v57.origin.x = a5;
  v57.origin.y = a6;
  v57.size.width = a7;
  v57.size.height = a8;
  v28 = CGRectCreateDictionaryRepresentation(v57);
  v29 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v30 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  CMSetAttachment(a10, (CFStringRef)*MEMORY[0x1E0CA4E78], DictionaryRepresentation, 0);
  CMSetAttachment(a10, (CFStringRef)*MEMORY[0x1E0CA4E30], v28, 0);
  CMSetAttachment(a10, (CFStringRef)*MEMORY[0x1E0CA4E90], v30, 0);
  v31 = *(const void **)(DerivedStorage + 96);
  if (v31)
  {
    CMSetAttachment(a10, CFSTR("APTimestamps"), v31, 0);
    v32 = *(const void **)(DerivedStorage + 96);
    if (v32)
    {
      CFRelease(v32);
      *(_QWORD *)(DerivedStorage + 96) = 0;
    }
  }
  v33 = *(const void **)(DerivedStorage + 104);
  if (v33)
  {
    CMSetAttachment(a10, CFSTR("APSubmitSurfaceTimestamp"), v33, 0);
    v34 = *(const void **)(DerivedStorage + 104);
    if (v34)
    {
      CFRelease(v34);
      *(_QWORD *)(DerivedStorage + 104) = 0;
    }
  }
  v35 = *(const void **)(DerivedStorage + 112);
  if (v35)
  {
    CMSetAttachment(a10, CFSTR("APInterestingFrame"), v35, 0);
    v36 = *(const void **)(DerivedStorage + 112);
    if (v36)
    {
      CFRelease(v36);
      *(_QWORD *)(DerivedStorage + 112) = 0;
    }
  }
  if (*(_DWORD *)DerivedStorage == 1)
    CMBufferQueueEnqueue(*(CMBufferQueueRef *)(DerivedStorage + 16), a10);
  if (gLogCategory_APVirtualDisplayTestSink <= 10
    && (gLogCategory_APVirtualDisplayTestSink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v37 = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(v37 + 88))
  {
    v38 = v37;
    SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray((CMSampleBufferRef)a10, 0);
    if (SampleAttachmentsArray)
    {
      v40 = SampleAttachmentsArray;
      Count = CFArrayGetCount(SampleAttachmentsArray);
      if (Count >= 1)
      {
        v42 = Count;
        v52 = v30;
        v53 = DictionaryRepresentation;
        v43 = 0;
        Mutable = 0;
        v45 = (const void *)*MEMORY[0x1E0CEDA98];
        do
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v40, v43);
          if (ValueAtIndex)
          {
            Value = CFDictionaryGetValue(ValueAtIndex, v45);
            if (Value)
            {
              v48 = Value;
              if (!Mutable)
                Mutable = CFArrayCreateMutable(v29, 0, MEMORY[0x1E0C9B378]);
              if (gLogCategory_APVirtualDisplayTestSink <= 10
                && (gLogCategory_APVirtualDisplayTestSink != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              CFArrayAppendValue(Mutable, v48);
            }
          }
          ++v43;
        }
        while (v42 != v43);
        DictionaryRepresentation = v53;
        v30 = v52;
        if (Mutable)
        {
          v49 = CFDictionaryCreateMutable(v29, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CFDictionarySetValue(v49, (const void *)*MEMORY[0x1E0CC6698], Mutable);
          v50 = *(NSObject **)(v38 + 24);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 0x40000000;
          block[2] = __vdsink_handleFrameAcknowledgements_block_invoke;
          block[3] = &__block_descriptor_tmp_21_0;
          block[4] = v38;
          block[5] = v49;
          dispatch_async(v50, block);
          CFRelease(Mutable);
        }
      }
    }
  }
  if (DictionaryRepresentation)
    CFRelease(DictionaryRepresentation);
  if (v28)
    CFRelease(v28);
  if (v30)
    CFRelease(v30);
  return 0;
}

uint64_t vdsink_Suspend()
{
  _DWORD *DerivedStorage;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APVirtualDisplayTestSink <= 30
    && (gLogCategory_APVirtualDisplayTestSink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (DerivedStorage[1] == 2)
  {
    DerivedStorage[1] = 1;
    if (*DerivedStorage == 3)
      vdsink_networkStop();
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294954516;
  }
}

uint64_t vdsink_Resume(void *a1)
{
  _DWORD *DerivedStorage;
  NSObject *global_queue;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  sockaddr v15;
  uint64_t v16;
  int v17;
  int v18;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APVirtualDisplayTestSink <= 30
    && (gLogCategory_APVirtualDisplayTestSink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!DerivedStorage[1])
  {
    APSLogErrorAt();
    return 4294954516;
  }
  if (*DerivedStorage != 3)
  {
    if (*DerivedStorage == 2)
    {
      global_queue = dispatch_get_global_queue(2, 0);
      dispatch_async_f(global_queue, DerivedStorage, (dispatch_function_t)vdsink_fileSubmitFrames);
    }
    goto LABEL_50;
  }
  v4 = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(v4 + 272))
  {
    v5 = v4;
    v6 = *(_DWORD *)(v4 + 280);
    if ((v6 & 0x80000000) == 0)
    {
      if (close(v6) && *__error())
        __error();
      *(_DWORD *)(v5 + 280) = -1;
    }
    *(_QWORD *)&v15.sa_len = 0;
    *(_QWORD *)&v15.sa_data[6] = 0;
    v17 = 0;
    v16 = 0;
    v7 = socket(2, 1, 6);
    if (v7 < 0)
    {
      if (*__error())
      {
        v8 = *__error();
        if (!(_DWORD)v8)
          goto LABEL_18;
      }
      else
      {
        v8 = 4294960596;
      }
      APSLogErrorAt();
LABEL_37:
      APSLogErrorAt();
      goto LABEL_38;
    }
LABEL_18:
    v14 = 1;
    setsockopt(v7, 0xFFFF, 4130, &v14, 4u);
    v18 = 1;
    if (!setsockopt(v7, 0xFFFF, 4, &v18, 4u))
      goto LABEL_21;
    if (*__error())
    {
      v8 = *__error();
      if (!(_DWORD)v8)
      {
LABEL_21:
        *(_QWORD *)&v15.sa_len = 0x100007F28230210;
        *(_QWORD *)&v15.sa_data[6] = 0;
        v9 = bind(v7, &v15, 0x10u);
        if ((_DWORD)v9)
        {
          v8 = v9;
        }
        else
        {
          if (!listen(v7, 5))
          {
LABEL_25:
            *(_DWORD *)(v5 + 280) = v7;
            if (gLogCategory_APVirtualDisplayTestSink <= 30
              && (gLogCategory_APVirtualDisplayTestSink != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v10 = *(_DWORD *)(v5 + 284);
            if ((v10 & 0x80000000) == 0)
            {
              if (close(v10) && *__error())
                __error();
              *(_DWORD *)(v5 + 284) = -1;
            }
            v11 = OpenSelfConnectedLoopbackSocket();
            if ((_DWORD)v11)
            {
              v8 = v11;
            }
            else
            {
              v12 = pthread_create((pthread_t *)(v5 + 264), 0, (void *(__cdecl *)(void *))vdsink_networkThread, a1);
              if (!(_DWORD)v12)
              {
                *(_QWORD *)(v5 + 272) = v5 + 264;
LABEL_50:
                v8 = 0;
                DerivedStorage[1] = 2;
                return v8;
              }
              v8 = v12;
            }
            goto LABEL_37;
          }
          if (*__error())
          {
            v8 = *__error();
            if (!(_DWORD)v8)
              goto LABEL_25;
          }
          else
          {
            v8 = 4294960596;
          }
        }
      }
    }
    else
    {
      v8 = 4294960596;
    }
    APSLogErrorAt();
    if ((v7 & 0x80000000) == 0 && close(v7) && *__error())
      __error();
    goto LABEL_37;
  }
  APSLogErrorAt();
  v8 = 4294960577;
LABEL_38:
  if (gLogCategory_APVirtualDisplayTestSink <= 60
    && (gLogCategory_APVirtualDisplayTestSink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APSLogErrorAt();
  return v8;
}

uint64_t vdsink_GetPropertyAsync(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  const __CFAllocator *v9;
  uint64_t v10;
  const __CFDictionary *v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t CMBaseObject;
  uint64_t (*v19)(uint64_t, const void *, _QWORD, __CFDictionary **);
  uint64_t v20;
  __CFDictionary *MutableCopy;
  int v22;
  CFTypeRef v23;
  NSObject *v24;
  _QWORD block[6];
  int v27;
  CFTypeRef v28;
  __CFDictionary *v29;
  char v30;
  CFTypeRef v31;
  CFTypeRef cf;
  void *value;
  const void *v34;

  v29 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC66F8]))
  {
    CMBaseObject = FigEndpointStreamGetCMBaseObject();
    v19 = *(uint64_t (**)(uint64_t, const void *, _QWORD, __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v19)
    {
      v20 = v19(CMBaseObject, a2, *MEMORY[0x1E0C9AE00], &v29);
      MutableCopy = v29;
    }
    else
    {
      MutableCopy = 0;
      v20 = 4294954514;
    }
    goto LABEL_39;
  }
  v28 = 0;
  v7 = FigEndpointStreamGetCMBaseObject();
  v8 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v8)
  {
    v20 = 4294954514;
LABEL_16:
    APSLogErrorAt();
    MutableCopy = 0;
    goto LABEL_39;
  }
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v10 = v8(v7, *MEMORY[0x1E0CC66F0], *MEMORY[0x1E0C9AE00], &v28);
  if ((_DWORD)v10)
  {
    v20 = v10;
    goto LABEL_16;
  }
  v11 = (const __CFDictionary *)v28;
  v12 = CMBaseObjectGetDerivedStorage();
  v34 = 0;
  cf = 0;
  value = 0;
  v31 = 0;
  v30 = 0;
  if (vdsink_getVirtualDisplaySizeOverrideFromPrefs_sCheckPrefsOnce != -1)
    dispatch_once(&vdsink_getVirtualDisplaySizeOverrideFromPrefs_sCheckPrefsOnce, &__block_literal_global_7);
  v13 = *(double *)&vdsink_getVirtualDisplaySizeOverrideFromPrefs_prefScreenSize_0;
  v14 = *(double *)&vdsink_getVirtualDisplaySizeOverrideFromPrefs_prefScreenSize_1;
  v16 = *MEMORY[0x1E0C9D820];
  v15 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  if ((*(double *)&vdsink_getVirtualDisplaySizeOverrideFromPrefs_prefScreenSize_0 != *MEMORY[0x1E0C9D820]
     || *(double *)&vdsink_getVirtualDisplaySizeOverrideFromPrefs_prefScreenSize_1 != v15)
    && gLogCategory_APVirtualDisplayTestSink <= 50)
  {
    if (gLogCategory_APVirtualDisplayTestSink != -1
      || (v22 = _LogCategory_Initialize(),
          v13 = *(double *)&vdsink_getVirtualDisplaySizeOverrideFromPrefs_prefScreenSize_0,
          v14 = *(double *)&vdsink_getVirtualDisplaySizeOverrideFromPrefs_prefScreenSize_1,
          v22))
    {
      LogPrintF();
      v13 = *(double *)&vdsink_getVirtualDisplaySizeOverrideFromPrefs_prefScreenSize_0;
      v14 = *(double *)&vdsink_getVirtualDisplaySizeOverrideFromPrefs_prefScreenSize_1;
    }
  }
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetCGSizeIfPresent();
  if (v13 == v16 && v14 == v15)
  {
    *(_OWORD *)(v12 + 72) = *(_OWORD *)(v12 + 56);
  }
  else
  {
    *(double *)(v12 + 72) = v13;
    *(double *)(v12 + 80) = v14;
  }
  FigDisplayModes_BuildColorAndTimingModes();
  v23 = cf;
  if (cf)
  {
    if (v31)
    {
      FigDisplayModes_CreateColorAndTimingModesArraysWithPreferredMode();
      MutableCopy = 0;
      if (v34 && value)
      {
        MutableCopy = CFDictionaryCreateMutableCopy(v9, 0, v11);
        CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CC6628], v34);
        CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CC6678], value);
      }
      v23 = cf;
      if (!cf)
        goto LABEL_30;
    }
    else
    {
      MutableCopy = 0;
    }
    CFRelease(v23);
  }
  else
  {
    MutableCopy = 0;
  }
LABEL_30:
  if (v31)
    CFRelease(v31);
  if (v34)
    CFRelease(v34);
  if (value)
    CFRelease(value);
  v29 = MutableCopy;
  if (v28)
    CFRelease(v28);
  v20 = 0;
LABEL_39:
  v24 = *(NSObject **)(DerivedStorage + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __vdsink_GetPropertyAsync_block_invoke;
  block[3] = &unk_1E82694A0;
  v27 = v20;
  block[4] = a4;
  block[5] = MutableCopy;
  dispatch_async(v24, block);
  return v20;
}

uint64_t vdsink_Perform(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  NSObject *v8;
  _QWORD block[5];
  int v11;
  CMSampleTimingInfo sampleTimingArray;
  CMSampleBufferRef v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    APSLogErrorAt();
LABEL_17:
    v7 = 4294954516;
    goto LABEL_18;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC6620]))
  {
    if (gLogCategory_APVirtualDisplayTestSink <= 50
      && (gLogCategory_APVirtualDisplayTestSink != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_17;
  }
  v13 = 0;
  *(_OWORD *)&sampleTimingArray.duration.value = *MEMORY[0x1E0CA2E68];
  sampleTimingArray.duration.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  sampleTimingArray.presentationTimeStamp = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  sampleTimingArray.decodeTimeStamp = sampleTimingArray.presentationTimeStamp;
  v7 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 1u, 0, 0, 0, 0, 1, &sampleTimingArray, 0, 0, &v13);
  if ((_DWORD)v7)
  {
    APSLogErrorAt();
    if (!a4)
      return v7;
    goto LABEL_19;
  }
  CMSetAttachment(v13, CFSTR("APClearScreen"), (CFTypeRef)*MEMORY[0x1E0C9AE50], 0);
  if (*(_DWORD *)DerivedStorage == 1)
    CMBufferQueueEnqueue(*(CMBufferQueueRef *)(DerivedStorage + 16), v13);
  if (gLogCategory_APVirtualDisplayTestSink <= 30
    && (gLogCategory_APVirtualDisplayTestSink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v13)
  {
    CFRelease(v13);
    if (!a4)
      return v7;
    goto LABEL_19;
  }
LABEL_18:
  if (a4)
  {
LABEL_19:
    v8 = *(NSObject **)(DerivedStorage + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __vdsink_Perform_block_invoke;
    block[3] = &unk_1E8269508;
    block[4] = a4;
    v11 = v7;
    dispatch_async(v8, block);
  }
  return v7;
}

uint64_t vdsink_SetDispatchQueue(uint64_t a1, NSObject *a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  NSObject *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(NSObject **)(DerivedStorage + 24);
  if (v4)
    dispatch_release(v4);
  if (a2)
    v5 = a2;
  else
    v5 = MEMORY[0x1E0C80D38];
  *(_QWORD *)(DerivedStorage + 24) = v5;
  dispatch_retain(v5);
  return 0;
}

uint64_t vdsink_SetEventHandler(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    a2 = _Block_copy(a2);
  v4 = *(const void **)(DerivedStorage + 88);
  if (v4)
    _Block_release(v4);
  *(_QWORD *)(DerivedStorage + 88) = a2;
  return 0;
}

uint64_t vdsink_ShouldDropFrame()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  CMTime time2;
  CMTime time1;
  CMTime v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v8, 0, sizeof(v8));
  CMBufferQueueGetDuration(&v8, *(CMBufferQueueRef *)(DerivedStorage + 16));
  time1 = v8;
  time2 = *(CMTime *)(DerivedStorage + 32);
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    v1 = 0;
    v2 = *(_DWORD *)(DerivedStorage + 136);
  }
  else
  {
    if (gLogCategory_APVirtualDisplayTestSink <= 40
      && (gLogCategory_APVirtualDisplayTestSink != -1 || _LogCategory_Initialize()))
    {
      time1 = v8;
      CMTimeGetSeconds(&time1);
      LogPrintF();
    }
    v2 = *(_DWORD *)(DerivedStorage + 136) + 1;
    *(_DWORD *)(DerivedStorage + 136) = v2;
    v1 = 1;
  }
  if (v2 >= 1)
  {
    v3 = mach_absolute_time();
    if (v3 - *(_QWORD *)(DerivedStorage + 128) >= *(_QWORD *)(DerivedStorage + 120))
    {
      v4 = v3;
      if (gLogCategory_APVirtualDisplayTestSink <= 60
        && (gLogCategory_APVirtualDisplayTestSink != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_DWORD *)(DerivedStorage + 136) = 0;
      *(_QWORD *)(DerivedStorage + 128) = v4;
    }
  }
  return v1;
}

void __vdsink_handleFrameAcknowledgements_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) + 16))();
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void vdsink_fileSubmitFrames(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, CMTime *, CMTime *);
  int v4;
  OpaqueCMClock *HostTimeClock;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t *, CFTypeRef *);
  int v10;
  OpaqueCMClock *v11;
  signed int v12;
  NSObject *v13;
  _QWORD block[8];
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime rhs;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  CFTypeRef cf;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  CMTime v31;
  CMTime v32;
  CMTime lhs;

  v27 = 0;
  v28 = &v27;
  v29 = 0x2000000000;
  v30 = 0;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  cf = 0;
  memset(&v21, 0, sizeof(v21));
  memset(&v20, 0, sizeof(v20));
  v2 = *(_QWORD *)(a1 + 168);
  v31 = *(CMTime *)(a1 + 180);
  v19 = *(CMTime *)(a1 + 204);
  v3 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
  if (!v3)
  {
    *((_DWORD *)v28 + 6) = -12782;
    goto LABEL_8;
  }
  lhs = v31;
  v32 = v19;
  v4 = v3(v2, &lhs, &v32);
  *((_DWORD *)v28 + 6) = v4;
  if (v4)
  {
LABEL_8:
    APSLogErrorAt();
    goto LABEL_9;
  }
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v21, HostTimeClock);
  CMTimeMake(&v20, 1, 2);
  if (!*((_BYTE *)v24 + 24))
  {
    while (1)
    {
      memset(&v19, 0, sizeof(v19));
      if (gLogCategory_APVirtualDisplayTestSink <= 30
        && (gLogCategory_APVirtualDisplayTestSink != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v6 = *(_QWORD *)(a1 + 168);
      v7 = *(unsigned int *)(a1 + 176);
      v8 = v24;
      v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 104);
      if (!v9)
        break;
      v10 = v9(v6, v7, 1, v8 + 3, &cf);
      *((_DWORD *)v28 + 6) = v10;
      if (v10)
        goto LABEL_8;
      if (!*((_BYTE *)v24 + 24))
      {
        CMSampleBufferGetPresentationTimeStamp(&rhs, (CMSampleBufferRef)cf);
        lhs = v21;
        CMTimeAdd(&v19, &lhs, &rhs);
        v17 = v19;
        while (1)
        {
          v11 = CMClockGetHostTimeClock();
          CMClockGetTime(&v32, v11);
          v31 = v17;
          CMTimeSubtract(&lhs, &v31, &v32);
          v12 = (int)(CMTimeGetSeconds(&lhs) * 1000000.0);
          if (v12 < 1)
            break;
          usleep(v12);
        }
        v13 = *(NSObject **)(a1 + 144);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = __vdsink_fileSubmitFrames_block_invoke;
        block[3] = &unk_1E8269478;
        block[6] = a1;
        block[7] = cf;
        v15 = v19;
        v16 = v20;
        block[4] = &v27;
        block[5] = &v23;
        dispatch_sync(v13, block);
        if (*((_DWORD *)v28 + 6))
          goto LABEL_8;
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (!*((_BYTE *)v24 + 24))
          continue;
      }
      goto LABEL_4;
    }
    *((_DWORD *)v28 + 6) = -12782;
    goto LABEL_8;
  }
LABEL_4:
  if (gLogCategory_APVirtualDisplayTestSink <= 50
    && (gLogCategory_APVirtualDisplayTestSink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_9:
  if (cf)
    CFRelease(cf);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 152));
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
}

void __vdsink_fileSubmitFrames_block_invoke(uint64_t a1)
{
  uint64_t v2;
  opaqueCMSampleBuffer *v3;
  const opaqueCMFormatDescription *FormatDescription;
  CGFloat width;
  CGFloat height;
  CMTime v7;
  CMTime lhs;
  CMTime v9;
  CGRect v10;
  CGRect v11;

  v2 = *(_QWORD *)(a1 + 48);
  if (*(_DWORD *)(v2 + 4) == 2)
  {
    v3 = *(opaqueCMSampleBuffer **)(a1 + 56);
    lhs = *(CMTime *)(a1 + 64);
    v7 = *(CMTime *)(a1 + 88);
    CMTimeAdd(&v9, &lhs, &v7);
    if (!*(_BYTE *)(v2 + 232))
    {
      LODWORD(lhs.value) = 1;
      FormatDescription = CMSampleBufferGetFormatDescription(v3);
      width = (double)CMVideoFormatDescriptionGetDimensions(FormatDescription).width;
      height = (double)CMVideoFormatDescriptionGetDimensions(FormatDescription).height;
      v10.origin.x = 0.0;
      v10.origin.y = 0.0;
      v10.size.width = width;
      v10.size.height = height;
      *(_QWORD *)(v2 + 240) = CGRectCreateDictionaryRepresentation(v10);
      v11.origin.x = 0.0;
      v11.origin.y = 0.0;
      v11.size.width = width;
      v11.size.height = height;
      *(_QWORD *)(v2 + 248) = CGRectCreateDictionaryRepresentation(v11);
      *(_QWORD *)(v2 + 256) = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &lhs);
      *(_BYTE *)(v2 + 232) = 1;
    }
    CMSetAttachment(v3, (CFStringRef)*MEMORY[0x1E0CA4E78], *(CFTypeRef *)(v2 + 240), 0);
    CMSetAttachment(v3, (CFStringRef)*MEMORY[0x1E0CA4E30], *(CFTypeRef *)(v2 + 248), 0);
    CMSetAttachment(v3, (CFStringRef)*MEMORY[0x1E0CA4E90], *(CFTypeRef *)(v2 + 256), 0);
    if (*(_DWORD *)(v2 + 4) == 2)
      CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v2 + 16), v3);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      ++*(_DWORD *)(*(_QWORD *)(a1 + 48) + 228);
  }
  else
  {
    if (gLogCategory_APVirtualDisplayTestSink <= 50
      && (gLogCategory_APVirtualDisplayTestSink != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
}

uint64_t vdsink_networkThread()
{
  uint64_t DerivedStorage;
  unint64_t v1;
  _DWORD *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  const __CFAllocator *v8;
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  const void *v27;
  const void *v28;
  CGFloat v29;
  CGFloat v30;
  const void *v31;
  int v32;
  int v34;
  int v35;
  const __CFString *v36;
  const __CFString *v37;
  const __CFString *key;
  const __CFAllocator *blockAllocator;
  unsigned int *v40;
  int v41;
  fd_set v42;
  uint64_t v43;
  int v44;
  int valuePtr;
  const void *v46;
  CMSampleTimingInfo sampleTimingArray;
  size_t sampleSizeArray;
  CMSampleBufferRef sampleBufferOut;
  CMBlockBufferRef blockBufferOut;
  CGRect v51;
  CGRect v52;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(int *)(DerivedStorage + 284);
  v44 = -1;
  v43 = 0;
  v2 = &unk_1EF905000;
  if (gLogCategory_APVirtualDisplayTestSink <= 30
    && (gLogCategory_APVirtualDisplayTestSink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  memset(&v42, 0, sizeof(v42));
  pthread_setname_np("APVirtualDisplayTestSink");
  if (!SocketAccept())
  {
    v3 = *(_DWORD *)(DerivedStorage + 280);
    if ((v3 & 0x80000000) == 0)
    {
      if (close(v3) && *__error())
        __error();
      *(_DWORD *)(DerivedStorage + 280) = -1;
    }
    if (!NetSocket_CreateWithNative())
    {
      v4 = v44;
      if (v44 <= (int)v1)
        v5 = v1;
      else
        v5 = v44;
      if (v5 < 0)
        v5 = -1;
      v6 = v5 + 1;
      memset(&v42, 0, sizeof(v42));
      v41 = 1 << v1;
      v7 = v1 >> 5;
      v40 = (unsigned int *)(DerivedStorage + 288);
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      blockAllocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE10];
      v37 = (const __CFString *)*MEMORY[0x1E0CA4E30];
      key = (const __CFString *)*MEMORY[0x1E0CA4E78];
      v36 = (const __CFString *)*MEMORY[0x1E0CA4E90];
      while (1)
      {
        if (__darwin_check_fd_set_overflow(v4, &v42, 0))
          *(__int32_t *)((char *)v42.fds_bits + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v4;
        if (__darwin_check_fd_set_overflow(v1, &v42, 0))
          v42.fds_bits[v7] |= v41;
        v9 = select(v6, &v42, 0, 0, 0);
        if (v9 <= 0 && (!v9 || !*__error() || *__error()))
          goto LABEL_80;
        v10 = v44;
        if (!__darwin_check_fd_set_overflow(v44, &v42, 0)
          || ((*(unsigned int *)((char *)v42.fds_bits + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v10) & 1) == 0)
        {
          goto LABEL_70;
        }
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *, _QWORD, _QWORD, uint64_t))(v43 + 24))(v43, 32, 32, v40, 0, 0, 0xFFFFFFFFLL))
        {
          goto LABEL_81;
        }
        v11 = *v40;
        if ((_DWORD)v11)
        {
          v12 = (char *)malloc_type_malloc(*v40, 0xFDC179ADuLL);
          if (!v12)
            goto LABEL_72;
          v13 = v12;
          v35 = v6;
          v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, _QWORD, _QWORD, uint64_t))(v43 + 24))(v43, v11, v11, v12, 0, 0, 0xFFFFFFFFLL);
          if (v14)
          {
            v34 = v14;
            free(v13);
            if (v34 == -6753)
              goto LABEL_81;
            goto LABEL_80;
          }
        }
        else
        {
          v35 = v6;
          v13 = 0;
        }
        v15 = v2[442];
        if (v15 <= 30 && (v15 != -1 || _LogCategory_Initialize()))
          LogPrintF();
        v16 = CMBaseObjectGetDerivedStorage();
        sampleBufferOut = 0;
        blockBufferOut = 0;
        memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
        v17 = *v40;
        sampleSizeArray = v17;
        if (!(_DWORD)v17)
          goto LABEL_76;
        v18 = v16;
        if (!*(_BYTE *)(DerivedStorage + 292))
          break;
        if (*(_BYTE *)(DerivedStorage + 292) == 1)
        {
          v19 = *(unsigned __int8 *)(DerivedStorage + 294) + 8 * *(unsigned __int8 *)(DerivedStorage + 293);
          v46 = 0;
          if (gLogCategory_APVirtualDisplayTestSink <= 40
            && (gLogCategory_APVirtualDisplayTestSink != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          if (!FigVideoFormatDescriptionCreateWithSampleDescriptionExtensionAtom())
          {
            v27 = *(const void **)(v18 + 320);
            v28 = v46;
            *(_QWORD *)(v18 + 320) = v46;
            if (v28)
              CFRetain(v28);
            if (v27)
              CFRelease(v27);
            v17 -= v19;
            sampleSizeArray = v17;
            LOWORD(v22) = *(_WORD *)(DerivedStorage + 308);
            v51.origin.x = (double)v22;
            LOWORD(v23) = *(_WORD *)(DerivedStorage + 310);
            v51.origin.y = (double)v23;
            LOWORD(v24) = *(_WORD *)(DerivedStorage + 312);
            v51.size.width = (double)v24;
            LOWORD(v25) = *(_WORD *)(DerivedStorage + 314);
            v51.size.height = (double)v25;
            LOWORD(v26) = *(_WORD *)(DerivedStorage + 304);
            v29 = (double)v26;
            LOWORD(v26) = *(_WORD *)(DerivedStorage + 306);
            v30 = (double)v26;
            valuePtr = 1;
            *(_QWORD *)(v18 + 240) = CGRectCreateDictionaryRepresentation(v51);
            v52.origin.x = 0.0;
            v52.origin.y = 0.0;
            v52.size.width = v29;
            v52.size.height = v30;
            *(_QWORD *)(v18 + 248) = CGRectCreateDictionaryRepresentation(v52);
            v31 = *(const void **)(v18 + 256);
            if (v31)
              CFRelease(v31);
            v20 = &v13[v19];
            *(_QWORD *)(v18 + 256) = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
            *(_BYTE *)(v18 + 232) = 1;
            goto LABEL_58;
          }
LABEL_76:
          APSLogErrorAt();
          v20 = v13;
LABEL_77:
          v2 = (_DWORD *)&unk_1EF905000;
          if (!v20)
            goto LABEL_66;
LABEL_65:
          free(v13);
          goto LABEL_66;
        }
        v2 = &unk_1EF905000;
        v21 = v13;
        if (gLogCategory_APVirtualDisplayTestSink <= 90)
        {
          if (gLogCategory_APVirtualDisplayTestSink != -1 || (v21 = v13, _LogCategory_Initialize()))
          {
            LogPrintF();
            if (!v13)
              goto LABEL_66;
            goto LABEL_65;
          }
        }
        if (v21)
          goto LABEL_65;
LABEL_66:
        if (blockBufferOut)
          CFRelease(blockBufferOut);
        v6 = v35;
        if (sampleBufferOut)
          CFRelease(sampleBufferOut);
LABEL_70:
        if (__darwin_check_fd_set_overflow(v1, &v42, 0) && (v42.fds_bits[v7] & v41) != 0)
          goto LABEL_81;
LABEL_72:
        v4 = v44;
      }
      v20 = v13;
LABEL_58:
      if (v17)
      {
        if (!CMBlockBufferCreateWithMemoryBlock(v8, v13, *v40, blockAllocator, 0, v20 - v13, v17, 0, &blockBufferOut))
        {
          *(_OWORD *)&sampleTimingArray.duration.value = *MEMORY[0x1E0CA2E18];
          sampleTimingArray.duration.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          sampleTimingArray.decodeTimeStamp = sampleTimingArray.duration;
          CMClockMakeHostTimeFromSystemUnits(&sampleTimingArray.presentationTimeStamp, *(_QWORD *)(DerivedStorage + 296));
          if (CMSampleBufferCreate(v8, blockBufferOut, 1u, 0, 0, *(CMFormatDescriptionRef *)(v18 + 320), 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &sampleBufferOut))
          {
            APSLogErrorAt();
            v2 = (_DWORD *)&unk_1EF905000;
          }
          else
          {
            CMSetAttachment(sampleBufferOut, key, *(CFTypeRef *)(v18 + 240), 0);
            CMSetAttachment(sampleBufferOut, v37, *(CFTypeRef *)(v18 + 248), 0);
            CMSetAttachment(sampleBufferOut, v36, *(CFTypeRef *)(v18 + 256), 0);
            v2 = (_DWORD *)&unk_1EF905000;
            if (*(_DWORD *)(v18 + 4) == 2)
              CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v18 + 16), sampleBufferOut);
          }
          goto LABEL_66;
        }
        APSLogErrorAt();
      }
      goto LABEL_77;
    }
  }
LABEL_80:
  APSLogErrorAt();
LABEL_81:
  if (v43)
  {
    NetSocket_Delete();
    v43 = 0;
  }
  else if ((v44 & 0x80000000) == 0)
  {
    if (close(v44) && *__error())
      __error();
    v44 = -1;
  }
  v32 = v2[442];
  if (v32 <= 30 && (v32 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  return 0;
}

void __vdsink_getVirtualDisplaySizeOverrideFromPrefs_block_invoke()
{
  const __CFArray *v0;
  const __CFArray *v1;
  CFTypeID v2;
  double IntValue;
  double v4;
  const __CFString *ValueAtIndex;
  const __CFString *v6;
  CFTypeID v7;
  const __CFString *v8;
  const __CFString *v9;
  CFTypeID v10;
  uint64_t v11;
  uint64_t v12;

  v0 = (const __CFArray *)CFPreferencesCopyValue(CFSTR("mirroring_resolution"), CFSTR("com.apple.coremedia"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (v0)
  {
    v1 = v0;
    v2 = CFGetTypeID(v0);
    IntValue = 0.0;
    if (v2 == CFArrayGetTypeID())
    {
      if (gLogCategory_APVirtualDisplayTestSink <= 50
        && (gLogCategory_APVirtualDisplayTestSink != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v4 = 0.0;
      if (CFArrayGetCount(v1) >= 2)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v1, 0);
        if (ValueAtIndex)
        {
          v6 = ValueAtIndex;
          v7 = CFGetTypeID(ValueAtIndex);
          if (v7 == CFStringGetTypeID())
            IntValue = (double)CFStringGetIntValue(v6);
        }
        v8 = (const __CFString *)CFArrayGetValueAtIndex(v1, 1);
        if (v8)
        {
          v9 = v8;
          v10 = CFGetTypeID(v8);
          if (v10 == CFStringGetTypeID())
            v4 = (double)CFStringGetIntValue(v9);
        }
      }
    }
    else
    {
      v4 = 0.0;
    }
    CFRelease(v1);
    if (IntValue > 0.0 && v4 > 0.0)
    {
      if (IntValue <= v4)
        *(double *)&v11 = v4;
      else
        *(double *)&v11 = IntValue;
      vdsink_getVirtualDisplaySizeOverrideFromPrefs_prefScreenSize_0 = v11;
      if (IntValue >= v4)
        *(double *)&v12 = v4;
      else
        *(double *)&v12 = IntValue;
      vdsink_getVirtualDisplaySizeOverrideFromPrefs_prefScreenSize_1 = v12;
    }
  }
}

uint64_t APEndpointStreamBufferedAudioCreate(const __CFAllocator *a1, CFTypeRef cf, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, CFTypeRef *a8)
{
  CFTypeID v16;
  CFTypeID v17;
  CFTypeID v18;
  CFTypeID v19;
  uint64_t DerivedStorage;
  uint64_t v21;
  NSObject *v22;
  dispatch_queue_t v23;
  uint64_t v24;
  dispatch_queue_t v25;
  uint64_t v26;
  const void *Value;
  uint64_t CMBaseObject;
  void (*v29)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *);
  Boolean v30;
  uint64_t UpTimeNanoseconds;
  uint64_t v32;
  const void *v33;
  unsigned int v34;
  CFTypeRef v35;
  const void *v36;
  const void *v37;
  int v39;
  unsigned int v40;
  CFBooleanRef BOOLean;
  CFTypeRef v42;
  unsigned int SupportedAudioFormatList;
  char label[64];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  SupportedAudioFormatList = 0;
  BOOLean = 0;
  v42 = 0;
  if (!cf
    || (v16 = CFGetTypeID(cf), v16 != CFStringGetTypeID())
    || a4 && (v17 = CFGetTypeID(a4), v17 != CFDictionaryGetTypeID())
    || !a5
    || (v18 = CFGetTypeID(a5), v18 != APSenderSessionGetTypeID())
    || !a7
    || (v19 = CFGetTypeID(a7), v19 != APEndpointDescriptionGetTypeID())
    || !a8
    || !a6)
  {
LABEL_69:
    APSLogErrorAt();
    v39 = -16760;
    goto LABEL_70;
  }
  FigEndpointStreamAirPlayGetClassID();
  SupportedAudioFormatList = CMDerivedObjectCreate();
  if (SupportedAudioFormatList)
  {
LABEL_68:
    APSLogErrorAt();
    goto LABEL_53;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 32) = CFRetain(cf);
  SNPrintF();
  *(_QWORD *)(DerivedStorage + 24) = os_transaction_create();
  *(_QWORD *)(DerivedStorage + 88) = CFRetain(a5);
  *(_QWORD *)(DerivedStorage + 80) = CFRetain(a7);
  *(_QWORD *)(DerivedStorage + 72) = CFRetain(a6);
  v21 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 168) = v21;
  if (v21)
  {
    SNPrintF();
    v22 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
    v23 = dispatch_queue_create(label, v22);
    *(_QWORD *)(DerivedStorage + 296) = v23;
    if (v23)
    {
      SNPrintF();
      v24 = FigDispatchQueueCreateWithPriority();
      *(_QWORD *)(DerivedStorage + 304) = v24;
      if (v24)
      {
        SNPrintF();
        v25 = dispatch_queue_create(label, 0);
        *(_QWORD *)(DerivedStorage + 8) = v25;
        if (v25)
        {
          SNPrintF();
          v26 = FigDispatchQueueCreateWithPriority();
          *(_QWORD *)(DerivedStorage + 16) = v26;
          if (v26)
          {
            if (a4)
            {
              Value = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("ClusterInfo"));
              if (Value)
                Value = CFRetain(Value);
              *(_QWORD *)(DerivedStorage + 56) = Value;
              SupportedAudioFormatList = audioStream_createSupportedAudioFormatList((uint64_t)v42, (_QWORD *)(DerivedStorage + 184));
              if (!SupportedAudioFormatList)
              {
                CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 80));
                v29 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
                if (v29)
                  v29(CMBaseObject, CFSTR("SupportsBufferedAPAP"), *MEMORY[0x1E0C9AE00], &BOOLean);
                v30 = BOOLean;
                if (BOOLean)
                  v30 = CFBooleanGetValue(BOOLean);
                *(_BYTE *)(DerivedStorage + 96) = v30;
                UpTimeNanoseconds = FigGetUpTimeNanoseconds();
                *(_QWORD *)(DerivedStorage + 40) = CFStringCreateWithFormat(a1, 0, CFSTR("%@-%llu-airplay"), a3, UpTimeNanoseconds);
                v32 = CMBaseObjectGetDerivedStorage();
                CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("EventRecorder"));
                v33 = *(const void **)(v32 + 160);
                if (v33)
                {
                  CFRelease(v33);
                  *(_QWORD *)(v32 + 160) = 0;
                }
                v34 = APSEventRecorderCreate();
                if (v34)
                {
                  v40 = v34;
                  APSLogErrorAt();
                  SupportedAudioFormatList = v40;
                }
                else
                {
                  SupportedAudioFormatList = 0;
                  if (a3)
                    v35 = CFRetain(a3);
                  else
                    v35 = 0;
                  *(_QWORD *)(DerivedStorage + 48) = v35;
                  *(_QWORD *)(DerivedStorage + 104) = CFRetain((CFTypeRef)*MEMORY[0x1E0CA46C0]);
                  *(_BYTE *)(DerivedStorage + 112) = APSGetFBOPropertyInt64() != 0;
                  if (!SupportedAudioFormatList)
                  {
                    *(_BYTE *)(DerivedStorage + 113) = APSGetFBOPropertyInt64() != 0;
                    if (!SupportedAudioFormatList)
                    {
                      CFDictionaryGetInt64();
                      *(_BYTE *)(DerivedStorage + 115) = APSSettingsGetIntWithDefault();
                      *(_BYTE *)(DerivedStorage + 116) = APSSettingsIsFeatureEnabled();
                      *(_OWORD *)(DerivedStorage + 120) = 0u;
                      *(_OWORD *)(DerivedStorage + 136) = 0u;
                      *(_QWORD *)(DerivedStorage + 152) = 0;
                      *(_QWORD *)(DerivedStorage + 280) = 0;
                      *(_QWORD *)(DerivedStorage + 288) = 0;
                      if (APSIsEndpointClusteringEnabled() && APSGetFBOPropertyInt64())
                        APSIsFBOPropertyNonNull();
                      if (APSSettingsGetIntWithDefault())
                      {
                        if (gLogCategory_APEndpointStreamBufferedAudio <= 50
                          && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
                        {
                          LogPrintF();
                        }
                        *(_BYTE *)(DerivedStorage + 114) = 1;
                        v36 = *(const void **)(DerivedStorage + 184);
                        v37 = (const void *)APSAudioFormatDescriptionListGetForBufferedSender();
                        *(_QWORD *)(DerivedStorage + 184) = v37;
                        if (v37)
                          CFRetain(v37);
                        if (v36)
                          CFRelease(v36);
                      }
                      APSAudioFormatDescriptionListCopyDebugString();
                      if (gLogCategory_APEndpointStreamBufferedAudio <= 50
                        && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
                      {
                        LogPrintF();
                      }
                      if (APSSettingsIsFeatureEnabled())
                      {
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                      }
                      SupportedAudioFormatList = APCarPlayAnalyticsCreate((uint64_t)a1, (uint64_t *)(DerivedStorage + 320));
                      if (!SupportedAudioFormatList)
                      {
                        *a8 = v42;
                        v42 = 0;
                        goto LABEL_53;
                      }
                    }
                  }
                }
              }
              goto LABEL_68;
            }
            goto LABEL_69;
          }
        }
      }
    }
  }
  APSLogErrorAt();
  v39 = -16761;
LABEL_70:
  SupportedAudioFormatList = v39;
LABEL_53:
  if (BOOLean)
    CFRelease(BOOLean);
  if (v42)
    CFRelease(v42);
  return SupportedAudioFormatList;
}

uint64_t audioStream_createSupportedAudioFormatList(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v13;
  uint64_t v14;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 80));
  v5 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v5)
  {
    v10 = 4294954514;
    goto LABEL_16;
  }
  v6 = *MEMORY[0x1E0C9AE00];
  v7 = v5(CMBaseObject, CFSTR("SupportedAudioFormatsExtended"), *MEMORY[0x1E0C9AE00], &cf);
  if ((_DWORD)v7 != -12784 && (_DWORD)v7 != 0)
  {
    v10 = v7;
LABEL_16:
    APSLogErrorAt();
    goto LABEL_22;
  }
  if (cf)
  {
    if (FigCFDictionaryGetValue())
    {
      v9 = APSAudioFormatDescriptionListCreateWithAdvertisementArray();
      if ((_DWORD)v9)
      {
        v10 = v9;
        goto LABEL_16;
      }
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
  }
  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v11 = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 80));
  v12 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v12)
  {
    v10 = 4294954514;
    goto LABEL_16;
  }
  v13 = v12(v11, CFSTR("SupportedAudioFormats"), v6, &cf);
  if ((_DWORD)v13)
  {
    v10 = v13;
    goto LABEL_16;
  }
  FigCFDictionaryGetValue();
  FigCFNumberGetUInt64();
  v14 = APSAudioFormatDescriptionListCreateWithLegacyAudioFormatMask();
  if ((_DWORD)v14)
  {
    v10 = v14;
    goto LABEL_16;
  }
  v10 = 0;
  *a2 = 0;
LABEL_22:
  if (cf)
    CFRelease(cf);
  return v10;
}

void audioStream_handleEndpointDescriptionChanged(uint64_t a1, uint64_t a2)
{
  _BYTE *DerivedStorage;
  _BYTE *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v7 = 0;
  if (!*DerivedStorage)
  {
    v4 = DerivedStorage;
    if (!DerivedStorage[114])
    {
      if (audioStream_createSupportedAudioFormatList(a2, &v7))
      {
        APSLogErrorAt();
        v5 = v7;
        if (!v7)
          return;
        goto LABEL_19;
      }
      MEMORY[0x1CAA400CC](*((_QWORD *)v4 + 21));
      v5 = v7;
      if (!FigCFEqual())
      {
        APSAudioFormatDescriptionListCopyDebugString();
        if (gLogCategory_APEndpointStreamBufferedAudio <= 50
          && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        APSAudioFormatDescriptionListCopyDebugString();
        if (gLogCategory_APEndpointStreamBufferedAudio <= 50
          && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v6 = (const void *)*((_QWORD *)v4 + 23);
        *((_QWORD *)v4 + 23) = v5;
        if (v5)
          CFRetain(v5);
        if (v6)
          CFRelease(v6);
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
      }
      MEMORY[0x1CAA400E4](*((_QWORD *)v4 + 21));
      if (v5)
LABEL_19:
        CFRelease(v5);
    }
  }
}

uint64_t audioStream_Finalize()
{
  _QWORD *DerivedStorage;
  NSObject *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  void *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  const void *v22;
  const void *v23;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (APSSettingsIsFeatureEnabled())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  v1 = DerivedStorage[1];
  if (v1)
  {
    dispatch_release(v1);
    DerivedStorage[1] = 0;
  }
  if (DerivedStorage[15])
    FigPKDStopAirPlaySenderSession();
  v2 = (const void *)DerivedStorage[16];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[16] = 0;
  }
  v3 = (const void *)DerivedStorage[17];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[17] = 0;
  }
  v4 = (const void *)DerivedStorage[18];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[18] = 0;
  }
  v5 = (const void *)DerivedStorage[19];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[19] = 0;
  }
  audioStream_dissociateInternal();
  v6 = (const void *)DerivedStorage[20];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[20] = 0;
  }
  v7 = (const void *)DerivedStorage[39];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[39] = 0;
  }
  v8 = (const void *)DerivedStorage[40];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[40] = 0;
  }
  v9 = (const void *)DerivedStorage[11];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[11] = 0;
  }
  v10 = (const void *)DerivedStorage[10];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[10] = 0;
  }
  v11 = (const void *)DerivedStorage[23];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[23] = 0;
  }
  v12 = (const void *)DerivedStorage[13];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[13] = 0;
  }
  v13 = (const void *)DerivedStorage[9];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[9] = 0;
  }
  v14 = (const void *)DerivedStorage[4];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[4] = 0;
  }
  v15 = (const void *)DerivedStorage[5];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[5] = 0;
  }
  v16 = (const void *)DerivedStorage[6];
  if (v16)
  {
    CFRelease(v16);
    DerivedStorage[6] = 0;
  }
  v17 = (const void *)DerivedStorage[7];
  if (v17)
  {
    CFRelease(v17);
    DerivedStorage[7] = 0;
  }
  v18 = (void *)DerivedStorage[3];
  if (v18)
  {
    os_release(v18);
    DerivedStorage[3] = 0;
  }
  v19 = DerivedStorage[2];
  if (v19)
  {
    dispatch_release(v19);
    DerivedStorage[2] = 0;
  }
  v20 = DerivedStorage[37];
  if (v20)
  {
    dispatch_release(v20);
    DerivedStorage[37] = 0;
  }
  v21 = DerivedStorage[38];
  if (v21)
  {
    dispatch_release(v21);
    DerivedStorage[38] = 0;
  }
  v22 = (const void *)DerivedStorage[35];
  if (v22)
  {
    CFRelease(v22);
    DerivedStorage[35] = 0;
  }
  v23 = (const void *)DerivedStorage[27];
  if (v23)
  {
    CFRelease(v23);
    DerivedStorage[27] = 0;
  }
  return FigSimpleMutexDestroy();
}

__CFString *audioStream_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APEndpointStreamBufferedAudio %p '%@'>"), a1, *(_QWORD *)(DerivedStorage + 32));
  return Mutable;
}

uint64_t audioStream_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  const void *v9;
  CFTypeRef v10;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, _QWORD, _QWORD, CFDictionaryRef *);
  uint64_t SupportedPCMFormatArray;
  const void **v14;
  int v15;
  const void *StringValue;
  uint64_t Int64;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  __CFString **v23;
  uint64_t v24;
  CFNumberRef v25;
  uint64_t IntersectionList;
  uint64_t v27;
  uint64_t FigEndpointStreamAudioFormatDescriptionArray;
  uint64_t v29;
  CFTypeRef v30;
  const __CFAllocator *v31;
  CFDictionaryRef v32;
  CFArrayRef v33;
  uint64_t v34;
  __CFString **v35;
  const void **v36;
  uint64_t v37;
  const __CFDictionary *v38;
  const void *Empty;
  uint64_t valuePtr;
  CFTypeRef v41;
  CFTypeRef v42;
  CFTypeRef cf;
  void *v44;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v42 = 0;
  cf = 0;
  v41 = 0;
  if (gLogCategory_APEndpointStreamBufferedAudio <= 30
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage && !FigCFEqual() && !FigCFEqual())
  {
    APSLogErrorAt();
    v10 = 0;
    SupportedPCMFormatArray = 4294950534;
    goto LABEL_30;
  }
  if (!a4)
  {
    APSLogErrorAt();
    v10 = 0;
    SupportedPCMFormatArray = 4294950536;
    goto LABEL_30;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CF7388]))
  {
    if (CFEqual(a2, CFSTR("IsTimelineEstablished")))
    {
      v14 = (const void **)MEMORY[0x1E0C9AE50];
      v15 = *(unsigned __int8 *)(DerivedStorage + 224);
      goto LABEL_18;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4820]))
    {
      v14 = (const void **)MEMORY[0x1E0CA4888];
LABEL_27:
      StringValue = *v14;
LABEL_28:
      StringValue = CFRetain(StringValue);
LABEL_29:
      SupportedPCMFormatArray = 0;
      v10 = 0;
      *a4 = (CFDictionaryRef)StringValue;
      goto LABEL_30;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4790]))
    {
      v14 = (const void **)MEMORY[0x1E0C9AE50];
      v15 = *(unsigned __int8 *)(DerivedStorage + 208);
      goto LABEL_18;
    }
    if (CFEqual(a2, CFSTR("IsPlaying")))
    {
      v14 = (const void **)MEMORY[0x1E0C9AE50];
      v15 = *(unsigned __int8 *)(DerivedStorage + 209);
      goto LABEL_18;
    }
    if (CFEqual(a2, CFSTR("IsLocalStream")))
    {
LABEL_44:
      v14 = (const void **)MEMORY[0x1E0C9AE40];
      goto LABEL_27;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4778]))
    {
LABEL_46:
      v14 = (const void **)MEMORY[0x1E0C9AE50];
      goto LABEL_27;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA47E0]))
    {
      SupportedPCMFormatArray = audioStream_createSupportedPCMFormatArray(a1, (uint64_t)a3, a4);
LABEL_49:
      v10 = 0;
      goto LABEL_30;
    }
    if (CFEqual(a2, CFSTR("EndpointStreamShowInfo")))
    {
      StringValue = audioStream_copyShowInfo();
      goto LABEL_29;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4788]))
    {
      StringValue = *(const void **)(DerivedStorage + 40);
      goto LABEL_28;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CF7340]))
    {
      Int64 = CFNumberCreateInt64();
      *a4 = (CFDictionaryRef)Int64;
      if (Int64)
      {
LABEL_59:
        SupportedPCMFormatArray = 0;
        goto LABEL_49;
      }
      goto LABEL_83;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CF7358]))
    {
      StringValue = (const void *)FigCFDictionaryGetStringValue();
      if (!StringValue)
        goto LABEL_29;
      goto LABEL_28;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CF7368]))
    {
      StringValue = (const void *)FigCFDictionaryGetBooleanValue();
      if (!StringValue)
        goto LABEL_29;
      goto LABEL_28;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CF7350]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CF7348]))
    {
      StringValue = (const void *)FigCFDictionaryGetNumberValue();
      if (!StringValue)
        goto LABEL_29;
      goto LABEL_28;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CF7378]))
    {
      if (!APSGetFBOPropertyInt64())
      {
        v19 = *(_QWORD *)(DerivedStorage + 80);
        v20 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (!v20 || !v20(v19, 89))
        {
          v21 = APSGetFBOPropertyInt64();
          v14 = (const void **)MEMORY[0x1E0C9AE50];
          if (!v21)
            v14 = (const void **)MEMORY[0x1E0C9AE40];
          goto LABEL_27;
        }
      }
      goto LABEL_46;
    }
    if (CFEqual(a2, CFSTR("Manufacturer")))
    {
      v22 = *(_QWORD *)(DerivedStorage + 80);
      v23 = kAPEndpointDescriptionProperty_Manufacturer;
      goto LABEL_87;
    }
    if (CFEqual(a2, CFSTR("Model")))
    {
      v22 = *(_QWORD *)(DerivedStorage + 80);
      v23 = kAPEndpointDescriptionProperty_Model;
      goto LABEL_87;
    }
    if (CFEqual(a2, CFSTR("OSVersion")))
    {
      v22 = *(_QWORD *)(DerivedStorage + 80);
      v23 = kAPEndpointDescriptionProperty_OSVersion;
      goto LABEL_87;
    }
    if (CFEqual(a2, CFSTR("OSBuildVersion")))
    {
      v22 = *(_QWORD *)(DerivedStorage + 80);
      v23 = kAPEndpointDescriptionProperty_OSBuildVersion;
LABEL_87:
      if (APEndpointDescriptionCopyProperty(v22, (uint64_t)*v23, (uint64_t)a3, (uint64_t)a4))
      {
        SupportedPCMFormatArray = 0;
        v10 = 0;
        *a4 = 0;
        goto LABEL_30;
      }
      goto LABEL_59;
    }
    if (CFEqual(a2, CFSTR("StreamID")))
    {
      v24 = CFNumberCreateInt64();
      *a4 = (CFDictionaryRef)v24;
      if (v24)
        goto LABEL_59;
      goto LABEL_83;
    }
    if (FigCFEqual())
    {
      MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
      APSAudioFormatDescriptionListGetMaxChannelCount();
      MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
      goto LABEL_94;
    }
    if (CFEqual(a2, CFSTR("SupportedAPAudioFormats")))
    {
      MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
      valuePtr = APSAudioFormatDescriptionListGetLegacyFormatMask();
      MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
      v25 = CFNumberCreate(a3, kCFNumberSInt64Type, &valuePtr);
      *a4 = v25;
      if (!v25)
      {
        APSLogErrorAt();
        SupportedPCMFormatArray = 4294950535;
        goto LABEL_49;
      }
      goto LABEL_59;
    }
    if (CFEqual(a2, CFSTR("SupportedAudioFormatList")))
    {
      MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
      APSAudioFormatDescriptionListGetForBufferedSender();
      IntersectionList = APSAudioFormatDescriptionListCreateIntersectionList();
      MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
      if (!(_DWORD)IntersectionList)
      {
        StringValue = cf;
        goto LABEL_29;
      }
      SupportedPCMFormatArray = IntersectionList;
      goto LABEL_139;
    }
    if (FigCFEqual())
    {
      MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
      APSAudioFormatDescriptionListGetForBufferedSender();
      v27 = APSAudioFormatDescriptionListCreateIntersectionList();
      MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
      if ((_DWORD)v27)
      {
        SupportedPCMFormatArray = v27;
      }
      else
      {
        FigEndpointStreamAudioFormatDescriptionArray = APSAudioFormatDescriptionListCreateFigEndpointStreamAudioFormatDescriptionArray();
        if (!(_DWORD)FigEndpointStreamAudioFormatDescriptionArray)
        {
          StringValue = v42;
          goto LABEL_29;
        }
        SupportedPCMFormatArray = FigEndpointStreamAudioFormatDescriptionArray;
      }
      goto LABEL_139;
    }
    if (FigCFEqual())
    {
      MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
      APSAudioFormatDescriptionListGetForBufferedSender();
      v29 = APSAudioFormatDescriptionListCreateIntersectionList();
      MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
      if ((_DWORD)v29)
      {
        SupportedPCMFormatArray = v29;
      }
      else
      {
        SupportedPCMFormatArray = APSAudioFormatDescriptionListCopyRichestFormatAsFigEndpointStreamAudioFormatDescription();
        if (!(_DWORD)SupportedPCMFormatArray)
        {
          v10 = 0;
          *a4 = (CFDictionaryRef)v41;
          v41 = 0;
          goto LABEL_30;
        }
      }
      goto LABEL_139;
    }
    if (FigCFEqual())
    {
      SupportedPCMFormatArray = audioStream_copySupportedAudioCapabilities(a1, a4);
      if (!(_DWORD)SupportedPCMFormatArray)
        goto LABEL_49;
LABEL_139:
      APSLogErrorAt();
      goto LABEL_49;
    }
    if (FigCFEqual())
    {
      MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
      v30 = *(CFTypeRef *)(DerivedStorage + 280);
      if (v30)
        v30 = CFRetain(v30);
      *a4 = (CFDictionaryRef)v30;
      MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
      goto LABEL_59;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CF7390]))
    {
      StringValue = *(const void **)(DerivedStorage + 32);
      if (!StringValue)
        goto LABEL_29;
      goto LABEL_28;
    }
    if (CFEqual(a2, CFSTR("RTCStats")))
    {
      v31 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      keys[0] = CFSTR("sessionType");
      values = CFSTR("AudioBuffered");
      v32 = CFDictionaryCreate(v31, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v10 = v32;
      if (!v32)
      {
        APSLogErrorAt();
        goto LABEL_84;
      }
      v44 = v32;
      v33 = CFArrayCreate(v31, (const void **)&v44, 1, MEMORY[0x1E0C9B378]);
      CFRelease(v10);
      if (v33)
      {
        SupportedPCMFormatArray = 0;
        v10 = 0;
        *a4 = v33;
        goto LABEL_30;
      }
LABEL_83:
      APSLogErrorAt();
      v10 = 0;
LABEL_84:
      SupportedPCMFormatArray = 4294950535;
      goto LABEL_30;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4748]))
    {
      SupportedPCMFormatArray = APAudioEngineVendorVend(*(_QWORD **)(DerivedStorage + 72), (uint64_t)a4);
      if (!(_DWORD)SupportedPCMFormatArray)
        goto LABEL_49;
      goto LABEL_139;
    }
    if (CFEqual(a2, CFSTR("HoseRegistrar")))
    {
      StringValue = *(const void **)(DerivedStorage + 248);
      if (!StringValue)
        goto LABEL_29;
      goto LABEL_28;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CF73A0]))
    {
      v34 = *(_QWORD *)(DerivedStorage + 80);
      v35 = kAPEndpointDescriptionProperty_SupportsReceiverChoosesAnchor;
      goto LABEL_136;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA47F8]))
    {
      v34 = *(_QWORD *)(DerivedStorage + 80);
      v35 = kAPEndpointDescriptionProperty_SupportsReceiverSideSoundCheck;
      goto LABEL_136;
    }
    if (CFEqual(a2, CFSTR("SupportAPAP")))
    {
      v14 = (const void **)MEMORY[0x1E0C9AE50];
      v15 = *(unsigned __int8 *)(DerivedStorage + 96);
    }
    else
    {
      if (CFEqual(a2, CFSTR("EndpointIDs")))
      {
        v37 = *(_QWORD *)(DerivedStorage + 48);
        v36 = (const void **)(DerivedStorage + 48);
        if (v37)
        {
          v38 = CFArrayCreate(a3, v36, 1, MEMORY[0x1E0C9B378]);
        }
        else
        {
          Empty = (const void *)APSCFArrayGetEmpty();
          v38 = (const __CFDictionary *)CFRetain(Empty);
        }
        *a4 = v38;
        if (v38)
          goto LABEL_59;
        goto LABEL_83;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA47F0]))
      {
        if (!APSSettingsIsFeatureEnabled())
          goto LABEL_44;
        v34 = *(_QWORD *)(DerivedStorage + 80);
        v35 = kAPEndpointDescriptionProperty_SupportsMixedSampleRates;
LABEL_136:
        if (APEndpointDescriptionCopyProperty(v34, (uint64_t)*v35, (uint64_t)a3, (uint64_t)a4))
          goto LABEL_44;
        goto LABEL_59;
      }
      if (!CFEqual(a2, CFSTR("IsSidePlayStream")))
      {
        if (!CFEqual(a2, CFSTR("NumberOfSubStreams")))
        {
          if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4740]))
          {
            if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA47C8]))
            {
              if (gLogCategory_APEndpointStreamBufferedAudio <= 30
                && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              v10 = 0;
              SupportedPCMFormatArray = 4294954512;
              goto LABEL_30;
            }
            v14 = (const void **)MEMORY[0x1E0CA4848];
            goto LABEL_27;
          }
          goto LABEL_46;
        }
LABEL_94:
        StringValue = (const void *)FigCFNumberCreateUInt32();
        goto LABEL_29;
      }
      v14 = (const void **)MEMORY[0x1E0C9AE50];
      v15 = *(unsigned __int8 *)(DerivedStorage + 115);
    }
LABEL_18:
    if (!v15)
      v14 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_27;
  }
  if (*(_BYTE *)(DerivedStorage + 114))
  {
    v10 = 0;
    SupportedPCMFormatArray = 4294954509;
    goto LABEL_30;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
  v9 = *(const void **)(DerivedStorage + 192);
  if (!v9)
  {
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
    v10 = 0;
    goto LABEL_22;
  }
  v10 = CFRetain(v9);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
  if (!v10)
  {
LABEL_22:
    SupportedPCMFormatArray = 4294954513;
    goto LABEL_30;
  }
  CMBaseObject = FigTransportStreamGetCMBaseObject();
  v12 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
  if (v12)
  {
    SupportedPCMFormatArray = v12(CMBaseObject, *MEMORY[0x1E0CF1F50], *MEMORY[0x1E0C9AE00], a4);
    if (!(_DWORD)SupportedPCMFormatArray)
      goto LABEL_30;
  }
  else
  {
    SupportedPCMFormatArray = 4294954514;
  }
  APSLogErrorAt();
LABEL_30:
  if (cf)
    CFRelease(cf);
  if (v42)
    CFRelease(v42);
  if (v10)
    CFRelease(v10);
  if (v41)
    CFRelease(v41);
  return SupportedPCMFormatArray;
}

uint64_t audioStream_SetProperty(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v6;
  int Value;
  uint64_t v8;
  CFTypeID v10;
  const void *v11;
  CFTypeID v12;
  CFTypeID v13;
  int v14;
  CFTypeID v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamBufferedAudio <= 30
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294950534;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    if (a3)
    {
      v6 = CFGetTypeID(a3);
      if (v6 == CFBooleanGetTypeID())
      {
        MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
        if (*(_BYTE *)(DerivedStorage + 208))
        {
          Value = CFBooleanGetValue((CFBooleanRef)a3);
          if (*(unsigned __int8 *)(DerivedStorage + 224) != Value)
          {
            *(_BYTE *)(DerivedStorage + 224) = Value;
            if (Value)
            {
              CMNotificationCenterGetDefaultLocalCenter();
              FigDispatchAsyncPostNotification();
            }
          }
          v8 = 0;
        }
        else
        {
          v8 = APSSignalErrorAt();
        }
        MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
        return v8;
      }
    }
LABEL_41:
    APSLogErrorAt();
    return 4294950536;
  }
  if (FigCFEqual())
  {
    if (!a3)
      goto LABEL_41;
    v10 = CFGetTypeID(a3);
    if (v10 != CFStringGetTypeID())
      goto LABEL_41;
    CMBaseObjectGetDerivedStorage();
    if (a1)
      CFRetain(a1);
    CFRetain(a3);
    APSDispatchAsyncFHelper();
    return 0;
  }
  if (FigCFEqual())
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
    v11 = *(const void **)(DerivedStorage + 264);
    *(_QWORD *)(DerivedStorage + 264) = a3;
    if (a3)
      CFRetain(a3);
    if (v11)
      CFRelease(v11);
LABEL_29:
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
    return 0;
  }
  if (FigCFEqual() || FigCFEqual())
    return 0;
  if (FigCFEqual())
  {
    if (!a3)
      goto LABEL_41;
    v12 = CFGetTypeID(a3);
    if (v12 != CFStringGetTypeID())
      goto LABEL_41;
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
    audioStream_updateBadgingFormatInfoAndPostNotification((uint64_t)a1, a3);
    goto LABEL_29;
  }
  if (FigCFEqual())
  {
    if (!a3)
      goto LABEL_41;
    v13 = CFGetTypeID(a3);
    if (v13 != CFBooleanGetTypeID())
      goto LABEL_41;
    v14 = CFBooleanGetValue((CFBooleanRef)a3);
    audioStream_setIsCritical((uint64_t)a1, v14);
    return 0;
  }
  if (FigCFEqual())
  {
    if (!a3)
      goto LABEL_41;
    v15 = CFGetTypeID(a3);
    if (v15 != CFBooleanGetTypeID())
      goto LABEL_41;
    CFBooleanGetValue((CFBooleanRef)a3);
    audioStream_setEchoCancellationIsEnabled(a1);
    return 0;
  }
  if (gLogCategory_APEndpointStreamBufferedAudio <= 30
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return 4294954512;
}

_BYTE *audioStream_dissociateInternal()
{
  _BYTE *result;
  _QWORD *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    v1 = result;
    audioStream_invalidateTransportMDCStream();
    APSDispatchSyncTask();
    APSDispatchSyncFlush();
    audioStream_invalidateTransportAudioDataStream();
    MEMORY[0x1CAA400CC](v1[21]);
    v2 = (const void *)v1[24];
    if (v2)
    {
      CFRelease(v2);
      v1[24] = 0;
    }
    v3 = (const void *)v1[25];
    if (v3)
    {
      CFRelease(v3);
      v1[25] = 0;
    }
    v4 = (const void *)v1[29];
    if (v4)
    {
      CFRelease(v4);
      v1[29] = 0;
    }
    v5 = (const void *)v1[33];
    if (v5)
    {
      CFRelease(v5);
      v1[33] = 0;
    }
    result = (_BYTE *)MEMORY[0x1CAA400E4](v1[21]);
    if (v1[1])
    {
      CMNotificationCenterGetDefaultLocalCenter();
      return (_BYTE *)FigDispatchAsyncPostNotification();
    }
  }
  return result;
}

void audioStream_invalidateTransportMDCStream()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFTypeRef v2;
  void (*v3)(CFTypeRef, _QWORD, _QWORD, _QWORD);
  uint64_t CMBaseObject;
  uint64_t v5;
  void (*v6)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
  v1 = *(const void **)(DerivedStorage + 200);
  if (!v1)
    JUMPOUT(0x1CAA400E4);
  v2 = CFRetain(v1);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
  if (v2)
  {
    v3 = *(void (**)(CFTypeRef, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v3)
      v3(v2, 0, 0, 0);
    CMBaseObject = FigTransportStreamGetCMBaseObject();
    if (CMBaseObject)
    {
      v5 = CMBaseObject;
      v6 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v6)
        v6(v5);
    }
    CFRelease(v2);
  }
}

uint64_t audioStream_suspendAndDissociateInternal(uint64_t a1)
{
  _BYTE *DerivedStorage;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  audioStream_suspendInternal(a1, 0);
  *DerivedStorage = 1;
  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return 0;
}

void audioStream_invalidateTransportAudioDataStream()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFTypeRef v2;
  void (*v3)(CFTypeRef, _QWORD, _QWORD, _QWORD);
  int IsFeatureEnabled;
  uint64_t v5;
  void (*v6)(CFTypeRef, _QWORD, _QWORD);
  uint64_t CMBaseObject;
  uint64_t v8;
  void (*v9)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
  v1 = *(const void **)(DerivedStorage + 192);
  if (!v1)
    JUMPOUT(0x1CAA400E4);
  v2 = CFRetain(v1);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
  if (v2)
  {
    v3 = *(void (**)(CFTypeRef, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v3)
      v3(v2, 0, 0, 0);
    IsFeatureEnabled = APSSettingsIsFeatureEnabled();
    v5 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (IsFeatureEnabled)
    {
      v6 = *(void (**)(CFTypeRef, _QWORD, _QWORD))(v5 + 104);
      if (!v6)
      {
LABEL_8:
        CMBaseObject = FigTransportStreamGetCMBaseObject();
        if (CMBaseObject)
        {
          v8 = CMBaseObject;
          v9 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v9)
            v9(v8);
        }
        CFRelease(v2);
        return;
      }
    }
    else
    {
      v6 = *(void (**)(CFTypeRef, _QWORD, _QWORD))(v5 + 64);
      if (!v6)
        goto LABEL_8;
    }
    v6(v2, 0, 0);
    goto LABEL_8;
  }
}

uint64_t audioStream_suspendInternal(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  CFTypeRef v10;
  const void *Value;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  uint64_t ProtocolVTable;
  uint64_t v17;
  void (*v18)(CFTypeRef, uint64_t, _QWORD);
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, CFMutableDictionaryRef);
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  uint64_t v27;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
    return 0;
  if (APSGetFBOPropertyInt64())
  {
    v5 = *(_QWORD *)(DerivedStorage + 320);
    if (v5)
    {
      APCarPlayAnalyticsStopCollections(v5);
      APCarPlayAnalyticsSubmitToCarPlay(*(NSObject ***)(DerivedStorage + 320));
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  v6 = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)v6)
  {
    v7 = v6;
    if (*(_BYTE *)(v6 + 208))
    {
      if (*(_QWORD *)(v6 + 312))
      {
        if (APSThreadSafeDictionaryCopyValueIfPresent()
          && APSThreadSafeDictionaryGetInt64IfPresent())
        {
          APSThreadSafeDictionaryGetInt32IfPresent();
          mach_absolute_time();
          UpTicksToSeconds();
          APSThreadSafeDictionarySetInt32();
          APSThreadSafeDictionaryRemoveValue();
        }
        v8 = *(const void **)(v7 + 312);
        if (v8)
        {
          CFRelease(v8);
          *(_QWORD *)(v7 + 312) = 0;
        }
      }
    }
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
  v9 = *(const void **)(DerivedStorage + 248);
  if (v9)
    v10 = CFRetain(v9);
  else
    v10 = 0;
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
  if (a2)
  {
    Value = CFDictionaryGetValue(a2, CFSTR("HoseRegistrar"));
    if (v10)
    {
      if (Value && !CFEqual(v10, Value))
      {
        if (gLogCategory_APEndpointStreamBufferedAudio <= 50
          && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v27 = 0;
        goto LABEL_54;
      }
    }
  }
  if (*(_QWORD *)(DerivedStorage + 120))
  {
    FigPKDStopAirPlaySenderSession();
    *(_QWORD *)(DerivedStorage + 120) = 0;
    v12 = *(const void **)(DerivedStorage + 128);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(DerivedStorage + 128) = 0;
    }
  }
  v13 = *(const void **)(DerivedStorage + 136);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 136) = 0;
  }
  v14 = *(const void **)(DerivedStorage + 144);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(DerivedStorage + 144) = 0;
  }
  v15 = *(const void **)(DerivedStorage + 152);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(DerivedStorage + 152) = 0;
  }
  audioStream_invalidateTransportMDCStream();
  audioStream_invalidateTransportAudioDataStream();
  APSEndpointStreamAudioHoseRegistrarProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v17 = *(_QWORD *)(ProtocolVTable + 16);
    if (v17)
    {
      v18 = *(void (**)(CFTypeRef, uint64_t, _QWORD))(v17 + 16);
      if (v18)
        v18(v10, a1, 0);
    }
  }
  if (*(_BYTE *)(DerivedStorage + 274))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      APSLogErrorAt();
      v27 = 4294950535;
      if (!v10)
        return v27;
      goto LABEL_54;
    }
    v20 = Mutable;
    CFDictionarySetInt64();
    v21 = *(_QWORD *)(DerivedStorage + 88);
    v22 = *(void (**)(uint64_t, uint64_t, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 48);
    if (v22)
      v22(v21, 103, v20);
  }
  else
  {
    v20 = 0;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
  *(_QWORD *)(DerivedStorage + 176) = 0;
  *(_BYTE *)(DerivedStorage + 274) = 0;
  v23 = *(const void **)(DerivedStorage + 192);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(DerivedStorage + 192) = 0;
  }
  v24 = *(const void **)(DerivedStorage + 200);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(DerivedStorage + 200) = 0;
  }
  *(_BYTE *)(DerivedStorage + 208) = 0;
  *(_BYTE *)(DerivedStorage + 224) = 0;
  v25 = *(const void **)(DerivedStorage + 232);
  if (v25)
  {
    CFRelease(v25);
    *(_QWORD *)(DerivedStorage + 232) = 0;
  }
  v26 = *(const void **)(DerivedStorage + 248);
  if (v26)
  {
    CFRelease(v26);
    *(_QWORD *)(DerivedStorage + 248) = 0;
  }
  *(_QWORD *)(DerivedStorage + 288) = 0;
  audioStream_updateIsPlayingAndPostNotification(a1, 0);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
  APSEventRecorderRecordEvent();
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  if (v20)
    CFRelease(v20);
  v27 = 0;
  if (v10)
LABEL_54:
    CFRelease(v10);
  return v27;
}

uint64_t audioStream_handleFeedbackReceivedNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = APCarPlayAnalyticsCollectFromFeedbackResponse(*(_QWORD **)(DerivedStorage + 320), a5, 0);
  if ((_DWORD)result)
  {
    if (gLogCategory_APEndpointStreamBufferedAudio <= 60)
    {
      if (gLogCategory_APEndpointStreamBufferedAudio != -1)
        return LogPrintF();
      result = _LogCategory_Initialize();
      if ((_DWORD)result)
        return LogPrintF();
    }
  }
  return result;
}

void audioStream_updateIsPlayingAndPostNotification(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  const void **v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 209) != a2)
  {
    v5 = DerivedStorage;
    APEndpointStreamUpdateNowPlayingTransaction(a1, a2, &gLogCategory_APEndpointStreamBufferedAudio, (const void **)(DerivedStorage + 216));
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v7 = Mutable;
    v8 = (const void **)MEMORY[0x1E0C9AE40];
    if (a2)
      v8 = (const void **)MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, CFSTR("IsPlaying"), *v8);
    *(_BYTE *)(v5 + 209) = a2;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v7);
  }
}

uint64_t audioStream_createSupportedPCMFormatArray(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t ASRDArrayPCM;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
  ASRDArrayPCM = APSAudioFormatDescriptionListCreateASRDArrayPCM();
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
  if ((_DWORD)ASRDArrayPCM)
  {
    APSLogErrorAt();
  }
  else if (a3)
  {
    *a3 = 0;
  }
  return ASRDArrayPCM;
}

__CFDictionary *audioStream_copyShowInfo()
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  __CFDictionary *v2;
  const void **v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v2 = Mutable;
  v3 = (const void **)MEMORY[0x1E0C9AE50];
  if (!*(_BYTE *)(DerivedStorage + 208))
    v3 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(Mutable, CFSTR("Resumed"), *v3);
  CFDictionarySetValue(v2, CFSTR("Type"), (const void *)*MEMORY[0x1E0CA4888]);
  CFDictionarySetValue(v2, CFSTR("Name"), *(const void **)(DerivedStorage + 32));
  return v2;
}

uint64_t audioStream_copySupportedAudioCapabilities(uint64_t a1, CFDictionaryRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t FilteredListWithTranscodeFormats;
  uint64_t v5;
  void *v6;
  const __CFAllocator *v7;
  void *v8;
  CFDictionaryRef v9;
  CFDictionaryRef v10;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
  FilteredListWithTranscodeFormats = APSAudioFormatDescriptionListCreateFilteredListWithTranscodeFormats();
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
  if ((_DWORD)FilteredListWithTranscodeFormats)
    goto LABEL_13;
  v5 = APSAudioFormatDescriptionListCopyChannelLayoutTags();
  if ((_DWORD)v5)
  {
    FilteredListWithTranscodeFormats = v5;
LABEL_13:
    APSLogErrorAt();
    return FilteredListWithTranscodeFormats;
  }
  v6 = (void *)FigCFDictionaryCopyArrayOfValues();
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = (void *)*MEMORY[0x1E0CA4878];
  values = v6;
  keys[0] = v8;
  v9 = CFDictionaryCreate(v7, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v9)
  {
    APSLogErrorAt();
    FilteredListWithTranscodeFormats = 4294951816;
    if (!v6)
      return FilteredListWithTranscodeFormats;
    goto LABEL_9;
  }
  v10 = v9;
  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  FilteredListWithTranscodeFormats = 0;
  *a2 = v10;
  if (v6)
LABEL_9:
    CFRelease(v6);
  return FilteredListWithTranscodeFormats;
}

void audioStream_updateBadgingFormatInfoAndPostNotification(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  const void *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    goto LABEL_11;
  v4 = DerivedStorage;
  if (FigCFEqual())
    return;
  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v6 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("ActiveBadgingFormatInfo"), a2);
    v7 = *(const void **)(v4 + 280);
    *(_QWORD *)(v4 + 280) = a2;
    CFRetain(a2);
    if (v7)
      CFRelease(v7);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v6);
  }
  else
  {
LABEL_11:
    APSLogErrorAt();
  }
}

uint64_t audioStream_setIsCritical(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
  if (*(unsigned __int8 *)(DerivedStorage + 272) != a2)
  {
    v4 = *(const void **)(DerivedStorage + 192);
    if (v4)
    {
      if (gLogCategory_APEndpointStreamBufferedAudio >= 51)
      {
        *(_BYTE *)(DerivedStorage + 272) = a2;
      }
      else
      {
        if (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize())
          LogPrintF();
        v4 = *(const void **)(DerivedStorage + 192);
        *(_BYTE *)(DerivedStorage + 272) = a2;
        if (!v4)
          goto LABEL_10;
      }
      CFRetain(v4);
LABEL_10:
      APSDispatchAsyncFHelper();
    }
  }
  return MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
}

uint64_t audioStream_setEchoCancellationIsEnabled(const void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
  if (a1)
    CFRetain(a1);
  APSDispatchAsyncFHelper();
  return MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
}

void audioStream_setAudioModeInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const __CFString *AudioModeForEndpointStream;
  const __CFString *v6;
  __CFDictionary *RequestDictionary;
  __CFDictionary *v8;
  const void *v9;
  CFTypeRef v10;
  const void *v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, __CFDictionary *);
  const void *v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(const void **)(DerivedStorage + 104);
  v4 = *(const void **)(a1 + 8);
  *(_QWORD *)(DerivedStorage + 104) = v4;
  if (v4)
    CFRetain(v4);
  if (v3)
    CFRelease(v3);
  AudioModeForEndpointStream = APSenderSessionUtilityGetAudioModeForEndpointStream();
  if (*(_BYTE *)(DerivedStorage + 208))
  {
    v6 = AudioModeForEndpointStream;
    RequestDictionary = audioStream_createRequestDictionary(*(CFMutableDictionaryRef *)a1);
    if (RequestDictionary)
    {
      v8 = RequestDictionary;
      CFDictionarySetValue(RequestDictionary, CFSTR("audioMode"), v6);
      if (*(_BYTE *)(DerivedStorage + 113))
      {
        v9 = *(const void **)(DerivedStorage + 200);
        if (v9)
        {
          v10 = CFRetain(v9);
          if (v10)
          {
            v11 = v10;
            if (APTransportStreamSendPlistMessageCreatingPlistReply())
              APSLogErrorAt();
            CFRelease(v11);
            goto LABEL_16;
          }
        }
      }
      else
      {
        v12 = *(_QWORD *)(DerivedStorage + 88);
        v13 = *(unsigned int (**)(uint64_t, __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
        if (v13 && !v13(v12, v8))
          goto LABEL_16;
      }
      APSLogErrorAt();
LABEL_16:
      CFRelease(v8);
      goto LABEL_17;
    }
    APSLogErrorAt();
  }
LABEL_17:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v14 = *(const void **)(a1 + 8);
  if (v14)
    CFRelease(v14);
}

CFMutableDictionaryRef audioStream_createRequestDictionary(CFMutableDictionaryRef Mutable)
{
  uint64_t DerivedStorage;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (Mutable
    && (v3 = DerivedStorage,
        (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0))
  {
    if (*(_BYTE *)(v3 + 115))
      CFDictionarySetInt64();
  }
  else
  {
    APSLogErrorAt();
  }
  return Mutable;
}

void audioStream_setIsCriticalInternal(uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)a1)
    APSSetFBOPropertyInt64();
  APSSetFBOPropertyInt64();
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
}

void audioStream_setEchoCancellationIsEnabledInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  uint64_t CMBaseObject;
  unsigned int (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  __CFDictionary *RequestDictionary;
  __CFDictionary *v7;
  const void **v8;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_19;
  if (*(_BYTE *)(DerivedStorage + 113))
  {
    v3 = *(const void **)(DerivedStorage + 200);
    if (!v3)
    {
      cf = 0;
LABEL_19:
      APSLogErrorAt();
      v7 = 0;
      goto LABEL_21;
    }
    cf = CFRetain(v3);
    if (!cf)
      goto LABEL_19;
  }
  else
  {
    CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 88));
    v5 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
    if (!v5 || v5(CMBaseObject, CFSTR("TransportControlStream"), *MEMORY[0x1E0C9AE00], &cf))
      goto LABEL_19;
  }
  RequestDictionary = audioStream_createRequestDictionary(*(CFMutableDictionaryRef *)a1);
  v7 = RequestDictionary;
  if (RequestDictionary)
  {
    v8 = (const void **)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(a1 + 8))
      v8 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(RequestDictionary, CFSTR("MuteForStream"), *v8);
    mach_absolute_time();
    APTransportStreamSendPlistMessageCreatingPlistReply();
    mach_absolute_time();
    if (gLogCategory_APEndpointStreamBufferedAudio <= 50
      && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
    {
      UpTicksToMilliseconds();
      LogPrintF();
    }
  }
  else
  {
    APSLogErrorAt();
  }
LABEL_21:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  if (v7)
    CFRelease(v7);
  if (cf)
    CFRelease(cf);
}

__CFString *audioStream_audioHoseBufferedProtocolCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("APEndpointStreamBuffered <APEndpointStreamBufferedHoseStreamingProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t audioStream_audioHoseFlush(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t audioStream_audioHoseFlushWithinSampleRange(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t audioStream_audioHoseNotifyAudioAvailable(const void *a1)
{
  uint64_t v1;

  v1 = audioStream_audioHoseNotifyAudioAvailableInternal(a1);
  if ((_DWORD)v1)
    APSLogErrorAt();
  return v1;
}

uint64_t audioStream_audioHoseSetRateAndAnchorTime(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  kdebug_trace();
  if (a1)
    CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t audioStream_audioHoseApplyVolumeFade(const void *a1, int a2, CMTime *a3)
{
  uint64_t v6;
  CMTime v8;
  CMTime time1;
  const void *v10;
  int v11;
  __int128 v12;
  _BYTE v13[12];

  CMBaseObjectGetDerivedStorage();
  *(_QWORD *)&v13[4] = 0;
  if ((a2 - 3) <= 0xFFFFFFFD)
  {
    v6 = 4294894965;
LABEL_9:
    APSLogErrorAt();
    return v6;
  }
  time1 = *a3;
  v8 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(&time1, &v8) <= 0)
  {
    v6 = 4294894965;
    goto LABEL_9;
  }
  v10 = a1;
  v11 = a2;
  v12 = *(_OWORD *)&a3->value;
  *(_QWORD *)v13 = a3->epoch;
  if (a1)
    CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t audioStream_audioHoseSetRate(const void *a1, int a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
  if (a2 == 1)
    ++*(_QWORD *)(DerivedStorage + 288);
  APSDispatchAsyncFHelper();
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
  return 0;
}

uint64_t audioStream_audioHoseGetAnchor(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t audioStream_audioHoseSetCryptor(const void *a1, uint64_t a2, const void *a3)
{
  CMBaseObjectGetDerivedStorage();
  if (a3)
    CFRetain(a3);
  if (a1)
    CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t audioStream_audioHoseSetMagicCookie(const void *a1, uint64_t a2, const void *a3)
{
  CMBaseObjectGetDerivedStorage();
  if (a3)
    CFRetain(a3);
  if (a1)
    CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t audioStream_audioHoseEnableLoudnessNormalization(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

void audioStream_audioHoseFlushInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  _OWORD *v4;
  const void *v5;
  const void *v6;
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v9;
  CFMutableDictionaryRef RequestDictionary;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef cf;
  _OWORD v17[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17[0] = *(_OWORD *)(a1 + 12);
  *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)(a1 + 24);
  v3 = (const void *)APSAudioTransportTimeCopyDebugDesc();
  cf = 0;
  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v4 = (_OWORD *)(a1 + 12);
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    RequestDictionary = 0;
    v11 = 4294950534;
    goto LABEL_23;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
  v5 = *(const void **)(DerivedStorage + 232);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 232) = 0;
  }
  audioStream_updateIsPlayingAndPostNotification(*(_QWORD *)a1, 0);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
  if (*(_BYTE *)(DerivedStorage + 113))
  {
    v6 = *(const void **)(DerivedStorage + 200);
    if (!v6)
    {
      cf = 0;
LABEL_19:
      APSLogErrorAt();
      RequestDictionary = 0;
      v11 = 4294960578;
      goto LABEL_23;
    }
    cf = CFRetain(v6);
    if (!cf)
      goto LABEL_19;
    goto LABEL_14;
  }
  CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 88));
  v8 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v8)
  {
    v11 = 4294954514;
LABEL_21:
    APSLogErrorAt();
    RequestDictionary = 0;
    goto LABEL_23;
  }
  v9 = v8(CMBaseObject, CFSTR("TransportControlStream"), *MEMORY[0x1E0C9AE00], &cf);
  if ((_DWORD)v9)
  {
    v11 = v9;
    goto LABEL_21;
  }
LABEL_14:
  RequestDictionary = audioStream_createRequestDictionary(*(CFMutableDictionaryRef *)a1);
  if (RequestDictionary)
  {
    CFDictionarySetInt64();
    v17[0] = *v4;
    *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)(a1 + 24);
    APSAudioTransportTimeUtilsEncodeToRequestResponseDictionary();
    mach_absolute_time();
    v11 = APTransportStreamSendPlistMessageCreatingPlistReply();
    mach_absolute_time();
    if (gLogCategory_APEndpointStreamBufferedAudio <= 50
      && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
    {
      UpTicksToMilliseconds();
      LogPrintF();
    }
  }
  else
  {
    APSLogErrorAt();
    v11 = 4294950535;
  }
LABEL_23:
  v12 = *(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t))(a1 + 40);
  if (v12)
  {
    v13 = *(_QWORD *)a1;
    v14 = *(unsigned int *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 48);
    v17[0] = *v4;
    *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)(a1 + 24);
    v12(v13, v14, v17, v11, v15);
  }
  if (v3)
    CFRelease(v3);
  if (cf)
    CFRelease(cf);
  if (RequestDictionary)
    CFRelease(RequestDictionary);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

void audioStream_audioHoseFlushWithinSampleRangeInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  _DWORD *v5;
  _DWORD *v6;
  const void *v7;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v10;
  CFMutableDictionaryRef RequestDictionary;
  uint64_t v12;
  void (*v13)(CFMutableDictionaryRef, uint64_t, _OWORD *, uint64_t, _OWORD *, uint64_t, uint64_t);
  CFMutableDictionaryRef v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[2];
  _OWORD v19[2];
  CFTypeRef v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v20 = 0;
  v19[0] = *(_OWORD *)(a1 + 12);
  *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)(a1 + 24);
  v3 = (const void *)APSAudioTransportTimeCopyDebugDesc();
  v19[0] = *(_OWORD *)(a1 + 44);
  *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)(a1 + 56);
  v4 = (const void *)APSAudioTransportTimeCopyDebugDesc();
  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v5 = (_DWORD *)(a1 + 12);
  v6 = (_DWORD *)(a1 + 44);
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    RequestDictionary = 0;
    v12 = 4294950534;
    goto LABEL_24;
  }
  if (*v5 != *v6)
  {
    APSLogErrorAt();
    RequestDictionary = 0;
    v12 = 4294960591;
    goto LABEL_24;
  }
  if (*(_BYTE *)(DerivedStorage + 113))
  {
    v7 = *(const void **)(DerivedStorage + 200);
    if (!v7)
    {
      v20 = 0;
LABEL_18:
      APSLogErrorAt();
      RequestDictionary = 0;
      v12 = 4294960578;
      goto LABEL_24;
    }
    v20 = CFRetain(v7);
    if (!v20)
      goto LABEL_18;
    goto LABEL_13;
  }
  CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 88));
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v9)
  {
    v12 = 4294954514;
LABEL_20:
    APSLogErrorAt();
    RequestDictionary = 0;
    goto LABEL_24;
  }
  v10 = v9(CMBaseObject, CFSTR("TransportControlStream"), *MEMORY[0x1E0C9AE00], &v20);
  if ((_DWORD)v10)
  {
    v12 = v10;
    goto LABEL_20;
  }
LABEL_13:
  RequestDictionary = audioStream_createRequestDictionary(*(CFMutableDictionaryRef *)a1);
  if (RequestDictionary)
  {
    CFDictionarySetInt64();
    v19[0] = *(_OWORD *)v5;
    *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)(a1 + 24);
    APSAudioTransportTimeUtilsEncodeToRequestResponseDictionary();
    CFDictionarySetInt64();
    v19[0] = *(_OWORD *)v6;
    *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)(a1 + 56);
    APSAudioTransportTimeUtilsEncodeToRequestResponseDictionary();
    mach_absolute_time();
    v12 = APTransportStreamSendPlistMessageCreatingPlistReply();
    mach_absolute_time();
    if (gLogCategory_APEndpointStreamBufferedAudio <= 50
      && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
    {
      UpTicksToMilliseconds();
      LogPrintF();
    }
    if ((_DWORD)v12)
      APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    v12 = 4294950535;
  }
LABEL_24:
  v13 = *(void (**)(CFMutableDictionaryRef, uint64_t, _OWORD *, uint64_t, _OWORD *, uint64_t, uint64_t))(a1 + 72);
  if (v13)
  {
    v14 = *(CFMutableDictionaryRef *)a1;
    v15 = *(unsigned int *)(a1 + 8);
    v16 = *(unsigned int *)(a1 + 40);
    v17 = *(_QWORD *)(a1 + 80);
    v19[0] = *(_OWORD *)v5;
    *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)(a1 + 24);
    v18[0] = *(_OWORD *)v6;
    *(_OWORD *)((char *)v18 + 12) = *(_OWORD *)(a1 + 56);
    v13(v14, v15, v19, v16, v18, v12, v17);
  }
  if (v3)
    CFRelease(v3);
  if (v4)
    CFRelease(v4);
  if (v20)
    CFRelease(v20);
  if (RequestDictionary)
    CFRelease(RequestDictionary);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

uint64_t audioStream_audioHoseNotifyAudioAvailableInternal(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const void *v8;
  CFTypeRef v9;
  uint64_t (*v10)(CFTypeRef);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 114))
  {
    v4 = *(NSObject **)(DerivedStorage + 304);
    v5 = (void *)CFRetain(a1);
    dispatch_async_f(v4, v5, (dispatch_function_t)audioStream_audioDataDrain);
    return 0;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
  v8 = *(const void **)(v3 + 192);
  if (!v8)
  {
    MEMORY[0x1CAA400E4](*(_QWORD *)(v3 + 168));
    return 0;
  }
  v9 = CFRetain(v8);
  MEMORY[0x1CAA400E4](*(_QWORD *)(v3 + 168));
  if (v9)
  {
    kdebug_trace();
    v10 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
    if (v10)
    {
      v6 = v10(v9);
      if (!(_DWORD)v6)
      {
LABEL_13:
        CFRelease(v9);
        return v6;
      }
    }
    else
    {
      v6 = 4294954514;
    }
    APSLogErrorAt();
    goto LABEL_13;
  }
  return 0;
}

void audioStream_audioDataDrain(void *a1)
{
  uint64_t DerivedStorage;
  const __CFArray *v3;
  const __CFArray *v4;
  const __CFArray *v5;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v3 = (const __CFArray *)audioStream_audioDataBatchCallback((uint64_t)a1, 0, &cf);
  if (v3)
  {
    v4 = v3;
    if (CFArrayGetCount(v3) < 1)
      CFRelease(a1);
    else
      dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 304), a1, (dispatch_function_t)audioStream_audioDataDrain);
    v5 = v4;
  }
  else
  {
    v5 = (const __CFArray *)a1;
  }
  CFRelease(v5);
  if (cf)
    CFRelease(cf);
}

CFTypeRef audioStream_audioDataBatchCallback(uint64_t a1, int a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage;
  const void *v7;
  CFTypeRef v8;
  uint64_t v9;
  int v10;
  int v11;
  CFTypeRef *v12;
  CFTypeRef *v13;
  CFTypeRef *v14;
  CFTypeRef v15;
  CFTypeRef v16;
  int v18;
  char v19;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v19 = 0;
  if (audioStream_audioDataBatchCallback_sBatchMessageTypesOnce != -1)
  {
    dispatch_once_f(&audioStream_audioDataBatchCallback_sBatchMessageTypesOnce, &audioStream_audioDataBatchCallback_sBatchMessageTypes, (dispatch_function_t)audioStream_batchMessageTypesInit);
    if (!a2)
      goto LABEL_3;
LABEL_21:
    v18 = APSSignalErrorAt();
    v8 = 0;
    goto LABEL_27;
  }
  if (a2)
    goto LABEL_21;
LABEL_3:
  if (a3)
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
    v7 = *(const void **)(DerivedStorage + 248);
    v8 = v7 ? CFRetain(v7) : 0;
    v9 = *(_QWORD *)(DerivedStorage + 256);
    v10 = *(unsigned __int8 *)(DerivedStorage + 273);
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
    if (v8)
    {
      if (!v9)
      {
        if (gLogCategory_APEndpointStreamBufferedAudio <= 50
          && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v15 = 0;
        goto LABEL_16;
      }
      v11 = (*(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *, char *))(v9 + 8))(v8, a1, &cf, &v19);
      if (!v11)
      {
        v12 = (CFTypeRef *)&audioStream_audioDataBatchCallback_sBatchMessageTypes;
        v13 = (CFTypeRef *)&unk_1EF91D6C8;
        if (v10)
        {
          v13 = (CFTypeRef *)&unk_1EF91D6D8;
          v12 = (CFTypeRef *)&unk_1EF91D6D0;
        }
        if (v19)
          v14 = v13;
        else
          v14 = v12;
        *a3 = CFRetain(*v14);
        v15 = cf;
        cf = 0;
        goto LABEL_16;
      }
      v18 = v11;
      APSLogErrorAt();
LABEL_27:
      if (v18 == -72095 || !v18)
        goto LABEL_35;
      goto LABEL_29;
    }
  }
  APSLogErrorAt();
  v8 = 0;
LABEL_29:
  if (gLogCategory_APEndpointStreamBufferedAudio <= 90
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
    audioStream_handleFatalError();
LABEL_35:
  v15 = 0;
  v16 = 0;
  if (v8)
  {
LABEL_16:
    CFRelease(v8);
    v16 = v15;
  }
  if (cf)
    CFRelease(cf);
  return v16;
}

uint64_t audioStream_batchMessageTypesInit(CFMutableArrayRef *a1)
{
  const __CFAllocator *v2;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v4;
  CFMutableArrayRef v5;
  CFMutableArrayRef v6;
  CFMutableArrayRef v7;
  CFMutableArrayRef v8;
  CFMutableArrayRef v9;
  CFMutableArrayRef v10;
  uint64_t result;
  uint64_t v12;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    goto LABEL_14;
  v4 = Mutable;
  if (FigCFArrayAppendInt32())
    goto LABEL_14;
  *a1 = v4;
  v5 = CFArrayCreateMutable(v2, 3, MEMORY[0x1E0C9B378]);
  if (!v5)
    goto LABEL_14;
  v6 = v5;
  if (FigCFArrayAppendInt32()
    || FigCFArrayAppendInt32()
    || FigCFArrayAppendInt32()
    || (a1[1] = v6, (v7 = CFArrayCreateMutable(v2, 1, MEMORY[0x1E0C9B378])) == 0)
    || (v8 = v7, FigCFArrayAppendInt32())
    || (a1[2] = v8, (v9 = CFArrayCreateMutable(v2, 3, MEMORY[0x1E0C9B378])) == 0)
    || (v10 = v9, FigCFArrayAppendInt32())
    || FigCFArrayAppendInt32()
    || (result = FigCFArrayAppendInt32(), (_DWORD)result))
  {
LABEL_14:
    APSLogErrorAt();
    v12 = CUFatalErrorF();
    return audioStream_handleFatalError(v12);
  }
  else
  {
    a1[3] = v10;
  }
  return result;
}

void audioStream_handleFatalError()
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v1;

  CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v1 = Mutable;
    FigCFDictionarySetInt32();
    CFDictionarySetValue(v1, (const void *)*MEMORY[0x1E0CA46E8], CFSTR("audio data buffer processing failed"));
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v1);
  }
  else
  {
    APSLogErrorAt();
  }
}

void audioStream_audioHoseSetRateAndAnchorTimeInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  _OWORD *v4;
  const void *v5;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v8;
  CFMutableDictionaryRef RequestDictionary;
  uint64_t v10;
  const void *v11;
  void (*v12)(uint64_t, uint64_t, _OWORD *, __int128 *, _OWORD *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  __int128 v17;
  uint64_t v18;
  _OWORD v19[2];
  _OWORD v20[2];
  CFTypeRef v21;
  CFTypeRef v22[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v21 = 0;
  v22[0] = 0;
  v20[0] = *MEMORY[0x1E0CF72D8];
  *(_OWORD *)((char *)v20 + 12) = *(_OWORD *)(MEMORY[0x1E0CF72D8] + 12);
  v19[0] = *(_OWORD *)(a1 + 12);
  *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)(a1 + 24);
  v3 = (const void *)APSAudioTransportTimeCopyDebugDesc();
  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v4 = (_OWORD *)(a1 + 12);
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    RequestDictionary = 0;
    v11 = 0;
    v10 = 4294950534;
    goto LABEL_21;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
  audioStream_updateIsPlayingAndPostNotification(*(_QWORD *)a1, *(_DWORD *)(a1 + 8) != 0);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
  v5 = *(const void **)(DerivedStorage + 200);
  if (v5)
  {
    v22[0] = CFRetain(v5);
    if (v22[0])
      goto LABEL_12;
  }
  else
  {
    v22[0] = 0;
  }
  CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 88));
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v7)
  {
    v10 = 4294954514;
LABEL_19:
    APSLogErrorAt();
    RequestDictionary = 0;
    v11 = 0;
    goto LABEL_21;
  }
  v8 = v7(CMBaseObject, CFSTR("TransportControlStream"), *MEMORY[0x1E0C9AE00], v22);
  if ((_DWORD)v8)
  {
    v10 = v8;
    goto LABEL_19;
  }
LABEL_12:
  RequestDictionary = audioStream_createRequestDictionary(*(CFMutableDictionaryRef *)a1);
  if (RequestDictionary)
  {
    CFDictionarySetInt64();
    if (*(_DWORD *)(a1 + 8) == 1)
    {
      v19[0] = *v4;
      *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)(a1 + 24);
      APSAudioTransportTimeUtilsEncodeToRequestResponseDictionary();
      v19[0] = *(_OWORD *)(a1 + 64);
      *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)(a1 + 76);
      APSAudioTransportTimeUtilsEncodeToRequestResponseDictionary();
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      CFDictionarySetInt64();
    }
    mach_absolute_time();
    v10 = APTransportStreamSendPlistMessageCreatingPlistReply();
    mach_absolute_time();
    v19[0] = v20[0];
    *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)((char *)v20 + 12);
    v11 = (const void *)APSAudioTransportTimeCopyDebugDesc();
    if (gLogCategory_APEndpointStreamBufferedAudio <= 50
      && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
    {
      UpTicksToMilliseconds();
      LogPrintF();
    }
  }
  else
  {
    APSLogErrorAt();
    v11 = 0;
    v10 = 4294950535;
  }
LABEL_21:
  v12 = *(void (**)(uint64_t, uint64_t, _OWORD *, __int128 *, _OWORD *, uint64_t, uint64_t))(a1 + 96);
  if (v12)
  {
    v13 = *(_QWORD *)a1;
    v14 = *(unsigned int *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 104);
    v19[0] = *v4;
    *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)(a1 + 24);
    v17 = *(_OWORD *)(a1 + 40);
    v18 = *(_QWORD *)(a1 + 56);
    v16[0] = v20[0];
    *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)((char *)v20 + 12);
    v12(v13, v14, v19, &v17, v16, v10, v15);
  }
  if ((_DWORD)v10)
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
    audioStream_updateIsPlayingAndPostNotification(*(_QWORD *)a1, 0);
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
  }
  kdebug_trace();
  if (v3)
    CFRelease(v3);
  if (v11)
    CFRelease(v11);
  if (v22[0])
    CFRelease(v22[0]);
  if (RequestDictionary)
    CFRelease(RequestDictionary);
  if (v21)
    CFRelease(v21);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

void audioStream_audioHoseApplyVolumeFadeInternal(uint64_t a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v3;
  const void *v4;
  CFTypeRef v5;
  void *v6;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v8;
  CFMutableDictionaryRef v9;
  CMTime time;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    goto LABEL_13;
  v3 = DerivedStorage;
  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    APSGetVolumeFadeTypeName();
    time = *(CMTime *)(a1 + 12);
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  v4 = (const void *)*((_QWORD *)v3 + 25);
  if (v4 && (v5 = CFRetain(v4)) != 0)
  {
    v6 = (void *)v5;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v8 = Mutable;
      CFDictionarySetInt64();
      time = *(CMTime *)(a1 + 12);
      CMTimeGetSeconds(&time);
      CFDictionarySetDouble();
      if (APTransportStreamSendPlistMessage())
        APSLogErrorAt();
      CFRelease(v6);
      v9 = v8;
    }
    else
    {
      APSLogErrorAt();
      v9 = (CFMutableDictionaryRef)v6;
    }
    CFRelease(v9);
  }
  else
  {
LABEL_13:
    APSLogErrorAt();
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

void audioStream_audioHoseSetRateInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  int v4;
  uint64_t v5;
  const void *v6;
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v9;
  CFMutableDictionaryRef RequestDictionary;
  uint64_t v11;
  int Int64;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  const void *v17;
  void (*v18)(uint64_t, _OWORD *, _QWORD *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  int v22;
  int v23;
  _OWORD v24[2];
  _OWORD v25[2];
  CFTypeRef v26;
  CFTypeRef v27[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v26 = 0;
  v27[0] = 0;
  v25[0] = *MEMORY[0x1E0CF72D8];
  *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)(MEMORY[0x1E0CF72D8] + 12);
  v24[0] = *(_OWORD *)(a1 + 12);
  *(_OWORD *)((char *)v24 + 12) = *(_OWORD *)(a1 + 24);
  v3 = (const void *)APSAudioTransportTimeCopyDebugDesc();
  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    v14 = 0;
    v13 = 0;
    Int64 = 0;
    v15 = 0;
    RequestDictionary = 0;
    v17 = 0;
    v11 = 4294950534;
    goto LABEL_34;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
  v4 = *(_DWORD *)(a1 + 8);
  if (v4 == 1)
  {
    v5 = *(_QWORD *)(DerivedStorage + 288) - 1;
    *(_QWORD *)(DerivedStorage + 288) = v5;
    if (v5)
    {
      if (gLogCategory_APEndpointStreamBufferedAudio <= 50
        && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
      v11 = 4294949716;
      goto LABEL_33;
    }
  }
  audioStream_updateIsPlayingAndPostNotification(*(_QWORD *)a1, v4 != 0);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
  v6 = *(const void **)(DerivedStorage + 200);
  if (v6)
  {
    v27[0] = CFRetain(v6);
    if (v27[0])
      goto LABEL_17;
  }
  else
  {
    v27[0] = 0;
  }
  CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 88));
  v8 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v8)
  {
    v11 = 4294954514;
LABEL_33:
    APSLogErrorAt();
    v14 = 0;
    v13 = 0;
    Int64 = 0;
    v15 = 0;
    RequestDictionary = 0;
    v17 = 0;
    goto LABEL_34;
  }
  v9 = v8(CMBaseObject, CFSTR("TransportControlStream"), *MEMORY[0x1E0C9AE00], v27);
  if ((_DWORD)v9)
  {
    v11 = v9;
    goto LABEL_33;
  }
LABEL_17:
  RequestDictionary = audioStream_createRequestDictionary(*(CFMutableDictionaryRef *)a1);
  if (RequestDictionary)
  {
    CFDictionarySetInt64();
    if (*(_DWORD *)(a1 + 8) == 1)
    {
      v24[0] = *(_OWORD *)(a1 + 12);
      *(_OWORD *)((char *)v24 + 12) = *(_OWORD *)(a1 + 24);
      APSAudioTransportTimeUtilsEncodeToRequestResponseDictionary();
    }
    mach_absolute_time();
    v11 = APTransportStreamSendPlistMessageCreatingPlistReply();
    mach_absolute_time();
    if (v26)
    {
      APSAudioTransportTimeUtilsDecodeFromRequestResponseDictionary();
      Int64 = CFDictionaryGetInt64();
      v13 = CFDictionaryGetInt64();
      v14 = CFDictionaryGetInt64();
      v15 = CFDictionaryGetInt64();
      v16 = CFDictionaryGetInt64();
      if (v16)
        v11 = v16;
      else
        v11 = v11;
    }
    else
    {
      v14 = 0;
      v13 = 0;
      Int64 = 0;
      v15 = 0;
    }
    v24[0] = v25[0];
    *(_OWORD *)((char *)v24 + 12) = *(_OWORD *)((char *)v25 + 12);
    v17 = (const void *)APSAudioTransportTimeCopyDebugDesc();
    if (gLogCategory_APEndpointStreamBufferedAudio <= 50
      && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
    {
      UpTicksToMilliseconds();
      LogPrintF();
    }
  }
  else
  {
    APSLogErrorAt();
    v14 = 0;
    v13 = 0;
    Int64 = 0;
    v15 = 0;
    v17 = 0;
    v11 = 4294950535;
  }
LABEL_34:
  v18 = *(void (**)(uint64_t, _OWORD *, _QWORD *, uint64_t, uint64_t))(a1 + 40);
  if (v18)
  {
    v19 = *(_QWORD *)a1;
    v20 = *(_QWORD *)(a1 + 48);
    v24[0] = v25[0];
    *(_OWORD *)((char *)v24 + 12) = *(_OWORD *)((char *)v25 + 12);
    v21[0] = v14;
    v21[1] = v13;
    v22 = Int64;
    v23 = v15;
    v18(v19, v24, v21, v11, v20);
  }
  if ((_DWORD)v11 != -17580 && (_DWORD)v11)
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
    audioStream_updateIsPlayingAndPostNotification(*(_QWORD *)a1, 0);
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
  }
  if (v3)
    CFRelease(v3);
  if (v17)
    CFRelease(v17);
  if (v27[0])
    CFRelease(v27[0]);
  if (RequestDictionary)
    CFRelease(RequestDictionary);
  if (v26)
    CFRelease(v26);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

void audioStream_audioHoseGetAnchorInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v6;
  CFMutableDictionaryRef RequestDictionary;
  uint64_t v8;
  const void *v9;
  void (*v10)(CFMutableDictionaryRef, _OWORD *, _QWORD *, uint64_t, uint64_t);
  CFMutableDictionaryRef v11;
  uint64_t v12;
  _QWORD v13[2];
  int v14;
  int v15;
  _OWORD v16[2];
  _OWORD v17[2];
  CFTypeRef v18;
  CFTypeRef v19[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = 0;
  v19[0] = 0;
  v17[0] = *MEMORY[0x1E0CF72D8];
  *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)(MEMORY[0x1E0CF72D8] + 12);
  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    RequestDictionary = 0;
    v9 = 0;
    v8 = 4294950534;
    goto LABEL_19;
  }
  v3 = *(const void **)(DerivedStorage + 200);
  if (v3)
  {
    v19[0] = CFRetain(v3);
    if (v19[0])
      goto LABEL_12;
  }
  else
  {
    v19[0] = 0;
  }
  CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 88));
  v5 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v5)
  {
    v8 = 4294954514;
LABEL_17:
    APSLogErrorAt();
    RequestDictionary = 0;
    v9 = 0;
    goto LABEL_19;
  }
  v6 = v5(CMBaseObject, CFSTR("TransportControlStream"), *MEMORY[0x1E0C9AE00], v19);
  if ((_DWORD)v6)
  {
    v8 = v6;
    goto LABEL_17;
  }
LABEL_12:
  RequestDictionary = audioStream_createRequestDictionary(*(CFMutableDictionaryRef *)a1);
  if (RequestDictionary)
  {
    CFDictionarySetInt64();
    mach_absolute_time();
    APTransportStreamSendPlistMessageCreatingPlistReply();
    mach_absolute_time();
    v8 = 4294894965;
    v16[0] = v17[0];
    *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)((char *)v17 + 12);
    v9 = (const void *)APSAudioTransportTimeCopyDebugDesc();
    if (gLogCategory_APEndpointStreamBufferedAudio <= 50
      && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
    {
      UpTicksToMilliseconds();
      LogPrintF();
    }
  }
  else
  {
    APSLogErrorAt();
    v9 = 0;
    v8 = 4294950535;
  }
LABEL_19:
  v10 = *(void (**)(CFMutableDictionaryRef, _OWORD *, _QWORD *, uint64_t, uint64_t))(a1 + 16);
  if (v10)
  {
    v11 = *(CFMutableDictionaryRef *)a1;
    v12 = *(_QWORD *)(a1 + 24);
    v16[0] = v17[0];
    *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)((char *)v17 + 12);
    v13[0] = 0;
    v13[1] = 0;
    v14 = 0;
    v15 = 0;
    v10(v11, v16, v13, v8, v12);
  }
  if (v9)
    CFRelease(v9);
  if (v19[0])
    CFRelease(v19[0]);
  if (RequestDictionary)
    CFRelease(RequestDictionary);
  if (v18)
    CFRelease(v18);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

void audioStream_audioHoseSetCryptorInternal(_QWORD *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  uint64_t v4;
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v13;
  CFMutableDictionaryRef RequestDictionary;
  uint64_t Int64;
  CFTypeRef v16;
  const void *v17;
  const void *v18;
  CFTypeRef v19;
  CFTypeRef v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t (*v24)(uint64_t, uint64_t, CFTypeRef, CFDataRef *);
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_QWORD, _QWORD, uint64_t, _QWORD);
  const void *v30;
  CFTypeRef v31;
  CFTypeRef cf;
  CFDataRef theData;
  CFTypeRef v34;
  CFTypeRef v35;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v34 = 0;
  v35 = 0;
  cf = 0;
  theData = 0;
  v31 = 0;
  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    RequestDictionary = 0;
    v16 = 0;
    Int64 = 4294950534;
    goto LABEL_61;
  }
  if (!*(_BYTE *)(DerivedStorage + 208))
  {
    APSLogErrorAt();
    RequestDictionary = 0;
    v16 = 0;
    Int64 = 4294950533;
    goto LABEL_61;
  }
  if (!*(_QWORD *)(DerivedStorage + 120))
  {
    APSLogErrorAt();
    RequestDictionary = 0;
    v16 = 0;
LABEL_91:
    Int64 = 4294950536;
    goto LABEL_61;
  }
  v3 = *(const void **)(DerivedStorage + 200);
  if (v3)
  {
    v35 = CFRetain(v3);
    if (v35)
    {
      v4 = *MEMORY[0x1E0C9AE00];
      goto LABEL_14;
    }
  }
  else
  {
    v35 = 0;
  }
  CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 88));
  v6 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v6)
  {
    Int64 = 4294954514;
    goto LABEL_27;
  }
  v4 = *MEMORY[0x1E0C9AE00];
  v7 = v6(CMBaseObject, CFSTR("TransportControlStream"), *MEMORY[0x1E0C9AE00], &v35);
  if ((_DWORD)v7)
  {
    Int64 = v7;
    goto LABEL_27;
  }
LABEL_14:
  v8 = a1[2];
  v9 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v9)
  {
    Int64 = 4294954514;
LABEL_27:
    APSLogErrorAt();
    RequestDictionary = 0;
    v16 = 0;
    goto LABEL_61;
  }
  v10 = v9(v8, *MEMORY[0x1E0CA31A8], v4, &cf);
  if ((_DWORD)v10)
  {
    Int64 = v10;
    goto LABEL_27;
  }
  v11 = a1[2];
  v12 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v12)
  {
    Int64 = 4294954514;
    goto LABEL_27;
  }
  v13 = v12(v11, *MEMORY[0x1E0CA3208], v4, &v31);
  if ((_DWORD)v13)
  {
    Int64 = v13;
    goto LABEL_27;
  }
  if (!*(_QWORD *)(DerivedStorage + 136))
  {
    if (FigCFEqual())
    {
      if (FigCFEqual())
      {
        v16 = 0;
        goto LABEL_48;
      }
      APSLogErrorAt();
      if (gLogCategory_APEndpointStreamBufferedAudio > 90
        || gLogCategory_APEndpointStreamBufferedAudio == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_108;
      }
    }
    else
    {
      APSLogErrorAt();
      if (gLogCategory_APEndpointStreamBufferedAudio > 90
        || gLogCategory_APEndpointStreamBufferedAudio == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_108;
      }
    }
    LogPrintF();
LABEL_108:
    RequestDictionary = 0;
    goto LABEL_109;
  }
  RequestDictionary = audioStream_createRequestDictionary((CFMutableDictionaryRef)*a1);
  if (!RequestDictionary)
  {
    APSLogErrorAt();
LABEL_109:
    v16 = 0;
    goto LABEL_110;
  }
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  mach_absolute_time();
  APTransportStreamSendPlistMessageCreatingPlistReply();
  mach_absolute_time();
  if (v34)
  {
    Int64 = CFDictionaryGetInt64();
    v16 = 0;
    if (!(_DWORD)Int64)
    {
      v17 = *(const void **)(DerivedStorage + 136);
      if (v17)
        v16 = CFRetain(v17);
      else
        v16 = 0;
      v18 = *(const void **)(DerivedStorage + 144);
      v19 = cf;
      *(_QWORD *)(DerivedStorage + 144) = cf;
      if (v19)
        CFRetain(v19);
      if (v18)
        CFRelease(v18);
      Int64 = *(_QWORD *)(DerivedStorage + 152);
      v20 = v31;
      *(_QWORD *)(DerivedStorage + 152) = v31;
      if (v20)
        CFRetain(v20);
      if (Int64)
      {
        CFRelease((CFTypeRef)Int64);
        Int64 = 0;
      }
    }
  }
  else
  {
    v16 = 0;
    Int64 = 4294894965;
  }
  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    UpTicksToMilliseconds();
    LogPrintF();
  }
  if ((_DWORD)Int64)
    goto LABEL_104;
  CFRelease(RequestDictionary);
  if (v34)
  {
    CFRelease(v34);
    v34 = 0;
  }
LABEL_48:
  v21 = a1[2];
  v22 = *(_QWORD *)(DerivedStorage + 120);
  v23 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v23 < 8uLL || (v24 = (uint64_t (*)(uint64_t, uint64_t, CFTypeRef, CFDataRef *))v23[27]) == 0)
  {
    Int64 = 4294954514;
LABEL_60:
    APSLogErrorAt();
    RequestDictionary = 0;
    goto LABEL_61;
  }
  v25 = v24(v21, v22, v16, &theData);
  if ((_DWORD)v25)
  {
    Int64 = v25;
    goto LABEL_60;
  }
  if (!theData)
  {
    APSLogErrorAt();
    RequestDictionary = 0;
    goto LABEL_91;
  }
  v26 = *(const void **)(DerivedStorage + 136);
  if (v26)
  {
    CFRelease(v26);
    *(_QWORD *)(DerivedStorage + 136) = 0;
  }
  RequestDictionary = audioStream_createRequestDictionary((CFMutableDictionaryRef)*a1);
  if (!RequestDictionary)
  {
    APSLogErrorAt();
LABEL_110:
    Int64 = 4294950535;
    goto LABEL_61;
  }
  v27 = CFDictionarySetInt64();
  if ((_DWORD)v27)
  {
    Int64 = v27;
LABEL_104:
    APSLogErrorAt();
    goto LABEL_61;
  }
  CFDataGetBytePtr(theData);
  CFDataGetLength(theData);
  v28 = CFDictionarySetData();
  if ((_DWORD)v28)
  {
    Int64 = v28;
    goto LABEL_104;
  }
  mach_absolute_time();
  APTransportStreamSendPlistMessageCreatingPlistReply();
  mach_absolute_time();
  if (v34)
    Int64 = CFDictionaryGetInt64();
  else
    Int64 = 4294894965;
  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    UpTicksToMilliseconds();
    LogPrintF();
  }
LABEL_61:
  v29 = (void (*)(_QWORD, _QWORD, uint64_t, _QWORD))a1[3];
  if (v29)
    v29(*a1, a1[1], Int64, a1[4]);
  if (cf)
    CFRelease(cf);
  if (v31)
    CFRelease(v31);
  if (v16)
    CFRelease(v16);
  if (theData)
    CFRelease(theData);
  if (v35)
    CFRelease(v35);
  if (RequestDictionary)
    CFRelease(RequestDictionary);
  if (v34)
    CFRelease(v34);
  v30 = (const void *)a1[2];
  if (v30)
    CFRelease(v30);
  if (*a1)
    CFRelease((CFTypeRef)*a1);
}

void audioStream_audioHoseSetMagicCookieInternal(_QWORD *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v6;
  CFMutableDictionaryRef RequestDictionary;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD, _QWORD, uint64_t, _QWORD);
  const void *v12;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    RequestDictionary = 0;
    v10 = 4294950534;
    goto LABEL_22;
  }
  if (!*(_BYTE *)(DerivedStorage + 208))
  {
    APSLogErrorAt();
    RequestDictionary = 0;
    v10 = 4294950533;
    goto LABEL_22;
  }
  v3 = *(const void **)(DerivedStorage + 200);
  if (v3)
  {
    cf = CFRetain(v3);
    if (cf)
      goto LABEL_13;
  }
  else
  {
    cf = 0;
  }
  CMBaseObject = APSenderSessionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 88));
  v5 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v5)
  {
    v10 = 4294954514;
LABEL_20:
    APSLogErrorAt();
    RequestDictionary = 0;
    goto LABEL_22;
  }
  v6 = v5(CMBaseObject, CFSTR("TransportControlStream"), *MEMORY[0x1E0C9AE00], &cf);
  if ((_DWORD)v6)
  {
    v10 = v6;
    goto LABEL_20;
  }
LABEL_13:
  RequestDictionary = audioStream_createRequestDictionary((CFMutableDictionaryRef)*a1);
  if (!RequestDictionary)
  {
    APSLogErrorAt();
    v10 = 4294950535;
    goto LABEL_22;
  }
  v8 = CFDictionarySetInt64();
  if ((_DWORD)v8)
  {
    v10 = v8;
LABEL_38:
    APSLogErrorAt();
    goto LABEL_22;
  }
  CFDataGetBytePtr((CFDataRef)a1[2]);
  CFDataGetLength((CFDataRef)a1[2]);
  v9 = CFDictionarySetData();
  if ((_DWORD)v9)
  {
    v10 = v9;
    goto LABEL_38;
  }
  mach_absolute_time();
  v10 = APTransportStreamSendPlistMessageCreatingPlistReply();
  mach_absolute_time();
  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    UpTicksToMilliseconds();
    LogPrintF();
  }
LABEL_22:
  v11 = (void (*)(_QWORD, _QWORD, uint64_t, _QWORD))a1[3];
  if (v11)
    v11(*a1, a1[1], v10, a1[4]);
  if (cf)
    CFRelease(cf);
  if (RequestDictionary)
    CFRelease(RequestDictionary);
  v12 = (const void *)a1[2];
  if (v12)
    CFRelease(v12);
  if (*a1)
    CFRelease((CFTypeRef)*a1);
}

void audioStream_audioHoseEnableLoudnessNormalizationInternal(uint64_t a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v3;
  uint64_t CMBaseObject;
  unsigned int (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  __CFDictionary *RequestDictionary;
  __CFDictionary *v7;
  const void **v8;
  CFTypeRef cf;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (*DerivedStorage)
  {
    APSLogErrorAt();
  }
  else
  {
    v3 = DerivedStorage;
    if (gLogCategory_APEndpointStreamBufferedAudio <= 50
      && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMBaseObject = APSenderSessionGetCMBaseObject(*((_QWORD *)v3 + 11));
    v5 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
    if (!v5 || v5(CMBaseObject, CFSTR("TransportControlStream"), *MEMORY[0x1E0C9AE00], &cf))
    {
      APSLogErrorAt();
      v7 = 0;
    }
    else
    {
      RequestDictionary = audioStream_createRequestDictionary(*(CFMutableDictionaryRef *)a1);
      v7 = RequestDictionary;
      if (!RequestDictionary)
        goto LABEL_22;
      v8 = (const void **)MEMORY[0x1E0C9AE50];
      if (!*(_BYTE *)(a1 + 8))
        v8 = (const void **)MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(RequestDictionary, CFSTR("loudnessNormalizationEnabled"), *v8);
      if (APTransportStreamSendPlistMessage())
LABEL_22:
        APSLogErrorAt();
    }
    if (cf)
      CFRelease(cf);
    if (v7)
      CFRelease(v7);
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

uint64_t audioStream_Suspend(const void *a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t audioStream_Resume(const void *a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t audioStream_Dissociate()
{
  if (!*(_BYTE *)CMBaseObjectGetDerivedStorage())
    audioStream_dissociateInternal();
  return 0;
}

uint64_t audioStream_Control()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (FigCFEqual())
  {
    if (*(_BYTE *)(DerivedStorage + 115))
      goto LABEL_10;
LABEL_11:
    APSLogErrorAt();
    return 4294950536;
  }
  if (FigCFEqual())
  {
    if (*(_BYTE *)(DerivedStorage + 115))
    {
LABEL_10:
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      return 0;
    }
    goto LABEL_11;
  }
  return 4294950536;
}

void audioStream_suspendAsync(uint64_t a1)
{
  const void *v2;

  CMBaseObjectGetDerivedStorage();
  audioStream_suspendInternal(*(_QWORD *)a1, *(const __CFDictionary **)(a1 + 8));
  if (*(_QWORD *)(a1 + 16))
  {
    CFRetain(*(CFTypeRef *)a1);
    APSDispatchAsyncFHelper();
  }
  CFRelease(*(CFTypeRef *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
}

void audioStream_suspendOrResumeCompletionCallback(CFTypeRef *a1)
{
  ((void (*)(CFTypeRef, _QWORD, CFTypeRef))a1[2])(*a1, *((unsigned int *)a1 + 2), a1[3]);
  CFRelease(*a1);
}

void audioStream_resumeAsync(CFDictionaryRef *a1)
{
  const __CFDictionary *v2;
  uint64_t DerivedStorage;
  uint64_t Int64;
  char v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  const void *v11;
  CFTypeRef v12;
  const void *v13;
  CFTypeRef v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  const __CFString *AudioModeForEndpointStream;
  __CFDictionary *Mutable;
  __CFDictionary *v23;
  const void *v24;
  const void *v25;
  CFMutableDictionaryRef v26;
  __CFDictionary *v27;
  __CFDictionary *v28;
  __CFDictionary *v29;
  const void *v30;
  __CFString **v31;
  const void *v32;
  const void *v33;
  CFMutableDictionaryRef v34;
  int v35;
  int v36;
  uint64_t (*v37)(uint64_t, uint64_t, __CFDictionary *, CFDictionaryRef *, _QWORD, _QWORD);
  _DWORD *v38;
  uint64_t v39;
  CFTypeRef v40;
  uint64_t v41;
  char v42;
  const void *v43;
  unsigned int v44;
  CFDictionaryRef v45;
  CFDictionaryRef v46;
  int v47;
  uint64_t v48;
  double v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  CFMutableDictionaryRef v57;
  __CFDictionary *v58;
  const void *v59;
  const void *v60;
  uint64_t (*v61)(uint64_t, uint64_t, __CFDictionary *, CFDictionaryRef *);
  unsigned int v62;
  uint64_t v63;
  const void *v64;
  uint64_t CMBaseObject;
  uint64_t (*v66)(uint64_t, _QWORD, const void *);
  unsigned int v67;
  CFDictionaryRef v68;
  uint64_t (*v69)(CFDictionaryRef, _QWORD, _QWORD, CFDictionaryRef);
  unsigned int v70;
  CFDictionaryRef v71;
  uint64_t (*v72)(CFDictionaryRef);
  unsigned int v73;
  CFDictionaryRef v74;
  uint64_t (*v75)(CFDictionaryRef);
  unsigned int v76;
  int IsFeatureEnabled;
  CFDictionaryRef v78;
  uint64_t v79;
  uint64_t (*v80)(CFDictionaryRef, _QWORD, CFDictionaryRef);
  unsigned int v81;
  uint64_t (*v82)(CFDictionaryRef, _QWORD, CFDictionaryRef);
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t);
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t);
  unsigned int v92;
  CFMutableDictionaryRef v93;
  uint64_t (*v94)(uint64_t, uint64_t, CFMutableDictionaryRef, CFDictionaryRef *);
  unsigned int v95;
  unsigned int v96;
  _DWORD *v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  unsigned int v100;
  CFStringRef v101;
  CFDictionaryRef v102;
  CFTypeRef v103;
  uint64_t (*v104)(CFDictionaryRef, CFTypeRef, CFStringRef);
  unsigned int v105;
  unsigned int v106;
  CFDictionaryRef v107;
  uint64_t (*v108)(CFDictionaryRef, _QWORD, _QWORD, CFDictionaryRef);
  unsigned int v109;
  CFDictionaryRef v110;
  uint64_t (*v111)(CFDictionaryRef);
  unsigned int v112;
  CFDictionaryRef v113;
  uint64_t (*v114)(CFDictionaryRef);
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t);
  int v118;
  uint64_t ProtocolVTable;
  uint64_t v120;
  uint64_t (*v121)(const void *, CFDictionaryRef, _QWORD, uint64_t *);
  unsigned int v122;
  const void *v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t);
  uint64_t v127;
  uint64_t v128;
  void (*v129)(uint64_t);
  const __CFDictionary *v130;
  const __CFDictionary *v131;
  CFDictionaryRef v132;
  _BOOL4 v133;
  char v134;
  CFTypeRef v135;
  const void *Value;
  CFDictionaryRef *v137;
  int v138;
  const __CFData *theData;
  int v140;
  const void *v141;
  int v142;
  int v143;
  CFTypeRef v144;
  const __CFAllocator *allocator;
  CFTypeRef v146;
  uint64_t v147;
  CFDictionaryRef v148;
  CFDictionaryRef v149[4];
  uint64_t v150;
  uint64_t v151;
  CFTypeRef v152;
  CFTypeRef v153;
  CFTypeRef v154;
  CFTypeRef v155;
  CFTypeRef v156[2];

  CMBaseObjectGetDerivedStorage();
  v2 = a1[1];
  v148 = *a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v150 = 0;
  v151 = 0;
  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage || *(_BYTE *)(DerivedStorage + 208))
  {
    v44 = 0;
    goto LABEL_307;
  }
  if (v2)
  {
    Value = CFDictionaryGetValue(v2, CFSTR("HoseRegistrar"));
    theData = (const __CFData *)CFDictionaryGetValue(v2, CFSTR("EncryptionKey"));
    CFDictionaryGetValue(v2, CFSTR("InitialTransportAudioFormatDescription"));
    Int64 = CFDictionaryGetInt64();
    if (*(_BYTE *)(DerivedStorage + 115))
    {
      CFDictionaryGetValue(v2, CFSTR("AudioSessionID"));
      CFDictionaryGetValue(v2, CFSTR("AudioSessionCategory"));
      CFDictionaryGetValue(v2, CFSTR("AudioSessionMode"));
      if (gLogCategory_APEndpointStreamBufferedAudio <= 50
        && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    v6 = (_BYTE *)CMBaseObjectGetDerivedStorage();
    v149[0] = 0;
    v155 = 0;
    v156[0] = 0;
    v153 = 0;
    v154 = 0;
    v152 = 0;
    if (!*v6)
    {
      v7 = v6;
      if (!v6[208])
      {
        v8 = FigCFDictionaryGetValue();
        if (v8)
        {
          v9 = (const void *)v8;
          if (APSThreadSafeDictionaryCopyValueIfPresent())
          {
            mach_absolute_time();
            APSThreadSafeDictionarySetInt64();
            v10 = (const void *)*((_QWORD *)v7 + 39);
            *((_QWORD *)v7 + 39) = v9;
            CFRetain(v9);
            if (v10)
              CFRelease(v10);
          }
          else
          {
            APSThreadSafeDictionaryCreate();
            APSLogErrorAt();
          }
        }
      }
    }
    if (v149[0])
      CFRelease(v149[0]);
    if (v156[0])
      CFRelease(v156[0]);
    if (v155)
      CFRelease(v155);
    if (v154)
      CFRelease(v154);
    if (v153)
      CFRelease(v153);
    if (v152)
      CFRelease(v152);
    if (Int64)
    {
      if (!*(_BYTE *)(DerivedStorage + 96))
      {
        if (gLogCategory_APEndpointStreamBufferedAudio <= 50
          && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v44 = -6735;
        goto LABEL_306;
      }
      v140 = 0;
      v5 = 1;
    }
    else
    {
      v5 = 0;
      v140 = 1;
    }
  }
  else
  {
    v5 = 0;
    theData = 0;
    Value = 0;
    v140 = 1;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
  v11 = *(const void **)(DerivedStorage + 184);
  if (v11)
    v12 = CFRetain(v11);
  else
    v12 = 0;
  v13 = *(const void **)(DerivedStorage + 264);
  if (v13)
    v14 = CFRetain(v13);
  else
    v14 = 0;
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
  v137 = a1;
  if (!APSAudioFormatDescriptionListContainsFormat())
  {
    APSLogErrorAt();
    v44 = APSSignalErrorAt();
LABEL_125:
    v45 = 0;
    v46 = 0;
    v40 = 0;
    goto LABEL_289;
  }
  if (*(_BYTE *)(DerivedStorage + 113))
  {
    v15 = RandomBytes();
    if (v15)
    {
      v44 = v15;
      APSLogErrorAt();
      goto LABEL_125;
    }
  }
  v147 = APSGetFBOPropertyInt64();
  v16 = APSGetFBOPropertyInt64();
  v135 = v12;
  v134 = v5;
  if (APSSettingsIsFeatureEnabled())
  {
    v17 = *(_QWORD *)(DerivedStorage + 80);
    v18 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v18)
      v19 = v18(v17, 84);
    else
      v19 = 0;
    v133 = v19 != 0;
  }
  else
  {
    v133 = 0;
  }
  v20 = *(_QWORD *)(DerivedStorage + 88);
  v142 = *(unsigned __int8 *)(DerivedStorage + 112);
  v143 = *(unsigned __int8 *)(DerivedStorage + 114);
  v138 = *(unsigned __int8 *)(DerivedStorage + 113);
  v141 = *(const void **)(DerivedStorage + 128);
  v149[0] = 0;
  kdebug_trace();
  AudioModeForEndpointStream = APSenderSessionUtilityGetAudioModeForEndpointStream();
  APSAudioFormatDescriptionGetCompressionType();
  APSAudioFormatDescriptionGetLegacyFormatMask();
  APSAudioFormatDescriptionGetAudioFormatIndex();
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v23 = Mutable;
  v146 = v14;
  if (!Mutable)
  {
    APSLogErrorAt();
    LODWORD(v156[0]) = -6728;
LABEL_123:
    APSLogErrorAt();
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v38 = (_DWORD *)&unk_1EF905000;
    goto LABEL_99;
  }
  v24 = (const void *)*MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(Mutable, CFSTR("supportsDynamicStreamID"), (const void *)*MEMORY[0x1E0C9AE50]);
  CFDictionarySetInt64();
  APSAudioFormatDescriptionGetFramesPerPacket();
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  if (v147)
  {
    CFDictionarySetValue(v23, CFSTR("audioType"), CFSTR("media"));
    if (v140)
      v25 = (const void *)*MEMORY[0x1E0C9AE40];
    else
      v25 = v24;
    CFDictionarySetValue(v23, CFSTR("packetFormatAPAP"), v25);
  }
  CFDictionarySetValue(v23, CFSTR("audioMode"), AudioModeForEndpointStream);
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  if (theData)
  {
    CFDataGetBytePtr(theData);
    CFDataGetLength(theData);
    CFDictionarySetData();
  }
  if (v16)
  {
    v26 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v26)
    {
      APSLogErrorAt();
      v27 = 0;
LABEL_137:
      v34 = 0;
      goto LABEL_138;
    }
    CFDictionarySetInt64();
    CFDictionarySetValue(v23, CFSTR("soundCheckMediaKind"), v26);
  }
  else
  {
    v26 = 0;
  }
  if (!v142)
  {
    v27 = 0;
    v32 = v146;
    v33 = v141;
    if (!v146)
    {
LABEL_83:
      if (v33)
        CFDictionarySetValue(v23, CFSTR("pkdDeviceContext"), v33);
      v34 = 0;
      v36 = 0;
      if (v27)
        goto LABEL_86;
      goto LABEL_87;
    }
LABEL_82:
    CFDictionarySetValue(v23, CFSTR("clientID"), v32);
    goto LABEL_83;
  }
  v27 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v27)
    goto LABEL_136;
  if (v143)
    goto LABEL_77;
  v28 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v28)
  {
LABEL_136:
    APSLogErrorAt();
    goto LABEL_137;
  }
  v29 = v28;
  if (theData)
    v30 = v24;
  else
    v30 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(v28, CFSTR("streamConnectionKeyUseStreamEncryptionKey"), v30);
  if (v133)
    CFDictionarySetValue(v29, CFSTR("streamConnectionKeyTransportProtocol"), CFSTR("QUIC"));
  v31 = kAPEndpointStreamConnectionType_APAP;
  if (v140)
    v31 = kAPEndpointStreamConnectionType_RTP;
  CFDictionarySetValue(v27, *v31, v29);
  CFRelease(v29);
LABEL_77:
  v32 = v146;
  v33 = v141;
  if (!v138)
    goto LABEL_81;
  v34 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v34)
  {
    APSLogErrorAt();
LABEL_138:
    v36 = -6728;
    goto LABEL_139;
  }
  v35 = CFDictionarySetInt64();
  if (!v35)
  {
    CFDictionarySetValue(v27, CFSTR("streamConnectionTypeMediaDataControl"), v34);
    CFRelease(v34);
LABEL_81:
    CFDictionarySetValue(v23, CFSTR("streamConnections"), v27);
    if (!v146)
      goto LABEL_83;
    goto LABEL_82;
  }
  v36 = v35;
  APSLogErrorAt();
LABEL_139:
  CFRelease(v23);
  v23 = 0;
  if (v27)
LABEL_86:
    CFRelease(v27);
LABEL_87:
  if (v34)
    CFRelease(v34);
  if (v26)
    CFRelease(v26);
  LODWORD(v156[0]) = v36;
  if (v36)
    goto LABEL_123;
  mach_absolute_time();
  v37 = *(uint64_t (**)(uint64_t, uint64_t, __CFDictionary *, CFDictionaryRef *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v37)
  {
    LODWORD(v156[0]) = -12782;
    v38 = (_DWORD *)&unk_1EF905000;
    goto LABEL_98;
  }
  LODWORD(v156[0]) = v37(v20, 103, v23, v149, 0, 0);
  v38 = &unk_1EF905000;
  if (LODWORD(v156[0]))
  {
LABEL_98:
    APSLogErrorAt();
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
LABEL_99:
    v12 = v135;
    goto LABEL_144;
  }
  mach_absolute_time();
  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    UpTicksToMilliseconds();
    LogPrintF();
  }
  v39 = CFDictionaryGetInt64();
  v41 = CFDictionaryGetInt64();
  if (v142)
  {
    CFDictionaryGetTypeID();
    CFDictionaryGetTypedValue();
    v12 = v135;
    if (LODWORD(v156[0]))
      goto LABEL_141;
    if (!v143)
    {
      CFDictionaryGetTypeID();
      CFDictionaryGetTypedValue();
      if (LODWORD(v156[0]))
        goto LABEL_141;
      CFDictionaryGetInt64();
      if (LODWORD(v156[0]))
        goto LABEL_141;
    }
    if (v138)
    {
      CFDictionaryGetTypeID();
      CFDictionaryGetTypedValue();
      if (LODWORD(v156[0]))
        goto LABEL_141;
      CFDictionaryGetInt64();
      if (LODWORD(v156[0]))
        goto LABEL_141;
    }
  }
  else
  {
    CFDictionaryGetInt64();
    v12 = v135;
    if (LODWORD(v156[0]))
      goto LABEL_141;
  }
  if (v143)
  {
    *(_DWORD *)(DerivedStorage + 64) = 5000000;
    goto LABEL_117;
  }
  *(_DWORD *)(DerivedStorage + 64) = CFDictionaryGetInt64();
  if (LODWORD(v156[0]))
  {
LABEL_141:
    APSLogErrorAt();
    goto LABEL_142;
  }
LABEL_117:
  if (v141)
  {
    v43 = CFDictionaryGetValue(v149[0], CFSTR("pkdDeviceContext"));
    if (v43)
    {
      v40 = CFRetain(v43);
    }
    else
    {
      APSLogErrorAt();
      v40 = 0;
      LODWORD(v156[0]) = -16765;
    }
    goto LABEL_143;
  }
LABEL_142:
  v40 = 0;
LABEL_143:
  v42 = 1;
LABEL_144:
  kdebug_trace();
  if (v23)
    CFRelease(v23);
  if (v149[0])
    CFRelease(v149[0]);
  v44 = v156[0];
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
  *(_QWORD *)(DerivedStorage + 176) = v39;
  *(_BYTE *)(DerivedStorage + 274) = v42;
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
  if (v44)
  {
    APSLogErrorAt();
    v45 = 0;
    v46 = 0;
    v14 = v146;
    goto LABEL_289;
  }
  if (v147)
  {
    if (APSGetFBOPropertyInt64())
    {
      v47 = v38[470];
      if (v47 > 60 || v47 == -1 && !_LogCategory_Initialize())
        goto LABEL_162;
    }
    else
    {
      v48 = *(_QWORD *)(DerivedStorage + 320);
      APSAudioFormatDescriptionGetSampleRate();
      if (!APCarPlayAnalyticsInitASRCollection(v48, v49))
        goto LABEL_162;
      v50 = v38[470];
      if (v50 > 60 || v50 == -1 && !_LogCategory_Initialize())
        goto LABEL_162;
      APSAudioFormatDescriptionGetSampleRate();
    }
    LogPrintF();
LABEL_162:
    if (APCarPlayAnalyticsInitAudioAnomaliesCollection(*(_QWORD *)(DerivedStorage + 320)))
    {
      v51 = v38[470];
      if (v51 <= 60 && (v51 != -1 || _LogCategory_Initialize()))
        LogPrintF();
    }
    if (APCarPlayAnalyticsInitAudioFormatsCollection(*(_QWORD *)(DerivedStorage + 320)))
    {
      v52 = v38[470];
      if (v52 <= 60 && (v52 != -1 || _LogCategory_Initialize()))
        LogPrintF();
    }
    APCarPlayAnalyticsStartCollections(*(_QWORD *)(DerivedStorage + 320), 103, v41, 0);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
  }
  v53 = v38[470];
  if (v53 <= 50 && (v53 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v144 = v40;
  if (*(_BYTE *)(DerivedStorage + 114))
  {
    v45 = 0;
    v14 = v146;
    goto LABEL_226;
  }
  v54 = *(_QWORD *)(DerivedStorage + 88);
  v149[0] = 0;
  v55 = APTransportStreamIDMakeWithPort();
  v56 = v38[470];
  if (v56 <= 30 && (v56 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  kdebug_trace();
  v57 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v14 = v146;
  if (!v57)
  {
    APSLogErrorAt();
    kdebug_trace();
    v45 = 0;
    v44 = -71820;
LABEL_317:
    APSLogErrorAt();
    v46 = 0;
    goto LABEL_318;
  }
  v58 = v57;
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  v59 = (const void *)*MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(v58, CFSTR("AllowMessageAggregation"), (const void *)*MEMORY[0x1E0C9AE50]);
  CFDictionarySetInt64();
  if (v133)
    v60 = v59;
  else
    v60 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(v58, CFSTR("UseQUIC"), v60);
  v61 = *(uint64_t (**)(uint64_t, uint64_t, __CFDictionary *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 64);
  if (!v61)
  {
    v44 = -12782;
LABEL_203:
    APSLogErrorAt();
LABEL_204:
    v40 = v144;
    kdebug_trace();
    v45 = 0;
    goto LABEL_216;
  }
  v62 = v61(v54, v55, v58, v149);
  if (v62)
  {
    v44 = v62;
    goto LABEL_203;
  }
  v63 = CFNumberCreateInt64();
  if (!v63)
  {
    APSLogErrorAt();
    v44 = -6728;
    goto LABEL_204;
  }
  v64 = (const void *)v63;
  CMBaseObject = FigTransportStreamGetCMBaseObject();
  v66 = *(uint64_t (**)(uint64_t, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v66)
  {
    v44 = -12782;
    goto LABEL_214;
  }
  v67 = v66(CMBaseObject, *MEMORY[0x1E0CF1F80], v64);
  if (v67)
  {
    v44 = v67;
    goto LABEL_214;
  }
  v68 = v149[0];
  v69 = *(uint64_t (**)(CFDictionaryRef, _QWORD, _QWORD, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 24);
  if (!v69)
  {
    v44 = -12782;
    goto LABEL_214;
  }
  v70 = v69(v68, audioStream_receivedAudioDataMessage, 0, v148);
  if (v70)
  {
    v44 = v70;
    goto LABEL_214;
  }
  v71 = v149[0];
  v72 = *(uint64_t (**)(CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v72)
  {
    v44 = -12782;
    goto LABEL_214;
  }
  v73 = v72(v71);
  if (v73)
  {
    v44 = v73;
    goto LABEL_214;
  }
  v74 = v149[0];
  v75 = *(uint64_t (**)(CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v75)
  {
    v44 = -12782;
    goto LABEL_214;
  }
  v76 = v75(v74);
  if (v76)
  {
    v44 = v76;
    goto LABEL_214;
  }
  IsFeatureEnabled = APSSettingsIsFeatureEnabled();
  v78 = v149[0];
  v79 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (IsFeatureEnabled)
  {
    v80 = *(uint64_t (**)(CFDictionaryRef, _QWORD, CFDictionaryRef))(v79 + 104);
    if (!v80)
    {
      v44 = -12782;
      goto LABEL_214;
    }
    v81 = v80(v78, audioStream_audioDataBatchCallback, v148);
    if (v81)
    {
      v44 = v81;
LABEL_214:
      APSLogErrorAt();
      v45 = 0;
      goto LABEL_215;
    }
  }
  else
  {
    v82 = *(uint64_t (**)(CFDictionaryRef, _QWORD, CFDictionaryRef))(v79 + 64);
    if (!v82)
    {
      v44 = -12782;
      goto LABEL_214;
    }
    v83 = v82(v78, audioStream_audioDataCallback, v148);
    if (v83)
    {
      v44 = v83;
      goto LABEL_214;
    }
  }
  v44 = 0;
  v45 = v149[0];
  v149[0] = 0;
LABEL_215:
  kdebug_trace();
  CFRelease(v64);
  v40 = v144;
LABEL_216:
  CFRelease(v58);
  if (v149[0])
  {
    v84 = FigTransportStreamGetCMBaseObject();
    if (v84)
    {
      v85 = v84;
      v86 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v86)
        v86(v85);
    }
    CFRelease(v149[0]);
  }
  if (v44)
    goto LABEL_317;
  v87 = v38[470];
  if (v87 <= 50 && (v87 != -1 || _LogCategory_Initialize()))
    LogPrintF();
LABEL_226:
  if (!*(_BYTE *)(DerivedStorage + 113))
  {
    v46 = 0;
    goto LABEL_276;
  }
  v88 = *(_QWORD *)(DerivedStorage + 88);
  v89 = v151;
  v149[0] = 0;
  v90 = APTransportStreamIDMakeWithPort();
  v156[0] = 0;
  kdebug_trace();
  v91 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v91)
  {
    v44 = -12782;
LABEL_248:
    APSLogErrorAt();
    v46 = 0;
    v93 = 0;
LABEL_251:
    v101 = 0;
LABEL_252:
    v97 = (_DWORD *)&unk_1EF905000;
    goto LABEL_260;
  }
  v92 = v91(v88);
  if (v92)
  {
    v44 = v92;
    goto LABEL_248;
  }
  v93 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v93)
  {
    APSLogErrorAt();
    v46 = 0;
    v101 = 0;
    v44 = -6728;
    goto LABEL_252;
  }
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  CFDictionarySetInt64();
  v94 = *(uint64_t (**)(uint64_t, uint64_t, CFMutableDictionaryRef, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 64);
  if (!v94)
  {
    v44 = -12782;
LABEL_250:
    APSLogErrorAt();
    v46 = 0;
    goto LABEL_251;
  }
  v95 = v94(v88, v90, v93, v149);
  if (v95)
  {
    v44 = v95;
    goto LABEL_250;
  }
  v96 = APSSetFBOPropertyInt64();
  v97 = &unk_1EF905000;
  if (v96)
  {
    v44 = v96;
    goto LABEL_254;
  }
  v98 = APSenderSessionGetCMBaseObject(v88);
  v99 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
  if (!v99)
  {
    v44 = -12782;
LABEL_254:
    APSLogErrorAt();
    v46 = 0;
    v101 = 0;
    goto LABEL_260;
  }
  v100 = v99(v98, CFSTR("KeyHolder"), allocator, v156);
  if (v100)
  {
    v44 = v100;
    goto LABEL_254;
  }
  v101 = APKeyHolderCoreUtilsEncryptionContextDataStreamCreateWithSeed(allocator, v89);
  if (v101)
  {
    v102 = v149[0];
    v103 = v156[0];
    v104 = *(uint64_t (**)(CFDictionaryRef, CFTypeRef, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 80);
    if (v104)
    {
      v105 = v104(v102, v103, v101);
      if (v105)
      {
        v44 = v105;
      }
      else
      {
        v106 = APSSetFBOPropertyInt64();
        if (v106)
        {
          v44 = v106;
        }
        else
        {
          v107 = v149[0];
          v108 = *(uint64_t (**)(CFDictionaryRef, _QWORD, _QWORD, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 24);
          if (v108)
          {
            v109 = v108(v107, audioStream_receivedMediaDataControlMessage, 0, v148);
            if (v109)
            {
              v44 = v109;
            }
            else
            {
              v110 = v149[0];
              v111 = *(uint64_t (**)(CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
              if (v111)
              {
                v112 = v111(v110);
                if (v112)
                {
                  v44 = v112;
                }
                else
                {
                  v113 = v149[0];
                  v114 = *(uint64_t (**)(CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                  if (v114)
                  {
                    v44 = v114(v113);
                    if (!v44)
                    {
                      v46 = v149[0];
                      v149[0] = 0;
                      goto LABEL_260;
                    }
                  }
                  else
                  {
                    v44 = -12782;
                  }
                }
              }
              else
              {
                v44 = -12782;
              }
            }
          }
          else
          {
            v44 = -12782;
          }
        }
      }
    }
    else
    {
      v44 = -12782;
    }
    APSLogErrorAt();
    v46 = 0;
  }
  else
  {
    APSLogErrorAt();
    v46 = 0;
    v44 = -6728;
  }
LABEL_260:
  kdebug_trace();
  if (v149[0])
  {
    v115 = FigTransportStreamGetCMBaseObject();
    if (v115)
    {
      v116 = v115;
      v117 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v117)
        v117(v116);
    }
    CFRelease(v149[0]);
    v149[0] = 0;
  }
  if (v93)
    CFRelease(v93);
  if (v156[0])
    CFRelease(v156[0]);
  if (v101)
    CFRelease(v101);
  if (v44)
  {
    APSLogErrorAt();
LABEL_318:
    v40 = v144;
    goto LABEL_289;
  }
  v118 = v97[470];
  v40 = v144;
  if (v118 <= 50 && (v118 != -1 || _LogCategory_Initialize()))
    LogPrintF();
LABEL_276:
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
  *(_BYTE *)(DerivedStorage + 273) = v134;
  *(_QWORD *)(DerivedStorage + 192) = v45;
  *(_QWORD *)(DerivedStorage + 200) = v46;
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
  APSEndpointStreamAudioHoseRegistrarProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (v120 = *(_QWORD *)(ProtocolVTable + 16)) == 0)
  {
    v44 = -12788;
LABEL_287:
    APSLogErrorAt();
LABEL_288:
    v45 = 0;
    v46 = 0;
    goto LABEL_289;
  }
  v121 = *(uint64_t (**)(const void *, CFDictionaryRef, _QWORD, uint64_t *))(v120 + 8);
  if (!v121)
  {
    v44 = -12782;
    goto LABEL_287;
  }
  v122 = v121(Value, v148, 0, &v150);
  if (v122)
  {
    v44 = v122;
    goto LABEL_287;
  }
  if (*(_QWORD *)(v150 + 8))
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
    v123 = *(const void **)(DerivedStorage + 248);
    *(_QWORD *)(DerivedStorage + 248) = Value;
    if (Value)
      CFRetain(Value);
    if (v123)
      CFRelease(v123);
    *(_QWORD *)(DerivedStorage + 256) = v150;
    *(_BYTE *)(DerivedStorage + 208) = 1;
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
    v44 = APSEventRecorderRecordEvent();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    audioStream_audioHoseNotifyAudioAvailableInternal(v148);
    goto LABEL_288;
  }
  APSLogErrorAt();
  v45 = 0;
  v46 = 0;
  v44 = -16760;
LABEL_289:
  if (v12)
    CFRelease(v12);
  if (v40)
    CFRelease(v40);
  if (v45)
  {
    v124 = FigTransportStreamGetCMBaseObject();
    if (v124)
    {
      v125 = v124;
      v126 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v126)
        v126(v125);
    }
    CFRelease(v45);
  }
  if (v46)
  {
    v127 = FigTransportStreamGetCMBaseObject();
    if (v127)
    {
      v128 = v127;
      v129 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v129)
        v129(v128);
    }
    CFRelease(v46);
  }
  if (v14)
    CFRelease(v14);
  a1 = v137;
  if (v44)
LABEL_306:
    audioStream_suspendInternal((uint64_t)v148, 0);
LABEL_307:
  v130 = a1[2];
  if (v130)
  {
    v149[0] = *a1;
    v149[1] = (CFDictionaryRef)v44;
    v131 = a1[3];
    v149[2] = v130;
    v149[3] = v131;
    CFRetain(v149[0]);
    APSDispatchAsyncFHelper();
  }
  CFRelease(*a1);
  v132 = a1[1];
  if (v132)
    CFRelease(v132);
}

void audioStream_receivedAudioDataMessage(uint64_t a1, int a2, uint64_t a3, const void *a4)
{
  const void *Empty;

  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2 == 1684628836)
  {
    if (gLogCategory_APEndpointStreamBufferedAudio <= 50
      && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    Empty = (const void *)CFDictionaryGetEmpty();
    audioStream_Suspend(a4, Empty);
  }
}

CFTypeRef audioStream_audioDataCallback(uint64_t a1, int a2, int *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  CFTypeRef v9;
  int v10;
  const __CFArray *MutableCopy;
  uint64_t v12;
  int v13;
  const void *ValueAtIndex;
  CFTypeRef v15;
  int v16;
  CFTypeRef v17;
  int v19;
  CFArrayRef theArray;
  unsigned __int8 v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v21 = 0;
  theArray = 0;
  if (a2)
  {
    v19 = APSSignalErrorAt();
    v9 = 0;
    MutableCopy = 0;
    goto LABEL_37;
  }
  v7 = DerivedStorage;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
  v8 = *(const void **)(v7 + 248);
  if (v8)
    v9 = CFRetain(v8);
  else
    v9 = 0;
  v21 = *(_DWORD *)(v7 + 240);
  v10 = *(unsigned __int8 *)(v7 + 273);
  MutableCopy = *(const __CFArray **)(v7 + 232);
  *(_QWORD *)(v7 + 232) = 0;
  v12 = *(_QWORD *)(v7 + 256);
  MEMORY[0x1CAA400E4](*(_QWORD *)(v7 + 168));
  if (v9)
  {
    if (!v12)
    {
      if (gLogCategory_APEndpointStreamBufferedAudio <= 50
        && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v15 = 0;
      goto LABEL_25;
    }
    if (MutableCopy)
    {
      if (CFArrayGetCount(MutableCopy))
      {
LABEL_13:
        if (CFArrayGetCount(MutableCopy))
        {
          ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, 0);
          v15 = CFRetain(ValueAtIndex);
          CFArrayRemoveValueAtIndex(MutableCopy, 0);
          if (v21 && !CFArrayGetCount(MutableCopy))
          {
            if (v10)
              v16 = 1634754917;
            else
              v16 = 1650814818;
          }
          else if (v10)
          {
            v16 = 1634754914;
          }
          else
          {
            v16 = 1651861089;
          }
          *a3 = v16;
          goto LABEL_24;
        }
LABEL_19:
        v15 = 0;
LABEL_24:
        MEMORY[0x1CAA400CC](*(_QWORD *)(v7 + 168));
        *(_DWORD *)(v7 + 240) = v21;
        *(_QWORD *)(v7 + 232) = MutableCopy;
        MEMORY[0x1CAA400E4](*(_QWORD *)(v7 + 168));
        MutableCopy = 0;
LABEL_25:
        CFRelease(v9);
        v17 = v15;
        goto LABEL_26;
      }
      v13 = (*(uint64_t (**)(CFTypeRef, uint64_t, CFArrayRef *, unsigned __int8 *))(v12 + 8))(v9, a1, &theArray, &v21);
      if (!v13)
      {
        CFRelease(MutableCopy);
        goto LABEL_12;
      }
    }
    else
    {
      v13 = (*(uint64_t (**)(CFTypeRef, uint64_t, CFArrayRef *, unsigned __int8 *))(v12 + 8))(v9, a1, &theArray, &v21);
      if (!v13)
      {
LABEL_12:
        MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theArray);
        if (!MutableCopy)
          goto LABEL_19;
        goto LABEL_13;
      }
    }
    v19 = v13;
    APSLogErrorAt();
LABEL_37:
    if (v19 == -72095 || !v19)
      goto LABEL_45;
    goto LABEL_39;
  }
  APSLogErrorAt();
LABEL_39:
  if (gLogCategory_APEndpointStreamBufferedAudio <= 90
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
    audioStream_handleFatalError();
LABEL_45:
  v15 = 0;
  v17 = 0;
  if (v9)
    goto LABEL_25;
LABEL_26:
  if (theArray)
    CFRelease(theArray);
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v17;
}

void audioStream_receivedMediaDataControlMessage(uint64_t a1, int a2, uint64_t a3, const void *a4)
{
  const void *Empty;

  if (gLogCategory_APEndpointStreamBufferedAudio <= 50
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2 == 1684628836)
  {
    if (gLogCategory_APEndpointStreamBufferedAudio <= 50
      && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    Empty = (const void *)CFDictionaryGetEmpty();
    audioStream_Suspend(a4, Empty);
  }
}

uint64_t audioStream_copyTransportFormatDescriptionForSourceContentFormatDescription()
{
  uint64_t DerivedStorage;
  uint64_t IntersectionList;

  FigEndpointStreamAirPlayGetFigEndpointStream();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
  APSAudioFormatDescriptionListGetForBufferedSender();
  IntersectionList = APSAudioFormatDescriptionListCreateIntersectionList();
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
  if ((_DWORD)IntersectionList
    || (IntersectionList = APSAudioFormatDescriptionListCopyTransportFormatDescriptionForSourceFormatDescription(),
        (_DWORD)IntersectionList))
  {
    APSLogErrorAt();
  }
  return IntersectionList;
}

uint64_t audioStream_isPassthroughSupportedForFormatDescription(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  FigEndpointStreamAirPlayGetFigEndpointStream();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamBufferedAudio <= 10
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 168));
  if (!a3)
  {
    APSLogErrorAt();
    v9 = 4294950536;
    goto LABEL_18;
  }
  if (!APSSettingsIsFeatureEnabled())
  {
    v9 = 0;
    *a3 = 0;
    goto LABEL_18;
  }
  v5 = APSAudioFormatDescriptionCreateWithFigEndpointStreamAudioFormatDescription();
  if ((_DWORD)v5)
  {
    v9 = v5;
LABEL_24:
    APSLogErrorAt();
    goto LABEL_18;
  }
  v6 = APSAudioFormatDescriptionListCreate();
  if ((_DWORD)v6)
  {
    v9 = v6;
    goto LABEL_24;
  }
  APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender();
  v7 = APSAudioFormatDescriptionListAddSupportedFormatsForPassthrough();
  if ((_DWORD)v7)
  {
    v9 = v7;
    goto LABEL_24;
  }
  if (APSAudioFormatDescriptionListContainsFormat())
    v8 = APSAudioFormatDescriptionListContainsFormat() != 0;
  else
    v8 = 0;
  APSAudioFormatDescriptionListCopyDebugString();
  if (gLogCategory_APEndpointStreamBufferedAudio <= 10
    && (gLogCategory_APEndpointStreamBufferedAudio != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v9 = 0;
  *a3 = v8;
LABEL_18:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 168));
  return v9;
}

uint64_t APMessageRingBufferedGetTypeID()
{
  if (APMessageRingBufferedGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APMessageRingBufferedGetTypeID_sInitOnce, &APMessageRingBufferedGetTypeID_sTypeID, (dispatch_function_t)ring_getTypeID_0);
  return APMessageRingBufferedGetTypeID_sTypeID;
}

uint64_t ring_getTypeID_0(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APMessageRingBufferedCreate(uint64_t a1, size_t a2, malloc_zone_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  _OWORD *Instance;
  _OWORD *v16;
  void *v17;
  uint64_t result;

  if (0x10000 % a2 || !a4 || !a6)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  if (APMessageRingBufferedGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APMessageRingBufferedGetTypeID_sInitOnce, &APMessageRingBufferedGetTypeID_sTypeID, (dispatch_function_t)ring_getTypeID_0);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt();
    return 4294960568;
  }
  v16 = Instance;
  Instance[3] = 0u;
  Instance[4] = 0u;
  Instance[1] = 0u;
  Instance[2] = 0u;
  *((_DWORD *)Instance + 4) = 0;
  RandomBytes();
  *((_DWORD *)v16 + 5) &= 0xFFFFFFu;
  if (!a3)
    a3 = malloc_default_zone();
  *((_QWORD *)v16 + 5) = a3;
  v17 = malloc_type_zone_calloc(a3, a2, 0x50uLL, 0x102004088E31008uLL);
  *((_QWORD *)v16 + 4) = v17;
  if (!v17)
  {
    APSLogErrorAt();
    CFRelease(v16);
    return 4294960568;
  }
  *((_QWORD *)v16 + 3) = a2;
  *((_QWORD *)v16 + 6) = a4;
  *((_QWORD *)v16 + 7) = a5;
  *((_QWORD *)v16 + 8) = a6;
  *((_QWORD *)v16 + 9) = a7;
  if (gLogCategory_APMessageRingBuffered <= 50
    && (gLogCategory_APMessageRingBuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  result = 0;
  *a8 = v16;
  return result;
}

uint64_t APMessageRingBufferedGetUsedCount(uint64_t a1)
{
  return (unsigned __int16)(*(_WORD *)(a1 + 18) - *(_WORD *)(a1 + 16));
}

uint64_t APMessageRingBufferedGetByteCountAtIndex(uint64_t a1, unsigned int a2, int *a3)
{
  unint64_t v3;
  uint64_t result;
  int v5;

  if (a3)
  {
    v3 = *(unsigned __int16 *)(a1 + 16);
    if ((_DWORD)v3 == a2)
    {
      result = 0;
      *a3 = 0;
    }
    else
    {
      v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 80 * ((unint64_t)a2 % *(_QWORD *)(a1 + 24)) + 72)
         - *(_DWORD *)(*(_QWORD *)(a1 + 32) + 80 * (v3 % *(_QWORD *)(a1 + 24)) + 72);
      *a3 = v5;
      if (v5 <= 0)
      {
        APSLogErrorAt();
        return 4294960584;
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return result;
}

uint64_t APMessageRingBufferedGetTotalByteCount(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v3;

  if (!a2)
  {
    v3 = 4294960591;
LABEL_7:
    APSLogErrorAt();
    return v3;
  }
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 32)
                 + 80 * ((unint64_t)*(unsigned __int16 *)(a1 + 18) % *(_QWORD *)(a1 + 24))
                 + 72)
     - *(_DWORD *)(*(_QWORD *)(a1 + 32)
                 + 80 * ((unint64_t)*(unsigned __int16 *)(a1 + 16) % *(_QWORD *)(a1 + 24))
                 + 72);
  *a2 = v2;
  if (v2 < 0)
  {
    v3 = 4294960584;
    goto LABEL_7;
  }
  return 0;
}

unint64_t APMessageRingBufferedGetFirstValidReadIndex(uint64_t a1, _DWORD *a2)
{
  unint64_t result;

  result = *(unsigned __int16 *)(a1 + 16);
  if (a2)
    *a2 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 80 * (result % *(_QWORD *)(a1 + 24)) + 64);
  return result;
}

uint64_t APMessageRingBufferedGetLastValidReadIndexAndTimestamp(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unsigned __int16 v3;
  unint64_t v4;
  __int128 v5;

  v3 = *(_WORD *)(a1 + 18) - 1;
  if (a2)
    *a2 = *(_DWORD *)(*(_QWORD *)(a1 + 32)
                    + 80 * ((unint64_t)(unsigned __int16)(*(_WORD *)(a1 + 18) - 1) % *(_QWORD *)(a1 + 24))
                    + 64);
  if (a3)
  {
    v4 = *(_QWORD *)(a1 + 32) + 80 * ((unint64_t)v3 % *(_QWORD *)(a1 + 24));
    v5 = *(_OWORD *)(v4 + 16);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(v4 + 32);
    *(_OWORD *)a3 = v5;
  }
  return v3;
}

uint64_t APMessageRingBufferedPruneMessagesUntilTimestamp(uint64_t a1, uint64_t a2, _WORD *a3)
{
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t result;
  CMTime time2;
  CMTime time1;

  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    if (gLogCategory_APMessageRingBuffered <= 20
      && (gLogCategory_APMessageRingBuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v6 = *(unsigned __int16 *)(a1 + 16);
    if (v6 != *(unsigned __int16 *)(a1 + 18))
    {
      v7 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      do
      {
        v9 = v8 + 80 * ((unsigned __int16)v6 % v7);
        v10 = *(_OWORD *)(v9 + 16);
        time1.epoch = *(_QWORD *)(v9 + 32);
        *(_OWORD *)&time1.value = v10;
        time2 = *(CMTime *)a2;
        if (CMTimeCompare(&time1, &time2) != -1)
          break;
        if (gLogCategory_APMessageRingBuffered <= 10
          && (gLogCategory_APMessageRingBuffered != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v7 = *(_QWORD *)(a1 + 24);
        v8 = *(_QWORD *)(a1 + 32);
        v11 = (unsigned __int16)v6 % v7;
        v12 = v8 + 80 * v11;
        *(_DWORD *)(v12 + 64) = -1;
        if (*(_QWORD *)v12)
        {
          CFRelease(*(CFTypeRef *)v12);
          v7 = *(_QWORD *)(a1 + 24);
          v8 = *(_QWORD *)(a1 + 32);
          v11 = (unsigned __int16)v6 % v7;
          *(_QWORD *)(v8 + 80 * v11) = 0;
        }
        v13 = *(const void **)(v8 + 80 * v11 + 8);
        if (v13)
        {
          CFRelease(v13);
          v7 = *(_QWORD *)(a1 + 24);
          v8 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(v8 + 80 * ((unsigned __int16)v6 % v7) + 8) = 0;
        }
        ++*(_WORD *)(a1 + 16);
        LOWORD(v6) = v6 + 1;
      }
      while (*(unsigned __int16 *)(a1 + 18) != (unsigned __int16)v6);
    }
    result = 0;
    if (a3)
      *a3 = *(_WORD *)(a1 + 16);
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return result;
}

uint64_t APMessageRingBufferedPruneMessagesFromTimestamp(uint64_t a1, uint64_t a2, _WORD *a3, _DWORD *a4, _DWORD *a5)
{
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  int v19;
  unint64_t v20;
  const void *v21;
  const void *v22;
  uint64_t result;
  CMTime time2;
  CMTime time1;

  if ((*(_BYTE *)(a2 + 12) & 1) == 0)
  {
LABEL_45:
    APSLogErrorAt();
    return 4294960591;
  }
  v10 = *(unsigned __int16 *)(a1 + 18);
  if (gLogCategory_APMessageRingBuffered <= 50
    && (gLogCategory_APMessageRingBuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v11 = *(unsigned __int16 *)(a1 + 16);
  if (v11 == v10)
  {
    v12 = 0;
LABEL_26:
    if (gLogCategory_APMessageRingBuffered <= 90
      && (gLogCategory_APMessageRingBuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_30;
  }
  v13 = 0;
  v12 = 0;
  do
  {
    v14 = *(_QWORD *)(a1 + 32) + 80 * ((unint64_t)(unsigned __int16)v11 % *(_QWORD *)(a1 + 24));
    v15 = *(_OWORD *)(v14 + 16);
    time1.epoch = *(_QWORD *)(v14 + 32);
    *(_OWORD *)&time1.value = v15;
    time2 = *(CMTime *)a2;
    if (CMTimeCompare(&time1, &time2) == 1)
    {
      v17 = *(_QWORD *)(a1 + 24);
      v16 = *(_QWORD *)(a1 + 32);
      v18 = (int *)(v16 + 80 * ((unsigned __int16)v11 % v17) + 64);
      if (v13)
      {
        *v18 = -1;
      }
      else
      {
        v12 = *v18;
        *v18 = -1;
        *(_WORD *)(a1 + 18) = v11;
        if ((__int16)(*(_WORD *)(a1 + 16) - v11) >= 1)
          goto LABEL_45;
        if (gLogCategory_APMessageRingBuffered <= 50)
        {
          if (gLogCategory_APMessageRingBuffered != -1
            || (v19 = _LogCategory_Initialize(), v17 = *(_QWORD *)(a1 + 24), v16 = *(_QWORD *)(a1 + 32), v19))
          {
            LogPrintF();
            v17 = *(_QWORD *)(a1 + 24);
            v16 = *(_QWORD *)(a1 + 32);
          }
        }
      }
      v20 = (unsigned __int16)v11 % v17;
      v21 = *(const void **)(v16 + 80 * v20);
      if (v21)
      {
        CFRelease(v21);
        v16 = *(_QWORD *)(a1 + 32);
        v20 = (unint64_t)(unsigned __int16)v11 % *(_QWORD *)(a1 + 24);
        *(_QWORD *)(v16 + 80 * v20) = 0;
      }
      v22 = *(const void **)(v16 + 80 * v20 + 8);
      if (v22)
      {
        CFRelease(v22);
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80 * ((unint64_t)(unsigned __int16)v11 % *(_QWORD *)(a1 + 24)) + 8) = 0;
      }
      v13 = 1;
    }
    LOWORD(v11) = v11 + 1;
  }
  while (v10 != (unsigned __int16)v11);
  if (!v13)
    goto LABEL_26;
LABEL_30:
  if (a3)
    *a3 = *(_WORD *)(a1 + 18);
  if (a4)
  {
    *a4 = v12;
    if (gLogCategory_APMessageRingBuffered <= 50
      && (gLogCategory_APMessageRingBuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  if (!a5)
    return 0;
  *a5 = *(_DWORD *)(a1 + 20);
  if (gLogCategory_APMessageRingBuffered > 50)
    return 0;
  if (gLogCategory_APMessageRingBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
  {
    LogPrintF();
    return 0;
  }
  return result;
}

uint64_t APMessageRingBufferedGetNextFreeBacking(uint64_t a1, size_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t DataLength;
  uint64_t v13;
  unint64_t v14;
  const void *v15;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(unsigned __int16 *)(a1 + 18);
  if (v2 == (unsigned __int16)(v3 - *(_WORD *)(a1 + 16)) + 1)
    return 0;
  v7 = v3 % v2;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = v8 + 80 * v7;
  v11 = *(_QWORD *)(v9 + 8);
  v10 = v9 + 8;
  if (!v11)
  {
    if ((*(unsigned int (**)(_QWORD, size_t, uint64_t))(a1 + 48))(*(_QWORD *)(a1 + 56), a2, v10))
    {
LABEL_16:
      APSLogErrorAt();
      return 0;
    }
    v8 = *(_QWORD *)(a1 + 32);
    v7 = (unint64_t)*(unsigned __int16 *)(a1 + 18) % *(_QWORD *)(a1 + 24);
  }
  DataLength = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(v8 + 80 * v7 + 8));
  if (a2 && DataLength < a2)
  {
    if (gLogCategory_APMessageRingBuffered <= 50
      && (gLogCategory_APMessageRingBuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v13 = *(_QWORD *)(a1 + 32);
    v14 = (unint64_t)*(unsigned __int16 *)(a1 + 18) % *(_QWORD *)(a1 + 24);
    v15 = *(const void **)(v13 + 80 * v14 + 8);
    if (v15)
    {
      CFRelease(v15);
      v13 = *(_QWORD *)(a1 + 32);
      v14 = (unint64_t)*(unsigned __int16 *)(a1 + 18) % *(_QWORD *)(a1 + 24);
      *(_QWORD *)(v13 + 80 * v14 + 8) = 0;
    }
    if ((*(unsigned int (**)(_QWORD, size_t, unint64_t))(a1 + 48))(*(_QWORD *)(a1 + 56), a2, v13 + 80 * v14 + 8))
    {
      goto LABEL_16;
    }
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 32)
                   + 80 * ((unint64_t)*(unsigned __int16 *)(a1 + 18) % *(_QWORD *)(a1 + 24))
                   + 8);
}

uint64_t APMessageRingBufferedEnqueueMessageForSending(uint64_t a1, CMBlockBufferRef theBuffer, __int128 *a3, __int128 *a4)
{
  OpaqueCMBlockBuffer *NextFreeBacking;
  uint64_t v9;
  const void **v10;
  const void *v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  size_t totalLengthOut;
  char *v25;
  char *dataPointerOut;

  v25 = 0;
  dataPointerOut = 0;
  totalLengthOut = 0;
  if (*(_QWORD *)(a1 + 24) == (unsigned __int16)(*(_WORD *)(a1 + 18) - *(_WORD *)(a1 + 16)) + 1)
  {
    APSLogErrorAt();
    return 4294960587;
  }
  else
  {
    CMBlockBufferGetDataPointer(theBuffer, 0, 0, &totalLengthOut, &dataPointerOut);
    NextFreeBacking = (OpaqueCMBlockBuffer *)APMessageRingBufferedGetNextFreeBacking(a1, 0);
    CMBlockBufferGetDataPointer(NextFreeBacking, 0, 0, 0, &v25);
    if (dataPointerOut == v25)
    {
      v9 = (*(uint64_t (**)(CMBlockBufferRef, _QWORD, _QWORD))(a1 + 64))(theBuffer, *(unsigned int *)(a1 + 20), *(_QWORD *)(a1 + 72));
      if ((_DWORD)v9)
      {
        v12 = v9;
        APSLogErrorAt();
      }
      else
      {
        if (gLogCategory_APMessageRingBuffered <= 10
          && (gLogCategory_APMessageRingBuffered != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (gLogCategory_APMessageRingBufferedFullness <= 50
          && (gLogCategory_APMessageRingBufferedFullness != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v10 = (const void **)(*(_QWORD *)(a1 + 32)
                            + 80 * ((unint64_t)*(unsigned __int16 *)(a1 + 18) % *(_QWORD *)(a1 + 24)));
        v11 = *v10;
        if (theBuffer)
          CFRetain(theBuffer);
        *v10 = theBuffer;
        if (v11)
          CFRelease(v11);
        v12 = 0;
        v13 = *(_QWORD *)(a1 + 32) + 80 * ((unint64_t)*(unsigned __int16 *)(a1 + 18) % *(_QWORD *)(a1 + 24));
        v14 = *a3;
        *(_QWORD *)(v13 + 32) = *((_QWORD *)a3 + 2);
        *(_OWORD *)(v13 + 16) = v14;
        v15 = *(_QWORD *)(a1 + 32) + 80 * ((unint64_t)*(unsigned __int16 *)(a1 + 18) % *(_QWORD *)(a1 + 24));
        v16 = *a4;
        *(_QWORD *)(v15 + 56) = *((_QWORD *)a4 + 2);
        *(_OWORD *)(v15 + 40) = v16;
        v17 = *(unsigned __int16 *)(a1 + 18);
        v18 = *(_QWORD *)(a1 + 24);
        v19 = *(_QWORD *)(a1 + 32);
        v20 = v17 % v18;
        LOWORD(v17) = v17 + 1;
        v21 = *(_DWORD *)(a1 + 20);
        v22 = v19 + 80 * v20;
        *(_DWORD *)(v22 + 64) = v21;
        *(_QWORD *)(v19 + 80 * ((unsigned __int16)v17 % v18) + 72) = totalLengthOut
                                                                   + *(_QWORD *)(v22 + 72);
        *(_DWORD *)(a1 + 20) = (v21 + 1) & 0xFFFFFF;
        *(_WORD *)(a1 + 18) = v17;
      }
    }
    else
    {
      APSLogErrorAt();
      return 4294960591;
    }
  }
  return v12;
}

uint64_t APMessageRingBufferedGetMessageAtIndex(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  __int128 v13;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = (unint64_t)a2 % *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v5 + 80 * v6 + 64);
  if (v7 == -1)
  {
    if (gLogCategory_APMessageRingBuffered <= 30
      && (gLogCategory_APMessageRingBuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 0;
  }
  else
  {
    result = *(_QWORD *)(v5 + 80 * v6);
    if (result)
    {
      if (a3)
        *a3 = v7;
      if (a4)
      {
        v10 = v5 + 80 * v6;
        v11 = *(_OWORD *)(v10 + 16);
        *(_QWORD *)(a4 + 16) = *(_QWORD *)(v10 + 32);
        *(_OWORD *)a4 = v11;
      }
      if (a5)
      {
        v12 = *(_QWORD *)(a1 + 32) + 80 * ((unint64_t)a2 % *(_QWORD *)(a1 + 24));
        v13 = *(_OWORD *)(v12 + 40);
        *(_QWORD *)(a5 + 16) = *(_QWORD *)(v12 + 56);
        *(_OWORD *)a5 = v13;
      }
    }
  }
  return result;
}

uint64_t APMessageRingBufferedFlush(uint64_t a1, _WORD *a2, _DWORD *a3)
{
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;

  if (a1)
  {
    if (gLogCategory_APMessageRingBuffered <= 50
      && (gLogCategory_APMessageRingBuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v6 = *(unsigned __int16 *)(a1 + 16);
    if (v6 != *(unsigned __int16 *)(a1 + 18))
    {
      v7 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      do
      {
        v9 = (unsigned __int16)v6;
        v10 = (unsigned __int16)v6 % v7;
        v11 = v8 + 80 * v10;
        *(_DWORD *)(v11 + 64) = -1;
        if (*(_QWORD *)v11)
        {
          CFRelease(*(CFTypeRef *)v11);
          v7 = *(_QWORD *)(a1 + 24);
          v8 = *(_QWORD *)(a1 + 32);
          v10 = v9 % v7;
          *(_QWORD *)(v8 + 80 * (v9 % v7)) = 0;
        }
        v12 = *(const void **)(v8 + 80 * v10 + 8);
        if (v12)
        {
          CFRelease(v12);
          v7 = *(_QWORD *)(a1 + 24);
          v8 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(v8 + 80 * (v9 % v7) + 8) = 0;
        }
        LOWORD(v6) = v9 + 1;
      }
      while (*(unsigned __int16 *)(a1 + 18) != (unsigned __int16)(v9 + 1));
    }
    *(_WORD *)(a1 + 16) = v6;
    if (a2)
      *a2 = v6;
    if (a3)
      *a3 = *(_DWORD *)(a1 + 20);
  }
  return 0;
}

BOOL APMessageRingBufferedIsFull(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) == (unsigned __int16)(*(_WORD *)(a1 + 18) - *(_WORD *)(a1 + 16)) + 1;
}

void ring_Finalize_0(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  const void *v5;
  const void *v6;

  if (gLogCategory_APMessageRingBuffered <= 30
    && (gLogCategory_APMessageRingBuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(char **)(a1 + 32);
  if (*(_QWORD *)(a1 + 24))
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = *(const void **)&v2[v3];
      if (v5)
      {
        CFRelease(v5);
        v2 = *(char **)(a1 + 32);
        *(_QWORD *)&v2[v3] = 0;
      }
      v6 = *(const void **)&v2[v3 + 8];
      if (v6)
      {
        CFRelease(v6);
        v2 = *(char **)(a1 + 32);
        *(_QWORD *)&v2[v3 + 8] = 0;
      }
      ++v4;
      v3 += 80;
    }
    while (v4 < *(_QWORD *)(a1 + 24));
  }
  else if (!v2)
  {
    return;
  }
  malloc_zone_free(*(malloc_zone_t **)(a1 + 40), v2);
  *(_QWORD *)(a1 + 32) = 0;
}

uint64_t APSenderStatsCollectorGetShared()
{
  if (APSenderStatsCollectorGetShared_once != -1)
    dispatch_once(&APSenderStatsCollectorGetShared_once, &__block_literal_global_4);
  return APSenderStatsCollectorGetShared_collector;
}

uint64_t APSenderStatsCollectorCopySystemStats(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  if (a1 && a2)
  {
    v2 = *(NSObject **)(a1 + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __APSenderStatsCollectorCopySystemStats_block_invoke;
    block[3] = &unk_1E8269768;
    block[4] = &v6;
    block[5] = a1;
    block[6] = a2;
    dispatch_sync(v2, block);
    v3 = *((unsigned int *)v7 + 6);
  }
  else
  {
    APSLogErrorAt();
    v3 = 4294960591;
    *((_DWORD *)v7 + 6) = -6705;
  }
  _Block_object_dispose(&v6, 8);
  return v3;
}

void collector_finalize()
{
  if (gLogCategory_APSenderStatsCollector <= 100
    && (gLogCategory_APSenderStatsCollector != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1C8] = 7;
}

uint64_t APAudioEngineAVCCreate(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;
  uint64_t v7;

  if (a2 && a3)
  {
    FigEndpointStreamAudioEngineGetClassID();
    v5 = CMDerivedObjectCreate();
    if ((_DWORD)v5)
    {
      v7 = v5;
      APSLogErrorAt();
    }
    else
    {
      DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
      *DerivedStorage = CFRetain(a2);
      DerivedStorage[6] = FigSimpleMutexCreate();
      if (gLogCategory_APAudioEngineAVC <= 50
        && (gLogCategory_APAudioEngineAVC != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v7 = 0;
      *a3 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294951815;
  }
  return v7;
}

void audioEngineAVC_Finalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineAVC <= 50
    && (gLogCategory_APAudioEngineAVC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  audioEngineAVC_suspendInternal();
  FigSimpleMutexDestroy();
  if (*DerivedStorage)
    CFRelease(*DerivedStorage);
}

__CFString *audioEngineAVC_CopyDebugDescription()
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APAudioEngineAVC>"));
  return Mutable;
}

uint64_t audioEngineAVC_CopyProperty(int a1, CFTypeRef cf2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef v7;
  CMTime time;

  if (gLogCategory_APAudioEngineAVC <= 30
    && (gLogCategory_APAudioEngineAVC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (cf2 && a4)
  {
    if (CFEqual(CFSTR("outputLatency"), cf2))
    {
      time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      v7 = CMTimeCopyAsDictionary(&time, a3);
      *a4 = v7;
      if (v7)
      {
        return 0;
      }
      else
      {
        APSLogErrorAt();
        return 4294951816;
      }
    }
    else
    {
      return 4294954512;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294951815;
  }
}

uint64_t audioEngineAVC_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  if (a2 && a3)
  {
    if (CFEqual(CFSTR("audioSourceFirstFrameAnchorTime"), a2))
      return 0;
    else
      return 4294954512;
  }
  else
  {
    APSLogErrorAt();
    return 4294951815;
  }
}

uint64_t audioEngineAVC_suspendInternal()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  unsigned int (*v2)(uint64_t);
  uint64_t v3;
  uint64_t (*v4)(uint64_t, _QWORD, _QWORD);
  const void *v5;
  void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  UpTicksPerSecond();
  FigSimpleMutexCheckIsLockedOnThisThread();
  mach_absolute_time();
  if (*(_BYTE *)(DerivedStorage + 9))
  {
    FigHALAudioConduitDeviceHALStopStream();
    *(_BYTE *)(DerivedStorage + 9) = 0;
  }
  mach_absolute_time();
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    FigHALAudioConduitDeviceHALStopIO();
    *(_BYTE *)(DerivedStorage + 8) = 0;
  }
  mach_absolute_time();
  v1 = *(_QWORD *)(DerivedStorage + 16);
  if (v1)
  {
    v2 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if ((!v2 || v2(v1))
      && gLogCategory_APAudioEngineAVC <= 90
      && (gLogCategory_APAudioEngineAVC != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v3 = *(_QWORD *)(DerivedStorage + 16);
    v4 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
    if (v4)
    {
      v1 = v4(v3, 0, 0);
      if (!(_DWORD)v1)
      {
LABEL_20:
        v5 = *(const void **)(DerivedStorage + 16);
        if (v5)
        {
          CFRelease(v5);
          *(_QWORD *)(DerivedStorage + 16) = 0;
        }
        goto LABEL_22;
      }
    }
    else
    {
      v1 = 4294954514;
    }
    if (gLogCategory_APAudioEngineAVC <= 90
      && (gLogCategory_APAudioEngineAVC != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_20;
  }
LABEL_22:
  v6 = *(void **)(DerivedStorage + 40);
  if (v6)
  {
    CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  mach_absolute_time();
  if (gLogCategory_APAudioEngineAVC <= 50
    && (gLogCategory_APAudioEngineAVC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v1;
}

uint64_t audioEngineAVC_Resume(uint64_t a1, const __CFDictionary *a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t DerivedStorage;
  _DWORD *v9;
  const void *Value;
  const void *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  const UInt8 *BytePtr;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(const void *, _QWORD, uint64_t);
  uint64_t v25;
  uint64_t (*v26)(const void *);
  uint64_t v27;
  int v28;
  uint64_t result;
  int v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  int v34;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  UpTicksPerSecond();
  v9 = &unk_1EF905000;
  if (gLogCategory_APAudioEngineAVC <= 50
    && (gLogCategory_APAudioEngineAVC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  mach_absolute_time();
  if (a2)
  {
    Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CC4100]);
    if (Value)
    {
      v11 = Value;
      MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 48));
      if (gLogCategory_APAudioEngineAVC <= 50
        && (gLogCategory_APAudioEngineAVC != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v13 = *(const void **)(DerivedStorage + 16);
      *(_QWORD *)(DerivedStorage + 16) = v11;
      CFRetain(v11);
      if (v13)
        CFRelease(v13);
      CFAllocatorGetDefault();
      v14 = FigHALAudioConduitDeviceCopyProperty();
      if ((_DWORD)v14)
      {
        v12 = v14;
        APSLogErrorAt();
      }
      else
      {
        BytePtr = CFDataGetBytePtr(0);
        v33 = *(_OWORD *)BytePtr;
        v16 = *((_DWORD *)BytePtr + 5);
        v34 = *((_DWORD *)BytePtr + 4);
        v17 = *((_DWORD *)BytePtr + 6);
        v31 = *(_QWORD *)(BytePtr + 28);
        v32 = *((_DWORD *)BytePtr + 9);
        CFAllocatorGetDefault();
        v18 = FigHALAudioConduitDeviceCopyProperty();
        if ((_DWORD)v18)
        {
          v12 = v18;
          APSLogErrorAt();
          v9 = (_DWORD *)&unk_1EF905000;
        }
        else
        {
          v19 = v17 * v16 * FigCFNumberGetUInt32();
          *(_DWORD *)(DerivedStorage + 24) = v19;
          if (!v19)
            goto LABEL_47;
          if (gLogCategory_APAudioEngineAVC <= 50)
          {
            if (gLogCategory_APAudioEngineAVC != -1
              || (v20 = _LogCategory_Initialize(), v19 = *(_DWORD *)(DerivedStorage + 24), v20))
            {
              LogPrintF();
              v19 = *(_DWORD *)(DerivedStorage + 24);
            }
          }
          v21 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v19, 0);
          *(_QWORD *)(DerivedStorage + 40) = v21;
          if (!v21)
          {
LABEL_47:
            APSLogErrorAt();
            v12 = APSSignalErrorAt();
            MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 48));
            v9 = (_DWORD *)&unk_1EF905000;
            if (!(_DWORD)v12)
              goto LABEL_38;
            goto LABEL_34;
          }
          *(_DWORD *)(DerivedStorage + 120) = *(_DWORD *)(DerivedStorage + 24);
          v22 = *(_QWORD *)DerivedStorage;
          *(_QWORD *)(DerivedStorage + 104) = v11;
          *(_QWORD *)(DerivedStorage + 112) = v22;
          v23 = *(_QWORD *)(DerivedStorage + 48);
          *(_QWORD *)(DerivedStorage + 128) = v21;
          *(_QWORD *)(DerivedStorage + 136) = v23;
          *(_QWORD *)(DerivedStorage + 152) = 0;
          *(_OWORD *)(DerivedStorage + 64) = v33;
          *(_DWORD *)(DerivedStorage + 80) = v34;
          *(_DWORD *)(DerivedStorage + 84) = v16;
          *(_DWORD *)(DerivedStorage + 88) = v17;
          *(_QWORD *)(DerivedStorage + 92) = v31;
          *(_DWORD *)(DerivedStorage + 100) = v32;
          v24 = *(uint64_t (**)(const void *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 120);
          if (v24)
          {
            v25 = v24(v11, audioEngineAVC_audioSourceWriteDataCallback, DerivedStorage + 56);
            if (!(_DWORD)v25)
            {
              v26 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
              v9 = &unk_1EF905000;
              if (v26)
              {
                v27 = v26(v11);
                if (!(_DWORD)v27)
                {
                  mach_absolute_time();
                  FigHALAudioConduitDeviceHALStartIO();
                  mach_absolute_time();
                  *(_BYTE *)(DerivedStorage + 8) = 1;
                  FigHALAudioConduitDeviceHALStartStream();
                  mach_absolute_time();
                  *(_BYTE *)(DerivedStorage + 9) = 1;
                  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 48));
                  v12 = 0;
                  v9 = (_DWORD *)&unk_1EF905000;
                  if (!a3)
                    goto LABEL_40;
                  goto LABEL_39;
                }
                v12 = v27;
              }
              else
              {
                v12 = 4294954514;
              }
              APSLogErrorAt();
              goto LABEL_33;
            }
            v12 = v25;
          }
          else
          {
            v12 = 4294954514;
          }
          APSLogErrorAt();
          v9 = (_DWORD *)&unk_1EF905000;
        }
      }
LABEL_33:
      MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 48));
      goto LABEL_34;
    }
  }
  APSLogErrorAt();
  v12 = 4294951813;
LABEL_34:
  v28 = v9[626];
  if (v28 <= 90 && (v28 != -1 || _LogCategory_Initialize()))
    LogPrintF();
LABEL_38:
  if (a3)
LABEL_39:
    a3(a1, v12, a4);
LABEL_40:
  result = mach_absolute_time();
  v30 = v9[626];
  if (v30 <= 50)
  {
    if (v30 != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

uint64_t audioEngineAVC_Suspend(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineAVC <= 50
    && (gLogCategory_APAudioEngineAVC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  mach_absolute_time();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 48));
  v8 = audioEngineAVC_suspendInternal();
  result = MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 48));
  if (a3)
    result = a3(a1, v8, a4);
  if (gLogCategory_APAudioEngineAVC <= 50)
  {
    if (gLogCategory_APAudioEngineAVC != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
    {
      mach_absolute_time();
      UpTicksPerSecond();
      return LogPrintF();
    }
  }
  return result;
}

uint64_t audioEngineAVC_SetEndpointStream(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD, uint64_t), uint64_t a4)
{
  uint64_t (*v5)(uint64_t, _QWORD, uint64_t);
  int v7;

  v5 = a3;
  if (gLogCategory_APAudioEngineAVC <= 50)
  {
    if (gLogCategory_APAudioEngineAVC != -1 || (v7 = _LogCategory_Initialize(), v5 = a3, v7))
    {
      LogPrintF();
      v5 = a3;
    }
  }
  return v5(a1, 0, a4);
}

uint64_t audioEngineAVC_Flush()
{
  if (gLogCategory_APAudioEngineAVC <= 50
    && (gLogCategory_APAudioEngineAVC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return 0;
}

uint64_t audioEngineAVC_audioSourceWriteDataCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t);
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t, uint64_t *, unint64_t *, uint64_t *, uint64_t);
  double v14;
  uint64_t v15;
  int32_t v16;
  int32_t v17;
  CMTimeValue value;
  int32_t v19;
  CMTime time;
  CMTime v21;
  uint64_t v22;
  __int128 v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v24 = 0;
  result = FigSimpleMutexTryLock();
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(a3 + 48);
    v6 = *(unsigned int *)(a3 + 64);
    v7 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v7)
    {
      v8 = (double *)(a3 + 8);
      do
      {
        if (!v7(v5, v6))
          break;
        v22 = 0;
        v9 = *(_QWORD *)(a3 + 48);
        v10 = *(_QWORD *)(a3 + 72);
        v11 = *(unsigned int *)(a3 + 64);
        v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *, unint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (!v12)
          break;
        if (v12(v9, v10, v11, &v22, &v24, &v29, a3 + 8) || v22 == 0)
          break;
        v14 = *(double *)(a3 + 96);
        if (v14 == 0.0)
        {
          v15 = mach_absolute_time();
          *((_QWORD *)&v25 + 1) = v15;
          v16 = UpTicksPerSecond();
          CMTimeMake(&v21, v15, v16);
          v23 = *(_OWORD *)&v21.timescale;
          v17 = (int)*v8;
          time = v21;
          CMTimeConvertScale(&v21, &time, v17, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          value = v21.value;
          v23 = *(_OWORD *)&v21.timescale;
          *(double *)&v25 = (double)v21.value;
        }
        else
        {
          *(_QWORD *)&v25 = *(_QWORD *)(a3 + 96);
          CMTimeMake(&v21, (uint64_t)v14, (int)*v8);
          value = v21.value;
          v23 = *(_OWORD *)&v21.timescale;
        }
        v19 = UpTicksPerSecond();
        time.value = value;
        *(_OWORD *)&time.timescale = v23;
        CMTimeConvertScale(&v21, &time, v19, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        *((_QWORD *)&v25 + 1) = v21.value;
        *(double *)(a3 + 96) = *(double *)&v25 + (double)v24;
        DWORD2(v28) = 3;
        if (FigHALAudioConduitDeviceHALSendAudio())
          break;
        v5 = *(_QWORD *)(a3 + 48);
        v6 = *(unsigned int *)(a3 + 64);
        v7 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      }
      while (v7);
    }
    return MEMORY[0x1CAA400E4](*(_QWORD *)(a3 + 80));
  }
  return result;
}

uint64_t APEndpointStreamAudioAVCCreate(uint64_t a1, const void *a2, const void *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  _QWORD *DerivedStorage;
  uint64_t v10;

  if (a2 && a3 && a5)
  {
    FigEndpointStreamAirPlayGetClassID();
    v8 = CMDerivedObjectCreate();
    if ((_DWORD)v8)
    {
      v10 = v8;
      APSLogErrorAt();
    }
    else
    {
      DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
      *DerivedStorage = CFRetain(a3);
      DerivedStorage[1] = CFRetain(a2);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      v10 = 0;
      *a5 = 0;
      if (gLogCategory_APEndpointStreamAudioAVC <= 50)
      {
        if (gLogCategory_APEndpointStreamAudioAVC != -1 || _LogCategory_Initialize())
          LogPrintF();
        return 0;
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950536;
  }
  return v10;
}

uint64_t apesoavc_suspendedNotificationCallbackPostEndpointStreamDissociated()
{
  if (gLogCategory_APEndpointStreamAudioAVC <= 50
    && (gLogCategory_APEndpointStreamAudioAVC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

void endpointStreamAudioAVC_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
    CFRelease(v1);
}

uint64_t endpointStreamAudioAVC_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  const void **v8;
  const void *v9;
  uint64_t ASRDArrayPCM;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4)
  {
    APSLogErrorAt();
    return 4294950536;
  }
  v8 = (const void **)DerivedStorage;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4820]))
  {
    v9 = (const void *)*MEMORY[0x1E0CA4880];
LABEL_7:
    ASRDArrayPCM = 0;
    *a4 = CFRetain(v9);
    return ASRDArrayPCM;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4788]))
  {
    v9 = *v8;
    goto LABEL_7;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA47E0]))
  {
    CMBaseObjectGetDerivedStorage();
    v12 = FigHALAudioConduitDeviceCopyProperty();
    if ((_DWORD)v12)
    {
      ASRDArrayPCM = v12;
    }
    else
    {
      CFDataGetBytePtr(0);
      if (gLogCategory_APEndpointStreamAudioAVC <= 50
        && (gLogCategory_APEndpointStreamAudioAVC != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (APSSettingsGetIntWithDefault()
        && gLogCategory_APEndpointStreamAudioAVC <= 50
        && (gLogCategory_APEndpointStreamAudioAVC != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v13 = APSAudioFormatDescriptionCreateWithASBD();
      if ((_DWORD)v13)
      {
        ASRDArrayPCM = v13;
      }
      else
      {
        v14 = APSAudioFormatDescriptionListCreate();
        if ((_DWORD)v14)
        {
          ASRDArrayPCM = v14;
        }
        else
        {
          v15 = APSAudioFormatDescriptionListAddFormat();
          if ((_DWORD)v15)
          {
            ASRDArrayPCM = v15;
          }
          else
          {
            ASRDArrayPCM = APSAudioFormatDescriptionListCreateASRDArrayPCM();
            if (!(_DWORD)ASRDArrayPCM)
            {
              *a4 = 0;
              goto LABEL_29;
            }
          }
        }
      }
    }
    APSLogErrorAt();
LABEL_29:
    if (!(_DWORD)ASRDArrayPCM)
      return ASRDArrayPCM;
    goto LABEL_30;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4748]))
    return 4294954512;
  ASRDArrayPCM = APAudioEngineAVCCreate(a3, v8[1], a4);
  if ((_DWORD)ASRDArrayPCM)
LABEL_30:
    APSLogErrorAt();
  return ASRDArrayPCM;
}

uint64_t endpointStreamAudioAVC_SetProperty(uint64_t a1, uint64_t a2)
{
  if (a2)
    return 4294954512;
  APSLogErrorAt();
  return 4294950536;
}

uint64_t endpointStreamAudioAVC_Suspend(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _QWORD, uint64_t), uint64_t a4)
{
  if (gLogCategory_APEndpointStreamAudioAVC <= 50
    && (gLogCategory_APEndpointStreamAudioAVC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a3)
    a3(a1, 0, a4);
  return 0;
}

uint64_t endpointStreamAudioAVC_Resume(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _QWORD, uint64_t), uint64_t a4)
{
  if (gLogCategory_APEndpointStreamAudioAVC <= 50
    && (gLogCategory_APEndpointStreamAudioAVC != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a3)
    a3(a1, 0, a4);
  return 0;
}

uint64_t APLocalPlaybackServerMake(_OWORD *a1, char a2, const void *a3, _QWORD *a4)
{
  char *v8;
  __int128 v9;
  dispatch_semaphore_t v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = (char *)malloc_type_calloc(1uLL, 0xA0uLL, 0x1060040E913FD94uLL);
  v9 = *(_OWORD *)((char *)a1 + 12);
  *(_OWORD *)(v8 + 28) = *a1;
  *(_OWORD *)(v8 + 40) = v9;
  UUIDGet();
  v8[24] = a2;
  v10 = dispatch_semaphore_create(1);
  *((_QWORD *)v8 + 8) = v10;
  if (!v10)
  {
    APSLogErrorAt();
    v15 = 4294960596;
LABEL_19:
    APLocalPlaybackServerDestroy((uint64_t)v8);
    return v15;
  }
  *((_QWORD *)v8 + 9) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8[152] = 0;
  if (a3)
    v11 = CFRetain(a3);
  else
    v11 = 0;
  *((_QWORD *)v8 + 7) = v11;
  v12 = HTTPServerCreate();
  if ((_DWORD)v12)
  {
    v15 = v12;
LABEL_18:
    APSLogErrorAt();
    goto LABEL_19;
  }
  v13 = *(_QWORD *)v8;
  *(_DWORD *)(v13 + 236) = -7001;
  *(_QWORD *)(v13 + 24) = &gLogCategory_APLocalPlaybackServer;
  if (v8[24])
    *(_DWORD *)(v13 + 232) = 1;
  v14 = CFObjectSetProperty();
  if ((_DWORD)v14)
  {
    v15 = v14;
    goto LABEL_18;
  }
  if (gLogCategory_APLocalPlaybackServer <= 40
    && (gLogCategory_APLocalPlaybackServer != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v15 = 0;
  *a4 = v8;
  return v15;
}

uint64_t APLocalPlaybackServer_connectionInit(uint64_t a1, uint64_t a2)
{
  const __CFData *v2;
  const __CFData *v4;
  uint64_t v5;
  uint64_t v6;
  UInt8 buffer[8];
  uint64_t v9;
  uint64_t v10;
  CFRange v11;

  v10 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)buffer = 0;
  v9 = 0;
  v2 = *(const __CFData **)(a2 + 56);
  if (v2)
  {
    if (CFDataGetLength(v2) != 16)
    {
      APSLogErrorAt();
      return 4294960553;
    }
    if (gLogCategory_APLocalPlaybackServer <= 30
      && (gLogCategory_APLocalPlaybackServer != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v4 = *(const __CFData **)(a2 + 56);
    v11.length = CFDataGetLength(v4);
    v11.location = 0;
    CFDataGetBytes(v4, v11, buffer);
    v5 = NetTransportTLSPSKConfigure();
    if ((_DWORD)v5)
    {
      v6 = v5;
      APSLogErrorAt();
      return v6;
    }
    HTTPConnectionSetTransportDelegate();
    if (gLogCategory_APLocalPlaybackServer <= 30
      && (gLogCategory_APLocalPlaybackServer != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  return 0;
}

uint64_t APLocalPlaybackServer_handleMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  CFAllocatorRef *v7;
  CFIndex v8;
  uint64_t v9;
  CFStringRef v10;
  CFStringRef v11;
  uint64_t TypedValue;
  const __CFString *v13;
  CFMutableStringRef MutableCopy;
  __CFString *v15;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;

  if (gLogCategory_APLocalPlaybackServer <= 10
    && (gLogCategory_APLocalPlaybackServer != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (strnicmpx())
  {
    v19 = -6711;
    if (gLogCategory_APLocalPlaybackServer <= 50
      && (gLogCategory_APLocalPlaybackServer != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v11 = 0;
    v17 = 0;
    v15 = 0;
    v18 = 405;
    goto LABEL_80;
  }
  if (!HTTPConnectionGetNextURLSegmentEx() || strnicmpx())
  {
    v19 = -6711;
    if (gLogCategory_APLocalPlaybackServer > 50
      || gLogCategory_APLocalPlaybackServer == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_71;
    }
LABEL_46:
    LogPrintF();
LABEL_71:
    v11 = 0;
    v17 = 0;
    v15 = 0;
LABEL_79:
    v18 = 400;
    goto LABEL_80;
  }
  if (!HTTPConnectionGetNextURLSegmentEx())
  {
    v19 = -6711;
    if (gLogCategory_APLocalPlaybackServer > 50
      || gLogCategory_APLocalPlaybackServer == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_71;
    }
    goto LABEL_46;
  }
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a3 + 64), 0xFFFFFFFFFFFFFFFFLL);
  v6 = strnicmpx();
  v7 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v6)
  {
    v8 = 0;
    v9 = memrchr();
    if (v9)
      v8 = v9;
    v10 = CFStringCreateWithBytes(*v7, 0, v8, 0x8000100u, 0);
    if (!v10)
    {
      v19 = -6742;
      if (gLogCategory_APLocalPlaybackServer <= 50
        && (gLogCategory_APLocalPlaybackServer != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v11 = 0;
      goto LABEL_78;
    }
    v11 = v10;
    if (!FigCFDictionaryGetValue())
    {
      v19 = -6742;
      if (gLogCategory_APLocalPlaybackServer > 50
        || gLogCategory_APLocalPlaybackServer == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_78;
      }
      goto LABEL_66;
    }
    FigCFDictionaryGetBooleanIfPresent();
    CFStringGetTypeID();
    TypedValue = CFDictionaryGetTypedValue();
    if (!TypedValue)
    {
      v19 = -6742;
      if (gLogCategory_APLocalPlaybackServer > 50
        || gLogCategory_APLocalPlaybackServer == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_78;
      }
      goto LABEL_66;
    }
    v13 = (const __CFString *)TypedValue;
LABEL_25:
    if (*(_QWORD *)(a2 + 8392) == *(_QWORD *)(a2 + 8400))
    {
      v15 = 0;
      goto LABEL_28;
    }
    v19 = -6711;
    if (gLogCategory_APLocalPlaybackServer > 50
      || gLogCategory_APLocalPlaybackServer == -1 && !_LogCategory_Initialize())
    {
LABEL_78:
      v15 = 0;
      v17 = 1;
      goto LABEL_79;
    }
LABEL_66:
    LogPrintF();
    goto LABEL_78;
  }
  v11 = 0;
  v13 = *(const __CFString **)(a3 + 80);
  if (!*(_BYTE *)(a3 + 152))
    goto LABEL_25;
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v13);
  v15 = MutableCopy;
  if (*(_QWORD *)(a2 + 8392) == *(_QWORD *)(a2 + 8400))
  {
    v13 = MutableCopy;
LABEL_28:
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a3 + 64));
    if (v13)
    {
      APSHTTPOpenLocalFile();
      v19 = -6711;
      if (gLogCategory_APLocalPlaybackServer > 50
        || gLogCategory_APLocalPlaybackServer == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_75;
      }
    }
    else
    {
      v19 = -6711;
      if (gLogCategory_APLocalPlaybackServer > 50
        || gLogCategory_APLocalPlaybackServer == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_75;
      }
    }
    LogPrintF();
LABEL_75:
    v17 = 0;
    goto LABEL_79;
  }
  while (HTTPConnectionGetNextURLSegmentEx())
  {
    CFStringAppendFormat(v15, 0, CFSTR("/%.*s"), 0, 0);
    if (gLogCategory_APLocalPlaybackServer <= 50
      && (gLogCategory_APLocalPlaybackServer != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (*(_QWORD *)(a2 + 8392) == *(_QWORD *)(a2 + 8400))
    {
      v13 = v15;
      v11 = 0;
      goto LABEL_28;
    }
  }
  v19 = -6711;
  v17 = 1;
  v18 = 400;
  v11 = 0;
LABEL_80:
  v20 = MEMORY[0x1CAA40354](a1, v18, v19, 0, 0, 0);
  if (v20)
    APSLogErrorAt();
  if (v11)
    CFRelease(v11);
  if (v15)
    CFRelease(v15);
  if (v17)
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a3 + 64));
  return v20;
}

void APLocalPlaybackServerDestroy(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  CFObjectSetProperty();
  if (*(_QWORD *)a1)
  {
    CFRelease(*(CFTypeRef *)a1);
    *(_QWORD *)a1 = 0;
  }
  v2 = *(NSObject **)(a1 + 64);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v3 = *(const void **)(a1 + 72);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v4 = *(const void **)(a1 + 56);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v5 = *(const void **)(a1 + 80);
  if (v5)
    CFRelease(v5);
  free((void *)a1);
}

uint64_t APLocalPlaybackServerRegisterPathCreatingHostAndURL(uint64_t a1, const __CFString *a2, const __CFString *a3, CFTypeRef *a4, CFStringRef *a5)
{
  _BOOL4 v10;
  uint64_t v11;
  const void *v12;
  const __CFString *v13;
  CFStringRef v14;
  uint64_t RelativePath;
  const void *v16;
  const void *v18;
  CFStringRef theString;
  CFTypeRef cf;

  theString = 0;
  cf = 0;
  if (a2)
  {
    v10 = a3 != 0;
    *(_BYTE *)(a1 + 152) = v10;
    v11 = apLocalPlaybackServer_createURLAndHostForPath(a1, a2, v10, 0, (CFStringRef *)&cf, &theString);
    if ((_DWORD)v11)
    {
      RelativePath = v11;
      APSLogErrorAt();
      v14 = theString;
    }
    else
    {
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 64), 0xFFFFFFFFFFFFFFFFLL);
      v12 = *(const void **)(a1 + 80);
      if (a3)
        v13 = a3;
      else
        v13 = a2;
      *(_QWORD *)(a1 + 80) = v13;
      CFRetain(v13);
      if (v12)
        CFRelease(v12);
      v14 = theString;
      CFStringGetCString(theString, (char *)(a1 + 88), 64, 0x8000100u);
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 64));
      if (gLogCategory_APLocalPlaybackServer <= 40
        && (gLogCategory_APLocalPlaybackServer != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *a4 = cf;
      cf = 0;
      if (*(_BYTE *)(a1 + 152))
      {
        v18 = 0;
        RelativePath = apLocalPlaybackServer_getRelativePath(a3, a2, &v18);
        if ((_DWORD)RelativePath)
        {
          APSLogErrorAt();
        }
        else
        {
          v16 = v18;
          *a5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("/1/%@%@"), v14, v18);
          if (v16)
            CFRelease(v16);
        }
      }
      else
      {
        RelativePath = 0;
        *a5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("/1/%@"), v14);
      }
    }
    if (v14)
      CFRelease(v14);
  }
  else
  {
    APSLogErrorAt();
    RelativePath = 4294960591;
  }
  if (cf)
    CFRelease(cf);
  return RelativePath;
}

uint64_t apLocalPlaybackServer_createURLAndHostForPath(uint64_t a1, const __CFString *a2, int a3, const __CFString *a4, CFStringRef *a5, CFStringRef *a6)
{
  uint64_t v12;
  CC_LONG v13;
  const char *FileExtensionFromString;
  int v15;
  const __CFAllocator *v16;
  CFStringRef v17;
  const char *v18;
  uint64_t v19;
  CC_SHA1_CTX c;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[20];
  __int128 v26;
  char buffer[1025];
  char v28[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char cStr[16];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  *(_OWORD *)cStr = 0u;
  v33 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  *(_OWORD *)v28 = 0u;
  bzero(buffer, 0x401uLL);
  if (!a2)
    goto LABEL_15;
  v22 = 0;
  v23 = 0;
  *(_DWORD *)v25 = 0;
  v24 = 0;
  memset(&c, 0, sizeof(c));
  if (!CFStringGetCString(a2, buffer, 1025, 0x8000100u))
    goto LABEL_15;
  SockAddrCopy();
  SockAddrSetPort();
  v12 = SockAddrToString();
  if ((_DWORD)v12)
  {
    v19 = v12;
    APSLogErrorAt();
    return v19;
  }
  if (a4)
  {
    if (!CFStringGetCString(a4, v28, 64, 0x8000100u))
    {
LABEL_15:
      APSLogErrorAt();
      return 4294960591;
    }
  }
  else
  {
    CC_SHA1_Init(&c);
    CC_SHA1_Update(&c, "\xD9\x1D\xC0\x69_\x1AH\v\x94\x95\xBC\xB5\x84O\xF1\x76pLocalPlaybackServer_getRelativePath", 0x10u);
    CC_SHA1_Update(&c, (const void *)(a1 + 8), 0x10u);
    v13 = strlen(buffer);
    CC_SHA1_Update(&c, buffer, v13);
    CC_SHA1_Final(&v25[4], &c);
    v26 = *(_OWORD *)&v25[4];
    BYTE6(v26) = v25[10] & 0xF | 0x50;
    BYTE8(v26) = v25[12] & 0x3F | 0x80;
    if (SNPrintF() - 64 < 0xFFFFFFC1)
    {
      APSLogErrorAt();
      return 4294960553;
    }
  }
  FileExtensionFromString = (const char *)GetFileExtensionFromString();
  v15 = *(unsigned __int8 *)FileExtensionFromString;
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  *a5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x8000100u);
  if (a3)
  {
    v17 = CFStringCreateWithCString(v16, v28, 0x8000100u);
  }
  else
  {
    v18 = "m4v";
    if (v15)
      v18 = FileExtensionFromString;
    v17 = CFStringCreateWithFormat(v16, 0, CFSTR("%s.%s"), v28, v18, *(_QWORD *)&c.h0, *(_QWORD *)&c.h2, *(_QWORD *)&c.h4, *(_QWORD *)&c.Nh, *(_QWORD *)&c.data[1], *(_QWORD *)&c.data[3], *(_QWORD *)&c.data[5], *(_QWORD *)&c.data[7], *(_QWORD *)&c.data[9], *(_QWORD *)&c.data[11], *(_QWORD *)&c.data[13], *(_QWORD *)&c.data[15], v22, v23,
            v24,
            *(_QWORD *)v25);
  }
  v19 = 0;
  *a6 = v17;
  return v19;
}

uint64_t apLocalPlaybackServer_getRelativePath(const __CFString *a1, CFStringRef theString, _QWORD *a3)
{
  const __CFAllocator *v6;
  CFIndex Length;
  uint64_t result;

  if (!a1 || !theString)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Length = CFStringGetLength(theString);
  result = (uint64_t)CFStringCreateMutableCopy(v6, Length, theString);
  *a3 = result;
  if (result)
  {
    CFStringTrim((CFMutableStringRef)result, a1);
    if (gLogCategory_APLocalPlaybackServer > 40)
      return 0;
    if (gLogCategory_APLocalPlaybackServer != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
    {
      LogPrintF();
      return 0;
    }
  }
  return result;
}

uint64_t APLocalPlaybackServerRegisterPathWithUUIDCreatingHostAndURL(uint64_t a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, CFTypeRef *a5, CFStringRef *a6)
{
  uint64_t URLAndHostForPath;
  const __CFAllocator *v12;
  __CFDictionary *Mutable;
  uint64_t RelativePath;
  const void *v15;
  CFTypeRef v16;
  const void *v18;
  CFTypeRef cf;
  CFTypeRef v20;

  cf = 0;
  v20 = 0;
  if (!a2)
  {
    APSLogErrorAt();
    Mutable = 0;
    RelativePath = 4294960591;
    goto LABEL_19;
  }
  if (a3)
  {
    URLAndHostForPath = apLocalPlaybackServer_createURLAndHostForPath(a1, a3, a4 != 0, a2, (CFStringRef *)&v20, (CFStringRef *)&cf);
    if ((_DWORD)URLAndHostForPath)
    {
      RelativePath = URLAndHostForPath;
      APSLogErrorAt();
      Mutable = 0;
    }
    else
    {
      v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 64), 0xFFFFFFFFFFFFFFFFLL);
        if (a4)
          CFDictionarySetValue(Mutable, CFSTR("IsLocalMovPkgHLSURL"), (const void *)*MEMORY[0x1E0C9AE50]);
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 64));
        if (gLogCategory_APLocalPlaybackServer <= 40
          && (gLogCategory_APLocalPlaybackServer != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        *a5 = v20;
        v20 = 0;
        if (!a4)
        {
          v16 = cf;
          RelativePath = 0;
          *a6 = CFStringCreateWithFormat(v12, 0, CFSTR("/1/%@"), cf);
          if (!v16)
            goto LABEL_19;
          goto LABEL_18;
        }
        v18 = 0;
        RelativePath = apLocalPlaybackServer_getRelativePath(a4, a3, &v18);
        if ((_DWORD)RelativePath)
        {
          APSLogErrorAt();
        }
        else
        {
          v15 = v18;
          *a6 = CFStringCreateWithFormat(v12, 0, CFSTR("/1/%@%@"), cf, v18);
          if (v15)
            CFRelease(v15);
        }
      }
      else
      {
        APSLogErrorAt();
        RelativePath = 0;
      }
    }
  }
  else
  {
    APSLogErrorAt();
    Mutable = 0;
    RelativePath = 4294960591;
  }
  v16 = cf;
  if (cf)
LABEL_18:
    CFRelease(v16);
LABEL_19:
  if (v20)
    CFRelease(v20);
  if (Mutable)
    CFRelease(Mutable);
  return RelativePath;
}

uint64_t APLocalPlaybackServerUnRegisterUUID(uint64_t a1, const void *a2)
{
  uint64_t result;

  if (!a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 64), 0xFFFFFFFFFFFFFFFFLL);
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 72), a2);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 64));
  if (gLogCategory_APLocalPlaybackServer > 40)
    return 0;
  if (gLogCategory_APLocalPlaybackServer != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
  {
    LogPrintF();
    return 0;
  }
  return result;
}

uint64_t APPairingClientGetClassID()
{
  if (APPairingClientGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APPairingClientGetClassID_sRegisterOnce, &APPairingClientGetClassID_sClassID, (dispatch_function_t)pairingSession_registerBaseClass);
  return APPairingClientGetClassID_sClassID;
}

uint64_t pairingSession_registerBaseClass()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef pairingSession_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APPairingClient %p]"), a1);
}

uint64_t APEndpointManagerCarPlayCreate(uint64_t a1, CFTypeRef cf, CFTypeRef *a3)
{
  CFTypeID v6;
  uint64_t v7;
  uint64_t DerivedStorage;
  dispatch_queue_t v9;
  NSObject *v10;
  dispatch_queue_t v11;
  dispatch_queue_t v12;
  CFMutableStringRef Mutable;
  const __CFURL *v14;
  const __CFURL *v15;
  CFPlugInRef v16;
  __CFBundle *v17;
  const __CFUUID *v18;
  const __CFArray *FactoriesForPlugInTypeInPlugIn;
  const __CFArray *v20;
  const __CFUUID *ValueAtIndex;
  const __CFUUID *v22;
  const __CFUUID *v23;
  void *v24;
  void *v25;
  unsigned int (*v26)(void *, _QWORD, _QWORD, uint64_t *);
  const __CFUUID *v27;
  CFUUIDBytes v28;
  __CFBundle *v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  _QWORD block[7];
  CFTypeRef cfa;
  uint64_t v36;

  cfa = 0;
  if (cf && (v6 = CFGetTypeID(cf), v6 != CFDictionaryGetTypeID()) || !a3)
  {
    APSLogErrorAt();
    v32 = 4294950586;
    goto LABEL_56;
  }
  LogSetAppID();
  FigEndpointManagerGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
    v32 = v7;
    APSLogErrorAt();
    goto LABEL_56;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (cf)
    *(_BYTE *)(DerivedStorage + 360) = CFDictionaryGetInt64() != 0;
  v9 = dispatch_queue_create("com.apple.APEndpointManagerCarPlay.state", 0);
  *(_QWORD *)(DerivedStorage + 8) = v9;
  if (v9)
  {
    v10 = dispatch_queue_create("com.apple.APEndpointManagerCarPlay.notification", 0);
    *(_QWORD *)(DerivedStorage + 16) = v10;
    dispatch_retain(v10);
    v11 = dispatch_queue_create("com.apple.APEndpointManagerCarPlay.carkitPreferenceInit", 0);
    *(_QWORD *)(DerivedStorage + 24) = v11;
    if (v11)
    {
      if (!APSIsRemoteHALPluginLoadingEnabled())
      {
LABEL_34:
        CFRetain(cfa);
        v31 = *(NSObject **)(DerivedStorage + 8);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __APEndpointManagerCarPlayCreate_block_invoke;
        block[3] = &__block_descriptor_56_e5_v8__0l;
        block[4] = DerivedStorage;
        block[5] = a1;
        block[6] = cfa;
        dispatch_async(v31, block);
        if (gLogCategory_APEndpointManagerCarPlay <= 50
          && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v32 = 0;
        *a3 = cfa;
        return v32;
      }
      v36 = 0;
      if (carManager_getWeakRefTable_once != -1)
        dispatch_once(&carManager_getWeakRefTable_once, &__block_literal_global_9);
      if (FigCFWeakReferenceTableAddValueAndGetKey())
        APSLogErrorAt();
      *(_QWORD *)(DerivedStorage + 344) = v36;
      v12 = dispatch_queue_create("com.apple.airplay.apendpointManagerCarPlay.pluginregister", 0);
      *(_QWORD *)(DerivedStorage + 328) = v12;
      if (v12)
      {
        Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
        v36 = 0;
        CFStringAppendFormat(Mutable, 0, CFSTR("/System/Library/Audio/Plug-Ins/HAL/%@"), CFSTR("CarPlayHalogen.driver"));
        v14 = CFURLCreateWithFileSystemPath(0, Mutable, kCFURLPOSIXPathStyle, 1u);
        if (v14)
        {
          v15 = v14;
          v16 = CFPlugInCreate(0, v14);
          if (v16)
          {
            v17 = v16;
            v18 = CFUUIDGetConstantUUIDWithBytes(0, 0x44u, 0x3Au, 0xBAu, 0xB8u, 0xE7u, 0xB3u, 0x49u, 0x1Au, 0xB9u, 0x85u, 0xBEu, 0xB9u, 0x18u, 0x70u, 0x30u, 0xDBu);
            FactoriesForPlugInTypeInPlugIn = CFPlugInFindFactoriesForPlugInTypeInPlugIn(v18, v17);
            if (FactoriesForPlugInTypeInPlugIn)
            {
              v20 = FactoriesForPlugInTypeInPlugIn;
              if (CFArrayGetCount(FactoriesForPlugInTypeInPlugIn) <= 0)
              {
                if (gLogCategory_APEndpointManagerCarPlay <= 90
                  && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
                {
                  LogPrintF();
                }
              }
              else
              {
                ValueAtIndex = (const __CFUUID *)CFArrayGetValueAtIndex(v20, 0);
                if (ValueAtIndex
                  && (v22 = ValueAtIndex,
                      v23 = CFUUIDGetConstantUUIDWithBytes(0, 0x44u, 0x3Au, 0xBAu, 0xB8u, 0xE7u, 0xB3u, 0x49u, 0x1Au, 0xB9u, 0x85u, 0xBEu, 0xB9u, 0x18u, 0x70u, 0x30u, 0xDBu), (v24 = CFPlugInInstanceCreate(0, v22, v23)) != 0))
                {
                  v25 = v24;
                  v26 = *(unsigned int (**)(void *, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)v24 + 8);
                  v27 = CFUUIDGetConstantUUIDWithBytes(0, 0xEEu, 0xA5u, 0x77u, 0x3Du, 0xCCu, 0x43u, 0x49u, 0xF1u, 0x8Eu, 0, 0x8Fu, 0x96u, 0xE7u, 0xD2u, 0x3Bu, 0x17u);
                  v28 = CFUUIDGetUUIDBytes(v27);
                  if (v26(v25, *(_QWORD *)&v28.byte0, *(_QWORD *)&v28.byte8, &v36) || !v36)
                    APSLogErrorAt();
                  (*(void (**)(void *))(*(_QWORD *)v25 + 24))(v25);
                }
                else
                {
                  APSLogErrorAt();
                }
              }
              CFRelease(v15);
            }
            else
            {
              APSLogErrorAt();
              v20 = v15;
            }
            CFRelease(v20);
            v29 = v17;
          }
          else
          {
            APSLogErrorAt();
            v29 = v15;
          }
          CFRelease(v29);
          if (Mutable)
            goto LABEL_27;
        }
        else
        {
          APSLogErrorAt();
          if (Mutable)
LABEL_27:
            CFRelease(Mutable);
        }
        v30 = v36;
        *(_QWORD *)(DerivedStorage + 336) = v36;
        if (v30)
        {
          if (gLogCategory_APEndpointManagerCarPlay <= 50
            && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          carManager_asyncRegisterCarPlayHALDriver(cfa, 0);
          goto LABEL_34;
        }
      }
    }
  }
  APSLogErrorAt();
  v32 = 4294950585;
LABEL_56:
  if (cfa)
    CFRelease(cfa);
  return v32;
}

void carManager_asyncRegisterCarPlayHALDriver(const void *a1, unsigned int a2)
{
  uint64_t DerivedStorage;
  dispatch_time_t v5;
  NSObject *v6;
  _QWORD block[6];

  if (a1)
  {
    CFRetain(a1);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (gLogCategory_APEndpointManagerCarPlay <= 50
      && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v5 = dispatch_time(0, 1000000000 * a2);
    v6 = *(NSObject **)(DerivedStorage + 328);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __carManager_asyncRegisterCarPlayHALDriver_block_invoke;
    block[3] = &__block_descriptor_48_e5_v8__0l;
    block[4] = DerivedStorage;
    block[5] = a1;
    dispatch_after(v5, v6, block);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t carManager_handleControlServerEvent(uint64_t a1, uint64_t a2, const char *a3, size_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD block[7];
  uint8_t buf[8];
  uint64_t v17;

  v17 = a2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointManagerCarPlay <= 50
    && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!strncmp(a3, "connect", a4))
  {
    if (*(_QWORD *)(DerivedStorage + 352))
      APSEventRecorderRecordEvent();
    v9 = LogCategoryCopyOSLogHandle();
    v10 = (void *)v9;
    if (v9)
      v11 = v9;
    else
      v11 = MEMORY[0x1E0C81028];
    if (os_signpost_enabled(v11))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C943B000, v11, OS_SIGNPOST_EVENT, 0x2B8D07E0uLL, "AP_SIGNPOST_CAR_CONTROLCOMMAND_CONNECT", (const char *)&unk_1C965D452, buf, 2u);
    }
    if (v10)

    APSPowerAssertionRaiseTemporary();
    if (a5)
      CFRetain(a5);
    v12 = *(NSObject **)(DerivedStorage + 8);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __carManager_handleControlServerEvent_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = DerivedStorage;
    block[5] = a5;
    block[6] = v17;
    dispatch_async(v12, block);
    return 0;
  }
  else
  {
    if (gLogCategory_APEndpointManagerCarPlay <= 90
      && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v13 = 4294960582;
    APSLogErrorAt();
  }
  return v13;
}

void carManager_browserEventHandler(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  _QWORD v8[7];
  int v9;
  _QWORD v10[3];
  int v11;

  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2020000000;
  v11 = 0;
  v7 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __carManager_browserEventHandler_block_invoke;
  v8[3] = &unk_1E8269AC8;
  v9 = a2;
  v8[5] = a4;
  v8[6] = a3;
  v8[4] = v10;
  dispatch_sync(v7, v8);
  _Block_object_dispose(v10, 8);
}

void sub_1C94AE728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C94AE99C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t carManager_startDiscovery()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointManagerCarPlay <= 50
    && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v1 = 0;
  while (1)
  {
    v2 = *(_QWORD *)(DerivedStorage + v1 + 96);
    if (v2)
      break;
LABEL_10:
    v1 += 72;
    if (v1 == 216)
      return 0;
  }
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v3)
  {
    v5 = 4294954514;
    goto LABEL_13;
  }
  v4 = v3(v2, 3);
  if (!(_DWORD)v4)
  {
    *(_BYTE *)(DerivedStorage + v1 + 104) = 1;
    goto LABEL_10;
  }
  v5 = v4;
LABEL_13:
  APSLogErrorAt();
  carManager_stopDiscovery();
  return v5;
}

uint64_t carManager_getBrowserContextForEndpoint(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  unint64_t v4;
  uint64_t i;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = 0;
  for (i = DerivedStorage + 80; !*(_QWORD *)(i + 16); i += 72)
  {
    result = 0;
LABEL_9:
    if (v4++ >= 2)
      return result;
  }
  if (*(_QWORD *)(i + 40) == a2)
    result = i;
  else
    result = 0;
  if (!result)
    goto LABEL_9;
  return result;
}

void carManager_updateBrowserContext(const void *a1, uint64_t a2, const void *a3, int a4, int a5, int a6, int a7, int a8)
{
  const void *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  _BOOL4 v22;
  void (*v23)(const void *);
  const void *v24;
  APCarPlayPolicyMonitor *v25;
  BOOL v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  void (*v31)(const void *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  const void *v42;
  const char *v43;
  const char *v44;
  const char *v45;
  const char *v46;
  const char *v47;
  uint64_t DerivedStorage;
  _QWORD v50[5];
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = *(const void **)(a2 + 40);
  if (gLogCategory_APEndpointManagerCarPlay <= 30)
  {
    if (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize())
    {
      v16 = "y";
      v17 = "n";
      if (a4)
        v18 = "y";
      else
        v18 = "n";
      if (a5)
        v19 = "y";
      else
        v19 = "n";
      if (a6)
        v20 = "-";
      else
        v20 = "n";
      if (a6 == 1)
        v20 = "y";
      if (a7)
        v21 = "-";
      else
        v21 = "n";
      if (a7 == 1)
        v21 = "y";
      if (a8)
        v17 = "-";
      if (a8 != 1)
        v16 = v17;
      v46 = v21;
      v47 = v16;
      v44 = v19;
      v45 = v20;
      v42 = a3;
      v43 = v18;
      v41 = *(_QWORD *)(a2 + 8);
      LogPrintF();
    }
    if (gLogCategory_APEndpointManagerCarPlay <= 30
      && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
    {
      v44 = (const char *)*(unsigned __int8 *)(a2 + 50);
      v45 = (const char *)*(unsigned __int8 *)(a2 + 64);
      v42 = (const void *)*(unsigned __int8 *)(a2 + 48);
      v43 = (const char *)*(unsigned __int8 *)(a2 + 49);
      v41 = *(_QWORD *)(a2 + 40);
      LogPrintF();
    }
  }
  if (a5 && v15 == a3)
  {
    *(_BYTE *)(a2 + 50) = 0;
  }
  else if (!a6 && *(_BYTE *)(a2 + 50))
  {
    if (gLogCategory_APEndpointManagerCarPlay <= 50
      && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
    {
      v41 = *(_QWORD *)(a2 + 8);
      v42 = *(const void **)(a2 + 40);
      LogPrintF();
    }
    *(_BYTE *)(a2 + 50) = 0;
    if (!v15)
    {
      v22 = 0;
      a3 = 0;
      goto LABEL_58;
    }
    goto LABEL_49;
  }
  v22 = v15 != 0;
  if (a3 || !v15)
    goto LABEL_58;
  if (!a4)
  {
    if (*(_BYTE *)(a2 + 48))
    {
      if (gLogCategory_APEndpointManagerCarPlay <= 50
        && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_BYTE *)(a2 + 50) = 1;
      goto LABEL_77;
    }
    if (gLogCategory_APEndpointManagerCarPlay > 50
      || gLogCategory_APEndpointManagerCarPlay == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_55;
    }
    v41 = *(_QWORD *)(a2 + 8);
    v42 = v15;
    goto LABEL_52;
  }
LABEL_49:
  if (gLogCategory_APEndpointManagerCarPlay > 50
    || gLogCategory_APEndpointManagerCarPlay == -1 && !_LogCategory_Initialize())
  {
    goto LABEL_55;
  }
  v41 = *(_QWORD *)(a2 + 8);
  v42 = v15;
LABEL_52:
  LogPrintF();
LABEL_55:
  v23 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v23)
    v23(v15);
  a3 = 0;
  v22 = 1;
LABEL_58:
  if (a3 != v15)
  {
    if (gLogCategory_APEndpointManagerCarPlay <= 50
      && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
    {
      v42 = v15;
      v43 = (const char *)a3;
      v41 = *(_QWORD *)(a2 + 8);
      LogPrintF();
    }
    if (v22)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      if (*(_BYTE *)(a2 + 48))
      {
        *(_BYTE *)(a2 + 48) = 0;
        carManager_handleEndpointActivationChanged(a1, a2);
      }
      objc_msgSend(*(id *)(a2 + 56), "setDelegate:", 0, v41, v42, v43, v44, v45, v46, v47);

      *(_QWORD *)(a2 + 56) = 0;
    }
    v24 = *(const void **)(a2 + 40);
    *(_QWORD *)(a2 + 40) = a3;
    if (a3)
      CFRetain(a3);
    if (v24)
      CFRelease(v24);
    if (a3)
    {
      if (carManager_isEndpointWireless())
      {
        v25 = -[APCarPlayPolicyMonitor initWithEndpoint:]([APCarPlayPolicyMonitor alloc], "initWithEndpoint:", a3);
        *(_QWORD *)(a2 + 56) = v25;
        -[APCarPlayPolicyMonitor setDelegate:](v25, "setDelegate:", *(_QWORD *)(DerivedStorage + 40));
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    *(_BYTE *)(a2 + 50) = 0;
  }
  v15 = a3;
  if (a3)
  {
LABEL_77:
    if (a6 != -1)
      *(_BYTE *)(a2 + 48) = a6 == 1;
    if (APSGetFBOPropertyInt64())
    {
      if (a7 == -1)
      {
LABEL_85:
        if (a8 != -1)
          *(_BYTE *)(a2 + 64) = a8 == 1;
        if (*(_BYTE *)(a2 + 49))
          v27 = *(_BYTE *)(a2 + 64) == 0;
        else
          v27 = 0;
        if (*(_BYTE *)(a2 + 48))
        {
          LODWORD(a3) = 0;
        }
        else
        {
          v28 = *MEMORY[0x1E0CA4130];
          v29 = APSGetFBOPropertyInt64();
          LODWORD(a3) = v27 && v29 == 0;
          v31 = *(void (**)(const void *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (v31)
          {
            if (v27)
              v32 = *MEMORY[0x1E0C9AE50];
            else
              v32 = *MEMORY[0x1E0C9AE40];
            v31(v15, v28, v32);
          }
        }
        goto LABEL_103;
      }
      v26 = a7 == 1;
    }
    else
    {
      v26 = 1;
    }
    *(_BYTE *)(a2 + 49) = v26;
    goto LABEL_85;
  }
  *(_WORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 64) = 0;
LABEL_103:
  if (gLogCategory_APEndpointManagerCarPlay <= 30
    && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v33 = CMBaseObjectGetDerivedStorage();
  v34 = 0;
  while (1)
  {
    if (!*(_QWORD *)(v33 + v34 + 96) || !*(_QWORD *)(v33 + v34 + 120))
      goto LABEL_117;
    v35 = v33 + v34;
    if (!*(_BYTE *)(v33 + v34 + 144))
    {
      if (*(_BYTE *)(v35 + 129))
        break;
    }
    if (*(_BYTE *)(v35 + 128))
    {
      v36 = v33 + v34 + 80;
      v37 = gLogCategory_APEndpointManagerCarPlay;
      if (gLogCategory_APEndpointManagerCarPlay <= 30)
      {
        if (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize())
          goto LABEL_133;
        goto LABEL_120;
      }
      goto LABEL_121;
    }
    if (gLogCategory_APEndpointManagerCarPlay <= 30
      && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
LABEL_117:
    v34 += 72;
    if (v34 == 216)
    {
      v36 = 0;
      goto LABEL_120;
    }
  }
  v36 = v33 + v34 + 80;
  v37 = gLogCategory_APEndpointManagerCarPlay;
  if (gLogCategory_APEndpointManagerCarPlay <= 30)
  {
    if (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize())
LABEL_133:
      LogPrintF();
LABEL_120:
    v37 = gLogCategory_APEndpointManagerCarPlay;
  }
LABEL_121:
  if (((v36 == *(_QWORD *)(v33 + 296)) & ~(_DWORD)a3) != 0)
  {
    if (v37 <= 30 && (v37 != -1 || _LogCategory_Initialize()))
      LogPrintF();
  }
  else
  {
    if (v37 <= 50 && (v37 != -1 || _LogCategory_Initialize()))
      LogPrintF();
    CFRetain(a1);
    v38 = *(NSObject **)(v33 + 16);
    v39 = MEMORY[0x1E0C809B0];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __carManager_updateCurrentEndpoint_block_invoke;
    block[3] = &__block_descriptor_48_e5_v8__0l;
    block[4] = v33;
    block[5] = a1;
    dispatch_async(v38, block);
    if (!v36 || !*(_QWORD *)(v33 + 296))
    {
      if (gLogCategory_APEndpointManagerCarPlay <= 50
        && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFRetain(a1);
      v40 = *(NSObject **)(v33 + 16);
      v50[0] = v39;
      v50[1] = 3221225472;
      v50[2] = __carManager_updateCurrentEndpoint_block_invoke_218;
      v50[3] = &__block_descriptor_40_e5_v8__0l;
      v50[4] = a1;
      dispatch_async(v40, v50);
    }
    if (gLogCategory_APEndpointManagerCarPlay <= 30
      && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_QWORD *)(v33 + 296) = v36;
  }
}

void sub_1C94AF8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t carManager_stopDiscovery()
{
  uint64_t result;
  uint64_t v1;
  uint64_t i;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, _QWORD);

  result = CMBaseObjectGetDerivedStorage();
  v1 = result;
  if (gLogCategory_APEndpointManagerCarPlay <= 50)
  {
    if (gLogCategory_APEndpointManagerCarPlay != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      result = LogPrintF();
  }
  for (i = 0; i != 216; i += 72)
  {
    v3 = *(_QWORD *)(v1 + i + 96);
    if (v3)
    {
      result = CMBaseObjectGetVTable();
      v4 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(result + 16) + 16);
      if (v4)
        result = v4(v3, 0);
      *(_BYTE *)(v1 + i + 104) = 0;
    }
  }
  return result;
}

uint64_t carManager_invalidate(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __carManager_invalidate_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_sync(v2, block);
  return 0;
}

void carManager_finalize(const void *a1)
{
  uint64_t DerivedStorage;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t i;
  uint64_t v11;
  const void *v12;
  const void *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointManagerCarPlay <= 50
    && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  carManager_invalidateInternal(a1);
  MEMORY[0x1CAA3FC58](DerivedStorage + 304);
  v3 = *(void **)(DerivedStorage + 320);
  if (v3)
  {
    objc_msgSend(v3, "invalidate");

    *(_QWORD *)(DerivedStorage + 320) = 0;
  }
  v4 = *(NSObject **)(DerivedStorage + 328);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(DerivedStorage + 328) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 344))
  {
    if (carManager_getWeakRefTable_once != -1)
      dispatch_once(&carManager_getWeakRefTable_once, &__block_literal_global_9);
    FigCFWeakReferenceTableRemoveValue();
    *(_QWORD *)(DerivedStorage + 344) = 0;
  }
  v5 = *(_QWORD *)(DerivedStorage + 336);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    *(_QWORD *)(DerivedStorage + 336) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 352);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 352) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 48);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 56);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 64);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  for (i = 0; i != 216; i += 72)
  {
    v11 = DerivedStorage + i;
    v12 = *(const void **)(DerivedStorage + i + 96);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(v11 + 96) = 0;
      v13 = *(const void **)(v11 + 120);
      if (v13)
      {
        CFRelease(v13);
        *(_QWORD *)(v11 + 120) = 0;
      }
      objc_msgSend(*(id *)(DerivedStorage + i + 136), "setDelegate:", 0);

      *(_QWORD *)(DerivedStorage + i + 136) = 0;
    }
  }
  v14 = *(NSObject **)(DerivedStorage + 8);
  if (v14)
  {
    dispatch_release(v14);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v15 = *(NSObject **)(DerivedStorage + 16);
  if (v15)
  {
    dispatch_release(v15);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v16 = *(NSObject **)(DerivedStorage + 24);
  if (v16)
  {
    dispatch_release(v16);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  objc_msgSend(*(id *)(DerivedStorage + 32), "setDelegate:", 0);

  *(_QWORD *)(DerivedStorage + 32) = 0;
  *(_QWORD *)(DerivedStorage + 40) = 0;
  if (gLogCategory_APEndpointManagerCarPlay <= 50
    && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

__CFString *carManager_copyDebugDescription(uint64_t a1)
{
  uint64_t v2;
  __CFString *Mutable;
  uint64_t CMBaseObject;
  unsigned int (*v5)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v6;
  _BYTE *v7;
  CFTypeRef cf;

  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  cf = 0;
  CFStringAppendFormat(Mutable, 0, CFSTR("<APEndpointManagerCarPlay %p>"), a1);
  CMBaseObject = FigEndpointManagerGetCMBaseObject();
  v5 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (!v5 || v5(CMBaseObject, CFSTR("ShowInfo"), v2, &cf))
  {
    APSLogErrorAt();
  }
  else
  {
    v6 = ASPrintF();
    if (v6)
    {
      v7 = (_BYTE *)(v6 - 1);
      if (*v7 == 10)
        *v7 = 0;
    }
    CFStringAppendFormat(Mutable, 0, CFSTR("%s"), 0);
  }
  if (cf)
    CFRelease(cf);
  free(0);
  if (!Mutable)
    return (__CFString *)CFRetain(CFSTR("<APEndpointManagerCarPlay>"));
  return Mutable;
}

uint64_t carManager_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  uint64_t v8;
  _QWORD block[9];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointManagerCarPlay <= 10
    && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v7 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __carManager_setProperty_block_invoke;
  block[3] = &unk_1E8269AA0;
  block[4] = &v11;
  block[5] = DerivedStorage;
  block[6] = a2;
  block[7] = a3;
  block[8] = a1;
  dispatch_sync(v7, block);
  v8 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_1C94AFF78(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __carManager_invalidate_block_invoke(uint64_t a1)
{
  return carManager_invalidateInternal(*(const void **)(a1 + 32));
}

uint64_t carManager_invalidateInternal(const void *a1)
{
  uint64_t result;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)result)
  {
    v3 = (_BYTE *)result;
    if (gLogCategory_APEndpointManagerCarPlay <= 30
      && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *v3 = 1;
    v4 = v3 + 96;
    AirPlayDebugIPCDisableForEndpointManager(a1);
    for (i = 0; i != 216; i += 72)
    {
      result = *(_QWORD *)&v4[i];
      if (result)
      {
        result = APBrowserGetCMBaseObject();
        if (result)
        {
          v6 = result;
          result = CMBaseObjectGetVTable();
          v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 24);
          if (v7)
            result = v7(v6);
        }
      }
    }
  }
  return result;
}

uint64_t __carManager_getWeakRefTable_block_invoke()
{
  uint64_t result;

  result = FigCFWeakReferenceTableCreate();
  if ((_DWORD)result)
  {
    result = gLogCategory_APEndpointManagerCarPlay;
    if (gLogCategory_APEndpointManagerCarPlay <= 50)
      result = __carManager_getWeakRefTable_block_invoke_cold_1(gLogCategory_APEndpointManagerCarPlay);
    __break(1u);
  }
  return result;
}

const __CFDictionary *carManager_appendEndpointStreamShowInfo(const __CFDictionary *result)
{
  const __CFDictionary *v1;
  const void *v2;
  void *value;

  if (result)
  {
    v1 = result;
    value = (void *)CFDictionaryGetValue(result, CFSTR("Subtype"));
    CFDictionaryGetValue(v1, CFSTR("Type"));
    CFDictionaryGetInt64();
    CFStringAppendF();
    if (CFDictionaryGetValueIfPresent(v1, CFSTR("ScreenInfo"), (const void **)&value) && value)
    {
      v2 = (const void *)FigCFCopyCompactDescription();
      CFStringAppendF();
      if (v2)
        CFRelease(v2);
    }
    return (const __CFDictionary *)CFStringAppendF();
  }
  return result;
}

uint64_t __carManager_setProperty_block_invoke(uint64_t a1)
{
  const void *v2;
  CFTypeID v3;
  int Value;
  uint64_t result;
  uint64_t v6;
  int v7;

  if (**(_BYTE **)(a1 + 40))
  {
    result = APSLogErrorAt();
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = -16712;
    goto LABEL_17;
  }
  if (!CFEqual(*(CFTypeRef *)(a1 + 48), CFSTR("OverrideEndpointManagerEnabled")))
  {
    if (gLogCategory_APEndpointManagerCarPlay <= 60
      && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -12784;
    return APSLogErrorAt();
  }
  v2 = *(const void **)(a1 + 56);
  if (!v2 || (v3 = CFGetTypeID(v2), v3 != CFBooleanGetTypeID()))
  {
    result = APSLogErrorAt();
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = -16710;
LABEL_17:
    *(_DWORD *)(v6 + 24) = v7;
    return result;
  }
  Value = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 56));
  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 312) = Value;
  if (!Value)
    return carManager_stopDiscovery();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = carManager_startDiscovery();
  result = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if ((_DWORD)result)
    return APSLogErrorAt();
  return result;
}

void __carManager_asyncRegisterCarPlayHALDriver_block_invoke(uint64_t a1)
{
  int v2;
  int v3;

  v2 = AudioServerPlugInRegisterRemote();
  if (v2)
    v3 = 60;
  else
    v3 = 50;
  if (v3 >= gLogCategory_APEndpointManagerCarPlay
    && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v2)
  {
    if (gLogCategory_APEndpointManagerCarPlay <= 50
      && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    carManager_asyncRegisterCarPlayHALDriver(*(_QWORD *)(a1 + 40), 1);
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __carManager_asyncRegisterCarPlayHALDriver_block_invoke_2()
{
  uint64_t v0;
  const void *v1;

  if (carManager_getWeakRefTable_once != -1)
    dispatch_once(&carManager_getWeakRefTable_once, &__block_literal_global_9);
  v0 = FigCFWeakReferenceTableCopyValue();
  if (v0)
  {
    v1 = (const void *)v0;
    if (gLogCategory_APEndpointManagerCarPlay <= 50
      && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    carManager_asyncRegisterCarPlayHALDriver(v1, 1);
    CFRelease(v1);
  }
  else if (gLogCategory_APEndpointManagerCarPlay <= 90
         && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void __carManager_handleControlServerEvent_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(*(_QWORD *)(a1 + 32) + 64);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) = 0;
  }
  CFGetAllocator(*(CFTypeRef *)(a1 + 40));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) = FigCFNumberCreateUInt64();
  *(CFAbsoluteTime *)(*(_QWORD *)(a1 + 32) + 72) = CFAbsoluteTimeGetCurrent();
  if (gLogCategory_APEndpointManagerCarPlay <= 50
    && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  carManager_handlePendingAutoconnect(*(const void **)(a1 + 40));
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

void carManager_handlePendingAutoconnect(const void *a1)
{
  uint64_t DerivedStorage;
  double Current;
  double v4;
  uint64_t UInt64;
  uint64_t v7;
  int v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  uint64_t i;
  uint64_t v15;
  const void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t DiscoveryIDForEndpoint;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Current = CFAbsoluteTimeGetCurrent();
  if (*(_QWORD *)(DerivedStorage + 64))
  {
    v4 = Current - *(double *)(DerivedStorage + 72);
    UInt64 = FigCFNumberGetUInt64();
    v18 = UInt64;
    if (v4 >= 0.0 && v4 <= 5.0)
    {
      v7 = *(_QWORD *)(DerivedStorage + 296);
      if (v7)
      {
        if (carManager_getDiscoveryIDForEndpoint(*(const void **)(v7 + 40)) == UInt64)
        {
          v8 = *(unsigned __int8 *)(*(_QWORD *)(DerivedStorage + 296) + 48);
          v9 = APSGetFBOPropertyInt64() != 0;
        }
        else
        {
          v8 = 0;
          v9 = 0;
        }
        if (gLogCategory_APEndpointManagerCarPlay <= 50
          && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
      if (!v8 && !v9)
      {
        for (i = 0; i != 216; i += 72)
        {
          v15 = DerivedStorage + i;
          if (*(_QWORD *)(DerivedStorage + i + 96))
          {
            v16 = *(const void **)(v15 + 120);
            if (v16)
            {
              DiscoveryIDForEndpoint = carManager_getDiscoveryIDForEndpoint(*(const void **)(v15 + 120));
              if (gLogCategory_APEndpointManagerCarPlay <= 50
                && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              if (DiscoveryIDForEndpoint == v18)
              {
                carManager_updateBrowserContext(a1, DerivedStorage + i + 80, v16, 0, 0, -1, 1, -1);
                v17 = *(const void **)(DerivedStorage + 64);
                if (v17)
                {
                  CFRelease(v17);
                  *(_QWORD *)(DerivedStorage + 64) = 0;
                }
                return;
              }
            }
          }
        }
        if (gLogCategory_APEndpointManagerCarPlay <= 50
          && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
        {
          goto LABEL_11;
        }
      }
    }
    else
    {
      if (gLogCategory_APEndpointManagerCarPlay <= 50
        && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v10 = 0;
      while (1)
      {
        v11 = DerivedStorage + v10;
        if (*(_QWORD *)(DerivedStorage + v10 + 96))
        {
          v12 = *(const void **)(v11 + 120);
          if (v12)
          {
            if (carManager_getDiscoveryIDForEndpoint(*(const void **)(v11 + 120)) == v18)
              break;
          }
        }
        v10 += 72;
        if (v10 == 216)
          goto LABEL_30;
      }
      carManager_updateBrowserContext(a1, DerivedStorage + v10 + 80, v12, 0, 0, -1, 0, -1);
LABEL_30:
      v13 = *(const void **)(DerivedStorage + 64);
      if (v13)
      {
        CFRelease(v13);
        *(_QWORD *)(DerivedStorage + 64) = 0;
      }
      *(_QWORD *)(DerivedStorage + 72) = 0;
    }
  }
  else if (gLogCategory_APEndpointManagerCarPlay <= 50
         && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
  {
LABEL_11:
    LogPrintF();
  }
}

uint64_t carManager_getDiscoveryIDForEndpoint(const void *a1)
{
  uint64_t CMBaseObject;
  unsigned int (*v3)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v4;
  CFAllocatorRef v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  uint64_t UInt64;
  CFTypeRef cf;
  CFTypeRef v11;

  cf = 0;
  v11 = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v3 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (v3
    && !v3(CMBaseObject, CFSTR("EndpointDescription"), 0, &v11)
    && (v4 = v11,
        v5 = CFGetAllocator(a1),
        v6 = APEndpointDescriptionGetCMBaseObject(v4),
        (v7 = *(unsigned int (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48)) != 0)
    && !v7(v6, CFSTR("TransportDevice"), v5, &cf)
    && APTransportDeviceGetDiscoveryID())
  {
    UInt64 = FigCFNumberGetUInt64();
  }
  else
  {
    APSLogErrorAt();
    UInt64 = 0;
  }
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  return UInt64;
}

uint64_t __carManager_browserEventHandler_block_invoke(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  const __CFDictionary *v4;
  const void *v5;
  uint64_t DerivedStorage;
  CFAllocatorRef v7;
  uint64_t v8;
  int v9;
  const void *v10;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v13;
  unsigned int (*v14)(CFTypeRef, CFTypeRef);
  BOOL v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  const __CFAllocator *v20;
  __CFDictionary *Mutable;
  const void *v22;
  const void **v23;
  const void *v24;
  const void *Value;
  int v26;
  char v27;
  int v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef cf;

  if (gLogCategory_APEndpointManagerCarPlay <= 30
    && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
  {
    APBrowserGetEventString();
    LogPrintF();
  }
  result = *(unsigned int *)(a1 + 56);
  switch((int)result)
  {
    case 3:
    case 4:
      v3 = *(_QWORD *)(a1 + 40);
      v4 = *(const __CFDictionary **)(a1 + 48);
      v5 = *(const void **)(v3 + 32);
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v7 = CFGetAllocator(v5);
      v29 = 0;
      v30 = 0;
      if (!v4)
      {
        APSLogErrorAt();
        v28 = -6762;
        goto LABEL_63;
      }
      v8 = (uint64_t)v7;
      v9 = APTransportDeviceCreate();
      if (v9)
      {
        v28 = v9;
        goto LABEL_74;
      }
      v10 = *(const void **)(v3 + 40);
      if (v10)
      {
        v29 = CFRetain(v10);
        cf = 0;
        CMBaseObject = FigEndpointGetCMBaseObject();
        v12 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
        if (!v12)
          goto LABEL_77;
        v12(CMBaseObject, CFSTR("EndpointDescription"), 0, &cf);
        v13 = cf;
        if (!cf)
          goto LABEL_77;
        v14 = *(unsigned int (**)(CFTypeRef, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v14)
          v15 = v14(v13, v30) == 0;
        else
          v15 = 1;
        if (cf)
          CFRelease(cf);
        if (!v15)
        {
          if (gLogCategory_APEndpointManagerCarPlay > 50
            || gLogCategory_APEndpointManagerCarPlay == -1 && !_LogCategory_Initialize())
          {
            goto LABEL_55;
          }
        }
        else
        {
LABEL_77:
          if (gLogCategory_APEndpointManagerCarPlay > 90
            || gLogCategory_APEndpointManagerCarPlay == -1 && !_LogCategory_Initialize())
          {
            goto LABEL_55;
          }
        }
        LogPrintF();
LABEL_55:
        v27 = -1;
LABEL_60:
        carManager_updateBrowserContext(v5, v3, v29, 1, 1, v27, -1, -1);
        carManager_handlePendingAutoconnect(v5);
        v28 = 0;
        goto LABEL_61;
      }
      if (*(_BYTE *)(DerivedStorage + 360))
      {
        v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFDictionarySetValue(Mutable, CFSTR("carPlayTestControlMode"), (const void *)*MEMORY[0x1E0C9AE50]);
        v22 = *(const void **)(DerivedStorage + 352);
        if (!v22)
          goto LABEL_32;
        if (Mutable)
          goto LABEL_31;
        v23 = (const void **)(DerivedStorage + 352);
LABEL_30:
        Mutable = CFDictionaryCreateMutable(v20, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v22 = *v23;
LABEL_31:
        CFDictionarySetValue(Mutable, CFSTR("EventRecorder"), v22);
        goto LABEL_32;
      }
      if (*(_QWORD *)(DerivedStorage + 352))
      {
        v23 = (const void **)(DerivedStorage + 352);
        v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        goto LABEL_30;
      }
      Mutable = 0;
LABEL_32:
      v24 = (const void *)*MEMORY[0x1E0CF1E10];
      if (CFDictionaryContainsKey(v4, (const void *)*MEMORY[0x1E0CF1E10]))
      {
        if (!Mutable)
          Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        Value = CFDictionaryGetValue(v4, v24);
        CFDictionarySetValue(Mutable, CFSTR("sessionHostInfo"), Value);
      }
      v26 = APEndpointCarPlayCreateWithTransportDevice(v8, v30, Mutable, &v29);
      if (!v26)
      {
        if (!*(_WORD *)v3)
          carManager_isEndpointWireless();
        if (gLogCategory_APEndpointManagerCarPlay <= 50
          && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
        {
          APSGetFBOPropertyInt64();
          LogPrintF();
        }
        if (Mutable)
          CFRelease(Mutable);
        v27 = 0;
        goto LABEL_60;
      }
      v28 = v26;
LABEL_74:
      APSLogErrorAt();
LABEL_61:
      if (v29)
        CFRelease(v29);
LABEL_63:
      if (v30)
        CFRelease(v30);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v28;
      result = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      if ((_DWORD)result)
        return APSLogErrorAt();
      return result;
    case 5:
    case 6:
      v16 = *(_QWORD *)(a1 + 40);
      v17 = *(const void **)(v16 + 32);
      v18 = *(_QWORD *)(v16 + 40);
      CMBaseObjectGetDerivedStorage();
      if (v18)
        carManager_updateBrowserContext(v17, v16, 0, 1, 0, -1, -1, -1);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
      result = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      if ((_DWORD)result)
        return APSLogErrorAt();
      return result;
    case 7:
      v19 = *(_QWORD *)(a1 + 40);
      CMBaseObjectGetDerivedStorage();
      if (*(_QWORD *)(v19 + 40))
        carManager_updateBrowserContext(*(const void **)(v19 + 32), v19, 0, 1, 0, -1, -1, -1);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
      result = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      if ((_DWORD)result)
        return APSLogErrorAt();
      return result;
    case 8:
      return result;
    default:
      if (gLogCategory_APEndpointManagerCarPlay <= 90)
      {
        if (gLogCategory_APEndpointManagerCarPlay != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        {
          APBrowserGetEventString();
          return LogPrintF();
        }
      }
      return result;
  }
}

BOOL carManager_isEndpointWireless()
{
  uint64_t CMBaseObject;
  void (*v1)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  _BOOL8 v2;
  CFTypeRef cf;

  cf = 0;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v1 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  v2 = 0;
  if (v1)
  {
    v1(CMBaseObject, *MEMORY[0x1E0CA4460], 0, &cf);
    if (cf)
    {
      if (FigCFEqual())
        v2 = 1;
    }
  }
  if (cf)
    CFRelease(cf);
  return v2;
}

void carManager_handleEndpointActivated(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t DerivedStorage;
  NSObject *v10;
  _QWORD v11[8];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a2);
  if (a4)
    CFRetain(a4);
  if (a3)
    CFRetain(a3);
  if (a5)
    CFRetain(a5);
  v10 = *(NSObject **)(DerivedStorage + 8);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __carManager_handleEndpointActivated_block_invoke;
  v11[3] = &__block_descriptor_64_e5_v8__0l;
  v11[4] = a2;
  v11[5] = a4;
  v11[6] = a5;
  v11[7] = a3;
  dispatch_async(v10, v11);
}

void carManager_handleEndpointDeactivatedOrDissociated(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t DerivedStorage;
  NSObject *v10;
  _QWORD block[9];
  _QWORD v12[4];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2020000000;
  v12[3] = 0;
  if (gLogCategory_APEndpointManagerCarPlay <= 50
    && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA3B40]);
  CFRetain(a2);
  if (a4)
    CFRetain(a4);
  if (a3)
    CFRetain(a3);
  if (a5)
    CFRetain(a5);
  v10 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __carManager_handleEndpointDeactivatedOrDissociated_block_invoke;
  block[3] = &unk_1E8269AA0;
  block[4] = v12;
  block[5] = a2;
  block[6] = a4;
  block[7] = a5;
  block[8] = a3;
  dispatch_async(v10, block);
  _Block_object_dispose(v12, 8);
}

void sub_1C94B15B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void carManager_handleEndpointActivationChanged(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const __CFDictionary *Mutable;
  double Current;
  uint64_t v7;
  const void *v8;
  void *v9;
  double v10;
  double v11;
  pid_t v13;
  uint64_t v14;
  const __CFDictionary *v15;
  const void *v16;
  uint64_t v17;
  const void **v18;
  _BOOL4 isEndpointWireless;
  const void **v20;
  uint64_t CMBaseObject;
  uint64_t (*v22)(uint64_t, _QWORD, _QWORD, void **);
  int v23;
  void *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, _QWORD, _QWORD, void **);
  int v27;
  void *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, _QWORD, _QWORD, void **);
  int v31;
  void *v32;
  const __CFString *v33;
  int v34;
  const void *v35;
  const __CFString *v36;
  CFMutableDictionaryRef v37;
  CFMutableDictionaryRef v38;
  NSObject *v39;
  _QWORD block[5];
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAbsoluteTimeGetCurrent();
  if (*(_BYTE *)(a2 + 48))
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!*(_QWORD *)(DerivedStorage + 320))
      *(_QWORD *)(DerivedStorage + 320) = objc_alloc_init(getCRSSessionControllerClass());
    Current = CFAbsoluteTimeGetCurrent();
    value = 0;
    if (carManager_getEndpointActivationStateFilePath_once != -1)
      dispatch_once(&carManager_getEndpointActivationStateFilePath_once, &__block_literal_global_200);
    v7 = CFPropertyListCreateFromFilePath();
    if (v7)
    {
      v8 = (const void *)v7;
      FigCFDictionaryGetDoubleIfPresent();
      if (gLogCategory_APEndpointManagerCarPlay <= 50
        && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFRelease(v8);
      v10 = *(double *)&value;
    }
    else
    {
      v10 = 0.0;
    }
    v11 = Current - v10;
    if (v11 <= 0.0 || v11 >= 15.0)
    {
      v13 = getpid();
      LODWORD(value) = 0;
      if (carManager_getEndpointActivationStateFilePath_once != -1)
        dispatch_once(&carManager_getEndpointActivationStateFilePath_once, &__block_literal_global_200);
      v14 = CFPropertyListCreateFromFilePath();
      if (!v14)
        goto LABEL_62;
      v15 = (const __CFDictionary *)v14;
      FigCFDictionaryGetInt32IfPresent();
      if ((_DWORD)value == v13 || CFDictionaryContainsKey(v15, CFSTR("deactivation_time")))
      {
        v16 = v15;
LABEL_52:
        CFRelease(v16);
LABEL_62:
        if (CFDictionaryGetCount(Mutable) >= 1)
        {
          if (gLogCategory_APEndpointManagerCarPlay <= 40
            && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          APSSetFBOPropertyDictionary();
        }
        FigCFWeakReferenceStore();
        if (Mutable)
          CFRelease(Mutable);
        goto LABEL_70;
      }
      if (gLogCategory_APEndpointManagerCarPlay <= 60
        && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFRelease(v15);
      v35 = (const void *)*MEMORY[0x1E0C9AE50];
      v36 = CFSTR("APCarPlay_sessionCrash");
LABEL_61:
      CFDictionarySetValue(Mutable, v36, v35);
      goto LABEL_62;
    }
    value = 0;
    v17 = MEMORY[0x1CAA3FC88](DerivedStorage + 304);
    v18 = (const void **)MEMORY[0x1E0C9AE50];
    if (!v17)
    {
      v34 = FigCFEqual();
      v35 = *v18;
      if (v34)
        v36 = CFSTR("APCarPlay_sessionSoftReset");
      else
        v36 = CFSTR("APCarPlay_sessionHardReset");
      goto LABEL_61;
    }
    isEndpointWireless = carManager_isEndpointWireless();
    v20 = (const void **)MEMORY[0x1E0C9AE40];
    if (isEndpointWireless)
      v20 = v18;
    CFDictionarySetValue(Mutable, CFSTR("APCarPlay_wasWireless"), *v20);
    CMBaseObject = FigEndpointGetCMBaseObject();
    v22 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v22)
    {
      v23 = v22(CMBaseObject, *MEMORY[0x1E0CA4338], 0, &value);
      v24 = value;
      if (v23 || !value)
      {
LABEL_32:
        if (v24)
        {
          CFRelease(v24);
          value = 0;
        }
        v25 = FigEndpointGetCMBaseObject();
        v26 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
        if (v26)
        {
          v27 = v26(v25, *MEMORY[0x1E0CA4318], 0, &value);
          v28 = value;
          if (v27 || !value)
          {
LABEL_39:
            if (v28)
            {
              CFRelease(v28);
              value = 0;
            }
            v29 = FigEndpointGetCMBaseObject();
            v30 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
            if (v30)
            {
              v31 = v30(v29, *MEMORY[0x1E0CA4210], 0, &value);
              v32 = value;
              if (v31 || !value)
                goto LABEL_46;
              CFDictionarySetValue(Mutable, CFSTR("APCarPlay_wasFirmwareVersion"), value);
            }
            v32 = value;
LABEL_46:
            if (v32)
            {
              CFRelease(v32);
              value = 0;
            }
            if (FigCFEqual())
              v33 = CFSTR("APCarPlay_sessionSoftReset");
            else
              v33 = CFSTR("APCarPlay_sessionHardReset");
            CFDictionarySetValue(Mutable, v33, *v18);
            v16 = (const void *)v17;
            goto LABEL_52;
          }
          CFDictionarySetValue(Mutable, CFSTR("APCarPlay_wasManufacturer"), value);
        }
        v28 = value;
        goto LABEL_39;
      }
      CFDictionarySetValue(Mutable, CFSTR("APCarPlay_wasModel"), value);
    }
    v24 = value;
    goto LABEL_32;
  }
  v9 = *(void **)(DerivedStorage + 320);
  if (v9)
  {
    objc_msgSend(v9, "invalidate");

    *(_QWORD *)(DerivedStorage + 320) = 0;
  }
LABEL_70:
  getpid();
  v37 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v37)
  {
    v38 = v37;
    if (gLogCategory_APEndpointManagerCarPlay <= 50
      && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    FigCFDictionarySetInt32();
    FigCFDictionarySetDouble();
    if (carManager_getEndpointActivationStateFilePath_once != -1)
      dispatch_once(&carManager_getEndpointActivationStateFilePath_once, &__block_literal_global_200);
    if (CFPropertyListWriteToFilePath())
      APSLogErrorAt();
    CFRelease(v38);
  }
  else
  {
    APSLogErrorAt();
  }
  if (gLogCategory_APEndpointManagerCarPlay <= 50
    && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRetain(a1);
  v39 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __carManager_handleEndpointActivationChanged_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_async(v39, block);
}

void __carManager_handleEndpointActivated_block_invoke(uint64_t *a1)
{
  uint64_t BrowserContextForEndpoint;
  uint64_t v3;
  const void *v4;
  const void *v5;
  const void *v6;

  BrowserContextForEndpoint = carManager_getBrowserContextForEndpoint(a1[4], a1[5]);
  if (BrowserContextForEndpoint)
  {
    v3 = BrowserContextForEndpoint;
    carManager_updateBrowserContext(a1[4], BrowserContextForEndpoint, a1[5], 0, 0, 1, 0, 0xFFFFFFFFLL);
    carManager_handleEndpointActivationChanged((const void *)a1[4], v3);
  }
  v4 = (const void *)a1[6];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[7];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[5];
  if (v6)
    CFRelease(v6);
  CFRelease((CFTypeRef)a1[4]);
}

void __carManager_handleEndpointDeactivatedOrDissociated_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;

  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = carManager_getBrowserContextForEndpoint(a1[5], a1[6]);
  v2 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  if (v2)
  {
    carManager_updateBrowserContext(a1[5], v2, a1[6], 0, 0, 0, 0xFFFFFFFFLL, 0xFFFFFFFFLL);
    carManager_handleEndpointActivationChanged((const void *)a1[5], *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24));
    carManager_handlePendingAutoconnect(a1[5]);
  }
  v3 = (const void *)a1[7];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[8];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[6];
  if (v5)
    CFRelease(v5);
  CFRelease((CFTypeRef)a1[5]);
}

void __carManager_handleEndpointActivationChanged_block_invoke(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

Class initCRSSessionController()
{
  Class result;

  if (CarPlayServicesLibrary_sOnce != -1)
    dispatch_once(&CarPlayServicesLibrary_sOnce, &__block_literal_global_195_0);
  result = objc_getClass("CRSSessionController");
  classCRSSessionController = (uint64_t)result;
  getCRSSessionControllerClass = CRSSessionControllerFunction;
  return result;
}

uint64_t CRSSessionControllerFunction()
{
  return classCRSSessionController;
}

void __carManager_getEndpointActivationStateFilePath_block_invoke()
{
  void *v0;

  v0 = (void *)MEMORY[0x1CAA40DD4]();
  NSTemporaryDirectory();
  SNPrintF();
  if (gLogCategory_APEndpointManagerCarPlay <= 40
    && (gLogCategory_APEndpointManagerCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  objc_autoreleasePoolPop(v0);
}

void __carManager_updateCurrentEndpoint_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  NSObject *v4;
  uint8_t v5[16];

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 352))
    APSEventRecorderRecordEvent();
  v2 = LogCategoryCopyOSLogHandle();
  v3 = (void *)v2;
  if (v2)
    v4 = v2;
  else
    v4 = MEMORY[0x1E0C81028];
  if (os_signpost_enabled(v4))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1C943B000, v4, OS_SIGNPOST_EVENT, 0x2B160190uLL, "AP_SIGNPOST_SETAUTOCONNECTENDPOINT", (const char *)&unk_1C965D452, v5, 2u);
  }
  if (v3)

  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __carManager_updateCurrentEndpoint_block_invoke_218(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t APEndpointDisplayDescriptionGetTypeID()
{
  if (APEndpointDisplayDescriptionGetTypeID_sAPEndpointDisplayDescriptionOnce != -1)
    dispatch_once(&APEndpointDisplayDescriptionGetTypeID_sAPEndpointDisplayDescriptionOnce, &__block_literal_global_10);
  return sAPEndpointDisplayDescriptionTypeID;
}

uint64_t APEndpointDisplayDescriptionCreateWithDisplayInfo(uint64_t a1, const void *a2, _QWORD *a3)
{
  CFTypeID TypeID;
  uint64_t Instance;
  _QWORD *v7;
  dispatch_queue_t v8;
  CFTypeRef v9;
  uint64_t v10;

  if (!a3)
  {
    v10 = 4294895515;
LABEL_13:
    APSLogErrorAt();
    return v10;
  }
  if (!a2)
  {
    v10 = 4294895515;
    goto LABEL_13;
  }
  TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    v10 = 4294895515;
    goto LABEL_13;
  }
  if (APEndpointDisplayDescriptionGetTypeID_sAPEndpointDisplayDescriptionOnce != -1)
    dispatch_once(&APEndpointDisplayDescriptionGetTypeID_sAPEndpointDisplayDescriptionOnce, &__block_literal_global_10);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt();
    return 4294895516;
  }
  v7 = (_QWORD *)Instance;
  *(_QWORD *)(Instance + 16) = 0;
  *(_QWORD *)(Instance + 24) = 0;
  v8 = dispatch_queue_create("com.apple.AirPlay.APEndpointDisplayDescription", 0);
  v7[2] = v8;
  if (!v8)
  {
    APSLogErrorAt();
    CFRelease(v7);
    return 4294895516;
  }
  v9 = CFRetain(a2);
  v10 = 0;
  v7[3] = v9;
  *a3 = v7;
  return v10;
}

uint64_t APEndpointDisplayDescriptionCreateDefaultWithEndpointFeatures(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  uint64_t v7;

  APSFeaturesHasFeature();
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v6 = Mutable;
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    CFDictionarySetValue(v6, CFSTR("uuid"), CFSTR("86E62046-B752-490D-AF0B-6D7672A89101"));
    v7 = APEndpointDisplayDescriptionCreateWithDisplayInfo((uint64_t)a1, v6, a3);
    if ((_DWORD)v7)
      APSLogErrorAt();
    CFRelease(v6);
  }
  else
  {
    APSLogErrorAt();
    return 4294895516;
  }
  return v7;
}

uint64_t APEndpointDisplayDescriptionCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  _QWORD block[9];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  if (gLogCategory_APEndpointDisplayDescription <= 30
    && (gLogCategory_APEndpointDisplayDescription != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a2)
  {
    v9 = 4294895515;
LABEL_11:
    APSLogErrorAt();
    *((_DWORD *)v13 + 6) = -71781;
    goto LABEL_8;
  }
  if (!a4)
  {
    v9 = 4294895515;
    goto LABEL_11;
  }
  v8 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __APEndpointDisplayDescriptionCopyProperty_block_invoke;
  block[3] = &unk_1E8269C90;
  block[4] = &v12;
  block[5] = a1;
  block[6] = a2;
  block[7] = a3;
  block[8] = a4;
  dispatch_sync(v8, block);
  v9 = *((unsigned int *)v13 + 6);
LABEL_8:
  _Block_object_dispose(&v12, 8);
  return v9;
}

void bonjourDisplayDescription_Finalize(uint64_t a1)
{
  const void *v2;
  NSObject *v3;

  v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v3 = *(NSObject **)(a1 + 16);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

CFStringRef bonjourDisplayDescription_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APEndpointDisplayDescription %p]"), a1);
}

__CFString *bonjourDisplayDescription_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APEndpointDisplayDescription %p>"), a1);
  return Mutable;
}

uint64_t APSenderSessionLegacyAudioCreate(uint64_t a1, const void *a2, const void *a3, const void *a4, CFTypeRef *a5)
{
  uint64_t v9;
  uint64_t DerivedStorage;
  uint64_t v11;
  dispatch_queue_t v12;
  dispatch_queue_t v13;
  uint64_t CMBaseObject;
  uint64_t (*v15)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v16;
  uint64_t v17;
  uint64_t SharedTransport;
  CFTypeRef v19;
  uint64_t (*v20)(uint64_t, uint64_t, const void *, CFTypeRef, _QWORD, uint64_t);
  uint64_t v21;
  uint64_t v22;
  CFTypeRef cf;
  CFTypeRef v25;
  char label[64];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v25 = 0;
  APSenderSessionGetClassID();
  v9 = CMDerivedObjectCreate();
  if ((_DWORD)v9)
  {
    v22 = v9;
    goto LABEL_17;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 72) = v11;
  if (!v11
    || (SNPrintF(), v12 = dispatch_queue_create(label, 0), (*(_QWORD *)(DerivedStorage + 40) = v12) == 0)
    || (SNPrintF(), v13 = dispatch_queue_create(label, 0), (*(_QWORD *)(DerivedStorage + 8) = v13) == 0))
  {
    APSLogErrorAt();
    v22 = 4294895476;
    goto LABEL_24;
  }
  if (!a2)
  {
    v22 = 4294895475;
    goto LABEL_17;
  }
  *(_QWORD *)DerivedStorage = CFRetain(a2);
  if (!a3)
  {
    v22 = 4294895475;
    goto LABEL_17;
  }
  *(_QWORD *)(DerivedStorage + 24) = CFRetain(a3);
  if (!a4)
  {
    v22 = 4294895475;
    goto LABEL_17;
  }
  *(_QWORD *)(DerivedStorage + 32) = CFRetain(a4);
  *(int32x2_t *)(DerivedStorage + 124) = vdup_n_s32(0xC479C000);
  CMBaseObject = APEndpointDescriptionGetCMBaseObject(*(_QWORD *)(DerivedStorage + 24));
  v15 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v15)
  {
    v22 = 4294954514;
LABEL_17:
    APSLogErrorAt();
    goto LABEL_24;
  }
  v16 = *MEMORY[0x1E0C9AE00];
  v17 = v15(CMBaseObject, CFSTR("TransportDevice"), *MEMORY[0x1E0C9AE00], &cf);
  if ((_DWORD)v17)
  {
    v22 = v17;
    goto LABEL_17;
  }
  SharedTransport = APTransportGetSharedTransport();
  v19 = cf;
  v20 = *(uint64_t (**)(uint64_t, uint64_t, const void *, CFTypeRef, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 24);
  if (!v20)
  {
    v22 = 4294954514;
    goto LABEL_17;
  }
  v21 = v20(SharedTransport, v16, a2, v19, 0, DerivedStorage + 16);
  if ((_DWORD)v21)
  {
    v22 = v21;
    goto LABEL_17;
  }
  if (gLogCategory_APSenderSessionSDP <= 50)
  {
    if (gLogCategory_APSenderSessionSDP != -1 || _LogCategory_Initialize())
      LogPrintF();
    if (gLogCategory_APSenderSessionSDP <= 30
      && (gLogCategory_APSenderSessionSDP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  v22 = 0;
  *a5 = v25;
  v25 = 0;
LABEL_24:
  if (cf)
    CFRelease(cf);
  if (v25)
    CFRelease(v25);
  return v22;
}

void sdpsession_Invalidate(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  sdpsession_invalidateTransportControlStream(a1, 1);
}

uint64_t sub_1C94B3014(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;
  uint64_t v13;

  dispatch_sync_f(*(dispatch_queue_t *)(v13 + 40), v12, (dispatch_function_t)sdpsession_cleanup);
  return 0;
}

void sdpsession_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  NSObject *v3;
  NSObject *v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionSDP <= 30
    && (gLogCategory_APSenderSessionSDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_QWORD *)(DerivedStorage + 88))
  {
    if (gLogCategory_APSenderSessionSDP <= 100)
      sdpsession_Finalize_cold_1(gLogCategory_APSenderSessionSDP);
    __break(1u);
  }
  else
  {
    v1 = *(const void **)(DerivedStorage + 24);
    if (v1)
    {
      CFRelease(v1);
      *(_QWORD *)(DerivedStorage + 24) = 0;
    }
    v2 = *(const void **)(DerivedStorage + 32);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(DerivedStorage + 32) = 0;
    }
    v3 = *(NSObject **)(DerivedStorage + 8);
    if (v3)
    {
      dispatch_release(v3);
      *(_QWORD *)(DerivedStorage + 8) = 0;
    }
    FigSimpleMutexDestroy();
    v4 = *(NSObject **)(DerivedStorage + 40);
    if (v4)
    {
      dispatch_release(v4);
      *(_QWORD *)(DerivedStorage + 40) = 0;
    }
    if (*(_QWORD *)DerivedStorage)
    {
      CFRelease(*(CFTypeRef *)DerivedStorage);
      *(_QWORD *)DerivedStorage = 0;
    }
    v5 = *(const void **)(DerivedStorage + 16);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(DerivedStorage + 16) = 0;
    }
  }
}

__CFString *sdpsession_CopyDebugDescription(uint64_t a1)
{
  _QWORD *DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APSenderSessionSDP %p %@>"), a1, *DerivedStorage);
  return Mutable;
}

uint64_t sdpsession_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  CFNumberRef v12;
  uint64_t Int64;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionSDP <= 10
    && (gLogCategory_APSenderSessionSDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a4)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  v9 = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("TransportControlStream")))
  {
    if (CFEqual(a2, CFSTR("InitialVolumeDB")))
    {
      v12 = CFNumberCreate(a3, kCFNumberFloat32Type, (const void *)(v9 + 124));
      *a4 = v12;
      if (v12)
      {
LABEL_12:
        v10 = 0;
        goto LABEL_13;
      }
      v10 = 4294895476;
LABEL_28:
      APSLogErrorAt();
      goto LABEL_13;
    }
    if (CFEqual(a2, CFSTR("IsConnectedOnPeerToPeerInterface")))
    {
      v11 = (void *)CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE40]);
    }
    else
    {
      if (CFEqual(a2, CFSTR("ControlConnectionInterfaceLatencyHint")))
      {
        if (!*(_QWORD *)(v9 + 88))
        {
          APSLogErrorAt();
          v10 = 4294895466;
          goto LABEL_13;
        }
        Int64 = CFNumberCreateInt64();
        *a4 = Int64;
        if (Int64)
          goto LABEL_12;
        v10 = 4294895476;
        goto LABEL_28;
      }
      if (!CFEqual(a2, CFSTR("ShowInfo")))
      {
        v10 = 4294954512;
        goto LABEL_13;
      }
      v11 = sdpsession_copyShowInfo();
    }
    v10 = 0;
    goto LABEL_9;
  }
  v10 = sdpsession_ensureTransportControlStreamCreated(a1);
  if ((_DWORD)v10)
    goto LABEL_28;
  v11 = (void *)CFRetain(*(CFTypeRef *)(v9 + 88));
LABEL_9:
  *a4 = v11;
LABEL_13:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  return v10;
}

uint64_t sdpsession_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeID v7;
  const void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, _QWORD, uint64_t);
  double v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionSDP <= 30
    && (gLogCategory_APSenderSessionSDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
    v6 = CMBaseObjectGetDerivedStorage();
    if (!CFEqual(a2, CFSTR("AuthorizationString")))
    {
      if (CFEqual(a2, CFSTR("DACPID")))
      {
        *(_QWORD *)(v6 + 112) = CFGetInt64();
      }
      else if (CFEqual(a2, CFSTR("DACPRemoteID")))
      {
        *(_DWORD *)(v6 + 120) = CFGetInt64();
      }
      else if (CFEqual(a2, CFSTR("PendingVolumeDB")))
      {
        CFGetDouble();
        *(float *)&v13 = v13;
        *(_DWORD *)(v6 + 128) = LODWORD(v13);
      }
      goto LABEL_22;
    }
    if (a3)
    {
      v7 = CFGetTypeID(a3);
      if (v7 != CFStringGetTypeID())
      {
        APSLogErrorAt();
LABEL_22:
        MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
        return 0;
      }
      v9 = (uint64_t *)(v6 + 104);
      v8 = *(const void **)(v6 + 104);
      *(_QWORD *)(v6 + 104) = a3;
      CFRetain(a3);
      if (v8)
        goto LABEL_10;
    }
    else
    {
      v9 = (uint64_t *)(v6 + 104);
      v8 = *(const void **)(v6 + 104);
      *(_QWORD *)(v6 + 104) = 0;
      if (v8)
LABEL_10:
        CFRelease(v8);
    }
    if (*(_QWORD *)(v6 + 88))
    {
      v10 = *v9;
      CMBaseObject = FigTransportStreamGetCMBaseObject();
      v12 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v12)
        v12(CMBaseObject, *MEMORY[0x1E0CF1FA8], v10);
    }
    goto LABEL_22;
  }
  APSLogErrorAt();
  return 4294895475;
}

void sdpsession_invalidateTransportControlStream(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t CMBaseObject;
  uint64_t v7;
  void (*v8)(uint64_t);
  const void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  if (*(_BYTE *)(DerivedStorage + 132))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    *(_WORD *)(DerivedStorage + 132) = 0;
  }
  v4 = *(_QWORD *)(DerivedStorage + 88);
  if (v4)
  {
    v5 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v5)
      v5(v4, 0, 0, 0);
    CMBaseObject = FigTransportStreamGetCMBaseObject();
    if (CMBaseObject)
    {
      v7 = CMBaseObject;
      v8 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v8)
        v8(v7);
    }
    v9 = *(const void **)(DerivedStorage + 88);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(DerivedStorage + 88) = 0;
    }
  }
  if (a2)
    *(_BYTE *)(DerivedStorage + 80) = 1;
  JUMPOUT(0x1CAA400E4);
}

void sdpsession_cleanup(uint64_t a1)
{
  _QWORD *DerivedStorage;
  const void *v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t CMBaseObject;
  uint64_t v7;
  void (*v8)(uint64_t);
  const void *v9;
  const void *v10;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v3 = (const void *)DerivedStorage[7];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[7] = 0;
  }
  sdpsession_stopNetworkClock(a1);
  v4 = DerivedStorage[2];
  v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v5)
    v5(v4);
  CMBaseObject = FigTransportSessionGetCMBaseObject();
  if (CMBaseObject)
  {
    v7 = CMBaseObject;
    v8 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v8)
      v8(v7);
  }
  MEMORY[0x1CAA400CC](DerivedStorage[9]);
  v9 = (const void *)DerivedStorage[13];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[13] = 0;
  }
  v10 = (const void *)DerivedStorage[12];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[12] = 0;
  }
  JUMPOUT(0x1CAA400E4);
}

void sdpsession_handleTransportSessionDisconnected(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  if (gLogCategory_APSenderSessionSDP <= 50
    && (gLogCategory_APSenderSessionSDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  sdpsession_invalidateTransportControlStream(a2, 1);
}

uint64_t sub_1C94B38DC()
{
  const void *v0;

  return sdpsession_postFailedNotificationAsync(v0);
}

uint64_t sdpsession_postFailedNotificationAsync(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  return APSDispatchAsyncFHelper();
}

void sdpsession_postFailedNotificationCallback(uint64_t a1)
{
  CFTypeRef v2;
  const void *v3;
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;

  v2 = *(CFTypeRef *)a1;
  v3 = *(const void **)(a1 + 16);
  CMBaseObjectGetDerivedStorage();
  v4 = CFGetAllocator(v2);
  Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v6 = Mutable;
    CFDictionarySetInt64();
    CFDictionarySetValue(v6, CFSTR("SessionState"), v3);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFRelease(v6);
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  CFRelease(*(CFTypeRef *)a1);
}

uint64_t sdpsession_stopNetworkClock(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  result = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(result + 49))
  {
    v3 = result;
    *(_DWORD *)(result + 64) = 0;
    v4 = *(_QWORD *)(result + 32);
    if (v4)
    {
      if (gLogCategory_APSenderSessionSDP <= 40)
      {
        if (gLogCategory_APSenderSessionSDP != -1 || (v5 = _LogCategory_Initialize(), v4 = *(_QWORD *)(v3 + 32), v5))
        {
          LogPrintF();
          v4 = *(_QWORD *)(v3 + 32);
        }
      }
      result = CMBaseObjectGetVTable();
      v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 88);
      if (v6)
        result = v6(v4, a1);
      *(_BYTE *)(v3 + 49) = 0;
    }
    else
    {
      return APSLogErrorAt();
    }
  }
  return result;
}

uint64_t sdpsession_ensureTransportControlStreamCreated(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD, uint64_t *);
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD, _QWORD, uint64_t);
  uint64_t v11;
  const __CFAllocator *v12;
  uint64_t ShortVersionLength;
  CFStringRef v14;
  CFStringRef v15;
  uint64_t v16;
  uint64_t CMBaseObject;
  void (*v18)(uint64_t, _QWORD, CFStringRef);
  uint64_t v19;
  void (*v20)(uint64_t, _QWORD, const __CFString *);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, _QWORD, uint64_t);
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD, uint64_t);
  uint64_t v26;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 80))
  {
    APSLogErrorAt();
    return 4294895467;
  }
  v3 = DerivedStorage;
  v4 = (uint64_t *)(DerivedStorage + 88);
  if (*(_QWORD *)(DerivedStorage + 88))
    return 0;
  v6 = *(_QWORD *)(DerivedStorage + 16);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v7)
  {
    v5 = 4294954514;
    goto LABEL_28;
  }
  v8 = v7(v6, 1668575852, 0, v4);
  if ((_DWORD)v8)
  {
    v5 = v8;
    goto LABEL_28;
  }
  v9 = *v4;
  v10 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v10)
  {
    v5 = 4294954514;
LABEL_28:
    APSLogErrorAt();
    return v5;
  }
  v11 = v10(v9, sdpsession_controlStreamMessageCallback, 0, a1);
  if ((_DWORD)v11)
  {
    v5 = v11;
    goto LABEL_28;
  }
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ShortVersionLength = APSVersionUtilsGetShortVersionLength();
  v14 = CFStringCreateWithFormat(v12, 0, CFSTR("AirPlay/%.*s"), ShortVersionLength, "800.74.1.2");
  if (!v14)
  {
    APSLogErrorAt();
    return 4294960568;
  }
  v15 = v14;
  v16 = APSGetFBOPropertyInt64();
  CMBaseObject = FigTransportStreamGetCMBaseObject();
  v18 = *(void (**)(uint64_t, _QWORD, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v18)
    v18(CMBaseObject, *MEMORY[0x1E0CF1FE8], v15);
  v19 = FigTransportStreamGetCMBaseObject();
  v20 = *(void (**)(uint64_t, _QWORD, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v20)
    v20(v19, *MEMORY[0x1E0CF1FF0], CFSTR("iTunes"));
  v21 = *(_QWORD *)(v3 + 104);
  v22 = FigTransportStreamGetCMBaseObject();
  v23 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v23)
    v23(v22, *MEMORY[0x1E0CF1FA8], v21);
  v24 = *v4;
  v25 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v25)
  {
    if (v16)
      v26 = *MEMORY[0x1E0C9AE50];
    else
      v26 = *MEMORY[0x1E0C9AE40];
    v25(v24, *MEMORY[0x1E0CF1FE0], v26);
  }
  APSenderSessionMessageSendTimeout();
  APSSetFBOPropertyInt64();
  if ((!*(_QWORD *)(v3 + 112) || !*(_DWORD *)(v3 + 120))
    && gLogCategory_APSenderSessionSDP <= 60
    && (gLogCategory_APSenderSessionSDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APSSetFBOPropertyInt64();
  APSSetFBOPropertyInt64();
  CFRelease(v15);
  return 0;
}

__CFDictionary *sdpsession_copyShowInfo()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  __CFDictionary *Mutable;
  __CFDictionary *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  uint64_t CMBaseObject;
  unsigned int (*v9)(uint64_t, _QWORD, uint64_t, void **);
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  v1 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = Mutable;
  v4 = (const void *)*MEMORY[0x1E0C9AE50];
  v5 = (const void *)*MEMORY[0x1E0C9AE40];
  if (*(_BYTE *)(DerivedStorage + 132))
    v6 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v6 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(Mutable, CFSTR("isConnected"), v6);
  if (*(_BYTE *)(DerivedStorage + 133))
    v7 = v4;
  else
    v7 = v5;
  CFDictionarySetValue(v3, CFSTR("isSessionStarted"), v7);
  if (*(_QWORD *)(DerivedStorage + 16))
  {
    CMBaseObject = FigTransportSessionGetCMBaseObject();
    v9 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
    if (!v9 || v9(CMBaseObject, *MEMORY[0x1E0CF1ED8], v1, &value))
      APSLogErrorAt();
    else
      CFDictionarySetValue(v3, CFSTR("TransportSessionInfo"), value);
  }
  if (value)
    CFRelease(value);
  return v3;
}

uint64_t sdpsession_controlStreamMessageCallback(const void *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a4);
  CFRetain(a1);
  return APSDispatchAsyncFHelper();
}

void sdpsession_controlStreamMessageCallbackInternal(uint64_t a1)
{
  int v2;
  const void *v3;

  CMBaseObjectGetDerivedStorage();
  v2 = *(_DWORD *)(a1 + 16);
  if (v2 != 1651470958)
  {
    if (v2 == 1684628836)
    {
      if (*(_QWORD *)a1)
        CFRetain(*(CFTypeRef *)a1);
      v3 = *(const void **)(a1 + 8);
      if (v3)
        CFRetain(v3);
      APSDispatchAsyncFHelper();
    }
    else if (gLogCategory_APSenderSessionSDP <= 50
           && (gLogCategory_APSenderSessionSDP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  CFRelease(*(CFTypeRef *)a1);
  CFRelease(*(CFTypeRef *)(a1 + 8));
}

void sdpsession_handleTransportStreamDisconnected(uint64_t *a1)
{
  uint64_t DerivedStorage;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionSDP <= 90
    && (gLogCategory_APSenderSessionSDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  if (a1[1] == *(_QWORD *)(DerivedStorage + 88))
  {
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
    sdpsession_invalidateTransportControlStream(*a1, 1);
  }
  if (gLogCategory_APSenderSessionSDP <= 50
    && (gLogCategory_APSenderSessionSDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  APSLogErrorAt();
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v3 = (const void *)a1[1];
  if (v3)
    CFRelease(v3);
}

uint64_t sdpsession_IsConnected()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionSDP <= 30
    && (gLogCategory_APSenderSessionSDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  v1 = *(unsigned __int8 *)(DerivedStorage + 132);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  return v1;
}

uint64_t sdpsession_IsActive()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionSDP <= 30
    && (gLogCategory_APSenderSessionSDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  v1 = *(unsigned __int8 *)(DerivedStorage + 133);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  return v1;
}

uint64_t sdpsession_EnsureStarted()
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionSDP <= 30
    && (gLogCategory_APSenderSessionSDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return APSDispatchSyncTask();
}

uint64_t sdpsession_UpdateSession()
{
  return 0;
}

uint64_t sdpsession_SetupStreamCreatingResponse()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t sdpsession_TeardownStream()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t sdpsession_CreateTransportStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;

  v5 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v6)
  {
    v7 = 4294954514;
LABEL_5:
    APSLogErrorAt();
    return v7;
  }
  v7 = v6(v5, a2, a3);
  if ((_DWORD)v7)
    goto LABEL_5;
  return v7;
}

uint64_t sdpsession_CreateTransportStreamWithID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v8)
  {
    v9 = 4294954514;
LABEL_5:
    APSLogErrorAt();
    return v9;
  }
  v9 = v8(v7, a2, a3, a4);
  if ((_DWORD)v9)
    goto LABEL_5;
  return v9;
}

uint64_t sdpsession_EnsureStopped()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t sdpsession_ensureStartedInternal(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  CMBaseObjectGetDerivedStorage();
  v5 = 0;
  v2 = sdpsession_ensureTransportControlStreamResumedSync(a1);
  if (!(_DWORD)v2)
    sdpsession_copyTransportControlStream(a1, &v5);
  v4 = v2;
  APSLogErrorAt();
  return v4;
}

uint64_t sdpsession_ensureTransportControlStreamResumedSync(uint64_t a1)
{
  uint64_t DerivedStorage;
  int v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  CFTypeRef v7;
  uint64_t (*v8)(CFTypeRef);
  uint64_t v9;
  uint64_t (*v10)(CFTypeRef);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  v3 = *(unsigned __int8 *)(DerivedStorage + 132);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  if (v3)
    return 0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  v4 = sdpsession_ensureTransportControlStreamCreated(a1);
  if (!(_DWORD)v4)
  {
    v6 = *(const void **)(DerivedStorage + 88);
    if (v6)
    {
      v7 = CFRetain(v6);
      MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
      if (v7)
      {
        v8 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v8)
        {
          v9 = v8(v7);
          if ((_DWORD)v9)
          {
            v5 = v9;
          }
          else
          {
            v10 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
            if (v10)
            {
              v5 = v10(v7);
              if (!(_DWORD)v5)
              {
                MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
                *(_BYTE *)(DerivedStorage + 132) = 1;
                CMNotificationCenterGetDefaultLocalCenter();
                FigNotificationCenterAddWeakListener();
                MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
                CMNotificationCenterGetDefaultLocalCenter();
                FigDispatchAsyncPostNotification();
LABEL_17:
                CFRelease(v7);
                return v5;
              }
            }
            else
            {
              v5 = 4294954514;
            }
          }
        }
        else
        {
          v5 = 4294954514;
        }
        APSLogErrorAt();
        goto LABEL_17;
      }
    }
    else
    {
      MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
    }
    APSLogErrorAt();
    return 4294895475;
  }
  v5 = v4;
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  APSLogErrorAt();
  return v5;
}

void sdpsession_copyTransportControlStream(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  v4 = *(CFTypeRef *)(DerivedStorage + 88);
  if (v4)
    v4 = CFRetain(v4);
  *a2 = v4;
  JUMPOUT(0x1CAA400E4);
}

uint64_t sdpsession_setupStreamCreatingResponseInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  int v3;
  const void *v4;
  uint64_t v5;
  const void *v6;
  CFTypeRef v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  const void *v11;
  CFTypeRef v12;
  uint64_t v13;
  int v14;
  CFTypeRef v15;
  uint64_t (*v16)(CFTypeRef, CFTypeRef *, CFTypeRef *);
  int v17;
  int v18;
  const void *v19;
  CFTypeRef v20;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionSDP <= 30
    && (gLogCategory_APSenderSessionSDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_DWORD *)(a1 + 8) != 96)
  {
LABEL_46:
    APSLogErrorAt();
    sdpsession_postFailedNotificationAsync(*(const void **)a1);
    sdpsession_teardownTransportControlStream(*(_QWORD *)a1);
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  v3 = *(unsigned __int8 *)(DerivedStorage + 133);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  if (!v3)
  {
    if (sdpsession_ensureTransportControlStreamResumedSync(*(_QWORD *)a1))
      goto LABEL_46;
    v4 = *(const void **)a1;
    LODWORD(v22) = 0;
    v5 = CMBaseObjectGetDerivedStorage();
    v24 = 0;
    cf = 0;
    MEMORY[0x1CAA400CC](*(_QWORD *)(v5 + 72));
    v6 = *(const void **)(v5 + 96);
    if (v6)
      v7 = CFRetain(v6);
    else
      v7 = 0;
    v23 = v7;
    MEMORY[0x1CAA400E4](*(_QWORD *)(v5 + 72));
    v8 = (uint64_t *)MEMORY[0x1E0C9AE00];
    if (!v7)
      sdpsession_copyTransportControlStream((uint64_t)v4, &v24);
    CFRelease(v7);
    v9 = CMBaseObjectGetDerivedStorage();
    v24 = 0;
    cf = 0;
    v22 = 0;
    v23 = 0;
    if (*(_QWORD *)(v9 + 56))
    {
      LODWORD(v19) = 0;
      goto LABEL_30;
    }
    v10 = (_QWORD *)v9;
    MEMORY[0x1CAA400CC](*(_QWORD *)(v9 + 72));
    v11 = (const void *)v10[12];
    if (v11)
      v12 = CFRetain(v11);
    else
      v12 = 0;
    MEMORY[0x1CAA400E4](v10[9]);
    v13 = *v8;
    v14 = APKeyHolderSharedKeyCreate(*v8, 0, 0, 0, &v24);
    if (v14)
    {
      LODWORD(v19) = v14;
    }
    else
    {
      v15 = v24;
      v16 = *(uint64_t (**)(CFTypeRef, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 16);
      if (v16)
      {
        v17 = v16(v15, &v23, &v22);
        if (v17)
        {
          LODWORD(v19) = v17;
        }
        else
        {
          v18 = APKeyHolderSharedKeyCreate(v13, v12, (const __CFData *)v23, (const __CFData *)v22, &cf);
          if (!v18)
          {
            v19 = (const void *)v10[7];
            v20 = cf;
            v10[7] = cf;
            if (v20)
              CFRetain(v20);
            if (v19)
            {
              CFRelease(v19);
              LODWORD(v19) = 0;
            }
            if (!v12)
              goto LABEL_30;
            goto LABEL_29;
          }
          LODWORD(v19) = v18;
        }
      }
      else
      {
        LODWORD(v19) = -12782;
      }
    }
    APSLogErrorAt();
    if (!v12)
    {
LABEL_30:
      if (cf)
        CFRelease(cf);
      if (v24)
        CFRelease(v24);
      if (v23)
        CFRelease(v23);
      if (v22)
        CFRelease(v22);
      if (!(_DWORD)v19)
        sdpsession_sendAnnounce(*(_QWORD *)a1);
      goto LABEL_46;
    }
LABEL_29:
    CFRelease(v12);
    goto LABEL_30;
  }
  return 0;
}

void sdpsession_sendAnnounce(uint64_t a1)
{
  __int128 v2;
  int v3;
  _QWORD v4[3];
  int v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  CMBaseObjectGetDerivedStorage();
  v14 = 0;
  v2 = 0uLL;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v5 = 0;
  memset(v4, 0, sizeof(v4));
  if (gLogCategory_APSenderSessionSDP <= 30)
  {
    if (gLogCategory_APSenderSessionSDP != -1 || (v3 = _LogCategory_Initialize(), v2 = 0uLL, v3))
    {
      LogPrintF();
      v2 = 0uLL;
    }
  }
  v13 = 0;
  v10 = 0;
  v11 = 0;
  v8 = 0;
  v9 = 0;
  v12 = 0;
  v6 = v2;
  v7 = v2;
  sdpsession_copyTransportControlStream(a1, v4);
}

uint64_t sub_1C94B5504()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __CFString *Mutable;
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, _QWORD, uint64_t, const __CFUUID **);
  unint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _QWORD, uint64_t, const __CFData **);
  const __CFData *v10;
  const char *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  int v14;
  const char *v15;
  int v16;
  void *v17;
  uint64_t Int64;
  uint64_t v19;
  int v20;
  const void *v22;
  void *v23;
  void *v24;
  unsigned int v25;
  double v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  UInt8 v30;
  char v31;
  const __CFData *v32;
  const __CFUUID *v33;
  unsigned int Base64EncodedKeyAndIV;
  char v35;
  CFRange v36;

  Base64EncodedKeyAndIV = 0;
  if (!v22)
  {
    APSLogErrorAt();
    Mutable = 0;
    goto LABEL_44;
  }
  v3 = *MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!Mutable)
  {
    APSLogErrorAt();
    v16 = -71820;
    goto LABEL_45;
  }
  CMBaseObject = FigTransportSessionGetCMBaseObject();
  v6 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, const __CFUUID **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
  if (!v6)
  {
    Base64EncodedKeyAndIV = -12782;
    goto LABEL_15;
  }
  Base64EncodedKeyAndIV = v6(CMBaseObject, *MEMORY[0x1E0CA5440], v3, &v33);
  if (Base64EncodedKeyAndIV)
    goto LABEL_15;
  v7 = *(_OWORD *)&CFUUIDGetUUIDBytes(v33);
  v8 = FigTransportStreamGetCMBaseObject();
  v9 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, const __CFData **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
  if (!v9)
  {
    Base64EncodedKeyAndIV = -12782;
    goto LABEL_15;
  }
  Base64EncodedKeyAndIV = v9(v8, *MEMORY[0x1E0CF1F68], v3, &v32);
  if (Base64EncodedKeyAndIV)
    goto LABEL_15;
  if (CFDataGetLength(v32) != 28)
  {
    APSLogErrorAt();
    goto LABEL_44;
  }
  v10 = v32;
  v36.length = CFDataGetLength(v32);
  v36.location = 0;
  CFDataGetBytes(v10, v36, &v30);
  Base64EncodedKeyAndIV = SockAddrToString();
  if (Base64EncodedKeyAndIV)
    goto LABEL_15;
  if (v31 == 2)
  {
    v11 = "IP4";
  }
  else
  {
    if (v31 != 30)
      goto LABEL_44;
    v11 = "IP6";
  }
  APSGetDeviceNameCString();
  CFStringAppendCString(Mutable, "v=0\r\n", 0x8000100u);
  CFStringAppendFormat(Mutable, 0, CFSTR("o=AirTunes %llu 0 IN %s %s\r\n"), bswap64(v7), v11, v2 - 224);
  CFStringAppendCString(Mutable, "s=AirTunes\r\n", 0x8000100u);
  CFStringAppendCString(Mutable, "i=", 0x8000100u);
  CFStringAppendCString(Mutable, &v35, 0x600u);
  CFStringAppendCString(Mutable, "\r\n", 0x8000100u);
  CFStringAppendFormat(Mutable, 0, CFSTR("c=IN %s %s\r\n"), v11, v2 - 224);
  CFStringAppendCString(Mutable, "t=0 0\r\n", 0x8000100u);
  CFStringAppendFormat(Mutable, 0, CFSTR("m=audio 0 RTP/AVP %u\r\n"), 96);
  CFDictionaryGetInt64();
  if (Base64EncodedKeyAndIV || (Base64EncodedKeyAndIV = APAudioFormatToASBD()) != 0)
  {
LABEL_15:
    APSLogErrorAt();
    goto LABEL_46;
  }
  if (v27 == 1634492771)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("a=rtpmap:%u AppleLossless\r\n"), 96);
    CFStringAppendFormat(Mutable, 0, CFSTR("a=fmtp:%u %u 0 %u 40 10 14 %u 255 0 0 %u\r\n"), 96, v28, v25, v29, v26);
    goto LABEL_23;
  }
  if (v27 != 1819304813)
  {
LABEL_44:
    v16 = -71821;
    goto LABEL_45;
  }
  CFStringAppendFormat(Mutable, 0, CFSTR("a=rtpmap:%u L%u/%u/%u\r\n"), 96, v25, v26, v29);
LABEL_23:
  v12 = *(_QWORD *)(v0 + 56);
  v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v13)
    goto LABEL_28;
  v14 = v13(v12);
  if (v14 == 8)
  {
    v15 = "mfiaeskey";
    goto LABEL_31;
  }
  if (v14 == 4)
  {
    v15 = "fpaeskey";
    goto LABEL_31;
  }
  if (v14 != 1)
  {
LABEL_28:
    v16 = -71824;
LABEL_45:
    Base64EncodedKeyAndIV = v16;
    goto LABEL_46;
  }
  v15 = "rsaaeskey";
LABEL_31:
  Base64EncodedKeyAndIV = sdpsession_makeBase64EncodedKeyAndIV(*(_QWORD *)(v0 + 56), &v24, &v23);
  if (Base64EncodedKeyAndIV)
  {
    APSLogErrorAt();
    v17 = v24;
  }
  else
  {
    v17 = v24;
    CFStringAppendFormat(Mutable, 0, CFSTR("a=%s:%s\r\n"), v15, v24);
    CFStringAppendFormat(Mutable, 0, CFSTR("a=aesiv:%s\r\n"), v23);
    Int64 = CFDictionaryGetInt64();
    if (Base64EncodedKeyAndIV)
      goto LABEL_61;
    v19 = CFDictionaryGetInt64();
    if (Base64EncodedKeyAndIV)
      goto LABEL_61;
    CFStringAppendFormat(Mutable, 0, CFSTR("a=min-latency:%u\r\n"), Int64);
    CFStringAppendFormat(Mutable, 0, CFSTR("a=max-latency:%u\r\n"), v19);
    v20 = *(_DWORD *)(v1 + 3152);
    if (v20 <= 30 && (v20 != -1 || _LogCategory_Initialize()))
      LogPrintF();
    Base64EncodedKeyAndIV = sdpsession_sendMessageCreatingReply((uint64_t)v22, 1634627171, (uint64_t)Mutable, 0);
    if (Base64EncodedKeyAndIV)
LABEL_61:
      APSLogErrorAt();
  }
  if (v17)
    free(v17);
LABEL_46:
  if (v23)
    free(v23);
  if (Mutable)
    CFRelease(Mutable);
  if (v33)
    CFRelease(v33);
  if (v32)
    CFRelease(v32);
  if (v22)
    CFRelease(v22);
  return Base64EncodedKeyAndIV;
}

void sdpsession_sendSetup(uint64_t a1)
{
  _QWORD v2[2];
  int v3;

  v3 = 0;
  CMBaseObjectGetDerivedStorage();
  v2[0] = 0;
  v2[1] = 0;
  if (gLogCategory_APSenderSessionSDP <= 30
    && (gLogCategory_APSenderSessionSDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  sdpsession_copyTransportControlStream(a1, v2);
}

uint64_t sdpsession_ensureInitialVolumeFetched(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  int v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = 0;
  v4 = 0;
  if (gLogCategory_APSenderSessionSDP <= 30
    && (gLogCategory_APSenderSessionSDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*(_BYTE *)(DerivedStorage + 48))
  {
    if (APSGetFBOPropertyInt64())
      sdpsession_copyTransportControlStream(a1, &v4);
    if (gLogCategory_APSenderSessionSDP <= 50
      && (gLogCategory_APSenderSessionSDP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_BYTE *)(DerivedStorage + 48) = 1;
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
    *(_DWORD *)(DerivedStorage + 124) = -998653952;
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  }
  return 0;
}

void sdpsession_startSession(uint64_t a1)
{
  uint64_t v2;

  CMBaseObjectGetDerivedStorage();
  v2 = 0;
  if (gLogCategory_APSenderSessionSDP <= 30
    && (gLogCategory_APSenderSessionSDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  sdpsession_copyTransportControlStream(a1, &v2);
}

uint64_t sub_1C94B64C4()
{
  uint64_t v0;
  uint64_t (*v1)(const void *, uint64_t, _QWORD, _QWORD);
  uint64_t v2;
  const void *v4;

  if (!v4)
  {
    APSLogErrorAt();
    return 4294895475;
  }
  v1 = *(uint64_t (**)(const void *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v1)
  {
    v2 = 4294954514;
    goto LABEL_6;
  }
  v2 = v1(v4, 1919119972, 0, 0);
  if ((_DWORD)v2)
  {
LABEL_6:
    APSLogErrorAt();
    goto LABEL_7;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(v0 + 72));
  *(_BYTE *)(v0 + 133) = 1;
  MEMORY[0x1CAA400E4](*(_QWORD *)(v0 + 72));
LABEL_7:
  CFRelease(v4);
  return v2;
}

void sdpsession_sendPendingSetVolumeCommand(uint64_t a1)
{
  _QWORD v2[2];

  CMBaseObjectGetDerivedStorage();
  v2[0] = 0;
  v2[1] = 0;
  sdpsession_copyTransportControlStream(a1, v2);
}

uint64_t sub_1C94B65B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  float v23;
  __CFString *Mutable;
  __CFString *v25;
  uint64_t BlockBufferWithCFString;
  uint64_t (*v27)(const void *, uint64_t, const void *, _QWORD);
  uint64_t v28;
  const void *v30;
  const void *v31;

  if (!v30)
  {
    v28 = 4294895475;
    APSLogErrorAt();
    return v28;
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(v22 + 72));
  v23 = *(float *)(v22 + 128);
  *(_DWORD *)(v22 + 128) = -998653952;
  MEMORY[0x1CAA400E4](*(_QWORD *)(v22 + 72));
  if (APSVolumeDBValuesAreNoticeablyDifferent())
  {
    if (gLogCategory_APSenderSessionSDP <= 50
      && (gLogCategory_APSenderSessionSDP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (Mutable)
    {
      v25 = Mutable;
      CFStringAppendFormat(Mutable, 0, CFSTR("volume: %f\r\n"), v23);
      BlockBufferWithCFString = FigCreateBlockBufferWithCFString();
      if ((_DWORD)BlockBufferWithCFString)
      {
        v28 = BlockBufferWithCFString;
      }
      else
      {
        v27 = *(uint64_t (**)(const void *, uint64_t, const void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 56);
        if (v27)
        {
          v28 = v27(v30, 1937141612, v31, 0);
          if (!(_DWORD)v28)
            goto LABEL_14;
        }
        else
        {
          v28 = 4294954514;
        }
      }
      APSLogErrorAt();
LABEL_14:
      CFRelease(v25);
      if (v31)
        CFRelease(v31);
      goto LABEL_16;
    }
    APSLogErrorAt();
    v28 = 4294895476;
  }
  else
  {
    v28 = 0;
  }
LABEL_16:
  CFRelease(v30);
  return v28;
}

uint64_t sdpsession_copyCryptor(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, CFTypeRef *, CFTypeRef *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v9;
  CFTypeRef cf;

  v9 = 0;
  cf = 0;
  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56);
  v4 = *(uint64_t (**)(uint64_t, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v4)
  {
    v7 = 4294954514;
LABEL_8:
    APSLogErrorAt();
    goto LABEL_12;
  }
  v5 = v4(v3, &cf, &v9);
  if ((_DWORD)v5)
  {
    v7 = v5;
    goto LABEL_8;
  }
  v6 = APSCryptorCBCCreate();
  if ((_DWORD)v6)
  {
    v7 = v6;
    goto LABEL_8;
  }
  if (gLogCategory_APSenderSessionSDP <= 40
    && (gLogCategory_APSenderSessionSDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v7 = 0;
  if (a2)
    *a2 = 0;
LABEL_12:
  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
  return v7;
}

uint64_t sdpsession_ensureKeepAliveResumed()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = APSSetFBOPropertyInt64();
  if ((_DWORD)v1)
  {
    v4 = v1;
    goto LABEL_6;
  }
  v2 = *(_QWORD *)(DerivedStorage + 16);
  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v3)
  {
    v4 = 4294954514;
LABEL_6:
    APSLogErrorAt();
    return v4;
  }
  v4 = v3(v2);
  if ((_DWORD)v4)
    goto LABEL_6;
  return v4;
}

void sdpsession_teardownTransportControlStream(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  void (*v4)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  sdpsession_stopNetworkClock(a1);
  v3 = *(_QWORD *)(DerivedStorage + 16);
  v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v4)
    v4(v3);
  sdpsession_invalidateTransportControlStream(a1, 0);
}

uint64_t sdpsession_makeBase64EncodedKeyAndIV(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v6)(uint64_t, CFDataRef *, CFDataRef *);
  uint64_t v7;
  uint64_t v8;
  CFIndex Length;
  _BYTE *v10;
  uint64_t v11;
  CFDataRef v13;
  CFDataRef theData;

  v13 = 0;
  theData = 0;
  v6 = *(uint64_t (**)(uint64_t, CFDataRef *, CFDataRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v6)
  {
    v11 = 4294954514;
LABEL_8:
    APSLogErrorAt();
    v10 = 0;
    goto LABEL_9;
  }
  v7 = v6(a1, &theData, &v13);
  if ((_DWORD)v7)
  {
    v11 = v7;
    goto LABEL_8;
  }
  CFDataGetBytePtr(theData);
  CFDataGetLength(theData);
  v8 = Base64EncodeCopyEx();
  if ((_DWORD)v8)
  {
    v11 = v8;
    goto LABEL_8;
  }
  Length = CFDataGetLength(v13);
  v10 = malloc_type_malloc((4 * ((Length + 2) / 3)) | 1, 0xE84E1BC4uLL);
  if (v10)
  {
    CFDataGetBytePtr(v13);
    CFDataGetLength(v13);
    CFDataGetLength(v13);
    v11 = Base64EncodeEx();
    if (!(_DWORD)v11)
    {
      *v10 = 0;
      *a2 = 0;
      *a3 = v10;
      goto LABEL_11;
    }
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    v11 = 4294895476;
  }
LABEL_9:
  if (v10)
    free(v10);
LABEL_11:
  if (theData)
    CFRelease(theData);
  if (v13)
    CFRelease(v13);
  return v11;
}

uint64_t sdpsession_sendMessageCreatingReply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t BlockBufferWithCFString;
  uint64_t (*v8)(uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v9;

  if (a3)
  {
    BlockBufferWithCFString = FigCreateBlockBufferWithCFString();
    if ((_DWORD)BlockBufferWithCFString)
    {
      v9 = BlockBufferWithCFString;
      goto LABEL_7;
    }
  }
  v8 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v8)
  {
    v9 = 4294954514;
LABEL_7:
    APSLogErrorAt();
    return v9;
  }
  v9 = v8(a1, a2, 0, a4);
  if ((_DWORD)v9)
    goto LABEL_7;
  return v9;
}

uint64_t sdpsession_teardownStreamInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  CFTypeRef v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t v9;
  void (*v10)(CFTypeRef, uint64_t, _QWORD, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSenderSessionSDP <= 30
    && (gLogCategory_APSenderSessionSDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 72));
  v3 = *(const void **)(DerivedStorage + 88);
  if (v3)
    v4 = CFRetain(v3);
  else
    v4 = 0;
  v5 = *(unsigned __int8 *)(DerivedStorage + 133);
  v6 = *(unsigned __int8 *)(DerivedStorage + 80);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 72));
  if (*(_DWORD *)(a1 + 8) == 96)
  {
    if (v6)
      v7 = 1;
    else
      v7 = v5 == 0;
    if (!v7 && v4 != 0)
    {
      v10 = *(void (**)(CFTypeRef, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
      if (v10)
        v10(v4, 1953719408, 0, 0);
      sdpsession_teardownTransportControlStream(*(_QWORD *)a1);
    }
    v9 = 0;
  }
  else
  {
    APSLogErrorAt();
    v9 = 4294895471;
  }
  if (v4)
    CFRelease(v4);
  return v9;
}

uint64_t APAuthenticationClientTokenCreate(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
  {
    APAuthenticationClientGetClassID();
    v5 = CMDerivedObjectCreate();
    if ((_DWORD)v5)
    {
      v6 = v5;
      APSLogErrorAt();
    }
    else
    {
      *(_QWORD *)CMBaseObjectGetDerivedStorage() = a2;
      CFRetain(a2);
      if (gLogCategory_APAuthenticationClientToken <= 50
        && (gLogCategory_APAuthenticationClientToken != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v6 = 0;
      *a3 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294895495;
  }
  return v6;
}

void tokenAuthentication_Finalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
  if (gLogCategory_APAuthenticationClientToken <= 50
    && (gLogCategory_APAuthenticationClientToken != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

__CFString *tokenAuthentication_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APAuthenticationClientToken %p>"), a1);
  return Mutable;
}

uint64_t tokenAuthentication_GetAuthenticationType()
{
  return 16;
}

uint64_t tokenAuthentication_AuthenticateEndpoint()
{
  uint64_t result;

  result = tokenAuthentication_authenticateEndpointInternal();
  if ((_DWORD)result == 409)
  {
    if (gLogCategory_APAuthenticationClientToken <= 50
      && (gLogCategory_APAuthenticationClientToken != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return tokenAuthentication_authenticateEndpointInternal();
  }
  return result;
}

uint64_t tokenAuthentication_authenticateEndpointInternal()
{
  uint64_t *DerivedStorage;
  uint64_t v1;
  const __CFAllocator *v2;
  CFArrayRef v3;
  __CFDictionary *Mutable;
  int v5;
  const __CFDictionary *v6;
  const void *TypedValue;
  const void *v8;
  const void *Value;
  const void *v10;
  CFTypeID v11;
  CFTypeRef v12;
  CFTypeRef v13;
  uint64_t v14;
  CFTypeRef v15;
  void *v16;
  dispatch_semaphore_t v17;
  NSObject *v18;
  void *v19;
  int v20;
  CFTypeRef v21;
  CFTypeRef v22;
  dispatch_semaphore_t v23;
  NSObject *v24;
  void *v25;
  CFTypeRef v26;
  uint64_t v27;
  __CFDictionary *v28;
  __CFDictionary *v29;
  __CFDictionary *v30;
  const void *v31;
  CFTypeRef v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  CFTypeRef cf;
  CFTypeRef *p_cf;
  uint64_t v40;
  uint64_t v41;
  void *values[2];
  const __CFString *v43;
  void *v44;
  NSObject *v45;
  CFTypeRef *v46;
  CFTypeRef *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v33 = 0;
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAuthenticationClientToken <= 50
    && (gLogCategory_APAuthenticationClientToken != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v1 = *DerivedStorage;
  *(_OWORD *)values = xmmword_1E8269F08;
  v43 = CFSTR("uuid");
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 3, MEMORY[0x1E0C9B378]);
  if (!v3)
  {
    APSLogErrorAt();
    v13 = 0;
    v12 = 0;
    v14 = 4294895496;
    goto LABEL_65;
  }
  cf = 0;
  Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    LODWORD(v34) = -71800;
LABEL_68:
    APSLogErrorAt();
    v12 = 0;
    v13 = 0;
    goto LABEL_14;
  }
  FigCFDictionarySetInt();
  CFDictionarySetValue(Mutable, CFSTR("tkrd"), v3);
  v5 = tokenAuthentication_sendAuthSetupRequestCreatingReply(v1, Mutable);
  if (v5)
  {
    APSLogErrorAt();
    v6 = 0;
  }
  else
  {
    v6 = (const __CFDictionary *)cf;
    cf = 0;
  }
  CFRelease(Mutable);
  LODWORD(v34) = v5;
  if (v5)
    goto LABEL_68;
  CFStringGetTypeID();
  TypedValue = (const void *)CFDictionaryGetTypedValue();
  CFDataGetTypeID();
  v8 = (const void *)CFDictionaryGetTypedValue();
  Value = CFDictionaryGetValue(v6, CFSTR("pair"));
  v10 = Value;
  if (Value && (v11 = CFGetTypeID(Value), v11 != CFDataGetTypeID()))
  {
    APSLogErrorAt();
    v12 = 0;
    v13 = 0;
    LODWORD(v34) = -71803;
  }
  else
  {
    v12 = CFRetain(TypedValue);
    v13 = CFRetain(v8);
    v33 = v10;
    if (v10)
      CFRetain(v10);
  }
LABEL_14:
  CFRelease(v3);
  v14 = v34;
  if ((_DWORD)v34)
  {
LABEL_65:
    APSLogErrorAt();
    v21 = 0;
    goto LABEL_66;
  }
  v15 = v33;
  cf = 0;
  p_cf = &cf;
  v40 = 0x2020000000;
  LOBYTE(v41) = 0;
  v16 = (void *)MEMORY[0x1E0C809B0];
  if (v33)
  {
    v17 = dispatch_semaphore_create(0);
    if (v17)
    {
      v18 = v17;
      v19 = (void *)objc_msgSend(MEMORY[0x1E0D44978], "sharedManager");
      values[0] = v16;
      values[1] = (void *)3221225472;
      v43 = (const __CFString *)__tokenAuthentication_verifyPairing_block_invoke;
      v44 = &unk_1E8269F28;
      v45 = v18;
      v46 = &cf;
      objc_msgSend(v19, "verifyPairingWithToken:completionHandler:", v33, values);
      dispatch_semaphore_wait(v18, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v18);
    }
    else
    {
      APSLogErrorAt();
      *((_BYTE *)p_cf + 24) = 0;
    }
  }
  if (gLogCategory_APAuthenticationClientToken <= 50
    && (gLogCategory_APAuthenticationClientToken != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v20 = *((unsigned __int8 *)p_cf + 24);
  _Block_object_dispose(&cf, 8);
  if (!v20)
  {
    if (!v13 || (objc_msgSend(MEMORY[0x1E0D44980], "isTokenValidForFeatures:token:", 2, v13) & 1) == 0)
    {
      APSLogErrorAt();
      v21 = 0;
      v22 = 0;
      v14 = 4294895494;
      goto LABEL_53;
    }
    cf = 0;
    p_cf = &cf;
    v40 = 0x2020000000;
    v41 = 0;
    v34 = 0;
    v35 = &v34;
    v36 = 0x2020000000;
    v37 = 0;
    v23 = dispatch_semaphore_create(0);
    if (v23)
    {
      v24 = v23;
      v25 = (void *)objc_msgSend(MEMORY[0x1E0D44980], "sharedManager");
      values[0] = v16;
      values[1] = (void *)3221225472;
      v43 = (const __CFString *)__tokenAuthentication_rollAuthToken_block_invoke;
      v44 = &unk_1E8269F50;
      v46 = (CFTypeRef *)&v34;
      v47 = &cf;
      v45 = v24;
      objc_msgSend(v25, "requestActivationForAuthToken:withUUID:completionHandler:", v13, v12, values);
      dispatch_semaphore_wait(v24, 0xFFFFFFFFFFFFFFFFLL);
      v21 = p_cf[3];
      dispatch_release(v24);
      v14 = *((unsigned int *)v35 + 6);
    }
    else
    {
      APSLogErrorAt();
      v21 = 0;
      v14 = 4294895496;
      *((_DWORD *)v35 + 6) = -71800;
    }
    _Block_object_dispose(&v34, 8);
    _Block_object_dispose(&cf, 8);
    if ((_DWORD)v14)
    {
      APSLogErrorAt();
    }
    else
    {
      if (!v21)
      {
        APSLogErrorAt();
        v21 = 0;
        goto LABEL_85;
      }
      if (v15)
      {
        v26 = 0;
        goto LABEL_35;
      }
      v14 = tokenAuthentication_generatePairingToken(&v33);
      if (!(_DWORD)v14)
      {
        v26 = v33;
        if (v33)
        {
LABEL_35:
          v27 = *DerivedStorage;
          values[0] = 0;
          v28 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v29 = v28;
          if (!v28)
          {
            APSLogErrorAt();
            v22 = 0;
            v14 = 4294895496;
            goto LABEL_76;
          }
          CFDictionarySetValue(v28, CFSTR("auth"), v21);
          if (v26)
            CFDictionarySetValue(v29, CFSTR("pair"), v26);
          v30 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (!v30)
          {
            APSLogErrorAt();
            v22 = 0;
            LODWORD(cf) = -71800;
            goto LABEL_44;
          }
          FigCFDictionarySetInt();
          CFDictionarySetValue(v30, CFSTR("tkwr"), v29);
          LODWORD(cf) = tokenAuthentication_sendAuthSetupRequestCreatingReply(v27, v30);
          if (!(_DWORD)cf)
          {
            if (!values[0])
            {
              APSLogErrorAt();
              v22 = 0;
              LODWORD(cf) = -71803;
              goto LABEL_43;
            }
            CFDataGetTypeID();
            v31 = (const void *)CFDictionaryGetTypedValue();
            if (!(_DWORD)cf)
            {
              v22 = CFRetain(v31);
              goto LABEL_43;
            }
          }
          APSLogErrorAt();
          v22 = 0;
LABEL_43:
          CFRelease(v29);
          CFRelease(v30);
          v29 = (__CFDictionary *)values[0];
          if (!values[0])
          {
LABEL_45:
            v14 = cf;
            if (!(_DWORD)cf)
            {
              v14 = tokenAuthentication_confirmAuthTokenActivation((uint64_t)v22, (uint64_t)v12);
              if (!(_DWORD)v14)
              {
                v14 = tokenAuthentication_savePairingToken((uint64_t)v33);
                if (!(_DWORD)v14)
                  goto LABEL_48;
              }
            }
LABEL_76:
            APSLogErrorAt();
            goto LABEL_53;
          }
LABEL_44:
          CFRelease(v29);
          goto LABEL_45;
        }
        APSLogErrorAt();
LABEL_85:
        v22 = 0;
        v14 = 4294895493;
        goto LABEL_53;
      }
      APSLogErrorAt();
    }
LABEL_66:
    v22 = 0;
    goto LABEL_53;
  }
  v21 = 0;
  v22 = 0;
LABEL_48:
  if (gLogCategory_APAuthenticationClientToken <= 50
    && (gLogCategory_APAuthenticationClientToken != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v14 = 0;
LABEL_53:
  if (v12)
    CFRelease(v12);
  if (v33)
    CFRelease(v33);
  if (v13)
    CFRelease(v13);
  if (v21)
    CFRelease(v21);
  if (v22)
    CFRelease(v22);
  return v14;
}

void sub_1C94B7AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t tokenAuthentication_generatePairingToken(_QWORD *a1)
{
  dispatch_semaphore_t v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v2 = dispatch_semaphore_create(0);
  if (v2)
  {
    v3 = v2;
    v4 = (void *)objc_msgSend(MEMORY[0x1E0D44978], "sharedManager");
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __tokenAuthentication_generatePairingToken_block_invoke;
    v7[3] = &unk_1E8269F50;
    v7[5] = &v8;
    v7[6] = &v12;
    v7[4] = v3;
    objc_msgSend(v4, "generatePairingTokenWithCompletionHandler:", v7);
    dispatch_semaphore_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
    *a1 = v13[3];
    dispatch_release(v3);
    v5 = *((unsigned int *)v9 + 6);
  }
  else
  {
    APSLogErrorAt();
    v5 = 4294895496;
    *((_DWORD *)v9 + 6) = -71800;
  }
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(&v12, 8);
  return v5;
}

void sub_1C94B7C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t tokenAuthentication_confirmAuthTokenActivation(uint64_t a1, uint64_t a2)
{
  dispatch_semaphore_t v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[6];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  v4 = dispatch_semaphore_create(0);
  if (v4)
  {
    v5 = v4;
    v6 = (void *)objc_msgSend(MEMORY[0x1E0D44980], "sharedManager");
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __tokenAuthentication_confirmAuthTokenActivation_block_invoke;
    v9[3] = &unk_1E8269F78;
    v9[4] = v5;
    v9[5] = &v10;
    objc_msgSend(v6, "confirmActivationForAuthToken:withUUID:completionHandler:", a1, a2, v9);
    dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(v5);
    v7 = *((unsigned int *)v11 + 6);
  }
  else
  {
    APSLogErrorAt();
    v7 = 4294895496;
    *((_DWORD *)v11 + 6) = -71800;
  }
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_1C94B7D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t tokenAuthentication_savePairingToken(uint64_t a1)
{
  dispatch_semaphore_t v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v2 = dispatch_semaphore_create(0);
  if (v2)
  {
    v3 = v2;
    v4 = (void *)objc_msgSend(MEMORY[0x1E0D44978], "sharedManager");
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __tokenAuthentication_savePairingToken_block_invoke;
    v7[3] = &unk_1E8269F78;
    v7[4] = v3;
    v7[5] = &v8;
    objc_msgSend(v4, "addPairingWithToken:completionHandler:", a1, v7);
    dispatch_semaphore_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(v3);
    v5 = *((unsigned int *)v9 + 6);
  }
  else
  {
    APSLogErrorAt();
    v5 = 4294895496;
    *((_DWORD *)v9 + 6) = -71800;
  }
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1C94B7E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t tokenAuthentication_sendAuthSetupRequestCreatingReply(uint64_t a1, const void *a2)
{
  const __CFAllocator *v3;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v5;
  const __CFData *Data;
  const __CFData *v7;
  uint64_t v8;
  char __str[32];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v5 = Mutable;
    Data = CFPropertyListCreateData(v3, a2, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (Data)
    {
      v7 = Data;
      CFDataGetBytePtr(Data);
      CFDataGetLength(v7);
      CFDictionarySetData();
      snprintf(__str, 0x20uLL, "%d", 16);
      CFDictionarySetCString();
      v8 = APTransportStreamSendPlistMessageCreatingPlistReply();
      if ((_DWORD)v8)
        APSLogErrorAt();
      CFRelease(v7);
    }
    else
    {
      v8 = 4294895496;
      APSLogErrorAt();
    }
    CFRelease(v5);
  }
  else
  {
    v8 = 4294895496;
    APSLogErrorAt();
  }
  return v8;
}

intptr_t __tokenAuthentication_verifyPairing_block_invoke(uint64_t a1, char a2, uint64_t a3)
{
  if (a3
    && gLogCategory_APAuthenticationClientToken <= 90
    && (gLogCategory_APAuthenticationClientToken != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

intptr_t __tokenAuthentication_rollAuthToken_block_invoke(uint64_t a1, void *a2, void *a3)
{
  void *v6;

  if (a3)
  {
    if (gLogCategory_APAuthenticationClientToken <= 90
      && (gLogCategory_APAuthenticationClientToken != -1 || _LogCategory_Initialize()))
    {
      v6 = a3;
      LogPrintF();
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(a3, "code", v6);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a2;
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

intptr_t __tokenAuthentication_generatePairingToken_block_invoke(uint64_t a1, void *a2, void *a3)
{
  void *v6;

  if (a3)
  {
    if (gLogCategory_APAuthenticationClientToken <= 90
      && (gLogCategory_APAuthenticationClientToken != -1 || _LogCategory_Initialize()))
    {
      v6 = a3;
      LogPrintF();
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(a3, "code", v6);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a2;
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

intptr_t __tokenAuthentication_confirmAuthTokenActivation_block_invoke(uint64_t a1, void *a2)
{
  void *v5;

  if (a2)
  {
    if (gLogCategory_APAuthenticationClientToken <= 90
      && (gLogCategory_APAuthenticationClientToken != -1 || _LogCategory_Initialize()))
    {
      v5 = a2;
      LogPrintF();
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(a2, "code", v5);
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

intptr_t __tokenAuthentication_savePairingToken_block_invoke(uint64_t a1, void *a2)
{
  void *v5;

  if (a2)
  {
    if (gLogCategory_APAuthenticationClientToken <= 90
      && (gLogCategory_APAuthenticationClientToken != -1 || _LogCategory_Initialize()))
    {
      v5 = a2;
      LogPrintF();
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(a2, "code", v5);
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t APAudioEngineCarPlayCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  APAudioEngineGetClassID();
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
  {
    v8 = v4;
LABEL_13:
    APSLogErrorAt();
    return v8;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 16) = v6;
  if (!v6)
  {
    v8 = 4294895226;
    goto LABEL_13;
  }
  v7 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 128) = v7;
  if (!v7)
  {
    v8 = 4294895226;
    goto LABEL_13;
  }
  *(_DWORD *)DerivedStorage = CFDictionaryGetInt64Ranged();
  *(_BYTE *)(DerivedStorage + 8) = 0;
  if (gLogCategory_APAudioEngineCarPlay <= 40
    && (gLogCategory_APAudioEngineCarPlay != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *a3 = 0;
  return 0;
}

void audioEngineCarPlay_Finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  NSObject *v10;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (const void *)DerivedStorage[9];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[9] = 0;
  }
  v2 = (const void *)DerivedStorage[10];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[10] = 0;
  }
  v3 = (const void *)DerivedStorage[11];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[11] = 0;
  }
  v4 = (const void *)DerivedStorage[12];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[12] = 0;
  }
  v5 = DerivedStorage[2];
  if (v5)
  {
    dispatch_release(v5);
    DerivedStorage[2] = 0;
  }
  v6 = (const void *)DerivedStorage[23];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[23] = 0;
  }
  v7 = (const void *)DerivedStorage[24];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[24] = 0;
  }
  v8 = (const void *)DerivedStorage[25];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[25] = 0;
  }
  v9 = (const void *)DerivedStorage[26];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[26] = 0;
  }
  v10 = DerivedStorage[16];
  if (v10)
  {
    dispatch_release(v10);
    DerivedStorage[16] = 0;
  }
}

const __CFString *audioEngineCarPlay_CopyDebugDescription()
{
  return CFSTR("<APAudioEngineRealTime>");
}

uint64_t audioEngineCarPlay_CopyProperty(int a1, CFTypeRef cf1, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[6];

  if (!cf1)
  {
    v7 = 4294895225;
LABEL_9:
    APSLogErrorAt();
    return v7;
  }
  if (!a4)
  {
    v7 = 4294895225;
    goto LABEL_9;
  }
  if (!CFEqual(cf1, CFSTR("audioSource")))
    return 4294954509;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(NSObject **)(DerivedStorage + 16);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = __audioEngineCarPlay_copyAudioSource_block_invoke;
  v9[3] = &__block_descriptor_tmp_12;
  v9[4] = a4;
  v9[5] = DerivedStorage;
  dispatch_sync(v6, v9);
  return 0;
}

uint64_t audioEngineCarPlay_SetProperty(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  CFTypeID v11;
  uint64_t v12;
  NSObject *v13;
  CFTypeID v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t block;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  const void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("ForceZeroBasedSampleTimes")))
  {
    *(_BYTE *)(DerivedStorage + 8) = CFGetInt64() != 0;
    return 0;
  }
  if (!CFEqual(a2, CFSTR("cryptor")))
  {
    if (CFEqual(a2, CFSTR("audioSource")))
    {
      if (a3 && (v11 = CFGetTypeID(a3), v11 != FigEndpointAudioSourceGetTypeID()))
      {
        v10 = 4294895225;
      }
      else
      {
        v27 = 0;
        v28 = &v27;
        v29 = 0x2000000000;
        v30 = 0;
        v12 = CMBaseObjectGetDerivedStorage();
        CFRetain(a1);
        if (a3)
          CFRetain(a3);
        v13 = *(NSObject **)(v12 + 16);
        block = MEMORY[0x1E0C809B0];
        v20 = 0x40000000;
        v21 = __audioEngineCarPlay_setAudioSource_block_invoke;
        v22 = &unk_1E826A0C8;
        v23 = &v27;
        v24 = v12;
        v25 = a3;
        v26 = a1;
        dispatch_async(v13, &block);
        if (!*((_DWORD *)v28 + 6))
          goto LABEL_15;
        APSLogErrorAt();
        v10 = *((unsigned int *)v28 + 6);
        _Block_object_dispose(&v27, 8);
        if (!(_DWORD)v10)
          return v10;
      }
    }
    else
    {
      if (!CFEqual(a2, CFSTR("messageRingCapacity")))
        return 4294954512;
      if (a3)
      {
        v15 = CFGetTypeID(a3);
        if (v15 == CFNumberGetTypeID())
        {
          v27 = 0;
          v28 = &v27;
          v29 = 0x2000000000;
          v30 = 0;
          v16 = CMBaseObjectGetDerivedStorage();
          v17 = *(NSObject **)(v16 + 16);
          block = MEMORY[0x1E0C809B0];
          v20 = 0x40000000;
          v21 = __audioEngineCarPlay_setMessageRingCapacity_block_invoke;
          v22 = &unk_1E826A0F0;
          v23 = &v27;
          v24 = v16;
          v25 = a3;
          dispatch_sync(v17, &block);
          v18 = *((unsigned int *)v28 + 6);
          _Block_object_dispose(&v27, 8);
          v10 = 0;
          if ((_DWORD)v18)
          {
            APSLogErrorAt();
            return v18;
          }
          return v10;
        }
      }
      v10 = 4294895225;
    }
LABEL_29:
    APSLogErrorAt();
    return v10;
  }
  if (a3)
  {
    v7 = CFGetTypeID(a3);
    if (v7 != APSCryptorGetTypeID())
    {
      v10 = 4294895225;
      goto LABEL_29;
    }
  }
  v27 = 0;
  v28 = &v27;
  v29 = 0x2000000000;
  v30 = 0;
  v8 = CMBaseObjectGetDerivedStorage();
  v9 = *(NSObject **)(v8 + 16);
  block = MEMORY[0x1E0C809B0];
  v20 = 0x40000000;
  v21 = __audioEngineCarPlay_setCryptor_block_invoke;
  v22 = &unk_1E826A0A0;
  v23 = &v27;
  v24 = v8;
  v25 = a3;
  dispatch_sync(v9, &block);
  if (!*((_DWORD *)v28 + 6))
  {
LABEL_15:
    _Block_object_dispose(&v27, 8);
    return 0;
  }
  APSLogErrorAt();
  v10 = *((unsigned int *)v28 + 6);
  _Block_object_dispose(&v27, 8);
  if ((_DWORD)v10)
    goto LABEL_29;
  return v10;
}

CFTypeRef __audioEngineCarPlay_copyAudioSource_block_invoke(uint64_t a1)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(*(_QWORD *)(a1 + 40) + 72);
  if (result)
    result = CFRetain(result);
  **(_QWORD **)(a1 + 32) = result;
  return result;
}

void __audioEngineCarPlay_setCryptor_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;

  v2 = a1[5];
  if (*(_BYTE *)(v2 + 120))
  {
    APSLogErrorAt();
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = -72077;
  }
  else
  {
    v3 = *(const void **)(v2 + 80);
    v4 = (const void *)a1[6];
    *(_QWORD *)(v2 + 80) = v4;
    if (v4)
      CFRetain(v4);
    if (v3)
      CFRelease(v3);
  }
}

void __audioEngineCarPlay_setAudioSource_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v2 + 120))
  {
    APSLogErrorAt();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -72077;
  }
  else
  {
    v3 = *(const void **)(v2 + 72);
    v4 = *(const void **)(a1 + 48);
    *(_QWORD *)(v2 + 72) = v4;
    if (v4)
      CFRetain(v4);
    if (v3)
      CFRelease(v3);
  }
  CFRelease(*(CFTypeRef *)(a1 + 56));
  v5 = *(const void **)(a1 + 48);
  if (v5)
    CFRelease(v5);
}

uint64_t __audioEngineCarPlay_setMessageRingCapacity_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (!*(_BYTE *)(v2 + 120))
    return CFNumberGetValue(*(CFNumberRef *)(a1 + 48), kCFNumberSInt64Type, (void *)(v2 + 64));
  result = APSLogErrorAt();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -72077;
  return result;
}

uint64_t audioEngineCarPlay_RegisterStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage;
  NSObject *v10;
  uint64_t v11;
  _QWORD block[9];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    v11 = 4294895225;
LABEL_8:
    APSLogErrorAt();
    *((_DWORD *)v15 + 6) = -72071;
    goto LABEL_5;
  }
  if (*(_QWORD *)(a6 + 16))
  {
    v11 = 4294895225;
    goto LABEL_8;
  }
  v10 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __audioEngineCarPlay_RegisterStream_block_invoke;
  block[3] = &unk_1E826A118;
  block[4] = &v14;
  block[5] = DerivedStorage;
  block[6] = a3;
  block[7] = a2;
  block[8] = a6;
  dispatch_sync(v10, block);
  if (*((_DWORD *)v15 + 6))
  {
    APSLogErrorAt();
    v11 = *((unsigned int *)v15 + 6);
  }
  else
  {
    v11 = 0;
  }
LABEL_5:
  _Block_object_dispose(&v14, 8);
  return v11;
}

uint64_t audioEngineCarPlay_DeregisterStream(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  uint64_t v5;
  _QWORD block[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __audioEngineCarPlay_DeregisterStream_block_invoke;
  block[3] = &unk_1E826A140;
  block[4] = &v8;
  block[5] = DerivedStorage;
  block[6] = a2;
  dispatch_sync(v4, block);
  v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t audioEngineCarPlay_Resume(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  uint64_t v4;
  _QWORD block[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  v3 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __audioEngineCarPlay_Resume_block_invoke;
  block[3] = &unk_1E826A188;
  block[4] = &v7;
  block[5] = DerivedStorage;
  block[6] = a1;
  dispatch_async(v3, block);
  v4 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t audioEngineCarPlay_Suspend(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  _QWORD v5[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(NSObject **)(DerivedStorage + 16);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __audioEngineCarPlay_Suspend_block_invoke;
  v5[3] = &__block_descriptor_tmp_24;
  v5[4] = DerivedStorage;
  v5[5] = a1;
  dispatch_sync(v3, v5);
  return 0;
}

uint64_t audioEngineCarPlay_Flush(const void *a1, int a2, __int128 *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  NSObject *v8;
  _QWORD block[6];
  __int128 v11;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    APSLogErrorAt();
    return 4294895225;
  }
  else
  {
    v7 = DerivedStorage;
    CFRetain(a1);
    v8 = *(NSObject **)(v7 + 128);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __audioEngineCarPlay_Flush_block_invoke;
    block[3] = &__block_descriptor_tmp_26_0;
    v11 = *a3;
    v12 = *((_QWORD *)a3 + 2);
    block[4] = v7;
    block[5] = a1;
    dispatch_async(v8, block);
    return 0;
  }
}

uint64_t audioEngineCarPlay_CopyMessageAtSequenceNumber(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[7];
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    v6 = *(NSObject **)(DerivedStorage + 16);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = __audioEngineCarPlay_CopyMessageAtSequenceNumber_block_invoke;
    v9[3] = &unk_1E826A210;
    v9[4] = &v11;
    v9[5] = DerivedStorage;
    v10 = a2;
    v9[6] = a3;
    dispatch_sync(v6, v9);
    v7 = *((unsigned int *)v12 + 6);
  }
  else
  {
    v7 = 4294895225;
    APSLogErrorAt();
    *((_DWORD *)v12 + 6) = -72071;
  }
  _Block_object_dispose(&v11, 8);
  return v7;
}

uint64_t audioEngineCarPlay_HandleDataReady()
{
  uint64_t result;
  uint64_t v1;
  int v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  _QWORD *v5;
  unsigned int (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t *, int *, _OWORD *);
  int v15;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t, char *, uint64_t, char *, uint64_t, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t NextUnsentMessage;
  uint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[4];
  _BYTE v33[26];
  int v34;
  char *dataPointerOut;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  OpaqueCMBlockBuffer *v41;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(result + 136))
  {
    v1 = result;
    kdebug_trace();
    if (*(_DWORD *)(v1 + 4))
    {
      v2 = 0;
      while (1)
      {
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        v40 = 0;
        v41 = 0;
        v38 = 0;
        v39 = 0;
        v36 = 0;
        v37 = 0;
        dataPointerOut = 0;
        v34 = 0;
        memset(v33, 0, sizeof(v33));
        memset(v32, 0, sizeof(v32));
        v4 = *(_QWORD *)(DerivedStorage + 184);
        v5 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
        if (*v5 < 2uLL)
          goto LABEL_23;
        v6 = (unsigned int (*)(uint64_t, uint64_t))v5[8];
        if (v6)
        {
          if (!v6(v4, 1))
            goto LABEL_23;
        }
        APMessageRingGetNextFreeBacking(*(_QWORD *)(DerivedStorage + 200));
        if (APSTransportMessageGetAudioDataPointer())
          goto LABEL_22;
        v7 = *(_QWORD *)(DerivedStorage + 192);
        if (v7 && (v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) != 0)
          v9 = v8(v7);
        else
          v9 = 0;
        v10 = *(_QWORD *)(DerivedStorage + 184);
        v11 = v39;
        v12 = v40;
        v13 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
        if (*v13 < 2uLL)
          goto LABEL_22;
        v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t *, int *, _OWORD *))v13[9];
        if (!v14)
          goto LABEL_22;
        v15 = v14(v10, v12, v11 - v9, v33, 1, &v39, &v34, v32);
        if (v15 != -16774 && v15 != 0)
          goto LABEL_22;
        if (v34)
          break;
LABEL_23:
        if (v41)
          CFRelease(v41);
        if (v34)
        {
          if (++v2 < *(_DWORD *)(v1 + 4))
            continue;
        }
        goto LABEL_52;
      }
      *(_WORD *)&v33[16] = 0;
      v17 = (unint64_t)*(double *)v32;
      *(_DWORD *)&v33[22] = 0;
      if (*(_BYTE *)(DerivedStorage + 236))
      {
        v18 = *(_DWORD *)(DerivedStorage + 232);
      }
      else
      {
        if (*(_BYTE *)(DerivedStorage + 8))
          v18 = (unint64_t)*(double *)v32;
        else
          v18 = 0;
        *(_DWORD *)(DerivedStorage + 232) = v18;
        *(_BYTE *)(DerivedStorage + 236) = 1;
      }
      *(_DWORD *)&v33[18] = v17 - v18;
      if (!APSTransportMessageSetAudioDataHeader()
        && !APSTransportMessageCreateReferencingBBufWithAudioDataLength())
      {
        if (!*(_QWORD *)(DerivedStorage + 192))
          goto LABEL_43;
        if (!APSTransportMessageGetAudioAADPointer()
          && !CMBlockBufferGetDataPointer(v41, 0xAuLL, 0, 0, &dataPointerOut))
        {
          if (v9)
          {
            if (CMBlockBufferGetDataPointer(v41, v39 + 10, 0, 0, &v38))
              goto LABEL_22;
            v29 = v38;
          }
          else
          {
            v29 = 0;
          }
          v19 = *(_QWORD *)(DerivedStorage + 192);
          v21 = v36;
          v20 = v37;
          v22 = dataPointerOut;
          v23 = v39;
          v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, char *, uint64_t, char *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
          if (v24 && !v24(v19, v20, v21, v22, v23, v22, v23, v29, v9))
          {
LABEL_43:
            v25 = *(_QWORD *)(DerivedStorage + 200);
            v30 = *MEMORY[0x1E0CA2E18];
            v31 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
            if (!APMessageRingEnqueueMessageForSending(v25, v41, (uint64_t)&v30))
              goto LABEL_23;
          }
        }
      }
LABEL_22:
      APSLogErrorAt();
      goto LABEL_23;
    }
LABEL_52:
    v26 = CMBaseObjectGetDerivedStorage();
    if (gLogCategory_APAudioEngineCarPlay <= 30
      && (gLogCategory_APAudioEngineCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    NextUnsentMessage = APMessageRingGetNextUnsentMessage(*(_QWORD *)(v26 + 200), 0);
    if (NextUnsentMessage)
    {
      v28 = NextUnsentMessage;
      do
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v26 + 224))(*(_QWORD *)(v26 + 208), 1734700576, v28);
        APMessageRingMarkMessageAsSent(*(_QWORD *)(v26 + 200), v28);
        v28 = APMessageRingGetNextUnsentMessage(*(_QWORD *)(v26 + 200), 0);
      }
      while (v28);
    }
    if (gLogCategory_APAudioEngineCarPlay <= 30
      && (gLogCategory_APAudioEngineCarPlay != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return kdebug_trace();
  }
  return result;
}

uint64_t APAudioSourceConduitCreate(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  dispatch_semaphore_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!a3)
  {
    APSLogErrorAt();
    return 4294950525;
  }
  FigEndpointAudioSourceGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
    v13 = v5;
LABEL_17:
    APSLogErrorAt();
    return v13;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 1) = 1;
  v7 = *((_QWORD *)a2 + 4);
  v8 = *a2;
  *(_OWORD *)(DerivedStorage + 24) = a2[1];
  *(_QWORD *)(DerivedStorage + 40) = v7;
  *(_OWORD *)(DerivedStorage + 8) = v8;
  v9 = MirroredRingBufferInit();
  if ((_DWORD)v9)
  {
    v13 = v9;
    goto LABEL_17;
  }
  v10 = APSRingBufferFlushControllerInit();
  if ((_DWORD)v10)
  {
    v13 = v10;
    goto LABEL_17;
  }
  v11 = dispatch_semaphore_create(1);
  *(_QWORD *)(DerivedStorage + 120) = v11;
  if (v11
    && (*(_QWORD *)(DerivedStorage + 192) = 0,
        *(_QWORD *)(DerivedStorage + 200) = 0,
        v12 = FigSimpleMutexCreate(),
        (*(_QWORD *)(DerivedStorage + 208) = v12) != 0))
  {
    if (gLogCategory_APAudioSourceConduit <= 30
      && (gLogCategory_APAudioSourceConduit != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v13 = 0;
    *a3 = 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294950526;
  }
  return v13;
}

uint64_t conduitsource_Invalidate()
{
  _BYTE *DerivedStorage;
  _BYTE *v1;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v1 = DerivedStorage;
    if (gLogCategory_APAudioSourceConduit <= 30
      && (gLogCategory_APAudioSourceConduit != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *v1 = 1;
  }
  return 0;
}

uint64_t conduitsource_Finalize()
{
  _QWORD *DerivedStorage;
  NSObject *v1;
  uint64_t result;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  conduitsource_Invalidate();
  MirroredRingBufferFree();
  DerivedStorage[13] = 0;
  DerivedStorage[14] = 0;
  v1 = DerivedStorage[15];
  if (v1)
  {
    dispatch_release(v1);
    DerivedStorage[15] = 0;
  }
  result = DerivedStorage[26];
  if (result)
  {
    result = FigSimpleMutexDestroy();
    DerivedStorage[26] = 0;
  }
  return result;
}

__CFString *conduitsource_CopyDebugDescription()
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APAudioSourceConduit>"));
  return Mutable;
}

uint64_t conduitsource_Resume()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioSourceConduit <= 30
    && (gLogCategory_APAudioSourceConduit != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_BYTE *)(DerivedStorage + 1) = 0;
  *(_QWORD *)(DerivedStorage + 88) = 0;
  *(_BYTE *)(DerivedStorage + 96) = 0;
  *(_QWORD *)(DerivedStorage + 192) = 0;
  *(_QWORD *)(DerivedStorage + 200) = 0;
  return 0;
}

uint64_t conduitsource_Suspend()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioSourceConduit <= 30
    && (gLogCategory_APAudioSourceConduit != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_BYTE *)(DerivedStorage + 1) = 1;
  return 0;
}

uint64_t conduitsource_Flush()
{
  uint64_t v0;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioSourceConduit <= 30
    && (gLogCategory_APAudioSourceConduit != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v0 = APSRingBufferFlushControllerFlush();
  if ((_DWORD)v0)
    APSLogErrorAt();
  return v0;
}

BOOL conduitsource_CanProduceBytes(uint64_t a1, unint64_t a2)
{
  uint64_t DerivedStorage;
  unint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 <= 1)
    v4 = 1;
  else
    v4 = a2;
  __dmb(0xBu);
  return v4 <= (*(_DWORD *)(DerivedStorage + 76) - *(_DWORD *)(DerivedStorage + 72));
}

uint64_t conduitsource_GetRingBuffer(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    *a2 = *(_QWORD *)(DerivedStorage + 88)
        + (*(_DWORD *)(DerivedStorage + 72) / *(_DWORD *)(DerivedStorage + 32));
  return DerivedStorage + 48;
}

uint64_t conduitsource_FillBuffer(uint64_t a1, void *a2, size_t a3, size_t *a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  uint64_t DerivedStorage;
  uint64_t v14;
  unsigned int v15;
  size_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a7)
  {
    v14 = DerivedStorage;
    v15 = *(_DWORD *)(DerivedStorage + 72);
    v16 = *(_DWORD *)(DerivedStorage + 76) - v15;
    if ((_DWORD)v16)
    {
      if (v16 < a3)
        a3 = *(_DWORD *)(DerivedStorage + 76) - v15;
      memcpy(a2, (const void *)(*(_QWORD *)(DerivedStorage + 48) + (*(_DWORD *)(DerivedStorage + 68) & v15)), a3);
      *a4 = a3;
      v17 = *(_DWORD *)(v14 + 32);
      v18 = a3 / v17;
      *a5 = v18;
      v19 = *(_DWORD *)(v14 + 72);
      if (a6)
        *a6 = *(_QWORD *)(v14 + 88) + v19 / v17;
      result = 0;
      *(_DWORD *)(v14 + 72) = v19 + a3;
      *(_QWORD *)(v14 + 192) += v18;
    }
    else
    {
      APSLogErrorAt();
      return 4294950522;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950525;
  }
  return result;
}

BOOL conduitsource_CanAcceptBytes()
{
  _DWORD *DerivedStorage;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  __dmb(0xBu);
  return DerivedStorage[18] - DerivedStorage[19] + DerivedStorage[16] != 0;
}

uint64_t conduitsource_WriteBytes(uint64_t a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a2)
  {
    v4 = conduitsource_WriteDataInternal(a1, a2, a3, a4);
    if ((_DWORD)v4)
      APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    return 4294950525;
  }
  return v4;
}

uint64_t conduitsource_AcquireBuffer(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  unsigned int v7;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    v6 = DerivedStorage;
    if (*(_BYTE *)(DerivedStorage + 1))
    {
      APSLogErrorAt();
      return 4294950524;
    }
    else
    {
      v7 = *(_DWORD *)(DerivedStorage + 76);
      if (*(_DWORD *)(DerivedStorage + 64) - v7 + *(_DWORD *)(DerivedStorage + 72) < a2)
      {
        return 4294950523;
      }
      else
      {
        result = 0;
        *a3 = *(_QWORD *)(v6 + 48) + (*(_DWORD *)(v6 + 68) & v7);
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950525;
  }
  return result;
}

BOOL conduitsource_IsAcquiredBuffer(uint64_t a1, unint64_t a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    APSLogErrorAt();
    return 0;
  }
  if (*(_QWORD *)(DerivedStorage + 48) > a2)
    return 0;
  return *(_QWORD *)(DerivedStorage + 56) > a2;
}

uint64_t conduitsource_CommitBuffer(uint64_t a1, size_t a2, uint64_t a3)
{
  return conduitsource_WriteDataInternal(a1, 0, a2, a3);
}

uint64_t conduitsource_GetAudioFormat(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  __int128 v4;
  __int128 v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioSourceConduit <= 30
    && (gLogCategory_APAudioSourceConduit != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v4 = *(_OWORD *)(DerivedStorage + 8);
  v5 = *(_OWORD *)(DerivedStorage + 24);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(DerivedStorage + 40);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  return 0;
}

BOOL conduitsource_CanProducePackets(uint64_t a1, unint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 <= 1)
    v4 = 1;
  else
    v4 = a2;
  v5 = v4 * *(unsigned int *)(DerivedStorage + 28) * *(unsigned int *)(DerivedStorage + 32);
  v6 = CMBaseObjectGetDerivedStorage();
  if (v5 <= 1)
    v7 = 1;
  else
    v7 = v5;
  __dmb(0xBu);
  return v7 <= (*(_DWORD *)(v6 + 76) - *(_DWORD *)(v6 + 72));
}

uint64_t conduitsource_FillComplexBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16) == 1819304813)
  {
    if (a9)
    {
      CMBaseObjectGetDerivedStorage();
      APSLogErrorAt();
      v9 = 4294950525;
      APSLogErrorAt();
    }
    else
    {
      APSLogErrorAt();
      return 4294950525;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950524;
  }
  return v9;
}

uint64_t conduitsource_SetWriteHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  _QWORD *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 1))
  {
    v6 = (_QWORD *)DerivedStorage;
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 208));
    v6[13] = a2;
    v6[14] = a3;
    MEMORY[0x1CAA400E4](v6[26]);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294950524;
  }
}

uint64_t conduitsource_PrepareForFlush()
{
  uint64_t v0;

  CMBaseObjectGetDerivedStorage();
  v0 = APSRingBufferFlushControllerPrepareForFlush();
  if ((_DWORD)v0)
    APSLogErrorAt();
  return v0;
}

uint64_t conduitsource_WriteDataInternal(uint64_t a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 1))
  {
    APSLogErrorAt();
    return 4294950524;
  }
  v8 = DerivedStorage;
  v9 = *(_QWORD *)(DerivedStorage + 200);
  *(_QWORD *)(DerivedStorage + 88) = a4 - v9;
  if (a2)
  {
    v10 = *(_DWORD *)(DerivedStorage + 76);
    v11 = *(_DWORD *)(DerivedStorage + 64) - v10;
    if (v11 + *(_DWORD *)(DerivedStorage + 72) < a3)
      a3 = v11 + *(_DWORD *)(DerivedStorage + 72);
    memcpy((void *)(*(_QWORD *)(DerivedStorage + 48) + (*(_DWORD *)(DerivedStorage + 68) & v10)), a2, a3);
    __dmb(0xBu);
    v9 = *(_QWORD *)(v8 + 200);
  }
  *(_DWORD *)(v8 + 76) += a3;
  *(_QWORD *)(v8 + 200) = v9 + a3 / *(unsigned int *)(v8 + 32);
  if (*(_QWORD *)(v8 + 104))
  {
    result = FigSimpleMutexTryLock();
    if (!(_DWORD)result)
      return result;
    (*(void (**)(size_t, uint64_t, _QWORD))(v8 + 104))(a3 / *(unsigned int *)(v8 + 32), a4, *(_QWORD *)(v8 + 112));
    MEMORY[0x1CAA400E4](*(_QWORD *)(v8 + 208));
  }
  return 0;
}

uint64_t APAudioEngineRealTimeCreate(const __CFAllocator *a1, const void *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  const __CFDictionary *v5;
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t Int64;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  int IntWithDefault;
  NSObject *v17;
  dispatch_queue_t v18;
  const void *LLA;
  CFMutableSetRef Mutable;
  const __CFDictionary *v21;
  NSObject *v22;
  const void *v23;
  void *v24;
  int v25;
  int v27;
  char *name;
  void *value;
  CFTypeRef cf;
  unsigned int LatencyTier;
  char label[64];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  LatencyTier = 0;
  value = 0;
  cf = 0;
  if (!a4 || !a2)
    goto LABEL_90;
  v5 = a3;
  if (!a3)
  {
    APSLogErrorAt();
LABEL_91:
    v27 = -15481;
    goto LABEL_92;
  }
  if (gLogCategory_APAudioEngineRealTime <= 30
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  FigEndpointStreamAudioEngineGetClassID();
  LatencyTier = CMDerivedObjectCreate();
  if (LatencyTier)
    goto LABEL_95;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 56) = -1;
  LatencyTier = APSDispatchSectionCreate();
  if (LatencyTier)
    goto LABEL_95;
  v9 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 552) = v9;
  if (!v9)
  {
LABEL_82:
    APSLogErrorAt();
    v5 = 0;
LABEL_84:
    v27 = -15480;
LABEL_92:
    LatencyTier = v27;
    goto LABEL_96;
  }
  CFDictionaryGetValueIfPresent(v5, CFSTR("streamType"), (const void **)&value);
  Int64 = CFDictionaryGetInt64();
  *(_BYTE *)(DerivedStorage + 16) = Int64 != 0;
  if (Int64)
  {
    *(_QWORD *)(DerivedStorage + 432) = CFSTR("SCR");
    *(_QWORD *)(DerivedStorage + 24) = CFStringCreateF();
    if (LatencyTier)
      goto LABEL_95;
    v11 = "com.apple.airplay.rtae.scr.latencyms";
  }
  else if (FigCFEqual())
  {
    *(_QWORD *)(DerivedStorage + 432) = CFSTR("LLA");
    *(_QWORD *)(DerivedStorage + 24) = CFStringCreateF();
    if (LatencyTier)
      goto LABEL_95;
    v11 = "com.apple.airplay.rtae.lla.latencyms";
  }
  else
  {
    *(_QWORD *)(DerivedStorage + 432) = CFSTR("HLA");
    *(_QWORD *)(DerivedStorage + 24) = CFStringCreateF();
    if (LatencyTier)
      goto LABEL_95;
    v11 = "com.apple.airplay.rtae.hla.latencyms";
  }
  name = (char *)v11;
  SNPrintF();
  v12 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 120) = v12;
  if (!v12
    || (*(_BYTE *)DerivedStorage = 0,
        SNPrintF(),
        v13 = FigDispatchQueueCreateWithPriority(),
        (*(_QWORD *)(DerivedStorage + 72) = v13) == 0))
  {
LABEL_94:
    APSLogErrorAt();
    v5 = 0;
    LatencyTier = APSSignalErrorAt();
    goto LABEL_96;
  }
  v14 = value;
  if (value)
    v14 = (void *)CFRetain(value);
  *(_QWORD *)(DerivedStorage + 8) = v14;
  v15 = CFDictionaryGetInt64();
  if (LatencyTier)
    goto LABEL_95;
  LatencyTier = realTimeAudioEngine_setTransportAudioFormatASBDInternal((uint64_t)cf, v15);
  if (LatencyTier)
    goto LABEL_95;
  if (gLogCategory_APAudioEngineRealTime <= 50
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_BYTE *)(DerivedStorage + 32) = CFDictionaryGetInt64() != 0;
  *(_QWORD *)(DerivedStorage + 48) = 512;
  IntWithDefault = APSSettingsGetIntWithDefault();
  *(_DWORD *)(DerivedStorage + 88) = IntWithDefault;
  *(_BYTE *)(DerivedStorage + 544) = 0;
  if (IntWithDefault)
  {
    SNPrintF();
    v17 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
    v18 = dispatch_queue_create(label, v17);
    *(_QWORD *)(DerivedStorage + 96) = v18;
    if (v18)
    {
      LatencyTier = APSAudioIOAssertionTimingControllerCreate();
      if (!LatencyTier)
        goto LABEL_32;
LABEL_95:
      APSLogErrorAt();
      v5 = 0;
      goto LABEL_96;
    }
    goto LABEL_94;
  }
LABEL_32:
  if (FigCFEqual() && !APSSettingsGetInt64())
  {
    LLA = (const void *)APSDynamicLatencyManagerGetLLA();
    if (LLA)
      LLA = CFRetain(LLA);
    *(_QWORD *)(DerivedStorage + 112) = LLA;
    APSGetPersistentGroupModel();
    LatencyTier = APSDynamicLatencyManagerSetVariant();
    if (LatencyTier)
      goto LABEL_95;
    LatencyTier = APSDynamicLatencyManagerGetLatencyTier();
    if (LatencyTier)
      goto LABEL_95;
    if (gLogCategory_APAudioEngineRealTime <= 50
      && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else if (!FigCFDictionaryGetInt32IfPresent())
  {
LABEL_90:
    APSLogErrorAt();
    v5 = 0;
    goto LABEL_91;
  }
  if (!FigCFDictionaryGetInt32IfPresent()
    || !FigCFDictionaryGetInt32IfPresent()
    || !FigCFDictionaryGetInt32IfPresent())
  {
    goto LABEL_90;
  }
  if (!FigCFDictionaryGetInt32IfPresent())
    goto LABEL_95;
  *(_DWORD *)(DerivedStorage + 40) = APSSettingsGetIntWithDefault();
  if (gLogCategory_APAudioEngineRealTime <= 50
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(float *)(DerivedStorage + 132) = (float)0 / 1000.0;
  *(float *)(DerivedStorage + 136) = (float)0 / 1000.0;
  *(float *)(DerivedStorage + 140) = (float)0 / 1000.0;
  *(float *)(DerivedStorage + 144) = (float)0 / 1000.0;
  Mutable = CFSetCreateMutable(a1, 0, MEMORY[0x1E0C9B3B0]);
  *(_QWORD *)(DerivedStorage + 152) = Mutable;
  if (!Mutable)
    goto LABEL_82;
  v21 = (const __CFDictionary *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  v5 = v21;
  if (!v21)
  {
    APSLogErrorAt();
    goto LABEL_84;
  }
  v22 = *(NSObject **)(DerivedStorage + 120);
  v23 = (const void *)kAPAudioEngineRealTimeDispatchSpecificKey_WeakAudioEngineHolder;
  v24 = (void *)CFRetain(v21);
  dispatch_queue_set_specific(v22, v23, v24, (dispatch_function_t)MEMORY[0x1E0C98BC0]);
  LatencyTier = APSRealTimeSignalCreate();
  if (!LatencyTier)
  {
    *(_QWORD *)(DerivedStorage + 64) = CFRetain(a2);
    if (*(_BYTE *)(DerivedStorage + 16) || FigCFEqual())
      v25 = 5;
    else
      v25 = 30;
    LatencyTier = APSRealTimeReadableCreate();
    if (!LatencyTier)
    {
      LatencyTier = APSAtomicMessageQueueCreate();
      if (!LatencyTier)
      {
        LatencyTier = realTimeAudioEngine_tas_Initialize(a1, DerivedStorage + 576, v25, *(const void **)(DerivedStorage + 352), *(const void **)(DerivedStorage + 360), (uint64_t)cf);
        if (!LatencyTier)
        {
          LatencyTier = realTimeAudioEngine_initializeLogging();
          if (!LatencyTier)
          {
            if (IsAppleInternalBuild())
              notify_register_dispatch(name, (int *)(DerivedStorage + 56), *(dispatch_queue_t *)(DerivedStorage + 120), &__block_literal_global_11);
            *a4 = cf;
            return LatencyTier;
          }
        }
      }
    }
    goto LABEL_95;
  }
  APSLogErrorAt();
LABEL_96:
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
  return LatencyTier;
}

uint64_t realTimeAudioEngine_setTransportAudioFormatASBDInternal(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = DerivedStorage;
    v8 = 0u;
    v5 = APAudioFormatToASBD();
    if ((_DWORD)v5)
    {
      v6 = v5;
      APSLogErrorAt();
    }
    else
    {
      if (FigCFEqual())
      {
        APAudioFormatGetLowLatencyAudioFramesPerPacket();
        DWORD1(v8) = FigGetCFPreferenceNumberWithDefault();
      }
      if (gLogCategory_APAudioEngineRealTime <= 50
        && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v6 = 0;
      *(_OWORD *)(v4 + 160) = 0u;
      *(_OWORD *)(v4 + 176) = v8;
      *(_QWORD *)(v4 + 192) = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294951815;
  }
  return v6;
}

void realTimeAudioEngine_timeAnnounceWithResetSignalHandler()
{
  uint64_t v0;
  const void *v1;
  uint64_t DerivedStorage;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (gLogCategory_APAudioEngineRealTime <= 50
      && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_BYTE *)(DerivedStorage + 320) = 1;
    realTimeAudioEngine_handleTimeAnnounce();
    CFRelease(v1);
  }
}

uint64_t realTimeAudioEngine_tas_Initialize(const __CFAllocator *a1, uint64_t a2, int a3, const void *a4, const void *a5, uint64_t a6)
{
  uint64_t DerivedStorage;
  uint64_t v13;
  const void *v14;
  CFTypeRef v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __CFArray *Mutable;
  uint64_t v22;
  uint64_t v23;
  CFMutableDictionaryRef v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a5 || !a6)
  {
    APSLogErrorAt();
    return 4294950525;
  }
  v13 = DerivedStorage;
  *(_QWORD *)a2 = a6;
  v14 = *(const void **)(DerivedStorage + 24);
  if (!v14)
  {
    *(_QWORD *)(a2 + 8) = 0;
LABEL_8:
    APSLogErrorAt();
    return 4294951816;
  }
  v15 = CFRetain(v14);
  *(_QWORD *)(a2 + 8) = v15;
  if (!v15)
    goto LABEL_8;
  v16 = FigCFEqual() && *(_BYTE *)(v13 + 16) == 0;
  *(_BYTE *)(a2 + 16) = v16;
  v18 = FigSimpleMutexCreate();
  *(_QWORD *)(a2 + 88) = v18;
  if (!v18)
    goto LABEL_8;
  SNPrintF();
  v19 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(a2 + 104) = v19;
  if (!v19
    || (*(_QWORD *)(a2 + 264) = -1,
        *(_QWORD *)(a2 + 288) = 0,
        SNPrintF(),
        v20 = FigDispatchQueueCreateWithPriority(),
        (*(_QWORD *)(a2 + 304) = v20) == 0))
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, 0);
  *(_QWORD *)(a2 + 312) = Mutable;
  if (!Mutable)
    goto LABEL_8;
  CFArrayAppendValue(Mutable, (const void *)a2);
  v22 = APSAtomicMessageQueueCreate();
  if ((_DWORD)v22)
  {
    v17 = v22;
LABEL_38:
    APSLogErrorAt();
    return v17;
  }
  CFRetain(*(CFTypeRef *)(a2 + 312));
  v23 = APSRealTimeSignalCreate();
  if ((_DWORD)v23)
  {
    v17 = v23;
    goto LABEL_38;
  }
  v24 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(a2 + 336) = v24;
  if (!v24)
    goto LABEL_8;
  v25 = APSRealTimeWritableCreate();
  if ((_DWORD)v25)
  {
    v17 = v25;
    goto LABEL_38;
  }
  CFDictionaryGetEmpty();
  v26 = APSCFRealTimeReadableCreate();
  if ((_DWORD)v26)
  {
    v17 = v26;
    goto LABEL_38;
  }
  v27 = APSAtomicMessageQueueCreate();
  if ((_DWORD)v27)
  {
    v17 = v27;
    goto LABEL_38;
  }
  *(_QWORD *)(a2 + 64) = CFRetain(a4);
  *(_QWORD *)(a2 + 32) = CFRetain(a5);
  *(_DWORD *)(a2 + 40) = a3;
  *(_BYTE *)(a2 + 80) = FigCFEqual() == 0;
  if (!APSSettingsGetIntWithDefault())
    return 0;
  if (gLogCategory_APAudioEngineRealTime <= 50
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v17 = 0;
  *(_BYTE *)(a2 + 80) = 0;
  return v17;
}

uint64_t realTimeAudioEngine_initializeLogging()
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  uint64_t v2;
  unsigned int CFPreferenceNumberWithDefault;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  __int128 v9;
  CMTime v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CF7598], CFSTR("Histogram_TimeLostOnSenderToTxPacket"));
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CF75A0], CFSTR("ms"));
  FigCFDictionarySetDouble();
  FigCFDictionarySetDouble();
  FigCFDictionarySetInt32();
  v2 = APSStatsHistogramCreate();
  *(_QWORD *)(DerivedStorage + 368) = v2;
  if (!v2)
  {
    APSLogErrorAt();
    v7 = 4294951816;
    if (!Mutable)
      return v7;
    goto LABEL_3;
  }
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  CMTimeMake(&v10, CFPreferenceNumberWithDefault, 1000);
  *(CMTime *)(DerivedStorage + 448) = v10;
  v4 = MEMORY[0x1E0CA2E28];
  v9 = *MEMORY[0x1E0CA2E28];
  *(_OWORD *)(DerivedStorage + 472) = *MEMORY[0x1E0CA2E28];
  v5 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(DerivedStorage + 488) = v5;
  v6 = FigGetCFPreferenceNumberWithDefault();
  CMTimeMake(&v10, v6, 1000);
  v7 = 0;
  *(CMTime *)(DerivedStorage + 496) = v10;
  *(_OWORD *)(DerivedStorage + 520) = v9;
  *(_QWORD *)(DerivedStorage + 536) = v5;
  if (Mutable)
LABEL_3:
    CFRelease(Mutable);
  return v7;
}

uint64_t realTimeAudioEngine_setAudioLatency(float a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineRealTime <= 50
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(float *)(DerivedStorage + 132) = a1;
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDispatchAsyncPostNotification();
}

void FigCFRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void realTimeAudioEngine_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  CFTypeRef v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, _QWORD);
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  NSObject *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  int v35;
  NSObject *v36;
  NSObject *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  NSObject *v48;
  NSObject *v49;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
    v4 = CFRetain(v3);
  else
    v4 = 0;
  v5 = *(const void **)(DerivedStorage + 152);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 152) = 0;
  }
  realTimeAudioEngine_removeStreamNotificationListeners(a1, *(_QWORD *)(DerivedStorage + 216));
  v6 = *(NSObject **)(DerivedStorage + 336);
  if (v6)
  {
    dispatch_source_cancel(v6);
    if (!*(_BYTE *)(DerivedStorage + 344))
      dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 336));
    v7 = *(NSObject **)(DerivedStorage + 336);
    if (v7)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 336));
      dispatch_release(v7);
      *(_QWORD *)(DerivedStorage + 336) = 0;
    }
  }
  v8 = *(_QWORD *)(DerivedStorage + 208);
  if (v8)
  {
    v9 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v9)
      v9(v8);
    v10 = *(_QWORD *)(DerivedStorage + 208);
    v11 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
    if (v11)
      v11(v10, 0, 0);
  }
  v12 = *(const void **)(DerivedStorage + 240);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 240) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 216);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 216) = 0;
  }
  v14 = *(const void **)(DerivedStorage + 224);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(DerivedStorage + 224) = 0;
  }
  v15 = *(const void **)(DerivedStorage + 280);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(DerivedStorage + 280) = 0;
  }
  v16 = *(const void **)(DerivedStorage + 288);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(DerivedStorage + 288) = 0;
  }
  v17 = *(const void **)(DerivedStorage + 208);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(DerivedStorage + 208) = 0;
  }
  v18 = *(const void **)(DerivedStorage + 200);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(DerivedStorage + 200) = 0;
  }
  v19 = *(const void **)(DerivedStorage + 232);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(DerivedStorage + 232) = 0;
  }
  v20 = *(const void **)(DerivedStorage + 264);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(DerivedStorage + 264) = 0;
  }
  v21 = *(const void **)(DerivedStorage + 272);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(DerivedStorage + 272) = 0;
  }
  v22 = *(const void **)(DerivedStorage + 8);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v23 = *(const void **)(DerivedStorage + 24);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v24 = *(const void **)(DerivedStorage + 64);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v25 = *(NSObject **)(DerivedStorage + 96);
  if (v25)
  {
    dispatch_release(v25);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  v26 = *(const void **)(DerivedStorage + 104);
  if (v26)
  {
    CFRelease(v26);
    *(_QWORD *)(DerivedStorage + 104) = 0;
  }
  v27 = *(const void **)(DerivedStorage + 112);
  if (v27)
  {
    CFRelease(v27);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v28 = *(const void **)(DerivedStorage + 352);
  if (v28)
  {
    CFRelease(v28);
    *(_QWORD *)(DerivedStorage + 352) = 0;
  }
  v29 = *(const void **)(DerivedStorage + 360);
  if (v29)
  {
    CFRelease(v29);
    *(_QWORD *)(DerivedStorage + 360) = 0;
  }
  v30 = *(const void **)(DerivedStorage + 368);
  if (v30)
  {
    CFRelease(v30);
    *(_QWORD *)(DerivedStorage + 368) = 0;
  }
  v31 = *(const void **)(DerivedStorage + 328);
  if (v31)
  {
    CFRelease(v31);
    *(_QWORD *)(DerivedStorage + 328) = 0;
  }
  v32 = *(const void **)(DerivedStorage + 560);
  if (v32)
  {
    CFRelease(v32);
    *(_QWORD *)(DerivedStorage + 560) = 0;
  }
  v33 = *(const void **)(DerivedStorage + 568);
  if (v33)
  {
    CFRelease(v33);
    *(_QWORD *)(DerivedStorage + 568) = 0;
  }
  FigSimpleMutexDestroy();
  *(_QWORD *)(DerivedStorage + 552) = 0;
  v34 = *(const void **)(DerivedStorage + 80);
  if (v34)
  {
    CFRelease(v34);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v35 = *(_DWORD *)(DerivedStorage + 56);
  if (v35 != -1)
  {
    notify_cancel(v35);
    *(_DWORD *)(DerivedStorage + 56) = -1;
  }
  v36 = *(NSObject **)(DerivedStorage + 120);
  if (v36)
  {
    dispatch_release(v36);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
  v37 = *(NSObject **)(DerivedStorage + 72);
  if (v37)
  {
    dispatch_release(v37);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  v38 = *(const void **)(DerivedStorage + 912);
  if (v38)
  {
    CFRelease(v38);
    *(_QWORD *)(DerivedStorage + 912) = 0;
  }
  v39 = *(const void **)(DerivedStorage + 640);
  if (v39)
  {
    CFRelease(v39);
    *(_QWORD *)(DerivedStorage + 640) = 0;
  }
  v40 = *(const void **)(DerivedStorage + 600);
  if (v40)
  {
    CFRelease(v40);
    *(_QWORD *)(DerivedStorage + 600) = 0;
  }
  v41 = *(const void **)(DerivedStorage + 608);
  if (v41)
  {
    CFRelease(v41);
    *(_QWORD *)(DerivedStorage + 608) = 0;
  }
  v42 = *(const void **)(DerivedStorage + 584);
  if (v42)
  {
    CFRelease(v42);
    *(_QWORD *)(DerivedStorage + 584) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 888))
  {
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 880), (void *)(DerivedStorage + 576), (dispatch_function_t)realTimeAudioEngine_tas_hosesInvalidateAllMessages);
    v43 = *(const void **)(DerivedStorage + 888);
    if (v43)
    {
      CFRelease(v43);
      *(_QWORD *)(DerivedStorage + 888) = 0;
    }
  }
  v44 = *(const void **)(DerivedStorage + 896);
  if (v44)
  {
    CFRelease(v44);
    *(_QWORD *)(DerivedStorage + 896) = 0;
  }
  v45 = *(const void **)(DerivedStorage + 904);
  if (v45)
  {
    CFRelease(v45);
    *(_QWORD *)(DerivedStorage + 904) = 0;
  }
  v46 = *(const void **)(DerivedStorage + 856);
  if (v46)
  {
    CFRelease(v46);
    *(_QWORD *)(DerivedStorage + 856) = 0;
  }
  v47 = *(const void **)(DerivedStorage + 712);
  if (v47)
  {
    CFRelease(v47);
    *(_QWORD *)(DerivedStorage + 712) = 0;
  }
  v48 = *(NSObject **)(DerivedStorage + 880);
  if (v48)
  {
    dispatch_release(v48);
    *(_QWORD *)(DerivedStorage + 880) = 0;
  }
  v49 = *(NSObject **)(DerivedStorage + 680);
  if (v49)
  {
    dispatch_release(v49);
    *(_QWORD *)(DerivedStorage + 680) = 0;
  }
  FigSimpleMutexDestroy();
  if (gLogCategory_APAudioEngineRealTime <= 50
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v4)
    CFRelease(v4);
}

__CFString *realTimeAudioEngine_CopyDebugDescription()
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APAudioEngineRealTime>"));
  return Mutable;
}

uint64_t realTimeAudioEngine_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineRealTime <= 30
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2 && a4)
  {
    v6 = APSDispatchSyncTask();
    if ((_DWORD)v6)
      APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    return 4294951815;
  }
  return v6;
}

uint64_t realTimeAudioEngine_SetProperty(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  const void *v9;
  const void *v10;
  int32_t v11;
  CMTimeValue v12;
  uint64_t v13;
  CMTime v15;
  CMTime v16;
  CMTime time;
  CMTime v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  const __CFDictionary *v22;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v20 = a1;
  v21 = a2;
  v22 = a3;
  if (gLogCategory_APAudioEngineRealTime <= 30
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a2)
    goto LABEL_16;
  if (FigCFEqual())
  {
    CMTimeMakeFromDictionary(&v18, a3);
    value = v18.value;
    flags = v18.flags;
    timescale = v18.timescale;
    if ((v18.flags & 0x1D) == 1)
    {
      epoch = v18.epoch;
      v9 = *(const void **)(DerivedStorage + 272);
      v10 = *(const void **)(DerivedStorage + 280);
      time.value = value;
      time.timescale = timescale;
      time.flags = v18.flags;
      time.epoch = v18.epoch;
      CMSyncConvertTime(&v18, &time, v9, v10);
      v19 = *(_OWORD *)&v18.timescale;
      v11 = (int)*(double *)(DerivedStorage + 160);
      time = v18;
      CMTimeConvertScale(&v18, &time, v11, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      v12 = v18.value;
      v19 = *(_OWORD *)&v18.timescale;
      if (gLogCategory_APAudioEngineRealTime <= 50
        && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
      {
        v18.value = value;
        v18.timescale = timescale;
        v18.flags = flags;
        v18.epoch = epoch;
        CMTimeGetSeconds(&v18);
        CMTimebaseGetTime(&v16, *(CMTimebaseRef *)(DerivedStorage + 272));
        CMTimeGetSeconds(&v16);
        v18.value = v12;
        *(_OWORD *)&v18.timescale = v19;
        CMTimeGetSeconds(&v18);
        CMTimebaseGetTime(&v15, *(CMTimebaseRef *)(DerivedStorage + 280));
        CMTimeGetSeconds(&v15);
        LogPrintF();
      }
      v13 = 0;
      *(_QWORD *)(DerivedStorage + 840) = v12;
      return v13;
    }
LABEL_16:
    APSLogErrorAt();
    return 4294951815;
  }
  v13 = APSDispatchSyncTask();
  if ((_DWORD)v13)
    APSLogErrorAt();
  return v13;
}

uint64_t realTimeAudioEngine_removeStreamNotificationListeners(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      return FigNotificationCenterRemoveWeakListener();
    }
  }
  return result;
}

uint64_t realTimeAudioEngine_PerformanceReportNotificationListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    result = *(_QWORD *)(DerivedStorage + 112);
    if (result)
    {
      result = APSDynamicLatencyManagerAddPerformanceReport();
      if ((_DWORD)result)
        return APSLogErrorAt();
    }
  }
  else
  {
    result = APSLogErrorAt();
    if (gLogCategory_APAudioEngineRealTime <= 90)
    {
      if (gLogCategory_APAudioEngineRealTime != -1)
        return LogPrintF();
      result = _LogCategory_Initialize();
      if ((_DWORD)result)
        return LogPrintF();
    }
  }
  return result;
}

void realTimeAudioEngine_GlitchReportNotificationListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t Int64;
  int IntWithDefault;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, const __CFString *, const __CFDictionary *);
  uint64_t v15;
  void (*v16)(uint64_t, const __CFString *, const __CFDictionary *);
  unsigned __int16 Int64Ranged;
  CFStringRef v18;
  const void *v19;
  uint64_t CMBaseObject;
  uint64_t (*v21)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, const __CFString *, const __CFDictionary *);
  uint64_t v26;
  CFTypeRef cf;
  int v28;

  CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    v28 = 0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v8 = mach_absolute_time();
    cf = 0;
    CFStringGetTypeID();
    CFDictionaryGetTypedValue();
    if (!FigCFEqual())
    {
LABEL_52:
      v19 = 0;
      v18 = 0;
      goto LABEL_53;
    }
    Int64 = CFDictionaryGetInt64();
    if (FigCFEqual())
    {
      if (Int64)
      {
        if (gLogCategory_APAudioEngineRealTime <= 50
          && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        realTimeAudioEngine_updateDynamicLatencyIfNeeded(a2, 1);
        IntWithDefault = APSSettingsGetIntWithDefault();
        v11 = APSSettingsGetIntWithDefault();
        v12 = atomic_load(&realTimeAudioEngine_maybeTriggerTTRForLowLatencyAudioGlitch_sNextSevereTTRTicks);
        if (!IntWithDefault && v12 > v8)
        {
          if (gLogCategory_APAudioEngineRealTime > 50
            || gLogCategory_APAudioEngineRealTime == -1 && !_LogCategory_Initialize())
          {
            goto LABEL_52;
          }
          UpTicksToSeconds();
          goto LABEL_17;
        }
        if (CFDictionaryContainsKey(a5, (const void *)*MEMORY[0x1E0CF7448]) && !CFDictionaryGetInt64())
        {
          if (gLogCategory_APAudioEngineRealTime <= 50
            && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v24 = *(_QWORD *)(DerivedStorage + 216);
          v25 = *(void (**)(uint64_t, const __CFString *, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 40);
          if (v25)
            v25(v24, CFSTR("EnableReceiverCoreCapture"), a5);
          goto LABEL_52;
        }
        v13 = *(_QWORD *)(DerivedStorage + 216);
        v14 = *(void (**)(uint64_t, const __CFString *, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 40);
        if (v14)
          v14(v13, CFSTR("TriggerReceiverCoreCapture"), a5);
        v15 = *(_QWORD *)(DerivedStorage + 216);
        v16 = *(void (**)(uint64_t, const __CFString *, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 40);
        if (v16)
          v16(v15, CFSTR("TriggerSenderCoreCapture"), a5);
        Int64Ranged = CFDictionaryGetInt64Ranged();
        v26 = *MEMORY[0x1E0C9AE00];
        v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("TTR: Low Latency Audio %s RTPSeqNum=%u"), "SEVERE Glitches", Int64Ranged);
        if (!v18)
        {
          APSLogErrorAt();
          v19 = 0;
          v28 = -16761;
          goto LABEL_53;
        }
        CFDictionaryGetInt64Ranged();
        CFStringGetTypeID();
        CFDictionaryGetTypedValue();
        v19 = (const void *)CFStringCreateF();
        if (*(_QWORD *)(DerivedStorage + 216))
        {
          CMBaseObject = FigEndpointStreamGetCMBaseObject();
          v21 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
          if (v21)
          {
            v28 = v21(CMBaseObject, CFSTR("EndpointIDs"), v26, &cf);
            if (!v28)
              goto LABEL_28;
          }
          else
          {
            v28 = -12782;
          }
          APSLogErrorAt();
LABEL_53:
          if (cf)
            CFRelease(cf);
          if (v19)
            CFRelease(v19);
          if (v18)
            CFRelease(v18);
          return;
        }
LABEL_28:
        v22 = v8 + UpTicksPerSecond() * v11;
        while (1)
        {
          v23 = __ldaxr(&realTimeAudioEngine_maybeTriggerTTRForLowLatencyAudioGlitch_sNextSevereTTRTicks);
          if (v23 != v12)
            break;
          if (!__stlxr(v22, &realTimeAudioEngine_maybeTriggerTTRForLowLatencyAudioGlitch_sNextSevereTTRTicks))
          {
            if (!IntWithDefault)
            {
              if (gLogCategory_APAudioEngineRealTime <= 50
                && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              APSTapToRadarInvoke();
            }
            goto LABEL_53;
          }
        }
        __clrex();
        if (gLogCategory_APAudioEngineRealTime <= 50
          && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_53;
      }
      if (gLogCategory_APAudioEngineRealTime > 50
        || gLogCategory_APAudioEngineRealTime == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_52;
      }
    }
    else if (gLogCategory_APAudioEngineRealTime > 50
           || gLogCategory_APAudioEngineRealTime == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_52;
    }
LABEL_17:
    LogPrintF();
    goto LABEL_52;
  }
  APSLogErrorAt();
  if (gLogCategory_APAudioEngineRealTime <= 90
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

uint64_t realTimeAudioEngine_updateDynamicLatencyIfNeeded(uint64_t a1, int a2)
{
  uint64_t result;

  result = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 112);
  if (result)
  {
    if (a2)
    {
      result = APSDynamicLatencyManagerReset();
      if ((_DWORD)result)
        return APSLogErrorAt();
    }
    else
    {
      result = APSDynamicLatencyManagerUpdate();
      if ((_DWORD)result)
        return APSLogErrorAt();
    }
  }
  return result;
}

uint64_t realTimeAudioEngine_tas_hosesInvalidateAllMessages(uint64_t a1)
{
  uint64_t result;

  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 312));
  do
    result = APSAtomicMessageQueueReadMessage();
  while ((_DWORD)result);
  return result;
}

uint64_t realTimeAudioEngine_copyPropertyDispatch(_QWORD *a1)
{
  const void *v1;
  const __CFAllocator *v2;
  _QWORD *v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t SInt32;
  CFDictionaryRef v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  double v11;
  CFDictionaryRef v12;
  CFDictionaryRef v13;
  CMTime v14;
  CMTime rhs;
  CMTime v16;
  CMTime time;

  v1 = (const void *)a1[1];
  v2 = (const __CFAllocator *)a1[2];
  v3 = (_QWORD *)a1[3];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!v1 || !v3)
  {
    APSLogErrorAt();
    return 4294951815;
  }
  v5 = DerivedStorage;
  if (CFEqual(v1, CFSTR("audioLatencyMs")))
  {
    SInt32 = FigCFNumberCreateSInt32();
    *v3 = SInt32;
    if (!SInt32)
      goto LABEL_17;
    return 0;
  }
  if (!CFEqual(v1, CFSTR("outputLatency")))
  {
    if (!CFEqual(v1, CFSTR("currentRTPTime")))
      return 4294954509;
    v9 = CMBaseObjectGetDerivedStorage();
    time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    if (!*(_BYTE *)v9)
    {
      v10 = v9;
      v11 = *(double *)(v9 + 160);
      APSRealTimeWritableRead();
      if (time.value)
      {
        CMTimeMake(&rhs, (uint64_t)(float)(*(float *)(v10 + 132) * (float)(int)v11), (int)v11);
        v14 = time;
        CMTimeSubtract(&v16, &v14, &rhs);
        time = v16;
      }
    }
    v16 = time;
    v12 = CMTimeCopyAsDictionary(&v16, v2);
    if (v12)
    {
      v13 = v12;
      result = 0;
      *v3 = v13;
      return result;
    }
    goto LABEL_17;
  }
  CMTimeMake(&time, (uint64_t)(float)((float)(*(float *)(v5 + 132) + *(float *)(v5 + 144)) * 1000.0), 1000);
  v7 = CMTimeCopyAsDictionary(&time, v2);
  *v3 = v7;
  if (v7)
    return 0;
LABEL_17:
  APSLogErrorAt();
  return 4294951816;
}

uint64_t realTimeAudioEngine_setPropertyDispatchSync()
{
  CMBaseObjectGetDerivedStorage();
  APSLogErrorAt();
  return 4294954509;
}

__CFString *realTimeAudioEngine_audioHoseProtocolCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("APAudioEngineRealTime <APSEndpointStreamAudioHoseRegistrarProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t realTimeAudioEngine_audioHoseRegistrarRegisterHose(const void *a1, const void *a2, const void *a3, _QWORD *a4)
{
  uint64_t result;

  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (a1)
      CFRetain(a1);
    CFRetain(a2);
    if (a3)
      CFRetain(a3);
    APSDispatchAsyncFHelper();
    result = 0;
    *a4 = &realTimeAudioEngine_audioHoseRegistrarRegisterHose_callbacks;
  }
  else
  {
    APSLogErrorAt();
    return 4294951815;
  }
  return result;
}

uint64_t realTimeAudioEngine_audioHoseRegistrarDeregisterHose(const void *a1, const void *a2, const void *a3)
{
  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (a1)
      CFRetain(a1);
    CFRetain(a2);
    if (a3)
      CFRetain(a3);
    APSDispatchAsyncFHelper();
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294951815;
  }
}

uint64_t realTimeAudioEngine_CopyMessageAtSequenceNumber(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  const void *v7;
  _QWORD *v8;
  const void *MessageAtSequenceNumber;
  const void *v10;
  unsigned int v12;

  v12 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    APSLogErrorAt();
    return 4294951815;
  }
  v6 = DerivedStorage;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 552));
  v7 = *(const void **)(v6 + 560);
  if (!v7)
  {
    MEMORY[0x1CAA400E4](*(_QWORD *)(v6 + 552));
    return 0;
  }
  v8 = CFRetain(v7);
  MEMORY[0x1CAA400E4](*(_QWORD *)(v6 + 552));
  if (!v8)
    return 0;
  MessageAtSequenceNumber = (const void *)APMessageRingGetMessageAtSequenceNumber(v8, a2, 0, &v12);
  v10 = MessageAtSequenceNumber;
  if (MessageAtSequenceNumber)
    CFRetain(MessageAtSequenceNumber);
  *a3 = v10;
  CFRelease(v8);
  return v12;
}

uint64_t realTimeAudioEngine_TriggerTimeAnnounce(const void *a1)
{
  NSObject *v2;
  void *v3;

  v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 120);
  if (a1)
    v3 = (void *)CFRetain(a1);
  else
    v3 = 0;
  dispatch_async_f(v2, v3, (dispatch_function_t)realTimeAudioEngine_triggerTimeAnnounceInternal);
  return 0;
}

void realTimeAudioEngine_audioHoseRegistrarRegisterHoseDispatchInternal(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  void (*v4)(const void *, _QWORD, _QWORD);
  unsigned int Count;
  const void *v6;
  const void *v7;

  v2 = *(const void **)(a1 + 8);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineRealTime <= 50
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    CFSetGetCount(*(CFSetRef *)(DerivedStorage + 152));
    LogPrintF();
  }
  if (CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 152), v2))
  {
    APSLogErrorAt();
    APSSignalErrorAt();
  }
  else
  {
    if (APSGetFBOPropertyInt64())
      APSSettingsGetIntWithDefault();
    if (APSDispatchSyncTask())
    {
      APSLogErrorAt();
      APSLogErrorAt();
    }
    else
    {
      CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 152), v2);
      realTimeAudioEngine_updateArrivalToRenderTicks();
      realTimeAudioEngine_updateCryptor();
      *(_BYTE *)(DerivedStorage + 321) = 1;
      realTimeAudioEngine_handleTimeAnnounce();
      if (CFDictionaryGetInt64())
      {
        *(_BYTE *)(DerivedStorage + 544) = 1;
        CFSetApplyFunction(*(CFSetRef *)(DerivedStorage + 152), (CFSetApplierFunction)realTimeAudioEngine_setEchoCancellationIsEnabledToHose, (void *)(DerivedStorage + 544));
      }
      if (*(_BYTE *)(DerivedStorage + 544))
      {
        v4 = *(void (**)(const void *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v4)
          v4(v2, *MEMORY[0x1E0CF7360], *MEMORY[0x1E0C9AE50]);
      }
      if (gLogCategory_APAudioEngineRealTime <= 50
        && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
      {
        CFSetGetCount(*(CFSetRef *)(DerivedStorage + 152));
        LogPrintF();
      }
      Count = CFSetGetCount(*(CFSetRef *)(DerivedStorage + 152));
      *(_DWORD *)(DerivedStorage + 408) = Count;
      if (*(_DWORD *)(DerivedStorage + 412) < Count)
        *(_DWORD *)(DerivedStorage + 412) = Count;
    }
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v6 = *(const void **)(a1 + 8);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 16);
  if (v7)
    CFRelease(v7);
}

void realTimeAudioEngine_triggerTimeAnnounceInternal(const void *a1)
{
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 321) = 1;
  realTimeAudioEngine_handleTimeAnnounce();
  if (a1)
    CFRelease(a1);
}

uint64_t realTimeAudioEngine_handleTimeAnnounce()
{
  uint64_t DerivedStorage;
  double v1;
  OpaqueCMClock *HostTimeClock;
  CMClockRef v3;
  const void *v4;
  int v5;
  const void *v6;
  const void *v7;
  CMTimeFlags value;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, CMTimeEpoch *);
  uint64_t CMBaseObject;
  unsigned int (*v13)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  const __CFAllocator *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  CMTime rhs;
  CMTime time2;
  __int128 context;
  __int128 v24;
  uint64_t v25;
  CFTypeRef cf;
  CMBlockBufferRef blockBufferOut;
  CMTimeEpoch v28;
  uint64_t v29;
  uint64_t v30;
  CMTime v31;
  CMTime time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v31 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v28 = 0;
  v29 = 0;
  v30 = 0;
  cf = 0;
  blockBufferOut = 0;
  v25 = 0;
  context = 0u;
  v24 = 0u;
  kdebug_trace();
  if (!*(_BYTE *)DerivedStorage)
  {
    v1 = *(double *)(DerivedStorage + 160);
    HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&v31, HostTimeClock);
    time1 = v31;
    time2 = *(CMTime *)(DerivedStorage + 296);
    if (CMTimeCompare(&time1, &time2) > 0 || *(_BYTE *)(DerivedStorage + 320))
    {
      CMTimeMake(&rhs, 1, 1);
      time2 = v31;
      CMTimeAdd(&time1, &time2, &rhs);
      *(CMTime *)(DerivedStorage + 296) = time1;
    }
    else if (!*(_BYTE *)(DerivedStorage + 321))
    {
      goto LABEL_34;
    }
    v3 = CMClockGetHostTimeClock();
    v4 = *(const void **)(DerivedStorage + 288);
    time2 = v31;
    CMSyncConvertTime(&time1, &time2, v3, v4);
    time2 = time1;
    CMTimeConvertScale(&time1, &time2, (int)v1, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    if ((time1.flags & 0x1D) == 1
      && (v5 = time1.value,
          v7 = *(const void **)(DerivedStorage + 280),
          v6 = *(const void **)(DerivedStorage + 288),
          time2 = time1,
          CMSyncConvertTime(&time1, &time2, v6, v7),
          time2 = time1,
          CMTimeConvertScale(&time1, &time2, (int)v1, kCMTimeRoundingMethod_RoundHalfAwayFromZero),
          (time1.flags & 0x1D) == 1))
    {
      value = time1.value;
      v9 = *(_QWORD *)(DerivedStorage + 64);
      time1 = v31;
      v10 = CMClockConvertHostTimeToSystemUnits(&time1);
      v11 = *(unsigned int (**)(uint64_t, uint64_t, CMTimeEpoch *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 16);
      if (!v11 || v11(v9, v10, &v28))
      {
        APSLogErrorAt();
        if (gLogCategory_APAudioEngineRealTime <= 90
          && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      else
      {
        CMBaseObject = APSNetworkClockGetCMBaseObject();
        v13 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
        if (!v13)
          goto LABEL_21;
        v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        if (v13(CMBaseObject, *MEMORY[0x1E0CF74E0], *MEMORY[0x1E0C9AE00], &cf))
          goto LABEL_21;
        v15 = FigCFEqual();
        v16 = CMBaseObjectGetDerivedStorage();
        if (v15)
        {
          v17 = *(unsigned __int8 *)(v16 + 320);
          if (CMBlockBufferCreateWithMemoryBlock(v14, 0, 0x18uLL, v14, 0, 0, 0x18uLL, 1u, &blockBufferOut)
            || (v17 ? (v18 = 1951421520) : (v18 = 1953526896),
                *(CMTimeValue *)((char *)&time1.value + 4) = 1000000000 * (int)v30
                                                           + ((1000000000 * (unint64_t)HIDWORD(v29)) >> 32),
                LODWORD(time1.value) = v5,
                time1.flags = value,
                time1.epoch = v28,
                APSTransportMessageSetPTPTimeAnnounce()))
          {
LABEL_42:
            APSLogErrorAt();
LABEL_21:
            APSLogErrorAt();
            goto LABEL_34;
          }
        }
        else
        {
          v19 = *(unsigned __int8 *)(v16 + 320);
          if (CMBlockBufferCreateWithMemoryBlock(v14, 0, 0x10uLL, v14, 0, 0, 0x10uLL, 1u, &blockBufferOut))
            goto LABEL_42;
          v18 = v19 ? 1950436942 : 1952542318;
          LODWORD(time1.value) = v5;
          HIDWORD(time1.value) = v30 - 2085978496;
          time1.timescale = HIDWORD(v29);
          time1.flags = value;
          if (APSTransportMessageSetTimeAnnounce())
            goto LABEL_42;
        }
        APSRealTimeWritableRead();
        BYTE4(v25) = *(_BYTE *)(DerivedStorage + 320);
        *((_QWORD *)&v24 + 1) = blockBufferOut;
        LODWORD(v25) = v18;
        CFSetApplyFunction(*(CFSetRef *)(DerivedStorage + 152), (CFSetApplierFunction)realTimeAudioEngine_timeAnnounceHoseApplier, &context);
        if (gLogCategory_APAudioEngineRealTime <= 50
          && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
        {
          time1 = v31;
          CMTimeGetSeconds(&time1);
          LogPrintF();
        }
        *(_WORD *)(DerivedStorage + 320) = 0;
      }
    }
    else
    {
      APSLogErrorAt();
      APSSignalErrorAt();
    }
  }
LABEL_34:
  if (cf)
    CFRelease(cf);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return kdebug_trace();
}

uint64_t realTimeAudioEngine_timeAnnounceHoseApplier(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  void (*v6)(uint64_t, _QWORD, _QWORD);
  void (*v7)(uint64_t, _QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);

  v4 = *(_DWORD *)(a2 + 12);
  v5 = (_QWORD *)MEMORY[0x1E0CF7380];
  if (*(_BYTE *)(a2 + 36))
  {
    v6 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v6)
      v6(a1, *v5, *MEMORY[0x1E0C9AE40]);
  }
  if ((v4 & 1) != 0)
  {
    v7 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v7)
      v7(a1, *v5, *MEMORY[0x1E0C9AE50]);
  }
  v8 = *(unsigned int *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 24);
  APSEndpointStreamAudioHoseProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v11 = *(_QWORD *)(result + 16);
    if (v11)
    {
      v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
      if (v12)
        return v12(a1, v8, v9);
    }
  }
  return result;
}

void realTimeAudioEngine_updateArrivalToRenderTicks()
{
  uint64_t DerivedStorage;
  const __CFSet *v1;
  uint64_t v2;
  uint64_t context;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const __CFSet **)(DerivedStorage + 152);
  if (v1 && CFSetGetCount(v1) >= 1)
  {
    context = -1;
    CFSetApplyFunction(*(CFSetRef *)(DerivedStorage + 152), (CFSetApplierFunction)realTimeAudioEngine_updateArrivalToRenderTicksApplier, &context);
    v2 = context;
  }
  else
  {
    v2 = 0;
  }
  *(_QWORD *)(DerivedStorage + 648) = v2;
}

void realTimeAudioEngine_updateCryptor()
{
  uint64_t DerivedStorage;
  _QWORD *v1;
  CFTypeRef v2;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v5;
  CFTypeRef v6;
  const void *v7;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!*(_BYTE *)(DerivedStorage + 32))
  {
    v1 = (_QWORD *)DerivedStorage;
    v2 = *(CFTypeRef *)(DerivedStorage + 216);
    if (v2)
    {
      CMBaseObject = FigEndpointStreamGetCMBaseObject();
      v4 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
      if (v4)
      {
        v4(CMBaseObject, CFSTR("Cryptor"), *MEMORY[0x1E0C9AE00], &cf);
        v2 = cf;
      }
      else
      {
        v2 = 0;
      }
    }
    v5 = (CFTypeRef)v1[29];
    if (v5 != v2)
    {
      if (gLogCategory_APAudioEngineRealTime <= 50)
      {
        if (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize())
          LogPrintF();
        v2 = cf;
        v5 = (CFTypeRef)v1[29];
      }
      v1[29] = v2;
      if (v2)
        CFRetain(v2);
      if (v5)
        CFRelease(v5);
      v6 = cf;
      MEMORY[0x1CAA400CC](v1[83]);
      v7 = (const void *)v1[97];
      v1[97] = v6;
      if (v6)
        CFRetain(v6);
      if (v7)
        CFRelease(v7);
      MEMORY[0x1CAA400E4](v1[83]);
      v2 = cf;
    }
    if (v2)
      CFRelease(v2);
  }
}

uint64_t realTimeAudioEngine_setEchoCancellationIsEnabledToHose(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  uint64_t result;
  uint64_t (*v5)(uint64_t, _QWORD, uint64_t);
  uint64_t v6;

  v3 = *a2;
  result = CMBaseObjectGetVTable();
  v5 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v5)
  {
    if (v3)
      v6 = *MEMORY[0x1E0C9AE50];
    else
      v6 = *MEMORY[0x1E0C9AE40];
    return v5(a1, *MEMORY[0x1E0CF7360], v6);
  }
  return result;
}

uint64_t realTimeAudioEngine_tas_addHoseDispatchInternal(uint64_t *a1)
{
  const void *v1;
  uint64_t v2;
  int v3;
  const void **v4;
  CFDictionaryRef Copy;
  CFDictionaryRef v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t ProtocolVTable;
  uint64_t v11;
  void (*v12)(const void *, _QWORD, _OWORD *, _QWORD, _QWORD);
  _BYTE v14[28];
  _OWORD v15[2];

  v2 = *a1;
  v1 = (const void *)a1[1];
  v3 = *((unsigned __int8 *)a1 + 16);
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(*a1 + 336), v1))
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  else
  {
    v4 = (const void **)MEMORY[0x1E0C9AE50];
    if (!v3)
      v4 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v2 + 336), v1, *v4);
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFDictionaryRef *)(v2 + 336));
    if (Copy)
    {
      v6 = Copy;
      APSCFRealTimeReadableSetValue();
      v7 = atomic_load((unint64_t *)(v2 + 288));
      if (*(_BYTE *)(v2 + 16))
        v8 = (unsigned __int16)v7 == 0;
      else
        v8 = 1;
      if (!v8)
      {
        v9 = v7 >> 16;
        if (gLogCategory_APAudioEngineRealTime <= 50
          && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        APSAudioTransportTimeMakeWithRTPTime();
        APSEndpointStreamAudioHoseProtocolGetProtocolID();
        ProtocolVTable = CMBaseObjectGetProtocolVTable();
        if (ProtocolVTable)
        {
          v11 = *(_QWORD *)(ProtocolVTable + 16);
          if (v11)
          {
            v12 = *(void (**)(const void *, _QWORD, _OWORD *, _QWORD, _QWORD))(v11 + 24);
            if (v12)
            {
              v15[0] = *(_OWORD *)v14;
              *(_OWORD *)((char *)v15 + 12) = *(_OWORD *)&v14[12];
              v12(v1, (unsigned __int16)v9, v15, 0, 0);
            }
          }
        }
      }
      CFRelease(v6);
    }
    else
    {
      APSLogErrorAt();
    }
    return 0;
  }
}

unint64_t realTimeAudioEngine_updateArrivalToRenderTicksApplier(uint64_t a1, unint64_t *a2)
{
  unint64_t result;
  unint64_t v4;

  result = APSGetFBOPropertyInt64();
  v4 = *a2;
  if (*a2 >= result)
    v4 = result;
  *a2 = v4;
  return result;
}

void realTimeAudioEngine_audioHoseRegistrarDeregisterHoseDispatchInternal(uint64_t a1)
{
  const void *v2;
  const void *v3;

  realTimeAudioEngine_audioHoseRegistrarDeregisterHoseInternal(*(_QWORD *)a1, *(const void **)(a1 + 8));
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 16);
  if (v3)
    CFRelease(v3);
}

__n128 realTimeAudioEngine_audioHoseRegistrarDeregisterHoseInternal(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  void (*v4)(const void *, _QWORD, _QWORD);
  __n128 result;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineRealTime <= 50
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    CFSetGetCount(*(CFSetRef *)(DerivedStorage + 152));
    LogPrintF();
  }
  if (CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 152), a2))
  {
    if (APSDispatchSyncTask())
    {
      APSLogErrorAt();
      APSLogErrorAt();
    }
    else
    {
      CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 152), a2);
      realTimeAudioEngine_updateArrivalToRenderTicks();
      if (CFDictionaryGetInt64())
      {
        *(_BYTE *)(DerivedStorage + 544) = 0;
        CFSetApplyFunction(*(CFSetRef *)(DerivedStorage + 152), (CFSetApplierFunction)realTimeAudioEngine_setEchoCancellationIsEnabledToHose, (void *)(DerivedStorage + 544));
      }
      v4 = *(void (**)(const void *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v4)
        v4(a2, *MEMORY[0x1E0CF7380], *MEMORY[0x1E0C9AE40]);
      if (gLogCategory_APAudioEngineRealTime <= 50
        && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
      {
        CFSetGetCount(*(CFSetRef *)(DerivedStorage + 152));
        LogPrintF();
      }
      *(_DWORD *)(DerivedStorage + 408) = CFSetGetCount(*(CFSetRef *)(DerivedStorage + 152));
    }
  }
  else if (gLogCategory_APAudioEngineRealTime <= 50
         && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!CFSetGetCount(*(CFSetRef *)(DerivedStorage + 152)))
  {
    v6 = MEMORY[0x1E0CA2E68];
    result = *(__n128 *)MEMORY[0x1E0CA2E68];
    *(_OWORD *)(DerivedStorage + 296) = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(DerivedStorage + 312) = *(_QWORD *)(v6 + 16);
    *(_BYTE *)(DerivedStorage + 320) = 1;
  }
  return result;
}

uint64_t realTimeAudioEngine_tas_removeHoseDispatchInternal(_QWORD *a1)
{
  const void *v1;
  uint64_t v2;
  CFDictionaryRef Copy;
  CFDictionaryRef v4;

  v2 = *a1;
  v1 = (const void *)a1[1];
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(*a1 + 336), v1))
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v2 + 336), v1);
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFDictionaryRef *)(v2 + 336));
    if (Copy)
    {
      v4 = Copy;
      APSCFRealTimeReadableSetValue();
      CFRelease(v4);
    }
    else
    {
      APSLogErrorAt();
    }
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
}

void realTimeAudioEngine_Resume(const void *a1, const void *a2, void (*a3)(const void *, uint64_t, uint64_t), uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineRealTime <= 50
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v7 = malloc_type_malloc(0x30uLL, 0x10E004091CD38EAuLL);
  if (!v7)
  {
    APSLogErrorAt();
    v12 = 4294951816;
LABEL_20:
    if (a3)
      a3(a1, v12, a4);
    return;
  }
  v8 = v7;
  if (a1)
    v9 = CFRetain(a1);
  else
    v9 = 0;
  *v8 = v9;
  if (a2)
    v10 = CFRetain(a2);
  else
    v10 = 0;
  v8[1] = v10;
  v8[2] = a3;
  v8[4] = a4;
  *((_DWORD *)v8 + 10) = 0;
  v11 = APSDispatchSectionEnter();
  if ((_DWORD)v11)
  {
    v12 = v11;
    APSLogErrorAt();
    if (*v8)
      CFRelease((CFTypeRef)*v8);
    v13 = (const void *)v8[1];
    if (v13)
      CFRelease(v13);
    free(v8);
    goto LABEL_20;
  }
}

void realTimeAudioEngine_Suspend(const void *a1, const void *a2, void (*a3)(const void *, uint64_t, uint64_t), uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineRealTime <= 50
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v7 = malloc_type_malloc(0x30uLL, 0x10E004091CD38EAuLL);
  if (!v7)
  {
    APSLogErrorAt();
    v12 = 4294951816;
LABEL_20:
    if (a3)
      a3(a1, v12, a4);
    return;
  }
  v8 = v7;
  if (a1)
    v9 = CFRetain(a1);
  else
    v9 = 0;
  *v8 = v9;
  if (a2)
    v10 = CFRetain(a2);
  else
    v10 = 0;
  v8[1] = v10;
  v8[3] = a3;
  v8[4] = a4;
  *((_DWORD *)v8 + 10) = 0;
  v11 = APSDispatchSectionEnter();
  if ((_DWORD)v11)
  {
    v12 = v11;
    APSLogErrorAt();
    if (*v8)
      CFRelease((CFTypeRef)*v8);
    v13 = (const void *)v8[1];
    if (v13)
      CFRelease(v13);
    free(v8);
    goto LABEL_20;
  }
}

uint64_t realTimeAudioEngine_SetEndpointStream(const void *a1, const void *a2, uint64_t (*a3)(const void *, uint64_t, uint64_t), uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  uint64_t result;
  uint64_t v12;
  const void *v13;

  CMBaseObjectGetDerivedStorage();
  v7 = malloc_type_malloc(0x28uLL, 0x10A0040DE786E1EuLL);
  if (!v7)
  {
    APSLogErrorAt();
    v12 = 4294951816;
LABEL_20:
    result = (uint64_t)a3;
    if (a3)
      return a3(a1, v12, a4);
    return result;
  }
  v8 = v7;
  if (a1)
    v9 = CFRetain(a1);
  else
    v9 = 0;
  *v8 = v9;
  if (a2)
    v10 = CFRetain(a2);
  else
    v10 = 0;
  v8[1] = v10;
  v8[2] = a3;
  v8[3] = a4;
  *((_DWORD *)v8 + 8) = 0;
  if (gLogCategory_APAudioEngineRealTime <= 50
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  result = APSDispatchSectionEnter();
  if ((_DWORD)result)
  {
    v12 = result;
    APSLogErrorAt();
    if (*v8)
      CFRelease((CFTypeRef)*v8);
    v13 = (const void *)v8[1];
    if (v13)
      CFRelease(v13);
    free(v8);
    goto LABEL_20;
  }
  return result;
}

uint64_t realTimeAudioEngine_Flush()
{
  _BYTE *DerivedStorage;
  _BYTE *v1;
  const void *Int64;
  char v3;
  uint64_t v4;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return 0;
  v1 = DerivedStorage;
  Int64 = (const void *)CFDictionaryGetInt64();
  FigCFDictionaryGetCMTimeIfPresent();
  if (gLogCategory_APAudioEngineRealTime <= 50
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (Int64 && (Int64 = (const void *)*((_QWORD *)v1 + 41)) != 0)
  {
    CFRetain(Int64);
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  if (APSAtomicMessageQueueSendMessage())
    return 0;
  APSLogErrorAt();
  if ((v3 & 1) == 0)
    CFRelease(Int64);
  v4 = 4294951816;
  APSLogErrorAt();
  return v4;
}

void realTimeAudioEngine_resumeInternal(uint64_t a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v3;
  const __CFDictionary *v4;
  const void *Value;
  const __CFData *v6;
  const __CFData *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  int v11;
  int v12;
  CFAllocatorRef *v13;
  uint64_t v14;
  const void *Null;
  CFDataRef v16;
  int v17;
  const void *v18;
  const void *v19;
  const __CFAllocator *v20;
  int v21;
  int v22;
  int AudioDataPointer;
  uint64_t CMBaseObject;
  uint64_t (*v25)(uint64_t, _QWORD, const __CFAllocator *, _BYTE *);
  int v26;
  uint64_t v27;
  __int16 v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  __CFDictionary *Mutable;
  __CFDictionary *v34;
  uint64_t v35;
  CMTime *v36;
  OpaqueCMClock *HostTimeClock;
  CFTypeRef v38[3];
  CFTypeRef cf[2];
  CMTime v40;
  CMTime bytes;
  uint64_t (*v42)();
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  if (*DerivedStorage)
  {
    APSLogErrorAt();
    LODWORD(v8) = -15487;
    goto LABEL_85;
  }
  if (!DerivedStorage[128])
  {
    if (gLogCategory_APAudioEngineRealTime <= 50
      && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v4 = *(const __CFDictionary **)(a1 + 8);
    if (!v4
      || (Value = CFDictionaryGetValue(v4, (const void *)*MEMORY[0x1E0CC4100]),
          v6 = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), (const void *)*MEMORY[0x1E0CC4120]),
          !Value))
    {
      APSLogErrorAt();
      LODWORD(v8) = -15483;
      goto LABEL_84;
    }
    v7 = v6;
    if (gLogCategory_APAudioEngineRealTime <= 50
      && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v9 = (const void *)*((_QWORD *)v3 + 25);
    *((_QWORD *)v3 + 25) = Value;
    CFRetain(Value);
    if (v9)
      CFRelease(v9);
    v10 = (const void *)*((_QWORD *)v3 + 26);
    if (v10)
    {
      CFRelease(v10);
      *((_QWORD *)v3 + 26) = 0;
    }
    if (v7 && (unint64_t)CFDataGetLength(v7) >= 0x28)
    {
      CFDataGetBytePtr(v7);
      v11 = ASBDToAPAudioFormat();
      if (v11)
      {
        LODWORD(v8) = v11;
        goto LABEL_81;
      }
      if (gLogCategory_APAudioEngineRealTime <= 50
        && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v12 = realTimeAudioEngine_setTransportAudioFormatASBDInternal(*(_QWORD *)a1, 0);
      if (v12)
      {
        LODWORD(v8) = v12;
        goto LABEL_81;
      }
    }
    v13 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (!v3[32])
    {
      if (gLogCategory_APAudioEngineRealTime <= 50
        && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_53;
    }
    v14 = CMBaseObjectGetDerivedStorage();
    v40.value = 0;
    if (FigCFEqual() && APSSettingsGetIntWithDefault())
    {
      Null = (const void *)APSCryptorGetNull();
      v40.value = (CMTimeValue)CFRetain(Null);
      if (gLogCategory_APAudioEngineRealTime <= 50
        && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v16 = 0;
      v18 = *(const void **)(v14 + 224);
      *(_QWORD *)(v14 + 224) = 0;
      if (!v18)
        goto LABEL_44;
    }
    else
    {
      RandomBytes();
      v16 = CFDataCreate(*v13, (const UInt8 *)&bytes, 32);
      v17 = APSCryptorChaCha20Poly1305Create();
      if (v17)
      {
        LODWORD(v8) = v17;
        APSLogErrorAt();
        if (v16)
LABEL_49:
          CFRelease(v16);
LABEL_50:
        if (v40.value)
          CFRelease((CFTypeRef)v40.value);
        if ((_DWORD)v8)
          goto LABEL_81;
LABEL_53:
        v20 = *v13;
        v21 = APTransportStreamSendBackingProviderCreateWithStreamID();
        if (v21)
        {
          LODWORD(v8) = v21;
        }
        else
        {
          v22 = APTransportStreamSendBackingProviderAcquireBBuf();
          if (v22)
          {
            LODWORD(v8) = v22;
          }
          else
          {
            AudioDataPointer = APSTransportMessageGetAudioDataPointer();
            if (AudioDataPointer)
            {
              LODWORD(v8) = AudioDataPointer;
            }
            else
            {
              if (gLogCategory_APAudioEngineRealTime <= 50
                && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              if (*((_QWORD *)v3 + 33))
                goto LABEL_63;
              CMBaseObject = APSNetworkClockGetCMBaseObject();
              v25 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
              if (v25)
              {
                v26 = v25(CMBaseObject, *MEMORY[0x1E0CF74D8], v20, v3 + 264);
                if (!v26)
                {
LABEL_63:
                  v27 = CMBaseObjectGetDerivedStorage();
                  v40.value = 0;
                  cf[0] = 0;
                  v38[0] = 0;
                  v28 = arc4random();
                  if (gLogCategory_APAudioEngineRealTime <= 50
                    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
                  {
                    LogPrintF();
                  }
                  v29 = *(_DWORD *)(v27 + 40) + 1;
                  bytes.value = (CMTimeValue)CFRetain(*(CFTypeRef *)(v27 + 248));
                  *(_QWORD *)&bytes.timescale = realTimeAudioEngine_apsRTPPacketHandlerCleanUp;
                  bytes.epoch = (CMTimeEpoch)realTimeAudioEngine_createRedundantAudioDataMessageBBuf;
                  v42 = realTimeAudioEngine_relinquishMessageBacking;
                  v30 = APSRTPPacketHandlerCreate(v20, 1, v29, (uint64_t)&bytes, &v40.value);
                  if (v30)
                  {
                    LODWORD(v8) = v30;
                  }
                  else
                  {
                    if (FigCFEqual())
                      APSSettingsGetIntWithDefault();
                    v31 = APMessageRingCreate((uint64_t)v20, *(_QWORD *)(v27 + 48), v28, *(const void **)(v27 + 248), 1735550308, 0, (uint64_t *)cf);
                    if (v31)
                    {
                      LODWORD(v8) = v31;
                    }
                    else
                    {
                      v32 = APMessageRingCreate((uint64_t)v20, *(_QWORD *)(v27 + 48), v28, *(const void **)(v27 + 248), 1734700576, 0, (uint64_t *)v38);
                      if (!v32)
                        APMessageRingSetMaxPacketRedundancy((uint64_t)v38[0], *(_DWORD *)(v27 + 36));
                      LODWORD(v8) = v32;
                    }
                  }
                  APSLogErrorAt();
                  if (v40.value)
                    CFRelease((CFTypeRef)v40.value);
                  if (cf[0])
                    CFRelease(cf[0]);
                  if (v38[0])
                    CFRelease(v38[0]);
                  goto LABEL_81;
                }
                LODWORD(v8) = v26;
              }
              else
              {
                LODWORD(v8) = -12782;
              }
            }
          }
        }
LABEL_81:
        APSLogErrorAt();
        goto LABEL_84;
      }
      if (gLogCategory_APAudioEngineRealTime <= 50
        && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v18 = *(const void **)(v14 + 224);
      *(_QWORD *)(v14 + 224) = v16;
      if (v16)
        CFRetain(v16);
      if (!v18)
      {
LABEL_44:
        v8 = *(const void **)(v14 + 232);
        v19 = (const void *)v40.value;
        *(_QWORD *)(v14 + 232) = v40.value;
        if (v19)
          CFRetain(v19);
        if (v8)
        {
          CFRelease(v8);
          LODWORD(v8) = 0;
        }
        if (v16)
          goto LABEL_49;
        goto LABEL_50;
      }
    }
    CFRelease(v18);
    goto LABEL_44;
  }
  LODWORD(v8) = 0;
LABEL_84:
  if (!(_DWORD)v8)
  {
    v35 = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(v35 + 376))
    {
      v36 = (CMTime *)v35;
      HostTimeClock = CMClockGetHostTimeClock();
      CMClockGetTime(&bytes, HostTimeClock);
      LODWORD(v8) = 0;
      v36[16] = bytes;
    }
    else
    {
      LODWORD(v8) = 0;
    }
    goto LABEL_90;
  }
LABEL_85:
  realTimeAudioEngine_performSuspensionGutsInternal(*(_QWORD *)a1, 0);
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 376))
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v34 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("pointOfFailure"), CFSTR("Session failed to start"));
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      CFDictionarySetValue(v34, CFSTR("sessionType"), CFSTR("AudioRealTime"));
      APSRTCReportingAgentSendEvent();
      CFRelease(v34);
    }
  }
LABEL_90:
  *(_DWORD *)(a1 + 40) = (_DWORD)v8;
  dispatch_async_f(*((dispatch_queue_t *)v3 + 9), (void *)a1, (dispatch_function_t)realTimeAudioEngine_resumeComplete);
}

uint64_t realTimeAudioEngine_resumeSubPhase3_Internal()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  unsigned int IntWithDefault;
  unint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  int CFPreferenceNumberWithDefault;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineRealTime <= 40
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v1 = ASBDToAPAudioFormat();
  if ((_DWORD)v1)
  {
    v11 = v1;
    goto LABEL_34;
  }
  if (APSSettingsGetIntWithDefault())
  {
    IntWithDefault = APSSettingsGetIntWithDefault();
    if ((IntWithDefault & 0x80000000) != 0)
    {
      v11 = 4294895205;
      goto LABEL_34;
    }
    v3 = (4 * IntWithDefault) | 1;
    v4 = *(_QWORD *)(DerivedStorage + 232);
    if (v4)
    {
      v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v5)
        v6 = v5(v4);
      else
        v6 = 0;
      v3 += v6;
    }
    if (*(_QWORD *)(DerivedStorage + 256) < v3)
    {
      v11 = 4294895205;
LABEL_34:
      APSLogErrorAt();
      return v11;
    }
    if ((int)APSSettingsGetIntWithDefault() <= 0)
    {
      v11 = 4294895205;
      goto LABEL_34;
    }
    if (gLogCategory_APAudioEngineRealTime <= 50
      && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v8 = APSSetFBOPropertyInt64();
    if ((_DWORD)v8)
    {
      v11 = v8;
      goto LABEL_34;
    }
  }
  else
  {
    CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
    if (gLogCategory_APAudioEngineRealTime <= 50
      && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (CFPreferenceNumberWithDefault >= 1)
    {
      v9 = APSSetFBOPropertyInt64();
      if ((_DWORD)v9)
      {
        v11 = v9;
        goto LABEL_34;
      }
    }
  }
  dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 336));
  v11 = 0;
  *(_BYTE *)(DerivedStorage + 344) = 1;
  return v11;
}

uint64_t realTimeAudioEngine_tas_Resume(uint64_t a1, uint64_t a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8, const void *a9, const void *a10, const void *a11)
{
  uint64_t v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  int IntWithDefault;
  CFAllocatorRef *v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, _QWORD, uint64_t);
  dispatch_source_t v34;
  __CFArray *Mutable;
  NSObject *v36;
  const void *v37;
  void *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t CMBaseObject;
  uint64_t (*v44)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  uint64_t v45;
  CFTypeRef v47;
  unsigned int v48;

  MEMORY[0x1CAA400CC](*(_QWORD *)(a1 + 88));
  if (*(_BYTE *)(a1 + 96) || !a3 || !a5 || !a7 || !a8 || !a9 || !a10 || !a11)
  {
    APSLogErrorAt();
    v45 = 4294950525;
    goto LABEL_71;
  }
  v47 = 0;
  v19 = *(_QWORD *)(a2 + 32);
  v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 168) = v20;
  *(_QWORD *)(a1 + 288) = 0;
  v21 = *(const void **)(a1 + 192);
  *(_QWORD *)(a1 + 184) = v19;
  *(_QWORD *)(a1 + 192) = a3;
  CFRetain(a3);
  if (v21)
    CFRelease(v21);
  v22 = *(const void **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = a4;
  if (a4)
    CFRetain(a4);
  if (v22)
    CFRelease(v22);
  v23 = *(const void **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = a5;
  CFRetain(a5);
  if (v23)
    CFRelease(v23);
  v24 = *(const void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = a6;
  if (a6)
    CFRetain(a6);
  if (v24)
    CFRelease(v24);
  v25 = *(const void **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = a7;
  CFRetain(a7);
  if (v25)
    CFRelease(v25);
  v26 = *(const void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = a8;
  CFRetain(a8);
  if (v26)
    CFRelease(v26);
  v27 = *(const void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = a9;
  CFRetain(a9);
  if (v27)
    CFRelease(v27);
  v28 = *(const void **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = a10;
  CFRetain(a10);
  if (v28)
    CFRelease(v28);
  v29 = *(const void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = a11;
  CFRetain(a11);
  if (v29)
    CFRelease(v29);
  IntWithDefault = APSSettingsGetIntWithDefault();
  v31 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (IntWithDefault)
  {
    if (gLogCategory_APAudioEngineRealTime > 50
      || gLogCategory_APAudioEngineRealTime == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_43;
    }
    goto LABEL_39;
  }
  v32 = *(_QWORD *)(a1 + 192);
  v33 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (v33 && !v33(v32, realTimeAudioEngine_tas_compressionSourceWriteDataCallback, a1))
    goto LABEL_49;
  if (gLogCategory_APAudioEngineRealTime <= 50
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
LABEL_39:
    LogPrintF();
  }
LABEL_43:
  v34 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(a1 + 104));
  *(_QWORD *)(a1 + 112) = v34;
  if (!v34 || (Mutable = CFArrayCreateMutable(*v31, 1, 0), (*(_QWORD *)(a1 + 128) = Mutable) == 0))
  {
    APSLogErrorAt();
    v48 = -15480;
    goto LABEL_66;
  }
  CFArrayInsertValueAtIndex(Mutable, 0, (const void *)a1);
  v36 = *(NSObject **)(a1 + 112);
  v37 = *(const void **)(a1 + 128);
  if (v37)
    v38 = (void *)CFRetain(v37);
  else
    v38 = 0;
  dispatch_set_context(v36, v38);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 112), (dispatch_function_t)realTimeAudioEngine_tas_transcodeAndSendTimerEntry);
  dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a1 + 112), (dispatch_function_t)FigCFRelease);
  dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 112), 0, 1000000 * *(unsigned int *)(a1 + 40), 0);
  dispatch_resume(*(dispatch_object_t *)(a1 + 112));
  *(_BYTE *)(a1 + 120) = 1;
LABEL_49:
  v39 = *(_DWORD *)(a1 + 40) * *(double *)(a1 + 152) / (1000 * *(_DWORD *)(a1 + 172));
  v40 = v39 + (v39 >> 2);
  if (v40 <= 0xC)
    v40 = 12;
  *(_DWORD *)(a1 + 144) = v40;
  if (gLogCategory_APAudioEngineRealTime <= 50
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v41 = *(_QWORD *)(a1 + 192);
  v42 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v42)
  {
    v48 = -12782;
    goto LABEL_65;
  }
  v48 = v42(v41);
  if (v48)
    goto LABEL_65;
  CMBaseObject = FigEndpointAudioSourceGetCMBaseObject();
  v44 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
  if (!v44)
  {
    v48 = -12782;
    goto LABEL_65;
  }
  v48 = v44(CMBaseObject, CFSTR("AlgorithmicLatency"), *v31, &v47);
  if (v48 || (*(_DWORD *)(a1 + 272) = -(int)CFGetInt64Ranged(), v48) || (v48 = APSRealTimePTPClockCreate()) != 0)
  {
LABEL_65:
    APSLogErrorAt();
    if (!v48)
      goto LABEL_67;
LABEL_66:
    realTimeAudioEngine_tas_SuspendInternal(a1);
    goto LABEL_67;
  }
  *(_BYTE *)(a1 + 96) = 1;
LABEL_67:
  if (v47)
    CFRelease(v47);
  v45 = v48;
  if (v48)
    APSLogErrorAt();
LABEL_71:
  MEMORY[0x1CAA400E4](*(_QWORD *)(a1 + 88));
  return v45;
}

void realTimeAudioEngine_renewAudioIOAssertionDispatch(const void *a1)
{
  unsigned int v2;

  v2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 88);
  if (!v2
    || (dispatch_time(0, 1000000000 * v2), !APSAudioIOAssertionTimingControllerAssertUntilTime()))
  {
    if (!a1)
      return;
    goto LABEL_4;
  }
  APSLogErrorAt();
  if (a1)
LABEL_4:
    CFRelease(a1);
}

void realTimeAudioEngine_NotifyIsPlayingAmbientAudio(int a1)
{
  uint64_t v1;
  uint32_t v2;
  uint32_t v3;
  _QWORD block[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v1 = a1 != 0;
  if (IsAppleTV())
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __realTimeAudioEngine_NotifyIsPlayingAmbientAudio_block_invoke;
    block[3] = &unk_1E826A468;
    block[4] = &v5;
    if (realTimeAudioEngine_NotifyIsPlayingAmbientAudio_sTokenOnce != -1)
      dispatch_once(&realTimeAudioEngine_NotifyIsPlayingAmbientAudio_sTokenOnce, block);
    if (*((_DWORD *)v6 + 6))
    {
      APSLogErrorAt();
      if (gLogCategory_APAudioEngineRealTime <= 90
        && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_9;
      }
    }
    else
    {
      v2 = notify_set_state(realTimeAudioEngine_NotifyIsPlayingAmbientAudio_sToken, v1);
      *((_DWORD *)v6 + 6) = v2;
      if (v2)
      {
        APSLogErrorAt();
        if (gLogCategory_APAudioEngineRealTime <= 90
          && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
        {
          goto LABEL_9;
        }
      }
      else
      {
        v3 = notify_post("com.apple.airplay.isPlayingAmbientAudioChanged");
        *((_DWORD *)v6 + 6) = v3;
        if (!v3)
        {
          if (gLogCategory_APAudioEngineRealTime > 50
            || gLogCategory_APAudioEngineRealTime == -1 && !_LogCategory_Initialize())
          {
            goto LABEL_11;
          }
LABEL_9:
          LogPrintF();
          goto LABEL_11;
        }
        APSLogErrorAt();
        if (gLogCategory_APAudioEngineRealTime <= 90
          && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
        {
          goto LABEL_9;
        }
      }
    }
  }
LABEL_11:
  _Block_object_dispose(&v5, 8);
}

void realTimeAudioEngine_performSuspensionGutsInternal(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  OpaqueCMClock *HostTimeClock;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  const __CFArray *v15;
  CFIndex Count;
  CFIndex v17;
  CFIndex i;
  uint64_t v19;
  __CFDictionary *v20;
  _QWORD *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  CFTypeRef cf;
  CMTime rhs;
  CMTime lhs;
  CMTime v38;
  CMTime v39;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 664));
  realTimeAudioEngine_tas_SuspendInternal(DerivedStorage + 576);
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 664));
  v5 = *(NSObject **)(DerivedStorage + 336);
  if (v5)
  {
    dispatch_source_cancel(v5);
    if (!*(_BYTE *)(DerivedStorage + 344))
      dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 336));
    v6 = *(NSObject **)(DerivedStorage + 336);
    if (v6)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 336));
      dispatch_release(v6);
      *(_QWORD *)(DerivedStorage + 336) = 0;
    }
  }
  *(_BYTE *)(DerivedStorage + 344) = 0;
  if (a2)
  {
    v7 = CMBaseObjectGetDerivedStorage();
    v39 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v38 = v39;
    if (*(_QWORD *)(v7 + 376))
    {
      v8 = v7;
      HostTimeClock = CMClockGetHostTimeClock();
      CMClockGetTime(&v39, HostTimeClock);
      lhs = v39;
      rhs = *(CMTime *)(v8 + 384);
      CMTimeSubtract(&v38, &lhs, &rhs);
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v11 = Mutable;
        lhs = v38;
        CMTimeGetSeconds(&lhs);
        FigCFDictionarySetInt64();
        v12 = (const void *)APSStatsHistogramCopyValuesAsRTCString();
        APSStatsHistogramGetTotalSampleCount();
        FigCFDictionarySetInt64();
        CFDictionarySetValue(v11, CFSTR("senderRenderDeadlineHistogram"), v12);
        v13 = CMBaseObjectGetDerivedStorage();
        lhs.value = 0;
        LODWORD(rhs.value) = 0;
        if (*(_QWORD *)(v13 + 376))
        {
          v14 = v13;
          cf = (CFTypeRef)APSThreadSafeDictionaryCopyMutableDictionary();
          v15 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
          Count = CFArrayGetCount(v15);
          if (Count >= 1)
          {
            v17 = Count;
            for (i = 0; i != v17; ++i)
            {
              CFArrayGetValueAtIndex(v15, i);
              v19 = APSThreadSafeDictionaryCopyMutableDictionary();
              if (!v19)
                break;
              v20 = (__CFDictionary *)v19;
              if (FigCFDictionaryGetInt64IfPresent())
              {
                FigCFDictionaryGetInt32IfPresent();
                mach_absolute_time();
                UpTicksToSeconds();
                FigCFDictionarySetInt32();
                CFDictionaryRemoveValue(v20, CFSTR("AudioStreamLastStartTime"));
              }
              CFArrayAppendValue(*(CFMutableArrayRef *)(v14 + 424), v20);
              CFRelease(v20);
            }
          }
          if (v15)
            CFRelease(v15);
          if (cf)
            CFRelease(cf);
        }
        if (CFEqual(*(CFTypeRef *)(v8 + 8), (CFTypeRef)*MEMORY[0x1E0CA4880]))
        {
          FigCFDictionarySetValue();
          FigCFDictionarySetInt64();
        }
        else if (CFEqual(*(CFTypeRef *)(v8 + 8), (CFTypeRef)*MEMORY[0x1E0CA4890]))
        {
          lhs = v38;
          if (CMTimeGetSeconds(&lhs) < 60.0)
          {
LABEL_29:
            if (v12)
              CFRelease(v12);
            CFRelease(v11);
            goto LABEL_32;
          }
          FigCFDictionarySetValue();
        }
        FigCFDictionarySetValue();
        CFDictionarySetValue(v11, CFSTR("sessionType"), CFSTR("AudioRealTime"));
        FigCFDictionarySetInt32();
        APSRTCReportingAgentSendEvent();
        if (gLogCategory_APAudioEngineRealTime <= 50
          && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
        {
          lhs = v38;
          CMTimeGetSeconds(&lhs);
          LogPrintF();
        }
        goto LABEL_29;
      }
    }
  }
LABEL_32:
  v21 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v22 = (const void *)v21[47];
  if (v22)
  {
    CFRelease(v22);
    v21[47] = 0;
  }
  v23 = (const void *)v21[52];
  if (v23)
  {
    CFRelease(v23);
    v21[52] = 0;
  }
  v24 = (const void *)v21[53];
  if (v24)
  {
    CFRelease(v24);
    v21[53] = 0;
  }
  v25 = *(const void **)(DerivedStorage + 200);
  if (v25)
  {
    CFRelease(v25);
    *(_QWORD *)(DerivedStorage + 200) = 0;
  }
  v26 = *(const void **)(DerivedStorage + 208);
  if (v26)
  {
    CFRelease(v26);
    *(_QWORD *)(DerivedStorage + 208) = 0;
  }
  v27 = *(const void **)(DerivedStorage + 232);
  if (v27)
  {
    CFRelease(v27);
    *(_QWORD *)(DerivedStorage + 232) = 0;
  }
  v28 = *(const void **)(DerivedStorage + 240);
  if (v28)
  {
    CFRelease(v28);
    *(_QWORD *)(DerivedStorage + 240) = 0;
  }
  v29 = *(const void **)(DerivedStorage + 248);
  if (v29)
  {
    CFRelease(v29);
    *(_QWORD *)(DerivedStorage + 248) = 0;
  }
  *(_QWORD *)(DerivedStorage + 256) = 0;
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 552));
  v30 = *(const void **)(DerivedStorage + 560);
  if (v30)
  {
    CFRelease(v30);
    *(_QWORD *)(DerivedStorage + 560) = 0;
  }
  v31 = *(const void **)(DerivedStorage + 568);
  if (v31)
  {
    CFRelease(v31);
    *(_QWORD *)(DerivedStorage + 568) = 0;
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 552));
  realTimeAudioEngine_serviceRenderDeadlineMessageQueue();
  if (FigCFEqual())
    realTimeAudioEngine_NotifyIsPlayingAmbientAudio(0);
  realTimeAudioEngine_updateDynamicLatencyIfNeeded(a1, 0);
  *(_BYTE *)(DerivedStorage + 128) = 0;
  v32 = *(const void **)(DerivedStorage + 272);
  if (v32)
  {
    CFRelease(v32);
    *(_QWORD *)(DerivedStorage + 272) = 0;
  }
  v33 = *(const void **)(DerivedStorage + 280);
  if (v33)
  {
    CFRelease(v33);
    *(_QWORD *)(DerivedStorage + 280) = 0;
  }
  v34 = *(const void **)(DerivedStorage + 288);
  if (v34)
  {
    CFRelease(v34);
    *(_QWORD *)(DerivedStorage + 288) = 0;
  }
}

void realTimeAudioEngine_resumeComplete(CFTypeRef *a1)
{
  void (*v2)(CFTypeRef, _QWORD, CFTypeRef);
  CFTypeRef v3;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineRealTime <= 50
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = (void (*)(CFTypeRef, _QWORD, CFTypeRef))a1[2];
  if (v2)
    v2(*a1, *((unsigned int *)a1 + 10), a1[4]);
  APSDispatchSectionLeave();
  v3 = a1[1];
  if (v3)
    CFRelease(v3);
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

void realTimeAudioEngine_apsRTPPacketHandlerCleanUp(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t realTimeAudioEngine_createRedundantAudioDataMessageBBuf(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = APTransportStreamSendBackingProviderAcquireBBuf();
  if ((_DWORD)v3)
    APSLogErrorAt();
  else
    *a2 = 0;
  return v3;
}

uint64_t realTimeAudioEngine_relinquishMessageBacking()
{
  APTransportStreamSendBackingProviderRelinquishBBuf();
  return 0;
}

uint64_t realTimeAudioEngine_updateHostRateAndAnchorTimeRelativeToRemoteRTPTimebase()
{
  uint64_t DerivedStorage;
  CMClockRef HostTimeClock;
  uint64_t result;
  Float64 outRelativeRate;
  CMTime v4;
  CMTime v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  outRelativeRate = NAN;
  v4 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v5 = v4;
  HostTimeClock = CMClockGetHostTimeClock();
  if (CMSyncGetRelativeRateAndAnchorTime(HostTimeClock, *(CMClockOrTimebaseRef *)(DerivedStorage + 288), &outRelativeRate, &v4, &v5))
  {
    return APSLogErrorAt();
  }
  result = APSRealTimeReadableWrite();
  if ((_DWORD)result)
    return APSLogErrorAt();
  return result;
}

uint64_t realTimeAudioEngine_periodicTasksTimerEntry()
{
  uint64_t DerivedStorage;
  _BYTE *v1;
  CMTimeValue *v2;
  _BYTE *v3;
  double v4;
  OpaqueCMClock *HostTimeClock;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeValue v8;
  CMTime rhs;
  CMTime time2;
  CMTime time1;
  CMTime v13;
  CMTime v14;
  __int128 v15;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  kdebug_trace();
  if (!*(_BYTE *)DerivedStorage)
  {
    realTimeAudioEngine_updateCryptor();
    if (CFSetGetCount(*(CFSetRef *)(DerivedStorage + 152)))
    {
      v1 = (_BYTE *)CMBaseObjectGetDerivedStorage();
      v2 = (CMTimeValue *)MEMORY[0x1E0CA2E18];
      v15 = *(_OWORD *)(MEMORY[0x1E0CA2E18] + 8);
      v14 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      v13 = v14;
      if (!*v1)
      {
        v3 = v1;
        APSNetworkClockLogCurrentNetworkTime();
        realTimeAudioEngine_handleTimeAnnounce();
        v4 = *((double *)v3 + 20);
        HostTimeClock = CMClockGetHostTimeClock();
        CMClockGetTime(&v13, HostTimeClock);
        time1 = v13;
        time2 = *(CMTime *)(v3 + 472);
        if (CMTimeCompare(&time1, &time2) >= 1)
        {
          CMTimebaseGetTimeWithTimeScale(&time1, *((CMTimebaseRef *)v3 + 36), (int)v4, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          value = time1.value;
          flags = time1.flags;
          timescale = time1.timescale;
          if ((time1.flags & 0x1D) != 1)
          {
            APSLogErrorAt();
            APSSignalErrorAt();
            return kdebug_trace();
          }
          epoch = time1.epoch;
          APSRealTimeWritableRead();
          if ((v14.flags & 1) != 0)
          {
            time2 = v14;
            rhs.value = value;
            rhs.timescale = timescale;
            rhs.flags = flags;
            rhs.epoch = epoch;
            CMTimeSubtract(&time1, &time2, &rhs);
            v15 = *(_OWORD *)&time1.timescale;
            time2 = time1;
            CMTimeConvertScale(&time1, &time2, (int)v4, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
            v8 = time1.value;
            v15 = *(_OWORD *)&time1.timescale;
          }
          else
          {
            v8 = *v2;
          }
          if (gLogCategory_APAudioEngineRealTime <= 50
            && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
          {
            time1.value = v8;
            *(_OWORD *)&time1.timescale = v15;
            CMTimeGetSeconds(&time1);
            LogPrintF();
          }
          time2 = v13;
          rhs = *(CMTime *)(v3 + 448);
          CMTimeAdd(&time1, &time2, &rhs);
          *(CMTime *)(v3 + 472) = time1;
        }
        realTimeAudioEngine_serviceRenderDeadlineMessageQueue();
        realTimeAudioEngine_updateArrivalToRenderTicks();
        realTimeAudioEngine_updateHostRateAndAnchorTimeRelativeToRemoteRTPTimebase();
        time1 = v13;
        time2 = *(CMTime *)(v3 + 520);
        if (CMTimeCompare(&time1, &time2) >= 1)
        {
          if (gLogCategory_APAudioEngineRealTime <= 50
            && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          time2 = v13;
          rhs = *(CMTime *)(v3 + 496);
          CMTimeAdd(&time1, &time2, &rhs);
          *(CMTime *)(v3 + 520) = time1;
        }
      }
    }
  }
  return kdebug_trace();
}

uint64_t realTimeAudioEngine_serviceRenderDeadlineMessageQueue()
{
  uint64_t result;
  CMTimeEpoch v1;
  uint64_t v2;
  int v3;
  uint64_t DerivedStorage;
  OpaqueCMTimebase *v5;
  CMClockRef HostTimeClock;
  int32_t v7;
  int64_t v8;
  double v9;
  float v10;
  __int128 v11;
  CMTime v12;
  uint64_t v13;
  uint64_t v14;
  CMTime rhs;
  CMTime time;
  CMTime lhs;
  CMTime v18;
  CMTime v19;

  CMBaseObjectGetDerivedStorage();
  v13 = 0;
  v14 = 0;
  result = APSAtomicMessageQueueReadMessage();
  if ((_DWORD)result)
  {
    v11 = *MEMORY[0x1E0CA2E18];
    v1 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    do
    {
      memset(&v12, 0, sizeof(v12));
      v2 = v13;
      v3 = v14;
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_OWORD *)&v12.value = v11;
      v12.epoch = v1;
      *(_OWORD *)&v19.value = v11;
      v19.epoch = v1;
      *(_OWORD *)&v18.value = v11;
      v18.epoch = v1;
      v5 = *(OpaqueCMTimebase **)(DerivedStorage + 288);
      if (v5 && CMTimebaseGetRate(v5) != 0.0)
      {
        CMClockMakeHostTimeFromSystemUnits(&time, v2);
        HostTimeClock = CMClockGetHostTimeClock();
        CMSyncConvertTime(&lhs, &time, HostTimeClock, *(CMClockOrTimebaseRef *)(DerivedStorage + 288));
        *(_OWORD *)&rhs.timescale = *(_OWORD *)&lhs.timescale;
        v7 = (int)*(double *)(DerivedStorage + 160);
        rhs.value = lhs.value;
        CMTimeConvertScale(&lhs, &rhs, v7, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        if (v3 - LODWORD(lhs.value) >= 0)
          v8 = (v3 - LODWORD(lhs.value));
        else
          v8 = (LODWORD(lhs.value) - v3);
        v9 = *(double *)(DerivedStorage + 160);
        v10 = v9;
        CMTimeMake(&v19, (float)((float)(*(float *)(DerivedStorage + 132) + *(float *)(DerivedStorage + 140)) * v10), (int)v9);
        CMTimeMake(&v18, v8, (int)*(double *)(DerivedStorage + 160));
        lhs = v19;
        rhs = v18;
        CMTimeSubtract(&v12, &lhs, &rhs);
      }
      if ((v12.flags & 1) != 0)
      {
        v19 = v12;
        CMTimeGetSeconds(&v19);
        APSStatsHistogramAddValue();
      }
      result = APSAtomicMessageQueueReadMessage();
    }
    while ((_DWORD)result);
  }
  return result;
}

uint64_t realTimeAudioEngine_tas_compressionSourceWriteDataCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kdebug_trace();
  if (!*(_BYTE *)(a3 + 80))
    return realTimeAudioEngine_tas_transcodeAndSendEntry(a3);
  APSAtomicMessageQueueSendMessage();
  return APSRealTimeSignalRaise();
}

const void *realTimeAudioEngine_tas_transcodeAndSendTimerEntry(const __CFArray *a1)
{
  const void *result;
  uint64_t v2;

  result = CFArrayGetValueAtIndex(a1, 0);
  if (result)
  {
    v2 = (uint64_t)result;
    kdebug_trace();
    return (const void *)realTimeAudioEngine_tas_transcodeAndSendEntry(v2);
  }
  return result;
}

void realTimeAudioEngine_tas_SuspendInternal(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, _QWORD);
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;

  *(_BYTE *)(a1 + 96) = 0;
  v2 = *(NSObject **)(a1 + 112);
  if (v2)
  {
    dispatch_source_cancel(v2);
    if (!*(_BYTE *)(a1 + 120))
      dispatch_resume(*(dispatch_object_t *)(a1 + 112));
    v3 = *(NSObject **)(a1 + 112);
    if (v3)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(a1 + 112));
      dispatch_release(v3);
      *(_QWORD *)(a1 + 112) = 0;
    }
    v4 = *(void **)(a1 + 128);
    if (v4)
      dispatch_sync_f(*(dispatch_queue_t *)(a1 + 104), v4, (dispatch_function_t)realTimeAudioEngine_tas_transcodeAndSendTimerInvalidate);
  }
  *(_BYTE *)(a1 + 120) = 0;
  v5 = *(_QWORD *)(a1 + 192);
  if (v5)
  {
    v6 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v6)
      v6(v5);
    v7 = *(_QWORD *)(a1 + 192);
    v8 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
    if (v8)
      v8(v7, 0, 0);
  }
  *(_DWORD *)(a1 + 272) = 0;
  APSRealTimeWritableWrite();
  while (APSAtomicMessageQueueReadMessage())
    ;
  *(_QWORD *)(a1 + 288) = 0;
  v9 = *(const void **)(a1 + 192);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 192) = 0;
  }
  v10 = *(const void **)(a1 + 200);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 200) = 0;
  }
  v11 = *(const void **)(a1 + 208);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 208) = 0;
  }
  v12 = *(const void **)(a1 + 216);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 216) = 0;
  }
  v13 = *(const void **)(a1 + 224);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 224) = 0;
  }
  v14 = *(const void **)(a1 + 240);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a1 + 240) = 0;
  }
  v15 = *(const void **)(a1 + 232);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a1 + 232) = 0;
  }
  v16 = *(const void **)(a1 + 248);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a1 + 248) = 0;
  }
  v17 = *(const void **)(a1 + 256);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(a1 + 256) = 0;
  }
  v18 = *(const void **)(a1 + 128);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(a1 + 128) = 0;
  }
  v19 = *(const void **)(a1 + 296);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(a1 + 296) = 0;
  }
}

uint64_t realTimeAudioEngine_tas_transcodeAndSendEntry(uint64_t a1)
{
  unint64_t *v2;
  int64_t v3;
  CMTime *v4;
  CMTimeEpoch v5;
  CMTimeFlags v6;
  CMTimeEpoch v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  int v12;
  const void *v13;
  const void *v14;
  int v15;
  int value;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int value_low;
  unsigned int v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, _QWORD);
  int v24;
  unint64_t *v25;
  double v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, _QWORD);
  uint64_t NextFreeBacking;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *, uint64_t *, _QWORD, _QWORD, uint64_t, CMTimeValue, uint64_t, uint64_t, uint64_t, uint64_t);
  int v42;
  _QWORD *v43;
  int *EmptyBBuf;
  uint64_t v45;
  uint64_t v46;
  int64_t v48;
  uint64_t timescale;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  CFTypeRef v54;
  void (*v55)(CFTypeRef, uint64_t);
  CFTypeRef v56;
  void (*v57)(CFTypeRef, uint64_t);
  size_t DataLength;
  unsigned __int16 v59;
  int v60;
  unint64_t v61;
  __int16 v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  const __CFAllocator *Default;
  int v67;
  int MaxPacketRedundancy;
  __CFArray *Mutable;
  const __CFAllocator *v70;
  int v71;
  int v72;
  __CFArray *v73;
  int v74;
  uint64_t UsedCount;
  const __CFAllocator *v76;
  const __CFArray *v77;
  const __CFAllocator *v78;
  const __CFArray *v79;
  int v80;
  int v81;
  uint64_t v83;
  CMTimeValue v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  CMTimeValue v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  CMTime v99;
  CMTime time2;
  CMTime rhs;
  CMTime time1;
  CFTypeRef v103;
  CFTypeRef v104;
  CFTypeRef v105;
  CFTypeRef cf;
  uint64_t v107;
  uint64_t v108;
  _QWORD v109[2];
  unsigned __int16 v110[8];
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  CMTime v114;
  CMTime time;
  CMTime v116;
  CMTime hostTime;
  _BYTE lhs[32];
  CMTime v119;
  CMTime v120;
  uint64_t v121;
  CFRange v122;
  CFRange v123;

  v121 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  APSTimeProfilerTaskBegin();
  if (!FigSimpleMutexTryLock())
    goto LABEL_188;
  if (!*(_BYTE *)(a1 + 96))
    goto LABEL_187;
  v2 = (unint64_t *)(a1 + 264);
  do
    v3 = __ldxr(v2);
  while (__stxr(0xFFFFFFFFFFFFFFFFLL, v2));
  if ((v3 & 0x8000000000000000) == 0)
  {
    memset(lhs, 0, 24);
    CMTimeMake((CMTime *)lhs, v3, (int)*(double *)(a1 + 152));
    *(_QWORD *)lhs += *(int *)(a1 + 272);
    APSRealTimeWritableWrite();
  }
  v98 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)lhs = *MEMORY[0x1E0CA2E18];
  v4 = (CMTime *)MEMORY[0x1E0CA2E68];
  v5 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  *(_QWORD *)&lhs[16] = v5;
  *(_QWORD *)&lhs[24] = 0;
  while (APSAtomicMessageQueueReadMessage())
  {
    v120.value = *(_QWORD *)lhs;
    v6 = *(_DWORD *)&lhs[12];
    v120.timescale = *(_DWORD *)&lhs[8];
    v7 = *(_QWORD *)&lhs[16];
    v8 = *(_QWORD *)&lhs[24];
    *(_OWORD *)&hostTime.value = v98;
    hostTime.epoch = v5;
    v116 = *v4;
    v9 = *(double *)(a1 + 152);
    v10 = *(_QWORD *)(a1 + 192);
    v11 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v11)
    {
      v12 = v11(v10);
      if (!v12)
      {
        if ((v6 & 0x1D) == 1)
        {
          v13 = *(const void **)(a1 + 216);
          v14 = *(const void **)(a1 + 224);
          time.value = v120.value;
          time.timescale = v120.timescale;
          time.flags = v6;
          time.epoch = v7;
          CMSyncConvertTime(&v116, &time, v13, v14);
          v114 = v116;
          CMTimeConvertScale(&time, &v114, (int)v9, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          v116 = time;
          if (gLogCategory_APAudioEngineRealTime <= 40
            && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        else
        {
          CMTimebaseGetTimeWithTimeScale(&v116, *(CMTimebaseRef *)(a1 + 224), (int)v9, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        }
        if ((v116.flags & 0x1D) != 1)
        {
          APSLogErrorAt();
          v15 = APSSignalErrorAt();
          goto LABEL_35;
        }
        v116.value += *(int *)(a1 + 272);
        APSRealTimeWritableRead();
        APSRealTimeWritableWrite();
        value = v116.value;
        if ((int)v9 >= 0)
          v17 = (int)v9;
        else
          v17 = (int)v9 + 7;
        v18 = *(_QWORD *)(a1 + 248);
        v19 = *(_QWORD *)(a1 + 256);
        LOWORD(time.value) = 0;
        LOWORD(v114.value) = 0;
        if (APMessageRingFlush(v18, &time))
          goto LABEL_40;
        if (!v19)
          goto LABEL_32;
        if (APMessageRingFlush(v19, &v114))
        {
LABEL_40:
          APSLogErrorAt();
          if (v8)
            goto LABEL_33;
        }
        else
        {
          value_low = LOWORD(time.value);
          v21 = LOWORD(v114.value);
          if (LOWORD(time.value) != LOWORD(v114.value) && gLogCategory_APAudioEngineRealTime <= 90)
          {
            if (gLogCategory_APAudioEngineRealTime != -1)
              goto LABEL_28;
            if (_LogCategory_Initialize())
            {
              value_low = LOWORD(time.value);
              v21 = LOWORD(v114.value);
LABEL_28:
              v83 = value_low;
              v84 = v21;
              LogPrintF();
            }
          }
LABEL_32:
          realTimeAudioEngine_tas_flushHoses(a1, time.value, value + (v17 >> 3));
          if (v8)
LABEL_33:
            APSRealTimeSignalRaise();
        }
        v15 = 0;
        goto LABEL_35;
      }
      v15 = v12;
    }
    else
    {
      v15 = -12782;
    }
    APSLogErrorAt();
LABEL_35:
    if (*(_QWORD *)&lhs[24])
      CFRelease(*(CFTypeRef *)&lhs[24]);
    if (v15)
    {
      APSLogErrorAt();
      goto LABEL_189;
    }
  }
  v22 = *(_QWORD *)(a1 + 192);
  v23 = *(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
  if (!v23 || !v23(v22, 0))
    goto LABEL_187;
  kdebug_trace();
  if (!*(_DWORD *)(a1 + 144))
    goto LABEL_148;
  v24 = 0;
  v25 = (unint64_t *)(a1 + 288);
  v90 = *MEMORY[0x1E0CF1E78];
  while (2)
  {
    if (APMessageRingGetNextFreeBacking(*(_QWORD *)(a1 + 248)))
    {
      v26 = *(double *)(a1 + 152);
      v27 = *(unsigned int *)(a1 + 172);
      v112 = 0;
      v113 = 0;
      *(_OWORD *)&v120.value = v98;
      v120.epoch = v5;
      v111 = 0uLL;
      v28 = *(_QWORD *)(a1 + 72);
      v110[4] = 0;
      v109[1] = 0;
      *(_QWORD *)v110 = 0;
      v108 = 0;
      v109[0] = 0;
      cf = 0;
      v107 = 0;
      v104 = 0;
      v105 = 0;
      v30 = *(_QWORD *)(a1 + 240);
      v29 = *(_QWORD *)(a1 + 248);
      v31 = *(_QWORD *)(a1 + 256);
      v103 = 0;
      v95 = mach_absolute_time();
      kdebug_trace();
      APSRealTimeWritableRead();
      if ((v120.flags & 1) == 0)
        goto LABEL_118;
      CMTimebaseGetTime(&rhs, *(CMTimebaseRef *)(a1 + 224));
      *(CMTime *)lhs = v120;
      CMTimeSubtract(&time1, (CMTime *)lhs, &rhs);
      CMTimeMake(&time2, 250, 1000);
      if (CMTimeCompare(&time1, &time2) > 0)
        goto LABEL_118;
      v97 = v29;
      v32 = *(_QWORD *)(a1 + 192);
      v33 = *(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (!v33 || !v33(v32, 0))
        goto LABEL_118;
      if (v97)
      {
        NextFreeBacking = APMessageRingGetNextFreeBacking(v97);
        if (NextFreeBacking)
        {
          v35 = NextFreeBacking;
          if (APSTransportMessageGetAudioDataPointer())
          {
            APSLogErrorAt();
            goto LABEL_118;
          }
          v92 = v31;
          v93 = v35;
          v36 = *(_QWORD *)(a1 + 200);
          v96 = v30;
          if (v36
            && (v37 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) != 0)
          {
            v94 = v37(v36);
          }
          else
          {
            v94 = 0;
          }
          v38 = *(_QWORD *)(a1 + 192);
          v40 = v112;
          v39 = v113;
          v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *, uint64_t *, _QWORD, _QWORD, uint64_t, CMTimeValue, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
          if (v41)
          {
            v42 = v41(v38, v39, v40 - v94, v109, 1, &v112, &v108, 0, 0, v83, v84, v85, v86, v87, v88);
            v27 *= v108;
            if (v42 == -16774)
            {
              v30 = v96;
              if (gLogCategory_APAudioEngineRealTime <= 30
                && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
LABEL_119:
              v43 = 0;
              EmptyBBuf = 0;
LABEL_120:
              if (cf)
                CFRelease(cf);
              if (v105)
                CFRelease(v105);
              if (v104)
                CFRelease(v104);
              if (v103)
                CFRelease(v103);
              if (EmptyBBuf)
                APSRTPPacketHandlerReturnComposedBBuf(v30, EmptyBBuf);
              if (v43)
                APSRTPPacketHandlerReturnBBuf(v30, v43);
              if (!(_DWORD)v27)
                goto LABEL_148;
              if (++v24 >= *(_DWORD *)(a1 + 144))
                goto LABEL_148;
              continue;
            }
            v30 = v96;
            if (!v42)
            {
              if (!v112)
                goto LABEL_119;
              v99 = v120;
              *(_QWORD *)lhs = 0x7FF8000000000000;
              *(_OWORD *)&lhs[8] = v98;
              *(_QWORD *)&lhs[24] = v5;
              *(_OWORD *)&v119.value = v98;
              v119.epoch = v5;
              APSRealTimeReadableRead();
              v45 = 0;
              if (fabs(*(double *)lhs) != INFINITY)
              {
                if ((lhs[20] & 1) != 0 && (v119.flags & 1) != 0)
                {
                  hostTime = v99;
                  v116 = v119;
                  CMTimeSubtract(&time, &hostTime, &v116);
                  CMTimeMultiplyByFloat64(&v116, &time, *(Float64 *)lhs);
                  v114 = *(CMTime *)&lhs[8];
                  CMTimeAdd(&hostTime, &v114, &v116);
                  v45 = CMClockConvertHostTimeToSystemUnits(&hostTime);
                }
                else
                {
                  v45 = 0;
                }
              }
              v46 = v45 - v28;
              if (v45 < v28 || v45 == 0)
                v46 = v90;
              v91 = v46;
              if (gLogCategory_APAudioEngineRealTime <= 30
                && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
              {
                v89 = v120.value;
                v48 = v27;
                timescale = v120.timescale;
                v87 = UpTicksToMilliseconds();
                v88 = UpTicksToMilliseconds();
                v30 = v96;
                v85 = timescale;
                v86 = v45;
                v27 = v48;
                v83 = v95;
                v84 = v89;
                LogPrintF();
              }
              hostTime = v120;
              CMTimeConvertScale((CMTime *)lhs, &hostTime, (int)v26, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
              v50 = *(_QWORD *)lhs;
              v111 = *(_OWORD *)&lhs[8];
              CMTimeMake(&hostTime, v27, (int)v26);
              v116 = v120;
              CMTimeAdd((CMTime *)lhs, &v116, &hostTime);
              v120 = *(CMTime *)lhs;
              APSRealTimeWritableWrite();
              if (*(_QWORD *)(a1 + 200))
              {
                v110[0] = APMessageRingGetNextEnqueueSequenceNumber(v97);
                *(_QWORD *)&v110[1] = v50;
                *(_OWORD *)lhs = *(_OWORD *)&v4->value;
                *(_QWORD *)&lhs[16] = v4->epoch;
                v116 = *(CMTime *)lhs;
                v114.value = 0;
                v51 = mach_absolute_time();
                CMClockMakeHostTimeFromSystemUnits((CMTime *)lhs, v51);
                time = *(CMTime *)lhs;
                APSRealTimePTPClockGetEstimatedPTPTimeForHostTime();
                time = *(CMTime *)lhs;
                CMTimeGetSeconds(&time);
                time = v116;
                CMTimeGetSeconds(&time);
                kdebug_trace();
                if (APSTransportMessageSetAudioDataHeader())
                {
                  APSLogErrorAt();
                }
                else
                {
                  v52 = APMessageRingGetNextFreeBacking(v92);
                  if (v52)
                  {
                    v53 = v52;
                    EmptyBBuf = (int *)APSRTPPacketHandlerGetEmptyBBuf(v96);
                    if (!EmptyBBuf)
                    {
                      APSLogErrorAt();
                      v43 = 0;
                      v30 = v96;
                      goto LABEL_120;
                    }
                    v43 = APSRTPPacketHandlerGetEmptyBBuf(v96);
                    if (!v43
                      || APSTransportMessageCreateReferencingBBufWithAudioDataLength()
                      || (CMBlockBufferGetDataLength((CMBlockBufferRef)v43[2]), APSCMBlockBufferReplace()))
                    {
                      APSLogErrorAt();
                    }
                    else
                    {
                      *(_DWORD *)v43 = 96;
                      if (!APSRTPPacketHandlerComposeRTPPacketWithBBuf(v96, v43, v94, EmptyBBuf, (_DWORD *)&v107 + 1))
                      {
                        CMBlockBufferGetDataLength(*((CMBlockBufferRef *)EmptyBBuf + 2));
                        if (!APSCMBlockBufferReplace()
                          && !APTransportStreamSendBackingProviderCopyPackageForAcquiredBBuf()
                          && !APTransportStreamSendBackingProviderCopyPackageForAcquiredBBuf())
                        {
                          v54 = v104;
                          v55 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 144);
                          if (v55)
                            v55(v54, v91);
                          v56 = v103;
                          v57 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 144);
                          if (v57)
                            v57(v56, v91);
                          kdebug_trace();
                          DataLength = CMBlockBufferGetDataLength(*((CMBlockBufferRef *)EmptyBBuf + 2));
                          if (!realTimeAudioEngine_tas_createAndEncryptAudioDataMessage(v53, DataLength - v94 - 10, HIDWORD(v107) - 10, *(_QWORD *)(a1 + 200), &v105))
                          {
                            v30 = v96;
                            if (realTimeAudioEngine_tas_createAndEncryptAudioDataMessage(v93, v112, 0, *(_QWORD *)(a1 + 200), &cf))goto LABEL_143;
                            if (gLogCategory_APAudioEngineRealTime <= 10
                              && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
                            {
                              v83 = HIDWORD(v107);
                              LogPrintF();
                            }
                            *(_QWORD *)lhs = v50;
                            *(_OWORD *)&lhs[8] = v111;
                            if (APMessageRingEnqueueMessageForSending(v97, (OpaqueCMBlockBuffer *)cf, (uint64_t)lhs)|| (*(_QWORD *)lhs = v50, *(_OWORD *)&lhs[8] = v111, APMessageRingEnqueueMessageForSendingWithPayloadCount(v92, (OpaqueCMBlockBuffer *)v105, (__int128 *)lhs, v107)))
                            {
LABEL_143:
                              APSLogErrorAt();
                              v43 = 0;
                            }
                            else
                            {
                              v59 = v110[0];
                              v60 = *(_DWORD *)&v110[1];
                              v61 = ((unint64_t)*(unsigned int *)&v110[1] << 32) | ((unint64_t)v110[0] << 16) | 1;
                              do
                                v62 = __ldxr(v25);
                              while (__stxr(v61, v25));
                              if (*(_BYTE *)(a1 + 16))
                                v63 = v62 == 0;
                              else
                                v63 = 0;
                              if (v63)
                                realTimeAudioEngine_tas_flushHoses(a1, v59, v60);
                              v43 = 0;
                            }
                            goto LABEL_120;
                          }
                        }
                      }
                      APSLogErrorAt();
                      v43 = 0;
                    }
LABEL_142:
                    v30 = v96;
                    goto LABEL_120;
                  }
                  APSLogErrorAt();
                  APSSignalErrorAt();
                }
                v43 = 0;
                EmptyBBuf = 0;
                goto LABEL_142;
              }
LABEL_118:
              LODWORD(v27) = 0;
              goto LABEL_119;
            }
          }
          else
          {
            LODWORD(v27) = v108 * v27;
          }
          APSLogErrorAt();
          v43 = 0;
          EmptyBBuf = 0;
          v30 = v96;
          goto LABEL_120;
        }
      }
      APSLogErrorAt();
      APSSignalErrorAt();
      goto LABEL_118;
    }
    break;
  }
  if (gLogCategory_APAudioEngineRealTime <= 30
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_148:
  v64 = *(_QWORD *)(a1 + 248);
  v65 = *(_QWORD *)(a1 + 256);
  v116.value = 0;
  time.value = 0;
  memset(lhs, 0, 24);
  Default = (const __CFAllocator *)APSRealTimeAllocatorGetDefault();
  v67 = *(_DWORD *)(a1 + 144);
  MaxPacketRedundancy = APMessageRingGetMaxPacketRedundancy(v64);
  Mutable = CFArrayCreateMutable(Default, (v67 + v67 * MaxPacketRedundancy), MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v73 = 0;
LABEL_193:
    v81 = -72090;
    goto LABEL_179;
  }
  v70 = (const __CFAllocator *)APSRealTimeAllocatorGetDefault();
  v71 = *(_DWORD *)(a1 + 144);
  v72 = APMessageRingGetMaxPacketRedundancy(v65);
  v73 = CFArrayCreateMutable(v70, (v71 + v71 * v72), MEMORY[0x1E0C9B378]);
  if (!v73)
  {
    APSLogErrorAt();
    goto LABEL_193;
  }
  if (gLogCategory_APAudioEngineRealTime <= 30
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_DWORD *)(a1 + 144))
  {
    v74 = 0;
    while (APMessageRingGetUsedCount(v64))
    {
      UsedCount = APMessageRingGetUsedCount(v65);
      if (UsedCount != APMessageRingGetUsedCount(v64)
        && gLogCategory_APAudioEngineRealTime <= 90
        && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v76 = (const __CFAllocator *)APSRealTimeAllocatorGetDefault();
      APMessageRingCopyNextBurst(v64, v76, (CFTypeRef *)&v116);
      v77 = (const __CFArray *)v116.value;
      if (v116.value)
      {
        v122.length = CFArrayGetCount((CFArrayRef)v116.value);
        v122.location = 0;
        CFArrayAppendArray(Mutable, v77, v122);
        APMessageRingMarkBurstAsSent(v64, v116.value);
        if (v116.value)
        {
          CFRelease((CFTypeRef)v116.value);
          v116.value = 0;
        }
      }
      v78 = (const __CFAllocator *)APSRealTimeAllocatorGetDefault();
      APMessageRingCopyNextBurst(v65, v78, (CFTypeRef *)&v116);
      v79 = (const __CFArray *)v116.value;
      if (v116.value)
      {
        v123.length = CFArrayGetCount((CFArrayRef)v116.value);
        v123.location = 0;
        CFArrayAppendArray(v73, v79, v123);
        APMessageRingMarkBurstAsSent(v65, v116.value);
        if (v116.value)
        {
          CFRelease((CFTypeRef)v116.value);
          v116.value = 0;
        }
      }
      if (++v74 >= *(_DWORD *)(a1 + 144))
        goto LABEL_174;
    }
    if (gLogCategory_APAudioEngineRealTime <= 30
      && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
LABEL_174:
  v80 = APSCFRealTimeReadableCopyValue();
  if (v80)
  {
    v81 = v80;
    APSLogErrorAt();
  }
  else
  {
    if (FigCFDictionaryGetCount() >= 1)
    {
      kdebug_trace();
      *(_QWORD *)lhs = Mutable;
      *(_QWORD *)&lhs[8] = v73;
      *(_DWORD *)&lhs[16] = 0;
      CFDictionaryApplyFunction((CFDictionaryRef)time.value, (CFDictionaryApplierFunction)realTimeAudioEngine_tas_sendAudioDataDictionaryApplierFunction, lhs);
      kdebug_trace();
      if (*(_DWORD *)&lhs[16])
      {
        *(_QWORD *)&hostTime.timescale = 0;
        hostTime.value = mach_absolute_time();
        hostTime.timescale = *(_DWORD *)&lhs[16];
        APSAtomicMessageQueueSendMessage();
      }
    }
    v81 = 0;
  }
LABEL_179:
  if (v116.value)
    CFRelease((CFTypeRef)v116.value);
  if (Mutable)
    CFRelease(Mutable);
  if (v73)
    CFRelease(v73);
  APSCFRealTimeRelease();
  if (!v81)
  {
    kdebug_trace();
    goto LABEL_187;
  }
LABEL_189:
  APSLogErrorAt();
LABEL_187:
  MEMORY[0x1CAA400E4](*(_QWORD *)(a1 + 88));
LABEL_188:
  APSTimeProfilerTaskEnd();
  return kdebug_trace();
}

void realTimeAudioEngine_tas_flushHoses(uint64_t a1, unsigned __int16 a2, int a3)
{
  if (*(_BYTE *)(a1 + 80))
  {
    realTimeAudioEngine_tas_hosesFlushHoses(a1, a3, a2);
  }
  else
  {
    APSAtomicMessageQueueSendMessage();
    APSRealTimeSignalRaise();
  }
}

void realTimeAudioEngine_tas_hosesFlushHoses(uint64_t a1, int a2, unsigned __int16 a3)
{
  _DWORD context[2];

  context[0] = a2;
  context[1] = a3;
  if (gLogCategory_APAudioEngineRealTime <= 50
    && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 336), (CFDictionaryApplierFunction)realTimeAudioEngine_tas_flushHosesDictionaryCallback, context);
}

uint64_t realTimeAudioEngine_tas_flushHosesDictionaryCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, _OWORD *, _QWORD, _QWORD);
  _BYTE v8[28];
  _OWORD v9[2];

  v4 = *(unsigned __int16 *)(a3 + 4);
  APSAudioTransportTimeMakeWithRTPTime();
  APSEndpointStreamAudioHoseProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v6 = *(_QWORD *)(result + 16);
    if (v6)
    {
      v7 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *, _QWORD, _QWORD))(v6 + 24);
      if (v7)
      {
        v9[0] = *(_OWORD *)v8;
        *(_OWORD *)((char *)v9 + 12) = *(_OWORD *)&v8[12];
        return v7(a1, v4, v9, 0, 0);
      }
    }
  }
  return result;
}

uint64_t realTimeAudioEngine_tas_createAndEncryptAudioDataMessage(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, CFTypeRef *a5)
{
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t ReferencingBBufWithAudioDataLength;
  uint64_t AudioAADPointer;
  uint64_t v13;
  uint64_t DataPointer;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, char *, uint64_t, char *, uint64_t, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v24;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  uint64_t v27;
  uint64_t v28;
  CMBlockBufferRef theBuffer;

  v28 = 0;
  theBuffer = 0;
  dataPointerOut = 0;
  v27 = 0;
  v24 = 0;
  lengthAtOffsetOut = 0;
  if (a4 && (v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) != 0)
    v10 = v9(a4);
  else
    v10 = 0;
  APSRealTimeAllocatorGetDefault();
  ReferencingBBufWithAudioDataLength = APSTransportMessageCreateReferencingBBufWithAudioDataLength();
  if ((_DWORD)ReferencingBBufWithAudioDataLength)
  {
    v22 = ReferencingBBufWithAudioDataLength;
    goto LABEL_19;
  }
  if (!a4)
    goto LABEL_15;
  AudioAADPointer = APSTransportMessageGetAudioAADPointer();
  if ((_DWORD)AudioAADPointer)
  {
    v22 = AudioAADPointer;
    goto LABEL_19;
  }
  v13 = a3;
  DataPointer = CMBlockBufferGetDataPointer(theBuffer, a3 + 10, &lengthAtOffsetOut, 0, &dataPointerOut);
  if ((_DWORD)DataPointer)
  {
    v22 = DataPointer;
    goto LABEL_19;
  }
  if (v10)
  {
    v15 = CMBlockBufferGetDataPointer(theBuffer, a2 + 10, 0, 0, &v24);
    if ((_DWORD)v15)
    {
      v22 = v15;
      goto LABEL_19;
    }
    v16 = v24;
  }
  else
  {
    v16 = 0;
  }
  v18 = v27;
  v17 = v28;
  v19 = dataPointerOut;
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, char *, uint64_t, char *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v20)
  {
    v22 = 4294954514;
LABEL_19:
    APSLogErrorAt();
    goto LABEL_20;
  }
  v21 = v20(a4, v17, v18, v19, a2 - v13, v19, a2 - v13, v16, v10);
  if ((_DWORD)v21)
  {
    v22 = v21;
    goto LABEL_19;
  }
LABEL_15:
  v22 = 0;
  if (a5)
    *a5 = CFRetain(theBuffer);
LABEL_20:
  if (theBuffer)
    CFRelease(theBuffer);
  return v22;
}

uint64_t realTimeAudioEngine_tas_sendAudioDataDictionaryApplierFunction(uint64_t a1, CFBooleanRef BOOLean, uint64_t *a3)
{
  uint64_t result;
  CFArrayRef *v6;
  CFArrayRef v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, CFArrayRef);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  const __CFArray *v15;
  CFIndex Count;

  if (CFBooleanGetValue(BOOLean))
  {
    v6 = (CFArrayRef *)(a3 + 1);
    result = a3[1];
    if (result)
    {
      result = CFArrayGetCount((CFArrayRef)result);
      if (result >= 1)
      {
        v7 = *v6;
        APSEndpointStreamAudioHoseProtocolGetProtocolID();
        ProtocolVTable = CMBaseObjectGetProtocolVTable();
        if (ProtocolVTable)
        {
          v9 = *(_QWORD *)(ProtocolVTable + 16);
          if (v9)
          {
            v10 = *(void (**)(uint64_t, uint64_t, CFArrayRef))(v9 + 64);
            if (v10)
              v10(a1, 1735550308, v7);
            else
              APSEndpointStreamAudioHoseSendAudioBatchSlow();
          }
        }
LABEL_18:
        v15 = *v6;
        Count = CFArrayGetCount(*v6);
        CFArrayGetValueAtIndex(v15, Count - 1);
        return APSTransportMessageGetAudioDataTimestamp();
      }
    }
  }
  else
  {
    result = *a3;
    if (*a3)
    {
      result = CFArrayGetCount((CFArrayRef)result);
      if (result >= 1)
      {
        v11 = *a3;
        APSEndpointStreamAudioHoseProtocolGetProtocolID();
        v12 = CMBaseObjectGetProtocolVTable();
        v6 = (CFArrayRef *)a3;
        if (v12)
        {
          v13 = *(_QWORD *)(v12 + 16);
          v6 = (CFArrayRef *)a3;
          if (v13)
          {
            v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 64);
            if (v14)
              v14(a1, 1734700576, v11);
            else
              APSEndpointStreamAudioHoseSendAudioBatchSlow();
            v6 = (CFArrayRef *)a3;
          }
        }
        goto LABEL_18;
      }
    }
  }
  return result;
}

void realTimeAudioEngine_tas_transcodeAndSendTimerInvalidate(__CFArray *a1)
{
  CFArraySetValueAtIndex(a1, 0, 0);
}

void realTimeAudioEngine_suspendEndpointStreamInternal(_DWORD *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  CFTypeRef v5;
  const void *v6;
  CFMutableDictionaryRef Mutable;
  uint64_t (*v8)(const void *, CFMutableDictionaryRef, void (*)(uint64_t, int, _DWORD *), _DWORD *);
  int v9;
  int v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  if (!*(_BYTE *)(DerivedStorage + 128))
  {
    Mutable = 0;
    v6 = 0;
    v10 = 0;
    goto LABEL_11;
  }
  v4 = *(const void **)(DerivedStorage + 216);
  if (!v4 || (v5 = CFRetain(v4)) == 0)
  {
    realTimeAudioEngine_suspendInternal((uint64_t)a1);
    return;
  }
  v6 = v5;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v10 = -72070;
LABEL_11:
    a1[10] = v10;
    dispatch_async_f(*(dispatch_queue_t *)(v3 + 72), a1, (dispatch_function_t)realTimeAudioEngine_suspendComplete);
    if (!v6)
      goto LABEL_13;
    goto LABEL_12;
  }
  FigCFDictionaryGetValue();
  FigCFDictionarySetValue();
  v8 = *(uint64_t (**)(const void *, CFMutableDictionaryRef, void (*)(uint64_t, int, _DWORD *), _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v8)
  {
    v10 = -12782;
    goto LABEL_10;
  }
  v9 = v8(v6, Mutable, realTimeAudioEngine_endpointStreamSuspendCallback, a1);
  if (v9)
  {
    v10 = v9;
LABEL_10:
    APSLogErrorAt();
    goto LABEL_11;
  }
LABEL_12:
  CFRelease(v6);
LABEL_13:
  if (Mutable)
    CFRelease(Mutable);
}

void realTimeAudioEngine_endpointStreamSuspendCallback(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t DerivedStorage;
  dispatch_queue_t *v6;
  void (__cdecl *v7)(void *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a2 != -16762)
  {
    a3[10] = a2;
    v6 = (dispatch_queue_t *)(DerivedStorage + 72);
    v7 = (void (__cdecl *)(void *))realTimeAudioEngine_suspendComplete;
  }
  else
  {
    v6 = (dispatch_queue_t *)(DerivedStorage + 120);
    v7 = (void (__cdecl *)(void *))realTimeAudioEngine_suspendInternal;
  }
  dispatch_async_f(*v6, a3, v7);
}

void realTimeAudioEngine_suspendInternal(uint64_t a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v3;
  const void *v4;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  if (!*DerivedStorage && DerivedStorage[128])
  {
    if (gLogCategory_APAudioEngineRealTime <= 50
      && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
    {
      CFSetGetCount(*((CFSetRef *)v3 + 19));
      LogPrintF();
    }
    if (CFSetGetCount(*((CFSetRef *)v3 + 19)))
    {
      if (gLogCategory_APAudioEngineRealTime <= 60
        && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFSetApplyFunction(*((CFSetRef *)v3 + 19), (CFSetApplierFunction)realTimeAudioEngine_deregisterHoseApplier, *(void **)a1);
    }
    realTimeAudioEngine_performSuspensionGutsInternal(*(_QWORD *)a1, 1);
    realTimeAudioEngine_removeStreamNotificationListeners(*(_QWORD *)a1, *((_QWORD *)v3 + 27));
    v4 = (const void *)*((_QWORD *)v3 + 27);
    if (v4)
    {
      CFRelease(v4);
      *((_QWORD *)v3 + 27) = 0;
    }
  }
  *(_DWORD *)(a1 + 40) = 0;
  dispatch_async_f(*((dispatch_queue_t *)v3 + 9), (void *)a1, (dispatch_function_t)realTimeAudioEngine_suspendComplete);
}

void realTimeAudioEngine_suspendComplete(CFTypeRef *a1)
{
  void (*v2)(CFTypeRef, _QWORD, CFTypeRef);
  CFTypeRef v3;

  CMBaseObjectGetDerivedStorage();
  v2 = (void (*)(CFTypeRef, _QWORD, CFTypeRef))a1[3];
  if (v2)
    v2(*a1, *((unsigned int *)a1 + 10), a1[4]);
  APSDispatchSectionLeave();
  v3 = a1[1];
  if (v3)
    CFRelease(v3);
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

double realTimeAudioEngine_deregisterHoseApplier(const void *a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = realTimeAudioEngine_audioHoseRegistrarDeregisterHoseInternal(a2, a1).n128_u64[0];
  return result;
}

void realTimeAudioEngine_endpointStreamResumeInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, CFMutableDictionaryRef, void (*)(uint64_t, int, uint64_t), uint64_t);
  int v14;
  int v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  if (!*(_BYTE *)(DerivedStorage + 128))
  {
    APSLogErrorAt();
    v15 = -15485;
    goto LABEL_22;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(DerivedStorage + 216) == v4)
  {
    APSLogErrorAt();
    goto LABEL_21;
  }
  if (!v4)
  {
LABEL_21:
    v15 = 0;
    goto LABEL_22;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v6 = Mutable;
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    v7 = FigCFDictionarySetInt32();
    if (v7)
    {
      v15 = v7;
    }
    else
    {
      v8 = FigCFDictionarySetInt32();
      if (v8)
      {
        v15 = v8;
      }
      else
      {
        v9 = CFDictionarySetData();
        if (v9)
        {
          v15 = v9;
        }
        else
        {
          v10 = FigCFDictionarySetFloat();
          if (v10)
          {
            v15 = v10;
          }
          else
          {
            v11 = FigCFDictionarySetFloat();
            if (v11)
            {
              v15 = v11;
            }
            else
            {
              if (gLogCategory_APAudioEngineRealTime <= 50
                && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              v12 = *(_QWORD *)(a1 + 8);
              v13 = *(uint64_t (**)(uint64_t, CFMutableDictionaryRef, void (*)(uint64_t, int, uint64_t), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
              if (v13)
              {
                v14 = v13(v12, v6, realTimeAudioEngine_endpointStreamResumeCallback, a1);
                if (!v14)
                {
                  FigCFDictionarySetValue();
                  CFRelease(v6);
                  return;
                }
                v15 = v14;
              }
              else
              {
                v15 = -12782;
              }
            }
          }
        }
      }
    }
    APSLogErrorAt();
    CFRelease(v6);
  }
  else
  {
    APSLogErrorAt();
    v15 = -15480;
  }
LABEL_22:
  *(_DWORD *)(a1 + 32) = v15;
  dispatch_async_f(*(dispatch_queue_t *)(v3 + 72), (void *)a1, (dispatch_function_t)realTimeAudioEngine_setEndpointStreamCallback);
}

void realTimeAudioEngine_endpointStreamResumeCallback(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD, void (*)(uint64_t, uint64_t, void *), uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    *(_DWORD *)(a3 + 32) = a2;
    v6 = *(_QWORD *)(a3 + 8);
    v7 = *(void (**)(uint64_t, _QWORD, void (*)(uint64_t, uint64_t, void *), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v7)
      v7(v6, 0, realTimeAudioEngine_endpointStreamResumeWithErrorSuspendCallback, a3);
  }
  else
  {
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 120), (void *)a3, (dispatch_function_t)realTimeAudioEngine_setEndpointStreamInternal);
  }
}

void realTimeAudioEngine_setEndpointStreamCallback(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD, _QWORD);
  const void *v3;

  CMBaseObjectGetDerivedStorage();
  v2 = *(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 16);
  if (v2)
    v2(*(_QWORD *)a1, *(unsigned int *)(a1 + 32), *(_QWORD *)(a1 + 24));
  APSDispatchSectionLeave();
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
  free((void *)a1);
}

void realTimeAudioEngine_setEndpointStreamInternal(uint64_t *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  realTimeAudioEngine_removeStreamNotificationListeners(*a1, *(_QWORD *)(DerivedStorage + 216));
  v3 = *(const void **)(DerivedStorage + 216);
  v4 = (const void *)a1[1];
  *(_QWORD *)(DerivedStorage + 216) = v4;
  if (v4)
    CFRetain(v4);
  if (v3)
    CFRelease(v3);
  if (*a1 && *(_QWORD *)(DerivedStorage + 216))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
  }
  realTimeAudioEngine_updateCryptor();
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 72), a1, (dispatch_function_t)realTimeAudioEngine_setEndpointStreamCallback);
}

void realTimeAudioEngine_endpointStreamResumeWithErrorSuspendCallback(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 72), a3, (dispatch_function_t)realTimeAudioEngine_setEndpointStreamCallback);
}

CFIndex realTimeAudioEngine_tas_serviceHoseMessageQueue(const __CFArray *a1)
{
  CFIndex result;

  result = CFArrayGetCount(a1);
  if (result >= 1)
  {
    CFArrayGetValueAtIndex(a1, 0);
    for (result = APSAtomicMessageQueueReadMessage(); (_DWORD)result; result = APSAtomicMessageQueueReadMessage())
    {
      if (gLogCategory_APAudioEngineRealTime <= 90
        && (gLogCategory_APAudioEngineRealTime != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
  }
  return result;
}

Class initCRCarPlayPreferences()
{
  Class result;

  if (CarKitLibrary_sOnce != -1)
    dispatch_once(&CarKitLibrary_sOnce, &__block_literal_global_12);
  result = objc_getClass("CRCarPlayPreferences");
  classCRCarPlayPreferences = (uint64_t)result;
  getCRCarPlayPreferencesClass = CRCarPlayPreferencesFunction;
  return result;
}

uint64_t CRCarPlayPreferencesFunction()
{
  return classCRCarPlayPreferences;
}

uint64_t APKeyHolderLegacyCreate(uint64_t a1, const void *a2, const void *a3, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  APSKeyHolderGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
    v12 = v7;
LABEL_18:
    APSLogErrorAt();
    return v12;
  }
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[1] = a3;
  if (a3)
    CFRetain(a3);
  *DerivedStorage = a2;
  if (a2)
    CFRetain(a2);
  v9 = RandomBytes();
  if ((_DWORD)v9)
  {
    v12 = v9;
    goto LABEL_18;
  }
  v10 = RandomBytes();
  if ((_DWORD)v10)
  {
    v12 = v10;
    goto LABEL_18;
  }
  v11 = APSCreateSecureMemAllocator();
  DerivedStorage[6] = v11;
  if (v11)
  {
    if (gLogCategory_APKeyHolderLegacy <= 30
      && (gLogCategory_APKeyHolderLegacy != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v12 = 0;
    *a4 = 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294895576;
  }
  return v12;
}

void legacyKeyHolder_Finalize()
{
  uint64_t DerivedStorage;
  uint64_t i;
  const void *v2;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APKeyHolderLegacy <= 30
    && (gLogCategory_APKeyHolderLegacy != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  for (i = 16; i != 32; ++i)
    *(_BYTE *)(DerivedStorage + i) = 0;
  do
    *(_BYTE *)(DerivedStorage + i++) = 0;
  while (i != 48);
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v3 = *(const void **)(DerivedStorage + 48);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
}

__CFString *legacyKeyHolder_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APKeyHolder %p>"), a1);
  return Mutable;
}

uint64_t legacyKeyHolder_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *DerivedStorage;
  CFTypeRef *v7;
  CFTypeRef v8;
  uint64_t result;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APKeyHolderLegacy <= 10
    && (gLogCategory_APKeyHolderLegacy != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (CFEqual(a2, CFSTR("HasPairingClient")))
  {
    v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (!*DerivedStorage)
      v7 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v8 = CFRetain(*v7);
    result = 0;
    *a4 = v8;
  }
  else
  {
    if (gLogCategory_APKeyHolderLegacy <= 90
      && (gLogCategory_APKeyHolderLegacy != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 4294954512;
  }
  return result;
}

uint64_t legacyKeyHolder_GetAuthenticationType()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  if (v0 && (v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) != 0)
    return v1(v0);
  else
    return 0;
}

uint64_t legacyKeyHolder_CopyMasterAESKeyAndIV(uint64_t a1, CFDataRef *a2, CFDataRef *a3)
{
  uint64_t DerivedStorage;
  CFDataRef v6;
  CFDataRef v7;
  CFDataRef v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = CFDataCreate(*(CFAllocatorRef *)(DerivedStorage + 48), (const UInt8 *)(DerivedStorage + 16), 16);
  if (v6)
  {
    v7 = v6;
    v8 = CFDataCreate(*(CFAllocatorRef *)(DerivedStorage + 48), (const UInt8 *)(DerivedStorage + 32), 16);
    if (v8)
    {
      v9 = 0;
      *a2 = v7;
      *a3 = v8;
    }
    else
    {
      v9 = 4294895576;
      APSLogErrorAt();
      CFRelease(v7);
    }
  }
  else
  {
    v9 = 4294895576;
    APSLogErrorAt();
  }
  return v9;
}

uint64_t legacyKeyHolder_CreateEncryptedMasterAESKeyAndIV(uint64_t a1, CFTypeRef *a2, CFDataRef *a3)
{
  uint64_t DerivedStorage;
  CFDataRef v6;
  CFDataRef v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, CFDataRef, uint64_t, CFTypeRef *);
  CFDataRef v11;
  uint64_t v12;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = CFDataCreate(*(CFAllocatorRef *)(DerivedStorage + 48), (const UInt8 *)(DerivedStorage + 16), 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)(DerivedStorage + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(DerivedStorage + 48);
      v10 = *(void (**)(uint64_t, CFDataRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 24);
      if (v10)
        v10(v8, v7, v9, &cf);
    }
    else
    {
      cf = v6;
      v7 = 0;
    }
    v11 = CFDataCreate(*(CFAllocatorRef *)(DerivedStorage + 48), (const UInt8 *)(DerivedStorage + 32), 16);
    if (v11)
    {
      v12 = 0;
      *a2 = cf;
      cf = 0;
      *a3 = v11;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
    v12 = 4294895576;
    APSLogErrorAt();
    if (v7)
LABEL_8:
      CFRelease(v7);
  }
  else
  {
    v12 = 4294895576;
    APSLogErrorAt();
  }
LABEL_9:
  if (cf)
    CFRelease(cf);
  return v12;
}

uint64_t legacyKeyHolder_UpdateMasterAESKeyAfterSharing()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t *v2;
  unsigned int (*v3)(uint64_t);
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t *);
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 8);
  if (!v1)
    return 0;
  v2 = (uint64_t *)DerivedStorage;
  v3 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v3)
    return 0;
  if (v3(v1) != 4)
    return 0;
  v4 = *v2;
  if (!*v2)
    return 0;
  v5 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 8);
  if (!v5)
  {
    v6 = 4294954514;
LABEL_11:
    APSLogErrorAt();
    return v6;
  }
  v6 = v5(v4, v2 + 2, 16, 0, 0, 16, v2 + 2);
  if ((_DWORD)v6)
    goto LABEL_11;
  return v6;
}

uint64_t legacyKeyHolder_CreateDerivedAESKeyAndIVForLegacyStream(uint64_t a1, uint64_t a2, CFTypeRef *a3, CFTypeRef *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t DerivedKeyLegacy;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  CFTypeRef v15;
  CFTypeRef cf;
  void *v17;
  void *v18;

  v17 = 0;
  v18 = 0;
  v15 = 0;
  cf = 0;
  v7 = (int)ASPrintF();
  v8 = (int)ASPrintF();
  DerivedKeyLegacy = legacyKeyHolder_createDerivedKeyLegacy(a1, 0, v7, (__CFData **)&cf);
  if ((_DWORD)DerivedKeyLegacy)
  {
    v11 = DerivedKeyLegacy;
    goto LABEL_24;
  }
  v10 = legacyKeyHolder_createDerivedKeyLegacy(a1, v17, v8, (__CFData **)&v15);
  if ((_DWORD)v10)
  {
    v11 = v10;
LABEL_24:
    APSLogErrorAt();
    if (!(_DWORD)v7)
      goto LABEL_10;
    goto LABEL_8;
  }
  if (a3)
  {
    *a3 = cf;
    cf = 0;
  }
  v11 = 0;
  if (a4)
  {
    *a4 = v15;
    v15 = 0;
  }
  if ((_DWORD)v7)
  {
LABEL_8:
    v12 = v18;
    do
    {
      *v12++ = 0;
      --v7;
    }
    while (v7);
  }
LABEL_10:
  if ((_DWORD)v8)
  {
    v13 = v17;
    do
    {
      *v13++ = 0;
      --v8;
    }
    while (v8);
  }
  if (v18)
  {
    free(v18);
    v18 = 0;
  }
  if (v17)
  {
    free(v17);
    v17 = 0;
  }
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  return v11;
}

uint64_t legacyKeyHolder_CreateDerivedKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CFIndex a6, __CFData **a7)
{
  uint64_t DerivedStorage;
  __CFData *Mutable;
  __CFData *v15;
  uint64_t v16;
  UInt8 *MutableBytePtr;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CFIndex, UInt8 *);
  uint64_t v19;
  uint64_t v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFDataCreateMutable(*(CFAllocatorRef *)(DerivedStorage + 48), a6);
  if (!Mutable)
  {
    APSLogErrorAt();
    return 4294895576;
  }
  v15 = Mutable;
  CFDataSetLength(Mutable, a6);
  v16 = *(_QWORD *)DerivedStorage;
  if (!v16)
  {
    v20 = 4294895575;
    goto LABEL_8;
  }
  MutableBytePtr = CFDataGetMutableBytePtr(v15);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CFIndex, UInt8 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 8);
  if (!v18)
  {
    v20 = 4294954514;
LABEL_8:
    APSLogErrorAt();
    goto LABEL_9;
  }
  v19 = v18(v16, a2, a3, a4, a5, a6, MutableBytePtr);
  if ((_DWORD)v19)
  {
    v20 = v19;
    goto LABEL_8;
  }
  v20 = 0;
  if (!a7)
  {
LABEL_9:
    CFRelease(v15);
    return v20;
  }
  *a7 = v15;
  return v20;
}

uint64_t legacyKeyHolder_createDerivedKeyLegacy(uint64_t a1, const void *a2, CC_LONG a3, __CFData **a4)
{
  uint64_t DerivedStorage;
  __CFData *Mutable;
  __CFData *v9;
  UInt8 *MutableBytePtr;
  uint64_t v11;
  uint64_t result;
  CC_SHA512_CTX v13;
  unsigned __int8 md[64];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v13, 0, sizeof(v13));
  Mutable = CFDataCreateMutable(*(CFAllocatorRef *)(DerivedStorage + 48), 16);
  if (Mutable)
  {
    v9 = Mutable;
    CFDataSetLength(Mutable, 16);
    CC_SHA512_Init(&v13);
    CC_SHA512_Update(&v13, a2, a3);
    CC_SHA512_Update(&v13, (const void *)(DerivedStorage + 16), 0x10u);
    CC_SHA512_Final(md, &v13);
    MutableBytePtr = CFDataGetMutableBytePtr(v9);
    v11 = 0;
    *(_OWORD *)MutableBytePtr = *(_OWORD *)md;
    do
      md[v11++] = 0;
    while (v11 != 64);
    if (a4)
    {
      result = 0;
      *a4 = v9;
    }
    else
    {
      CFRelease(v9);
      return 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294895576;
  }
  return result;
}

uint64_t APAuthenticationClientGetClassID()
{
  if (APAuthenticationClientGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APAuthenticationClientGetClassID_sRegisterOnce, &APAuthenticationClientGetClassID_sClassID, (dispatch_function_t)authenticationClient_registerBaseClass);
  return APAuthenticationClientGetClassID_sClassID;
}

uint64_t authenticationClient_registerBaseClass()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef authenticationClient_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APAuthenticationClient %p]"), a1);
}

void APDemoEndpointUIEventChannelInit(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  const void *v4;
  __CFDictionary *Mutable;
  uint64_t v6;
  void (*v7)(const void *, uint64_t);
  uint64_t CMBaseObject;
  unsigned int (*v9)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v10;
  unsigned int (*v11)(uint64_t, __CFDictionary *, CFTypeRef *);
  uint64_t v12;
  const void *v13;
  const void *v14;
  void *v15;
  uint64_t v16;
  CFTypeRef v17;
  CFTypeRef cf;
  _QWORD v19[2];
  _QWORD v20[3];

  v20[2] = *MEMORY[0x1E0C80C00];
  if (demoUIEventChannelGetShared_once != -1)
    dispatch_once(&demoUIEventChannelGetShared_once, &__block_literal_global_13);
  v2 = (_QWORD *)demoUIEventChannelGetShared_channel;
  v17 = 0;
  cf = 0;
  if (demoUIEventChannelGetShared_channel)
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)demoUIEventChannelGetShared_channel);
    if (!a1)
      goto LABEL_11;
    FigEndpointExtendedGetClassID();
    if (!CMBaseObjectIsMemberOfClass())
      goto LABEL_11;
    if (v2[1])
    {
      v3 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v3)
      {
        v4 = (const void *)v3;
        if (gLogCategory_APDemoManager <= 50
          && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v6 = v2[2];
        v7 = *(void (**)(const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 104);
        if (v7)
          v7(v4, v6);
        CFRelease(v4);
      }
      demoUIEventChannelClear(v2);
    }
    CMBaseObject = FigEndpointGetCMBaseObject();
    v9 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
    if (v9
      && (v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
          !v9(CMBaseObject, CFSTR("EndpointDescription"), *MEMORY[0x1E0C9AE00], &cf))
      && cf)
    {
      if (APSGetFBOPropertyInt64())
      {
        Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA4518], (const void *)*MEMORY[0x1E0CA4510]);
        CFDictionarySetInt64();
        CFDictionarySetInt64();
        v11 = *(unsigned int (**)(uint64_t, __CFDictionary *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 24)
                                                                                    + 88);
        if (!v11 || v11(a1, Mutable, &v17))
        {
          APSLogErrorAt();
        }
        else
        {
          v12 = FigCFWeakReferenceHolderCreateWithReferencedObject();
          v13 = (const void *)v2[2];
          v14 = v17;
          v2[1] = v12;
          v2[2] = v14;
          if (v14)
            v14 = CFRetain(v14);
          if (v13)
            CFRelease(v13);
          if (gLogCategory_APDemoManager <= 50)
          {
            if (gLogCategory_APDemoManager != -1 || (v14 = (const void *)_LogCategory_Initialize(), (_DWORD)v14))
              v14 = (const void *)LogPrintF();
          }
          v15 = (void *)MEMORY[0x1CAA40DD4](v14);
          if (demoUIEventChannelGetShared_once != -1)
            dispatch_once(&demoUIEventChannelGetShared_once, &__block_literal_global_13);
          v16 = demoUIEventChannelGetShared_channel;
          if (demoUIEventChannelGetShared_channel)
          {
            if (*(_QWORD *)(demoUIEventChannelGetShared_channel + 24))
            {
              if (gLogCategory_APDemoManager <= 90
                && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
            }
            else
            {
              v19[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 65291);
              v20[0] = CFSTR("PrimaryUsagePage");
              v19[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 65281);
              v20[1] = CFSTR("PrimaryUsagePage");
              objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, v19, 2);
              *(_QWORD *)(v16 + 24) = IOHIDEventSystemClientCreate();
              IOHIDEventSystemClientSetMatching();
              IOHIDEventSystemClientRegisterEventCallback();
              CFRunLoopGetMain();
              IOHIDEventSystemClientScheduleWithRunLoop();
            }
          }
          objc_autoreleasePoolPop(v15);
        }
        goto LABEL_13;
      }
    }
    else
    {
LABEL_11:
      APSLogErrorAt();
    }
    Mutable = 0;
LABEL_13:
    MEMORY[0x1CAA400E4](*v2);
    if (cf)
      CFRelease(cf);
    if (Mutable)
      CFRelease(Mutable);
    if (v17)
      CFRelease(v17);
  }
}

void demoUIEventChannelClear(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[1];
  if (v2)
  {
    CFRelease(v2);
    a1[1] = 0;
  }
  v3 = (const void *)a1[2];
  if (v3)
  {
    CFRelease(v3);
    a1[2] = 0;
  }
  if (a1[3])
  {
    CFRunLoopGetMain();
    IOHIDEventSystemClientUnscheduleWithRunLoop();
    IOHIDEventSystemClientUnregisterEventCallback();
    v4 = (const void *)a1[3];
    if (v4)
    {
      CFRelease(v4);
      a1[3] = 0;
    }
  }
}

uint64_t __demoUIEventChannelGetShared_block_invoke()
{
  uint64_t result;

  result = APSIsDemoModeEnabled();
  if ((_DWORD)result)
  {
    demoUIEventChannelGetShared_channel = (uint64_t)malloc_type_calloc(1uLL, 0x20uLL, 0x60040CD5974ACuLL);
    result = FigSimpleMutexCreate();
    *(_QWORD *)demoUIEventChannelGetShared_channel = result;
    if (gLogCategory_APDemoManager <= 50)
    {
      if (gLogCategory_APDemoManager != -1)
        return LogPrintF();
      result = _LogCategory_Initialize();
      if ((_DWORD)result)
        return LogPrintF();
    }
  }
  return result;
}

void demoHIDEventCallback()
{
  void *v0;
  uint64_t IntegerValue;
  uint64_t v2;
  _BOOL8 v3;
  void *v4;
  uint64_t v5;
  const __CFData *v6;
  _QWORD *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, const __CFData *, _QWORD, _QWORD);
  void *v12;
  uint64_t v13;

  v0 = (void *)MEMORY[0x1CAA40DD4]();
  v13 = 0;
  if (IOHIDEventGetType() == 6)
    goto LABEL_35;
  if (IOHIDEventGetType() == 3)
  {
    IntegerValue = IOHIDEventGetIntegerValue();
    v2 = IOHIDEventGetIntegerValue();
    if (IntegerValue != 45)
      goto LABEL_35;
    v3 = v2 == 1;
    v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    objc_msgSend(v4, "setValue:forKey:", CFSTR("BtnRingerPress"), CFSTR("DataEventType"));
    objc_msgSend(v4, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v3), CFSTR("DataValue"));
    if (gLogCategory_APDemoManager <= 30
      && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
    {
      v12 = v4;
      LogPrintF();
    }
    v5 = objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v4, 1, &v13, v12);
    if (v13)
    {
      APSLogErrorAt();
    }
    else
    {
      v6 = (const __CFData *)v5;
      if (!v5)
        goto LABEL_35;
      if (demoUIEventChannelGetShared_once != -1)
        dispatch_once(&demoUIEventChannelGetShared_once, &__block_literal_global_13);
      v7 = (_QWORD *)demoUIEventChannelGetShared_channel;
      if (!demoUIEventChannelGetShared_channel)
        goto LABEL_30;
      MEMORY[0x1CAA400CC](*(_QWORD *)demoUIEventChannelGetShared_channel);
      if (v7[1])
      {
        v8 = FigCFWeakReferenceHolderCopyReferencedObject();
        if (v8)
        {
          v9 = (const void *)v8;
          v10 = v7[2];
          if (v10
            && (v11 = *(unsigned int (**)(const void *, uint64_t, const __CFData *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 96)) != 0
            && !v11(v9, v10, v6, 0, 0))
          {
            if (gLogCategory_APDemoManager <= 30
              && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
            {
              CFDataGetLength(v6);
              LogPrintF();
            }
          }
          else
          {
            APSLogErrorAt();
          }
          MEMORY[0x1CAA400E4](*v7);
          CFRelease(v9);
          goto LABEL_30;
        }
        if (gLogCategory_APDemoManager <= 50
          && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        demoUIEventChannelClear(v7);
      }
      MEMORY[0x1CAA400E4](*v7);
    }
  }
LABEL_30:
  if (v13
    && gLogCategory_APDemoManager <= 90
    && (gLogCategory_APDemoManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_35:
  objc_autoreleasePoolPop(v0);
}

uint64_t APAirPlayAgentServicesServerStart()
{
  __CFDictionary *Mutable;
  uint64_t v1;
  uint64_t v2;

  if (gLogCategory_APAirPlayAgentServices <= 50
    && (gLogCategory_APAirPlayAgentServices != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CF75D0], CFSTR("com.apple.airplay.agent.services.allow"));
  v1 = APSXPCServerStart();
  if ((_DWORD)v1)
  {
    v2 = v1;
    if (gLogCategory_APAirPlayAgentServices <= 90
      && (gLogCategory_APAirPlayAgentServices != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_15;
    }
  }
  else
  {
    v2 = APSXPCServerAddCommandHandler();
    if ((_DWORD)v2
      && gLogCategory_APAirPlayAgentServices <= 90
      && (gLogCategory_APAirPlayAgentServices != -1 || _LogCategory_Initialize()))
    {
LABEL_15:
      LogPrintF();
    }
  }
  if (Mutable)
    CFRelease(Mutable);
  return v2;
}

uint64_t airplayAgentServicesServer_handleAirPlaySystemSenderProcessLaunched()
{
  uint64_t i;
  uint64_t (*v1)(CFTypeRef *);
  int v2;
  CFTypeRef v3;
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, const __CFString *, _QWORD);
  CFTypeRef cf;

  if (gLogCategory_APAirPlayAgentServices <= 50
    && (gLogCategory_APAirPlayAgentServices != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  for (i = 0; i != 4; ++i)
  {
    v1 = (uint64_t (*)(CFTypeRef *))airplayAgentServicesServer_handleAirPlaySystemSenderProcessLaunched_copyManagerFuncs[i];
    cf = 0;
    v2 = v1(&cf);
    v3 = cf;
    if (!v2)
    {
      CMBaseObject = FigEndpointManagerGetCMBaseObject();
      v5 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v5)
        v5(CMBaseObject, CFSTR("UnusedPropertyToForceServerConnection"), 0);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      v3 = cf;
    }
    if (v3)
      CFRelease(v3);
  }
  return 0;
}

uint64_t APAirPlayAgentServicesClientSendCommand()
{
  uint64_t v0;

  if (APAirPlayAgentServicesClientSendCommand_onceToken != -1)
    dispatch_once(&APAirPlayAgentServicesClientSendCommand_onceToken, &__block_literal_global_14);
  if (gLogCategory_APAirPlayAgentServices <= 50
    && (gLogCategory_APAirPlayAgentServices != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v0 = APSXPCClientSendCommandCreatingReply();
  if ((_DWORD)v0
    && gLogCategory_APAirPlayAgentServices <= 90
    && (gLogCategory_APAirPlayAgentServices != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v0;
}

void airplayAgentServicesClient_handleServerDisconnect()
{
  if (gLogCategory_APAirPlayAgentServices <= 50
    && (gLogCategory_APAirPlayAgentServices != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  _Exit(1);
}

uint64_t APEndpointDescriptionGetClassID()
{
  if (APEndpointDescriptionGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APEndpointDescriptionGetClassID_sRegisterOnce, &APEndpointDescriptionGetClassID_sClassID, (dispatch_function_t)endpointDescription_registerClass);
  return APEndpointDescriptionGetClassID_sClassID;
}

uint64_t endpointDescription_registerClass()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t APEndpointDescriptionGetTypeID()
{
  if (APEndpointDescriptionGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APEndpointDescriptionGetClassID_sRegisterOnce, &APEndpointDescriptionGetClassID_sClassID, (dispatch_function_t)endpointDescription_registerClass);
  return CMBaseClassGetCFTypeID();
}

uint64_t APEndpointDescriptionGetDeviceID(uint64_t a1)
{
  unsigned int (*v2)(uint64_t, const __CFString *, _QWORD, CFStringRef *);
  uint64_t v3;
  CFStringRef theString;
  char buffer[16];
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  theString = 0;
  *(_OWORD *)buffer = 0u;
  v7 = 0u;
  v2 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
  if (v2
    && !v2(a1, CFSTR("DeviceID"), *MEMORY[0x1E0C9AE00], &theString)
    && CFStringGetCString(theString, buffer, 32, 0x8000100u))
  {
    v3 = TextToHardwareAddressScalar();
  }
  else
  {
    APSLogErrorAt();
    v3 = 0;
  }
  if (theString)
    CFRelease(theString);
  return v3;
}

__CFString *APEndpointDescriptionCopyDebugString(uint64_t a1)
{
  uint64_t v2;
  __CFString *Mutable;
  void (*v4)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  void (*v5)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v6;
  CFTypeRef v7;
  uint64_t v8;
  CFTypeRef v10;
  CFTypeRef cf;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v10 = 0;
  cf = 0;
  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v4)
    v4(a1, CFSTR("Name"), v2, &cf);
  v5 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v5)
    v5(a1, CFSTR("Model"), v2, &v10);
  APSGetFBOPropertyInt64();
  v7 = v10;
  v6 = cf;
  v8 = SourceVersionToCString();
  CFStringAppendFormat(Mutable, 0, CFSTR("'%@' (%@ v%s)"), v6, v7, v8);
  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  return Mutable;
}

BOOL APEndpointDescriptionIsSourceVersionOlderThan(uint64_t a1, unsigned int a2)
{
  return APSGetFBOPropertyInt64() < a2;
}

CFStringRef endpointDescription_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APEndpointDescription %p]"), a1);
}

uint64_t APEndpointStreamLocalCreate(const __CFAllocator *a1, const void *a2, const void *a3, uint64_t a4, const void *a5, char a6, CFTypeRef *a7)
{
  uint64_t v13;
  uint64_t DerivedStorage;
  uint64_t v15;
  uint64_t v16;
  const void *Value;
  CFNumberRef v18;
  CFMutableDictionaryRef Mutable;
  int IntWithDefault;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int valuePtr;
  char v26;
  CFTypeRef v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  v26 = 0;
  valuePtr = 1;
  if (a5 && a3 && a7)
  {
    FigEndpointStreamAirPlayGetClassID();
    v13 = CMDerivedObjectCreate();
    if ((_DWORD)v13)
    {
      v23 = v13;
      APSLogErrorAt();
    }
    else
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      SNPrintF();
      *(_QWORD *)(DerivedStorage + 16) = os_transaction_create();
      SNPrintF();
      v15 = FigDispatchQueueCreateWithPriority();
      *(_QWORD *)(DerivedStorage + 8) = v15;
      if (v15)
      {
        SNPrintF();
        v16 = FigDispatchQueueCreateWithPriority();
        *(_QWORD *)(DerivedStorage + 200) = v16;
        if (v16)
        {
          *(_QWORD *)(DerivedStorage + 136) = FigSimpleMutexCreate();
          *(_QWORD *)(DerivedStorage + 24) = a2;
          if (a2)
            CFRetain(a2);
          *(_QWORD *)(DerivedStorage + 40) = a3;
          CFRetain(a3);
          *(_QWORD *)(DerivedStorage + 64) = a5;
          CFRetain(a5);
          Value = (const void *)FigCFDictionaryGetValue();
          if (Value)
            Value = CFRetain(Value);
          *(_QWORD *)(DerivedStorage + 48) = Value;
          valuePtr = 1;
          v18 = CFNumberCreate(a1, kCFNumberSInt32Type, &valuePtr);
          *(_QWORD *)(DerivedStorage + 152) = v18;
          if (v18)
          {
            Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            *(_QWORD *)(DerivedStorage + 176) = Mutable;
            if (Mutable)
            {
              CFDictionaryGetInt64();
              IntWithDefault = APSSettingsGetIntWithDefault();
              *(_BYTE *)(DerivedStorage + 57) = IntWithDefault != 0;
              if (IntWithDefault)
              {
                v21 = APSAudioFormatDescriptionListCreateForBufferedLocalReceiverEchoCancellationReference();
LABEL_15:
                v22 = 0;
                goto LABEL_18;
              }
              if (CFEqual(*(CFTypeRef *)(DerivedStorage + 40), (CFTypeRef)*MEMORY[0x1E0CA4888]))
              {
                v21 = localStream_copyBufferedSupportedAudioFormatList((uint64_t)v27, &v26);
                v22 = v26;
              }
              else
              {
                if (CFEqual(*(CFTypeRef *)(DerivedStorage + 40), (CFTypeRef)*MEMORY[0x1E0CA4880]))
                {
                  v21 = APSAudioFormatDescriptionListCreateForRealTimeLocalReceiver();
                  goto LABEL_15;
                }
                v22 = 0;
                v21 = 0;
              }
LABEL_18:
              *(_QWORD *)(DerivedStorage + 160) = 0;
              *(_BYTE *)(DerivedStorage + 192) = v22;
              *(_QWORD *)(DerivedStorage + 184) = v21;
              *(_QWORD *)(DerivedStorage + 32) = CFRetain(CFSTR("10CA1000-8AFF-4902-9124-F8506138A0D8"));
              *(_BYTE *)(DerivedStorage + 56) = a6;
              CFDictionaryGetInt64();
              *(_BYTE *)(DerivedStorage + 57) = APSSettingsGetIntWithDefault() != 0;
              APSAudioFormatDescriptionListCopyDebugString();
              if (gLogCategory_APEndpointStreamLocal <= 50
                && (gLogCategory_APEndpointStreamLocal != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              v23 = 0;
              *a7 = v27;
              return v23;
            }
          }
        }
      }
      APSLogErrorAt();
      v23 = 4294950535;
    }
  }
  else
  {
    APSLogErrorAt();
    v23 = 4294950536;
  }
  if (v27)
    CFRelease(v27);
  return v23;
}

uint64_t localStream_copyBufferedSupportedAudioFormatList(uint64_t a1, _BYTE *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigCFDictionaryGetNumberValue();
  if (FigCFNumberGetUInt64() != 2)
  {
    v4 = CMBaseObjectGetDerivedStorage();
    if (IsAppleTV() && !*(_QWORD *)(v4 + 128))
      APSLocalAudioCapabilityMonitorGetSharedInstance();
    if (*(_QWORD *)(DerivedStorage + 128))
    {
      APSLocalAudioCapabilityMonitorCopyProperty();
      APSLocalAudioCapabilityMonitorCopyProperty();
    }
  }
  v5 = APSAudioFormatDescriptionListCreateForBufferedReceiverWithAudioCapabilities();
  *a2 = 0;
  return v5;
}

void localStream_Finalize(const void *a1)
{
  _QWORD *DerivedStorage;
  NSObject *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  void *v14;
  const void *v15;
  NSObject *v16;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage[1];
  if (v3)
  {
    dispatch_release(v3);
    DerivedStorage[1] = 0;
  }
  localStream_dissociateInternal(a1, 0);
  v4 = (const void *)DerivedStorage[30];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[30] = 0;
  }
  v5 = (const void *)DerivedStorage[3];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)DerivedStorage[5];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)DerivedStorage[6];
  if (v7)
    CFRelease(v7);
  v8 = (const void *)DerivedStorage[4];
  if (v8)
    CFRelease(v8);
  v9 = (const void *)DerivedStorage[8];
  if (v9)
    CFRelease(v9);
  v10 = (const void *)DerivedStorage[18];
  if (v10)
    CFRelease(v10);
  v11 = (const void *)DerivedStorage[22];
  if (v11)
    CFRelease(v11);
  v12 = (const void *)DerivedStorage[20];
  if (v12)
    CFRelease(v12);
  v13 = (const void *)DerivedStorage[23];
  if (v13)
    CFRelease(v13);
  v14 = (void *)DerivedStorage[2];
  if (v14)
  {
    os_release(v14);
    DerivedStorage[2] = 0;
  }
  FigSimpleMutexDestroy();
  v15 = (const void *)DerivedStorage[27];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[27] = 0;
  }
  v16 = DerivedStorage[25];
  if (v16)
  {
    dispatch_release(v16);
    DerivedStorage[25] = 0;
  }
}

__CFString *localStream_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APEndpointStreamLocal %p '%@'>"), a1, *(_QWORD *)(DerivedStorage + 24));
  return Mutable;
}

uint64_t localStream_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const void *v9;
  const void **v10;
  uint64_t UInt32;
  uint64_t v12;
  CFTypeRef *v14;
  CFTypeRef v15;
  CFNumberRef v16;
  const void *v17;
  uint64_t v18;
  CFTypeRef v19;
  int IsFeatureEnabled;
  uint64_t valuePtr;
  const void *v22;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (gLogCategory_APEndpointStreamLocal <= 30
    && (gLogCategory_APEndpointStreamLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294950534;
  }
  if (!a2 || !a4)
  {
    APSLogErrorAt();
    return 4294950536;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4820]))
  {
    v9 = *(const void **)(DerivedStorage + 40);
LABEL_19:
    UInt32 = (uint64_t)CFRetain(v9);
LABEL_20:
    v12 = 0;
    *a4 = UInt32;
    return v12;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4790]))
  {
    v10 = (const void **)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(DerivedStorage + 208))
      v10 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_18;
  }
  if (CFEqual(a2, CFSTR("IsLocalStream")))
  {
    v10 = (const void **)MEMORY[0x1E0C9AE50];
LABEL_18:
    v9 = *v10;
    goto LABEL_19;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4778]))
  {
LABEL_17:
    v10 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_18;
  }
  if (CFEqual(a2, CFSTR("EndpointStreamShowInfo")))
  {
    UInt32 = (uint64_t)localStream_copyShowInfo();
    goto LABEL_20;
  }
  if (CFEqual(a2, CFSTR("IsPlaying")))
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 136));
    v14 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(DerivedStorage + 168))
      v14 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v15 = *v14;
LABEL_28:
    v15 = CFRetain(v15);
LABEL_29:
    *a4 = v15;
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 136));
    return 0;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4788]))
  {
    v9 = *(const void **)(DerivedStorage + 32);
    goto LABEL_19;
  }
  if (FigCFEqual())
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 136));
    APSAudioFormatDescriptionListGetMaxChannelCount();
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 136));
    goto LABEL_35;
  }
  if (CFEqual(a2, CFSTR("SupportedAPAudioFormats")))
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 136));
    valuePtr = APSAudioFormatDescriptionListGetLegacyFormatMask();
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 136));
    v16 = CFNumberCreate(a3, kCFNumberSInt64Type, &valuePtr);
    *a4 = v16;
    if (!v16)
    {
      APSLogErrorAt();
      return 4294950535;
    }
    return 0;
  }
  if (CFEqual(a2, CFSTR("SupportedAudioFormatList")))
  {
    if (!CFEqual(*(CFTypeRef *)(DerivedStorage + 40), (CFTypeRef)*MEMORY[0x1E0CA4888])
      || (MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 136)),
          v17 = *(const void **)(DerivedStorage + 184),
          MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 136)),
          !v17))
    {
      UInt32 = 0;
      goto LABEL_20;
    }
    goto LABEL_44;
  }
  if (FigCFEqual())
  {
    if (CFEqual(*(CFTypeRef *)(DerivedStorage + 40), (CFTypeRef)*MEMORY[0x1E0CA4888]))
    {
      MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 136));
      MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 136));
      v18 = APSAudioFormatDescriptionListCopyRichestFormatAsFigEndpointStreamAudioFormatDescription();
      if ((_DWORD)v18)
      {
        v12 = v18;
        APSLogErrorAt();
        return v12;
      }
      v19 = cf;
    }
    else
    {
      v19 = 0;
    }
    v12 = 0;
    goto LABEL_55;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA47D8]))
  {
    if (!CFEqual(*(CFTypeRef *)(DerivedStorage + 40), (CFTypeRef)*MEMORY[0x1E0CA4888]))
    {
      v12 = 0;
      *a4 = 0;
      return v12;
    }
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 136));
    MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 136));
    APSLogErrorAt();
    return 0;
  }
  if (FigCFEqual())
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 136));
    v15 = *(CFTypeRef *)(DerivedStorage + 160);
    if (!v15)
      goto LABEL_29;
    goto LABEL_28;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA46B0]))
  {
    MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 136));
    v15 = *(CFTypeRef *)(DerivedStorage + 144);
    if (!v15)
      goto LABEL_29;
    goto LABEL_28;
  }
  if (CFEqual(a2, CFSTR("HoseRegistrar")))
  {
    valuePtr = a1;
    v22 = 0;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 200), &valuePtr, (dispatch_function_t)localStream_copyRegistrar);
    v12 = 0;
    v19 = v22;
LABEL_55:
    *a4 = v19;
    return v12;
  }
  if (CFEqual(a2, CFSTR("SupportAPAP")))
  {
    IsFeatureEnabled = FigCFEqual();
    goto LABEL_67;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA47F8]))
  {
    v17 = (const void *)*MEMORY[0x1E0C9AE40];
    if ((APSSettingsGetIntWithDefault() || APSSettingsIsFeatureEnabled())
      && FigCFEqual())
    {
      v17 = (const void *)*MEMORY[0x1E0C9AE50];
    }
LABEL_44:
    v9 = v17;
    goto LABEL_19;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA47F0]))
  {
    IsFeatureEnabled = APSSettingsIsFeatureEnabled();
LABEL_67:
    v10 = (const void **)MEMORY[0x1E0C9AE50];
    if (!IsFeatureEnabled)
      v10 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_18;
  }
  if (CFEqual(a2, CFSTR("IsSidePlayStream")))
    goto LABEL_17;
  if (CFEqual(a2, CFSTR("NumberOfSubStreams")))
  {
LABEL_35:
    UInt32 = FigCFNumberCreateUInt32();
    goto LABEL_20;
  }
  if (gLogCategory_APEndpointStreamLocal <= 30
    && (gLogCategory_APEndpointStreamLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return 4294954512;
}

uint64_t localStream_SetProperty(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v6;
  NSObject *v7;
  uint64_t result;
  CFTypeID v9;
  CFTypeID v10;
  uint64_t v11;
  CFTypeID v12;
  const void *v13;
  NSObject *v14;
  _QWORD *v15;
  __CFDictionary *Mutable;
  __CFDictionary *v17;
  const void *v18;
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamLocal <= 30
    && (gLogCategory_APEndpointStreamLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294950534;
  }
  if (FigCFEqual())
  {
    if (!FigCFEqual())
    {
      APSLogErrorAt();
      return 4294954509;
    }
    if (a3)
    {
      v6 = CFGetTypeID(a3);
      if (v6 == CFNumberGetTypeID())
      {
        if (a1)
          CFRetain(a1);
        CFRetain(a3);
        v7 = *(NSObject **)(DerivedStorage + 200);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = __localStream_SetProperty_block_invoke;
        block[3] = &__block_descriptor_tmp_30;
        block[4] = DerivedStorage;
        block[5] = a3;
        block[6] = a1;
        dispatch_async(v7, block);
        return 0;
      }
    }
LABEL_63:
    APSLogErrorAt();
    return 4294950536;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      if (a3)
      {
        v10 = CFGetTypeID(a3);
        if (v10 == CFStringGetTypeID())
        {
          MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 136));
          v11 = CMBaseObjectGetDerivedStorage();
          if (!FigCFEqual())
          {
            if (gLogCategory_APEndpointStreamLocal <= 50
              && (gLogCategory_APEndpointStreamLocal != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (Mutable)
            {
              v17 = Mutable;
              CFDictionarySetValue(Mutable, CFSTR("ActiveBadgingFormatInfo"), a3);
              v18 = *(const void **)(v11 + 160);
              *(_QWORD *)(v11 + 160) = a3;
              CFRetain(a3);
              if (v18)
                CFRelease(v18);
              CMNotificationCenterGetDefaultLocalCenter();
              FigDispatchAsyncPostNotification();
              CFRelease(v17);
            }
            else
            {
              APSLogErrorAt();
            }
          }
          MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 136));
          return 0;
        }
      }
      goto LABEL_63;
    }
    if (FigCFEqual())
    {
      if (a3)
      {
        v12 = CFGetTypeID(a3);
        if (v12 != CFNumberGetTypeID())
          goto LABEL_63;
      }
      if (gLogCategory_APEndpointStreamLocal <= 50
        && (gLogCategory_APEndpointStreamLocal != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 136));
      v13 = *(const void **)(DerivedStorage + 144);
      *(_QWORD *)(DerivedStorage + 144) = a3;
      if (a3)
        CFRetain(a3);
      if (v13)
        CFRelease(v13);
      MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 136));
      v14 = *(NSObject **)(DerivedStorage + 200);
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 0x40000000;
      v20[2] = __localStream_SetProperty_block_invoke_2;
      v20[3] = &__block_descriptor_tmp_33;
      v20[4] = DerivedStorage;
      v20[5] = a3;
      v15 = v20;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (gLogCategory_APEndpointStreamLocal <= 30
          && (gLogCategory_APEndpointStreamLocal != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        return 4294954512;
      }
      if (gLogCategory_APEndpointStreamLocal <= 50
        && (gLogCategory_APEndpointStreamLocal != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v14 = *(NSObject **)(DerivedStorage + 200);
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 0x40000000;
      v19[2] = __localStream_SetProperty_block_invoke_3;
      v19[3] = &__block_descriptor_tmp_35_0;
      v19[4] = a1;
      v19[5] = a3;
      v15 = v19;
    }
    dispatch_sync(v14, v15);
    return 0;
  }
  if (!a3)
    goto LABEL_63;
  v9 = CFGetTypeID(a3);
  if (v9 != CFStringGetTypeID())
    goto LABEL_63;
  if (gLogCategory_APEndpointStreamLocal > 50)
    return 0;
  if (gLogCategory_APEndpointStreamLocal != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
  {
    LogPrintF();
    return 0;
  }
  return result;
}

void localStream_dissociateInternal(const void *a1, int a2)
{
  _BYTE *DerivedStorage;
  _BYTE *v5;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v5 = DerivedStorage;
    *DerivedStorage = 1;
    if (gLogCategory_APEndpointStreamLocal <= 30
      && (gLogCategory_APEndpointStreamLocal != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    localStream_suspendInternal(a1, 0, 0);
    if (*((_QWORD *)v5 + 16))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    if (a2)
    {
      if (*((_QWORD *)v5 + 1))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
      }
    }
  }
}

void localStream_suspendInternal(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  __CFDictionary *Mutable;
  __CFDictionary *v12;
  uint64_t ProtocolVTable;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD, _QWORD);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, __CFDictionary *);
  const void *v21;
  const void *v22;
  NSObject *v23;
  _QWORD block[7];
  int v25;
  int v26;
  uint64_t v27;
  CFTypeRef v28;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 208))
    goto LABEL_35;
  v7 = CMBaseObjectGetDerivedStorage();
  v28 = 0;
  v27 = 0;
  v26 = 0;
  if (*(_BYTE *)(v7 + 208))
  {
    v8 = v7;
    if (*(_QWORD *)(v7 + 240))
    {
      if (APSThreadSafeDictionaryCopyValueIfPresent()
        && APSThreadSafeDictionaryGetInt64IfPresent())
      {
        APSThreadSafeDictionaryGetInt32IfPresent();
        mach_absolute_time();
        UpTicksToSeconds();
        APSThreadSafeDictionarySetInt32();
        APSThreadSafeDictionaryRemoveValue();
      }
      v9 = *(const void **)(v8 + 240);
      if (v9)
      {
        CFRelease(v9);
        *(_QWORD *)(v8 + 240) = 0;
      }
    }
  }
  if (v28)
    CFRelease(v28);
  localStream_updateResumed((uint64_t)a1, 0);
  if (gLogCategory_APEndpointStreamLocal <= 50
    && (gLogCategory_APEndpointStreamLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v10 = *(_QWORD *)(DerivedStorage + 216);
  if (!v10)
  {
    v12 = 0;
LABEL_31:
    v22 = *(const void **)(DerivedStorage + 232);
    if (v22)
    {
      CFRelease(v22);
      *(_QWORD *)(DerivedStorage + 232) = 0;
    }
    if (!v12)
    {
LABEL_36:
      if (!a2)
        return;
      goto LABEL_37;
    }
    CFRelease(v12);
LABEL_35:
    LODWORD(v12) = 0;
    goto LABEL_36;
  }
  if (!*(_BYTE *)(DerivedStorage + 57))
  {
    v12 = 0;
LABEL_21:
    APSEndpointStreamAudioHoseProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v14 = *(_QWORD *)(ProtocolVTable + 16);
      if (v14)
      {
        v15 = *(void (**)(uint64_t, _QWORD, _QWORD))(v14 + 56);
        if (v15)
          v15(v10, 0, 0);
      }
    }
    v16 = *(_QWORD *)(DerivedStorage + 232);
    v17 = *(_QWORD *)(DerivedStorage + 216);
    APSEndpointStreamAudioHoseRegistrarProtocolGetProtocolID();
    v18 = CMBaseObjectGetProtocolVTable();
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 16);
      if (v19)
      {
        v20 = *(void (**)(uint64_t, uint64_t, __CFDictionary *))(v19 + 16);
        if (v20)
          v20(v16, v17, v12);
      }
    }
    APSEndpointStreamAudioHoseSBARInvalidate();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    localStream_updateHoseSBARRate((uint64_t)a1, 0);
    v21 = *(const void **)(DerivedStorage + 216);
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(DerivedStorage + 216) = 0;
    }
    goto LABEL_31;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v12 = Mutable;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CF73B0], (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = *(_QWORD *)(DerivedStorage + 216);
    goto LABEL_21;
  }
  APSLogErrorAt();
  LODWORD(v12) = -16761;
  if (!a2)
    return;
LABEL_37:
  CFRetain(a1);
  v23 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __localStream_suspendInternal_block_invoke;
  block[3] = &__block_descriptor_tmp_15;
  block[4] = a2;
  block[5] = a1;
  v25 = (int)v12;
  block[6] = a3;
  dispatch_async(v23, block);
}

void localStream_handleFormatInfoChanged(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  const void *v5;
  char v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = 0;
  v4 = (const void *)localStream_copyBufferedSupportedAudioFormatList(a2, &v6);
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 136));
  if (!FigCFEqual())
  {
    APSAudioFormatDescriptionListCopyDebugString();
    if (gLogCategory_APEndpointStreamLocal <= 50
      && (gLogCategory_APEndpointStreamLocal != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    APSAudioFormatDescriptionListCopyDebugString();
    if (gLogCategory_APEndpointStreamLocal <= 50
      && (gLogCategory_APEndpointStreamLocal != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_BYTE *)(DerivedStorage + 192) = v6;
    v5 = *(const void **)(DerivedStorage + 184);
    *(_QWORD *)(DerivedStorage + 184) = v4;
    if (v4)
      CFRetain(v4);
    if (v5)
      CFRelease(v5);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 136));
  if (v4)
    CFRelease(v4);
}

uint64_t localStream_updateResumed(uint64_t a1, int a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(result + 208) != a2)
  {
    *(_BYTE *)(result + 208) = a2;
    if (gLogCategory_APEndpointStreamLocal <= 50
      && (gLogCategory_APEndpointStreamLocal != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    localStream_updateIsPlaying();
  }
  return result;
}

uint64_t localStream_handleHoseSBARRateChanged(uint64_t a1, uint64_t a2)
{
  int Int64Ranged;

  CMBaseObjectGetDerivedStorage();
  Int64Ranged = CFDictionaryGetInt64Ranged();
  return localStream_updateHoseSBARRate(a2, Int64Ranged);
}

uint64_t localStream_updateHoseSBARRate(uint64_t a1, int a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(result + 224) != a2)
  {
    *(_DWORD *)(result + 224) = a2;
    if (gLogCategory_APEndpointStreamLocal <= 50
      && (gLogCategory_APEndpointStreamLocal != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    localStream_updateIsPlaying();
  }
  return result;
}

void __localStream_suspendInternal_block_invoke(uint64_t a1)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void localStream_updateIsPlaying()
{
  uint64_t DerivedStorage;
  int v1;
  __CFDictionary *Mutable;
  int v3;
  const void **v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 136));
  if (CFEqual(*(CFTypeRef *)(DerivedStorage + 40), (CFTypeRef)*MEMORY[0x1E0CA4880]))
  {
    v1 = *(unsigned __int8 *)(DerivedStorage + 208);
  }
  else if (CFEqual(*(CFTypeRef *)(DerivedStorage + 40), (CFTypeRef)*MEMORY[0x1E0CA4888]))
  {
    v1 = *(_DWORD *)(DerivedStorage + 224) != 0;
  }
  else
  {
    v1 = 0;
  }
  if (*(unsigned __int8 *)(DerivedStorage + 168) != v1)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_BYTE *)(DerivedStorage + 168) = v1;
    if (gLogCategory_APEndpointStreamLocal <= 50)
    {
      if (gLogCategory_APEndpointStreamLocal != -1
        || (v3 = _LogCategory_Initialize(), v1 = *(unsigned __int8 *)(DerivedStorage + 168), v3))
      {
        LogPrintF();
        v1 = *(unsigned __int8 *)(DerivedStorage + 168);
      }
    }
    v4 = (const void **)MEMORY[0x1E0C9AE40];
    if (v1)
      v4 = (const void **)MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, CFSTR("IsPlaying"), *v4);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(Mutable);
  }
  JUMPOUT(0x1CAA400E4);
}

__CFDictionary *localStream_copyShowInfo()
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  __CFDictionary *v2;
  const void **v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v2 = Mutable;
  v3 = (const void **)MEMORY[0x1E0C9AE50];
  if (!*(_BYTE *)(DerivedStorage + 208))
    v3 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(Mutable, CFSTR("Resumed"), *v3);
  CFDictionarySetValue(v2, CFSTR("Type"), *(const void **)(DerivedStorage + 40));
  CFDictionarySetValue(v2, CFSTR("Name"), *(const void **)(DerivedStorage + 24));
  return v2;
}

CFTypeRef localStream_copyRegistrar(uint64_t a1)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(CMBaseObjectGetDerivedStorage() + 232);
  if (result)
    result = CFRetain(result);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t localStream_Suspend(const void *a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t localStream_Resume(const void *a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t localStream_Dissociate(const void *a1)
{
  if (!*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    CFRetain(a1);
    APSDispatchAsyncFHelper();
  }
  return 0;
}

void localStream_suspendDispatchInternal(uint64_t a1)
{
  const void *v2;

  localStream_suspendInternal(*(const void **)a1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
}

void localStream_resumeDispatchInternal(uint64_t *a1)
{
  uint64_t *v1;
  const __CFDictionary *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  const void *Value;
  const void *v11;
  const void *v12;
  _BYTE *v13;
  const __CFAllocator **v14;
  _BYTE *v15;
  const void *v16;
  const void *v17;
  const __CFAllocator *v18;
  int v19;
  int v20;
  const void *v21;
  CFTypeRef v22;
  __CFDictionary *v23;
  __CFDictionary *v24;
  CFTypeRef v25;
  CFTypeID v26;
  const UInt8 *BytePtr;
  __int128 v28;
  __int128 v29;
  int v30;
  CFTypeRef v31;
  const void *v32;
  const void *v33;
  int v34;
  const void *v35;
  __CFDictionary *Mutable;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  int v42;
  uint64_t (*v43)(CFTypeRef, _QWORD, CFTypeRef);
  int v44;
  int v45;
  __CFDictionary *v46;
  uint64_t v47;
  uint64_t ProtocolVTable;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, CFTypeRef, __CFDictionary *, uint64_t *);
  int v51;
  uint64_t v52;
  CFTypeRef v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(CFTypeRef, uint64_t, uint64_t);
  NSObject *v58;
  CFTypeRef v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(CFTypeRef, _QWORD, _QWORD);
  uint64_t v63;
  CFTypeRef v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, CFTypeRef, __CFDictionary *);
  const void *v68;
  CFTypeRef v69;
  uint64_t v70;
  const void *v71;
  uint64_t v72;
  CFTypeRef v73;
  uint64_t v74;
  uint64_t *v75;
  void *context;
  CFTypeRef v77;
  uint64_t v78;
  CFTypeRef v79;
  CFTypeRef v80;
  CFTypeRef cf;
  char cStr[16];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;

  v1 = a1;
  v90 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v2 = (const __CFDictionary *)a1[1];
  v4 = a1[2];
  v72 = a1[3];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = DerivedStorage;
  v79 = 0;
  v80 = 0;
  v77 = 0;
  v78 = 0;
  context = (void *)v3;
  if (*(_BYTE *)DerivedStorage)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v20 = -16762;
    goto LABEL_83;
  }
  v7 = *(_QWORD *)(DerivedStorage + 40);
  if (v7 == *MEMORY[0x1E0CA4880] || v7 == *MEMORY[0x1E0CA4888] || v7 == *MEMORY[0x1E0CA4890])
  {
    if (*(_BYTE *)(DerivedStorage + 208))
      goto LABEL_125;
    v70 = *MEMORY[0x1E0CA4888];
    v74 = v4;
    v75 = v1;
    if (gLogCategory_APEndpointStreamLocal <= 50
      && (gLogCategory_APEndpointStreamLocal != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!v2)
      goto LABEL_31;
    Value = CFDictionaryGetValue(v2, CFSTR("EncryptionKey"));
    v69 = CFDictionaryGetValue(v2, CFSTR("InitialTransportAudioFormat"));
    v11 = CFDictionaryGetValue(v2, CFSTR("InitialTransportAudioFormatDescription"));
    v12 = CFDictionaryGetValue(v2, CFSTR("AudioSessionID"));
    CFDictionaryGetInt64();
    v13 = (_BYTE *)CMBaseObjectGetDerivedStorage();
    cf = 0;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    *(_OWORD *)cStr = 0u;
    v83 = 0u;
    v14 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
    if (!*v13)
    {
      v15 = v13;
      if (!v13[208])
      {
        v16 = (const void *)FigCFDictionaryGetValue();
        if (v16)
        {
          v71 = v12;
          if (APSThreadSafeDictionaryCopyValueIfPresent())
          {
            mach_absolute_time();
            APSThreadSafeDictionarySetInt64();
            v17 = (const void *)*((_QWORD *)v15 + 30);
            *((_QWORD *)v15 + 30) = v16;
            CFRetain(v16);
            if (v17)
              CFRelease(v17);
            v12 = v71;
          }
          else
          {
            APSThreadSafeDictionaryCreate();
            APSLogErrorAt();
          }
        }
      }
      if (cf)
        CFRelease(cf);
      v14 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
    }
    if (Value)
    {
      v18 = *v14;
      v19 = APSCryptorChaCha20Poly1305Create();
      if (v19)
      {
        v20 = v19;
      }
      else
      {
        if (v11)
        {
          v77 = CFRetain(v11);
LABEL_38:
          MEMORY[0x1CAA400CC](*(_QWORD *)(v6 + 136));
          if (v12)
            v31 = CFRetain(v12);
          else
            v31 = 0;
          *(_QWORD *)(v6 + 144) = v31;
          v32 = *(const void **)(v6 + 152);
          if (v32)
            v22 = CFRetain(v32);
          else
            v22 = 0;
          v33 = *(const void **)(v6 + 184);
          if (v33)
            v25 = CFRetain(v33);
          else
            v25 = 0;
          v34 = *(unsigned __int8 *)(v6 + 192);
          MEMORY[0x1CAA400E4](*(_QWORD *)(v6 + 136));
          if (APSAudioFormatDescriptionListContainsFormat())
          {
            v35 = *(const void **)(v6 + 216);
            if (v35)
            {
              CFRelease(v35);
              *(_QWORD *)(v6 + 216) = 0;
            }
            Mutable = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            v23 = Mutable;
            if (Mutable)
            {
              v73 = v22;
              v37 = (const void *)*MEMORY[0x1E0C9AE50];
              v38 = (const void *)*MEMORY[0x1E0C9AE40];
              if (*(_BYTE *)(v6 + 56))
                v39 = (const void *)*MEMORY[0x1E0C9AE50];
              else
                v39 = (const void *)*MEMORY[0x1E0C9AE40];
              CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CF73D8], v39);
              CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E0CF73E0], *(const void **)(v6 + 32));
              CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E0CF73F8], v37);
              CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E0CF73E8], v25);
              FigCFDictionarySetValueFromKeyInDict();
              FigCFDictionarySetValueFromKeyInDict();
              if (v34)
                v40 = v37;
              else
                v40 = v38;
              CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E0CF73F0], v40);
              FigCFDictionarySetValueFromKeyInDict();
              FigCFDictionarySetValue();
              FigCFDictionarySetValue();
              if (CFDictionaryContainsKey(v2, CFSTR("HoseRegistrar")))
              {
                v41 = CFDictionaryGetValue(v2, CFSTR("HoseRegistrar"));
                if (v41)
                  v41 = CFRetain(v41);
                *(_QWORD *)(v6 + 232) = v41;
                v21 = (const void *)CFStringCreateF();
                v42 = APSEndpointStreamAudioHoseSBARCreate();
                if (v42)
                {
                  v20 = v42;
                  APSLogErrorAt();
                  v24 = 0;
                  goto LABEL_128;
                }
                v43 = *(uint64_t (**)(CFTypeRef, _QWORD, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
                if (v43)
                {
                  v44 = v43(v80, *MEMORY[0x1E0CF7430], v73);
                  if (!v44)
                  {
                    CMNotificationCenterGetDefaultLocalCenter();
                    FigNotificationCenterAddWeakListener();
                    v45 = APSGetFBOPropertyInt64();
                    localStream_updateHoseSBARRate(v3, v45);
                    if (!*(_BYTE *)(v6 + 57))
                    {
                      v24 = 0;
                      goto LABEL_69;
                    }
                    v46 = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                    v24 = v46;
                    if (v46)
                    {
                      CFDictionarySetValue(v46, (const void *)*MEMORY[0x1E0CF73B0], v37);
LABEL_69:
                      v4 = v74;
                      v1 = v75;
                      v47 = *(_QWORD *)(v6 + 232);
                      APSEndpointStreamAudioHoseRegistrarProtocolGetProtocolID();
                      ProtocolVTable = CMBaseObjectGetProtocolVTable();
                      if (ProtocolVTable && (v49 = *(_QWORD *)(ProtocolVTable + 16)) != 0)
                      {
                        v50 = *(uint64_t (**)(uint64_t, CFTypeRef, __CFDictionary *, uint64_t *))(v49 + 8);
                        if (v50)
                        {
                          v51 = v50(v47, v80, v24, &v78);
                          if (v51)
                          {
                            v20 = v51;
                          }
                          else
                          {
                            v52 = v78;
                            if (*(_QWORD *)(v6 + 40) == v70 && !*(_QWORD *)(v78 + 8))
                            {
                              APSLogErrorAt();
                              v20 = -16760;
                              goto LABEL_82;
                            }
                            v53 = v80;
                            v54 = *(_QWORD *)(v6 + 232);
                            APSEndpointStreamAudioHoseProtocolGetProtocolID();
                            v55 = CMBaseObjectGetProtocolVTable();
                            if (v55 && (v56 = *(_QWORD *)(v55 + 16)) != 0)
                            {
                              v57 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(v56 + 56);
                              if (v57)
                              {
                                v20 = v57(v53, v52, v54);
                                if (!v20)
                                {
                                  *(_QWORD *)(v6 + 216) = v80;
                                  v80 = 0;
                                  CFDictionaryApplyFunction(*(CFDictionaryRef *)(v6 + 176), (CFDictionaryApplierFunction)localStream_applyCachedPropertyForSBARDictionaryCallback, context);
                                  ++*(_DWORD *)(v6 + 228);
                                  localStream_updateResumed((uint64_t)context, 1);
                                  goto LABEL_82;
                                }
                              }
                              else
                              {
                                v20 = -12782;
                              }
                            }
                            else
                            {
                              v20 = -12788;
                            }
                          }
                        }
                        else
                        {
                          v20 = -12782;
                        }
                      }
                      else
                      {
                        v20 = -12788;
                      }
                      APSLogErrorAt();
                      goto LABEL_82;
                    }
                    APSLogErrorAt();
                    v20 = -16761;
LABEL_128:
                    v4 = v74;
                    v1 = v75;
                    goto LABEL_82;
                  }
                  v20 = v44;
                }
                else
                {
                  v20 = -12782;
                }
                v4 = v74;
                v1 = v75;
                APSLogErrorAt();
                v24 = 0;
LABEL_82:
                v22 = v73;
                goto LABEL_83;
              }
              APSLogErrorAt();
              v21 = 0;
              v24 = 0;
              v20 = -16760;
              goto LABEL_128;
            }
            APSLogErrorAt();
            v21 = 0;
            v24 = 0;
            v20 = -16761;
          }
          else
          {
            APSLogErrorAt();
            v20 = APSSignalErrorAt();
            v21 = 0;
            v23 = 0;
            v24 = 0;
          }
LABEL_33:
          v4 = v74;
          v1 = v75;
          goto LABEL_83;
        }
        if (!v69 || (v26 = CFGetTypeID(v69), v26 != CFDataGetTypeID()) || CFDataGetLength((CFDataRef)v69) != 40)
        {
          APSLogErrorAt();
          v21 = 0;
          v22 = 0;
          v23 = 0;
          v24 = 0;
          v25 = 0;
          v20 = -16760;
          goto LABEL_33;
        }
        BytePtr = CFDataGetBytePtr((CFDataRef)v69);
        v28 = *(_OWORD *)BytePtr;
        v29 = *((_OWORD *)BytePtr + 1);
        *(_QWORD *)&v84 = *((_QWORD *)BytePtr + 4);
        *(_OWORD *)cStr = v28;
        v83 = v29;
        v30 = APSAudioFormatDescriptionCreateWithASBD();
        if (!v30)
          goto LABEL_38;
        v20 = v30;
      }
      APSLogErrorAt();
    }
    else
    {
LABEL_31:
      APSLogErrorAt();
      v20 = APSSignalErrorAt();
    }
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    goto LABEL_33;
  }
  APSLogErrorAt();
LABEL_125:
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
LABEL_83:
  if (v4)
  {
    CFRetain(context);
    v58 = *(NSObject **)(v6 + 8);
    *(_QWORD *)cStr = MEMORY[0x1E0C809B0];
    *(_QWORD *)&cStr[8] = 0x40000000;
    *(_QWORD *)&v83 = __localStream_resumeInternal_block_invoke;
    *((_QWORD *)&v83 + 1) = &__block_descriptor_tmp_41;
    *(_QWORD *)&v84 = v4;
    *((_QWORD *)&v84 + 1) = context;
    DWORD2(v85) = v20;
    *(_QWORD *)&v85 = v72;
    dispatch_async(v58, cStr);
  }
  if (v21)
    CFRelease(v21);
  if (v79)
    CFRelease(v79);
  if (v77)
    CFRelease(v77);
  if (v25)
    CFRelease(v25);
  if (v22)
    CFRelease(v22);
  if (v23)
    CFRelease(v23);
  v59 = v80;
  if (v80)
  {
    APSEndpointStreamAudioHoseProtocolGetProtocolID();
    v60 = CMBaseObjectGetProtocolVTable();
    if (v60)
    {
      v61 = *(_QWORD *)(v60 + 16);
      if (v61)
      {
        v62 = *(void (**)(CFTypeRef, _QWORD, _QWORD))(v61 + 56);
        if (v62)
          v62(v59, 0, 0);
      }
    }
    v63 = *(_QWORD *)(v6 + 232);
    v64 = v80;
    APSEndpointStreamAudioHoseRegistrarProtocolGetProtocolID();
    v65 = CMBaseObjectGetProtocolVTable();
    if (v65)
    {
      v66 = *(_QWORD *)(v65 + 16);
      if (v66)
      {
        v67 = *(void (**)(uint64_t, CFTypeRef, __CFDictionary *))(v66 + 16);
        if (v67)
          v67(v63, v64, v24);
      }
    }
    APSEndpointStreamAudioHoseSBARInvalidate();
    if (v80)
      CFRelease(v80);
  }
  if (v24)
    CFRelease(v24);
  if (*v1)
    CFRelease((CFTypeRef)*v1);
  v68 = (const void *)v1[1];
  if (v68)
    CFRelease(v68);
}

uint64_t localStream_applyCachedPropertyForSBARDictionaryCallback(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;

  result = CMBaseObjectGetDerivedStorage();
  v5 = *(_QWORD *)(result + 216);
  if (v5)
  {
    result = CMBaseObjectGetVTable();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 56);
    if (v6)
    {
      if (*MEMORY[0x1E0C9B0D0] == a2)
        v7 = 0;
      else
        v7 = a2;
      return v6(v5, a1, v7);
    }
  }
  return result;
}

void __localStream_resumeInternal_block_invoke(uint64_t a1)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void localStream_dissociateDispatchInternal(const void **a1)
{
  localStream_dissociateInternal(*a1, 1);
  CFRelease(*a1);
}

uint64_t localStream_isPassthroughSupportedForFormatDescription(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  FigEndpointStreamAirPlayGetFigEndpointStream();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APEndpointStreamLocal <= 10
    && (gLogCategory_APEndpointStreamLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MEMORY[0x1CAA400CC](*(_QWORD *)(DerivedStorage + 136));
  if (!a3)
  {
    APSLogErrorAt();
    v9 = 4294950536;
    goto LABEL_19;
  }
  if (!CFEqual(*(CFTypeRef *)(DerivedStorage + 40), (CFTypeRef)*MEMORY[0x1E0CA4888]))
  {
    APSLogErrorAt();
    v9 = 4294954514;
    goto LABEL_19;
  }
  if (!APSSettingsIsFeatureEnabled())
  {
    v9 = 0;
    *a3 = 0;
    goto LABEL_19;
  }
  v5 = APSAudioFormatDescriptionCreateWithFigEndpointStreamAudioFormatDescription();
  if ((_DWORD)v5)
  {
    v9 = v5;
LABEL_26:
    APSLogErrorAt();
    goto LABEL_19;
  }
  v6 = APSAudioFormatDescriptionListCreate();
  if ((_DWORD)v6)
  {
    v9 = v6;
    goto LABEL_26;
  }
  APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender();
  v7 = APSAudioFormatDescriptionListAddSupportedFormatsForPassthrough();
  if ((_DWORD)v7)
  {
    v9 = v7;
    goto LABEL_26;
  }
  if (APSAudioFormatDescriptionListContainsFormat())
    v8 = APSAudioFormatDescriptionListContainsFormat() != 0;
  else
    v8 = 0;
  APSAudioFormatDescriptionListCopyDebugString();
  if (gLogCategory_APEndpointStreamLocal <= 50
    && (gLogCategory_APEndpointStreamLocal != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v9 = 0;
  *a3 = v8;
LABEL_19:
  MEMORY[0x1CAA400E4](*(_QWORD *)(DerivedStorage + 136));
  return v9;
}

uint64_t APPairingClientCoreUtilsCreate(uint64_t a1, const void *a2, char a3, char a4, int a5, char a6, char a7, char a8, char a9, char a10, char a11, const void *a12, const void *a13, const void *a14, const void *a15, _QWORD *a16)
{
  uint64_t v20;
  uint64_t DerivedStorage;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  char v26;
  uint64_t v27;

  if (a15)
  {
    APPairingClientGetClassID();
    v20 = CMDerivedObjectCreate();
    if ((_DWORD)v20)
    {
      v27 = v20;
      APSLogErrorAt();
    }
    else
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (a2)
        v22 = CFRetain(a2);
      else
        v22 = 0;
      *(_QWORD *)(DerivedStorage + 16) = v22;
      if (a12)
        v23 = CFRetain(a12);
      else
        v23 = 0;
      *(_QWORD *)(DerivedStorage + 24) = v23;
      if (a13)
        v24 = CFRetain(a13);
      else
        v24 = 0;
      *(_QWORD *)(DerivedStorage + 32) = v24;
      if (a14)
      {
        v25 = CFRetain(a14);
        v24 = *(CFTypeRef *)(DerivedStorage + 32);
      }
      else
      {
        v25 = 0;
      }
      *(_QWORD *)(DerivedStorage + 40) = v25;
      if (v24)
        *(_QWORD *)DerivedStorage = objc_opt_new();
      *(_QWORD *)(DerivedStorage + 48) = CFRetain(a15);
      *(_BYTE *)(DerivedStorage + 56) = a3;
      *(_BYTE *)(DerivedStorage + 59) = a5;
      if (a5)
        v26 = 1;
      else
        v26 = a4;
      *(_BYTE *)(DerivedStorage + 57) = v26;
      *(_BYTE *)(DerivedStorage + 60) = a6;
      *(_BYTE *)(DerivedStorage + 61) = a7;
      *(_BYTE *)(DerivedStorage + 62) = a8;
      *(_BYTE *)(DerivedStorage + 63) = a9;
      *(_BYTE *)(DerivedStorage + 64) = a10;
      *(_BYTE *)(DerivedStorage + 65) = a11;
      if (gLogCategory_APPairingClientCoreUtils <= 50
        && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v27 = 0;
      *a16 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294895525;
  }
  return v27;
}

uint64_t APPairingClientCoreUtilsCreatePatchedPairedPeerWithPeerInfo(void *a1, uint64_t a2, _QWORD *a3)
{
  CFTypeRef v4;

  v4 = (CFTypeRef)objc_msgSend(a1, "patchedPairedPeerWithPeerInfo:", a2);
  if (a3)
  {
    if (v4)
      v4 = CFRetain(v4);
    *a3 = v4;
  }
  return 0;
}

uint64_t APPairingClientCoreUtilsPairedPeerDescriptionHasWoLInfo(void *a1)
{
  uint64_t result;
  uint64_t TypedValue;

  result = objc_msgSend(a1, "info");
  if (result)
  {
    objc_msgSend(a1, "info");
    CFArrayGetTypeID();
    TypedValue = CFDictionaryGetTypedValue();
    objc_msgSend(a1, "info");
    CFDataGetTypeID();
    return (TypedValue | CFDictionaryGetTypedValue()) != 0;
  }
  return result;
}

uint64_t APPairingClientCoreUtilsPerformAddPairing()
{
  uint64_t v0;
  uint64_t v1;

  v0 = PairingSessionCreate();
  if ((_DWORD)v0)
  {
    v1 = v0;
LABEL_9:
    APSLogErrorAt();
    return v1;
  }
  if (gLogCategory_APPairingClientCoreUtils <= 50
    && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  PairingSessionSetLogging();
  PairingSessionSetProperty();
  PairingSessionSetProperty();
  PairingSessionSetProperty();
  v1 = coreUtilsPairing_performAdminPairingOperation();
  if ((_DWORD)v1)
    goto LABEL_9;
  return v1;
}

uint64_t coreUtilsPairing_performAdminPairingOperation()
{
  uint64_t v0;
  const __CFAllocator *v1;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v3;
  uint64_t v4;
  size_t lengthAtOffsetOut;
  void *v7;
  char *dataPointerOut;
  void *v9;

  v7 = 0;
  dataPointerOut = 0;
  lengthAtOffsetOut = 0;
  v0 = PairingSessionExchange();
  if ((_DWORD)v0)
  {
LABEL_24:
    v4 = v0;
    goto LABEL_16;
  }
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    CMBaseObjectGetDerivedStorage();
    v9 = 0;
    Mutable = CFDictionaryCreateMutable(v1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      break;
    v3 = Mutable;
    if (!TMIsAutomaticTimeEnabled())
      goto LABEL_7;
    CFAbsoluteTimeGetCurrent();
    ASPrintF();
    if (v9)
    {
      CFDictionarySetCString();
LABEL_7:
      CFDictionarySetData();
      v4 = APTransportStreamSendPlistMessageCreatingReply();
      goto LABEL_8;
    }
    v4 = 4294895526;
    APSLogErrorAt();
LABEL_8:
    CFRelease(v3);
    if (v9)
      free(v9);
    if ((_DWORD)v4)
      goto LABEL_16;
    if (v7)
    {
      free(v7);
      v7 = 0;
    }
    lengthAtOffsetOut = 0;
    dataPointerOut = 0;
    v0 = PairingSessionExchange();
    if ((_DWORD)v0)
      goto LABEL_24;
  }
  v4 = 4294895526;
  APSLogErrorAt();
LABEL_16:
  if (v7)
  {
    free(v7);
    v7 = 0;
  }
  if ((_DWORD)v4
    && gLogCategory_APPairingClientCoreUtils <= 90
    && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v4;
}

uint64_t APPairingClientCoreUtilsPerformRemovePairing()
{
  uint64_t v0;
  uint64_t v1;

  v0 = PairingSessionCreate();
  if ((_DWORD)v0)
  {
    v1 = v0;
LABEL_9:
    APSLogErrorAt();
    return v1;
  }
  if (gLogCategory_APPairingClientCoreUtils <= 50
    && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  PairingSessionSetLogging();
  PairingSessionSetProperty();
  v1 = coreUtilsPairing_performAdminPairingOperation();
  if ((_DWORD)v1)
    goto LABEL_9;
  return v1;
}

uint64_t APPairingClientCoreUtilsPerformListPairings(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;

  v4 = PairingSessionCreate();
  if (v4)
    goto LABEL_9;
  if (gLogCategory_APPairingClientCoreUtils <= 50
    && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  PairingSessionSetLogging();
  v4 = coreUtilsPairing_performAdminPairingOperation();
  if (v4)
LABEL_9:
    APSLogErrorAt();
  else
    *a2 = PairingSessionCopyProperty();
  return v4;
}

id *APPairingClientCoreUtilsCopyGroupInfo(uint64_t a1, id **a2)
{
  id *result;

  result = (id *)CMBaseObjectGetDerivedStorage();
  if (result[4])
  {
    result = (id *)(id)objc_msgSend(*result, "pairingGroupInfoForPairingGroupID:");
    *a2 = result;
  }
  return result;
}

uint64_t APPairingClientCoreUtilsUpdateGroupInfo(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 32))
  {
    v4 = objc_msgSend(*(id *)DerivedStorage, "updatePairingGroupInfo:forPairingGroupID:", a2);
    if ((_DWORD)v4)
      APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    return 4294895525;
  }
  return v4;
}

uint64_t APPairingClientCoreUtilsIsValidPairingGroupInfo(const __CFDictionary *a1, const void *a2, CFDataRef theData)
{
  const __CFData *TypedValue;
  const __CFData *v7;
  const UInt8 *BytePtr;
  CC_LONG Length;
  const UInt8 *v10;
  BOOL v11;
  BOOL v12;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  if (a1 && a2 && theData && CFDataGetLength(theData) == 32)
  {
    if (!CFDictionaryContainsKey(a1, a2))
      return 1;
    CFDataGetTypeID();
    TypedValue = (const __CFData *)CFDictionaryGetTypedValue();
    if (TypedValue)
    {
      v7 = TypedValue;
      BytePtr = CFDataGetBytePtr(TypedValue);
      Length = CFDataGetLength(v7);
      CC_SHA256(BytePtr, Length, (unsigned __int8 *)&v15);
      v10 = CFDataGetBytePtr(theData);
      v11 = *(_QWORD *)v10 == (_QWORD)v15 && *((_QWORD *)v10 + 1) == *((_QWORD *)&v15 + 1);
      v12 = v11 && *((_QWORD *)v10 + 2) == (_QWORD)v16;
      if (v12 && *((_QWORD *)v10 + 3) == *((_QWORD *)&v16 + 1))
        return 1;
    }
  }
  APSLogErrorAt();
  return 0;
}

uint64_t APPairingClientCoreUtilsCreateCombinedPairingGroupInfo(const __CFDictionary *a1, const __CFDictionary *a2, const void *a3, CFDataRef theData, _QWORD *a5)
{
  const void *Value;
  const void *v11;
  const void *v12;
  const void *MutableCopy;
  uint64_t v14;

  if (!a1)
  {
    v14 = 4294895525;
LABEL_25:
    APSLogErrorAt();
    return v14;
  }
  if (!a2)
  {
    v14 = 4294895525;
    goto LABEL_25;
  }
  if (!a3)
  {
    v14 = 4294895525;
    goto LABEL_25;
  }
  if (!theData)
  {
    v14 = 4294895525;
    goto LABEL_25;
  }
  if (!a5)
  {
    v14 = 4294895525;
    goto LABEL_25;
  }
  if (!APPairingClientCoreUtilsIsValidPairingGroupInfo(a1, a3, theData))
  {
    v14 = 4294895525;
    goto LABEL_25;
  }
  if (!APPairingClientCoreUtilsIsValidPairingGroupInfo(a2, a3, theData))
  {
    v14 = 4294895525;
    goto LABEL_25;
  }
  Value = CFDictionaryGetValue(a1, CFSTR("groupID"));
  if (!Value)
  {
    v14 = 4294895525;
    goto LABEL_25;
  }
  v11 = Value;
  v12 = CFDictionaryGetValue(a2, CFSTR("groupID"));
  if (v12 && !CFEqual(v11, v12))
  {
    v14 = 4294895525;
    goto LABEL_25;
  }
  MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
  CFDictionaryMergeDictionary();
  if (APPairingClientCoreUtilsIsValidPairingGroupInfo((const __CFDictionary *)MutableCopy, a3, theData))
  {
    v14 = 0;
    *a5 = MutableCopy;
  }
  else
  {
    v14 = 4294895525;
    APSLogErrorAt();
    if (MutableCopy)
      CFRelease(MutableCopy);
  }
  return v14;
}

uint64_t APPairingClientCoreUtilsCreateUnpairedPeersFromGroupInfo(uint64_t a1, const __CFArray *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7;

  if (!a1)
  {
    v5 = 4294895525;
LABEL_9:
    APSLogErrorAt();
    return v5;
  }
  if (!a3)
  {
    v5 = 4294895525;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  if (a2)
  {
    CFArrayGetCount(a2);
    CFArrayApplyBlock();
  }
  v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 0);
  CFDictionaryApplyBlock();
  v5 = 0;
  *a3 = v7;
  return v5;
}

void sub_1C94CC17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_1C94CC458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C94CC6FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void coreUtilsPairing_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 32);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 40);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 48);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  objc_msgSend(*(id *)DerivedStorage, "invalidate");

  *(_QWORD *)DerivedStorage = 0;
}

__CFString *coreUtilsPairing_CopyDebugDescription()
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APPairingClientCoreUtils for '%@'>"), *(_QWORD *)(DerivedStorage + 16));
  return Mutable;
}

uint64_t coreUtilsPairing_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFDataRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t TranscriptResultMFi4;
  CFDataRef v9;
  uint64_t i;
  uint64_t v11;
  _OWORD v13[4];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    v11 = 4294895525;
LABEL_16:
    APSLogErrorAt();
    return v11;
  }
  if (!a4)
  {
    v11 = 4294895525;
    goto LABEL_16;
  }
  v7 = DerivedStorage;
  if (!CFEqual(a2, CFSTR("PairingTranscriptData")))
    return 4294954512;
  memset(v13, 0, sizeof(v13));
  if (!*(_QWORD *)(v7 + 8))
  {
    APSLogErrorAt();
    return 4294895524;
  }
  TranscriptResultMFi4 = PairingSessionGenerateTranscriptResultMFi4();
  if ((_DWORD)TranscriptResultMFi4)
  {
    v11 = TranscriptResultMFi4;
    goto LABEL_16;
  }
  v9 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v13, 64);
  if (v9)
  {
    for (i = 0; i != 64; ++i)
      *((_BYTE *)v13 + i) = 0;
    v11 = 0;
    *a4 = v9;
  }
  else
  {
    APSLogErrorAt();
    return 4294895526;
  }
  return v11;
}

uint64_t coreUtilsPairing_DeriveKey()
{
  uint64_t v0;

  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    v0 = PairingSessionDeriveKey();
    if ((_DWORD)v0)
      APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    return 4294895524;
  }
  return v0;
}

BOOL coreUtilsPairing_IsPeerKnown(uint64_t a1)
{
  const __CFString *v2;
  const void *v3;
  _BOOL8 v4;
  const void *v6;
  char buffer[16];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  *(_OWORD *)buffer = 0u;
  v8 = 0u;
  v6 = 0;
  v2 = *(const __CFString **)(CMBaseObjectGetDerivedStorage() + 24);
  if (!v2)
    return 0;
  CFStringGetCString(v2, buffer, 128, 0x8000100u);
  if (coreUtilsPairing_createAirPlayPairingSession(a1, 0, 0, 0, &v6))
  {
    APSLogErrorAt();
    v4 = 0;
    v3 = v6;
    if (!v6)
      return v4;
    goto LABEL_4;
  }
  v3 = v6;
  v4 = PairingSessionFindPeer() == 0;
  if (v3)
LABEL_4:
    CFRelease(v3);
  return v4;
}

uint64_t coreUtilsPairing_PerformSetup(uint64_t a1, const __CFString *a2, int a3, int a4, CFMutableDictionaryRef *a5, _QWORD *a6, uint64_t *a7, _QWORD *a8)
{
  _BYTE *DerivedStorage;
  _BYTE *v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v17 = DerivedStorage;
  DerivedStorage[58] = 0;
  if (a4)
  {
    v18 = 4;
  }
  else if (DerivedStorage[57])
  {
    if (DerivedStorage[59])
      v18 = 5;
    else
      v18 = 3;
  }
  else
  {
    v18 = 2 * (a3 != 0);
  }
  if (a3)
  {
    if (a2
      && ((v19 = coreUtilsPairing_performSetupInternal(a1, a2, v18, DerivedStorage[64], a5, a6, a7, a8),
           v19 != 200401)
       || v17[56]))
    {
      v20 = v19 == 200470;
    }
    else
    {
      v19 = coreUtilsPairing_sendShowPairPINRequest(*((_QWORD *)v17 + 6), v18);
      v20 = v19 == 0;
    }
    if (v20)
      return 200401;
    else
      return v19;
  }
  else
  {
    v21 = coreUtilsPairing_performSetupInternal(a1, CFSTR("3939"), v18, DerivedStorage[64], a5, a6, a7, a8);
    if (v21 == 200401)
      v22 = 200403;
    else
      v22 = v21;
    if ((_DWORD)v22)
      APSLogErrorAt();
  }
  return v22;
}

uint64_t coreUtilsPairing_PerformVerification(uint64_t a1, _QWORD *a2)
{
  _BYTE *DerivedStorage;
  _BOOL4 v4;
  int v5;
  uint64_t v6;
  const void *v7;
  uint64_t *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t AirPlayPairingSession;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const __CFDictionary *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFAllocator *v20;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v22;
  uint64_t DataPointer;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *PairedPeer;
  const __CFDictionary *v28;
  const __CFArray *v29;
  CFTypeRef v30;
  uint64_t Current;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  const __CFDictionary *v36;
  int v37;
  int v39[2];
  CFTypeRef cf;
  char v41;
  size_t lengthAtOffsetOut;
  void *v43;
  char *dataPointerOut;
  void *v45;
  int CombinedPairingGroupInfo;
  char buffer[16];
  __int128 v48;
  CFTypeRef v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char __str[8];
  const __CFString *v58;
  _QWORD v59[3];

  v59[1] = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[64])
    v4 = DerivedStorage[66] == 0;
  else
    v4 = 0;
  if (DerivedStorage[58])
    return 0;
  if (DerivedStorage[60])
  {
    v5 = 8;
  }
  else if (DerivedStorage[61])
  {
    if (DerivedStorage[62])
      v5 = 7;
    else
      v5 = 6;
  }
  else if (DerivedStorage[57])
  {
    if (DerivedStorage[59])
      v5 = 5;
    else
      v5 = 3;
  }
  else
  {
    v5 = 2;
  }
  v6 = CMBaseObjectGetDerivedStorage();
  v43 = 0;
  dataPointerOut = 0;
  *(_OWORD *)buffer = 0u;
  v48 = 0u;
  lengthAtOffsetOut = 0;
  v41 = 0;
  *(_QWORD *)v39 = 0;
  cf = 0;
  v8 = (uint64_t *)(v6 + 8);
  v7 = *(const void **)(v6 + 8);
  if (v7)
  {
    CFRelease(v7);
    *v8 = 0;
  }
  if (gLogCategory_APPairingClientCoreUtils <= 50
    && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
  {
    v9 = v5 - 6;
    if (v9 > 2)
      v10 = "AP";
    else
      v10 = off_1E826AF08[v9];
    v33 = (uint64_t)v10;
    Current = a1;
    LogPrintF();
  }
  if (v5 == 8)
  {
    v49[0] = 0;
    v11 = PairingSessionCreate();
    if (!(_DWORD)v11)
    {
      PairingSessionSetFlags();
      PairingSessionSetLogging();
      PairingSessionSetSignBytesHandler_b();
      PairingSessionSetVerifySignatureHandler_b();
LABEL_32:
      *v8 = (uint64_t)v49[0];
      goto LABEL_36;
    }
LABEL_138:
    v18 = v11;
    APSLogErrorAt();
LABEL_144:
    APSLogErrorAt();
    goto LABEL_119;
  }
  if ((v5 & 0xE) == 6)
  {
    v49[0] = 0;
    v11 = PairingSessionCreate();
    if (!(_DWORD)v11)
    {
      PairingSessionSetFlags();
      PairingSessionSetLogging();
      goto LABEL_32;
    }
    goto LABEL_138;
  }
  AirPlayPairingSession = coreUtilsPairing_createAirPlayPairingSession(a1, 3, 0, v4, v8);
  if ((_DWORD)AirPlayPairingSession)
  {
    v18 = AirPlayPairingSession;
    goto LABEL_144;
  }
  CFStringGetCString(*(CFStringRef *)(v6 + 16), buffer, 32, 0x8000100u);
  v13 = PairingSessionSetIdentifier();
  if ((_DWORD)v13)
  {
    v18 = v13;
    goto LABEL_144;
  }
  APPairingClientCoreUtilsCopyGroupInfo(a1, (id **)v39);
LABEL_36:
  if (gLogCategory_APPairingClientCoreUtils <= 50
    && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
  {
    v14 = v5 - 6;
    if (v14 > 2)
      v15 = "AP";
    else
      v15 = off_1E826AF08[v14];
    v33 = (uint64_t)v15;
    v34 = *v8;
    Current = a1;
    LogPrintF();
  }
  v16 = *(const __CFDictionary **)v39;
  if (*(_QWORD *)v39)
  {
    if (APPairingClientCoreUtilsIsValidPairingGroupInfo(*(const __CFDictionary **)v39, *(const void **)(v6 + 24), *(CFDataRef *)(v6 + 40)))
    {
      if (gLogCategory_APPairingClientCoreUtils <= 30
        && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
      {
        v33 = *v8;
        v34 = (uint64_t)v16;
        Current = a1;
        LogPrintF();
      }
      v17 = PairingSessionSetProperty();
      if ((_DWORD)v17)
      {
        v18 = v17;
        if (gLogCategory_APPairingClientCoreUtils <= 90
          && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_118;
      }
    }
    else
    {
      if (gLogCategory_APPairingClientCoreUtils <= 60
        && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
      {
        Current = a1;
        v33 = *v8;
        LogPrintF();
      }
      CFRelease(v16);
      v16 = 0;
      *(_QWORD *)v39 = 0;
    }
  }
  v36 = v16;
  v37 = v5;
  dataPointerOut = 0;
  lengthAtOffsetOut = 0;
  v41 = 0;
  v19 = PairingSessionExchange();
  if ((_DWORD)v19)
  {
LABEL_132:
    v18 = v19;
    goto LABEL_117;
  }
  v35 = a2;
  v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (!v41)
  {
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    CMBaseObjectGetDerivedStorage();
    v45 = 0;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    *(_OWORD *)v49 = 0u;
    v50 = 0u;
    Mutable = CFDictionaryCreateMutable(v20, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      v18 = 4294895526;
      APSLogErrorAt();
      goto LABEL_117;
    }
    v22 = Mutable;
    APSGetDeviceNameCString();
    CFDictionarySetCString();
    snprintf(__str, 0x20uLL, "%d", v37);
    CFDictionarySetCString();
    CFDictionarySetValue(v22, CFSTR("X-Apple-PD"), CFSTR("1"));
    if (TMIsAutomaticTimeEnabled())
    {
      Current = (uint64_t)CFAbsoluteTimeGetCurrent();
      ASPrintF();
      if (!v45)
      {
        v18 = 4294895526;
        APSLogErrorAt();
        goto LABEL_73;
      }
      CFDictionarySetCString();
    }
    CFDictionarySetData();
    if (gLogCategory_APPairingClientCoreUtils <= 10
      && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
    {
      Current = a1;
      v33 = (uint64_t)v22;
      LogPrintF();
    }
    v18 = APTransportStreamSendPlistMessageCreatingReply();
LABEL_73:
    CFRelease(v22);
    if (v45)
      free(v45);
    if ((_DWORD)v18)
      goto LABEL_117;
    if (v43)
    {
      free(v43);
      v43 = 0;
    }
    lengthAtOffsetOut = 0;
    dataPointerOut = 0;
    if (cf)
    {
      DataPointer = CMBlockBufferGetDataPointer((CMBlockBufferRef)cf, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
      if ((_DWORD)DataPointer)
      {
        v18 = DataPointer;
        APSLogErrorAt();
        goto LABEL_117;
      }
    }
    v19 = PairingSessionExchange();
    if ((_DWORD)v19)
      goto LABEL_132;
  }
  if (gLogCategory_APPairingClientCoreUtils <= 50
    && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
  {
    v24 = v37 - 6;
    if (v24 > 2)
      v25 = "AP";
    else
      v25 = off_1E826AF08[v24];
    v33 = (uint64_t)v25;
    Current = a1;
    LogPrintF();
  }
  *(_BYTE *)(v6 + 66) = v4;
  CombinedPairingGroupInfo = 0;
  v26 = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)__str = 0;
  v45 = 0;
  if (*(_QWORD *)(v26 + 8))
  {
    PairedPeer = (void *)PairingSessionGetPairedPeer();
    if (CombinedPairingGroupInfo)
      goto LABEL_139;
    if (!v16)
      goto LABEL_94;
    v58 = CFSTR("groupInfo");
    v59[0] = v16;
    PairedPeer = (void *)objc_msgSend(PairedPeer, "patchedPairedPeerWithPeerInfo:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v59, &v58, 1));
    CombinedPairingGroupInfo = objc_msgSend(*(id *)v26, "savePairedPeer:", PairedPeer);
    if (CombinedPairingGroupInfo)
    {
LABEL_139:
      APSLogErrorAt();
LABEL_94:
      v28 = 0;
    }
    else
    {
      v28 = (const __CFDictionary *)PairingSessionCopyProperty();
      if (v28)
      {
        if (gLogCategory_APPairingClientCoreUtils <= 30
          && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
        {
          v33 = *(_QWORD *)(v26 + 8);
          v34 = (uint64_t)v28;
          Current = a1;
          LogPrintF();
        }
        CombinedPairingGroupInfo = APPairingClientCoreUtilsCreateCombinedPairingGroupInfo(v36, v28, *(const void **)(v26 + 24), *(CFDataRef *)(v26 + 40), __str);
        if (CombinedPairingGroupInfo)
          goto LABEL_140;
        if (gLogCategory_APPairingClientCoreUtils <= 30
          && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
        {
          Current = a1;
          v33 = *(_QWORD *)__str;
          LogPrintF();
        }
        v29 = (const __CFArray *)objc_msgSend(*(id *)v26, "peersMatchingPairingGroupID:", *(_QWORD *)(v26 + 32), Current, v33, v34);
        APPairingClientCoreUtilsCreateUnpairedPeersFromGroupInfo(*(uint64_t *)__str, v29, (uint64_t *)&v45);
        v49[0] = (CFTypeRef)MEMORY[0x1E0C809B0];
        v49[1] = (CFTypeRef)3221225472;
        *(_QWORD *)&v50 = __coreUtilsPairing_getPairedPeerFromVerificationPairingSession_block_invoke;
        *((_QWORD *)&v50 + 1) = &__block_descriptor_48_e29_v32__0__CUPairedPeer_8Q16_B24l;
        *(_QWORD *)&v51 = a1;
        *((_QWORD *)&v51 + 1) = v26;
        objc_msgSend(v45, "enumerateObjectsUsingBlock:", v49);
        CombinedPairingGroupInfo = APPairingClientCoreUtilsUpdateGroupInfo(a1, *(uint64_t *)__str);
        if (CombinedPairingGroupInfo)
LABEL_140:
          APSLogErrorAt();
      }
    }
  }
  else
  {
    APSLogErrorAt();
    v28 = 0;
    PairedPeer = 0;
  }
  if (*(_QWORD *)__str)
    CFRelease(*(CFTypeRef *)__str);
  if (v28)
    CFRelease(v28);
  if (v35)
  {
    if (PairedPeer)
      v30 = CFRetain(PairedPeer);
    else
      v30 = 0;
    v18 = 0;
    *v35 = v30;
  }
  else
  {
    v18 = 0;
  }
LABEL_117:
  v16 = v36;
  if (v36)
LABEL_118:
    CFRelease(v16);
LABEL_119:
  if (cf)
    CFRelease(cf);
  if (v43)
  {
    free(v43);
    v43 = 0;
  }
  if ((_DWORD)v18)
  {
    if (gLogCategory_APPairingClientCoreUtils <= 90
      && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (*v8)
    {
      CFRelease((CFTypeRef)*v8);
      *v8 = 0;
    }
    APSLogErrorAt();
  }
  return v18;
}

uint64_t coreUtilsPairing_createAirPlayPairingSession(uint64_t a1, uint64_t a2, int a3, int a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  int v10;
  CFDictionaryRef v11;
  uint64_t v12;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = PairingSessionCreate();
  if ((_DWORD)v9)
  {
    v12 = v9;
LABEL_22:
    APSLogErrorAt();
    return v12;
  }
  if (a3)
  {
    v10 = 16;
  }
  else if (*(_BYTE *)(DerivedStorage + 57))
  {
    v10 = 12;
  }
  else
  {
    v10 = 0;
  }
  if (v10 | (a4 != 0))
  {
    PairingSessionSetFlags();
    if (gLogCategory_APPairingClientCoreUtils <= 50
      && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  if (*(_BYTE *)(DerivedStorage + 59))
  {
    keys[0] = CFSTR("com.apple.ScreenCapture");
    values = (void *)*MEMORY[0x1E0C9AE50];
    v11 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    PairingSessionSetACL();
    if (gLogCategory_APPairingClientCoreUtils <= 50
      && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFRelease(v11);
  }
  PairingSessionSetKeychainInfo();
  PairingSessionSetLogging();
  v12 = PairingSessionSetTranscriptType();
  if ((_DWORD)v12)
    goto LABEL_22;
  *a5 = 0;
  return v12;
}

uint64_t coreUtilsPairing_sendShowPairPINRequest(uint64_t a1, int a2)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v4;
  uint64_t v5;
  char __str[32];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = Mutable;
    APSGetDeviceNameCString();
    CFDictionarySetCString();
    snprintf(__str, 0x20uLL, "%d", a2);
    CFDictionarySetCString();
    v5 = APTransportStreamSendPlistMessageCreatingReply();
    CFRelease(v4);
  }
  else
  {
    APSLogErrorAt();
    return 4294895526;
  }
  return v5;
}

uint64_t coreUtilsPairing_performSetupInternal(uint64_t a1, const __CFString *a2, int a3, int a4, CFMutableDictionaryRef *a5, _QWORD *a6, uint64_t *a7, _QWORD *a8)
{
  uint64_t DerivedStorage;
  CFTypeRef v15;
  const __CFAllocator *v16;
  int v17;
  unsigned int v18;
  int v19;
  CFMutableDictionaryRef Mutable;
  int v21;
  char *v22;
  uint64_t v23;
  const void *v24;
  int v25;
  uint64_t *v26;
  _QWORD *v27;
  CFStringRef v28;
  const void *v29;
  const void *PairedPeer;
  uint64_t result;
  int v32;
  int v33;
  CFMutableDictionaryRef *v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  CFTypeRef v40;
  CFTypeRef cf;
  char v42;
  size_t lengthAtOffsetOut;
  void *v44;
  char *dataPointerOut;
  unsigned int DataPointer;
  void *v47;
  char buffer[16];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char __str[32];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  DataPointer = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v44 = 0;
  dataPointerOut = 0;
  lengthAtOffsetOut = 0;
  v42 = 0;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  *(_OWORD *)buffer = 0u;
  v49 = 0u;
  v40 = 0;
  cf = 0;
  if (gLogCategory_APPairingClientCoreUtils <= 50
    && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  DataPointer = coreUtilsPairing_createAirPlayPairingSession(a1, 1, a3 == 4, a4, &v40);
  if (DataPointer)
  {
LABEL_53:
    APSLogErrorAt();
LABEL_54:
    v22 = 0;
    goto LABEL_55;
  }
  if (gLogCategory_APPairingClientCoreUtils <= 50
    && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    CFStringGetCString(a2, buffer, 128, 0x8000100u);
    v15 = v40;
    if (buffer[0])
    {
      DataPointer = PairingSessionSetSetupCode();
      if (DataPointer)
        goto LABEL_53;
    }
  }
  else
  {
    v15 = v40;
  }
  CFStringGetCString(*(CFStringRef *)(DerivedStorage + 16), buffer, 128, 0x8000100u);
  DataPointer = PairingSessionSetIdentifier();
  if (DataPointer)
    goto LABEL_53;
  v34 = a5;
  v35 = a7;
  v36 = DerivedStorage;
  v37 = a4;
  dataPointerOut = 0;
  lengthAtOffsetOut = 0;
  v42 = 0;
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    v17 = PairingSessionExchange();
    DataPointer = v17;
    if (v17 <= -71165)
    {
      if ((v17 + 71775) >= 3)
        goto LABEL_95;
LABEL_22:
      if (gLogCategory_APPairingClientCoreUtils > 90)
        goto LABEL_53;
      if (gLogCategory_APPairingClientCoreUtils != -1 || (v19 = _LogCategory_Initialize(), v18 = DataPointer, v19))
      {
        LogPrintF();
        v18 = DataPointer;
      }
      if (v18)
        goto LABEL_53;
      goto LABEL_27;
    }
    if (v17 == -71164 || v17 == -71145)
      goto LABEL_22;
    if (v17)
    {
LABEL_95:
      v22 = 0;
      Mutable = 0;
      v33 = 200401;
LABEL_96:
      DataPointer = v33;
      goto LABEL_79;
    }
LABEL_27:
    if (v42)
      break;
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    CMBaseObjectGetDerivedStorage();
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v47 = 0;
    Mutable = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      APSLogErrorAt();
      v22 = 0;
      DataPointer = -71770;
      goto LABEL_79;
    }
    APSGetDeviceNameCString();
    CFDictionarySetCString();
    if (TMIsAutomaticTimeEnabled())
    {
      CFAbsoluteTimeGetCurrent();
      ASPrintF();
      if (!v47)
      {
        v21 = -71770;
        APSLogErrorAt();
        goto LABEL_39;
      }
      CFDictionarySetCString();
    }
    snprintf(__str, 0x20uLL, "%d", a3);
    CFDictionarySetCString();
    CFDictionarySetData();
    if (gLogCategory_APPairingClientCoreUtils <= 10
      && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v21 = APTransportStreamSendPlistMessageCreatingReply();
LABEL_39:
    CFRelease(Mutable);
    if (v47)
      free(v47);
    DataPointer = v21;
    if (v21)
      goto LABEL_54;
    if (v44)
    {
      free(v44);
      v44 = 0;
    }
    lengthAtOffsetOut = 0;
    dataPointerOut = 0;
    if (cf)
    {
      DataPointer = CMBlockBufferGetDataPointer((CMBlockBufferRef)cf, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
      if (DataPointer)
        goto LABEL_53;
    }
  }
  if (gLogCategory_APPairingClientCoreUtils <= 50
    && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a3 == 4)
  {
    v23 = DerivedStorage;
    v24 = *(const void **)(DerivedStorage + 8);
    *(_QWORD *)(DerivedStorage + 8) = v15;
    if (v15)
      CFRetain(v15);
    v25 = v37;
    v27 = a6;
    v26 = v35;
    if (v24)
      CFRelease(v24);
    v22 = 0;
    Mutable = 0;
    *(_BYTE *)(v36 + 58) = 1;
    goto LABEL_69;
  }
  v22 = (char *)PairingSessionCopyPeerIdentifier();
  if (DataPointer)
  {
    APSLogErrorAt();
LABEL_55:
    Mutable = 0;
    goto LABEL_79;
  }
  v28 = CFStringCreateWithCString(v16, v22, 0x8000100u);
  Mutable = (CFMutableDictionaryRef)v28;
  if (!v28)
  {
    APSLogErrorAt();
    v33 = -71770;
    goto LABEL_96;
  }
  v23 = DerivedStorage;
  v29 = *(const void **)(DerivedStorage + 24);
  *(_QWORD *)(v36 + 24) = v28;
  CFRetain(v28);
  if (v29)
    CFRelease(v29);
  v25 = v37;
  v27 = a6;
  v26 = v35;
  if (v34)
  {
    *v34 = Mutable;
    Mutable = 0;
  }
LABEL_69:
  if (v27)
    *v27 = 0;
  if (v25 && v26 && (*v26 = PairingSessionCopyProperty(), DataPointer))
  {
    APSLogErrorAt();
  }
  else
  {
    if (a8)
    {
      PairedPeer = (const void *)PairingSessionGetPairedPeer();
      if (PairedPeer)
        PairedPeer = CFRetain(PairedPeer);
      *a8 = PairedPeer;
    }
    *(_BYTE *)(v23 + 66) = v25;
  }
LABEL_79:
  if (v40)
    CFRelease(v40);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (v44)
  {
    free(v44);
    v44 = 0;
  }
  if (v22)
    free(v22);
  result = DataPointer;
  if (DataPointer)
  {
    if (gLogCategory_APPairingClientCoreUtils <= 90)
    {
      if (gLogCategory_APPairingClientCoreUtils != -1 || (v32 = _LogCategory_Initialize(), result = DataPointer, v32))
      {
        LogPrintF();
        return DataPointer;
      }
    }
  }
  return result;
}

uint64_t __coreUtilsPairing_createAccountOwnerPairVerifySession_block_invoke()
{
  return APSPairingAuthenticationCoreUtilsSignBytesForSelfIdentity();
}

uint64_t __coreUtilsPairing_createAccountOwnerPairVerifySession_block_invoke_2()
{
  return APSPairingAuthenticationCoreUtilsVerifySignatureForSameAccount();
}

uint64_t __coreUtilsPairing_getPairedPeerFromVerificationPairingSession_block_invoke(uint64_t a1, void *a2)
{
  if (gLogCategory_APPairingClientCoreUtils <= 50
    && (gLogCategory_APPairingClientCoreUtils != -1 || _LogCategory_Initialize()))
  {
    objc_msgSend(a2, "identifier");
    LogPrintF();
  }
  return objc_msgSend(**(id **)(a1 + 40), "savePairedPeer:", a2);
}

uint64_t APKeyHolderSharedKeyCreate(uint64_t a1, const void *a2, const __CFData *a3, const __CFData *a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFRange v16;
  CFRange v17;

  APSKeyHolderGetClassID();
  v9 = CMDerivedObjectCreate();
  if ((_DWORD)v9)
  {
    v14 = v9;
LABEL_21:
    APSLogErrorAt();
    return v14;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)DerivedStorage = a2;
  if (a2)
    CFRetain(a2);
  if (a3)
  {
    v16.length = CFDataGetLength(a3);
    v16.location = 0;
    CFDataGetBytes(a3, v16, (UInt8 *)(DerivedStorage + 8));
    goto LABEL_7;
  }
  v11 = RandomBytes();
  if ((_DWORD)v11)
  {
    v14 = v11;
    goto LABEL_21;
  }
LABEL_7:
  if (a4)
  {
    v17.length = CFDataGetLength(a4);
    v17.location = 0;
    CFDataGetBytes(a4, v17, (UInt8 *)(DerivedStorage + 24));
    goto LABEL_10;
  }
  v12 = RandomBytes();
  if ((_DWORD)v12)
  {
    v14 = v12;
    goto LABEL_21;
  }
LABEL_10:
  v13 = APSCreateSecureMemAllocator();
  *(_QWORD *)(DerivedStorage + 40) = v13;
  if (v13)
  {
    if (gLogCategory_APKeyHolderSharedKey <= 30
      && (gLogCategory_APKeyHolderSharedKey != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v14 = 0;
    *a5 = 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294895576;
  }
  return v14;
}

void sharedKeyHolder_Finalize()
{
  uint64_t DerivedStorage;
  uint64_t i;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APKeyHolderSharedKey <= 30
    && (gLogCategory_APKeyHolderSharedKey != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  for (i = 8; i != 24; ++i)
    *(_BYTE *)(DerivedStorage + i) = 0;
  do
    *(_BYTE *)(DerivedStorage + i++) = 0;
  while (i != 40);
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v2 = *(const void **)(DerivedStorage + 40);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
}

__CFString *sharedKeyHolder_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APKeyHolderSharedKey %p>"), a1);
  return Mutable;
}

uint64_t sharedKeyHolder_GetAuthenticationType()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  if (v0 && (v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) != 0)
    return v1(v0);
  else
    return 0;
}

uint64_t sharedKeyHolder_CopyMasterAESKeyAndIV(uint64_t a1, CFDataRef *a2, CFDataRef *a3)
{
  uint64_t DerivedStorage;
  CFDataRef v6;
  CFDataRef v7;
  CFDataRef v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = CFDataCreate(*(CFAllocatorRef *)(DerivedStorage + 40), (const UInt8 *)(DerivedStorage + 8), 16);
  if (v6)
  {
    v7 = v6;
    v8 = CFDataCreate(*(CFAllocatorRef *)(DerivedStorage + 40), (const UInt8 *)(DerivedStorage + 24), 16);
    if (v8)
    {
      v9 = 0;
      *a2 = v7;
      *a3 = v8;
    }
    else
    {
      v9 = 4294895576;
      APSLogErrorAt();
      CFRelease(v7);
    }
  }
  else
  {
    v9 = 4294895576;
    APSLogErrorAt();
  }
  return v9;
}

uint64_t sharedKeyHolder_CreateEncryptedMasterAESKeyAndIV(uint64_t a1, CFTypeRef *a2, CFDataRef *a3)
{
  uint64_t DerivedStorage;
  CFDataRef v6;
  CFDataRef v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, CFDataRef, uint64_t, CFTypeRef *);
  CFDataRef v11;
  uint64_t v12;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = CFDataCreate(*(CFAllocatorRef *)(DerivedStorage + 40), (const UInt8 *)(DerivedStorage + 8), 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)DerivedStorage;
    if (*(_QWORD *)DerivedStorage)
    {
      v9 = *(_QWORD *)(DerivedStorage + 40);
      v10 = *(void (**)(uint64_t, CFDataRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 24);
      if (v10)
        v10(v8, v7, v9, &cf);
    }
    else
    {
      cf = v6;
      v7 = 0;
    }
    v11 = CFDataCreate(*(CFAllocatorRef *)(DerivedStorage + 40), (const UInt8 *)(DerivedStorage + 24), 16);
    if (v11)
    {
      v12 = 0;
      *a2 = cf;
      cf = 0;
      *a3 = v11;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
    v12 = 4294895576;
    APSLogErrorAt();
    if (v7)
LABEL_8:
      CFRelease(v7);
  }
  else
  {
    v12 = 4294895576;
    APSLogErrorAt();
  }
LABEL_9:
  if (cf)
    CFRelease(cf);
  return v12;
}

uint64_t APVirtualDisplaySinkCreate(const void *a1, const void *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *DerivedStorage;

  if (a1 && a2 && a3)
  {
    FigVirtualDisplaySinkGetClassID();
    v6 = CMDerivedObjectCreate();
    if ((_DWORD)v6)
    {
      APSLogErrorAt();
    }
    else
    {
      DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
      *DerivedStorage = CFRetain(a1);
      DerivedStorage[2] = CFRetain(a2);
      DerivedStorage[15] = SecondsToUpTicks();
      *a3 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294954516;
  }
  return v6;
}

void vdsink_Finalize_0()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  NSObject *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APVirtualDisplaySink <= 30
    && (gLogCategory_APVirtualDisplaySink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 96);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 104);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 104) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 112);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 8);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 88);
  if (v6)
  {
    _Block_release(v6);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v7 = *(NSObject **)(DerivedStorage + 24);
  if (v7)
  {
    dispatch_release(v7);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
}

CFStringRef vdsink_CopyDebugDesc_0(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APVirtualDisplaySink %p]"), a1);
}

uint64_t vdsink_CopyProperty_0(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  CFTypeRef v6;
  uint64_t result;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APVirtualDisplaySink <= 30
    && (gLogCategory_APVirtualDisplaySink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC6740]))
    return 4294954512;
  v6 = CFRetain(CFSTR("AirPlay"));
  result = 0;
  *a4 = v6;
  return result;
}

uint64_t vdsink_SetProperty_0(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t *DerivedStorage;
  int v6;
  const void *v7;
  CFTypeID v9;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v6 = gLogCategory_APVirtualDisplaySink;
  if (gLogCategory_APVirtualDisplaySink <= 30)
  {
    if (gLogCategory_APVirtualDisplaySink == -1)
    {
      if (!_LogCategory_Initialize())
        goto LABEL_13;
      v6 = gLogCategory_APVirtualDisplaySink;
    }
    if (v6 <= 20)
    {
      if (v6 != -1
        || (_LogCategory_Initialize(), v6 = gLogCategory_APVirtualDisplaySink, gLogCategory_APVirtualDisplaySink <= 20))
      {
        if (v6 == -1)
          _LogCategory_Initialize();
      }
    }
    LogPrintF();
  }
LABEL_13:
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC6710]))
  {
    v7 = (const void *)DerivedStorage[14];
    DerivedStorage[14] = (uint64_t)a3;
    if (!a3)
      goto LABEL_16;
    goto LABEL_15;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC6738]))
  {
    v7 = (const void *)DerivedStorage[12];
    DerivedStorage[12] = (uint64_t)a3;
    if (!a3)
      goto LABEL_16;
    goto LABEL_15;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC6728]))
  {
    v7 = (const void *)DerivedStorage[13];
    DerivedStorage[13] = (uint64_t)a3;
    if (!a3)
    {
LABEL_16:
      if (v7)
        CFRelease(v7);
      return 0;
    }
LABEL_15:
    CFRetain(a3);
    goto LABEL_16;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC6718]))
  {
    if (a3)
    {
      v9 = CFGetTypeID(a3);
      if (v9 == CFStringGetTypeID() && !DerivedStorage[1])
        DerivedStorage[1] = CFStringCreateF();
    }
    return 0;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC66E8]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC6730]))
    return 0;
  return FigEndpointStreamSetProperty(*DerivedStorage, (uint64_t)a2, (uint64_t)a3);
}

uint64_t vdsink_Start_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  int IntWithDefault;
  int v6;
  NSObject *v7;
  _QWORD block[5];
  int v10;
  CMTime v11;
  int v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = 0;
  if (gLogCategory_APVirtualDisplaySink <= 50
    && (gLogCategory_APVirtualDisplaySink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMTimeMake(&v11, 67, 1000);
  *(CMTime *)(DerivedStorage + 32) = v11;
  FigCFDictionaryGetInt32IfPresent();
  IntWithDefault = APSSettingsGetIntWithDefault();
  v12 = IntWithDefault;
  if (IntWithDefault >= 1)
  {
    if (gLogCategory_APVirtualDisplaySink <= 50)
    {
      if (gLogCategory_APVirtualDisplaySink != -1 || (v6 = _LogCategory_Initialize(), IntWithDefault = v12, v6))
      {
        LogPrintF();
        IntWithDefault = v12;
      }
    }
    CMTimeMake(&v11, IntWithDefault, 1000);
    *(CMTime *)(DerivedStorage + 32) = v11;
  }
  if (a3)
  {
    v7 = *(NSObject **)(DerivedStorage + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __vdsink_Start_block_invoke_0;
    block[3] = &unk_1E826B0E0;
    block[4] = a3;
    v10 = 0;
    dispatch_async(v7, block);
  }
  return 0;
}

uint64_t vdsink_Stop_0(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APVirtualDisplaySink <= 50
    && (gLogCategory_APVirtualDisplaySink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    v4 = *(NSObject **)(DerivedStorage + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __vdsink_Stop_block_invoke_0;
    block[3] = &unk_1E826B108;
    block[4] = a2;
    dispatch_async(v4, block);
  }
  return 0;
}

uint64_t vdsink_PushFrame_0(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, uint64_t a9, void *a10, int a11)
{
  uint64_t DerivedStorage;
  double v21;
  double v22;
  double v23;
  double v24;
  double v26;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v28;
  const __CFAllocator *v29;
  CFNumberRef v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  const __CFArray *SampleAttachmentsArray;
  const __CFArray *v40;
  CFIndex Count;
  CFIndex v42;
  CFIndex v43;
  __CFArray *Mutable;
  const void *v45;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const void *v48;
  __CFDictionary *v49;
  NSObject *v50;
  const __CFNumber *v52;
  const __CFDictionary *v53;
  const __CFDictionary *v54;
  int valuePtr;
  _QWORD block[7];
  CGRect v57;
  CGRect v58;

  valuePtr = a11;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v22 = *(double *)(DerivedStorage + 72);
  v21 = *(double *)(DerivedStorage + 80);
  v24 = *(double *)(DerivedStorage + 56);
  v23 = *(double *)(DerivedStorage + 64);
  if (v22 != v24 || v21 != v23)
  {
    v26 = v24 / v22;
    if (v24 / v22 >= v23 / v21)
      v26 = v23 / v21;
    a7 = a7 * v26;
    a8 = a8 * v26;
    a5 = (v24 - v22 * v26) * 0.5 + a5 * v26;
    a6 = (v23 - v21 * v26) * 0.5 + a6 * v26;
  }
  v57.origin.x = a1;
  v57.origin.y = a2;
  v57.size.width = a3;
  v57.size.height = a4;
  DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v57);
  v58.origin.x = a5;
  v58.origin.y = a6;
  v58.size.width = a7;
  v58.size.height = a8;
  v28 = CGRectCreateDictionaryRepresentation(v58);
  v29 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v30 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  CMSetAttachment(a10, (CFStringRef)*MEMORY[0x1E0CA4E78], DictionaryRepresentation, 0);
  CMSetAttachment(a10, (CFStringRef)*MEMORY[0x1E0CA4E30], v28, 0);
  CMSetAttachment(a10, (CFStringRef)*MEMORY[0x1E0CA4E90], v30, 0);
  v31 = *(const void **)(DerivedStorage + 96);
  if (v31)
  {
    CMSetAttachment(a10, CFSTR("APTimestamps"), v31, 0);
    v32 = *(const void **)(DerivedStorage + 96);
    if (v32)
    {
      CFRelease(v32);
      *(_QWORD *)(DerivedStorage + 96) = 0;
    }
  }
  v33 = *(const void **)(DerivedStorage + 104);
  if (v33)
  {
    CMSetAttachment(a10, CFSTR("APSubmitSurfaceTimestamp"), v33, 0);
    v34 = *(const void **)(DerivedStorage + 104);
    if (v34)
    {
      CFRelease(v34);
      *(_QWORD *)(DerivedStorage + 104) = 0;
    }
  }
  v35 = *(const void **)(DerivedStorage + 112);
  if (v35)
  {
    CMSetAttachment(a10, CFSTR("APInterestingFrame"), v35, 0);
    v36 = *(const void **)(DerivedStorage + 112);
    if (v36)
    {
      CFRelease(v36);
      *(_QWORD *)(DerivedStorage + 112) = 0;
    }
  }
  CMBufferQueueEnqueue(*(CMBufferQueueRef *)(DerivedStorage + 16), a10);
  if (gLogCategory_APVirtualDisplaySink <= 10
    && (gLogCategory_APVirtualDisplaySink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v37 = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(v37 + 88))
  {
    v38 = v37;
    SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray((CMSampleBufferRef)a10, 0);
    if (SampleAttachmentsArray)
    {
      v40 = SampleAttachmentsArray;
      Count = CFArrayGetCount(SampleAttachmentsArray);
      if (Count >= 1)
      {
        v42 = Count;
        v52 = v30;
        v53 = DictionaryRepresentation;
        v54 = v28;
        v43 = 0;
        Mutable = 0;
        v45 = (const void *)*MEMORY[0x1E0CEDA98];
        do
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v40, v43);
          if (ValueAtIndex)
          {
            Value = CFDictionaryGetValue(ValueAtIndex, v45);
            if (Value)
            {
              v48 = Value;
              if (!Mutable)
                Mutable = CFArrayCreateMutable(v29, 0, MEMORY[0x1E0C9B378]);
              if (gLogCategory_APVirtualDisplaySink <= 10
                && (gLogCategory_APVirtualDisplaySink != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              CFArrayAppendValue(Mutable, v48);
            }
          }
          ++v43;
        }
        while (v42 != v43);
        DictionaryRepresentation = v53;
        v28 = v54;
        v30 = v52;
        if (Mutable)
        {
          v49 = CFDictionaryCreateMutable(v29, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CFDictionarySetValue(v49, (const void *)*MEMORY[0x1E0CC6698], Mutable);
          v50 = *(NSObject **)(v38 + 24);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 0x40000000;
          block[2] = __vdsink_handleFrameAcknowledgements_block_invoke_0;
          block[3] = &__block_descriptor_tmp_31;
          block[4] = v38;
          block[5] = v49;
          dispatch_async(v50, block);
          CFRelease(Mutable);
        }
      }
    }
  }
  if (DictionaryRepresentation)
    CFRelease(DictionaryRepresentation);
  if (v28)
    CFRelease(v28);
  if (v30)
    CFRelease(v30);
  return 0;
}

uint64_t vdsink_Suspend_0()
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APVirtualDisplaySink <= 30
    && (gLogCategory_APVirtualDisplaySink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return 0;
}

uint64_t vdsink_Resume_0()
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APVirtualDisplaySink <= 30
    && (gLogCategory_APVirtualDisplaySink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return 0;
}

uint64_t vdsink_GetPropertyAsync_0(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  const __CFAllocator *v9;
  uint64_t v10;
  const __CFDictionary *v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t CMBaseObject;
  uint64_t (*v19)(uint64_t, const void *, _QWORD, __CFDictionary **);
  uint64_t v20;
  __CFDictionary *MutableCopy;
  int v22;
  const __CFDictionary *Value;
  CFTypeRef v24;
  NSObject *v25;
  _QWORD block[6];
  int v28;
  CFTypeRef v29;
  __CFDictionary *v30;
  char v31;
  int v32;
  int v33;
  CFTypeRef cf;
  CFTypeRef v35;
  CFTypeRef v36;
  const void *v37;
  const void *v38;

  v30 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC66F8]))
  {
    CMBaseObject = FigEndpointStreamGetCMBaseObject();
    v19 = *(uint64_t (**)(uint64_t, const void *, _QWORD, __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v19)
    {
      v20 = v19(CMBaseObject, a2, *MEMORY[0x1E0C9AE00], &v30);
      MutableCopy = v30;
    }
    else
    {
      MutableCopy = 0;
      v20 = 4294954514;
    }
    goto LABEL_47;
  }
  v29 = 0;
  v7 = FigEndpointStreamGetCMBaseObject();
  v8 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v8)
  {
    v20 = 4294954514;
LABEL_16:
    APSLogErrorAt();
    MutableCopy = 0;
    goto LABEL_47;
  }
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v10 = v8(v7, *MEMORY[0x1E0CC66F0], *MEMORY[0x1E0C9AE00], &v29);
  if ((_DWORD)v10)
  {
    v20 = v10;
    goto LABEL_16;
  }
  v11 = (const __CFDictionary *)v29;
  v12 = CMBaseObjectGetDerivedStorage();
  v37 = 0;
  v38 = 0;
  v35 = 0;
  v36 = 0;
  cf = 0;
  v32 = 60;
  v33 = 0;
  v31 = 0;
  if (vdsink_getVirtualDisplaySizeOverrideFromPrefs_sCheckPrefsOnce_0 != -1)
    dispatch_once(&vdsink_getVirtualDisplaySizeOverrideFromPrefs_sCheckPrefsOnce_0, &__block_literal_global_16);
  v13 = *(double *)&vdsink_getVirtualDisplaySizeOverrideFromPrefs_prefScreenSize_0_0;
  v14 = *(double *)&vdsink_getVirtualDisplaySizeOverrideFromPrefs_prefScreenSize_1_0;
  v16 = *MEMORY[0x1E0C9D820];
  v15 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  if ((*(double *)&vdsink_getVirtualDisplaySizeOverrideFromPrefs_prefScreenSize_0_0 != *MEMORY[0x1E0C9D820]
     || *(double *)&vdsink_getVirtualDisplaySizeOverrideFromPrefs_prefScreenSize_1_0 != v15)
    && gLogCategory_APVirtualDisplaySink <= 50)
  {
    if (gLogCategory_APVirtualDisplaySink != -1
      || (v22 = _LogCategory_Initialize(),
          v13 = *(double *)&vdsink_getVirtualDisplaySizeOverrideFromPrefs_prefScreenSize_0_0,
          v14 = *(double *)&vdsink_getVirtualDisplaySizeOverrideFromPrefs_prefScreenSize_1_0,
          v22))
    {
      LogPrintF();
      v13 = *(double *)&vdsink_getVirtualDisplaySizeOverrideFromPrefs_prefScreenSize_0_0;
      v14 = *(double *)&vdsink_getVirtualDisplaySizeOverrideFromPrefs_prefScreenSize_1_0;
    }
  }
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetCGSizeIfPresent();
  Value = (const __CFDictionary *)CFDictionaryGetValue(v11, (const void *)*MEMORY[0x1E0CC6658]);
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetInt32IfPresent();
  if (v13 != v16 || v14 != v15)
  {
    *(double *)(v12 + 72) = v13;
    *(double *)(v12 + 80) = v14;
    if (Value)
      goto LABEL_22;
LABEL_24:
    FigDisplayModes_BuildColorAndTimingModes();
    goto LABEL_25;
  }
  *(_OWORD *)(v12 + 72) = *(_OWORD *)(v12 + 56);
  if (!Value)
    goto LABEL_24;
LABEL_22:
  CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E0CC6510]);
  FigDisplayModes_BuildColorAndTimingModes();
  FigDisplayModes_BuildColorModesFromHDRMode();
LABEL_25:
  if (!v36 || !v35)
    goto LABEL_48;
  if (v33 >= 1)
  {
    FigDisplayModes_CopyTimingModeAppendingPreferredUIScale();
    if (!cf)
    {
LABEL_48:
      APSLogErrorAt();
      MutableCopy = 0;
      goto LABEL_34;
    }
    v24 = v35;
    v35 = cf;
    CFRetain(cf);
    if (v24)
      CFRelease(v24);
  }
  FigDisplayModes_CreateColorAndTimingModesArraysWithPreferredMode();
  if (!v38 || !v37)
    goto LABEL_48;
  MutableCopy = CFDictionaryCreateMutableCopy(v9, 0, v11);
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CC6628], v38);
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CC6678], v37);
LABEL_34:
  if (v36)
    CFRelease(v36);
  if (v35)
    CFRelease(v35);
  if (cf)
    CFRelease(cf);
  if (v38)
    CFRelease(v38);
  if (v37)
    CFRelease(v37);
  v30 = MutableCopy;
  if (v29)
    CFRelease(v29);
  v20 = 0;
LABEL_47:
  v25 = *(NSObject **)(DerivedStorage + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __vdsink_GetPropertyAsync_block_invoke_0;
  block[3] = &unk_1E826B150;
  v28 = v20;
  block[4] = a4;
  block[5] = MutableCopy;
  dispatch_async(v25, block);
  return v20;
}

uint64_t vdsink_Perform_0(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  NSObject *v8;
  _QWORD block[5];
  int v11;
  CMSampleTimingInfo sampleTimingArray;
  CMSampleBufferRef v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    APSLogErrorAt();
LABEL_15:
    v7 = 4294954516;
    goto LABEL_16;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC6620]))
  {
    if (gLogCategory_APVirtualDisplaySink <= 50
      && (gLogCategory_APVirtualDisplaySink != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_15;
  }
  v13 = 0;
  *(_OWORD *)&sampleTimingArray.duration.value = *MEMORY[0x1E0CA2E68];
  sampleTimingArray.duration.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  sampleTimingArray.presentationTimeStamp = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  sampleTimingArray.decodeTimeStamp = sampleTimingArray.presentationTimeStamp;
  v7 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 1u, 0, 0, 0, 0, 1, &sampleTimingArray, 0, 0, &v13);
  if ((_DWORD)v7)
  {
    APSLogErrorAt();
    if (!a4)
      return v7;
    goto LABEL_17;
  }
  CMSetAttachment(v13, CFSTR("APClearScreen"), (CFTypeRef)*MEMORY[0x1E0C9AE50], 0);
  CMBufferQueueEnqueue(*(CMBufferQueueRef *)(DerivedStorage + 16), v13);
  if (gLogCategory_APVirtualDisplaySink <= 30
    && (gLogCategory_APVirtualDisplaySink != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v13)
  {
    CFRelease(v13);
    if (!a4)
      return v7;
    goto LABEL_17;
  }
LABEL_16:
  if (a4)
  {
LABEL_17:
    v8 = *(NSObject **)(DerivedStorage + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __vdsink_Perform_block_invoke_0;
    block[3] = &unk_1E826B1B8;
    block[4] = a4;
    v11 = v7;
    dispatch_async(v8, block);
  }
  return v7;
}

uint64_t vdsink_SetDispatchQueue_0(uint64_t a1, NSObject *global_queue)
{
  uint64_t DerivedStorage;
  NSObject *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(NSObject **)(DerivedStorage + 24);
  if (v4)
    dispatch_release(v4);
  if (!global_queue)
    global_queue = dispatch_get_global_queue(0, 0);
  *(_QWORD *)(DerivedStorage + 24) = global_queue;
  dispatch_retain(global_queue);
  return 0;
}

uint64_t vdsink_SetEventHandler_0(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  void *v4;
  NSObject *v5;
  _QWORD v7[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    v4 = _Block_copy(a2);
  else
    v4 = 0;
  v5 = *(NSObject **)(DerivedStorage + 24);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = __vdsink_SetEventHandler_block_invoke;
  v7[3] = &unk_1E826B1E0;
  v7[4] = v4;
  v7[5] = DerivedStorage;
  dispatch_sync(v5, v7);
  return 0;
}

uint64_t vdsink_ShouldDropFrame_0()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  CMTime time2;
  CMTime time1;
  CMTime v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v7, 0, sizeof(v7));
  CMBufferQueueGetDuration(&v7, *(CMBufferQueueRef *)(DerivedStorage + 16));
  if ((v7.flags & 0x1D) != 1
    || (time1 = v7, time2 = *(CMTime *)(DerivedStorage + 32), CMTimeCompare(&time1, &time2) < 0))
  {
    v1 = 0;
  }
  else
  {
    if (gLogCategory_APVirtualDisplaySink <= 40
      && (gLogCategory_APVirtualDisplaySink != -1 || _LogCategory_Initialize()))
    {
      time1 = v7;
      CMTimeGetSeconds(&time1);
      LogPrintF();
    }
    ++*(_DWORD *)(DerivedStorage + 136);
    v1 = 1;
  }
  if (*(int *)(DerivedStorage + 136) >= 1)
  {
    v2 = mach_absolute_time();
    if (v2 - *(_QWORD *)(DerivedStorage + 128) >= *(_QWORD *)(DerivedStorage + 120))
    {
      v3 = v2;
      if (gLogCategory_APVirtualDisplaySink <= 60
        && (gLogCategory_APVirtualDisplaySink != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_DWORD *)(DerivedStorage + 136) = 0;
      *(_QWORD *)(DerivedStorage + 128) = v3;
    }
  }
  return v1;
}

void __vdsink_handleFrameAcknowledgements_block_invoke_0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88);
  if (v2)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v2 + 16))(v2, *MEMORY[0x1E0CC6690], *(_QWORD *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __vdsink_getVirtualDisplaySizeOverrideFromPrefs_block_invoke_0()
{
  const __CFArray *v0;
  const __CFArray *v1;
  CFTypeID v2;
  double IntValue;
  double v4;
  const __CFString *ValueAtIndex;
  const __CFString *v6;
  CFTypeID v7;
  const __CFString *v8;
  const __CFString *v9;
  CFTypeID v10;
  uint64_t v11;
  uint64_t v12;

  v0 = (const __CFArray *)CFPreferencesCopyValue(CFSTR("mirroring_resolution"), CFSTR("com.apple.coremedia"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (v0)
  {
    v1 = v0;
    v2 = CFGetTypeID(v0);
    IntValue = 0.0;
    if (v2 == CFArrayGetTypeID())
    {
      if (gLogCategory_APVirtualDisplaySink <= 50
        && (gLogCategory_APVirtualDisplaySink != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v4 = 0.0;
      if (CFArrayGetCount(v1) >= 2)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v1, 0);
        if (ValueAtIndex)
        {
          v6 = ValueAtIndex;
          v7 = CFGetTypeID(ValueAtIndex);
          if (v7 == CFStringGetTypeID())
            IntValue = (double)CFStringGetIntValue(v6);
        }
        v8 = (const __CFString *)CFArrayGetValueAtIndex(v1, 1);
        if (v8)
        {
          v9 = v8;
          v10 = CFGetTypeID(v8);
          if (v10 == CFStringGetTypeID())
            v4 = (double)CFStringGetIntValue(v9);
        }
      }
    }
    else
    {
      v4 = 0.0;
    }
    CFRelease(v1);
    if (IntValue > 0.0 && v4 > 0.0)
    {
      if (IntValue <= v4)
        *(double *)&v11 = v4;
      else
        *(double *)&v11 = IntValue;
      vdsink_getVirtualDisplaySizeOverrideFromPrefs_prefScreenSize_0_0 = v11;
      if (IntValue >= v4)
        *(double *)&v12 = v4;
      else
        *(double *)&v12 = IntValue;
      vdsink_getVirtualDisplaySizeOverrideFromPrefs_prefScreenSize_1_0 = v12;
    }
  }
}

uint64_t APSenderSessionMessageSendTimeout()
{
  if (APSenderSessionMessageSendTimeout_once != -1)
    dispatch_once(&APSenderSessionMessageSendTimeout_once, &__block_literal_global_17);
  return APSenderSessionMessageSendTimeout_messageTimeout;
}

uint64_t APSenderSessionGetClassID()
{
  if (APSenderSessionGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APSenderSessionGetClassID_sRegisterOnce, &APSenderSessionGetClassID_sClassID, (dispatch_function_t)session_registerBaseClass);
  return APSenderSessionGetClassID_sClassID;
}

uint64_t session_registerBaseClass()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t APSenderSessionGetTypeID()
{
  if (APSenderSessionGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APSenderSessionGetClassID_sRegisterOnce, &APSenderSessionGetClassID_sClassID, (dispatch_function_t)session_registerBaseClass);
  return CMBaseClassGetCFTypeID();
}

uint64_t APSenderSessionUtilityFetchInitialVolume(const void *a1, int *a2)
{
  CFTypeID v4;
  uint64_t BlockBufferWithCFString;
  uint64_t (*v6)(const void *, uint64_t, CFTypeRef, CMBlockBufferRef *);
  uint64_t v7;
  uint64_t DataPointer;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  size_t lengthAtOffsetOut;
  size_t totalLengthOut;
  CMBlockBufferRef theBuffer;
  char *dataPointerOut;
  CFTypeRef cf;
  char v19[16];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  dataPointerOut = 0;
  cf = 0;
  totalLengthOut = 0;
  theBuffer = 0;
  v13 = 0;
  lengthAtOffsetOut = 0;
  v12 = 0;
  v21 = 0u;
  v22 = 0u;
  *(_OWORD *)v19 = 0u;
  v20 = 0u;
  v11 = 0;
  if (!a1 || (v4 = CFGetTypeID(a1), v4 != FigTransportStreamGetTypeID()))
  {
    v9 = 4294895475;
    goto LABEL_14;
  }
  if (!a2)
  {
    v9 = 4294895475;
    goto LABEL_14;
  }
  BlockBufferWithCFString = FigCreateBlockBufferWithCFString();
  if ((_DWORD)BlockBufferWithCFString)
  {
    v9 = BlockBufferWithCFString;
    goto LABEL_14;
  }
  v6 = *(uint64_t (**)(const void *, uint64_t, CFTypeRef, CMBlockBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 56);
  if (!v6)
  {
    v9 = 4294954514;
LABEL_14:
    APSLogErrorAt();
    goto LABEL_21;
  }
  v7 = v6(a1, 1735815020, cf, &theBuffer);
  if ((_DWORD)v7)
  {
    v9 = v7;
    goto LABEL_14;
  }
  DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
  if ((_DWORD)DataPointer)
  {
    v9 = DataPointer;
    goto LABEL_14;
  }
  if (totalLengthOut != lengthAtOffsetOut)
  {
    v9 = 4294895475;
    goto LABEL_14;
  }
  v9 = HTTPGetHeaderField();
  __memcpy_chk();
  v19[v12] = 0;
  if (sscanf(v19, "%f", &v11) == 1)
  {
LABEL_16:
    if (gLogCategory_APSenderSession <= 10
      && (gLogCategory_APSenderSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_20;
  }
  v11 = -1046478848;
  if (gLogCategory_APSenderSession <= 50)
  {
    if (gLogCategory_APSenderSession != -1 || _LogCategory_Initialize())
      LogPrintF();
    goto LABEL_16;
  }
LABEL_20:
  *a2 = v11;
LABEL_21:
  if (cf)
    CFRelease(cf);
  if (theBuffer)
    CFRelease(theBuffer);
  return v9;
}

const __CFString *APSenderSessionUtilityGetAudioModeForEndpointStream()
{
  if (FigCFEqual())
    return CFSTR("moviePlayback");
  if (FigCFEqual())
    return CFSTR("spokenAudio");
  return CFSTR("default");
}

CFStringRef session_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APSenderSession %p]"), a1);
}

uint64_t APAudioEngineBufferedCreate(const __CFAllocator *a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  dispatch_queue_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *DefaultAirPlayMallocZoneCFAllocator;
  CFTypeRef v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int CFPreferenceNumberWithDefault;
  int v20;
  int v21;
  int v22;
  int IsFeatureEnabled;
  BOOL v24;
  const __CFAllocator *v25;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v27;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v29;
  uint64_t v30;
  CFMutableDictionaryRef v31;
  CFMutableDictionaryRef v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  OpaqueCMClock *HostTimeClock;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v44;
  CMTime v45;
  CMTime v46;
  CMTime time;
  CFTypeRef v48;

  v48 = 0;
  if (!a4)
  {
    APSLogErrorAt();
    return 4294951815;
  }
  if (!a2 || !a3)
  {
    APSLogErrorAt();
    v16 = 4294951815;
    goto LABEL_22;
  }
  if (gLogCategory_APAudioEngineBuffered <= 30
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  FigEndpointStreamAudioEngineGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
    v16 = v7;
    goto LABEL_202;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 392) = 0;
  *(_QWORD *)(DerivedStorage + 408) = (int)APSSettingsGetIntWithDefault();
  *(_QWORD *)(DerivedStorage + 8) = CFStringCreateWithCString(a1, "AudioEngineBuffered", 0x8000100u);
  v9 = APSDispatchSectionCreate();
  if ((_DWORD)v9)
  {
    v16 = v9;
    goto LABEL_202;
  }
  *(_DWORD *)(DerivedStorage + 804) = 1852990835;
  *(_DWORD *)(DerivedStorage + 432) = 36;
  v10 = dispatch_queue_create("AudioEngineDataProcessingQueue", 0);
  *(_QWORD *)(DerivedStorage + 424) = v10;
  if (!v10)
    goto LABEL_191;
  v11 = APSPriorityDispatcherCreate();
  if ((_DWORD)v11)
  {
    v16 = v11;
    goto LABEL_202;
  }
  v12 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 344) = v12;
  if (!v12 || (v13 = FigDispatchQueueCreateWithPriority(), (*(_QWORD *)(DerivedStorage + 352) = v13) == 0))
  {
LABEL_191:
    APSLogErrorAt();
    v16 = APSSignalErrorAt();
    goto LABEL_22;
  }
  DefaultAirPlayMallocZoneCFAllocator = (const void *)APSAllocatorGetDefaultAirPlayMallocZoneCFAllocator();
  if (!DefaultAirPlayMallocZoneCFAllocator)
  {
    *(_QWORD *)(DerivedStorage + 360) = 0;
    goto LABEL_21;
  }
  v15 = CFRetain(DefaultAirPlayMallocZoneCFAllocator);
  *(_QWORD *)(DerivedStorage + 360) = v15;
  if (!v15)
  {
LABEL_21:
    APSLogErrorAt();
    v16 = 4294951816;
    goto LABEL_22;
  }
  *(_QWORD *)(DerivedStorage + 416) = CFDictionaryGetInt64() != 0;
  APSSettingsIsFeatureEnabled();
  *(_QWORD *)(DerivedStorage + 56) = (int)FigGetCFPreferenceNumberWithDefault();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v48)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  *(_DWORD *)(DerivedStorage + 900) = 0;
  *(_QWORD *)(DerivedStorage + 904) = 0;
  *(_BYTE *)(DerivedStorage + 1032) = 0;
  *(_OWORD *)(DerivedStorage + 1064) = 0u;
  v17 = MEMORY[0x1E0CA2E18];
  v44 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 1036) = *MEMORY[0x1E0CA2E18];
  v18 = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(DerivedStorage + 1052) = v18;
  *(_DWORD *)(DerivedStorage + 16) = FigGetCFPreferenceNumberWithDefault();
  *(_DWORD *)(DerivedStorage + 20) = FigGetCFPreferenceNumberWithDefault();
  *(_DWORD *)(DerivedStorage + 336) = FigGetCFPreferenceNumberWithDefault();
  *(_OWORD *)(DerivedStorage + 156) = v44;
  *(_QWORD *)(DerivedStorage + 172) = v18;
  *(_OWORD *)(DerivedStorage + 184) = v44;
  *(_QWORD *)(DerivedStorage + 200) = v18;
  *(_OWORD *)(DerivedStorage + 208) = v44;
  *(_QWORD *)(DerivedStorage + 224) = v18;
  bufferedAudioEngine_updateStartWatermarkTime((uint64_t)v48);
  *(_DWORD *)(DerivedStorage + 180) = FigGetCFPreferenceNumberWithDefault();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v48)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  APSIsSuntoryEnabled();
  FigGetCFPreferenceNumberWithDefault();
  *(_QWORD *)(DerivedStorage + 232) = MillisecondsToUpTicks();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v48)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  FigGetCFPreferenceNumberWithDefault();
  *(_QWORD *)(DerivedStorage + 240) = MillisecondsToUpTicks();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v48)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  *(_DWORD *)(DerivedStorage + 256) = FigGetCFPreferenceNumberWithDefault();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v48)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  FigGetCFPreferenceNumberWithDefault();
  *(_QWORD *)(DerivedStorage + 264) = MillisecondsToUpTicks();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v48)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  FigGetCFPreferenceNumberWithDefault();
  *(_QWORD *)(DerivedStorage + 248) = MillisecondsToUpTicks();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v48)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  if (*(_QWORD *)(DerivedStorage + 240) < *(_QWORD *)(DerivedStorage + 264)
    && gLogCategory_APAudioEngineBuffered <= 110
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v48)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  *(_DWORD *)(DerivedStorage + 112) = FigGetCFPreferenceNumberWithDefault();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v48)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  APSIsAPMSpeaker();
  *(_DWORD *)(DerivedStorage + 148) = FigGetCFPreferenceNumberWithDefault();
  *(_DWORD *)(DerivedStorage + 152) = FigGetCFPreferenceNumberWithDefault();
  *(_DWORD *)(DerivedStorage + 116) = FigGetCFPreferenceNumberWithDefault();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v48)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  *(_DWORD *)(DerivedStorage + 120) = FigGetCFPreferenceNumberWithDefault();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v48)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  CMTimeMake(&time, CFPreferenceNumberWithDefault, 1);
  *(CMTime *)(DerivedStorage + 124) = time;
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v48)
      CMBaseObjectGetDerivedStorage();
    time = *(CMTime *)(DerivedStorage + 124);
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  v20 = FigGetCFPreferenceNumberWithDefault();
  CMTimeMake(&time, v20, 1);
  *(CMTime *)(DerivedStorage + 64) = time;
  v21 = FigGetCFPreferenceNumberWithDefault();
  CMTimeMake(&time, v21, 1);
  *(CMTime *)(DerivedStorage + 88) = time;
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v48)
      CMBaseObjectGetDerivedStorage();
    time = *(CMTime *)(DerivedStorage + 64);
    CMTimeGetSeconds(&time);
    time = *(CMTime *)(DerivedStorage + 88);
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  *(_DWORD *)(DerivedStorage + 648) = FigGetCFPreferenceNumberWithDefault();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v48)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  *(_DWORD *)(DerivedStorage + 24) = 300;
  if (APSSettingsIsFeatureEnabled())
  {
    v22 = FigGetCFPreferenceNumberWithDefault();
    CMTimeMake(&time, v22, 1000);
    *(CMTime *)(DerivedStorage + 300) = time;
    if (gLogCategory_APAudioEngineBuffered > 50
      || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_134;
    }
    if (v48)
      CMBaseObjectGetDerivedStorage();
    time = *(CMTime *)(DerivedStorage + 300);
    CMTimeGetSeconds(&time);
  }
  else
  {
    *(_DWORD *)(DerivedStorage + 296) = FigGetCFPreferenceNumberWithDefault();
    if (gLogCategory_APAudioEngineBuffered > 50
      || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_134;
    }
    if (v48)
      CMBaseObjectGetDerivedStorage();
  }
  LogPrintF();
LABEL_134:
  *(_BYTE *)(DerivedStorage + 324) = FigGetCFPreferenceNumberWithDefault() != 0;
  IsFeatureEnabled = APSSettingsIsFeatureEnabled();
  *(_BYTE *)(DerivedStorage + 325) = IsFeatureEnabled;
  if (IsFeatureEnabled)
    v24 = APSSettingsGetIntWithDefault() != 0;
  else
    v24 = 0;
  *(_BYTE *)(DerivedStorage + 326) = v24;
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v48)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  *(_WORD *)(DerivedStorage + 800) = 0;
  *(_BYTE *)(DerivedStorage + 596) = 0;
  *(_OWORD *)(DerivedStorage + 1000) = v44;
  *(_QWORD *)(DerivedStorage + 1016) = v18;
  v25 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 1024) = Mutable;
  if (!Mutable)
    goto LABEL_21;
  v27 = CFArrayCreateMutable(v25, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 1168) = v27;
  if (!v27)
    goto LABEL_21;
  *(_BYTE *)(DerivedStorage + 1080) = 0;
  *(_OWORD *)(DerivedStorage + 1084) = v44;
  *(_QWORD *)(DerivedStorage + 1100) = v18;
  *(_DWORD *)(DerivedStorage + 524) = 0;
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  v29 = CMBufferQueueCreate(a1, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(DerivedStorage + 1112));
  if ((_DWORD)v29)
  {
    v16 = v29;
  }
  else
  {
    CMTimeMake(&v46, 10000, 1000);
    CMTimeMake(&v45, 2000, 1000);
    v30 = FigSampleBufferConsumerCreateForBufferQueue();
    if (!(_DWORD)v30)
    {
      *(_QWORD *)(DerivedStorage + 1144) = 0;
      v31 = CFDictionaryCreateMutable(v25, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_QWORD *)(DerivedStorage + 1136) = v31;
      if (v31)
      {
        *(_QWORD *)(DerivedStorage + 968) = 0;
        v32 = CFDictionaryCreateMutable(v25, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        *(_QWORD *)(DerivedStorage + 976) = v32;
        if (v32)
        {
          v33 = FigGetCFPreferenceNumberWithDefault();
          CMTimeMake(&time, v33, 1);
          *(CMTime *)(DerivedStorage + 272) = time;
          if (gLogCategory_APAudioEngineBuffered <= 50)
          {
            if (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize())
            {
              if (v48)
                CMBaseObjectGetDerivedStorage();
              time = *(CMTime *)(DerivedStorage + 272);
              CMTimeGetSeconds(&time);
              LogPrintF();
            }
            if (gLogCategory_APAudioEngineBuffered <= 30
              && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
            {
              if (v48)
                CMBaseObjectGetDerivedStorage();
              LogPrintF();
            }
          }
          v34 = APSOasisCPUFloorRaiserCreate();
          if ((_DWORD)v34)
          {
            v16 = v34;
          }
          else if (APSSettingsIsFeatureEnabled()
                 && (v35 = APAudioHoseManagerBufferedCreate(a1, (_QWORD *)(DerivedStorage + 1680)), (_DWORD)v35))
          {
            v16 = v35;
          }
          else
          {
            if (gLogCategory_APAudioEngineBuffered <= 30
              && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
            {
              if (v48)
                CMBaseObjectGetDerivedStorage();
              LogPrintF();
            }
            *(_QWORD *)(DerivedStorage + 328) = CFRetain(a2);
            v36 = MEMORY[0x1E0CF7500];
            *(_OWORD *)(DerivedStorage + 1424) = *MEMORY[0x1E0CF7500];
            *(_QWORD *)(DerivedStorage + 1440) = *(_QWORD *)(v36 + 16);
            *(_OWORD *)(DerivedStorage + 1448) = v44;
            *(_QWORD *)(DerivedStorage + 1464) = v18;
            *(_OWORD *)(DerivedStorage + 1472) = v44;
            *(_QWORD *)(DerivedStorage + 1488) = v18;
            HostTimeClock = CMClockGetHostTimeClock();
            CMClockGetTime(&time, HostTimeClock);
            *(CMTime *)(DerivedStorage + 1496) = time;
            v38 = MEMORY[0x1E0CA2E28];
            v39 = *MEMORY[0x1E0CA2E28];
            *(_OWORD *)(DerivedStorage + 1544) = *MEMORY[0x1E0CA2E28];
            v40 = *(_QWORD *)(v38 + 16);
            *(_QWORD *)(DerivedStorage + 1560) = v40;
            *(_OWORD *)(DerivedStorage + 1520) = v39;
            *(_QWORD *)(DerivedStorage + 1536) = v40;
            *(_OWORD *)(DerivedStorage + 652) = v44;
            *(_QWORD *)(DerivedStorage + 668) = v18;
            CMNotificationCenterGetDefaultLocalCenter();
            v41 = FigNotificationCenterAddWeakListener();
            if ((_DWORD)v41)
            {
              v16 = v41;
            }
            else
            {
              CMNotificationCenterGetDefaultLocalCenter();
              v42 = FigNotificationCenterAddWeakListener();
              if (!(_DWORD)v42)
              {
                if (gLogCategory_APAudioEngineBuffered <= 30
                  && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
                {
                  if (v48)
                    CMBaseObjectGetDerivedStorage();
                  LogPrintF();
                }
                v16 = 0;
                *a4 = v48;
                return v16;
              }
              v16 = v42;
            }
          }
          goto LABEL_202;
        }
      }
      goto LABEL_21;
    }
    v16 = v30;
  }
LABEL_202:
  APSLogErrorAt();
LABEL_22:
  if (v48)
    CFRelease(v48);
  return v16;
}

double bufferedAudioEngine_updateStartWatermarkTime(uint64_t a1)
{
  uint64_t DerivedStorage;
  int CFPreferenceNumberWithDefault;
  int v4;
  _OWORD *v5;
  _OWORD *v6;
  double result;
  CMTime rhs;
  CMTime time2;
  CMTime time1;
  CMTime v11;
  CMTime v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v11 = v12;
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  CMTimeMake(&v12, (uint64_t)(float)CFPreferenceNumberWithDefault, 1000);
  v4 = FigGetCFPreferenceNumberWithDefault();
  CMTimeMake(&v11, (uint64_t)(float)v4, 1000);
  v5 = (_OWORD *)(DerivedStorage + 156);
  time1 = v12;
  time2 = *(CMTime *)(DerivedStorage + 156);
  if (CMTimeCompare(&time1, &time2)
    && gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    *(_OWORD *)&time1.value = *v5;
    time1.epoch = *(_QWORD *)(DerivedStorage + 172);
    CMTimeGetSeconds(&time1);
    time1 = v12;
    CMTimeGetSeconds(&time1);
    LogPrintF();
  }
  v6 = (_OWORD *)(DerivedStorage + 184);
  time1 = v11;
  time2 = *(CMTime *)(DerivedStorage + 184);
  if (CMTimeCompare(&time1, &time2)
    && gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    *(_OWORD *)&time1.value = *v6;
    time1.epoch = *(_QWORD *)(DerivedStorage + 200);
    CMTimeGetSeconds(&time1);
    time1 = v11;
    CMTimeGetSeconds(&time1);
    LogPrintF();
  }
  *v5 = *(_OWORD *)&v12.value;
  *(_QWORD *)(DerivedStorage + 172) = v12.epoch;
  *v6 = *(_OWORD *)&v11.value;
  *(_QWORD *)(DerivedStorage + 200) = v11.epoch;
  CMTimeMake(&rhs, 2500, 1000);
  *(_OWORD *)&time2.value = *v6;
  time2.epoch = *(_QWORD *)(DerivedStorage + 200);
  CMTimeAdd(&time1, &time2, &rhs);
  result = *(double *)&time1.value;
  *(CMTime *)(DerivedStorage + 208) = time1;
  return result;
}

uint64_t bufferedAudioEngine_handleClockLockStateChanged(uint64_t a1, const void *a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    CFRetain(a2);
    return APSPriorityDispatcherAsyncF();
  }
  return result;
}

uint64_t bufferedAudioEngine_handleClockGrandmasterChanged(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (gLogCategory_APAudioEngineBuffered <= 50)
    {
      if (gLogCategory_APAudioEngineBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      {
        CMBaseObjectGetDerivedStorage();
        return LogPrintF();
      }
    }
  }
  return result;
}

uint64_t bufferedAudioEngine_Invalidate()
{
  CMBaseObjectGetDerivedStorage();
  return APSPriorityDispatcherSyncTask();
}

void bufferedAudioEngine_Finalize(const void *a1)
{
  uint64_t DerivedStorage;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  void (*v17)(uint64_t, const void *);
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const void *v46;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListeners();
  if (!APSSettingsIsFeatureEnabled())
  {
    v3 = *(_QWORD **)(DerivedStorage + 584);
    if (v3)
    {
      v4 = *MEMORY[0x1E0CF7380];
      v5 = *MEMORY[0x1E0C9AE40];
      do
      {
        v6 = (_QWORD *)*v3;
        v7 = v3[2];
        v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v8)
          v8(v7, v4, v5);
        v9 = (const void *)v3[2];
        if (v9)
          CFRelease(v9);
        v10 = (const void *)v3[31];
        if (v10)
          CFRelease(v10);
        free(v3);
        --*(_DWORD *)(DerivedStorage + 592);
        v3 = v6;
      }
      while (v6);
    }
  }
  v11 = *(const void **)(DerivedStorage + 368);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 368) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 440);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 440) = 0;
  }
  v13 = *(NSObject **)(DerivedStorage + 424);
  if (v13)
  {
    dispatch_release(v13);
    *(_QWORD *)(DerivedStorage + 424) = 0;
  }
  v14 = *(NSObject **)(DerivedStorage + 344);
  if (v14)
  {
    dispatch_release(v14);
    *(_QWORD *)(DerivedStorage + 344) = 0;
  }
  v15 = *(NSObject **)(DerivedStorage + 352);
  if (v15)
  {
    dispatch_release(v15);
    *(_QWORD *)(DerivedStorage + 352) = 0;
  }
  bufferedAudioEngine_tearDownResumedStateAndStructuresInternal(a1, 0);
  v16 = *(_QWORD *)(DerivedStorage + 328);
  if (v16)
  {
    v17 = *(void (**)(uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
    if (v17)
      v17(v16, a1);
  }
  if (*(_QWORD *)(DerivedStorage + 456))
  {
    APSTimedInfoManagerSuspend();
    v18 = *(const void **)(DerivedStorage + 456);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(DerivedStorage + 456) = 0;
    }
  }
  v19 = *(const void **)(DerivedStorage + 952);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(DerivedStorage + 952) = 0;
  }
  v20 = *(const void **)(DerivedStorage + 960);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(DerivedStorage + 960) = 0;
  }
  v21 = *(const void **)(DerivedStorage + 536);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(DerivedStorage + 536) = 0;
  }
  v22 = *(const void **)(DerivedStorage + 448);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(DerivedStorage + 448) = 0;
  }
  v23 = *(const void **)(DerivedStorage + 560);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(DerivedStorage + 560) = 0;
  }
  v24 = *(const void **)(DerivedStorage + 568);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(DerivedStorage + 568) = 0;
  }
  v25 = *(const void **)(DerivedStorage + 792);
  if (v25)
  {
    CFRelease(v25);
    *(_QWORD *)(DerivedStorage + 792) = 0;
  }
  v26 = *(const void **)(DerivedStorage + 544);
  if (v26)
  {
    CFRelease(v26);
    *(_QWORD *)(DerivedStorage + 544) = 0;
  }
  v27 = *(const void **)(DerivedStorage + 552);
  if (v27)
  {
    CFRelease(v27);
    *(_QWORD *)(DerivedStorage + 552) = 0;
  }
  v28 = *(const void **)(DerivedStorage + 360);
  if (v28)
  {
    CFRelease(v28);
    *(_QWORD *)(DerivedStorage + 360) = 0;
  }
  v29 = *(const void **)(DerivedStorage + 376);
  if (v29)
  {
    CFRelease(v29);
    *(_QWORD *)(DerivedStorage + 376) = 0;
  }
  v30 = *(const void **)(DerivedStorage + 384);
  if (v30)
  {
    CFRelease(v30);
    *(_QWORD *)(DerivedStorage + 384) = 0;
  }
  v31 = *(const void **)(DerivedStorage + 1024);
  if (v31)
  {
    CFRelease(v31);
    *(_QWORD *)(DerivedStorage + 1024) = 0;
  }
  v32 = *(const void **)(DerivedStorage + 1168);
  if (v32)
  {
    CFRelease(v32);
    *(_QWORD *)(DerivedStorage + 1168) = 0;
  }
  v33 = *(const void **)(DerivedStorage + 488);
  if (v33)
  {
    CFRelease(v33);
    *(_QWORD *)(DerivedStorage + 488) = 0;
  }
  v34 = *(const void **)(DerivedStorage + 496);
  if (v34)
  {
    CFRelease(v34);
    *(_QWORD *)(DerivedStorage + 496) = 0;
  }
  v35 = *(const void **)(DerivedStorage + 504);
  if (v35)
  {
    CFRelease(v35);
    *(_QWORD *)(DerivedStorage + 504) = 0;
  }
  v36 = *(const void **)(DerivedStorage + 512);
  if (v36)
  {
    CFRelease(v36);
    *(_QWORD *)(DerivedStorage + 512) = 0;
  }
  v37 = *(const void **)(DerivedStorage + 1120);
  if (v37)
  {
    CFRelease(v37);
    *(_QWORD *)(DerivedStorage + 1120) = 0;
  }
  v38 = *(const void **)(DerivedStorage + 1112);
  if (v38)
  {
    CFRelease(v38);
    *(_QWORD *)(DerivedStorage + 1112) = 0;
  }
  if (APSSettingsIsFeatureEnabled())
  {
    v39 = *(const void **)(DerivedStorage + 1680);
    if (v39)
    {
      CFRelease(v39);
      *(_QWORD *)(DerivedStorage + 1680) = 0;
    }
  }
  bufferedAudioEngine_releaseCryptors((uint64_t)a1, 0);
  v40 = *(const void **)(DerivedStorage + 1136);
  if (v40)
  {
    CFRelease(v40);
    *(_QWORD *)(DerivedStorage + 1136) = 0;
  }
  bufferedAudioEngine_releaseMagicCookies((uint64_t)a1, 0);
  v41 = *(const void **)(DerivedStorage + 976);
  if (v41)
  {
    CFRelease(v41);
    *(_QWORD *)(DerivedStorage + 976) = 0;
  }
  v42 = *(const void **)(DerivedStorage + 576);
  if (v42)
  {
    CFRelease(v42);
    *(_QWORD *)(DerivedStorage + 576) = 0;
  }
  v43 = *(const void **)(DerivedStorage + 944);
  if (v43)
  {
    CFRelease(v43);
    *(_QWORD *)(DerivedStorage + 944) = 0;
  }
  v44 = *(const void **)(DerivedStorage + 888);
  if (v44)
  {
    CFRelease(v44);
    *(_QWORD *)(DerivedStorage + 888) = 0;
  }
  v45 = *(const void **)(DerivedStorage + 328);
  if (v45)
  {
    CFRelease(v45);
    *(_QWORD *)(DerivedStorage + 328) = 0;
  }
  v46 = *(const void **)(DerivedStorage + 8);
  if (v46)
  {
    CFRelease(v46);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
}

__CFString *bufferedAudioEngine_CopyDebugDescription()
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APAudioEngineBuffered>"));
  return Mutable;
}

uint64_t bufferedAudioEngine_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 30
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  if (a2 && a4)
  {
    v7 = APSPriorityDispatcherSyncTask();
    if ((_DWORD)v7)
      APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    return 4294951815;
  }
  return v7;
}

uint64_t bufferedAudioEngine_SetProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 30
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  if (a2)
  {
    v4 = APSPriorityDispatcherSyncTask();
    if ((_DWORD)v4)
      APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    return 4294951815;
  }
  return v4;
}

uint64_t bufferedAudioEngine_invalidateInternal(uint64_t *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  void (*v4)(uint64_t, _QWORD, _BYTE *(*)(), _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 40
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  if (!APSSettingsIsFeatureEnabled())
  {
    while (*(_QWORD *)(DerivedStorage + 584))
      bufferedAudioEngine_removeHose(*a1);
  }
  v3 = *a1;
  v4 = *(void (**)(uint64_t, _QWORD, _BYTE *(*)(), _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v4)
    v4(v3, 0, bufferedAudioEngine_invalidateInternalCompletion, 0);
  else
    *(_BYTE *)CMBaseObjectGetDerivedStorage() = 1;
  return 0;
}

uint64_t bufferedAudioEngine_removeHose(uint64_t a1)
{
  uint64_t DerivedStorage;
  _QWORD *HoseDecriptorFromHose;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, _QWORD);
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned int CFPreferenceNumberWithDefault;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  int v21;
  CFTypeRef v22;
  BOOL v23;
  CFTypeID v24;
  int v25;
  uint64_t v26;
  unsigned int valuePtr;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 584))
    goto LABEL_28;
  HoseDecriptorFromHose = bufferedAudioEngine_getHoseDecriptorFromHose();
  if (!HoseDecriptorFromHose)
  {
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
LABEL_55:
    v26 = 0;
    goto LABEL_56;
  }
  v4 = HoseDecriptorFromHose;
  bufferedAudioEngine_reportAndResetRTCBufferLevelAndUnderrunDataForAllExistingHoses(a1);
  v5 = CFStringCopyUTF8CString();
  if (!(_DWORD)v5)
  {
    v7 = *v4;
    v6 = (_QWORD *)v4[1];
    if (v6)
    {
      *v6 = v7;
      v7 = *v4;
      if (!*v4)
      {
LABEL_7:
        v8 = v4[2];
        v9 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v9)
          v9(v8, *MEMORY[0x1E0CF7380], *MEMORY[0x1E0C9AE40]);
        if (*((_BYTE *)v4 + 24))
          *(_BYTE *)(DerivedStorage + 1080) = 0;
        v10 = (const void *)v4[35];
        if (v10)
        {
          CFRelease(v10);
          v4[35] = 0;
        }
        v11 = (const void *)v4[36];
        if (v11)
        {
          CFRelease(v11);
          v4[36] = 0;
        }
        v12 = (const void *)v4[2];
        if (v12)
        {
          CFRelease(v12);
          v4[2] = 0;
        }
        v13 = (const void *)v4[31];
        if (v13)
          CFRelease(v13);
        free(v4);
        --*(_DWORD *)(DerivedStorage + 592);
        if (gLogCategory_APAudioEngineBuffered <= 40
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1)
            CMBaseObjectGetDerivedStorage();
          LogPrintF();
        }
LABEL_28:
        bufferedAudioEngine_updateStartWatermarkTime(a1);
        v14 = (_BYTE *)CMBaseObjectGetDerivedStorage();
        cf = 0;
        valuePtr = 0;
        if (!*v14)
        {
          v15 = v14;
          CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
          v17 = (_QWORD *)*((_QWORD *)v15 + 73);
          if (v17)
          {
            v18 = *MEMORY[0x1E0CF7340];
            do
            {
              v19 = v17[2];
              v20 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
              if (v20)
              {
                v21 = v20(v19, v18, 0, &cf);
                v22 = cf;
                if (v21)
                  v23 = 1;
                else
                  v23 = cf == 0;
                if (v23)
                  goto LABEL_40;
                v24 = CFGetTypeID(cf);
                if (v24 == CFNumberGetTypeID())
                {
                  CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
                  if (CFPreferenceNumberWithDefault <= valuePtr)
                    CFPreferenceNumberWithDefault = valuePtr;
                }
              }
              v22 = cf;
LABEL_40:
              if (v22)
              {
                CFRelease(v22);
                cf = 0;
              }
              valuePtr = 0;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
          if (CFPreferenceNumberWithDefault >= 0x753000)
            v25 = 7680000;
          else
            v25 = CFPreferenceNumberWithDefault;
          *((_DWORD *)v15 + 162) = v25;
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (a1)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          if (cf)
            CFRelease(cf);
        }
        goto LABEL_55;
      }
    }
    else
    {
      *(_QWORD *)(DerivedStorage + 584) = v7;
      if (!v7)
        goto LABEL_7;
    }
    *(_QWORD *)(v7 + 8) = v6;
    goto LABEL_7;
  }
  v26 = v5;
  APSLogErrorAt();
LABEL_56:
  if (!*(_DWORD *)(DerivedStorage + 592))
  {
    *(_WORD *)(DerivedStorage + 800) = 0;
    *(_BYTE *)(DerivedStorage + 596) = 0;
  }
  return v26;
}

_BYTE *bufferedAudioEngine_invalidateInternalCompletion()
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  *result = 1;
  return result;
}

_QWORD *bufferedAudioEngine_getHoseDecriptorFromHose()
{
  _QWORD *v0;

  v0 = (_QWORD *)(CMBaseObjectGetDerivedStorage() + 584);
  do
    v0 = (_QWORD *)*v0;
  while (v0 && !FigCFEqual());
  return v0;
}

void bufferedAudioEngine_reportAndResetRTCBufferLevelAndUnderrunDataForAllExistingHoses(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  BOOL v4;
  const __CFAllocator *v5;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  const void *UInt64;
  CMTimeEpoch v12;
  uint64_t Float64;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  uint64_t v19;
  const void *v20;
  const void *v21;
  uint64_t v22;
  CFTypeRef cf;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef v27;
  CMTime v28;
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 584);
  if (*(_QWORD *)(DerivedStorage + 1176))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v22 = a1;
    while (!*(_QWORD *)(v3 + 304))
    {
LABEL_87:
      v3 = *(_QWORD *)v3;
      if (!v3)
        return;
    }
    bufferedAudioEngine_cancelRTCUnderrunForHose(a1, v3);
    *(_QWORD *)(v3 + 360) = mach_absolute_time();
    if (gLogCategory_APAudioEngineBuffered <= 30
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1176) && (unint64_t)UpTicksToSeconds() >= 6)
    {
      Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v7 = Mutable;
        if (!*(_QWORD *)(v3 + 304) || (v8 = APSStatsHistogramCopyValuesAsRTCString()) == 0)
        {
          APSLogErrorAt();
          v20 = v7;
LABEL_76:
          CFRelease(v20);
          goto LABEL_77;
        }
        v9 = (const void *)v8;
        v10 = (const void *)UpTicksToMilliseconds();
        if (v10)
        {
          UInt64 = (const void *)FigCFNumberCreateUInt64();
          if (UInt64)
          {
            time = *(CMTime *)(v3 + 396);
            CMTimeGetSeconds(&time);
            cf = (CFTypeRef)FigCFNumberCreateFloat64();
            if (cf)
            {
              if ((*(_BYTE *)(v3 + 432) & 1) != 0)
              {
                *(_OWORD *)&time.value = *(_OWORD *)(v3 + 420);
                v12 = *(_QWORD *)(v3 + 436);
              }
              else
              {
                *(_OWORD *)&time.value = *MEMORY[0x1E0CA2E68];
                v12 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
              }
              time.epoch = v12;
              CMTimeGetSeconds(&time);
              Float64 = FigCFNumberCreateFloat64();
              if (Float64)
              {
                v25 = (CFTypeRef)Float64;
                v28 = *(CMTime *)(v3 + 444);
                CMTimeGetSeconds(&v28);
                v14 = FigCFNumberCreateFloat64();
                if (v14)
                {
                  v27 = (CFTypeRef)v14;
                  v15 = FigCFNumberCreateFloat64();
                  if (v15)
                  {
                    v26 = (CFTypeRef)v15;
                    v16 = FigCFNumberCreateFloat64();
                    if (v16)
                    {
                      v24 = (CFTypeRef)v16;
                      v17 = (const void *)FigCFNumberCreateFloat64();
                      if (v17)
                      {
                        v18 = (const void *)FigCFNumberCreateFloat64();
                        if (v18)
                        {
                          v19 = FigCFNumberCreateFloat64();
                          if (v19)
                          {
                            v10 = (const void *)FigCFNumberCreateFloat64();
                            if (v10)
                            {
                              v28 = *(CMTime *)(v3 + 396);
                              CMTimeGetSeconds(&v28);
                              FigCFDictionarySetUInt32();
                              FigCFDictionarySetValue();
                              FigCFDictionarySetValue();
                              FigCFDictionarySetValue();
                              FigCFDictionarySetValue();
                              FigCFDictionarySetValue();
                              FigCFDictionarySetValue();
                              FigCFDictionarySetUInt32();
                              FigCFDictionarySetValue();
                              FigCFDictionarySetValue();
                              FigCFDictionarySetValue();
                              FigCFDictionarySetValue();
                              FigCFDictionarySetValue();
                              FigCFDictionarySetValue();
                              FigCFDictionarySetValue();
                              FigCFDictionarySetValue();
                              FigCFDictionarySetValue();
                              a1 = v22;
                              if (gLogCategory_APAudioEngineBuffered <= 50)
                              {
                                if (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize())
                                {
                                  if (v22)
                                    CMBaseObjectGetDerivedStorage();
                                  LogPrintF();
                                }
                                if (gLogCategory_APAudioEngineBuffered <= 50)
                                {
                                  if (gLogCategory_APAudioEngineBuffered != -1
                                    || _LogCategory_Initialize())
                                  {
                                    if (v22)
                                      CMBaseObjectGetDerivedStorage();
                                    LogPrintF();
                                  }
                                  if (gLogCategory_APAudioEngineBuffered <= 50
                                    && (gLogCategory_APAudioEngineBuffered != -1
                                     || _LogCategory_Initialize()))
                                  {
                                    if (v22)
                                      CMBaseObjectGetDerivedStorage();
                                    LogPrintF();
                                  }
                                }
                              }
                              APSRTCReportingAgentSendEvent();
                              goto LABEL_56;
                            }
                            APSLogErrorAt();
                          }
                          else
                          {
                            APSLogErrorAt();
                            v10 = 0;
                          }
                          goto LABEL_105;
                        }
                        APSLogErrorAt();
LABEL_104:
                        v10 = 0;
                        v19 = 0;
LABEL_105:
                        a1 = v22;
                        goto LABEL_56;
                      }
                      APSLogErrorAt();
LABEL_103:
                      v18 = 0;
                      goto LABEL_104;
                    }
                    APSLogErrorAt();
LABEL_102:
                    v24 = 0;
                    v17 = 0;
                    goto LABEL_103;
                  }
                  APSLogErrorAt();
LABEL_100:
                  v26 = 0;
                  goto LABEL_102;
                }
                APSLogErrorAt();
LABEL_98:
                v27 = 0;
                goto LABEL_100;
              }
              APSLogErrorAt();
            }
            else
            {
              APSLogErrorAt();
              cf = 0;
            }
            v25 = 0;
            goto LABEL_98;
          }
          APSLogErrorAt();
          cf = 0;
          v24 = 0;
          v25 = 0;
          v26 = 0;
          v27 = 0;
          v17 = 0;
          v18 = 0;
          v10 = 0;
        }
        else
        {
          APSLogErrorAt();
          UInt64 = 0;
          cf = 0;
          v24 = 0;
          v25 = 0;
          v26 = 0;
          v27 = 0;
          v17 = 0;
          v18 = 0;
        }
        v19 = 0;
LABEL_56:
        CFRelease(v7);
        CFRelease(v9);
        if (UInt64)
          CFRelease(UInt64);
        if (cf)
          CFRelease(cf);
        if (v25)
          CFRelease(v25);
        if (v27)
          CFRelease(v27);
        if (v26)
          CFRelease(v26);
        if (v24)
          CFRelease(v24);
        if (v17)
          CFRelease(v17);
        if (v18)
          CFRelease(v18);
        if (v10)
          CFRelease(v10);
        if (!v19)
          goto LABEL_77;
        v20 = (const void *)v19;
        goto LABEL_76;
      }
      APSLogErrorAt();
    }
LABEL_77:
    if (gLogCategory_APAudioEngineBuffered <= 30
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    v21 = *(const void **)(v3 + 304);
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(v3 + 304) = 0;
    }
    bufferedAudioEngine_resetAllRTCDataForHose(a1, v3);
    goto LABEL_87;
  }
}

void bufferedAudioEngine_cancelRTCUnderrunForHose(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  __int128 v5;
  CMTimeEpoch v6;
  __int128 v7;
  CMTime rhs;
  CMTime lhs;
  CMTime v10;
  CMTime v11;
  int v12;

  v12 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v5 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v10.value = *MEMORY[0x1E0CA2E18];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v10.epoch = v6;
  if (a2 && *(_QWORD *)(DerivedStorage + 1176) && (*(_BYTE *)(a2 + 380) & 1) != 0)
  {
    v7 = v5;
    bufferedAudioEngine_getCurrentRemoteMediaTimeInternal(&v12, &v10);
    if (v12)
    {
      APSLogErrorAt();
    }
    else
    {
      lhs = v10;
      rhs = *(CMTime *)(a2 + 368);
      CMTimeSubtract(&v11, &lhs, &rhs);
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        lhs = v10;
        CMTimeGetSeconds(&lhs);
        lhs = v11;
        CMTimeGetSeconds(&lhs);
        LogPrintF();
      }
      lhs = v11;
      bufferedAudioEngine_updateRTCUnderrunStatisticsForHose(a1, a2, &lhs);
      *(_OWORD *)(a2 + 368) = v7;
      *(_QWORD *)(a2 + 384) = v6;
    }
  }
}

double bufferedAudioEngine_resetAllRTCDataForHose(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  double result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (*(_QWORD *)(DerivedStorage + 1176))
    {
      *(_QWORD *)(a2 + 352) = mach_absolute_time();
      *(_QWORD *)(a2 + 296) = mach_absolute_time();
      *(_DWORD *)(a2 + 392) = 0;
      v5 = MEMORY[0x1E0CA2E18];
      v6 = *MEMORY[0x1E0CA2E18];
      *(_OWORD *)(a2 + 368) = *MEMORY[0x1E0CA2E18];
      v7 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(a2 + 384) = v7;
      v8 = MEMORY[0x1E0CA2E68];
      v9 = *MEMORY[0x1E0CA2E68];
      *(_OWORD *)(a2 + 396) = *MEMORY[0x1E0CA2E68];
      v10 = *(_QWORD *)(v8 + 16);
      *(_QWORD *)(a2 + 412) = v10;
      *(_OWORD *)(a2 + 420) = v6;
      *(_QWORD *)(a2 + 436) = v7;
      *(_OWORD *)(a2 + 444) = v9;
      *(_QWORD *)(a2 + 460) = v10;
      *(_QWORD *)(a2 + 472) = 0;
      *(_QWORD *)(a2 + 480) = 0;
      *(_QWORD *)(a2 + 312) = 0x7FF0000000000000;
      result = 0.0;
      *(_OWORD *)(a2 + 320) = 0u;
      *(_OWORD *)(a2 + 336) = 0u;
    }
  }
  return result;
}

void bufferedAudioEngine_getCurrentRemoteMediaTimeInternal(int *a1@<X1>, CMTime *a2@<X8>)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  OpaqueCMTimebase *v6;
  uint64_t v7;
  CMTimeEpoch v8;
  int IsFeatureEnabled;
  const __CFAllocator *v10;
  CFDictionaryRef v11;
  uint64_t CMBaseObject;
  uint64_t (*v13)(uint64_t, const __CFString *, CFDictionaryRef);
  CMTime v14;

  v4 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E18];
  a2->epoch = *(_QWORD *)(v4 + 16);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 804) == 1937011316)
  {
    v6 = *(OpaqueCMTimebase **)(DerivedStorage + 792);
    if (!v6 || (CMTimebaseGetTime(a2, v6), (a2->flags & 0x1D) != 1))
    {
LABEL_12:
      APSLogErrorAt();
      IsFeatureEnabled = APSSignalErrorAt();
      goto LABEL_13;
    }
  }
  else
  {
    v7 = DerivedStorage + 724;
    if ((*(_DWORD *)(DerivedStorage + 736) & 1) == 0)
      v7 = DerivedStorage + 700;
    v8 = *(_QWORD *)(v7 + 16);
    *(_OWORD *)&a2->value = *(_OWORD *)v7;
    a2->epoch = v8;
    if ((a2->flags & 0x1D) != 1)
      goto LABEL_12;
  }
  IsFeatureEnabled = APSSettingsIsFeatureEnabled();
  if (!IsFeatureEnabled)
  {
LABEL_13:
    v11 = 0;
    goto LABEL_14;
  }
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v14 = *a2;
  v11 = CMTimeCopyAsDictionary(&v14, v10);
  CMBaseObject = APAudioHoseManagerBufferedGetCMBaseObject(*(_QWORD *)(DerivedStorage + 1680));
  v13 = *(uint64_t (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
  if (v13)
    IsFeatureEnabled = v13(CMBaseObject, CFSTR("CurrentRemoteMediaTime"), v11);
  else
    IsFeatureEnabled = -12782;
LABEL_14:
  if (a1)
    *a1 = IsFeatureEnabled;
  if (v11)
    CFRelease(v11);
}

void bufferedAudioEngine_updateRTCUnderrunStatisticsForHose(uint64_t a1, uint64_t a2, CMTime *a3)
{
  uint64_t DerivedStorage;
  unint64_t v6;
  double v7;
  double v8;
  Float64 Seconds;
  unint64_t v10;
  Float64 v11;
  unint64_t v12;
  CMTime v13;
  CMTime lhs;
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (*(_QWORD *)(DerivedStorage + 1176))
    {
      lhs = *(CMTime *)(a2 + 396);
      v13 = *a3;
      CMTimeAdd(&time, &lhs, &v13);
      *(CMTime *)(a2 + 396) = time;
      lhs = *(CMTime *)(a2 + 420);
      v13 = *a3;
      CMTimeMinimum(&time, &lhs, &v13);
      *(CMTime *)(a2 + 420) = time;
      lhs = *(CMTime *)(a2 + 444);
      v13 = *a3;
      CMTimeMaximum(&time, &lhs, &v13);
      HIDWORD(v6) = HIDWORD(time.value);
      *(CMTime *)(a2 + 444) = time;
      v7 = *(double *)(a2 + 480);
      LODWORD(v6) = *(_DWORD *)(a2 + 392);
      v8 = (double)v6;
      time = *a3;
      Seconds = CMTimeGetSeconds(&time);
      LODWORD(v10) = *(_DWORD *)(a2 + 392);
      *(Float64 *)(a2 + 480) = (Seconds + v7 * v8) / (double)v10;
      time = *a3;
      v11 = CMTimeGetSeconds(&time);
      LODWORD(v12) = *(_DWORD *)(a2 + 392);
      *(double *)(a2 + 472) = *(double *)(a2 + 472) + (v11 - *(double *)(a2 + 472)) / (double)v12;
    }
  }
}

void bufferedAudioEngine_tearDownResumedStateAndStructuresInternal(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  opaqueCMBufferQueue *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  CMTimeEpoch v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t v25;
  uint64_t v26;
  OpaqueCMClock *HostTimeClock;
  CFMutableDictionaryRef v28;
  __CFDictionary *v29;
  double Seconds;
  CFMutableDictionaryRef Mutable;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  const void *v35;
  const __CFArray *v36;
  CFIndex Count;
  CFIndex v38;
  CFIndex i;
  uint64_t v40;
  __CFDictionary *v41;
  const __CFAllocator *v42;
  CFMutableArrayRef v43;
  CFMutableArrayRef v44;
  CFMutableArrayRef v45;
  CFMutableArrayRef v46;
  CFMutableArrayRef v47;
  uint64_t v48;
  uint64_t v49;
  CFIndex v50;
  CFIndex v51;
  CFIndex j;
  const __CFAllocator *v53;
  CFMutableDictionaryRef v54;
  CFMutableDictionaryRef v55;
  __CFArray *v56;
  __CFArray *v57;
  _QWORD *v58;
  const void *v59;
  const void *v60;
  const void *v61;
  const void *v62;
  const void *v63;
  const void *v64;
  const void *v65;
  const void *v66;
  const void *v67;
  const void *v68;
  const void *v69;
  __CFArray *v70;
  __CFArray *v71;
  uint64_t v72;
  uint64_t v73;
  __CFDictionary *v74;
  __CFArray *v75;
  __CFArray *v76;
  __int128 v77;
  CMTime rhs;
  CMTime time;
  CMTime v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  CMTime lhs;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(v5 + 1672))
  {
    APSPriorityDispatchSourceCancel();
    CFRelease(*(CFTypeRef *)(v5 + 1672));
    *(_QWORD *)(v5 + 1672) = 0;
  }
  v6 = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(v6 + 472))
  {
    APSPriorityDispatchSourceCancel();
    CFRelease(*(CFTypeRef *)(v6 + 472));
    *(_QWORD *)(v6 + 472) = 0;
  }
  *(_BYTE *)(v6 + 480) = 0;
  v7 = *(opaqueCMBufferQueue **)(DerivedStorage + 1112);
  if (v7)
  {
    CMBufferQueueReset(v7);
    *(_QWORD *)(DerivedStorage + 1128) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 528);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 528) = 0;
  }
  APMessageRingBufferedFlush(*(_QWORD *)(DerivedStorage + 560), 0, 0);
  v9 = *(const void **)(DerivedStorage + 560);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 560) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 568);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 568) = 0;
  }
  v11 = MEMORY[0x1E0CA2E68];
  v12 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)(DerivedStorage + 676) = *MEMORY[0x1E0CA2E68];
  v13 = *(_QWORD *)(v11 + 16);
  *(_QWORD *)(DerivedStorage + 692) = v13;
  *(_OWORD *)(DerivedStorage + 700) = v12;
  *(_QWORD *)(DerivedStorage + 716) = v13;
  v14 = MEMORY[0x1E0CA2E18];
  v15 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 724) = *MEMORY[0x1E0CA2E18];
  v16 = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(DerivedStorage + 740) = v16;
  *(_OWORD *)(DerivedStorage + 652) = v15;
  *(_QWORD *)(DerivedStorage + 668) = v16;
  *(_QWORD *)(DerivedStorage + 1052) = v16;
  v77 = v15;
  *(_OWORD *)(DerivedStorage + 1036) = v15;
  bufferedAudioEngine_setTranscodeIsRestingAndUpdateConsumer((uint64_t)a1, 0);
  v17 = *(const void **)(DerivedStorage + 920);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(DerivedStorage + 920) = 0;
  }
  v18 = *(const void **)(DerivedStorage + 928);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(DerivedStorage + 928) = 0;
  }
  APSTimedInfoManagerSuspend();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  v19 = *(const void **)(DerivedStorage + 456);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(DerivedStorage + 456) = 0;
  }
  v20 = *(const void **)(DerivedStorage + 952);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(DerivedStorage + 952) = 0;
  }
  v21 = *(const void **)(DerivedStorage + 960);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(DerivedStorage + 960) = 0;
  }
  v22 = *(const void **)(DerivedStorage + 792);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(DerivedStorage + 792) = 0;
  }
  *(_QWORD *)(DerivedStorage + 808) = 0;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 1168));
  *(_WORD *)(DerivedStorage + 800) = 0;
  *(_BYTE *)(DerivedStorage + 596) = 0;
  *(_OWORD *)(DerivedStorage + 1000) = v77;
  *(_QWORD *)(DerivedStorage + 1016) = v16;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 1024));
  *(_BYTE *)(DerivedStorage + 760) = 0;
  *(_QWORD *)(DerivedStorage + 816) = 0xBFF0000000000000;
  *(_BYTE *)(DerivedStorage + 802) = 0;
  *(_OWORD *)(DerivedStorage + 1084) = v77;
  *(_QWORD *)(DerivedStorage + 1100) = v16;
  *(_BYTE *)(DerivedStorage + 520) = 0;
  bufferedAudioEngine_releaseCryptors((uint64_t)a1, 0);
  *(_QWORD *)(DerivedStorage + 1144) = 0;
  bufferedAudioEngine_releaseMagicCookies((uint64_t)a1, 0);
  v23 = *(const void **)(DerivedStorage + 968);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(DerivedStorage + 968) = 0;
  }
  bufferedAudioEngine_updatePlaybackState((uint64_t)a1, 1852990835);
  if (*(_QWORD *)(DerivedStorage + 872))
  {
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(a1, 4294949716, MEMORY[0x1E0CA2E68], MEMORY[0x1E0CA2E18], 0);
    *(_QWORD *)(DerivedStorage + 872) = 0;
    *(_QWORD *)(DerivedStorage + 880) = 0;
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, CFSTR("com.apple.mobileipod-prefsChanged"), 0);
  if (a2)
  {
    v25 = CMBaseObjectGetDerivedStorage();
    *(_OWORD *)&v80.value = v77;
    v80.epoch = v16;
    if (*(_QWORD *)(v25 + 1176))
    {
      v26 = v25;
      HostTimeClock = CMClockGetHostTimeClock();
      CMClockGetTime(&v80, HostTimeClock);
      lhs = v80;
      rhs = *(CMTime *)(v26 + 1184);
      CMTimeSubtract(&time, &lhs, &rhs);
      lhs.value = time.value;
      lhs.timescale = time.timescale;
      if ((time.flags & 1) != 0)
      {
        time.value = lhs.value;
        time.timescale = lhs.timescale;
        Seconds = CMTimeGetSeconds(&time);
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v29 = Mutable;
          if (Seconds != 0.0)
          {
            time = *(CMTime *)(v26 + 1240);
            CMTimeGetSeconds(&time);
          }
LABEL_44:
          FigCFDictionarySetInt64();
          FigCFDictionarySetInt64();
          FigCFDictionarySetInt64();
          FigCFDictionarySetInt64();
          FigCFDictionarySetInt64();
          FigCFDictionarySetInt64();
          time = *(CMTime *)(v26 + 1280);
          CMTimeGetSeconds(&time);
          FigCFDictionarySetInt64();
          time = *(CMTime *)(v26 + 1304);
          CMTimeGetSeconds(&time);
          FigCFDictionarySetInt64();
          CFDictionarySetValue(v29, CFSTR("sessionType"), CFSTR("AudioBuffered"));
          v32 = CMBaseObjectGetDerivedStorage();
          time.value = 0;
          LODWORD(rhs.value) = 0;
          v73 = v26;
          v74 = v29;
          if (*(_QWORD *)(v32 + 1176))
          {
            v33 = v32;
            v34 = a1;
            v35 = (const void *)APSThreadSafeDictionaryCopyMutableDictionary();
            v36 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
            Count = CFArrayGetCount(v36);
            if (Count >= 1)
            {
              v38 = Count;
              for (i = 0; i != v38; ++i)
              {
                CFArrayGetValueAtIndex(v36, i);
                v40 = APSThreadSafeDictionaryCopyMutableDictionary();
                if (!v40)
                  break;
                v41 = (__CFDictionary *)v40;
                if (FigCFDictionaryGetInt64IfPresent())
                {
                  FigCFDictionaryGetInt32IfPresent();
                  mach_absolute_time();
                  UpTicksToSeconds();
                  FigCFDictionarySetInt32();
                  CFDictionaryRemoveValue(v41, CFSTR("AudioStreamLastStartTime"));
                }
                CFArrayAppendValue(*(CFMutableArrayRef *)(v33 + 1272), v41);
                CFRelease(v41);
              }
            }
            if (v36)
              CFRelease(v36);
            a1 = v34;
            v26 = v73;
            v29 = v74;
            if (v35)
              CFRelease(v35);
          }
          FigCFDictionarySetValue();
          v42 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v43 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
          if (v43)
          {
            CFDictionaryApplyFunction(*(CFDictionaryRef *)(v26 + 1328), (CFDictionaryApplierFunction)bufferedAudioEngine_audioFormatDurationDictToArrayForRTC, v43);
            FigCFDictionarySetValue();
            v44 = CFArrayCreateMutable(v42, 0, MEMORY[0x1E0C9B378]);
            if (v44)
            {
              CFDictionaryApplyFunction(*(CFDictionaryRef *)(v26 + 1336), (CFDictionaryApplierFunction)bufferedAudioEngine_audioFormatDurationDictToArrayForRTC, v44);
              FigCFDictionarySetValue();
              v45 = CFArrayCreateMutable(v42, 0, MEMORY[0x1E0C9B378]);
              if (v45)
              {
                CFDictionaryApplyFunction(*(CFDictionaryRef *)(v26 + 1344), (CFDictionaryApplierFunction)bufferedAudioEngine_audioFormatDurationDictToArrayForRTC, v45);
                FigCFDictionarySetValue();
                FigCFDictionarySetInt64();
                FigCFDictionarySetInt64();
                FigCFDictionarySetValue();
                v46 = CFArrayCreateMutable(v42, 0, MEMORY[0x1E0C9B378]);
                if (v46)
                {
                  v47 = CFArrayCreateMutable(v42, 0, MEMORY[0x1E0C9B378]);
                  if (v47)
                  {
                    v70 = v45;
                    v75 = v46;
                    v76 = v47;
                    v71 = v44;
                    v72 = (uint64_t)a1;
                    v48 = CMBaseObjectGetDerivedStorage();
                    time.value = 0;
                    rhs.value = 0;
                    v83 = 0;
                    v84 = 0;
                    v81 = 0;
                    v82 = 0;
                    if (*(_QWORD *)(v48 + 1176))
                    {
                      v49 = v48;
                      v50 = CFArrayGetCount(*(CFArrayRef *)(v48 + 1392));
                      if (v50 >= 1)
                      {
                        v51 = v50;
                        for (j = 0; v51 != j; ++j)
                        {
                          CFArrayGetValueAtIndex(*(CFArrayRef *)(v49 + 1392), j);
                          if (FigCFDictionaryGetInt64IfPresent()
                            && FigCFDictionaryGetInt64IfPresent()
                            && FigCFDictionaryGetInt64IfPresent())
                          {
                            v53 = v42;
                            v54 = CFDictionaryCreateMutable(v42, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                            if (!v54)
                            {
                              APSLogErrorAt();
                              break;
                            }
                            v55 = v54;
                            CFDictionaryGetInt64();
                            FigCFDictionarySetInt64();
                            UpTicksToMilliseconds();
                            FigCFDictionarySetInt64();
                            UpTicksToMilliseconds();
                            FigCFDictionarySetInt64();
                            FigCFDictionaryGetValue();
                            FigCFDictionarySetValue();
                            if (FigCFDictionaryGetInt64IfPresent())
                              FigCFDictionarySetInt64();
                            if (FigCFDictionaryGetInt64IfPresent()
                              && FigCFDictionaryGetInt64IfPresent())
                            {
                              UpTicksToMilliseconds();
                              FigCFDictionarySetInt64();
                              UpTicksToMilliseconds();
                              FigCFDictionarySetInt64();
                              v56 = v75;
                            }
                            else
                            {
                              v56 = v76;
                            }
                            UpTicksToMilliseconds();
                            FigCFDictionarySetInt64();
                            CFArrayAppendValue(v56, v55);
                            CFRelease(v55);
                            v42 = v53;
                          }
                        }
                      }
                    }
                    v29 = v74;
                    v46 = v75;
                    FigCFDictionarySetValue();
                    v57 = v76;
                    FigCFDictionarySetValue();
                    if (*(_QWORD *)(v73 + 1400))
                    {
                      mach_absolute_time();
                      *(_QWORD *)(v73 + 1408) += UpTicksToMilliseconds();
                    }
                    v44 = v71;
                    v45 = v70;
                    FigCFDictionarySetInt64();
                    FigCFDictionarySetInt32();
                    bufferedAudioEngine_updateActiveAudioEngineCount(v72, 0);
                    APSRTCReportingAgentSendEvent();
                    if (gLogCategory_APAudioEngineBuffered <= 50
                      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
                    {
                      if (v72)
                        CMBaseObjectGetDerivedStorage();
                      LogPrintF();
                    }
                    goto LABEL_84;
                  }
                }
LABEL_122:
                v57 = 0;
LABEL_84:
                CFRelease(v29);
                if (v43)
                  CFRelease(v43);
                if (v44)
                  CFRelease(v44);
                if (v45)
                  CFRelease(v45);
                if (v46)
                  CFRelease(v46);
                if (v57)
                  CFRelease(v57);
                goto LABEL_94;
              }
LABEL_121:
              v46 = 0;
              goto LABEL_122;
            }
          }
          else
          {
            v44 = 0;
          }
          v45 = 0;
          goto LABEL_121;
        }
      }
      else
      {
        v28 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v28)
        {
          v29 = v28;
          goto LABEL_44;
        }
      }
    }
LABEL_94:
    APSNetworkClockReportRTCMetrics();
  }
  v58 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v59 = (const void *)v58[147];
  if (v59)
  {
    CFRelease(v59);
    v58[147] = 0;
  }
  v60 = (const void *)v58[158];
  if (v60)
  {
    CFRelease(v60);
    v58[158] = 0;
  }
  v61 = (const void *)v58[159];
  if (v61)
  {
    CFRelease(v61);
    v58[159] = 0;
  }
  v62 = (const void *)v58[166];
  if (v62)
  {
    CFRelease(v62);
    v58[166] = 0;
  }
  v63 = (const void *)v58[167];
  if (v63)
  {
    CFRelease(v63);
    v58[167] = 0;
  }
  v64 = (const void *)v58[168];
  if (v64)
  {
    CFRelease(v64);
    v58[168] = 0;
  }
  v65 = (const void *)v58[169];
  if (v65)
  {
    CFRelease(v65);
    v58[169] = 0;
  }
  v66 = (const void *)v58[172];
  if (v66)
  {
    CFRelease(v66);
    v58[172] = 0;
  }
  v67 = (const void *)v58[173];
  if (v67)
  {
    CFRelease(v67);
    v58[173] = 0;
  }
  v68 = (const void *)v58[174];
  if (v68)
  {
    CFRelease(v68);
    v58[174] = 0;
  }
  v69 = *(const void **)(DerivedStorage + 992);
  if (v69)
  {
    CFRelease(v69);
    *(_QWORD *)(DerivedStorage + 992) = 0;
  }
  *(_WORD *)(DerivedStorage + 466) = 0;
}

uint64_t bufferedAudioEngine_releaseCryptors(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CFIndex Count;
  size_t v7;
  unsigned int Index;
  const void **v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  CMTime time2;
  CMTime time1;
  CMTime v18;
  CMTime v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v19 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v18 = v19;
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_27;
  v5 = DerivedStorage;
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 1136));
  if (Count < 1)
    goto LABEL_27;
  v7 = Count;
  if (a2)
  {
    Index = APMessageRingBufferedGetFirstValidReadIndex(*(_QWORD *)(v5 + 560), 0);
    APMessageRingBufferedGetMessageAtIndex(*(_QWORD *)(v5 + 560), Index, 0, (uint64_t)&v19, 0);
    if ((v19.flags & 1) == 0)
    {
      APSLogErrorAt();
LABEL_27:
      v13 = 0;
      v9 = 0;
      v10 = 0;
      goto LABEL_21;
    }
  }
  v9 = (const void **)malloc_type_calloc(v7, 8uLL, 0x6004044C4A2DFuLL);
  if (!v9)
  {
    APSLogErrorAt();
    v10 = 0;
LABEL_25:
    v13 = 4294951816;
    goto LABEL_21;
  }
  v10 = (const void **)malloc_type_calloc(v7, 8uLL, 0x6004044C4A2DFuLL);
  if (!v10)
  {
    APSLogErrorAt();
    goto LABEL_25;
  }
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v5 + 1136), v9, v10);
  v11 = 0;
  v15 = a2;
  while (1)
  {
    CMTimeMakeFromDictionary(&v18, (CFDictionaryRef)v10[v11]);
    if (a2)
    {
      time1 = v19;
      time2 = v18;
      if (CMTimeCompare(&time1, &time2) < 1)
        goto LABEL_19;
    }
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      bufferedAudioEngine_getCryptorIDForCryptor((uint64_t)v9[v11]);
      LogPrintF();
      a2 = v15;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    v12 = FigNotificationCenterRemoveWeakListener();
    if ((_DWORD)v12)
      break;
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v5 + 1136), v9[v11]);
LABEL_19:
    if (v7 == ++v11)
    {
      v13 = 0;
      goto LABEL_21;
    }
  }
  v13 = v12;
  APSLogErrorAt();
LABEL_21:
  free(v9);
  free(v10);
  return v13;
}

uint64_t bufferedAudioEngine_releaseMagicCookies(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CFIndex Count;
  size_t v7;
  unsigned int Index;
  const void **v9;
  const void **v10;
  const void **v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v16;
  CMTime time2;
  CMTime time1;
  CMTime v19;
  CMTime v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v20 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v19 = v20;
  if (*(_BYTE *)DerivedStorage
    || (v5 = DerivedStorage, Count = CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 976)), Count < 1))
  {
    v14 = 0;
    v9 = 0;
LABEL_27:
    v11 = 0;
    goto LABEL_21;
  }
  v7 = Count;
  if (a2)
  {
    Index = APMessageRingBufferedGetFirstValidReadIndex(*(_QWORD *)(v5 + 560), 0);
    APMessageRingBufferedGetMessageAtIndex(*(_QWORD *)(v5 + 560), Index, 0, (uint64_t)&v20, 0);
    if ((v20.flags & 1) == 0)
    {
      v14 = 0;
      v9 = 0;
      goto LABEL_26;
    }
  }
  v9 = (const void **)malloc_type_calloc(v7, 8uLL, 0x6004044C4A2DFuLL);
  if (!v9)
  {
    v14 = 4294951816;
LABEL_26:
    APSLogErrorAt();
    goto LABEL_27;
  }
  v10 = (const void **)malloc_type_calloc(v7, 8uLL, 0x6004044C4A2DFuLL);
  if (!v10)
  {
    v14 = 4294951816;
    goto LABEL_26;
  }
  v11 = v10;
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v5 + 976), v9, v10);
  v12 = 0;
  v16 = a2;
  do
  {
    CMTimeMakeFromDictionary(&v19, (CFDictionaryRef)v11[v12]);
    if (!a2 || (v13 = FigCFEqual(), time1 = v20, time2 = v19, CMTimeCompare(&time1, &time2) >= 1) && !v13)
    {
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        bufferedAudioEngine_getMagicCookieIDForMagicCookieData((CFDataRef)v9[v12]);
        LogPrintF();
        a2 = v16;
      }
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v5 + 976), v9[v12]);
    }
    ++v12;
  }
  while (v7 != v12);
  v14 = 0;
LABEL_21:
  free(v9);
  free(v11);
  return v14;
}

void bufferedAudioEngine_endpointStreamSuspendedNotification(uint64_t a1, const void *a2, uint64_t a3, const void *a4, const void *a5)
{
  CFTypeRef *v8;
  CFTypeRef *v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v13;

  if (a2)
  {
    v8 = (CFTypeRef *)malloc_type_malloc(0x18uLL, 0x60040149E097CuLL);
    if (v8)
    {
      v9 = v8;
      *v8 = CFRetain(a2);
      if (a4)
        v10 = CFRetain(a4);
      else
        v10 = 0;
      v9[1] = v10;
      if (a5)
        v11 = CFRetain(a5);
      else
        v11 = 0;
      v9[2] = v11;
      CMBaseObjectGetDerivedStorage();
      if (APSDispatchSectionEnterWithPriorityDispatcher())
      {
        APSLogErrorAt();
        if (*v9)
          CFRelease(*v9);
        v12 = v9[1];
        if (v12)
          CFRelease(v12);
        v13 = v9[2];
        if (v13)
          CFRelease(v13);
        free(v9);
      }
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

uint64_t bufferedAudioEngine_endpointStreamActiveConfigurationDidBecomeInvalidNotification(uint64_t a1, uint64_t a2)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 90
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a2)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDispatchAsyncPostNotification();
}

void bufferedAudioEngine_endpointStreamSuspendedNotificationInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t CMBaseObject;
  unsigned int (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v6;
  const void *v7;
  int v8;
  int v9;
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v3 = *(_QWORD *)(DerivedStorage + 536);
  if (!v3 || v3 != *(_QWORD *)(a1 + 8))
    goto LABEL_12;
  CMBaseObject = FigEndpointStreamGetCMBaseObject();
  v5 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (!v5)
    goto LABEL_11;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v5(CMBaseObject, CFSTR("HoseRegistrar"), *MEMORY[0x1E0C9AE00], &cf))
    goto LABEL_11;
  FigCFDictionaryGetValue();
  v7 = (const void *)*MEMORY[0x1E0C9AE50];
  v8 = FigCFEqual();
  v9 = v8;
  if (cf == *(CFTypeRef *)a1 && !v8)
    goto LABEL_12;
  CMNotificationCenterGetDefaultLocalCenter();
  if (FigNotificationCenterRemoveWeakListeners())
  {
LABEL_11:
    APSLogErrorAt();
LABEL_12:
    v11 = 0;
    goto LABEL_16;
  }
  if (v9)
  {
    Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v11 = Mutable;
    if (!Mutable)
    {
      APSLogErrorAt();
      goto LABEL_16;
    }
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC4078], v7);
  }
  else
  {
    v11 = 0;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  v12 = *(const void **)(DerivedStorage + 536);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 536) = 0;
  }
LABEL_16:
  APSDispatchSectionLeave();
  if (cf)
    CFRelease(cf);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v13 = *(const void **)(a1 + 8);
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(a1 + 16);
  if (v14)
    CFRelease(v14);
  if (v11)
    CFRelease(v11);
  free((void *)a1);
}

void bufferedAudioEngine_setTranscodeIsRestingAndUpdateConsumer(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const __CFAllocator *v5;
  CFDictionaryRef v6;
  CFDictionaryRef v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, _QWORD, CFDictionaryRef);
  const __CFAllocator *v10;
  CFDictionaryRef v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, _QWORD, CFDictionaryRef);
  CFDictionaryRef v14;
  CFDictionaryRef v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, _QWORD, CFDictionaryRef);
  CFDictionaryRef v18;
  CMTime v19;
  CMTime v20;
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 1032) != a2)
  {
    v4 = DerivedStorage;
    *(_BYTE *)(DerivedStorage + 1032) = a2;
    if (*(_QWORD *)(DerivedStorage + 1120))
    {
      if (a2)
      {
        v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        v6 = CMTimeCopyAsDictionary(&time, v5);
        if (v6)
        {
          v7 = v6;
          v8 = *(_QWORD *)(v4 + 1120);
          v9 = *(unsigned int (**)(uint64_t, _QWORD, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
          if (v9 && !v9(v8, *MEMORY[0x1E0CC5E00], v7))
            goto LABEL_16;
          goto LABEL_15;
        }
      }
      else
      {
        CMTimeMake(&v20, 10000, 1000);
        v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v11 = CMTimeCopyAsDictionary(&v20, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
        if (v11)
        {
          v7 = v11;
          v12 = *(_QWORD *)(v4 + 1120);
          v13 = *(unsigned int (**)(uint64_t, _QWORD, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
          if (v13)
          {
            if (!v13(v12, *MEMORY[0x1E0CC5E00], v7))
            {
              CMTimeMake(&v19, 2000, 1000);
              v14 = CMTimeCopyAsDictionary(&v19, v10);
              if (v14)
              {
                v15 = v14;
                v16 = *(_QWORD *)(v4 + 1120);
                v17 = *(unsigned int (**)(uint64_t, _QWORD, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 56);
                if (!v17 || v17(v16, *MEMORY[0x1E0CC5E08], v15))
                  APSLogErrorAt();
                CFRelease(v7);
                v18 = v15;
                goto LABEL_19;
              }
            }
          }
LABEL_15:
          APSLogErrorAt();
LABEL_16:
          v18 = v7;
LABEL_19:
          CFRelease(v18);
          return;
        }
      }
      APSLogErrorAt();
    }
  }
}

uint64_t bufferedAudioEngine_handleTimedInfoManagerNotification(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    bufferedAudioEngine_updateInternalBadgeInfoAndPostNotificationIfNecessary((uint64_t)a2, a5, 1);
    CFRetain(a2);
    if (a5)
      CFRetain(a5);
    return APSPriorityDispatcherAsync();
  }
  return result;
}

uint64_t bufferedAudioEngine_updatePlaybackState(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  const char *CString;
  uint8_t buf[24];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 804) != a2)
  {
    v5 = DerivedStorage;
    v6 = LogCategoryCopyOSLogHandle();
    v7 = (void *)v6;
    if (v6)
      v8 = v6;
    else
      v8 = MEMORY[0x1E0C81028];
    if (os_signpost_enabled(v8))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = bufferedAudioEngine_playbackStateGetCString(a2);
      _os_signpost_emit_with_name_impl(&dword_1C943B000, v8, OS_SIGNPOST_EVENT, 0x2B1605B8uLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_PLAY_STATE", "PlaybackState state=%s", buf, 0xCu);
    }
    if (v7)
      os_release(v7);
    CString = bufferedAudioEngine_playbackStateGetCString(a2);
    strncpy((char *)buf, CString, 8uLL);
    kdebug_trace();
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      bufferedAudioEngine_playbackStateGetCString(*(_DWORD *)(v5 + 804));
      LogPrintF();
    }
    *(_DWORD *)(v5 + 804) = a2;
    bufferedAudioEngine_updateDataProcessingTargetQueueInternal(a1);
    if (!APSSettingsIsFeatureEnabled())
      bufferedAudioEngine_updateCriticalBufferingState(a1);
    if (a2 == 1937010544)
    {
      bufferedAudioEngine_updateActiveAudioEngineCount(a1, 0);
    }
    else if (a2 == 1937011316)
    {
      bufferedAudioEngine_updateActiveAudioEngineCount(a1, 1);
      bufferedAudioEngine_reportPlayingAudioEngineEvent(a1);
    }
  }
  return CMBaseObjectGetDerivedStorage();
}

uint64_t bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  CMBaseObjectGetDerivedStorage();
  if (a5)
    CFRetain(a5);
  CFRetain(a1);
  return APSDispatchAsyncFHelper();
}

void bufferedAudioEngine_updateInternalBadgeInfoAndPostNotificationIfNecessary(uint64_t a1, const void *a2, int a3)
{
  uint64_t DerivedStorage;
  _QWORD *v6;
  const __CFAllocator *v7;
  void *v8;
  const void *v9;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(_QWORD **)(DerivedStorage + 584);
  FigCFDictionaryGetValue();
  if (FigCFEqual() || FigCFEqual())
  {
    if (!v6)
    {
LABEL_6:
      v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      keys[0] = CFSTR("ContentType");
      values = (void *)*MEMORY[0x1E0CF72E0];
      v8 = CFDictionaryCreate(v7, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
LABEL_9:
      a2 = v8;
      goto LABEL_10;
    }
    while (!APSGetFBOPropertyInt64())
    {
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_6;
    }
  }
  if (a2)
  {
    v8 = (void *)CFRetain(a2);
    goto LABEL_9;
  }
LABEL_10:
  if (a3 || !FigCFEqual())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  v9 = *(const void **)(DerivedStorage + 960);
  *(_QWORD *)(DerivedStorage + 960) = a2;
  if (a2)
    CFRetain(a2);
  if (v9)
    CFRelease(v9);
  if (a2)
    CFRelease(a2);
}

void __bufferedAudioEngine_handleTimedInfoManagerNotification_block_invoke(_QWORD *a1)
{
  uint64_t Value;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, const __CFString *, uint64_t);
  const void *v5;
  const void *v6;

  if (*(_QWORD *)(a1[4] + 536))
  {
    Value = FigCFDictionaryGetValue();
    CMBaseObject = FigEndpointStreamGetCMBaseObject();
    v4 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v4)
      v4(CMBaseObject, CFSTR("ActiveBadgingFormatInfo"), Value);
  }
  else
  {
    APSLogErrorAt();
  }
  v5 = (const void *)a1[5];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[6];
  if (v6)
    CFRelease(v6);
}

const char *bufferedAudioEngine_playbackStateGetCString(int a1)
{
  if (a1 > 1937010792)
  {
    if (a1 > 1937011315)
    {
      if (a1 == 1937011316)
        return "Started";
      if (a1 == 1937207905)
        return "Starting With Receiver Anchor";
    }
    else
    {
      if (a1 == 1937010793)
        return "Stopping";
      if (a1 == 1937011305)
        return "Starting";
    }
  }
  else if (a1 > 1886614641)
  {
    if (a1 == 1886614642)
      return "Priming Before Start";
    if (a1 == 1937010544)
      return "Stopped";
  }
  else
  {
    if (a1 == 1852990835)
      return "Not Resumed";
    if (a1 == 1886547820)
      return "Prerolling";
  }
  return "Invalid";
}

void bufferedAudioEngine_updateDataProcessingTargetQueueInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  int v3;
  _BOOL4 v4;
  int v5;
  int v6;
  int v7;
  const __CFAllocator *v8;
  void **v9;
  void **v10;
  CFDictionaryRef v11;
  int64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  CMTime v18;
  CMTime v19;
  CMTime time2;
  CMTime time1;
  CMTime v22;
  CMTime time;
  CMTime rhs;
  CMTime lhs;
  void *values;
  void *keys[3];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v19, 0, sizeof(v19));
  bufferedAudioEngine_getCurrentRemoteMediaTimeInternal(0, &v19);
  memset(&v18, 0, sizeof(v18));
  lhs = *(CMTime *)(DerivedStorage + 676);
  rhs = v19;
  CMTimeSubtract(&v18, &lhs, &rhs);
  if (bufferedAudioEngine_updateDataProcessingTargetQueueInternal_onceToken != -1)
    dispatch_once(&bufferedAudioEngine_updateDataProcessingTargetQueueInternal_onceToken, &__block_literal_global_18);
  if (*(_BYTE *)(DerivedStorage + 324))
  {
    CMBaseObjectGetDerivedStorage();
    if (gLogCategory_APAudioEngineBuffered <= 10
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      lhs = v18;
      CMTimeGetSeconds(&lhs);
      lhs = *(CMTime *)(DerivedStorage + 676);
      CMTimeGetSeconds(&lhs);
      lhs = v19;
      CMTimeGetSeconds(&lhs);
      LogPrintF();
    }
    v3 = *(_DWORD *)(DerivedStorage + 804);
    if (v3 == 1886547820
      || v3 == 1886614642
      && (*(_BYTE *)(DerivedStorage + 736) & 1) == 0
      && !bufferedAudioEngine_engineBufferedToStartWaterMark()
      || bufferedAudioEngine_updateDataProcessingTargetQueueInternal_urgentPriorityLimitMs >= 1
      && (lhs = v18,
          CMTimeGetSeconds(&lhs) < (double)bufferedAudioEngine_updateDataProcessingTargetQueueInternal_urgentPriorityLimitMs
                                 / 1000.0))
    {
      v4 = 0;
      v5 = 36;
      v6 = 1;
      goto LABEL_27;
    }
    if (bufferedAudioEngine_updateDataProcessingTargetQueueInternal_defaultPriorityLimitMs < 1
      || (lhs = v18,
          CMTimeGetSeconds(&lhs) >= (double)bufferedAudioEngine_updateDataProcessingTargetQueueInternal_defaultPriorityLimitMs
                                  / 1000.0))
    {
      v5 = 37;
      if (*(_DWORD *)(DerivedStorage + 804) == 1937011316)
      {
        v7 = APSIsAPMSpeaker();
        v6 = 0;
        v4 = v7 == 0;
        if (v7)
          v5 = 43;
        else
          v5 = 37;
LABEL_27:
        if (*(_DWORD *)(DerivedStorage + 432) == v5)
          return;
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1)
            CMBaseObjectGetDerivedStorage();
          bufferedAudioEngine_engineBufferedToStartWaterMark();
          lhs = v18;
          CMTimeGetSeconds(&lhs);
          bufferedAudioEngine_playbackStateGetCString(*(_DWORD *)(DerivedStorage + 804));
          LogPrintF();
        }
        v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        keys[0] = *(void **)MEMORY[0x1E0CC4070];
        v9 = (void **)MEMORY[0x1E0CC4058];
        v10 = (void **)MEMORY[0x1E0CC4048];
        if (!v4)
          v10 = (void **)MEMORY[0x1E0CC4050];
        if (!v6)
          v9 = v10;
        values = *v9;
        v11 = CFDictionaryCreate(v8, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
        APSPriorityDispatcherSetPriority();
        if (*(_QWORD *)(DerivedStorage + 472))
          APSPriorityDispatchSourceSetPriority();
        *(_DWORD *)(DerivedStorage + 432) = v5;
        v12 = bufferedAudioEngine_updateDataProcessingTargetQueueInternal_defaultPriorityLimitMs;
        v13 = CMBaseObjectGetDerivedStorage();
        memset(&lhs, 0, sizeof(lhs));
        bufferedAudioEngine_getCurrentRemoteMediaTimeInternal(0, &lhs);
        memset(&rhs, 0, sizeof(rhs));
        time = *(CMTime *)(v13 + 676);
        v22 = lhs;
        CMTimeSubtract(&rhs, &time, &v22);
        CMBaseObjectGetDerivedStorage();
        if (!*(_QWORD *)(v13 + 1672))
          goto LABEL_74;
        v14 = *(_DWORD *)(v13 + 432);
        if (v14 != 36)
        {
          if (v14 == 43 || v14 == 37)
          {
            if ((rhs.flags & 1) != 0)
            {
              memset(&time, 0, sizeof(time));
              CMTimeMake(&v22, v12, 1000);
              time1 = rhs;
              CMTimeSubtract(&time, &time1, &v22);
              time1 = time;
              time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
              if (CMTimeCompare(&time1, &time2) < 1)
              {
                v15 = 100;
              }
              else
              {
                time1 = time;
                v15 = (CMTimeGetSeconds(&time1) * 1000.0) + 100;
              }
              goto LABEL_57;
            }
          }
          else if (gLogCategory_APAudioEngineBuffered <= 90
                 && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (a1)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
        }
        v15 = 5000;
LABEL_57:
        if (!*(_BYTE *)(v13 + 480))
        {
          time = rhs;
          if ((int)v12 < (int)(CMTimeGetSeconds(&time) * 1000.0))
            v15 = 5000;
        }
        if (v15 >= 0x1388)
          v16 = 5000;
        else
          v16 = v15;
        if (v16 <= 0x64)
          v17 = 100;
        else
          v17 = v16;
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1)
            CMBaseObjectGetDerivedStorage();
          LogPrintF();
        }
        dispatch_time(0, 1000000 * v17);
        APSPriorityDispatchSourceSetTimer();
LABEL_74:
        kdebug_trace();
        if (v11)
          CFRelease(v11);
        return;
      }
      v6 = 0;
    }
    else
    {
      v6 = 0;
      v5 = 37;
    }
    v4 = 1;
    goto LABEL_27;
  }
}

uint64_t bufferedAudioEngine_updateCriticalBufferingState(uint64_t a1)
{
  uint64_t DerivedStorage;
  CMTimeEpoch v3;
  int v4;
  _BOOL4 v6;
  uint64_t v7;
  char v8;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  int32_t v11;
  _BOOL4 v12;
  int v13;
  int v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t *v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  CMTime rhs;
  CMTime lhs;
  CMTime v29;
  CMTime v30;
  int v31;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v31 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)&v30.value = *MEMORY[0x1E0CA2E68];
  v3 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v30.epoch = v3;
  v26 = *(_OWORD *)&v30.value;
  *(_OWORD *)&v29.value = *(_OWORD *)&v30.value;
  v29.epoch = v3;
  v4 = *(_DWORD *)(DerivedStorage + 804);
  v6 = v4 == 1937011305 || v4 == 1937011316;
  if (bufferedAudioEngine_updateCriticalBufferingState_sHoseShouldReportCriticalOnce != -1)
    dispatch_once(&bufferedAudioEngine_updateCriticalBufferingState_sHoseShouldReportCriticalOnce, &__block_literal_global_165);
  bufferedAudioEngine_getCurrentRemoteMediaTimeInternal(&v31, &v30);
  if (v31)
  {
    result = APSLogErrorAt();
    if (gLogCategory_APAudioEngineBuffered <= 50)
    {
      if (gLogCategory_APAudioEngineBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        return LogPrintF();
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)(DerivedStorage + 584);
    if (v7)
    {
      v8 = 0;
      v25 = *MEMORY[0x1E0CF7370];
      v24 = *MEMORY[0x1E0C9AE50];
      v23 = *MEMORY[0x1E0C9AE40];
      while (1)
      {
        if (*(_BYTE *)(v7 + 25))
        {
          bufferedAudioEngine_getLastDeliveredRemoteMediaTimeForHose(v7, (__n128 *)&lhs);
          value = lhs.value;
          flags = lhs.flags;
          timescale = lhs.timescale;
          epoch = lhs.epoch;
          if ((lhs.flags & 1) != 0)
            goto LABEL_16;
        }
        else
        {
          value = *(_QWORD *)(v7 + 32);
          flags = *(_DWORD *)(v7 + 44);
          timescale = *(_DWORD *)(v7 + 40);
          epoch = *(_QWORD *)(v7 + 48);
          if ((flags & 1) != 0)
          {
LABEL_16:
            lhs.value = value;
            lhs.timescale = timescale;
            lhs.flags = flags;
            lhs.epoch = epoch;
            rhs = v30;
            CMTimeSubtract(&v29, &lhs, &rhs);
            goto LABEL_17;
          }
        }
        *(_OWORD *)&v29.value = v26;
        v29.epoch = v3;
LABEL_17:
        lhs = v29;
        rhs = *(CMTime *)(DerivedStorage + 184);
        v11 = CMTimeCompare(&lhs, &rhs);
        *(CMTime *)(v7 + 112) = v29;
        v12 = v11 < 0 && v6;
        if (v12 && !*(_BYTE *)(v7 + 24))
        {
          if (APSSettingsIsFeatureEnabled())
          {
            *(_BYTE *)(v7 + 256) = 1;
            if (gLogCategory_APAudioEngineBuffered <= 30
              && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
            {
              if (a1)
                CMBaseObjectGetDerivedStorage();
              LogPrintF();
            }
            *(_WORD *)(v7 + 56) = 256;
          }
          v8 = 1;
        }
        if (bufferedAudioEngine_updateCriticalBufferingState_sHoseShouldReportCritical)
        {
          v13 = bufferedAudioEngine_updateCriticalBufferingState_sHoseShouldReportCritical > 1 && v12;
          if (*(_DWORD *)(DerivedStorage + 804) == 1886614642)
            v14 = 1;
          else
            v14 = v13;
          v15 = *(_QWORD *)(v7 + 16);
          v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (v16)
          {
            if (v14)
              v17 = v24;
            else
              v17 = v23;
            v16(v15, v25, v17);
          }
          if (gLogCategory_APAudioEngineBuffered <= 30
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (a1)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
        }
        v7 = *(_QWORD *)v7;
        if (!v7)
          goto LABEL_54;
      }
    }
    v8 = 0;
LABEL_54:
    *(_BYTE *)(DerivedStorage + 596) = v8;
    if (APSSettingsIsFeatureEnabled())
    {
      v18 = *(uint64_t **)(DerivedStorage + 584);
      if (v18)
      {
        v19 = 0;
        v20 = 0x1ED52E000uLL;
        do
        {
          if (v8)
          {
            if (!*((_BYTE *)v18 + 24) && !*((_BYTE *)v18 + 56))
            {
              lhs = *(CMTime *)(v18 + 14);
              rhs = *(CMTime *)(DerivedStorage + 208);
              if (CMTimeCompare(&lhs, &rhs) >= 1)
              {
                *((_BYTE *)v18 + 56) = 1;
                v21 = *(_DWORD *)(v20 + 3936);
                if (v21 <= 50 && (v21 != -1 || _LogCategory_Initialize()))
                {
                  if (a1)
                    CMBaseObjectGetDerivedStorage();
                  lhs = *(CMTime *)(v18 + 14);
                  CMTimeGetSeconds(&lhs);
                  LogPrintF();
                  v20 = 0x1ED52E000;
                }
              }
            }
          }
          else
          {
            lhs = *(CMTime *)(v18 + 14);
            rhs = *(CMTime *)(DerivedStorage + 184);
            if (CMTimeCompare(&lhs, &rhs) >= 1 && *((_BYTE *)v18 + 256))
            {
              *((_BYTE *)v18 + 256) = 0;
              v19 = 1;
            }
          }
          v18 = (uint64_t *)*v18;
        }
        while (v18);
        if (v19)
          bufferedAudioEngine_wakeUpHoses();
      }
    }
    result = *(_QWORD *)(DerivedStorage + 992);
    if (result)
    {
      result = APSWirelessCoexManagerNotifyCriticalBuffering();
      v31 = result;
      if ((_DWORD)result)
      {
        result = APSLogErrorAt();
        if (gLogCategory_APAudioEngineBuffered <= 50)
        {
          if (gLogCategory_APAudioEngineBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
          {
            if (a1)
              CMBaseObjectGetDerivedStorage();
            return LogPrintF();
          }
        }
      }
    }
  }
  return result;
}

void bufferedAudioEngine_updateActiveAudioEngineCount(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  unsigned int Count;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  _BOOL4 v10;
  const char *v11;
  const char *v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  unsigned int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 1176))
  {
    v5 = *(_QWORD *)(DerivedStorage + 416);
    if (bufferedAudioEngine_getActiveAudioEngineSet(a1, v5 == 1))
    {
      if (a2)
        APSThreadSafeSetSetValue();
      else
        APSThreadSafeSetRemoveValue();
      Count = APSThreadSafeSetGetCount();
      v7 = LogCategoryCopyOSLogHandle();
      v8 = (void *)v7;
      if (v7)
        v9 = v7;
      else
        v9 = MEMORY[0x1E0C81028];
      v10 = os_signpost_enabled(v9);
      if (v5 == 1)
      {
        if (v10)
        {
          v11 = "increment";
          if (!a2)
            v11 = "decrement";
          *(_DWORD *)buf = 136315394;
          v14 = v11;
          v15 = 1024;
          v16 = Count;
          _os_signpost_emit_with_name_impl(&dword_1C943B000, v9, OS_SIGNPOST_EVENT, 0x2B1605C0uLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_ACTIVE_COUNT_SIDEPLAY", "Active AudioEngine primary usage for SidePlay %s, now count=%u", buf, 0x12u);
        }
        if (v8)
          os_release(v8);
        if (gLogCategory_APAudioEngineBuffered <= 30
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (!a1)
            goto LABEL_43;
          goto LABEL_40;
        }
      }
      else
      {
        if (v10)
        {
          v12 = "increment";
          if (!a2)
            v12 = "decrement";
          *(_DWORD *)buf = 136315394;
          v14 = v12;
          v15 = 1024;
          v16 = Count;
          _os_signpost_emit_with_name_impl(&dword_1C943B000, v9, OS_SIGNPOST_EVENT, 0x2B1605BCuLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_ACTIVE_COUNT_MEDIA", "Active AudioEngine primary usage for Media %s, now count=%u", buf, 0x12u);
        }
        if (v8)
          os_release(v8);
        if (gLogCategory_APAudioEngineBuffered <= 30
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1)
            CMBaseObjectGetDerivedStorage();
          LogPrintF();
        }
        if (Count >= 0x2B1605BD
          && gLogCategory_APAudioEngineBuffered <= 90
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (!a1)
          {
LABEL_43:
            LogPrintF();
            return;
          }
LABEL_40:
          CMBaseObjectGetDerivedStorage();
          goto LABEL_43;
        }
      }
    }
  }
}

void bufferedAudioEngine_reportPlayingAudioEngineEvent(uint64_t a1)
{
  __CFDictionary *Mutable;
  __CFDictionary *v3;

  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1176))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v3 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("sessionType"), CFSTR("AudioBuffered"));
      bufferedAudioEngine_getActiveAudioEngineSet(a1, 0);
      APSThreadSafeSetGetCount();
      FigCFDictionarySetInt32();
      bufferedAudioEngine_getActiveAudioEngineSet(a1, 1);
      APSThreadSafeSetGetCount();
      FigCFDictionarySetInt32();
      APSRTCReportingAgentSendEvent();
      CFRelease(v3);
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

uint64_t __bufferedAudioEngine_updateDataProcessingTargetQueueInternal_block_invoke()
{
  uint64_t result;

  bufferedAudioEngine_updateDataProcessingTargetQueueInternal_defaultPriorityLimitMs = FigGetCFPreferenceNumberWithDefault();
  result = FigGetCFPreferenceNumberWithDefault();
  bufferedAudioEngine_updateDataProcessingTargetQueueInternal_urgentPriorityLimitMs = result;
  return result;
}

BOOL bufferedAudioEngine_engineBufferedToStartWaterMark()
{
  uint64_t DerivedStorage;
  CMTime v2;
  CMTime lhs;
  CMTime v4;
  CMTime v5;
  int v6;

  v6 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v4 = v5;
  bufferedAudioEngine_getCurrentRemoteMediaTimeInternal(&v6, &v5);
  if (v6)
  {
    APSLogErrorAt();
    return 1;
  }
  else
  {
    lhs = v5;
    v2 = *(CMTime *)(DerivedStorage + 156);
    CMTimeAdd(&v4, &lhs, &v2);
    lhs = *(CMTime *)(DerivedStorage + 676);
    v2 = v4;
    return CMTimeCompare(&lhs, &v2) > 0;
  }
}

uint64_t __bufferedAudioEngine_updateCriticalBufferingState_block_invoke()
{
  uint64_t result;

  result = APSSettingsGetIntWithDefault();
  bufferedAudioEngine_updateCriticalBufferingState_sHoseShouldReportCritical = result;
  return result;
}

__n128 bufferedAudioEngine_getLastDeliveredRemoteMediaTimeForHose@<Q0>(uint64_t a1@<X1>, __n128 *a2@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  int v9;
  int32_t v10;
  __n128 *v11;
  __n128 result;
  CMTime v13;
  CMTime time1;
  uint64_t v15;
  int v16;
  int v17;
  CMTime v18;
  CFTypeRef v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v19 = 0;
  v18 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v17 = 0;
  v16 = 0;
  v15 = 0;
  if (!*(_BYTE *)(a1 + 25)
    || (v5 = DerivedStorage, (v6 = *(_QWORD *)(DerivedStorage + 560)) == 0)
    || !APMessageRingBufferedGetUsedCount(v6)
    || (*(_BYTE *)(a1 + 44) & 1) == 0)
  {
LABEL_11:
    if (v19)
      CFRelease(v19);
    goto LABEL_25;
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (!v8 || v8(v7, *MEMORY[0x1E0CF7388], *MEMORY[0x1E0C9AE00], &v19))
  {
LABEL_10:
    APSLogErrorAt();
    goto LABEL_11;
  }
  if (v19)
  {
    if (*(_BYTE *)(v5 + 520))
    {
      if (APSAPAPBBufDecodeHeader())
        goto LABEL_10;
    }
    else
    {
      if (APSTransportMessageGetBufferedAudioDataTimestamp()
        || APSTransportMessageGetBufferedAudioDataExtendedSequenceNumber())
      {
        goto LABEL_10;
      }
      CMTimeMake(&v18, *(_QWORD *)(a1 + 32) + (int)(v17 - *(_QWORD *)(a1 + 32)), *(_DWORD *)(a1 + 40));
    }
    APMessageRingBufferedGetFirstValidReadIndex(*(_QWORD *)(v5 + 560), (_DWORD *)&v15 + 1);
    if (((HIDWORD(v15) - v16) & 0x800000) == 0 && ((HIDWORD(v15) ^ v16) & 0xFFFFFF) != 0)
      goto LABEL_11;
    APMessageRingBufferedGetLastValidReadIndexAndTimestamp(*(_QWORD *)(v5 + 560), &v15, 0);
    if ((((_DWORD)v15 - v16) & 0x800000) != 0 && ((v15 ^ v16) & 0xFFFFFF) != 0)
      goto LABEL_11;
    v9 = *(_DWORD *)(a1 + 28);
    if (((v9 - v16) & 0x800000) != 0 && ((v9 ^ v16) & 0xFFFFFF) != 0)
      goto LABEL_11;
    time1 = v18;
    v13 = *(CMTime *)(a1 + 32);
    v10 = CMTimeCompare(&time1, &v13);
    if (v19)
      CFRelease(v19);
    if (v10 <= 0)
    {
      v11 = (__n128 *)&v18;
      goto LABEL_27;
    }
  }
LABEL_25:
  v11 = (__n128 *)MEMORY[0x1E0CA2E18];
LABEL_27:
  result = *v11;
  *a2 = *v11;
  a2[1].n128_u64[0] = v11[1].n128_u64[0];
  return result;
}

uint64_t bufferedAudioEngine_wakeUpHoses()
{
  uint64_t result;
  uint64_t *v1;
  uint64_t v2;

  result = CMBaseObjectGetDerivedStorage();
  v1 = *(uint64_t **)(result + 584);
  if (v1)
  {
    v2 = result;
    do
    {
      *((_BYTE *)v1 + 56) = 0;
      v1[10] = 0;
      if (*(_DWORD *)(v2 + 804) != 1886614642)
      {
        result = mach_absolute_time();
        v1[9] = result;
      }
      v1 = (uint64_t *)*v1;
    }
    while (v1);
  }
  return result;
}

uint64_t bufferedAudioEngine_getActiveAudioEngineSet(uint64_t a1, uint64_t a2)
{
  void *v3;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __bufferedAudioEngine_getActiveAudioEngineSet_block_invoke;
  block[3] = &__block_descriptor_tmp_186;
  block[4] = a1;
  if (bufferedAudioEngine_getActiveAudioEngineSet_sSetOnce != -1)
    dispatch_once(&bufferedAudioEngine_getActiveAudioEngineSet_sSetOnce, block);
  v3 = &bufferedAudioEngine_getActiveAudioEngineSet_sSetSidePlay;
  if (a2 != 1)
    v3 = &bufferedAudioEngine_getActiveAudioEngineSet_sSetMedia;
  return *(_QWORD *)v3;
}

uint64_t __bufferedAudioEngine_getActiveAudioEngineSet_block_invoke(uint64_t a1)
{
  uint64_t result;

  if (APSThreadSafeSetCreate())
  {
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (!*(_QWORD *)(a1 + 32))
        goto LABEL_15;
LABEL_5:
      CMBaseObjectGetDerivedStorage();
LABEL_15:
      LogPrintF();
    }
  }
  else if (gLogCategory_APAudioEngineBuffered <= 50
         && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (!*(_QWORD *)(a1 + 32))
      goto LABEL_15;
    goto LABEL_5;
  }
  result = APSThreadSafeSetCreate();
  if ((_DWORD)result)
  {
    if (gLogCategory_APAudioEngineBuffered <= 90)
    {
      if (gLogCategory_APAudioEngineBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      {
        if (!*(_QWORD *)(a1 + 32))
          return LogPrintF();
LABEL_20:
        CMBaseObjectGetDerivedStorage();
        return LogPrintF();
      }
    }
  }
  else if (gLogCategory_APAudioEngineBuffered <= 50)
  {
    if (gLogCategory_APAudioEngineBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
    {
      if (!*(_QWORD *)(a1 + 32))
        return LogPrintF();
      goto LABEL_20;
    }
  }
  return result;
}

void bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallbackInternal(uint64_t *a1)
{
  void (*v2)(uint64_t, uint64_t, CMTime *, __int128 *, uint64_t, uint64_t, double);
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  __int128 v9;
  uint64_t v10;
  CMTime time;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1)
      CMBaseObjectGetDerivedStorage();
    time = *(CMTime *)((_BYTE *)a1 + 1);
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  v2 = (void (*)(uint64_t, uint64_t, CMTime *, __int128 *, uint64_t, uint64_t, double))a1[10];
  if (v2)
  {
    v3 = *a1;
    v4 = *((unsigned int *)a1 + 2);
    v5 = *((double *)a1 + 2);
    v6 = a1[11];
    time = *(CMTime *)((_BYTE *)a1 + 1);
    v9 = *((_OWORD *)a1 + 3);
    v7 = a1[9];
    v10 = a1[8];
    v2(v3, v4, &time, &v9, v7, v6, v5);
  }
  v8 = (const void *)a1[9];
  if (v8)
    CFRelease(v8);
  if (*a1)
    CFRelease((CFTypeRef)*a1);
}

void bufferedAudioEngine_audioFormatDurationDictToArrayForRTC(const void *a1, const __CFDictionary *a2, __CFArray *a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  CMTime v8;
  CMTime v9;

  v9 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v7 = Mutable;
    CMTimeMakeFromDictionary(&v9, a2);
    CFDictionarySetValue(v7, CFSTR("audioFormat"), a1);
    v8 = v9;
    CMTimeGetSeconds(&v8);
    CFDictionarySetInt64();
    CFArrayAppendValue(a3, v7);
    CFRelease(v7);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t bufferedAudioEngine_getCryptorIDForCryptor(uint64_t a1)
{
  uint64_t v1;
  unsigned int (*v2)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  v1 = a1;
  cf = 0;
  if (bufferedAudioEngine_getCryptorIDForCryptor_sRandomBytesOnce == -1)
  {
    if (a1)
    {
LABEL_3:
      v2 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
      if (!v2
        || v2(v1, *MEMORY[0x1E0CA3230], *MEMORY[0x1E0C9AE00], &cf)
        || CFStringGetOrCopyCStringUTF8())
      {
        APSLogErrorAt();
        v1 = 0;
      }
      else
      {
        v1 = SipHash();
      }
    }
  }
  else
  {
    dispatch_once(&bufferedAudioEngine_getCryptorIDForCryptor_sRandomBytesOnce, &__block_literal_global_259);
    if (v1)
      goto LABEL_3;
  }
  if (cf)
    CFRelease(cf);
  return v1;
}

uint64_t bufferedAudioEngine_handleCryptorKeyUpdated(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  CFTypeRef v8;
  CFTypeRef v9;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a2)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  v6 = malloc_type_calloc(1uLL, 0x10uLL, 0x60040FAFB2B2FuLL);
  if (!v6)
    return APSLogErrorAt();
  v7 = v6;
  if (a2)
    v8 = CFRetain(a2);
  else
    v8 = 0;
  *v7 = v8;
  if (a4)
    v9 = CFRetain(a4);
  else
    v9 = 0;
  v7[1] = v9;
  return APSPriorityDispatcherAsyncF();
}

uint64_t __bufferedAudioEngine_getCryptorIDForCryptor_block_invoke()
{
  return RandomBytes();
}

void bufferedAudioEngine_handleCryptorKeyUpdatedInternal(void *a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t);
  const void *v7;

  if (!*(_QWORD *)a1)
    goto LABEL_11;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v3 = DerivedStorage;
    if (!APSSettingsIsFeatureEnabled())
    {
      if (!bufferedAudioEngine_setCryptorForAllHoses(*(const void **)a1, *((_QWORD *)a1 + 1)))
        goto LABEL_9;
      goto LABEL_8;
    }
    v4 = *((_QWORD *)v3 + 210);
    v5 = *((_QWORD *)a1 + 1);
    v6 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
    if (!v6 || v6(v4, v5))
LABEL_8:
      APSLogErrorAt();
  }
LABEL_9:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
LABEL_11:
  v7 = (const void *)*((_QWORD *)a1 + 1);
  if (v7)
    CFRelease(v7);
  free(a1);
}

uint64_t bufferedAudioEngine_setCryptorForAllHoses(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  _QWORD *v5;
  const void *v6;
  uint64_t CryptorIDForCryptor;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(const void *, uint64_t, uint64_t, uint64_t (*)(const void *, uint64_t, int, const void *), const void *);
  uint64_t v11;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v5 = (_QWORD *)(DerivedStorage + 584);
    while (1)
    {
      v5 = (_QWORD *)*v5;
      if (!v5)
        return 0;
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        bufferedAudioEngine_getCryptorIDForCryptor(a2);
        LogPrintF();
      }
      if (a1)
        CFRetain(a1);
      v6 = (const void *)v5[2];
      CryptorIDForCryptor = bufferedAudioEngine_getCryptorIDForCryptor(a2);
      APSEndpointStreamAudioHoseProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (!ProtocolVTable || (v9 = *(_QWORD *)(ProtocolVTable + 16)) == 0)
      {
        v12 = 4294954508;
        goto LABEL_21;
      }
      v10 = *(uint64_t (**)(const void *, uint64_t, uint64_t, uint64_t (*)(const void *, uint64_t, int, const void *), const void *))(v9 + 96);
      if (!v10)
        break;
      v11 = v10(v6, CryptorIDForCryptor, a2, bufferedAudioEngine_hoseSetCryptorCallbackCompletionHandler, a1);
      if ((_DWORD)v11)
      {
        v12 = v11;
        goto LABEL_21;
      }
    }
    v12 = 4294954514;
    bufferedAudioEngine_hoseSetCryptorCallbackCompletionHandler(v6, CryptorIDForCryptor, -12782, a1);
LABEL_21:
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294951815;
  }
  return v12;
}

uint64_t bufferedAudioEngine_hoseSetCryptorCallbackCompletionHandler(const void *a1, uint64_t a2, int a3, const void *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  CFTypeRef v10;
  CFTypeRef v11;
  uint64_t v12;

  CMBaseObjectGetDerivedStorage();
  v8 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200401C4E69EBuLL);
  if (!v8)
  {
    APSLogErrorAt();
    v12 = 4294951816;
    if (!a4)
      return v12;
    goto LABEL_9;
  }
  v9 = v8;
  if (a4)
    v10 = CFRetain(a4);
  else
    v10 = 0;
  *v9 = v10;
  if (a1)
    v11 = CFRetain(a1);
  else
    v11 = 0;
  v9[1] = v11;
  v9[2] = a2;
  *((_DWORD *)v9 + 6) = a3;
  APSPriorityDispatcherAsyncF();
  v12 = 0;
  if (a4)
LABEL_9:
    CFRelease(a4);
  return v12;
}

void bufferedAudioEngine_hoseSetCryptorCallbackCompletionHandlerInternal(uint64_t a1)
{
  _QWORD *HoseDecriptorFromHose;
  _QWORD *v3;
  int v4;
  const void *v5;

  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    goto LABEL_26;
  HoseDecriptorFromHose = bufferedAudioEngine_getHoseDecriptorFromHose();
  if (HoseDecriptorFromHose)
  {
    v3 = HoseDecriptorFromHose;
    v4 = *(_DWORD *)(a1 + 24);
    if (v4)
    {
      if (v4 == 200501)
      {
        if (gLogCategory_APAudioEngineBuffered <= 90
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (!*(_QWORD *)a1)
          {
LABEL_23:
            LogPrintF();
            goto LABEL_26;
          }
LABEL_8:
          CMBaseObjectGetDerivedStorage();
          goto LABEL_23;
        }
        goto LABEL_26;
      }
      if (gLogCategory_APAudioEngineBuffered > 90
        || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
      {
LABEL_25:
        *((_BYTE *)v3 + 204) = 1;
        goto LABEL_26;
      }
      if (!*(_QWORD *)a1)
      {
LABEL_24:
        LogPrintF();
        goto LABEL_25;
      }
    }
    else
    {
      if (gLogCategory_APAudioEngineBuffered > 50
        || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_25;
      }
      if (!*(_QWORD *)a1)
        goto LABEL_24;
    }
    CMBaseObjectGetDerivedStorage();
    goto LABEL_24;
  }
  if (gLogCategory_APAudioEngineBuffered <= 90
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (!*(_QWORD *)a1)
      goto LABEL_23;
    goto LABEL_8;
  }
LABEL_26:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v5 = *(const void **)(a1 + 8);
  if (v5)
    CFRelease(v5);
  free((void *)a1);
}

uint64_t bufferedAudioEngine_getMagicCookieIDForMagicCookieData(CFDataRef theData)
{
  if (bufferedAudioEngine_getMagicCookieIDForMagicCookieData_sRandomBytesOnce == -1)
  {
    if (theData)
    {
LABEL_3:
      CFDataGetBytePtr(theData);
      CFDataGetLength(theData);
      return SipHash();
    }
  }
  else
  {
    dispatch_once(&bufferedAudioEngine_getMagicCookieIDForMagicCookieData_sRandomBytesOnce, &__block_literal_global_269);
    if (theData)
      goto LABEL_3;
  }
  return 0;
}

uint64_t __bufferedAudioEngine_getMagicCookieIDForMagicCookieData_block_invoke()
{
  return RandomBytes();
}

uint64_t bufferedAudioEngine_copyPropertyDispatch(uint64_t *a1)
{
  uint64_t v1;
  const void *v2;
  const __CFAllocator *v3;
  _QWORD *v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  const void **v7;
  const void *v8;
  uint64_t FigEndpointStreamAudioFormatDescriptionArray;
  int32_t v11;
  CFDictionaryRef v12;
  CMTimeValue value;
  CMTime time;
  CMTime v15;
  CMTime v16;
  CMTimeValue v17;
  unsigned int v18;

  v1 = *a1;
  v2 = (const void *)a1[1];
  v3 = (const __CFAllocator *)a1[2];
  v4 = (_QWORD *)a1[3];
  v18 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = 0;
  if (!v2 || !v4)
  {
    APSLogErrorAt();
    return 4294951815;
  }
  v6 = DerivedStorage;
  if (CFEqual(v2, (CFTypeRef)*MEMORY[0x1E0CC40C0]))
  {
    if (gLogCategory_APAudioEngineBuffered <= 40
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (v1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    v8 = *(const void **)(v6 + 536);
    if (!v8)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!CFEqual(v2, (CFTypeRef)*MEMORY[0x1E0CC40D0]))
  {
    if (CFEqual(v2, CFSTR("currentRTPTime")))
    {
      v16 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      v15 = v16;
      if (APSAudioFormatDescriptionListSupports44kHz()
        && APSAudioFormatDescriptionListSupports48kHz())
      {
        if (gLogCategory_APAudioEngineBuffered <= 90
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (v1)
            CMBaseObjectGetDerivedStorage();
          LogPrintF();
        }
      }
      else
      {
        bufferedAudioEngine_getCurrentRemoteMediaTimeInternal((int *)&v18, &v16);
        if (v18)
        {
          APSLogErrorAt();
          return v18;
        }
        if (APSAudioFormatDescriptionListSupports44kHz())
          v11 = 44100;
        else
          v11 = 48000;
        time = v16;
        CMTimeConvertScale(&v15, &time, v11, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      }
      time = v15;
      v12 = CMTimeCopyAsDictionary(&time, v3);
      if (v12)
      {
        *v4 = v12;
      }
      else
      {
        APSLogErrorAt();
        return -15480;
      }
      return v18;
    }
    if (CFEqual(v2, (CFTypeRef)*MEMORY[0x1E0CC40E8]))
    {
      if (*(_QWORD *)(v6 + 920))
      {
        FigEndpointStreamAudioFormatDescriptionArray = APSAudioFormatDescriptionListCreateFigEndpointStreamAudioFormatDescriptionArray();
        if (!(_DWORD)FigEndpointStreamAudioFormatDescriptionArray)
        {
          value = v17;
LABEL_38:
          *v4 = value;
          return FigEndpointStreamAudioFormatDescriptionArray;
        }
        goto LABEL_57;
      }
    }
    else
    {
      if (CFEqual(v2, (CFTypeRef)*MEMORY[0x1E0CC40E0]))
      {
        v16 = *(CMTime *)(v6 + 156);
        v8 = CMTimeCopyAsDictionary(&v16, v3);
        if (!v8)
        {
          APSLogErrorAt();
          return 4294951816;
        }
        goto LABEL_24;
      }
      if (!CFEqual(v2, (CFTypeRef)*MEMORY[0x1E0CC40F0]))
      {
        if (!CFEqual(v2, (CFTypeRef)*MEMORY[0x1E0CC40C8]))
          return 4294954509;
        v8 = *(const void **)(v6 + 1120);
        if (!v8)
          goto LABEL_24;
        goto LABEL_23;
      }
      v16.value = 0;
      if (*(_QWORD *)(v6 + 928))
      {
        FigEndpointStreamAudioFormatDescriptionArray = APSAudioFormatDescriptionCopyFigEndpointStreamAudioFormatDescription();
        if (!(_DWORD)FigEndpointStreamAudioFormatDescriptionArray)
        {
          value = v16.value;
          goto LABEL_38;
        }
LABEL_57:
        APSLogErrorAt();
        return FigEndpointStreamAudioFormatDescriptionArray;
      }
    }
    APSLogErrorAt();
    return 4294951814;
  }
  v7 = (const void **)MEMORY[0x1E0C9AE50];
  if (!*(_BYTE *)(v6 + 464))
    v7 = (const void **)MEMORY[0x1E0C9AE40];
  v8 = *v7;
LABEL_23:
  v8 = CFRetain(v8);
LABEL_24:
  FigEndpointStreamAudioFormatDescriptionArray = 0;
  *v4 = v8;
  return FigEndpointStreamAudioFormatDescriptionArray;
}

uint64_t bufferedAudioEngine_setPropertyDispatch(uint64_t *a1)
{
  uint64_t v1;
  const void *v2;
  __CFString *v3;
  uint64_t DerivedStorage;
  CFTypeID v5;
  CFTypeID v6;
  CFTypeID v7;
  const void *v8;
  uint64_t v9;
  CFTypeID v11;
  int IsFeatureEnabled;
  CFAllocatorRef *v13;
  CFStringRef v14;
  uint64_t CMBaseObject;
  void (*v16)(uint64_t, const __CFString *, CFStringRef);
  CFDictionaryRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, const __CFString *, uint64_t);
  void *values;

  v1 = *a1;
  v2 = (const void *)a1[1];
  v3 = (__CFString *)a1[2];
  values = v3;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(v2, (CFTypeRef)*MEMORY[0x1E0CC40B0]))
  {
    if (!v3 || (v5 = CFGetTypeID(v3), v5 == CFNumberGetTypeID()))
    {
      if (gLogCategory_APAudioEngineBuffered <= 40
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      v8 = *(const void **)(DerivedStorage + 376);
      *(_QWORD *)(DerivedStorage + 376) = v3;
      if (!v3)
        goto LABEL_27;
      goto LABEL_26;
    }
    goto LABEL_72;
  }
  if (CFEqual(v2, (CFTypeRef)*MEMORY[0x1E0CC40A8]))
  {
    if (!v3 || (v6 = CFGetTypeID(v3), v6 == CFDataGetTypeID()))
    {
      if (gLogCategory_APAudioEngineBuffered <= 40
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      v8 = *(const void **)(DerivedStorage + 384);
      *(_QWORD *)(DerivedStorage + 384) = v3;
      if (!v3)
        goto LABEL_27;
LABEL_26:
      CFRetain(v3);
LABEL_27:
      if (v8)
        CFRelease(v8);
      return 0;
    }
LABEL_72:
    APSLogErrorAt();
    return 4294951815;
  }
  if (!CFEqual(v2, (CFTypeRef)*MEMORY[0x1E0CC40D8]))
  {
    if (!CFEqual(v2, (CFTypeRef)*MEMORY[0x1E0CC40B8]))
      return 4294954509;
    if (!v3 || (v11 = CFGetTypeID(v3), v11 == CFNumberGetTypeID()))
    {
      if (gLogCategory_APAudioEngineBuffered <= 40
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      CFNumberGetValue((CFNumberRef)v3, kCFNumberSInt32Type, (void *)(DerivedStorage + 524));
      return 0;
    }
    goto LABEL_72;
  }
  if (!v3)
    goto LABEL_72;
  v7 = CFGetTypeID(v3);
  if (v7 != CFStringGetTypeID())
    goto LABEL_72;
  if (gLogCategory_APAudioEngineBuffered <= 40
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  *(_BYTE *)(DerivedStorage + 392) = 0;
  CFStringGetCString(v3, (char *)(DerivedStorage + 392), 16, 0x600u);
  if (*(_QWORD *)(DerivedStorage + 536) && APSGetFBOPropertyInt64())
    __strlcat_chk();
  __strlcat_chk();
  IsFeatureEnabled = APSSettingsIsFeatureEnabled();
  v13 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (IsFeatureEnabled)
  {
    v14 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)(DerivedStorage + 392), 0x600u);
    CMBaseObject = APAudioHoseManagerBufferedGetCMBaseObject(*(_QWORD *)(DerivedStorage + 1680));
    v16 = *(void (**)(uint64_t, const __CFString *, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
    if (v16)
      v16(CMBaseObject, CFSTR("LoggingID"), v14);
  }
  else
  {
    v14 = 0;
  }
  if (!*(_QWORD *)(DerivedStorage + 992))
  {
    v17 = CFDictionaryCreate(*v13, MEMORY[0x1E0CF75C8], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v17)
    {
      APSLogErrorAt();
      v9 = 4294951816;
      goto LABEL_56;
    }
    APSWirelessCoexManagerCreateWithOptions();
    if (!APSSettingsIsFeatureEnabled())
    {
      v9 = 0;
      goto LABEL_56;
    }
    v18 = *(_QWORD *)(DerivedStorage + 1680);
    v19 = *(_QWORD *)(DerivedStorage + 992);
    v20 = APAudioHoseManagerBufferedGetCMBaseObject(v18);
    v21 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
    if (v21)
    {
      v9 = v21(v20, CFSTR("CoexManager"), v19);
      if (!(_DWORD)v9)
        goto LABEL_56;
    }
    else
    {
      v9 = 4294954514;
    }
    APSLogErrorAt();
    goto LABEL_56;
  }
  v9 = 0;
  v17 = 0;
LABEL_56:
  if (v14)
    CFRelease(v14);
  if (v17)
    CFRelease(v17);
  return v9;
}

__CFString *bufferedAudioEngine_audioHoseProtocolCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("APAudioEngineBuffered <APSEndpointStreamAudioHoseRegistrarProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t bufferedAudioEngine_audioHoseRegistrarRegisterHose(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;

  CMBaseObjectGetDerivedStorage();
  result = APSPriorityDispatcherSyncTask();
  *a4 = &bufferedAudioEngine_audioHoseRegistrarRegisterHose_callbacks;
  return result;
}

uint64_t bufferedAudioEngine_audioHoseRegistrarDeregisterHose()
{
  CMBaseObjectGetDerivedStorage();
  return APSPriorityDispatcherSyncTask();
}

uint64_t bufferedAudioEngine_CopyAudioDataBBufsForHose(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CMBaseObjectGetDerivedStorage();
  if (a2 && a3)
  {
    APSPriorityDispatcherSyncF();
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294951815;
  }
}

uint64_t bufferedAudioEngine_audioHoseRegistrarRegisterHoseInternal(uint64_t *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  CFTypeRef v8;
  __int16 FirstValidReadIndex;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(const void *, _QWORD, _QWORD, const void **);
  int v19;
  const void *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v27;
  int v28;
  uint64_t v29;
  void (*v30)(uint64_t, const __CFString *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, const __CFString *, uint64_t, uint64_t);
  unsigned int v34;
  uint64_t v35;
  void (*v36)(uint64_t, _QWORD, _QWORD);
  uint64_t v37;
  uint64_t (*v38)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v39;
  CFTypeID v40;
  signed int v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t ProtocolVTable;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t);
  __int128 v57;
  uint64_t valuePtr;
  CFTypeRef cf;
  const void *context;
  uint64_t v61;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  valuePtr = 0;
  cf = 0;
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  if (bufferedAudioEngine_getHoseDecriptorFromHose())
  {
    APSLogErrorAt();
    goto LABEL_112;
  }
  if (!*(_QWORD *)(DerivedStorage + 560))
  {
LABEL_112:
    v42 = APSSignalErrorAt();
    goto LABEL_93;
  }
  v3 = *a1;
  v4 = (const void *)a1[1];
  v5 = CMBaseObjectGetDerivedStorage();
  if (!bufferedAudioEngine_getHoseDecriptorFromHose())
  {
    bufferedAudioEngine_reportAndResetRTCBufferLevelAndUnderrunDataForAllExistingHoses(v3);
    v6 = *(_QWORD *)(v5 + 584);
    v7 = malloc_type_calloc(1uLL, 0x1E8uLL, 0x106004080B4243AuLL);
    *(_QWORD *)(v5 + 584) = v7;
    if (v7)
    {
      if (v4)
      {
        v8 = CFRetain(v4);
        v7 = *(_QWORD **)(v5 + 584);
      }
      else
      {
        v8 = 0;
      }
      v7[2] = v8;
      FirstValidReadIndex = APMessageRingBufferedGetFirstValidReadIndex(*(_QWORD *)(v5 + 560), &valuePtr);
      v10 = *(_QWORD *)(v5 + 584);
      *(_WORD *)(v10 + 26) = FirstValidReadIndex;
      *(_BYTE *)(v10 + 56) = 0;
      *(_QWORD *)(v10 + 80) = 0;
      v11 = mach_absolute_time();
      v12 = *(_QWORD *)(v5 + 584);
      *(_QWORD *)(v12 + 72) = v11;
      *(_BYTE *)(v12 + 57) = 1;
      *(_DWORD *)(v12 + 140) = 0;
      v13 = (__int128 *)MEMORY[0x1E0CA2E68];
      v14 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      *(_QWORD *)(v12 + 104) = v14;
      v15 = *v13;
      *(_OWORD *)(v12 + 88) = *v13;
      v16 = *(_QWORD *)(v5 + 584);
      *(_QWORD *)(v16 + 48) = v14;
      v57 = v15;
      *(_OWORD *)(v16 + 32) = v15;
      v17 = *(_QWORD *)(v5 + 584);
      *(_DWORD *)(v17 + 136) = 0;
      *(_BYTE *)(v17 + 204) = 0;
      *(_BYTE *)(v17 + 168) = 0;
      context = 0;
      v18 = *(uint64_t (**)(const void *, _QWORD, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
      if (!v18)
      {
        v21 = 0;
        goto LABEL_20;
      }
      v19 = v18(v4, *MEMORY[0x1E0CA4788], 0, &context);
      v20 = context;
      if (v19)
      {
        v21 = 0;
        if (!context)
          goto LABEL_20;
      }
      else
      {
        v21 = FigCFEqual() != 0;
        v20 = context;
        if (!context)
        {
LABEL_20:
          v22 = *(_QWORD *)(v5 + 584);
          *(_BYTE *)(v22 + 24) = v21;
          *(_BYTE *)(v22 + 256) = 0;
          *(_OWORD *)(v22 + 112) = v57;
          *(_QWORD *)(v22 + 128) = v14;
          v23 = *(_QWORD *)(v5 + 584);
          if (*(_BYTE *)(v23 + 24))
            *(_BYTE *)(v5 + 1080) = 1;
          v24 = *(_QWORD *)(v23 + 16);
          v25 = *MEMORY[0x1E0C9AE00];
          v26 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
          if (v26)
            v26(v24, *MEMORY[0x1E0CF7390], v25, v23 + 248);
          v27 = *(_QWORD *)(v5 + 584);
          *(_QWORD *)v27 = v6;
          if (v6)
            *(_QWORD *)(v6 + 8) = v27;
          ++*(_DWORD *)(v5 + 592);
          v28 = *(_DWORD *)(v5 + 1208);
          *(_DWORD *)(v5 + 1208) = v28 + 1;
          *(_DWORD *)(v27 + 264) = v28;
          *(_QWORD *)(v27 + 272) = 0;
          v29 = *(_QWORD *)(v27 + 16);
          v30 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
          if (v30)
            v30(v29, CFSTR("Model"), v25, v27 + 280);
          v31 = *(_QWORD *)(v5 + 584);
          v32 = *(_QWORD *)(v31 + 16);
          v33 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
          if (v33)
            v33(v32, CFSTR("OSBuildVersion"), v25, v31 + 288);
          bufferedAudioEngine_resetAllRTCDataForHose(v3, *(_QWORD *)(v5 + 584));
          v34 = *(_DWORD *)(v5 + 592);
          if (v34 > *(_DWORD *)(v5 + 1212))
            *(_DWORD *)(v5 + 1212) = v34;
          goto LABEL_32;
        }
      }
      CFRelease(v20);
      goto LABEL_20;
    }
  }
  APSLogErrorAt();
  v42 = APSSignalErrorAt();
  if ((_DWORD)v42)
    goto LABEL_48;
LABEL_32:
  if (CFDictionaryGetInt64())
  {
    *(_BYTE *)(DerivedStorage + 1160) = 1;
    bufferedAudioEngine_setEchoCancellationIsEnabledToAllHoses(*a1, 1);
  }
  if (*(_BYTE *)(DerivedStorage + 1160))
  {
    v35 = a1[1];
    v36 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v36)
      v36(v35, *MEMORY[0x1E0CF7360], *MEMORY[0x1E0C9AE50]);
  }
  v37 = a1[1];
  v38 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v38)
  {
    v42 = 4294954514;
LABEL_48:
    APSLogErrorAt();
    goto LABEL_93;
  }
  v39 = v38(v37, *MEMORY[0x1E0CF7340], 0, &cf);
  if ((_DWORD)v39)
  {
    v42 = v39;
    goto LABEL_48;
  }
  if (cf && (v40 = CFGetTypeID(cf), v40 == CFNumberGetTypeID()))
  {
    CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, (char *)&valuePtr + 4);
    v41 = *(_DWORD *)(DerivedStorage + 120) * HIDWORD(valuePtr) / 0x64u;
    if (*(_DWORD *)(DerivedStorage + 116) < v41)
      v41 = *(_DWORD *)(DerivedStorage + 116);
    *(_DWORD *)(*(_QWORD *)(DerivedStorage + 584) + 156) = HIDWORD(valuePtr) - v41;
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    *(_DWORD *)(*(_QWORD *)(DerivedStorage + 584) + 160) = *(_DWORD *)(DerivedStorage + 180)
                                                           * HIDWORD(valuePtr)
                                                           / 0x64u;
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    bufferedAudioEngine_updateStartWatermarkTime(*a1);
    v43 = HIDWORD(valuePtr);
    if (*(_DWORD *)(DerivedStorage + 648) < HIDWORD(valuePtr))
    {
      if (HIDWORD(valuePtr) >= 0x753000)
        v43 = 7680000;
      *(_DWORD *)(DerivedStorage + 648) = v43;
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
    }
    v44 = *(_BYTE *)(DerivedStorage + 325);
    if (v44)
      v44 = APSIsFBOPropertyAvailable() != 0;
    *(_BYTE *)(*(_QWORD *)(DerivedStorage + 584) + 25) = v44;
    if (gLogCategory_APAudioEngineBuffered <= 50)
    {
      if (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize())
      {
        if (*a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
    }
    *(_WORD *)(DerivedStorage + 800) = 0;
    bufferedAudioEngine_updateInternalBadgeInfoAndPostNotificationIfNecessary(*a1, *(const void **)(DerivedStorage + 960), 0);
    v45 = *a1;
    v46 = *(_QWORD *)(DerivedStorage + 584);
    v47 = CMBaseObjectGetDerivedStorage();
    context = (const void *)v45;
    v61 = v46;
    if (v46)
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(v47 + 1136), (CFDictionaryApplierFunction)bufferedAudioEngine_setCryptorForHoseCallback, &context);
    v48 = *a1;
    v49 = *(_QWORD *)(DerivedStorage + 584);
    v50 = CMBaseObjectGetDerivedStorage();
    context = (const void *)v48;
    v61 = v49;
    if (v49 && *(_BYTE *)(v50 + 520))
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(v50 + 976), (CFDictionaryApplierFunction)bufferedAudioEngine_setMagicCookieForHoseCallback, &context);
    if (*(_BYTE *)(*(_QWORD *)(DerivedStorage + 584) + 24) || !*(_BYTE *)(DerivedStorage + 520))
    {
      v42 = 0;
    }
    else
    {
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      v52 = a1[1];
      v53 = gSoundCheckEnabled;
      APSEndpointStreamAudioHoseProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable && (v55 = *(_QWORD *)(ProtocolVTable + 16)) != 0)
      {
        v56 = *(uint64_t (**)(uint64_t, uint64_t))(v55 + 112);
        if (v56)
          v42 = v56(v52, v53);
        else
          v42 = 4294954514;
      }
      else
      {
        v42 = 4294954508;
      }
    }
    bufferedAudioEngine_wakeUpHosesAndAudioTimer(*a1);
  }
  else
  {
    APSLogErrorAt();
    v42 = 4294960540;
  }
LABEL_93:
  if (cf)
    CFRelease(cf);
  return v42;
}

void bufferedAudioEngine_copyAudioDataBBufDispatchInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFAllocator *v4;
  CFMutableArrayRef Mutable;
  const __CFArray *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *HoseDecriptorFromHose;
  uint64_t v12;
  char v13;
  char *v14;
  int v15;
  CMBlockBufferRef v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  CMTimeValue value;
  CMTimeScale timescale;
  OpaqueCMBlockBuffer *MessageAtIndex;
  OpaqueCMBlockBuffer *v23;
  size_t DataLength;
  unsigned __int16 v25;
  uint64_t v26;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  int v29;
  CMTimeFlags v30;
  const __CFAllocator *structureAllocator;
  _OWORD *v32;
  const __CFArray *v33;
  __int128 v34;
  CMTimeEpoch v35;
  CMTimeScale v36;
  CMTimeValue v37;
  CMTime v38;
  CMTime rhs;
  uint64_t v40;
  CMBlockBufferRef blockBufferOut;
  CMTime v42;
  CMTime v43;
  int v44;
  CMTime time2;
  CMTime time;
  CMTimeValue v47;
  CMTimeScale v48;
  uint64_t v49;
  int epoch_high;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 464))
  {
    APSLogErrorAt();
    v15 = -15485;
    goto LABEL_25;
  }
  v3 = DerivedStorage;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(int *)(DerivedStorage + 296), MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v15 = -15480;
    goto LABEL_25;
  }
  v6 = Mutable;
  if (!*(_BYTE *)(v3 + 464))
  {
    APSLogErrorAt();
    v15 = 0;
    if (gLogCategory_APAudioEngineBuffered <= 50)
    {
      if (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize())
      {
        if (*(_QWORD *)a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      v15 = 0;
    }
    goto LABEL_98;
  }
  v7 = *(_QWORD *)a1;
  v8 = CMBaseObjectGetDerivedStorage();
  v9 = MEMORY[0x1E0CA2E18];
  v37 = *MEMORY[0x1E0CA2E18];
  v47 = *MEMORY[0x1E0CA2E18];
  v36 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v48 = v36;
  v38 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (*(_BYTE *)v8)
  {
LABEL_22:
    v13 = 0;
    goto LABEL_23;
  }
  v10 = v8;
  if (*(_QWORD *)(v8 + 560))
  {
    HoseDecriptorFromHose = (int *)bufferedAudioEngine_getHoseDecriptorFromHose();
    if (!HoseDecriptorFromHose)
    {
      if (gLogCategory_APAudioEngineBuffered <= 60
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v7)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      goto LABEL_22;
    }
    v12 = (uint64_t)HoseDecriptorFromHose;
    if (HoseDecriptorFromHose[43] >= 1)
    {
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v7)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      *(_BYTE *)(v12 + 57) = 1;
      goto LABEL_22;
    }
    if (*((_BYTE *)HoseDecriptorFromHose + 56))
    {
      bufferedAudioEngine_logForSendRate(v7, (uint64_t)HoseDecriptorFromHose, 0);
      goto LABEL_22;
    }
    v33 = v6;
    if (gLogCategory_APAudioEngineBuffered > 10)
      goto LABEL_38;
    if (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize())
    {
      if (v7)
        CMBaseObjectGetDerivedStorage();
      time = *(CMTime *)(v12 + 88);
      CMTimeGetSeconds(&time);
      LogPrintF();
      v9 = MEMORY[0x1E0CA2E18];
    }
    if (*(_BYTE *)(v12 + 56))
    {
      v16 = 0;
    }
    else
    {
LABEL_38:
      structureAllocator = v4;
      v16 = 0;
      v30 = *(_DWORD *)(v9 + 12);
      v35 = *(_QWORD *)(v9 + 16);
      v17 = (_OWORD *)(v12 + 88);
      v32 = (_OWORD *)(v12 + 32);
      while (1)
      {
        if (!*(_DWORD *)(v10 + 296) || CFArrayGetCount(v6) >= *(int *)(v10 + 296))
        {
          if ((*(_BYTE *)(v10 + 312) & 1) == 0)
            break;
          time = v38;
          time2 = *(CMTime *)(v10 + 300);
          if ((CMTimeCompare(&time, &time2) & 0x80000000) == 0)
            break;
        }
        if (v16)
          CFRelease(v16);
        v44 = 0;
        v18 = CMBaseObjectGetDerivedStorage();
        *(_OWORD *)&v43.value = *(_OWORD *)v9;
        v43.epoch = v35;
        *(_OWORD *)&v42.value = *(_OWORD *)&v43.value;
        v42.epoch = v35;
        v40 = 0;
        blockBufferOut = 0;
        if (!*(_QWORD *)(v18 + 560))
        {
          APSLogErrorAt();
          v29 = APSSignalErrorAt();
          v16 = 0;
          if (!v29)
            break;
          v15 = v29;
LABEL_91:
          APSLogErrorAt();
          v13 = 0;
          goto LABEL_34;
        }
        v19 = v18;
        v34 = *(_OWORD *)&v43.value;
        v47 = v37;
        v48 = v36;
        bufferedAudioEngine_getCurrentRemoteMediaTimeInternal(&v44, &time);
        value = time.value;
        timescale = time.timescale;
        v49 = *(_QWORD *)&time.flags;
        epoch_high = HIDWORD(time.epoch);
        if (v44)
        {
          APSLogErrorAt();
          v16 = 0;
          flags = v30;
          epoch = v35;
        }
        else
        {
          MessageAtIndex = (OpaqueCMBlockBuffer *)APMessageRingBufferedGetMessageAtIndex(*(_QWORD *)(v19 + 560), *(unsigned __int16 *)(v12 + 26), (_DWORD *)&v40 + 1, (uint64_t)&v43, (uint64_t)&v42);
          if (MessageAtIndex)
          {
            v23 = MessageAtIndex;
            DataLength = CMBlockBufferGetDataLength(MessageAtIndex);
            CMBlockBufferCreateWithBufferReference(structureAllocator, v23, 0, DataLength, 0, &blockBufferOut);
            *(_QWORD *)(v12 + 80) += DataLength;
            time2 = v43;
            rhs.value = value;
            rhs.timescale = timescale;
            *(_QWORD *)&rhs.flags = v49;
            HIDWORD(rhs.epoch) = epoch_high;
            CMTimeSubtract(&time, &time2, &rhs);
            *v17 = *(_OWORD *)&time.value;
            *(_QWORD *)(v12 + 104) = time.epoch;
            *v32 = *(_OWORD *)&v43.value;
            *(_QWORD *)(v12 + 48) = v43.epoch;
            if ((v42.flags & 1) != 0)
            {
              *(_OWORD *)&time2.value = *v17;
              time2.epoch = *(_QWORD *)(v12 + 104);
              rhs = v42;
              CMTimeAdd(&time, &time2, &rhs);
              *v17 = *(_OWORD *)&time.value;
              *(_QWORD *)(v12 + 104) = time.epoch;
              *(_OWORD *)&time2.value = *v32;
              time2.epoch = *(_QWORD *)(v12 + 48);
              rhs = v42;
              CMTimeAdd(&time, &time2, &rhs);
              *v32 = *(_OWORD *)&time.value;
              *(_QWORD *)(v12 + 48) = time.epoch;
            }
            *(_DWORD *)(v12 + 28) = HIDWORD(v40);
            ++*(_QWORD *)(v12 + 144);
            v25 = *(_WORD *)(v12 + 26) + 1;
            *(_WORD *)(v12 + 26) = v25;
            APMessageRingBufferedGetByteCountAtIndex(*(_QWORD *)(v19 + 560), v25, (int *)(v12 + 136));
            v44 = 0;
            v26 = CMBaseObjectGetDerivedStorage();
            v6 = v33;
            if (*(_DWORD *)(v12 + 136) >= *(_DWORD *)(v12 + 156)
              || (*(_OWORD *)&time.value = *v17,
                  time.epoch = *(_QWORD *)(v12 + 104),
                  time2 = *(CMTime *)(v26 + 124),
                  CMTimeCompare(&time, &time2) >= 1))
            {
              *(_WORD *)(v12 + 56) = 257;
              if (gLogCategory_APAudioEngineBuffered <= 50
                && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
              {
                if (v7)
                  CMBaseObjectGetDerivedStorage();
                time = v43;
                CMTimeGetSeconds(&time);
                *(_OWORD *)&time.value = *v17;
                time.epoch = *(_QWORD *)(v12 + 104);
                CMTimeGetSeconds(&time);
                LogPrintF();
                v6 = v33;
              }
            }
            v16 = blockBufferOut;
            blockBufferOut = 0;
            v47 = v42.value;
            flags = v42.flags;
            v48 = v42.timescale;
            epoch = v42.epoch;
            bufferedAudioEngine_logForSendRate(v7, v12, DataLength);
            if (blockBufferOut)
              CFRelease(blockBufferOut);
          }
          else
          {
            *(_OWORD *)&time.value = v34;
            time.epoch = v35;
            APMessageRingBufferedGetLastValidReadIndexAndTimestamp(*(_QWORD *)(v19 + 560), &v40, (uint64_t)&time);
            if (gLogCategory_APAudioEngineBuffered <= 50
              && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
            {
              if (v7)
                CMBaseObjectGetDerivedStorage();
              time2.value = value;
              time2.timescale = timescale;
              *(_QWORD *)&time2.flags = v49;
              HIDWORD(time2.epoch) = epoch_high;
              CMTimeGetSeconds(&time2);
              time2 = time;
              CMTimeGetSeconds(&time2);
              LogPrintF();
            }
            v16 = 0;
            flags = v30;
            epoch = v35;
            v6 = v33;
          }
        }
        v15 = v44;
        if (v44)
          goto LABEL_91;
        v9 = MEMORY[0x1E0CA2E18];
        if (v16)
        {
          if ((flags & 1) != 0)
          {
            time = v38;
            time2.value = v47;
            time2.timescale = v48;
            time2.flags = flags;
            time2.epoch = epoch;
            CMTimeAdd(&v38, &time, &time2);
          }
          CFArrayAppendValue(v6, v16);
          if (!*(_BYTE *)(v12 + 56))
            continue;
        }
        break;
      }
    }
    if ((*(_BYTE *)(v10 + 1096) & 1) != 0
      && (time = *(CMTime *)(v10 + 1084), time2 = *(CMTime *)(v12 + 32), !CMTimeCompare(&time, &time2)))
    {
      v15 = 0;
      v13 = 1;
    }
    else
    {
      v15 = 0;
      v13 = *(_BYTE *)(v12 + 56);
    }
LABEL_34:
    if (v16)
      CFRelease(v16);
    if (!v15)
      goto LABEL_23;
    goto LABEL_37;
  }
  APSLogErrorAt();
  v15 = APSSignalErrorAt();
  v13 = 0;
  if (v15)
  {
LABEL_37:
    APSLogErrorAt();
LABEL_98:
    CFRelease(v6);
    goto LABEL_25;
  }
LABEL_23:
  **(_QWORD **)(a1 + 16) = v6;
  v14 = *(char **)(a1 + 24);
  v15 = 0;
  if (v14)
    *v14 = v13;
LABEL_25:
  **(_DWORD **)(a1 + 32) = v15;
}

uint64_t bufferedAudioEngine_logForSendRate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeValue v15;
  CMTimeScale v16;
  int32_t SampleRateFromTransportAudioFormat;
  CMTimeValue v18;
  CMTimeValue v19;
  CMTimeScale v20;
  unint64_t v21;
  double v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;
  CMTimeValue v27;
  CMTimeScale v28;
  CMTimeScale v29;
  unint64_t v30;
  CMTime v31;
  CMTime time;
  CMTime v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int epoch_high;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v34 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = mach_absolute_time();
  v8 = result;
  if (*(_BYTE *)(a2 + 24))
    v9 = 10000;
  else
    v9 = 100;
  if (*(_BYTE *)(a2 + 56))
  {
    if (!*(_BYTE *)(a2 + 240))
    {
      v10 = UpTicksToMilliseconds();
      result = UpTicksToMilliseconds();
      if (v10 && result != 0)
      {
        if (gLogCategory_APAudioEngineBuffered <= 50)
        {
          if (gLogCategory_APAudioEngineBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
          {
            if (a1)
              CMBaseObjectGetDerivedStorage();
            result = LogPrintF();
          }
        }
        *(_QWORD *)(a2 + 224) = 0;
        *(_QWORD *)(a2 + 232) = 0;
        *(_BYTE *)(a2 + 240) = 1;
      }
    }
  }
  else
  {
    *(int32x2_t *)(a2 + 232) = vadd_s32(*(int32x2_t *)(a2 + 232), (int32x2_t)0x100000001);
    *(_QWORD *)(a2 + 224) += a3;
    if (*(_BYTE *)(a2 + 240))
    {
      *(_QWORD *)(a2 + 208) = result;
      *(_QWORD *)(a2 + 216) = result;
      *(_BYTE *)(a2 + 240) = 0;
    }
    else
    {
      if (!*(_QWORD *)(a2 + 208))
      {
        *(_QWORD *)(a2 + 208) = result;
        *(_QWORD *)(a2 + 216) = result;
      }
      v12 = UpTicksToMilliseconds();
      result = UpTicksToMilliseconds();
      if (v12 && result && v12 >= v9)
      {
        v30 = result;
        bufferedAudioEngine_getCurrentRemoteMediaTimeInternal(&v34, &v33);
        value = v33.value;
        timescale = v33.timescale;
        v39 = *(_QWORD *)&v33.flags;
        epoch_high = HIDWORD(v33.epoch);
        if (v34)
        {
          return APSLogErrorAt();
        }
        else
        {
          v15 = *(_QWORD *)(a2 + 32);
          v16 = *(_DWORD *)(a2 + 40);
          v37 = *(_QWORD *)(a2 + 44);
          v38 = *(_DWORD *)(a2 + 52);
          bufferedAudioEngine_getLastDeliveredRemoteMediaTimeForHose(a2, (__n128 *)&v33);
          v27 = v33.value;
          v28 = v33.timescale;
          v35 = *(_QWORD *)&v33.flags;
          v36 = HIDWORD(v33.epoch);
          SampleRateFromTransportAudioFormat = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
          time.value = v15;
          time.timescale = v16;
          *(_QWORD *)&time.flags = v37;
          HIDWORD(time.epoch) = v38;
          CMTimeConvertScale(&v33, &time, SampleRateFromTransportAudioFormat, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          v18 = v33.value;
          v29 = v33.timescale;
          v37 = *(_QWORD *)&v33.flags;
          v38 = HIDWORD(v33.epoch);
          time.value = value;
          time.timescale = timescale;
          *(_QWORD *)&time.flags = v39;
          HIDWORD(time.epoch) = epoch_high;
          CMTimeConvertScale(&v33, &time, SampleRateFromTransportAudioFormat, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          v19 = v33.value;
          v20 = v33.timescale;
          v39 = *(_QWORD *)&v33.flags;
          epoch_high = HIDWORD(v33.epoch);
          LODWORD(v21) = *(_DWORD *)(a2 + 236);
          v22 = (double)v21 / (double)v30 * 1000.0;
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (a1)
              CMBaseObjectGetDerivedStorage();
            v33.value = v18;
            v33.timescale = v29;
            *(_QWORD *)&v33.flags = v37;
            HIDWORD(v33.epoch) = v38;
            CMTimeGetSeconds(&v33);
            v33.value = v27;
            v33.timescale = v28;
            *(_QWORD *)&v33.flags = v35;
            HIDWORD(v33.epoch) = v36;
            CMTimeGetSeconds(&v33);
            v33.value = v19;
            v33.timescale = v20;
            *(_QWORD *)&v33.flags = v39;
            HIDWORD(v33.epoch) = epoch_high;
            CMTimeGetSeconds(&v33);
            CMClockGetTime(&v31, *(CMClockRef *)(DerivedStorage + 448));
            CMTimeGetSeconds(&v31);
            LogPrintF();
          }
          *(_DWORD *)(a2 + 232) = 0;
          *(_QWORD *)(a2 + 216) = v8;
          *(_QWORD *)(a2 + 224) = 0;
          result = CMBaseObjectGetDerivedStorage();
          if (*(_QWORD *)(result + 1176))
          {
            v23 = *(_QWORD *)(a2 + 344);
            v24 = *(double *)(a2 + 328);
            *(_QWORD *)(a2 + 344) = v23 + 1;
            v25 = v22 + v24 * (double)v23;
            v26 = (double)(v23 + 1);
            *(double *)(a2 + 328) = v25 / v26;
            if (*(double *)(a2 + 312) > v22)
              *(double *)(a2 + 312) = v22;
            if (*(double *)(a2 + 320) < v22)
              *(double *)(a2 + 320) = v22;
            *(double *)(a2 + 336) = *(double *)(a2 + 336) + (v22 - *(double *)(a2 + 336)) / v26;
          }
        }
      }
    }
  }
  return result;
}

uint64_t bufferedAudioEngine_getSampleRateFromTransportAudioFormat()
{
  double v0;

  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 928))
  {
    APSAudioFormatDescriptionGetSampleRate();
    return (int)v0;
  }
  else
  {
    APSLogErrorAt();
    APSSignalErrorAt();
    return 0;
  }
}

uint64_t bufferedAudioEngine_setEchoCancellationIsEnabledToAllHoses(uint64_t a1, int a2)
{
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  result = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD **)(result + 584);
  if (v4)
  {
    v5 = *MEMORY[0x1E0CF7360];
    v6 = (uint64_t *)MEMORY[0x1E0C9AE40];
    if (a2)
      v6 = (uint64_t *)MEMORY[0x1E0C9AE50];
    v7 = *v6;
    do
    {
      v8 = v4[2];
      result = CMBaseObjectGetVTable();
      v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 56);
      if (v9)
        result = v9(v8, v5, v7);
      v4 = (_QWORD *)*v4;
    }
    while (v4);
  }
  return result;
}

uint64_t bufferedAudioEngine_wakeUpHosesAndAudioTimer(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)result)
  {
    v3 = result;
    if (APSSettingsIsFeatureEnabled())
    {
      v4 = *(_QWORD *)(v3 + 1680);
      result = CMBaseObjectGetVTable();
      v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 24);
      if (v5)
        result = v5(v4);
    }
    else
    {
      result = bufferedAudioEngine_wakeUpHoses();
    }
    if (*(_BYTE *)(v3 + 464) && !*(_BYTE *)(v3 + 480))
    {
      kdebug_trace();
      if (gLogCategory_APAudioEngineBuffered <= 40
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      result = APSPriorityDispatchSourceResume();
      *(_BYTE *)(v3 + 480) = 1;
    }
    else if (gLogCategory_APAudioEngineBuffered <= 40)
    {
      if (gLogCategory_APAudioEngineBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        return LogPrintF();
      }
    }
  }
  return result;
}

uint64_t bufferedAudioEngine_setCryptorForHoseCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  uint64_t result;
  uint64_t v7;
  const void *v8;
  uint64_t CryptorIDForCryptor;
  uint64_t v10;
  uint64_t (*v11)(const void *, uint64_t, uint64_t, uint64_t (*)(const void *, uint64_t, int, const void *), const void *);

  v5 = *(const void **)a3;
  result = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v7 = *(_QWORD *)(a3 + 8);
    if (v7)
    {
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v5)
          CMBaseObjectGetDerivedStorage();
        bufferedAudioEngine_getCryptorIDForCryptor(a1);
        LogPrintF();
      }
      if (v5)
        CFRetain(v5);
      v8 = *(const void **)(v7 + 16);
      CryptorIDForCryptor = bufferedAudioEngine_getCryptorIDForCryptor(a1);
      APSEndpointStreamAudioHoseProtocolGetProtocolID();
      result = CMBaseObjectGetProtocolVTable();
      if (result)
      {
        v10 = *(_QWORD *)(result + 16);
        if (v10)
        {
          v11 = *(uint64_t (**)(const void *, uint64_t, uint64_t, uint64_t (*)(const void *, uint64_t, int, const void *), const void *))(v10 + 96);
          if (v11)
          {
            result = v11(v8, CryptorIDForCryptor, a1, bufferedAudioEngine_hoseSetCryptorCallbackCompletionHandler, v5);
            if (!(_DWORD)result)
              return result;
          }
          else
          {
            result = bufferedAudioEngine_hoseSetCryptorCallbackCompletionHandler(v8, CryptorIDForCryptor, -12782, v5);
          }
        }
      }
      if (gLogCategory_APAudioEngineBuffered <= 90)
      {
        if (gLogCategory_APAudioEngineBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        {
          if (v5)
            CMBaseObjectGetDerivedStorage();
          return LogPrintF();
        }
      }
    }
  }
  return result;
}

uint64_t bufferedAudioEngine_setMagicCookieForHoseCallback(const __CFData *a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  uint64_t result;
  uint64_t v7;
  const void *v8;
  uint64_t MagicCookieIDForMagicCookieData;
  uint64_t v10;
  uint64_t (*v11)(const void *, uint64_t, const __CFData *, uint64_t (*)(const void *, uint64_t, int, const void *), const void *);

  v5 = *(const void **)a3;
  result = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v7 = *(_QWORD *)(a3 + 8);
    if (v7)
    {
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v5)
          CMBaseObjectGetDerivedStorage();
        bufferedAudioEngine_getMagicCookieIDForMagicCookieData(a1);
        LogPrintF();
      }
      if (v5)
        CFRetain(v5);
      v8 = *(const void **)(v7 + 16);
      MagicCookieIDForMagicCookieData = bufferedAudioEngine_getMagicCookieIDForMagicCookieData(a1);
      APSEndpointStreamAudioHoseProtocolGetProtocolID();
      result = CMBaseObjectGetProtocolVTable();
      if (result)
      {
        v10 = *(_QWORD *)(result + 16);
        if (v10)
        {
          v11 = *(uint64_t (**)(const void *, uint64_t, const __CFData *, uint64_t (*)(const void *, uint64_t, int, const void *), const void *))(v10 + 104);
          if (v11)
          {
            result = v11(v8, MagicCookieIDForMagicCookieData, a1, bufferedAudioEngine_hoseSetMagicCookieCallbackCompletionHandler, v5);
            if (!(_DWORD)result)
              return result;
          }
          else
          {
            result = bufferedAudioEngine_hoseSetMagicCookieCallbackCompletionHandler(v8, MagicCookieIDForMagicCookieData, -12782, v5);
          }
        }
      }
      if (gLogCategory_APAudioEngineBuffered <= 90)
      {
        if (gLogCategory_APAudioEngineBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        {
          if (v5)
            CMBaseObjectGetDerivedStorage();
          return LogPrintF();
        }
      }
    }
  }
  return result;
}

uint64_t bufferedAudioEngine_hoseSetMagicCookieCallbackCompletionHandler(const void *a1, uint64_t a2, int a3, const void *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  CFTypeRef v10;
  CFTypeRef v11;
  uint64_t v12;

  CMBaseObjectGetDerivedStorage();
  v8 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200401C4E69EBuLL);
  if (!v8)
  {
    APSLogErrorAt();
    v12 = 4294951816;
    if (!a4)
      return v12;
    goto LABEL_9;
  }
  v9 = v8;
  if (a4)
    v10 = CFRetain(a4);
  else
    v10 = 0;
  *v9 = v10;
  if (a1)
    v11 = CFRetain(a1);
  else
    v11 = 0;
  v9[1] = v11;
  v9[2] = a2;
  *((_DWORD *)v9 + 6) = a3;
  APSPriorityDispatcherAsyncF();
  v12 = 0;
  if (a4)
LABEL_9:
    CFRelease(a4);
  return v12;
}

void bufferedAudioEngine_hoseSetMagicCookieCallbackCompletionHandlerInternal(uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    goto LABEL_18;
  if (!bufferedAudioEngine_getHoseDecriptorFromHose())
  {
    if (gLogCategory_APAudioEngineBuffered > 90
      || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_18;
    }
    if (!*(_QWORD *)a1)
      goto LABEL_17;
LABEL_26:
    CMBaseObjectGetDerivedStorage();
    goto LABEL_17;
  }
  if (!*(_DWORD *)(a1 + 24))
  {
    if (gLogCategory_APAudioEngineBuffered > 50
      || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_18;
    }
    if (!*(_QWORD *)a1)
    {
LABEL_17:
      LogPrintF();
      goto LABEL_18;
    }
    goto LABEL_26;
  }
  if (gLogCategory_APAudioEngineBuffered <= 90
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (!*(_QWORD *)a1)
      goto LABEL_17;
    goto LABEL_26;
  }
LABEL_18:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  free((void *)a1);
}

uint64_t bufferedAudioEngine_audioHoseRegistrarDeregisterHoseInternal(uint64_t *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  v3 = bufferedAudioEngine_removeHose(*a1);
  if ((_DWORD)v3)
  {
    APSLogErrorAt();
  }
  else
  {
    if (CFDictionaryGetInt64())
    {
      *(_BYTE *)(DerivedStorage + 1160) = 0;
      bufferedAudioEngine_setEchoCancellationIsEnabledToAllHoses(*a1, 0);
    }
    bufferedAudioEngine_updateInternalBadgeInfoAndPostNotificationIfNecessary(*a1, *(const void **)(DerivedStorage + 960), 0);
  }
  return v3;
}

void bufferedAudioEngine_Resume(const void *a1, const void *a2, void (*a3)(const void *, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v8;
  void *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  CFTypeRef v13;
  CFTypeRef v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint8_t buf[16];

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  v8 = LogCategoryCopyOSLogHandle();
  v9 = (void *)v8;
  if (v8)
    v10 = v8;
  else
    v10 = MEMORY[0x1E0C81028];
  if (os_signpost_enabled(v10))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C943B000, v10, OS_SIGNPOST_EVENT, 0x2B16058CuLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_RESUME_START", (const char *)&unk_1C965D452, buf, 2u);
  }
  if (v9)
    os_release(v9);
  kdebug_trace();
  v11 = malloc_type_malloc(0x28uLL, 0x10E0040139F2759uLL);
  if (!v11)
  {
    APSLogErrorAt();
    v16 = 4294951816;
LABEL_30:
    if (a3)
      a3(a1, v16, a4);
    return;
  }
  v12 = v11;
  if (a1)
    v13 = CFRetain(a1);
  else
    v13 = 0;
  *v12 = v13;
  if (a2)
    v14 = CFRetain(a2);
  else
    v14 = 0;
  v12[1] = v14;
  v12[2] = a3;
  v12[3] = a4;
  *((_DWORD *)v12 + 8) = 0;
  v15 = APSDispatchSectionEnterWithPriorityDispatcher();
  if ((_DWORD)v15)
  {
    v16 = v15;
    APSLogErrorAt();
    if (*v12)
      CFRelease((CFTypeRef)*v12);
    v17 = (const void *)v12[1];
    if (v17)
      CFRelease(v17);
    free(v12);
    goto LABEL_30;
  }
}

void bufferedAudioEngine_Suspend(const void *a1, const void *a2, void (*a3)(const void *, uint64_t, uint64_t), uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  v7 = malloc_type_malloc(0x28uLL, 0x10E0040139F2759uLL);
  if (!v7)
  {
    APSLogErrorAt();
    v12 = 4294951816;
LABEL_23:
    if (a3)
      a3(a1, v12, a4);
    return;
  }
  v8 = v7;
  if (a1)
    v9 = CFRetain(a1);
  else
    v9 = 0;
  *v8 = v9;
  if (a2)
    v10 = CFRetain(a2);
  else
    v10 = 0;
  v8[1] = v10;
  v8[2] = a3;
  v8[3] = a4;
  *((_DWORD *)v8 + 8) = 0;
  v11 = APSDispatchSectionEnterWithPriorityDispatcher();
  if ((_DWORD)v11)
  {
    v12 = v11;
    APSLogErrorAt();
    if (*v8)
      CFRelease((CFTypeRef)*v8);
    v13 = (const void *)v8[1];
    if (v13)
      CFRelease(v13);
    free(v8);
    goto LABEL_23;
  }
}

void bufferedAudioEngine_SetEndpointStream(const void *a1, const void *a2, void (*a3)(const void *, uint64_t, uint64_t), uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  kdebug_trace();
  v7 = malloc_type_malloc(0x28uLL, 0x10A0040DE786E1EuLL);
  if (!v7)
  {
    APSLogErrorAt();
    v12 = 4294951816;
LABEL_23:
    if (a3)
      a3(a1, v12, a4);
    return;
  }
  v8 = v7;
  if (a1)
    v9 = CFRetain(a1);
  else
    v9 = 0;
  *v8 = v9;
  if (a2)
    v10 = CFRetain(a2);
  else
    v10 = 0;
  v8[1] = v10;
  v8[2] = a3;
  v8[3] = a4;
  *((_DWORD *)v8 + 8) = 0;
  v11 = APSDispatchSectionEnterWithPriorityDispatcher();
  if ((_DWORD)v11)
  {
    v12 = v11;
    APSLogErrorAt();
    if (*v8)
      CFRelease((CFTypeRef)*v8);
    v13 = (const void *)v8[1];
    if (v13)
      CFRelease(v13);
    free(v8);
    goto LABEL_23;
  }
}

uint64_t bufferedAudioEngine_Flush(uint64_t a1)
{
  uint64_t v2;

  CMBaseObjectGetDerivedStorage();
  FigCFDictionaryGetCMTimeIfPresent();
  CFDictionaryGetInt64();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  v2 = APSPriorityDispatcherSyncTask();
  if ((_DWORD)v2)
    APSLogErrorAt();
  return v2;
}

uint64_t bufferedAudioEngine_FlushWithinSampleRange(const void *a1, __int128 *a2)
{
  __int128 v4;
  char *v5;
  CFTypeRef v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  CMTimeRange time;
  CMTime v12;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    *(_OWORD *)&time.start.value = *a2;
    time.start.epoch = *((_QWORD *)a2 + 2);
    CMTimeGetSeconds(&time.start);
    v4 = a2[1];
    *(_OWORD *)&time.start.value = *a2;
    *(_OWORD *)&time.start.epoch = v4;
    *(_OWORD *)&time.duration.timescale = a2[2];
    CMTimeRangeGetEnd(&v12, &time);
    CMTimeGetSeconds(&v12);
    LogPrintF();
  }
  v5 = (char *)malloc_type_calloc(1uLL, 0x38uLL, 0x10200404F37B891uLL);
  if (v5)
  {
    if (a1)
      v6 = CFRetain(a1);
    else
      v6 = 0;
    *(_QWORD *)v5 = v6;
    v7 = *a2;
    v8 = a2[1];
    *(_OWORD *)(v5 + 40) = a2[2];
    *(_OWORD *)(v5 + 24) = v8;
    *(_OWORD *)(v5 + 8) = v7;
    v9 = APSPriorityDispatcherAsyncF();
    if ((_DWORD)v9)
      APSLogErrorAt();
    else
      v5 = 0;
  }
  else
  {
    APSLogErrorAt();
    v9 = 4294951816;
  }
  free(v5);
  return v9;
}

void bufferedAudioEngine_SetRateAndAnchorTime(const void *a1, CMTime *a2, CMTime *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  BOOL v14;
  char *v15;
  char *v16;
  CFTypeRef v17;
  __int128 v18;
  CMTimeEpoch epoch;
  uint64_t MutableCopy;
  const void *v21;
  uint64_t v22;
  const void *v23;
  const void *v24;
  CMTime time;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    time = *a2;
    CMTimeGetSeconds(&time);
    time = *a3;
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  v14 = a7 == 0.0 || a7 == 1.0;
  if (v14 && (v15 = (char *)malloc_type_calloc(1uLL, 0x58uLL, 0x10A0040F3A75D44uLL)) != 0)
  {
    v16 = v15;
    if (a1)
      v17 = CFRetain(a1);
    else
      v17 = 0;
    *(_QWORD *)v16 = v17;
    *((double *)v16 + 1) = a7;
    v18 = *(_OWORD *)&a2->value;
    *((_QWORD *)v16 + 4) = a2->epoch;
    *((_OWORD *)v16 + 1) = v18;
    epoch = a3->epoch;
    *(_OWORD *)(v16 + 40) = *(_OWORD *)&a3->value;
    *((_QWORD *)v16 + 7) = epoch;
    *((_QWORD *)v16 + 8) = a4;
    *((_QWORD *)v16 + 9) = a5;
    if (a7 != 1.0 || !a6)
    {
      APSPriorityDispatcherAsyncEnforcePriorityF();
      return;
    }
    MutableCopy = FigCFDictionaryCreateMutableCopy();
    if (MutableCopy)
    {
      v21 = (const void *)MutableCopy;
      FigCFDictionaryGetValue();
      v22 = FigCFDictionaryCreateMutableCopy();
      if (v22)
      {
        v23 = (const void *)v22;
        mach_absolute_time();
        FigCFDictionarySetInt64();
        FigCFDictionarySetValue();
        *((_QWORD *)v16 + 10) = CFRetain(v21);
        APSPriorityDispatcherAsyncEnforcePriorityF();
        CFRelease(v23);
        CFRelease(v21);
        return;
      }
      APSLogErrorAt();
      CFRelease(v21);
    }
    else
    {
      APSLogErrorAt();
    }
    if (*(_QWORD *)v16)
      CFRelease(*(CFTypeRef *)v16);
    v24 = (const void *)*((_QWORD *)v16 + 10);
    if (v24)
      CFRelease(v24);
    free(v16);
  }
  else
  {
    APSLogErrorAt();
  }
  if (a4)
  {
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(a1, 4294949714, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], 0);
  }
}

uint64_t bufferedAudioEngine_SetEndOfSiriTTSUtteranceMediaTime(CMTimeValue a1, CMTime *a2)
{
  uint64_t v4;
  CMTime time;
  CMTimeEpoch epoch;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    time = *a2;
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  time.value = a1;
  *(_OWORD *)&time.timescale = *(_OWORD *)&a2->value;
  epoch = a2->epoch;
  v4 = APSPriorityDispatcherSyncTask();
  if ((_DWORD)v4)
    APSLogErrorAt();
  return v4;
}

uint64_t bufferedAudioEngine_ApplyVolumeFade(uint64_t a1)
{
  uint64_t v2;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  v2 = APSPriorityDispatcherSyncTask();
  if ((_DWORD)v2)
    APSLogErrorAt();
  return v2;
}

void bufferedAudioEngine_resumeInternalStage1(uint64_t *a1)
{
  uint64_t DerivedStorage;
  const __CFDictionary *v3;
  CFAllocatorRef *v4;
  const __CFNumber *Value;
  const void *v6;
  const void *v7;
  const __CFData *v8;
  const UInt8 *BytePtr;
  const void *v10;
  BOOL v11;
  const void *v12;
  const void *v13;
  const void *v14;
  CFTypeRef v15;
  const void *v16;
  CFTypeRef v17;
  const void *v18;
  CFTypeRef v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeID v22;
  int v23;
  const void *DefaultFormat;
  const void *v25;
  const void *v26;
  int v27;
  uint64_t v28;
  int CFPreferenceNumberWithDefault;
  const __CFAllocator *v30;
  __CFDictionary *Mutable;
  int v32;
  CFIndex Count;
  CFIndex v34;
  CFIndex v35;
  const void *ValueAtIndex;
  uint64_t *v37;
  int ChannelCount;
  int v39;
  CFNumberRef v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  CFDataRef v49;
  int v50;
  uint64_t CMBaseObject;
  uint64_t (*v52)(uint64_t, _QWORD, const __CFAllocator *, uint64_t);
  OpaqueCMClock *HostTimeClock;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  const void *v56;
  const void *v57;
  CFTypeRef v58;
  uint64_t v59;
  int v60;
  _QWORD *v61;
  size_t v62;
  malloc_zone_t *DefaultAirPlayMallocZone;
  uint64_t DefaultAirPlayMallocZoneCFAllocator;
  uint64_t (*v65)();
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, const __CFString *, uint64_t);
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, const __CFString *, uint64_t);
  int v76;
  uint64_t *v77;
  uint64_t v78;
  const void *v79;
  CFTypeRef v80;
  __int128 v81;
  __int128 v82;
  int valuePtr;
  CFTypeRef v84;
  CFTypeRef v85;
  CFTypeRef v86;
  int v87;
  CFTypeRef v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  int v92;
  uint64_t AudioFormatIndex;
  CFArrayRef theArray;
  CFTypeRef v95;
  CFTypeRef *v96;
  uint64_t v97;
  int v98;
  __int128 bytes;
  __int128 v100;
  CFTypeRef *v101;
  uint64_t *v102;
  const void *v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v87 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v85 = 0;
  v86 = 0;
  v84 = 0;
  valuePtr = 0;
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  kdebug_trace();
  if (!*(_BYTE *)(DerivedStorage + 464))
  {
    v3 = (const __CFDictionary *)a1[1];
    v4 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (!v3)
    {
      Value = 0;
      v6 = 0;
      v7 = 0;
      goto LABEL_27;
    }
    Value = (const __CFNumber *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x1E0CC40F8]);
    v6 = CFDictionaryGetValue((CFDictionaryRef)a1[1], (const void *)*MEMORY[0x1E0CC4108]);
    v7 = CFDictionaryGetValue((CFDictionaryRef)a1[1], (const void *)*MEMORY[0x1E0CC4118]);
    if (!CFDictionaryGetValue((CFDictionaryRef)a1[1], (const void *)*MEMORY[0x1E0CC4110]))
    {
LABEL_20:
      if (Value)
      {
        v8 = *(const __CFData **)(DerivedStorage + 384);
        if (!v8
          || CFDataGetLength(v8) != 32
          || (BytePtr = CFDataGetBytePtr(*(CFDataRef *)(DerivedStorage + 384)),
              v81 = *(_OWORD *)BytePtr,
              v82 = *((_OWORD *)BytePtr + 1),
              ((unint64_t)v81 & *((_QWORD *)&v81 + 1) & (unint64_t)v82 & *((_QWORD *)&v82 + 1)) == 0xFFFFFFFFFFFFFFFFLL))
        {
          APSLogErrorAt();
          v10 = 0;
          v87 = -15481;
          goto LABEL_211;
        }
        CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
        v10 = (const void *)CFStringCreateF();
        if (v87)
          goto LABEL_209;
        bytes = v81;
        v100 = v82;
        v87 = FigAudioSessionCreateWithAVAudioSessionSiblingForAudioSessionID();
        if (v87)
          goto LABEL_209;
        goto LABEL_28;
      }
LABEL_27:
      v10 = 0;
LABEL_28:
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      if (APSSettingsGetIntWithDefault())
      {
        if (v6)
          v11 = APSGetFBOPropertyInt64() != 0;
        else
          v11 = 1;
      }
      else
      {
        v11 = 0;
      }
      *(_BYTE *)(DerivedStorage + 520) = v11;
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      if (!v7)
        goto LABEL_218;
      v12 = *(const void **)(DerivedStorage + 512);
      *(_QWORD *)(DerivedStorage + 512) = 0;
      if (v12)
        CFRelease(v12);
      v13 = *(const void **)(DerivedStorage + 488);
      *(_QWORD *)(DerivedStorage + 488) = Value;
      if (Value)
        CFRetain(Value);
      if (v13)
        CFRelease(v13);
      v14 = *(const void **)(DerivedStorage + 496);
      v15 = v86;
      *(_QWORD *)(DerivedStorage + 496) = v86;
      if (v15)
        CFRetain(v15);
      if (v14)
        CFRelease(v14);
      v16 = *(const void **)(DerivedStorage + 504);
      v17 = v85;
      *(_QWORD *)(DerivedStorage + 504) = v85;
      if (v17)
        CFRetain(v17);
      if (v16)
        CFRelease(v16);
      v18 = *(const void **)(DerivedStorage + 1376);
      v19 = v84;
      *(_QWORD *)(DerivedStorage + 1376) = v84;
      if (v19)
        CFRetain(v19);
      if (v18)
        CFRelease(v18);
      v20 = *a1;
      v21 = CMBaseObjectGetDerivedStorage();
      *(_QWORD *)&bytes = 0;
      v22 = CFGetTypeID(v7);
      if (v22 == CFArrayGetTypeID())
      {
        v23 = APSAudioFormatDescriptionListCreateWithFigEndpointStreamAudioFormatDescriptionArray();
        if (v23)
        {
          v27 = v23;
          APSLogErrorAt();
        }
        else if (APSAudioFormatDescriptionListSupports44kHz()
               || APSAudioFormatDescriptionListSupports48kHz())
        {
          if (!*(_BYTE *)(v21 + 464) && !*(_QWORD *)(v21 + 928))
          {
            DefaultFormat = (const void *)APSAudioFormatDescriptionListGetDefaultFormat();
            if (DefaultFormat)
              DefaultFormat = CFRetain(DefaultFormat);
            *(_QWORD *)(v21 + 928) = DefaultFormat;
          }
          v25 = *(const void **)(v21 + 920);
          v26 = (const void *)bytes;
          *(_QWORD *)(v21 + 920) = bytes;
          if (v26)
            CFRetain(v26);
          if (v25)
            CFRelease(v25);
          v95 = 0;
          APSAudioFormatDescriptionListCopyDebugString();
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (v20)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          if (v95)
            CFRelease(v95);
          v95 = 0;
          APSAudioFormatDescriptionCopyDebugString();
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (v20)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          if (v95)
            CFRelease(v95);
          v27 = 0;
        }
        else
        {
          v95 = 0;
          APSAudioFormatDescriptionListCopyDebugString();
          if (gLogCategory_APAudioEngineBuffered <= 90
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (v20)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          if (v95)
            CFRelease(v95);
          v27 = -15490;
        }
      }
      else
      {
        APSLogErrorAt();
        v27 = -15481;
      }
      if ((_QWORD)bytes)
        CFRelease((CFTypeRef)bytes);
      v87 = v27;
      if (v27)
        goto LABEL_209;
      if (!APSAudioFormatDescriptionListContainsFormat())
      {
LABEL_218:
        APSLogErrorAt();
        v87 = APSSignalErrorAt();
        if (v87)
          goto LABEL_211;
        goto LABEL_219;
      }
      v79 = v10;
      v28 = *a1;
      v95 = 0;
      v96 = &v95;
      v97 = 0x2000000000;
      v98 = 0;
      CMBaseObjectGetDerivedStorage();
      AudioFormatIndex = 0;
      theArray = 0;
      CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
      v89 = 0;
      v90 = &v89;
      v91 = 0x2000000000;
      v92 = 256000;
      v30 = *v4;
      Mutable = CFDictionaryCreateMutable(*v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        APSRemoteConfigGetShared();
        v80 = (CFTypeRef)APSRemoteConfigCopyValue();
        v32 = APSAudioFormatDescriptionListCopyAudioFormatDescriptionsArray();
        *((_DWORD *)v96 + 6) = v32;
        if (v32)
        {
          APSLogErrorAt();
        }
        else
        {
          v78 = DerivedStorage;
          Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            v34 = Count;
            v77 = a1;
            v35 = 0;
            while (1)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(theArray, v35);
              AudioFormatIndex = APSAudioFormatDescriptionGetAudioFormatIndex();
              v37 = v90;
              *((_DWORD *)v90 + 6) = 256000;
              if (CFPreferenceNumberWithDefault)
              {
                *((_DWORD *)v37 + 6) = CFPreferenceNumberWithDefault;
              }
              else
              {
                ChannelCount = APSAudioFormatDescriptionGetChannelCount();
                v39 = 256000;
                if (ChannelCount != 1)
                {
                  if (APSAudioFormatDescriptionGetChannelCount() == 2)
                    v39 = 256000;
                  else
                    v39 = 512000;
                }
                v37 = v90;
                *((_DWORD *)v90 + 6) = v39;
                if (v80)
                {
                  *(_QWORD *)&bytes = MEMORY[0x1E0C809B0];
                  *((_QWORD *)&bytes + 1) = 0x40000000;
                  *(_QWORD *)&v100 = __bufferedAudioEngine_createTargetVBROptions_block_invoke;
                  *((_QWORD *)&v100 + 1) = &unk_1E826B810;
                  v101 = &v95;
                  v102 = &v89;
                  v103 = ValueAtIndex;
                  CFDictionaryApplyBlock();
                  *((_DWORD *)v96 + 6) = 0;
                  v37 = v90;
                }
              }
              v40 = CFNumberCreate(v30, kCFNumberSInt32Type, v37 + 3);
              if (!v40)
              {
                APSLogErrorAt();
                *((_DWORD *)v96 + 6) = -6728;
                goto LABEL_130;
              }
              v41 = v40;
              v42 = CFNumberCreate(v30, kCFNumberSInt64Type, &AudioFormatIndex);
              if (!v42)
                break;
              v43 = v42;
              v88 = 0;
              APSAudioFormatDescriptionCopyDebugString();
              if (gLogCategory_APAudioEngineBuffered <= 30
                && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
              {
                if (v28)
                  CMBaseObjectGetDerivedStorage();
                LogPrintF();
              }
              if (v88)
                CFRelease(v88);
              CFDictionaryAddValue(Mutable, v43, v41);
              CFRelease(v41);
              CFRelease(v43);
              if (v34 == ++v35)
                goto LABEL_130;
            }
            APSLogErrorAt();
            *((_DWORD *)v96 + 6) = -6728;
            CFRelease(v41);
LABEL_130:
            a1 = v77;
          }
          DerivedStorage = v78;
        }
      }
      else
      {
        APSLogErrorAt();
        v80 = 0;
        *((_DWORD *)v96 + 6) = -6728;
      }
      v10 = v79;
      if (theArray)
        CFRelease(theArray);
      if (v80)
        CFRelease(v80);
      _Block_object_dispose(&v89, 8);
      _Block_object_dispose(&v95, 8);
      *(_QWORD *)(DerivedStorage + 528) = Mutable;
      v44 = *(_QWORD *)(DerivedStorage + 328);
      v45 = *a1;
      v46 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
      if (!v46)
      {
        v87 = -12782;
        goto LABEL_209;
      }
      v87 = v46(v44, v45);
      if (!v87)
      {
        if (*(_QWORD *)(DerivedStorage + 448))
          goto LABEL_139;
        CMBaseObject = APSNetworkClockGetCMBaseObject();
        v52 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
        if (!v52)
        {
          v87 = -12782;
          goto LABEL_209;
        }
        v87 = v52(CMBaseObject, *MEMORY[0x1E0CF74D8], v30, DerivedStorage + 448);
        if (!v87)
        {
          CMClockGetTime((CMTime *)&bytes, *(CMClockRef *)(DerivedStorage + 448));
          *(_OWORD *)(DerivedStorage + 1448) = bytes;
          *(_QWORD *)(DerivedStorage + 1464) = v100;
          HostTimeClock = CMClockGetHostTimeClock();
          CMClockGetTime((CMTime *)&bytes, HostTimeClock);
          *(_OWORD *)(DerivedStorage + 1496) = bytes;
          *(_QWORD *)(DerivedStorage + 1512) = v100;
          v54 = *(_QWORD *)(DerivedStorage + 328);
          v55 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (v55)
            v55(v54, DerivedStorage + 1424);
LABEL_139:
          if (*(_QWORD *)(DerivedStorage + 992))
            goto LABEL_140;
          v87 = APSWirelessCoexManagerCreateWithOptions();
          if (v87)
          {
            if (gLogCategory_APAudioEngineBuffered <= 50
              && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
            {
              if (*a1)
                CMBaseObjectGetDerivedStorage();
              LogPrintF();
            }
            v87 = 0;
          }
          if (!APSSettingsIsFeatureEnabled())
          {
LABEL_140:
            if (v87)
              goto LABEL_209;
          }
          else
          {
            v73 = *(_QWORD *)(DerivedStorage + 992);
            v74 = APAudioHoseManagerBufferedGetCMBaseObject(*(_QWORD *)(DerivedStorage + 1680));
            v75 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
            if (!v75)
            {
              v87 = -12782;
              goto LABEL_209;
            }
            v87 = v75(v74, CFSTR("CoexManager"), v73);
            if (v87)
              goto LABEL_209;
          }
          v47 = *a1;
          v48 = CMBaseObjectGetDerivedStorage();
          v95 = 0;
          RandomBytes();
          v49 = CFDataCreate(v30, (const UInt8 *)&bytes, 32);
          v50 = APSCryptorChaCha20Poly1305Create();
          if (v50)
          {
            APSLogErrorAt();
            if (!v49)
              goto LABEL_172;
          }
          else
          {
            if (gLogCategory_APAudioEngineBuffered <= 40
              && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
            {
              if (v47)
                CMBaseObjectGetDerivedStorage();
              LogPrintF();
            }
            v56 = *(const void **)(v48 + 544);
            *(_QWORD *)(v48 + 544) = v49;
            if (v49)
              CFRetain(v49);
            if (v56)
              CFRelease(v56);
            v57 = *(const void **)(v48 + 552);
            v58 = v95;
            *(_QWORD *)(v48 + 552) = v95;
            if (v58)
              CFRetain(v58);
            if (v57)
              CFRelease(v57);
            if (!v49)
              goto LABEL_172;
          }
          CFRelease(v49);
LABEL_172:
          if (v95)
            CFRelease(v95);
          v87 = v50;
          if (v50)
            goto LABEL_209;
          v59 = *a1;
          v60 = *(unsigned __int8 *)(DerivedStorage + 520);
          v61 = (_QWORD *)CMBaseObjectGetDerivedStorage();
          if (v61[70])
            goto LABEL_191;
          APSSettingsIsFeatureEnabled();
          v61[7] = (int)FigGetCFPreferenceNumberWithDefault();
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (v59)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          v62 = v61[7];
          DefaultAirPlayMallocZone = (malloc_zone_t *)APSAllocatorGetDefaultAirPlayMallocZone();
          DefaultAirPlayMallocZoneCFAllocator = APSAllocatorGetDefaultAirPlayMallocZoneCFAllocator();
          v65 = v60
              ? bufferedAudioEngine_messageRingSetMessageSequenceNumberCallbackAPAP
              : bufferedAudioEngine_messageRingSetMessageSequenceNumberCallbackRTP;
          v66 = APMessageRingBufferedCreate((uint64_t)v30, v62, DefaultAirPlayMallocZone, (uint64_t)bufferedAudioEngine_createMessageBackingBBuf, DefaultAirPlayMallocZoneCFAllocator, (uint64_t)v65, 0, v61 + 70);
          if (v66)
          {
            v72 = v66;
          }
          else
          {
LABEL_191:
            if (!APSSettingsIsFeatureEnabled())
              goto LABEL_194;
            v67 = v61[210];
            v68 = v61[70];
            v69 = APAudioHoseManagerBufferedGetCMBaseObject(v67);
            v70 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
            if (v70)
            {
              v71 = v70(v69, CFSTR("MessageRing"), v68);
              if (!v71)
              {
LABEL_194:
                v87 = 0;
                bufferedAudioEngine_initializeRTCReporting(*a1);
                v87 = 0;
                bufferedAudioEngine_initializeResumeState((const void *)*a1);
                v87 = 0;
                v87 = bufferedAudioEngine_createAndResumeAudioTimerInternal(*a1);
                if (!v87)
                {
                  bufferedAudioEngine_markSessionStartedForRTC();
                  APSOasisCPUFloorRaiserRetainAssertion();
                  *(_BYTE *)(DerivedStorage + 464) = 1;
                  goto LABEL_210;
                }
                goto LABEL_209;
              }
              v72 = v71;
            }
            else
            {
              v72 = -12782;
            }
          }
          APSLogErrorAt();
          v87 = v72;
        }
      }
LABEL_209:
      APSLogErrorAt();
      goto LABEL_210;
    }
    v87 = APSAudioFormatDescriptionCreateWithFigEndpointStreamAudioFormatDescription();
    if (!v87)
    {
      *(_QWORD *)&bytes = 0;
      APSAudioFormatDescriptionCopyDebugString();
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      goto LABEL_20;
    }
    APSLogErrorAt();
  }
  v10 = 0;
LABEL_210:
  if (v87)
  {
LABEL_211:
    bufferedAudioEngine_sendSessionFailureEvent(*a1, CFSTR("Session failed to resume"));
    bufferedAudioEngine_tearDownResumedStateAndStructuresInternal((const void *)*a1, 0);
    v76 = v87;
    goto LABEL_220;
  }
LABEL_219:
  v76 = 0;
LABEL_220:
  *((_DWORD *)a1 + 8) = v76;
  APSPriorityDispatcherAsyncF();
  if (v86)
    CFRelease(v86);
  if (v85)
    CFRelease(v85);
  if (v84)
    CFRelease(v84);
  if (v10)
    CFRelease(v10);
}

uint64_t bufferedAudioEngine_initializeRTCReporting(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const __CFAllocator *v7;
  __int128 v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = APSRTCReportingAgentCreate();
  if ((_DWORD)result)
  {
    if (gLogCategory_APAudioEngineBuffered <= 90)
    {
      if (gLogCategory_APAudioEngineBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        return LogPrintF();
      }
    }
  }
  else
  {
    if (gLogCategory_APAudioEngineBuffered <= 40
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    v4 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(DerivedStorage + 1216) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(DerivedStorage + 1232) = *(_QWORD *)(v4 + 16);
    v5 = MEMORY[0x1E0CA2E68];
    v8 = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)(DerivedStorage + 1240) = *MEMORY[0x1E0CA2E68];
    v6 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)(DerivedStorage + 1256) = v6;
    *(_QWORD *)(DerivedStorage + 1208) = 0;
    result = APSThreadSafeDictionaryCreate();
    if (*(_QWORD *)(DerivedStorage + 1264))
    {
      v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      result = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      *(_QWORD *)(DerivedStorage + 1272) = result;
      if (result)
      {
        *(_OWORD *)(DerivedStorage + 1280) = v8;
        *(_QWORD *)(DerivedStorage + 1296) = v6;
        *(_OWORD *)(DerivedStorage + 1304) = v8;
        *(_QWORD *)(DerivedStorage + 1320) = v6;
        result = (uint64_t)CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        *(_QWORD *)(DerivedStorage + 1328) = result;
        if (result)
        {
          result = (uint64_t)CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          *(_QWORD *)(DerivedStorage + 1336) = result;
          if (result)
          {
            result = (uint64_t)CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            *(_QWORD *)(DerivedStorage + 1344) = result;
            if (result)
            {
              *(_QWORD *)(DerivedStorage + 1368) = 0;
              *(_QWORD *)(DerivedStorage + 1360) = 0;
              result = (uint64_t)CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
              *(_QWORD *)(DerivedStorage + 1392) = result;
              if (result)
              {
                *(_QWORD *)(DerivedStorage + 1408) = 0;
                *(_QWORD *)(DerivedStorage + 1400) = 0;
                return APSCopyClusterInfo();
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void bufferedAudioEngine_initializeResumeState(const void *a1)
{
  uint64_t DerivedStorage;
  int CFPreferenceNumberWithDefault;
  __int128 v4;
  CMTimeEpoch epoch;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __CFNotificationCenter *DarwinNotifyCenter;
  CMTime v10;
  CMTime v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  bufferedAudioEngine_updateMaxAudioBurstIfNecessary((uint64_t)a1);
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  CMTimeMake(&v10, CFPreferenceNumberWithDefault, 1000);
  *(CMTime *)(DerivedStorage + 28) = v10;
  bufferedAudioEngine_generateNewFirstRemoteMediaTime((uint64_t)a1, &v11);
  *(_BYTE *)(DerivedStorage + 912) = 1;
  v4 = *(_OWORD *)&v11.value;
  *(_QWORD *)(DerivedStorage + 692) = v11.epoch;
  *(_OWORD *)(DerivedStorage + 676) = v4;
  epoch = v11.epoch;
  *(_OWORD *)(DerivedStorage + 700) = *(_OWORD *)&v11.value;
  *(_QWORD *)(DerivedStorage + 716) = epoch;
  v6 = MEMORY[0x1E0CA2E18];
  v7 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 724) = *MEMORY[0x1E0CA2E18];
  v8 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(DerivedStorage + 740) = v8;
  *(_OWORD *)(DerivedStorage + 652) = v7;
  *(_QWORD *)(DerivedStorage + 668) = v8;
  *(_QWORD *)(DerivedStorage + 816) = 0xBFF0000000000000;
  *(_BYTE *)(DerivedStorage + 760) = 0;
  *(_BYTE *)(DerivedStorage + 802) = 0;
  *(_QWORD *)(DerivedStorage + 752) = 0;
  *(_DWORD *)(DerivedStorage + 984) = 0;
  bufferedAudioEngine_updatePlaybackState((uint64_t)a1, 1937010544);
  v10 = v11;
  bufferedAudioEngine_updateNextTranscodeBurstTimeAndUnRest((uint64_t)a1, &v10);
  APSTimedInfoManagerCreate();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  *(_OWORD *)(DerivedStorage + 952) = 0u;
  if (*(_QWORD *)(DerivedStorage + 872))
  {
    bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(a1, 4294949714, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], 0);
    *(_QWORD *)(DerivedStorage + 872) = 0;
    *(_QWORD *)(DerivedStorage + 880) = 0;
  }
  RandomBytes();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    APSAudioFormatDescriptionGetASBD();
    LogPrintF();
  }
  bufferedAudioEngine_readSoundCheck((uint64_t)a1);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)bufferedAudioEngine_soundCheckChanged, CFSTR("com.apple.mobileipod-prefsChanged"), 0, (CFNotificationSuspensionBehavior)0);
}

uint64_t bufferedAudioEngine_createAndResumeAudioTimerInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v3)
  {
    v11 = 4294895206;
    goto LABEL_26;
  }
  v4 = (const void *)v3;
  v5 = APSPriorityDispatchSourceCreate();
  if ((_DWORD)v5)
  {
    v11 = v5;
LABEL_24:
    APSLogErrorAt();
    CFRelease(v4);
    return v11;
  }
  v6 = APSPriorityDispatchSourceSetTimer();
  if ((_DWORD)v6)
  {
    v11 = v6;
    goto LABEL_26;
  }
  if (gLogCategory_APAudioEngineBuffered <= 40
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  v7 = APSPriorityDispatchSourceResume();
  if ((_DWORD)v7)
  {
    v11 = v7;
    goto LABEL_26;
  }
  v8 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v8)
  {
    v11 = 4294895206;
    goto LABEL_26;
  }
  v4 = (const void *)v8;
  v9 = APSPriorityDispatchSourceCreate();
  if ((_DWORD)v9)
  {
    v11 = v9;
    goto LABEL_24;
  }
  v10 = APSPriorityDispatchSourceSetTimer();
  if ((_DWORD)v10)
  {
    v11 = v10;
    goto LABEL_26;
  }
  v11 = APSPriorityDispatchSourceResume();
  if ((_DWORD)v11)
  {
LABEL_26:
    APSLogErrorAt();
    return v11;
  }
  *(_BYTE *)(DerivedStorage + 480) = 1;
  return v11;
}

double bufferedAudioEngine_markSessionStartedForRTC()
{
  uint64_t DerivedStorage;
  double result;
  uint64_t v2;
  OpaqueCMClock *HostTimeClock;
  CMTime v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 1176))
  {
    v2 = DerivedStorage;
    HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&v4, HostTimeClock);
    result = *(double *)&v4.value;
    *(CMTime *)(v2 + 1184) = v4;
  }
  return result;
}

void bufferedAudioEngine_sendSessionFailureEvent(uint64_t a1, const void *a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v4;

  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1176))
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v4 = Mutable;
      if (a2)
        CFDictionarySetValue(Mutable, CFSTR("pointOfFailure"), a2);
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt64();
      CFDictionarySetValue(v4, CFSTR("sessionType"), CFSTR("AudioBuffered"));
      APSRTCReportingAgentSendEvent();
      CFRelease(v4);
    }
  }
}

void bufferedAudioEngine_resumeInternalStageEnd(CFTypeRef *a1)
{
  void (*v2)(CFTypeRef, _QWORD, CFTypeRef);
  uint64_t v3;
  void *v4;
  NSObject *v5;
  CFTypeRef v6;
  uint8_t buf[16];

  CMBaseObjectGetDerivedStorage();
  v2 = (void (*)(CFTypeRef, _QWORD, CFTypeRef))a1[2];
  if (v2)
    v2(*a1, *((unsigned int *)a1 + 8), a1[3]);
  APSDispatchSectionLeave();
  v3 = LogCategoryCopyOSLogHandle();
  v4 = (void *)v3;
  if (v3)
    v5 = v3;
  else
    v5 = MEMORY[0x1E0C81028];
  if (os_signpost_enabled(v5))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C943B000, v5, OS_SIGNPOST_EVENT, 0x2B160590uLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_RESUME_END", (const char *)&unk_1C965D452, buf, 2u);
  }
  if (v4)
    os_release(v4);
  kdebug_trace();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  v6 = a1[1];
  if (v6)
    CFRelease(v6);
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

uint64_t __bufferedAudioEngine_createTargetVBROptions_block_invoke(uint64_t a1)
{
  int v2;
  uint64_t result;

  v2 = CFGetInt64Ranged();
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    return APSLogErrorAt();
  if (APSAudioFormatDescriptionGetChannelCount() != v2)
    return APSLogErrorAt();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = CFGetInt64Ranged();
  result = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if ((_DWORD)result)
    return APSLogErrorAt();
  return result;
}

uint64_t bufferedAudioEngine_createMessageBackingBBuf(CFAllocatorRef blockAllocator, size_t blockLength, CMBlockBufferRef *a3)
{
  uint64_t v4;
  CMBlockBufferRef blockBufferOut;

  blockBufferOut = 0;
  v4 = CMBlockBufferCreateWithMemoryBlock(blockAllocator, 0, blockLength, blockAllocator, 0, 0, blockLength, 1u, &blockBufferOut);
  if ((_DWORD)v4)
    APSLogErrorAt();
  else
    *a3 = blockBufferOut;
  return v4;
}

uint64_t bufferedAudioEngine_updateMaxAudioBurstIfNecessary(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(_QWORD *)(DerivedStorage + 928);
  if (result)
  {
    APSAudioFormatDescriptionGetSampleRate();
    APSAudioFormatDescriptionGetFramesPerPacket();
    result = FigGetCFPreferenceNumberWithDefault();
    if (*(_DWORD *)(DerivedStorage + 24) != (_DWORD)result)
    {
      *(_DWORD *)(DerivedStorage + 24) = result;
      if (gLogCategory_APAudioEngineBuffered <= 50)
      {
        if (gLogCategory_APAudioEngineBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        {
          if (a1)
            CMBaseObjectGetDerivedStorage();
          APSAudioFormatDescriptionGetSampleRate();
          APSAudioFormatDescriptionGetFramesPerPacket();
          return LogPrintF();
        }
      }
    }
  }
  return result;
}

CMTime *bufferedAudioEngine_generateNewFirstRemoteMediaTime@<X0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  uint64_t v4;
  int32_t SampleRateFromTransportAudioFormat;
  float v6;
  float v7;
  CMTime *result;

  v4 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E18];
  a2->epoch = *(_QWORD *)(v4 + 16);
  if (bufferedAudioEngine_generateNewFirstRemoteMediaTime_onceToken != -1)
    dispatch_once(&bufferedAudioEngine_generateNewFirstRemoteMediaTime_onceToken, &__block_literal_global_353);
  SampleRateFromTransportAudioFormat = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
  if (bufferedAudioEngine_generateNewFirstRemoteMediaTime_prefsDeltaFromRolloverSecs)
  {
    if (bufferedAudioEngine_generateNewFirstRemoteMediaTime_prefsUseRandomizedOffset)
    {
      RandomBytes();
      v6 = (double)bufferedAudioEngine_generateNewFirstRemoteMediaTime_prefsDeltaFromRolloverSecs * 0.5;
      v7 = (float)(0u % bufferedAudioEngine_generateNewFirstRemoteMediaTime_prefsDeltaFromRolloverSecs) + v6;
    }
    else
    {
      v7 = (float)bufferedAudioEngine_generateNewFirstRemoteMediaTime_prefsDeltaFromRolloverSecs;
    }
    result = CMTimeMake(a2, 0xFFFFFFFFLL - (uint64_t)(float)(v7 * (float)SampleRateFromTransportAudioFormat), SampleRateFromTransportAudioFormat);
    if (gLogCategory_APAudioEngineBuffered <= 50)
    {
      if (gLogCategory_APAudioEngineBuffered != -1 || (result = (CMTime *)_LogCategory_Initialize(), (_DWORD)result))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        return (CMTime *)LogPrintF();
      }
    }
  }
  else
  {
    RandomBytes();
    return CMTimeMake(a2, 0, SampleRateFromTransportAudioFormat);
  }
  return result;
}

uint64_t bufferedAudioEngine_updateNextTranscodeBurstTimeAndUnRest(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  CMTime *v5;
  CMTime v7;
  CMTime rhs;
  CMTime v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = (CMTime *)(DerivedStorage + 1036);
  CMTimeMake(&rhs, *(unsigned int *)(DerivedStorage + 152), 1000);
  v7 = *a2;
  CMTimeAdd(&v9, &v7, &rhs);
  *v5 = v9;
  bufferedAudioEngine_setTranscodeIsRestingAndUpdateConsumer(a1, 0);
  return kdebug_trace();
}

uint64_t bufferedAudioEngine_readSoundCheck(uint64_t a1)
{
  uint64_t result;

  CFPreferencesSynchronize(CFSTR("com.apple.mobileipod"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  result = FigGetCFPreferenceBooleanWithDefault();
  gSoundCheckEnabled = result;
  if (gLogCategory_APAudioEngineBuffered <= 50)
  {
    if (gLogCategory_APAudioEngineBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      return LogPrintF();
    }
  }
  return result;
}

uint64_t bufferedAudioEngine_soundCheckChanged(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2)
    CFRetain(a2);
  return APSPriorityDispatcherAsync();
}

uint64_t __bufferedAudioEngine_generateNewFirstRemoteMediaTime_block_invoke()
{
  uint64_t result;

  bufferedAudioEngine_generateNewFirstRemoteMediaTime_prefsDeltaFromRolloverSecs = FigGetCFPreferenceNumberWithDefault();
  result = FigGetCFPreferenceNumberWithDefault();
  bufferedAudioEngine_generateNewFirstRemoteMediaTime_prefsUseRandomizedOffset = result;
  return result;
}

void __bufferedAudioEngine_soundCheckChanged_block_invoke(uint64_t a1)
{
  int v2;
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, const __CFString *, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t DerivedStorage;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  CFTypeRef v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ProtocolVTable;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  const void *v19;
  CFTypeRef cf;

  bufferedAudioEngine_readSoundCheck(*(_QWORD *)(a1 + 32));
  if (APSSettingsIsFeatureEnabled())
  {
    v2 = gSoundCheckEnabled;
    CMBaseObject = APAudioHoseManagerBufferedGetCMBaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 1680));
    v4 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v4)
    {
      if (v2)
        v5 = *MEMORY[0x1E0C9AE50];
      else
        v5 = *MEMORY[0x1E0C9AE40];
      v4(CMBaseObject, CFSTR("LoudnessNormalization"), v5);
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 32);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    cf = 0;
    if (*(_BYTE *)(DerivedStorage + 520))
    {
      v8 = *(uint64_t **)(DerivedStorage + 584);
      if (v8)
      {
        v9 = *MEMORY[0x1E0CA47F8];
        do
        {
          v10 = v8[2];
          v11 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
          if (v11)
            v11(v10, v9, 0, &cf);
          v12 = cf;
          if (*((_BYTE *)v8 + 24))
            v13 = 1;
          else
            v13 = cf == 0;
          if (!v13)
          {
            if (gLogCategory_APAudioEngineBuffered <= 50
              && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
            {
              if (v6)
                CMBaseObjectGetDerivedStorage();
              LogPrintF();
            }
            v14 = v8[2];
            v15 = gSoundCheckEnabled;
            APSEndpointStreamAudioHoseProtocolGetProtocolID();
            ProtocolVTable = CMBaseObjectGetProtocolVTable();
            if (ProtocolVTable)
            {
              v17 = *(_QWORD *)(ProtocolVTable + 16);
              if (v17)
              {
                v18 = *(void (**)(uint64_t, uint64_t))(v17 + 112);
                if (v18)
                  v18(v14, v15);
              }
            }
            v12 = cf;
          }
          if (v12)
          {
            CFRelease(v12);
            cf = 0;
          }
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
    }
  }
  v19 = *(const void **)(a1 + 32);
  if (v19)
    CFRelease(v19);
}

void bufferedAudioEngine_weakAudioTimer()
{
  uint64_t v0;
  const void *v1;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    bufferedAudioEngine_audioTimer(v0);
    CFRelease(v1);
  }
}

void bufferedAudioEngine_weakPriorityTimer()
{
  uint64_t v0;
  const void *v1;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    bufferedAudioEngine_updateDataProcessingTargetQueueInternal(v0);
    CFRelease(v1);
  }
}

void bufferedAudioEngine_audioTimer(uint64_t a1)
{
  uint64_t DerivedStorage;
  CMTimeEpoch v3;
  uint64_t v4;
  uint64_t v5;
  int32_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  OpaqueCMClock *HostTimeClock;
  uint64_t v11;
  void (*v12)(uint64_t, CMTime *);
  _OWORD *v13;
  int32_t v14;
  _OWORD *v15;
  _BOOL4 v16;
  const __CFAllocator *v17;
  uint64_t CMBaseObject;
  void (*v19)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  CMTime *v20;
  CFMutableStringRef Mutable;
  CFMutableStringRef v22;
  const void *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  unint64_t v26;
  uint64_t v27;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v30;
  const void *UInt16;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, const __CFString *, const void *);
  int v34;
  uint64_t v35;
  uint64_t v36;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  int v39;
  uint64_t v40;
  _OWORD *v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  unsigned int Index;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, CMTime *);
  uint64_t v51;
  uint64_t v52;
  CMTime *v53;
  uint64_t v54;
  void (*v55)(uint64_t, CMTime *, CMTime *);
  int v56;
  uint64_t v57;
  uint64_t *i;
  _OWORD *v59;
  CMTimeEpoch v60;
  int v61;
  uint64_t v62;
  _OWORD *v63;
  CMTime *v64;
  const void *v65;
  uint64_t v66;
  _BOOL4 started;
  uint64_t v68;
  uint64_t v69;
  int v70;
  _QWORD *v71;
  unint64_t v72;
  int32_t SampleRateFromTransportAudioFormat;
  int v74;
  int32_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  CMTime *v79;
  CMTime *v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  void (*v85)(uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t UsedCount;
  int v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t);
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  __CFDictionary *v97;
  __CFDictionary *v98;
  const void *v99;
  const void *v100;
  int v101;
  const void *v102;
  int v103;
  uint64_t v104;
  uint64_t ProtocolVTable;
  uint64_t v106;
  uint64_t (*v107)(uint64_t);
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  unint64_t v116;
  int v117;
  _BOOL4 v118;
  int v119;
  _BOOL4 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BOOL4 v124;
  uint64_t v125;
  void *v126;
  NSObject *v127;
  uint64_t v128;
  Float64 Seconds;
  unsigned __int8 v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  const __CFDictionary *v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int (*v143)(uint64_t, uint64_t, _QWORD, CMTime *);
  _BOOL4 isHoseInStereoPair;
  int v145;
  _DWORD *v146;
  _BOOL4 v147;
  const void *v148;
  CMTimeEpoch v149;
  CMTimeValue v150;
  CMTimeScale v151;
  CMTimeFlags v152;
  int32_t v153;
  uint64_t v154;
  void *v155;
  char *key;
  void *keya;
  CFAllocatorRef allocator[2];
  const __CFAllocator *allocatora;
  _OWORD *allocatorb;
  int v161;
  uint64_t v162;
  CMTime v163;
  _BOOL4 isRateZero;
  uint64_t v165;
  CMTime v166;
  CMTime v167;
  CMTime v168;
  CMTime v169;
  CMTime v170;
  int v171;
  CMTime v172;
  unsigned int v173;
  CMTime v174;
  BOOL v175;
  CMTime v176;
  CMTime v177;
  CMTime v178;
  CMTime v179;
  CMTime v180;
  CMTime v181;
  int TotalByteCount;
  CMTime v183;
  int v184;
  CFTypeRef v185;
  CFTypeRef cf;
  CMTime v187;
  CMTime rhs;
  CMTime time2;
  CMTime time1;
  CMTime v191;
  CMTime v192;
  CMTime v193;
  CMTime lhs;
  CMTime time;
  uint64_t v196;

  v196 = *MEMORY[0x1E0C80C00];
  TotalByteCount = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)&v181.value = *MEMORY[0x1E0CA2E68];
  v3 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v181.epoch = v3;
  *(_OWORD *)&v180.value = *(_OWORD *)&v181.value;
  v180.epoch = v3;
  *(_OWORD *)&v179.value = *(_OWORD *)&v181.value;
  v179.epoch = v3;
  *(_OWORD *)&v178.value = *(_OWORD *)&v181.value;
  v178.epoch = v3;
  *(_OWORD *)&v177.value = *(_OWORD *)&v181.value;
  v177.epoch = v3;
  *(_OWORD *)allocator = *(_OWORD *)&v181.value;
  *(_OWORD *)&v176.value = *(_OWORD *)&v181.value;
  v176.epoch = v3;
  v4 = mach_absolute_time();
  v5 = MillisecondsToUpTicks();
  v175 = 0;
  memset(&v174, 0, sizeof(v174));
  v6 = *(_DWORD *)(DerivedStorage + 16);
  time = *(CMTime *)(DerivedStorage + 28);
  CMTimeMultiplyByRatio(&v174, &time, v6, 1000);
  v173 = 0;
  *(_OWORD *)&v163.value = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v172.value = *MEMORY[0x1E0CA2E18];
  v163.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v172.epoch = v163.epoch;
  v171 = 0;
  v162 = DerivedStorage;
  if (gLogCategory_APAudioEngineBuffered <= 10
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
    {
      v7 = a1;
      CMBaseObjectGetDerivedStorage();
    }
    else
    {
      v7 = 0;
    }
    bufferedAudioEngine_playbackStateGetCString(*(_DWORD *)(DerivedStorage + 804));
    LogPrintF();
    a1 = v7;
  }
  APSNetworkClockLogCurrentNetworkTime();
  if (*(_BYTE *)DerivedStorage || !*(_BYTE *)(DerivedStorage + 480))
    return;
  v154 = v5;
  key = (char *)v4;
  CMBaseObjectGetDerivedStorage();
  v8 = CMBaseObjectGetDerivedStorage();
  time = v163;
  v192 = v163;
  v191 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CF7500];
  cf = 0;
  v185 = 0;
  v184 = 0;
  v165 = a1;
  if (!*(_BYTE *)v8)
  {
    v9 = v8;
    CMClockGetTime(&time, *(CMClockRef *)(v8 + 448));
    HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&v192, HostTimeClock);
    v11 = *(_QWORD *)(v9 + 328);
    v12 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v12)
      v12(v11, &v191);
    v13 = (_OWORD *)(v9 + 1448);
    time1 = time;
    time2 = *(CMTime *)(v9 + 1448);
    v14 = CMTimeCompare(&time1, &time2);
    v15 = (_OWORD *)(v9 + 1472);
    if (v14)
    {
      *v15 = *(_OWORD *)&v163.value;
      *(_QWORD *)(v9 + 1488) = v163.epoch;
      memset(&time1, 0, sizeof(time1));
      time2 = v192;
      rhs = *(CMTime *)(v9 + 1496);
      CMTimeSubtract(&time1, &time2, &rhs);
      CMTimeMake(&time2, 1, 1);
      rhs = time1;
      if (CMTimeCompare(&rhs, &time2) > 0)
        goto LABEL_57;
      memset(&rhs, 0, sizeof(rhs));
      lhs = time;
      *(_OWORD *)&v193.value = *v13;
      v193.epoch = *(_QWORD *)(v9 + 1464);
      CMTimeSubtract(&v187, &lhs, &v193);
      CMTimeAbsoluteValue(&rhs, &v187);
      CMTimeMake(&lhs, 2, 1);
      v193 = rhs;
      if (CMTimeCompare(&v193, &lhs) < 0)
        goto LABEL_57;
      v16 = 0;
    }
    else if ((*(_BYTE *)(v9 + 1484) & 1) != 0)
    {
      memset(&time1, 0, sizeof(time1));
      time2 = v192;
      *(_OWORD *)&rhs.value = *v15;
      rhs.epoch = *(_QWORD *)(v9 + 1488);
      CMTimeSubtract(&time1, &time2, &rhs);
      CMTimeMake(&time2, 5, 1);
      rhs = time1;
      v16 = CMTimeCompare(&rhs, &time2) >= 0;
    }
    else
    {
      v16 = 0;
      *v15 = *(_OWORD *)&v192.value;
      *(_QWORD *)(v9 + 1488) = v192.epoch;
    }
    time1 = v192;
    rhs = *(CMTime *)(v9 + 1520);
    if (CMTimeCompare(&time1, &rhs) < 0)
      goto LABEL_57;
    CMTimeMake(&rhs, 10, 1);
    v193 = v192;
    CMTimeAdd(&time1, &v193, &rhs);
    *(CMTime *)(v9 + 1520) = time1;
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      *(_OWORD *)&time1.value = *v13;
      time1.epoch = *(_QWORD *)(v9 + 1464);
      CMTimeGetSeconds(&time1);
      time1 = time;
      CMTimeGetSeconds(&time1);
      LogPrintF();
    }
    v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    CMBaseObject = APSNetworkClockGetCMBaseObject();
    v19 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v19)
      v19(CMBaseObject, *MEMORY[0x1E0CF74C0], v17, &cf);
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
      if (!v16)
        goto LABEL_57;
    }
    else if (!v16)
    {
      goto LABEL_57;
    }
    v20 = (CMTime *)(v9 + 1544);
    time1 = v192;
    v193 = *(CMTime *)(v9 + 1544);
    if (CMTimeCompare(&time1, &v193) < 0)
    {
LABEL_57:
      v22 = 0;
      v23 = 0;
LABEL_58:
      *v13 = *(_OWORD *)&time.value;
      *(_QWORD *)(v9 + 1464) = time.epoch;
      *(CMTime *)(v9 + 1496) = v192;
      *(CMTime *)(v9 + 1424) = v191;
      goto LABEL_59;
    }
    Mutable = CFStringCreateMutable(v17, 0);
    if (!Mutable)
      goto LABEL_63;
    v22 = Mutable;
    v184 = CFStringAppendF();
    if (v184)
      goto LABEL_503;
    v184 = CFStringAppendF();
    if (v184)
      goto LABEL_503;
    time1 = time;
    CMTimeGetSeconds(&time1);
    *(_OWORD *)&time1.value = *v13;
    time1.epoch = *(_QWORD *)(v9 + 1464);
    CMTimeGetSeconds(&time1);
    v184 = CFStringAppendF();
    if (v184)
      goto LABEL_503;
    time1 = v192;
    CMTimeGetSeconds(&time1);
    time1 = *(CMTime *)(v9 + 1496);
    CMTimeGetSeconds(&time1);
    v184 = CFStringAppendF();
    if (v184 || (v184 = CFStringAppendF()) != 0 || (v184 = CFStringAppendF()) != 0 || (v184 = CFStringAppendF()) != 0)
    {
LABEL_503:
      APSLogErrorAt();
      v23 = 0;
LABEL_60:
      CFRelease(v22);
LABEL_61:
      if (v23)
        CFRelease(v23);
      goto LABEL_63;
    }
    if (!APSSettingsIsFeatureEnabled())
    {
      v71 = (_QWORD *)(v9 + 584);
      while (1)
      {
        v71 = (_QWORD *)*v71;
        if (!v71)
          break;
        v184 = CFStringAppendF();
        if (v184)
        {
          APSLogErrorAt();
          v23 = 0;
          goto LABEL_194;
        }
      }
    }
    v23 = (const void *)CFStringCreateF();
    if (v184)
    {
      APSLogErrorAt();
LABEL_194:
      a1 = v165;
    }
    else
    {
      a1 = v165;
      if (!*(_QWORD *)(v9 + 536))
        goto LABEL_53;
      v24 = FigEndpointStreamGetCMBaseObject();
      v25 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v25)
      {
        v184 = v25(v24, CFSTR("EndpointIDs"), v17, &v185);
        v20 = (CMTime *)(v9 + 1544);
        if (!v184)
        {
LABEL_53:
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (v165)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          APSTapToRadarInvoke();
          CMTimeMake(&v193, 300, 1);
          v183 = v192;
          CMTimeAdd(&time1, &v183, &v193);
          *v20 = time1;
          goto LABEL_58;
        }
      }
      else
      {
        v184 = -12782;
      }
      APSLogErrorAt();
    }
LABEL_59:
    if (!v22)
      goto LABEL_61;
    goto LABEL_60;
  }
LABEL_63:
  if (cf)
    CFRelease(cf);
  if (v185)
    CFRelease(v185);
  bufferedAudioEngine_updatePrerollingState(a1);
  v26 = 0x1ED52E000uLL;
  if (*(_DWORD *)(DerivedStorage + 804) != 1937011316)
    goto LABEL_143;
  LODWORD(cf) = 0;
  v27 = CMBaseObjectGetDerivedStorage();
  LOWORD(v184) = 0;
  time2 = v163;
  rhs = v163;
  v187 = v163;
  LODWORD(v185) = 0;
  if (bufferedAudioEngine_pruneMessageRingToCurrentRemoteMediaTimeWithForwardMargin_onceToken != -1)
    dispatch_once(&bufferedAudioEngine_pruneMessageRingToCurrentRemoteMediaTimeWithForwardMargin_onceToken, &__block_literal_global_389);
  if (*(_BYTE *)v27)
    goto LABEL_134;
  bufferedAudioEngine_getCurrentRemoteMediaTimeInternal((int *)&cf, &time);
  value = time.value;
  v193.value = *(_QWORD *)&time.flags;
  timescale = time.timescale;
  v193.timescale = HIDWORD(time.epoch);
  if ((_DWORD)cf)
    goto LABEL_478;
  if (APSSettingsIsFeatureEnabled())
  {
    CMTimeMake(&time2, bufferedAudioEngine_pruneMessageRingToCurrentRemoteMediaTimeWithForwardMargin_defaultForwardPruningMarginMs, 1000);
    time.value = value;
    *(_QWORD *)&time.flags = v193.value;
    time.timescale = timescale;
    HIDWORD(time.epoch) = v193.timescale;
    v192 = time2;
    CMTimeAdd(&rhs, &time, &v192);
  }
  else
  {
    CMTimeMake(&time, 1000, 1000);
    time2 = time;
    v192.value = value;
    *(_QWORD *)&v192.flags = v193.value;
    v192.timescale = timescale;
    HIDWORD(v192.epoch) = v193.timescale;
    v191 = time;
    CMTimeSubtract(&time, &v192, &v191);
    rhs = time;
    *(_OWORD *)&v192.value = *(_OWORD *)allocator;
    v192.epoch = v3;
    if (CMTimeCompare(&time, &v192) <= 0)
    {
      APSLogErrorAt();
      if (gLogCategory_APAudioEngineBuffered <= 90
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        time.value = value;
        *(_QWORD *)&time.flags = v193.value;
        time.timescale = timescale;
        HIDWORD(time.epoch) = v193.timescale;
        CMTimeGetSeconds(&time);
        time = time2;
        CMTimeGetSeconds(&time);
        LogPrintF();
      }
      TotalByteCount = -15481;
      goto LABEL_187;
    }
  }
  v30 = *(_QWORD *)(v27 + 560);
  time = rhs;
  LODWORD(cf) = APMessageRingBufferedPruneMessagesUntilTimestamp(v30, (uint64_t)&time, &v184);
  if ((_DWORD)cf)
  {
LABEL_478:
    APSLogErrorAt();
    goto LABEL_134;
  }
  APMessageRingBufferedGetMessageAtIndex(*(_QWORD *)(v27 + 560), (unsigned __int16)v184, &v185, (uint64_t)&v187, 0);
  if (!APSSettingsIsFeatureEnabled())
  {
    v150 = value;
    v151 = timescale;
    v35 = *(_QWORD *)(v27 + 584);
    if (v35)
    {
      v152 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
      v149 = v3;
      do
      {
        v36 = CMBaseObjectGetDerivedStorage();
        LODWORD(v183.value) = 0;
        time = v163;
        *(_OWORD *)&v192.value = *(_OWORD *)allocator;
        v192.epoch = v3;
        if (*(_QWORD *)(v36 + 1176))
        {
          if (*(_BYTE *)(v35 + 25))
          {
            bufferedAudioEngine_getLastDeliveredRemoteMediaTimeForHose(v35, (__n128 *)&v191);
            lhs.value = v191.value;
            flags = v191.flags;
            lhs.timescale = v191.timescale;
            epoch = v191.epoch;
          }
          else
          {
            lhs.value = *(_QWORD *)(v35 + 32);
            flags = *(_DWORD *)(v35 + 44);
            lhs.timescale = *(_DWORD *)(v35 + 40);
            epoch = *(_QWORD *)(v35 + 48);
          }
          bufferedAudioEngine_getCurrentRemoteMediaTimeInternal((int *)&v183, &time);
          if (LODWORD(v183.value))
          {
            APSLogErrorAt();
          }
          else
          {
            if (!*(_BYTE *)(v35 + 25))
            {
              v191.value = lhs.value;
              v191.timescale = lhs.timescale;
              v191.flags = flags;
              v191.epoch = epoch;
              time1 = time;
              if (CMTimeCompare(&v191, &time1) < 0)
              {
                lhs.value = *MEMORY[0x1E0CA2E18];
                lhs.timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
                flags = v152;
                epoch = v163.epoch;
              }
            }
            v39 = *(_DWORD *)(v26 + 3936);
            if (v39 <= 10 && (v39 != -1 || _LogCategory_Initialize()))
            {
              if (a1)
              {
                v40 = a1;
                CMBaseObjectGetDerivedStorage();
              }
              else
              {
                v40 = 0;
              }
              v191.value = lhs.value;
              v191.timescale = lhs.timescale;
              v191.flags = flags;
              v191.epoch = epoch;
              CMTimeGetSeconds(&v191);
              v191 = *(CMTime *)(v35 + 368);
              CMTimeGetSeconds(&v191);
              v191 = time;
              CMTimeGetSeconds(&v191);
              LogPrintF();
              a1 = v40;
            }
            v41 = (_OWORD *)(v35 + 368);
            v42 = *(_DWORD *)(v35 + 380);
            if ((flags & 1) != 0)
            {
              if ((v42 & 1) != 0)
              {
                v191 = time;
                *(_OWORD *)&time1.value = *v41;
                time1.epoch = *(_QWORD *)(v35 + 384);
                CMTimeSubtract(&v192, &v191, &time1);
                v45 = *(_DWORD *)(v26 + 3936);
                if (v45 <= 50 && (v45 != -1 || _LogCategory_Initialize()))
                {
                  if (a1)
                  {
                    v46 = a1;
                    CMBaseObjectGetDerivedStorage();
                  }
                  else
                  {
                    v46 = 0;
                  }
                  v191.value = lhs.value;
                  v191.timescale = lhs.timescale;
                  v191.flags = flags;
                  v191.epoch = epoch;
                  CMTimeGetSeconds(&v191);
                  v191 = v192;
                  CMTimeGetSeconds(&v191);
                  LogPrintF();
                  a1 = v46;
                  v26 = 0x1ED52E000uLL;
                }
                v191 = v192;
                bufferedAudioEngine_updateRTCUnderrunStatisticsForHose(a1, v35, &v191);
                *v41 = *(_OWORD *)&v163.value;
                *(_QWORD *)(v35 + 384) = v163.epoch;
              }
            }
            else if ((v42 & 1) == 0 && *(_DWORD *)(v35 + 140) == 3)
            {
              *v41 = *(_OWORD *)&time.value;
              *(_QWORD *)(v35 + 384) = time.epoch;
              ++*(_DWORD *)(v35 + 392);
              v43 = *(_DWORD *)(v26 + 3936);
              if (v43 <= 50 && (v43 != -1 || _LogCategory_Initialize()))
              {
                if (a1)
                {
                  v44 = a1;
                  CMBaseObjectGetDerivedStorage();
                }
                else
                {
                  v44 = 0;
                }
                *(_OWORD *)&v191.value = *v41;
                v191.epoch = *(_QWORD *)(v35 + 384);
                CMTimeGetSeconds(&v191);
                LogPrintF();
                a1 = v44;
              }
            }
          }
        }
        DerivedStorage = v162;
        if (((*(unsigned __int16 *)(v35 + 26) - (unsigned __int16)v184) & 0x8000) != 0)
        {
          v47 = *(_DWORD *)(v26 + 3936);
          if (v47 <= 50 && (v47 != -1 || _LogCategory_Initialize()))
          {
            if (a1)
              CMBaseObjectGetDerivedStorage();
            time.value = v150;
            time.timescale = v151;
            *(_QWORD *)&time.flags = v193.value;
            HIDWORD(time.epoch) = v193.timescale;
            CMTimeGetSeconds(&time);
            time = v187;
            CMTimeGetSeconds(&time);
            LogPrintF();
            DerivedStorage = v162;
            v26 = 0x1ED52E000;
            v3 = v149;
          }
          *(_WORD *)(v35 + 26) = v184;
          if (APSSettingsIsFeatureEnabled())
            *(_WORD *)(v35 + 56) = 256;
        }
        v35 = *(_QWORD *)v35;
      }
      while (v35);
    }
    goto LABEL_134;
  }
  UInt16 = (const void *)FigCFNumberCreateUInt16();
  v32 = APAudioHoseManagerBufferedGetCMBaseObject(*(_QWORD *)(v27 + 1680));
  v33 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
  if (v33)
    v34 = v33(v32, CFSTR("NextValidReadIdx"), UInt16);
  else
    v34 = -12782;
  LODWORD(cf) = v34;
  if (UInt16)
  {
    CFRelease(UInt16);
LABEL_134:
    v34 = (int)cf;
  }
  TotalByteCount = v34;
  if (v34)
    goto LABEL_187;
  if (APSSettingsIsFeatureEnabled())
  {
    Index = APMessageRingBufferedGetFirstValidReadIndex(*(_QWORD *)(DerivedStorage + 560), 0);
    APMessageRingBufferedGetMessageAtIndex(*(_QWORD *)(DerivedStorage + 560), Index, 0, (uint64_t)&v172, 0);
    if ((v172.flags & 1) != 0)
    {
      v49 = *(_QWORD *)(DerivedStorage + 1680);
      v192 = v172;
      v50 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
      if (!v50)
      {
        TotalByteCount = -12782;
LABEL_187:
        APSLogErrorAt();
        return;
      }
      time = v192;
      TotalByteCount = v50(v49, &time);
      if (TotalByteCount)
        goto LABEL_187;
    }
  }
  else
  {
    TotalByteCount = bufferedAudioEngine_releaseCryptors(a1, 1);
    if (TotalByteCount)
      goto LABEL_187;
    TotalByteCount = bufferedAudioEngine_releaseMagicCookies(a1, 1);
    if (TotalByteCount)
      goto LABEL_187;
  }
LABEL_143:
  bufferedAudioEngine_getCurrentRemoteMediaTimeInternal(&TotalByteCount, &v179);
  if (TotalByteCount)
    goto LABEL_187;
  v51 = CMBaseObjectGetDerivedStorage();
  time = *(CMTime *)(v51 + 624);
  *(_OWORD *)&v192.value = *(_OWORD *)allocator;
  v192.epoch = v3;
  *(_OWORD *)&time1.value = *(_OWORD *)allocator;
  time1.epoch = v3;
  *(_OWORD *)&time2.value = *(_OWORD *)allocator;
  time2.epoch = v3;
  *(_OWORD *)&rhs.value = *(_OWORD *)allocator;
  rhs.epoch = v3;
  if (!*(_BYTE *)v51)
  {
    v52 = v51;
    v53 = (CMTime *)(v51 + 724);
    if ((*(_DWORD *)(v51 + 736) & 1) == 0)
      v53 = (CMTime *)(v51 + 700);
    v191 = *v53;
    bufferedAudioEngine_getCurrentRemoteMediaTimeInternal(0, &v192);
    if (APSSettingsIsFeatureEnabled())
    {
      v54 = *(_QWORD *)(v52 + 1680);
      v55 = *(void (**)(uint64_t, CMTime *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
      if (v55)
        v55(v54, &rhs, &time2);
      goto LABEL_162;
    }
    v56 = *(_DWORD *)(v52 + 592);
    if (v56 == 1)
    {
      v57 = *(_QWORD *)(v52 + 584);
      if (!v57)
        goto LABEL_162;
      if (*(_BYTE *)(v57 + 24))
      {
        CMTimeMake(&rhs, 18, 1);
        time2 = *(CMTime *)(*(_QWORD *)(v52 + 584) + 88);
        goto LABEL_162;
      }
    }
    else
    {
      if (!v56)
      {
        CMTimeMake(&rhs, 18, 1);
        *(_OWORD *)&time2.value = *(_OWORD *)allocator;
        time2.epoch = v3;
LABEL_162:
        v59 = (_OWORD *)(v52 + 624);
        *(CMTime *)(v52 + 600) = rhs;
        v187 = time2;
        lhs = *(CMTime *)(v52 + 88);
        CMTimeAdd(&time1, &v187, &lhs);
        v187 = time1;
        lhs = *(CMTime *)(v52 + 64);
        if (CMTimeCompare(&v187, &lhs) < 0 || (v187 = v192, lhs = v191, CMTimeCompare(&v187, &lhs) <= 0))
        {
          *v59 = *(_OWORD *)(v52 + 64);
          v60 = *(_QWORD *)(v52 + 80);
        }
        else
        {
          *v59 = *(_OWORD *)&time1.value;
          v60 = time1.epoch;
        }
        *(_QWORD *)(v52 + 640) = v60;
        v187 = time;
        *(_OWORD *)&lhs.value = *v59;
        lhs.epoch = *(_QWORD *)(v52 + 640);
        if (CMTimeCompare(&v187, &lhs))
        {
          v61 = *(_DWORD *)(v26 + 3936);
          if (v61 <= 30 && (v61 != -1 || _LogCategory_Initialize()))
          {
            if (v165)
              CMBaseObjectGetDerivedStorage();
            v187 = *(CMTime *)(v52 + 600);
            CMTimeGetSeconds(&v187);
            *(_OWORD *)&v187.value = *v59;
            v187.epoch = *(_QWORD *)(v52 + 640);
            CMTimeGetSeconds(&v187);
            LogPrintF();
          }
        }
        goto LABEL_174;
      }
      if (!*(_QWORD *)(v52 + 584))
        goto LABEL_162;
    }
    CMTimeMake(&rhs, 125, 1);
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
    for (i = *(uint64_t **)(v52 + 584); i; i = (uint64_t *)*i)
    {
      if (!*((_BYTE *)i + 24))
      {
        v187 = *(CMTime *)(i + 11);
        lhs = time2;
        if (CMTimeCompare(&v187, &lhs) < 0)
          time2 = *(CMTime *)(i + 11);
      }
    }
    goto LABEL_162;
  }
LABEL_174:
  v62 = v162;
  time = v179;
  v192 = *(CMTime *)(v162 + 624);
  CMTimeAdd(&v178, &time, &v192);
  v63 = (_OWORD *)(v162 + 676);
  v180 = *(CMTime *)(v162 + 676);
  time = v179;
  v192 = *(CMTime *)(v162 + 600);
  CMTimeAdd(&v177, &time, &v192);
  v64 = (CMTime *)(v162 + 724);
  if ((*(_DWORD *)(v162 + 736) & 1) == 0)
    v64 = (CMTime *)(v162 + 700);
  v176 = *v64;
  time = v179;
  v192 = v176;
  v153 = CMTimeCompare(&time, &v192);
  TotalByteCount = APMessageRingBufferedGetTotalByteCount(*(_QWORD *)(v162 + 560), (int *)&v173);
  if (TotalByteCount)
    goto LABEL_187;
  v65 = (const void *)v165;
  v66 = CMBaseObjectGetDerivedStorage();
  started = bufferedAudioEngine_engineBufferedToStartWaterMark();
  v68 = mach_absolute_time();
  v69 = v68;
  if (!started
    || *(_BYTE *)(v66 + 1032) && v68 > *(_QWORD *)(v66 + 1064) && !bufferedAudioEngine_shouldSkipTranscodeForStartup())
  {
    if (*(_BYTE *)(v66 + 1032))
    {
      v70 = *(_DWORD *)(v26 + 3936);
      if (v70 <= 50 && (v70 != -1 || _LogCategory_Initialize()))
      {
        if (v165)
          CMBaseObjectGetDerivedStorage();
        time = *(CMTime *)(v66 + 676);
        CMTimeGetSeconds(&time);
        time = *(CMTime *)(v66 + 1036);
        CMTimeGetSeconds(&time);
        time = v179;
        CMTimeGetSeconds(&time);
        UpTicksPerSecond();
        UpTicksPerSecond();
        LogPrintF();
        v62 = v162;
      }
    }
    *(_QWORD *)(v66 + 1072) = v69;
    bufferedAudioEngine_setTranscodeIsRestingAndUpdateConsumer(v165, 0);
    kdebug_trace();
  }
  if (*(_BYTE *)(v62 + 1032)
    || (*(_OWORD *)&time.value = *v63, time.epoch = *(_QWORD *)(v162 + 692),
                                       v192 = v177,
                                       CMTimeCompare(&time, &v192) > 0))
  {
    v161 = 0;
  }
  else
  {
    v161 = 0;
    v76 = 0;
    do
    {
      if (mach_absolute_time() >= (unint64_t)&key[v154])
        break;
      if (v76 >= *(_DWORD *)(v62 + 24))
        break;
      *(_OWORD *)&time.value = *v63;
      time.epoch = *(_QWORD *)(v162 + 692);
      v192 = v178;
      if ((CMTimeCompare(&time, &v192) & 0x80000000) == 0)
      {
        time = v181;
        v192 = v174;
        if ((CMTimeCompare(&time, &v192) & 0x80000000) == 0 || v153 < 1)
          break;
      }
      if (v173 >= *(_DWORD *)(v62 + 648))
        break;
      TotalByteCount = bufferedAudioEngine_prepareOneMessageForSending(v65, 0, &v175);
      if (!v175)
        break;
      *(_OWORD *)&time.value = *v63;
      time.epoch = *(_QWORD *)(v162 + 692);
      v192 = v180;
      CMTimeSubtract(&v181, &time, &v192);
      TotalByteCount = APMessageRingBufferedGetTotalByteCount(*(_QWORD *)(v62 + 560), (int *)&v173);
      if (TotalByteCount)
        goto LABEL_187;
      v77 = CMBaseObjectGetDerivedStorage();
      *(_OWORD *)&time.value = *(_OWORD *)allocator;
      time.epoch = v3;
      LODWORD(time2.value) = 0;
      if (*(_DWORD *)(v77 + 148)
        && (v78 = v77,
            v79 = (CMTime *)(v77 + 676),
            v80 = (CMTime *)(v77 + 1036),
            v192 = *(CMTime *)(v77 + 676),
            v191 = *(CMTime *)(v77 + 1036),
            CMTimeCompare(&v192, &v191) >= 1)
        && bufferedAudioEngine_engineBufferedToStartWaterMark())
      {
        v81 = mach_absolute_time();
        bufferedAudioEngine_getCurrentRemoteMediaTimeInternal((int *)&time2, &time);
        if (LODWORD(time2.value))
        {
          APSLogErrorAt();
          v26 = 0x1ED52E000uLL;
          v62 = v162;
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (v65)
              CMBaseObjectGetDerivedStorage();
            v65 = (const void *)v165;
            LogPrintF();
            v62 = v162;
          }
        }
        else
        {
          v82 = v81 - *(_QWORD *)(v78 + 1072);
          if (v82 > MillisecondsToUpTicks())
            v82 = MillisecondsToUpTicks();
          *(_QWORD *)(v78 + 1064) = v81 - v82 + MillisecondsToUpTicks();
          CMTimeMake(&v191, *(unsigned int *)(v78 + 152), 1000);
          time1 = *v79;
          CMTimeAdd(&v192, &time1, &v191);
          *v80 = v192;
          if (!*(_BYTE *)(v78 + 1032)
            && gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (v65)
              CMBaseObjectGetDerivedStorage();
            UpTicksPerSecond();
            UpTicksPerSecond();
            v192 = *v79;
            CMTimeGetSeconds(&v192);
            v192 = *v80;
            CMTimeGetSeconds(&v192);
            v192 = time;
            CMTimeGetSeconds(&v192);
            LogPrintF();
          }
          bufferedAudioEngine_setTranscodeIsRestingAndUpdateConsumer((uint64_t)v65, 1);
          kdebug_trace();
          v62 = v162;
          v26 = 0x1ED52E000;
        }
      }
      else
      {
        v62 = v162;
        if (bufferedAudioEngine_shouldSkipTranscodeForStartup())
        {
          v83 = *(_DWORD *)(v26 + 3936);
          if (v83 <= 50 && (v83 != -1 || _LogCategory_Initialize()))
          {
            if (v65)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          bufferedAudioEngine_setTranscodeIsRestingAndUpdateConsumer((uint64_t)v65, 1);
        }
      }
      if (*(_BYTE *)(v62 + 1032))
      {
        v161 = 1;
        break;
      }
      ++v76;
      *(_OWORD *)&time.value = *v63;
      time.epoch = *(_QWORD *)(v162 + 692);
      v192 = v177;
      v161 = 1;
    }
    while (CMTimeCompare(&time, &v192) < 1);
  }
  mach_absolute_time();
  v72 = UpTicksToSeconds() / (unint64_t)*(unsigned int *)(v62 + 112);
  if (*(_DWORD *)(v62 + 788) != (_DWORD)v72)
  {
    *(_DWORD *)(v62 + 788) = v72;
    SampleRateFromTransportAudioFormat = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
    v74 = *(_DWORD *)(v26 + 3936);
    if (v74 <= 50)
    {
      v75 = SampleRateFromTransportAudioFormat;
      if (v74 != -1 || _LogCategory_Initialize())
      {
        if (v65)
          CMBaseObjectGetDerivedStorage();
        *(_OWORD *)&time.value = *v63;
        time.epoch = *(_QWORD *)(v162 + 692);
        CMTimeConvertScale(&v170, &time, v75, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        time = v177;
        CMTimeConvertScale(&v169, &time, v75, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        mach_absolute_time();
        time = v178;
        CMTimeConvertScale(&v168, &time, v75, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        time = v181;
        CMTimeConvertScale(&v167, &time, v75, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        time = v174;
        CMTimeConvertScale(&v166, &time, v75, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        v62 = v162;
        LogPrintF();
        v26 = 0x1ED52E000uLL;
      }
    }
    if (APSSettingsIsFeatureEnabled())
    {
      v84 = *(_QWORD *)(v62 + 1680);
      v85 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v85)
        v85(v84);
    }
    else
    {
      bufferedAudioEngine_wakeUpHoses();
    }
    v86 = CMBaseObjectGetDerivedStorage();
    LODWORD(time1.value) = 0;
    if (!*(_BYTE *)v86)
    {
      v87 = v86;
      UsedCount = APMessageRingBufferedGetUsedCount(*(_QWORD *)(v86 + 560));
      if (*(_QWORD *)(v87 + 56))
      {
        if (!UsedCount)
        {
LABEL_259:
          v89 = *(_DWORD *)(v26 + 3936);
          if (v89 <= 50 && (v89 != -1 || _LogCategory_Initialize()))
          {
            if (v65)
              CMBaseObjectGetDerivedStorage();
            bufferedAudioEngine_getCurrentRemoteMediaTimeInternal(0, &v192);
            v191 = *(CMTime *)(v87 + 676);
            CMTimeSubtract(&time, &v191, &v192);
            CMTimeGetSeconds(&time);
            LogPrintF();
            v62 = v162;
          }
          goto LABEL_268;
        }
      }
      else if (!UsedCount)
      {
        goto LABEL_259;
      }
      APMessageRingBufferedGetTotalByteCount(*(_QWORD *)(v87 + 560), (int *)&time1);
      goto LABEL_259;
    }
  }
LABEL_268:
  if (!APSSettingsIsFeatureEnabled())
    bufferedAudioEngine_updateCriticalBufferingState((uint64_t)v65);
  APMessageRingBufferedGetFirstValidReadIndex(*(_QWORD *)(v62 + 560), &v171);
  if (APSSettingsIsFeatureEnabled())
  {
    v90 = *(_QWORD *)(v62 + 1680);
    v91 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v91)
      v92 = v91(v90);
    else
      v92 = -12782;
    TotalByteCount = v92;
    v130 = 1;
    goto LABEL_483;
  }
  v93 = *(_QWORD *)(v62 + 584);
  if (v93)
  {
    allocatora = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    keya = (void *)*MEMORY[0x1E0CF7598];
    v155 = (void *)*MEMORY[0x1E0CF75A0];
    do
    {
      LODWORD(rhs.value) = 0;
      v94 = CMBaseObjectGetDerivedStorage();
      time = v163;
      v192 = v163;
      if (!*(_QWORD *)(v94 + 1176) || *(double *)(v93 + 64) == 0.0)
        goto LABEL_300;
      v95 = v94;
      if (!*(_QWORD *)(v93 + 304))
      {
        v96 = *(_DWORD *)(v26 + 3936);
        if (v96 <= 30 && (v96 != -1 || _LogCategory_Initialize()))
        {
          if (v65)
            CMBaseObjectGetDerivedStorage();
          LogPrintF();
        }
        if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1176))
        {
          v110 = -15481;
LABEL_333:
          LODWORD(rhs.value) = v110;
          goto LABEL_334;
        }
        v97 = CFDictionaryCreateMutable(allocatora, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!v97)
        {
          APSLogErrorAt();
LABEL_332:
          v110 = -15480;
          v26 = 0x1ED52E000;
          goto LABEL_333;
        }
        v98 = v97;
        CFDictionarySetValue(v97, keya, CFSTR("Histogram_ReceiverBufferLevel"));
        CFDictionarySetValue(v98, v155, CFSTR("ms"));
        FigCFDictionarySetDouble();
        FigCFDictionarySetDouble();
        FigCFDictionarySetInt32();
        v99 = (const void *)APSStatsHistogramCreate();
        if (!v99)
        {
          APSLogErrorAt();
          CFRelease(v98);
          goto LABEL_332;
        }
        v100 = v99;
        *(_QWORD *)(v93 + 304) = CFRetain(v99);
        CFRelease(v98);
        CFRelease(v100);
        LODWORD(rhs.value) = 0;
        v26 = 0x1ED52E000uLL;
      }
      mach_absolute_time();
      if ((unint64_t)UpTicksToMilliseconds() < 0x3E8)
        goto LABEL_300;
      *(_QWORD *)(v93 + 296) = mach_absolute_time();
      bufferedAudioEngine_getBufferLevelTimeEstimateForHose(v93, 0, &time);
      bufferedAudioEngine_getCurrentRemoteMediaTimeInternal((int *)&rhs, &v192);
      if (!LODWORD(rhs.value))
      {
        time1 = *(CMTime *)(v95 + 676);
        time2 = v192;
        CMTimeSubtract(&v191, &time1, &time2);
        CMTimeGetSeconds(&v191);
        time1 = time;
        CMTimeGetSeconds(&time1);
        v101 = *(_DWORD *)(v26 + 3936);
        if (v101 <= 30 && (v101 != -1 || _LogCategory_Initialize()))
        {
          if (v65)
          {
            v102 = v65;
            CMBaseObjectGetDerivedStorage();
          }
          else
          {
            v102 = 0;
          }
          time1 = time;
          CMTimeGetSeconds(&time1);
          time1 = v192;
          CMTimeGetSeconds(&time1);
          LogPrintF();
          v65 = v102;
        }
        APSStatsHistogramAddValue();
        goto LABEL_300;
      }
LABEL_334:
      APSLogErrorAt();
LABEL_300:
      TotalByteCount = 0;
      v103 = *(_DWORD *)(v26 + 3936);
      if (v103 <= 10 && (v103 != -1 || _LogCategory_Initialize()))
      {
        if (v65)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      if (*(_BYTE *)(v93 + 56))
      {
        if (v161)
          *(_BYTE *)(v93 + 57) = 1;
      }
      else if (!*(_DWORD *)(v93 + 172) && (v161 || *(_BYTE *)(v93 + 57)))
      {
        *(_BYTE *)(v93 + 57) = 0;
        v104 = *(_QWORD *)(v93 + 16);
        APSEndpointStreamAudioHoseProtocolGetProtocolID();
        ProtocolVTable = CMBaseObjectGetProtocolVTable();
        if (ProtocolVTable && (v106 = *(_QWORD *)(ProtocolVTable + 16)) != 0)
        {
          v107 = *(uint64_t (**)(uint64_t))(v106 + 40);
          v108 = v107 ? v107(v104) : -12782;
        }
        else
        {
          v108 = -12788;
        }
        TotalByteCount = v108;
        v109 = *(_DWORD *)(v26 + 3936);
        if (v109 <= 20 && (v109 != -1 || _LogCategory_Initialize()))
        {
          if (v65)
            CMBaseObjectGetDerivedStorage();
          LogPrintF();
        }
      }
      v93 = *(_QWORD *)v93;
    }
    while (v93);
  }
  v111 = CMBaseObjectGetDerivedStorage();
  v112 = mach_absolute_time();
  isRateZero = bufferedAudioEngine_isRateZero();
  v113 = *(_QWORD *)(v111 + 584);
  if (v113)
  {
    v114 = 0;
    v115 = 0;
    allocatorb = (_OWORD *)(v111 + 1000);
    v116 = -1;
    while (1)
    {
      v117 = *(_DWORD *)(v26 + 3936);
      if (v117 <= 10 && (v117 != -1 || _LogCategory_Initialize()))
      {
        if (v65)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      if (*(_DWORD *)(v113 + 140))
        goto LABEL_381;
      if ((*(_BYTE *)(v111 + 1012) & 1) != 0)
      {
        bufferedAudioEngine_getBufferLevelTimeEstimateForHose(v113, 1, &v191);
        *(_OWORD *)&time.value = *allocatorb;
        time.epoch = *(_QWORD *)(v111 + 1016);
        v118 = CMTimeCompare(&v191, &time) >= 0;
      }
      else
      {
        v118 = 0;
      }
      v119 = *(_QWORD *)(v111 + 1144) ? *(unsigned __int8 *)(v113 + 204) : 1;
      if (isRateZero)
      {
        v120 = 0;
      }
      else
      {
        v121 = 240;
        if (!*(_BYTE *)(v111 + 800))
          v121 = 232;
        v120 = v112 - *(_QWORD *)(v113 + 72) >= *(_QWORD *)(v111 + v121);
      }
      v122 = CMBaseObjectGetDerivedStorage();
      if (*(_DWORD *)(v113 + 136) < *(_DWORD *)(v113 + 156))
      {
        v123 = v122;
        bufferedAudioEngine_getBufferLevelTimeEstimateForHose(v113, 1, &time);
        v192 = *(CMTime *)(v123 + 156);
        if (CMTimeCompare(&time, &v192) <= 0)
          break;
      }
      if (!v119)
      {
        v124 = 0;
        goto LABEL_361;
      }
LABEL_364:
      *(_DWORD *)(v113 + 140) = 1;
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v165)
          CMBaseObjectGetDerivedStorage();
        bufferedAudioEngine_getBufferLevelTimeEstimateForHose(v113, 1, &time1);
        CMTimeGetSeconds(&time1);
        time = *(CMTime *)(v111 + 156);
        CMTimeGetSeconds(&time);
        UpTicksToMilliseconds();
        if (!isRateZero)
          UpTicksToMilliseconds();
        time = *(CMTime *)(v113 + 88);
        CMTimeGetSeconds(&time);
        *(_OWORD *)&time.value = *allocatorb;
        time.epoch = *(_QWORD *)(v111 + 1016);
        CMTimeGetSeconds(&time);
        LogPrintF();
      }
      v125 = LogCategoryCopyOSLogHandle();
      v126 = (void *)v125;
      if (v125)
        v127 = v125;
      else
        v127 = MEMORY[0x1E0C81028];
      if (os_signpost_enabled(v127))
      {
        v128 = *(_QWORD *)(v113 + 16);
        time = *(CMTime *)(v113 + 88);
        Seconds = CMTimeGetSeconds(&time);
        LODWORD(time.value) = 67109376;
        HIDWORD(time.value) = v128;
        LOWORD(time.timescale) = 2048;
        *(Float64 *)((char *)&time.timescale + 2) = Seconds;
        _os_signpost_emit_with_name_impl(&dword_1C943B000, v127, OS_SIGNPOST_EVENT, 0x2B160580uLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_HOSE_PRIMED", "PRIMED hose 0x%x, bufferLevelTime %1.3f", (uint8_t *)&time, 0x12u);
      }
      if (v126)
        os_release(v126);
      time = *(CMTime *)(v113 + 88);
      CMTimeGetSeconds(&time);
      kdebug_trace();
LABEL_381:
      if (*(_DWORD *)(v113 + 140))
        ++v115;
      if (v112 - *(_QWORD *)(v113 + 72) < v116)
        v116 = v112 - *(_QWORD *)(v113 + 72);
      v113 = *(_QWORD *)v113;
      ++v114;
      v65 = (const void *)v165;
      v26 = 0x1ED52E000;
      if (!v113)
        goto LABEL_390;
    }
    v124 = v119 != 0;
LABEL_361:
    if (!v118)
      v124 = 0;
    if (!v124 && !v120)
      goto LABEL_381;
    goto LABEL_364;
  }
  v115 = 0;
  v114 = 0;
LABEL_390:
  v131 = *(_DWORD *)(v26 + 3936);
  if (v131 < 11 && (v131 != -1 || _LogCategory_Initialize()))
  {
    if (v65)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  v132 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(v132 + 800))
    goto LABEL_422;
  v133 = v132;
  if (v115 == v114)
  {
    v134 = *(_DWORD *)(v26 + 3936);
    if (v134 > 50 || v134 == -1 && !_LogCategory_Initialize())
      goto LABEL_421;
    if (!v65)
      goto LABEL_420;
LABEL_402:
    CMBaseObjectGetDerivedStorage();
LABEL_420:
    LogPrintF();
    goto LABEL_421;
  }
  if (100 * v115 < *(_DWORD *)(v132 + 256) * v114)
    goto LABEL_422;
  v135 = *(_DWORD *)(v26 + 3936);
  if (v135 <= 50 && (v135 != -1 || _LogCategory_Initialize()))
  {
    if (!v65)
      goto LABEL_420;
    goto LABEL_402;
  }
LABEL_421:
  *(_BYTE *)(v133 + 800) = 1;
LABEL_422:
  v136 = CMBaseObjectGetDerivedStorage();
  time.value = 0;
  v137 = mach_absolute_time();
  if (!*(_BYTE *)(v136 + 800) || (v138 = *(_QWORD **)(v136 + 584)) == 0)
  {
LABEL_480:
    v130 = 0;
    v62 = v162;
    goto LABEL_481;
  }
  v139 = v137;
  v130 = 0;
  v140 = 0;
  v141 = *MEMORY[0x1E0CF7358];
  while (1)
  {
    v142 = v138[2];
    v143 = *(unsigned int (**)(uint64_t, uint64_t, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (!v143 || v143(v142, v141, 0, &time))
      break;
    isHoseInStereoPair = bufferedAudioEngine_isHoseInStereoPair(v138[2]);
    v145 = *((_DWORD *)v138 + 35);
    if (!isHoseInStereoPair)
    {
      if (v145 != 1)
        goto LABEL_465;
      *((_DWORD *)v138 + 35) = 2;
      v130 = 1;
      *(_BYTE *)(v136 + 801) = 1;
      if (gLogCategory_APAudioEngineBuffered > 50
        || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_465;
      }
      if (!v65)
        goto LABEL_464;
      goto LABEL_458;
    }
    if (v145)
    {
      if (!v140)
      {
        v140 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], 0);
        if (!v140)
        {
          APSLogErrorAt();
          goto LABEL_480;
        }
      }
      if (CFDictionaryContainsKey(v140, (const void *)time.value))
      {
        v146 = CFDictionaryGetValue(v140, (const void *)time.value);
        if (v146[35] == 1)
        {
          v146[35] = 2;
          v130 = 1;
          *(_BYTE *)(v136 + 801) = 1;
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (v65)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
        }
        if (*((_DWORD *)v138 + 35) != 1)
          goto LABEL_465;
        *((_DWORD *)v138 + 35) = 2;
        v130 = 1;
        *(_BYTE *)(v136 + 801) = 1;
        if (gLogCategory_APAudioEngineBuffered > 50
          || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_465;
        }
        if (v65)
          goto LABEL_458;
LABEL_464:
        LogPrintF();
        goto LABEL_465;
      }
      CFDictionaryAddValue(v140, (const void *)time.value, v138);
      if (*((_DWORD *)v138 + 35) != 1)
        goto LABEL_465;
      if (v139 - v138[9] < *(_QWORD *)(v136 + 248))
        goto LABEL_465;
      *((_DWORD *)v138 + 35) = 2;
      v130 = 1;
      *(_BYTE *)(v136 + 801) = 1;
      if (gLogCategory_APAudioEngineBuffered > 50
        || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_465;
      }
      if (!v65)
        goto LABEL_464;
LABEL_458:
      CMBaseObjectGetDerivedStorage();
      goto LABEL_464;
    }
LABEL_465:
    if (time.value)
    {
      CFRelease((CFTypeRef)time.value);
      time.value = 0;
    }
    if (*((_DWORD *)v138 + 35) == 2 && !v138[34])
      v138[34] = UpTicksToMilliseconds();
    v138 = (_QWORD *)*v138;
    if (!v138)
      goto LABEL_473;
  }
  APSLogErrorAt();
  v130 = 0;
LABEL_473:
  v62 = v162;
  if (v140)
    CFRelease(v140);
LABEL_481:
  if (time.value)
    CFRelease((CFTypeRef)time.value);
LABEL_483:
  bufferedAudioEngine_startPlaybackIfNecessary(v65, v130);
  bufferedAudioEngine_updatePrerollingState((uint64_t)v65);
  v147 = bufferedAudioEngine_isRateZero();
  if (!v161 && v147 && *(_DWORD *)(v62 + 804) != 1886547820)
  {
    if (gLogCategory_APAudioEngineBuffered <= 40
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (v65)
      {
        v148 = v65;
        CMBaseObjectGetDerivedStorage();
      }
      else
      {
        v148 = 0;
      }
      bufferedAudioEngine_playbackStateGetCString(*(_DWORD *)(v62 + 804));
      LogPrintF();
      v65 = v148;
    }
    bufferedAudioEngine_audioTimerPause();
  }
  bufferedAudioEngine_updateDataProcessingTargetQueueInternal((uint64_t)v65);
}

uint64_t bufferedAudioEngine_updatePrerollingState(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;

  result = CMBaseObjectGetDerivedStorage();
  v3 = *(_DWORD *)(result + 804);
  if (v3 == 1886547820)
  {
    if (!*(_BYTE *)(result + 800))
      return result;
    v4 = 1937010544;
    return bufferedAudioEngine_updatePlaybackState(a1, v4);
  }
  if (v3 == 1937010544 && !*(_BYTE *)(result + 800))
  {
    v4 = 1886547820;
    return bufferedAudioEngine_updatePlaybackState(a1, v4);
  }
  return result;
}

uint64_t bufferedAudioEngine_prepareOneMessageForSending(const void *a1, int a2, BOOL *a3)
{
  _BYTE *DerivedStorage;
  _BYTE *v7;
  const __CFArray *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFArray *v12;
  const __CFArray *ValueAtIndex;
  OpaqueCMBlockBuffer *v14;
  size_t DataLength;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFDictionaryRef v19;
  uint64_t v20;
  uint64_t NextFreeBacking;
  OpaqueCMBlockBuffer *v22;
  uint64_t v23;
  const __CFArray *v24;
  const __CFArray *v25;
  const void *v26;
  const __CFDictionary *v27;
  const __CFDictionary *v28;
  OpaqueCMBlockBuffer *v29;
  uint64_t DataPointer;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const __CFAllocator *v39;
  uint64_t CMBaseObject;
  uint64_t (*v41)(uint64_t, const __CFString *, CFDictionaryRef);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t);
  _QWORD *v45;
  uint64_t v46;
  uint64_t ProtocolVTable;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  BOOL *v51;
  int v52;
  size_t lengthAtOffsetOut;
  CMTime dataPointerOut;
  CMTime lhs;
  CMTime rhs;
  CMTime v57;
  CMTime time;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v52 = 0;
  if (*DerivedStorage)
  {
    v18 = 0;
    goto LABEL_38;
  }
  v7 = DerivedStorage;
  v8 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 568);
  if (v8 && CFArrayGetCount(v8))
  {
    v9 = CMBaseObjectGetDerivedStorage();
    time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v57 = time;
    lengthAtOffsetOut = 0;
    dataPointerOut.value = 0;
    if (!*(_QWORD *)(v9 + 560))
    {
      APSLogErrorAt();
      v18 = APSSignalErrorAt();
      if (!(_DWORD)v18)
      {
LABEL_30:
        v34 = 1;
        goto LABEL_122;
      }
      goto LABEL_37;
    }
    v10 = v9;
    v11 = CMBaseObjectGetDerivedStorage();
    v12 = *(const __CFArray **)(v11 + 568);
    if (v12 && CFArrayGetCount(v12) >= 1)
    {
      ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v11 + 568), 0);
      v14 = (OpaqueCMBlockBuffer *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
      DataLength = CMBlockBufferGetDataLength(v14);
    }
    else
    {
      DataLength = 0;
    }
    NextFreeBacking = APMessageRingBufferedGetNextFreeBacking(*(_QWORD *)(v10 + 560), DataLength);
    if (NextFreeBacking)
    {
      v22 = (OpaqueCMBlockBuffer *)NextFreeBacking;
      v23 = CMBaseObjectGetDerivedStorage();
      v24 = *(const __CFArray **)(v23 + 568);
      if (v24 && CFArrayGetCount(v24) > 0)
      {
        v51 = a3;
        v25 = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v23 + 568), 0);
        v26 = CFArrayGetValueAtIndex(v25, 0);
        v27 = (const __CFDictionary *)CFArrayGetValueAtIndex(v25, 1);
        v28 = (const __CFDictionary *)CFArrayGetValueAtIndex(v25, 2);
        v29 = (OpaqueCMBlockBuffer *)CFRetain(v26);
        CMTimeMakeFromDictionary(&time, v27);
        CMTimeMakeFromDictionary(&v57, v28);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v23 + 568), 0);
        DataPointer = CMBlockBufferGetDataPointer(v22, 0, &lengthAtOffsetOut, 0, (char **)&dataPointerOut);
        if ((_DWORD)DataPointer)
        {
          v18 = DataPointer;
          APSLogErrorAt();
        }
        else
        {
          v31 = lengthAtOffsetOut;
          if (v31 >= CMBlockBufferGetDataLength(v29))
          {
            v32 = CMBlockBufferCopyDataBytes(v29, 0, DataLength, (void *)dataPointerOut.value);
            a3 = v51;
            if ((_DWORD)v32)
            {
              v18 = v32;
            }
            else
            {
              v33 = *(_QWORD *)(v10 + 560);
              rhs = time;
              lhs = v57;
              v18 = APMessageRingBufferedEnqueueMessageForSending(v33, v22, (__int128 *)&rhs.value, (__int128 *)&lhs.value);
              if (!(_DWORD)v18)
                goto LABEL_27;
            }
            APSLogErrorAt();
LABEL_27:
            if (v29)
              CFRelease(v29);
            if (!(_DWORD)v18)
              goto LABEL_30;
            goto LABEL_37;
          }
          APSLogErrorAt();
          v18 = APSSignalErrorAt();
        }
        a3 = v51;
        goto LABEL_27;
      }
      APSLogErrorAt();
      APSLogErrorAt();
    }
    v18 = 4294895201;
LABEL_37:
    APSLogErrorAt();
LABEL_38:
    v34 = 0;
    goto LABEL_132;
  }
  if (!APMessageRingBufferedIsFull(*((_QWORD *)v7 + 70)))
  {
    v16 = CMBaseObjectGetDerivedStorage();
    if (!*(_QWORD *)(v16 + 560))
    {
      APSLogErrorAt();
      v18 = APSSignalErrorAt();
LABEL_105:
      v19 = 0;
      goto LABEL_109;
    }
    v17 = v16;
    if (CMBufferQueueGetBufferCount(*(CMBufferQueueRef *)(v16 + 1112)))
    {
      v18 = bufferedAudioEngine_enqueueMessagesFromBufferQueue(a1, 1, &v52);
      if (!(_DWORD)v18)
      {
        v19 = 0;
        v20 = MEMORY[0x1E0CA2E18];
        *(_OWORD *)(v17 + 1084) = *MEMORY[0x1E0CA2E18];
        *(_QWORD *)(v17 + 1100) = *(_QWORD *)(v20 + 16);
LABEL_109:
        if (APSSettingsIsFeatureEnabled() && v19)
          CFRelease(v19);
        if (!(_DWORD)v18)
        {
          v34 = v52 > 0;
          if (*((_DWORD *)v7 + 224))
          {
            if (gLogCategory_APAudioEngineBuffered <= 10
              && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
            {
              if (a1)
                CMBaseObjectGetDerivedStorage();
              LogPrintF();
            }
            *((_DWORD *)v7 + 224) = 0;
          }
          goto LABEL_122;
        }
        goto LABEL_37;
      }
      goto LABEL_104;
    }
    LODWORD(lengthAtOffsetOut) = 0;
    v35 = CMBaseObjectGetDerivedStorage();
    time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    v57 = time;
    bufferedAudioEngine_getCurrentRemoteMediaTimeInternal((int *)&lengthAtOffsetOut, &time);
    if ((_DWORD)lengthAtOffsetOut)
    {
      APSLogErrorAt();
    }
    else
    {
      bufferedAudioEngine_getStartUpDelay((uint64_t)a1, 0, (uint64_t)&rhs);
      lhs = time;
      CMTimeAdd(&v57, &lhs, &rhs);
      lhs = *(CMTime *)(v35 + 676);
      dataPointerOut = *(CMTime *)(v35 + 700);
      if (CMTimeCompare(&lhs, &dataPointerOut))
      {
        lhs = v57;
        dataPointerOut = *(CMTime *)(v35 + 676);
        if ((CMTimeCompare(&lhs, &dataPointerOut) & 0x80000000) == 0 && (*(_BYTE *)(v35 + 1096) & 1) == 0)
        {
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (a1)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          v38 = bufferedAudioEngine_createAndEnqueueEmptyMessageForSending((uint64_t)a1, 0);
          if ((_DWORD)v38)
          {
            v18 = v38;
LABEL_104:
            APSLogErrorAt();
            goto LABEL_105;
          }
          if (APSSettingsIsFeatureEnabled())
          {
            v39 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            time = *(CMTime *)(v17 + 676);
            v19 = CMTimeCopyAsDictionary(&time, v39);
            CMBaseObject = APAudioHoseManagerBufferedGetCMBaseObject(*(_QWORD *)(v17 + 1680));
            v41 = *(uint64_t (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 56);
            if (!v41)
            {
              v18 = 4294954514;
              goto LABEL_94;
            }
            v42 = v41(CMBaseObject, CFSTR("ImmediateTransmitRemoteMediaTimestamp"), v19);
            if ((_DWORD)v42)
            {
              v18 = v42;
LABEL_94:
              APSLogErrorAt();
              goto LABEL_109;
            }
          }
          else
          {
            v19 = 0;
          }
          *(_OWORD *)(v17 + 1084) = *(_OWORD *)(v17 + 676);
          *(_QWORD *)(v17 + 1100) = *(_QWORD *)(v17 + 692);
          if (APSSettingsIsFeatureEnabled())
          {
            v43 = *(_QWORD *)(v17 + 1680);
            v44 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
            if (v44)
              v44(v43);
          }
          else
          {
            v45 = *(_QWORD **)(v17 + 584);
            if (v45)
            {
              do
              {
                v46 = *(_QWORD *)(*(_QWORD *)(v17 + 584) + 16);
                APSEndpointStreamAudioHoseProtocolGetProtocolID();
                ProtocolVTable = CMBaseObjectGetProtocolVTable();
                if (ProtocolVTable && (v48 = *(_QWORD *)(ProtocolVTable + 16)) != 0)
                {
                  v49 = *(uint64_t (**)(uint64_t))(v48 + 40);
                  if (v49)
                    v18 = v49(v46);
                  else
                    v18 = 4294954514;
                }
                else
                {
                  v18 = 4294954508;
                }
                if (gLogCategory_APAudioEngineBuffered <= 20
                  && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
                {
                  if (a1)
                    CMBaseObjectGetDerivedStorage();
                  LogPrintF();
                }
                v45 = (_QWORD *)*v45;
              }
              while (v45);
              goto LABEL_108;
            }
          }
          v18 = 0;
LABEL_108:
          ++*(_DWORD *)(v17 + 908);
          goto LABEL_109;
        }
      }
    }
    v18 = 0;
    v19 = 0;
    goto LABEL_108;
  }
  if (!a2)
  {
    v18 = 4294895201;
    ++*((_DWORD *)v7 + 224);
    if (gLogCategory_APAudioEngineBuffered <= 10
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    goto LABEL_38;
  }
  if (gLogCategory_APAudioEngineBuffered <= 20
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  v36 = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APAudioEngineBuffered <= 90
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  if (CMBufferQueueGetBufferCount(*(CMBufferQueueRef *)(v36 + 1112)))
  {
    v37 = bufferedAudioEngine_enqueueMessagesFromBufferQueue(a1, 0, &v52);
    if ((_DWORD)v37)
    {
      v18 = v37;
      APSLogErrorAt();
      goto LABEL_37;
    }
    v34 = v52 > 0;
  }
  else
  {
    v34 = 0;
  }
LABEL_122:
  if (v7[912])
  {
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    v18 = 0;
    v7[912] = 0;
  }
  else
  {
    v18 = 0;
  }
LABEL_132:
  if (a3)
    *a3 = v34;
  return v18;
}

uint64_t bufferedAudioEngine_startPlaybackIfNecessary(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *);
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *HoseDecriptorFromHose;
  uint64_t v13;
  int shouldUseReceiverChoosesAnchor;
  int v15;
  const void *v16;
  CFBooleanRef BOOLean;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOLean = 0;
  if (!APSSettingsIsFeatureEnabled())
  {
    if (!*(_BYTE *)(DerivedStorage + 801))
      goto LABEL_6;
    goto LABEL_11;
  }
  CMBaseObject = APAudioHoseManagerBufferedGetCMBaseObject(*(_QWORD *)(DerivedStorage + 1680));
  v6 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (!v6)
  {
    v9 = 4294954514;
LABEL_19:
    APSLogErrorAt();
    goto LABEL_38;
  }
  v7 = v6(CMBaseObject, CFSTR("IsRunning"), *MEMORY[0x1E0C9AE00], &BOOLean);
  if ((_DWORD)v7)
  {
    v9 = v7;
    goto LABEL_19;
  }
  if (!BOOLean || CFBooleanGetValue(BOOLean))
  {
LABEL_6:
    if (gLogCategory_APAudioEngineBuffered <= 10
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    goto LABEL_37;
  }
LABEL_11:
  v8 = *(_DWORD *)(DerivedStorage + 804);
  if (v8 == 1937207905)
  {
    if (*(_BYTE *)(DerivedStorage + 856))
    {
      v10 = *(_QWORD *)(DerivedStorage + 848);
      if (v10 <= mach_absolute_time())
      {
        HoseDecriptorFromHose = bufferedAudioEngine_getHoseDecriptorFromHose();
        if (HoseDecriptorFromHose && *((_BYTE *)HoseDecriptorFromHose + 168))
        {
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (a1)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          *(_BYTE *)(DerivedStorage + 856) = 0;
          *(_QWORD *)(DerivedStorage + 848) = 0;
          if (a1)
            CFRetain(a1);
          APSEndpointStreamAudioHoseGetAnchor(*(_QWORD *)(DerivedStorage + 864), a1);
          goto LABEL_37;
        }
        *(_BYTE *)(DerivedStorage + 856) = 0;
        *(_QWORD *)(DerivedStorage + 848) = 0;
        if (bufferedAudioEngine_shouldUseReceiverChoosesAnchor())
        {
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (a1)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          v9 = bufferedAudioEngine_handleSetRateToOneWithReceiverAnchor(a1);
          if ((_DWORD)v9)
            goto LABEL_19;
        }
        else
        {
          v16 = *(const void **)(DerivedStorage + 864);
          if (v16)
          {
            CFRelease(v16);
            *(_QWORD *)(DerivedStorage + 864) = 0;
          }
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (a1)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          bufferedAudioEngine_updatePlaybackState((uint64_t)a1, 1937011305);
          v9 = bufferedAudioEngine_handleSetRateToOne(a1);
          if ((_DWORD)v9)
            goto LABEL_19;
        }
        goto LABEL_38;
      }
    }
    goto LABEL_37;
  }
  if (v8 == 1937011316)
  {
    if (a2
      || *(_BYTE *)(DerivedStorage + 760)
      || *(_BYTE *)(DerivedStorage + 856) && (v13 = *(_QWORD *)(DerivedStorage + 848), v13 <= mach_absolute_time()))
    {
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      v9 = bufferedAudioEngine_handleSetRateToOne_sendAnchorToAllHoses(a1);
      if ((_DWORD)v9)
        goto LABEL_19;
      goto LABEL_38;
    }
LABEL_37:
    v9 = 0;
    goto LABEL_38;
  }
  if (v8 != 1886614642)
    goto LABEL_37;
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  if ((*(_BYTE *)(DerivedStorage + 836) & 1) != 0)
  {
    v15 = gLogCategory_APAudioEngineBuffered;
    goto LABEL_61;
  }
  shouldUseReceiverChoosesAnchor = bufferedAudioEngine_shouldUseReceiverChoosesAnchor();
  v15 = gLogCategory_APAudioEngineBuffered;
  if (!shouldUseReceiverChoosesAnchor)
  {
LABEL_61:
    if (v15 <= 50 && (v15 != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    bufferedAudioEngine_updatePlaybackState((uint64_t)a1, 1937011305);
    v9 = bufferedAudioEngine_handleSetRateToOne(a1);
    if ((_DWORD)v9)
      goto LABEL_19;
    goto LABEL_38;
  }
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  bufferedAudioEngine_updatePlaybackState((uint64_t)a1, 1937207905);
  v9 = bufferedAudioEngine_handleSetRateToOneWithReceiverAnchor(a1);
  if ((_DWORD)v9)
    goto LABEL_19;
LABEL_38:
  if (BOOLean)
    CFRelease(BOOLean);
  return v9;
}

BOOL bufferedAudioEngine_isRateZero()
{
  uint64_t DerivedStorage;
  int v1;
  BOOL v3;
  double *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  v1 = *(_DWORD *)(DerivedStorage + 804);
  v3 = v1 == 1886614642 || v1 == 1937207905 || v1 == 1937011305;
  v4 = (double *)(DerivedStorage + 808);
  if (v3)
    v4 = (double *)(DerivedStorage + 816);
  return *v4 == 0.0;
}

uint64_t bufferedAudioEngine_audioTimerPause()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(result + 480))
  {
    *(_BYTE *)(result + 480) = 0;
    return APSPriorityDispatchSourceSuspend();
  }
  return result;
}

uint64_t __bufferedAudioEngine_pruneMessageRingToCurrentRemoteMediaTimeWithForwardMargin_block_invoke()
{
  uint64_t result;

  result = FigGetCFPreferenceNumberWithDefault();
  bufferedAudioEngine_pruneMessageRingToCurrentRemoteMediaTimeWithForwardMargin_defaultForwardPruningMarginMs = result;
  return result;
}

BOOL bufferedAudioEngine_shouldSkipTranscodeForStartup()
{
  int v0;

  v0 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 804);
  return (v0 == 1886614642 || v0 == 1937207905 || v0 == 1937011305)
      && bufferedAudioEngine_engineBufferedToStartWaterMark();
}

uint64_t bufferedAudioEngine_createAndEnqueueEmptyMessageForSending(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t EncodeMessageBackingSize;
  uint64_t NextFreeBacking;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  OpaqueCMBlockBuffer *v20;
  CMBlockBufferRef blockBufferOut;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v20 = 0;
  blockBufferOut = 0;
  if (*(_QWORD *)(DerivedStorage + 560))
  {
    v5 = DerivedStorage;
    v6 = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, &blockBufferOut);
    if ((_DWORD)v6)
    {
      v12 = v6;
    }
    else
    {
      v7 = *(_QWORD *)(v5 + 560);
      EncodeMessageBackingSize = bufferedAudioEngine_getEncodeMessageBackingSize(a1, 0);
      NextFreeBacking = APMessageRingBufferedGetNextFreeBacking(v7, EncodeMessageBackingSize);
      if (NextFreeBacking)
      {
        v18 = *(_OWORD *)(v5 + 676);
        v19 = *(_QWORD *)(v5 + 692);
        v16 = *(_OWORD *)(v5 + 676);
        v17 = *(_QWORD *)(v5 + 692);
        v10 = bufferedAudioEngine_encodeMessage(a1, NextFreeBacking, (uint64_t)&v16, a2, blockBufferOut, &v20);
        if ((_DWORD)v10)
        {
          v12 = v10;
        }
        else
        {
          v11 = *(_QWORD *)(v5 + 560);
          v16 = v18;
          v17 = v19;
          v14 = *MEMORY[0x1E0CA2E68];
          v15 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
          v12 = APMessageRingBufferedEnqueueMessageForSending(v11, v20, &v16, &v14);
          if (!(_DWORD)v12)
            goto LABEL_6;
        }
      }
      else
      {
        v12 = 4294895201;
      }
    }
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    v12 = APSSignalErrorAt();
  }
LABEL_6:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v20)
    CFRelease(v20);
  return v12;
}

uint64_t bufferedAudioEngine_enqueueMessagesFromBufferQueue(const void *a1, char a2, _DWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  opaqueCMSampleBuffer *v9;
  opaqueCMSampleBuffer *v10;
  CFTypeRef v11;
  CFTypeRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFString *v16;
  CFTypeRef v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  uint64_t v20;
  _QWORD *v21;
  const void *v22;
  const opaqueCMFormatDescription *v23;
  const opaqueCMFormatDescription *v24;
  const void *v25;
  uint64_t v26;
  CFAllocatorRef *v27;
  uint64_t v28;
  const AudioStreamBasicDescription *v29;
  int mFormatID;
  int v31;
  int v32;
  int v33;
  CFStringRef v34;
  CFStringRef v35;
  const void *v36;
  CFDataRef v37;
  CFDictionaryRef v38;
  CMFormatDescriptionRef FormatDescription;
  CFAllocatorRef v40;
  uint64_t v41;
  const void *v42;
  CFTypeRef v43;
  const __CFBoolean *v45;
  const void *v46;
  uint64_t v47;
  const void *v48;
  CFTypeRef v49;
  const UInt8 *MagicCookie;
  uint64_t Decryptor;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const __CFDictionary *v66;
  CMTimeFlags v67;
  CMTimeEpoch v68;
  _OWORD *v69;
  const __CFDictionary *v70;
  CMTimeFlags v71;
  CMTimeEpoch v72;
  const __CFAllocator *allocator;
  CFAllocatorRef allocatora[2];
  char v75;
  CMTime v76;
  CMTime v77;
  CMTime v78;
  CMTime v79;
  CMTime v80;
  CMTime v81;
  CMTime v82;
  CMTime v83;
  CFTypeRef v84;
  size_t sizeOut;
  _OWORD v86[8];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  CFTypeRef v90;
  __int128 v91;
  __int128 v92;
  _OWORD v93[2];
  __int128 v94;
  uint64_t v95;
  CFTypeRef v96;
  CFTypeRef cf;
  const AudioStreamBasicDescription *StreamBasicDescription;
  void *values;
  void *keys;
  CMTime rhs;
  CMTime lhs;
  CMTimeValue v103;
  CMTimeScale v104;
  char __str[8];
  uint64_t v106;
  _BYTE time[32];
  __int128 v108;
  __int128 v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v96 = 0;
  v95 = 0;
  v94 = 0u;
  v92 = 0u;
  memset(v93, 0, sizeof(v93));
  v91 = 0u;
  v90 = 0;
  v7 = MEMORY[0x1E0CA2E18];
  v103 = *MEMORY[0x1E0CA2E18];
  v104 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v88 = 0u;
  v89 = 0u;
  v87 = 0u;
  memset(v86, 0, sizeof(v86));
  v84 = 0;
  sizeOut = 0;
  if (!*(_QWORD *)(DerivedStorage + 560))
  {
    APSLogErrorAt();
    v13 = APSSignalErrorAt();
LABEL_16:
    v10 = 0;
LABEL_104:
    v37 = 0;
    v38 = 0;
    goto LABEL_105;
  }
  v8 = DerivedStorage;
  v9 = bufferedAudioEngine_processAndRetainSBufFromBufferQueue((uint64_t)a1);
  if (!v9)
  {
    ++*(_DWORD *)(v8 + 900);
    if (gLogCategory_APAudioEngineBuffered <= 30
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    v13 = 0;
    goto LABEL_16;
  }
  v10 = v9;
  v75 = a2;
  v11 = CMGetAttachment(v9, (CFStringRef)*MEMORY[0x1E0CA4E48], 0);
  v12 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
  if (v11 == (CFTypeRef)*MEMORY[0x1E0C9AE50])
  {
    lhs = *(CMTime *)(v8 + 676);
    rhs = *(CMTime *)(v8 + 700);
    CMTimeSubtract((CMTime *)time, &lhs, &rhs);
    *(_OWORD *)(v8 + 1000) = *(_OWORD *)time;
    *(_QWORD *)(v8 + 1016) = *(_QWORD *)&time[16];
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      *(_OWORD *)time = *(_OWORD *)(v8 + 1000);
      *(_QWORD *)&time[16] = *(_QWORD *)(v8 + 1016);
      CMTimeGetSeconds((CMTime *)time);
      LogPrintF();
    }
  }
  v14 = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(v14 + 560))
  {
    v15 = v14;
    v16 = (const __CFString *)*MEMORY[0x1E0CC4138];
    v17 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E0CC4138], 0);
    if (v17)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(v15 + 1168), v17);
      CMRemoveAttachment(v10, v16);
    }
  }
  else
  {
    APSLogErrorAt();
    APSSignalErrorAt();
  }
  v18 = (const __CFDictionary *)CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E0CA4E40], 0);
  if (v18)
  {
    v19 = v18;
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    v20 = CMBaseObjectGetDerivedStorage();
    if (FigCFEqual())
      goto LABEL_37;
    if (CFDictionaryContainsKey(v19, (const void *)*MEMORY[0x1E0CFFDE0]))
    {
      v21 = (_QWORD *)(v20 + 1360);
    }
    else
    {
      if (!CFDictionaryContainsKey(v19, (const void *)*MEMORY[0x1E0CFFDF8]))
        goto LABEL_37;
      v21 = (_QWORD *)(v20 + 1368);
    }
    ++*v21;
LABEL_37:
    v22 = *(const void **)(v8 + 1152);
    *(_QWORD *)(v8 + 1152) = v19;
    CFRetain(v19);
    if (v22)
      CFRelease(v22);
  }
  v23 = (const opaqueCMFormatDescription *)CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E0CC4128], 0);
  v24 = v23;
  if (v23)
  {
    v25 = *(const void **)(v8 + 944);
    *(_QWORD *)(v8 + 944) = v23;
    CFRetain(v23);
    if (v25)
      CFRelease(v25);
  }
  v26 = CMBaseObjectGetDerivedStorage();
  StreamBasicDescription = 0;
  v108 = 0u;
  v109 = 0u;
  memset(time, 0, sizeof(time));
  lhs.value = 0;
  *(_QWORD *)&lhs.timescale = 0;
  *(_QWORD *)&rhs.timescale = 0;
  rhs.value = 0;
  *(_QWORD *)__str = 0;
  v106 = 0;
  v27 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v24)
  {
    v28 = v26;
    if (CMAudioFormatDescriptionGetRichestDecodableFormatAndChannelLayout())
    {
      StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(v24);
      if (StreamBasicDescription)
      {
        FourCharCodeToCString();
        __strlcat_chk();
        snprintf((char *)&lhs, 0x10uLL, "%llu", (unint64_t)StreamBasicDescription->mSampleRate);
        __strlcat_chk();
        __strlcat_chk();
        v29 = StreamBasicDescription;
        mFormatID = StreamBasicDescription->mFormatID;
        if (mFormatID > 1902928226)
        {
          if (mFormatID == 2053923171)
            goto LABEL_53;
          v31 = 1902928227;
        }
        else
        {
          if (mFormatID == 1634492771)
            goto LABEL_53;
          v31 = 1668047203;
        }
        if (mFormatID != v31)
        {
LABEL_57:
          snprintf((char *)&rhs, 0x10uLL, "%u", v29->mChannelsPerFrame);
          __strlcat_chk();
          v34 = CFStringCreateWithCString(*v27, time, 0x8000100u);
          v35 = v34;
          v36 = *(const void **)(v28 + 1352);
          *(_QWORD *)(v28 + 1352) = v34;
          if (v34)
            CFRetain(v34);
          if (v36)
            CFRelease(v36);
          if (v35)
            CFRelease(v35);
          goto LABEL_63;
        }
LABEL_53:
        v32 = StreamBasicDescription->mFormatFlags - 1;
        if (v32 > 3)
          v33 = 0;
        else
          v33 = dword_1C964DBA0[v32];
        snprintf(__str, 0x10uLL, "%u", v33);
        __strlcat_chk();
        __strlcat_chk();
        v29 = StreamBasicDescription;
        goto LABEL_57;
      }
    }
  }
LABEL_63:
  if (CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E0CA2718], 0))
  {
    *(_QWORD *)&v87 = FigCFNumberGetUInt64();
    BYTE8(v87) = 1;
    bufferedAudioEngine_createAndEnqueueEmptyMessageForSending((uint64_t)a1, (uint64_t)v86);
    v13 = 0;
    v37 = 0;
    v38 = 0;
    *(_QWORD *)&v93[0] = 1;
    goto LABEL_105;
  }
  if (!CMSampleBufferGetNumSamples(v10))
    goto LABEL_103;
  FormatDescription = CMSampleBufferGetFormatDescription(v10);
  v40 = *v27;
  v41 = APSAudioFormatDescriptionCreateWithCMFormatDescription();
  if ((_DWORD)v41)
  {
    v13 = v41;
LABEL_219:
    APSLogErrorAt();
    goto LABEL_104;
  }
  if (APSAudioFormatDescriptionCreateWithCMFormatDescription()
    && gLogCategory_APAudioEngineBuffered <= 30
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  allocator = v40;
  APSAudioFormatDescriptionGetASBD();
  if (!APSAudioFormatDescriptionListContainsFormat())
  {
    *(_QWORD *)time = 0;
    APSAudioFormatDescriptionCopyDebugString();
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    if (*(_QWORD *)time)
      CFRelease(*(CFTypeRef *)time);
    *(_QWORD *)time = 0;
    APSAudioFormatDescriptionListCopyDebugString();
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    if (*(_QWORD *)time)
      CFRelease(*(CFTypeRef *)time);
LABEL_103:
    v13 = 0;
    goto LABEL_104;
  }
  if (!FigCFEqual())
  {
    v42 = *(const void **)(v8 + 928);
    v43 = cf;
    *(_QWORD *)(v8 + 928) = cf;
    if (v43)
      CFRetain(v43);
    if (v42)
      CFRelease(v42);
    *(_QWORD *)time = 0;
    APSAudioFormatDescriptionCopyDebugString();
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    if (*(_QWORD *)time)
      CFRelease(*(CFTypeRef *)time);
    bufferedAudioEngine_updateMaxAudioBurstIfNecessary((uint64_t)a1);
  }
  v45 = (const __CFBoolean *)CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E0CC4130], 0);
  if (v45 && CFBooleanGetValue(v45))
  {
    v46 = *(const void **)(v8 + 944);
    *(_QWORD *)(v8 + 944) = FormatDescription;
    if (FormatDescription)
      CFRetain(FormatDescription);
    if (v46)
      CFRelease(v46);
  }
  v47 = APSBadgingFormatInfoCopyBadgeType();
  if ((_DWORD)v47)
  {
    v13 = v47;
    goto LABEL_219;
  }
  if (FigCFEqual())
  {
    v38 = 0;
  }
  else
  {
    v48 = *(const void **)(v8 + 952);
    v49 = v84;
    *(_QWORD *)(v8 + 952) = v84;
    if (v49)
      CFRetain(v49);
    if (v48)
      CFRelease(v48);
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      *(_OWORD *)time = *(_OWORD *)(v8 + 676);
      *(_QWORD *)&time[16] = *(_QWORD *)(v8 + 692);
      CMTimeGetSeconds((CMTime *)time);
      LogPrintF();
    }
    keys = CFSTR("ContentType");
    values = (void *)v84;
    v38 = CFDictionaryCreate(allocator, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v38)
    {
      APSLogErrorAt();
      v37 = 0;
      v13 = 4294951816;
      goto LABEL_105;
    }
    *(_OWORD *)time = *(_OWORD *)(v8 + 676);
    *(_QWORD *)&time[16] = *(_QWORD *)(v8 + 692);
    APSTimedInfoManagerAddTimedInfo();
  }
  MagicCookie = (const UInt8 *)CMAudioFormatDescriptionGetMagicCookie(FormatDescription, &sizeOut);
  if (MagicCookie)
  {
    v37 = CFDataCreate(allocator, MagicCookie, sizeOut);
    if (!v37)
    {
      APSLogErrorAt();
      v13 = 0;
      goto LABEL_105;
    }
  }
  else
  {
    v37 = 0;
  }
  if (!FigCFEqual())
  {
    v58 = *(const void **)(v8 + 968);
    *(_QWORD *)(v8 + 968) = v37;
    if (v37)
      CFRetain(v37);
    if (v58)
      CFRelease(v58);
    *(_DWORD *)(v8 + 984) = 0;
    if (APSSettingsIsFeatureEnabled())
    {
      v59 = *(_QWORD *)(v8 + 1680);
      v60 = *(_QWORD *)(v8 + 968);
      v61 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
      if (!v61)
      {
        v13 = 4294954514;
        goto LABEL_214;
      }
      v62 = v61(v59, v60);
      if ((_DWORD)v62)
      {
        v13 = v62;
        goto LABEL_214;
      }
    }
    else
    {
      v63 = bufferedAudioEngine_setMagicCookieForAllHoses(a1, *(const __CFData **)(v8 + 968));
      if ((_DWORD)v63)
      {
        v13 = v63;
        goto LABEL_214;
      }
    }
  }
  Decryptor = FigSampleBufferGetDecryptor();
  if (Decryptor != *(_QWORD *)(v8 + 1144))
  {
    v52 = Decryptor;
    *(_QWORD *)(v8 + 1144) = Decryptor;
    if (Decryptor)
    {
      v53 = *(unsigned int (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
      if (v53 && !v53(v52, *MEMORY[0x1E0CA3228], allocator, &v90) && v90 == v12)
      {
        if (APSSettingsIsFeatureEnabled())
        {
          v54 = *(_QWORD *)(v8 + 1680);
          v55 = *(_QWORD *)(v8 + 1144);
          v56 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
          if (!v56)
          {
            v13 = 4294954514;
            goto LABEL_214;
          }
          v57 = v56(v54, v55);
          if ((_DWORD)v57)
          {
            v13 = v57;
LABEL_214:
            APSLogErrorAt();
            goto LABEL_105;
          }
        }
        else
        {
          v64 = bufferedAudioEngine_setCryptorForAllHoses(a1, *(_QWORD *)(v8 + 1144));
          if ((_DWORD)v64)
          {
            v13 = v64;
            goto LABEL_214;
          }
        }
      }
      else
      {
        if (gLogCategory_APAudioEngineBuffered <= 90
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1)
            CMBaseObjectGetDerivedStorage();
          bufferedAudioEngine_getCryptorIDForCryptor(*(_QWORD *)(v8 + 1144));
          LogPrintF();
        }
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
      }
    }
  }
  *(_OWORD *)allocatora = *(_OWORD *)v7;
  *(_OWORD *)((char *)v93 + 8) = *(_OWORD *)v7;
  v65 = *(_QWORD *)(v7 + 16);
  *((_QWORD *)&v93[1] + 1) = v65;
  v66 = (const __CFDictionary *)CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E0CA2728], 0);
  if (v66)
  {
    CMTimeMakeFromDictionary((CMTime *)time, v66);
    v103 = *(_QWORD *)time;
    v67 = *(_DWORD *)&time[12];
    v104 = *(_DWORD *)&time[8];
    if ((time[12] & 1) != 0)
    {
      v68 = *(_QWORD *)&time[16];
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        *(_QWORD *)time = v103;
        *(_QWORD *)&time[8] = __PAIR64__(v67, v104);
        *(_QWORD *)&time[16] = v68;
        CMTimeGetSeconds((CMTime *)time);
        CMSampleBufferGetPresentationTimeStamp(&v83, v10);
        CMTimeGetSeconds(&v83);
        CMSampleBufferGetOutputPresentationTimeStamp(&v82, v10);
        CMTimeGetSeconds(&v82);
        CMSampleBufferGetDuration(&v81, v10);
        CMTimeGetSeconds(&v81);
        CMSampleBufferGetOutputDuration(&v80, v10);
        CMTimeGetSeconds(&v80);
        LogPrintF();
      }
      CMSampleBufferGetPresentationTimeStamp(&v79, v10);
      *(_QWORD *)time = v103;
      *(_QWORD *)&time[8] = __PAIR64__(v67, v104);
      *(_QWORD *)&time[16] = v68;
      CMTimeAdd((CMTime *)((char *)v93 + 8), &v79, (CMTime *)time);
      v69 = (_OWORD *)(v8 + 676);
      lhs = *(CMTime *)(v8 + 676);
      rhs.value = v103;
      rhs.timescale = v104;
      rhs.flags = v67;
      rhs.epoch = v68;
      CMTimeSubtract((CMTime *)time, &lhs, &rhs);
      *(_OWORD *)(v8 + 676) = *(_OWORD *)time;
      *(_QWORD *)(v8 + 692) = *(_QWORD *)&time[16];
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        *(_OWORD *)time = *v69;
        *(_QWORD *)&time[16] = *(_QWORD *)(v8 + 692);
        lhs.value = v103;
        lhs.timescale = v104;
        lhs.flags = v67;
        lhs.epoch = v68;
        CMTimeAdd(&v78, (CMTime *)time, &lhs);
        CMTimeGetSeconds(&v78);
        *(_OWORD *)time = *v69;
        *(_QWORD *)&time[16] = *(_QWORD *)(v8 + 692);
        CMTimeGetSeconds((CMTime *)time);
        LogPrintF();
      }
    }
  }
  v94 = *(_OWORD *)allocatora;
  v95 = v65;
  v70 = (const __CFDictionary *)CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E0CA2720], 0);
  if (v70)
  {
    CMTimeMakeFromDictionary((CMTime *)time, v70);
    v103 = *(_QWORD *)time;
    v71 = *(_DWORD *)&time[12];
    v104 = *(_DWORD *)&time[8];
    if ((time[12] & 1) != 0)
    {
      v72 = *(_QWORD *)&time[16];
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        *(_QWORD *)time = v103;
        *(_QWORD *)&time[8] = __PAIR64__(v71, v104);
        *(_QWORD *)&time[16] = v72;
        CMTimeGetSeconds((CMTime *)time);
        LogPrintF();
      }
      CMSampleBufferGetPresentationTimeStamp(&v77, v10);
      CMSampleBufferGetDuration(&v76, v10);
      CMTimeAdd((CMTime *)time, &v77, &v76);
      v94 = *(_OWORD *)time;
      v95 = *(_QWORD *)&time[16];
      lhs = *(CMTime *)time;
      rhs.value = v103;
      rhs.timescale = v104;
      rhs.flags = v71;
      rhs.epoch = v72;
      CMTimeSubtract((CMTime *)time, &lhs, &rhs);
      v94 = *(_OWORD *)time;
      v95 = *(_QWORD *)&time[16];
    }
  }
  *(_QWORD *)&v91 = a1;
  *((_QWORD *)&v91 + 1) = cf;
  *(_QWORD *)&v92 = v96;
  BYTE8(v92) = v75;
  *(_QWORD *)&v93[0] = 0;
  bufferedAudioEngine_recordPreparedAudioDataAndAudioFormatDuration((uint64_t)a1, v10);
  bufferedAudioEngine_adjustRemoteMediaTimeForDiscontinuity((uint64_t)a1, v10);
  v13 = bufferedAudioEngine_processAndEnqueueSampleBuffer(v10, &v91);
  if ((_DWORD)v13)
    goto LABEL_214;
LABEL_105:
  if (a3)
    *a3 = v93[0];
  if (v90)
    CFRelease(v90);
  if (v10)
    CFRelease(v10);
  if (cf)
    CFRelease(cf);
  if (v96)
    CFRelease(v96);
  if (v37)
    CFRelease(v37);
  if (v84)
    CFRelease(v84);
  if (v38)
    CFRelease(v38);
  return v13;
}

double bufferedAudioEngine_getStartUpDelay@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int64_t v6;
  double result;
  CMTime time;

  if (bufferedAudioEngine_getStartUpDelay_onceToken != -1)
    dispatch_once(&bufferedAudioEngine_getStartUpDelay_onceToken, &__block_literal_global_410);
  v6 = bufferedAudioEngine_getStartUpDelay_defaultsWriteStartupDelayMS;
  if (bufferedAudioEngine_getStartUpDelay_defaultsWriteStartupDelayMS == -1234)
  {
    if (bufferedAudioEngine_isSpeakerPlayingBySelf())
    {
      v6 = 200;
    }
    else if (a2)
    {
      v6 = 750;
    }
    else
    {
      v6 = 500;
    }
  }
  CMTimeMake(&time, v6, 1000);
  *(CMTime *)bufferedAudioEngine_getStartUpDelay_bufferedStartUpDelay = time;
  if (gLogCategory_APAudioEngineBuffered <= 30
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    time = *(CMTime *)bufferedAudioEngine_getStartUpDelay_bufferedStartUpDelay;
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
  result = *(double *)bufferedAudioEngine_getStartUpDelay_bufferedStartUpDelay;
  *(_OWORD *)a3 = *(_OWORD *)bufferedAudioEngine_getStartUpDelay_bufferedStartUpDelay;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&bufferedAudioEngine_getStartUpDelay_bufferedStartUpDelay[16];
  return result;
}

uint64_t __bufferedAudioEngine_getStartUpDelay_block_invoke()
{
  uint64_t result;

  result = FigGetCFPreferenceNumberWithDefault();
  bufferedAudioEngine_getStartUpDelay_defaultsWriteStartupDelayMS = result;
  return result;
}

uint64_t bufferedAudioEngine_isSpeakerPlayingBySelf()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = APSIsAPMSpeaker();
  if ((_DWORD)result)
    return *(_DWORD *)(DerivedStorage + 592) == 1 && *(_BYTE *)(*(_QWORD *)(DerivedStorage + 584) + 24) != 0;
  return result;
}

uint64_t bufferedAudioEngine_getEncodeMessageBackingSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 520))
  {
    APSAPAPBBufEncodeGetMinBackingSize();
    return 0;
  }
  else
  {
    v3 = a2 + 11;
    v4 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 552);
    if (v4)
    {
      v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v5)
        v6 = v5(v4);
      else
        v6 = 0;
      v3 += v6;
    }
  }
  return v3;
}

uint64_t bufferedAudioEngine_encodeMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, OpaqueCMBlockBuffer *a5, OpaqueCMBlockBuffer **a6)
{
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t DerivedStorage;
  size_t DataLength;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  const char *v18;
  uint64_t v19;
  uint64_t BufferedAudioDataPointer;
  uint64_t v21;
  uint64_t ReferencingBBufWithAudioDataLength;
  uint64_t BufferedAudioAADPointer;
  const char *v24;
  uint64_t DataPointer;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t (*v32)(uint64_t, char *, uint64_t, char *, size_t, char *, size_t, char *, uint64_t, const char *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _DWORD);
  uint64_t v33;
  const char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[12];
  char *v43;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  uint64_t v46;
  char *v47;
  OpaqueCMBlockBuffer *v48;
  size_t v49;
  void *v50;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 520))
    return APSAPAPBBufEncode();
  v12 = *(char **)a3;
  v13 = *(_DWORD *)(a3 + 8);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v49 = 0;
  v50 = 0;
  DataLength = CMBlockBufferGetDataLength(a5);
  v48 = 0;
  v16 = *(_QWORD *)(DerivedStorage + 552);
  if (v16)
  {
    v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v17)
      v16 = v17(v16);
    else
      v16 = 0;
  }
  v46 = 0;
  v47 = 0;
  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  v43 = 0;
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_45;
  if (v13 == bufferedAudioEngine_getSampleRateFromTransportAudioFormat())
  {
    *(_DWORD *)v42 = 0;
    *(_QWORD *)&v42[3] = v12;
    if (a4)
    {
      v42[7] = *(_QWORD *)a4;
      if (*(_BYTE *)(a4 + 16))
      {
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1)
            v18 = (const char *)(CMBaseObjectGetDerivedStorage() + 392);
          else
            v18 = "";
          v36 = *(unsigned __int16 *)(DerivedStorage + 466);
          v37 = v12;
          v35 = v18;
          LogPrintF();
        }
        v42[8] = 1;
      }
    }
    v19 = APSTransportMessageSetBufferedAudioDataHeader();
    if ((_DWORD)v19)
    {
      v11 = v19;
      goto LABEL_47;
    }
    BufferedAudioDataPointer = APSTransportMessageGetBufferedAudioDataPointer();
    if ((_DWORD)BufferedAudioDataPointer)
    {
      v11 = BufferedAudioDataPointer;
      goto LABEL_47;
    }
    if (v49 >= v16 + DataLength)
    {
      if (DataLength && (v21 = CMBlockBufferCopyDataBytes(a5, 0, DataLength, v50), (_DWORD)v21))
      {
        v11 = v21;
      }
      else
      {
        ReferencingBBufWithAudioDataLength = APSTransportMessageBufferedCreateReferencingBBufWithAudioDataLength();
        if ((_DWORD)ReferencingBBufWithAudioDataLength)
        {
          v11 = ReferencingBBufWithAudioDataLength;
        }
        else
        {
          if (!*(_QWORD *)(DerivedStorage + 552))
            goto LABEL_43;
          BufferedAudioAADPointer = APSTransportMessageGetBufferedAudioAADPointer();
          if ((_DWORD)BufferedAudioAADPointer)
          {
            v11 = BufferedAudioAADPointer;
          }
          else
          {
            if (gLogCategory_APAudioEngineBuffered <= 10
              && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
            {
              if (a1)
                v24 = (const char *)(CMBaseObjectGetDerivedStorage() + 392);
              else
                v24 = "";
              v40 = v47[6];
              v41 = v47[7];
              v38 = v47[4];
              v39 = v47[5];
              v36 = v46;
              v37 = v47;
              v35 = v24;
              LogPrintF();
            }
            DataPointer = CMBlockBufferGetDataPointer(v48, 0xBuLL, &lengthAtOffsetOut, 0, &dataPointerOut);
            if ((_DWORD)DataPointer)
            {
              v11 = DataPointer;
            }
            else
            {
              if (!v16)
              {
                v27 = 0;
LABEL_41:
                v28 = *(_QWORD *)(DerivedStorage + 552);
                v30 = v46;
                v29 = v47;
                v31 = dataPointerOut;
                v32 = *(uint64_t (**)(uint64_t, char *, uint64_t, char *, size_t, char *, size_t, char *, uint64_t, const char *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _DWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                if (v32)
                {
                  v33 = v32(v28, v29, v30, v31, DataLength, v31, DataLength, v27, v16, v35, v36, v37, v38, v39, v40, v41, *(_QWORD *)v42, *(_DWORD *)&v42[8]);
                  if (!(_DWORD)v33)
                  {
LABEL_43:
                    if (a6)
                    {
                      v11 = 0;
                      *a6 = v48;
                      return v11;
                    }
LABEL_45:
                    v11 = 0;
                    goto LABEL_48;
                  }
                  v11 = v33;
                }
                else
                {
                  v11 = 4294954514;
                }
                goto LABEL_47;
              }
              v26 = CMBlockBufferGetDataPointer(v48, DataLength + 11, 0, 0, &v43);
              if (!(_DWORD)v26)
              {
                v27 = v43;
                goto LABEL_41;
              }
              v11 = v26;
            }
          }
        }
      }
LABEL_47:
      APSLogErrorAt();
      goto LABEL_48;
    }
    APSLogErrorAt();
    v11 = 4294960553;
  }
  else
  {
    APSLogErrorAt();
    v11 = 4294960591;
  }
LABEL_48:
  if (v48)
    CFRelease(v48);
  return v11;
}

uint64_t bufferedAudioEngine_encodeMaxExtensionItemSizesAPAP(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = a1(1, 8, a2);
  if ((_DWORD)v6)
  {
    v24 = v6;
    goto LABEL_39;
  }
  v7 = a1(2, 8, a2);
  if ((_DWORD)v7)
  {
    v24 = v7;
    goto LABEL_39;
  }
  v8 = a1(20, 8, a2);
  if ((_DWORD)v8)
  {
    v24 = v8;
    goto LABEL_39;
  }
  v9 = a1(3, 8, a2);
  if ((_DWORD)v9)
  {
    v24 = v9;
    goto LABEL_39;
  }
  v10 = a1(17, 8, a2);
  if ((_DWORD)v10)
  {
    v24 = v10;
    goto LABEL_39;
  }
  v11 = a1(18, 8, a2);
  if ((_DWORD)v11)
  {
    v24 = v11;
    goto LABEL_39;
  }
  v12 = a1(4, 12, a2);
  if ((_DWORD)v12)
  {
    v24 = v12;
    goto LABEL_39;
  }
  v13 = a1(5, 12, a2);
  if ((_DWORD)v13)
  {
    v24 = v13;
    goto LABEL_39;
  }
  v14 = a1(13, 12, a2);
  if ((_DWORD)v14)
  {
    v24 = v14;
    goto LABEL_39;
  }
  v15 = a1(12, 8, a2);
  if ((_DWORD)v15)
  {
    v24 = v15;
    goto LABEL_39;
  }
  v16 = a1(11, 12, a2);
  if ((_DWORD)v16)
  {
    v24 = v16;
    goto LABEL_39;
  }
  v17 = a1(7, 20 * *a3, a2);
  if ((_DWORD)v17)
  {
    v24 = v17;
    goto LABEL_39;
  }
  v18 = a1(8, 4, a2);
  if ((_DWORD)v18)
  {
    v24 = v18;
    goto LABEL_39;
  }
  v19 = a1(14, 4, a2);
  if ((_DWORD)v19)
  {
    v24 = v19;
    goto LABEL_39;
  }
  v20 = a1(15, 4, a2);
  if ((_DWORD)v20)
  {
    v24 = v20;
    goto LABEL_39;
  }
  v21 = a1(16, 4, a2);
  if ((_DWORD)v21)
  {
    v24 = v21;
    goto LABEL_39;
  }
  v22 = a1(9, 16, a2);
  if ((_DWORD)v22)
  {
    v24 = v22;
    goto LABEL_39;
  }
  v23 = a1(10, 8, a2);
  if ((_DWORD)v23)
  {
    v24 = v23;
    goto LABEL_39;
  }
  v24 = a1(19, 20, a2);
  if ((_DWORD)v24)
LABEL_39:
    APSLogErrorAt();
  return v24;
}

uint64_t bufferedAudioEngine_encodeExtensionAPAP(uint64_t (*a1)(uint64_t, CFTypeRef, uint64_t), uint64_t a2, uint64_t a3)
{
  CFAllocatorRef *v6;
  uint64_t BigUIntWithUInt64;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFData *v17;
  size_t Length;
  uint64_t v19;
  uint64_t DataPointer;
  char *v21;
  const UInt8 *BytePtr;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v48;
  unsigned int v49;
  unint64_t memoryBlock;
  unsigned int v51;
  CMBlockBufferRef v52;
  CFTypeRef v53;
  CFTypeRef v54;
  CFTypeRef v55;
  const void *v56;
  const void *v57;
  const void *v58;
  CFTypeRef v59;
  CFTypeRef v60;
  CFTypeRef v61;
  CFTypeRef cf;
  CMBlockBufferRef v63;
  CMBlockBufferRef v64;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef v66;
  CFTypeRef v67;
  CFTypeRef v68;
  CFTypeRef v69;
  CFTypeRef v70;
  char *dataPointerOut;

  v70 = 0;
  dataPointerOut = 0;
  v68 = 0;
  v69 = 0;
  v66 = 0;
  v67 = 0;
  v64 = 0;
  blockBufferOut = 0;
  cf = 0;
  v63 = 0;
  v60 = 0;
  v61 = 0;
  v58 = 0;
  v59 = 0;
  v56 = 0;
  v57 = 0;
  v54 = 0;
  v55 = 0;
  v52 = 0;
  v53 = 0;
  v51 = 0;
  memoryBlock = 0;
  v49 = 0;
  v48 = 0;
  if (!a3)
    goto LABEL_59;
  v6 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (*(_BYTE *)(a3 + 16))
  {
    BigUIntWithUInt64 = APSCMBlockBufferCreateBigUIntWithUInt64();
    if ((_DWORD)BigUIntWithUInt64)
    {
      v46 = BigUIntWithUInt64;
      goto LABEL_128;
    }
    v8 = a1(1, v70, a2);
    if ((_DWORD)v8)
    {
      v46 = v8;
      goto LABEL_128;
    }
  }
  if (*(_QWORD *)a3)
  {
    v9 = APSCMBlockBufferCreateBigUIntWithUInt64();
    if ((_DWORD)v9)
    {
      v46 = v9;
      goto LABEL_128;
    }
    v10 = a1(2, v69, a2);
    if ((_DWORD)v10)
    {
      v46 = v10;
      goto LABEL_128;
    }
  }
  if (*(_QWORD *)(a3 + 8))
  {
    v11 = APSCMBlockBufferCreateBigUIntWithUInt64();
    if ((_DWORD)v11)
    {
      v46 = v11;
      goto LABEL_128;
    }
    v12 = a1(20, v68, a2);
    if ((_DWORD)v12)
    {
      v46 = v12;
      goto LABEL_128;
    }
  }
  if (*(_QWORD *)(a3 + 24))
  {
    v13 = APSCMBlockBufferCreateBigUIntWithUInt64();
    if ((_DWORD)v13)
    {
      v46 = v13;
      goto LABEL_128;
    }
    v14 = a1(3, v67, a2);
    if ((_DWORD)v14)
    {
      v46 = v14;
      goto LABEL_128;
    }
  }
  if (*(_QWORD *)(a3 + 32))
  {
    v15 = APSCMBlockBufferCreateBigUIntWithUInt64();
    if ((_DWORD)v15)
    {
      v46 = v15;
      goto LABEL_128;
    }
    v16 = a1(17, v66, a2);
    if ((_DWORD)v16)
    {
      v46 = v16;
      goto LABEL_128;
    }
  }
  v17 = *(const __CFData **)(a3 + 40);
  if (v17)
  {
    Length = CFDataGetLength(v17);
    v19 = CMBlockBufferCreateWithMemoryBlock(*v6, 0, Length, *v6, 0, 0, Length, 1u, &blockBufferOut);
    if ((_DWORD)v19)
    {
      v46 = v19;
      goto LABEL_128;
    }
    DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, 0, &dataPointerOut);
    if ((_DWORD)DataPointer)
    {
      v46 = DataPointer;
      goto LABEL_128;
    }
    v21 = dataPointerOut;
    BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a3 + 40));
    memcpy(v21, BytePtr, Length);
    v23 = a1(18, blockBufferOut, a2);
    if ((_DWORD)v23)
    {
      v46 = v23;
      goto LABEL_128;
    }
  }
  if ((*(_BYTE *)(a3 + 60) & 1) != 0)
  {
    memoryBlock = bswap64(*(_QWORD *)(a3 + 48));
    v51 = bswap32(*(_DWORD *)(a3 + 56));
    v24 = CMBlockBufferCreateWithMemoryBlock(*v6, &memoryBlock, 0xCuLL, (CFAllocatorRef)*MEMORY[0x1E0C9AE20], 0, 0, 0xCuLL, 0, &v64);
    if ((_DWORD)v24)
    {
      v46 = v24;
      goto LABEL_128;
    }
    v25 = a1(4, v64, a2);
    if ((_DWORD)v25)
    {
      v46 = v25;
      goto LABEL_128;
    }
  }
  v51 = 0;
  memoryBlock = 0;
  if ((*(_BYTE *)(a3 + 84) & 1) != 0)
  {
    memoryBlock = bswap64(*(_QWORD *)(a3 + 72));
    v51 = bswap32(*(_DWORD *)(a3 + 80));
    v26 = CMBlockBufferCreateWithMemoryBlock(*v6, &memoryBlock, 0xCuLL, (CFAllocatorRef)*MEMORY[0x1E0C9AE20], 0, 0, 0xCuLL, 0, &v63);
    if ((_DWORD)v26)
    {
      v46 = v26;
      goto LABEL_128;
    }
    v27 = a1(5, v63, a2);
    if ((_DWORD)v27)
    {
      v46 = v27;
      goto LABEL_128;
    }
  }
  if ((*(_BYTE *)(a3 + 152) & 1) != 0)
  {
    v48 = bswap64(*(_QWORD *)(a3 + 140));
    v49 = bswap32(*(_DWORD *)(a3 + 148));
    v28 = CMBlockBufferCreateWithMemoryBlock(*v6, &v48, 0xCuLL, (CFAllocatorRef)*MEMORY[0x1E0C9AE20], 0, 0, 0xCuLL, 0, &v52);
    if ((_DWORD)v28)
    {
      v46 = v28;
      goto LABEL_128;
    }
    v29 = a1(13, v52, a2);
    if ((_DWORD)v29)
    {
      v46 = v29;
      goto LABEL_128;
    }
  }
  if (*(_QWORD *)(a3 + 96))
  {
    if (!APSAPAPExtensionConvertLoudnessInfoDictLoudnessParametersToBBuf())
    {
      v30 = a1(11, cf, a2);
      if ((_DWORD)v30)
      {
        v46 = v30;
        goto LABEL_128;
      }
    }
    if (!APSAPAPExtensionConvertLoudnessInfoDictSoundCheckInfoToBBuf())
    {
      v31 = a1(7, v60, a2);
      if ((_DWORD)v31)
      {
        v46 = v31;
        goto LABEL_128;
      }
    }
    if (!APSAPAPExtensionConvertLoudnessInfoDictMediaKindToBBuf())
    {
      v32 = a1(12, v53, a2);
      if ((_DWORD)v32)
      {
        v46 = v32;
        goto LABEL_128;
      }
    }
  }
  if (*(_DWORD *)(a3 + 104))
  {
    v33 = APSCMBlockBufferCreateBigUIntWithUInt64();
    if ((_DWORD)v33)
    {
      v46 = v33;
      goto LABEL_128;
    }
    v34 = a1(8, v59, a2);
    if ((_DWORD)v34)
    {
      v46 = v34;
      goto LABEL_128;
    }
  }
  if (*(_DWORD *)(a3 + 108))
  {
    v35 = APSCMBlockBufferCreateBigUIntWithUInt64();
    if ((_DWORD)v35)
    {
      v46 = v35;
      goto LABEL_128;
    }
    v36 = a1(14, v58, a2);
    if ((_DWORD)v36)
    {
      v46 = v36;
      goto LABEL_128;
    }
  }
  if (*(_DWORD *)(a3 + 112))
  {
    v37 = APSCMBlockBufferCreateBigUIntWithUInt64();
    if ((_DWORD)v37)
    {
      v46 = v37;
      goto LABEL_128;
    }
    v38 = a1(15, v57, a2);
    if ((_DWORD)v38)
    {
      v46 = v38;
      goto LABEL_128;
    }
  }
  if (*(_DWORD *)(a3 + 116))
  {
    v39 = APSCMBlockBufferCreateBigUIntWithUInt64();
    if ((_DWORD)v39)
    {
      v46 = v39;
      goto LABEL_128;
    }
    v40 = a1(16, v56, a2);
    if ((_DWORD)v40)
    {
      v46 = v40;
      goto LABEL_128;
    }
  }
  if (*(_QWORD *)(a3 + 120))
  {
    v41 = APSCMBlockBufferCreateWithUUID();
    if ((_DWORD)v41)
    {
      v46 = v41;
      goto LABEL_128;
    }
    v42 = a1(9, v55, a2);
    if ((_DWORD)v42)
    {
      v46 = v42;
      goto LABEL_128;
    }
  }
  if (!*(_BYTE *)(a3 + 136))
    goto LABEL_55;
  v43 = APSCMBlockBufferCreateBigUIntWithUInt64();
  if ((_DWORD)v43)
  {
    v46 = v43;
  }
  else
  {
    v44 = a1(10, v54, a2);
    if (!(_DWORD)v44)
    {
LABEL_55:
      if (*(_QWORD *)(a3 + 168))
      {
        v45 = APSAPAPExtensionConvertSbufTracerDictToBBuf();
        if ((_DWORD)v45)
        {
          v46 = v45;
        }
        else
        {
          v46 = a1(19, v61, a2);
          if (!(_DWORD)v46)
            goto LABEL_60;
        }
        goto LABEL_128;
      }
LABEL_59:
      v46 = 0;
      goto LABEL_60;
    }
    v46 = v44;
  }
LABEL_128:
  APSLogErrorAt();
LABEL_60:
  if (v70)
    CFRelease(v70);
  if (v69)
    CFRelease(v69);
  if (v68)
    CFRelease(v68);
  if (v67)
    CFRelease(v67);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v66)
    CFRelease(v66);
  if (v64)
    CFRelease(v64);
  if (v63)
    CFRelease(v63);
  if (cf)
    CFRelease(cf);
  if (v61)
    CFRelease(v61);
  if (v60)
    CFRelease(v60);
  if (v59)
    CFRelease(v59);
  if (v55)
    CFRelease(v55);
  if (v54)
    CFRelease(v54);
  if (v52)
    CFRelease(v52);
  if (v53)
    CFRelease(v53);
  return v46;
}

opaqueCMSampleBuffer *bufferedAudioEngine_processAndRetainSBufFromBufferQueue(uint64_t a1)
{
  uint64_t DerivedStorage;
  opaqueCMSampleBuffer *v3;
  opaqueCMSampleBuffer *v4;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMItemCount NumSamples;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  CMTime time2;
  CMTime time1;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(DerivedStorage + 1112));
  v4 = v3;
  if (v3)
  {
    CMSampleBufferGetOutputPresentationTimeStamp(&time1, v3);
    value = time1.value;
    flags = time1.flags;
    timescale = time1.timescale;
    epoch = time1.epoch;
    NumSamples = CMSampleBufferGetNumSamples(v4);
    if ((flags & 1) != 0 && (*(_BYTE *)(DerivedStorage + 664) & 1) != 0)
    {
      v8 = NumSamples;
      v9 = (_OWORD *)(DerivedStorage + 652);
      time1.value = value;
      time1.timescale = timescale;
      time1.flags = flags;
      time1.epoch = epoch;
      time2 = *(CMTime *)(DerivedStorage + 652);
      if (CMTimeCompare(&time1, &time2) < 0 && v8 >= 1)
      {
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1)
            CMBaseObjectGetDerivedStorage();
          *(_OWORD *)&time1.value = *v9;
          time1.epoch = *(_QWORD *)(DerivedStorage + 668);
          CMTimeGetSeconds(&time1);
          time1.value = value;
          time1.timescale = timescale;
          time1.flags = flags;
          time1.epoch = epoch;
          CMTimeGetSeconds(&time1);
          LogPrintF();
        }
        v10 = MEMORY[0x1E0CA2E18];
        *v9 = *MEMORY[0x1E0CA2E18];
        *(_QWORD *)(DerivedStorage + 668) = *(_QWORD *)(v10 + 16);
      }
    }
  }
  return v4;
}

uint64_t bufferedAudioEngine_setMagicCookieForAllHoses(const void *a1, const __CFData *a2)
{
  uint64_t DerivedStorage;
  _QWORD *v5;
  const void *v6;
  uint64_t MagicCookieIDForMagicCookieData;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(const void *, uint64_t, const __CFData *, uint64_t (*)(const void *, uint64_t, int, const void *), const void *);
  uint64_t v11;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (*(_BYTE *)(DerivedStorage + 520))
    {
      v5 = (_QWORD *)(DerivedStorage + 584);
      while (1)
      {
        v5 = (_QWORD *)*v5;
        if (!v5)
          return 0;
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1)
            CMBaseObjectGetDerivedStorage();
          bufferedAudioEngine_getMagicCookieIDForMagicCookieData(a2);
          LogPrintF();
        }
        if (a1)
          CFRetain(a1);
        v6 = (const void *)v5[2];
        MagicCookieIDForMagicCookieData = bufferedAudioEngine_getMagicCookieIDForMagicCookieData(a2);
        APSEndpointStreamAudioHoseProtocolGetProtocolID();
        ProtocolVTable = CMBaseObjectGetProtocolVTable();
        if (!ProtocolVTable)
          break;
        v9 = *(_QWORD *)(ProtocolVTable + 16);
        if (!v9)
          break;
        v10 = *(uint64_t (**)(const void *, uint64_t, const __CFData *, uint64_t (*)(const void *, uint64_t, int, const void *), const void *))(v9 + 104);
        if (!v10)
        {
          v12 = 4294954514;
          bufferedAudioEngine_hoseSetMagicCookieCallbackCompletionHandler(v6, MagicCookieIDForMagicCookieData, -12782, a1);
          goto LABEL_22;
        }
        v11 = v10(v6, MagicCookieIDForMagicCookieData, a2, bufferedAudioEngine_hoseSetMagicCookieCallbackCompletionHandler, a1);
        if ((_DWORD)v11)
        {
          v12 = v11;
LABEL_22:
          if (gLogCategory_APAudioEngineBuffered <= 90
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (a1)
              CMBaseObjectGetDerivedStorage();
            LogPrintF();
          }
          return v12;
        }
      }
      v12 = 4294954508;
      goto LABEL_22;
    }
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294951815;
  }
}

void bufferedAudioEngine_recordPreparedAudioDataAndAudioFormatDuration(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  CMTime v3;

  CMBaseObjectGetDerivedStorage();
  v3 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  CMSampleBufferGetOutputDuration(&v3, a2);
  APSAudioFormatDescriptionCopyDebugString();
  APSLogErrorAt();
}

uint64_t bufferedAudioEngine_adjustRemoteMediaTimeForDiscontinuity(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  _OWORD *v6;
  _OWORD *v7;
  CMTime v8;
  CMTime time;
  CMTime rhs;
  CMTime lhs;
  CMTime v12;
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMTime v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v15 = v16;
  v14 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v13 = v14;
  v12 = v14;
  result = CMSampleBufferGetNumSamples(a2);
  if (result >= 1)
  {
    CMSampleBufferGetOutputDuration(&v15, a2);
    CMSampleBufferGetOutputPresentationTimeStamp(&v16, a2);
    lhs = v16;
    rhs = v15;
    result = (uint64_t)CMTimeAdd(&v14, &lhs, &rhs);
    v6 = (_OWORD *)(DerivedStorage + 652);
    if ((*(_BYTE *)(DerivedStorage + 664) & 1) != 0)
    {
      lhs = v16;
      *(_OWORD *)&rhs.value = *v6;
      rhs.epoch = *(_QWORD *)(DerivedStorage + 668);
      result = CMTimeCompare(&lhs, &rhs);
      if ((_DWORD)result)
      {
        lhs = v16;
        *(_OWORD *)&rhs.value = *v6;
        rhs.epoch = *(_QWORD *)(DerivedStorage + 668);
        CMTimeSubtract(&v13, &lhs, &rhs);
        v7 = (_OWORD *)(DerivedStorage + 676);
        lhs = *(CMTime *)(DerivedStorage + 676);
        rhs = v13;
        result = (uint64_t)CMTimeAdd(&v12, &lhs, &rhs);
        if (gLogCategory_APAudioEngineBuffered <= 50)
        {
          if (gLogCategory_APAudioEngineBuffered != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
          {
            if (a1)
              CMBaseObjectGetDerivedStorage();
            *(_OWORD *)&lhs.value = *v6;
            lhs.epoch = *(_QWORD *)(DerivedStorage + 668);
            CMTimeGetSeconds(&lhs);
            lhs = v16;
            CMTimeGetSeconds(&lhs);
            lhs = v13;
            CMTimeGetSeconds(&lhs);
            *(_OWORD *)&lhs.value = *v7;
            lhs.epoch = *(_QWORD *)(DerivedStorage + 692);
            CMTimeGetSeconds(&lhs);
            lhs = v12;
            CMTimeGetSeconds(&lhs);
            CMSampleBufferGetPresentationTimeStamp(&time, a2);
            CMTimeGetSeconds(&time);
            CMSampleBufferGetDuration(&v8, a2);
            CMTimeGetSeconds(&v8);
            lhs = v16;
            CMTimeGetSeconds(&lhs);
            lhs = v15;
            CMTimeGetSeconds(&lhs);
            result = LogPrintF();
          }
        }
        *v7 = *(_OWORD *)&v12.value;
        *(_QWORD *)(DerivedStorage + 692) = v12.epoch;
      }
    }
    *v6 = *(_OWORD *)&v14.value;
    *(_QWORD *)(DerivedStorage + 668) = v14.epoch;
  }
  return result;
}

uint64_t bufferedAudioEngine_processAndEnqueueSampleBuffer(opaqueCMSampleBuffer *a1, void *a2)
{
  CMTime *v2;
  opaqueCMSampleBuffer *v4;
  size_t *v5;
  uint64_t NumSamples;
  CMBlockBufferRef DataBuffer;
  OpaqueCMBlockBuffer *v8;
  CMFormatDescriptionRef v9;
  const opaqueCMFormatDescription *v10;
  const __CFAllocator *v11;
  size_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  AudioStreamPacketDescription *v16;
  size_t mDataByteSize;
  uint64_t appended;
  int64_t FramesPerPacket;
  double v20;
  uint64_t v21;
  CFArrayRef SampleAttachmentsArray;
  const __CFArray *v23;
  CFArrayRef v24;
  const __CFArray *v25;
  CFIndex i;
  uint64_t v27;
  const opaqueCMFormatDescription *formatDescription;
  CMTime v30;
  CMSampleBufferRef sbuf;
  CMSampleTimingInfo v32;
  AudioStreamPacketDescription *packetDescriptionsPointerOut;
  CMBlockBufferRef blockBufferOut;
  size_t packetDescriptionsSizeOut;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  packetDescriptionsSizeOut = 0;
  packetDescriptionsPointerOut = 0;
  blockBufferOut = 0;
  v2 = (CMTime *)MEMORY[0x1E0CA2E18];
  memset(&v32, 0, sizeof(v32));
  value = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  sbuf = 0;
  if (!a2)
    goto LABEL_37;
  v4 = a1;
  if (CMSampleBufferGetSampleSize(a1, 0))
  {
    v5 = 0;
    goto LABEL_23;
  }
  NumSamples = CMSampleBufferGetNumSamples(v4);
  if (CMSampleBufferGetAudioStreamPacketDescriptionsPtr(v4, (const AudioStreamPacketDescription **)&packetDescriptionsPointerOut, &packetDescriptionsSizeOut)|| !packetDescriptionsSizeOut|| NumSamples != packetDescriptionsSizeOut >> 4|| (DataBuffer = CMSampleBufferGetDataBuffer(v4)) == 0|| (v8 = DataBuffer, (v9 = CMSampleBufferGetFormatDescription(v4)) == 0))
  {
LABEL_37:
    APSLogErrorAt();
    v27 = 4294954516;
    goto LABEL_27;
  }
  v10 = v9;
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v12 = (size_t *)CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 8 * NumSamples, 0);
  if (!v12)
  {
    APSLogErrorAt();
    v27 = 4294954510;
    goto LABEL_27;
  }
  v5 = v12;
  v13 = CMBlockBufferCreateEmpty(v11, NumSamples, 0, &blockBufferOut);
  if ((_DWORD)v13)
  {
    v27 = v13;
LABEL_33:
    APSLogErrorAt();
    goto LABEL_26;
  }
  formatDescription = v10;
  if (NumSamples >= 1)
  {
    v14 = 0;
    v15 = 0;
    while (1)
    {
      v16 = &packetDescriptionsPointerOut[v14];
      mDataByteSize = packetDescriptionsPointerOut[v14].mDataByteSize;
      v5[v15] = mDataByteSize;
      appended = CMBlockBufferAppendBufferReference(blockBufferOut, v8, v16->mStartOffset, mDataByteSize, 0);
      if ((_DWORD)appended)
        break;
      ++v15;
      ++v14;
      if (NumSamples == v15)
        goto LABEL_15;
    }
    v27 = appended;
    goto LABEL_33;
  }
LABEL_15:
  CMSampleBufferGetPresentationTimeStamp(&v30, v4);
  value = v30.value;
  timescale = v30.timescale;
  if ((v30.flags & 1) == 0)
  {
    APSLogErrorAt();
    v27 = 4294954516;
    goto LABEL_25;
  }
  v32.presentationTimeStamp.value = value;
  v32.presentationTimeStamp.timescale = timescale;
  v32.presentationTimeStamp.flags = v30.flags;
  v32.presentationTimeStamp.epoch = v30.epoch;
  FramesPerPacket = APSAudioFormatDescriptionGetFramesPerPacket();
  APSAudioFormatDescriptionGetSampleRate();
  CMTimeMake(&v32.duration, FramesPerPacket, (int)v20);
  v32.decodeTimeStamp = *v2;
  v21 = CMSampleBufferCreateReady(v11, blockBufferOut, formatDescription, NumSamples, 1, &v32, NumSamples, v5, &sbuf);
  if ((_DWORD)v21)
  {
    v27 = v21;
    APSLogErrorAt();
    goto LABEL_25;
  }
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v4, 0);
  if (SampleAttachmentsArray)
  {
    v23 = SampleAttachmentsArray;
    v24 = CMSampleBufferGetSampleAttachmentsArray(sbuf, 1u);
    if (!v24)
    {
      APSLogErrorAt();
      v27 = 4294954510;
      goto LABEL_25;
    }
    if (NumSamples >= 1)
    {
      v25 = v24;
      for (i = 0; i != NumSamples; ++i)
      {
        CFArrayGetValueAtIndex(v25, i);
        CFArrayGetValueAtIndex(v23, i);
        FigCFDictionarySetAllValuesFromDictionary();
      }
    }
  }
  v4 = sbuf;
LABEL_23:
  v27 = CMSampleBufferCallForEachSample(v4, (OSStatus (__cdecl *)(CMSampleBufferRef, CMItemCount, void *))bufferedAudioEngine_enqueueSingleSampleCompressedSBufCallback, a2);
  if (!(_DWORD)v27)
  {
    if (!v5)
      goto LABEL_27;
    goto LABEL_25;
  }
  APSLogErrorAt();
  if (v5)
  {
LABEL_25:
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
LABEL_26:
    CFAllocatorDeallocate(v11, v5);
  }
LABEL_27:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (sbuf)
    CFRelease(sbuf);
  return v27;
}

void bufferedAudioEngine_setAudioFormatDurationDict(CMTime *a1, __CFDictionary *a2, const void *a3)
{
  const __CFAllocator *v6;
  CFDictionaryRef v7;
  CFDictionaryRef v8;
  CMTime v9;
  CMTime lhs;
  CMTime time;
  CMTime v12;

  v12 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (FigCFDictionaryGetCMTimeIfPresent())
  {
    lhs = *a1;
    v9 = v12;
    CMTimeAdd(&time, &lhs, &v9);
    *a1 = time;
  }
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  time = *a1;
  v7 = CMTimeCopyAsDictionary(&time, v6);
  if (v7)
  {
    v8 = v7;
    CFDictionarySetValue(a2, a3, v7);
    CFRelease(v8);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t bufferedAudioEngine_enqueueSingleSampleCompressedSBufCallback(opaqueCMSampleBuffer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  int v6;
  uint64_t v7;
  CMTimeValue v8;
  CMTimeScale v9;
  CMTimeEpoch v10;
  __int128 v11;
  __int128 v12;
  CMBlockBufferRef DataBuffer;
  CMBlockBufferRef v14;
  size_t TotalSampleSize;
  uint64_t v16;
  CMTimeValue v17;
  const __CFData *v18;
  size_t EncodeMessageBackingSize;
  const void *NextFreeBacking;
  int v21;
  uint64_t v22;
  CMTimeValue v23;
  CMTimeEpoch v24;
  uint64_t v25;
  double v26;
  int v27;
  int IsFeatureEnabled;
  uint64_t v29;
  CMTimeScale v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const __CFData *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  CMTimeFlags v40;
  CMTimeFlags v41;
  CMTimeEpoch v42;
  _OWORD *v43;
  CMTimeFlags v44;
  CMTimeEpoch v45;
  const __CFArray *v46;
  _OWORD *v47;
  CMTimeEpoch v48;
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  const __CFString *v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  OpaqueCMBlockBuffer *v56;
  char v57;
  CFIndex v58;
  const __CFDictionary *v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  __int128 v63;
  __int128 v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, CMTime *);
  CFDictionaryRef v69;
  uint64_t v70;
  void (*v71)(uint64_t, CFDictionaryRef, CMTime *);
  const __CFAllocator *v72;
  CFDictionaryRef v73;
  uint64_t v74;
  const void *v75;
  uint64_t v76;
  const __CFAllocator *v77;
  CFDictionaryRef v78;
  CFTypeRef v79;
  uint64_t v80;
  uint64_t v81;
  const __CFAllocator *v82;
  CFMutableArrayRef Mutable;
  CFDictionaryRef v84;
  CFDictionaryRef v85;
  CFDictionaryRef v86;
  CFDictionaryRef v87;
  CFArrayRef v88;
  __int128 *v90;
  CMTimeScale timescale;
  CMTimeScale v92;
  CMTimeValue v93;
  CMTimeEpoch v94;
  OpaqueCMBlockBuffer *v95;
  unsigned int FramesPerPacket;
  CMTimeFlags v97;
  CMTimeValue v98;
  __int128 v99;
  CMTimeFlags flags;
  CMTimeScale value;
  const void *v102;
  CMTimeValue v103;
  CMTimeScale v104;
  CMTimeEpoch epoch;
  uint64_t v106;
  CMTime v107;
  CMSampleTimingInfo timingInfoOut;
  CMTime v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  CFTypeRef v118[6];
  CFTypeRef v119;
  CFTypeRef cf;
  CMTime time2;
  CMTime v122;
  CMTime rhs;
  CMTime time;
  CMTimeValue v125;
  CMTimeScale v126;
  CMTimeValue v127;
  CMTimeScale v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int epoch_high;
  CMTime lhs;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v106 = *(_QWORD *)a3;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(unsigned __int8 *)(a3 + 24);
  cf = 0;
  v119 = 0;
  v7 = MEMORY[0x1E0CA2E18];
  v131 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 12);
  epoch_high = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 20);
  v129 = v131;
  v130 = epoch_high;
  v117 = 0u;
  memset(v118, 0, sizeof(v118));
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v110 = 0u;
  v8 = *MEMORY[0x1E0CA2E18];
  v127 = v8;
  v9 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v128 = v9;
  v10 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v125 = v8;
  v126 = v9;
  v99 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v109.value = *MEMORY[0x1E0CA2E18];
  v102 = (const void *)v10;
  v109.epoch = v10;
  v11 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 48);
  *(_OWORD *)&timingInfoOut.presentationTimeStamp.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 32);
  *(_OWORD *)&timingInfoOut.decodeTimeStamp.value = v11;
  timingInfoOut.decodeTimeStamp.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E90] + 64);
  v12 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 16);
  *(_OWORD *)&timingInfoOut.duration.value = *MEMORY[0x1E0CA2E90];
  *(_OWORD *)&timingInfoOut.duration.epoch = v12;
  if (!a1)
  {
    APSLogErrorAt();
    if (gLogCategory_APAudioEngineBuffered > 90
      || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_188;
    }
    if (!v106)
      goto LABEL_187;
    goto LABEL_171;
  }
  DataBuffer = CMSampleBufferGetDataBuffer(a1);
  if (!DataBuffer)
  {
    APSLogErrorAt();
    if (gLogCategory_APAudioEngineBuffered > 90
      || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_188;
    }
    if (!v106)
      goto LABEL_187;
    goto LABEL_171;
  }
  v14 = DataBuffer;
  TotalSampleSize = CMSampleBufferGetTotalSampleSize(a1);
  if (!TotalSampleSize)
  {
    APSLogErrorAt();
    if (gLogCategory_APAudioEngineBuffered > 90
      || gLogCategory_APAudioEngineBuffered == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_188;
    }
    if (!v106)
    {
LABEL_187:
      LogPrintF();
LABEL_188:
      v46 = 0;
      v22 = 0;
      goto LABEL_153;
    }
LABEL_171:
    CMBaseObjectGetDerivedStorage();
    goto LABEL_187;
  }
  v16 = TotalSampleSize;
  v92 = v9;
  v95 = v14;
  CMSampleBufferGetPresentationTimeStamp(&lhs, a1);
  v17 = lhs.value;
  v131 = *(_QWORD *)&lhs.flags;
  value = lhs.timescale;
  epoch_high = HIDWORD(lhs.epoch);
  CMSampleBufferGetOutputPresentationTimeStamp(&lhs, a1);
  v93 = lhs.value;
  v129 = *(_QWORD *)&lhs.flags;
  timescale = lhs.timescale;
  v130 = HIDWORD(lhs.epoch);
  FramesPerPacket = APSAudioFormatDescriptionGetFramesPerPacket();
  v18 = *(const __CFData **)(DerivedStorage + 968);
  if (v18)
    CFDataGetLength(v18);
  if (FigCFDictionaryGetValue())
    APSAudioFormatDescriptionGetChannelCount();
  EncodeMessageBackingSize = bufferedAudioEngine_getEncodeMessageBackingSize(v106, v16);
  if (v6)
  {
    NextFreeBacking = (const void *)APMessageRingBufferedGetNextFreeBacking(*(_QWORD *)(DerivedStorage + 560), EncodeMessageBackingSize);
    if (NextFreeBacking)
    {
      cf = CFRetain(NextFreeBacking);
      if (cf)
      {
        v21 = 1;
        goto LABEL_26;
      }
    }
    else
    {
      cf = 0;
    }
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (v106)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
  }
  if (bufferedAudioEngine_createMessageBackingBBuf(*(CFAllocatorRef *)(DerivedStorage + 360), EncodeMessageBackingSize, (CMBlockBufferRef *)&cf))
  {
    v22 = 4294895201;
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (v106)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    v46 = 0;
    goto LABEL_153;
  }
  v21 = 0;
LABEL_26:
  v23 = *(_QWORD *)(DerivedStorage + 676);
  v24 = *(_QWORD *)(DerivedStorage + 692);
  v90 = (__int128 *)(DerivedStorage + 676);
  v25 = *(_QWORD *)(DerivedStorage + 684);
  APSAudioFormatDescriptionGetSampleRate();
  time.value = v23;
  *(_QWORD *)&time.timescale = v25;
  time.epoch = v24;
  CMTimeConvertScale(&lhs, &time, (int)v26, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  v103 = lhs.value;
  v104 = lhs.timescale;
  flags = lhs.flags;
  epoch = lhs.epoch;
  if (*(_QWORD *)(DerivedStorage + 1128) >= *(_QWORD *)(DerivedStorage + 408))
    v27 = 20;
  else
    v27 = 50;
  v98 = v17;
  if (v27 >= gLogCategory_APAudioEngineBuffered
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v106)
      CMBaseObjectGetDerivedStorage();
    lhs.value = v17;
    *(_QWORD *)&lhs.flags = v131;
    lhs.timescale = value;
    HIDWORD(lhs.epoch) = epoch_high;
    CMTimeGetSeconds(&lhs);
    lhs.value = v93;
    *(_QWORD *)&lhs.flags = v129;
    lhs.timescale = timescale;
    HIDWORD(lhs.epoch) = v130;
    CMTimeGetSeconds(&lhs);
    lhs.value = v103;
    lhs.timescale = v104;
    lhs.flags = flags;
    lhs.epoch = epoch;
    CMTimeGetSeconds(&lhs);
    LogPrintF();
  }
  *(_QWORD *)&v110 = APSAudioFormatDescriptionGetAudioFormatIndex();
  *((_QWORD *)&v110 + 1) = APSAudioFormatDescriptionGetAudioFormatIndex();
  LOBYTE(v111) = 0;
  LOBYTE(v118[1]) = 0;
  IsFeatureEnabled = APSSettingsIsFeatureEnabled();
  v29 = *(_QWORD *)(DerivedStorage + 1144);
  if (IsFeatureEnabled)
  {
    v30 = value;
    if (v29)
    {
      v31 = *(_QWORD *)(DerivedStorage + 1680);
      v32 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (*(_QWORD *)(v32 + 64))
        v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 80))(v31, v29);
      else
        v33 = -12782;
      *((_QWORD *)&v111 + 1) = v33;
    }
    v36 = *(_QWORD *)(DerivedStorage + 968);
    if (v36)
    {
      v37 = *(_QWORD *)(DerivedStorage + 1680);
      v38 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
      v39 = v38 ? v38(v37, v36) : -12782;
      *(_QWORD *)&v112 = v39;
      v35 = *(_DWORD *)(DerivedStorage + 984);
      if (v35 < 0xA)
      {
LABEL_54:
        *((_QWORD *)&v112 + 1) = *(_QWORD *)(DerivedStorage + 968);
        *(_DWORD *)(DerivedStorage + 984) = v35 + 1;
      }
    }
  }
  else
  {
    if (v29)
      *((_QWORD *)&v111 + 1) = bufferedAudioEngine_getCryptorIDForCryptor(*(_QWORD *)(DerivedStorage + 1144));
    v34 = *(const __CFData **)(DerivedStorage + 968);
    v30 = value;
    if (v34)
    {
      *(_QWORD *)&v112 = bufferedAudioEngine_getMagicCookieIDForMagicCookieData(v34);
      v35 = *(_DWORD *)(DerivedStorage + 984);
      if (v35 <= 9)
        goto LABEL_54;
    }
  }
  v40 = *(_DWORD *)(v7 + 12);
  CMSampleBufferGetDuration(&lhs, a1);
  v41 = lhs.flags;
  v126 = lhs.timescale;
  v125 = lhs.value;
  v42 = lhs.epoch;
  lhs.value = v98;
  *(_QWORD *)&lhs.flags = v131;
  lhs.timescale = v30;
  HIDWORD(lhs.epoch) = epoch_high;
  time.value = v125;
  time.timescale = v126;
  time.flags = v41;
  v97 = v41;
  v94 = v42;
  time.epoch = v42;
  CMTimeAdd(&v109, &lhs, &time);
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 1168)) >= 1)
  {
    v118[5] = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 1168), 0);
    CMSetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CC4138], v118[5], 1u);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 1168), 0);
    FigEndpointStreamAudioEngineSbufTracerDebugPrint();
  }
  if ((*(_BYTE *)(a3 + 52) & 1) != 0)
  {
    v43 = (_OWORD *)(a3 + 40);
    lhs = *(CMTime *)(a3 + 40);
    time = v109;
    if (CMTimeCompare(&lhs, &time) < 0)
    {
      *(_OWORD *)&lhs.value = *v43;
      lhs.epoch = *(_QWORD *)(a3 + 56);
      time.value = v98;
      *(_QWORD *)&time.flags = v131;
      time.timescale = value;
      HIDWORD(time.epoch) = epoch_high;
      v44 = v40;
      v45 = (CMTimeEpoch)v102;
      if (CMTimeCompare(&lhs, &time) >= 1)
      {
        *(_OWORD *)&lhs.value = *v43;
        lhs.epoch = *(_QWORD *)(a3 + 56);
        time = v109;
        v44 = v40;
        v45 = (CMTimeEpoch)v102;
        if (CMTimeCompare(&lhs, &time) < 0)
        {
          *(_OWORD *)&time.value = *v43;
          time.epoch = *(_QWORD *)(a3 + 56);
          rhs.value = v98;
          *(_QWORD *)&rhs.flags = v131;
          rhs.timescale = value;
          HIDWORD(rhs.epoch) = epoch_high;
          CMTimeSubtract(&lhs, &time, &rhs);
          v127 = lhs.value;
          v44 = lhs.flags;
          v128 = lhs.timescale;
          v45 = lhs.epoch;
        }
      }
    }
    else
    {
      v127 = v125;
      v128 = v126;
      v44 = v97;
      v45 = v94;
    }
    if ((v44 & 1) != 0)
    {
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (v106)
          CMBaseObjectGetDerivedStorage();
        lhs.value = v127;
        lhs.timescale = v128;
        lhs.flags = v44;
        lhs.epoch = v45;
        CMTimeGetSeconds(&lhs);
        lhs.value = v103;
        lhs.timescale = v104;
        lhs.flags = flags;
        lhs.epoch = epoch;
        CMTimeGetSeconds(&lhs);
        LogPrintF();
      }
      *(_QWORD *)&v113 = v127;
      *((_QWORD *)&v113 + 1) = __PAIR64__(v44, v128);
      *(_QWORD *)&v114 = v45;
    }
  }
  if ((*(_BYTE *)(a3 + 76) & 1) != 0)
  {
    v47 = (_OWORD *)(a3 + 64);
    v127 = v8;
    v128 = v92;
    lhs = *(CMTime *)(a3 + 64);
    time.value = v98;
    *(_QWORD *)&time.flags = v131;
    time.timescale = value;
    HIDWORD(time.epoch) = epoch_high;
    if (CMTimeCompare(&lhs, &time) <= 0)
    {
      v127 = v125;
      v128 = v126;
      v40 = v97;
      v48 = v94;
    }
    else
    {
      *(_OWORD *)&lhs.value = *v47;
      lhs.epoch = *(_QWORD *)(a3 + 80);
      time.value = v98;
      *(_QWORD *)&time.flags = v131;
      time.timescale = value;
      HIDWORD(time.epoch) = epoch_high;
      if (CMTimeCompare(&lhs, &time) < 1)
      {
        v48 = (CMTimeEpoch)v102;
        if ((v40 & 1) == 0)
          goto LABEL_92;
        goto LABEL_82;
      }
      *(_OWORD *)&lhs.value = *v47;
      lhs.epoch = *(_QWORD *)(a3 + 80);
      time = v109;
      v48 = (CMTimeEpoch)v102;
      if (CMTimeCompare(&lhs, &time) < 0)
      {
        time = v109;
        *(_OWORD *)&rhs.value = *v47;
        rhs.epoch = *(_QWORD *)(a3 + 80);
        CMTimeSubtract(&lhs, &time, &rhs);
        v127 = lhs.value;
        v40 = lhs.flags;
        v128 = lhs.timescale;
        v48 = lhs.epoch;
        if ((lhs.flags & 1) == 0)
          goto LABEL_92;
        goto LABEL_82;
      }
    }
    if ((v40 & 1) == 0)
      goto LABEL_92;
LABEL_82:
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (v106)
        CMBaseObjectGetDerivedStorage();
      lhs.value = v127;
      lhs.timescale = v128;
      lhs.flags = v40;
      lhs.epoch = v48;
      CMTimeGetSeconds(&lhs);
      lhs.value = v103;
      lhs.timescale = v104;
      lhs.flags = flags;
      lhs.epoch = epoch;
      CMTimeGetSeconds(&lhs);
      LogPrintF();
    }
    *((_QWORD *)&v114 + 1) = v127;
    *(_QWORD *)&v115 = __PAIR64__(v40, v128);
    *((_QWORD *)&v115 + 1) = v48;
  }
LABEL_92:
  if (CMSampleBufferGetSampleTimingInfo(a1, 0, &timingInfoOut))
  {
    *(_OWORD *)((char *)&v118[1] + 4) = v99;
    *(CFTypeRef *)((char *)&v118[3] + 4) = v102;
    APSSignalErrorAt();
  }
  else
  {
    *(_OWORD *)((char *)&v118[1] + 4) = *(_OWORD *)&timingInfoOut.duration.value;
    *(CMTimeEpoch *)((char *)&v118[3] + 4) = timingInfoOut.duration.epoch;
  }
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
  v46 = SampleAttachmentsArray;
  if (SampleAttachmentsArray)
  {
    if (CFArrayGetCount(SampleAttachmentsArray) >= 1
      && (ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v46, 0),
          (v51 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA4E28])) != 0))
    {
      v46 = CFUUIDCreateFromString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v51);
      *((_QWORD *)&v117 + 1) = v46;
    }
    else
    {
      v46 = 0;
    }
  }
  if (*(_QWORD *)(DerivedStorage + 1152))
    *(_QWORD *)&v116 = *(_QWORD *)(DerivedStorage + 1152);
  *((_QWORD *)&v116 + 1) = APSAudioFormatDescriptionGetFramesPerPacket();
  *(_QWORD *)&v117 = 0;
  APSAudioFormatDescriptionGetSampleRate();
  v53 = v52;
  v54 = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)&lhs.value = v99;
  lhs.epoch = (CMTimeEpoch)v102;
  *(_OWORD *)&time.value = v99;
  time.epoch = (CMTimeEpoch)v102;
  if ((flags & 1) != 0)
  {
    v55 = v54;
    v56 = v95;
    if (CFArrayGetCount(*(CFArrayRef *)(v54 + 1024)) < 1)
      goto LABEL_111;
    rhs.value = v103;
    rhs.timescale = v104;
    rhs.flags = flags;
    rhs.epoch = epoch;
    v122 = *(CMTime *)(v55 + 700);
    CMTimeSubtract(&time, &rhs, &v122);
    CMTimeMake(&v122, FramesPerPacket, (int)v53);
    time2 = time;
    CMTimeAdd(&rhs, &time2, &v122);
    time = rhs;
    if (CFArrayGetCount(*(CFArrayRef *)(v55 + 1024)) < 1)
    {
LABEL_111:
      v57 = 0;
    }
    else
    {
      v57 = 0;
      v58 = 0;
      do
      {
        v59 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v55 + 1024), v58);
        CMTimeMakeFromDictionary(&lhs, v59);
        rhs = time;
        time2 = lhs;
        if (CMTimeCompare(&rhs, &time2) < 0)
        {
          ++v58;
        }
        else
        {
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v55 + 1024), v58);
          v57 = 1;
        }
      }
      while (v58 < CFArrayGetCount(*(CFArrayRef *)(v55 + 1024)));
    }
  }
  else
  {
    APSLogErrorAt();
    v57 = 0;
    v56 = v95;
  }
  LOBYTE(v111) = v111 | v57;
  lhs.value = v103;
  lhs.timescale = v104;
  lhs.flags = flags;
  v60 = v106;
  lhs.epoch = epoch;
  v61 = bufferedAudioEngine_encodeMessage(v106, (uint64_t)cf, (uint64_t)&lhs, (uint64_t)&v110, v56, (OpaqueCMBlockBuffer **)&v119);
  if ((_DWORD)v61)
  {
    v22 = v61;
    APSLogErrorAt();
    goto LABEL_153;
  }
  APSAudioFormatDescriptionGetSampleRate();
  CMTimeMake(&v107, FramesPerPacket, (int)v62);
  v63 = *v90;
  time.epoch = *(_QWORD *)(DerivedStorage + 692);
  *(_OWORD *)&time.value = v63;
  CMTimeAdd(&lhs, &time, &v107);
  v64 = *(_OWORD *)&lhs.value;
  *(_QWORD *)(DerivedStorage + 692) = lhs.epoch;
  *v90 = v64;
  v65 = APSSettingsIsFeatureEnabled();
  v66 = *(_QWORD *)(DerivedStorage + 1144);
  if (!v65)
  {
    if (v66)
    {
      v72 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      lhs.value = v103;
      lhs.timescale = v104;
      lhs.flags = flags;
      lhs.epoch = epoch;
      v73 = CMTimeCopyAsDictionary(&lhs, v72);
      if (v73)
      {
        v69 = v73;
        if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 1136), *(const void **)(DerivedStorage + 1144)))
        {
          CMNotificationCenterGetDefaultLocalCenter();
          v74 = FigNotificationCenterAddWeakListener();
          if ((_DWORD)v74)
          {
            v22 = v74;
            APSLogErrorAt();
            goto LABEL_152;
          }
        }
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 1136), *(const void **)(DerivedStorage + 1144), v69);
        v75 = *(const void **)(DerivedStorage + 968);
        if (!v75)
        {
LABEL_127:
          if (!v21)
            goto LABEL_133;
          goto LABEL_128;
        }
LABEL_132:
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 976), v75, v69);
        if (!v21)
          goto LABEL_133;
LABEL_128:
        ++*(_DWORD *)(DerivedStorage + 904);
        v76 = *(_QWORD *)(DerivedStorage + 560);
        lhs.value = v103;
        lhs.timescale = v104;
        lhs.flags = flags;
        lhs.epoch = epoch;
        time.value = v125;
        time.timescale = v126;
        time.flags = v97;
        time.epoch = v94;
        v22 = APMessageRingBufferedEnqueueMessageForSending(v76, (CMBlockBufferRef)v119, (__int128 *)&lhs.value, (__int128 *)&time.value);
        goto LABEL_150;
      }
    }
    else
    {
      if (!*(_QWORD *)(DerivedStorage + 968))
        goto LABEL_120;
      v77 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      lhs.value = v103;
      lhs.timescale = v104;
      lhs.flags = flags;
      lhs.epoch = epoch;
      v78 = CMTimeCopyAsDictionary(&lhs, v77);
      if (v78)
      {
        v69 = v78;
        v75 = *(const void **)(DerivedStorage + 968);
        goto LABEL_132;
      }
    }
    APSLogErrorAt();
    v22 = 4294951816;
    goto LABEL_153;
  }
  if (v66)
  {
    v67 = *(_QWORD *)(DerivedStorage + 1680);
    v68 = *(void (**)(uint64_t, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
    if (v68)
    {
      lhs.value = v103;
      lhs.timescale = v104;
      lhs.flags = flags;
      lhs.epoch = epoch;
      v68(v67, v66, &lhs);
    }
  }
  v69 = *(CFDictionaryRef *)(DerivedStorage + 968);
  if (!v69)
    goto LABEL_127;
  v70 = *(_QWORD *)(DerivedStorage + 1680);
  v71 = *(void (**)(uint64_t, CFDictionaryRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
  if (v71)
  {
    lhs.value = v103;
    lhs.timescale = v104;
    lhs.flags = flags;
    lhs.epoch = epoch;
    v71(v70, v69, &lhs);
  }
LABEL_120:
  v69 = 0;
  if (v21)
    goto LABEL_128;
LABEL_133:
  v79 = v119;
  v80 = CMBaseObjectGetDerivedStorage();
  if (!v79)
  {
    APSLogErrorAt();
    v22 = 4294951815;
    goto LABEL_143;
  }
  v81 = v80;
  v82 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if ((*(_QWORD *)(v80 + 568)
     || (Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]),
         (*(_QWORD *)(v81 + 568) = Mutable) != 0))
    && (lhs.value = v103,
        lhs.timescale = v104,
        lhs.flags = flags,
        lhs.epoch = epoch,
        (v84 = CMTimeCopyAsDictionary(&lhs, v82)) != 0))
  {
    v85 = v84;
    lhs.value = v125;
    lhs.timescale = v126;
    lhs.flags = v97;
    lhs.epoch = v94;
    v86 = CMTimeCopyAsDictionary(&lhs, v82);
    if (v86)
    {
      v87 = v86;
      lhs.value = (CMTimeValue)v79;
      *(_QWORD *)&lhs.timescale = v85;
      lhs.epoch = (CMTimeEpoch)v86;
      v88 = CFArrayCreate(v82, (const void **)&lhs, 3, MEMORY[0x1E0C9B378]);
      if (v88)
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(v81 + 568), v88);
        v22 = 0;
      }
      else
      {
        APSLogErrorAt();
        v22 = 4294951816;
      }
      CFRelease(v87);
      CFRelease(v85);
      if (v88)
        CFRelease(v88);
      goto LABEL_142;
    }
    APSLogErrorAt();
    CFRelease(v85);
  }
  else
  {
    APSLogErrorAt();
  }
  v22 = 4294951816;
LABEL_142:
  v60 = v106;
LABEL_143:
  if (gLogCategory_APAudioEngineBuffered <= 10
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (v60)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
LABEL_150:
  if (!(_DWORD)v22)
  {
    *(_QWORD *)(a3 + 32) += FramesPerPacket;
    ++*(_QWORD *)(DerivedStorage + 1128);
    if (!v69)
      goto LABEL_153;
    goto LABEL_152;
  }
  APSLogErrorAt();
  if (v69)
LABEL_152:
    CFRelease(v69);
LABEL_153:
  if (cf)
    CFRelease(cf);
  if (v119)
    CFRelease(v119);
  if (v46)
    CFRelease(v46);
  return v22;
}

uint64_t bufferedAudioEngine_shouldUseReceiverChoosesAnchor()
{
  uint64_t DerivedStorage;
  const __CFBoolean *v1;
  uint64_t CMBaseObject;
  void (*v3)(uint64_t, const __CFString *, _QWORD, const __CFBoolean **);
  const __CFBoolean *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = (const __CFBoolean *)*MEMORY[0x1E0C9AE40];
  v5 = (const __CFBoolean *)*MEMORY[0x1E0C9AE40];
  if (APSSettingsIsFeatureEnabled())
  {
    CMBaseObject = APAudioHoseManagerBufferedGetCMBaseObject(*(_QWORD *)(DerivedStorage + 1680));
    v3 = *(void (**)(uint64_t, const __CFString *, _QWORD, const __CFBoolean **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
    if (v3)
    {
      v3(CMBaseObject, CFSTR("ShouldUseReceiverChoosesAnchor"), *MEMORY[0x1E0C9AE00], &v5);
      v1 = v5;
    }
    return CFBooleanGetValue(v1);
  }
  else
  {
    return *(_DWORD *)(DerivedStorage + 592) == 1 && !APSGetFBOPropertyInt64() && APSGetFBOPropertyInt64() != 0;
  }
}

uint64_t bufferedAudioEngine_handleSetRateToOneWithReceiverAnchor(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, _BYTE *, _QWORD, const void *);
  uint64_t v12;
  __int128 *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ProtocolVTable;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, _BYTE *, _QWORD, const void *);
  int32_t SampleRateFromTransportAudioFormat;
  int32_t v21;
  const void *v22;
  const void *v23;
  _BYTE v25[28];
  _OWORD v26[2];
  __int128 v27;
  _BYTE v28[28];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 584);
  v4 = *(double *)(DerivedStorage + 816);
  v26[0] = *MEMORY[0x1E0CF72D8];
  *(_OWORD *)((char *)v26 + 12) = *(_OWORD *)(MEMORY[0x1E0CF72D8] + 12);
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_32;
  v5 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 804) != 1937207905)
    goto LABEL_32;
  v6 = v4;
  CMBaseObjectGetDerivedStorage();
  if (APSSettingsIsFeatureEnabled())
  {
    if ((*(_DWORD *)(v5 + 736) & 1) != 0)
      v7 = (__int128 *)(v5 + 732);
    else
      v7 = (__int128 *)(v5 + 708);
    if ((*(_DWORD *)(v5 + 736) & 1) != 0)
      v8 = (uint64_t *)(v5 + 724);
    else
      v8 = (uint64_t *)(v5 + 700);
    v9 = *v8;
    v27 = *v7;
    if (*(_BYTE *)(v5 + 520))
    {
      *(_QWORD *)v28 = v9;
      *(_OWORD *)&v28[8] = v27;
      APSAudioTransportTimeMakeWithMediaTime();
      if (!a1)
        goto LABEL_13;
    }
    else
    {
      SampleRateFromTransportAudioFormat = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
      *(_QWORD *)v25 = v9;
      *(_OWORD *)&v25[8] = v27;
      CMTimeConvertScale((CMTime *)v28, (CMTime *)v25, SampleRateFromTransportAudioFormat, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      APSAudioTransportTimeMakeWithRTPTime();
      if (!a1)
      {
LABEL_13:
        v10 = *(_QWORD *)(v5 + 1680);
        *(_OWORD *)v25 = v26[0];
        *(_OWORD *)&v25[12] = *(_OWORD *)((char *)v26 + 12);
        v11 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 48);
        if (v11)
        {
          *(_OWORD *)v28 = *(_OWORD *)v25;
          *(_OWORD *)&v28[12] = *(_OWORD *)&v25[12];
          v12 = v11(v10, v6, v28, bufferedAudioEngine_hoseManagerSetRateCallbackCompletionHandler, a1);
        }
        else
        {
          v12 = 4294954514;
        }
        goto LABEL_41;
      }
    }
    CFRetain(a1);
    goto LABEL_13;
  }
  if (!*(_QWORD *)(v5 + 584))
  {
LABEL_32:
    v12 = 0;
    goto LABEL_41;
  }
  if ((*(_DWORD *)(v5 + 736) & 1) != 0)
    v13 = (__int128 *)(v5 + 732);
  else
    v13 = (__int128 *)(v5 + 708);
  if ((*(_DWORD *)(v5 + 736) & 1) != 0)
    v14 = (uint64_t *)(v5 + 724);
  else
    v14 = (uint64_t *)(v5 + 700);
  v15 = *v14;
  v27 = *v13;
  if (*(_BYTE *)(v5 + 520))
  {
    *(_QWORD *)v28 = v15;
    *(_OWORD *)&v28[8] = v27;
    APSAudioTransportTimeMakeWithMediaTime();
    if (!a1)
      goto LABEL_25;
    goto LABEL_24;
  }
  v21 = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
  *(_QWORD *)v25 = v15;
  *(_OWORD *)&v25[8] = v27;
  CMTimeConvertScale((CMTime *)v28, (CMTime *)v25, v21, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  APSAudioTransportTimeMakeWithRTPTime();
  if (a1)
LABEL_24:
    CFRetain(a1);
LABEL_25:
  v16 = *(_QWORD *)(*(_QWORD *)(v5 + 584) + 16);
  *(_OWORD *)v25 = v26[0];
  *(_OWORD *)&v25[12] = *(_OWORD *)((char *)v26 + 12);
  APSEndpointStreamAudioHoseProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable && (v18 = *(_QWORD *)(ProtocolVTable + 16)) != 0)
  {
    v19 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _QWORD, const void *))(v18 + 80);
    if (v19)
    {
      *(_OWORD *)v28 = *(_OWORD *)v25;
      *(_OWORD *)&v28[12] = *(_OWORD *)&v25[12];
      v12 = v19(v16, v6, v28, bufferedAudioEngine_hoseSetRateCallbackCompletionHandler, a1);
    }
    else
    {
      v12 = 4294954514;
      bufferedAudioEngine_hoseSetRateCallbackCompletionHandler(v16, MEMORY[0x1E0CF72D8], MEMORY[0x1E0CF7500], 4294954514, a1);
    }
  }
  else
  {
    v12 = 4294954508;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + 584) + 140) = 3;
  v22 = *(const void **)(v5 + 864);
  v23 = *(const void **)(v3 + 16);
  *(_QWORD *)(v5 + 864) = v23;
  if (v23)
    CFRetain(v23);
  if (v22)
    CFRelease(v22);
LABEL_41:
  CMBaseObjectGetDerivedStorage();
  return v12;
}

uint64_t bufferedAudioEngine_handleSetRateToOne(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  CMTimeEpoch v5;
  CMTimeEpoch v6;
  uint64_t v7;
  uint64_t *v8;
  OpaqueCMClock *v9;
  OpaqueCMClock *HostTimeClock;
  CMTimeValue *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t MaxFirstAvailableTransportTimestampForStartUp;
  const void *v16;
  __int128 v17;
  CMTimeValue v18;
  CMTimeScale v19;
  int v20;
  __int128 v21;
  int32_t v22;
  char v23;
  int v24;
  CFDictionaryRef v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  const __CFAllocator *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CMClockRef v33;
  const void *v34;
  OpaqueCMTimebase *v35;
  uint64_t v36;
  const __CFAllocator *v37;
  OpaqueCMClock *v38;
  uint64_t v39;
  OpaqueCMClock *v40;
  uint64_t v41;
  float Seconds;
  uint64_t v43;
  uint64_t v44;
  CMTimeValue v45;
  CMTimeScale v46;
  CMTimeValue v47;
  CMTimeScale v48;
  const void *v49;
  CMClockRef v50;
  __int128 v51;
  __int128 v52;
  const void *v53;
  uint64_t v55;
  __int128 v56;
  const void *v57;
  CMTimeValue *v58;
  __int128 v59;
  CMTime v60;
  CMTime v61;
  _BYTE time[28];
  CMTime v63;
  CMTime v64;
  CMTime v65;
  _BYTE v66[28];
  CMTime v67;
  CMTime rhs;
  CMTime lhs;
  void *values;
  void *keys;
  uint64_t v72;
  int v73;
  CMTime v74;
  CMTime v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = MEMORY[0x1E0CA2E18];
  if (!*(_BYTE *)DerivedStorage && *(_DWORD *)(DerivedStorage + 804) == 1937011305)
  {
    v55 = DerivedStorage;
    CMBaseObjectGetDerivedStorage();
    v4 = CMBaseObjectGetDerivedStorage();
    *(_OWORD *)&v75.value = *(_OWORD *)v3;
    v5 = *(_QWORD *)(v3 + 16);
    v75.epoch = v5;
    *(_OWORD *)&v74.value = *(_OWORD *)&v75.value;
    v74.epoch = v5;
    v72 = *(_QWORD *)(v3 + 12);
    v73 = *(_DWORD *)(v3 + 20);
    v56 = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)&v67.value = *MEMORY[0x1E0CA2E68];
    v6 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    v67.epoch = v6;
    *(_OWORD *)v66 = *MEMORY[0x1E0CF72D8];
    *(_OWORD *)&v66[12] = *(_OWORD *)(MEMORY[0x1E0CF72D8] + 12);
    *(_OWORD *)&v65.value = *(_OWORD *)&v75.value;
    v65.epoch = v5;
    v59 = *(_OWORD *)&v75.value;
    *(_OWORD *)&v64.value = *(_OWORD *)&v75.value;
    v64.epoch = v5;
    if (*(_DWORD *)(v4 + 804) != 1937011305)
      goto LABEL_75;
    v7 = v4;
    v8 = (uint64_t *)(v4 + 700);
    CMBaseObjectGetDerivedStorage();
    if ((*(_BYTE *)(v7 + 836) & 1) != 0)
    {
      v75 = *(CMTime *)(v7 + 824);
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        *(CMTime *)time = v75;
        CMTimeGetSeconds((CMTime *)time);
        HostTimeClock = CMClockGetHostTimeClock();
        CMClockGetTime(&v63, HostTimeClock);
        CMTimeGetSeconds(&v63);
        goto LABEL_19;
      }
    }
    else
    {
      v9 = CMClockGetHostTimeClock();
      CMClockGetTime(&v75, v9);
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        *(CMTime *)time = v75;
        CMTimeGetSeconds((CMTime *)time);
LABEL_19:
        LogPrintF();
      }
    }
    v11 = v8 + 3;
    v12 = *(_DWORD *)(v7 + 836);
    v58 = v8 + 3;
    if ((*(_BYTE *)(v7 + 736) & 1) != 0)
    {
      if ((v12 & 1) != 0)
      {
        *(_OWORD *)&v67.value = v56;
        v67.epoch = v6;
      }
      else
      {
        bufferedAudioEngine_getStartUpDelay((uint64_t)a1, 1, (uint64_t)&v67);
      }
      MaxFirstAvailableTransportTimestampForStartUp = bufferedAudioEngine_getMaxFirstAvailableTransportTimestampForStartUp((uint64_t)a1, (uint64_t)v66);
      if ((_DWORD)MaxFirstAvailableTransportTimestampForStartUp)
      {
        v26 = MaxFirstAvailableTransportTimestampForStartUp;
        APSLogErrorAt();
LABEL_73:
        *(_QWORD *)(v7 + 816) = 0xBFF0000000000000;
        *(_OWORD *)v11 = v59;
        v11[2] = v5;
        bufferedAudioEngine_updatePlaybackState((uint64_t)a1, 1937010544);
        goto LABEL_74;
      }
      *(_OWORD *)time = *(_OWORD *)v66;
      *(_OWORD *)&time[12] = *(_OWORD *)&v66[12];
      v16 = (const void *)APSAudioTransportTimeCopyDebugDesc();
      *(_OWORD *)time = *(_OWORD *)v66;
      *(_OWORD *)&time[12] = *(_OWORD *)&v66[12];
      if (APSAudioTransportTimeIsValid())
      {
        if (*(_DWORD *)v66 == 2)
        {
          v57 = v16;
          v21 = *(_OWORD *)v11;
          lhs.epoch = v11[2];
          *(_OWORD *)&lhs.value = v21;
          rhs = *(CMTime *)&v66[4];
          CMTimeMaximum((CMTime *)time, &lhs, &rhs);
        }
        else
        {
          if (*(_DWORD *)v66 != 1)
          {
            v25 = 0;
            v26 = 4294960587;
            if (!v16)
              goto LABEL_70;
            goto LABEL_69;
          }
          v57 = v16;
          CMTimeMake(&v61, (*(_DWORD *)&v66[4] - *(_DWORD *)v11) & ~((*(_DWORD *)&v66[4] - *(_DWORD *)v11) >> 31), *(_DWORD *)(v7 + 732));
          v17 = *(_OWORD *)v11;
          lhs.epoch = v11[2];
          *(_OWORD *)&lhs.value = v17;
          CMTimeAdd((CMTime *)time, &lhs, &v61);
        }
        v18 = *(_QWORD *)time;
        v19 = *(_DWORD *)&time[8];
        v72 = *(_QWORD *)&time[12];
        v20 = *(_DWORD *)&time[20];
      }
      else
      {
        v57 = v16;
        v18 = *v11;
        v19 = *(_DWORD *)(v7 + 732);
        v72 = *(_QWORD *)(v7 + 736);
        v20 = *(_DWORD *)(v7 + 744);
      }
      v73 = v20;
      v22 = *(_DWORD *)(v7 + 732);
      lhs.value = v18;
      *(_QWORD *)&lhs.flags = v72;
      lhs.timescale = v19;
      HIDWORD(lhs.epoch) = v20;
      v23 = 1;
      CMTimeConvertScale((CMTime *)time, &lhs, v22, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      v13 = *(_QWORD *)time;
      v24 = *(_DWORD *)&time[8];
      v72 = *(_QWORD *)&time[12];
      v73 = *(_DWORD *)&time[20];
      lhs = v75;
      rhs = v67;
      CMTimeAdd((CMTime *)time, &lhs, &rhs);
      v75 = *(CMTime *)time;
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        *(_QWORD *)time = v13;
        *(_DWORD *)&time[8] = v24;
        *(_QWORD *)&time[12] = v72;
        *(_DWORD *)&time[20] = v73;
        CMTimeGetSeconds((CMTime *)time);
        v28 = *(_OWORD *)v58;
        *(_QWORD *)&time[16] = v58[2];
        *(_OWORD *)time = v28;
        CMTimeGetSeconds((CMTime *)time);
        *(CMTime *)time = v67;
        CMTimeGetSeconds((CMTime *)time);
        LogPrintF();
        v23 = 1;
      }
    }
    else
    {
      if ((v12 & 1) != 0)
      {
        *(_OWORD *)&v67.value = v56;
        v67.epoch = v6;
      }
      else
      {
        bufferedAudioEngine_getStartUpDelay((uint64_t)a1, 0, (uint64_t)&v67);
      }
      v13 = *v8;
      v14 = *(_DWORD *)(v7 + 708);
      v72 = *(_QWORD *)(v7 + 712);
      v73 = *(_DWORD *)(v7 + 720);
      lhs = v75;
      rhs = v67;
      CMTimeAdd((CMTime *)time, &lhs, &rhs);
      v75 = *(CMTime *)time;
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        *(_QWORD *)time = v13;
        *(_DWORD *)&time[8] = v14;
        *(_QWORD *)&time[12] = v72;
        *(_DWORD *)&time[20] = v73;
        CMTimeGetSeconds((CMTime *)time);
        v27 = *(_OWORD *)v8;
        *(_QWORD *)&time[16] = v8[2];
        *(_OWORD *)time = v27;
        CMTimeGetSeconds((CMTime *)time);
        *(CMTime *)time = v67;
        CMTimeGetSeconds((CMTime *)time);
        LogPrintF();
        v23 = 0;
        v57 = 0;
        v24 = v14;
      }
      else
      {
        v23 = 0;
        v57 = 0;
        v24 = v14;
      }
    }
    v29 = CFGetAllocator(a1);
    v30 = CMTimebaseCreateWithSourceClock(v29, *(CMClockRef *)(v7 + 448), (CMTimebaseRef *)(v7 + 792));
    if ((_DWORD)v30)
    {
      v26 = v30;
    }
    else
    {
      APSTimedInfoManagerResume();
      v31 = mach_absolute_time();
      *(CMTime *)time = v67;
      CMTimeGetSeconds((CMTime *)time);
      v32 = MillisecondsToUpTicks();
      bufferedAudioEngine_recordStartTimebaseTimeStampForRTC((uint64_t)a1, v32 + v31);
      v33 = CMClockGetHostTimeClock();
      v34 = *(const void **)(v7 + 448);
      *(CMTime *)time = v75;
      CMSyncConvertTime(&v74, (CMTime *)time, v33, v34);
      v35 = *(OpaqueCMTimebase **)(v7 + 792);
      *(_QWORD *)time = v13;
      *(_DWORD *)&time[8] = v24;
      *(_QWORD *)&time[12] = v72;
      *(_DWORD *)&time[20] = v73;
      lhs = v74;
      v36 = CMTimebaseSetRateAndAnchorTime(v35, 1.0, (CMTime *)time, &lhs);
      if (!(_DWORD)v36)
      {
        if (gLogCategory_APAudioEngineBuffered <= 50
          && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
        {
          if (a1)
            CMBaseObjectGetDerivedStorage();
          *(_QWORD *)time = v13;
          *(_DWORD *)&time[8] = v24;
          *(_QWORD *)&time[12] = v72;
          *(_DWORD *)&time[20] = v73;
          CMTimeGetSeconds((CMTime *)time);
          LogPrintF();
        }
        v37 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        values = *(void **)(v7 + 952);
        keys = CFSTR("ContentType");
        v25 = CFDictionaryCreate(v37, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v25)
        {
          *(_QWORD *)time = v13;
          *(_DWORD *)&time[8] = v24;
          *(_QWORD *)&time[12] = v72;
          *(_DWORD *)&time[20] = v73;
          APSTimedInfoManagerAddTimedInfo();
          bufferedAudioEngine_getPlaybackStartupTime(&v64);
          v38 = CMClockGetHostTimeClock();
          CMClockGetTime(&v60, v38);
          *(CMTime *)time = v75;
          CMTimeSubtract(&v65, (CMTime *)time, &v60);
          if (gLogCategory_APAudioEngineBuffered <= 50
            && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
          {
            if (a1)
              CMBaseObjectGetDerivedStorage();
            *(CMTime *)time = v65;
            CMTimeGetSeconds((CMTime *)time);
            *(CMTime *)time = v64;
            CMTimeGetSeconds((CMTime *)time);
            LogPrintF();
          }
          *(CMTime *)time = v65;
          CMTimeGetSeconds((CMTime *)time);
          kdebug_trace();
          v39 = CMBaseObjectGetDerivedStorage();
          v40 = CMClockGetHostTimeClock();
          CMClockGetTime((CMTime *)time, v40);
          *(_OWORD *)(v39 + 1620) = *(_OWORD *)time;
          *(_QWORD *)(v39 + 1636) = *(_QWORD *)&time[16];
          *(_DWORD *)(v39 + 1644) = *(_DWORD *)(v39 + 592);
          v41 = CMBaseObjectGetDerivedStorage();
          *(_OWORD *)time = *(_OWORD *)(v41 + 676);
          *(_QWORD *)&time[16] = *(_QWORD *)(v41 + 692);
          lhs = *(CMTime *)(v41 + 700);
          CMTimeSubtract(&rhs, (CMTime *)time, &lhs);
          Seconds = CMTimeGetSeconds(&rhs);
          *(float *)(v39 + 1648) = Seconds;
          bufferedAudioEngine_getStreamInfoForStartup((uint64_t)a1, (float *)(v39 + 1652), (float *)(v39 + 1656), (float *)(v39 + 1660), (_WORD *)(v39 + 1664), (char *)(v39 + 1670), (_WORD *)(v39 + 1666), (_WORD *)(v39 + 1668));
          *(_BYTE *)(v39 + 1671) = v23;
          kdebug_trace();
          bufferedAudioEngine_logStartupTime((uint64_t)a1);
          *(_QWORD *)(v7 + 808) = *(_QWORD *)(v7 + 816);
          *(_QWORD *)(v7 + 816) = 0xBFF0000000000000;
          v11 = v58;
          *(_OWORD *)v58 = v59;
          v58[2] = v5;
          bufferedAudioEngine_updatePlaybackState((uint64_t)a1, 1937011316);
          v26 = 0;
          v16 = v57;
          if (v57)
            goto LABEL_69;
LABEL_70:
          if (v25)
            CFRelease(v25);
          if ((_DWORD)v26)
            goto LABEL_73;
LABEL_75:
          v26 = bufferedAudioEngine_handleSetRateToOne_sendAnchorToAllHoses(a1);
          if (!(_DWORD)v26)
          {
            *(_OWORD *)(v55 + 1036) = *(_OWORD *)(v55 + 676);
            *(_QWORD *)(v55 + 1052) = *(_QWORD *)(v55 + 692);
            *(_OWORD *)(v55 + 1000) = v59;
            *(_QWORD *)(v55 + 1016) = v5;
            goto LABEL_77;
          }
LABEL_74:
          APSLogErrorAt();
LABEL_77:
          v3 = MEMORY[0x1E0CA2E18];
          goto LABEL_78;
        }
        APSLogErrorAt();
        v26 = 4294951816;
        goto LABEL_96;
      }
      v26 = v36;
    }
    APSLogErrorAt();
    v25 = 0;
LABEL_96:
    v16 = v57;
    v11 = v58;
    if (!v57)
      goto LABEL_70;
LABEL_69:
    CFRelease(v16);
    goto LABEL_70;
  }
  v26 = 0;
LABEL_78:
  CMBaseObjectGetDerivedStorage();
  v43 = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)v66 = *(_OWORD *)v3;
  *(_QWORD *)&v66[16] = *(_QWORD *)(v3 + 16);
  v75.value = *(_QWORD *)(v3 + 12);
  v75.timescale = *(_DWORD *)(v3 + 20);
  v74.value = v75.value;
  v74.timescale = v75.timescale;
  if (*(_QWORD *)(v43 + 872))
  {
    v44 = v43;
    if ((_DWORD)v26)
    {
      v45 = *(_QWORD *)v3;
      v46 = *(_DWORD *)(v3 + 8);
      v47 = v45;
      v48 = v46;
    }
    else
    {
      CMTimebaseGetTimeClampedAboveAnchorTime();
      v45 = *(_QWORD *)time;
      v46 = *(_DWORD *)&time[8];
      v75.value = *(_QWORD *)&time[12];
      v75.timescale = *(_DWORD *)&time[20];
      v49 = *(const void **)(v44 + 792);
      v50 = CMClockGetHostTimeClock();
      *(_QWORD *)time = v45;
      *(_DWORD *)&time[8] = v46;
      *(_QWORD *)&time[12] = v75.value;
      *(_DWORD *)&time[20] = v75.timescale;
      CMSyncConvertTime((CMTime *)v66, (CMTime *)time, v49, v50);
      lhs.value = v45;
      *(_QWORD *)&lhs.flags = v75.value;
      lhs.timescale = v46;
      HIDWORD(lhs.epoch) = v75.timescale;
      rhs = *(CMTime *)(v44 + 700);
      CMTimeSubtract((CMTime *)time, &lhs, &rhs);
      v47 = *(_QWORD *)time;
      v48 = *(_DWORD *)&time[8];
      v74.value = *(_QWORD *)&time[12];
      v74.timescale = *(_DWORD *)&time[20];
    }
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      *(_QWORD *)time = v47;
      *(_DWORD *)&time[8] = v48;
      *(_QWORD *)&time[12] = v74.value;
      *(_DWORD *)&time[20] = v74.timescale;
      CMTimeGetSeconds((CMTime *)time);
      *(_QWORD *)time = v45;
      *(_DWORD *)&time[8] = v46;
      *(_QWORD *)&time[12] = v75.value;
      *(_DWORD *)&time[20] = v75.timescale;
      CMTimeGetSeconds((CMTime *)time);
      v51 = *(_OWORD *)(v44 + 700);
      *(_QWORD *)&time[16] = *(_QWORD *)(v44 + 716);
      *(_OWORD *)time = v51;
      CMTimeGetSeconds((CMTime *)time);
      v52 = *(_OWORD *)(v44 + 724);
      *(_QWORD *)&time[16] = *(_QWORD *)(v44 + 740);
      *(_OWORD *)time = v52;
      CMTimeGetSeconds((CMTime *)time);
      LogPrintF();
    }
    v53 = *(const void **)(v44 + 888);
    *(_QWORD *)time = v47;
    *(_DWORD *)&time[8] = v48;
    *(_QWORD *)&time[12] = v74.value;
    *(_DWORD *)&time[20] = v74.timescale;
    lhs = *(CMTime *)v66;
    bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(a1, v26, (uint64_t)time, (uint64_t)&lhs, v53);
    *(_QWORD *)(v44 + 872) = 0;
    *(_QWORD *)(v44 + 880) = 0;
  }
  return v26;
}

uint64_t APSEndpointStreamAudioHoseGetAnchor(uint64_t a1, const void *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, const void *), const void *);

  APSEndpointStreamAudioHoseProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v5 = *(_QWORD *)(result + 16);
    if (v5)
    {
      v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, const void *), const void *))(v5 + 88);
      if (v6)
        return v6(a1, 1, bufferedAudioEngine_hoseGetAnchorCallbackCompletionHandler, a2);
      else
        return bufferedAudioEngine_hoseGetAnchorCallbackCompletionHandler(a1, MEMORY[0x1E0CF72D8], MEMORY[0x1E0CF7500], 4294954514, a2);
    }
  }
  return result;
}

uint64_t bufferedAudioEngine_hoseGetAnchorCallbackCompletionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  CMBaseObjectGetDerivedStorage();
  APSPriorityDispatcherSyncF();
  if (a5)
    CFRelease(a5);
  return 0;
}

uint64_t bufferedAudioEngine_handleSetRateToOne_sendAnchorToAllHoses(const void *a1)
{
  uint64_t DerivedStorage;
  __int128 v3;
  uint64_t v4;
  CMClockRef HostTimeClock;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, __int128 *);
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __CFDictionary *Mutable;
  CMClockRef v15;
  const void *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t MaxFirstAvailableTransportTimestampForStartUp;
  OpaqueCMClock *v22;
  int32_t SampleRateFromTransportAudioFormat;
  uint64_t v24;
  double v25;
  uint64_t (*v26)(uint64_t, _QWORD, _BYTE *, __int128 *, _BYTE *);
  double *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ProtocolVTable;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, _BYTE *, __int128 *, _BYTE *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *), const void *);
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  OpaqueCMClock *v42;
  CFTypeRef cf;
  _BYTE v45[28];
  _BYTE v46[28];
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[28];
  _BYTE v52[28];
  CMTime v53;
  _OWORD v54[2];
  _OWORD v55[2];
  __int128 v56;
  uint64_t v57;
  CMTime v58;
  _BYTE time[28];
  __int128 v60;
  uint64_t v61;
  _BYTE hostTime[28];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v58 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v56 = 0uLL;
  v57 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v55[0] = *MEMORY[0x1E0CF72D8];
  v3 = v55[0];
  *(_OWORD *)((char *)v55 + 12) = *(_OWORD *)(MEMORY[0x1E0CF72D8] + 12);
  v54[0] = v3;
  *(_OWORD *)((char *)v54 + 12) = *(_OWORD *)((char *)v55 + 12);
  if (*(_DWORD *)(DerivedStorage + 804) != 1937011316)
    return 0;
  v4 = DerivedStorage;
  CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(v4 + 760) = 0;
  *(_BYTE *)(v4 + 856) = 0;
  *(_QWORD *)(v4 + 848) = 0;
  HostTimeClock = CMClockGetHostTimeClock();
  CMSyncGetTime(&v58, HostTimeClock);
  v6 = *(_QWORD *)(v4 + 328);
  *(CMTime *)hostTime = v58;
  v7 = CMClockConvertHostTimeToSystemUnits((CMTime *)hostTime);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v8)
  {
    v9 = v8(v6, v7, &v56);
    if (!v9)
      goto LABEL_33;
  }
  else
  {
    v9 = -12782;
  }
  if (gLogCategory_APAudioEngineBuffered <= 90
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    *(CMTime *)hostTime = v58;
    CMTimeGetSeconds((CMTime *)hostTime);
    *(CMTime *)hostTime = v58;
    CMClockConvertHostTimeToSystemUnits((CMTime *)hostTime);
    LogPrintF();
  }
  v10 = mach_absolute_time();
  v11 = *(_QWORD *)(v4 + 752);
  if (!v11)
  {
    v11 = MillisecondsToUpTicks() + v10;
    *(_QWORD *)(v4 + 752) = v11;
  }
  if (v10 < v11)
  {
    v12 = 0;
    *(_BYTE *)(v4 + 760) = 1;
    return v12;
  }
  v13 = *(uint64_t **)(CMBaseObjectGetDerivedStorage() + 584);
  if (gLogCategory_APAudioEngineBuffered <= 90
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    FigCFDictionarySetInt32();
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA46E8], CFSTR("Network clock failed to lock"));
  }
  for (; v13; v13 = (uint64_t *)*v13)
  {
    if (!*((_BYTE *)v13 + 24))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
  }
  bufferedAudioEngine_sendSessionFailureEvent((uint64_t)a1, CFSTR("Network clock failed to lock"));
  bufferedAudioEngine_maybeTriggerTTR((uint64_t)a1, 0, 0, v9);
  if (Mutable)
    CFRelease(Mutable);
  if (!*(_BYTE *)(v4 + 1080))
    return 0;
LABEL_33:
  *(_QWORD *)(v4 + 752) = 0;
  v15 = CMClockGetHostTimeClock();
  v16 = *(const void **)(v4 + 792);
  *(CMTime *)time = v58;
  CMSyncConvertTime((CMTime *)hostTime, (CMTime *)time, v15, v16);
  v17 = *(_DWORD *)&hostTime[12];
  if ((hostTime[12] & 0x1D) != 1)
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  v18 = *(_QWORD *)hostTime;
  v19 = *(_DWORD *)&hostTime[8];
  v20 = *(_QWORD *)&hostTime[16];
  MaxFirstAvailableTransportTimestampForStartUp = bufferedAudioEngine_getMaxFirstAvailableTransportTimestampForStartUp((uint64_t)a1, (uint64_t)v55);
  if ((_DWORD)MaxFirstAvailableTransportTimestampForStartUp)
  {
    v12 = MaxFirstAvailableTransportTimestampForStartUp;
    APSLogErrorAt();
    return v12;
  }
  *(_OWORD *)hostTime = v55[0];
  *(_OWORD *)&hostTime[12] = *(_OWORD *)((char *)v55 + 12);
  cf = (CFTypeRef)APSAudioTransportTimeCopyDebugDesc();
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    *(_QWORD *)hostTime = v18;
    *(_DWORD *)&hostTime[8] = v19;
    *(_DWORD *)&hostTime[12] = v17;
    *(_QWORD *)&hostTime[16] = v20;
    CMTimeGetSeconds((CMTime *)hostTime);
    *(_OWORD *)hostTime = *(_OWORD *)(v4 + 700);
    *(_QWORD *)&hostTime[16] = *(_QWORD *)(v4 + 716);
    CMTimeGetSeconds((CMTime *)hostTime);
    *(CMTime *)hostTime = v58;
    CMTimeGetSeconds((CMTime *)hostTime);
    v22 = CMClockGetHostTimeClock();
    CMClockGetTime(&v53, v22);
    CMTimeGetSeconds(&v53);
    LogPrintF();
  }
  if (*(_BYTE *)(v4 + 520))
  {
    *(_QWORD *)hostTime = v18;
    *(_DWORD *)&hostTime[8] = v19;
    *(_DWORD *)&hostTime[12] = v17;
    *(_QWORD *)&hostTime[16] = v20;
    APSAudioTransportTimeMakeWithMediaTime();
  }
  else
  {
    SampleRateFromTransportAudioFormat = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
    *(_QWORD *)time = v18;
    *(_DWORD *)&time[8] = v19;
    *(_DWORD *)&time[12] = v17;
    *(_QWORD *)&time[16] = v20;
    CMTimeConvertScale((CMTime *)hostTime, (CMTime *)time, SampleRateFromTransportAudioFormat, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    APSAudioTransportTimeMakeWithRTPTime();
    v54[0] = *(_OWORD *)hostTime;
    *(_OWORD *)((char *)v54 + 12) = *(_OWORD *)&hostTime[12];
  }
  if (APSSettingsIsFeatureEnabled())
  {
    v24 = *(_QWORD *)(v4 + 1680);
    v25 = *(double *)(v4 + 808);
    *(_OWORD *)v51 = v54[0];
    *(_OWORD *)&v51[12] = *(_OWORD *)((char *)v54 + 12);
    v47 = v56;
    v49 = v57;
    *(_OWORD *)v45 = v55[0];
    *(_OWORD *)&v45[12] = *(_OWORD *)((char *)v55 + 12);
    v26 = *(uint64_t (**)(uint64_t, _QWORD, _BYTE *, __int128 *, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 40);
    if (v26)
    {
      *(_OWORD *)hostTime = *(_OWORD *)v51;
      *(_OWORD *)&hostTime[12] = *(_OWORD *)&v51[12];
      v60 = v47;
      v61 = v49;
      *(_OWORD *)time = *(_OWORD *)v45;
      *(_OWORD *)&time[12] = *(_OWORD *)&v45[12];
      v12 = v26(v24, v25, hostTime, &v60, time);
    }
    else
    {
      v12 = 4294954514;
    }
    goto LABEL_85;
  }
  v27 = *(double **)(v4 + 584);
  if (v27)
  {
    v28 = *MEMORY[0x1E0CF7380];
    v29 = *MEMORY[0x1E0C9AE50];
    while (1)
    {
      v30 = *(double *)(v4 + 808);
      if (v27[8] == v30)
        break;
      v31 = gLogCategory_APAudioEngineBuffered;
      if (*((_DWORD *)v27 + 35) != 2)
        goto LABEL_57;
      v32 = v30;
      if (gLogCategory_APAudioEngineBuffered <= 50
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      if (a1)
        CFRetain(a1);
      v33 = LogCategoryCopyOSLogHandle();
      if (v33)
        v34 = v33;
      else
        v34 = MEMORY[0x1E0C81028];
      if (os_signpost_enabled(v34))
      {
        v35 = *((_QWORD *)v27 + 2);
        *(_DWORD *)hostTime = 67109120;
        *(_DWORD *)&hostTime[4] = v35;
        _os_signpost_emit_with_name_impl(&dword_1C943B000, v34, OS_SIGNPOST_INTERVAL_BEGIN, 0x2B160578uLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_HOSE_SETRATE_1", "REQUEST hose=0x%x", hostTime, 8u);
      }
      v36 = *((_QWORD *)v27 + 2);
      *(_OWORD *)v52 = v54[0];
      *(_OWORD *)&v52[12] = *(_OWORD *)((char *)v54 + 12);
      v48 = v56;
      v50 = v57;
      *(_OWORD *)v46 = v55[0];
      *(_OWORD *)&v46[12] = *(_OWORD *)((char *)v55 + 12);
      APSEndpointStreamAudioHoseProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        v38 = *(_QWORD *)(ProtocolVTable + 16);
        if (v38)
        {
          v39 = *(void (**)(uint64_t, uint64_t, _BYTE *, __int128 *, _BYTE *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *), const void *))(v38 + 48);
          if (v39)
          {
            *(_OWORD *)hostTime = *(_OWORD *)v52;
            *(_OWORD *)&hostTime[12] = *(_OWORD *)&v52[12];
            v60 = v48;
            v61 = v50;
            *(_OWORD *)time = *(_OWORD *)v46;
            *(_OWORD *)&time[12] = *(_OWORD *)&v46[12];
            v39(v36, v32, hostTime, &v60, time, bufferedAudioEngine_hoseSetRateAndAnchorTimeCallbackCompletionHandler, a1);
          }
          else
          {
            bufferedAudioEngine_hoseSetRateAndAnchorTimeCallbackCompletionHandler(v36, 0, MEMORY[0x1E0CF72D8], MEMORY[0x1E0CF7500], MEMORY[0x1E0CF72D8], 4294954514, a1);
          }
        }
      }
      v40 = *((_QWORD *)v27 + 2);
      v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v41)
        v41(v40, v28, v29);
      v27[8] = *(double *)(v4 + 808);
      *((_DWORD *)v27 + 35) = 3;
LABEL_82:
      v27 = *(double **)v27;
      if (!v27)
        goto LABEL_83;
    }
    v31 = gLogCategory_APAudioEngineBuffered;
LABEL_57:
    if (v31 <= 50 && (v31 != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    goto LABEL_82;
  }
LABEL_83:
  v12 = 0;
LABEL_85:
  if ((*(_BYTE *)(v4 + 1228) & 1) == 0)
  {
    v42 = CMClockGetHostTimeClock();
    CMClockGetTime((CMTime *)hostTime, v42);
    *(_OWORD *)(v4 + 1216) = *(_OWORD *)hostTime;
    *(_QWORD *)(v4 + 1232) = *(_QWORD *)&hostTime[16];
  }
  if (cf)
    CFRelease(cf);
  return v12;
}

uint64_t bufferedAudioEngine_hoseManagerSetRateCallbackCompletionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  CMBaseObjectGetDerivedStorage();
  APSPriorityDispatcherSyncF();
  if (a5)
    CFRelease(a5);
  return 0;
}

uint64_t bufferedAudioEngine_hoseSetRateCallbackCompletionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  CMBaseObjectGetDerivedStorage();
  APSPriorityDispatcherSyncF();
  if (a5)
    CFRelease(a5);
  return 0;
}

void bufferedAudioEngine_hoseManagerSetRateCallbackCompletionHandlerInternal(uint64_t a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v3;
  int v4;
  int started;
  const void *v6;
  CMTime v7;
  _OWORD v8[2];

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    goto LABEL_43;
  v3 = DerivedStorage;
  if (!*(_QWORD *)(a1 + 16))
  {
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(_QWORD *)a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    goto LABEL_43;
  }
  if (DerivedStorage[802])
  {
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(_QWORD *)a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    bufferedAudioEngine_updatePlaybackState(*(_QWORD *)a1, 1937010793);
    started = bufferedAudioEngine_handleSetRateToZero(*(const void **)a1);
    v3[802] = 0;
    goto LABEL_26;
  }
  v4 = *(_DWORD *)(a1 + 80);
  if (v4)
  {
    if (v4 == 200501)
    {
      if (gLogCategory_APAudioEngineBuffered <= 90
        && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
      {
        if (*(_QWORD *)a1)
          CMBaseObjectGetDerivedStorage();
        LogPrintF();
      }
      bufferedAudioEngine_updatePlaybackState(*(_QWORD *)a1, 1937011305);
      started = bufferedAudioEngine_handleSetRateToOne(*(const void **)a1);
      goto LABEL_26;
    }
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(_QWORD *)a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(*(const void **)a1, *(unsigned int *)(a1 + 80), MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], 0);
    *((_QWORD *)v3 + 110) = 0;
    *((_QWORD *)v3 + 109) = 0;
    bufferedAudioEngine_updatePlaybackState(*(_QWORD *)a1, 1937010793);
    bufferedAudioEngine_handleTerminalSetRateErrorForHoseManager(*(_QWORD *)a1, *(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 80), 1);
LABEL_43:
    started = 0;
    goto LABEL_26;
  }
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (*(_QWORD *)a1)
      CMBaseObjectGetDerivedStorage();
    LogPrintF();
  }
  v6 = *(const void **)a1;
  v8[0] = *(_OWORD *)(a1 + 24);
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(a1 + 36);
  v7 = *(CMTime *)(a1 + 56);
  started = bufferedAudioEngine_startRemoteMediaTimebaseWithReceiverAnchor(v6, (uint64_t)v8, &v7);
  if (started)
  {
    if (gLogCategory_APAudioEngineBuffered <= 90
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (*(_QWORD *)a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    bufferedAudioEngine_handleTerminalSetRateErrorForHoseManager(*(_QWORD *)a1, *(_QWORD *)(a1 + 16), started, 0);
  }
LABEL_26:
  **(_DWORD **)(a1 + 88) = started;
}

uint64_t bufferedAudioEngine_handleSetRateToZero(const void *a1)
{
  CMTime *v2;
  CMTimeEpoch v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  OpaqueCMClock *HostTimeClock;
  CMClockRef v7;
  const void *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  OpaqueCMClock *v15;
  int32_t SampleRateFromTransportAudioFormat;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, _BYTE *, CMTime *, _BYTE *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ProtocolVTable;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, _BYTE *, CMTime *, _BYTE *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *), const void *);
  __int128 v32;
  OpaqueCMClock *v33;
  const void *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  CMTime *v40;
  CMTime *v41;
  unsigned int v43;
  CMTimeEpoch v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  CMTimeValue v48;
  uint64_t v49;
  unsigned int v50;
  __int128 v51;
  CMTimeEpoch v52;
  __int128 v53;
  CMTimeEpoch epoch;
  CMTime lhs;
  _BYTE v56[28];
  CMTime v57;
  _OWORD v58[2];
  CMTime v59;
  CMTime v60;
  _BYTE rhs[28];
  CMTime v62;
  _BYTE time[28];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = (CMTime *)MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v60.value = *MEMORY[0x1E0CA2E18];
  v3 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v60.epoch = v3;
  v45 = *(_OWORD *)&v60.value;
  *(_OWORD *)&v59.value = *(_OWORD *)&v60.value;
  v59.epoch = v3;
  v47 = *MEMORY[0x1E0CF72D8];
  v58[0] = *MEMORY[0x1E0CF72D8];
  v46 = *(_OWORD *)(MEMORY[0x1E0CF72D8] + 12);
  *(_OWORD *)((char *)v58 + 12) = v46;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  if (*(_BYTE *)DerivedStorage || *(_DWORD *)(DerivedStorage + 804) != 1937010793)
    goto LABEL_68;
  v44 = v3;
  CMBaseObjectGetDerivedStorage();
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v60, HostTimeClock);
  if (gLogCategory_APAudioEngineBuffered <= 50
    && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
  {
    if (a1)
      CMBaseObjectGetDerivedStorage();
    *(CMTime *)time = v60;
    CMTimeGetSeconds((CMTime *)time);
    LogPrintF();
  }
  v7 = CMClockGetHostTimeClock();
  v8 = *(const void **)(v5 + 792);
  *(CMTime *)rhs = v60;
  CMSyncConvertTime((CMTime *)time, (CMTime *)rhs, v7, v8);
  v9 = *(_QWORD *)time;
  v11 = *(_DWORD *)&time[8];
  v10 = *(_DWORD *)&time[12];
  v12 = *(_QWORD *)&time[16];
  if ((time[12] & 0x1D) == 1 || *(_BYTE *)(v5 + 802))
  {
    v13 = MEMORY[0x1E0CF7500];
    v50 = *(_DWORD *)(MEMORY[0x1E0CF7500] + 16);
    v48 = *MEMORY[0x1E0CF7500];
    v49 = *(_QWORD *)(MEMORY[0x1E0CF7500] + 8);
    v14 = (_QWORD *)(v5 + 724);
    if (gLogCategory_APAudioEngineBuffered <= 50
      && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      *(_QWORD *)time = v9;
      *(_DWORD *)&time[8] = v11;
      *(_DWORD *)&time[12] = v10;
      *(_QWORD *)&time[16] = v12;
      CMTimeGetSeconds((CMTime *)time);
      *(CMTime *)time = v60;
      CMTimeGetSeconds((CMTime *)time);
      v15 = CMClockGetHostTimeClock();
      CMClockGetTime(&v57, v15);
      CMTimeGetSeconds(&v57);
      LogPrintF();
    }
    *v14 = v9;
    *(_DWORD *)(v5 + 732) = v11;
    *(_DWORD *)(v5 + 736) = v10;
    *(_QWORD *)(v5 + 740) = v12;
    *(_QWORD *)(v5 + 808) = *(_QWORD *)(v5 + 816);
    if (*(_BYTE *)(v5 + 520))
    {
      *(_QWORD *)time = v9;
      *(_DWORD *)&time[8] = v11;
      *(_DWORD *)&time[12] = v10;
      *(_QWORD *)&time[16] = v12;
      APSAudioTransportTimeMakeWithMediaTime();
    }
    else
    {
      SampleRateFromTransportAudioFormat = bufferedAudioEngine_getSampleRateFromTransportAudioFormat();
      *(_QWORD *)rhs = v9;
      *(_DWORD *)&rhs[8] = v11;
      *(_DWORD *)&rhs[12] = v10;
      *(_QWORD *)&rhs[16] = v12;
      CMTimeConvertScale((CMTime *)time, (CMTime *)rhs, SampleRateFromTransportAudioFormat, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      APSAudioTransportTimeMakeWithRTPTime();
      v58[0] = *(_OWORD *)time;
      *(_OWORD *)((char *)v58 + 12) = *(_OWORD *)&time[12];
    }
    v17 = *(_DWORD *)(v13 + 20);
    v18 = *(double *)(v5 + 808);
    if (APSSettingsIsFeatureEnabled())
    {
      v19 = *(_QWORD *)(v5 + 1680);
      *(_OWORD *)v56 = v58[0];
      *(_OWORD *)&v56[12] = *(_OWORD *)((char *)v58 + 12);
      v20 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *, CMTime *, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 40);
      if (!v20)
      {
        v22 = 4294954514;
        goto LABEL_70;
      }
      *(_OWORD *)time = *(_OWORD *)v56;
      *(_OWORD *)&time[12] = *(_OWORD *)&v56[12];
      v62.value = v48;
      *(_QWORD *)&v62.timescale = v49;
      v62.epoch = __PAIR64__(v17, v50);
      *(_OWORD *)rhs = v47;
      *(_OWORD *)&rhs[12] = v46;
      v21 = v20(v19, v18, time, &v62, rhs);
      if ((_DWORD)v21)
      {
        v22 = v21;
LABEL_70:
        APSLogErrorAt();
        v2 = (CMTime *)MEMORY[0x1E0CA2E18];
        goto LABEL_71;
      }
    }
    else
    {
      v43 = v17;
      v23 = *(_QWORD *)(v5 + 584);
      if (v23)
      {
        v24 = MEMORY[0x1E0C81028];
        do
        {
          v25 = LogCategoryCopyOSLogHandle();
          if (v25)
            v26 = v25;
          else
            v26 = v24;
          if (os_signpost_enabled(v26))
          {
            v27 = *(_QWORD *)(v23 + 16);
            *(_DWORD *)time = 67109120;
            *(_DWORD *)&time[4] = v27;
            _os_signpost_emit_with_name_impl(&dword_1C943B000, v26, OS_SIGNPOST_INTERVAL_BEGIN, 0x2B16057CuLL, "AIRPLAY_SIGNPOST_AUDIOENGINE_HOSE_SETRATE_0", "REQUEST hose=0x%x", time, 8u);
          }
          if (*(double *)(v23 + 64) == *(double *)(v5 + 808) || *(_DWORD *)(v23 + 140) != 3)
          {
            if (gLogCategory_APAudioEngineBuffered <= 50
              && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
            {
              if (a1)
                CMBaseObjectGetDerivedStorage();
              LogPrintF();
            }
          }
          else
          {
            if (gLogCategory_APAudioEngineBuffered <= 50
              && (gLogCategory_APAudioEngineBuffered != -1 || _LogCategory_Initialize()))
            {
              if (a1)
                CMBaseObjectGetDerivedStorage();
              LogPrintF();
            }
            bufferedAudioEngine_cancelRTCUnderrunForHose((uint64_t)a1, v23);
            if (a1)
              CFRetain(a1);
            v28 = *(_QWORD *)(v23 + 16);
            *(_OWORD *)v56 = v58[0];
            *(_OWORD *)&v56[12] = *(_OWORD *)((char *)v58 + 12);
            APSEndpointStreamAudioHoseProtocolGetProtocolID();
            ProtocolVTable = CMBaseObjectGetProtocolVTable();
            if (ProtocolVTable)
            {
              v30 = *(_QWORD *)(ProtocolVTable + 16);
              if (v30)
              {
                v31 = *(void (**)(uint64_t, uint64_t, _BYTE *, CMTime *, _BYTE *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *), const void *))(v30 + 48);
                if (v31)
                {
                  *(_OWORD *)time = *(_OWORD *)v56;
                  *(_OWORD *)&time[12] = *(_OWORD *)&v56[12];
                  v62.value = v48;
                  *(_QWORD *)&v62.timescale = v49;
                  v62.epoch = __PAIR64__(v43, v50);
                  *(_OWORD *)rhs = v47;
                  *(_OWORD *)&rhs[12] = v46;
                  v31(v28, v18, time, &v62, rhs, bufferedAudioEngine_hoseSetRateAndAnchorTimeCallbackCompletionHandler, a1);
                }
                else
                {
                  bufferedAudioEngine_hoseSetRateAndAnchorTimeCallbackCompletionHandler(v28, 0, MEMORY[0x1E0CF72D8], MEMORY[0x1E0CF7500], MEMORY[0x1E0CF72D8], 4294954514, a1);
                }
              }
            }
            *(_QWORD *)(v23 + 64) = *(_QWORD *)(v5 + 808);
            *(_DWORD *)(v23 + 140) = 2;
            *(_BYTE *)(v23 + 168) = 0;
          }
          v23 = *(_QWORD *)v23;
        }
        while (v23);
      }
    }
    v32 = *(_OWORD *)v14;
    *(_QWORD *)&time[16] = *(_QWORD *)(v5 + 740);
    *(_OWORD *)time = v32;
    *(_OWORD *)rhs = *(_OWORD *)(v5 + 700);
    *(_QWORD *)&rhs[16] = *(_QWORD *)(v5 + 716);
    CMTimeSubtract(&v59, (CMTime *)time, (CMTime *)rhs);
    if ((*(_BYTE *)(v5 + 1228) & 1) != 0)
    {
      memset(time, 0, 24);
      v33 = CMClockGetHostTimeClock();
      CMClockGetTime(&lhs, v33);
      *(_OWORD *)rhs = *(_OWORD *)(v5 + 1216);
      *(_QWORD *)&rhs[16] = *(_QWORD *)(v5 + 1232);
      CMTimeSubtract((CMTime *)time, &lhs, (CMTime *)rhs);
      *(_OWORD *)v56 = *(_OWORD *)(v5 + 1240);
      *(_QWORD *)&v56[16] = *(_QWORD *)(v5 + 1256);
      v62 = *(CMTime *)time;
      CMTimeAdd((CMTime *)rhs, (CMTime *)v56, &v62);
      *(_OWORD *)(v5 + 1240) = *(_OWORD *)rhs;
      *(_QWORD *)(v5 + 1256) = *(_QWORD *)&rhs[16];
      *(_OWORD *)(v5 + 1216) = v45;
      *(_QWORD *)(v5 + 1232) = v44;
    }
    APSTimedInfoManagerSuspend();
    v34 = *(const void **)(v5 + 792);
    v2 = (CMTime *)MEMORY[0x1E0CA2E18];
    if (v34)
    {
      CFRelease(v34);
      *(_QWORD *)(v5 + 792) = 0;
    }
    if (!APSSettingsIsFeatureEnabled())
    {
      v35 = *(_QWORD **)(v5 + 584);
      if (v35)
      {
        v36 = *MEMORY[0x1E0CF7380];
        v37 = *MEMORY[0x1E0C9AE40];
        do
        {
          v38 = v35[2];
          v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (v39)
            v39(v38, v36, v37);
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
    }
LABEL_68:
    v22 = 0;
    goto LABEL_71;
  }
  APSLogErrorAt();
  v22 = APSSignalErrorAt();
LABEL_71:
  *(_QWORD *)(v5 + 816) = 0xBFF0000000000000;
  bufferedAudioEngine_updatePlaybackState((uint64_t)a1, 1937010544);
  v40 = &v59;
  if ((_DWORD)v22)
    v40 = v2;
  v41 = &v60;
  if ((_DWORD)v22)
    v41 = v2;
  v53 = *(_OWORD *)&v40->value;
  epoch = v40->epoch;
  v51 = *(_OWORD *)&v41->value;
  v52 = v41->epoch;
  bufferedAudioEngine_callSetRateAndAnchorTimeClientCompletionCallback(a1, v22, (uint64_t)&v53, (uint64_t)&v51, 0);
  *(_BYTE *)(v5 + 760) = 0;
  *(_QWORD *)(v5 + 752) = 0;
  *(_QWORD *)(v5 + 880) = 0;
  *(_QWORD *)(v5 + 872) = 0;
  return v22;
}

