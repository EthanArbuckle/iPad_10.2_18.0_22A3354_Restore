uint64_t TCP::getLogClient(TCP *this)
{
  return (uint64_t)this + 152;
}

_OWORD *TCP::getSupportedTCPModesLowerCase@<X0>(uint64_t *a1@<X8>)
{
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  const char *v6;
  const char *v7;
  char *v8;
  char *v9;
  _OWORD *result;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  uint64_t v16;
  _DWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  v3 = operator new(0x18uLL);
  v3[4] = 0;
  *(_QWORD *)v3 = &v17;
  *((_QWORD *)v3 + 1) = &v17;
  v18 = v3;
  v4 = operator new(0x18uLL);
  v4[4] = 1;
  *(_QWORD *)v4 = v3;
  *((_QWORD *)v4 + 1) = &v17;
  *((_QWORD *)v3 + 1) = v4;
  v17 = v4;
  v19 = 2;
  do
  {
    v5 = v3[4];
    v15 = 0uLL;
    v16 = 0;
    if (v5)
      v6 = "Unknown";
    else
      v6 = "Server";
    if (v5 == 1)
      v7 = "Client";
    else
      v7 = v6;
    MEMORY[0x23B804D4C](&v15, v7);
    if (v16 >= 0)
      v8 = (char *)&v15 + HIBYTE(v16);
    else
      v8 = (char *)(v15 + *((_QWORD *)&v15 + 1));
    if (v16 >= 0)
      v9 = (char *)&v15;
    else
      v9 = (char *)v15;
    for (; v9 != v8; ++v9)
      *v9 = __tolower(*v9);
    result = operator new(0x28uLL);
    result[1] = v15;
    *((_QWORD *)result + 4) = v16;
    v11 = *a1;
    *(_QWORD *)result = *a1;
    *((_QWORD *)result + 1) = a1;
    *(_QWORD *)(v11 + 8) = result;
    *a1 = (uint64_t)result;
    ++a1[2];
    v3 = (_DWORD *)*((_QWORD *)v3 + 1);
  }
  while (v3 != (_DWORD *)&v17);
  if (v19)
  {
    v12 = v17;
    result = v18;
    v13 = *v18;
    *(_QWORD *)(v13 + 8) = *((_QWORD *)v17 + 1);
    **((_QWORD **)v12 + 1) = v13;
    v19 = 0;
    if (result != (_OWORD *)&v17)
    {
      do
      {
        v14 = (_QWORD *)*((_QWORD *)result + 1);
        operator delete(result);
        result = v14;
      }
      while (v14 != &v17);
    }
  }
  return result;
}

void sub_236E0E248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;

  do
  {
    v19 = (_QWORD *)v17[1];
    operator delete(v17);
    v17 = v19;
  }
  while (v19 != v18);
  std::list<std::string>::~list(v16);
  _Unwind_Resume(a1);
}

void sub_236E0E280(_Unwind_Exception *a1)
{
  char *v1;

  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_236E0E294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  char *v17;

  if (a16 < 0)
    operator delete(__p);
  std::list<TCP::Mode>::~list(&a17);
  std::list<std::string>::~list(v17);
  _Unwind_Resume(a1);
}

uint64_t TCP::asStringLowerCase@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  const char *v3;
  const char *v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = "Unknown";
  if (!a1)
    v3 = "Server";
  if (a1 == 1)
    v4 = "Client";
  else
    v4 = v3;
  result = MEMORY[0x23B804D4C](a2, v4);
  v6 = *(unsigned __int8 *)(a2 + 23);
  v7 = (char)v6;
  v8 = (_BYTE *)(a2 + v6);
  if (v7 >= 0)
    v9 = v8;
  else
    v9 = (_BYTE *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8));
  if (v7 >= 0)
    v10 = (_BYTE *)a2;
  else
    v10 = *(_BYTE **)a2;
  for (; v10 != v9; ++v10)
  {
    result = __tolower((char)*v10);
    *v10 = result;
  }
  return result;
}

void sub_236E0E360(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::list<TCP::Mode>::~list(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

char *std::list<std::string>::~list(char *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v6;

  if (*((_QWORD *)a1 + 2))
  {
    v2 = *(_QWORD *)a1;
    v3 = (char *)*((_QWORD *)a1 + 1);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*(_QWORD *)a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *((_QWORD *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v3 + 1);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

uint64_t TCP::asString@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  const char *v3;
  const char *v4;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = "Unknown";
  if (!a1)
    v3 = "Server";
  if (a1 == 1)
    v4 = "Client";
  else
    v4 = v3;
  return MEMORY[0x23B804D4C](a2, v4);
}

void sub_236E0E4B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t TCP::asTCPMode(char *a1)
{
  const char *v1;
  uint64_t result;

  v1 = a1;
  if (a1[23] < 0)
  {
    v1 = *(const char **)a1;
    result = strcasecmp(*(const char **)a1, "Server");
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    result = strcasecmp(a1, "Server");
    if (!(_DWORD)result)
      return result;
  }
  if (!strcasecmp(v1, "Client"))
    return 1;
  else
    return 2;
}

BOOL TCP::sendAllToDst(TCP *this, uint64_t a2, const unsigned __int8 *a3)
{
  unsigned int v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  ssize_t v9;
  ssize_t v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  int *v15;
  char *v16;
  const char *v17;
  uint8_t *p_buf;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  int *v26;
  char *v27;
  int *v28;
  char *v29;
  unint64_t v31;
  void *__p[2];
  char v33;
  void *v34;
  __int128 v35;
  _OWORD v36[3];
  __int128 v37;
  __int128 v38;
  uint8_t v39[4];
  char *v40;
  fd_set buf;
  uint64_t v42;

  v3 = a3;
  v4 = (int)this;
  v42 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37 = v5;
  v38 = v5;
  v36[1] = v5;
  v36[2] = v5;
  v36[0] = v5;
  v34 = operator new(0x28uLL);
  v35 = xmmword_236E51020;
  strcpy((char *)v34, "com.apple.telephony.basebandservices");
  v33 = 8;
  strcpy((char *)__p, "tcp.send");
  support::log::client::client(v36, (uint64_t)&v34, (uint64_t)__p);
  if (v33 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v35) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_21:
    operator delete(v34);
    goto LABEL_3;
  }
  if (SHIBYTE(v35) < 0)
    goto LABEL_21;
LABEL_3:
  v6 = 0;
  v7 = v3;
  v8 = 1 << v4;
  v31 = (unint64_t)v4 >> 5;
  while (1)
  {
    while (1)
    {
      v9 = send(v4, (const void *)(a2 + v6), v7 - v6, 0);
      v10 = v9;
      if (v9 < 0)
        break;
      v6 += v9;
      if (v6 == v7)
        goto LABEL_26;
    }
    v11 = *__error();
    v12 = *(NSObject **)v37;
    v13 = *(NSObject **)v37;
    if (v11 != 35)
    {
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        goto LABEL_25;
      v15 = __error();
      v16 = strerror(*v15);
      buf.fds_bits[0] = 136315138;
      *(_QWORD *)&buf.fds_bits[1] = v16;
      v17 = "error: %s";
      p_buf = (uint8_t *)&buf;
      v19 = v12;
      goto LABEL_33;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.fds_bits[0]) = 0;
      _os_log_impl(&dword_236E0D000, v12, OS_LOG_TYPE_DEFAULT, "warning: Dst socket busy, waiting", (uint8_t *)&buf, 2u);
    }
    memset(&buf, 0, sizeof(buf));
    if (__darwin_check_fd_set_overflow(v4, &buf, 0))
      buf.fds_bits[v31] |= v8;
    if (select(v4 + 1, 0, &buf, 0, 0) < 0)
      break;
    if (__darwin_check_fd_set_overflow(v4, &buf, 0) && (buf.fds_bits[v31] & v8) != 0)
    {
      v14 = *(NSObject **)v37;
      if (os_log_type_enabled(*(os_log_t *)v37, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v39 = 0;
        _os_log_impl(&dword_236E0D000, v14, OS_LOG_TYPE_INFO, "Dst socket became ready for writing", v39, 2u);
      }
      __darwin_check_fd_set_overflow(v4, &buf, 0);
    }
    if (v7 == v6)
      goto LABEL_25;
  }
  v20 = *(NSObject **)v37;
  if (!os_log_type_enabled(*(os_log_t *)v37, OS_LOG_TYPE_ERROR))
  {
LABEL_25:
    v21 = *(NSObject **)v37;
    if (!os_log_type_enabled(*(os_log_t *)v37, OS_LOG_TYPE_ERROR))
      goto LABEL_26;
    goto LABEL_34;
  }
  v26 = __error();
  v27 = strerror(*v26);
  *(_DWORD *)v39 = 136315138;
  v40 = v27;
  v17 = "error: Failed to register for write notification on Dst socket, error: %s";
  p_buf = v39;
  v19 = v20;
LABEL_33:
  _os_log_error_impl(&dword_236E0D000, v19, OS_LOG_TYPE_ERROR, v17, p_buf, 0xCu);
  v21 = *(NSObject **)v37;
  if (!os_log_type_enabled(*(os_log_t *)v37, OS_LOG_TYPE_ERROR))
  {
LABEL_26:
    *(_QWORD *)&v36[0] = &unk_25086AAF8;
    v22 = (std::__shared_weak_count *)v38;
    if (!(_QWORD)v38)
      return v10 >= 0;
    goto LABEL_27;
  }
LABEL_34:
  v28 = __error();
  v29 = strerror(*v28);
  buf.fds_bits[0] = 136315138;
  *(_QWORD *)&buf.fds_bits[1] = v29;
  _os_log_error_impl(&dword_236E0D000, v21, OS_LOG_TYPE_ERROR, "error: Failed to send data to destination, Error: %s", (uint8_t *)&buf, 0xCu);
  *(_QWORD *)&v36[0] = &unk_25086AAF8;
  v22 = (std::__shared_weak_count *)v38;
  if (!(_QWORD)v38)
    return v10 >= 0;
LABEL_27:
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  return v10 >= 0;
}

void sub_236E0E970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  support::log::client::~client((support::log::client *)&a25);
  _Unwind_Resume(a1);
}

void support::log::client::~client(support::log::client *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &unk_25086AAF8;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &unk_25086AAF8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(this);
  }
  else
  {
LABEL_5:
    operator delete(this);
  }
}

void TCP::create(int a1@<W0>, int a2@<W1>, NSObject **a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  NSObject *v9;
  NSObject *v10;

  v8 = operator new(0xE8uLL);
  v9 = *a3;
  v10 = v9;
  if (v9)
    dispatch_retain(v9);
  TCP::TCP((uint64_t)v8, a1, a2, &v10);
  std::shared_ptr<TCP>::shared_ptr[abi:ne180100]<TCP,std::shared_ptr<TCP> ctu::SharedSynchronizable<TCP>::make_shared_ptr<TCP>(TCP*)::{lambda(TCP*)#1},void>(a4, (uint64_t)v8);
  if (v9)
    dispatch_release(v9);
}

void sub_236E0EAE4(_Unwind_Exception *exception_object)
{
  void *v1;
  NSObject *v2;
  int v3;

  if (v2)
  {
    dispatch_release(v2);
    if (!v3)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v3)
  {
    goto LABEL_3;
  }
  operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t TCP::TCP(uint64_t a1, int a2, int a3, NSObject **a4)
{
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  char *v11;
  char *v12;
  void *__p;
  char v15;
  void *v16;
  __int128 v17;

  v8 = dispatch_queue_create("TCP", 0);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v8;
  if (v8)
  {
    v9 = v8;
    dispatch_retain(v8);
    *(_QWORD *)(a1 + 32) = 0;
    dispatch_release(v9);
    *(_QWORD *)a1 = off_25086A8F8;
    v10 = *a4;
    *(_QWORD *)(a1 + 40) = *a4;
    if (!v10)
      goto LABEL_4;
    goto LABEL_3;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = off_25086A8F8;
  v10 = *a4;
  *(_QWORD *)(a1 + 40) = *a4;
  if (v10)
LABEL_3:
    dispatch_retain(v10);
LABEL_4:
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = a2;
  *(_DWORD *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 84) = 0xFFFFFFFF00000001;
  *(_DWORD *)(a1 + 92) = -1;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v11 = (char *)operator new(0x100000uLL);
  *(_QWORD *)(a1 + 112) = v11;
  v12 = v11 + 0x100000;
  *(_QWORD *)(a1 + 128) = v11 + 0x100000;
  bzero(v11, 0x100000uLL);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 144) = 0;
  v16 = operator new(0x28uLL);
  v17 = xmmword_236E51020;
  strcpy((char *)v16, "com.apple.telephony.basebandservices");
  v15 = 3;
  LODWORD(__p) = 7365492;
  support::log::client::client((_QWORD *)(a1 + 152), (uint64_t)&v16, (uint64_t)&__p);
  if (v15 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      return a1;
LABEL_10:
    operator delete(v16);
    return a1;
  }
  if (SHIBYTE(v17) < 0)
    goto LABEL_10;
  return a1;
}

void sub_236E0ECBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _QWORD *v20;
  _QWORD *v21;
  void **v22;
  const void **v23;
  NSObject **v24;
  NSObject *v26;
  NSObject *v27;
  void *v28;
  const void *v29;
  NSObject *v30;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      v26 = v20[18];
      if (!v26)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  v26 = v20[18];
  if (!v26)
  {
LABEL_4:
    v27 = *v24;
    if (!*v24)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  dispatch_release(v26);
  v27 = *v24;
  if (!*v24)
  {
LABEL_5:
    v28 = *v22;
    if (!*v22)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  dispatch_release(v27);
  v28 = *v22;
  if (!*v22)
  {
LABEL_6:
    v29 = (const void *)v20[9];
    if (!v29)
    {
LABEL_14:
      if (*v23)
        _Block_release(*v23);
      v30 = v20[5];
      if (v30)
        dispatch_release(v30);
      ctu::SharedSynchronizable<TCP>::~SharedSynchronizable(v21);
      _Unwind_Resume(a1);
    }
LABEL_13:
    _Block_release(v29);
    goto LABEL_14;
  }
LABEL_12:
  v20[15] = v28;
  operator delete(v28);
  v29 = (const void *)v20[9];
  if (!v29)
    goto LABEL_14;
  goto LABEL_13;
}

_QWORD *ctu::SharedSynchronizable<TCP>::~SharedSynchronizable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = a1[2];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

BOOL TCP::configureServerMode_sync(TCP *this, int a2)
{
  uint64_t v2;
  int v5;
  int v6;
  NSObject *v7;
  unsigned int v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  NSObject *v15;
  int *v16;
  char *v17;
  NSObject *v18;
  int *v19;
  char *v20;
  int *v21;
  char *v22;
  int *v23;
  char *v24;
  int *v25;
  char *v26;
  int *v28;
  char *v29;
  socklen_t v30;
  uint8_t buf[4];
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (!*((_DWORD *)this + 12))
  {
    v5 = socket(2, 1, 0);
    *((_DWORD *)this + 22) = v5;
    if (v5 < 0)
    {
      v15 = **((_QWORD **)this + 25);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = __error();
        v17 = strerror(*v16);
        *(_DWORD *)buf = 136315138;
        v32 = v17;
        _os_log_error_impl(&dword_236E0D000, v15, OS_LOG_TYPE_ERROR, "error: [server] Failed to create socket, error: %s", buf, 0xCu);
      }
      return 0;
    }
    v30 = 1;
    if (setsockopt(v5, 0xFFFF, 4, &v30, 4u) < 0)
    {
      v18 = **((_QWORD **)this + 25);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        goto LABEL_33;
      v19 = __error();
      v20 = strerror(*v19);
      *(_DWORD *)buf = 136315138;
      v32 = v20;
      v12 = "error: [server] Failed to set socket options, error: %s";
    }
    else
    {
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
      *((_BYTE *)this + 97) = 2;
      *((_WORD *)this + 49) = bswap32(*((unsigned __int16 *)this + 28)) >> 16;
      if (bind(*((_DWORD *)this + 22), (const sockaddr *)this + 6, 0x10u) < 0)
      {
        v18 = **((_QWORD **)this + 25);
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          goto LABEL_33;
        v21 = __error();
        v22 = strerror(*v21);
        *(_DWORD *)buf = 136315138;
        v32 = v22;
        v12 = "error: [server] Failed to bind to the socket, error: %s";
      }
      else
      {
        if (!*((_DWORD *)this + 14))
        {
          v30 = 16;
          v6 = getsockname(*((_DWORD *)this + 22), (sockaddr *)this + 6, &v30);
          if (v6 < 0)
          {
            v7 = **((_QWORD **)this + 25);
            if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
            {
              v28 = __error();
              v29 = strerror(*v28);
              *(_DWORD *)buf = 136315138;
              v32 = v29;
              _os_log_error_impl(&dword_236E0D000, v7, OS_LOG_TYPE_ERROR, "error: [server] Failed to get socket address, error: %s", buf, 0xCu);
            }
            TCP::closeLocalSocket_sync(this);
            TCP::closeServerSocket_sync(this);
          }
          v8 = bswap32(*((unsigned __int16 *)this + 49)) >> 16;
          *((_DWORD *)this + 14) = v8;
          v9 = **((_QWORD **)this + 25);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v32) = v8;
            _os_log_impl(&dword_236E0D000, v9, OS_LOG_TYPE_INFO, "Assigned port number is %d", buf, 8u);
          }
          if (v6 < 0)
            return 0;
        }
        if (listen(*((_DWORD *)this + 22), *((_DWORD *)this + 21)) < 0)
        {
          v18 = **((_QWORD **)this + 25);
          if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            goto LABEL_33;
          v23 = __error();
          v24 = strerror(*v23);
          *(_DWORD *)buf = 136315138;
          v32 = v24;
          v12 = "error: [server] Failed to listen to the socket, error: %s";
        }
        else
        {
          if (!a2)
            return TCP::setServerSocketAcceptSource_sync((dispatch_queue_t *)this);
          v10 = accept(*((_DWORD *)this + 22), 0, 0);
          *((_DWORD *)this + 23) = v10;
          if ((v10 & 0x80000000) == 0)
          {
            v2 = 1;
            *((_BYTE *)this + 81) = 1;
            if ((TCP::setLocalSocketReadSource_sync(this) & 1) != 0)
              return v2;
            v11 = **((_QWORD **)this + 25);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              v12 = "error: [server] Failed to set read source for local socket";
              v13 = v11;
              v14 = 2;
LABEL_32:
              _os_log_error_impl(&dword_236E0D000, v13, OS_LOG_TYPE_ERROR, v12, buf, v14);
            }
LABEL_33:
            TCP::closeLocalSocket_sync(this);
            TCP::closeServerSocket_sync(this);
            return 0;
          }
          v18 = **((_QWORD **)this + 25);
          if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            goto LABEL_33;
          v25 = __error();
          v26 = strerror(*v25);
          *(_DWORD *)buf = 136315138;
          v32 = v26;
          v12 = "error: [server] Failed to accept connection, error: %s";
        }
      }
    }
    v13 = v18;
    v14 = 12;
    goto LABEL_32;
  }
  return 0;
}

uint64_t TCP::close_sync(TCP *this)
{
  _BOOL4 v2;

  v2 = TCP::closeLocalSocket_sync(this);
  return v2 & TCP::closeServerSocket_sync(this);
}

uint64_t TCP::setLocalSocketReadSource_sync(TCP *this)
{
  int v2;
  dispatch_source_t v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  unint64_t v14;
  NSObject *v16;
  _QWORD handler[6];
  std::__shared_weak_count *v18;
  uint8_t buf[16];

  if (!*((_BYTE *)this + 80))
    return 1;
  v2 = fcntl(*((_DWORD *)this + 23), 3, 0);
  fcntl(*((_DWORD *)this + 23), 4, v2 | 4);
  v3 = dispatch_source_create(MEMORY[0x24BDACA00], *((int *)this + 23), 0, *((dispatch_queue_t *)this + 5));
  v4 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v3;
  if (v4)
  {
    dispatch_release(v4);
    v3 = (dispatch_source_t)*((_QWORD *)this + 18);
  }
  if (v3)
  {
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v5 || (v6 = *((_QWORD *)this + 1), (v7 = std::__shared_weak_count::lock(v5)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v8 = v7;
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v8);
    }
    v13 = *((_QWORD *)this + 18);
    handler[0] = MEMORY[0x24BDAC760];
    handler[1] = 1174405120;
    handler[2] = ___ZN3TCP29setLocalSocketReadSource_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_9;
    handler[4] = this;
    handler[5] = v6;
    v18 = v8;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    dispatch_source_set_event_handler(v13, handler);
    dispatch_activate(*((dispatch_object_t *)this + 18));
    if (v18)
      std::__shared_weak_count::__release_weak(v18);
    std::__shared_weak_count::__release_weak(v8);
    return 1;
  }
  v16 = **((_QWORD **)this + 25);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_236E0D000, v16, OS_LOG_TYPE_ERROR, "error: Unable to create accept source for local client socket, closing local socket", buf, 2u);
  }
  TCP::closeLocalSocket_sync(this);
  return 0;
}

BOOL TCP::setServerSocketAcceptSource_sync(dispatch_queue_t *this)
{
  dispatch_source_t v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  dispatch_queue_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  unint64_t v13;
  NSObject *isa;
  _QWORD handler[6];
  std::__shared_weak_count *v17;
  uint8_t buf[16];

  v2 = dispatch_source_create(MEMORY[0x24BDACA00], *((int *)this + 22), 0, this[3]);
  v3 = this[17];
  this[17] = v2;
  if (v3)
  {
    dispatch_release(v3);
    v2 = this[17];
  }
  if (v2)
  {
    v4 = (std::__shared_weak_count *)this[2];
    if (!v4 || (v5 = this[1], (v6 = std::__shared_weak_count::lock(v4)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v7 = v6;
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
    }
    v12 = this[17];
    handler[0] = MEMORY[0x24BDAC760];
    handler[1] = 1174405120;
    handler[2] = ___ZN3TCP32setServerSocketAcceptSource_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp;
    handler[4] = this;
    handler[5] = v5;
    v17 = v7;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    dispatch_source_set_event_handler(v12, handler);
    dispatch_activate(this[17]);
    if (v17)
      std::__shared_weak_count::__release_weak(v17);
    std::__shared_weak_count::__release_weak(v7);
  }
  else
  {
    isa = this[25]->isa;
    if (os_log_type_enabled(isa, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_236E0D000, isa, OS_LOG_TYPE_ERROR, "error: [server] Unable to create accept source for server socket", buf, 2u);
    }
    TCP::closeLocalSocket_sync((TCP *)this);
    TCP::closeServerSocket_sync((TCP *)this);
  }
  return v2 != 0;
}

BOOL TCP::configureClientMode_sync(TCP *this)
{
  int v2;
  hostent *v3;
  _BOOL8 result;
  NSObject *v5;
  int *v6;
  char *v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  NSObject *v11;
  NSObject *v12;
  int *v13;
  char *v14;
  int v15;
  char *v16;
  sockaddr v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v17.sa_len = 0;
  *(_QWORD *)&v17.sa_data[6] = 0;
  v2 = socket(2, 1, 0);
  if (v2 < 0)
  {
    v5 = **((_QWORD **)this + 25);
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result)
      goto LABEL_13;
    v6 = __error();
    v7 = strerror(*v6);
    v15 = 136315138;
    v16 = v7;
    v8 = "error: [client] Failed to create socket, error: %s";
    v9 = v5;
    v10 = 12;
LABEL_9:
    _os_log_error_impl(&dword_236E0D000, v9, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v15, v10);
    result = 0;
    goto LABEL_13;
  }
  v3 = gethostbyname("localhost");
  if (!v3)
  {
    v11 = **((_QWORD **)this + 25);
    result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!result)
      goto LABEL_13;
    LOWORD(v15) = 0;
    v8 = "error: [client] Failed to get hostname";
    v9 = v11;
    v10 = 2;
    goto LABEL_9;
  }
  v17.sa_family = 2;
  memcpy(&v17.sa_data[2], *(const void **)v3->h_addr_list, v3->h_length);
  *(_WORD *)v17.sa_data = bswap32(*((unsigned __int16 *)this + 28)) >> 16;
  if (connect(v2, &v17, 0x10u) < 0)
  {
    v12 = **((_QWORD **)this + 25);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = __error();
      v14 = strerror(*v13);
      v15 = 136315138;
      v16 = v14;
      _os_log_error_impl(&dword_236E0D000, v12, OS_LOG_TYPE_ERROR, "error: [client] Failed to connect to the socket, error: %s", (uint8_t *)&v15, 0xCu);
    }
    close(v2);
    result = 0;
    v2 = -1;
  }
  else
  {
    result = 1;
  }
LABEL_13:
  *((_DWORD *)this + 23) = v2;
  return result;
}

uint64_t TCP::start(uint64_t a1, void **a2, void **a3, char a4)
{
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  _QWORD v12[2];
  void *v13;
  void *aBlock;
  char v15;
  unsigned __int8 v16;
  _QWORD block[6];

  v16 = 1;
  v12[0] = a1;
  v12[1] = &v16;
  v7 = *a3;
  if (*a3)
    v7 = _Block_copy(v7);
  v13 = v7;
  v8 = *a2;
  if (*a2)
    v8 = _Block_copy(v8);
  aBlock = v8;
  v15 = a4;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_5startEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEENS5_IU13block_pointerFvPKhjEEEbE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSM__block_invoke;
  block[3] = &__block_descriptor_tmp_16;
  block[4] = a1 + 8;
  block[5] = v12;
  v9 = *(NSObject **)(a1 + 24);
  if (!*(_QWORD *)(a1 + 32))
  {
    dispatch_sync(v9, block);
    v10 = aBlock;
    if (!aBlock)
      goto LABEL_10;
    goto LABEL_9;
  }
  dispatch_async_and_wait(v9, block);
  v10 = aBlock;
  if (aBlock)
LABEL_9:
    _Block_release(v10);
LABEL_10:
  if (v13)
    _Block_release(v13);
  return v16;
}

void ___ZN3TCP32setServerSocketAcceptSource_syncEv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  int *v16;
  char *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint8_t buf[4];
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = a1[4];
  v3 = **(NSObject ***)(v2 + 200);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v18) = 0;
    _os_log_debug_impl(&dword_236E0D000, v3, OS_LOG_TYPE_DEBUG, "New Connection, accept source is triggered", (uint8_t *)&v18, 2u);
    v18 = 0;
    v19 = 0;
    v4 = (std::__shared_weak_count *)a1[6];
    if (v4)
      goto LABEL_3;
LABEL_11:
    v5 = 0;
LABEL_12:
    v7 = 1;
LABEL_13:
    v8 = **(NSObject ***)(v2 + 200);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v21) = v7;
      _os_log_debug_impl(&dword_236E0D000, v8, OS_LOG_TYPE_DEBUG, "[server] tcp instance gone: %d", buf, 8u);
      if ((v7 & 1) != 0)
        goto LABEL_17;
    }
    else if ((v7 & 1) != 0)
    {
      goto LABEL_17;
    }
    v9 = **(NSObject ***)(v2 + 200);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_DWORD *)(v2 + 48);
      *(_DWORD *)buf = 67109120;
      LODWORD(v21) = v14;
      _os_log_debug_impl(&dword_236E0D000, v9, OS_LOG_TYPE_DEBUG, "[server] current state: %d", buf, 8u);
    }
LABEL_17:
    if (!v5)
      return;
    goto LABEL_18;
  }
  v18 = 0;
  v19 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    goto LABEL_11;
LABEL_3:
  v5 = std::__shared_weak_count::lock(v4);
  v19 = v5;
  if (!v5)
    goto LABEL_12;
  v18 = a1[5];
  if (!v18)
    goto LABEL_12;
  if (!*(_DWORD *)(v2 + 48))
  {
    v7 = 0;
    goto LABEL_13;
  }
  if (*(_BYTE *)(v2 + 81))
  {
    v6 = **(NSObject ***)(v2 + 200);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_236E0D000, v6, OS_LOG_TYPE_ERROR, "error: [server] A Client connection is already active, ignoring..", buf, 2u);
    }
  }
  else
  {
    v12 = accept(*(_DWORD *)(v2 + 88), 0, 0);
    *(_DWORD *)(v2 + 92) = v12;
    if (v12 < 0)
    {
      v15 = **(NSObject ***)(v2 + 200);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = __error();
        v17 = strerror(*v16);
        *(_DWORD *)buf = 136315138;
        v21 = v17;
        _os_log_error_impl(&dword_236E0D000, v15, OS_LOG_TYPE_ERROR, "error: [server] Async accept connection failed: %s", buf, 0xCu);
      }
    }
    else
    {
      *(_BYTE *)(v2 + 81) = 1;
      TCP::setLocalSocketReadSource_sync((TCP *)v2);
      *(_DWORD *)(v2 + 48) = 1;
      v13 = **(NSObject ***)(v2 + 200);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_236E0D000, v13, OS_LOG_TYPE_INFO, "[server] New Connection setup successfully", buf, 2u);
      }
    }
  }
LABEL_18:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_236E0FB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_236E0FB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c27_ZTSNSt3__18weak_ptrI3TCPEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c27_ZTSNSt3__18weak_ptrI3TCPEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

BOOL TCP::closeLocalSocket_sync(TCP *this)
{
  int v2;
  int v3;
  _BOOL8 v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  int *v9;
  char *v10;
  int v11;
  char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)this + 23);
  if (v2 < 0)
    return 1;
  v3 = close(v2);
  v4 = v3 == 0;
  if (v3)
  {
    v5 = **((_QWORD **)this + 25);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v9 = __error();
      v10 = strerror(*v9);
      v11 = 136315138;
      v12 = v10;
      _os_log_error_impl(&dword_236E0D000, v5, OS_LOG_TYPE_ERROR, "error: Failed to close local socket, Error: %s", (uint8_t *)&v11, 0xCu);
      if (*((_DWORD *)this + 13))
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  if (!*((_DWORD *)this + 13))
LABEL_5:
    *((_BYTE *)this + 81) = 0;
LABEL_6:
  *((_DWORD *)this + 23) = -1;
  v6 = *((_QWORD *)this + 18);
  if (v6)
  {
    dispatch_source_cancel(v6);
    v7 = *((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = 0;
    if (v7)
      dispatch_release(v7);
  }
  return v4;
}

void ___ZN3TCP29setLocalSocketReadSource_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  ssize_t v6;
  int *v7;
  char *v8;
  size_t v9;
  std::string::size_type v10;
  std::string *p_dst;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  std::string *v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::string __p;
  std::string __dst;
  uint64_t v23;
  std::__shared_weak_count *v24;
  __int128 block;
  void (*v26)(uint64_t);
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v24 = v4;
    if (v4)
    {
      v5 = v4;
      v23 = a1[5];
      if (!v23 || *(_DWORD *)(v3 + 48) != 1)
        goto LABEL_35;
      v6 = recv(*(_DWORD *)(v3 + 92), *(void **)(v3 + 112), 0x100000uLL, 0);
      if ((v6 & 0x8000000000000000) == 0)
      {
        if (v6)
        {
          (*(void (**)(void))(*(_QWORD *)(v3 + 64) + 16))();
        }
        else
        {
          v20 = v3;
          *(_QWORD *)&block = MEMORY[0x24BDAC760];
          *((_QWORD *)&block + 1) = 0x40000000;
          v26 = ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZZNS1_29setLocalSocketReadSource_syncEvEUb_E3__2EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
          v27 = &__block_descriptor_tmp_18;
          v28 = v3 + 8;
          v29 = &v20;
          v12 = *(NSObject **)(v3 + 24);
          if (*(_QWORD *)(v3 + 32))
            dispatch_async_and_wait(v12, &block);
          else
            dispatch_sync(v12, &block);
        }
LABEL_35:
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
      memset(&__dst, 170, sizeof(__dst));
      v7 = __error();
      v8 = strerror(*v7);
      v9 = strlen(v8);
      if (v9 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v10 = v9;
      if (v9 >= 0x17)
      {
        v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v9 | 7) != 0x17)
          v13 = v9 | 7;
        v14 = v13 + 1;
        p_dst = (std::string *)operator new(v13 + 1);
        __dst.__r_.__value_.__l.__size_ = v10;
        __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v9;
        p_dst = &__dst;
        if (!v9)
        {
LABEL_18:
          p_dst->__r_.__value_.__s.__data_[v10] = 0;
          v15 = **(NSObject ***)(v3 + 200);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v16 = &__dst;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v16 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            LODWORD(block) = 136315138;
            *(_QWORD *)((char *)&block + 4) = v16;
            _os_log_error_impl(&dword_236E0D000, v15, OS_LOG_TYPE_ERROR, "error: recv failed: %s", (uint8_t *)&block, 0xCu);
            v20 = v3;
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_20;
          }
          else
          {
            v20 = v3;
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_20:
              __p = __dst;
              goto LABEL_26;
            }
          }
          std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
LABEL_26:
          *(_QWORD *)&block = MEMORY[0x24BDAC760];
          *((_QWORD *)&block + 1) = 0x40000000;
          v26 = ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZZNS1_29setLocalSocketReadSource_syncEvEUb_E3__1EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
          v27 = &__block_descriptor_tmp_17;
          v28 = v3 + 8;
          v29 = &v20;
          v17 = *(NSObject **)(v3 + 24);
          if (*(_QWORD *)(v3 + 32))
          {
            dispatch_async_and_wait(v17, &block);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_29;
          }
          else
          {
            dispatch_sync(v17, &block);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_29:
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__dst.__r_.__value_.__l.__data_);
                v5 = v24;
                if (!v24)
                  return;
              }
              else
              {
                v5 = v24;
                if (!v24)
                  return;
              }
              goto LABEL_35;
            }
          }
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_29;
        }
      }
      memmove(p_dst, v8, v10);
      goto LABEL_18;
    }
  }
}

void sub_236E10028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

BOOL TCP::closeServerSocket_sync(TCP *this)
{
  _BOOL8 v1;
  int v4;
  int v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  int *v9;
  char *v10;
  int v11;
  char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 13))
    return 1;
  v4 = *((_DWORD *)this + 22);
  if (v4 < 0)
    return 1;
  v5 = close(v4);
  v1 = v5 == 0;
  if (v5 && (v6 = **((_QWORD **)this + 25), os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)))
  {
    v9 = __error();
    v10 = strerror(*v9);
    v11 = 136315138;
    v12 = v10;
    _os_log_error_impl(&dword_236E0D000, v6, OS_LOG_TYPE_ERROR, "error: Failed to close server socket, Error: %s", (uint8_t *)&v11, 0xCu);
    *((_DWORD *)this + 22) = -1;
    v7 = *((_QWORD *)this + 17);
    if (!v7)
      return v1;
  }
  else
  {
    *((_DWORD *)this + 22) = -1;
    v7 = *((_QWORD *)this + 17);
    if (!v7)
      return v1;
  }
  dispatch_source_cancel(v7);
  v8 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v8)
    dispatch_release(v8);
  return v1;
}

uint64_t TCP::stop(TCP *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v4[2];
  unsigned __int8 v5;
  _QWORD block[6];

  v5 = 1;
  v4[0] = this;
  v4[1] = &v5;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_4stopEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_20;
  block[4] = (char *)this + 8;
  block[5] = v4;
  v2 = (char *)this + 24;
  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
  return v5;
}

BOOL TCP::recv(TCP *this, unsigned __int8 *a2, int a3, unsigned int *a4)
{
  NSObject *v4;
  char *v5;
  NSObject *v6;
  _BOOL8 result;
  _QWORD v8[2];
  int v9;
  unsigned __int8 *v10;
  unsigned int *v11;
  char v12;
  _QWORD block[6];

  v12 = 1;
  if (a2 && a4)
  {
    v8[0] = this;
    v8[1] = &v12;
    v9 = a3;
    v10 = a2;
    v11 = a4;
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_4recvEPhjPjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    block[3] = &__block_descriptor_tmp_21;
    block[4] = (char *)this + 8;
    block[5] = v8;
    v5 = (char *)this + 24;
    v4 = *((_QWORD *)this + 3);
    if (*((_QWORD *)v5 + 1))
      dispatch_async_and_wait(v4, block);
    else
      dispatch_sync(v4, block);
    return v12 != 0;
  }
  else
  {
    v6 = **((_QWORD **)this + 25);
    result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      LOWORD(block[0]) = 0;
      _os_log_error_impl(&dword_236E0D000, v6, OS_LOG_TYPE_ERROR, "error: Invalid input parameter TCP Receive", (uint8_t *)block, 2u);
      return 0;
    }
  }
  return result;
}

BOOL TCP::send(TCP *this, const unsigned __int8 *a2, int a3)
{
  NSObject *v3;
  char *v4;
  NSObject *v5;
  _BOOL8 result;
  _QWORD v7[3];
  int v8;
  char v9;
  _QWORD block[6];

  v9 = 1;
  if (a2)
  {
    v7[0] = this;
    v7[1] = &v9;
    v7[2] = a2;
    v8 = a3;
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_4sendEPKhjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    block[3] = &__block_descriptor_tmp_22;
    block[4] = (char *)this + 8;
    block[5] = v7;
    v4 = (char *)this + 24;
    v3 = *((_QWORD *)this + 3);
    if (*((_QWORD *)v4 + 1))
      dispatch_async_and_wait(v3, block);
    else
      dispatch_sync(v3, block);
    return v9 != 0;
  }
  else
  {
    v5 = **((_QWORD **)this + 25);
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      LOWORD(block[0]) = 0;
      _os_log_error_impl(&dword_236E0D000, v5, OS_LOG_TYPE_ERROR, "error: Invalid input parameter for TCP Send", (uint8_t *)block, 2u);
      return 0;
    }
  }
  return result;
}

uint64_t TCP::getPortNumber(TCP *this, int *a2)
{
  NSObject *v2;
  char *v3;
  _QWORD v5[3];
  unsigned __int8 v6;
  _QWORD block[6];

  v6 = 1;
  v5[0] = this;
  v5[1] = &v6;
  v5[2] = a2;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_13getPortNumberERiE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  block[3] = &__block_descriptor_tmp_23;
  block[4] = (char *)this + 8;
  block[5] = v5;
  v3 = (char *)this + 24;
  v2 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v3 + 1))
    dispatch_async_and_wait(v2, block);
  else
    dispatch_sync(v2, block);
  return v6;
}

uint64_t TCP::asString@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  const char *v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1 >= 4)
    v2 = "Unknown";
  else
    v2 = off_25086AB18[a1];
  return MEMORY[0x23B804D4C](a2, v2);
}

void sub_236E104D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void TCP::~TCP(TCP *this)
{
  void *v1;

  TCP::~TCP(this);
  operator delete(v1);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  const void *v8;
  const void *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;

  *(_QWORD *)this = off_25086A8F8;
  *((_QWORD *)this + 19) = &unk_25086AAF8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *((_QWORD *)this + 18);
  if (v5)
    dispatch_release(v5);
  v6 = *((_QWORD *)this + 17);
  if (v6)
    dispatch_release(v6);
  v7 = (void *)*((_QWORD *)this + 14);
  if (v7)
  {
    *((_QWORD *)this + 15) = v7;
    operator delete(v7);
  }
  v8 = (const void *)*((_QWORD *)this + 9);
  if (v8)
    _Block_release(v8);
  v9 = (const void *)*((_QWORD *)this + 8);
  if (v9)
    _Block_release(v9);
  v10 = *((_QWORD *)this + 5);
  if (v10)
    dispatch_release(v10);
  v11 = *((_QWORD *)this + 4);
  if (v11)
    dispatch_release(v11);
  v12 = *((_QWORD *)this + 3);
  if (v12)
    dispatch_release(v12);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_25086A350, MEMORY[0x24BEDAAF0]);
}

void sub_236E10674(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD *std::shared_ptr<TCP>::shared_ptr[abi:ne180100]<TCP,std::shared_ptr<TCP> ctu::SharedSynchronizable<TCP>::make_shared_ptr<TCP>(TCP*)::{lambda(TCP*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_25086A9C8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_236E1086C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<TCP> ctu::SharedSynchronizable<TCP>::make_shared_ptr<TCP>(TCP*)::{lambda(TCP*)#1}::operator() const(TCP*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_236E1088C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<TCP *,std::shared_ptr<TCP> ctu::SharedSynchronizable<TCP>::make_shared_ptr<TCP>(TCP*)::{lambda(TCP *)#1},std::allocator<TCP>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<TCP *,std::shared_ptr<TCP> ctu::SharedSynchronizable<TCP>::make_shared_ptr<TCP>(TCP*)::{lambda(TCP *)#1},std::allocator<TCP>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<TCP> ctu::SharedSynchronizable<TCP>::make_shared_ptr<TCP>(TCP*)::{lambda(TCP*)#1}::operator() const(TCP*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<TCP *,std::shared_ptr<TCP> ctu::SharedSynchronizable<TCP>::make_shared_ptr<TCP>(TCP*)::{lambda(TCP *)#1},std::allocator<TCP>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI3TCPE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI3TCPE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI3TCPE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI3TCPE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<TCP> ctu::SharedSynchronizable<TCP>::make_shared_ptr<TCP>(TCP*)::{lambda(TCP*)#1}::operator() const(TCP*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_5startEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEENS5_IU13block_pointerFvPKhjEEEbE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSM__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  const void *v4;
  void *v5;
  const void *v6;
  int v7;
  _BOOL4 v8;
  _BOOL4 v9;

  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  v3 = (void *)v1[2];
  if (v3)
    v3 = _Block_copy(v3);
  v4 = *(const void **)(v2 + 64);
  *(_QWORD *)(v2 + 64) = v3;
  if (v4)
  {
    _Block_release(v4);
    v3 = *(void **)(v2 + 64);
  }
  *(_BYTE *)(v2 + 80) = v3 != 0;
  v5 = (void *)v1[3];
  if (v5)
    v5 = _Block_copy(v5);
  v6 = *(const void **)(v2 + 72);
  *(_QWORD *)(v2 + 72) = v5;
  if (v6)
    _Block_release(v6);
  v7 = *(_DWORD *)(v2 + 52);
  if (v7 == 1)
  {
    v9 = TCP::configureClientMode_sync((TCP *)v2);
    *(_BYTE *)v1[1] = v9;
    if (!v9)
      return;
LABEL_14:
    *(_DWORD *)(v2 + 48) = 1;
    return;
  }
  if (v7)
  {
    *(_BYTE *)v1[1] = 0;
    return;
  }
  v8 = TCP::configureServerMode_sync((TCP *)v2, *((unsigned __int8 *)v1 + 32));
  *(_BYTE *)v1[1] = v8;
  if (v8)
    goto LABEL_14;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB808] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB6D8], MEMORY[0x24BEDAC00]);
}

void ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZZNS1_29setLocalSocketReadSource_syncEvEUb_E3__1EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  NSObject *v5;
  std::string __p;

  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  *(_DWORD *)(v2 + 48) = 3;
  if (TCP::closeLocalSocket_sync((TCP *)v2))
  {
    v3 = *(_QWORD *)(v2 + 72);
    if (*((char *)v1 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v1[1], v1[2]);
    }
    else
    {
      v4 = *(_OWORD *)(v1 + 1);
      __p.__r_.__value_.__r.__words[2] = v1[3];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
    }
    (*(void (**)(uint64_t, std::string *))(v3 + 16))(v3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v5 = **(NSObject ***)(v2 + 200);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_236E0D000, v5, OS_LOG_TYPE_ERROR, "error: close local socket failed", (uint8_t *)&__p, 2u);
    }
  }
}

void sub_236E10B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZZNS1_29setLocalSocketReadSource_syncEvEUb_E3__2EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  void *__p[2];
  char v5;

  v1 = **(_QWORD **)(a1 + 40);
  if (TCP::closeLocalSocket_sync((TCP *)v1))
  {
    *(_DWORD *)(v1 + 48) = 2;
    v2 = *(_QWORD *)(v1 + 72);
    v5 = 11;
    strcpy((char *)__p, "peer closed");
    (*(void (**)(void))(v2 + 16))();
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v3 = **(NSObject ***)(v1 + 200);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl(&dword_236E0D000, v3, OS_LOG_TYPE_ERROR, "error: close local socket failed", (uint8_t *)__p, 2u);
    }
  }
}

void sub_236E10C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_4stopEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  const void *v3;
  BOOL v4;
  _BOOL8 result;

  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  *(_DWORD *)(v2 + 48) = 0;
  v3 = *(const void **)(v2 + 64);
  *(_QWORD *)(v2 + 64) = 0;
  if (v3)
    _Block_release(v3);
  *(_BYTE *)(v2 + 80) = 0;
  v4 = TCP::closeLocalSocket_sync((TCP *)v2);
  result = TCP::closeServerSocket_sync((TCP *)v2);
  *(_BYTE *)v1[1] = v4 && result;
  return result;
}

void ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_4recvEPhjPjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  uint8_t v5[16];

  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  if (*(_BYTE *)(*v1 + 80))
  {
    *(_BYTE *)v1[1] = 0;
  }
  else
  {
    v3 = recv(*(_DWORD *)(v2 + 92), (void *)v1[3], *((unsigned int *)v1 + 4), 0);
    *(_DWORD *)v1[4] = v3;
    *(_BYTE *)v1[1] = v3 != 0;
    if (!v3)
    {
      v4 = **(NSObject ***)(v2 + 200);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v5 = 0;
        _os_log_error_impl(&dword_236E0D000, v4, OS_LOG_TYPE_ERROR, "error: Failed to receive data, peer closed", v5, 2u);
      }
    }
  }
}

void ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_4sendEPKhjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  TCP *v3;
  BOOL v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int16 v9;
  __int16 v10;
  uint8_t buf[16];

  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  if (*(_DWORD *)(*v1 + 48) != 1)
  {
    v6 = **(NSObject ***)(v2 + 200);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v9 = 0;
      v7 = "error: Failed to send data to local socket, TCP Not Running";
      v8 = (uint8_t *)&v9;
      goto LABEL_13;
    }
LABEL_9:
    *(_BYTE *)v1[1] = 0;
    return;
  }
  v3 = (TCP *)*(unsigned int *)(v2 + 92);
  if ((v3 & 0x80000000) != 0)
  {
    v6 = **(NSObject ***)(v2 + 200);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v10 = 0;
      v7 = "error: Skip forwarding data as no valid socket destination is found";
      v8 = (uint8_t *)&v10;
LABEL_13:
      _os_log_error_impl(&dword_236E0D000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
      *(_BYTE *)v1[1] = 0;
      return;
    }
    goto LABEL_9;
  }
  v4 = TCP::sendAllToDst(v3, v1[2], (const unsigned __int8 *)*((unsigned int *)v1 + 6));
  *(_BYTE *)v1[1] = v4;
  if (!v4)
  {
    v5 = **(NSObject ***)(v2 + 200);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_236E0D000, v5, OS_LOG_TYPE_ERROR, "error: Failed to send data to local socket, closing local socket", buf, 2u);
    }
    TCP::closeLocalSocket_sync((TCP *)v2);
  }
}

void ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_13getPortNumberERiE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  void **v4;
  void *__p[2];
  uint64_t v6;
  uint8_t buf[4];
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  if (*(_DWORD *)(*v1 + 48))
  {
    *(_DWORD *)v1[2] = *(_DWORD *)(v2 + 56);
  }
  else
  {
    v3 = **(NSObject ***)(v2 + 200);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      __p[0] = 0;
      __p[1] = 0;
      v6 = 0;
      MEMORY[0x23B804D4C](__p, "Stopped");
      if (v6 >= 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v8 = v4;
      _os_log_error_impl(&dword_236E0D000, v3, OS_LOG_TYPE_ERROR, "error: server in invalid state %s", buf, 0xCu);
      if (SHIBYTE(v6) < 0)
        operator delete(__p[0]);
    }
    *(_BYTE *)v1[1] = 0;
  }
}

void sub_236E10FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __cxx_global_var_init()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_236E0D000);
  }
  return result;
}

void TraceSocketStreamer::create(uint64_t *a1@<X0>, const char *a2@<X1>, NSObject **a3@<X2>, std::__shared_weak_count_vtbl **a4@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  dispatch_object_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD v19[10];
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  dispatch_object_t object;

  v6 = a1[1];
  v17 = *a1;
  v18 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *a3;
  v16 = v9;
  if (v9)
    dispatch_retain(v9);
  TraceSocketStreamer::TraceSocketStreamer(v19, &v17, a2, &v16);
  std::allocate_shared[abi:ne180100]<TraceSocketStreamer,std::allocator<TraceSocketStreamer>,TraceSocketStreamer,void>(v19, a4);
  v19[0] = off_25086AB48;
  if (object)
    dispatch_release(object);
  v10 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v19[0] = &unk_25086AC68;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  if (v16)
    dispatch_release(v16);
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_236E11284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  NSObject *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  TraceSocketStreamer::~TraceSocketStreamer((TraceSocketStreamer *)va1);
  if (v2)
    dispatch_release(v2);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *TraceSocketStreamer::TraceSocketStreamer(_QWORD *a1, uint64_t *a2, const char *a3, NSObject **a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  const char *v16;

  v6 = (std::__shared_weak_count *)a2[1];
  v14 = *a2;
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v16 = a3;
  a1[9] = 0;
  a1[10] = 0;
  ctu::Loggable<TraceStreamer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const*&,std::shared_ptr<ctu::LogServer>&>(a1, &v16, &v14);
  *a1 = off_25086ACE8;
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = off_25086AB48;
  a1[11] = 0;
  a1[12] = 0;
  v12 = *a4;
  a1[13] = *a4;
  if (v12)
    dispatch_retain(v12);
  return a1;
}

{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  const char *v16;

  v6 = (std::__shared_weak_count *)a2[1];
  v14 = *a2;
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v16 = a3;
  a1[9] = 0;
  a1[10] = 0;
  ctu::Loggable<TraceStreamer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const*&,std::shared_ptr<ctu::LogServer>&>(a1, &v16, &v14);
  *a1 = off_25086ACE8;
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = off_25086AB48;
  a1[11] = 0;
  a1[12] = 0;
  v12 = *a4;
  a1[13] = *a4;
  if (v12)
    dispatch_retain(v12);
  return a1;
}

void sub_236E11388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 80);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void TraceSocketStreamer::~TraceSocketStreamer(TraceSocketStreamer *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  *(_QWORD *)this = off_25086AB48;
  v2 = *((_QWORD *)this + 13);
  if (v2)
    dispatch_release(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)this = &unk_25086AC68;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  *(_QWORD *)this = off_25086AB48;
  v2 = *((_QWORD *)this + 13);
  if (v2)
    dispatch_release(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)this = &unk_25086AC68;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  *(_QWORD *)this = off_25086AB48;
  v2 = *((_QWORD *)this + 13);
  if (v2)
    dispatch_release(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)this = &unk_25086AC68;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(this);
}

void sub_236E11540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v4;
  va_list va;

  va_start(va, a2);
  v4 = *(std::__shared_weak_count **)(v2 + 80);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t TraceSocketStreamer::start(TraceSocketStreamer *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  NSObject *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char v16;
  char *v17;
  NSObject *v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  char *v24;
  NSObject *v25;
  const char *v26;
  void *v28;
  void *v29;
  uint8_t buf[16];
  dispatch_object_t object;
  _QWORD v32[5];
  _QWORD aBlock[5];

  v2 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN19TraceSocketStreamer5startEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_0;
  aBlock[4] = this;
  v3 = _Block_copy(aBlock);
  v32[0] = v2;
  v32[1] = 0x40000000;
  v32[2] = ___ZN19TraceSocketStreamer5startEv_block_invoke_2;
  v32[3] = &__block_descriptor_tmp_5;
  v32[4] = this;
  v4 = _Block_copy(v32);
  v5 = *((_QWORD *)this + 13);
  object = v5;
  if (v5)
    dispatch_retain(v5);
  TCP::create(0, 0, &object, buf);
  v6 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  *(_OWORD *)((char *)this + 88) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v11 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (object)
    dispatch_release(object);
  v13 = *((_QWORD *)this + 11);
  if (!v13)
  {
    v17 = (char *)this + 8;
    v18 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_236E0D000, v18, OS_LOG_TYPE_ERROR, "[start failed] server socket gone", buf, 2u);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v17)(v17, 80))
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"[start failed] server socket gone", v19);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
LABEL_40:
      MEMORY[0x23B804B24](buf);
    }
LABEL_41:
    v23 = 0;
    if (!v4)
      goto LABEL_43;
    goto LABEL_42;
  }
  if (v3)
  {
    v14 = _Block_copy(v3);
    v29 = v14;
    if (v4)
      goto LABEL_18;
LABEL_27:
    v28 = 0;
    v16 = TCP::start(v13, &v29, &v28, 0);
    if (!v14)
      goto LABEL_29;
    goto LABEL_28;
  }
  v14 = 0;
  v29 = 0;
  if (!v4)
    goto LABEL_27;
LABEL_18:
  v15 = _Block_copy(v4);
  v28 = v15;
  v16 = TCP::start(v13, &v29, &v28, 0);
  if (v15)
    _Block_release(v15);
  if (v14)
LABEL_28:
    _Block_release(v14);
LABEL_29:
  if ((v16 & 1) == 0)
  {
    v24 = (char *)this + 8;
    v25 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_236E0D000, v25, OS_LOG_TYPE_ERROR, "[start failed] failed to start TCP service", buf, 2u);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v24)(v24, 80))
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"[start failed] failed to start TCP service", v26);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      goto LABEL_40;
    }
    goto LABEL_41;
  }
  TraceSocketStreamer::notifyCellularLoggingPortNumber(this);
  v20 = (char *)this + 8;
  v21 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_236E0D000, v21, OS_LOG_TYPE_DEFAULT, "#I [start success] notification for port number is sent out to client", buf, 2u);
  }
  if ((**(unsigned int (***)(char *, uint64_t))v20)(v20, 40))
  {
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"[start success] notification for port number is sent out to client", v22);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x23B804B24](buf);
  }
  v23 = 1;
  if (v4)
LABEL_42:
    _Block_release(v4);
LABEL_43:
  if (v3)
    _Block_release(v3);
  return v23;
}

void sub_236E11900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v3;
  const void *v4;
  va_list va;

  va_start(va, a3);
  MEMORY[0x23B804B24](va);
  if (v4)
    _Block_release(v4);
  if (v3)
    _Block_release(v3);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19TraceSocketStreamer5startEv_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t (***v4)(_QWORD, uint64_t);
  NSObject *v5;
  uint64_t *v6;
  uint64_t result;
  const char *v8;
  uint8_t buf[4];
  uint64_t *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = (uint64_t (***)(_QWORD, uint64_t))(v3 + 8);
  v5 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = a2;
    if (*((char *)a2 + 23) < 0)
      v6 = (uint64_t *)*a2;
    *(_DWORD *)buf = 136315138;
    v10 = v6;
    _os_log_impl(&dword_236E0D000, v5, OS_LOG_TYPE_DEFAULT, "#I Error: %s", buf, 0xCu);
  }
  result = (**v4)(v4, 40);
  if ((_DWORD)result)
  {
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Error: %s", v8, a2);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    return MEMORY[0x23B804B24](buf);
  }
  return result;
}

uint64_t ___ZN19TraceSocketStreamer5startEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t (***v5)(_QWORD, uint64_t);
  NSObject *v6;
  uint64_t result;
  const char *v8;
  uint8_t buf[4];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (uint64_t (***)(_QWORD, uint64_t))(v4 + 8);
  v6 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v10 = a3;
    _os_log_impl(&dword_236E0D000, v6, OS_LOG_TYPE_DEFAULT, "#I data handler cb triggered with message size %d", buf, 8u);
  }
  result = (**v5)(v5, 40);
  if ((_DWORD)result)
  {
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"data handler cb triggered with message size %d", v8, a3);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    return MEMORY[0x23B804B24](buf);
  }
  return result;
}

uint64_t TraceSocketStreamer::notifyCellularLoggingPortNumber(TraceSocketStreamer *this)
{
  char *v2;
  NSObject *v3;
  uint64_t result;
  const char *v5;
  uint64_t v6;
  NSObject *v7;
  char *v8;
  NSObject *v9;
  const char *v10;
  char *v11;
  NSObject *v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  const char *v16;
  unsigned int v17;
  int out_token;
  _QWORD v19[3];
  char v20;
  __int128 block;
  void (*v22)(uint64_t);
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  out_token = 0;
  if (!notify_register_check("com.apple.CommCenterMobileHelpr.streamingPort", &out_token))
  {
    if (!notify_is_valid_token(out_token))
      return 1;
    v6 = *((_QWORD *)this + 11);
    if (!v6)
    {
      v11 = (char *)this + 8;
      v12 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        LOWORD(block) = 0;
        _os_log_error_impl(&dword_236E0D000, v12, OS_LOG_TYPE_ERROR, "TCP object gone!", (uint8_t *)&block, 2u);
      }
      result = (**(uint64_t (***)(char *, uint64_t))v11)(v11, 80);
      if ((_DWORD)result)
      {
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"TCP object gone!", v13);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        goto LABEL_6;
      }
      return result;
    }
    v17 = -1;
    v20 = 1;
    v19[0] = v6;
    v19[1] = &v20;
    v19[2] = &v17;
    *(_QWORD *)&block = MEMORY[0x24BDAC760];
    *((_QWORD *)&block + 1) = 0x40000000;
    v22 = ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_13getPortNumberERiE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
    v23 = &__block_descriptor_tmp_23;
    v24 = v6 + 8;
    v25 = v19;
    v7 = *(NSObject **)(v6 + 24);
    if (*(_QWORD *)(v6 + 32))
    {
      dispatch_async_and_wait(v7, &block);
      if (v20)
      {
LABEL_12:
        notify_set_state(out_token, v17);
        notify_post("com.apple.CommCenterMobileHelpr.streamingPort");
        v8 = (char *)this + 8;
        v9 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(block) = 67109120;
          DWORD1(block) = v17;
          _os_log_impl(&dword_236E0D000, v9, OS_LOG_TYPE_DEFAULT, "#I notify port number %d", (uint8_t *)&block, 8u);
        }
        if ((**(unsigned int (***)(char *, uint64_t))v8)(v8, 40))
        {
          ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"notify port number %d", v10, v17);
          ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
          MEMORY[0x23B804B24](&block);
        }
        return 1;
      }
    }
    else
    {
      dispatch_sync(v7, &block);
      if (v20)
        goto LABEL_12;
    }
    v14 = (char *)this + 8;
    v15 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(block) = 0;
      _os_log_error_impl(&dword_236E0D000, v15, OS_LOG_TYPE_ERROR, "Unable to get port number from TCP stack, is TCP stack running?", (uint8_t *)&block, 2u);
    }
    if (!(**(unsigned int (***)(char *, uint64_t))v14)(v14, 80))
      return 0;
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Unable to get port number from TCP stack, is TCP stack running?", v16);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
LABEL_6:
    MEMORY[0x23B804B24](&block);
    return 0;
  }
  v2 = (char *)this + 8;
  v3 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    LODWORD(block) = 136315138;
    *(_QWORD *)((char *)&block + 4) = "com.apple.CommCenterMobileHelpr.streamingPort";
    _os_log_error_impl(&dword_236E0D000, v3, OS_LOG_TYPE_ERROR, "Failed to create notifiy register check for notification %s", (uint8_t *)&block, 0xCu);
  }
  result = (**(uint64_t (***)(char *, uint64_t))v2)(v2, 80);
  if ((_DWORD)result)
  {
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Failed to create notifiy register check for notification %s", v5, "com.apple.CommCenterMobileHelpr.streamingPort");
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    goto LABEL_6;
  }
  return result;
}

BOOL TraceSocketStreamer::stop(TraceSocketStreamer *this)
{
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  NSObject *v13;
  const char *v14;
  char *v16;
  NSObject *v17;
  const char *v18;
  _QWORD v19[7];
  _QWORD v20[2];
  char v21;

  v3 = (_QWORD *)((char *)this + 88);
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    v21 = 1;
    v20[0] = v2;
    v20[1] = &v21;
    v19[0] = MEMORY[0x24BDAC760];
    v19[1] = 0x40000000;
    v19[2] = ___ZNK3ctu20SharedSynchronizableI3TCPE20execute_wrapped_syncIZNS1_4stopEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
    v19[3] = &__block_descriptor_tmp_20;
    v19[4] = v2 + 8;
    v19[5] = v20;
    v4 = *(NSObject **)(v2 + 24);
    if (*(_QWORD *)(v2 + 32))
    {
      dispatch_async_and_wait(v4, v19);
      v5 = v21 != 0;
      v6 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
      if (v6)
        goto LABEL_4;
    }
    else
    {
      dispatch_sync(v4, v19);
      v5 = v21 != 0;
      v6 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
      if (v6)
      {
LABEL_4:
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        v9 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
        *v3 = 0;
        v3[1] = 0;
        if (v9)
        {
          v10 = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
LABEL_19:
        v16 = (char *)this + 8;
        v17 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v19[0]) = 0;
          _os_log_impl(&dword_236E0D000, v17, OS_LOG_TYPE_DEFAULT, "#I [stop success] server socket closed", (uint8_t *)v19, 2u);
        }
        if ((**(unsigned int (***)(char *, uint64_t))v16)(v16, 40))
        {
          ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"[stop success] server socket closed", v18);
          ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
          MEMORY[0x23B804B24](v19);
          return v5;
        }
        return v5;
      }
    }
    *v3 = 0;
    v3[1] = 0;
    goto LABEL_19;
  }
  v12 = (char *)this + 8;
  v13 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v19[0]) = 0;
    _os_log_error_impl(&dword_236E0D000, v13, OS_LOG_TYPE_ERROR, "[stop fail] TCP instance gone!", (uint8_t *)v19, 2u);
    if ((**(unsigned int (***)(char *, uint64_t))v12)(v12, 80))
      goto LABEL_15;
  }
  else if ((**(unsigned int (***)(char *, uint64_t))v12)(v12, 80))
  {
LABEL_15:
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"[stop fail] TCP instance gone!", v14);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x23B804B24](v19);
    return 0;
  }
  return 0;
}

uint64_t TraceSocketStreamer::forward(TCP **this, unsigned __int8 *a2, int a3)
{
  uint64_t result;
  _BOOL4 v5;
  char *v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  uint8_t v10[64];

  result = 0;
  if (a2 && a3)
  {
    v5 = TCP::send(this[11], a2, a3);
    v6 = (char *)(this + 1);
    v7 = this[5];
    if (v5)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v10 = 0;
        _os_log_debug_impl(&dword_236E0D000, v7, OS_LOG_TYPE_DEBUG, "#D new data forwarded", v10, 2u);
        if ((**(unsigned int (***)(char *, uint64_t))v6)(v6, 20))
          goto LABEL_6;
      }
      else if ((**(unsigned int (***)(char *, uint64_t))v6)(v6, 20))
      {
LABEL_6:
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"new data forwarded", v8);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        MEMORY[0x23B804B24](v10);
        return 1;
      }
      return 1;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_error_impl(&dword_236E0D000, v7, OS_LOG_TYPE_ERROR, "failed to forward new data", v10, 2u);
      result = (**(uint64_t (***)(char *, uint64_t))v6)(v6, 80);
      if ((_DWORD)result)
        goto LABEL_10;
    }
    else
    {
      result = (**(uint64_t (***)(char *, uint64_t))v6)(v6, 80);
      if ((_DWORD)result)
      {
LABEL_10:
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"failed to forward new data", v9);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        MEMORY[0x23B804B24](v10);
        return 0;
      }
    }
  }
  return result;
}

uint64_t ctu::Loggable<TraceStreamer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<TraceStreamer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 19;
  strcpy(a1, "TraceStreamer.modem");
}

uint64_t ctu::Loggable<TraceStreamer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void std::allocate_shared[abi:ne180100]<TraceSocketStreamer,std::allocator<TraceSocketStreamer>,TraceSocketStreamer,void>(_QWORD *a1@<X1>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  std::__shared_weak_count *shared_owners;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;

  v4 = (std::__shared_weak_count *)operator new(0x88uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_25086AC00;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_25086AC68;
  v6 = (std::__shared_weak_count_vtbl *)&v4[1];
  v4[4].__vftable = 0;
  v4[4].__shared_owners_ = 0;
  ctu::LoggerCommonBase::LoggerCommonBase();
  v4[1].__shared_owners_ = (uint64_t)&unk_25086ACA8;
  v7 = a1[8];
  v4[3].__shared_owners_ = a1[7];
  v4[3].__shared_weak_owners_ = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)off_25086AB48;
  v10 = a1[12];
  v4[4].__shared_weak_owners_ = a1[11];
  v4[5].__vftable = (std::__shared_weak_count_vtbl *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = a1[13];
  v4[5].__shared_owners_ = (uint64_t)v13;
  if (v13)
    dispatch_retain(v13);
  *a2 = v6;
  a2[1] = (std::__shared_weak_count_vtbl *)v4;
  shared_owners = (std::__shared_weak_count *)v4[4].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      return;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v4[4].__vftable = v6;
    v4[4].__shared_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v19 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v4[4].__vftable = v6;
    v4[4].__shared_owners_ = (uint64_t)v4;
  }
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void std::__shared_ptr_emplace<TraceSocketStreamer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_25086AC00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TraceSocketStreamer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_25086AC00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<TraceSocketStreamer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *ctu::Loggable<TraceStreamer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = &unk_25086AC68;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<TraceStreamer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = &unk_25086AC68;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

uint64_t __cxx_global_var_init_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_236E0D000);
  }
  return result;
}

void TraceStreamer::create(uint64_t *a1@<X0>, const char *a2@<X1>, int a3@<W2>, NSObject **a4@<X3>, _QWORD *a5@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  uint64_t v15[2];
  __int128 v16;

  *a5 = 0;
  a5[1] = 0;
  if (!a3)
  {
    v7 = (std::__shared_weak_count *)a1[1];
    v15[0] = *a1;
    v15[1] = (uint64_t)v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v10 = *a4;
    v14 = v10;
    if (v10)
      dispatch_retain(v10);
    TraceSocketStreamer::create(v15, a2, &v14, (std::__shared_weak_count_vtbl **)&v16);
    v11 = v16;
    v16 = 0uLL;
    *(_OWORD *)a5 = v11;
    if (v10)
      dispatch_release(v10);
    if (v7)
    {
      v12 = (unint64_t *)&v7->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_236E12884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  NSObject *v12;

  if (v12)
    dispatch_release(v12);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

_QWORD *TraceStreamer::TraceStreamer(_QWORD *a1, _QWORD *a2, const char *a3)
{
  const char *v5;

  v5 = a3;
  a1[9] = 0;
  a1[10] = 0;
  ctu::Loggable<TraceStreamer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const*&,std::shared_ptr<ctu::LogServer>&>(a1, &v5, a2);
  *a1 = off_25086ACE8;
  return a1;
}

void sub_236E128F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 80);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *ctu::Loggable<TraceStreamer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const*&,std::shared_ptr<ctu::LogServer>&>(_QWORD *a1, const char **a2, _QWORD *a3)
{
  const char *v5;
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *__dst[2];
  unint64_t v16;

  *a1 = &unk_25086AC68;
  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    v16 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v16) = v6;
  v8 = __dst;
  if (v6)
LABEL_8:
    memmove(v8, v5, (size_t)v7);
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  ctu::LoggerCommonBase::LoggerCommonBase();
  a1[1] = &unk_25086ACA8;
  a1[7] = *a3;
  v11 = a3[1];
  a1[8] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (SHIBYTE(v16) < 0)
    operator delete(__dst[0]);
  return a1;
}

void sub_236E12A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TraceStreamer::~TraceStreamer(TraceStreamer *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &unk_25086AC68;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t __cxx_global_var_init_1()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_236E0D000);
  }
  return result;
}

_QWORD *support::log::delegate::context::create@<X0>(support::log::delegate::context *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v5;
  _QWORD *result;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v5 = operator new(0x10uLL);
  *v5 = off_25086AD90;
  v5[1] = this;
  *a2 = v5;
  result = operator new(0x20uLL);
  *result = off_25086AFB8;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[1] = result;
  return result;
}

void sub_236E12B3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *support::log::delegate::context::context(_QWORD *this, void *a2)
{
  *this = off_25086AD90;
  this[1] = a2;
  return this;
}

{
  *this = off_25086AD90;
  this[1] = a2;
  return this;
}

uint64_t support::log::delegate::delegate(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *(_QWORD *)result = &unk_25086ADB0;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(result + 24) = 1;
  return result;
}

uint64_t support::log::delegate::get_context@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (*(_BYTE *)(this + 24))
  {
    v2 = *(_QWORD *)(this + 16);
    *(_QWORD *)a2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(a2 + 8) = v2;
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 16);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
    }
    *(_BYTE *)(a2 + 16) = 1;
  }
  return this;
}

uint64_t support::log::manager::parameters::parameters(uint64_t result, char a2)
{
  *(_QWORD *)result = &off_25086ADE0;
  *(_BYTE *)(result + 8) = a2;
  return result;
}

{
  *(_QWORD *)result = &off_25086ADE0;
  *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t support::log::manager::parameters::parameters(uint64_t this)
{
  *(_QWORD *)this = &off_25086ADE0;
  *(_BYTE *)(this + 8) = 3;
  return this;
}

{
  *(_QWORD *)this = &off_25086ADE0;
  *(_BYTE *)(this + 8) = 3;
  return this;
}

uint64_t support::log::manager::parameters::set_defaults(uint64_t this)
{
  *(_BYTE *)(this + 8) = 3;
  return this;
}

uint64_t support::log::manager::manager(uint64_t a1, std::string *a2, uint64_t a3, _QWORD *a4)
{
  std::string *v7;
  const char *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string::value_type __s[23];
  char v17;
  std::string v18;

  *(_QWORD *)a1 = off_25086ADF8;
  *(_QWORD *)(a1 + 8) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  v18 = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  v17 = 12;
  strcpy(__s, ".log_manager");
  v7 = std::string::append(&v18, __s, 0xCuLL);
  v8 = (const char *)(a1 + 72);
  v9 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)&v7->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 72) = v9;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((v17 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_8:
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_9;
  }
  operator delete(*(void **)__s);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
LABEL_3:
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    goto LABEL_4;
LABEL_9:
  v8 = *(const char **)v8;
LABEL_4:
  *(_QWORD *)(a1 + 96) = os_log_create("com.apple.telephony.basebandservices", v8);
  *(_QWORD *)(a1 + 104) = &off_25086ADE0;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a3 + 8);
  *(_QWORD *)(a1 + 120) = a1 + 120;
  *(_QWORD *)(a1 + 128) = a1 + 120;
  *(_QWORD *)(a1 + 136) = 0;
  v10 = a4[2];
  if (v10)
  {
    v12 = *a4;
    v11 = (uint64_t *)a4[1];
    v13 = *v11;
    *(_QWORD *)(v13 + 8) = *(_QWORD *)(*a4 + 8);
    **(_QWORD **)(v12 + 8) = v13;
    v14 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(v14 + 8) = v11;
    *v11 = v14;
    *(_QWORD *)(a1 + 120) = v12;
    *(_QWORD *)(v12 + 8) = a1 + 120;
    *(_QWORD *)(a1 + 136) = v10;
    a4[2] = 0;
  }
  return a1;
}

void sub_236E12DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::mutex *v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      std::mutex::~mutex(v21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  std::mutex::~mutex(v21);
  _Unwind_Resume(a1);
}

uint64_t support::log::manager::manager(uint64_t a1, std::string *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::string __p;

  __p = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  v15 = (uint64_t)&v15;
  v16 = &v15;
  v17 = 0;
  support::log::manager::manager(a1, &__p, a3, &v15);
  if (v17)
  {
    v6 = v15;
    v7 = v16;
    v8 = *v16;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v15 + 8);
    **(_QWORD **)(v6 + 8) = v8;
    v17 = 0;
    if (v7 != &v15)
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        v9 = v7[2];
        v7[2] = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != &v15);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*a4)
      return a1;
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*a4)
  {
LABEL_10:
    std::mutex::lock((std::mutex *)(a1 + 8));
    v11 = operator new(0x18uLL);
    v12 = *a4;
    *a4 = 0;
    v13 = *(_QWORD *)(a1 + 120);
    v11[1] = a1 + 120;
    v11[2] = v12;
    *v11 = v13;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 120) = v11;
    ++*(_QWORD *)(a1 + 136);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
  return a1;
}

{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::string __p;

  __p = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  v15 = (uint64_t)&v15;
  v16 = &v15;
  v17 = 0;
  support::log::manager::manager(a1, &__p, a3, &v15);
  if (v17)
  {
    v6 = v15;
    v7 = v16;
    v8 = *v16;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v15 + 8);
    **(_QWORD **)(v6 + 8) = v8;
    v17 = 0;
    if (v7 != &v15)
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        v9 = v7[2];
        v7[2] = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != &v15);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*a4)
      return a1;
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*a4)
  {
LABEL_10:
    std::mutex::lock((std::mutex *)(a1 + 8));
    v11 = operator new(0x18uLL);
    v12 = *a4;
    *a4 = 0;
    v13 = *(_QWORD *)(a1 + 120);
    v11[1] = a1 + 120;
    v11[2] = v12;
    *v11 = v13;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 120) = v11;
    ++*(_QWORD *)(a1 + 136);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
  return a1;
}

void sub_236E12F4C(_Unwind_Exception *a1)
{
  support::log::manager *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);
  support::log::manager::~manager(v1);
  _Unwind_Resume(a1);
}

void sub_236E12F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::list<std::unique_ptr<support::log::delegate>>::~list(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::list<std::unique_ptr<support::log::delegate>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v7 = (uint64_t *)v3[1];
        v6 = v3[2];
        v3[2] = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v3);
        v3 = v7;
      }
      while (v7 != a1);
    }
  }
  return a1;
}

void support::log::manager::add_delegate(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  std::mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)a1;
  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = operator new(0x18uLL);
  v6 = *a2;
  *a2 = 0;
  v7 = v3[15];
  v3 += 15;
  v5[1] = v3;
  v5[2] = v6;
  *v5 = v7;
  *(_QWORD *)(v7 + 8) = v5;
  *v3 = v5;
  ++v3[2];
  std::mutex::unlock(v4);
}

void sub_236E13080(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void support::log::manager::~manager(support::log::manager *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_25086ADF8;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_25086ADF8;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_25086ADF8;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

void sub_236E13278(_Unwind_Exception *a1)
{
  support::log::manager *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);
  support::log::manager::~manager(v1);
  _Unwind_Resume(a1);
}

void sub_236E1329C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::list<std::unique_ptr<support::log::delegate>>::~list(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void support::log::manager::create(std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  _QWORD *v9;
  std::string __p;

  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = operator new(0x90uLL);
  __p = *a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  support::log::manager::manager((uint64_t)v8, &__p, a2, a3);
  *a4 = v8;
  v9 = operator new(0x20uLL);
  *v9 = off_25086B0A0;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  a4[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_236E1342C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void support::log::manager::create(std::string *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  _QWORD *v9;
  std::string __p;

  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = operator new(0x90uLL);
  __p = *a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  support::log::manager::manager((uint64_t)v8, &__p, a2, a3);
  *a4 = v8;
  v9 = operator new(0x20uLL);
  *v9 = off_25086B0A0;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  a4[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_236E13540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t support::log::manager::get_level(support::log::manager *this)
{
  return *((unsigned __int8 *)this + 112);
}

void support::log::manager::set_level(uint64_t a1, unsigned int a2)
{
  std::mutex *v4;
  NSObject *v5;
  unint64_t v6;
  const char *v7;
  const char *v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = *(NSObject **)(a1 + 96);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(unsigned __int8 *)(a1 + 112);
    if (v6 > 6)
    {
      v7 = "???";
      if (a2 > 6)
        goto LABEL_4;
    }
    else
    {
      if (a2 > 6)
      {
LABEL_4:
        v8 = "???";
LABEL_7:
        v9 = 136315394;
        v10 = v7;
        v11 = 2080;
        v12 = v8;
        _os_log_impl(&dword_236E0D000, v5, OS_LOG_TYPE_DEFAULT, "setting log level %s -> %s", (uint8_t *)&v9, 0x16u);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  *(_BYTE *)(a1 + 112) = a2;
  std::mutex::unlock(v4);
}

uint64_t support::log::manager::get_log_buffer(support::log::manager *this)
{
  char *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_2564521D0)
    goto LABEL_2;
  v1 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v1 + 1) = 0;
  *((_QWORD *)v1 + 2) = 0;
  *(_QWORD *)v1 = off_25086B008;
  *((_QWORD *)v1 + 3) = off_25086B058;
  v2 = (uint64_t)(v1 + 24);
  *((_QWORD *)v1 + 4) = 850045863;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *((_QWORD *)v1 + 14) = 0;
  *((_QWORD *)v1 + 13) = 0;
  *((_QWORD *)v1 + 11) = 0;
  *((_QWORD *)v1 + 12) = v1 + 104;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  v3 = (std::__shared_weak_count *)off_2564521D8;
  qword_2564521D0 = (uint64_t)(v1 + 24);
  off_2564521D8 = v1;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
LABEL_2:
    v2 = qword_2564521D0;
    v1 = (char *)off_2564521D8;
    if (!off_2564521D8)
      goto LABEL_11;
  }
  v6 = (unint64_t *)(v1 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_11:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  std::mutex::lock((std::mutex *)(v2 + 8));
  v8 = *(_QWORD *)(v2 + 136);
  if (v8)
  {
    v9 = (_QWORD *)(v2 + 128);
    v10 = *(void ***)(v2 + 104);
    v11 = (*(_QWORD **)((char *)v10 + ((*(_QWORD *)(v2 + 128) >> 6) & 0x3FFFFFFFFFFFFF8)))[*(_QWORD *)(v2 + 128) & 0x1FFLL];
    v12 = *(_QWORD *)(v2 + 128) + 1;
    *(_QWORD *)(v2 + 128) = v12;
    *(_QWORD *)(v2 + 136) = v8 - 1;
    if (v12 >= 0x400)
    {
      operator delete(*v10);
      *(_QWORD *)(v2 + 104) += 8;
      v13 = -512;
LABEL_25:
      *v9 += v13;
    }
  }
  else
  {
    v14 = malloc_type_malloc(0x400uLL, 0x45F1E4C6uLL);
    v11 = (uint64_t)v14;
    if (v14)
    {
      v16 = (uint64_t **)(v2 + 80);
      v15 = *(uint64_t **)(v2 + 80);
      if (!v15)
      {
        v17 = (uint64_t **)(v2 + 80);
LABEL_22:
        v19 = (uint64_t *)operator new(0x28uLL);
        v19[4] = v11;
        *v19 = 0;
        v19[1] = 0;
        v19[2] = (uint64_t)v17;
        *v16 = v19;
        v20 = **(_QWORD **)(v2 + 72);
        if (v20)
        {
          *(_QWORD *)(v2 + 72) = v20;
          v19 = *v16;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 80), v19);
        v9 = (_QWORD *)(v2 + 88);
        v13 = 1;
        goto LABEL_25;
      }
      while (1)
      {
        while (1)
        {
          v17 = (uint64_t **)v15;
          v18 = v15[4];
          if ((unint64_t)v14 >= v18)
            break;
          v15 = *v17;
          v16 = v17;
          if (!*v17)
            goto LABEL_22;
        }
        if (v18 >= (unint64_t)v14)
          break;
        v15 = v17[1];
        if (!v15)
        {
          v16 = v17 + 1;
          goto LABEL_22;
        }
      }
    }
  }
  std::mutex::unlock((std::mutex *)(v2 + 8));
  if (!v1)
    return v11;
  v21 = (unint64_t *)(v1 + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
    return v11;
  (*(void (**)(char *))(*(_QWORD *)v1 + 16))(v1);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1);
  return v11;
}

void sub_236E13918(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  _Unwind_Resume(a1);
}

void support::log::manager::release_log_buffer(support::log::manager *this, char *a2)
{
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::mutex *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  void *v58;
  void *v59;
  unint64_t v60;
  char *v61;
  void *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  BOOL v69;
  int64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  char *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  unint64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  int64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 *v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  unint64_t v105;
  uint64_t v106;
  __int128 *v107;
  _OWORD *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  size_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  __int128 *v126;
  _OWORD *v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  int64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  __int128 *v146;
  _OWORD *v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  void *exception;
  void *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count *v154;

  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_2564521D0)
  {
    v3 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    *(_QWORD *)v3 = off_25086B008;
    *((_QWORD *)v3 + 3) = off_25086B058;
    v4 = (uint64_t)(v3 + 24);
    *((_QWORD *)v3 + 4) = 850045863;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *((_QWORD *)v3 + 14) = 0;
    *((_QWORD *)v3 + 13) = 0;
    *((_QWORD *)v3 + 11) = 0;
    *((_QWORD *)v3 + 12) = v3 + 104;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    v5 = (std::__shared_weak_count *)off_2564521D8;
    qword_2564521D0 = (uint64_t)(v3 + 24);
    off_2564521D8 = v3;
    if (!v5)
    {
LABEL_9:
      v8 = (unint64_t *)(v3 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      goto LABEL_11;
    }
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v4 = qword_2564521D0;
  v3 = (char *)off_2564521D8;
  if (off_2564521D8)
    goto LABEL_9;
LABEL_11:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  v12 = *(_QWORD **)(v4 + 80);
  v11 = v4 + 80;
  v10 = v12;
  if (!v12)
    goto LABEL_22;
  v13 = (_QWORD *)v11;
  do
  {
    v14 = v10[4];
    v15 = v14 >= (unint64_t)a2;
    if (v14 >= (unint64_t)a2)
      v16 = v10;
    else
      v16 = v10 + 1;
    if (v15)
      v13 = v10;
    v10 = (_QWORD *)*v16;
  }
  while (*v16);
  if (v13 == (_QWORD *)v11 || v13[4] > (unint64_t)a2)
LABEL_22:
    v13 = (_QWORD *)v11;
  if (!v3)
    goto LABEL_27;
  v17 = (unint64_t *)(v3 + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_27:
    if (v13 != (_QWORD *)v11)
      goto LABEL_28;
LABEL_32:
    free(a2);
    return;
  }
  (*(void (**)(char *))(*(_QWORD *)v3 + 16))(v3);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
  if (v13 == (_QWORD *)v11)
    goto LABEL_32;
LABEL_28:
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_2564521D0)
    goto LABEL_29;
  v19 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = 0;
  *(_QWORD *)v19 = off_25086B008;
  *((_QWORD *)v19 + 3) = off_25086B058;
  *((_QWORD *)v19 + 4) = 850045863;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *((_QWORD *)v19 + 14) = 0;
  *((_QWORD *)v19 + 13) = 0;
  *((_QWORD *)v19 + 11) = 0;
  *((_QWORD *)v19 + 12) = v19 + 104;
  *(_OWORD *)(v19 + 120) = 0u;
  *(_OWORD *)(v19 + 136) = 0u;
  *(_OWORD *)(v19 + 152) = 0u;
  v20 = (std::__shared_weak_count *)off_2564521D8;
  qword_2564521D0 = (uint64_t)(v19 + 24);
  off_2564521D8 = v19;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
LABEL_29:
    v19 = (char *)off_2564521D8;
    v153 = (std::__shared_weak_count *)off_2564521D8;
    if (!off_2564521D8)
      goto LABEL_41;
    goto LABEL_39;
  }
  v153 = (std::__shared_weak_count *)v19;
LABEL_39:
  v23 = (unint64_t *)(v19 + 8);
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
LABEL_41:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_2564521D0)
  {
    v25 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v25 + 1) = 0;
    *((_QWORD *)v25 + 2) = 0;
    *(_QWORD *)v25 = off_25086B008;
    *((_QWORD *)v25 + 3) = off_25086B058;
    v26 = (uint64_t)(v25 + 24);
    *((_QWORD *)v25 + 4) = 850045863;
    *(_OWORD *)(v25 + 40) = 0u;
    *(_OWORD *)(v25 + 56) = 0u;
    *(_OWORD *)(v25 + 72) = 0u;
    *((_QWORD *)v25 + 14) = 0;
    *((_QWORD *)v25 + 13) = 0;
    *((_QWORD *)v25 + 11) = 0;
    *((_QWORD *)v25 + 12) = v25 + 104;
    *(_OWORD *)(v25 + 120) = 0u;
    *(_OWORD *)(v25 + 136) = 0u;
    *(_OWORD *)(v25 + 152) = 0u;
    v27 = (std::__shared_weak_count *)off_2564521D8;
    qword_2564521D0 = (uint64_t)(v25 + 24);
    off_2564521D8 = v25;
    if (!v27)
    {
      v154 = (std::__shared_weak_count *)v25;
LABEL_50:
      v30 = (unint64_t *)(v25 + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      goto LABEL_52;
    }
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v26 = qword_2564521D0;
  v25 = (char *)off_2564521D8;
  v154 = (std::__shared_weak_count *)off_2564521D8;
  if (off_2564521D8)
    goto LABEL_50;
LABEL_52:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  v32 = (std::mutex *)(v26 + 8);
  std::mutex::lock((std::mutex *)(v26 + 8));
  v33 = *(_QWORD **)(v26 + 80);
  if (!v33)
    goto LABEL_186;
  v34 = v26 + 80;
  do
  {
    v35 = v33[4];
    v36 = v35 >= (unint64_t)a2;
    if (v35 >= (unint64_t)a2)
      v37 = v33;
    else
      v37 = v33 + 1;
    if (v36)
      v34 = (uint64_t)v33;
    v33 = (_QWORD *)*v37;
  }
  while (*v37);
  if (v34 == v26 + 80 || *(_QWORD *)(v34 + 32) > (unint64_t)a2)
  {
LABEL_186:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x23B804CF8](exception, "attempting to put back a buffer the instance does not own");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v38 = *(char **)(v26 + 112);
  v39 = *(char **)(v26 + 104);
  v40 = v38 - v39;
  if (v38 == v39)
    v41 = 0;
  else
    v41 = ((v38 - v39) << 6) - 1;
  v43 = *(_QWORD *)(v26 + 128);
  v42 = *(_QWORD *)(v26 + 136);
  v44 = v42 + v43;
  if (v41 == v42 + v43)
  {
    if (v43 >= 0x200)
    {
      *(_QWORD *)(v26 + 128) = v43 - 512;
      v45 = v39 + 8;
      v46 = *(_QWORD *)v39;
      *(_QWORD *)(v26 + 104) = v39 + 8;
      if (v38 != *(char **)(v26 + 120))
      {
LABEL_157:
        *(_QWORD *)v38 = v46;
        goto LABEL_158;
      }
      v47 = *(char **)(v26 + 96);
      if (v45 > v47)
      {
        v48 = (v45 - v47) >> 3;
        if (v48 >= -1)
          v49 = v48 + 1;
        else
          v49 = v48 + 2;
        v50 = v49 >> 1;
        v51 = -v50;
        v52 = &v45[-8 * v50];
        v53 = v38 - v45;
        if (v38 != v45)
        {
          memmove(&v45[-8 * v50], v45, v38 - v45);
          v38 = *(char **)(v26 + 104);
        }
        v54 = &v38[8 * v51];
        v38 = &v52[v53];
        *(_QWORD *)(v26 + 104) = v54;
        *(_QWORD *)(v26 + 112) = &v52[v53];
        goto LABEL_157;
      }
      if (v38 == v47)
        v66 = 1;
      else
        v66 = (v38 - v47) >> 2;
      if (!(v66 >> 61))
      {
        v67 = (char *)operator new(8 * v66);
        v68 = &v67[8 * (v66 >> 2)];
        v70 = v38 - v45;
        v69 = v38 == v45;
        v38 = v68;
        if (v69)
          goto LABEL_155;
        v38 = &v68[v70 & 0xFFFFFFFFFFFFFFF8];
        v71 = v70 - 8;
        if (v71 >= 0x38)
        {
          v123 = &v67[8 * (v66 >> 2)];
          v72 = v123;
          if ((unint64_t)(v123 - v45) >= 0x20)
          {
            v124 = (v71 >> 3) + 1;
            v125 = 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
            v72 = &v68[v125];
            v45 += v125;
            v126 = (__int128 *)(v39 + 24);
            v127 = v123 + 16;
            v128 = v124 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v129 = *v126;
              *(v127 - 1) = *(v126 - 1);
              *v127 = v129;
              v126 += 2;
              v127 += 2;
              v128 -= 4;
            }
            while (v128);
            if (v124 == (v124 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_155:
              *(_QWORD *)(v26 + 96) = v67;
              *(_QWORD *)(v26 + 104) = v68;
              *(_QWORD *)(v26 + 112) = v38;
              *(_QWORD *)(v26 + 120) = &v67[8 * v66];
              if (v47)
              {
                operator delete(v47);
                v38 = *(char **)(v26 + 112);
              }
              goto LABEL_157;
            }
          }
        }
        else
        {
          v72 = &v67[8 * (v66 >> 2)];
        }
        do
        {
          v130 = *(_QWORD *)v45;
          v45 += 8;
          *(_QWORD *)v72 = v130;
          v72 += 8;
        }
        while (v72 != v38);
        goto LABEL_155;
      }
LABEL_188:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v55 = v40 >> 3;
    v56 = *(char **)(v26 + 120);
    v57 = *(char **)(v26 + 96);
    if (v40 >> 3 >= (unint64_t)((v56 - v57) >> 3))
    {
      if (v56 == v57)
        v60 = 1;
      else
        v60 = (v56 - v57) >> 2;
      if (!(v60 >> 61))
      {
        v61 = (char *)operator new(8 * v60);
        v62 = operator new(0x1000uLL);
        v63 = &v61[8 * v55];
        v64 = &v61[8 * v60];
        if (v55 == v60)
        {
          v152 = v62;
          if (v40 < 1)
          {
            if (v38 == v39)
              v74 = 1;
            else
              v74 = v40 >> 2;
            if (v74 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v63 = (char *)operator new(8 * v74);
            v64 = &v63[8 * v74];
            operator delete(v61);
            v39 = *(char **)(v26 + 104);
            v38 = *(char **)(v26 + 112);
            v61 = v63;
          }
          else
          {
            v65 = v55 + 2;
            if (v55 >= -1)
              v65 = v55 + 1;
            v63 -= 8 * (v65 >> 1);
          }
          v62 = v152;
        }
        *(_QWORD *)v63 = v62;
        v75 = v63 + 8;
        if (v38 != v39)
        {
          do
          {
            if (v63 == v61)
            {
              if (v75 >= v64)
              {
                if (v64 == v61)
                  v82 = 1;
                else
                  v82 = (v64 - v61) >> 2;
                if (v82 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v83 = (char *)operator new(8 * v82);
                v84 = v83;
                v85 = (v82 + 3) >> 2;
                v63 = &v83[8 * v85];
                v86 = v75 - v61;
                v69 = v75 == v61;
                v75 = v63;
                if (!v69)
                {
                  v75 = &v63[v86 & 0xFFFFFFFFFFFFFFF8];
                  v87 = v86 - 8;
                  v88 = &v83[8 * v85];
                  v89 = v61;
                  if (v87 < 0x38)
                    goto LABEL_192;
                  v90 = 8 * v85;
                  v88 = &v83[8 * v85];
                  v89 = v61;
                  if ((unint64_t)(v88 - v61) < 0x20)
                    goto LABEL_192;
                  v91 = (v87 >> 3) + 1;
                  v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
                  v88 = &v63[v92];
                  v89 = &v61[v92];
                  v93 = (__int128 *)(v61 + 16);
                  v94 = &v83[v90 + 16];
                  v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v96 = *v93;
                    *((_OWORD *)v94 - 1) = *(v93 - 1);
                    *(_OWORD *)v94 = v96;
                    v93 += 2;
                    v94 += 32;
                    v95 -= 4;
                  }
                  while (v95);
                  if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_192:
                    do
                    {
                      v97 = *(_QWORD *)v89;
                      v89 += 8;
                      *(_QWORD *)v88 = v97;
                      v88 += 8;
                    }
                    while (v88 != v75);
                  }
                }
                v64 = &v83[8 * v82];
                operator delete(v61);
                v61 = v84;
              }
              else
              {
                v78 = (v64 - v75) >> 3;
                if (v78 >= -1)
                  v79 = v78 + 1;
                else
                  v79 = v78 + 2;
                v80 = v79 >> 1;
                v63 = &v61[8 * (v79 >> 1)];
                v81 = v61;
                if (v75 != v61)
                {
                  memmove(v63, v61, v75 - v61);
                  v81 = v75;
                }
                v75 = (char *)v81 + 8 * v80;
              }
            }
            v77 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            *((_QWORD *)v63 - 1) = v77;
            v63 -= 8;
          }
          while (v38 != *(char **)(v26 + 104));
        }
        v76 = *(void **)(v26 + 96);
        *(_QWORD *)(v26 + 96) = v61;
        *(_QWORD *)(v26 + 104) = v63;
        *(_QWORD *)(v26 + 112) = v75;
        *(_QWORD *)(v26 + 120) = v64;
        v32 = (std::mutex *)(v26 + 8);
        if (v76)
          operator delete(v76);
        goto LABEL_159;
      }
      goto LABEL_188;
    }
    v58 = operator new(0x1000uLL);
    v59 = v58;
    if (v56 != v38)
    {
      *(_QWORD *)v38 = v58;
LABEL_158:
      *(_QWORD *)(v26 + 112) += 8;
LABEL_159:
      v39 = *(char **)(v26 + 104);
      v42 = *(_QWORD *)(v26 + 136);
      v44 = *(_QWORD *)(v26 + 128) + v42;
      goto LABEL_160;
    }
    if (v39 == v57)
    {
      if (v38 == v39)
        v98 = 1;
      else
        v98 = (v56 - v39) >> 2;
      if (v98 >> 61)
        goto LABEL_188;
      v99 = (char *)operator new(8 * v98);
      v100 = (v98 + 3) >> 2;
      v73 = &v99[8 * v100];
      v101 = v73;
      if (v38 != v39)
      {
        v101 = &v73[8 * v55];
        v102 = &v99[8 * v100];
        v103 = v39;
        if ((unint64_t)(v40 - 8) < 0x38)
          goto LABEL_193;
        v104 = &v99[8 * v100];
        v102 = v104;
        v103 = v39;
        if ((unint64_t)(v104 - v39) < 0x20)
          goto LABEL_193;
        v105 = ((unint64_t)(v40 - 8) >> 3) + 1;
        v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
        v102 = &v73[v106];
        v103 = &v39[v106];
        v107 = (__int128 *)(v39 + 16);
        v108 = v104 + 16;
        v109 = v105 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v110 = *v107;
          *(v108 - 1) = *(v107 - 1);
          *v108 = v110;
          v107 += 2;
          v108 += 2;
          v109 -= 4;
        }
        while (v109);
        if (v105 != (v105 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_193:
          do
          {
            v111 = *(_QWORD *)v103;
            v103 += 8;
            *(_QWORD *)v102 = v111;
            v102 += 8;
          }
          while (v102 != v101);
        }
      }
      *(_QWORD *)(v26 + 96) = v99;
      *(_QWORD *)(v26 + 104) = v73;
      *(_QWORD *)(v26 + 112) = v101;
      *(_QWORD *)(v26 + 120) = &v99[8 * v98];
      if (v39)
      {
        operator delete(v39);
        v73 = *(char **)(v26 + 104);
      }
    }
    else
    {
      v73 = v39;
    }
    *((_QWORD *)v73 - 1) = v59;
    v112 = *(char **)(v26 + 104);
    v113 = *(char **)(v26 + 112);
    *(_QWORD *)(v26 + 104) = v112 - 8;
    v114 = *((_QWORD *)v112 - 1);
    *(_QWORD *)(v26 + 104) = v112;
    if (v113 != *(char **)(v26 + 120))
    {
LABEL_142:
      *(_QWORD *)v113 = v114;
      goto LABEL_158;
    }
    v115 = *(char **)(v26 + 96);
    if (v112 > v115)
    {
      v116 = (v112 - v115) >> 3;
      if (v116 >= -1)
        v117 = v116 + 1;
      else
        v117 = v116 + 2;
      v118 = v117 >> 1;
      v119 = -v118;
      v120 = &v112[-8 * v118];
      v121 = v113 - v112;
      if (v121)
      {
        memmove(&v112[-8 * v118], v112, v121);
        v112 = *(char **)(v26 + 104);
      }
      v122 = &v120[v121];
      *(_QWORD *)(v26 + 104) = &v112[8 * v119];
      *(_QWORD *)(v26 + 112) = v122;
      *(_QWORD *)v122 = v114;
      goto LABEL_158;
    }
    if (v113 == v115)
      v136 = 1;
    else
      v136 = (v113 - v115) >> 2;
    if (v136 >> 61)
      goto LABEL_188;
    v137 = (char *)operator new(8 * v136);
    v138 = &v137[8 * (v136 >> 2)];
    v139 = v113 - v112;
    v69 = v113 == v112;
    v113 = v138;
    if (!v69)
    {
      v113 = &v138[v139 & 0xFFFFFFFFFFFFFFF8];
      v140 = v139 - 8;
      if (v140 < 0x38)
      {
        v141 = &v137[8 * (v136 >> 2)];
        do
        {
LABEL_183:
          v150 = *(_QWORD *)v112;
          v112 += 8;
          *(_QWORD *)v141 = v150;
          v141 += 8;
        }
        while (v141 != v113);
        goto LABEL_184;
      }
      v142 = &v137[8 * (v136 >> 2)];
      v141 = v142;
      if ((unint64_t)(v142 - v112) < 0x20)
        goto LABEL_183;
      v143 = (v140 >> 3) + 1;
      v144 = 8 * (v143 & 0x3FFFFFFFFFFFFFFCLL);
      v141 = &v138[v144];
      v145 = &v112[v144];
      v146 = (__int128 *)(v112 + 16);
      v147 = v142 + 16;
      v148 = v143 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v149 = *v146;
        *(v147 - 1) = *(v146 - 1);
        *v147 = v149;
        v146 += 2;
        v147 += 2;
        v148 -= 4;
      }
      while (v148);
      v112 = v145;
      if (v143 != (v143 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_183;
    }
LABEL_184:
    *(_QWORD *)(v26 + 96) = v137;
    *(_QWORD *)(v26 + 104) = v138;
    *(_QWORD *)(v26 + 112) = v113;
    *(_QWORD *)(v26 + 120) = &v137[8 * v136];
    if (v115)
    {
      operator delete(v115);
      v113 = *(char **)(v26 + 112);
    }
    goto LABEL_142;
  }
LABEL_160:
  *(_QWORD *)(*(_QWORD *)&v39[(v44 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v44 & 0x1FF)) = a2;
  *(_QWORD *)(v26 + 136) = v42 + 1;
  std::mutex::unlock(v32);
  if (!v154)
    goto LABEL_164;
  v131 = (unint64_t *)&v154->__shared_owners_;
  do
    v132 = __ldaxr(v131);
  while (__stlxr(v132 - 1, v131));
  if (!v132)
  {
    ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
    std::__shared_weak_count::__release_weak(v154);
    v133 = v153;
    if (!v153)
      return;
  }
  else
  {
LABEL_164:
    v133 = v153;
    if (!v153)
      return;
  }
  v134 = (unint64_t *)&v133->__shared_owners_;
  do
    v135 = __ldaxr(v134);
  while (__stlxr(v135 - 1, v134));
  if (!v135)
  {
    ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
    std::__shared_weak_count::__release_weak(v133);
  }
}

void sub_236E144AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::mutex *a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  operator delete(__p);
  operator delete(v13);
  std::mutex::unlock(a10);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void support::log::manager::add_delegates(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::mutex *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 != a2)
  {
    v5 = (std::mutex *)(a1 + 8);
    v6 = a1 + 120;
    do
    {
      std::mutex::lock(v5);
      v7 = operator new(0x18uLL);
      v8 = *(_QWORD *)(v2 + 16);
      *(_QWORD *)(v2 + 16) = 0;
      v7[1] = v6;
      v7[2] = v8;
      v9 = *(_QWORD *)(a1 + 120);
      *v7 = v9;
      *(_QWORD *)(v9 + 8) = v7;
      *(_QWORD *)(a1 + 120) = v7;
      ++*(_QWORD *)(a1 + 136);
      std::mutex::unlock(v5);
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != a2);
  }
}

void sub_236E14618(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void support::log::manager::set_defaults(support::log::manager *this)
{
  std::mutex *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *((_BYTE *)this + 112) = 3;
  if (*((_QWORD *)this + 17))
  {
    v3 = (char *)this + 120;
    v4 = *((_QWORD *)this + 15);
    v5 = (char *)*((_QWORD *)this + 16);
    v6 = *(_QWORD *)v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    *((_QWORD *)this + 17) = 0;
    if (v5 != (char *)this + 120)
    {
      do
      {
        v8 = (char *)*((_QWORD *)v5 + 1);
        v7 = *((_QWORD *)v5 + 2);
        *((_QWORD *)v5 + 2) = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v3);
    }
  }
  std::mutex::unlock(v2);
}

void support::log::manager::message_delegates(support::log::manager *a1, uint64_t a2, char *a3)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)((char *)a1 + 120);
  v5 = *((_QWORD *)a1 + 16);
  if ((support::log::manager *)v5 != (support::log::manager *)((char *)a1 + 120))
  {
    do
    {
      a1 = (support::log::manager *)(***(uint64_t (****)(_QWORD, uint64_t, char *))(v5 + 16))(*(_QWORD *)(v5 + 16), a2, a3);
      v5 = *(_QWORD *)(v5 + 8);
    }
    while ((_QWORD *)v5 != v4);
  }
  support::log::manager::release_log_buffer(a1, a3);
}

void support::log::stdout_delegate::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x20uLL);
  v5 = v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    v4[1] = v6;
    v4[2] = v7;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    *((_BYTE *)v4 + 24) = 1;
    std::__shared_weak_count::__release_weak(v7);
    *v5 = &off_25086AE28;
    std::__shared_weak_count::__release_weak(v7);
    *a2 = v5;
  }
  else
  {
    v4[1] = v6;
    v4[2] = 0;
    *((_BYTE *)v4 + 24) = 1;
    *v4 = &off_25086AE28;
    *a2 = v4;
  }
}

uint64_t support::log::stdout_delegate::stdout_delegate(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = &unk_25086ADB0;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v3;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_BYTE *)(a1 + 24) = 1;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_QWORD *)a1 = &off_25086AE28;
  return a1;
}

{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = &unk_25086ADB0;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v3;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_BYTE *)(a1 + 24) = 1;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_QWORD *)a1 = &off_25086AE28;
  return a1;
}

double support::log::stdout_delegate::create@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v3;
  double result;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  v3 = operator new(0x20uLL);
  result = 0.0;
  *v3 = 0u;
  v3[1] = 0u;
  *(_QWORD *)v3 = &off_25086AE28;
  *a1 = v3;
  return result;
}

void support::log::stdout_delegate::message(uint64_t a1, uint64_t a2, const char *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[3];

  if (a3)
  {
    memset(v8, 170, sizeof(v8));
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v8);
    if (LOBYTE(v8[2]))
    {
      if (!v8[1])
        return;
      v4 = std::__shared_weak_count::lock((std::__shared_weak_count *)v8[1]);
      if (v4)
      {
        v5 = v4;
        if (v8[0])
          fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s\n", a3);
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s\n", a3);
    }
    if (LOBYTE(v8[2]))
    {
      if (v8[1])
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8[1]);
    }
  }
}

support::log::manager_global *support::log::manager_global::manager_global(support::log::manager_global *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (**v11)(support::log::manager::parameters *__hidden);
  char v12;
  std::string __p;

  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&__p, "global");
  v10 = 0;
  v11 = &off_25086ADE0;
  v12 = 3;
  v8 = (uint64_t)&v8;
  v9 = &v8;
  support::log::manager::manager((uint64_t)this, &__p, (uint64_t)&v11, &v8);
  if (v10)
  {
    v2 = v8;
    v3 = v9;
    v4 = *v9;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    v10 = 0;
    if (v3 != &v8)
    {
      do
      {
        v7 = (uint64_t *)v3[1];
        v6 = v3[2];
        v3[2] = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v3);
        v3 = v7;
      }
      while (v7 != &v8);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)this = off_25086AE58;
  return this;
}

void sub_236E14B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::list<std::unique_ptr<support::log::delegate>>::~list(&a9);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *support::log::client::descriptor::descriptor(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t descriptor_instance;

  *a1 = off_25086AE88;
  descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance(a2, a3);
  a1[1] = descriptor_instance;
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance + 8;
  a1[4] = descriptor_instance + 32;
  a1[5] = descriptor_instance + 56;
  return a1;
}

{
  uint64_t descriptor_instance;

  *a1 = off_25086AE88;
  descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance(a2, a3);
  a1[1] = descriptor_instance;
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance + 8;
  a1[4] = descriptor_instance + 32;
  a1[5] = descriptor_instance + 56;
  return a1;
}

uint64_t support::log::global_client_descriptor_manager::get_descriptor_instance(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  const std::string::value_type *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  char *v16;
  const char *v17;
  const char *v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const void **v35;
  std::string *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const void **v40;
  std::string *v41;
  int v42;
  _QWORD *v43;
  std::string *v44;
  float v45;
  _QWORD *v46;
  _QWORD *v47;
  _BOOL8 v48;
  unint64_t v49;
  unint64_t v50;
  size_t prime;
  unint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  _QWORD **v56;
  size_t v57;
  size_t v58;
  size_t v59;
  _QWORD *i;
  size_t v61;
  uint64_t v62;
  unint64_t v63;
  uint8x8_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  size_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  void *v74;
  uint64_t v75;
  const std::string::value_type *v76;
  std::string v77;
  std::string v78;
  std::string __p;
  std::string __dst;

  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals))
  {
    *(_OWORD *)&qword_2564524C8 = 0u;
    *(_OWORD *)&qword_2564524B8 = 0u;
    dword_2564524D8 = 1065353216;
    __cxa_guard_release(&_MergedGlobals);
  }
  std::mutex::lock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
  v5 = *(char *)(a1 + 23);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  v7 = v6 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v6 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v6 + 1;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6 + 1;
    if (!v6)
      goto LABEL_16;
  }
  if (v5 >= 0)
    v11 = (const std::string::value_type *)a1;
  else
    v11 = *(const std::string::value_type **)a1;
  memmove(p_dst, v11, v6);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v6) = 44;
  v12 = *(char *)(a2 + 23);
  if (v12 >= 0)
    v13 = (const std::string::value_type *)a2;
  else
    v13 = *(const std::string::value_type **)a2;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 23);
  else
    v14 = *(_QWORD *)(a2 + 8);
  v15 = std::string::append(&__dst, v13, v14);
  __p = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>((uint64_t)&__p))
      goto LABEL_151;
  }
  else if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>((uint64_t)&__p))
  {
    goto LABEL_151;
  }
  v16 = (char *)operator new(0x40uLL);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v78 = *(std::string *)a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v77 = *(std::string *)a2;
  *(_QWORD *)v16 = off_25086AF88;
  v17 = v16 + 8;
  *(std::string *)(v16 + 8) = v78;
  memset(&v78, 0, sizeof(v78));
  *(std::string *)(v16 + 32) = v77;
  memset(&v77, 0, sizeof(v77));
  if (v16[31] < 0)
  {
    v17 = *(const char **)v17;
    v18 = v16 + 32;
    if ((v16[55] & 0x80000000) == 0)
      goto LABEL_34;
  }
  else
  {
    v18 = v16 + 32;
    if ((v16[55] & 0x80000000) == 0)
      goto LABEL_34;
  }
  v18 = *(const char **)v18;
LABEL_34:
  *((_QWORD *)v16 + 7) = os_log_create(v17, v18);
  v19 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  size = __p.__r_.__value_.__l.__size_;
  v20 = (const std::string::value_type *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v23 = __p.__r_.__value_.__l.__size_;
  v24 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t *)p_p, v23);
  v25 = v24;
  v26 = qword_2564524C0;
  if (qword_2564524C0)
  {
    v27 = (uint8x8_t)vcnt_s8((int8x8_t)qword_2564524C0);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      v28 = v24;
      if (v24 >= qword_2564524C0)
        v28 = v24 % qword_2564524C0;
    }
    else
    {
      v28 = (qword_2564524C0 - 1) & v24;
    }
    v29 = *(uint64_t ***)(qword_2564524B8 + 8 * v28);
    if (v29)
    {
      v76 = v20;
      v30 = *v29;
      if (*v29)
      {
        if (v27.u32[0] < 2uLL)
        {
          v31 = qword_2564524C0 - 1;
          while (1)
          {
            v37 = v30[1];
            if (v37 == v25)
            {
              v38 = *((unsigned __int8 *)v30 + 39);
              if ((v38 & 0x80u) == 0)
                v39 = *((unsigned __int8 *)v30 + 39);
              else
                v39 = v30[3];
              if (v39 == v23)
              {
                v40 = (const void **)(v30 + 2);
                if ((v38 & 0x80) != 0)
                {
                  v75 = v31;
                  v42 = memcmp(*v40, p_p, v30[3]);
                  v31 = v75;
                  if (!v42)
                    goto LABEL_149;
                }
                else
                {
                  if (!*((_BYTE *)v30 + 39))
                    goto LABEL_149;
                  v41 = p_p;
                  while (*(unsigned __int8 *)v40 == v41->__r_.__value_.__s.__data_[0])
                  {
                    v40 = (const void **)((char *)v40 + 1);
                    v41 = (std::string *)((char *)v41 + 1);
                    if (!--v38)
                      goto LABEL_149;
                  }
                }
              }
            }
            else if ((v37 & v31) != v28)
            {
              goto LABEL_84;
            }
            v30 = (uint64_t *)*v30;
            if (!v30)
              goto LABEL_84;
          }
        }
        do
        {
          v32 = v30[1];
          if (v32 == v25)
          {
            v33 = *((unsigned __int8 *)v30 + 39);
            if ((v33 & 0x80u) == 0)
              v34 = *((unsigned __int8 *)v30 + 39);
            else
              v34 = v30[3];
            if (v34 == v23)
            {
              v35 = (const void **)(v30 + 2);
              if ((v33 & 0x80) != 0)
              {
                if (!memcmp(*v35, p_p, v30[3]))
                  goto LABEL_149;
              }
              else
              {
                if (!*((_BYTE *)v30 + 39))
                  goto LABEL_149;
                v36 = p_p;
                while (*(unsigned __int8 *)v35 == v36->__r_.__value_.__s.__data_[0])
                {
                  v35 = (const void **)((char *)v35 + 1);
                  v36 = (std::string *)((char *)v36 + 1);
                  if (!--v33)
                    goto LABEL_149;
                }
              }
            }
          }
          else
          {
            if (v32 >= v26)
              v32 %= v26;
            if (v32 != v28)
              break;
          }
          v30 = (uint64_t *)*v30;
        }
        while (v30);
      }
LABEL_84:
      v20 = v76;
    }
  }
  else
  {
    v28 = 0xAAAAAAAAAAAAAAAALL;
  }
  __dst.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAA00;
  v43 = operator new(0x30uLL);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&qword_2564524C8;
  *v43 = 0;
  v43[1] = v25;
  v44 = (std::string *)(v43 + 2);
  if (v19 < 0)
  {
    std::string::__init_copy_ctor_external(v44, v20, size);
  }
  else
  {
    *(_OWORD *)&v44->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v43[4] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v43[5] = v16;
  __dst.__r_.__value_.__s.__data_[16] = 1;
  v45 = (float)(unint64_t)(qword_2564524D0 + 1);
  if (!v26 || (float)(*(float *)&dword_2564524D8 * (float)v26) < v45)
  {
    v48 = 1;
    if (v26 >= 3)
      v48 = (v26 & (v26 - 1)) != 0;
    v49 = v48 | (2 * v26);
    v50 = vcvtps_u32_f32(v45 / *(float *)&dword_2564524D8);
    if (v49 <= v50)
      prime = v50;
    else
      prime = v49;
    if (prime == 1)
    {
      prime = 2;
      v52 = 0x256452000;
    }
    else
    {
      v52 = 0x256452000uLL;
      if ((prime & (prime - 1)) != 0)
        prime = std::__next_prime(prime);
    }
    v26 = *(_QWORD *)(v52 + 1216);
    if (prime > v26)
      goto LABEL_102;
    if (prime >= v26)
      goto LABEL_135;
    v63 = vcvtps_u32_f32((float)(unint64_t)qword_2564524D0 / *(float *)&dword_2564524D8);
    if (v26 < 3 || (v64 = (uint8x8_t)vcnt_s8((int8x8_t)v26), v64.i16[0] = vaddlv_u8(v64), v64.u32[0] > 1uLL))
    {
      v63 = std::__next_prime(v63);
    }
    else
    {
      v65 = 1 << -(char)__clz(v63 - 1);
      if (v63 >= 2)
        v63 = v65;
    }
    if (prime <= v63)
      prime = v63;
    if (prime >= v26)
    {
      v26 = *(_QWORD *)(v52 + 1216);
    }
    else
    {
      if (prime)
      {
LABEL_102:
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v53 = operator new(8 * prime);
        v54 = (void *)qword_2564524B8;
        qword_2564524B8 = (uint64_t)v53;
        if (v54)
          operator delete(v54);
        v55 = 0;
        *(_QWORD *)(v52 + 1216) = prime;
        do
          *(_QWORD *)(qword_2564524B8 + 8 * v55++) = 0;
        while (prime != v55);
        v56 = (_QWORD **)qword_2564524C8;
        if (!qword_2564524C8)
          goto LABEL_134;
        v57 = *(_QWORD *)(qword_2564524C8 + 8);
        v58 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v59 = v57 & v58;
          *(_QWORD *)(qword_2564524B8 + 8 * v59) = &qword_2564524C8;
          for (i = *v56; *v56; i = *v56)
          {
            v61 = i[1] & v58;
            if (v61 == v59)
            {
              v56 = (_QWORD **)i;
            }
            else if (*(_QWORD *)(qword_2564524B8 + 8 * v61))
            {
              *v56 = (_QWORD *)*i;
              v62 = 8 * v61;
              *i = **(_QWORD **)(qword_2564524B8 + v62);
              **(_QWORD **)(qword_2564524B8 + v62) = i;
            }
            else
            {
              *(_QWORD *)(qword_2564524B8 + 8 * v61) = v56;
              v56 = (_QWORD **)i;
              v59 = v61;
            }
          }
LABEL_134:
          v26 = prime;
          goto LABEL_135;
        }
        if (v57 >= prime)
          v57 %= prime;
        *(_QWORD *)(qword_2564524B8 + 8 * v57) = &qword_2564524C8;
        v66 = *v56;
        if (!*v56)
          goto LABEL_134;
        while (1)
        {
          v68 = v66[1];
          if (v68 >= prime)
            v68 %= prime;
          if (v68 == v57)
            goto LABEL_128;
          if (*(_QWORD *)(qword_2564524B8 + 8 * v68))
          {
            *v56 = (_QWORD *)*v66;
            v67 = 8 * v68;
            *v66 = **(_QWORD **)(qword_2564524B8 + v67);
            **(_QWORD **)(qword_2564524B8 + v67) = v66;
            v66 = v56;
LABEL_128:
            v56 = (_QWORD **)v66;
            v66 = (_QWORD *)*v66;
            if (!v66)
              goto LABEL_134;
          }
          else
          {
            *(_QWORD *)(qword_2564524B8 + 8 * v68) = v56;
            v56 = (_QWORD **)v66;
            v66 = (_QWORD *)*v66;
            v57 = v68;
            if (!v66)
              goto LABEL_134;
          }
        }
      }
      v74 = (void *)qword_2564524B8;
      qword_2564524B8 = 0;
      if (v74)
        operator delete(v74);
      v26 = 0;
      *(_QWORD *)(v52 + 1216) = 0;
    }
LABEL_135:
    v69 = v26 - 1;
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v25 >= v26)
      {
        v28 = v25 % v26;
        v46 = *(_QWORD **)(qword_2564524B8 + 8 * (v25 % v26));
        v47 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
        if (v46)
          goto LABEL_91;
      }
      else
      {
        v28 = v25;
        v46 = *(_QWORD **)(qword_2564524B8 + 8 * v25);
        v47 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
        if (v46)
          goto LABEL_91;
      }
    }
    else
    {
      v28 = v69 & v25;
      v46 = *(_QWORD **)(qword_2564524B8 + 8 * (v69 & v25));
      v47 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
      if (v46)
        goto LABEL_91;
    }
LABEL_137:
    *v47 = qword_2564524C8;
    qword_2564524C8 = __dst.__r_.__value_.__r.__words[0];
    *(_QWORD *)(qword_2564524B8 + 8 * v28) = &qword_2564524C8;
    if (*(_QWORD *)__dst.__r_.__value_.__l.__data_)
    {
      v70 = *(_QWORD *)(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 8);
      if ((v26 & (v26 - 1)) != 0)
      {
        if (v70 >= v26)
          v70 %= v26;
      }
      else
      {
        v70 &= v26 - 1;
      }
      *(_QWORD *)(qword_2564524B8 + 8 * v70) = __dst.__r_.__value_.__r.__words[0];
    }
    goto LABEL_148;
  }
  v46 = *(_QWORD **)(qword_2564524B8 + 8 * v28);
  v47 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
  if (!v46)
    goto LABEL_137;
LABEL_91:
  *v47 = *v46;
  *v46 = __dst.__r_.__value_.__r.__words[0];
LABEL_148:
  ++qword_2564524D0;
LABEL_149:
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v77.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_151:
      v71 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>((uint64_t)&__p);
      if (v71)
        goto LABEL_152;
LABEL_157:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
  }
  else if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_151;
  }
  operator delete(v78.__r_.__value_.__l.__data_);
  v71 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>((uint64_t)&__p);
  if (!v71)
    goto LABEL_157;
LABEL_152:
  v72 = v71[5];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
  return v72;
}

void sub_236E1544C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)&a31);
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a23 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a30 & 0x80000000) == 0)
    {
LABEL_8:
      std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
      _Unwind_Resume(a1);
    }
LABEL_7:
    operator delete(a25);
    std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
    _Unwind_Resume(a1);
  }
  operator delete(a18);
  if ((a30 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL support::log::client::descriptor::operator==(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

_QWORD *support::log::client::client(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t descriptor_instance;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p[2];
  uint64_t v15;
  void *v16[2];
  uint64_t v17;

  *a1 = &unk_25086AAF8;
  *(_OWORD *)v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v15 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  a1[1] = off_25086AE88;
  descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance((uint64_t)v16, (uint64_t)__p);
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance;
  a1[4] = descriptor_instance + 8;
  a1[5] = descriptor_instance + 32;
  a1[6] = descriptor_instance + 56;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(v16[0]);
    if (a4)
      goto LABEL_4;
LABEL_7:
    pthread_mutex_lock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
    if (!qword_256452220)
    {
      v7 = operator new(0xA8uLL);
      v7[1] = 0;
      v7[2] = 0;
      *v7 = off_25086B0F0;
      a4 = (uint64_t)(v7 + 3);
      support::log::manager_global::manager_global((support::log::manager_global *)(v7 + 3));
      v8 = (std::__shared_weak_count *)off_256452228;
      qword_256452220 = (uint64_t)(v7 + 3);
      off_256452228 = v7;
      if (!v8)
        goto LABEL_15;
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    a4 = qword_256452220;
    v7 = off_256452228;
    if (!off_256452228)
    {
LABEL_17:
      pthread_mutex_unlock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
      a1[7] = a4;
      a1[8] = v7;
      goto LABEL_18;
    }
LABEL_15:
    v11 = v7 + 1;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    goto LABEL_17;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v17) < 0)
    goto LABEL_6;
LABEL_3:
  if (!a4)
    goto LABEL_7;
LABEL_4:
  a1[7] = 0;
  a1[8] = 0;
LABEL_18:
  a1[9] = a4;
  return a1;
}

void sub_236E15740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  void *v23;

  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  pthread_mutex_unlock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
  _Unwind_Resume(a1);
}

_QWORD *support::log::client::client(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t descriptor_instance;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v10;
  unint64_t v11;
  void *__p[2];
  uint64_t v13;
  void *v14[2];
  uint64_t v15;

  *a1 = &unk_25086AAF8;
  *(_OWORD *)v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v13 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  a1[1] = off_25086AE88;
  descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance((uint64_t)v14, (uint64_t)__p);
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance;
  a1[4] = descriptor_instance + 8;
  a1[5] = descriptor_instance + 32;
  a1[6] = descriptor_instance + 56;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(v14[0]);
    v7 = *a4;
    v8 = a4[1];
    a1[7] = *a4;
    a1[8] = v8;
    if (!v8)
      goto LABEL_4;
    goto LABEL_7;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    goto LABEL_6;
LABEL_3:
  v7 = *a4;
  v8 = a4[1];
  a1[7] = *a4;
  a1[8] = v8;
  if (!v8)
  {
LABEL_4:
    a1[9] = v7;
    return a1;
  }
LABEL_7:
  v10 = (unint64_t *)(v8 + 8);
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  a1[9] = a1[7];
  return a1;
}

void sub_236E158B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

_QWORD *support::log::client::client(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *__p[2];
  uint64_t v6;
  void *v7[2];
  uint64_t v8;

  *(_OWORD *)v7 = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v6 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  support::log::client::client(a1, (uint64_t)v7, (uint64_t)__p, 0);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0)
      return a1;
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v7[0]);
  return a1;
}

{
  void *__p[2];
  uint64_t v6;
  void *v7[2];
  uint64_t v8;

  *(_OWORD *)v7 = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v6 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  support::log::client::client(a1, (uint64_t)v7, (uint64_t)__p, 0);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0)
      return a1;
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v7[0]);
  return a1;
}

void sub_236E15998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_236E15A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t support::log::client::get_manager(support::log::client *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t support::log::client::get_descriptor(support::log::client *this)
{
  return (uint64_t)this + 8;
}

BOOL support::log::manager::should_log(uint64_t a1, unsigned int a2, os_log_t oslog)
{
  return *(unsigned __int8 *)(a1 + 112) >= a2 || os_log_type_enabled(oslog, support::log::sOSLogLevel[a2]);
}

void support::log::stdout_delegate::~stdout_delegate(support::log::stdout_delegate *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &unk_25086ADB0;
  if (*((_BYTE *)this + 24))
  {
    v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v1)
      std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &unk_25086ADB0;
  if (*((_BYTE *)this + 24))
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(this);
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void support::log::manager_global::~manager_global(support::log::manager_global *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_25086ADF8;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_25086ADF8;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(uint64_t a1)
{
  int v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t *result;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(char *)(a1 + 23);
  if (v1 >= 0)
    v2 = (uint64_t *)a1;
  else
    v2 = *(uint64_t **)a1;
  if (v1 >= 0)
    v3 = *(unsigned __int8 *)(a1 + 23);
  else
    v3 = *(_QWORD *)(a1 + 8);
  v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](v2, v3);
  v5 = qword_2564524C0;
  if (!qword_2564524C0)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)qword_2564524C0);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v4;
    if (v4 >= qword_2564524C0)
      v8 = v4 % qword_2564524C0;
  }
  else
  {
    v8 = (qword_2564524C0 - 1) & v4;
  }
  v10 = *(uint64_t ***)(qword_2564524B8 + 8 * v8);
  if (v10)
  {
    v11 = *v10;
    if (*v10)
    {
      if (v7.u32[0] < 2uLL)
      {
        v12 = qword_2564524C0 - 1;
        while (1)
        {
          v17 = v11[1];
          if (v17 == v6)
          {
            v18 = *((unsigned __int8 *)v11 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v11 + 39);
            else
              v19 = v11[3];
            if (v19 == v3)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v11[2], v2, v11[3]))
                  return v11;
              }
              else
              {
                if (!*((_BYTE *)v11 + 39))
                  return v11;
                v20 = 0;
                while (*((unsigned __int8 *)v11 + v20 + 16) == *((unsigned __int8 *)v2 + v20))
                {
                  if (v18 == ++v20)
                    return v11;
                }
              }
            }
          }
          else if ((v17 & v12) != v8)
          {
            return 0;
          }
          result = 0;
          v11 = (uint64_t *)*v11;
          if (!v11)
            return result;
        }
      }
      while (1)
      {
        v13 = v11[1];
        if (v13 == v6)
        {
          v14 = *((unsigned __int8 *)v11 + 39);
          if ((v14 & 0x80u) == 0)
            v15 = *((unsigned __int8 *)v11 + 39);
          else
            v15 = v11[3];
          if (v15 == v3)
          {
            if ((v14 & 0x80) != 0)
            {
              if (!memcmp((const void *)v11[2], v2, v11[3]))
                return v11;
            }
            else
            {
              if (!*((_BYTE *)v11 + 39))
                return v11;
              v16 = 0;
              while (*((unsigned __int8 *)v11 + v16 + 16) == *((unsigned __int8 *)v2 + v16))
              {
                if (v14 == ++v16)
                  return v11;
              }
            }
          }
        }
        else
        {
          if (v13 >= v5)
            v13 %= v5;
          if (v13 != v8)
            return 0;
        }
        result = 0;
        v11 = (uint64_t *)*v11;
        if (!v11)
          return result;
      }
    }
  }
  return 0;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;

  if (a2 > 0x20)
  {
    if (a2 <= 0x40)
    {
      v5 = *(uint64_t *)((char *)a1 + a2 - 16);
      v6 = *a1 - 0x3C5A37A36834CED9 * (v5 + a2);
      v8 = a1[2];
      v7 = a1[3];
      v9 = __ROR8__(v6 + v7, 52);
      v10 = v6 + a1[1];
      v11 = __ROR8__(v10, 7);
      v12 = v10 + v8;
      v13 = *(uint64_t *)((char *)a1 + a2 - 32) + v8;
      v14 = v11 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v5 + a2), 37) + v9 + __ROR8__(v12, 31);
      v15 = 0xC3A5C85C97CB3127
          * (*(uint64_t *)((char *)a1 + a2 - 24) + v13 + v5 + *(uint64_t *)((char *)a1 + a2 - 8) + v7 + v14)
          - 0x651E95C4D06FBFB1
          * (v12
           + v7
           + __ROR8__(v13, 37)
           + __ROR8__(*(uint64_t *)((char *)a1 + a2 - 24) + v13, 7)
           + __ROR8__(*(uint64_t *)((char *)a1 + a2 - 8) + v7 + v13, 52)
           + __ROR8__(*(uint64_t *)((char *)a1 + a2 - 24) + v13 + v5, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v14 - 0x3C5A37A36834CED9 * (v15 ^ (v15 >> 47))) ^ ((v14 - 0x3C5A37A36834CED9 * (v15 ^ (v15 >> 47))) >> 47));
    }
    v21 = 0x9DDFEA08EB382D69;
    v22 = *(uint64_t *)((char *)a1 + a2 - 48);
    v23 = *(uint64_t *)((char *)a1 + a2 - 40);
    v24 = *(uint64_t *)((char *)a1 + a2 - 24);
    v26 = *(uint64_t *)((char *)a1 + a2 - 64);
    v25 = *(uint64_t *)((char *)a1 + a2 - 56);
    v27 = *(uint64_t *)((char *)a1 + a2 - 16);
    v28 = *(uint64_t *)((char *)a1 + a2 - 8);
    v29 = v25 + v27;
    v30 = 0x9DDFEA08EB382D69
        * (v24 ^ ((0x9DDFEA08EB382D69 * (v24 ^ (v22 + a2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v24 ^ (v22 + a2))));
    v31 = 0x9DDFEA08EB382D69 * (v30 ^ (v30 >> 47));
    v32 = v22 + v25 + v26 + a2;
    v33 = v32 + v23;
    v34 = __ROR8__(v32, 44) + v26 + a2 + __ROR8__(v26 + a2 + v23 - 0x622015F714C7D297 * (v30 ^ (v30 >> 47)), 21);
    v35 = v25 + v27 + *(uint64_t *)((char *)a1 + a2 - 32) - 0x4B6D499041670D8DLL;
    v36 = v24 + v27 + v35;
    v37 = __ROR8__(v36, 44);
    v38 = v36 + v28;
    v39 = v37 + v35 + __ROR8__(v35 + v23 + v28, 21);
    v41 = *a1;
    v40 = a1 + 4;
    v42 = v41 - 0x4B6D499041670D8DLL * v23;
    v43 = -(uint64_t)((a2 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      v44 = *(v40 - 3);
      v45 = v42 + v33 + v29 + v44;
      v46 = v40[2];
      v47 = v40[3];
      v48 = v40[1];
      v29 = v48 + v33 - 0x4B6D499041670D8DLL * __ROR8__(v29 + v34 + v46, 42);
      v49 = v31 + v38;
      v50 = *(v40 - 2);
      v51 = *(v40 - 1);
      v52 = *(v40 - 4) - 0x4B6D499041670D8DLL * v34;
      v53 = v52 + v38 + v51;
      v54 = v52 + v44 + v50;
      v33 = v54 + v51;
      v55 = __ROR8__(v54, 44) + v52;
      v56 = (0xB492B66FBE98F273 * __ROR8__(v45, 37)) ^ v39;
      v42 = 0xB492B66FBE98F273 * __ROR8__(v49, 33);
      v34 = v55 + __ROR8__(v53 + v56, 21);
      v57 = v42 + v39 + *v40;
      v38 = v48 + v46 + v57 + v47;
      v39 = __ROR8__(v48 + v46 + v57, 44) + v57 + __ROR8__(v29 + v50 + v57 + v47, 21);
      v40 += 8;
      v31 = v56;
      v43 += 64;
    }
    while (v43);
    v58 = v42
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47));
    v59 = 0x9DDFEA08EB382D69
        * (v58 ^ (v56
                - 0x4B6D499041670D8DLL * (v29 ^ (v29 >> 47))
                - 0x622015F714C7D297
                * ((0x9DDFEA08EB382D69
                  * (v38 ^ ((0x9DDFEA08EB382D69 * (v38 ^ v33)) >> 47) ^ (0x9DDFEA08EB382D69 * (v38 ^ v33)))) ^ ((0x9DDFEA08EB382D69 * (v38 ^ ((0x9DDFEA08EB382D69 * (v38 ^ v33)) >> 47) ^ (0x9DDFEA08EB382D69 * (v38 ^ v33)))) >> 47))));
    v60 = 0x9DDFEA08EB382D69 * (v58 ^ (v59 >> 47) ^ v59);
    goto LABEL_11;
  }
  if (a2 > 0x10)
  {
    v16 = a1[1];
    v17 = 0xB492B66FBE98F273 * *a1;
    v18 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8), 30) + __ROR8__(v17 - v16, 43);
    v19 = v17 + a2 + __ROR8__(v16 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8);
    v20 = 0x9DDFEA08EB382D69 * ((v18 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a1 + a2 - 16)) ^ v19);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v19 ^ (v20 >> 47) ^ v20)) ^ ((0x9DDFEA08EB382D69 * (v19 ^ (v20 >> 47) ^ v20)) >> 47));
  }
  if (a2 >= 9)
  {
    v2 = *(uint64_t *)((char *)a1 + a2 - 8);
    v3 = __ROR8__(v2 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) >> 47))) ^ v2;
  }
  if (a2 < 4)
  {
    v21 = 0x9AE16A3B2F90404FLL;
    if (!a2)
      return v21;
    v60 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                   * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
LABEL_11:
    v21 *= v60 ^ (v60 >> 47);
    return v21;
  }
  v61 = *(unsigned int *)((char *)a1 + a2 - 4);
  v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a1) + a2) ^ v61);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void support::log::global_client_descriptor::~global_client_descriptor(void **this)
{
  *this = off_25086AF88;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(this[1]);
    return;
  }
  operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    goto LABEL_5;
}

{
  *this = off_25086AF88;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(this[1]);
    operator delete(this);
    return;
  }
  if (*((char *)this + 31) < 0)
    goto LABEL_6;
LABEL_3:
  operator delete(this);
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_25086A358, MEMORY[0x24BEDAB00]);
}

void sub_236E16898(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

void std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000236E514CELL)
    return a1 + 24;
  if (((v3 & 0x8000000236E514CELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000236E514CELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000236E514CELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_25086B008;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_25086B008;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::buffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void support::log::buffer::~buffer(support::log::buffer *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;

  *(_QWORD *)this = off_25086B058;
  v2 = (char *)*((_QWORD *)this + 9);
  v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<char *>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<char *>::destroy(*((_QWORD **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;

  *(_QWORD *)this = off_25086B058;
  v2 = (char *)*((_QWORD *)this + 9);
  v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<char *>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<char *>::destroy(*((_QWORD **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

uint64_t std::deque<char *>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__tree<char *>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<char *>::destroy(*a1);
    std::__tree<char *>::destroy(a1[1]);
    operator delete(a1);
  }
}

void std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000236E5165ALL)
    return a1 + 24;
  if (((v3 & 0x8000000236E5165ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000236E5165ALL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000236E5165ALL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_25086B0F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_25086B0F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::manager_global>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t __cxx_global_var_init_2()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_236E0D000);
  }
  return result;
}

uint64_t __cxx_global_var_init_4()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance, &dword_236E0D000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_236E0D000);
  }
  return result;
}

uint64_t __cxx_global_var_init_5()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance, &dword_236E0D000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_236E0D000);
  }
  return result;
}

int *support::crc::generateCRC32(int *this, unsigned int *a2, const unsigned __int8 *a3)
{
  int v3;
  unsigned int v4;
  int v5;

  v3 = *this;
  v4 = ~*this;
  *this = v4;
  if (a3)
  {
    do
    {
      v5 = *(unsigned __int8 *)a2;
      a2 = (unsigned int *)((char *)a2 + 1);
      v4 = support::crc::crc32c_table[v4 ^ v5] ^ (v4 >> 8);
      *this = v4;
      --a3;
    }
    while (a3);
    v3 = ~v4;
  }
  *this = v3;
  return this;
}

void support::parsers::acp::ACPDataType::~ACPDataType(support::parsers::acp::ACPDataType *this)
{
  const void *v2;

  *(_QWORD *)this = off_25086B140;
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 1) = 0;
  }
}

BOOL support::parsers::acp::ACPDataType::init(support::parsers::acp::ACPDataType *this)
{
  CFMutableDataRef Mutable;
  NSObject *v4;
  int v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  *((_QWORD *)this + 1) = Mutable;
  if (Mutable)
  {
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    v4 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315138;
      v6 = "init";
      _os_log_error_impl(&dword_236E0D000, v4, OS_LOG_TYPE_ERROR, "[%s] Failed to init Trace Data Descriptor\n", (uint8_t *)&v5, 0xCu);
    }
  }
  return Mutable != 0;
}

uint64_t support::parsers::acp::ACPDataType::getRawBytesRef(support::parsers::acp::ACPDataType *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t support::parsers::acp::ACPDataType::getExpectedPayloadSize(support::parsers::acp::ACPDataType *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t support::parsers::acp::ACPDataType::getReceivedPayloadSize(support::parsers::acp::ACPDataType *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t support::parsers::acp::ACPDataType::setExpectedPayloadSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

uint64_t support::parsers::acp::ACPDataType::addReceivedPayloadSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) += a2;
  return this;
}

BOOL support::parsers::acp::ACPDataType::isPayloadComplete(support::parsers::acp::ACPDataType *this)
{
  return *((_DWORD *)this + 5) == *((_DWORD *)this + 4);
}

uint64_t support::parsers::acp::ACPDataType::getPendingPayloadSize(support::parsers::acp::ACPDataType *this)
{
  return (*((_DWORD *)this + 4) - *((_DWORD *)this + 5));
}

BOOL support::parsers::acp::ACPDataType::appendToRawBytes(support::parsers::acp::ACPDataType *this, const unsigned __int8 *a2, CFIndex length)
{
  __CFData *v3;
  _BOOL8 result;
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (a2 && (_DWORD)length && (v3 = (__CFData *)*((_QWORD *)this + 1)) != 0)
  {
    CFDataAppendBytes(v3, a2, length);
    return 1;
  }
  else
  {
    v5 = *(NSObject **)(GetOsLogContext() + 8);
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v6 = 136315138;
      v7 = "appendToRawBytes";
      _os_log_error_impl(&dword_236E0D000, v5, OS_LOG_TYPE_ERROR, "[%s] invalid input data\n", (uint8_t *)&v6, 0xCu);
      return 0;
    }
  }
  return result;
}

BOOL support::parsers::acp::SuperFrame::init(support::parsers::acp::SuperFrame *this, char a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  CFMutableDataRef Mutable;
  NSObject *v9;
  int v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *((_BYTE *)this + 72) = a2;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  *((_QWORD *)this + 1) = Mutable;
  if (Mutable)
  {
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    v9 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = 136315138;
      v11 = "init";
      _os_log_error_impl(&dword_236E0D000, v9, OS_LOG_TYPE_ERROR, "[%s] Failed to init Trace Data Descriptor\n", (uint8_t *)&v10, 0xCu);
    }
  }
  return Mutable != 0;
}

void support::parsers::acp::SuperFrame::create(support::parsers::acp::SuperFrame *this@<X0>, _QWORD *a2@<X8>)
{
  char v2;
  _OWORD *v4;
  _QWORD *v5;
  NSObject *v6;
  int v7;
  const char *v8;
  uint64_t v9;

  v2 = (char)this;
  v9 = *MEMORY[0x24BDAC8D0];
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x50uLL);
  v4[3] = 0u;
  v4[4] = 0u;
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  *(_QWORD *)v4 = off_25086B1A0;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  *a2 = v4;
  v5 = operator new(0x20uLL);
  *v5 = off_25086B328;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v4;
  a2[1] = v5;
  if (!support::parsers::acp::SuperFrame::init((support::parsers::acp::SuperFrame *)v4, v2))
  {
    v6 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 136315138;
      v8 = "create";
      _os_log_error_impl(&dword_236E0D000, v6, OS_LOG_TYPE_ERROR, "[%s] Failed to init SuperFrame\n", (uint8_t *)&v7, 0xCu);
    }
  }
}

void sub_236E17248(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_236E1725C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_236E17270(_Unwind_Exception *a1)
{
  support::parsers::acp::SuperFrame *v1;

  support::parsers::acp::SuperFrame::~SuperFrame(v1);
  _Unwind_Resume(a1);
}

BOOL support::parsers::acp::SuperFrame::validateHeader(support::parsers::acp::SuperFrame *this)
{
  NSObject *v2;
  NSObject *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  _BOOL8 result;
  uint64_t v21;
  int v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  NSObject *v26;
  uint32_t v27;
  NSObject *v28;
  int v29;
  NSObject *v30;
  int v31;
  int v32;
  _BYTE v33[10];
  _BYTE v34[6];
  _DWORD v35[5];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v2 = *(NSObject **)(GetOsLogContext() + 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v21 = *((_QWORD *)this + 3);
    v32 = 67109888;
    *(_DWORD *)v33 = (unsigned __int16)v21;
    *(_WORD *)&v33[4] = 1024;
    *(_DWORD *)&v33[6] = WORD1(v21);
    *(_WORD *)v34 = 1024;
    *(_DWORD *)&v34[2] = BYTE4(v21);
    LOWORD(v35[0]) = 1024;
    *(_DWORD *)((char *)v35 + 2) = (unsigned __int16)(HIDWORD(v21) >> 8);
    _os_log_debug_impl(&dword_236E0D000, v2, OS_LOG_TYPE_DEBUG, "[SuperFrame Header]: SYNC1: 0x%x, SYNC2: 0x%x, VER: 0x%x, FSN: 0x%x\n", (uint8_t *)&v32, 0x1Au);
    v3 = *(NSObject **)(GetOsLogContext() + 8);
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
LABEL_3:
      v4 = *((_QWORD *)this + 3);
      if ((_DWORD)v4 == 1520828415)
        goto LABEL_4;
LABEL_10:
      v24 = *(NSObject **)(GetOsLogContext() + 8);
      result = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      v32 = 136315138;
      *(_QWORD *)v33 = "validateHeader";
      v25 = "[%s] Invalid SYNC1/SYNC2\n";
      v26 = v24;
      v27 = 12;
      goto LABEL_16;
    }
  }
  else
  {
    v3 = *(NSObject **)(GetOsLogContext() + 8);
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      goto LABEL_3;
  }
  v22 = *((unsigned __int8 *)this + 31);
  v23 = *((_QWORD *)this + 4);
  v32 = 67109888;
  *(_DWORD *)v33 = v22;
  *(_WORD *)&v33[4] = 1024;
  *(_DWORD *)&v33[6] = v23 & 0xFFFFFF;
  *(_WORD *)v34 = 1024;
  *(_DWORD *)&v34[2] = BYTE3(v23) & 0xF;
  LOWORD(v35[0]) = 1024;
  *(_DWORD *)((char *)v35 + 2) = HIDWORD(v23);
  _os_log_debug_impl(&dword_236E0D000, v3, OS_LOG_TYPE_DEBUG, "[SuperFrame Header]: BIDX: %u, FSIZE: %u, SVER: %u, HCRC32: 0x%x\n", (uint8_t *)&v32, 0x1Au);
  v4 = *((_QWORD *)this + 3);
  if ((_DWORD)v4 != 1520828415)
    goto LABEL_10;
LABEL_4:
  v5 = *((_QWORD *)this + 4);
  v6 = v4 >> 40;
  v7 = support::crc::crc32c_table[(~LOBYTE(support::crc::crc32c_table[~(_BYTE)v4]) ^ BYTE1(v4))] ^ ((support::crc::crc32c_table[~(_BYTE)v4] ^ 0xFFFFFFu) >> 8);
  v8 = HIDWORD(v4);
  v9 = support::crc::crc32c_table[(v7 ^ BYTE2(v4))] ^ (v7 >> 8);
  v10 = support::crc::crc32c_table[v9 ^ BYTE3(v4)] ^ (v9 >> 8);
  v11 = support::crc::crc32c_table[(v10 ^ v8)] ^ (v10 >> 8);
  v12 = support::crc::crc32c_table[(v11 ^ v6)] ^ (v11 >> 8);
  v13 = support::crc::crc32c_table[v12 ^ *((unsigned __int8 *)this + 30)] ^ (v12 >> 8);
  v14 = support::crc::crc32c_table[v13 ^ *((unsigned __int8 *)this + 31)] ^ (v13 >> 8);
  v15 = support::crc::crc32c_table[v14 ^ *((unsigned __int8 *)this + 32)] ^ (v14 >> 8);
  v16 = support::crc::crc32c_table[v15 ^ *((unsigned __int8 *)this + 33)] ^ (v15 >> 8);
  v17 = support::crc::crc32c_table[v16 ^ *((unsigned __int8 *)this + 34)] ^ (v16 >> 8);
  v18 = support::crc::crc32c_table[v17 ^ *((unsigned __int8 *)this + 35)] ^ ~(v17 >> 8);
  if (v18 != HIDWORD(v5))
  {
    v28 = *(NSObject **)(GetOsLogContext() + 8);
    result = os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v29 = *((_DWORD *)this + 9);
    v32 = 136315650;
    *(_QWORD *)v33 = "validateHeader";
    *(_WORD *)&v33[8] = 1024;
    *(_DWORD *)v34 = v18;
    *(_WORD *)&v34[4] = 1024;
    v35[0] = v29;
    v25 = "[%s] CRC32C mismatch, expected: 0x%x, received: 0x%x\n";
    v26 = v28;
    v27 = 24;
LABEL_16:
    _os_log_error_impl(&dword_236E0D000, v26, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&v32, v27);
    return 0;
  }
  v19 = BYTE3(v5) & 0xF;
  *((_DWORD *)this + 12) = v19;
  if (v19 < 3)
    return 1;
  v30 = *(NSObject **)(GetOsLogContext() + 8);
  result = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v31 = *((_DWORD *)this + 12);
    v32 = 136315394;
    *(_QWORD *)v33 = "validateHeader";
    *(_WORD *)&v33[8] = 1024;
    *(_DWORD *)v34 = v31;
    v25 = "[%s] Invalid ACP Payload type: %d\n";
    v26 = v30;
    v27 = 18;
    goto LABEL_16;
  }
  return result;
}

BOOL support::parsers::acp::SuperFrame::parseHeader(support::parsers::acp::SuperFrame *this, unsigned __int8 *a2, unsigned int a3, unsigned int *a4)
{
  __CFData *v7;
  _BOOL8 result;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  NSObject *v12;
  uint32_t v13;
  NSObject *v14;
  int v15;
  const char *v16;
  __int16 v17;
  unsigned int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!a2 || !a3 || !a4)
  {
    v9 = *(NSObject **)(GetOsLogContext() + 8);
    result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v15 = 136315138;
    v16 = "parseHeader";
    v10 = "[%s], invalid input parameter\n";
    goto LABEL_15;
  }
  if (a3 <= 0xF)
  {
    v11 = *(NSObject **)(GetOsLogContext() + 8);
    result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v15 = 136315394;
      v16 = "parseHeader";
      v17 = 1024;
      v18 = a3;
      v10 = "[%s] input size: %u less than superframe header size\n";
      v12 = v11;
      v13 = 18;
LABEL_16:
      _os_log_error_impl(&dword_236E0D000, v12, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v15, v13);
      return 0;
    }
    return result;
  }
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)a2;
  *a4 = 16;
  if (!support::parsers::acp::SuperFrame::validateHeader(this))
  {
    v9 = *(NSObject **)(GetOsLogContext() + 8);
    result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v15 = 136315138;
    v16 = "parseHeader";
    v10 = "[%s] Failed to validate frame header\n";
LABEL_15:
    v12 = v9;
    v13 = 12;
    goto LABEL_16;
  }
  *((_DWORD *)this + 4) = *((_DWORD *)this + 8) & 0xFFFFFF;
  v7 = (__CFData *)*((_QWORD *)this + 1);
  if (v7)
  {
    CFDataAppendBytes(v7, a2, 16);
    return 1;
  }
  v14 = *(NSObject **)(GetOsLogContext() + 8);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    v15 = 136315138;
    v16 = "appendToRawBytes";
    _os_log_error_impl(&dword_236E0D000, v14, OS_LOG_TYPE_ERROR, "[%s] invalid input data\n", (uint8_t *)&v15, 0xCu);
  }
  v9 = *(NSObject **)(GetOsLogContext() + 8);
  result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v15 = 136315138;
    v16 = "parseHeader";
    v10 = "[%s] Failed to append to raw bytes\n";
    goto LABEL_15;
  }
  return result;
}

BOOL support::parsers::acp::SuperFrame::parseFooter(support::parsers::acp::SuperFrame *this, unsigned __int8 *a2, unsigned int a3)
{
  int v6;
  NSObject *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  __CFData *v13;
  _BOOL8 result;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  NSObject *v20;
  NSObject *v21;
  int v22;
  NSObject *v23;
  int v24;
  _BYTE v25[10];
  unsigned int v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a2 && a3)
  {
    if (a3 <= 7)
    {
      v20 = *(NSObject **)(GetOsLogContext() + 8);
      result = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v24 = 136315650;
        *(_QWORD *)v25 = "parseFooter";
        *(_WORD *)&v25[8] = 1024;
        v26 = a3;
        v27 = 2048;
        v28 = 8;
        v17 = "[%s] Input size (%u) less than footer size: %zu\n";
        v18 = v20;
        v19 = 28;
        goto LABEL_17;
      }
    }
    else
    {
      v6 = *((_DWORD *)this + 9);
      *((_QWORD *)this + 5) = *(_QWORD *)a2;
      v7 = *(NSObject **)(GetOsLogContext() + 8);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        v15 = *((_QWORD *)this + 5);
        v24 = 67109376;
        *(_DWORD *)v25 = v15;
        *(_WORD *)&v25[4] = 1024;
        *(_DWORD *)&v25[6] = HIDWORD(v15);
        _os_log_debug_impl(&dword_236E0D000, v7, OS_LOG_TYPE_DEBUG, "[SuperFrame Footer] - TERMRN: 0x%x, TERMRNCRC32: 0x%x\n", (uint8_t *)&v24, 0xEu);
      }
      v8 = *((_DWORD *)this + 10);
      v9 = support::crc::crc32c_table[(v6 ^ ~(_BYTE)v8)] ^ (~v6 >> 8);
      v10 = support::crc::crc32c_table[(v9 ^ BYTE1(v8))] ^ (v9 >> 8);
      v11 = support::crc::crc32c_table[(v10 ^ BYTE2(v8))] ^ (v10 >> 8);
      v12 = support::crc::crc32c_table[v11 ^ HIBYTE(v8)] ^ ~(v11 >> 8);
      if (v12 == *((_DWORD *)this + 11))
      {
        v13 = (__CFData *)*((_QWORD *)this + 1);
        if (v13)
        {
          CFDataAppendBytes(v13, a2, 8);
          return 1;
        }
        v23 = *(NSObject **)(GetOsLogContext() + 8);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          v24 = 136315138;
          *(_QWORD *)v25 = "appendToRawBytes";
          _os_log_error_impl(&dword_236E0D000, v23, OS_LOG_TYPE_ERROR, "[%s] invalid input data\n", (uint8_t *)&v24, 0xCu);
        }
        v16 = *(NSObject **)(GetOsLogContext() + 8);
        result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
        if (result)
        {
          v24 = 136315138;
          *(_QWORD *)v25 = "parseFooter";
          v17 = "[%s] Failed to append to raw bytes\n";
          goto LABEL_12;
        }
      }
      else
      {
        v21 = *(NSObject **)(GetOsLogContext() + 8);
        result = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
        if (result)
        {
          v22 = *((_DWORD *)this + 11);
          v24 = 136315650;
          *(_QWORD *)v25 = "parseFooter";
          *(_WORD *)&v25[8] = 1024;
          v26 = v12;
          v27 = 1024;
          LODWORD(v28) = v22;
          v17 = "[%s] Footer CRC Mismatch, calculated: 0x%x, received: 0x%x\n";
          v18 = v21;
          v19 = 24;
          goto LABEL_17;
        }
      }
    }
  }
  else
  {
    v16 = *(NSObject **)(GetOsLogContext() + 8);
    result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v24 = 136315138;
      *(_QWORD *)v25 = "parseFooter";
      v17 = "[%s] Invalid input parameter\n";
LABEL_12:
      v18 = v16;
      v19 = 12;
LABEL_17:
      _os_log_error_impl(&dword_236E0D000, v18, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v24, v19);
      return 0;
    }
  }
  return result;
}

BOOL support::parsers::acp::SuperFrame::parsePayload(support::parsers::acp::SuperFrame *this, unsigned __int8 *a2, uint64_t a3, unsigned int *a4)
{
  unsigned int v4;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  NSObject *v9;
  _BOOL8 result;
  const char *v11;
  NSObject *v12;
  int v13;
  int v14;
  NSObject *v15;
  int v16;
  int v17;
  NSObject *v18;
  uint32_t v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v4 = a3;
    if ((_DWORD)a3)
    {
      if (a4)
      {
        v7 = *((_DWORD *)this + 4);
        v6 = *((_DWORD *)this + 5);
        v8 = v7 - v6;
        if (v7 < v6)
        {
          v15 = *(NSObject **)(GetOsLogContext() + 8);
          result = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
          if (result)
          {
            v17 = *((_DWORD *)this + 4);
            v16 = *((_DWORD *)this + 5);
            v20 = 136315650;
            v21 = "parsePayload";
            v22 = 1024;
            v23 = v16;
            v24 = 1024;
            v25 = v17;
            v11 = "[%s] Received Payload Size: %u, Expected Payload Size: %u\n";
            v18 = v15;
            v19 = 24;
LABEL_21:
            _os_log_error_impl(&dword_236E0D000, v18, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v20, v19);
            return 0;
          }
          return result;
        }
        if (v8 <= a3)
        {
          *a4 = v8;
          v4 = v7 - v6;
          if (!support::parsers::acp::SuperFrame::parseACPChunks(this, a2, v7 - v6))
          {
            v9 = *(NSObject **)(GetOsLogContext() + 8);
            result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
            if (result)
            {
              v20 = 136315138;
              v21 = "parsePayload";
              v11 = "[%s] failed to parse ACP Chunks\n";
              goto LABEL_20;
            }
            return result;
          }
        }
        else
        {
          *a4 = a3;
          if (!support::parsers::acp::SuperFrame::parseACPChunks(this, a2, a3))
          {
            v9 = *(NSObject **)(GetOsLogContext() + 8);
            result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
            if (result)
            {
              v20 = 136315138;
              v21 = "parsePayload";
              v11 = "[%s] failed to parse Base ACP Chunks\n";
LABEL_20:
              v18 = v9;
              v19 = 12;
              goto LABEL_21;
            }
            return result;
          }
        }
        *((_DWORD *)this + 5) += v4;
        v12 = *(NSObject **)(GetOsLogContext() + 8);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          v13 = *((_DWORD *)this + 4);
          v14 = *((_DWORD *)this + 5);
          v20 = 136315650;
          v21 = "parsePayload";
          v22 = 1024;
          v23 = v13;
          v24 = 1024;
          v25 = v14;
          _os_log_debug_impl(&dword_236E0D000, v12, OS_LOG_TYPE_DEBUG, "[%s] expectedPayloadSize: %u, receivedPayloadSize: %u\n", (uint8_t *)&v20, 0x18u);
        }
        return 1;
      }
    }
  }
  v9 = *(NSObject **)(GetOsLogContext() + 8);
  result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v20 = 136315138;
    v21 = "parsePayload";
    v11 = "[%s] invalid input parameter\n";
    goto LABEL_20;
  }
  return result;
}

BOOL support::parsers::acp::SuperFrame::parseACPChunks(support::parsers::acp::SuperFrame *this, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  const __CFData *v22;
  const UInt8 *BytePtr;
  unsigned int Length;
  CFIndex v25;
  __CFData *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _BOOL8 result;
  NSObject *v31;
  const char *v32;
  NSObject *v33;
  uint32_t v34;
  NSObject *v35;
  const char *v36;
  NSObject *v37;
  NSObject *v38;
  uint32_t v39;
  NSObject *v40;
  NSObject *v42;
  NSObject *v43;
  unsigned int v44;
  _BYTE buf[18];
  __int16 v46;
  unsigned int v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = a3;
    if ((_DWORD)a3)
    {
      v4 = a2;
      v6 = a3;
      while (1)
      {
        if (v6 > v3)
        {
          v31 = *(NSObject **)(GetOsLogContext() + 8);
          result = os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
          if (!result)
            return result;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "parseACPChunks";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v6;
          v46 = 1024;
          v47 = v3;
          v32 = "[%s] size remaining: %u, input size: %u\n";
          v33 = v31;
          v34 = 24;
          goto LABEL_62;
        }
        v7 = *((_QWORD *)this + 7);
        if (v7)
          goto LABEL_26;
        if (*((_DWORD *)this + 12))
        {
          support::parsers::acp::LSCACPChunk::create((support::parsers::acp::LSCACPChunk *)*((unsigned __int8 *)this + 72), buf);
          v8 = *(_OWORD *)buf;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          v9 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
          *(_OWORD *)((char *)this + 56) = v8;
          if (!v9)
            goto LABEL_12;
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
            v12 = *(std::__shared_weak_count **)&buf[8];
            if (!*(_QWORD *)&buf[8])
              goto LABEL_25;
          }
          else
          {
LABEL_12:
            v12 = *(std::__shared_weak_count **)&buf[8];
            if (!*(_QWORD *)&buf[8])
              goto LABEL_25;
          }
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
        }
        else
        {
          support::parsers::acp::BaseACPChunk::create((support::parsers::acp::BaseACPChunk *)*((unsigned __int8 *)this + 72), buf);
          v15 = *(_OWORD *)buf;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          v16 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
          *(_OWORD *)((char *)this + 56) = v15;
          if (!v16)
            goto LABEL_20;
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
            v12 = *(std::__shared_weak_count **)&buf[8];
            if (!*(_QWORD *)&buf[8])
              goto LABEL_25;
          }
          else
          {
LABEL_20:
            v12 = *(std::__shared_weak_count **)&buf[8];
            if (!*(_QWORD *)&buf[8])
              goto LABEL_25;
          }
          v19 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(v19);
          while (__stlxr(v14 - 1, v19));
        }
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_25:
        v7 = *((_QWORD *)this + 7);
        if (!v7)
        {
          v42 = *(NSObject **)(GetOsLogContext() + 8);
          result = os_log_type_enabled(v42, OS_LOG_TYPE_ERROR);
          if (!result)
            return result;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "parseACPChunks";
          v32 = "[%s] failed to allocate ACP Chunk\n";
          goto LABEL_61;
        }
LABEL_26:
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7) & 1) != 0)
        {
          v44 = 0;
          if (((*(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t, unsigned int *))(**((_QWORD **)this + 7)
                                                                                              + 24))(*((_QWORD *)this + 7), v4, v6, &v44) & 1) == 0)
          {
            v35 = *(NSObject **)(GetOsLogContext() + 8);
            if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = "parseACPChunks";
              v36 = "[%s] Failed to parse payload\n";
              goto LABEL_67;
            }
            return 0;
          }
          v20 = v44;
          if (v44 > v6)
          {
            v37 = *(NSObject **)(GetOsLogContext() + 8);
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "parseACPChunks";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v44;
              v46 = 1024;
              v47 = v6;
              v36 = "[%s] Failed to parse payload - sizeProcessed: %u, sizeRemaining: %u\n";
              v38 = v37;
              v39 = 24;
              goto LABEL_68;
            }
            return 0;
          }
          v21 = *((_QWORD *)this + 7);
          if (*(_DWORD *)(v21 + 20) == *(_DWORD *)(v21 + 16))
          {
            if (*(_BYTE *)(v21 + 24))
            {
              v22 = *(const __CFData **)(v21 + 8);
              BytePtr = CFDataGetBytePtr(v22);
              Length = CFDataGetLength(v22);
              if (!BytePtr || (v25 = Length) == 0 || (v26 = (__CFData *)*((_QWORD *)this + 1)) == 0)
              {
                v43 = *(NSObject **)(GetOsLogContext() + 8);
                if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = "appendToRawBytes";
                  _os_log_error_impl(&dword_236E0D000, v43, OS_LOG_TYPE_ERROR, "[%s] invalid input data\n", buf, 0xCu);
                }
                v35 = *(NSObject **)(GetOsLogContext() + 8);
                if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = "parseACPChunks";
                  v36 = "[%s] Failed to append to raw bytes\n";
LABEL_67:
                  v38 = v35;
                  v39 = 12;
LABEL_68:
                  _os_log_error_impl(&dword_236E0D000, v38, OS_LOG_TYPE_ERROR, v36, buf, v39);
                }
                return 0;
              }
              CFDataAppendBytes(v26, BytePtr, v25);
            }
            v27 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
            *((_QWORD *)this + 7) = 0;
            *((_QWORD *)this + 8) = 0;
            if (v27)
            {
              v28 = (unint64_t *)&v27->__shared_owners_;
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 - 1, v28));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
          }
        }
        else
        {
          v44 = 0;
          if (((*(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t, unsigned int *))(**((_QWORD **)this + 7)
                                                                                              + 16))(*((_QWORD *)this + 7), v4, v6, &v44) & 1) == 0)
          {
            v35 = *(NSObject **)(GetOsLogContext() + 8);
            if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = "parseACPChunks";
              v36 = "[%s] Failed to parse ACP Header\n";
              goto LABEL_67;
            }
            return 0;
          }
          v20 = v44;
          if (v44 > v6)
          {
            v40 = *(NSObject **)(GetOsLogContext() + 8);
            if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "parseACPChunks";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v44;
              v46 = 1024;
              v47 = v6;
              v36 = "[%s] Failed to parse ACP Header - sizeProcessed: %u, sizeRemaining: %u\n";
              v38 = v40;
              v39 = 24;
              goto LABEL_68;
            }
            return 0;
          }
        }
        v4 += v20;
        v6 = v6 - v20;
        if (!(_DWORD)v6)
          return 1;
      }
    }
  }
  v42 = *(NSObject **)(GetOsLogContext() + 8);
  result = os_log_type_enabled(v42, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "parseACPChunks";
    v32 = "[%s] invalid input parameter\n";
LABEL_61:
    v33 = v42;
    v34 = 12;
LABEL_62:
    _os_log_error_impl(&dword_236E0D000, v33, OS_LOG_TYPE_ERROR, v32, buf, v34);
    return 0;
  }
  return result;
}

void support::parsers::acp::BaseACPChunk::create(support::parsers::acp::BaseACPChunk *this@<X0>, _QWORD *a2@<X8>)
{
  char v2;
  char *v4;
  _QWORD *v5;
  CFMutableDataRef Mutable;
  NSObject *v7;
  NSObject *v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v2 = (char)this;
  v11 = *MEMORY[0x24BDAC8D0];
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = (char *)operator new(0x28uLL);
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_QWORD *)v4 + 4) = 0;
  *(_QWORD *)v4 = off_25086B238;
  *a2 = v4;
  v5 = operator new(0x20uLL);
  *v5 = off_25086B378;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v4;
  a2[1] = v5;
  *(_DWORD *)(v4 + 26) = 0;
  *((_DWORD *)v4 + 8) = 0;
  *((_WORD *)v4 + 18) = 0;
  v4[24] = 1;
  v4[25] = v2;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  *((_QWORD *)v4 + 1) = Mutable;
  if (Mutable)
  {
    *((_QWORD *)v4 + 2) = 0;
  }
  else
  {
    v7 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315138;
      v10 = "init";
      _os_log_error_impl(&dword_236E0D000, v7, OS_LOG_TYPE_ERROR, "[%s] Failed to init Trace Data Descriptor\n", (uint8_t *)&v9, 0xCu);
    }
    v8 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315138;
      v10 = "create";
      _os_log_error_impl(&dword_236E0D000, v8, OS_LOG_TYPE_ERROR, "[%s] failed to init ACP Chunk\n", (uint8_t *)&v9, 0xCu);
    }
  }
}

void sub_236E18584(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_236E18598(_Unwind_Exception *a1)
{
  support::parsers::acp::BaseACPChunk *v1;

  support::parsers::acp::BaseACPChunk::~BaseACPChunk(v1);
  _Unwind_Resume(a1);
}

void sub_236E185AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void support::parsers::acp::LSCACPChunk::create(support::parsers::acp::LSCACPChunk *this@<X0>, _QWORD *a2@<X8>)
{
  char v2;
  char *v4;
  _QWORD *v5;
  CFMutableDataRef Mutable;
  NSObject *v7;
  NSObject *v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v2 = (char)this;
  v11 = *MEMORY[0x24BDAC8D0];
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = (char *)operator new(0x30uLL);
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *(_QWORD *)v4 = off_25086B288;
  *a2 = v4;
  v5 = operator new(0x20uLL);
  *v5 = off_25086B3C8;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v4;
  a2[1] = v5;
  *(_QWORD *)(v4 + 34) = 0;
  *(_QWORD *)(v4 + 26) = 0;
  *((_DWORD *)v4 + 11) = 0;
  v4[24] = 1;
  v4[25] = v2;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  *((_QWORD *)v4 + 1) = Mutable;
  if (Mutable)
  {
    *((_QWORD *)v4 + 2) = 0;
  }
  else
  {
    v7 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315138;
      v10 = "init";
      _os_log_error_impl(&dword_236E0D000, v7, OS_LOG_TYPE_ERROR, "[%s] Failed to init Trace Data Descriptor\n", (uint8_t *)&v9, 0xCu);
    }
    v8 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315138;
      v10 = "create";
      _os_log_error_impl(&dword_236E0D000, v8, OS_LOG_TYPE_ERROR, "[%s] failed to init LSCACP Chunk\n", (uint8_t *)&v9, 0xCu);
    }
  }
}

void sub_236E18750(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_236E18764(_Unwind_Exception *a1)
{
  support::parsers::acp::LSCACPChunk *v1;

  support::parsers::acp::LSCACPChunk::~LSCACPChunk(v1);
  _Unwind_Resume(a1);
}

void sub_236E18778(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t support::parsers::acp::ACPChunk::getShouldSaveBytes(support::parsers::acp::ACPChunk *this)
{
  return *((unsigned __int8 *)this + 24);
}

BOOL support::parsers::acp::SuperFrame::postProcess(support::parsers::acp::SuperFrame *this)
{
  const __CFData *v2;
  unsigned int Length;
  NSObject *v4;
  _BOOL8 result;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  uint64_t v9;
  UInt8 *MutableBytePtr;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  const char *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 5) == *((_DWORD *)this + 4))
  {
    v2 = (const __CFData *)*((_QWORD *)this + 1);
    Length = CFDataGetLength(v2);
    if (Length <= 0x18uLL)
    {
      v4 = *(NSObject **)(GetOsLogContext() + 8);
      result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v51 = 136315138;
        v52 = "postProcess";
        v6 = "[%s] Accumulated Superframe with no ACP Payload\n";
LABEL_5:
        v7 = v4;
        v8 = 12;
LABEL_6:
        _os_log_error_impl(&dword_236E0D000, v7, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v51, v8);
        return 0;
      }
      return result;
    }
    v9 = Length - 24;
    if ((Length & 3) != 0)
    {
      v46 = *(NSObject **)(GetOsLogContext() + 8);
      result = os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v51 = 136315394;
        v52 = "postProcess";
        v53 = 1024;
        v54 = v9;
        v6 = "[%s] Final Saved Payload Size (%u) must be 4 bytes aligned\n";
        v7 = v46;
        v8 = 18;
        goto LABEL_6;
      }
      return result;
    }
    MutableBytePtr = CFDataGetMutableBytePtr(v2);
    v11 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v35 = *((_QWORD *)MutableBytePtr + 1) & 0xFFFFFFLL;
      v36 = HIDWORD(*((_QWORD *)MutableBytePtr + 1));
      v51 = 136315650;
      v52 = "postProcess";
      v53 = 1024;
      v54 = v35;
      v55 = 1024;
      v56 = v36;
      _os_log_debug_impl(&dword_236E0D000, v11, OS_LOG_TYPE_DEBUG, "[%s][Before] frameSavedHeaderPayloadSize: %u, frameSavedHeaderHCRC32: 0x%x\n", (uint8_t *)&v51, 0x18u);
      v12 = *((_QWORD *)MutableBytePtr + 1);
      v13 = *((_QWORD *)this + 4);
      if (((v13 ^ v12) & 0xFFFFFF) == 0)
      {
LABEL_10:
        if (HIDWORD(v12) != HIDWORD(v13))
        {
          v37 = *(NSObject **)(GetOsLogContext() + 8);
          result = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
          if (!result)
            return result;
          v47 = *((_DWORD *)MutableBytePtr + 3);
          v48 = *((_DWORD *)this + 9);
          v51 = 136315650;
          v52 = "postProcess";
          v53 = 1024;
          v54 = v47;
          v55 = 1024;
          v56 = v48;
          v6 = "[%s] Corruption - saved header CRC32: 0x%x, sframe header CRC32: 0x%x\n";
          goto LABEL_34;
        }
        v14 = *(_QWORD *)MutableBytePtr;
        v15 = v12 & 0xFFFFFFFFFF000000 | v9 & 0xFFFFFF;
        *(_QWORD *)MutableBytePtr = *(_QWORD *)MutableBytePtr;
        *((_QWORD *)MutableBytePtr + 1) = v15;
        v16 = support::crc::crc32c_table[(~LOBYTE(support::crc::crc32c_table[~(_BYTE)v14]) ^ BYTE1(v14))] ^ ((support::crc::crc32c_table[~(_BYTE)v14] ^ 0xFFFFFFu) >> 8);
        v17 = support::crc::crc32c_table[(v16 ^ BYTE2(v14))] ^ (v16 >> 8);
        v18 = support::crc::crc32c_table[v17 ^ BYTE3(v14)] ^ (v17 >> 8);
        v19 = support::crc::crc32c_table[(v18 ^ BYTE4(v14))] ^ (v18 >> 8);
        v20 = support::crc::crc32c_table[(v19 ^ BYTE5(v14))] ^ (v19 >> 8);
        v21 = support::crc::crc32c_table[(v20 ^ BYTE6(v14))] ^ (v20 >> 8);
        LODWORD(v14) = support::crc::crc32c_table[(v21 ^ HIBYTE(v14))] ^ (v21 >> 8);
        LODWORD(v14) = support::crc::crc32c_table[(v14 ^ v9)] ^ (v14 >> 8);
        LODWORD(v14) = support::crc::crc32c_table[(v14 ^ BYTE1(v9))] ^ (v14 >> 8);
        v22 = MutableBytePtr[10];
        v23 = support::crc::crc32c_table[v14 ^ v22] ^ (v14 >> 8);
        v24 = support::crc::crc32c_table[(LOBYTE(support::crc::crc32c_table[v14 ^ v22]) ^ BYTE1(v14)) ^ MutableBytePtr[11]];
        *((_QWORD *)MutableBytePtr + 1) = v15 | ((unint64_t)(v24 ^ ~(v23 >> 8)) << 32);
        v25 = *(NSObject **)(GetOsLogContext() + 8);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          v40 = *((_QWORD *)MutableBytePtr + 1) & 0xFFFFFFLL;
          v41 = HIDWORD(*((_QWORD *)MutableBytePtr + 1));
          v51 = 136315650;
          v52 = "postProcess";
          v53 = 1024;
          v54 = v40;
          v55 = 1024;
          v56 = v41;
          _os_log_debug_impl(&dword_236E0D000, v25, OS_LOG_TYPE_DEBUG, "[%s][After] frameSavedHeaderPayloadSize: %u, frameSavedHeaderHCRC32: 0x%x\n", (uint8_t *)&v51, 0x18u);
        }
        v26 = v9 + 16;
        v27 = *(NSObject **)(GetOsLogContext() + 8);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          v42 = *(_QWORD *)&MutableBytePtr[v26];
          v51 = 136315650;
          v52 = "postProcess";
          v53 = 1024;
          v54 = v42;
          v55 = 1024;
          v56 = HIDWORD(v42);
          _os_log_debug_impl(&dword_236E0D000, v27, OS_LOG_TYPE_DEBUG, "[%s][Before] Saved TERMRN: 0x%x, Saved TERMRNCRC32: 0x%x\n", (uint8_t *)&v51, 0x18u);
          v28 = *(_QWORD *)&MutableBytePtr[v26];
          v29 = *((_QWORD *)this + 5);
          if ((_DWORD)v28 == (_DWORD)v29)
            goto LABEL_15;
        }
        else
        {
          v28 = *(_QWORD *)&MutableBytePtr[v26];
          v29 = *((_QWORD *)this + 5);
          if ((_DWORD)v28 == (_DWORD)v29)
          {
LABEL_15:
            if (HIDWORD(v28) == HIDWORD(v29))
            {
              v30 = v24 ^ (v23 >> 8);
              v31 = support::crc::crc32c_table[(v30 ^ v28)];
              v32 = support::crc::crc32c_table[(v31 ^ BYTE1(v30) ^ BYTE1(v28))] ^ ((v31 ^ (v30 >> 8)) >> 8);
              v33 = support::crc::crc32c_table[(v32 ^ BYTE2(v28))] ^ (v32 >> 8);
              *(_QWORD *)&MutableBytePtr[v26] = v28 | ((unint64_t)(support::crc::crc32c_table[v33 ^ BYTE3(v28)] ^ ~(v33 >> 8)) << 32);
              v34 = *(NSObject **)(GetOsLogContext() + 8);
              if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
              {
                v45 = *(_QWORD *)&MutableBytePtr[v26];
                v51 = 136315650;
                v52 = "postProcess";
                v53 = 1024;
                v54 = v45;
                v55 = 1024;
                v56 = HIDWORD(v45);
                _os_log_debug_impl(&dword_236E0D000, v34, OS_LOG_TYPE_DEBUG, "[%s][After] Saved TERMRN: 0x%x, Saved TERMRNCRC32: 0x%x\n", (uint8_t *)&v51, 0x18u);
              }
              return 1;
            }
            v37 = *(NSObject **)(GetOsLogContext() + 8);
            result = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
            if (!result)
              return result;
            v49 = *(_DWORD *)&MutableBytePtr[v26 + 4];
            v50 = *((_DWORD *)this + 11);
            v51 = 136315650;
            v52 = "postProcess";
            v53 = 1024;
            v54 = v49;
            v55 = 1024;
            v56 = v50;
            v6 = "[%s] Corruption - saved TERMCRC32: 0x%x, sframe footer TERMCRC32: 0x%x\n";
LABEL_34:
            v7 = v37;
            v8 = 24;
            goto LABEL_6;
          }
        }
        v37 = *(NSObject **)(GetOsLogContext() + 8);
        result = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
        v43 = *(_QWORD *)&MutableBytePtr[v26];
        v44 = *((_QWORD *)this + 5);
        v51 = 136315650;
        v52 = "postProcess";
        v53 = 1024;
        v54 = v43;
        v55 = 1024;
        v56 = v44;
        v6 = "[%s] Corruption - saved TERMRN: 0x%x, sframe footer TERMRN: 0x%x\n";
        goto LABEL_34;
      }
    }
    else
    {
      v12 = *((_QWORD *)MutableBytePtr + 1);
      v13 = *((_QWORD *)this + 4);
      if (((v13 ^ v12) & 0xFFFFFF) == 0)
        goto LABEL_10;
    }
    v37 = *(NSObject **)(GetOsLogContext() + 8);
    result = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v38 = *((_DWORD *)MutableBytePtr + 2) & 0xFFFFFF;
    v39 = *((_DWORD *)this + 8) & 0xFFFFFF;
    v51 = 136315650;
    v52 = "postProcess";
    v53 = 1024;
    v54 = v38;
    v55 = 1024;
    v56 = v39;
    v6 = "[%s] Corruption - saved header payload size: %u, sframe header size: %u\n";
    goto LABEL_34;
  }
  v4 = *(NSObject **)(GetOsLogContext() + 8);
  result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v51 = 136315138;
    v52 = "postProcess";
    v6 = "[%s] Can't do postprocess if payload is incomplete\n";
    goto LABEL_5;
  }
  return result;
}

BOOL support::parsers::acp::SuperFrame::isComplete(support::parsers::acp::SuperFrame *this)
{
  return *((_DWORD *)this + 13) == 3;
}

BOOL support::parsers::acp::SuperFrame::processData(support::parsers::acp::SuperFrame *this, unsigned __int8 *a2, uint64_t a3)
{
  int v3;
  unsigned __int8 *v4;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BOOL8 result;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  NSObject *v15;
  NSObject *v16;
  unsigned int v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  unsigned int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (!a2 || (v3 = a3) == 0)
  {
    v11 = *(NSObject **)(GetOsLogContext() + 8);
    result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 136315138;
    v19 = "processData";
    v12 = "[%s] invalid input parameter\n";
    goto LABEL_27;
  }
  v4 = a2;
  v6 = 0;
  v7 = a3;
  while (1)
  {
    v8 = *((_DWORD *)this + 13);
    if (!v8)
    {
      v17 = 0;
      if (((*(uint64_t (**)(support::parsers::acp::SuperFrame *, unsigned __int8 *, uint64_t, unsigned int *))(*(_QWORD *)this + 16))(this, v4, v7, &v17) & 1) == 0)
      {
        v11 = *(NSObject **)(GetOsLogContext() + 8);
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          return 0;
        *(_DWORD *)buf = 136315138;
        v19 = "processData";
        v12 = "[%s] Failed to parse SuperFrame Header\n";
        goto LABEL_27;
      }
      if (v7 < v17)
      {
        v15 = *(NSObject **)(GetOsLogContext() + 8);
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          return 0;
        goto LABEL_31;
      }
      v4 += v17;
      v7 = v7 - v17;
      v6 += v17;
      *((_DWORD *)this + 13) = 1;
      goto LABEL_5;
    }
    if (v8 != 1)
      break;
    v17 = 0;
    if (((*(uint64_t (**)(support::parsers::acp::SuperFrame *, unsigned __int8 *, uint64_t, unsigned int *))(*(_QWORD *)this + 24))(this, v4, v7, &v17) & 1) == 0)
    {
      v11 = *(NSObject **)(GetOsLogContext() + 8);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        return 0;
      *(_DWORD *)buf = 136315138;
      v19 = "processData";
      v12 = "[%s] Failed to parse payload\n";
      goto LABEL_27;
    }
    v9 = v17;
    if (v7 < v17)
    {
      v15 = *(NSObject **)(GetOsLogContext() + 8);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        return 0;
LABEL_31:
      *(_DWORD *)buf = 136315650;
      v19 = "processData";
      v20 = 1024;
      v21 = v17;
      v22 = 1024;
      v23 = v7;
      v12 = "[%s] Unexpected - size processed: %u, size remaining: %u\n";
      v13 = v15;
LABEL_32:
      v14 = 24;
      goto LABEL_33;
    }
    if (*((_DWORD *)this + 5) == *((_DWORD *)this + 4))
      *((_DWORD *)this + 13) = 2;
    v4 += v9;
    v7 = (v7 - v9);
    v6 += v9;
LABEL_5:
    if (!(_DWORD)v7)
      goto LABEL_20;
  }
  if (v8 != 2)
    goto LABEL_5;
  if (!support::parsers::acp::SuperFrame::parseFooter(this, v4, v7))
  {
    v11 = *(NSObject **)(GetOsLogContext() + 8);
    result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 136315138;
    v19 = "processData";
    v12 = "[%s] Failed to parse footer\n";
LABEL_27:
    v13 = v11;
    v14 = 12;
LABEL_33:
    _os_log_error_impl(&dword_236E0D000, v13, OS_LOG_TYPE_ERROR, v12, buf, v14);
    return 0;
  }
  CFDataGetLength(*((CFDataRef *)this + 1));
  if (!support::parsers::acp::SuperFrame::postProcess(this))
  {
    v11 = *(NSObject **)(GetOsLogContext() + 8);
    result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 136315138;
    v19 = "processData";
    v12 = "[%s] failed to post process current frame\n";
    goto LABEL_27;
  }
  v6 += v7;
  *((_DWORD *)this + 13) = 3;
LABEL_20:
  if (v6 == v3)
    return 1;
  v16 = *(NSObject **)(GetOsLogContext() + 8);
  result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136315650;
    v19 = "processData";
    v20 = 1024;
    v21 = v6;
    v22 = 1024;
    v23 = v3;
    v12 = "[%s] Size Processed (%u) is not same as input size(%u)\n";
    v13 = v16;
    goto LABEL_32;
  }
  return result;
}

BOOL support::parsers::acp::ACPChunk::init(support::parsers::acp::ACPChunk *this, char a2)
{
  CFMutableDataRef Mutable;
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)this + 24) = 1;
  *((_BYTE *)this + 25) = a2;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  *((_QWORD *)this + 1) = Mutable;
  if (Mutable)
  {
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    v5 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315138;
      v7 = "init";
      _os_log_error_impl(&dword_236E0D000, v5, OS_LOG_TYPE_ERROR, "[%s] Failed to init Trace Data Descriptor\n", (uint8_t *)&v6, 0xCu);
    }
  }
  return Mutable != 0;
}

uint64_t support::parsers::acp::ACPChunk::setShouldSaveBytes(uint64_t this, unsigned int a2)
{
  int v2;

  if (*(_BYTE *)(this + 25))
  {
    v2 = (a2 >> 10) & 1;
    if ((a2 & 0x110) == 0x10)
      LOBYTE(v2) = 1;
    *(_BYTE *)(this + 24) = v2;
  }
  return this;
}

uint64_t support::parsers::acp::ACPChunk::parseHeader(support::parsers::acp::ACPChunk *this, unsigned __int8 *a2, unsigned int a3, unsigned int *a4)
{
  NSObject *v4;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = *(NSObject **)(GetOsLogContext() + 8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 136315138;
    v7 = "parseHeader";
    _os_log_error_impl(&dword_236E0D000, v4, OS_LOG_TYPE_ERROR, "[ACPChunk][%s] Should Never be Called\n", (uint8_t *)&v6, 0xCu);
  }
  return 0;
}

BOOL support::parsers::acp::ACPChunk::parsePayload(support::parsers::acp::ACPChunk *this, unsigned __int8 *a2, CFIndex length, unsigned int *a4)
{
  unsigned int v4;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  __CFData *v10;
  unsigned int v11;
  __CFData *v12;
  _BOOL8 result;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  int v17;
  int v18;
  NSObject *v19;
  uint32_t v20;
  NSObject *v21;
  NSObject *v22;
  int v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (!a4 || !a2 || (v4 = length) == 0)
  {
    v14 = *(NSObject **)(GetOsLogContext() + 8);
    result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v23 = 136315138;
    v24 = "parsePayload";
    v15 = "[ACPChunk][%s] invalid input parameter\n";
    goto LABEL_25;
  }
  v7 = *((_DWORD *)this + 4);
  v6 = *((_DWORD *)this + 5);
  v8 = v7 - v6;
  if (v7 < v6)
  {
    v16 = *(NSObject **)(GetOsLogContext() + 8);
    result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v18 = *((_DWORD *)this + 4);
      v17 = *((_DWORD *)this + 5);
      v23 = 136315650;
      v24 = "parsePayload";
      v25 = 1024;
      v26 = v17;
      v27 = 1024;
      v28 = v18;
      v15 = "[%s] Received Payload Size: %u, Expected Payload Size: %u\n";
      v19 = v16;
      v20 = 24;
LABEL_26:
      _os_log_error_impl(&dword_236E0D000, v19, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v23, v20);
      return 0;
    }
    return result;
  }
  if (v8 <= length)
  {
    *a4 = v8;
    if (!*((_BYTE *)this + 24))
    {
LABEL_14:
      v11 = *((_DWORD *)this + 5) + v8;
      goto LABEL_15;
    }
    if (v7 != v6)
    {
      v12 = (__CFData *)*((_QWORD *)this + 1);
      if (v12)
      {
        CFDataAppendBytes(v12, a2, v7 - v6);
        goto LABEL_14;
      }
    }
    v21 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v23 = 136315138;
      v24 = "appendToRawBytes";
      _os_log_error_impl(&dword_236E0D000, v21, OS_LOG_TYPE_ERROR, "[%s] invalid input data\n", (uint8_t *)&v23, 0xCu);
    }
    v14 = *(NSObject **)(GetOsLogContext() + 8);
    result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v23 = 136315138;
    v24 = "parsePayload";
    v15 = "[%s] Failed to append to raw bytes\n";
LABEL_25:
    v19 = v14;
    v20 = 12;
    goto LABEL_26;
  }
  if (!*((_BYTE *)this + 24))
  {
LABEL_9:
    *a4 = v4;
    v11 = *((_DWORD *)this + 5) + v4;
LABEL_15:
    *((_DWORD *)this + 5) = v11;
    return 1;
  }
  v10 = (__CFData *)*((_QWORD *)this + 1);
  if (v10)
  {
    CFDataAppendBytes(v10, a2, length);
    goto LABEL_9;
  }
  v22 = *(NSObject **)(GetOsLogContext() + 8);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    v23 = 136315138;
    v24 = "appendToRawBytes";
    _os_log_error_impl(&dword_236E0D000, v22, OS_LOG_TYPE_ERROR, "[%s] invalid input data\n", (uint8_t *)&v23, 0xCu);
  }
  v14 = *(NSObject **)(GetOsLogContext() + 8);
  result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v23 = 136315138;
    v24 = "parsePayload";
    v15 = "[%s] Failed to append to raw bytes\n";
    goto LABEL_25;
  }
  return result;
}

BOOL support::parsers::acp::BaseACPChunk::init(support::parsers::acp::BaseACPChunk *this, char a2)
{
  CFMutableDataRef Mutable;
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)((char *)this + 26) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_WORD *)this + 18) = 0;
  *((_BYTE *)this + 24) = 1;
  *((_BYTE *)this + 25) = a2;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  *((_QWORD *)this + 1) = Mutable;
  if (Mutable)
  {
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    v5 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315138;
      v7 = "init";
      _os_log_error_impl(&dword_236E0D000, v5, OS_LOG_TYPE_ERROR, "[%s] Failed to init Trace Data Descriptor\n", (uint8_t *)&v6, 0xCu);
    }
  }
  return Mutable != 0;
}

BOOL support::parsers::acp::BaseACPChunk::isHeaderComplete(support::parsers::acp::BaseACPChunk *this)
{
  if (!*((_BYTE *)this + 37))
    return 0;
  if ((*((_BYTE *)this + 28) & 0x80) != 0)
    return *((_BYTE *)this + 36) != 0;
  return 1;
}

uint64_t support::parsers::acp::BaseACPChunk::isFSC(support::parsers::acp::BaseACPChunk *this)
{
  return *((unsigned __int8 *)this + 28) >> 7;
}

BOOL support::parsers::acp::BaseACPChunk::parseHeader(support::parsers::acp::BaseACPChunk *this, UInt8 *bytes, unsigned int a3, unsigned int *a4)
{
  unsigned int v4;
  UInt8 *v6;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  __CFData *v12;
  _BOOL8 result;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  NSObject *v17;
  uint32_t v18;
  NSObject *v19;
  int v20;
  const char *v21;
  __int16 v22;
  unsigned int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (bytes)
  {
    v4 = a3;
    if (a3)
    {
      if (a4)
      {
        if (a3 <= 3)
        {
          v16 = *(NSObject **)(GetOsLogContext() + 8);
          result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
          if (result)
          {
            v20 = 136315650;
            v21 = "parseHeader";
            v22 = 1024;
            v23 = v4;
            v24 = 2048;
            v25 = 4;
            v15 = "[BaseACPChunk][%s] input size: %u, expected: %zu\n";
            v17 = v16;
            v18 = 28;
LABEL_30:
            _os_log_error_impl(&dword_236E0D000, v17, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v20, v18);
            return 0;
          }
          return result;
        }
        v6 = bytes;
        *a4 = 0;
        if (*((_BYTE *)this + 37))
        {
          v8 = *(_DWORD *)((char *)this + 26);
LABEL_17:
          if (((v8 >> 23) & 1) != 0)
          {
            if (support::parsers::acp::BaseACPChunk::parseTimeStamp(this, v6, v4))
            {
              *a4 += 4;
              return 1;
            }
            v14 = *(NSObject **)(GetOsLogContext() + 8);
            result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
            if (result)
            {
              v20 = 136315138;
              v21 = "parseHeader";
              v15 = "[%s] timestamp parsing pending\n";
              goto LABEL_29;
            }
            return result;
          }
LABEL_20:
          result = 1;
          if ((v8 & 0x800000) == 0)
            *((_BYTE *)this + 36) = 1;
          return result;
        }
        v9 = *(_DWORD *)bytes;
        *(_DWORD *)((char *)this + 26) = *(_DWORD *)bytes;
        *((_DWORD *)this + 4) = ((v9 >> 25) + 4) & 0xFC;
        if (*((_BYTE *)this + 25))
        {
          if ((v9 & 0x88000) == 0x8000)
            v10 = 1;
          else
            v10 = (v9 >> 21) & 1;
          *((_BYTE *)this + 24) = v10;
          *((_BYTE *)this + 36) = 0;
          if (!v10)
            goto LABEL_16;
        }
        else
        {
          v11 = *((unsigned __int8 *)this + 24);
          *((_BYTE *)this + 36) = 0;
          if (!v11)
            goto LABEL_16;
        }
        v12 = (__CFData *)*((_QWORD *)this + 1);
        if (!v12)
        {
          v19 = *(NSObject **)(GetOsLogContext() + 8);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            v20 = 136315138;
            v21 = "appendToRawBytes";
            _os_log_error_impl(&dword_236E0D000, v19, OS_LOG_TYPE_ERROR, "[%s] invalid input data\n", (uint8_t *)&v20, 0xCu);
          }
          v14 = *(NSObject **)(GetOsLogContext() + 8);
          result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
          if (result)
          {
            v20 = 136315138;
            v21 = "parseHeader";
            v15 = "[%s] Failed to append to raw bytes\n";
            goto LABEL_29;
          }
          return result;
        }
        CFDataAppendBytes(v12, bytes, 4);
LABEL_16:
        *((_BYTE *)this + 37) = 1;
        v6 += 4;
        *a4 += 4;
        v4 -= 4;
        v8 = *(_DWORD *)((char *)this + 26);
        if (!v4)
          goto LABEL_20;
        goto LABEL_17;
      }
    }
  }
  v14 = *(NSObject **)(GetOsLogContext() + 8);
  result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v20 = 136315138;
    v21 = "parseHeader";
    v15 = "[BaseACPChunk][%s] invalid input parameter\n";
LABEL_29:
    v17 = v14;
    v18 = 12;
    goto LABEL_30;
  }
  return result;
}

BOOL support::parsers::acp::BaseACPChunk::parseTimeStamp(support::parsers::acp::BaseACPChunk *this, UInt8 *bytes, unsigned int a3)
{
  __CFData *v6;
  _BOOL8 result;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  NSObject *v12;
  NSObject *v13;
  int v14;
  const char *v15;
  __int16 v16;
  UInt8 *v17;
  __int16 v18;
  unsigned int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (bytes && a3 > 3)
  {
    if ((*((_BYTE *)this + 28) & 0x80) == 0 || *((_BYTE *)this + 36))
    {
      v8 = *(NSObject **)(GetOsLogContext() + 8);
      result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v14 = 136315138;
        v15 = "parseTimeStamp";
        v9 = "[%s] parse timestamp called in an invalid state\n";
LABEL_12:
        v10 = v8;
        v11 = 12;
LABEL_15:
        _os_log_error_impl(&dword_236E0D000, v10, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v14, v11);
        return 0;
      }
    }
    else
    {
      *((_DWORD *)this + 8) = *(_DWORD *)bytes;
      if (!*((_BYTE *)this + 24))
      {
LABEL_8:
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
      v6 = (__CFData *)*((_QWORD *)this + 1);
      if (v6)
      {
        CFDataAppendBytes(v6, bytes, 4);
        goto LABEL_8;
      }
      v13 = *(NSObject **)(GetOsLogContext() + 8);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v14 = 136315138;
        v15 = "appendToRawBytes";
        _os_log_error_impl(&dword_236E0D000, v13, OS_LOG_TYPE_ERROR, "[%s] invalid input data\n", (uint8_t *)&v14, 0xCu);
      }
      v8 = *(NSObject **)(GetOsLogContext() + 8);
      result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v14 = 136315138;
        v15 = "parseTimeStamp";
        v9 = "[%s] Failed to append to raw bytes\n";
        goto LABEL_12;
      }
    }
  }
  else
  {
    v12 = *(NSObject **)(GetOsLogContext() + 8);
    result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v14 = 136315650;
      v15 = "parseTimeStamp";
      v16 = 2048;
      v17 = bytes;
      v18 = 1024;
      v19 = a3;
      v9 = "[%s] invalid input parameter, inputBuffer: %p, input size: %u\n";
      v10 = v12;
      v11 = 28;
      goto LABEL_15;
    }
  }
  return result;
}

void support::parsers::acp::LSCACPChunk::~LSCACPChunk(support::parsers::acp::LSCACPChunk *this)
{
  const void *v2;

  *(_QWORD *)this = off_25086B140;
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 1) = 0;
  }
}

{
  const void *v2;

  *(_QWORD *)this = off_25086B140;
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 1) = 0;
  }
}

{
  const void *v2;

  *(_QWORD *)this = off_25086B140;
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  operator delete(this);
}

BOOL support::parsers::acp::LSCACPChunk::init(support::parsers::acp::LSCACPChunk *this, char a2)
{
  CFMutableDataRef Mutable;
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)((char *)this + 34) = 0;
  *(_QWORD *)((char *)this + 26) = 0;
  *((_DWORD *)this + 11) = 0;
  *((_BYTE *)this + 24) = 1;
  *((_BYTE *)this + 25) = a2;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  *((_QWORD *)this + 1) = Mutable;
  if (Mutable)
  {
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    v5 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315138;
      v7 = "init";
      _os_log_error_impl(&dword_236E0D000, v5, OS_LOG_TYPE_ERROR, "[%s] Failed to init Trace Data Descriptor\n", (uint8_t *)&v6, 0xCu);
    }
  }
  return Mutable != 0;
}

BOOL support::parsers::acp::LSCACPChunk::isHeaderComplete(support::parsers::acp::LSCACPChunk *this)
{
  return *((_DWORD *)this + 11) == 16;
}

BOOL support::parsers::acp::LSCACPChunk::parseHeader(support::parsers::acp::LSCACPChunk *this, unsigned __int8 *a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  __CFData *v12;
  _BOOL8 result;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  NSObject *v18;
  int v19;
  NSObject *v20;
  NSObject *v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (a2 && a3 && a4)
  {
    if (*((_DWORD *)this + 11) >= 0x11u)
    {
      v18 = *(NSObject **)(GetOsLogContext() + 8);
      result = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v19 = *((_DWORD *)this + 11);
        v22 = 136315650;
        v23 = "parseHeader";
        v24 = 1024;
        v25 = v19;
        v26 = 2048;
        v27 = 16;
        v15 = "[LSCACPChunk][%s] Received Header Size (%u) greater than expected Header Size (%zu)\n";
        v16 = v18;
        v17 = 28;
        goto LABEL_28;
      }
    }
    else
    {
      *a4 = 0;
      v6 = *((unsigned int *)this + 11);
      v7 = (uint64_t *)((char *)this + 26);
      v8 = (char *)this + v6 + 26;
      if (16 - (int)v6 >= a3)
        v9 = a3;
      else
        v9 = (16 - v6);
      memcpy(v8, a2, v9);
      *((_DWORD *)this + 11) += v9;
      *a4 += v9;
      if (!(*(unsigned int (**)(support::parsers::acp::LSCACPChunk *))(*(_QWORD *)this + 32))(this))
        return 1;
      v10 = *v7;
      if ((((*v7 >> 23) ^ BYTE3(*v7)) & 1) != 0)
      {
        v20 = *(NSObject **)(GetOsLogContext() + 8);
        result = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
        if (result)
        {
          LOWORD(v22) = 0;
          v15 = "For LSC packets, SoM == EoM Required";
          v16 = v20;
          v17 = 2;
          goto LABEL_28;
        }
      }
      else
      {
        *((_DWORD *)this + 4) = (HIWORD(*(_QWORD *)((char *)this + 34)) + 4) & 0x1FFFC;
        if (*((_BYTE *)this + 25))
        {
          if ((v10 & 0x88000) == 0x8000)
            v11 = 1;
          else
            v11 = (v10 >> 21) & 1;
          *((_BYTE *)this + 24) = v11;
          if (!v11)
            return 1;
        }
        else if (!*((_BYTE *)this + 24))
        {
          return 1;
        }
        v12 = (__CFData *)*((_QWORD *)this + 1);
        if (v12)
        {
          CFDataAppendBytes(v12, (const UInt8 *)this + 26, 16);
          return 1;
        }
        v21 = *(NSObject **)(GetOsLogContext() + 8);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          v22 = 136315138;
          v23 = "appendToRawBytes";
          _os_log_error_impl(&dword_236E0D000, v21, OS_LOG_TYPE_ERROR, "[%s] invalid input data\n", (uint8_t *)&v22, 0xCu);
        }
        v14 = *(NSObject **)(GetOsLogContext() + 8);
        result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
        if (result)
        {
          v22 = 136315138;
          v23 = "parseHeader";
          v15 = "[%s] Failed to append to raw bytes\n";
          goto LABEL_23;
        }
      }
    }
  }
  else
  {
    v14 = *(NSObject **)(GetOsLogContext() + 8);
    result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v22 = 136315138;
      v23 = "parseHeader";
      v15 = "[LSCACPChunk][%s] invalid input parameter\n";
LABEL_23:
      v16 = v14;
      v17 = 12;
LABEL_28:
      _os_log_error_impl(&dword_236E0D000, v16, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v22, v17);
      return 0;
    }
  }
  return result;
}

void support::parsers::acp::ParserEngine::create(const void **a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void *v15;

  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v6 = operator new(0x48uLL);
  v7 = dispatch_queue_create("com.apple.acp.ParserEngine", 0);
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = v7;
  if (v7)
  {
    v8 = v7;
    dispatch_retain(v7);
    v6[4] = 0;
    dispatch_release(v8);
  }
  else
  {
    v6[4] = 0;
  }
  *v6 = off_25086B170;
  v6[6] = 0;
  v6[7] = 0;
  v6[5] = 0;
  std::shared_ptr<support::parsers::acp::ParserEngine>::shared_ptr[abi:ne180100]<support::parsers::acp::ParserEngine,std::shared_ptr<support::parsers::acp::ParserEngine> ctu::SharedSynchronizable<support::parsers::acp::ParserEngine>::make_shared_ptr<support::parsers::acp::ParserEngine>(support::parsers::acp::ParserEngine*)::{lambda(support::parsers::acp::ParserEngine*)#1},void>(a3, (uint64_t)v6);
  v9 = *a3;
  if (*a3)
  {
    if (*a1)
      v10 = _Block_copy(*a1);
    else
      v10 = 0;
    v15 = v10;
    v11 = support::parsers::acp::ParserEngine::init(v9, &v15, a2);
    if (v10)
      _Block_release(v10);
    if (!v11)
    {
      v12 = (std::__shared_weak_count *)a3[1];
      *a3 = 0;
      a3[1] = 0;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
  }
}

void sub_236E1A320(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v2;

  if (v2)
    _Block_release(v2);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

support::parsers::acp::ParserEngine *support::parsers::acp::ParserEngine::ParserEngine(support::parsers::acp::ParserEngine *this)
{
  NSObject *v2;
  NSObject *v3;

  v2 = dispatch_queue_create("com.apple.acp.ParserEngine", 0);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v2;
  if (v2)
  {
    v3 = v2;
    dispatch_retain(v2);
    *((_QWORD *)this + 4) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = off_25086B170;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

{
  NSObject *v2;
  NSObject *v3;

  v2 = dispatch_queue_create("com.apple.acp.ParserEngine", 0);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v2;
  if (v2)
  {
    v3 = v2;
    dispatch_retain(v2);
    *((_QWORD *)this + 4) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = off_25086B170;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

BOOL support::parsers::acp::ParserEngine::init(uint64_t a1, const void **a2, char a3)
{
  const void *v3;
  void *v6;
  const void *v7;
  NSObject *v8;
  uint8_t v10[16];

  v3 = *a2;
  if (*a2)
  {
    v6 = _Block_copy(*a2);
    v7 = *(const void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v6;
    if (v7)
      _Block_release(v7);
    *(_BYTE *)(a1 + 64) = a3;
    *(_BYTE *)(a1 + 65) = 0;
  }
  else
  {
    v8 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_error_impl(&dword_236E0D000, v8, OS_LOG_TYPE_ERROR, "Failed to init parser engine, callback null", v10, 2u);
    }
  }
  return v3 != 0;
}

void support::parsers::acp::ParserEngine::addData(support::parsers::acp::ParserEngine *this, unsigned __int8 *a2, int a3)
{
  NSObject *v3;
  char *v4;
  _QWORD v5[2];
  int v6;
  _QWORD block[6];

  v5[0] = this;
  v5[1] = a2;
  v6 = a3;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN7support7parsers3acp12ParserEngineEE20execute_wrapped_syncIZNS4_7addDataEPhjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  block[4] = (char *)this + 8;
  block[5] = v5;
  v4 = (char *)this + 24;
  v3 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v4 + 1))
    dispatch_async_and_wait(v3, block);
  else
    dispatch_sync(v3, block);
}

void support::parsers::acp::ParserEngine::~ParserEngine(support::parsers::acp::ParserEngine *this)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)this = off_25086B170;
  *((_BYTE *)this + 65) = 1;
  v2 = (const void *)*((_QWORD *)this + 7);
  if (v2)
    _Block_release(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *((_QWORD *)this + 4);
  if (v6)
    dispatch_release(v6);
  v7 = *((_QWORD *)this + 3);
  if (v7)
    dispatch_release(v7);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

{
  void *v1;

  support::parsers::acp::ParserEngine::~ParserEngine(this);
  operator delete(v1);
}

void support::parsers::acp::SuperFrame::~SuperFrame(support::parsers::acp::SuperFrame *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  const void *v5;

  *(_QWORD *)this = off_25086B1A0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)this = off_25086B140;
    v5 = (const void *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    *(_QWORD *)this = off_25086B140;
    v5 = (const void *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  CFRelease(v5);
  *((_QWORD *)this + 1) = 0;
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  const void *v5;

  *(_QWORD *)this = off_25086B1A0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      *(_QWORD *)this = off_25086B140;
      v5 = (const void *)*((_QWORD *)this + 1);
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  *(_QWORD *)this = off_25086B140;
  v5 = (const void *)*((_QWORD *)this + 1);
  if (v5)
LABEL_6:
    CFRelease(v5);
LABEL_7:
  operator delete(this);
}

void support::parsers::acp::BaseACPChunk::~BaseACPChunk(support::parsers::acp::BaseACPChunk *this)
{
  const void *v2;

  *(_QWORD *)this = off_25086B140;
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 1) = 0;
  }
}

{
  const void *v2;

  *(_QWORD *)this = off_25086B140;
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  operator delete(this);
}

void std::__shared_ptr_pointer<support::parsers::acp::SuperFrame *,std::shared_ptr<support::parsers::acp::SuperFrame>::__shared_ptr_default_delete<support::parsers::acp::SuperFrame,support::parsers::acp::SuperFrame>,std::allocator<support::parsers::acp::SuperFrame>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::parsers::acp::SuperFrame *,std::shared_ptr<support::parsers::acp::SuperFrame>::__shared_ptr_default_delete<support::parsers::acp::SuperFrame,support::parsers::acp::SuperFrame>,std::allocator<support::parsers::acp::SuperFrame>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<support::parsers::acp::SuperFrame *,std::shared_ptr<support::parsers::acp::SuperFrame>::__shared_ptr_default_delete<support::parsers::acp::SuperFrame,support::parsers::acp::SuperFrame>,std::allocator<support::parsers::acp::SuperFrame>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000236E51D01)
    return a1 + 24;
  if (((v3 & 0x8000000236E51D01 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000236E51D01))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000236E51D01 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<support::parsers::acp::BaseACPChunk *,std::shared_ptr<support::parsers::acp::BaseACPChunk>::__shared_ptr_default_delete<support::parsers::acp::BaseACPChunk,support::parsers::acp::BaseACPChunk>,std::allocator<support::parsers::acp::BaseACPChunk>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::parsers::acp::BaseACPChunk *,std::shared_ptr<support::parsers::acp::BaseACPChunk>::__shared_ptr_default_delete<support::parsers::acp::BaseACPChunk,support::parsers::acp::BaseACPChunk>,std::allocator<support::parsers::acp::BaseACPChunk>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<support::parsers::acp::BaseACPChunk *,std::shared_ptr<support::parsers::acp::BaseACPChunk>::__shared_ptr_default_delete<support::parsers::acp::BaseACPChunk,support::parsers::acp::BaseACPChunk>,std::allocator<support::parsers::acp::BaseACPChunk>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000236E51DF2)
    return a1 + 24;
  if (((v3 & 0x8000000236E51DF2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000236E51DF2))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000236E51DF2 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<support::parsers::acp::LSCACPChunk *,std::shared_ptr<support::parsers::acp::LSCACPChunk>::__shared_ptr_default_delete<support::parsers::acp::LSCACPChunk,support::parsers::acp::LSCACPChunk>,std::allocator<support::parsers::acp::LSCACPChunk>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::parsers::acp::LSCACPChunk *,std::shared_ptr<support::parsers::acp::LSCACPChunk>::__shared_ptr_default_delete<support::parsers::acp::LSCACPChunk,support::parsers::acp::LSCACPChunk>,std::allocator<support::parsers::acp::LSCACPChunk>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<support::parsers::acp::LSCACPChunk *,std::shared_ptr<support::parsers::acp::LSCACPChunk>::__shared_ptr_default_delete<support::parsers::acp::LSCACPChunk,support::parsers::acp::LSCACPChunk>,std::allocator<support::parsers::acp::LSCACPChunk>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000236E51EE4)
    return a1 + 24;
  if (((v3 & 0x8000000236E51EE4 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000236E51EE4))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000236E51EE4 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

_QWORD *std::shared_ptr<support::parsers::acp::ParserEngine>::shared_ptr[abi:ne180100]<support::parsers::acp::ParserEngine,std::shared_ptr<support::parsers::acp::ParserEngine> ctu::SharedSynchronizable<support::parsers::acp::ParserEngine>::make_shared_ptr<support::parsers::acp::ParserEngine>(support::parsers::acp::ParserEngine*)::{lambda(support::parsers::acp::ParserEngine*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_25086B418;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_236E1AAD0(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<support::parsers::acp::ParserEngine> ctu::SharedSynchronizable<support::parsers::acp::ParserEngine>::make_shared_ptr<support::parsers::acp::ParserEngine>(support::parsers::acp::ParserEngine*)::{lambda(support::parsers::acp::ParserEngine*)#1}::operator() const(support::parsers::acp::ParserEngine*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_236E1AAF0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<support::parsers::acp::ParserEngine *,std::shared_ptr<support::parsers::acp::ParserEngine> ctu::SharedSynchronizable<support::parsers::acp::ParserEngine>::make_shared_ptr<support::parsers::acp::ParserEngine>(support::parsers::acp::ParserEngine*)::{lambda(support::parsers::acp::ParserEngine *)#1},std::allocator<support::parsers::acp::ParserEngine>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<support::parsers::acp::ParserEngine *,std::shared_ptr<support::parsers::acp::ParserEngine> ctu::SharedSynchronizable<support::parsers::acp::ParserEngine>::make_shared_ptr<support::parsers::acp::ParserEngine>(support::parsers::acp::ParserEngine*)::{lambda(support::parsers::acp::ParserEngine *)#1},std::allocator<support::parsers::acp::ParserEngine>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<support::parsers::acp::ParserEngine> ctu::SharedSynchronizable<support::parsers::acp::ParserEngine>::make_shared_ptr<support::parsers::acp::ParserEngine>(support::parsers::acp::ParserEngine*)::{lambda(support::parsers::acp::ParserEngine*)#1}::operator() const(support::parsers::acp::ParserEngine*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<support::parsers::acp::ParserEngine *,std::shared_ptr<support::parsers::acp::ParserEngine> ctu::SharedSynchronizable<support::parsers::acp::ParserEngine>::make_shared_ptr<support::parsers::acp::ParserEngine>(support::parsers::acp::ParserEngine*)::{lambda(support::parsers::acp::ParserEngine *)#1},std::allocator<support::parsers::acp::ParserEngine>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN7support7parsers3acp12ParserEngineEE15make_shared_ptrIS4_EENSt3__110s"
                     "hared_ptrIT_EEPS9_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN7support7parsers3acp12ParserEngineEE15make_shared_ptrIS4_E"
                                "ENSt3__110shared_ptrIT_EEPS9_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN7support7parsers3acp12ParserEngineEE15make_shared_ptrIS4_EENSt3__110shared_ptrIT_EEPS9_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN7support7parsers3acp12ParserEngineEE15make_shared_ptrIS4_EENSt3__110shared_ptrIT_EEPS9_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<support::parsers::acp::ParserEngine> ctu::SharedSynchronizable<support::parsers::acp::ParserEngine>::make_shared_ptr<support::parsers::acp::ParserEngine>(support::parsers::acp::ParserEngine*)::{lambda(support::parsers::acp::ParserEngine*)#1}::operator() const(support::parsers::acp::ParserEngine*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ___ZNK3ctu20SharedSynchronizableIN7support7parsers3acp12ParserEngineEE20execute_wrapped_syncIZNS4_7addDataEPhjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  support::parsers::acp::SuperFrame *v3;
  support::parsers::acp::SuperFrame **v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  unint64_t *v18;
  NSObject *v19;
  __int128 v20;

  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  if (!*(_BYTE *)(*v1 + 65))
  {
    v4 = (support::parsers::acp::SuperFrame **)(v2 + 40);
    v3 = *(support::parsers::acp::SuperFrame **)(v2 + 40);
    if (v3)
      goto LABEL_15;
    support::parsers::acp::SuperFrame::create((support::parsers::acp::SuperFrame *)*(unsigned __int8 *)(v2 + 64), &v20);
    v5 = v20;
    v20 = 0uLL;
    v6 = *(std::__shared_weak_count **)(v2 + 48);
    *(_OWORD *)(v2 + 40) = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v3 = *v4;
    if (*v4)
    {
LABEL_15:
      if (support::parsers::acp::SuperFrame::processData(v3, (unsigned __int8 *)v1[1], *((unsigned int *)v1 + 4)))
      {
        if (*((_DWORD *)*v4 + 13) != 3)
          return;
        v12 = *(_QWORD *)(v2 + 56);
        if (!v12)
          return;
        v13 = *(_QWORD *)(v2 + 48);
        *(_QWORD *)&v20 = *v4;
        *((_QWORD *)&v20 + 1) = v13;
        *v4 = 0;
        *(_QWORD *)(v2 + 48) = 0;
        (*(void (**)(uint64_t, __int128 *))(v12 + 16))(v12, &v20);
        v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
        if (!*((_QWORD *)&v20 + 1))
          return;
        v15 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
      }
      else
      {
        v17 = *(NSObject **)(GetOsLogContext() + 8);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v20) = 0;
          _os_log_error_impl(&dword_236E0D000, v17, OS_LOG_TYPE_ERROR, "Failed to process data", (uint8_t *)&v20, 2u);
          v14 = *(std::__shared_weak_count **)(v2 + 48);
          *(_QWORD *)(v2 + 40) = 0;
          *(_QWORD *)(v2 + 48) = 0;
          if (!v14)
            return;
        }
        else
        {
          v14 = *(std::__shared_weak_count **)(v2 + 48);
          *(_QWORD *)(v2 + 40) = 0;
          *(_QWORD *)(v2 + 48) = 0;
          if (!v14)
            return;
        }
        v18 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v18);
        while (__stlxr(v16 - 1, v18));
      }
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      return;
    }
    v19 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v20) = 0;
      _os_log_error_impl(&dword_236E0D000, v19, OS_LOG_TYPE_ERROR, "Failed to create SuperFrame", (uint8_t *)&v20, 2u);
    }
  }
}

void sub_236E1ADDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t support::fs::toString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if ((_DWORD)result == 1)
  {
    a2[23] = 9;
    strcpy(a2, "_wireless");
  }
  else if ((_DWORD)result)
  {
    a2[23] = 0;
    *a2 = 0;
  }
  else
  {
    a2[23] = 6;
    strcpy(a2, "mobile");
  }
  return result;
}

uint64_t support::fs::updateOwner(const char *a1, uint64_t a2, uint64_t a3)
{
  const char *v5;
  timespec v6;
  size_t v7;
  __darwin_ino64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  stat *v14;
  uint64_t updated;
  void *v16;
  const char *v17;
  DIR *v18;
  DIR *v19;
  dirent *v20;
  char *v21;
  const std::string::value_type **v22;
  char v23;
  __int128 v24;
  int v25;
  size_t v26;
  unint64_t v27;
  char *p_dst;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  std::string *v32;
  std::string::size_type size;
  std::string *v34;
  __int128 v35;
  int v36;
  timespec v37;
  std::string *p_p;
  std::string *v39;
  size_t v40;
  __darwin_ino64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  int st_gid_high;
  void *v46;
  stat *v47;
  void *v48;
  std::string *v49;
  DIR *v50;
  DIR *v51;
  dirent *v52;
  void **v53;
  char *v55;
  std::string v56;
  std::string __p;
  std::string v58;
  void *v59;
  char *v60;
  uint64_t v61;
  stat __dst;

  v5 = a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blksize = v6;
  *(timespec *)__dst.st_qspare = v6;
  __dst.st_birthtimespec = v6;
  *(timespec *)&__dst.st_size = v6;
  __dst.st_mtimespec = v6;
  __dst.st_ctimespec = v6;
  *(timespec *)&__dst.st_uid = v6;
  __dst.st_atimespec = v6;
  *(timespec *)&__dst.st_dev = v6;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (!stat(a1, &__dst))
  {
    v17 = v5[23] >= 0 ? v5 : *(const char **)v5;
    v18 = opendir(v17);
    if (v18)
    {
      v19 = v18;
      v20 = readdir(v18);
      closedir(v19);
      if (v20)
      {
        v59 = 0;
        v60 = 0;
        v61 = 0;
        support::fs::readDir(v5, (uint64_t)&v59);
        v21 = (char *)v59;
        v55 = v60;
        if (v59 == v60)
        {
          updated = 0;
          if (v59)
            goto LABEL_106;
          return updated;
        }
        v22 = (const std::string::value_type **)((char *)v59 + 24);
        while (1)
        {
          memset(&v58, 170, sizeof(v58));
          if (*((char *)v22 - 1) < 0)
          {
            std::string::__init_copy_ctor_external(&v58, *(v22 - 3), (std::string::size_type)*(v22 - 2));
          }
          else
          {
            v24 = *(_OWORD *)(v22 - 3);
            v58.__r_.__value_.__r.__words[2] = (std::string::size_type)*(v22 - 1);
            *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v24;
          }
          memset(&__p, 170, sizeof(__p));
          v25 = v5[23];
          if (v25 >= 0)
            v26 = *((unsigned __int8 *)v5 + 23);
          else
            v26 = *((_QWORD *)v5 + 1);
          v27 = v26 + 1;
          memset(&__dst, 170, 24);
          if (v26 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v27 >= 0x17)
          {
            v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17)
              v29 = v27 | 7;
            v30 = v29 + 1;
            p_dst = (char *)operator new(v29 + 1);
            __dst.st_ino = v26 + 1;
            *(_QWORD *)&__dst.st_uid = v30 | 0x8000000000000000;
            *(_QWORD *)&__dst.st_dev = p_dst;
          }
          else
          {
            memset(&__dst, 0, 24);
            p_dst = (char *)&__dst;
            HIBYTE(__dst.st_gid) = v26 + 1;
            if (!v26)
              goto LABEL_47;
          }
          if (v25 >= 0)
            v31 = v5;
          else
            v31 = *(const char **)v5;
          memmove(p_dst, v31, v26);
LABEL_47:
          *(_WORD *)&p_dst[v26] = 47;
          if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v32 = &v58;
          else
            v32 = (std::string *)v58.__r_.__value_.__r.__words[0];
          if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
          else
            size = v58.__r_.__value_.__l.__size_;
          v34 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v32, size);
          v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.st_gid) < 0)
          {
            operator delete(*(void **)&__dst.st_dev);
            v36 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
            if ((*((_BYTE *)&v58.__r_.__value_.__s + 23) & 0x80) == 0)
            {
LABEL_55:
              if (v36 == 1)
              {
                if (v58.__r_.__value_.__s.__data_[0] == 46)
                  goto LABEL_71;
              }
              else if (v36 == 2 && LOWORD(v58.__r_.__value_.__l.__data_) == 11822)
              {
                goto LABEL_71;
              }
              goto LABEL_67;
            }
          }
          else
          {
            v36 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
            if ((*((_BYTE *)&v58.__r_.__value_.__s + 23) & 0x80) == 0)
              goto LABEL_55;
          }
          if (v58.__r_.__value_.__l.__size_ == 1)
          {
            if (*v58.__r_.__value_.__l.__data_ == 46)
              goto LABEL_71;
          }
          else if (v58.__r_.__value_.__l.__size_ == 2 && *(_WORD *)v58.__r_.__value_.__l.__data_ == 11822)
          {
            goto LABEL_71;
          }
LABEL_67:
          v37.tv_sec = 0xAAAAAAAAAAAAAAAALL;
          v37.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
          *(timespec *)&__dst.st_blksize = v37;
          *(timespec *)__dst.st_qspare = v37;
          __dst.st_birthtimespec = v37;
          *(timespec *)&__dst.st_size = v37;
          __dst.st_mtimespec = v37;
          __dst.st_ctimespec = v37;
          *(timespec *)&__dst.st_uid = v37;
          __dst.st_atimespec = v37;
          *(timespec *)&__dst.st_dev = v37;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (stat((const char *)p_p, &__dst)
            || ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? (v49 = &__p)
              : (v49 = (std::string *)__p.__r_.__value_.__r.__words[0]),
                (v50 = opendir((const char *)v49), (v51 = v50) == 0) || (v52 = readdir(v50), closedir(v51), !v52)))
          {
LABEL_71:
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v39 = &__p;
            else
              v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
            v40 = strlen((const char *)v39);
            if (v40 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v41 = v40;
            if (v40 >= 0x17)
            {
              v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v40 | 7) != 0x17)
                v43 = v40 | 7;
              v44 = v43 + 1;
              v42 = operator new(v43 + 1);
              __dst.st_ino = v41;
              *(_QWORD *)&__dst.st_uid = v44 | 0x8000000000000000;
              *(_QWORD *)&__dst.st_dev = v42;
            }
            else
            {
              HIBYTE(__dst.st_gid) = v40;
              v42 = &__dst;
              if (!v40)
              {
LABEL_82:
                v42[v41] = 0;
                st_gid_high = SHIBYTE(__dst.st_gid);
                v46 = *(void **)&__dst.st_dev;
                if ((__dst.st_gid & 0x80000000) == 0)
                  v47 = &__dst;
                else
                  v47 = *(stat **)&__dst.st_dev;
                updated = chown((const char *)v47, a2, a3) == 0;
                if (st_gid_high < 0)
                {
                  v48 = v46;
LABEL_87:
                  operator delete(v48);
                  goto LABEL_88;
                }
                goto LABEL_88;
              }
            }
            memmove(v42, v39, v41);
            goto LABEL_82;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v56, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          else
            v56 = __p;
          updated = support::fs::updateOwner(&v56, a2, a3);
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
          {
            v48 = (void *)v56.__r_.__value_.__r.__words[0];
            goto LABEL_87;
          }
LABEL_88:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
LABEL_92:
              operator delete(v58.__r_.__value_.__l.__data_);
          }
          else if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_92;
          }
          if (v22 == (const std::string::value_type **)v55)
            v23 = 0;
          else
            v23 = updated;
          v22 += 3;
          if ((v23 & 1) == 0)
          {
            v21 = (char *)v59;
            if (!v59)
              return updated;
LABEL_106:
            v53 = (void **)v60;
            v16 = v21;
            if (v60 != v21)
            {
              do
              {
                if (*((char *)v53 - 1) < 0)
                  operator delete(*(v53 - 3));
                v53 -= 3;
              }
              while (v53 != (void **)v21);
              v16 = v59;
            }
            v60 = v21;
LABEL_113:
            operator delete(v16);
            return updated;
          }
        }
      }
    }
  }
  if (v5[23] < 0)
    v5 = *(const char **)v5;
  v7 = strlen(v5);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    __dst.st_ino = v8;
    *(_QWORD *)&__dst.st_uid = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst.st_dev = v9;
    goto LABEL_13;
  }
  HIBYTE(__dst.st_gid) = v7;
  v9 = &__dst;
  if (v7)
LABEL_13:
    memmove(v9, v5, v8);
  *((_BYTE *)v9 + v8) = 0;
  v12 = SHIBYTE(__dst.st_gid);
  v13 = *(void **)&__dst.st_dev;
  if ((__dst.st_gid & 0x80000000) == 0)
    v14 = &__dst;
  else
    v14 = *(stat **)&__dst.st_dev;
  updated = chown((const char *)v14, a2, a3) == 0;
  if (v12 < 0)
  {
    v16 = v13;
    goto LABEL_113;
  }
  return updated;
}

void sub_236E1B3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31)
{
  std::vector<std::string>::~vector[abi:ne180100](&a31);
  _Unwind_Resume(a1);
}

void sub_236E1B42C()
{
  JUMPOUT(0x236E1B45CLL);
}

DIR *support::fs::isDir(const char *a1)
{
  const char *v1;
  timespec v2;
  DIR *result;
  const char *v4;
  DIR *v5;
  dirent *v6;
  stat v7;

  v1 = a1;
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v7.st_blksize = v2;
  *(timespec *)v7.st_qspare = v2;
  v7.st_birthtimespec = v2;
  *(timespec *)&v7.st_size = v2;
  v7.st_mtimespec = v2;
  v7.st_ctimespec = v2;
  *(timespec *)&v7.st_uid = v2;
  v7.st_atimespec = v2;
  *(timespec *)&v7.st_dev = v2;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (stat(a1, &v7))
    return 0;
  if (v1[23] >= 0)
    v4 = v1;
  else
    v4 = *(const char **)v1;
  result = opendir(v4);
  if (result)
  {
    v5 = result;
    v6 = readdir(result);
    closedir(v5);
    return (DIR *)(v6 != 0);
  }
  return result;
}

BOOL support::fs::chown(const char *a1, uid_t a2, gid_t a3)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return chown(a1, a2, a3) == 0;
}

DIR *support::fs::readDir(const char *a1, uint64_t a2)
{
  DIR *result;
  DIR *v4;
  dirent *v5;
  dirent *v6;
  size_t d_namlen;
  _BYTE *v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  _BYTE __dst[24];

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  result = opendir(a1);
  if (result)
  {
    v4 = result;
    v5 = readdir(result);
    if (v5)
    {
      v6 = v5;
      do
      {
        memset(__dst, 170, sizeof(__dst));
        d_namlen = v6->d_namlen;
        if (d_namlen >= 0x17)
        {
          if ((d_namlen | 7) == 0x17)
            v11 = ((unsigned __int16)d_namlen & 0xFFF8) + 8;
          else
            v11 = d_namlen | 7;
          v8 = operator new(v11 + 1);
          *(_QWORD *)&__dst[8] = d_namlen;
          *(_QWORD *)&__dst[16] = v11 - 0x7FFFFFFFFFFFFFFFLL;
          *(_QWORD *)__dst = v8;
        }
        else
        {
          __dst[23] = v6->d_namlen;
          v8 = __dst;
          if (!(_DWORD)d_namlen)
          {
            __dst[d_namlen] = 0;
            v9 = *(std::string **)(a2 + 8);
            if ((unint64_t)v9 < *(_QWORD *)(a2 + 16))
              goto LABEL_10;
            goto LABEL_17;
          }
        }
        memmove(v8, v6->d_name, d_namlen);
        v8[d_namlen] = 0;
        v9 = *(std::string **)(a2 + 8);
        if ((unint64_t)v9 < *(_QWORD *)(a2 + 16))
        {
LABEL_10:
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
          }
          else
          {
            v10 = *(_OWORD *)__dst;
            v9->__r_.__value_.__r.__words[2] = *(_QWORD *)&__dst[16];
            *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
          }
          *(_QWORD *)(a2 + 8) = v9 + 1;
          *(_QWORD *)(a2 + 8) = v9 + 1;
          if ((__dst[23] & 0x80000000) == 0)
            goto LABEL_6;
LABEL_21:
          operator delete(*(void **)__dst);
          goto LABEL_6;
        }
LABEL_17:
        *(_QWORD *)(a2 + 8) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)__dst);
        if ((__dst[23] & 0x80000000) != 0)
          goto LABEL_21;
LABEL_6:
        v6 = readdir(v4);
      }
      while (v6);
    }
    return (DIR *)closedir(v4);
  }
  return result;
}

void sub_236E1B6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 8) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t support::fs::getUidGid(int a1, uid_t *a2, gid_t *a3)
{
  passwd *v5;
  NSObject *v7;
  void *__p[3];
  uint8_t buf[4];
  void **v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  memset(__p, 170, sizeof(__p));
  if (a1 == 1)
  {
    HIBYTE(__p[2]) = 9;
    strcpy((char *)__p, "_wireless");
    v5 = getpwnam((const char *)__p);
    if (v5)
      goto LABEL_4;
LABEL_6:
    v7 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v10 = __p;
      _os_log_error_impl(&dword_236E0D000, v7, OS_LOG_TYPE_ERROR, "Getting uid and gid: failed to get passwd for %s", buf, 0xCu);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
    }
    return 0;
  }
  if (!a1)
  {
    HIBYTE(__p[2]) = 6;
    strcpy((char *)__p, "mobile");
    v5 = getpwnam((const char *)__p);
    if (v5)
    {
LABEL_4:
      *a2 = v5->pw_uid;
      *a3 = v5->pw_gid;
      return 1;
    }
    goto LABEL_6;
  }
  return 0;
}

BOOL support::fs::writeToCompletion(support::fs *this, char *__buf, size_t __nbyte)
{
  int v4;
  size_t v5;
  ssize_t v6;

  v4 = (int)this;
  do
  {
    v5 = __nbyte;
    if (!__nbyte)
      break;
    v6 = write(v4, __buf, __nbyte);
    __nbyte = v5 - v6;
    __buf += v6;
  }
  while ((v6 & 0x8000000000000000) == 0);
  return v5 == 0;
}

BOOL support::fs::writeToCompletion(FILE *__stream, __sFILE *__ptr, size_t __nitems)
{
  size_t v5;
  size_t v6;

  while (1)
  {
    v5 = __nitems;
    if (!__nitems)
      break;
    v6 = fwrite(__ptr, 1uLL, __nitems, __stream);
    __nitems = v5 - v6;
    __ptr = (__sFILE *)((char *)__ptr + v6);
    if (!v6)
      return v5 == 0;
  }
  fflush(__stream);
  return 1;
}

uint64_t support::fs::openFile(const char *a1, int a2, unsigned int a3)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return open(a1, a2, a3);
}

BOOL support::fs::closeFile(support::fs *this)
{
  int v1;
  int v2;

  v1 = (int)this;
  do
    v2 = close(v1);
  while (v2 && *__error() == 4);
  return v2 == 0;
}

BOOL support::fs::copyFile(const char *a1, const char *a2, int a3)
{
  const char *v6;
  size_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  int v13;
  int v14;
  const char *v15;
  size_t v16;
  size_t v17;
  _BYTE *v18;
  NSObject *v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  int v24;
  int v25;
  ssize_t v26;
  _BYTE *v27;
  ssize_t v28;
  __int128 v29;
  NSObject *v30;
  const char *v32;
  const char *v33;
  _BYTE __dst[1024];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (a1[23] >= 0)
    v6 = a1;
  else
    v6 = *(const char **)a1;
  v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    *(_QWORD *)&__dst[8] = v8;
    *(_QWORD *)&__dst[16] = v11 | 0x8000000000000000;
    *(_QWORD *)__dst = v9;
    goto LABEL_11;
  }
  __dst[23] = v7;
  v9 = __dst;
  if (v7)
LABEL_11:
    memmove(v9, v6, v8);
  v9[v8] = 0;
  if (__dst[23] >= 0)
    v12 = __dst;
  else
    v12 = *(const char **)__dst;
  v13 = open(v12, 0, 420);
  v14 = v13;
  if ((__dst[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__dst);
    if ((v14 & 0x80000000) == 0)
    {
LABEL_17:
      if (a2[23] >= 0)
        v15 = a2;
      else
        v15 = *(const char **)a2;
      v16 = strlen(v15);
      if (v16 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v17 = v16;
      if (v16 >= 0x17)
      {
        v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v21 = v16 | 7;
        v22 = v21 + 1;
        v18 = operator new(v21 + 1);
        *(_QWORD *)&__dst[8] = v17;
        *(_QWORD *)&__dst[16] = v22 | 0x8000000000000000;
        *(_QWORD *)__dst = v18;
      }
      else
      {
        __dst[23] = v16;
        v18 = __dst;
        if (!v16)
        {
LABEL_31:
          v18[v17] = 0;
          if (__dst[23] >= 0)
            v23 = __dst;
          else
            v23 = *(const char **)__dst;
          v24 = open(v23, 1541, 420);
          v25 = v24;
          if ((__dst[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__dst);
            if ((v25 & 0x80000000) == 0)
              goto LABEL_36;
          }
          else if ((v24 & 0x80000000) == 0)
          {
LABEL_36:
            memset(__dst, 170, sizeof(__dst));
            v26 = read(v14, __dst, 0x400uLL);
            if (v26 < 1)
            {
LABEL_42:
              v20 = v26 == 0;
              if (!v26 && a3)
              {
                *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
                *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
                *(_OWORD *)&__dst[112] = v29;
                *(_OWORD *)&__dst[128] = v29;
                *(_OWORD *)&__dst[80] = v29;
                *(_OWORD *)&__dst[96] = v29;
                *(_OWORD *)&__dst[48] = v29;
                *(_OWORD *)&__dst[64] = v29;
                *(_OWORD *)&__dst[16] = v29;
                *(_OWORD *)&__dst[32] = v29;
                *(_OWORD *)__dst = v29;
                if (fstat(v14, (stat *)__dst))
                  v20 = 0;
                else
                  v20 = fchmod(v25, *(mode_t *)&__dst[4]) == 0;
              }
            }
            else
            {
              v27 = __dst;
              do
              {
                while (!v26)
                {
                  memset(__dst, 170, sizeof(__dst));
                  v26 = read(v14, __dst, 0x400uLL);
                  v27 = __dst;
                  if (v26 <= 0)
                    goto LABEL_42;
                }
                v28 = write(v25, v27, v26);
                v26 -= v28;
                v27 += v28;
              }
              while ((v28 & 0x8000000000000000) == 0);
              v20 = 0;
            }
            while (close(v25) && *__error() == 4)
              ;
            goto LABEL_52;
          }
          v30 = *(NSObject **)(GetOsLogContext() + 8);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            if (a2[23] >= 0)
              v33 = a2;
            else
              v33 = *(const char **)a2;
            *(_DWORD *)__dst = 136315138;
            *(_QWORD *)&__dst[4] = v33;
            _os_log_error_impl(&dword_236E0D000, v30, OS_LOG_TYPE_ERROR, "Failed to open the destination file(%s)", __dst, 0xCu);
          }
          v20 = 0;
LABEL_52:
          while (close(v14) && *__error() == 4)
            ;
          return v20;
        }
      }
      memmove(v18, v15, v17);
      goto LABEL_31;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  v19 = *(NSObject **)(GetOsLogContext() + 8);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0)
      v32 = a1;
    else
      v32 = *(const char **)a1;
    *(_DWORD *)__dst = 136315138;
    *(_QWORD *)&__dst[4] = v32;
    _os_log_error_impl(&dword_236E0D000, v19, OS_LOG_TYPE_ERROR, "Failed to open the source file(%s)", __dst, 0xCu);
  }
  return 0;
}

void sub_236E1BDE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL support::fs::loadFile(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _BOOL8 v4;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  __int128 v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  _QWORD __b[91];

  __b[89] = *MEMORY[0x24BDAC8D0];
  memset(__b, 170, 0x240uLL);
  std::ifstream::basic_ifstream(__b);
  if (!__b[17]
    || (std::istream::tellg(), std::istream::seekg(), std::istream::tellg(), v3 = __b[88], std::istream::seekg(), !v3)
    || *(_DWORD *)((char *)&__b[4] + *(_QWORD *)(__b[0] - 24)))
  {
    v4 = 0;
    goto LABEL_5;
  }
  v7 = *(char **)a2;
  v6 = *(char **)(a2 + 8);
  v8 = (unint64_t)&v6[-*(_QWORD *)a2];
  v9 = v3 - v8;
  if (v3 <= v8)
  {
    if (v3 < v8)
      *(_QWORD *)(a2 + 8) = &v7[v3];
    goto LABEL_36;
  }
  v10 = *(_QWORD *)(a2 + 16);
  if (v10 - (uint64_t)v6 < v9)
  {
    if ((v3 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v10 - (_QWORD)v7;
    v12 = 2 * v11;
    if (2 * v11 <= v3)
      v12 = v3;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v14 = (char *)operator new(v13);
    v15 = &v14[v8];
    v16 = &v14[v13];
    bzero(&v14[v8], v3 - v8);
    if (v6 == v7)
      goto LABEL_34;
    if (v8 >= 8 && (unint64_t)(v7 - v14) >= 0x20)
    {
      if (v8 < 0x20)
      {
        v17 = 0;
        goto LABEL_26;
      }
      v17 = v8 & 0xFFFFFFFFFFFFFFE0;
      v18 = v6 - 16;
      v19 = &v14[v6 - 16 - v7];
      v20 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v21 = *(_OWORD *)v18;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)v19 = v21;
        v19 -= 32;
        v18 -= 32;
        v20 -= 32;
      }
      while (v20);
      if (v8 == v17)
        goto LABEL_33;
      if ((v8 & 0x18) != 0)
      {
LABEL_26:
        v15 -= v8 & 0xFFFFFFFFFFFFFFF8;
        v22 = &v6[-v17 - 8];
        v23 = (char *)(v22 - v7);
        v24 = v17 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v25 = *(_QWORD *)v22;
          v22 -= 8;
          *(_QWORD *)&v23[(_QWORD)v14] = v25;
          v23 -= 8;
          v24 += 8;
        }
        while (v24);
        v6 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_33;
        goto LABEL_31;
      }
      v15 -= v17;
      v6 -= v17;
    }
LABEL_31:
    v26 = v15 - 1;
    do
    {
      v27 = *--v6;
      *v26-- = v27;
    }
    while (v6 != v7);
LABEL_33:
    v6 = v7;
    v15 = v14;
LABEL_34:
    *(_QWORD *)a2 = v15;
    *(_QWORD *)(a2 + 8) = &v14[v3];
    *(_QWORD *)(a2 + 16) = v16;
    if (v6)
      operator delete(v6);
    goto LABEL_36;
  }
  bzero(*(void **)(a2 + 8), v3 - v8);
  *(_QWORD *)(a2 + 8) = &v6[v9];
LABEL_36:
  std::istream::read();
  v4 = __b[1] == (int)v3;
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)__b + *(_QWORD *)(__b[0] - 24)), *(_DWORD *)((char *)&__b[4] + *(_QWORD *)(__b[0] - 24)) | 4);
LABEL_5:
  __b[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)__b + *(_QWORD *)(__b[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x23B804DB8](&__b[2]);
  std::istream::~istream();
  MEMORY[0x23B804F8C](&__b[53]);
  return v4;
}

void sub_236E1C124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x23B804DAC](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_236E1C218(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x23B804F8C](v1 + 424);
  _Unwind_Resume(a1);
}

BOOL support::fs::getFileSize(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
  {
    std::istream::tellg();
    std::istream::seekg();
    std::istream::tellg();
    *a2 = v5;
    std::istream::seekg();
  }
  return v2 != 0;
}

{
  uint64_t v2;
  _BOOL8 v4;
  _QWORD v6[90];

  v6[89] = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  memset(v6, 170, 0x240uLL);
  std::ifstream::basic_ifstream(v6);
  v4 = v6[17] != 0;
  if (v6[17])
  {
    std::istream::tellg();
    std::istream::seekg();
    std::istream::tellg();
    *a2 = v6[88];
    std::istream::seekg();
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v6 + *(_QWORD *)(v6[0] - 24)), *(_DWORD *)((char *)&v6[4] + *(_QWORD *)(v6[0] - 24)) | 4);
  }
  v6[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x23B804DB8](&v6[2]);
  std::istream::~istream();
  MEMORY[0x23B804F8C](&v6[53]);
  return v4;
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x23B804DB8](a1 + 2);
  std::istream::~istream();
  MEMORY[0x23B804F8C](a1 + 53);
  return a1;
}

uint64_t support::fs::loadFile(const char *a1, uint64_t a2)
{
  FILE *v3;
  FILE *v4;
  unint64_t v5;
  size_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  char *v30;

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v3 = fopen(a1, "rb");
  if (v3)
  {
    v4 = v3;
    fseek(v3, 0, 2);
    v5 = MEMORY[0x23B8052F8](v4);
    if (v5 != -1)
    {
      v6 = v5;
      v8 = *(char **)a2;
      v7 = *(char **)(a2 + 8);
      v9 = (unint64_t)&v7[-*(_QWORD *)a2];
      v10 = v5 - v9;
      if (v5 <= v9)
      {
        if (v5 < v9)
          *(_QWORD *)(a2 + 8) = &v8[v5];
        goto LABEL_36;
      }
      v11 = *(_QWORD *)(a2 + 16);
      if (v11 - (uint64_t)v7 >= v10)
      {
        bzero(*(void **)(a2 + 8), v10);
        *(_QWORD *)(a2 + 8) = &v7[v10];
LABEL_36:
        rewind(v4);
        v30 = *(char **)a2;
        v19 = 1;
        fread(v30, v6, 1uLL, v4);
        fclose(v4);
        return v19;
      }
      if ((v5 & 0x8000000000000000) != 0)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v12 = v11 - (_QWORD)v8;
      v13 = 2 * v12;
      if (2 * v12 <= v5)
        v13 = v5;
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      v15 = (char *)operator new(v14);
      v16 = &v15[v9];
      v17 = &v15[v14];
      bzero(&v15[v9], v10);
      if (v7 == v8)
      {
LABEL_34:
        *(_QWORD *)a2 = v16;
        *(_QWORD *)(a2 + 8) = &v15[v6];
        *(_QWORD *)(a2 + 16) = v17;
        if (v7)
          operator delete(v7);
        goto LABEL_36;
      }
      if (v9 >= 8 && (unint64_t)(v8 - v15) >= 0x20)
      {
        if (v9 < 0x20)
        {
          v18 = 0;
          goto LABEL_26;
        }
        v18 = v9 & 0xFFFFFFFFFFFFFFE0;
        v20 = v7 - 16;
        v21 = &v15[v7 - 16 - v8];
        v22 = v9 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v23 = *(_OWORD *)v20;
          *((_OWORD *)v21 - 1) = *((_OWORD *)v20 - 1);
          *(_OWORD *)v21 = v23;
          v21 -= 32;
          v20 -= 32;
          v22 -= 32;
        }
        while (v22);
        if (v9 == v18)
          goto LABEL_33;
        if ((v9 & 0x18) != 0)
        {
LABEL_26:
          v16 -= v9 & 0xFFFFFFFFFFFFFFF8;
          v24 = &v7[-v18 - 8];
          v25 = (char *)(v24 - v8);
          v26 = v18 - (v9 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v27 = *(_QWORD *)v24;
            v24 -= 8;
            *(_QWORD *)&v25[(_QWORD)v15] = v27;
            v25 -= 8;
            v26 += 8;
          }
          while (v26);
          v7 -= v9 & 0xFFFFFFFFFFFFFFF8;
          if (v9 == (v9 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_33;
          goto LABEL_31;
        }
        v16 -= v18;
        v7 -= v18;
      }
LABEL_31:
      v28 = v16 - 1;
      do
      {
        v29 = *--v7;
        *v28-- = v29;
      }
      while (v7 != v8);
LABEL_33:
      v7 = v8;
      v16 = v15;
      goto LABEL_34;
    }
  }
  return 0;
}

BOOL support::fs::fileExists(const char *a1)
{
  timespec v1;
  stat v3;

  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v1.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v3.st_blksize = v1;
  *(timespec *)v3.st_qspare = v1;
  v3.st_birthtimespec = v1;
  *(timespec *)&v3.st_size = v1;
  v3.st_mtimespec = v1;
  v3.st_ctimespec = v1;
  *(timespec *)&v3.st_uid = v1;
  v3.st_atimespec = v1;
  *(timespec *)&v3.st_dev = v1;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return stat(a1, &v3) == 0;
}

void support::fs::createUniqueFilename(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  timespec *p_st_atimespec;
  timespec v6;
  std::string *v7;
  uint64_t v8;
  std::sub_match<const char *> *v9;
  std::sub_match<std::__wrap_iter<const char *>> *v10;
  __int128 v11;
  int v12;
  int v13;
  std::string *v14;
  std::sub_match<const char *> *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  uint64_t v19;
  void **v20;
  __int128 v21;
  void *tv_nsec;
  unsigned __int8 *v23;
  std::string::value_type *tv_sec;
  uint64_t i;
  void *v26;
  char *v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  std::string::value_type *v31;
  std::string::value_type *v32;
  std::string::value_type *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  __darwin_time_t v40;
  BOOL v41;
  uint64_t *p_tv_nsec;
  std::string::value_type *v43;
  timespec *p_st_ctimespec;
  std::string::value_type *j;
  std::string::value_type *st_blocks;
  std::string::value_type *v47;
  dev_t st_rdev;
  int v49;
  _QWORD *v50;
  timespec *v51;
  std::sub_match<const char *> *v52;
  std::sub_match<const char *> *st_ino;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  __darwin_time_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void *v63;
  __darwin_time_t v64;
  uint64_t v65;
  uint64_t v66;
  __darwin_time_t v67;
  __int128 v68;
  std::vector<std::ssub_match> *v69;
  __int128 v70;
  __darwin_ino64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  __darwin_time_t v75;
  __darwin_time_t v76;
  unint64_t v77;
  int64_t v78;
  uint64_t v79;
  unint64_t v80;
  std::sub_match<std::__wrap_iter<const char *>> *begin;
  std::vector<std::ssub_match>::pointer end;
  std::vector<std::ssub_match> *v83;
  _QWORD *p_end;
  char *p_end_cap;
  char v86;
  uint64_t v87;
  unint64_t v88;
  std::vector<std::ssub_match>::pointer v89;
  std::vector<std::ssub_match>::pointer v90;
  unint64_t v91;
  std::vector<std::ssub_match> *v92;
  std::vector<std::ssub_match> *v93;
  _QWORD *p_i;
  _BYTE *p_matched;
  std::string::value_type *k;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  char *__s;
  std::string::value_type *v104;
  blkcnt_t v105;
  size_t v106;
  char v107;
  __int16 v108;
  uint64_t v109;
  std::string v110;
  void *__p[4];
  std::string v112;
  std::locale v113[2];
  _BYTE v114[48];
  stat v115;
  std::vector<std::ssub_match> v116[2];
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v114[32] = v4;
  *(_OWORD *)v114 = v4;
  *(_OWORD *)&v114[16] = v4;
  *(_OWORD *)&v113[0].__locale_ = v4;
  MEMORY[0x23B804F50](v113);
  v113[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v113, MEMORY[0x24BEDB350]);
  *(_QWORD *)v114 = std::locale::use_facet(v113, MEMORY[0x24BEDB4B0]);
  memset(&v114[8], 0, 40);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)v113, "^([/_\\-[:alnum:]]*)(.*)", (std::basic_regex<char> *)"") != (std::basic_regex<char> *)"")std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  memset(&v112, 170, sizeof(v112));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v112 = *(std::string *)a1;
  v101 = 0;
  p_st_atimespec = &v115.st_atimespec;
  v100 = a1;
  while (1)
  {
    v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v115.st_blksize = v6;
    *(timespec *)v115.st_qspare = v6;
    v115.st_birthtimespec = v6;
    *(timespec *)&v115.st_size = v6;
    v115.st_mtimespec = v6;
    v115.st_ctimespec = v6;
    *(timespec *)&v115.st_uid = v6;
    v115.st_atimespec = v6;
    *(timespec *)&v115.st_dev = v6;
    if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v112;
    else
      v7 = (std::string *)v112.__r_.__value_.__r.__words[0];
    if (stat((const char *)v7, &v115))
    {
      *(std::string *)a2 = v112;
      goto LABEL_168;
    }
    v8 = *(unsigned __int8 *)(a1 + 23);
    if ((v8 & 0x80u) == 0)
      v9 = (std::sub_match<const char *> *)a1;
    else
      v9 = *(std::sub_match<const char *> **)a1;
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(a1 + 8);
    v10 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v9 + v8);
    *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v122 = v11;
    v119 = 0xAAAAAAAAAAAAAA00;
    v116[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
    v117 = 0;
    v118 = 0;
    v120 = 0;
    v121 = 0;
    LOBYTE(v122) = 0;
    BYTE8(v122) = 0;
    v123 = 0;
    memset(v116, 0, 41);
    *(_OWORD *)&v115.st_birthtimespec.tv_nsec = v11;
    v115.st_ctimespec.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v115.st_atimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    memset(&v115.st_mtimespec, 0, 17);
    memset(&v115.st_ctimespec.tv_nsec, 0, 17);
    LOBYTE(v115.st_size) = 0;
    v115.st_blocks = 0;
    memset(&v115, 0, 41);
    v12 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v113, v9, (std::sub_match<const char *> *)((char *)v9 + v8), (std::vector<std::csub_match> *)&v115, 4160);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v116, (uint64_t)v9, v10, (uint64_t *)&v115.st_dev, 0);
    if (*(_QWORD *)&v115.st_dev)
    {
      v115.st_ino = *(_QWORD *)&v115.st_dev;
      operator delete(*(void **)&v115.st_dev);
    }
    if ((_BYTE)v122)
      v13 = v12 ^ 1;
    else
      v13 = 1;
    if (v116[0].__begin_)
    {
      v116[0].__end_ = v116[0].__begin_;
      operator delete(v116[0].__begin_);
    }
    if ((v12 & v13) == 0)
      break;
    memset(__p, 170, 24);
    std::to_string((std::string *)v116, ++v101);
    v14 = std::string::insert((std::string *)v116, 0, "$1-");
    v15 = (std::sub_match<const char *> *)v100;
    v16 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    *(_QWORD *)&v115.st_uid = *((_QWORD *)&v14->__r_.__value_.__l + 2);
    *(_OWORD *)&v115.st_dev = v16;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append((std::string *)&v115, "$2");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    __p[2] = (void *)v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v115.st_gid) < 0)
    {
      operator delete(*(void **)&v115.st_dev);
      if (SHIBYTE(v116[0].__end_cap_.__value_) < 0)
LABEL_154:
        operator delete(v116[0].__begin_);
    }
    else if (SHIBYTE(v116[0].__end_cap_.__value_) < 0)
    {
      goto LABEL_154;
    }
    memset(&v110, 0, sizeof(v110));
    if (*(char *)(v100 + 23) >= 0)
    {
      v19 = *(unsigned __int8 *)(v100 + 23);
    }
    else
    {
      v15 = *(std::sub_match<const char *> **)v100;
      v19 = *(_QWORD *)(v100 + 8);
    }
    v20 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v20 = (void **)__p[0];
    __s = (char *)v20;
    *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v115.st_gen = v21;
    v115.st_size = 0xAAAAAAAAAAAAAAAALL;
    v115.st_ctimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v115.st_atimespec.tv_nsec = v21;
    *(_OWORD *)&v115.st_mtimespec.tv_nsec = v21;
    *(_OWORD *)&v115.st_rdev = v21;
    *(_QWORD *)&v115.st_dev = v15;
    v115.st_ino = (__darwin_ino64_t)v15 + v19;
    *(_QWORD *)&v115.st_uid = v113;
    v115.st_rdev = 0;
    memset(&v115.st_birthtimespec, 0, 17);
    memset(&v115.st_blocks, 0, 17);
    LOBYTE(v115.st_qspare[0]) = 0;
    v115.st_qspare[1] = 0;
    *p_st_atimespec = 0u;
    p_st_atimespec[1] = 0u;
    *(_OWORD *)((char *)&p_st_atimespec[1].tv_nsec + 1) = 0u;
    v122 = v21;
    v119 = 0xAAAAAAAAAAAAAA00;
    v116[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
    v117 = 0;
    v118 = 0;
    v120 = 0;
    v121 = 0;
    LOBYTE(v122) = 0;
    BYTE8(v122) = 0;
    v123 = 0;
    memset(v116, 0, 41);
    std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v113, v15, (std::sub_match<const char *> *)((char *)v15 + v19), (std::vector<std::csub_match> *)v116, 0);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)p_st_atimespec, (uint64_t)v15, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v15 + v19), (uint64_t *)v116, 0);
    if (v116[0].__begin_)
    {
      v116[0].__end_ = v116[0].__begin_;
      operator delete(v116[0].__begin_);
    }
    tv_nsec = (void *)v115.st_atimespec.tv_nsec;
    if (v115.st_atimespec.tv_nsec != v115.st_atimespec.tv_sec)
    {
      v106 = strlen(__s);
      v23 = (unsigned __int8 *)&__s[v106];
      tv_sec = (std::string::value_type *)v115.st_birthtimespec.tv_sec;
      for (i = v115.st_birthtimespec.tv_nsec; tv_sec != (std::string::value_type *)i; ++tv_sec)
LABEL_39:
        std::string::push_back(&v110, *tv_sec);
      while (1)
      {
        if (v106)
        {
          v27 = __s;
          while (1)
          {
LABEL_44:
            v28 = *v27;
            if (v28 != 36)
              goto LABEL_43;
            v29 = (unsigned __int8 *)(v27 + 1);
            if (v27 + 1 == (char *)v23)
              goto LABEL_42;
            v30 = (char)*v29;
            v28 = *v29;
            if (v30 > 38)
              break;
            if (v30 == 36)
            {
              ++v27;
              goto LABEL_43;
            }
            if (v30 != 38)
              goto LABEL_59;
            v31 = *(std::string::value_type **)v115.st_atimespec.tv_sec;
            v32 = *(std::string::value_type **)(v115.st_atimespec.tv_sec + 8);
            while (v31 != v32)
              std::string::push_back(&v110, *v31++);
LABEL_76:
            v27 = (char *)(v29 + 1);
            if (v29 + 1 == v23)
              goto LABEL_77;
          }
          if (v30 == 39)
          {
            st_blocks = (std::string::value_type *)v115.st_blocks;
            v47 = *(std::string::value_type **)&v115.st_blksize;
            while (st_blocks != v47)
              std::string::push_back(&v110, *st_blocks++);
            goto LABEL_76;
          }
          if (v30 == 96)
          {
            v33 = (std::string::value_type *)v115.st_birthtimespec.tv_sec;
            v34 = v115.st_birthtimespec.tv_nsec;
            while (v33 != (std::string::value_type *)v34)
              std::string::push_back(&v110, *v33++);
            goto LABEL_76;
          }
LABEL_59:
          if ((v28 - 48) <= 9)
          {
            v35 = *v29 - 48;
            if (v27 + 2 != (char *)v23)
            {
              v36 = v27[2];
              v37 = v36 - 48;
              v38 = v36 + 10 * (int)v35 - 48;
              if (v37 > 9)
              {
                v29 = (unsigned __int8 *)(v27 + 1);
              }
              else
              {
                v35 = v38;
                v29 = (unsigned __int8 *)(v27 + 2);
              }
            }
            v39 = 0xAAAAAAAAAAAAAAABLL * ((v115.st_atimespec.tv_nsec - v115.st_atimespec.tv_sec) >> 3);
            v40 = v115.st_atimespec.tv_sec + 24 * (int)v35;
            v41 = v39 > v35;
            if (v39 <= v35)
              p_tv_nsec = &v115.st_mtimespec.tv_nsec;
            else
              p_tv_nsec = (uint64_t *)(v115.st_atimespec.tv_sec + 24 * (int)v35);
            v43 = (std::string::value_type *)*p_tv_nsec;
            p_st_ctimespec = (timespec *)(v40 + 8);
            if (!v41)
              p_st_ctimespec = &v115.st_ctimespec;
            for (j = (std::string::value_type *)p_st_ctimespec->tv_sec; v43 != j; ++v43)
              std::string::push_back(&v110, *v43);
            goto LABEL_76;
          }
LABEL_42:
          LOBYTE(v28) = 36;
LABEL_43:
          std::string::push_back(&v110, v28);
          if (++v27 == (char *)v23)
            goto LABEL_77;
          goto LABEL_44;
        }
LABEL_77:
        v104 = *(std::string::value_type **)&v115.st_blksize;
        v105 = v115.st_blocks;
        st_rdev = v115.st_rdev;
        v49 = v115.st_rdev | 0x800;
        v115.st_rdev |= 0x800u;
        v26 = (void *)v115.st_atimespec.tv_sec;
        if (v115.st_atimespec.tv_nsec == v115.st_atimespec.tv_sec)
          v50 = &v115.st_mtimespec.tv_nsec;
        else
          v50 = (_QWORD *)v115.st_atimespec.tv_sec;
        v51 = (timespec *)(v115.st_atimespec.tv_sec + 8);
        if (v115.st_atimespec.tv_nsec == v115.st_atimespec.tv_sec)
          v51 = &v115.st_ctimespec;
        v52 = (std::sub_match<const char *> *)v51->tv_sec;
        st_ino = (std::sub_match<const char *> *)v115.st_ino;
        if (*v50 == v51->tv_sec)
        {
          if ((std::sub_match<const char *> *)v115.st_ino == v52)
            goto LABEL_148;
          v69 = (std::vector<std::ssub_match> *)p_st_atimespec;
          *(_QWORD *)&v70 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v70 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v122 = v70;
          v119 = 0xAAAAAAAAAAAAAA00;
          v116[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
          v117 = 0;
          v118 = 0;
          v120 = 0;
          v121 = 0;
          LOBYTE(v122) = 0;
          BYTE8(v122) = 0;
          v123 = 0;
          memset(v116, 0, 41);
          v71 = v115.st_ino;
          v72 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(*(uint64_t *)&v115.st_uid, v52, (std::sub_match<const char *> *)v115.st_ino, (std::vector<std::csub_match> *)v116, st_rdev | 0x860u);
          v73 = v117;
          v74 = 0xAAAAAAAAAAAAAAABLL * (((char *)v116[0].__end_ - (char *)v116[0].__begin_) >> 3);
          v75 = v115.st_atimespec.tv_sec;
          v76 = v115.st_atimespec.tv_nsec;
          v77 = 0xAAAAAAAAAAAAAAABLL * ((v115.st_atimespec.tv_nsec - v115.st_atimespec.tv_sec) >> 3);
          if (v74 <= v77)
          {
            if (v74 < v77)
            {
              v76 = v115.st_atimespec.tv_sec + 8 * (((char *)v116[0].__end_ - (char *)v116[0].__begin_) >> 3);
              v115.st_atimespec.tv_nsec = v76;
            }
          }
          else
          {
            std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(v69, v74 - v77);
            v75 = v115.st_atimespec.tv_sec;
            v76 = v115.st_atimespec.tv_nsec;
          }
          if (v76 == v75)
          {
            begin = v116[0].__begin_;
          }
          else
          {
            v79 = 0;
            v80 = 0;
            end = v116[0].__end_;
            begin = v116[0].__begin_;
            do
            {
              if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) <= v80)
                v83 = &v116[1];
              else
                v83 = (std::vector<std::ssub_match> *)&begin[v79];
              *(_QWORD *)(v75 + v79 * 24) = (char *)v52 + (unint64_t)v83->__begin_ - v73;
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v116[0].__end_ - (char *)v116[0].__begin_) >> 3) <= v80)
                p_end = &v116[1].__end_;
              else
                p_end = &v116[0].__begin_[v79].second.__i_;
              *(_QWORD *)(v115.st_atimespec.tv_sec + v79 * 24 + 8) = (char *)v52 + *p_end - v73;
              end = v116[0].__end_;
              begin = v116[0].__begin_;
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v116[0].__end_ - (char *)v116[0].__begin_) >> 3) <= v80)
                p_end_cap = (char *)&v116[1].__end_cap_;
              else
                p_end_cap = (char *)&v116[0].__begin_[v79].matched;
              v86 = *p_end_cap;
              v75 = v115.st_atimespec.tv_sec;
              *(_BYTE *)(v115.st_atimespec.tv_sec + v79 * 24 + 16) = v86;
              ++v80;
              ++v79;
            }
            while (v80 < 0xAAAAAAAAAAAAAAABLL * ((v115.st_atimespec.tv_nsec - v75) >> 3));
          }
          v115.st_mtimespec.tv_nsec = v71;
          v115.st_ctimespec.tv_sec = v71;
          v115.st_birthtimespec.tv_sec = (__darwin_time_t)v52 + v117 - v73;
          v115.st_birthtimespec.tv_nsec = (uint64_t)v52 + v118 - v73;
          LOBYTE(v115.st_size) = v119;
          LOBYTE(v115.st_ctimespec.tv_nsec) = 0;
          v115.st_blocks = (blkcnt_t)v52 + v120 - v73;
          *(_QWORD *)&v115.st_blksize = (char *)v52 + v121 - v73;
          LOBYTE(v115.st_gen) = v122;
          LOBYTE(v115.st_qspare[0]) = BYTE8(v122);
          if (begin)
          {
            v116[0].__end_ = begin;
            operator delete(begin);
          }
          if (v72)
          {
            p_st_atimespec = (timespec *)v69;
            v26 = (void *)v115.st_atimespec.tv_sec;
            goto LABEL_37;
          }
          v52 = (std::sub_match<const char *> *)((char *)v52 + 1);
          v49 = v115.st_rdev;
          st_ino = (std::sub_match<const char *> *)v115.st_ino;
        }
        v108 = v49;
        v115.st_rdev = v49 | 0x80;
        *(_QWORD *)&v54 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v54 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v122 = v54;
        v119 = 0xAAAAAAAAAAAAAA00;
        v116[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
        v117 = 0;
        v118 = 0;
        v120 = 0;
        v121 = 0;
        LOBYTE(v122) = 0;
        BYTE8(v122) = 0;
        v123 = 0;
        memset(v116, 0, 41);
        v109 = (uint64_t)st_ino;
        v107 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(*(uint64_t *)&v115.st_uid, v52, st_ino, (std::vector<std::csub_match> *)v116, v49 | 0x80u);
        v55 = v117;
        v56 = 0xAAAAAAAAAAAAAAABLL * (((char *)v116[0].__end_ - (char *)v116[0].__begin_) >> 3);
        v58 = v115.st_atimespec.tv_sec;
        v57 = (_QWORD *)v115.st_atimespec.tv_nsec;
        v59 = 0xAAAAAAAAAAAAAAABLL * ((v115.st_atimespec.tv_nsec - v115.st_atimespec.tv_sec) >> 3);
        v60 = v56 - v59;
        if (v56 > v59)
          break;
        if (v56 < v59)
        {
          v57 = (_QWORD *)(v115.st_atimespec.tv_sec + 8 * (((char *)v116[0].__end_ - (char *)v116[0].__begin_) >> 3));
          v115.st_atimespec.tv_nsec = (uint64_t)v57;
        }
        p_st_atimespec = &v115.st_atimespec;
        if (v57 != (_QWORD *)v115.st_atimespec.tv_sec)
          goto LABEL_132;
LABEL_143:
        v115.st_mtimespec.tv_nsec = v109;
        v115.st_ctimespec.tv_sec = v109;
        v115.st_birthtimespec.tv_sec = (__darwin_time_t)v52 + v117 - v55;
        v115.st_birthtimespec.tv_nsec = (uint64_t)v52 + v118 - v55;
        LOBYTE(v115.st_size) = v119;
        LOBYTE(v115.st_ctimespec.tv_nsec) = 0;
        v115.st_blocks = (blkcnt_t)v52 + v120 - v55;
        *(_QWORD *)&v115.st_blksize = (char *)v52 + v121 - v55;
        LOBYTE(v115.st_gen) = v122;
        if ((v108 & 0x800) == 0)
          v115.st_qspare[1] = (uint64_t_t)v52 + v117 - v55;
        LOBYTE(v115.st_qspare[0]) = BYTE8(v122);
        if (v116[0].__begin_)
        {
          v116[0].__end_ = v116[0].__begin_;
          operator delete(v116[0].__begin_);
        }
        v26 = (void *)v115.st_atimespec.tv_sec;
        if ((v107 & 1) == 0)
        {
LABEL_148:
          if (v26)
          {
            v115.st_atimespec.tv_nsec = (uint64_t)v26;
            operator delete(v26);
          }
          v26 = 0;
          LOBYTE(v115.st_qspare[0]) = 0;
          *p_st_atimespec = 0u;
          p_st_atimespec[1] = 0u;
          *(_OWORD *)((char *)&p_st_atimespec[1].tv_nsec + 1) = 0u;
          memset(&v115.st_birthtimespec, 0, 17);
          memset(&v115.st_blocks, 0, 17);
          v115.st_qspare[1] = 0;
        }
LABEL_37:
        if ((void *)v115.st_atimespec.tv_nsec == v26)
        {
          for (k = (std::string::value_type *)v105; k != v104; ++k)
            std::string::push_back(&v110, *k);
LABEL_157:
          tv_nsec = (void *)v115.st_atimespec.tv_sec;
          goto LABEL_158;
        }
        tv_sec = (std::string::value_type *)v115.st_birthtimespec.tv_sec;
        i = v115.st_birthtimespec.tv_nsec;
        if (v115.st_birthtimespec.tv_sec != v115.st_birthtimespec.tv_nsec)
          goto LABEL_39;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v115.st_mtimespec.tv_sec - v115.st_atimespec.tv_nsec) >> 3) < v60)
      {
        if (v56 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v61 = 0x5555555555555556 * ((v115.st_mtimespec.tv_sec - v115.st_atimespec.tv_sec) >> 3);
        if (v61 <= v56)
          v61 = 0xAAAAAAAAAAAAAAABLL * (((char *)v116[0].__end_ - (char *)v116[0].__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v115.st_mtimespec.tv_sec - v115.st_atimespec.tv_sec) >> 3) >= 0x555555555555555)
          v62 = 0xAAAAAAAAAAAAAAALL;
        else
          v62 = v61;
        if (v62 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v102 = v62;
        v63 = operator new(24 * v62);
        v64 = (__darwin_time_t)v63 + 24 * v59;
        v65 = (uint64_t)v63 + 24 * v56;
        v66 = 24 * v56 - 24 * v59;
        v67 = v64;
        do
        {
          *(_QWORD *)v67 = 0;
          *(_QWORD *)(v67 + 8) = 0;
          *(_BYTE *)(v67 + 16) = 0;
          v67 += 24;
          v66 -= 24;
        }
        while (v66);
        p_st_atimespec = &v115.st_atimespec;
        if (v57 == (_QWORD *)v58)
        {
          v115.st_atimespec.tv_sec = (__darwin_time_t)v63 + 24 * v59;
          v115.st_atimespec.tv_nsec = v65;
          v115.st_mtimespec.tv_sec = (__darwin_time_t)v63 + 24 * v102;
          if (!v57)
            goto LABEL_131;
        }
        else
        {
          do
          {
            v68 = *(_OWORD *)(v57 - 3);
            *(_QWORD *)(v64 - 8) = *(v57 - 1);
            *(_OWORD *)(v64 - 24) = v68;
            v64 -= 24;
            v57 -= 3;
          }
          while (v57 != (_QWORD *)v58);
          v57 = (_QWORD *)v58;
          v115.st_atimespec.tv_sec = v64;
          v115.st_atimespec.tv_nsec = v65;
          v115.st_mtimespec.tv_sec = (__darwin_time_t)v63 + 24 * v102;
          if (!v58)
          {
LABEL_131:
            v58 = v115.st_atimespec.tv_sec;
            if (v65 == v115.st_atimespec.tv_sec)
              goto LABEL_143;
LABEL_132:
            v87 = 0;
            v88 = 0;
            v89 = v116[0].__end_;
            v90 = v116[0].__begin_;
            do
            {
              v91 = 0xAAAAAAAAAAAAAAABLL * (((char *)v89 - (char *)v90) >> 3);
              v92 = (std::vector<std::ssub_match> *)&v90[v87];
              if (v91 <= v88)
                v93 = &v116[1];
              else
                v93 = v92;
              *(_QWORD *)(v58 + v87 * 24) = (char *)v52 + (unint64_t)v93->__begin_ - v55;
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v116[0].__end_ - (char *)v116[0].__begin_) >> 3) <= v88)
                p_i = &v116[1].__end_;
              else
                p_i = &v116[0].__begin_[v87].second.__i_;
              *(_QWORD *)(v115.st_atimespec.tv_sec + v87 * 24 + 8) = (char *)v52 + *p_i - v55;
              v89 = v116[0].__end_;
              v90 = v116[0].__begin_;
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v116[0].__end_ - (char *)v116[0].__begin_) >> 3) <= v88)
                p_matched = &v116[1].__end_cap_;
              else
                p_matched = &v116[0].__begin_[v87].matched;
              v58 = v115.st_atimespec.tv_sec;
              *(_BYTE *)(v115.st_atimespec.tv_sec + v87 * 24 + 16) = *p_matched;
              ++v88;
              ++v87;
            }
            while (v88 < 0xAAAAAAAAAAAAAAABLL * ((v115.st_atimespec.tv_nsec - v58) >> 3));
            goto LABEL_143;
          }
        }
        operator delete(v57);
        v65 = v115.st_atimespec.tv_nsec;
        goto LABEL_131;
      }
      v65 = v115.st_atimespec.tv_nsec + 24 * v60;
      v78 = 8 * (((char *)v116[0].__end_ - (char *)v116[0].__begin_) >> 3)
          - 8 * ((v115.st_atimespec.tv_nsec - v115.st_atimespec.tv_sec) >> 3);
      do
      {
        *v57 = 0;
        v57[1] = 0;
        *((_BYTE *)v57 + 16) = 0;
        v57 += 3;
        v78 -= 24;
      }
      while (v78);
      v115.st_atimespec.tv_nsec = v65;
      p_st_atimespec = &v115.st_atimespec;
      goto LABEL_131;
    }
    if (v19)
    {
      do
      {
        std::string::push_back(&v110, (std::string::value_type)v15->first);
        v15 = (std::sub_match<const char *> *)((char *)v15 + 1);
        --v19;
      }
      while (v19);
      goto LABEL_157;
    }
LABEL_158:
    a1 = v100;
    if (tv_nsec)
    {
      v115.st_atimespec.tv_nsec = (uint64_t)tv_nsec;
      operator delete(tv_nsec);
    }
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v112.__r_.__value_.__l.__data_);
      v112 = v110;
      if (SHIBYTE(__p[2]) < 0)
LABEL_6:
        operator delete(__p[0]);
    }
    else
    {
      v112 = v110;
      if (SHIBYTE(__p[2]) < 0)
        goto LABEL_6;
    }
  }
  *(_BYTE *)(a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
LABEL_168:
  v97 = *(std::__shared_weak_count **)&v114[32];
  if (*(_QWORD *)&v114[32])
  {
    v98 = (unint64_t *)(*(_QWORD *)&v114[32] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  std::locale::~locale(v113);
}

void sub_236E1D33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::locale a43)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a43);
  _Unwind_Resume(a1);
}

void sub_236E1D350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::locale a43)
{
  uint64_t v43;

  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v43);
  std::locale::~locale(&a43);
  _Unwind_Resume(a1);
}

void sub_236E1D36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::locale a43)
{
  std::locale::~locale(&a43);
  _Unwind_Resume(a1);
}

void sub_236E1D380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,std::locale a46)
{
  if (a44 < 0)
    operator delete(__p);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a46);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v4;

  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (!locale)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&locale->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(this);
  }
  else
  {
LABEL_5:
    std::locale::~locale(this);
  }
}

void support::fs::createUniquePath(const char *a1@<X0>, std::string *a2@<X8>)
{
  const char *v2;
  timespec v4;
  timespec v5;
  size_t v6;
  __darwin_ino64_t v7;
  int v8;
  timespec v9;
  stat *p_dst;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  timespec v18;
  const char *v19;
  stat __dst;
  stat __src;
  timespec v22;
  timespec v23;
  timespec v24;
  timespec v25;
  timespec v26;
  timespec v27;
  timespec v28;
  uint64_t v29;

  v2 = a1;
  v29 = *MEMORY[0x24BDAC8D0];
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__src.st_blksize = v4;
  *(timespec *)__src.st_qspare = v4;
  __src.st_birthtimespec = v4;
  *(timespec *)&__src.st_size = v4;
  __src.st_mtimespec = v4;
  __src.st_ctimespec = v4;
  *(timespec *)&__src.st_uid = v4;
  __src.st_atimespec = v4;
  *(timespec *)&__src.st_dev = v4;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (!stat(a1, &__src))
  {
    v5.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v5.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    v27 = v5;
    v28 = v5;
    v25 = v5;
    v26 = v5;
    v23 = v5;
    v24 = v5;
    *(timespec *)__src.st_qspare = v5;
    v22 = v5;
    *(timespec *)&__src.st_size = v5;
    *(timespec *)&__src.st_blksize = v5;
    __src.st_ctimespec = v5;
    __src.st_birthtimespec = v5;
    __src.st_atimespec = v5;
    __src.st_mtimespec = v5;
    *(timespec *)&__src.st_dev = v5;
    *(timespec *)&__src.st_uid = v5;
    snprintf((char *)&__src, 0x100uLL, "-%u", 1);
    memset(a2, 170, sizeof(std::string));
    v6 = strlen((const char *)&__src);
    if (v6 > 0x7FFFFFFFFFFFFFF7)
LABEL_32:
      std::string::__throw_length_error[abi:ne180100]();
    v7 = v6;
    v8 = 2;
    while (v7 < 0x17)
    {
      HIBYTE(__dst.st_gid) = v7;
      p_dst = &__dst;
      if (v7)
        goto LABEL_15;
LABEL_16:
      *((_BYTE *)&p_dst->st_dev + v7) = 0;
      v13 = v2[23];
      if (v13 >= 0)
        v14 = v2;
      else
        v14 = *(const std::string::value_type **)v2;
      if (v13 >= 0)
        v15 = *((unsigned __int8 *)v2 + 23);
      else
        v15 = *((_QWORD *)v2 + 1);
      v16 = std::string::insert((std::string *)&__dst, 0, v14, v15);
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      a2->__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.st_gid) < 0)
        operator delete(*(void **)&__dst.st_dev);
      v18.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v18.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blksize = v18;
      *(timespec *)__dst.st_qspare = v18;
      __dst.st_birthtimespec = v18;
      *(timespec *)&__dst.st_size = v18;
      __dst.st_mtimespec = v18;
      __dst.st_ctimespec = v18;
      *(timespec *)&__dst.st_uid = v18;
      __dst.st_atimespec = v18;
      *(timespec *)&__dst.st_dev = v18;
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = (const char *)a2;
      else
        v19 = (const char *)a2->__r_.__value_.__r.__words[0];
      if (stat(v19, &__dst))
        return;
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
        operator delete(a2->__r_.__value_.__l.__data_);
      v9.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v9.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      v27 = v9;
      v28 = v9;
      v25 = v9;
      v26 = v9;
      v23 = v9;
      v24 = v9;
      *(timespec *)__src.st_qspare = v9;
      v22 = v9;
      *(timespec *)&__src.st_size = v9;
      *(timespec *)&__src.st_blksize = v9;
      __src.st_ctimespec = v9;
      __src.st_birthtimespec = v9;
      __src.st_atimespec = v9;
      __src.st_mtimespec = v9;
      *(timespec *)&__src.st_dev = v9;
      *(timespec *)&__src.st_uid = v9;
      snprintf((char *)&__src, 0x100uLL, "-%u", v8);
      memset(a2, 170, sizeof(std::string));
      v7 = strlen((const char *)&__src);
      ++v8;
      if (v7 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_32;
    }
    v11 = (v7 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    p_dst = (stat *)operator new(v11 + 1);
    __dst.st_ino = v7;
    *(_QWORD *)&__dst.st_uid = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst.st_dev = p_dst;
LABEL_15:
    memcpy(p_dst, &__src, v7);
    goto LABEL_16;
  }
  if (v2[23] < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
  }
}

void sub_236E1D798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL support::fs::createDir(const char *a1, mode_t a2, int a3)
{
  const char *v5;
  timespec v6;
  const char *v7;
  char *v8;
  unint64_t v9;
  unsigned int v10;
  std::string *p_str;
  std::string::size_type size;
  char *v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  timespec v17;
  std::string *v18;
  std::string *v19;
  uint64_t v20;
  const char *v21;
  void **v22;
  void **v23;
  void *v24;
  std::string v26;
  void *__p[3];
  std::string __str;
  stat v29;

  v5 = a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v29.st_blksize = v6;
  *(timespec *)v29.st_qspare = v6;
  v29.st_birthtimespec = v6;
  *(timespec *)&v29.st_size = v6;
  v29.st_ctimespec = v6;
  v29.st_atimespec = v6;
  v29.st_mtimespec = v6;
  *(timespec *)&v29.st_dev = v6;
  *(timespec *)&v29.st_uid = v6;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (!stat(a1, &v29))
    return 1;
  if (!a3)
  {
    if (v5[23] >= 0)
      v21 = v5;
    else
      v21 = *(const char **)v5;
    return mkdir(v21, a2) == 0;
  }
  __str.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  __str.__r_.__value_.__r.__words[2] = 0x1AAAAAAAAAAAAAALL;
  __str.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAA002FLL;
  memset(__p, 170, sizeof(__p));
  ctu::tokenize();
  memset(&v26, 0, sizeof(v26));
  if (v5[23] >= 0)
    v7 = v5;
  else
    v7 = *(const char **)v5;
  if (*v7 == 47)
    std::string::operator=(&v26, &__str);
  v8 = (char *)__p[0];
  if (__p[1] != __p[0])
  {
    v9 = 0;
    v10 = 1;
    while (1)
    {
      if (v10 != 1)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          size = __str.__r_.__value_.__l.__size_;
        std::string::append(&v26, (const std::string::value_type *)p_str, size);
        v8 = (char *)__p[0];
      }
      v13 = &v8[24 * v9];
      v14 = v13[23];
      v15 = v14 >= 0 ? v13 : *(const std::string::value_type **)v13;
      v16 = v14 >= 0 ? v13[23] : *((_QWORD *)v13 + 1);
      std::string::append(&v26, v15, v16);
      v17.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v17.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&v29.st_blksize = v17;
      *(timespec *)v29.st_qspare = v17;
      v29.st_birthtimespec = v17;
      *(timespec *)&v29.st_size = v17;
      v29.st_ctimespec = v17;
      v29.st_atimespec = v17;
      v29.st_mtimespec = v17;
      *(timespec *)&v29.st_dev = v17;
      *(timespec *)&v29.st_uid = v17;
      v18 = (v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v26
          : (std::string *)v26.__r_.__value_.__r.__words[0];
      if (stat((const char *)v18, &v29))
      {
        v19 = (v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v26
            : (std::string *)v26.__r_.__value_.__r.__words[0];
        if (mkdir((const char *)v19, a2))
          break;
      }
      v9 = v10;
      v8 = (char *)__p[0];
      ++v10;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3) <= v9)
        goto LABEL_42;
    }
    v20 = 0;
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_42:
  v20 = 1;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
LABEL_43:
    operator delete(v26.__r_.__value_.__l.__data_);
LABEL_44:
  v22 = (void **)__p[0];
  if (__p[0])
  {
    v23 = (void **)__p[1];
    v24 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v23 - 1) < 0)
          operator delete(*(v23 - 3));
        v23 -= 3;
      }
      while (v23 != v22);
      v24 = __p[0];
    }
    __p[1] = v22;
    operator delete(v24);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v20;
}

void sub_236E1DA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0)
    operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a16);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

BOOL support::fs::rename(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *a2, std::error_code *a3)
{
  int v3;

  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    a1 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    a2 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
  rename(a1, a2, a3);
  return v3 == 0;
}

BOOL support::fs::chmod(const char *a1, mode_t a2)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return chmod(a1, a2) == 0;
}

uint64_t support::fs::removeDir(const char *a1)
{
  const std::__fs::filesystem::path *v1;
  timespec v2;
  _BOOL8 v3;
  std::error_code *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  char *v8;
  __int128 v9;
  std::string::size_type v10;
  int v11;
  size_t size;
  unint64_t v13;
  char *p_dst;
  uint64_t v15;
  uint64_t v16;
  const std::__fs::filesystem::path *v17;
  std::string *p_p;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  char v22;
  timespec v23;
  std::string *v24;
  std::error_code *v25;
  const std::__fs::filesystem::path *v26;
  std::string *v27;
  char v28;
  std::string *v29;
  DIR *v30;
  DIR *v31;
  dirent *v32;
  const std::__fs::filesystem::path *v33;
  const char *v34;
  void **v35;
  void **v36;
  void *v37;
  std::string __p;
  void *v40;
  void **v41;
  uint64_t v42;
  stat __dst;
  _QWORD v44[5];

  v1 = (const std::__fs::filesystem::path *)a1;
  v44[2] = *MEMORY[0x24BDAC8D0];
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blksize = v2;
  *(timespec *)__dst.st_qspare = v2;
  __dst.st_birthtimespec = v2;
  *(timespec *)&__dst.st_size = v2;
  __dst.st_mtimespec = v2;
  __dst.st_ctimespec = v2;
  *(timespec *)&__dst.st_uid = v2;
  __dst.st_atimespec = v2;
  *(timespec *)&__dst.st_dev = v2;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (stat(a1, &__dst))
    return 1;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  support::fs::readDir((const char *)v1, (uint64_t)&v40);
  v5 = 0;
  while (1)
  {
    v6 = v5;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v41 - (_BYTE *)v40) >> 3);
    v3 = v7 <= v5;
    if (v7 <= v5)
      break;
    v8 = (char *)v40 + 24 * v5;
    memset(&__p, 170, sizeof(__p));
    if (v8[23] < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *(_OWORD *)v8;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
    }
    v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ == 1)
      {
        if (*__p.__r_.__value_.__l.__data_ == 46)
          goto LABEL_61;
      }
      else if (__p.__r_.__value_.__l.__size_ == 2 && *(_WORD *)__p.__r_.__value_.__l.__data_ == 11822)
      {
        goto LABEL_61;
      }
    }
    else if (HIBYTE(__p.__r_.__value_.__r.__words[2]) == 1)
    {
      if (__p.__r_.__value_.__s.__data_[0] == 46)
        goto LABEL_61;
    }
    else if (HIBYTE(__p.__r_.__value_.__r.__words[2]) == 2 && LOWORD(__p.__r_.__value_.__l.__data_) == 11822)
    {
      goto LABEL_61;
    }
    v11 = SHIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    if (v11 >= 0)
      size = HIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    else
      size = v1->__pn_.__r_.__value_.__l.__size_;
    v13 = size + 1;
    memset(&__dst, 170, 24);
    if (size + 1 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v13 >= 0x17)
    {
      v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v15 = v13 | 7;
      v16 = v15 + 1;
      p_dst = (char *)operator new(v15 + 1);
      __dst.st_ino = size + 1;
      *(_QWORD *)&__dst.st_uid = v16 | 0x8000000000000000;
      *(_QWORD *)&__dst.st_dev = p_dst;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = (char *)&__dst;
      HIBYTE(__dst.st_gid) = size + 1;
      if (!size)
        goto LABEL_38;
    }
    if (v11 >= 0)
      v17 = v1;
    else
      v17 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
    memmove(p_dst, v17, size);
LABEL_38:
    *(_WORD *)&p_dst[size] = 47;
    if ((v10 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v10 & 0x80u) == 0)
      v19 = v10;
    else
      v19 = __p.__r_.__value_.__l.__size_;
    v20 = std::string::append((std::string *)&__dst, (const std::string::value_type *)p_p, v19);
    v21 = v20->__r_.__value_.__r.__words[0];
    v44[0] = v20->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v44 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
    v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v21;
    __p.__r_.__value_.__l.__size_ = v44[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v44 + 7);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v22;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v21 = __p.__r_.__value_.__r.__words[0];
    }
    v23.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v23.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blksize = v23;
    *(timespec *)__dst.st_qspare = v23;
    __dst.st_birthtimespec = v23;
    *(timespec *)&__dst.st_size = v23;
    __dst.st_mtimespec = v23;
    __dst.st_ctimespec = v23;
    *(timespec *)&__dst.st_uid = v23;
    __dst.st_atimespec = v23;
    if (v22 >= 0)
      v24 = &__p;
    else
      v24 = (std::string *)v21;
    *(timespec *)&__dst.st_dev = v23;
    if (!stat((const char *)v24, &__dst)
      && ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (v29 = &__p)
        : (v29 = (std::string *)__p.__r_.__value_.__r.__words[0]),
          (v30 = opendir((const char *)v29), (v31 = v30) != 0) && (v32 = readdir(v30), closedir(v31), v32)))
    {
      std::string::append(&__p, "/");
      v28 = support::fs::removeDir(&__p);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_7;
    }
    else
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = (const std::__fs::filesystem::path *)&__p;
      else
        v26 = (const std::__fs::filesystem::path *)__p.__r_.__value_.__r.__words[0];
      if (!remove(v26, v25))
      {
LABEL_61:
        v28 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_7;
        goto LABEL_6;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v28 = unlink((const char *)v27) == 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_7;
    }
LABEL_6:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
    v5 = v6 + 1;
    if ((v28 & 1) == 0)
      goto LABEL_78;
  }
  if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = v1;
  else
    v33 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
  if (remove(v33, v4))
  {
    if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = (const char *)v1;
    else
      v34 = (const char *)v1->__pn_.__r_.__value_.__r.__words[0];
    unlink(v34);
  }
LABEL_78:
  v35 = (void **)v40;
  if (v40)
  {
    v36 = v41;
    v37 = v40;
    if (v41 != v40)
    {
      do
      {
        if (*((char *)v36 - 1) < 0)
          operator delete(*(v36 - 3));
        v36 -= 3;
      }
      while (v36 != v35);
      v37 = v40;
    }
    v41 = v35;
    operator delete(v37);
  }
  return v3;
}

void sub_236E1DF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_236E1DF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if ((a16 & 0x80000000) == 0)
  {
    std::vector<std::string>::~vector[abi:ne180100](&a17);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

BOOL support::fs::removeFile(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  const std::__fs::filesystem::path *v2;
  const char *v3;

  v2 = a1;
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    a1 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  if (!remove(a1, a2))
    return 1;
  if ((v2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = (const char *)v2;
  else
    v3 = (const char *)v2->__pn_.__r_.__value_.__r.__words[0];
  return unlink(v3) == 0;
}

uint64_t support::fs::removeDirContents(const char *a1, unint64_t a2)
{
  const char *v3;
  void **v4;
  double v5;
  __int128 v6;
  std::string::size_type v7;
  int v8;
  size_t v9;
  unint64_t v10;
  stat *p_dst;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  timespec v20;
  void **v21;
  char v22;
  int v23;
  timespec v24;
  void **v25;
  std::error_code *v26;
  const std::__fs::filesystem::path *v27;
  void **v28;
  void **v29;
  DIR *v30;
  DIR *v31;
  dirent *v32;
  int v33;
  size_t v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  char v45;
  char v46;
  void **v47;
  void *v48;
  time_t v50;
  const char *v51;
  char v52;
  void **v53;
  std::string v54;
  void *__p[4];
  std::string v56;
  void *v57;
  void **v58;
  uint64_t v59;
  stat __dst;

  v3 = a1;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  support::fs::readDir(a1, (uint64_t)&v57);
  v50 = time(0);
  v4 = (void **)v57;
  v53 = v58;
  if (v57 == v58)
  {
    v46 = 1;
    if (v57)
      goto LABEL_108;
    return v46 & 1;
  }
  v5 = (double)a2;
  v52 = 1;
  v51 = v3;
  while (1)
  {
    memset(&v56, 170, sizeof(v56));
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v56, (const std::string::value_type *)*v4, (std::string::size_type)v4[1]);
    }
    else
    {
      v6 = *(_OWORD *)v4;
      v56.__r_.__value_.__r.__words[2] = (std::string::size_type)v4[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v6;
    }
    v7 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      break;
    if (HIBYTE(v56.__r_.__value_.__r.__words[2]) == 1)
    {
      if (v56.__r_.__value_.__s.__data_[0] == 46)
        goto LABEL_98;
    }
    else if (HIBYTE(v56.__r_.__value_.__r.__words[2]) == 2 && LOWORD(v56.__r_.__value_.__l.__data_) == 11822)
    {
      goto LABEL_98;
    }
LABEL_19:
    memset(__p, 170, 24);
    v8 = v3[23];
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)v3 + 23);
    else
      v9 = *((_QWORD *)v3 + 1);
    v10 = v9 + 1;
    memset(&__dst, 170, 24);
    if (v9 + 1 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v10 >= 0x17)
    {
      v12 = a2;
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      p_dst = (stat *)operator new(v13 + 1);
      __dst.st_ino = v9 + 1;
      *(_QWORD *)&__dst.st_uid = v14 | 0x8000000000000000;
      *(_QWORD *)&__dst.st_dev = p_dst;
      a2 = v12;
      v3 = v51;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = &__dst;
      HIBYTE(__dst.st_gid) = v9 + 1;
      if (!v9)
        goto LABEL_33;
    }
    if (v8 >= 0)
      v15 = v3;
    else
      v15 = *(const char **)v3;
    memmove(p_dst, v15, v9);
LABEL_33:
    *(_WORD *)((char *)&p_dst->st_dev + v9) = 47;
    if ((v7 & 0x80u) == 0)
      v16 = &v56;
    else
      v16 = (std::string *)v56.__r_.__value_.__r.__words[0];
    if ((v7 & 0x80u) == 0)
      size = v7;
    else
      size = v56.__r_.__value_.__l.__size_;
    v18 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v16, size);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __p[2] = (void *)v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      if (!a2)
        goto LABEL_50;
    }
    else if (!a2)
    {
      goto LABEL_50;
    }
    v20.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v20.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blksize = v20;
    *(timespec *)__dst.st_qspare = v20;
    __dst.st_birthtimespec = v20;
    *(timespec *)&__dst.st_size = v20;
    __dst.st_mtimespec = v20;
    __dst.st_ctimespec = v20;
    __dst.st_atimespec = v20;
    *(timespec *)&__dst.st_dev = v20;
    *(timespec *)&__dst.st_uid = v20;
    if (SHIBYTE(__p[2]) >= 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    if (!stat((const char *)v21, &__dst) && difftime(v50, __dst.st_ctimespec.tv_sec) >= v5)
    {
LABEL_50:
      v24.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v24.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blksize = v24;
      *(timespec *)__dst.st_qspare = v24;
      __dst.st_birthtimespec = v24;
      *(timespec *)&__dst.st_size = v24;
      __dst.st_mtimespec = v24;
      __dst.st_ctimespec = v24;
      __dst.st_atimespec = v24;
      *(timespec *)&__dst.st_dev = v24;
      *(timespec *)&__dst.st_uid = v24;
      if (SHIBYTE(__p[2]) >= 0)
        v25 = __p;
      else
        v25 = (void **)__p[0];
      if (stat((const char *)v25, &__dst)
        || (SHIBYTE(__p[2]) >= 0 ? (v29 = __p) : (v29 = (void **)__p[0]),
            (v30 = opendir((const char *)v29), (v31 = v30) == 0) || (v32 = readdir(v30), closedir(v31), !v32)))
      {
        if (SHIBYTE(__p[2]) >= 0)
          v27 = (const std::__fs::filesystem::path *)__p;
        else
          v27 = (const std::__fs::filesystem::path *)__p[0];
        if (!remove(v27, v26)
          || (SHIBYTE(__p[2]) >= 0 ? (v28 = __p) : (v28 = (void **)__p[0]), !unlink((const char *)v28)))
        {
LABEL_92:
          v23 = 0;
          v52 = 1;
          v22 = 1;
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
            goto LABEL_94;
          goto LABEL_93;
        }
        goto LABEL_62;
      }
      v33 = v3[23];
      if (v33 >= 0)
        v34 = *((unsigned __int8 *)v3 + 23);
      else
        v34 = *((_QWORD *)v3 + 1);
      v35 = v34 + 1;
      memset(&v54, 170, sizeof(v54));
      if (v34 + 1 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v35 >= 0x17)
      {
        v37 = a2;
        v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v35 | 7) != 0x17)
          v38 = v35 | 7;
        v39 = v38 + 1;
        v36 = (char *)operator new(v38 + 1);
        v54.__r_.__value_.__l.__size_ = v34 + 1;
        v54.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
        a2 = v37;
        v3 = v51;
      }
      else
      {
        memset(&v54, 0, sizeof(v54));
        v36 = (char *)&v54;
        *((_BYTE *)&v54.__r_.__value_.__s + 23) = v34 + 1;
        if (!v34)
          goto LABEL_83;
      }
      if (v33 >= 0)
        v40 = v3;
      else
        v40 = *(const char **)v3;
      memmove(v36, v40, v34);
LABEL_83:
      *(_WORD *)&v36[v34] = 47;
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v56;
      else
        v41 = (std::string *)v56.__r_.__value_.__r.__words[0];
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
      else
        v42 = v56.__r_.__value_.__l.__size_;
      v43 = std::string::append(&v54, (const std::string::value_type *)v41, v42);
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      *(_QWORD *)&__dst.st_uid = *((_QWORD *)&v43->__r_.__value_.__l + 2);
      *(_OWORD *)&__dst.st_dev = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      v45 = support::fs::removeDir((const char *)&__dst);
      if (SHIBYTE(__dst.st_gid) < 0)
      {
        operator delete(*(void **)&__dst.st_dev);
        if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_91;
      }
      else if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_91:
        if ((v45 & 1) != 0)
          goto LABEL_92;
LABEL_62:
        v52 = 0;
        v22 = 0;
        v23 = 2;
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
          goto LABEL_94;
        goto LABEL_93;
      }
      operator delete(v54.__r_.__value_.__l.__data_);
      if ((v45 & 1) != 0)
        goto LABEL_92;
      goto LABEL_62;
    }
    v22 = 0;
    v23 = 3;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_94;
LABEL_93:
    operator delete(__p[0]);
LABEL_94:
    if ((v22 & 1) != 0)
      goto LABEL_98;
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_96;
LABEL_99:
    operator delete(v56.__r_.__value_.__l.__data_);
    if (v23 != 3)
      goto LABEL_100;
LABEL_3:
    v4 += 3;
    if (v4 == v53)
      goto LABEL_105;
  }
  if (v56.__r_.__value_.__l.__size_ == 1)
  {
    if (*v56.__r_.__value_.__l.__data_ == 46)
      goto LABEL_98;
    goto LABEL_19;
  }
  if (v56.__r_.__value_.__l.__size_ != 2 || *(_WORD *)v56.__r_.__value_.__l.__data_ != 11822)
    goto LABEL_19;
LABEL_98:
  v23 = 0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
LABEL_96:
  if (v23 == 3)
    goto LABEL_3;
LABEL_100:
  if (!v23)
    goto LABEL_3;
LABEL_105:
  v4 = (void **)v57;
  v46 = v52;
  if (!v57)
    return v46 & 1;
LABEL_108:
  v47 = v58;
  v48 = v4;
  if (v58 != v4)
  {
    do
    {
      if (*((char *)v47 - 1) < 0)
        operator delete(*(v47 - 3));
      v47 -= 3;
    }
    while (v47 != v4);
    v48 = v57;
  }
  v58 = v4;
  operator delete(v48);
  return v46 & 1;
}

void sub_236E1E5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a25 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  std::vector<std::string>::~vector[abi:ne180100](&a33);
  _Unwind_Resume(a1);
}

void support::fs::moveDirUnique(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const std::__fs::filesystem::path *v4;
  timespec v6;
  const char *v7;
  DIR *v8;
  DIR *v9;
  dirent *v10;
  std::error_code *v11;
  const std::__fs::filesystem::path *v12;
  const std::__fs::filesystem::path *v13;
  int v14;
  std::string __p;
  stat v16;

  v4 = (const std::__fs::filesystem::path *)a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v16.st_blksize = v6;
  *(timespec *)v16.st_qspare = v6;
  v16.st_birthtimespec = v6;
  *(timespec *)&v16.st_size = v6;
  v16.st_mtimespec = v6;
  v16.st_ctimespec = v6;
  *(timespec *)&v16.st_uid = v6;
  v16.st_atimespec = v6;
  *(timespec *)&v16.st_dev = v6;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (stat(a1, &v16))
    goto LABEL_4;
  v7 = (v4->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
     ? (const char *)v4
     : (const char *)v4->__pn_.__r_.__value_.__r.__words[0];
  v8 = opendir(v7);
  if (!v8)
    goto LABEL_4;
  v9 = v8;
  v10 = readdir(v8);
  closedir(v9);
  if (!v10)
    goto LABEL_4;
  memset((void *)a3, 170, 24);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  support::fs::createUniquePath((const char *)&__p, (std::string *)a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v4->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = v4;
  else
    v12 = (const std::__fs::filesystem::path *)v4->__pn_.__r_.__value_.__r.__words[0];
  if (*(char *)(a3 + 23) >= 0)
    v13 = (const std::__fs::filesystem::path *)a3;
  else
    v13 = *(const std::__fs::filesystem::path **)a3;
  rename(v12, v13, v11);
  if (v14)
  {
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
LABEL_4:
    *(_BYTE *)(a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
  }
}

void sub_236E1E7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void support::fs::getFileName(std::string *a1@<X8>)
{
  __int128 v2;
  void **v3;
  void *v4;
  void *__p[3];

  memset(__p, 170, sizeof(__p));
  ctu::tokenize();
  if (*((char *)__p[1] - 1) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *((const std::string::value_type **)__p[1] - 3), *((_QWORD *)__p[1] - 2));
  }
  else
  {
    v2 = *(_OWORD *)((char *)__p[1] - 24);
    a1->__r_.__value_.__r.__words[2] = *((_QWORD *)__p[1] - 1);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v2;
  }
  if (__p[0])
  {
    v3 = (void **)__p[1];
    v4 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != __p[0]);
      v4 = __p[0];
    }
    operator delete(v4);
  }
}

void sub_236E1E898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

uint64_t support::fs::lockDir(const char *a1)
{
  uint64_t v1;
  _QWORD v3[2];
  pid_t v4;
  int v5;

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v1 = open(a1, 0);
  if ((v1 & 0x80000000) != 0)
    return v1;
  v5 = 1;
  v3[0] = 0;
  v3[1] = 0;
  v4 = getpid();
  if ((fcntl(v1, 9, v3) & 0x80000000) == 0)
    return v1;
  close(v1);
  return 0xFFFFFFFFLL;
}

BOOL support::fs::unlockDir(support::fs *this)
{
  int v1;
  _BOOL8 v2;
  _QWORD v4[2];
  pid_t v5;
  int v6;

  v1 = (int)this;
  v6 = 2;
  v4[0] = 0;
  v4[1] = 0;
  v5 = getpid();
  v2 = fcntl(v1, 9, v4) == 0;
  close(v1);
  return v2;
}

BOOL support::fs::getFilteredFiles(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  DIR *v7;
  DIR *v8;
  dirent *v9;
  char *d_name;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  int v14;
  std::string::size_type v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  timespec v20;
  int v21;
  size_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  void **v32;
  std::sub_match<const char *> *v33;
  std::string::size_type v34;
  std::sub_match<std::__wrap_iter<const char *>> *v35;
  __int128 v36;
  int v37;
  int v38;
  unint64_t v39;
  __int128 v40;
  std::string *v41;
  NSObject *v42;
  _BOOL8 result;
  int *v44;
  char *v45;
  char v46;
  const char *v48;
  std::string v49;
  _BYTE __dst[24];
  void *__p[2];
  _QWORD v52[9];
  __int128 v53;
  uint64_t v54;
  stat v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  *__error() = 0;
  if (a1[23] < 0)
  {
    v7 = opendir(*(const char **)a1);
    if (v7)
      goto LABEL_3;
LABEL_81:
    v42 = *(NSObject **)(GetOsLogContext() + 8);
    result = os_log_type_enabled(v42, OS_LOG_TYPE_ERROR);
    if (result)
    {
      if (a1[23] < 0)
        a1 = *(const char **)a1;
      v44 = __error();
      v45 = strerror(*v44);
      v55.st_dev = 136315394;
      *(_QWORD *)&v55.st_mode = a1;
      WORD2(v55.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&v55.st_ino + 6) = (__darwin_ino64_t)v45;
      _os_log_error_impl(&dword_236E0D000, v42, OS_LOG_TYPE_ERROR, "Error %s (%s)\n", (uint8_t *)&v55, 0x16u);
      return 0;
    }
    return result;
  }
  v7 = opendir(a1);
  if (!v7)
    goto LABEL_81;
LABEL_3:
  v8 = v7;
  v9 = readdir(v7);
  if (v9)
  {
    v48 = a1;
    v46 = 0;
    while (1)
    {
      d_name = v9->d_name;
      memset(__dst, 170, sizeof(__dst));
      v11 = strlen(v9->d_name);
      if (v11 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v12 = v11;
      if (v11 >= 0x17)
      {
        v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v16 = v11 | 7;
        v17 = v16 + 1;
        v13 = operator new(v16 + 1);
        *(_QWORD *)&__dst[8] = v12;
        *(_QWORD *)&__dst[16] = v17 | 0x8000000000000000;
        *(_QWORD *)__dst = v13;
      }
      else
      {
        __dst[23] = v11;
        v13 = __dst;
        if (!v11)
        {
          __dst[0] = 0;
          v14 = __dst[23];
          v15 = __dst[23];
          if ((__dst[23] & 0x80000000) == 0)
            goto LABEL_9;
          goto LABEL_17;
        }
      }
      memmove(v13, d_name, v12);
      v13[v12] = 0;
      v14 = __dst[23];
      v15 = __dst[23];
      if ((__dst[23] & 0x80000000) == 0)
      {
LABEL_9:
        if (v15 == 1)
        {
          if (__dst[0] == 46)
            goto LABEL_76;
        }
        else if (v15 == 2 && *(unsigned __int16 *)__dst == 11822)
        {
          goto LABEL_76;
        }
        goto LABEL_24;
      }
LABEL_17:
      if (*(_QWORD *)&__dst[8] == 1)
      {
        if (**(_BYTE **)__dst == 46)
          goto LABEL_76;
      }
      else if (*(_QWORD *)&__dst[8] == 2 && **(_WORD **)__dst == 11822)
      {
        goto LABEL_76;
      }
LABEL_24:
      if ((a4 & 1) != 0)
        goto LABEL_55;
      v18 = a4;
      v19 = a3;
      v20.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v20.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&v55.st_blksize = v20;
      *(timespec *)v55.st_qspare = v20;
      v55.st_birthtimespec = v20;
      *(timespec *)&v55.st_size = v20;
      v55.st_mtimespec = v20;
      v55.st_ctimespec = v20;
      *(timespec *)&v55.st_uid = v20;
      v55.st_atimespec = v20;
      *(timespec *)&v55.st_dev = v20;
      v21 = v48[23];
      if (v21 >= 0)
        v22 = *((unsigned __int8 *)v48 + 23);
      else
        v22 = *((_QWORD *)v48 + 1);
      v23 = v22 + 1;
      memset(&v49, 170, sizeof(v49));
      if (v22 + 1 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v23 >= 0x17)
      {
        v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17)
          v25 = v23 | 7;
        v26 = v25 + 1;
        v24 = (char *)operator new(v25 + 1);
        v49.__r_.__value_.__l.__size_ = v22 + 1;
        v49.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
        v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
      }
      else
      {
        memset(&v49, 0, sizeof(v49));
        v24 = (char *)&v49;
        *((_BYTE *)&v49.__r_.__value_.__s + 23) = v22 + 1;
        if (!v22)
          goto LABEL_39;
      }
      if (v21 >= 0)
        v27 = v48;
      else
        v27 = *(const char **)v48;
      memmove(v24, v27, v22);
LABEL_39:
      a3 = v19;
      *(_WORD *)&v24[v22] = 47;
      if (v14 >= 0)
        v28 = __dst;
      else
        v28 = *(const std::string::value_type **)__dst;
      if (v14 >= 0)
        v29 = v15;
      else
        v29 = *(_QWORD *)&__dst[8];
      v30 = std::string::append(&v49, v28, v29);
      a4 = v18;
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v52[0] = *((_QWORD *)&v30->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      if (v52[0] >= 0)
        v32 = __p;
      else
        v32 = (void **)__p[0];
      lstat((const char *)v32, &v55);
      if (SHIBYTE(v52[0]) < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_50:
          if ((v55.st_mode & 0xF000) != 0xA000)
            goto LABEL_54;
          goto LABEL_76;
        }
      }
      else if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_50;
      }
      operator delete(v49.__r_.__value_.__l.__data_);
      if ((v55.st_mode & 0xF000) != 0xA000)
      {
LABEL_54:
        v15 = __dst[23];
LABEL_55:
        if ((v15 & 0x80u) == 0)
          v33 = (std::sub_match<const char *> *)__dst;
        else
          v33 = *(std::sub_match<const char *> **)__dst;
        if ((v15 & 0x80u) == 0)
          v34 = v15;
        else
          v34 = *(_QWORD *)&__dst[8];
        v35 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v33 + v34);
        *(_QWORD *)&v36 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v53 = v36;
        v52[6] = 0xAAAAAAAAAAAAAA00;
        v52[3] = 0xAAAAAAAAAAAAAAAALL;
        v52[4] = 0;
        v52[5] = 0;
        v52[7] = 0;
        v52[8] = 0;
        LOBYTE(v53) = 0;
        BYTE8(v53) = 0;
        v54 = 0;
        *(_OWORD *)__p = 0u;
        memset(v52, 0, 25);
        *(_OWORD *)&v55.st_birthtimespec.tv_nsec = v36;
        v55.st_ctimespec.tv_sec = 0xAAAAAAAAAAAAAAAALL;
        v55.st_atimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
        memset(&v55.st_mtimespec, 0, 17);
        memset(&v55.st_ctimespec.tv_nsec, 0, 17);
        LOBYTE(v55.st_size) = 0;
        v55.st_blocks = 0;
        memset(&v55, 0, 41);
        v37 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a2, v33, (std::sub_match<const char *> *)((char *)v33 + v34), (std::vector<std::csub_match> *)&v55, 4160);
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v33, v35, (uint64_t *)&v55.st_dev, 0);
        if (*(_QWORD *)&v55.st_dev)
        {
          v55.st_ino = *(_QWORD *)&v55.st_dev;
          operator delete(*(void **)&v55.st_dev);
        }
        if ((_BYTE)v53)
          v38 = v37 ^ 1;
        else
          v38 = 1;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if ((v37 & v38) != 0)
        {
          v39 = *(_QWORD *)(a3 + 8);
          if (v39 >= *(_QWORD *)(a3 + 16))
          {
            v41 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)__dst);
          }
          else
          {
            if ((__dst[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(*(std::string **)(a3 + 8), *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
            }
            else
            {
              v40 = *(_OWORD *)__dst;
              *(_QWORD *)(v39 + 16) = *(_QWORD *)&__dst[16];
              *(_OWORD *)v39 = v40;
            }
            v41 = (std::string *)(v39 + 24);
            *(_QWORD *)(a3 + 8) = v39 + 24;
          }
          *(_QWORD *)(a3 + 8) = v41;
          v46 = 1;
        }
      }
LABEL_76:
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      v9 = readdir(v8);
      if (!v9)
        goto LABEL_86;
    }
  }
  v46 = 0;
LABEL_86:
  closedir(v8);
  return v46 & 1;
}

void sub_236E1EF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  uint64_t v49;
  uint64_t v50;

  *(_QWORD *)(v49 + 8) = v50;
  if (a30 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_236E1F134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ifstream::~ifstream(&a9);
  _Unwind_Resume(a1);
}

void support::fs::getBasePath(const std::string::value_type **a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  size_t v4;
  size_t v5;
  std::string::size_type size;
  char v7;
  std::string *p_p;
  unsigned __int8 *v9;
  BOOL v10;
  BOOL v11;
  size_t v12;
  __int128 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  std::string __p;

  v2 = (unsigned __int8 *)a1;
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
    {
      std::string::__init_copy_ctor_external((std::string *)a2, *a1, 0);
      return;
    }
  }
  else if (!*((_BYTE *)a1 + 23))
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = a1[2];
    return;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  memset(&__p, 170, sizeof(__p));
  support::fs::getFileName(&__p);
  v4 = *((_QWORD *)v2 + 1);
  if ((v2[23] & 0x80u) == 0)
  {
    v5 = v2[23];
  }
  else
  {
    v2 = *(unsigned __int8 **)v2;
    v5 = v4;
  }
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  v9 = &v2[v5];
  if (v5)
    v10 = size == 0;
  else
    v10 = 1;
  if (v10)
  {
    v15 = &v2[v5];
  }
  else
  {
    v14 = v2;
    v15 = &v2[v5];
    do
    {
      if (*v14 == p_p->__r_.__value_.__s.__data_[0])
      {
        v16 = 1;
        while (size != v16)
        {
          if (&v14[v16] == v9)
            goto LABEL_20;
          v17 = v14[v16];
          v18 = p_p->__r_.__value_.__s.__data_[v16++];
          if (v17 != v18)
            goto LABEL_37;
        }
        v15 = v14;
      }
LABEL_37:
      ++v14;
    }
    while (v14 != v9);
  }
LABEL_20:
  v11 = v15 != v9 || size == 0;
  if (v11 && v15 - v2 != -1)
  {
    if (v5 >= v15 - v2)
      v12 = v15 - v2;
    else
      v12 = v5;
    if (v12 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v12 >= 0x17)
    {
      v19 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v19 = v12 | 7;
      v20 = v19 + 1;
      v13 = (__int128 *)operator new(v19 + 1);
      *((_QWORD *)&v21 + 1) = v12;
      v22 = v20 | 0x8000000000000000;
      *(_QWORD *)&v21 = v13;
    }
    else
    {
      HIBYTE(v22) = v12;
      v13 = &v21;
      if (!v12)
      {
        LOBYTE(v21) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        {
LABEL_33:
          *(_OWORD *)a2 = v21;
          *(_QWORD *)(a2 + 16) = v22;
          v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          goto LABEL_34;
        }
LABEL_49:
        operator delete(*(void **)a2);
        goto LABEL_33;
      }
    }
    memmove(v13, v2, v12);
    *((_BYTE *)v13 + v12) = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_49;
  }
LABEL_34:
  if (v7 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_236E1F378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void support::fs::getLastNumberDir(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string::size_type size;
  char *v6;
  int v7;
  std::string::size_type v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  void **v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  char *v28;
  char *v29;
  unsigned int v30;
  void *v31;
  __int128 v32;
  std::string *v33;
  unsigned int v34;
  std::string::size_type v35;
  std::string::size_type v36;
  void **v37;
  int v38;
  size_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  std::string *v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  void **v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::string v56;
  std::string v57;
  std::string __p;
  std::locale v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::string v65;
  void *v66;
  void **v67;
  uint64_t v68;
  _BYTE v69[48];
  __int128 v70;
  void *__dst[3];
  std::string v72;
  std::string v73;
  std::string v74;

  memset(&v74, 170, sizeof(v74));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v74 = *(std::string *)a1;
  v4 = &v74;
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v4 = (std::string *)v74.__r_.__value_.__r.__words[0];
  size = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v74.__r_.__value_.__l.__size_;
  v6 = (char *)&v4[-1].__r_.__value_.__r.__words[2] + 7;
  while (size)
  {
    v7 = v6[size--];
    if (v7 != 47)
    {
      if (size != -1)
        std::string::erase(&v74, size + 1, 0xFFFFFFFFFFFFFFFFLL);
      break;
    }
  }
  memset(&v73, 170, sizeof(v73));
  support::fs::getBasePath((const std::string::value_type **)&v74.__r_.__value_.__l.__data_, (uint64_t)&v73);
  v8 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = v74.__r_.__value_.__l.__size_;
  if (!v8)
    goto LABEL_26;
  v9 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = v73.__r_.__value_.__l.__size_;
  if (!v9)
  {
LABEL_26:
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_125;
      goto LABEL_130;
    }
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    goto LABEL_124;
  }
  memset(&v72, 170, sizeof(v72));
  support::fs::getFileName(&v72);
  v10 = SHIBYTE(v72.__r_.__value_.__r.__words[2]);
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
  else
    v11 = v72.__r_.__value_.__l.__size_;
  v12 = v11 + 13;
  memset(__dst, 170, sizeof(__dst));
  if (v11 + 13 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v12 >= 0x17)
  {
    v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v14 = v12 | 7;
    v15 = v14 + 1;
    v13 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)(v11 + 13);
    __dst[2] = (void *)(v15 | 0x8000000000000000);
    __dst[0] = v13;
  }
  else
  {
    memset(__dst, 0, sizeof(__dst));
    v13 = __dst;
    HIBYTE(__dst[2]) = v11 + 13;
    if (!v11)
      goto LABEL_37;
  }
  if (v10 >= 0)
    v16 = &v72;
  else
    v16 = (std::string *)v72.__r_.__value_.__r.__words[0];
  memmove(v13, v16, v11);
LABEL_37:
  strcpy((char *)v13 + v11, "-[[:alnum:]]*");
  *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v69[32] = v17;
  v70 = v17;
  *(_OWORD *)v69 = v17;
  *(_OWORD *)&v69[16] = v17;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v69, (uint64_t)__dst, 0);
  v66 = 0;
  v67 = 0;
  v68 = 0;
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v65, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
  else
    v65 = v73;
  std::locale::locale(&v59, (const std::locale *)v69);
  v60 = *(_OWORD *)&v69[8];
  v61 = *(_OWORD *)&v69[24];
  v62 = *(_QWORD *)&v69[40];
  v63 = (std::__shared_weak_count *)v70;
  if ((_QWORD)v70)
  {
    v18 = (unint64_t *)(v70 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v64 = *((_QWORD *)&v70 + 1);
  if (!support::fs::getFilteredFiles((const char *)&v65, (uint64_t)&v59, (uint64_t)&v66, 0))
  {
    v25 = v63;
    if (v63)
    {
      p_shared_owners = (unint64_t *)&v63->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    std::locale::~locale(&v59);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    goto LABEL_82;
  }
  v20 = (void **)v66;
  v21 = v67;
  v22 = v63;
  if (v63)
  {
    v23 = (unint64_t *)&v63->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::locale::~locale(&v59);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v65.__r_.__value_.__l.__data_);
    if (v20 == v21)
    {
LABEL_82:
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      {
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
        a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
        v37 = (void **)v66;
        if (!v66)
          goto LABEL_118;
        goto LABEL_111;
      }
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
LABEL_110:
      v37 = (void **)v66;
      if (!v66)
        goto LABEL_118;
      goto LABEL_111;
    }
  }
  else if (v20 == v21)
  {
    goto LABEL_82;
  }
  v28 = (char *)v66;
  v29 = (char *)v67;
  if (v66 != v67)
  {
    v30 = 0;
    while (1)
    {
      memset(&__p, 170, sizeof(__p));
      ctu::tokenize();
      memset(&v57, 170, sizeof(v57));
      if (*(char *)(__p.__r_.__value_.__l.__size_ - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(__p.__r_.__value_.__l.__size_ - 24), *(_QWORD *)(__p.__r_.__value_.__l.__size_ - 16));
      }
      else
      {
        v32 = *(_OWORD *)(__p.__r_.__value_.__l.__size_ - 24);
        v57.__r_.__value_.__r.__words[2] = *(_QWORD *)(__p.__r_.__value_.__l.__size_ - 8);
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v32;
      }
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &v57;
      else
        v33 = (std::string *)v57.__r_.__value_.__r.__words[0];
      v34 = strtol((const char *)v33, 0, 0);
      if (v30 <= v34)
        v30 = v34;
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v57.__r_.__value_.__l.__data_);
        v35 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
        {
LABEL_77:
          v36 = __p.__r_.__value_.__l.__size_;
          v31 = (void *)v35;
          if (__p.__r_.__value_.__l.__size_ != v35)
          {
            do
            {
              if (*(char *)(v36 - 1) < 0)
                operator delete(*(void **)(v36 - 24));
              v36 -= 24;
            }
            while (v36 != v35);
            v31 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          __p.__r_.__value_.__l.__size_ = v35;
          operator delete(v31);
        }
      }
      else
      {
        v35 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
          goto LABEL_77;
      }
      v28 += 24;
      if (v28 == v29)
        goto LABEL_87;
    }
  }
  v30 = 0;
LABEL_87:
  v38 = SHIBYTE(v74.__r_.__value_.__r.__words[2]);
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  else
    v39 = v74.__r_.__value_.__l.__size_;
  v40 = v39 + 1;
  memset(&v57, 170, sizeof(v57));
  if (v39 + 1 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v40 >= 0x17)
  {
    v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v42 = v40 | 7;
    v43 = v42 + 1;
    v41 = (char *)operator new(v42 + 1);
    v57.__r_.__value_.__l.__size_ = v39 + 1;
    v57.__r_.__value_.__r.__words[2] = v43 | 0x8000000000000000;
    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
  }
  else
  {
    memset(&v57, 0, sizeof(v57));
    v41 = (char *)&v57;
    *((_BYTE *)&v57.__r_.__value_.__s + 23) = v39 + 1;
    if (!v39)
      goto LABEL_101;
  }
  if (v38 >= 0)
    v44 = &v74;
  else
    v44 = (std::string *)v74.__r_.__value_.__r.__words[0];
  memmove(v41, v44, v39);
LABEL_101:
  *(_WORD *)&v41[v39] = 45;
  std::to_string(&v56, v30);
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = &v56;
  else
    v45 = (std::string *)v56.__r_.__value_.__r.__words[0];
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
  else
    v46 = v56.__r_.__value_.__l.__size_;
  v47 = std::string::append(&v57, (const std::string::value_type *)v45, v46);
  v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  v49 = std::string::append(&__p, "/");
  v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_109:
      if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_110;
      goto LABEL_134;
    }
  }
  else if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_109;
  }
  operator delete(v56.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_110;
LABEL_134:
  operator delete(v57.__r_.__value_.__l.__data_);
  v37 = (void **)v66;
  if (!v66)
    goto LABEL_118;
LABEL_111:
  v51 = v67;
  v52 = v37;
  if (v67 != v37)
  {
    do
    {
      if (*((char *)v51 - 1) < 0)
        operator delete(*(v51 - 3));
      v51 -= 3;
    }
    while (v51 != v37);
    v52 = v66;
  }
  v67 = v37;
  operator delete(v52);
LABEL_118:
  v53 = (std::__shared_weak_count *)v70;
  if (!(_QWORD)v70)
    goto LABEL_122;
  v54 = (unint64_t *)(v70 + 8);
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
    std::locale::~locale((std::locale *)v69);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    {
LABEL_123:
      if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_124;
      goto LABEL_129;
    }
  }
  else
  {
LABEL_122:
    std::locale::~locale((std::locale *)v69);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_123;
  }
  operator delete(__dst[0]);
  if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_124:
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_125;
    goto LABEL_130;
  }
LABEL_129:
  operator delete(v72.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_125:
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_131:
    operator delete(v74.__r_.__value_.__l.__data_);
    return;
  }
LABEL_130:
  operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_131;
}

void sub_236E1FAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::locale a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,uint64_t a46,std::locale a47)
{
  uint64_t v47;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
      {
LABEL_8:
        std::vector<std::string>::~vector[abi:ne180100](&a44);
        std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a47);
        if (*(char *)(v47 - 161) < 0)
        {
          operator delete(*(void **)(v47 - 184));
          if ((*(char *)(v47 - 137) & 0x80000000) == 0)
          {
LABEL_10:
            if ((*(char *)(v47 - 113) & 0x80000000) == 0)
              goto LABEL_11;
            goto LABEL_15;
          }
        }
        else if ((*(char *)(v47 - 137) & 0x80000000) == 0)
        {
          goto LABEL_10;
        }
        operator delete(*(void **)(v47 - 160));
        if ((*(char *)(v47 - 113) & 0x80000000) == 0)
        {
LABEL_11:
          if ((*(char *)(v47 - 89) & 0x80000000) == 0)
            goto LABEL_12;
          goto LABEL_16;
        }
LABEL_15:
        operator delete(*(void **)(v47 - 136));
        if ((*(char *)(v47 - 89) & 0x80000000) == 0)
LABEL_12:
          _Unwind_Resume(a1);
LABEL_16:
        operator delete(*(void **)(v47 - 112));
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a16);
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a21 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL support::fs::getPartitionInfo(uint64_t a1, _QWORD *a2, _QWORD *a3, unint64_t *a4)
{
  int v7;
  _BOOL8 result;
  int v9;
  uint64_t f_bavail;
  statvfs v11;

  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 23))
    {
      memset(&v11, 0, sizeof(v11));
      v7 = statvfs((const char *)a1, &v11);
      result = v7 == 0;
      if (v7)
        return result;
LABEL_7:
      *a4 = v11.f_frsize;
      f_bavail = v11.f_bavail;
      *a2 = v11.f_blocks;
      *a3 = f_bavail;
      return result;
    }
    return 0;
  }
  if (!*(_QWORD *)(a1 + 8))
    return 0;
  memset(&v11, 0, sizeof(v11));
  v9 = statvfs(*(const char **)a1, &v11);
  result = v9 == 0;
  if (!v9)
    goto LABEL_7;
  return result;
}

void support::fs::readCurrentLine(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const std::locale::facet *v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  int v11;
  std::locale v12[16];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::istream::tellg();
  v4 = v13;
  if (v13 >= 2)
  {
    do
    {
      std::istream::seekg();
      if (std::istream::peek() == 10)
        break;
    }
    while (v4-- > 1);
  }
  std::istream::seekg();
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v6 = std::locale::use_facet(v12, MEMORY[0x24BEDB350]);
  v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(v12);
  LOBYTE(v12[0].__locale_) = -86;
  MEMORY[0x23B804DF4](v12, a1, 1);
  if (!LOBYTE(v12[0].__locale_))
    return;
  v8 = 0;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 23) = 0;
  while (1)
  {
    v9 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v10 = (_BYTE *)v9[3];
    if (v10 != (_BYTE *)v9[4])
    {
      v9[3] = v10 + 1;
      LOBYTE(v9) = *v10;
      goto LABEL_10;
    }
    LODWORD(v9) = (*(uint64_t (**)(_QWORD *))(*v9 + 80))(v9);
    if ((_DWORD)v9 == -1)
      break;
LABEL_10:
    if (v7 == v9)
    {
      v11 = 0;
      goto LABEL_18;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v9);
    --v8;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v11 = 4;
      goto LABEL_18;
    }
  }
  if (v8)
    v11 = 2;
  else
    v11 = 6;
LABEL_18:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v11);
}

void sub_236E1FED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

void sub_236E1FEE4(_Unwind_Exception *exception_object, int a2)
{
  _QWORD *v2;
  uint64_t v3;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    v3 = *v2;
    *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) |= 1u;
    if ((*((_BYTE *)v2 + *(_QWORD *)(v3 - 24) + 36) & 1) == 0)
    {
      __cxa_end_catch();
      JUMPOUT(0x236E1FE84);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  char *v13;
  void **v14;
  std::string *v16;
  std::string *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (std::string *)&v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    v11 = v10 + 1;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((_QWORD *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_236E20138(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, void *a2, std::basic_regex<char> *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  std::__empty_state<char>_vtbl_layout *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  std::basic_regex<char> *v15;
  std::basic_regex<char> *v16;
  char *v18;
  char *v19;
  std::__owns_one_state<char> *v20;
  int v21;
  char *v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  std::__empty_state<char>_vtbl_layout *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  std::__owns_one_state<char> *v38;
  int v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::basic_regex<char> *v55;
  std::basic_regex<char> *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  char *v69;

  v6 = operator new(8uLL);
  *v6 = &unk_25086B488;
  v7 = operator new(0x10uLL);
  v7[1] = v6;
  v9 = operator new(0x20uLL);
  *v9 = &unk_25086B4E0;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v7;
  v10 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      v13 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 56) = v13;
      v14 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if (v14 <= 0x3F)
        goto LABEL_6;
LABEL_11:
      if (v14 != 64)
      {
        if (v14 == 128)
        {
          v23 = (char *)memchr(a2, 10, (char *)a3 - (_BYTE *)a2);
          if (v23)
            v24 = v23;
          else
            v24 = (char *)a3;
          if (v24 == a2)
          {
            v57 = operator new(0x10uLL);
            v58 = *(_QWORD *)(v13 + 8);
            v57[1] = v58;
            *(_QWORD *)(v13 + 8) = v57;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            if (v24 != (char *)a3)
              ++v24;
            if (v24 == (char *)a3)
              return a3;
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (char *)a2, v24);
            if (v24 != (char *)a3)
              ++v24;
            if (v24 == (char *)a3)
              return a3;
          }
          v59 = *(_QWORD *)(a1 + 56);
          do
          {
            v68 = (char *)memchr(v24, 10, (char *)a3 - v24);
            if (v68)
              v69 = v68;
            else
              v69 = (char *)a3;
            if (v69 == v24)
            {
              v60 = operator new(0x10uLL);
              v61 = *(_QWORD *)(v59 + 8);
              v60[1] = v61;
              *(_QWORD *)(v59 + 8) = v60;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            }
            else
            {
              std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v24, v69);
            }
            v62 = operator new(0x18uLL);
            v63 = *(_QWORD *)(v59 + 8);
            v62[1] = *(_QWORD *)(v13 + 8);
            v62[2] = v63;
            *v62 = &unk_25086BAA0;
            *(_QWORD *)(v13 + 8) = v62;
            *(_QWORD *)(v59 + 8) = 0;
            v64 = operator new(0x10uLL);
            v65 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v64[1] = v65;
            *(_QWORD *)(v59 + 8) = v64;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
            v66 = operator new(0x10uLL);
            v67 = *(_QWORD *)(v59 + 8);
            *v66 = &unk_25086BAE8;
            v66[1] = v67;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v66;
            v59 = *(_QWORD *)(v59 + 8);
            *(_QWORD *)(a1 + 56) = v59;
            if (v69 == (char *)a3)
              v24 = v69;
            else
              v24 = v69 + 1;
          }
          while (v24 != (char *)a3);
          return a3;
        }
        if (v14 == 256)
        {
          v15 = (std::basic_regex<char> *)memchr(a2, 10, (char *)a3 - (_BYTE *)a2);
          if (v15)
            v16 = v15;
          else
            v16 = a3;
          if (v16 == a2)
          {
            v44 = operator new(0x10uLL);
            v45 = *(_QWORD *)(v13 + 8);
            v44[1] = v45;
            *(_QWORD *)(v13 + 8) = v44;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            if (v16 != a3)
              v16 = (std::basic_regex<char> *)((char *)v16 + 1);
            if (v16 == a3)
              return a3;
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)a2, v16);
            if (v16 != a3)
              v16 = (std::basic_regex<char> *)((char *)v16 + 1);
            if (v16 == a3)
              return a3;
          }
          v46 = *(_QWORD *)(a1 + 56);
          do
          {
            v55 = (std::basic_regex<char> *)memchr(v16, 10, (char *)a3 - (char *)v16);
            if (v55)
              v56 = v55;
            else
              v56 = a3;
            if (v56 == v16)
            {
              v47 = operator new(0x10uLL);
              v48 = *(_QWORD *)(v46 + 8);
              v47[1] = v48;
              *(_QWORD *)(v46 + 8) = v47;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            }
            else
            {
              std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)v16, v56);
            }
            v49 = operator new(0x18uLL);
            v50 = *(_QWORD *)(v46 + 8);
            v49[1] = *(_QWORD *)(v13 + 8);
            v49[2] = v50;
            *v49 = &unk_25086BAA0;
            *(_QWORD *)(v13 + 8) = v49;
            *(_QWORD *)(v46 + 8) = 0;
            v51 = operator new(0x10uLL);
            v52 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v51[1] = v52;
            *(_QWORD *)(v46 + 8) = v51;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
            v53 = operator new(0x10uLL);
            v54 = *(_QWORD *)(v46 + 8);
            *v53 = &unk_25086BAE8;
            v53[1] = v54;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v53;
            v46 = *(_QWORD *)(v46 + 8);
            *(_QWORD *)(a1 + 56) = v46;
            if (v56 == a3)
              v16 = v56;
            else
              v16 = (std::basic_regex<char> *)((char *)&v56->__traits_.__loc_.__locale_ + 1);
          }
          while (v16 != a3);
          return a3;
        }
        goto LABEL_80;
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)a2, a3);
    }
  }
  v13 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v13;
  v14 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v14 > 0x3F)
    goto LABEL_11;
LABEL_6:
  if (v14)
  {
    if (v14 == 16)
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (char *)a2, (char *)a3);
    if (v14 != 32)
LABEL_80:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
    return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)a2, a3);
  }
  v18 = (char *)a2;
  while (1)
  {
    v19 = v18;
    v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v18, (char *)a3);
    if (v18 == v19)
      break;
LABEL_24:
    if (v18 == v19)
      goto LABEL_37;
  }
  v20 = *(std::__owns_one_state<char> **)(a1 + 56);
  v21 = *(_DWORD *)(a1 + 28);
  v22 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v19, (char *)a3);
  if (v22 != v19)
  {
    v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v22, a3, v20, (v21 + 1), (*(_DWORD *)(a1 + 28) + 1));
    goto LABEL_24;
  }
LABEL_37:
  if (v19 == a2)
  {
    v25 = operator new(0x10uLL);
    v26 = *(_QWORD *)(a1 + 56);
    v27 = *(_QWORD *)(v26 + 8);
    v25[1] = v27;
    *(_QWORD *)(v26 + 8) = v25;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  if (v19 == (char *)a3)
    return a3;
  while (2)
  {
    if (*v19 != 124)
      return (std::basic_regex<char> *)v19;
    v34 = v8;
    v35 = *(_QWORD *)(a1 + 56);
    v36 = v19 + 1;
    v37 = v19 + 1;
    while (2)
    {
      v19 = v37;
      v37 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v37, (char *)a3);
      if (v37 != v19)
      {
LABEL_46:
        if (v37 == v19)
          goto LABEL_41;
        continue;
      }
      break;
    }
    v38 = *(std::__owns_one_state<char> **)(a1 + 56);
    v39 = *(_DWORD *)(a1 + 28);
    v40 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v19, (char *)a3);
    if (v40 != v19)
    {
      v37 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v40, a3, v38, (v39 + 1), (*(_DWORD *)(a1 + 28) + 1));
      goto LABEL_46;
    }
LABEL_41:
    if (v19 == v36)
    {
      v41 = operator new(0x10uLL);
      v42 = *(_QWORD *)(a1 + 56);
      v43 = *(_QWORD *)(v42 + 8);
      v41[1] = v43;
      *(_QWORD *)(v42 + 8) = v41;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    v28 = operator new(0x18uLL);
    v29 = *(_QWORD *)(v35 + 8);
    v28[1] = *(_QWORD *)(v13 + 8);
    v28[2] = v29;
    *v28 = &unk_25086BAA0;
    *(_QWORD *)(v13 + 8) = v28;
    *(_QWORD *)(v35 + 8) = 0;
    v30 = operator new(0x10uLL);
    v31 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v8 = v34;
    *v30 = &v34->~__empty_state;
    v30[1] = v31;
    *(_QWORD *)(v35 + 8) = v30;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v32 = operator new(0x10uLL);
    v33 = *(_QWORD *)(v35 + 8);
    *v32 = &unk_25086BAE8;
    v32[1] = v33;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v32;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v35 + 8);
    if (v19 != (char *)a3)
      continue;
    return a3;
  }
}

void sub_236E2082C(_Unwind_Exception *a1)
{
  void *v1;
  void (__cdecl ***v2)(std::__owns_one_state<char> *__hidden);

  operator delete(v1);
  operator delete(v2);
  (*(void (**)(void *))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_236E20868(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v2 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23B804D10](exception, 17);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_236E208B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  std::__owns_one_state<char> *v9;
  int v10;
  std::basic_regex<char> *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  std::__owns_one_state<char> *v24;
  int v25;
  std::basic_regex<char> *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = a2;
  while (1)
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v7, a3);
    if (v7 == v8)
      break;
LABEL_2:
    if (v7 == v8)
      goto LABEL_6;
  }
  v9 = *(std::__owns_one_state<char> **)(a1 + 56);
  v10 = *(_DWORD *)(a1 + 28);
  v11 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, (int)v8, (int)a3);
  if (v11 != (std::basic_regex<char> *)v8)
  {
    v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v11, (std::basic_regex<char> *)a3, v9, (v10 + 1), (*(_DWORD *)(a1 + 28) + 1));
    goto LABEL_2;
  }
LABEL_6:
  if (v8 == a2)
  {
    v12 = operator new(0x10uLL);
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
    v12[1] = v14;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  if (v8 == a3)
    return a3;
  while (2)
  {
    if (*v8 != 124)
      return v8;
    v21 = *(_QWORD *)(a1 + 56);
    v22 = v8 + 1;
    v23 = v8 + 1;
    while (2)
    {
      v8 = v23;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v23, a3);
      if (v23 != v8)
      {
LABEL_14:
        if (v23 == v8)
          goto LABEL_17;
        continue;
      }
      break;
    }
    v24 = *(std::__owns_one_state<char> **)(a1 + 56);
    v25 = *(_DWORD *)(a1 + 28);
    v26 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, (int)v8, (int)a3);
    if (v26 != (std::basic_regex<char> *)v8)
    {
      v23 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v26, (std::basic_regex<char> *)a3, v24, (v25 + 1), (*(_DWORD *)(a1 + 28) + 1));
      goto LABEL_14;
    }
LABEL_17:
    if (v8 == v22)
    {
      v27 = operator new(0x10uLL);
      v28 = *(_QWORD *)(a1 + 56);
      v29 = *(_QWORD *)(v28 + 8);
      v27[1] = v29;
      *(_QWORD *)(v28 + 8) = v27;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v21 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_25086BAA0;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v21 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v21 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v21 + 8);
    *v19 = &unk_25086BAE8;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v21 + 8);
    if (v8 != a3)
      continue;
    return a3;
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, char *a2, char *a3)
{
  std::basic_regex<char> *v3;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  std::__owns_one_state<char> *v11;
  int v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3)
    return a2;
  if (*a2 == 94)
  {
    v6 = operator new(0x18uLL);
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *v6 = &unk_25086B5D8;
    v6[1] = v9;
    *((_BYTE *)v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      v10 = (char *)v3;
      v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, v10, a3);
      if (v13 != (unsigned __int8 *)v10)
      {
        v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v3 != (std::basic_regex<char> *)v10)
          continue;
      }
      if (v10 + 1 != a3 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v14 = operator new(0x18uLL);
      v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *v14 = &unk_25086B620;
      v14[1] = v17;
      *((_BYTE *)v14 + 16) = v15;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(uint64_t a1, char *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_13;
  do
  {
    v8 = v7;
    v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v7, v3);
  }
  while (v7 != v8);
  if (v8 == a2)
LABEL_13:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 != (char *)v3)
  {
    while (*v8 == 124)
    {
      v9 = *(_QWORD *)(a1 + 56);
      v10 = v8 + 1;
      v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v8 + 1, v3);
      if (v11 == v8 + 1)
        goto LABEL_13;
      do
      {
        v8 = v11;
        v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v11, v3);
      }
      while (v11 != v8);
      if (v8 == v10)
        goto LABEL_13;
      v12 = operator new(0x18uLL);
      v13 = *(_QWORD *)(v9 + 8);
      v12[1] = *(_QWORD *)(v6 + 8);
      v12[2] = v13;
      *v12 = &unk_25086BAA0;
      *(_QWORD *)(v6 + 8) = v12;
      *(_QWORD *)(v9 + 8) = 0;
      v14 = operator new(0x10uLL);
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v14[1] = v15;
      *(_QWORD *)(v9 + 8) = v14;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
      v16 = operator new(0x10uLL);
      v17 = *(_QWORD *)(v9 + 8);
      *v16 = &unk_25086BAE8;
      v16[1] = v17;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
      if (v8 == (char *)v3)
        return v3;
    }
    return (std::basic_regex<char> *)v8;
  }
  return v3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23B804D10](exception, 14);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_236E20E44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000236E52603)
    return a1 + 24;
  if (((v3 & 0x8000000236E52603 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000236E52603))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000236E52603 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  operator delete(this);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *v7;
  BOOL v8;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int v20;
  __int128 v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  unsigned int marked_count;
  std::basic_regex<char> v27;

  if (a2 == a3)
    return a2;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v15 = a2[1];
        if (v15 == 66)
        {
          v16 = (char *)operator new(0x30uLL);
          v24 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_25086B668;
          *((_QWORD *)v16 + 1) = v24;
          std::locale::locale((std::locale *)v16 + 2, (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          v16[40] = 1;
        }
        else
        {
          if (v15 != 98)
            return a2;
          v16 = (char *)operator new(0x30uLL);
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_25086B668;
          *((_QWORD *)v16 + 1) = v17;
          std::locale::locale((std::locale *)v16 + 2, (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          v16[40] = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return a2 + 2;
      }
      return a2;
    }
    if (v6 != 94)
      return a2;
    v10 = operator new(0x18uLL);
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
LABEL_14:
    *v10 = v14 + 16;
    v10[1] = v13;
    *((_BYTE *)v10 + 16) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    v10 = operator new(0x18uLL);
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
    goto LABEL_14;
  }
  v8 = v6 == 40;
  v7 = a2 + 1;
  v8 = !v8 || v7 == a3;
  if (v8)
    return a2;
  v8 = *v7 == 63;
  v18 = a2 + 2;
  if (!v8 || v18 == a3)
    return a2;
  v20 = *v18;
  if (v20 == 33)
  {
    *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v27.__loop_count_ = v25;
    *(_OWORD *)&v27.__start_.__cntrl_ = v25;
    *(_OWORD *)&v27.__traits_.__loc_.__locale_ = v25;
    *(_OWORD *)&v27.__traits_.__col_ = v25;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v27);
    v27.__flags_ = *(_DWORD *)(a1 + 24);
    v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v27, a2 + 3, a3);
    marked_count = v27.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v27, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v22 == a3 || *v22 != 41)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    goto LABEL_32;
  }
  if (v20 != 61)
    return a2;
  *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v27.__loop_count_ = v21;
  *(_OWORD *)&v27.__start_.__cntrl_ = v21;
  *(_OWORD *)&v27.__traits_.__loc_.__locale_ = v21;
  *(_OWORD *)&v27.__traits_.__col_ = v21;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v27);
  v27.__flags_ = *(_DWORD *)(a1 + 24);
  v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v27, a2 + 3, a3);
  v23 = v27.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v27, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v23;
  if (v22 == a3 || *v22 != 41)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_32:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v27.__traits_.__loc_);
  return v22 + 1;
}

void sub_236E21344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_236E21358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_236E2136C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_236E21380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v5;
  char *v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  char *v13;
  unsigned __int8 *v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  unsigned __int8 *v27;
  _DWORD *v28;
  int v29;

  v3 = a2;
  if (a2 == a3)
    return a2;
  v5 = *a2;
  v7 = a2;
  switch(*a2)
  {
    case '$':
    case ')':
    case ']':
    case '^':
    case '|':
    case '}':
      return v7;
    case '(':
      if (a2 + 1 == a3)
        goto LABEL_56;
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        v12 = (_DWORD *)(a1 + 36);
        ++*(_DWORD *)(a1 + 36);
        v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(a1, a2 + 3, a3);
        if (v13 == a3)
          goto LABEL_56;
        v3 = v13;
        if (*v13 != 41)
          goto LABEL_56;
      }
      else
      {
        if ((*(_BYTE *)(a1 + 24) & 2) != 0)
        {
          v18 = *(_DWORD *)(a1 + 28);
        }
        else
        {
          v17 = operator new(0x18uLL);
          v18 = *(_DWORD *)(a1 + 28) + 1;
          *(_DWORD *)(a1 + 28) = v18;
          v19 = *(_QWORD *)(a1 + 56);
          v20 = *(_QWORD *)(v19 + 8);
          *v17 = &unk_25086B938;
          v17[1] = v20;
          *((_DWORD *)v17 + 4) = v18;
          *(_QWORD *)(v19 + 8) = v17;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        v12 = (_DWORD *)(a1 + 36);
        ++*(_DWORD *)(a1 + 36);
        v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(a1, v3 + 1, a3);
        if (v21 == a3 || (v3 = v21, *v21 != 41))
LABEL_56:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        if ((*(_BYTE *)(a1 + 24) & 2) == 0)
        {
          v22 = operator new(0x18uLL);
          v23 = *(_QWORD *)(a1 + 56);
          v24 = *(_QWORD *)(v23 + 8);
          *v22 = &unk_25086B980;
          v22[1] = v24;
          *((_DWORD *)v22 + 4) = v18;
          *(_QWORD *)(v23 + 8) = v22;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
      }
      --*v12;
      return v3 + 1;
    case '*':
    case '+':
    case '?':
    case '{':
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    case '.':
      v9 = operator new(0x10uLL);
      v10 = *(_QWORD *)(a1 + 56);
      v11 = *(_QWORD *)(v10 + 8);
      *v9 = &unk_25086B6F8;
      v9[1] = v11;
      *(_QWORD *)(v10 + 8) = v9;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v3 + 1;
    case '[':
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, a2, a3);
    case '\\':
      if (v5 != 92)
        return a2;
      v14 = (unsigned __int8 *)(a2 + 1);
      if (a2 + 1 == a3)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
      v15 = *v14;
      v16 = v15 - 48;
      if (v15 != 48)
      {
        if ((v15 - 49) <= 8)
        {
          v7 = v3 + 2;
          if (v3 + 2 == a3)
          {
            v7 = a3;
          }
          else
          {
            while (1)
            {
              v25 = *v7;
              if ((v25 - 48) > 9)
                break;
              if (v16 >= 0x19999999)
                goto LABEL_57;
              ++v7;
              v16 = v25 + 10 * v16 - 48;
              if (v7 == a3)
              {
                v7 = a3;
                break;
              }
            }
            if (!v16)
LABEL_57:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
          }
          if (v16 > *(_DWORD *)(a1 + 28))
            goto LABEL_57;
          std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v16);
          if (v7 != (char *)v14)
            return v7;
          LOBYTE(v15) = *v14;
        }
        switch((char)v15)
        {
          case 'D':
            v26 = operator new(0xB0uLL);
            std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v26, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
            goto LABEL_48;
          case 'S':
            v26 = operator new(0xB0uLL);
            std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v26, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
            goto LABEL_52;
          case 'W':
            v28 = operator new(0xB0uLL);
            std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v28, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
            goto LABEL_50;
          case 'd':
            v26 = operator new(0xB0uLL);
            std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v26, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_48:
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v26;
            *(_QWORD *)(a1 + 56) = v26;
            v29 = v26[40] | 0x400;
            goto LABEL_53;
          case 's':
            v26 = operator new(0xB0uLL);
            std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v26, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_52:
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v26;
            *(_QWORD *)(a1 + 56) = v26;
            v29 = v26[40] | 0x4000;
LABEL_53:
            v26[40] = v29;
            break;
          case 'w':
            v28 = operator new(0xB0uLL);
            std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v28, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_50:
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v28;
            *(_QWORD *)(a1 + 56) = v28;
            v28[40] |= 0x500u;
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v28, 95);
            break;
          default:
            v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>((std::basic_regex<char> *)a1, v3 + 1, a3, 0);
            if (v27 == v14)
              return v3;
            else
              return (char *)v27;
        }
        return v3 + 2;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v16);
      return v3 + 2;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      return v3 + 1;
  }
}

void sub_236E21880(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_236E21894(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_236E218A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_236E218BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_236E218D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_236E218E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int v6;
  int locale_low;
  std::basic_regex<char> *v8;
  char *v9;
  size_t v10;
  char *v11;
  int v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  std::basic_regex<char> *v17;
  unsigned __int8 *v18;
  BOOL v20;
  std::basic_regex<char> *v21;
  BOOL v22;
  char *v23;
  size_t v24;
  std::basic_regex<char> *v25;
  int v26;
  int v27;
  std::basic_regex<char> *v28;
  int v29;
  std::basic_regex<char> *v30;
  _BYTE *v31;

  if (this == a3)
    return this;
  v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6)
        v20 = 1;
      else
        v20 = v8 == a3;
      if (!v20 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v10 = 0;
        goto LABEL_35;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v24 = 0;
      goto LABEL_44;
    }
    if (locale_low == 43)
    {
      v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v10 = 1;
LABEL_35:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v10, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v9;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v24 = 1;
      goto LABEL_44;
    }
    return this;
  }
  if (locale_low == 63)
  {
    v21 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6)
      v22 = 1;
    else
      v22 = v21 == a3;
    if (v22 || LOBYTE(v21->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v21;
    }
    else
    {
      v23 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v23;
    }
  }
  else
  {
    if (locale_low != 123)
      return this;
    v11 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_71;
    v12 = *v11;
    if ((v12 & 0xF8) != 0x30 && (v12 & 0xFE) != 0x38)
      goto LABEL_71;
    v13 = v12 - 48;
    v14 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_19:
      v14 = (char *)a3;
    }
    else
    {
      while (1)
      {
        v15 = *v14;
        if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
          break;
        if (v13 >= 214748364)
          goto LABEL_71;
        v13 = v15 + 10 * v13 - 48;
        if (++v14 == (char *)a3)
          goto LABEL_19;
      }
    }
    if (v14 == v11)
      goto LABEL_71;
    if (v14 == (char *)a3)
      goto LABEL_72;
    v16 = *v14;
    if (v16 != 44)
    {
      if (v16 == 125)
      {
        v17 = (std::basic_regex<char> *)(v14 + 1);
        if (v6 || v17 == a3 || LOBYTE(v17->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 1);
          return v17;
        }
        else
        {
          v18 = (unsigned __int8 *)(v14 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v18;
        }
      }
LABEL_71:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    v25 = (std::basic_regex<char> *)(v14 + 1);
    if (v14 + 1 == (char *)a3)
      goto LABEL_71;
    v26 = LOBYTE(v25->__traits_.__loc_.__locale_);
    if (v26 == 125)
    {
      v8 = (std::basic_regex<char> *)(v14 + 2);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v10 = v13;
        v9 = v14 + 3;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        goto LABEL_35;
      }
      v24 = v13;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
LABEL_44:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v24, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v8;
    }
    if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38)
      goto LABEL_72;
    v27 = v26 - 48;
    v28 = (std::basic_regex<char> *)(v14 + 2);
    if (v28 == a3)
    {
LABEL_60:
      v28 = a3;
    }
    else
    {
      while (1)
      {
        v29 = LOBYTE(v28->__traits_.__loc_.__locale_);
        if ((v29 & 0xF8) != 0x30 && (v29 & 0xFE) != 0x38)
          break;
        if (v27 >= 214748364)
          goto LABEL_71;
        v27 = v29 + 10 * v27 - 48;
        v28 = (std::basic_regex<char> *)((char *)v28 + 1);
        if (v28 == a3)
          goto LABEL_60;
      }
    }
    if (v28 == v25 || v28 == a3 || LOBYTE(v28->__traits_.__loc_.__locale_) != 125)
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v27 < v13)
      goto LABEL_71;
    v30 = (std::basic_regex<char> *)((char *)&v28->__traits_.__loc_.__locale_ + 1);
    if (v6 || v30 == a3 || LOBYTE(v30->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 1);
      return v30;
    }
    else
    {
      v31 = (char *)&v28->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v31;
    }
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x23B804F50]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x24BEDB350]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x24BEDB4B0]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_236E21D44(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  char *v8;
  std::__node<char> *first;
  std::__shared_weak_count *cntrl;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v8 = (char *)operator new(0x58uLL);
  first = this->__end_->__first_;
  *(_QWORD *)v8 = &unk_25086B6B0;
  *((_QWORD *)v8 + 1) = first;
  std::locale::locale((std::locale *)v8 + 2, &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *((_QWORD *)v8 + 7) = a2->__start_.__ptr_;
  *((_QWORD *)v8 + 8) = cntrl;
  if (cntrl)
  {
    p_shared_owners = (unint64_t *)&cntrl->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *((_QWORD *)v8 + 9) = a2->__end_;
  *((_DWORD *)v8 + 20) = a4;
  v8[84] = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23B804D10](exception, 6);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_236E21E48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;

  if (!*(_BYTE *)(a2 + 92))
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
    return result;
  }
  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a2 + 8) && (*(_BYTE *)(a2 + 88) & 1) == 0)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_25086B668;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_25086B668;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_19;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          v6 = *v2;
          if (v6 == 95)
            goto LABEL_17;
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    v7 = *(v4 - 1);
    v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      v9 = 1;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    else
    {
      v9 = 0;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(_BYTE *)(result + 40) == (v9 != 0))
        goto LABEL_20;
      goto LABEL_27;
    }
LABEL_24:
    if (*(_BYTE *)(result + 40) != (v9 != 1))
      goto LABEL_27;
    goto LABEL_20;
  }
  if ((*(_BYTE *)(a2 + 88) & 8) == 0)
  {
    v6 = *(v3 - 1);
    if (v6 == 95)
      goto LABEL_17;
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(_BYTE *)(result + 40) != 1)
        goto LABEL_27;
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(_QWORD *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(_BYTE *)(result + 40))
    goto LABEL_20;
LABEL_27:
  v10 = *(_QWORD *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void (__cdecl **v6)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_25086B6B0;
  v2 = (std::locale *)(a1 + 2);
  v3 = (std::__shared_weak_count *)a1[8];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1];
  if (v6)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v6 + 1))(v6);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&unk_25086B6B0;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  operator delete(a1);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::vector<std::csub_match>::size_type v5;
  uint64_t v6;
  const char *v7;
  BOOL v8;
  char v9;
  std::sub_match<const char *> *begin;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  std::sub_match<const char *> *v16;
  uint64_t v17;
  std::vector<std::csub_match> __p;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v20 = 0xAAAAAAAAAAAAAAAALL;
  v22 = 0xAAAAAAAAAAAAAA00;
  v24 = v4;
  v21 = 0;
  v23 = 0uLL;
  LOBYTE(v24) = 0;
  BYTE8(v24) = 0;
  v25 = 0;
  memset(&__p, 0, sizeof(__p));
  v5 = (*(_DWORD *)(a1 + 44) + 1);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)&v19 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)&v19 + 1) = v19;
  LOBYTE(v20) = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v5, (std::vector<std::csub_match>::const_reference)&v19);
  *((_QWORD *)&v20 + 1) = v6;
  v21 = v6;
  LOBYTE(v22) = 0;
  v23 = v19;
  LOBYTE(v24) = v20;
  v25 = v6;
  BYTE8(v24) = 1;
  v7 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v8 = v7 == *(const char **)(a2 + 8);
  else
    v8 = 0;
  v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v7, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = 1;
  do
  {
    v16 = &begin[v15];
    v17 = v14 + 24 * (v13 + v12);
    *(std::pair<const char *, const char *> *)v17 = v16->std::pair<const char *, const char *>;
    *(_BYTE *)(v17 + 16) = v16->matched;
    v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_236E224DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  void *v25;
  void *v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void *v33;
  void *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  _BYTE v45[96];
  std::vector<std::csub_match>::value_type __x;
  char *v47;
  char *v48;
  unint64_t v49;

  v47 = 0;
  v48 = 0;
  v49 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.second = a3;
    *(_QWORD *)&__x.matched = 0xAAAAAAAAAAAAAA00;
    __x.first = a3;
    *(_DWORD *)v45 = 0;
    memset(&v45[8], 0, 85);
    v48 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v47, (uint64_t)v45);
    if (*(_QWORD *)&v45[56])
    {
      *(_QWORD *)&v45[64] = *(_QWORD *)&v45[56];
      operator delete(*(void **)&v45[56]);
    }
    if (*(_QWORD *)&v45[32])
    {
      *(_QWORD *)&v45[40] = *(_QWORD *)&v45[32];
      operator delete(*(void **)&v45[32]);
    }
    v13 = v48;
    *((_DWORD *)v48 - 24) = 0;
    *((_QWORD *)v13 - 11) = a2;
    *((_QWORD *)v13 - 10) = a2;
    *((_QWORD *)v13 - 9) = a3;
    v14 = *((_QWORD *)v13 - 8);
    v15 = *(unsigned int *)(a1 + 28);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v13 - 7) - v14) >> 3);
    if (v15 <= v16)
    {
      if (v15 < v16)
        *((_QWORD *)v13 - 7) = v14 + 24 * v15;
    }
    else
    {
      std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
      v13 = v48;
    }
    v17 = *((_QWORD *)v13 - 5);
    v18 = *(unsigned int *)(a1 + 32);
    v19 = (*((_QWORD *)v13 - 4) - v17) >> 4;
    if (v18 <= v19)
    {
      if (v18 < v19)
        *((_QWORD *)v13 - 4) = v17 + 16 * v18;
    }
    else
    {
      std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v18 - v19);
      v13 = v48;
    }
    *((_QWORD *)v13 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *(v13 - 4) = a6;
    v20 = 1;
    while (2)
    {
      if ((v20 & 0xFFF) == 0 && (int)(v20 >> 12) >= (int)a3 - (int)a2)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v22 = *((_QWORD *)v13 - 2);
      if (v22)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v13 - 96);
      switch(*((_DWORD *)v13 - 24))
      {
        case 0xFFFFFC18:
          v23 = (const char *)*((_QWORD *)v13 - 10);
          if ((a5 & 0x20) != 0 && v23 == a2 || (a5 & 0x1000) != 0 && v23 != a3)
            goto LABEL_26;
          v36 = *a4;
          *(_QWORD *)v36 = a2;
          *(_QWORD *)(v36 + 8) = v23;
          *(_BYTE *)(v36 + 16) = 1;
          v37 = *((_QWORD *)v13 - 8);
          v38 = *((_QWORD *)v13 - 7) - v37;
          if (v38)
          {
            v39 = 0xAAAAAAAAAAAAAAABLL * (v38 >> 3);
            v40 = (_BYTE *)(v37 + 16);
            v41 = 1;
            do
            {
              v42 = v36 + 24 * v41;
              *(_OWORD *)v42 = *((_OWORD *)v40 - 1);
              v43 = *v40;
              v40 += 24;
              *(_BYTE *)(v42 + 16) = v43;
            }
            while (v39 > v41++);
          }
          v6 = 1;
          v21 = v47;
          if (!v47)
            return v6;
          goto LABEL_37;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_16;
        case 0xFFFFFC1F:
LABEL_26:
          v24 = v48;
          v25 = (void *)*((_QWORD *)v48 - 5);
          if (v25)
          {
            *((_QWORD *)v48 - 4) = v25;
            operator delete(v25);
          }
          v26 = (void *)*((_QWORD *)v24 - 8);
          if (v26)
          {
            *((_QWORD *)v24 - 7) = v26;
            operator delete(v26);
          }
          v48 = v24 - 96;
          goto LABEL_16;
        case 0xFFFFFC20:
          *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v45[64] = v27;
          *(_OWORD *)&v45[80] = v27;
          *(_OWORD *)&v45[32] = v27;
          *(_OWORD *)&v45[48] = v27;
          *(_OWORD *)v45 = v27;
          *(_OWORD *)&v45[16] = v27;
          std::__state<char>::__state((uint64_t)v45, (__int128 *)v13 - 6);
          (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v13 - 2) + 24))(*((_QWORD *)v13 - 2), 1, v13 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v45[80] + 24))(*(_QWORD *)&v45[80], 0, v45);
          v28 = v48;
          if ((unint64_t)v48 >= v49)
          {
            v48 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v47, (uint64_t)v45);
            if (*(_QWORD *)&v45[56])
            {
              *(_QWORD *)&v45[64] = *(_QWORD *)&v45[56];
              operator delete(*(void **)&v45[56]);
            }
          }
          else
          {
            v29 = *(_OWORD *)&v45[16];
            *(_OWORD *)v48 = *(_OWORD *)v45;
            *((_OWORD *)v28 + 1) = v29;
            *((_QWORD *)v28 + 4) = 0;
            *((_QWORD *)v28 + 5) = 0;
            *((_QWORD *)v28 + 6) = 0;
            *((_QWORD *)v28 + 7) = 0;
            *((_OWORD *)v28 + 2) = *(_OWORD *)&v45[32];
            *((_QWORD *)v28 + 6) = *(_QWORD *)&v45[48];
            memset(&v45[32], 0, 24);
            *((_QWORD *)v28 + 8) = 0;
            *((_QWORD *)v28 + 9) = 0;
            *(_OWORD *)(v28 + 56) = *(_OWORD *)&v45[56];
            *((_QWORD *)v28 + 9) = *(_QWORD *)&v45[72];
            memset(&v45[56], 0, 24);
            v30 = *(_QWORD *)&v45[80];
            *(_QWORD *)(v28 + 85) = *(_QWORD *)&v45[85];
            *((_QWORD *)v28 + 10) = v30;
            v48 = v28 + 96;
          }
          if (*(_QWORD *)&v45[32])
          {
            *(_QWORD *)&v45[40] = *(_QWORD *)&v45[32];
            operator delete(*(void **)&v45[32]);
          }
LABEL_16:
          v21 = v47;
          v13 = v48;
          ++v20;
          if (v47 != v48)
            continue;
          v6 = 0;
          if (v47)
          {
LABEL_37:
            v31 = v48;
            v32 = v21;
            if (v48 != v21)
            {
              do
              {
                v33 = (void *)*((_QWORD *)v31 - 5);
                if (v33)
                {
                  *((_QWORD *)v31 - 4) = v33;
                  operator delete(v33);
                }
                v34 = (void *)*((_QWORD *)v31 - 8);
                if (v34)
                {
                  *((_QWORD *)v31 - 7) = v34;
                  operator delete(v34);
                }
                v31 -= 96;
              }
              while (v31 != v21);
              v32 = v47;
            }
            v48 = v21;
            operator delete(v32);
          }
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  return v6;
}

void sub_236E22908(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_236E2291C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::__state<char>::~__state((uint64_t *)va);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_236E22964(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_236E22978(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  uint64_t v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::sub_match<const char *> *v14;
  std::vector<std::csub_match>::pointer end;
  unint64_t v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) < __n)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v10;
    v12 = (std::sub_match<const char *> *)operator new(24 * v10);
    this->__begin_ = v12;
    this->__end_ = v12;
    this->__end_cap_.__value_ = &v12[v11];
    v13 = 24 * __n;
    v14 = &v12[__n];
    do
    {
      v12->std::pair<const char *, const char *> = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v12->matched = *(_QWORD *)&__u->matched;
      ++v12;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  end = this->__end_;
  v16 = end - begin;
  if (v16 >= __n)
    v17 = __n;
  else
    v17 = end - begin;
  if (v17)
  {
    v18 = begin;
    do
    {
      *v18++ = *__u;
      --v17;
    }
    while (v17);
  }
  if (__n <= v16)
  {
    v14 = &begin[__n];
LABEL_25:
    this->__end_ = v14;
    return;
  }
  v19 = &end[__n - v16];
  v20 = 24 * __n - 24 * v16;
  do
  {
    v21 = __u->std::pair<const char *, const char *>;
    *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
    end->std::pair<const char *, const char *> = v21;
    ++end;
    v20 -= 24;
  }
  while (v20);
  this->__end_ = v19;
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23B804D10](exception, 12);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_236E22B9C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23B804D10](exception, 16);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_236E22BE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::__state<char>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 5);
        if (v5)
        {
          *((_QWORD *)v3 - 4) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 8);
        if (v6)
        {
          *((_QWORD *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v22 = (void *)*((_QWORD *)v21 - 5);
      if (v22)
      {
        *((_QWORD *)v21 - 4) = v22;
        operator delete(v22);
      }
      v23 = (void *)*((_QWORD *)v21 - 8);
      if (v23)
      {
        *((_QWORD *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::sub_match<const char *> *value;
  std::vector<std::csub_match>::pointer end;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::sub_match<const char *> *v13;
  std::vector<std::csub_match>::size_type v14;
  std::pair<const char *, const char *> v15;
  std::sub_match<const char *> *v16;
  std::vector<std::csub_match>::size_type v17;
  std::sub_match<const char *> *v18;
  std::pair<const char *, const char *> *v19;
  std::pair<const char *, const char *> v20;
  std::vector<std::csub_match>::pointer begin;
  std::pair<const char *, const char *> v22;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = &end[__n];
      v14 = 24 * __n;
      do
      {
        v15 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    v17 = 24 * __n;
    v18 = &v16[__n];
    v19 = v16;
    do
    {
      v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      *v19 = v20;
      v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v22 = end[-1].std::pair<const char *, const char *>;
        *(_QWORD *)&v16[-1].matched = *(_QWORD *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
      operator delete(end);
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::pair<unsigned long, const char *> *value;
  std::pair<unsigned long, const char *> *end;
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  std::vector<std::pair<unsigned long, const char *>>::size_type v12;
  std::pair<unsigned long, const char *> *v13;
  size_t v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      v12 = 16 * __n;
      bzero(this->__end_, 16 * __n);
      end = (std::pair<unsigned long, const char *> *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((v7 + __n) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v9 = (char *)value - (char *)begin;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = (std::pair<unsigned long, const char *> *)&v11[16 * v7];
    v14 = __n;
    v15 = (std::pair<unsigned long, const char *> *)&v11[16 * v10];
    bzero(v13, v14 * 16);
    v16 = &v13[v14];
    if (end != begin)
    {
      do
      {
        v13[-1] = end[-1];
        --v13;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
      operator delete(end);
  }
}

uint64_t std::__state<char>::__state(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  size_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = (_BYTE *)*((_QWORD *)a2 + 5);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v8);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(_QWORD *)(a1 + 40) = &v9[v10];
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (_BYTE *)*((_QWORD *)a2 + 7);
  v11 = (_BYTE *)*((_QWORD *)a2 + 8);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFF0);
    *(_QWORD *)(a1 + 64) = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  v15 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 85) = *(_QWORD *)((char *)a2 + 85);
  *(_QWORD *)(a1 + 80) = v15;
  return a1;
}

void sub_236E23258(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  uint64_t v7;
  void *v8;
  char *v9;
  char *v10;
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  std::string::size_type v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  int v22;
  std::string *p_dst;
  std::string::size_type size;
  int v25;
  std::string *p_p;
  _BYTE *v27;
  char *v28;
  _BYTE *v29;
  int64_t v30;
  char *v31;
  char *v32;
  int v33;
  char *v34;
  std::string::size_type v35;
  std::string *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  std::string::size_type v40;
  std::string *v41;
  std::string *v42;
  std::regex_traits<char>::char_class_type classname;
  char *v44;
  std::string::size_type v45;
  unint64_t v46;
  __int128 v47;
  std::string::size_type v48;
  std::string *v49;
  std::string *v50;
  std::string::size_type v51;
  char *v53;
  std::string v54;
  std::string __p;
  std::string v56;
  std::string __dst;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_172;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = (uint64_t)(v5 == 94 ? a2 + 2 : a2 + 1);
    v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    if ((char *)v7 == a3)
      goto LABEL_172;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(_BYTE *)v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if ((char *)v7 == a3)
      goto LABEL_172;
    v53 = a3 - 4;
    while (1)
    {
      v9 = (char *)v7;
      v10 = a3;
      if ((char *)v7 == a3)
        goto LABEL_14;
      v11 = *(unsigned __int8 *)v7;
      v10 = (char *)v7;
      if (v11 == 93)
        goto LABEL_14;
      v10 = (char *)(v7 + 1);
      memset(&__p, 0, sizeof(__p));
      if ((char *)(v7 + 1) != a3 && v11 == 91)
      {
        v12 = *v10;
        switch(v12)
        {
          case '.':
            v17 = (_BYTE *)(v7 + 2);
            if ((uint64_t)&a3[-v7 - 2] < 2)
              goto LABEL_171;
            v18 = &v53[-v7];
            v19 = (char *)(v7 + 2);
            v20 = (char *)(v7 + 3);
            if (*v17 != 46)
              goto LABEL_44;
LABEL_43:
            if (*v20 != 93)
            {
LABEL_44:
              while (v18)
              {
                --v18;
                v19 = v20;
                v21 = *v20++;
                if (v21 == 46)
                  goto LABEL_43;
              }
LABEL_171:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
            }
            if (v19 == a3)
              goto LABEL_171;
            std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&__dst, a1, v17, v19);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            __p = __dst;
            size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = __p.__r_.__value_.__l.__size_;
            if (size - 1 >= 2)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
            v10 = v19 + 2;
            v7 = *(_DWORD *)(a1 + 24) & 0x1F0;
LABEL_59:
            if (v10 == a3)
              goto LABEL_61;
            goto LABEL_60;
          case ':':
            if ((uint64_t)&a3[-v7 - 2] < 2)
              goto LABEL_171;
            v15 = 0;
            v16 = v7;
            if (*(_BYTE *)(v7 + 2) != 58)
              goto LABEL_38;
LABEL_37:
            if (*(_BYTE *)(v16 + 3) != 93)
            {
LABEL_38:
              while (&v53[-v7] != (char *)v15)
              {
                ++v15;
                v16 = v7 + v15;
                if (*(_BYTE *)(v7 + v15 + 2) == 58)
                  goto LABEL_37;
              }
              goto LABEL_171;
            }
            if ((char *)(v7 + v15 + 2) == a3)
              goto LABEL_171;
            v22 = *(_DWORD *)(a1 + 24);
            memset(&__dst, 170, sizeof(__dst));
            if (v15 >= 0x7FFFFFFFFFFFFFF8)
              std::string::__throw_length_error[abi:ne180100]();
            if (v15 >= 0x17)
            {
              v38 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v15 | 7) != 0x17)
                v38 = v15 | 7;
              v39 = v38 + 1;
              p_dst = (std::string *)operator new(v38 + 1);
              __dst.__r_.__value_.__l.__size_ = v15;
              __dst.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v15;
              p_dst = &__dst;
              if (!v15)
              {
LABEL_96:
                p_dst->__r_.__value_.__s.__data_[0] = 0;
                v40 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v41 = &__dst;
                else
                  v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v40 = __dst.__r_.__value_.__l.__size_;
                (*(void (**)(_QWORD, std::string *, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v41, (char *)v41 + v40);
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v42 = &__dst;
                else
                  v42 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                classname = std::__get_classname((const char *)v42, v22 & 1);
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__dst.__r_.__value_.__l.__data_);
                if (!classname)
                  std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
                v37 = 0;
                *((_DWORD *)v8 + 40) |= classname;
                v7 = (uint64_t)&v9[v15 + 4];
                v28 = v9;
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_88:
                  v10 = v28;
                  if ((v37 & 1) == 0)
                    goto LABEL_15;
                  goto LABEL_14;
                }
                goto LABEL_162;
              }
            }
            memcpy(p_dst, v9 + 2, v15);
            p_dst = (std::string *)((char *)p_dst + v15);
            goto LABEL_96;
          case '=':
            if ((uint64_t)&a3[-v7 - 2] < 2)
              goto LABEL_171;
            v13 = 0;
            v14 = v7;
            if (*(_BYTE *)(v7 + 2) != 61)
              goto LABEL_26;
LABEL_25:
            if (*(_BYTE *)(v14 + 3) != 93)
            {
LABEL_26:
              while (&v53[-v7] != v13)
              {
                ++v13;
                v14 = (uint64_t)&v13[v7];
                if (v13[v7 + 2] == 61)
                  goto LABEL_25;
              }
              goto LABEL_171;
            }
            v34 = &v13[v7 + 2];
            if (v34 == a3)
              goto LABEL_171;
            memset(&__dst, 170, sizeof(__dst));
            std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&__dst, a1, (_BYTE *)(v7 + 2), v34);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              v35 = __dst.__r_.__value_.__l.__size_;
              if (!__dst.__r_.__value_.__l.__size_)
LABEL_174:
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              memset(&v56, 170, sizeof(v56));
              v36 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            else
            {
              v35 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              if (!*((_BYTE *)&__dst.__r_.__value_.__s + 23))
                goto LABEL_174;
              v36 = &__dst;
              memset(&v56, 170, sizeof(v56));
            }
            std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v36, (char *)v36 + v35, &v56.__r_.__value_.__l.__data_);
            v45 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
            if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v45 = v56.__r_.__value_.__l.__size_;
            if (v45)
            {
              v46 = *((_QWORD *)v8 + 18);
              if (v46 >= *((_QWORD *)v8 + 19))
              {
                *((_QWORD *)v8 + 18) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v8 + 17, (uint64_t)&v56);
                if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_143;
              }
              else
              {
                if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(*((std::string **)v8 + 18), v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
                }
                else
                {
                  v47 = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
                  *(_QWORD *)(v46 + 16) = *((_QWORD *)&v56.__r_.__value_.__l + 2);
                  *(_OWORD *)v46 = v47;
                }
                *((_QWORD *)v8 + 18) = v46 + 24;
                *((_QWORD *)v8 + 18) = v46 + 24;
                if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_143;
              }
LABEL_136:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_137;
            }
            else
            {
              v48 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v48 = __dst.__r_.__value_.__l.__size_;
              if (v48 == 2)
              {
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v50 = &__dst;
                else
                  v50 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v8, v50->__r_.__value_.__s.__data_[0], v50->__r_.__value_.__s.__data_[1]);
              }
              else
              {
                if (v48 != 1)
                  std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v49 = &__dst;
                else
                  v49 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, v49->__r_.__value_.__s.__data_[0]);
              }
              if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_136;
LABEL_143:
              operator delete(v56.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_137:
                v37 = 0;
                v7 += (uint64_t)(v13 + 4);
                v28 = v9;
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_88;
                goto LABEL_162;
              }
            }
            operator delete(__dst.__r_.__value_.__l.__data_);
            goto LABEL_137;
        }
      }
      v7 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) != 0x40 || v11 != 92)
      {
        std::string::operator=(&__p, v11);
        goto LABEL_59;
      }
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0)
      {
        v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v9 + 1, a3, &__p);
        if (v10 == a3)
          goto LABEL_61;
      }
      else
      {
        v10 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, v9 + 1, a3, &__p, (uint64_t)v8);
        v7 = 0;
        if (v10 == a3)
          goto LABEL_61;
      }
LABEL_60:
      v25 = *v10;
      if (v25 != 93)
      {
        v27 = v10 + 1;
        if (v10 + 1 != a3 && v25 == 45 && *v27 != 93)
        {
          memset(&v56, 0, sizeof(v56));
          v28 = v10 + 2;
          if (v10 + 2 == a3 || *v27 != 91 || *v28 != 46)
          {
            if ((v7 | 0x40) == 0x40)
            {
              LODWORD(v27) = *v27;
              if ((_DWORD)v27 == 92)
              {
                if ((_DWORD)v7)
                  v44 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v10 + 2, a3, &v56);
                else
                  v44 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, v10 + 2, a3, &v56, (uint64_t)v8);
                v28 = v44;
                goto LABEL_154;
              }
            }
            else
            {
              LOBYTE(v27) = *v27;
            }
            std::string::operator=(&v56, (std::string::value_type)v27);
            goto LABEL_154;
          }
          v29 = v10 + 3;
          if (a3 - (v10 + 3) < 2)
            goto LABEL_173;
          v30 = a3 - 5 - v10;
          v31 = v10 + 3;
          v32 = v29 + 1;
          if (*v29 != 46)
            goto LABEL_78;
LABEL_77:
          if (*v32 != 93)
          {
LABEL_78:
            while (v30)
            {
              --v30;
              v31 = v32;
              v33 = *v32++;
              if (v33 == 46)
                goto LABEL_77;
            }
LABEL_173:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
          }
          if (v31 == a3)
            goto LABEL_173;
          std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&__dst, a1, v29, v31);
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v56.__r_.__value_.__l.__data_);
          v56 = __dst;
          v51 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v51 = v56.__r_.__value_.__l.__size_;
          if (v51 - 1 >= 2)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
          v28 = v31 + 2;
LABEL_154:
          __dst = __p;
          memset(&__p, 0, sizeof(__p));
          v54 = v56;
          memset(&v56, 0, sizeof(v56));
          std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v8, (char *)&__dst, (uint64_t)&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v54.__r_.__value_.__l.__data_);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_160;
LABEL_156:
            if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_157;
LABEL_161:
            operator delete(v56.__r_.__value_.__l.__data_);
            v37 = 1;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_88;
          }
          else
          {
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_156;
LABEL_160:
            operator delete(__dst.__r_.__value_.__l.__data_);
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_161;
LABEL_157:
            v37 = 1;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_88;
          }
LABEL_162:
          operator delete(__p.__r_.__value_.__l.__data_);
          v10 = v28;
          if ((v37 & 1) == 0)
            goto LABEL_15;
          goto LABEL_14;
        }
      }
LABEL_61:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_)
        {
          if (__p.__r_.__value_.__l.__size_ == 1)
          {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_68:
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, p_p->__r_.__value_.__s.__data_[0]);
LABEL_87:
            v37 = 1;
            v28 = v10;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_88;
            goto LABEL_162;
          }
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_86:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v8, p_p->__r_.__value_.__s.__data_[0], p_p->__r_.__value_.__s.__data_[1]);
          goto LABEL_87;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
      {
        p_p = &__p;
        if (HIBYTE(__p.__r_.__value_.__r.__words[2]) == 1)
          goto LABEL_68;
        goto LABEL_86;
      }
LABEL_14:
      v7 = (uint64_t)v10;
LABEL_15:
      if ((char *)v7 == v9)
      {
        if (v9 != a3)
        {
          if (*v9 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
            ++v9;
          }
          if (v9 != a3 && *v9 == 93)
            return v9 + 1;
        }
LABEL_172:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
  }
  return a2;
}

void sub_236E23BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  *(_QWORD *)(v32 + 144) = v33;
  if (a32 < 0)
    operator delete(__p);
  if (*(char *)(v34 - 89) < 0)
    operator delete(*(void **)(v34 - 112));
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23B804D10](exception, 11);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_236E23CCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23B804D10](exception, 3);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_236E23DA0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, std::string *this)
{
  std::basic_regex<char>::value_type *v4;
  unsigned __int8 *result;
  uint64_t v6;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type v8;
  std::string::value_type v9;
  int v10;
  int v11;
  unsigned __int8 v12;
  char v13;
  unsigned __int8 v14;
  char v15;
  std::string::value_type v16;

  v4 = a2;
  if (a2 == a3)
    return (unsigned __int8 *)v4;
  switch(*a2)
  {
    case '0':
      if (this)
      {
        std::string::operator=(this, 0);
        return (unsigned __int8 *)(v4 + 1);
      }
      else
      {
        v7 = 0;
LABEL_53:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return (unsigned __int8 *)(v4 + 1);
      }
    case 'c':
      if (a2 + 1 == a3)
        goto LABEL_60;
      v8 = a2[1];
      if (((v8 & 0xDF) - 65) > 0x19u)
        goto LABEL_60;
      v9 = v8 & 0x1F;
      if (this)
      {
        std::string::operator=(this, v9);
        v4 += 2;
        return (unsigned __int8 *)v4;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v9);
      result = (unsigned __int8 *)(v4 + 2);
      break;
    case 'f':
      if (this)
        std::string::operator=(this, 12);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
      return (unsigned __int8 *)(v4 + 1);
    case 'n':
      if (this)
        std::string::operator=(this, 10);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
      return (unsigned __int8 *)(v4 + 1);
    case 'r':
      if (this)
        std::string::operator=(this, 13);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
      return (unsigned __int8 *)(v4 + 1);
    case 't':
      if (this)
        std::string::operator=(this, 9);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
      return (unsigned __int8 *)(v4 + 1);
    case 'u':
      if (a2 + 1 != a3)
      {
        v10 = a2[1];
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6)
        {
          v4 = a2 + 2;
          if (a2 + 2 != a3)
          {
            v11 = *v4;
            if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
              goto LABEL_35;
          }
        }
      }
      goto LABEL_60;
    case 'v':
      if (this)
        std::string::operator=(this, 11);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
      return (unsigned __int8 *)(v4 + 1);
    case 'x':
LABEL_35:
      if (v4 + 1 == a3)
        goto LABEL_60;
      v12 = v4[1];
      v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
        goto LABEL_40;
      v12 |= 0x20u;
      if ((v12 - 97) >= 6u)
        goto LABEL_60;
      v13 = -87;
LABEL_40:
      if (v4 + 2 == a3)
        goto LABEL_60;
      v14 = v4[2];
      v15 = -48;
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      {
        v14 |= 0x20u;
        if ((v14 - 97) >= 6u)
LABEL_60:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        v15 = -87;
      }
      v16 = v14 + 16 * (v12 + v13) + v15;
      if (this)
        std::string::operator=(this, v16);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
      return (unsigned __int8 *)(v4 + 3);
    default:
      v6 = *a2;
      if ((_DWORD)v6 == 95 || (v6 & 0x80) == 0 && (a1->__traits_.__ct_->__tab_[v6] & 0x500) != 0)
        goto LABEL_60;
      v7 = *a2;
      if (!this)
        goto LABEL_53;
      std::string::operator=(this, v6);
      return (unsigned __int8 *)(v4 + 1);
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  std::__node<char> *v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  char *v8;
  std::__node<char> *first;
  std::__node<char> *v10;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (char *)operator new(0x30uLL);
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_25086B740;
    *((_QWORD *)v8 + 1) = first;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (char *)operator new(0x30uLL);
    v10 = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_25086B788;
    *((_QWORD *)v8 + 1) = v10;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = v2;
    goto LABEL_6;
  }
  v5 = (std::__node<char> *)operator new(0x18uLL);
  end = this->__end_;
  v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_25086B7D0;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LOBYTE(v5[2].__vftable) = v2;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_236E24268(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23B804D10](exception, 4);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_236E242E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  std::__node<char> *v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  char *v11;

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new(0x30uLL);
    v9 = v8;
    first = this->__end_->__first_;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new(0x30uLL);
    v9 = v8;
    first = this->__end_->__first_;
    goto LABEL_6;
  }
  v5 = (std::__node<char> *)operator new(0x18uLL);
  end = this->__end_;
  v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_25086B8A8;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LODWORD(v5[2].__vftable) = __i;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_25086B740;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_25086B740;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v4 + 8);
  }
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_25086B788;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_25086B788;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_25086B818;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_25086B818;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(_BYTE *)(v3 + 16)
    || (v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3, v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  v6 = result;
  if (v4 >= 1)
  {
    v7 = 0;
    while (1)
    {
      v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)v3 + v7));
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v7));
      if (v8 != (_DWORD)result)
        goto LABEL_3;
      if (v4 == ++v7)
      {
        v5 = *(_QWORD *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v5 + v4;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v6 + 8);
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_25086B860;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_25086B860;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (!*(_BYTE *)(v3 + 24 * v2 + 16)
    || (v4 = (unsigned __int8 **)(v3 + 24 * v2),
        v5 = *v4,
        v6 = v4[1] - *v4,
        v7 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    v8 = v6;
    v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      v11 = *v5++;
      v10 = v11;
      v12 = *v9++;
      if (v10 != v12)
        goto LABEL_3;
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v7 + v6;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    *(_QWORD *)(a2 + 80) = *((_QWORD *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 40);
    v5 = *(_BYTE **)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 40) = v13;
        *(_QWORD *)(a1 + 48) = v15;
        *(_QWORD *)(a1 + 56) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 40);
  v7 = *(_BYTE **)(a1 + 40);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 48) = v15;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  BOOL v13;
  std::locale v15;
  std::string v16;

  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v15, v11);
  std::locale::name(&v16, &v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = v16.__r_.__value_.__l.__size_ != 1 || *v16.__r_.__value_.__l.__data_ != 67;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = SHIBYTE(v16.__r_.__value_.__r.__words[2]) != 1 || v16.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v15);
  *(_BYTE *)(a1 + 171) = v13;
  return a1;
}

void sub_236E25080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  uint64_t v9;
  std::locale *v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v9 + 136));
  v14 = *(void **)(v9 + 112);
  if (v14)
  {
    *(_QWORD *)(v9 + 120) = v14;
    operator delete(v14);
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
    {
LABEL_3:
      v16 = *v12;
      if (!*v12)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
      goto LABEL_3;
  }
  *(_QWORD *)(v9 + 72) = v15;
  operator delete(v15);
  v16 = *v12;
  if (!*v12)
  {
LABEL_5:
    std::locale::~locale(v10);
    v17 = *(_QWORD *)(v9 + 8);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(_QWORD *)(v9 + 48) = v16;
  operator delete(v16);
  goto LABEL_5;
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0)
LABEL_9:
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale *v1;

  v1 = std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);
  operator delete(v1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v2;
  char *current;
  char *last;
  char v6;
  char v7;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v14;
  char v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  void **v20;
  uint64_t v21;
  unsigned __int8 *v22;
  BOOL v23;
  int v24;
  size_t v25;
  char *v26;
  size_t v27;
  int v28;
  _BOOL4 v29;
  int v30;
  size_t v31;
  char *v32;
  size_t v33;
  int v34;
  BOOL v35;
  _BOOL4 negate;
  int v37;
  uint64_t v38;
  void *v39;
  unsigned __int8 v40;
  std::vector<char>::pointer v41;
  unint64_t v42;
  int v43;
  std::regex_traits<char>::char_class_type v44;
  char v45;
  int v46;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v48;
  char *v49;
  std::vector<std::pair<std::string, std::string>>::pointer v50;
  std::vector<std::pair<std::string, std::string>>::pointer v51;
  unsigned int v52;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  void **v57;
  uint64_t v58;
  unsigned __int8 *v59;
  BOOL v60;
  int v61;
  size_t v62;
  char *v63;
  size_t v64;
  int v65;
  _BOOL4 v66;
  int v67;
  size_t v68;
  char *v69;
  size_t v70;
  int v71;
  BOOL v72;
  std::vector<std::string>::pointer v73;
  uint64_t v74;
  int64_t v75;
  unint64_t v76;
  unint64_t v77;
  const void *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  BOOL i;
  std::string *v83;
  void *v84;
  int v85;
  std::string *v86;
  uint64_t v87;
  std::string *v88;
  const void *v89;
  void *v90;
  std::vector<std::string>::pointer v91;
  int64_t v92;
  unint64_t v93;
  void *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  std::string *v99;
  void *v100;
  int v101;
  void **v102;
  uint64_t v103;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v106;
  std::regex_traits<char>::char_class_type neg_mask;
  int v108;
  uint64_t v109;
  const void *v110;
  uint64_t v111;
  std::string::size_type size;
  int v113;
  std::vector<std::string>::pointer v114;
  std::string::size_type v115;
  std::regex_traits<char>::char_class_type v116;
  int v117;
  std::__node<char> *first;
  int v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  std::string::value_type *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  char v127;
  char v128;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  _BOOL4 v134;
  _BOOL4 v135;
  _BOOL4 v136;
  void *v137[3];
  __int16 __src;
  void *__p[3];

  v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v38 = 0;
    negate = this->__negate_;
    goto LABEL_244;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_60;
  v6 = *current;
  LOBYTE(__src) = *current;
  v7 = current[1];
  HIBYTE(__src) = v7;
  if (this->__icase_)
  {
    LOBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>(&__src, (uint64_t)&this->__traits_, __p, (uint64_t)__p);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(__p[2]))
      goto LABEL_8;
LABEL_60:
    negate = 0;
    v38 = 1;
    v40 = *v2->__current_;
    LOBYTE(__src) = v40;
    if (!this->__icase_)
      goto LABEL_62;
    goto LABEL_61;
  }
  v39 = __p[1];
  operator delete(__p[0]);
  if (!v39)
    goto LABEL_60;
LABEL_8:
  begin = this->__digraphs_.__begin_;
  v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    p_second = &begin->second;
    while (__src != *(p_second - 1) || HIBYTE(__src) != *p_second)
    {
      p_second += 2;
      if (!--v11)
        goto LABEL_17;
    }
    goto LABEL_210;
  }
LABEL_17:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
    goto LABEL_165;
  }
  memset(v137, 170, sizeof(v137));
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x2AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAA00AAAALL;
  LOWORD(__p[0]) = __src;
  (*(void (**)(void **__return_ptr, const std::collate<char> *, void **, char *))(*(_QWORD *)this->__traits_.__col_
                                                                                           + 32))(v137, this->__traits_.__col_, __p, (char *)__p + 2);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v14 = this->__ranges_.__begin_;
  v15 = HIBYTE(v137[2]);
  v16 = (char *)this->__ranges_.__end_ - (char *)v14;
  if (v16)
  {
    v17 = 0;
    v18 = v16 / 48;
    v128 = HIBYTE(v137[2]);
    if (SHIBYTE(v137[2]) >= 0)
      v19 = (void *)HIBYTE(v137[2]);
    else
      v19 = v137[1];
    if (SHIBYTE(v137[2]) >= 0)
      v20 = v137;
    else
      v20 = (void **)v137[0];
    if (v18 <= 1)
      v21 = 1;
    else
      v21 = v16 / 48;
    v22 = (unsigned __int8 *)&v14->second.__r_.__value_.__r.__words[2] + 7;
    v23 = 1;
    do
    {
      v24 = (char)*(v22 - 24);
      if (v24 >= 0)
        v25 = *(v22 - 24);
      else
        v25 = *(_QWORD *)(v22 - 39);
      if (v24 >= 0)
        v26 = (char *)(v22 - 47);
      else
        v26 = *(char **)(v22 - 47);
      if (v25 >= (unint64_t)v19)
        v27 = (size_t)v19;
      else
        v27 = v25;
      v28 = memcmp(v20, v26, v27);
      v29 = (unint64_t)v19 >= v25;
      if (v28)
        v29 = v28 >= 0;
      if (v29)
      {
        v30 = (char)*v22;
        if (v30 >= 0)
          v31 = *v22;
        else
          v31 = *(_QWORD *)(v22 - 15);
        if (v30 >= 0)
          v32 = (char *)(v22 - 23);
        else
          v32 = *(char **)(v22 - 23);
        if ((unint64_t)v19 >= v31)
          v33 = v31;
        else
          v33 = (size_t)v19;
        v34 = memcmp(v32, v20, v33);
        v35 = v31 >= (unint64_t)v19;
        if (v34)
          v35 = v34 >= 0;
        if (v35)
        {
          negate = 1;
          v37 = 5;
          goto LABEL_160;
        }
      }
      v23 = ++v17 < v18;
      v22 += 48;
    }
    while (v21 != v17);
    v37 = 0;
    negate = 0;
LABEL_160:
    p_traits = &this->__traits_;
    v15 = v128;
  }
  else
  {
    v23 = 0;
    v37 = 0;
    negate = 0;
  }
  if (v15 < 0)
    operator delete(v137[0]);
  if (!v23)
  {
LABEL_165:
    if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
      goto LABEL_192;
    v136 = negate;
    memset(__p, 170, sizeof(__p));
    std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)p_traits, __p, __p);
    v91 = this->__equivalences_.__begin_;
    v92 = (char *)this->__equivalences_.__end_ - (char *)v91;
    if (v92)
    {
      v93 = v92 / 24;
      v94 = __p[1];
      if (SHIBYTE(__p[2]) >= 0)
        v95 = (void *)HIBYTE(__p[2]);
      else
        v95 = __p[1];
      if (SHIBYTE(__p[2]) < 0)
      {
        v133 = SHIBYTE(__p[2]);
        v109 = 0;
        v110 = __p[0];
        if (v93 <= 1)
          v111 = 1;
        else
          v111 = v92 / 24;
        v98 = 1;
        do
        {
          size = HIBYTE(v91->__r_.__value_.__r.__words[2]);
          v113 = (char)size;
          if ((size & 0x80u) != 0)
            size = v91->__r_.__value_.__l.__size_;
          if (v95 == (void *)size)
          {
            v114 = v113 >= 0 ? v91 : (std::vector<std::string>::pointer)v91->__r_.__value_.__r.__words[0];
            if (!memcmp(v110, v114, (size_t)v94))
            {
              negate = 1;
              v37 = 5;
              if ((v133 & 0x80000000) == 0)
                goto LABEL_189;
              goto LABEL_188;
            }
          }
          v98 = ++v109 < v93;
          ++v91;
        }
        while (v111 != v109);
        v37 = 0;
        negate = v136;
        if ((v133 & 0x80000000) == 0)
          goto LABEL_189;
LABEL_188:
        operator delete(__p[0]);
        goto LABEL_189;
      }
      if (!HIBYTE(__p[2]))
      {
        v115 = HIBYTE(v91->__r_.__value_.__r.__words[2]);
        if ((v115 & 0x80u) != 0)
          v115 = v91->__r_.__value_.__l.__size_;
        if (v115 == HIBYTE(__p[2]))
        {
          negate = 1;
          goto LABEL_191;
        }
        v120 = 0;
        if (v93 <= 1)
          v121 = 1;
        else
          v121 = v93;
        v122 = v121 - 1;
        v123 = &v91[1].__r_.__value_.__s.__data_[8];
        negate = v136;
        while (v122 != v120)
        {
          ++v120;
          v124 = v123[15];
          v126 = *(_QWORD *)v123;
          v123 += 24;
          v125 = v126;
          if ((v124 & 0x80u) != 0)
            v124 = v125;
          if (v95 == (void *)v124)
          {
            v98 = v120 < v93;
            negate = 1;
            v37 = 5;
            goto LABEL_189;
          }
        }
        v98 = 0;
        v37 = 0;
LABEL_189:
        if (v98)
          goto LABEL_190;
LABEL_192:
        if ((char)__src < 0)
        {
          neg_mask = this->__neg_mask_;
        }
        else
        {
          mask = this->__mask_;
          tab = this->__traits_.__ct_->__tab_;
          v106 = tab[__src];
          if (((v106 & mask) != 0 || __src == 95 && (mask & 0x80) != 0)
            && (SHIBYTE(__src) & 0x80000000) == 0
            && ((tab[HIBYTE(__src)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(__src) == 95))
          {
            goto LABEL_210;
          }
          neg_mask = this->__neg_mask_;
          if ((neg_mask & v106) != 0 || __src == 95 && (neg_mask & 0x80) != 0)
          {
LABEL_209:
            v108 = negate;
LABEL_211:
            negate = v108;
            v38 = 2;
            goto LABEL_244;
          }
        }
        if ((SHIBYTE(__src) & 0x80000000) == 0)
        {
          if ((this->__traits_.__ct_->__tab_[HIBYTE(__src)] & neg_mask) == 0)
          {
            v108 = 1;
            if (HIBYTE(__src) != 95 || (neg_mask & 0x80) == 0)
              goto LABEL_211;
          }
          goto LABEL_209;
        }
LABEL_210:
        v108 = 1;
        goto LABEL_211;
      }
      v96 = 0;
      if (v93 <= 1)
        v97 = 1;
      else
        v97 = v92 / 24;
      v98 = 1;
      do
      {
        v99 = &v91[v96];
        v100 = (void *)HIBYTE(v99->__r_.__value_.__r.__words[2]);
        v101 = (char)v100;
        if ((char)v100 < 0)
          v100 = (void *)v99->__r_.__value_.__l.__size_;
        if (v95 == v100)
        {
          if (v101 < 0)
            v99 = (std::string *)v99->__r_.__value_.__r.__words[0];
          v102 = __p;
          v103 = HIBYTE(__p[2]);
          while (*(unsigned __int8 *)v102 == v99->__r_.__value_.__s.__data_[0])
          {
            v102 = (void **)((char *)v102 + 1);
            v99 = (std::string *)((char *)v99 + 1);
            if (!--v103)
            {
              negate = 1;
              v37 = 5;
              if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
                goto LABEL_189;
              goto LABEL_188;
            }
          }
        }
        v98 = ++v96 < v93;
      }
      while (v96 != v97);
    }
    v98 = 0;
    v37 = 0;
    negate = v136;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_189;
    goto LABEL_188;
  }
LABEL_190:
  if (v37)
  {
LABEL_191:
    v38 = 2;
    goto LABEL_244;
  }
  v38 = 2;
  v40 = *v2->__current_;
  LOBYTE(__src) = v40;
  if (this->__icase_)
  {
LABEL_61:
    v40 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v40);
    LOBYTE(__src) = v40;
  }
LABEL_62:
  v41 = this->__chars_.__begin_;
  v42 = this->__chars_.__end_ - v41;
  if (v42)
  {
    if (v42 <= 1)
      v42 = 1;
    while (1)
    {
      v43 = *v41++;
      if (v43 == v40)
        break;
      if (!--v42)
        goto LABEL_67;
    }
LABEL_243:
    negate = 1;
    goto LABEL_244;
  }
LABEL_67:
  v44 = this->__neg_mask_;
  if (v44 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v40 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v40] & v44) == 0)
    {
      v46 = (v44 >> 7) & 1;
      v45 = v40 == 95 ? v46 : 0;
    }
    else
    {
      v45 = 1;
    }
    end = this->__neg_chars_.__end_;
    v48 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v40, end - this->__neg_chars_.__begin_);
    v49 = v48 ? v48 : end;
    if ((v45 & 1) == 0 && v49 == end)
      goto LABEL_243;
  }
  v50 = this->__ranges_.__begin_;
  v51 = this->__ranges_.__end_;
  if (v50 != v51)
  {
    memset(v137, 170, sizeof(v137));
    v134 = negate;
    if (this->__collate_)
    {
      __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
      __p[2] = (void *)0x1AAAAAAAAAAAAAALL;
      __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
      LOWORD(__p[0]) = v40;
      (*(void (**)(void **__return_ptr, const std::collate<char> *, void **, char *))(*(_QWORD *)this->__traits_.__col_
                                                                                               + 32))(v137, this->__traits_.__col_, __p, (char *)__p + 1);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      v50 = this->__ranges_.__begin_;
      v52 = HIBYTE(v137[2]);
      v53 = (char *)this->__ranges_.__end_ - (char *)v50;
      if (v53)
      {
LABEL_85:
        v129 = v2;
        v131 = v38;
        v54 = 0;
        v55 = v53 / 48;
        v127 = v52;
        if ((v52 & 0x80u) == 0)
          v56 = (void *)v52;
        else
          v56 = v137[1];
        if ((v52 & 0x80u) == 0)
          v57 = v137;
        else
          v57 = (void **)v137[0];
        if (v55 <= 1)
          v58 = 1;
        else
          v58 = v53 / 48;
        v59 = (unsigned __int8 *)&v50->second.__r_.__value_.__r.__words[2] + 7;
        v60 = 1;
        do
        {
          v61 = (char)*(v59 - 24);
          if (v61 >= 0)
            v62 = *(v59 - 24);
          else
            v62 = *(_QWORD *)(v59 - 39);
          if (v61 >= 0)
            v63 = (char *)(v59 - 47);
          else
            v63 = *(char **)(v59 - 47);
          if (v62 >= (unint64_t)v56)
            v64 = (size_t)v56;
          else
            v64 = v62;
          v65 = memcmp(v57, v63, v64);
          v66 = (unint64_t)v56 >= v62;
          if (v65)
            v66 = v65 >= 0;
          if (v66)
          {
            v67 = (char)*v59;
            if (v67 >= 0)
              v68 = *v59;
            else
              v68 = *(_QWORD *)(v59 - 15);
            if (v67 >= 0)
              v69 = (char *)(v59 - 23);
            else
              v69 = *(char **)(v59 - 23);
            if ((unint64_t)v56 >= v68)
              v70 = v68;
            else
              v70 = (size_t)v56;
            v71 = memcmp(v69, v57, v70);
            v72 = v68 >= (unint64_t)v56;
            if (v71)
              v72 = v71 >= 0;
            if (v72)
            {
              negate = 1;
              v2 = v129;
              v38 = v131;
              if ((v127 & 0x80) == 0)
                goto LABEL_125;
              goto LABEL_124;
            }
          }
          v60 = ++v54 < v55;
          v59 += 48;
        }
        while (v58 != v54);
        v2 = v129;
        v38 = v131;
        negate = v134;
        if ((v127 & 0x80) == 0)
          goto LABEL_125;
        goto LABEL_124;
      }
    }
    else
    {
      v52 = 1;
      HIBYTE(v137[2]) = 1;
      LOWORD(v137[0]) = v40;
      v53 = (char *)v51 - (char *)v50;
      if (v53)
        goto LABEL_85;
    }
    v60 = 0;
    if ((v52 & 0x80) == 0)
    {
LABEL_125:
      if (v60)
        goto LABEL_244;
      goto LABEL_126;
    }
LABEL_124:
    operator delete(v137[0]);
    goto LABEL_125;
  }
LABEL_126:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_238;
  v132 = v38;
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)&this->__traits_, (_BYTE *)&__src + 1, __p);
  v73 = this->__equivalences_.__begin_;
  v74 = HIBYTE(__p[2]);
  v75 = (char *)this->__equivalences_.__end_ - (char *)v73;
  if (!v75)
  {
    if ((HIBYTE(__p[2]) & 0x80) != 0)
      operator delete(__p[0]);
LABEL_237:
    v40 = __src;
LABEL_238:
    if ((v40 & 0x80) != 0)
      goto LABEL_244;
    v116 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v40] & v116) == 0)
    {
      v117 = (v116 >> 7) & 1;
      if (v40 != 95)
        v117 = 0;
      if (v117 != 1)
        goto LABEL_244;
    }
    goto LABEL_243;
  }
  v135 = negate;
  v76 = 0;
  v77 = v75 / 24;
  v78 = __p[0];
  v79 = __p[1];
  if (SHIBYTE(__p[2]) >= 0)
    v80 = (void *)HIBYTE(__p[2]);
  else
    v80 = __p[1];
  if (v77 <= 1)
    v81 = 1;
  else
    v81 = v75 / 24;
  for (i = 1; ; i = v76 < v77)
  {
    v83 = &v73[v76];
    v84 = (void *)HIBYTE(v83->__r_.__value_.__r.__words[2]);
    v85 = (char)v84;
    if ((char)v84 < 0)
      v84 = (void *)v83->__r_.__value_.__l.__size_;
    if (v80 == v84)
      break;
LABEL_147:
    if (++v76 == v81)
    {
      if ((v74 & 0x80) != 0)
LABEL_235:
        operator delete(__p[0]);
      negate = v135;
      v38 = v132;
      goto LABEL_237;
    }
LABEL_151:
    ;
  }
  if (v85 >= 0)
    v86 = &v73[v76];
  else
    v86 = (std::string *)v83->__r_.__value_.__r.__words[0];
  if ((v74 & 0x80) == 0)
  {
    if (!(_DWORD)v74)
    {
LABEL_155:
      negate = 1;
      v38 = v132;
      if (!i)
        goto LABEL_237;
      goto LABEL_244;
    }
    v87 = 0;
    while (*((unsigned __int8 *)__p + v87) == v86->__r_.__value_.__s.__data_[v87])
    {
      if (v74 == ++v87)
        goto LABEL_155;
    }
    goto LABEL_147;
  }
  v88 = v73;
  v130 = i;
  v89 = v78;
  v90 = v79;
  if (memcmp(v78, v86, (size_t)v79))
  {
    ++v76;
    v79 = v90;
    v78 = v89;
    v73 = v88;
    if (v76 == v81)
      goto LABEL_235;
    goto LABEL_151;
  }
  operator delete(__p[0]);
  negate = 1;
  v38 = v132;
  if (!v130)
    goto LABEL_237;
LABEL_244:
  if (negate == this->__negate_)
  {
    first = 0;
    v119 = -993;
  }
  else
  {
    v2->__current_ += v38;
    first = this->__first_;
    v119 = -995;
  }
  v2->__do_ = v119;
  v2->__node_ = first;
}

void sub_236E25C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale::__imp *v6;
  std::locale::__imp *v7;
  std::locale::__imp *v8;
  std::locale::__imp *v9;
  std::locale::__imp *v10;
  std::locale::__imp *v11;

  locale = a1[17].__locale_;
  if (locale)
  {
    v3 = a1[18].__locale_;
    v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*((void **)v3 - 3));
        v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  v6 = a1[11].__locale_;
  if (v6)
  {
    v7 = a1[12].__locale_;
    v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0)
LABEL_19:
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  v11 = a1[1].__locale_;
  if (v11)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void std::regex_traits<char>::__lookup_collatename<char *>(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  unint64_t v13;
  unint64_t v14;
  std::string::size_type size;
  int v16;
  uint64_t v17;
  std::string v18;
  std::string __dst;

  v5 = a3 - __src;
  memset(&__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = &__dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (std::string *)((char *)p_dst + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  p_dst = (std::string *)operator new(v10 + 1);
  __dst.__r_.__value_.__l.__size_ = v5;
  __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  p_dst->__r_.__value_.__s.__data_[0] = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (!__dst.__r_.__value_.__l.__size_)
      goto LABEL_18;
  }
  else
  {
    if (!*((_BYTE *)&__dst.__r_.__value_.__s + 23))
      return;
    v12 = &__dst;
  }
  std::__get_collation_name(&v18, (const char *)v12);
  *(_OWORD *)a4 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
  v13 = v18.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v18.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14)
    goto LABEL_16;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __dst.__r_.__value_.__l.__size_;
    v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__l.__size_ < 3)
    {
LABEL_24:
      (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v18, *(_QWORD *)(a2 + 16), v12, (char *)v12 + size);
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      *(std::string *)a4 = v18;
      if (*(char *)(a4 + 23) < 0)
      {
        v17 = *(_QWORD *)(a4 + 8);
        if (v17 != 1 && v17 != 12)
        {
          **(_BYTE **)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          goto LABEL_16;
        }
      }
      else
      {
        v16 = *(unsigned __int8 *)(a4 + 23);
        if (v16 != 12 && v16 != 1)
        {
          *(_BYTE *)a4 = 0;
          *(_BYTE *)(a4 + 23) = 0;
LABEL_16:
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return;
          v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          goto LABEL_18;
        }
      }
      std::string::operator=((std::string *)a4, &__dst);
      goto LABEL_16;
    }
LABEL_18:
    operator delete(v12);
    return;
  }
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) < 3u)
  {
    v12 = &__dst;
    goto LABEL_24;
  }
}

void sub_236E26044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  size_t v5;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  void *__dst[3];

  v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v5);
    v9 = (void **)((char *)v9 + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v5;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)v9 = 0;
  memset(a4, 170, 24);
  v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0)
    v13 = __dst;
  else
    v13 = (void **)__dst[0];
  if (SHIBYTE(__dst[2]) < 0)
    v12 = (char *)__dst[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v13, &v12[(_QWORD)v13]);
  v14 = *((unsigned __int8 *)a4 + 23);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = a4[1];
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      return;
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0)
      v16 = a4;
    else
      v16 = (_BYTE *)*a4;
    v16[11] = v16[3];
    if (SHIBYTE(__dst[2]) < 0)
      goto LABEL_26;
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(_BYTE *)a4 = 0;
    *((_BYTE *)a4 + 23) = 0;
    goto LABEL_25;
  }
  *(_BYTE *)*a4 = 0;
  a4[1] = 0;
  if (SHIBYTE(__dst[2]) < 0)
LABEL_26:
    operator delete(__dst[0]);
}

void sub_236E26218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23B804D10](exception, 5);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_236E2626C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, std::string *this, uint64_t a5)
{
  unsigned __int8 *result;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      result = (unsigned __int8 *)(a2 + 1);
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_6;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      result = (unsigned __int8 *)(a2 + 1);
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      result = (unsigned __int8 *)(a2 + 1);
      break;
    case 'b':
      std::string::operator=(this, 8);
      result = (unsigned __int8 *)(a2 + 1);
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      result = (unsigned __int8 *)(a2 + 1);
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      result = (unsigned __int8 *)(a2 + 1);
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      result = (unsigned __int8 *)(a2 + 1);
      break;
    default:
      if (*a2)
      {
LABEL_6:
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, this);
      }
      else
      {
        std::string::operator=(this, 0);
        result = (unsigned __int8 *)(a2 + 1);
      }
      break;
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  char *v7;
  std::string::value_type v8;
  char v9;
  int v10;
  std::string::value_type v11;
  std::string::value_type v12;

  if (a2 == a3)
LABEL_51:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  switch(v5)
  {
    case '"':
    case '/':
    case '\\':
      if (this)
        std::string::operator=(this, v5);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    case 'a':
      if (this)
        std::string::operator=(this, 7);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
      return a2 + 1;
    case 'b':
      if (this)
        std::string::operator=(this, 8);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
      return a2 + 1;
    case 'f':
      if (this)
        std::string::operator=(this, 12);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
      return a2 + 1;
    case 'n':
      if (this)
        std::string::operator=(this, 10);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
      return a2 + 1;
    case 'r':
      if (this)
        std::string::operator=(this, 13);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
      return a2 + 1;
    case 't':
      if (this)
        std::string::operator=(this, 9);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
      return a2 + 1;
    case 'v':
      if (this)
        std::string::operator=(this, 11);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
      return a2 + 1;
    default:
      if ((v5 & 0xFFFFFFF8) != 0x30)
        goto LABEL_51;
      v7 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v7 = a3;
LABEL_40:
        v12 = v5 - 48;
        if (this)
          goto LABEL_41;
        goto LABEL_50;
      }
      if ((*v7 & 0xF8) != 0x30)
        goto LABEL_40;
      v8 = *v7 + 8 * (v5 - 48) - 48;
      if (a2 + 2 != a3)
      {
        v9 = a2[2];
        v10 = v9 & 0xF8;
        v11 = v9 + 8 * v8 - 48;
        if (v10 == 48)
          v7 = a2 + 3;
        else
          v7 = a2 + 2;
        if (v10 == 48)
          v8 = v11;
        v12 = v8;
        if (!this)
          goto LABEL_50;
LABEL_41:
        std::string::operator=(this, v12);
        return v7;
      }
      v7 = a3;
      v12 = v8;
      if (this)
        goto LABEL_41;
LABEL_50:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v12);
      return v7;
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t j;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t k;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t m;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  int v33;
  char *v34;
  char v35;
  char *v36;
  char v37;
  _BYTE *v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  int v43;
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  void *__p[2];
  uint64_t v49;
  void *v50[2];
  uint64_t v51;

  v3 = a3;
  v4 = (uint64_t)a2;
  if (!*(_BYTE *)(a1 + 170))
  {
    v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((_QWORD *)a2 + 1) != 1)
        goto LABEL_74;
    }
    else if (v16 != 1)
    {
LABEL_74:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(_QWORD *)(a3 + 8) != 1)
        goto LABEL_74;
    }
    else if (*(_BYTE *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(_BYTE *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)__p = *(_OWORD *)v4;
      v49 = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = 0;
      *(_OWORD *)v50 = *(_OWORD *)v3;
      v51 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)v3 = 0;
      v39 = *(_QWORD *)(a1 + 96);
      if (v39 < *(_QWORD *)(a1 + 104))
      {
        v40 = *(_OWORD *)__p;
        *(_QWORD *)(v39 + 16) = v49;
        *(_OWORD *)v39 = v40;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(_QWORD *)(v39 + 40) = v41;
        v50[1] = 0;
        v51 = 0;
        v50[0] = 0;
        *(_QWORD *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      v42 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
      v43 = SHIBYTE(v51);
      *(_QWORD *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    v34 = a2;
    if ((v16 & 0x80) != 0)
      v34 = *(char **)a2;
    v35 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
        goto LABEL_64;
    }
    else
    {
      *(_BYTE *)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        v37 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v36);
        v38 = (_BYTE *)v3;
        if (*(char *)(v3 + 23) < 0)
          v38 = *(_BYTE **)v3;
        *v38 = v37;
        goto LABEL_67;
      }
    }
    v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(_BYTE *)(a1 + 169))
  {
    for (i = 0; ; ++i)
    {
      v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(_QWORD *)(v4 + 8))
        {
LABEL_13:
          for (j = 0; ; ++j)
          {
            v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(_QWORD *)(v3 + 8))
                goto LABEL_44;
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            v13 = v3;
            if ((v12 & 0x80) != 0)
              v13 = *(_QWORD *)v3;
            v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v13 + j));
            v15 = v3;
            if (*(char *)(v3 + 23) < 0)
              v15 = *(_QWORD *)v3;
            *(_BYTE *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      v8 = v4;
      if ((v7 & 0x80) != 0)
        v8 = *(_QWORD *)v4;
      v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v8 + i));
      v10 = v4;
      if (*(char *)(v4 + 23) < 0)
        v10 = *(_QWORD *)v4;
      *(_BYTE *)(v10 + i) = v9;
    }
  }
  for (k = 0; ; ++k)
  {
    v19 = a2[23];
    if (a2[23] < 0)
      break;
    if (k >= v19)
      goto LABEL_35;
LABEL_33:
    v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      v18 = *(char **)a2;
      v20 = *(char **)a2;
    }
    else
    {
      v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((_QWORD *)a2 + 1))
    goto LABEL_33;
LABEL_35:
  for (m = 0; ; ++m)
  {
    v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0)
      break;
    if (m >= v23)
      goto LABEL_44;
LABEL_42:
    v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      v22 = *(_QWORD *)a3;
      v24 = *(_QWORD *)a3;
    }
    else
    {
      v24 = a3;
    }
    *(_BYTE *)(v24 + m) = *(_BYTE *)(v22 + m);
  }
  if (m < *(_QWORD *)(a3 + 8))
    goto LABEL_42;
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    v26 = v4;
    v4 = *(_QWORD *)v4;
    v25 = *(_QWORD *)(v26 + 8);
  }
  else
  {
    v25 = *(unsigned __int8 *)(v4 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    v28 = v3;
    v3 = *(_QWORD *)v3;
    v27 = *(_QWORD *)(v28 + 8);
  }
  else
  {
    v27 = *(unsigned __int8 *)(v3 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)__p = *(_OWORD *)v46;
  v49 = v47;
  *(_OWORD *)v50 = *(_OWORD *)v44;
  v51 = v45;
  v29 = *(_QWORD *)(a1 + 96);
  if (v29 >= *(_QWORD *)(a1 + 104))
  {
    v32 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
    v33 = SHIBYTE(v51);
    *(_QWORD *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  v30 = *(_OWORD *)__p;
  *(_QWORD *)(v29 + 16) = v49;
  *(_OWORD *)v29 = v30;
  __p[1] = 0;
  v49 = 0;
  __p[0] = 0;
  v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(_QWORD *)(v29 + 40) = v31;
  v50[1] = 0;
  v51 = 0;
  v50[0] = 0;
  *(_QWORD *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0)
    goto LABEL_69;
}

void sub_236E26BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_236E26BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  char *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _WORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  unint64_t v36;
  __int128 v37;
  __int16 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  unint64_t v53;
  __int128 v54;
  __int16 v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  _OWORD *v60;
  char *v61;
  unint64_t v62;
  __int128 v63;
  __int16 v64;

  if (*(_BYTE *)(a1 + 169))
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
    v8 = *(char **)(a1 + 120);
    v7 = *(_QWORD *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      v9 = (char **)(a1 + 112);
      v10 = *(char **)(a1 + 112);
      v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        v12 = v11 >> 1;
        v13 = v7 - (_QWORD)v10;
        if (v13 <= (v11 >> 1) + 1)
          v14 = v12 + 1;
        else
          v14 = v13;
        if (v13 >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (!v15)
        {
          v16 = 0;
          v17 = (_WORD *)(2 * v12);
          v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          v19 = 2 * v12 + 2;
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
LABEL_30:
          v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E)
            goto LABEL_71;
          if ((unint64_t)(v8 - &v16[v11 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
            goto LABEL_71;
          v31 = (v30 >> 1) + 1;
          v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          v33 = &v8[-v32];
          v17 = (_WORD *)((char *)v17 - v32);
          v34 = &v16[2 * v12 - 16];
          v35 = v8 - 16;
          v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          v16 = operator new(2 * v15);
          v17 = &v16[2 * v12];
          v18 = &v16[2 * v15];
          *v17 = v6;
          v19 = (uint64_t)(v17 + 1);
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
          goto LABEL_30;
        }
LABEL_68:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
LABEL_67:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
LABEL_28:
    *(_WORD *)v8 = v6;
    v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  v9 = (char **)(a1 + 112);
  v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  v8 = *(char **)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 128);
  if (*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21)
      goto LABEL_28;
    v22 = *v9;
    v23 = v8 - *v9;
    if (v23 <= -3)
      goto LABEL_67;
    v24 = v23 >> 1;
    v25 = v21 - (_QWORD)v22;
    if (v25 <= (v23 >> 1) + 1)
      v26 = v24 + 1;
    else
      v26 = v25;
    if (v25 >= 0x7FFFFFFFFFFFFFFELL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      if (v27 < 0)
        goto LABEL_68;
      v28 = operator new(2 * v27);
      v17 = &v28[2 * v24];
      v18 = &v28[2 * v27];
      *v17 = v6;
      v19 = (uint64_t)(v17 + 1);
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    else
    {
      v28 = 0;
      v17 = (_WORD *)(2 * v24);
      v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      v19 = 2 * v24 + 2;
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E)
      goto LABEL_72;
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_72;
    v48 = (v47 >> 1) + 1;
    v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    v50 = &v8[-v49];
    v17 = (_WORD *)((char *)v17 - v49);
    v51 = &v28[2 * v24 - 16];
    v52 = v8 - 16;
    v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21)
    goto LABEL_28;
  v39 = *v9;
  v40 = v8 - *v9;
  if (v40 <= -3)
    goto LABEL_67;
  v41 = v40 >> 1;
  v42 = v21 - (_QWORD)v39;
  if (v42 <= (v40 >> 1) + 1)
    v43 = v41 + 1;
  else
    v43 = v42;
  if (v42 >= 0x7FFFFFFFFFFFFFFELL)
    v44 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v44 = v43;
  if (!v44)
  {
    v45 = 0;
    v17 = (_WORD *)(2 * v41);
    v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    v19 = 2 * v41 + 2;
    v46 = (char *)(v8 - v39);
    if (v8 == v39)
      goto LABEL_64;
    goto LABEL_57;
  }
  if (v44 < 0)
    goto LABEL_68;
  v45 = operator new(2 * v44);
  v17 = &v45[2 * v41];
  v18 = &v45[2 * v44];
  *v17 = v6;
  v19 = (uint64_t)(v17 + 1);
  v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E)
      goto LABEL_73;
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_73;
    v57 = (v56 >> 1) + 1;
    v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    v59 = &v8[-v58];
    v17 = (_WORD *)((char *)v17 - v58);
    v60 = &v45[2 * v41 - 16];
    v61 = v8 - 16;
    v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      *v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v18;
  if (v8)
    operator delete(v8);
LABEL_66:
  *(_QWORD *)(a1 + 120) = v19;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23B804D10](exception, 1);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_236E26FF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1, uint64_t a2, _BYTE *__src, _BYTE *a4)
{
  size_t v4;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  unint64_t v13;
  unint64_t v14;
  std::string::size_type size;
  int v16;
  uint64_t v17;
  std::string v18;
  std::string __dst;

  v4 = a4 - __src;
  memset(&__dst, 170, sizeof(__dst));
  if ((unint64_t)(a4 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 <= 0x16)
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = (_BYTE)a4 - (_BYTE)__src;
    p_dst = &__dst;
    if (__src == a4)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v4);
    p_dst = (std::string *)((char *)p_dst + v4);
    goto LABEL_9;
  }
  v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v10 = v4 | 7;
  v11 = v10 + 1;
  p_dst = (std::string *)operator new(v10 + 1);
  __dst.__r_.__value_.__l.__size_ = v4;
  __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (__src != a4)
    goto LABEL_8;
LABEL_9:
  p_dst->__r_.__value_.__s.__data_[0] = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (!__dst.__r_.__value_.__l.__size_)
      goto LABEL_18;
  }
  else
  {
    if (!*((_BYTE *)&__dst.__r_.__value_.__s + 23))
      return;
    v12 = &__dst;
  }
  std::__get_collation_name(&v18, (const char *)v12);
  *(_OWORD *)a1 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
  v13 = v18.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v18.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a1 + 8);
  if (v14)
    goto LABEL_16;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __dst.__r_.__value_.__l.__size_;
    v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__l.__size_ < 3)
    {
LABEL_24:
      (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v18, *(_QWORD *)(a2 + 16), v12, (char *)v12 + size);
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      *(std::string *)a1 = v18;
      if (*(char *)(a1 + 23) < 0)
      {
        v17 = *(_QWORD *)(a1 + 8);
        if (v17 != 1 && v17 != 12)
        {
          **(_BYTE **)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          goto LABEL_16;
        }
      }
      else
      {
        v16 = *(unsigned __int8 *)(a1 + 23);
        if (v16 != 12 && v16 != 1)
        {
          *(_BYTE *)a1 = 0;
          *(_BYTE *)(a1 + 23) = 0;
LABEL_16:
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return;
          v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          goto LABEL_18;
        }
      }
      std::string::operator=((std::string *)a1, &__dst);
      goto LABEL_16;
    }
LABEL_18:
    operator delete(v12);
    return;
  }
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) < 3u)
  {
    v12 = &__dst;
    goto LABEL_24;
  }
}

void sub_236E27208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _BYTE **a4@<X8>)
{
  unint64_t v5;
  _OWORD *v9;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  void **v20;
  _BYTE *v21;
  int v22;
  _BYTE *v23;
  void *__p[3];

  v5 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 > 0x16)
  {
    v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v16 = v5 | 7;
    v17 = v16 + 1;
    v9 = operator new(v16 + 1);
    __p[1] = (void *)v5;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v9 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v5 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
  }
  else
  {
    v10 = (char *)v9 + (v5 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(a2 + 16);
    v13 = v9 + 1;
    v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *v10 = 0;
  memset(a4, 170, 24);
  v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v19 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v20, &v19[(_QWORD)v20]);
  v21 = (_BYTE *)*((unsigned __int8 *)a4 + 23);
  v22 = (char)v21;
  if ((char)v21 < 0)
    v21 = a4[1];
  if (v21 == (_BYTE *)1)
    goto LABEL_32;
  if (v21 != (_BYTE *)12)
  {
    if (v22 < 0)
    {
      **a4 = 0;
      a4[1] = 0;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        return;
LABEL_35:
      operator delete(__p[0]);
      return;
    }
    *(_BYTE *)a4 = 0;
    *((_BYTE *)a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return;
    goto LABEL_35;
  }
  if (v22 >= 0)
    v23 = a4;
  else
    v23 = *a4;
  v23[11] = v23[3];
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_35;
}

void sub_236E2743C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23B804D10](exception, 2);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_236E27490(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 64);
    v5 = *(_BYTE **)(a1 + 72);
    v16 = *(_QWORD *)(a1 + 80);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 64) = v13;
        *(_QWORD *)(a1 + 72) = v15;
        *(_QWORD *)(a1 + 80) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 64);
  v7 = *(_BYTE **)(a1 + 64);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v15;
  *(_QWORD *)(a1 + 80) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 72) = v15;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3;
  _OWORD *v7;
  _BYTE *v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char *v17;
  void **v18;
  void *__p[3];

  v3 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3 > 0x16)
  {
    v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v14 = v3 | 7;
    v15 = v14 + 1;
    v7 = operator new(v14 + 1);
    __p[1] = (void *)v3;
    __p[2] = (void *)(v15 | 0x8000000000000000);
    __p[0] = v7;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v8 = v7;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v7 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v3 < 0x20 || (unint64_t)v7 - a2 < 0x20)
  {
    v8 = v7;
    v9 = (char *)a2;
  }
  else
  {
    v8 = (char *)v7 + (v3 & 0xFFFFFFFFFFFFFFE0);
    v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    v10 = (__int128 *)(a2 + 16);
    v11 = v7 + 1;
    v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  *v8 = 0;
  v17 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v17 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v18, &v17[(_QWORD)v18]);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_236E27A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23B804D10](exception, 9);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_236E27AF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[48 * v6];
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v8 + 48;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *((_OWORD *)v13 - 3);
      *((_QWORD *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      v15 = *(_OWORD *)(v13 - 3);
      *((_QWORD *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13)
        goto LABEL_22;
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0)
          goto LABEL_14;
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13)
    operator delete(v13);
  return v11;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  void *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = operator new(0x10uLL);
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new(0x38uLL);
  LODWORD(first) = this->__loop_count_;
  v18 = __s->__first_;
  *(_QWORD *)v17 = &unk_25086B9C8;
  *((_QWORD *)v17 + 1) = v18;
  *((_QWORD *)v17 + 2) = v14;
  *((_QWORD *)v17 + 3) = __min;
  *((_QWORD *)v17 + 4) = __max;
  *((_DWORD *)v17 + 10) = (_DWORD)first;
  *((_DWORD *)v17 + 11) = v9;
  *((_DWORD *)v17 + 12) = v8;
  *((_BYTE *)v17 + 52) = __greedy;
  __s->__first_ = 0;
  v19 = (std::__node<char> *)operator new(0x10uLL);
  v19->__vftable = (std::__node<char>_vtbl *)&unk_25086BA58;
  v19[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v19;
  this->__end_ = (std::__owns_one_state<char> *)*((_QWORD *)v17 + 2);
  __s->__first_ = (std::__node<char> *)v17;
  this->__loop_count_ = (_DWORD)first + 1;
}

void sub_236E27F04(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);

  std::__loop<char>::~__loop(v1);
  _Unwind_Resume(a1);
}

void sub_236E27F18(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23B804D10](exception, 8);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_236E27F88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23B804D10](exception, 7);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_236E27FD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_25086BA28;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_25086BA28;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

uint64_t std::__loop<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;

  v2 = *(unsigned int *)(result + 40);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    *v4 = 0;
    if (!*(_QWORD *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(_QWORD *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
      *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
      v20 = *(_DWORD *)(result + 44);
      v21 = *(_DWORD *)(result + 48);
      if (v20 == v21)
        return result;
      v22 = (v21 - 1);
      v23 = (v20 - 1);
      v24 = *(_QWORD *)(a2 + 24);
      v25 = *(_QWORD *)(a2 + 32);
      v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        v28 = v25 + 24 * v23 + 24;
        v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(_QWORD *)(v28 - 24) = v24;
          *(_QWORD *)(v28 - 16) = v24;
          *(_QWORD *)v28 = v24;
          *(_QWORD *)(v28 + 8) = v24;
          *(_BYTE *)(v28 - 8) = 0;
          *(_BYTE *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL))
          return result;
      }
      else
      {
        v27 = v23;
      }
      v30 = v22 - v27;
      v31 = (_BYTE *)(v25 + 24 * v27 + 16);
      do
      {
        *((_QWORD *)v31 - 2) = v24;
        *((_QWORD *)v31 - 1) = v24;
        *v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  v5 = *v4 + 1;
  *v4 = v5;
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 32);
  v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6)
    v8 = v5 < v7 && *(_QWORD *)(v3 + 16 * v2 + 8) != *(_QWORD *)(a2 + 16);
  if (v8 && v5 >= v6)
    goto LABEL_26;
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(result + 44);
  v13 = *(_DWORD *)(result + 48);
  if (v12 == v13)
    return result;
  v14 = (v13 - 1);
  v15 = (v12 - 1);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    v19 = v15;
LABEL_39:
    v34 = v14 - v19;
    v35 = (_BYTE *)(v17 + 24 * v19 + 16);
    do
    {
      *((_QWORD *)v35 - 2) = v16;
      *((_QWORD *)v35 - 1) = v16;
      *v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  v32 = v17 + 24 * v15 + 24;
  v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(_QWORD *)(v32 - 24) = v16;
    *(_QWORD *)(v32 - 16) = v16;
    *(_QWORD *)v32 = v16;
    *(_QWORD *)(v32 + 8) = v16;
    *(_BYTE *)(v32 - 8) = 0;
    *(_BYTE *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL))
    goto LABEL_39;
  return result;
}

uint64_t std::__loop<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(result + 44);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(_QWORD *)(a3 + 16);
  v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    v5 = (v4 - 1);
    v6 = (v3 - 1);
    v7 = *(_QWORD *)(a3 + 24);
    v8 = *(_QWORD *)(a3 + 32);
    v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      v10 = v6;
LABEL_9:
      v13 = v5 - v10;
      v14 = (_BYTE *)(v8 + 24 * v10 + 16);
      do
      {
        *((_QWORD *)v14 - 2) = v7;
        *((_QWORD *)v14 - 1) = v7;
        *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    v11 = v8 + 24 * v6 + 24;
    v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v11 - 24) = v7;
      *(_QWORD *)(v11 - 16) = v7;
      *(_QWORD *)v11 = v7;
      *(_QWORD *)(v11 + 8) = v7;
      *(_BYTE *)(v11 - 8) = 0;
      *(_BYTE *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_9;
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_25086BA28;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_25086BA28;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_25086BA28;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_25086BA28;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23B804D10](exception, 15);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_236E285A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *v7;
  char *v8;
  int v9;
  std::basic_regex<char> *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  std::basic_regex<char> *v21;
  std::__owns_one_state<char> *v22;
  int v23;
  std::basic_regex<char> *v24;
  uint64_t v25;

  if (a2 != a3)
  {
    v7 = a2 + 1;
    v6 = *a2;
    if (a2 + 1 != a3 || v6 != 36)
    {
      if ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
        return (unsigned __int8 *)(a2 + 1);
      }
      if (v7 == a3 || v6 != 92)
      {
        if (v6 == 46)
        {
          v17 = operator new(0x10uLL);
          v18 = *(_QWORD *)(a1 + 56);
          v19 = *(_QWORD *)(v18 + 8);
          *v17 = &unk_25086BB30;
          v17[1] = v19;
LABEL_39:
          *(_QWORD *)(v18 + 8) = v17;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          return (unsigned __int8 *)v7;
        }
      }
      else
      {
        v16 = *v7;
        if ((v16 - 36) <= 0x3A && ((1 << (v16 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v16);
          return (unsigned __int8 *)(a2 + 2);
        }
      }
    }
  }
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, a2, a3);
  v7 = v8;
  if (v8 != a2 || v8 == a3)
    return (unsigned __int8 *)v7;
  if (a2 + 1 == a3 || *a2 != 92)
    return (unsigned __int8 *)a2;
  v9 = a2[1];
  if (v9 != 40)
  {
    if (((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38) && (v9 - 49) <= 8)
    {
      if ((v9 - 48) > *(_DWORD *)(a1 + 28))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v9 - 48);
      return (unsigned __int8 *)(a2 + 2);
    }
    return (unsigned __int8 *)a2;
  }
  v10 = (std::basic_regex<char> *)(a2 + 2);
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    v12 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v11 = operator new(0x18uLL);
    v12 = *(_DWORD *)(a1 + 28) + 1;
    *(_DWORD *)(a1 + 28) = v12;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
    *v11 = &unk_25086B938;
    v11[1] = v14;
    *((_DWORD *)v11 + 4) = v12;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  do
  {
    if (v10 == (std::basic_regex<char> *)a3)
      goto LABEL_41;
    v21 = v10;
    v22 = *(std::__owns_one_state<char> **)(a1 + 56);
    v23 = *(_DWORD *)(a1 + 28);
    v24 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, v21, a3);
    if (v24 == v21)
      break;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, v24, (std::basic_regex<char> *)a3, v22, (v23 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  while (v10 != v21);
  if ((char *)&v21->__traits_.__loc_.__locale_ + 1 == a3
    || LOBYTE(v21->__traits_.__loc_.__locale_) != 92
    || BYTE1(v21->__traits_.__loc_.__locale_) != 41)
  {
LABEL_41:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
  v7 = (char *)v21 + 2 * (BYTE1(v21->__traits_.__loc_.__locale_) == 41);
  if ((*(_BYTE *)(a1 + 24) & 2) == 0)
  {
    v17 = operator new(0x18uLL);
    v18 = *(_QWORD *)(a1 + 56);
    v25 = *(_QWORD *)(v18 + 8);
    *v17 = &unk_25086B980;
    v17[1] = v25;
    *((_DWORD *)v17 + 4) = v12;
    goto LABEL_39;
  }
  return (unsigned __int8 *)v7;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  std::basic_regex<char> *v6;
  int locale_low;
  std::basic_regex<char> *v9;
  int v10;
  int v11;
  std::basic_regex<char> *v12;
  int v13;
  std::basic_regex<char> *v14;
  int v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;

  v6 = this;
  if (this == a3)
    return v6;
  locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)v6 + 1);
  }
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return v6;
  }
  v9 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v9 == a3)
    goto LABEL_43;
  v10 = LOBYTE(v9->__traits_.__loc_.__locale_);
  if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38)
    goto LABEL_43;
  v11 = v10 - 48;
  v12 = (std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_16:
    v12 = a3;
  }
  else
  {
    while (1)
    {
      v13 = LOBYTE(v12->__traits_.__loc_.__locale_);
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38)
        break;
      if (v11 >= 214748364)
        goto LABEL_43;
      v11 = v13 + 10 * v11 - 48;
      v12 = (std::basic_regex<char> *)((char *)v12 + 1);
      if (v12 == a3)
        goto LABEL_16;
    }
  }
  if (v12 == v9)
    goto LABEL_43;
  if (v12 == a3)
    goto LABEL_41;
  v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 1);
  v15 = LOBYTE(v12->__traits_.__loc_.__locale_);
  if (v15 != 44)
  {
    if (v14 != a3 && v15 == 92 && LOBYTE(v14->__traits_.__loc_.__locale_) == 125)
    {
      v19 = (unsigned __int8 *)&v12->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v11, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_41;
  }
  if (v14 == a3)
    goto LABEL_41;
  v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
  if ((v16 & 0xF8) == 0x30 || (v16 & 0xFE) == 0x38)
  {
    v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2) == a3)
      goto LABEL_41;
    v17 = v16 - 48;
    while (1)
    {
      v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
      if ((v16 & 0xF8) != 0x30 && (v16 & 0xFE) != 0x38)
        break;
      if (v17 >= 214748364)
        goto LABEL_43;
      v17 = v16 + 10 * v17 - 48;
      v14 = (std::basic_regex<char> *)((char *)v14 + 1);
      if (v14 == a3)
        goto LABEL_41;
    }
  }
  else
  {
    v17 = -1;
  }
  if (v14 == a3
    || (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1) == a3
    || v16 != 92
    || BYTE1(v14->__traits_.__loc_.__locale_) != 125)
  {
LABEL_41:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  v18 = (unsigned __int8 *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 125);
  if (v17 != -1)
  {
    if (v17 >= v11)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v17, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v18;
    }
LABEL_43:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v18;
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, char *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  int v8;
  char *v9;
  std::basic_regex<char>::value_type v10;
  char *v11;
  _BOOL4 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  std::basic_regex<char> *v27;
  std::basic_regex<char> *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  if (a2 != (char *)a3)
  {
    v8 = *a2;
    switch(*a2)
    {
      case '$':
      case '(':
      case '*':
      case '+':
      case '.':
      case '?':
      case '[':
      case '\\':
      case '^':
      case '{':
      case '|':
        goto LABEL_3;
      case ')':
        if (!*(_DWORD *)(a1 + 36))
          goto LABEL_8;
LABEL_3:
        v9 = a2 + 1;
        if (a2 + 1 != (char *)a3 && v8 == 92)
        {
          v10 = *v9;
          switch(*v9)
          {
            case '$':
            case '(':
            case ')':
            case '*':
            case '+':
            case '.':
            case '?':
            case '[':
            case '\\':
            case '^':
            case '{':
            case '|':
            case '}':
              std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v10);
              v11 = a2 + 2;
              return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v11, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
            default:
              if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
              {
                v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v9, (char *)a3, 0);
              }
              else
              {
                v12 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v10);
                v13 = 2;
                if (!v12)
                  v13 = 0;
                v11 = &a2[v13];
              }
              if (v11 != a2)
                goto LABEL_19;
              v8 = *a2;
              break;
          }
        }
        if (v8 != 46)
          goto LABEL_18;
        v14 = operator new(0x10uLL);
        v15 = *(_QWORD *)(a1 + 56);
        v16 = *(_QWORD *)(v15 + 8);
        *v14 = &unk_25086BB30;
        v14[1] = v16;
        *(_QWORD *)(v15 + 8) = v14;
        break;
      default:
LABEL_8:
        std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v8);
        v11 = a2 + 1;
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v11, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    goto LABEL_27;
  }
LABEL_18:
  v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, a2, (char *)a3);
LABEL_19:
  if (v11 != a2 || v11 == (char *)a3)
    goto LABEL_36;
  v17 = *a2;
  switch(v17)
  {
    case '$':
      v18 = operator new(0x18uLL);
      v19 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v20 = *(_QWORD *)(a1 + 56);
      goto LABEL_26;
    case '(':
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v24 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v23 = operator new(0x18uLL);
        v24 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v24;
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(v25 + 8);
        *v23 = &unk_25086B938;
        v23[1] = v26;
        *((_DWORD *)v23 + 4) = v24;
        *(_QWORD *)(v25 + 8) = v23;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v27 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, a2 + 1, a3);
      if (v27 == a3 || (v28 = v27, LOBYTE(v27->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v29 = operator new(0x18uLL);
        v30 = *(_QWORD *)(a1 + 56);
        v31 = *(_QWORD *)(v30 + 8);
        *v29 = &unk_25086B980;
        v29[1] = v31;
        *((_DWORD *)v29 + 4) = v24;
        *(_QWORD *)(v30 + 8) = v29;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v11 = (char *)&v28->__traits_.__loc_.__locale_ + 1;
LABEL_36:
      if (v11 != a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v11, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
      return (std::basic_regex<char> *)a2;
    case '^':
      v18 = operator new(0x18uLL);
      v19 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v20 = *(_QWORD *)(a1 + 56);
LABEL_26:
      v22 = *(_QWORD *)(v20 + 8);
      *v18 = v21 + 16;
      v18[1] = v22;
      *((_BYTE *)v18 + 16) = v19;
      *(_QWORD *)(v20 + 8) = v18;
LABEL_27:
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v11 = a2 + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v11, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return (std::basic_regex<char> *)a2;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  int v9;
  int v10;
  const std::vector<std::csub_match>::value_type *v11;
  int v12;
  const char *i;
  std::vector<std::csub_match>::pointer begin;
  std::sub_match<const char *> *first;
  std::sub_match<const char *> *second;
  uint64_t result;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0)
    this[4].__end_ = a2;
  LOBYTE(this[4].__begin_) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) != 0)goto LABEL_28;
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28;
LABEL_13:
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      v12 = v9 | 0x80;
      for (i = (char *)&a2->first + 1; i != (const char *)a3; ++i)
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28;
          }
          else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)i, (uint64_t)a3, (uint64_t *)this, v12, 0) & 1) != 0)
          {
            goto LABEL_28;
          }
        }
        else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      }
      std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28;
        }
        else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a3, (uint64_t)a3, (uint64_t *)this, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
      }
      else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0) & 1) != 0)
      {
        goto LABEL_28;
      }
    }
    result = 0;
    this->__end_ = this->__begin_;
    return result;
  }
  if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) == 0)goto LABEL_13;
LABEL_28:
  if (this->__end_ == this->__begin_)
    begin = (std::vector<std::csub_match>::pointer)v11;
  else
    begin = this->__begin_;
  first = (std::sub_match<const char *> *)begin->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)begin->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)begin->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *this, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  std::vector<std::ssub_match>::pointer begin;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  std::vector<std::ssub_match>::pointer v25;
  std::sub_match<std::__wrap_iter<const char *>> *v26;

  v10 = a4[6];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  begin = this->__begin_;
  end = this->__end_;
  v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      end = (std::vector<std::ssub_match>::pointer)((char *)begin + 8 * ((a4[1] - *a4) >> 3));
      this->__end_ = end;
    }
  }
  else
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v11 - v14);
    begin = this->__begin_;
    end = this->__end_;
  }
  if (end != begin)
  {
    v15 = 0;
    v16 = 0;
    v18 = *a4;
    v17 = a4[1];
    do
    {
      v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
      v20 = (_QWORD *)(v18 + v15 * 24);
      if (v19 <= v16)
        v21 = a4 + 3;
      else
        v21 = v20;
      begin[v15].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v21 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v16)
        v22 = (uint64_t)(a4 + 3);
      else
        v22 = *a4 + v15 * 24;
      this->__begin_[v15].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *(_QWORD *)(v22 + 8) - v10);
      v18 = *a4;
      v17 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v17 - *a4) >> 3) <= v16)
        v23 = (uint64_t)(a4 + 3);
      else
        v23 = *a4 + v15 * 24;
      v24 = *(_BYTE *)(v23 + 16);
      begin = this->__begin_;
      v25 = this->__end_;
      this->__begin_[v15].matched = v24;
      ++v16;
      ++v15;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)begin) >> 3));
  }
  this[1].__begin_ = a3;
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  v26 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  this[2].__begin_ = v26;
  this[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(this[2].__end_cap_.__value_) = *((_BYTE *)a4 + 64);
  this[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  this[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(this[3].__end_cap_.__value_) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    this[4].__end_ = v26;
  LOBYTE(this[4].__begin_) = *((_BYTE *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::vector<std::pair<unsigned long, const char *>> *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  void *v72;
  void *v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  __int128 v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void **v85;
  void **v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t *v92;
  uint64_t v93;
  char v94;
  _BYTE v97[96];
  __int128 v98;
  __int128 v99;
  __int128 v100;

  v99 = 0u;
  v100 = 0u;
  v98 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    v85 = (void **)*((_QWORD *)&v98 + 1);
    v86 = (void **)v99;
    *((_QWORD *)&v100 + 1) = 0;
    v87 = v99 - *((_QWORD *)&v98 + 1);
    if ((_QWORD)v99 - *((_QWORD *)&v98 + 1) < 0x11uLL)
      goto LABEL_81;
    do
    {
LABEL_80:
      operator delete(*v85);
      v86 = (void **)v99;
      v85 = (void **)(*((_QWORD *)&v98 + 1) + 8);
      *((_QWORD *)&v98 + 1) = v85;
      v87 = v99 - (_QWORD)v85;
    }
    while ((_QWORD)v99 - (_QWORD)v85 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)v97 = 0;
  memset(&v97[8], 0, 85);
  std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v98);
  v11 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (((_QWORD)v100 + *((_QWORD *)&v100 + 1)) / 0x2AuLL))
      + 96 * (((_QWORD)v100 + *((_QWORD *)&v100 + 1)) % 0x2AuLL);
  v12 = *(_OWORD *)&v97[16];
  *(_OWORD *)v11 = *(_OWORD *)v97;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  memset(&v97[32], 0, 24);
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  memset(&v97[56], 0, 24);
  v13 = *(_QWORD *)&v97[80];
  *(_QWORD *)(v11 + 85) = *(_QWORD *)&v97[85];
  *(_QWORD *)(v11 + 80) = v13;
  v15 = *((_QWORD *)&v100 + 1);
  v14 = v100;
  v16 = ++*((_QWORD *)&v100 + 1);
  v17 = *((_QWORD *)&v98 + 1);
  v18 = *(unsigned int *)(a1 + 32);
  v19 = v100 + v15;
  v20 = 8 * (v19 / 0x2A);
  v21 = 96 * (v19 % 0x2A);
  v22 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + v20) + v21;
  *(_DWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 16) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 24) = a3;
  v23 = *(_QWORD *)(v17 + v20) + v21;
  v26 = *(_QWORD *)(v23 + 56);
  v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
  v25 = v26;
  v27 = ((uint64_t)v24->__end_ - v26) >> 4;
  v92 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27)
      v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(v24, v18 - v27);
    v16 = *((_QWORD *)&v100 + 1);
    v14 = v100;
    v17 = *((_QWORD *)&v98 + 1);
  }
  v93 = 0;
  v94 = 0;
  v28 = 0;
  v29 = v14 + v16 - 1;
  v30 = 8 * (v29 / 0x2A);
  v31 = 96 * (v29 % 0x2A);
  *(_QWORD *)(*(_QWORD *)(v17 + v30) + v31 + 80) = v6;
  v32 = a3 - a2;
  v33 = *(_QWORD *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(_BYTE *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v35 = v16 + v100 - 1;
    v36 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v35 / 0x2A));
    v37 = v35 % 0x2A;
    v38 = v36 + 96 * (v35 % 0x2A);
    v40 = (_QWORD *)(v38 + 80);
    v39 = *(_QWORD *)(v38 + 80);
    if (v39)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v36 + 96 * v37);
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        v41 = *(_QWORD *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != a3)
          goto LABEL_21;
        v65 = v41 - *(_QWORD *)(v36 + 96 * v37 + 8);
        v66 = v93;
        if ((v94 & (v93 >= v65)) == 0)
          v66 = v65;
        if (v66 == v32)
        {
          v67 = (void **)*((_QWORD *)&v98 + 1);
          v68 = v99;
          if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          {
            *((_QWORD *)&v100 + 1) = 0;
            v82 = 0;
          }
          else
          {
            v69 = (_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * ((unint64_t)v100 / 0x2A));
            v70 = (_QWORD *)(*v69 + 96 * ((unint64_t)v100 % 0x2A));
            v71 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * ((*((_QWORD *)&v100 + 1) + (_QWORD)v100) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v100 + 1) + (_QWORD)v100) % 0x2AuLL);
            if (v70 != (_QWORD *)v71)
            {
              do
              {
                v72 = (void *)v70[7];
                if (v72)
                {
                  v70[8] = v72;
                  operator delete(v72);
                }
                v73 = (void *)v70[4];
                if (v73)
                {
                  v70[5] = v73;
                  operator delete(v73);
                }
                v70 += 12;
                if ((_QWORD *)((char *)v70 - *v69) == (_QWORD *)4032)
                {
                  v74 = (_QWORD *)v69[1];
                  ++v69;
                  v70 = v74;
                }
              }
              while (v70 != (_QWORD *)v71);
              v67 = (void **)*((_QWORD *)&v98 + 1);
              v68 = v99;
            }
            *((_QWORD *)&v100 + 1) = 0;
            v82 = v68 - (_QWORD)v67;
            if (v82 >= 0x11)
            {
              do
              {
                operator delete(*v67);
                v67 = (void **)(*((_QWORD *)&v98 + 1) + 8);
                *((_QWORD *)&v98 + 1) = v67;
                v82 = v99 - (_QWORD)v67;
              }
              while ((_QWORD)v99 - (_QWORD)v67 > 0x10uLL);
            }
          }
          if (v82 >> 3 == 1)
          {
            v83 = 21;
          }
          else
          {
            if (v82 >> 3 != 2)
            {
LABEL_76:
              v94 = 1;
              v93 = a3 - a2;
              goto LABEL_8;
            }
            v83 = 42;
          }
          *(_QWORD *)&v100 = v83;
          goto LABEL_76;
        }
        v93 = v66;
        v75 = *((_QWORD *)&v100 + 1) + v100 - 1;
        v76 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v75 / 0x2A));
        v77 = v75 % 0x2A;
        v78 = *(void **)(v76 + 96 * (v75 % 0x2A) + 56);
        if (v78)
        {
          *(_QWORD *)(v76 + 96 * v77 + 64) = v78;
          operator delete(v78);
        }
        v79 = *(void **)(v76 + 96 * v77 + 32);
        if (v79)
        {
          *(_QWORD *)(v76 + 96 * v77 + 40) = v79;
          operator delete(v79);
        }
        v80 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v81 = v100;
        --*((_QWORD *)&v100 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v80 = 0;
        if ((unint64_t)(v80 - (*((_QWORD *)&v81 + 1) + v81) + 1) >= 0x54)
        {
          operator delete(*(void **)(v99 - 8));
          *(_QWORD *)&v99 = v99 - 8;
        }
        v94 = 1;
LABEL_8:
        v16 = *((_QWORD *)&v100 + 1);
        if (*((_QWORD *)&v100 + 1))
          continue;
        if ((v94 & 1) != 0)
        {
          v84 = *v92;
          *(_QWORD *)v84 = a2;
          *(_QWORD *)(v84 + 8) = a2 + v93;
          v6 = 1;
          *(_BYTE *)(v84 + 16) = 1;
          goto LABEL_79;
        }
        v6 = 0;
        v85 = (void **)*((_QWORD *)&v98 + 1);
        v86 = (void **)v99;
        *((_QWORD *)&v100 + 1) = 0;
        v87 = v99 - *((_QWORD *)&v98 + 1);
        if ((_QWORD)v99 - *((_QWORD *)&v98 + 1) >= 0x11uLL)
          goto LABEL_80;
LABEL_81:
        v88 = v87 >> 3;
        if (v88 == 1)
        {
          v89 = 21;
LABEL_85:
          *(_QWORD *)&v100 = v89;
        }
        else if (v88 == 2)
        {
          v89 = 42;
          goto LABEL_85;
        }
        if (v85 != v86)
        {
          do
          {
            v90 = *v85++;
            operator delete(v90);
          }
          while (v85 != v86);
          if ((_QWORD)v99 != *((_QWORD *)&v98 + 1))
            *(_QWORD *)&v99 = v99 + ((*((_QWORD *)&v98 + 1) - v99 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if ((_QWORD)v98)
          operator delete((void *)v98);
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        v49 = v100;
        if (!(_QWORD)v100)
        {
          std::deque<std::__state<char>>::__add_front_capacity((uint64_t)&v98);
          v49 = v100;
        }
        v50 = (_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v49 / 0x2A));
        v51 = *v50 + 96 * (v49 % 0x2A);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v51 = 0;
        if (v51 == *v50)
          v51 = *(v50 - 1) + 4032;
        v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        v53 = v36 + 96 * v37;
        *(_QWORD *)(v51 - 56) = 0;
        *(_QWORD *)(v51 - 48) = 0;
        *(_QWORD *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(_QWORD *)(v51 - 48) = *(_QWORD *)(v53 + 48);
        *(_QWORD *)(v53 + 32) = 0;
        *(_QWORD *)(v53 + 40) = 0;
        *(_QWORD *)(v53 + 48) = 0;
        *(_QWORD *)(v51 - 40) = 0;
        *(_QWORD *)(v51 - 32) = 0;
        *(_QWORD *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(_QWORD *)(v51 - 24) = *(_QWORD *)(v53 + 72);
        *(_QWORD *)(v53 + 56) = 0;
        *(_QWORD *)(v53 + 64) = 0;
        *(_QWORD *)(v53 + 72) = 0;
        v54 = *v40;
        *(_QWORD *)(v51 - 11) = *(_QWORD *)(v38 + 85);
        *(_QWORD *)(v51 - 16) = v54;
        v55 = *((_QWORD *)&v100 + 1);
        *(_QWORD *)&v100 = v100 - 1;
        ++*((_QWORD *)&v100 + 1);
        v56 = v55 + v100;
        v57 = (v55 + (uint64_t)v100) / 0x2AuLL;
        v43 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * v57);
        v44 = v56 - 42 * v57;
        v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45)
          goto LABEL_23;
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        v42 = *((_QWORD *)&v100 + 1) + v100 - 1;
        v43 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v42 / 0x2A));
        v44 = v42 % 0x2A;
        v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(_QWORD *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(_QWORD *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        v47 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v48 = v100;
        --*((_QWORD *)&v100 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v47 = 0;
        if ((unint64_t)(v47 - (*((_QWORD *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v99 - 8));
          *(_QWORD *)&v99 = v99 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        *(_QWORD *)&v58 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v97[64] = v58;
        *(_OWORD *)&v97[80] = v58;
        *(_OWORD *)&v97[32] = v58;
        *(_OWORD *)&v97[48] = v58;
        *(_OWORD *)v97 = v58;
        *(_OWORD *)&v97[16] = v58;
        std::__state<char>::__state((uint64_t)v97, (__int128 *)(v36 + 96 * v37));
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v97[80] + 24))(*(_QWORD *)&v97[80], 0, v97);
        v59 = *((_QWORD *)&v98 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v60 = 0;
        else
          v60 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v61 = *((_QWORD *)&v100 + 1) + v100;
        if (v60 == *((_QWORD *)&v100 + 1) + (_QWORD)v100)
        {
          std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v98);
          v59 = *((_QWORD *)&v98 + 1);
          v61 = *((_QWORD *)&v100 + 1) + v100;
        }
        v62 = *(_QWORD *)(v59 + 8 * (v61 / 0x2A)) + 96 * (v61 % 0x2A);
        v63 = *(_OWORD *)&v97[16];
        *(_OWORD *)v62 = *(_OWORD *)v97;
        *(_OWORD *)(v62 + 16) = v63;
        *(_QWORD *)(v62 + 40) = 0;
        *(_QWORD *)(v62 + 48) = 0;
        *(_QWORD *)(v62 + 32) = 0;
        *(_OWORD *)(v62 + 32) = *(_OWORD *)&v97[32];
        *(_QWORD *)(v62 + 48) = *(_QWORD *)&v97[48];
        memset(&v97[32], 0, 24);
        *(_QWORD *)(v62 + 56) = 0;
        *(_QWORD *)(v62 + 64) = 0;
        *(_QWORD *)(v62 + 72) = 0;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)&v97[56];
        *(_QWORD *)(v62 + 72) = *(_QWORD *)&v97[72];
        memset(&v97[56], 0, 24);
        v64 = *(_QWORD *)&v97[80];
        *(_QWORD *)(v62 + 85) = *(_QWORD *)&v97[85];
        *(_QWORD *)(v62 + 80) = v64;
        ++*((_QWORD *)&v100 + 1);
        if (*(_QWORD *)&v97[56])
        {
          *(_QWORD *)&v97[64] = *(_QWORD *)&v97[56];
          operator delete(*(void **)&v97[56]);
        }
        if (*(_QWORD *)&v97[32])
        {
          *(_QWORD *)&v97[40] = *(_QWORD *)&v97[32];
          operator delete(*(void **)&v97[32]);
        }
        goto LABEL_8;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_236E29CDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_236E29CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::__state<char>::~__state((uint64_t *)va);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v11 - 144));
  _Unwind_Resume(a1);
}

void sub_236E29D38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_236E29D4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  const char *v20;
  BOOL v21;
  uint64_t v22;
  char *v23;
  char *v24;
  const char *v25;
  char *v26;
  void *v27;
  void *v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void *v50;
  char *v51;
  char *v52;
  char *v53;
  void *v54;
  void *v55;
  uint64_t *v57;
  const char *v58;
  const char *v59;
  char v60;
  _BYTE v62[96];
  std::vector<std::csub_match>::value_type __x;
  _BYTE v64[40];
  void *v65[2];
  _BYTE v66[40];
  char *v67;
  char *v68;
  unint64_t v69;

  v67 = 0;
  v68 = 0;
  v69 = 0;
  *(_DWORD *)&v66[36] = -1431655766;
  *(_QWORD *)v64 = 0xAAAAAAAA00000000;
  memset(&v64[8], 0, 32);
  *(_OWORD *)v65 = 0u;
  memset(v66, 0, 36);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_63;
  __x.second = a3;
  *(_QWORD *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)v62 = 0;
  memset(&v62[8], 0, 85);
  v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
  if (*(_QWORD *)&v62[56])
  {
    *(_QWORD *)&v62[64] = *(_QWORD *)&v62[56];
    operator delete(*(void **)&v62[56]);
  }
  if (*(_QWORD *)&v62[32])
  {
    *(_QWORD *)&v62[40] = *(_QWORD *)&v62[32];
    operator delete(*(void **)&v62[32]);
  }
  v12 = v68;
  *((_DWORD *)v68 - 24) = 0;
  *((_QWORD *)v12 - 11) = a2;
  *((_QWORD *)v12 - 10) = a2;
  *((_QWORD *)v12 - 9) = a3;
  v13 = *((_QWORD *)v12 - 8);
  v14 = *(unsigned int *)(a1 + 28);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v12 - 7) - v13) >> 3);
  if (v14 <= v15)
  {
    if (v14 < v15)
      *((_QWORD *)v12 - 7) = v13 + 24 * v14;
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v12 - 64), v14 - v15, &__x);
    v12 = v68;
  }
  v16 = *((_QWORD *)v12 - 5);
  v17 = *(unsigned int *)(a1 + 32);
  v18 = (*((_QWORD *)v12 - 4) - v16) >> 4;
  v57 = a4;
  if (v17 <= v18)
  {
    if (v17 < v18)
      *((_QWORD *)v12 - 4) = v16 + 16 * v17;
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v12 - 40), v17 - v18);
    v12 = v68;
  }
  v60 = 0;
  v19 = 0;
  v20 = (const char *)(a3 - a2);
  *((_QWORD *)v12 - 2) = v6;
  *((_DWORD *)v12 - 2) = a5;
  v59 = 0;
  *(v12 - 4) = a6;
  v58 = a3;
  do
  {
    v21 = (++v19 & 0xFFF) != 0 || (int)(v19 >> 12) < (int)v20;
    if (!v21)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v23 = v12 - 16;
    v22 = *((_QWORD *)v12 - 2);
    v24 = v12 - 96;
    if (v22)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v12 - 96);
    switch(*(_DWORD *)v24)
    {
      case 0xFFFFFC18:
        v25 = (const char *)*((_QWORD *)v12 - 10);
        if ((a5 & 0x20) != 0 && v25 == a2 || (a5 & 0x1000) != 0 && v25 != v58)
          goto LABEL_29;
        v33 = &v25[-*((_QWORD *)v12 - 11)];
        v34 = v59;
        if ((v60 & ((uint64_t)v59 >= (uint64_t)v33)) == 0)
        {
          v35 = *((_OWORD *)v12 - 5);
          *(_OWORD *)v64 = *(_OWORD *)v24;
          *(_OWORD *)&v64[16] = v35;
          if (v64 != v24)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char **)&v64[32], *((char **)v12 - 8), *((char **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((uint64_t)v66, *((const double **)v12 - 5), *((const double **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          }
          v36 = *(_QWORD *)v23;
          *(_QWORD *)&v66[29] = *(_QWORD *)(v12 - 11);
          *(_QWORD *)&v66[24] = v36;
          v34 = v33;
        }
        v37 = v68;
        if (v34 == v20)
        {
          v38 = v67;
          while (v37 != v38)
          {
            v39 = (void *)*((_QWORD *)v37 - 5);
            if (v39)
            {
              *((_QWORD *)v37 - 4) = v39;
              operator delete(v39);
            }
            v40 = (void *)*((_QWORD *)v37 - 8);
            if (v40)
            {
              *((_QWORD *)v37 - 7) = v40;
              operator delete(v40);
            }
            v37 -= 96;
          }
          v68 = v38;
          v60 = 1;
          v59 = v20;
        }
        else
        {
          v59 = v34;
          v41 = (void *)*((_QWORD *)v68 - 5);
          if (v41)
          {
            *((_QWORD *)v68 - 4) = v41;
            operator delete(v41);
          }
          v42 = (void *)*((_QWORD *)v37 - 8);
          if (v42)
          {
            *((_QWORD *)v37 - 7) = v42;
            operator delete(v42);
          }
          v68 = v37 - 96;
          v60 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        v26 = v68;
        v27 = (void *)*((_QWORD *)v68 - 5);
        if (v27)
        {
          *((_QWORD *)v68 - 4) = v27;
          operator delete(v27);
        }
        v28 = (void *)*((_QWORD *)v26 - 8);
        if (v28)
        {
          *((_QWORD *)v26 - 7) = v28;
          operator delete(v28);
        }
        v68 = v26 - 96;
        break;
      case 0xFFFFFC20:
        *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v62[64] = v29;
        *(_OWORD *)&v62[80] = v29;
        *(_OWORD *)&v62[32] = v29;
        *(_OWORD *)&v62[48] = v29;
        *(_OWORD *)v62 = v29;
        *(_OWORD *)&v62[16] = v29;
        std::__state<char>::__state((uint64_t)v62, (__int128 *)v12 - 6);
        (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v23 + 24))(*(_QWORD *)v23, 1, v12 - 96);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v62[80] + 24))(*(_QWORD *)&v62[80], 0, v62);
        v30 = v68;
        if ((unint64_t)v68 >= v69)
        {
          v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
          if (*(_QWORD *)&v62[56])
          {
            *(_QWORD *)&v62[64] = *(_QWORD *)&v62[56];
            operator delete(*(void **)&v62[56]);
          }
        }
        else
        {
          v31 = *(_OWORD *)&v62[16];
          *(_OWORD *)v68 = *(_OWORD *)v62;
          *((_OWORD *)v30 + 1) = v31;
          *((_QWORD *)v30 + 4) = 0;
          *((_QWORD *)v30 + 5) = 0;
          *((_QWORD *)v30 + 6) = 0;
          *((_QWORD *)v30 + 7) = 0;
          *((_OWORD *)v30 + 2) = *(_OWORD *)&v62[32];
          *((_QWORD *)v30 + 6) = *(_QWORD *)&v62[48];
          memset(&v62[32], 0, 24);
          *((_QWORD *)v30 + 8) = 0;
          *((_QWORD *)v30 + 9) = 0;
          *(_OWORD *)(v30 + 56) = *(_OWORD *)&v62[56];
          *((_QWORD *)v30 + 9) = *(_QWORD *)&v62[72];
          memset(&v62[56], 0, 24);
          v32 = *(_QWORD *)&v62[80];
          *(_QWORD *)(v30 + 85) = *(_QWORD *)&v62[85];
          *((_QWORD *)v30 + 10) = v32;
          v68 = v30 + 96;
        }
        if (*(_QWORD *)&v62[32])
        {
          *(_QWORD *)&v62[40] = *(_QWORD *)&v62[32];
          operator delete(*(void **)&v62[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    v12 = v68;
  }
  while (v67 != v68);
  if ((v60 & 1) == 0)
  {
LABEL_63:
    v49 = 0;
    v50 = *(void **)v66;
    if (!*(_QWORD *)v66)
      goto LABEL_65;
    goto LABEL_64;
  }
  v43 = *v57;
  *(_QWORD *)v43 = a2;
  *(_QWORD *)(v43 + 8) = &v59[(_QWORD)a2];
  *(_BYTE *)(v43 + 16) = 1;
  if (v65[0] != *(void **)&v64[32])
  {
    v44 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v65[0] - *(_QWORD *)&v64[32]) >> 3);
    v45 = (_BYTE *)(*(_QWORD *)&v64[32] + 16);
    v46 = 1;
    do
    {
      v47 = v43 + 24 * v46;
      *(_OWORD *)v47 = *((_OWORD *)v45 - 1);
      v48 = *v45;
      v45 += 24;
      *(_BYTE *)(v47 + 16) = v48;
      v21 = v44 > v46++;
    }
    while (v21);
  }
  v49 = 1;
  v50 = *(void **)v66;
  if (*(_QWORD *)v66)
  {
LABEL_64:
    *(_QWORD *)&v66[8] = v50;
    operator delete(v50);
  }
LABEL_65:
  if (*(_QWORD *)&v64[32])
  {
    v65[0] = *(void **)&v64[32];
    operator delete(*(void **)&v64[32]);
  }
  v51 = v67;
  if (v67)
  {
    v52 = v68;
    v53 = v67;
    if (v68 != v67)
    {
      do
      {
        v54 = (void *)*((_QWORD *)v52 - 5);
        if (v54)
        {
          *((_QWORD *)v52 - 4) = v54;
          operator delete(v54);
        }
        v55 = (void *)*((_QWORD *)v52 - 8);
        if (v55)
        {
          *((_QWORD *)v52 - 7) = v55;
          operator delete(v55);
        }
        v52 -= 96;
      }
      while (v52 != v51);
      v53 = v67;
    }
    v68 = v51;
    operator delete(v53);
  }
  return v49;
}

void sub_236E2A314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  std::__state<char>::~__state(&a35);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v35 - 120));
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::clear(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v11 = 0;
  }
  else
  {
    v4 = a1[4];
    v5 = &v2[v4 / 0x2A];
    v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        v8 = (void *)*((_QWORD *)v6 + 7);
        if (v8)
        {
          *((_QWORD *)v6 + 8) = v8;
          operator delete(v8);
        }
        v9 = (void *)*((_QWORD *)v6 + 4);
        if (v9)
        {
          *((_QWORD *)v6 + 5) = v9;
          operator delete(v9);
        }
        v6 += 96;
        if (v6 - (_BYTE *)*v5 == 4032)
        {
          v10 = (char *)v5[1];
          ++v5;
          v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
    a1[5] = 0;
    v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v12 = a1[2];
        v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        v11 = v12 - (_QWORD)v2;
      }
      while (v11 > 0x10);
    }
  }
  if (v11 >> 3 == 1)
  {
    v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2)
      return;
    v13 = 42;
  }
  a1[4] = v13;
}

void **std::deque<std::__state<char>>::~deque[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  _BYTE *v5;
  _BYTE *v6;

  std::deque<std::__state<char>>::clear(a1);
  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    v6 = a1[1];
    v5 = a1[2];
    if (v5 != v6)
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  BOOL v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v32 = (v5 - v9) >> 2;
      if (v5 == v9)
        v32 = 1;
      if (!(v32 >> 61))
      {
        v33 = v32 >> 2;
        v34 = 8 * v32;
        v35 = (char *)operator new(8 * v32);
        v36 = &v35[8 * v33];
        v37 = &v35[v34];
        v39 = v5 - v7;
        v38 = v5 == v7;
        v5 = v36;
        if (!v38)
        {
          v5 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          v40 = v39 - 8;
          if ((unint64_t)(v39 - 8) >= 0x38)
          {
            v73 = &v35[8 * v33];
            v41 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v40 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v41 = &v36[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v41 = &v35[8 * v33];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v41 = v80;
            v41 += 8;
          }
          while (v41 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v89);
      return;
    }
    v89 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v89);
    v42 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v42 + 1);
    v8 = *v42;
    *(_QWORD *)(a1 + 8) = v42 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v43 = (v5 - v9) >> 2;
      if (v5 == v9)
        v43 = 1;
      if (!(v43 >> 61))
      {
        v44 = v43 >> 2;
        v45 = 8 * v43;
        v35 = (char *)operator new(8 * v43);
        v36 = &v35[8 * v44];
        v37 = &v35[v45];
        v46 = v5 - v7;
        v38 = v5 == v7;
        v5 = v36;
        if (!v38)
        {
          v5 = &v36[v46 & 0xFFFFFFFFFFFFFFF8];
          v47 = v46 - 8;
          if ((unint64_t)(v46 - 8) >= 0x38)
          {
            v81 = &v35[8 * v44];
            v48 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v47 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v48 = &v36[v83];
              v7 += v83;
              v84 = (__int128 *)(v42 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v48 = &v35[8 * v44];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v48 = v88;
            v48 += 8;
          }
          while (v48 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v35;
        *(_QWORD *)(a1 + 8) = v36;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v37;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFC0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v30 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v49 = 1;
      else
        v49 = v20 >> 2;
      if (v49 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v27 = (char *)operator new(8 * v49);
      v28 = &v27[8 * v49];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v27;
      *(_QWORD *)v27 = v30;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v31 = v21 + 2;
      if (v21 >= -1)
        v31 = v21 + 1;
      v27 -= 8 * (v31 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    goto LABEL_49;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_49:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v25)
            v57 = 1;
          else
            v57 = (v28 - v25) >> 2;
          if (v57 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v58 = (char *)operator new(8 * v57);
          v59 = v58;
          v60 = (v57 + 3) >> 2;
          v27 = &v58[8 * v60];
          v61 = v29 - v25;
          v38 = v29 == v25;
          v29 = v27;
          if (!v38)
          {
            v29 = &v27[v61 & 0xFFFFFFFFFFFFFFF8];
            v62 = v61 - 8;
            v63 = &v58[8 * v60];
            v64 = v25;
            if (v62 < 0x38)
              goto LABEL_89;
            v65 = 8 * v60;
            v63 = &v58[8 * v60];
            v64 = v25;
            if ((unint64_t)(v63 - v25) < 0x20)
              goto LABEL_89;
            v66 = (v62 >> 3) + 1;
            v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
            v63 = &v27[v67];
            v64 = &v25[v67];
            v68 = (__int128 *)(v25 + 16);
            v69 = &v58[v65 + 16];
            v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v71 = *v68;
              *((_OWORD *)v69 - 1) = *(v68 - 1);
              *(_OWORD *)v69 = v71;
              v68 += 2;
              v69 += 32;
              v70 -= 4;
            }
            while (v70);
            if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_89:
              do
              {
                v72 = *(_QWORD *)v64;
                v64 += 8;
                *(_QWORD *)v63 = v72;
                v63 += 8;
              }
              while (v63 != v29);
            }
          }
          v28 = &v58[8 * v57];
          operator delete(v25);
          v25 = v59;
        }
        else
        {
          v53 = (v28 - v29) >> 3;
          if (v53 >= -1)
            v54 = v53 + 1;
          else
            v54 = v53 + 2;
          v55 = v54 >> 1;
          v27 = &v25[8 * (v54 >> 1)];
          v56 = v25;
          if (v29 != v25)
          {
            memmove(v27, v25, v29 - v25);
            v56 = v29;
          }
          v29 = (char *)v56 + 8 * v55;
        }
      }
      v52 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v27 - 1) = v52;
      v27 -= 8;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
  }
LABEL_45:
  v51 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v51)
    operator delete(v51);
}

void sub_236E2AA7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::deque<std::__state<char>>::__add_front_capacity(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  BOOL v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  void *v46;
  void *v47;

  v3 = *(uint64_t **)(a1 + 8);
  v2 = *(uint64_t **)(a1 + 16);
  v4 = v2 - v3;
  if (v2 == v3)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v5 - (*(_QWORD *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(_QWORD *)(a1 + 32) = v6 + 42;
    v47 = (void *)*(v2 - 1);
    *(_QWORD *)(a1 + 16) = v2 - 1;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
    return;
  }
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(uint64_t **)a1;
  v9 = (uint64_t)v7 - *(_QWORD *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v47);
      v43 = *(_QWORD *)(a1 + 16);
      v47 = *(void **)(v43 - 8);
      *(_QWORD *)(a1 + 16) = v43 - 8;
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
        goto LABEL_9;
    }
    else
    {
      v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
      {
LABEL_9:
        v10 = 21;
LABEL_45:
        *(_QWORD *)(a1 + 32) = v10;
        return;
      }
    }
    v10 = *(_QWORD *)(a1 + 32) + 42;
    goto LABEL_45;
  }
  if (v7 == v8)
    v11 = 1;
  else
    v11 = v9 >> 2;
  if (v11 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v12 = (char *)operator new(8 * v11);
  v13 = operator new(0xFC0uLL);
  v14 = v13;
  if (v11)
  {
    v15 = &v12[8 * v11];
    *(_QWORD *)v12 = v13;
    v16 = v12 + 8;
    if (v3 != v2)
    {
LABEL_16:
      v17 = v12;
      while (1)
      {
        if (v16 == v15)
        {
          if (v17 <= v12)
          {
            if (v16 == v12)
              v26 = 1;
            else
              v26 = (v16 - v12) >> 2;
            if (v26 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v27 = (char *)operator new(8 * v26);
            v28 = v27;
            v29 = v26 >> 2;
            v18 = &v27[8 * (v26 >> 2)];
            v31 = v16 - v17;
            v30 = v16 == v17;
            v16 = v18;
            if (!v30)
            {
              v16 = &v18[v31 & 0xFFFFFFFFFFFFFFF8];
              v32 = v31 - 8;
              if (v32 < 0x38 || (v33 = 8 * v29, (unint64_t)(&v27[8 * v29] - v17) < 0x20))
              {
                v34 = &v27[8 * (v26 >> 2)];
                v35 = v17;
                goto LABEL_35;
              }
              v37 = (v32 >> 3) + 1;
              v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
              v34 = &v18[v38];
              v35 = &v17[v38];
              v39 = (__int128 *)(v17 + 16);
              v40 = &v27[v33 + 16];
              v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v42 = *v39;
                *((_OWORD *)v40 - 1) = *(v39 - 1);
                *(_OWORD *)v40 = v42;
                v39 += 2;
                v40 += 32;
                v41 -= 4;
              }
              while (v41);
              if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_35:
                  v36 = *(_QWORD *)v35;
                  v35 += 8;
                  *(_QWORD *)v34 = v36;
                  v34 += 8;
                }
                while (v34 != v16);
              }
            }
            v15 = &v27[8 * v26];
            if (v12)
              operator delete(v12);
            v12 = v28;
            goto LABEL_18;
          }
          v20 = (v17 - v12) >> 3;
          if (v20 >= -1)
            v21 = v20 + 1;
          else
            v21 = v20 + 2;
          v22 = v21 >> 1;
          v23 = &v17[-8 * (v21 >> 1)];
          v24 = v16;
          if (v16 != v17)
          {
            memmove(v23, v17, v16 - v17);
            v24 = v17;
          }
          v25 = -v22;
          v15 = v16;
          v16 = &v23[v16 - v17];
          v18 = &v24[8 * v25];
        }
        else
        {
          v18 = v17;
        }
LABEL_18:
        v19 = *v3++;
        *(_QWORD *)v16 = v19;
        v16 += 8;
        v17 = v18;
        if (v3 == *(uint64_t **)(a1 + 16))
          goto LABEL_48;
      }
    }
  }
  else
  {
    v44 = (char *)operator new(8uLL);
    v15 = v44 + 8;
    operator delete(v12);
    v3 = *(uint64_t **)(a1 + 8);
    v45 = *(uint64_t **)(a1 + 16);
    v12 = v44;
    *(_QWORD *)v44 = v14;
    v16 = v44 + 8;
    if (v3 != v45)
      goto LABEL_16;
  }
  v18 = v12;
LABEL_48:
  v46 = *(void **)a1;
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 24) = v15;
  if (v16 - v18 == 8)
  {
    *(_QWORD *)(a1 + 32) = 21;
    if (v46)
LABEL_50:
      operator delete(v46);
  }
  else
  {
    *(_QWORD *)(a1 + 32) += 42;
    if (v46)
      goto LABEL_50;
  }
}

void sub_236E2B130(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char **a1, char *a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v18 = a1[1];
    v17 = a1 + 1;
    v14 = v18;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *(_OWORD *)v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      v16 = v24 - result;
      v14 = result;
    }
    else
    {
      v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      v21 = v14;
      if (v20 != a3)
      {
        v22 = v14;
        do
        {
          v23 = *(_OWORD *)v20;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v13 = 24 * v12;
    result = (char *)operator new(24 * v12);
    v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v15 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    v16 = v15 - v14;
    v17 = a1 + 1;
  }
  *v17 = &v14[v16];
  return result;
}

double *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(uint64_t a1, const double *a2, const double *a3, size_t __sz)
{
  uint64_t v8;
  double *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double *v13;
  double *v14;
  int64_t v15;
  _QWORD *v16;
  double *v17;
  int64_t v18;
  unint64_t v19;
  const double *v20;
  unint64_t v21;
  double *v22;
  const double *v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double *v27;
  __int128 v28;
  unint64_t v29;
  char *v30;
  const double *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  BOOL v37;
  char v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  const double *v42;
  double *v43;
  uint64_t v44;
  const double *v45;
  double *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  char v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  const double *v56;
  double *v57;
  uint64_t v58;
  const double *v59;
  double *v60;
  float64x2x2_t v61;
  float64x2x2_t v62;
  float64x2x2_t v63;
  float64x2x2_t v64;

  v8 = *(_QWORD *)(a1 + 16);
  result = *(double **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_62;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v37)
      v11 = v10;
    if (v11 >> 60)
LABEL_62:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v12 = 2 * v11;
    result = (double *)operator new(16 * v11);
    v13 = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v14 = result;
    if (a2 != a3)
    {
      result = (double *)memcpy(result, a2, ((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0);
      v14 = (double *)((char *)v13 + (((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0));
    }
    v15 = (char *)v14 - (char *)v13;
    v16 = (_QWORD *)(a1 + 8);
    goto LABEL_29;
  }
  v17 = *(double **)(a1 + 8);
  v16 = (_QWORD *)(a1 + 8);
  v13 = v17;
  v18 = (char *)v17 - (char *)result;
  v19 = ((char *)v17 - (char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      v30 = (char *)result;
    }
    else
    {
      v29 = (char *)a3 - (char *)a2 - 16;
      if (v29 < 0xF0
        || ((v47 = v29 & 0xFFFFFFFFFFFFFFF0 | 8,
             v48 = (char *)result + v47,
             v49 = (unint64_t)a2 + v47,
             v50 = (v29 & 0xFFFFFFFFFFFFFFF0) + 16,
             result + 1 < (const double *)((char *)a2 + v50))
          ? (v51 = a2 + 1 >= (double *)((char *)result + v50))
          : (v51 = 1),
            v51 ? (v52 = 0) : (v52 = 1),
            v48 > (char *)a2 ? (v53 = (unint64_t)result >= v49) : (v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        v30 = (char *)result;
        v31 = a2;
      }
      else
      {
        v54 = (v29 >> 4) + 1;
        v55 = 2 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
        v30 = (char *)&result[v55];
        v31 = &a2[v55];
        v56 = a2 + 4;
        v57 = result + 4;
        v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v59 = v56 - 4;
          v62 = vld2q_f64(v59);
          v64 = vld2q_f64(v56);
          v60 = v57 - 4;
          vst2q_f64(v60, v62);
          vst2q_f64(v57, v64);
          v56 += 8;
          v57 += 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
      do
      {
        v32 = *(_QWORD *)v31;
        v33 = *((_QWORD *)v31 + 1);
        v31 += 2;
        *(_QWORD *)v30 = v32;
        *((_QWORD *)v30 + 1) = v33;
        v30 += 16;
      }
      while (v31 != a3);
    }
LABEL_28:
    v15 = v30 - (char *)result;
    v13 = result;
    goto LABEL_29;
  }
  v20 = &a2[2 * v19];
  if (v13 != result)
  {
    v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((v34 = v18 & 0xFFFFFFFFFFFFFFF0,
           v35 = (char *)result + v34 - 8,
           v36 = (unint64_t)a2 + v34 - 8,
           result + 1 < (const double *)((char *)a2 + v34))
        ? (v37 = a2 + 1 >= (double *)((char *)result + v34))
        : (v37 = 1),
          v37 ? (v38 = 0) : (v38 = 1),
          v35 > (char *)a2 ? (v39 = (unint64_t)result >= v36) : (v39 = 1),
          !v39 || (v38 & 1) != 0))
    {
      v22 = result;
      v23 = a2;
    }
    else
    {
      v40 = (v21 >> 4) + 1;
      v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      v22 = &result[v41];
      v23 = &a2[v41];
      v42 = a2 + 4;
      v43 = result + 4;
      v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v45 = v42 - 4;
        v61 = vld2q_f64(v45);
        v63 = vld2q_f64(v42);
        v46 = v43 - 4;
        vst2q_f64(v46, v61);
        vst2q_f64(v43, v63);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_18;
    }
    do
    {
      v24 = *(_QWORD *)v23;
      v25 = *((_QWORD *)v23 + 1);
      v23 += 2;
      *(_QWORD *)v22 = v24;
      *((_QWORD *)v22 + 1) = v25;
      v22 += 2;
    }
    while (v23 != v20);
  }
LABEL_18:
  v26 = v13;
  if (v20 != a3)
  {
    v27 = v13;
    do
    {
      v28 = *(_OWORD *)v20;
      v20 += 2;
      *(_OWORD *)v27 = v28;
      v27 += 2;
      v26 += 2;
    }
    while (v20 != a3);
  }
  v15 = (char *)v26 - (char *)v13;
LABEL_29:
  *v16 = (char *)v13 + v15;
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::sub_match<std::__wrap_iter<const char *>> *value;
  std::vector<std::ssub_match>::pointer end;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::sub_match<std::__wrap_iter<const char *>> *v11;
  std::vector<std::ssub_match>::size_type v12;
  std::sub_match<std::__wrap_iter<const char *>> *v13;
  std::vector<std::ssub_match>::size_type v14;
  std::sub_match<std::__wrap_iter<const char *>> *v15;
  std::sub_match<std::__wrap_iter<const char *>> *v16;
  std::vector<std::ssub_match>::pointer begin;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v11 = &end[__n];
      v12 = 24 * __n;
      do
      {
        end->first.__i_ = 0;
        end->second.__i_ = 0;
        end->matched = 0;
        ++end;
        v12 -= 24;
      }
      while (v12);
      end = v11;
    }
    this->__end_ = end;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v7 = v6 + __n;
    if (v6 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v6];
    v14 = 24 * __n;
    v15 = &v13[__n];
    v16 = v13;
    do
    {
      v16->first.__i_ = 0;
      v16->second.__i_ = 0;
      v16->matched = 0;
      ++v16;
      v14 -= 24;
    }
    while (v14);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v18 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(_QWORD *)&v13[-1].matched = *(_QWORD *)&end[-1].matched;
        v13[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v18;
        --v13;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v15;
    this->__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v9];
    if (end)
      operator delete(end);
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(uint64_t a1, uint64_t a2, int a3)
{
  const std::locale *v6;
  uint64_t v7;
  char *v8;

  v6 = (const std::locale *)MEMORY[0x23B804F50]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x24BEDB350]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x24BEDB4B0]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (char *)a2;
  else
    v8 = *(char **)a2;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if (&v8[v7] != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(a1, v8, &v8[v7]))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_236E2B870(_Unwind_Exception *a1)
{
  std::locale *v1;
  uint64_t v2;

  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_236E2B88C(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int v12;

  v6 = operator new(8uLL);
  *v6 = &unk_25086B488;
  v7 = operator new(0x10uLL);
  v7[1] = v6;
  v8 = operator new(0x20uLL);
  *v8 = &unk_25086B4E0;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (!v9)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    v12 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v12 <= 0x3F)
    {
LABEL_6:
      if (!v12)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      if (v12 != 16)
      {
        if (v12 != 32)
LABEL_19:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
        return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, a3);
    }
  }
  else
  {
LABEL_5:
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    v12 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v12 <= 0x3F)
      goto LABEL_6;
  }
  if (v12 == 64)
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
  if (v12 == 128)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, a3);
  if (v12 != 256)
    goto LABEL_19;
  return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
}

void sub_236E2BA54(_Unwind_Exception *a1)
{
  void *v1;
  void (__cdecl ***v2)(std::__owns_one_state<char> *__hidden);

  operator delete(v1);
  operator delete(v2);
  (*(void (**)(void *))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_236E2BA90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v2 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  char *v7;
  std::basic_regex<char> *v8;
  std::__owns_one_state<char> *v9;
  unsigned int marked_count;
  std::basic_regex<char> *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  std::__node<char> *v15;
  std::__node<char> *v16;
  std::__node<char> *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;
  std::__node<char> *v20;
  std::__owns_one_state<char> *v21;
  std::basic_regex<char> *v22;
  char *v23;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  std::basic_regex<char> *v26;
  std::__node<char> *v27;
  std::__owns_one_state<char> *v28;
  std::__node<char> *v29;

  end = a1->__end_;
  v7 = a2;
  while (1)
  {
    v8 = (std::basic_regex<char> *)v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v7, a3);
    if (v8 == (std::basic_regex<char> *)v7)
      break;
LABEL_2:
    if (v7 == (char *)v8)
      goto LABEL_6;
  }
  v9 = a1->__end_;
  marked_count = a1->__marked_count_;
  v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
  if (v8 != v11)
  {
    v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 != (std::basic_regex<char> *)a2)
  {
    if (v8 != (std::basic_regex<char> *)a3)
      goto LABEL_14;
    return a3;
  }
  v12 = (std::__node<char> *)operator new(0x10uLL);
  v13 = a1->__end_;
  first = v13->__first_;
  v12[1].__vftable = (std::__node<char>_vtbl *)first;
  v13->__first_ = v12;
  a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  if (v8 != (std::basic_regex<char> *)a3)
  {
LABEL_14:
    if (LOBYTE(v8->__traits_.__loc_.__locale_) != 124)
      return (char *)v8;
    v21 = a1->__end_;
    v22 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v23 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (1)
    {
      v8 = (std::basic_regex<char> *)v23;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v23, a3);
      if (v8 == (std::basic_regex<char> *)v23)
      {
        v24 = a1->__end_;
        v25 = a1->__marked_count_;
        v26 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
        if (v8 == v26)
        {
LABEL_11:
          if (v8 == v22)
          {
            v27 = (std::__node<char> *)operator new(0x10uLL);
            v28 = a1->__end_;
            v29 = v28->__first_;
            v27[1].__vftable = (std::__node<char>_vtbl *)v29;
            v28->__first_ = v27;
            a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
          }
          v15 = (std::__node<char> *)operator new(0x18uLL);
          v16 = v21->__first_;
          v15[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
          v15[2].__vftable = (std::__node<char>_vtbl *)v16;
          v15->__vftable = (std::__node<char>_vtbl *)&unk_25086BAA0;
          end->__first_ = v15;
          v21->__first_ = 0;
          v17 = (std::__node<char> *)operator new(0x10uLL);
          v18 = a1->__end_->__first_;
          v17[1].__vftable = (std::__node<char>_vtbl *)v18;
          v21->__first_ = v17;
          a1->__end_->__first_ = 0;
          v19 = (std::__node<char> *)operator new(0x10uLL);
          v20 = v21->__first_;
          v19->__vftable = (std::__node<char>_vtbl *)&unk_25086BAE8;
          v19[1].__vftable = (std::__node<char>_vtbl *)v20;
          a1->__end_->__first_ = v19;
          a1->__end_ = (std::__owns_one_state<char> *)v21->__first_;
          if (v8 == (std::basic_regex<char> *)a3)
            return a3;
          goto LABEL_14;
        }
        v23 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v26, (std::basic_regex<char> *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
      }
      if (v23 == (char *)v8)
        goto LABEL_11;
    }
  }
  return a3;
}

std::string::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::string::value_type *a3)
{
  std::basic_regex<char> *v3;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::__owns_one_state<char> *v11;
  int v12;
  std::basic_regex<char> *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a2;
  if (a2 == (std::basic_regex<char> *)a3)
    return (std::string::value_type *)a2;
  if (LOBYTE(a2->__traits_.__loc_.__locale_) == 94)
  {
    v6 = operator new(0x18uLL);
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *v6 = &unk_25086B5D8;
    v6[1] = v9;
    *((_BYTE *)v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      v10 = v3;
      v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, (uint64_t)v10, a3);
      if (v10 != v13)
      {
        v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v10 != v3)
          continue;
      }
      if ((char *)&v10->__traits_.__loc_.__locale_ + 1 != a3 || LOBYTE(v10->__traits_.__loc_.__locale_) != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v14 = operator new(0x18uLL);
      v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *v14 = &unk_25086B620;
      v14[1] = v17;
      *((_BYTE *)v14 + 16) = v15;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::basic_regex<char> *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_12;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2)
LABEL_12:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3)
    return a3;
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    v9 = *(_QWORD *)(a1 + 56);
    v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if ((std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1) == v11)
      goto LABEL_12;
    do
    {
      v8 = v11;
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v8 == v10)
      goto LABEL_12;
    v12 = operator new(0x18uLL);
    v13 = *(_QWORD *)(v9 + 8);
    v12[1] = *(_QWORD *)(v6 + 8);
    v12[2] = v13;
    *v12 = &unk_25086BAA0;
    *(_QWORD *)(v6 + 8) = v12;
    *(_QWORD *)(v9 + 8) = 0;
    v14 = operator new(0x10uLL);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v14[1] = v15;
    *(_QWORD *)(v9 + 8) = v14;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v16 = operator new(0x10uLL);
    v17 = *(_QWORD *)(v9 + 8);
    *v16 = &unk_25086BAE8;
    v16[1] = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
    if (v8 == a3)
      return a3;
  }
  return v8;
}

std::string::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *__s, std::string::value_type *a3)
{
  uint64_t v6;
  std::string::value_type *v7;
  std::string::value_type *v8;
  _QWORD *v9;
  uint64_t v10;
  std::basic_regex<char> *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::string::value_type *v21;
  std::string::value_type *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (std::string::value_type *)memchr(__s, 10, a3 - (std::string::value_type *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == (std::string::value_type *)__s)
  {
    v9 = operator new(0x10uLL);
    v10 = *(_QWORD *)(v6 + 8);
    v9[1] = v10;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v11 = (std::basic_regex<char> *)v8;
    else
      v11 = (std::basic_regex<char> *)(v8 + 1);
    if (v11 == (std::basic_regex<char> *)a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3)
      v11 = (std::basic_regex<char> *)v8;
    else
      v11 = (std::basic_regex<char> *)(v8 + 1);
    if (v11 == (std::basic_regex<char> *)a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (std::string::value_type *)memchr(v11, 10, a3 - (std::string::value_type *)v11);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == (std::string::value_type *)v11)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_25086BAA0;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_25086BAE8;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v11 = (std::basic_regex<char> *)v22;
    else
      v11 = (std::basic_regex<char> *)(v22 + 1);
  }
  while (v11 != (std::basic_regex<char> *)a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  _QWORD *v9;
  uint64_t v10;
  std::basic_regex<char> *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::basic_regex<char> *v21;
  std::basic_regex<char> *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = operator new(0x10uLL);
    v10 = *(_QWORD *)(v6 + 8);
    v9[1] = v10;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v11)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_25086BAA0;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_25086BAE8;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v11 = v22;
    else
      v11 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
  }
  while (v11 != a3);
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v6;
  int v7;
  __int128 v8;
  char *v9;
  unsigned int v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unsigned int marked_count;
  std::basic_regex<char> v23;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v17 = a2[1];
        if (v17 == 66)
        {
          v18 = (char *)operator new(0x30uLL);
          v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v18 = &unk_25086B668;
          *((_QWORD *)v18 + 1) = v20;
          std::locale::locale((std::locale *)v18 + 2, (const std::locale *)a1);
          *(_OWORD *)(v18 + 24) = *(_OWORD *)(a1 + 8);
          v18[40] = 1;
        }
        else
        {
          if (v17 != 98)
            return v3;
          v18 = (char *)operator new(0x30uLL);
          v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v18 = &unk_25086B668;
          *((_QWORD *)v18 + 1) = v19;
          std::locale::locale((std::locale *)v18 + 2, (const std::locale *)a1);
          *(_OWORD *)(v18 + 24) = *(_OWORD *)(a1 + 8);
          v18[40] = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return v3 + 2;
      }
      return v3;
    }
    if (v6 != 94)
      return v3;
    v11 = operator new(0x18uLL);
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
LABEL_17:
    *v11 = v15 + 16;
    v11[1] = v14;
    *((_BYTE *)v11 + 16) = v12;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return ++v3;
  }
  if (v6 == 36)
  {
    v11 = operator new(0x18uLL);
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
    goto LABEL_17;
  }
  if (v6 != 40 || a2 + 1 == a3 || a2[1] != 63 || a2 + 2 == a3)
    return v3;
  v7 = a2[2];
  if (v7 == 33)
  {
    *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v23.__loop_count_ = v21;
    *(_OWORD *)&v23.__start_.__cntrl_ = v21;
    *(_OWORD *)&v23.__traits_.__loc_.__locale_ = v21;
    *(_OWORD *)&v23.__traits_.__col_ = v21;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v23);
    v23.__flags_ = *(_DWORD *)(a1 + 24);
    v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v23, v3 + 3, a3);
    marked_count = v23.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v23, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v9 == a3 || *v9 != 41)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    goto LABEL_27;
  }
  if (v7 != 61)
    return v3;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v23.__loop_count_ = v8;
  *(_OWORD *)&v23.__start_.__cntrl_ = v8;
  *(_OWORD *)&v23.__traits_.__loc_.__locale_ = v8;
  *(_OWORD *)&v23.__traits_.__col_ = v8;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v23);
  v23.__flags_ = *(_DWORD *)(a1 + 24);
  v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v23, v3 + 3, a3);
  v10 = v23.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v23, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v10;
  if (v9 == a3 || *v9 != 41)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_27:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v23.__traits_.__loc_);
  return v9 + 1;
}

void sub_236E2C650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_236E2C664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_236E2C678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_236E2C68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::basic_regex<char> *v6;
  std::basic_regex<char> *result;
  std::__node<char> *v8;
  std::__owns_one_state<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;
  unsigned int marked_count;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  std::basic_regex<char> *v15;
  std::basic_regex<char> *v16;
  std::__node<char> *v17;
  std::__owns_one_state<char> *v18;
  std::__node<char> *v19;

  v3 = a2;
  if (a2 == a3)
    return v3;
  switch(LOBYTE(a2->__traits_.__loc_.__locale_))
  {
    case '(':
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3)
        goto LABEL_26;
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
        && BYTE1(a2->__traits_.__loc_.__locale_) == 63
        && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
      {
        ++this->__open_count_;
        v6 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, a3);
        if (v6 != a3 && LOBYTE(v6->__traits_.__loc_.__locale_) == 41)
        {
          --this->__open_count_;
          return (std::basic_regex<char> *)((char *)&v6->__traits_.__loc_.__locale_ + 1);
        }
LABEL_26:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((this->__flags_ & 2) != 0)
      {
        marked_count = this->__marked_count_;
      }
      else
      {
        v11 = (std::__node<char> *)operator new(0x18uLL);
        marked_count = this->__marked_count_ + 1;
        this->__marked_count_ = marked_count;
        end = this->__end_;
        first = end->__first_;
        v11->__vftable = (std::__node<char>_vtbl *)&unk_25086B938;
        v11[1].__vftable = (std::__node<char>_vtbl *)first;
        LODWORD(v11[2].__vftable) = marked_count;
        end->__first_ = v11;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      ++this->__open_count_;
      v15 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, a3);
      if (v15 == a3)
        goto LABEL_26;
      v16 = v15;
      if (LOBYTE(v15->__traits_.__loc_.__locale_) != 41)
        goto LABEL_26;
      if ((this->__flags_ & 2) == 0)
      {
        v17 = (std::__node<char> *)operator new(0x18uLL);
        v18 = this->__end_;
        v19 = v18->__first_;
        v17->__vftable = (std::__node<char>_vtbl *)&unk_25086B980;
        v17[1].__vftable = (std::__node<char>_vtbl *)v19;
        LODWORD(v17[2].__vftable) = marked_count;
        v18->__first_ = v17;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      --this->__open_count_;
      result = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
      break;
    case ')':
    case ',':
    case '-':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
    case '*':
    case '+':
    case '?':
      goto LABEL_25;
    case '.':
      v8 = (std::__node<char> *)operator new(0x10uLL);
      v9 = this->__end_;
      v10 = v9->__first_;
      v8->__vftable = (std::__node<char>_vtbl *)&unk_25086B6F8;
      v8[1].__vftable = (std::__node<char>_vtbl *)v10;
      v9->__first_ = v8;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return (std::basic_regex<char> *)((char *)v3 + 1);
    case '[':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (std::string::value_type *)a2, (std::string::value_type *)a3);
    case '\\':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    default:
      if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123)
LABEL_25:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int v6;
  int locale_low;
  std::basic_regex<char> *v8;
  std::basic_regex<char> *v9;
  char *v10;
  size_t v11;
  char *v13;
  int v14;
  int v15;
  char *v16;
  int v17;
  int v18;
  std::basic_regex<char> *v19;
  unsigned __int8 *v20;
  BOOL v21;
  std::basic_regex<char> *v22;
  BOOL v23;
  char *v24;
  size_t v25;
  std::basic_regex<char> *v26;
  int v27;
  int v28;
  std::basic_regex<char> *v29;
  int v30;
  std::basic_regex<char> *v31;
  _BYTE *v32;

  if (this == a3)
    return this;
  v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6)
        v21 = 1;
      else
        v21 = v9 == a3;
      if (!v21 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v11 = 0;
        goto LABEL_36;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v25 = 0;
      goto LABEL_45;
    }
    v8 = this;
    if (locale_low == 43)
    {
      v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v11 = 1;
LABEL_36:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v10;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v25 = 1;
      goto LABEL_45;
    }
    return v8;
  }
  if (locale_low == 63)
  {
    v22 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6)
      v23 = 1;
    else
      v23 = v22 == a3;
    if (v23 || LOBYTE(v22->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v22;
    }
    else
    {
      v24 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v24;
    }
  }
  else
  {
    v8 = this;
    if (locale_low != 123)
      return v8;
    v13 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_72;
    v14 = *v13;
    if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      goto LABEL_72;
    v15 = v14 - 48;
    v16 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_21:
      v16 = (char *)a3;
    }
    else
    {
      while (1)
      {
        v17 = *v16;
        if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38)
          break;
        if (v15 >= 214748364)
          goto LABEL_72;
        v15 = v17 + 10 * v15 - 48;
        if (++v16 == (char *)a3)
          goto LABEL_21;
      }
    }
    if (v16 == v13)
      goto LABEL_72;
    if (v16 == (char *)a3)
      goto LABEL_73;
    v18 = *v16;
    if (v18 != 44)
    {
      if (v18 == 125)
      {
        v19 = (std::basic_regex<char> *)(v16 + 1);
        if (v6 || v19 == a3 || LOBYTE(v19->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 1);
          return v19;
        }
        else
        {
          v20 = (unsigned __int8 *)(v16 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v20;
        }
      }
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    v26 = (std::basic_regex<char> *)(v16 + 1);
    if (v16 + 1 == (char *)a3)
      goto LABEL_72;
    v27 = LOBYTE(v26->__traits_.__loc_.__locale_);
    if (v27 == 125)
    {
      v9 = (std::basic_regex<char> *)(v16 + 2);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v11 = v15;
        v10 = v16 + 3;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        goto LABEL_36;
      }
      v25 = v15;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
LABEL_45:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v25, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v9;
    }
    if ((v27 & 0xF8) != 0x30 && (v27 & 0xFE) != 0x38)
      goto LABEL_73;
    v28 = v27 - 48;
    v29 = (std::basic_regex<char> *)(v16 + 2);
    if (v29 == a3)
    {
LABEL_61:
      v29 = a3;
    }
    else
    {
      while (1)
      {
        v30 = LOBYTE(v29->__traits_.__loc_.__locale_);
        if ((v30 & 0xF8) != 0x30 && (v30 & 0xFE) != 0x38)
          break;
        if (v28 >= 214748364)
          goto LABEL_72;
        v28 = v30 + 10 * v28 - 48;
        v29 = (std::basic_regex<char> *)((char *)v29 + 1);
        if (v29 == a3)
          goto LABEL_61;
      }
    }
    if (v29 == v26 || v29 == a3 || LOBYTE(v29->__traits_.__loc_.__locale_) != 125)
LABEL_73:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v28 < v15)
      goto LABEL_72;
    v31 = (std::basic_regex<char> *)((char *)&v29->__traits_.__loc_.__locale_ + 1);
    if (v6 || v31 == a3 || LOBYTE(v31->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 1);
      return v31;
    }
    else
    {
      v32 = (char *)&v29->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v32;
    }
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  int v8;
  unsigned int v9;
  int v11;
  unsigned __int8 *v12;

  if (a2 == a3)
    return a2;
  v4 = a2;
  if (*a2 == 92)
  {
    v6 = a2 + 1;
    if (a2 + 1 == a3)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    v8 = *v6;
    v9 = v8 - 48;
    if (v8 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
      return a2 + 2;
    }
    if ((v8 - 49) <= 8)
    {
      v4 = a2 + 2;
      if (a2 + 2 == a3)
      {
        v4 = a3;
      }
      else
      {
        while (1)
        {
          v11 = *v4;
          if ((v11 - 48) > 9)
            break;
          if (v9 >= 0x19999999)
            goto LABEL_24;
          ++v4;
          v9 = v11 + 10 * v9 - 48;
          if (v4 == a3)
          {
            v4 = a3;
            break;
          }
        }
        if (!v9)
LABEL_24:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
      }
      if (v9 > this->__marked_count_)
        goto LABEL_24;
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v9);
      if (v4 != v6)
        return v4;
    }
    v4 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 1, a3);
    if (v6 == v4)
    {
      v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(this, (std::basic_regex<char>::value_type *)a2 + 1, (std::basic_regex<char>::value_type *)a3, 0);
      if (v6 == v12)
        return a2;
      else
        return v12;
    }
  }
  return v4;
}

std::string::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::string::value_type *a2, std::string::value_type *a3)
{
  int v5;
  char v6;
  std::string::value_type *v7;
  void *v8;
  std::string::value_type *v9;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    if (v7 == a3)
      goto LABEL_20;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3)
      goto LABEL_20;
    do
    {
      v9 = v7;
      v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v7, a3, (uint64_t)v8);
    }
    while (v9 != v7);
    if (v9 == a3)
      goto LABEL_20;
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_236E2CFA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *result;

  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  _DWORD *v5;
  _DWORD *v6;
  int v7;

  v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v6;
        *(_QWORD *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_236E2D1F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_236E2D20C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_236E2D220(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_236E2D234(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_236E2D248(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_236E2D25C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, std::string *this)
{
  std::basic_regex<char>::value_type *v4;
  unsigned __int8 *result;
  uint64_t v6;
  std::basic_regex<char>::value_type v7;
  unsigned int v8;
  std::string::value_type v10;
  int v11;
  int v12;
  unsigned __int8 v13;
  char v14;
  unsigned __int8 v15;
  char v16;
  std::string::value_type v17;

  v4 = a2;
  if (a2 == a3)
    return (unsigned __int8 *)v4;
  switch(*a2)
  {
    case '0':
      if (this)
      {
        std::string::operator=(this, 0);
        return (unsigned __int8 *)(v4 + 1);
      }
      else
      {
        v7 = 0;
LABEL_57:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return (unsigned __int8 *)(v4 + 1);
      }
    case 'c':
      if (a2 + 1 == a3 || a2[1] < 65)
        goto LABEL_64;
      v8 = a2[1];
      if (v8 >= 0x5B && (v8 - 97) > 0x19u)
        goto LABEL_64;
      v10 = v8 & 0x1F;
      if (this)
      {
        std::string::operator=(this, v10);
        v4 += 2;
        return (unsigned __int8 *)v4;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v10);
      result = (unsigned __int8 *)(v4 + 2);
      break;
    case 'f':
      if (this)
        std::string::operator=(this, 12);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
      return (unsigned __int8 *)(v4 + 1);
    case 'n':
      if (this)
        std::string::operator=(this, 10);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
      return (unsigned __int8 *)(v4 + 1);
    case 'r':
      if (this)
        std::string::operator=(this, 13);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
      return (unsigned __int8 *)(v4 + 1);
    case 't':
      if (this)
        std::string::operator=(this, 9);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
      return (unsigned __int8 *)(v4 + 1);
    case 'u':
      if (a2 + 1 != a3)
      {
        v11 = a2[1];
        if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
        {
          v4 = a2 + 2;
          if (a2 + 2 != a3)
          {
            v12 = *v4;
            if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38 || (v12 | 0x20u) - 97 < 6)
              goto LABEL_39;
          }
        }
      }
      goto LABEL_64;
    case 'v':
      if (this)
        std::string::operator=(this, 11);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
      return (unsigned __int8 *)(v4 + 1);
    case 'x':
LABEL_39:
      if (v4 + 1 == a3)
        goto LABEL_64;
      v13 = v4[1];
      v14 = -48;
      if ((v13 & 0xF8) == 0x30 || (v13 & 0xFE) == 0x38)
        goto LABEL_44;
      v13 |= 0x20u;
      if ((v13 - 97) >= 6u)
        goto LABEL_64;
      v14 = -87;
LABEL_44:
      if (v4 + 2 == a3)
        goto LABEL_64;
      v15 = v4[2];
      v16 = -48;
      if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
      {
        v15 |= 0x20u;
        if ((v15 - 97) >= 6u)
LABEL_64:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        v16 = -87;
      }
      v17 = v15 + 16 * (v13 + v14) + v16;
      if (this)
        std::string::operator=(this, v17);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
      return (unsigned __int8 *)(v4 + 3);
    default:
      v6 = *a2;
      if ((_DWORD)v6 == 95 || (v6 & 0x80) == 0 && (a1->__traits_.__ct_->__tab_[v6] & 0x500) != 0)
        goto LABEL_64;
      v7 = *a2;
      if (!this)
        goto LABEL_57;
      std::string::operator=(this, v6);
      return (unsigned __int8 *)(v4 + 1);
  }
  return result;
}

std::string::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, std::string::value_type *a2, std::string::value_type *a3, uint64_t a4)
{
  std::string::value_type *v4;
  int64_t v5;
  int v6;
  std::string::value_type *v7;
  std::string::value_type *v10;
  int v11;
  char v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  std::string::value_type *v18;
  uint64_t v19;
  _BYTE *v20;
  std::string::value_type *v21;
  std::string::value_type *v22;
  int v23;
  char *v24;
  int v25;
  std::string::size_type size;
  int v27;
  std::string *v28;
  _BYTE *v29;
  std::string::value_type *v30;
  std::string __p;
  std::string v33;
  std::string v34;
  std::string v35;

  v4 = a2;
  v5 = a2 - a3;
  if (a2 == a3)
    return v4;
  v6 = *a2;
  if (v6 == 93)
    return v4;
  v7 = (std::string::value_type *)a4;
  v10 = a2 + 1;
  memset(&v34, 0, sizeof(v34));
  if (a2 + 1 != a3 && v6 == 91)
  {
    v11 = *v10;
    switch(v11)
    {
      case '.':
        v20 = a2 + 2;
        if (a3 - (v4 + 2) >= 2)
        {
          v21 = v4 + 2;
          v22 = v4 + 3;
          if (*v20 != 46)
            goto LABEL_26;
LABEL_25:
          if (*v22 == 93)
          {
            if (v21 != a3)
            {
              std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)v20, v4 + 2, (uint64_t)&v35);
              if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v34.__r_.__value_.__l.__data_);
              v34 = v35;
              size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
              if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                size = v34.__r_.__value_.__l.__size_;
              if (size - 1 >= 2)
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              v10 = v21 + 2;
              v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
LABEL_40:
              if (v10 == a3)
                goto LABEL_42;
              goto LABEL_41;
            }
          }
          else
          {
LABEL_26:
            while (a3 - 4 != v4)
            {
              ++v4;
              v21 = v22;
              v23 = *v22++;
              if (v23 == 46)
                goto LABEL_25;
            }
          }
        }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      case ':':
        v15 = (uint64_t)(a2 + 2);
        if (a3 - (v4 + 2) >= 2)
        {
          v16 = 0;
          v17 = v5 + 4;
          v18 = v4;
          v19 = v17;
          if (v4[2] != 58)
            goto LABEL_20;
LABEL_19:
          if (v18[3] == 93)
          {
            v24 = &v4[v16 + 2];
            if (v24 != a3)
            {
              v25 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, v15, v24, *(_DWORD *)(a1 + 24) & 1);
              if (!v25)
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
              v12 = 0;
              *((_DWORD *)v7 + 40) |= v25;
              v7 = &v4[v16 + 4];
              if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_60;
              goto LABEL_61;
            }
          }
          else
          {
LABEL_20:
            while (v19)
            {
              v18 = &v4[++v16];
              v19 = v17 + v16;
              if (v4[v16 + 2] == 58)
                goto LABEL_19;
            }
          }
        }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      case '=':
        v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
        v12 = 0;
        if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_61;
        goto LABEL_60;
    }
  }
  v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) != 0x40)
  {
    LOBYTE(v14) = *a2;
    goto LABEL_16;
  }
  v14 = *a2;
  if (v14 != 92)
  {
LABEL_16:
    std::string::operator=(&v34, v14);
    goto LABEL_40;
  }
  if (v13)
  {
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2 + 1, a3, &v34);
    if (v10 == a3)
      goto LABEL_42;
  }
  else
  {
    v10 = (std::string::value_type *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2 + 1, a3, &v34, a4);
    v13 = 0;
    if (v10 == a3)
      goto LABEL_42;
  }
LABEL_41:
  v27 = *v10;
  if (v27 == 93 || (v29 = v10 + 1, v10 + 1 == a3) || v27 != 45 || *v29 == 93)
  {
LABEL_42:
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v34.__r_.__value_.__l.__size_)
        goto LABEL_59;
      if (v34.__r_.__value_.__l.__size_ != 1)
      {
        v28 = (std::string *)v34.__r_.__value_.__r.__words[0];
LABEL_58:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v7, v28->__r_.__value_.__s.__data_[0], v28->__r_.__value_.__s.__data_[1]);
LABEL_59:
        v12 = 1;
        v4 = v10;
        if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_61;
        goto LABEL_60;
      }
      v28 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((_BYTE *)&v34.__r_.__value_.__s + 23))
        goto LABEL_59;
      v28 = &v34;
      if (HIBYTE(v34.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_58;
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, v28->__r_.__value_.__s.__data_[0]);
    goto LABEL_59;
  }
  memset(&v35, 0, sizeof(v35));
  v4 = v10 + 2;
  if (v10 + 2 == a3 || *v29 != 91 || *v4 != 46)
  {
    if ((v13 | 0x40) == 0x40)
    {
      LODWORD(v29) = *v29;
      if ((_DWORD)v29 == 92)
      {
        if (v13)
          v30 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v10 + 2, a3, &v35);
        else
          v30 = (std::string::value_type *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v10 + 2, a3, &v35, (uint64_t)v7);
        goto LABEL_73;
      }
    }
    else
    {
      LOBYTE(v29) = *v29;
    }
    std::string::operator=(&v35, (std::string::value_type)v29);
    goto LABEL_74;
  }
  v30 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v10 + 3, a3, (uint64_t)&v35);
LABEL_73:
  v4 = v30;
LABEL_74:
  v33 = v34;
  memset(&v34, 0, sizeof(v34));
  __p = v35;
  memset(&v35, 0, sizeof(v35));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v7, (char *)&v33, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_76:
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_77;
LABEL_81:
      operator delete(v35.__r_.__value_.__l.__data_);
      v12 = 1;
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_60;
      goto LABEL_61;
    }
  }
  else if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_76;
  }
  operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_81;
LABEL_77:
  v12 = 1;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
LABEL_60:
    operator delete(v34.__r_.__value_.__l.__data_);
LABEL_61:
  if ((v12 & 1) != 0)
    return v4;
  return v7;
}

void sub_236E2DAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if ((a28 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, std::string::value_type *a2, std::string::value_type *a3, uint64_t a4)
{
  std::string::value_type *v6;
  std::string::value_type *v7;
  std::string::value_type *v8;
  std::string::value_type *v9;
  int v10;
  char *v11;
  void **v12;
  unint64_t v13;
  __int128 v14;
  void *v15;
  void **v16;
  void **v17;
  void *__p[3];
  void *v20[3];

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_39;
  v6 = a3 - 2;
  v7 = a2;
  v8 = a2;
  v9 = a2 + 1;
  if (*a2 != 61)
    goto LABEL_5;
LABEL_4:
  if (*v9 != 93)
  {
LABEL_5:
    while (a2 != v6)
    {
      ++v7;
      --v6;
      v8 = v9;
      v10 = *v9++;
      if (v10 == 61)
        goto LABEL_4;
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v8 == a3)
    goto LABEL_39;
  memset(v20, 170, sizeof(v20));
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v7, (uint64_t)v20);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
    v11 = (char *)HIBYTE(v20[2]);
    if (HIBYTE(v20[2]))
    {
      memset(__p, 170, sizeof(__p));
      v12 = v20;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v11 = (char *)v20[1];
  if (!v20[1])
    goto LABEL_40;
  memset(__p, 170, sizeof(__p));
  v12 = (void **)v20[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v12, &v11[(_QWORD)v12], (_BYTE **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      v13 = *(_QWORD *)(a4 + 144);
      if (v13 >= *(_QWORD *)(a4 + 152))
      {
        *(_QWORD *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v14 = *(_OWORD *)__p;
          *(void **)(v13 + 16) = __p[2];
          *(_OWORD *)v13 = v14;
        }
        *(_QWORD *)(a4 + 144) = v13 + 24;
        *(_QWORD *)(a4 + 144) = v13 + 24;
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  v15 = (void *)HIBYTE(v20[2]);
  if (SHIBYTE(v20[2]) < 0)
    v15 = v20[1];
  if (v15 == (void *)2)
  {
    v17 = v20;
    if (SHIBYTE(v20[2]) < 0)
      v17 = (void **)v20[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v17, *((char *)v17 + 1));
  }
  else
  {
    if (v15 != (void *)1)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    v16 = v20;
    if (SHIBYTE(v20[2]) < 0)
      v16 = (void **)v20[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v16);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v20[2]) < 0)
      goto LABEL_38;
    return v7 + 2;
  }
LABEL_33:
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
    return v7 + 2;
LABEL_38:
  operator delete(v20[0]);
  return v7 + 2;
}

void sub_236E2DDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

std::string::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, std::string::value_type *a2, std::string::value_type *a3, uint64_t a4)
{
  std::string::value_type *v5;
  std::string::value_type *v6;
  std::string::value_type *v7;
  std::string::value_type *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  unint64_t v14;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = a3 - 2;
  v6 = a2;
  v7 = a2;
  v8 = a2 + 1;
  if (*a2 != 46)
    goto LABEL_5;
LABEL_4:
  if (*v8 != 93)
  {
LABEL_5:
    while (a2 != v5)
    {
      ++v6;
      --v5;
      v7 = v8;
      v9 = *v8++;
      if (v9 == 46)
        goto LABEL_4;
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v7 == a3)
    goto LABEL_15;
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v13;
  v10 = v14;
  *(_QWORD *)(a4 + 16) = v14;
  v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a4 + 8);
  if (v11 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, std::string *this, uint64_t a5)
{
  unsigned __int8 *result;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      result = (unsigned __int8 *)(a2 + 1);
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_6;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      result = (unsigned __int8 *)(a2 + 1);
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      result = (unsigned __int8 *)(a2 + 1);
      break;
    case 'b':
      std::string::operator=(this, 8);
      result = (unsigned __int8 *)(a2 + 1);
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      result = (unsigned __int8 *)(a2 + 1);
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      result = (unsigned __int8 *)(a2 + 1);
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      result = (unsigned __int8 *)(a2 + 1);
      break;
    default:
      if (*a2)
      {
LABEL_6:
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, this);
      }
      else
      {
        std::string::operator=(this, 0);
        result = (unsigned __int8 *)(a2 + 1);
      }
      break;
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  char *v7;
  std::string::value_type v8;
  char v9;
  int v10;
  std::string::value_type v11;
  std::string::value_type v12;

  if (a2 == a3)
LABEL_51:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  switch(v5)
  {
    case '"':
    case '/':
    case '\\':
      if (this)
        std::string::operator=(this, v5);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    case 'a':
      if (this)
        std::string::operator=(this, 7);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
      return a2 + 1;
    case 'b':
      if (this)
        std::string::operator=(this, 8);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
      return a2 + 1;
    case 'f':
      if (this)
        std::string::operator=(this, 12);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
      return a2 + 1;
    case 'n':
      if (this)
        std::string::operator=(this, 10);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
      return a2 + 1;
    case 'r':
      if (this)
        std::string::operator=(this, 13);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
      return a2 + 1;
    case 't':
      if (this)
        std::string::operator=(this, 9);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
      return a2 + 1;
    case 'v':
      if (this)
        std::string::operator=(this, 11);
      else
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
      return a2 + 1;
    default:
      if ((v5 & 0xFFFFFFF8) != 0x30)
        goto LABEL_51;
      v7 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v7 = a3;
LABEL_40:
        v12 = v5 - 48;
        if (this)
          goto LABEL_41;
        goto LABEL_50;
      }
      if ((*v7 & 0xF8) != 0x30)
        goto LABEL_40;
      v8 = *v7 + 8 * (v5 - 48) - 48;
      if (a2 + 2 != a3)
      {
        v9 = a2[2];
        v10 = v9 & 0xF8;
        v11 = v9 + 8 * v8 - 48;
        if (v10 == 48)
          v7 = a2 + 3;
        else
          v7 = a2 + 2;
        if (v10 == 48)
          v8 = v11;
        v12 = v8;
        if (!this)
          goto LABEL_50;
LABEL_41:
        std::string::operator=(this, v12);
        return v7;
      }
      v7 = a3;
      v12 = v8;
      if (this)
        goto LABEL_41;
LABEL_50:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v12);
      return v7;
  }
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string::value_type *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::size_type v5;
  std::string *p_s;
  std::string *v10;
  std::string::value_type *v11;
  __int128 *v12;
  std::string::size_type *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  std::string::value_type v18;
  std::string *v19;
  unint64_t v20;
  unint64_t v21;
  std::string::size_type size;
  int v23;
  uint64_t v24;
  std::string v25;
  std::string __s;

  v5 = (std::string::size_type)&a3[-a2];
  memset(&__s, 170, sizeof(__s));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    *((_BYTE *)&__s.__r_.__value_.__s + 23) = (_BYTE)a3 - a2;
    p_s = &__s;
    if ((std::string::value_type *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = p_s;
    goto LABEL_16;
  }
  v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v16 = v5 | 7;
  v17 = v16 + 1;
  p_s = (std::string *)operator new(v16 + 1);
  __s.__r_.__value_.__l.__size_ = v5;
  __s.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)p_s;
  if ((std::string::value_type *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v5 < 0x20 || (unint64_t)p_s - a2 < 0x20)
  {
    v10 = p_s;
    v11 = (std::string::value_type *)a2;
    do
    {
LABEL_15:
      v18 = *v11++;
      v10->__r_.__value_.__s.__data_[0] = v18;
      v10 = (std::string *)((char *)v10 + 1);
    }
    while (v11 != a3);
    goto LABEL_16;
  }
  v10 = (std::string *)((char *)p_s + (v5 & 0xFFFFFFFFFFFFFFE0));
  v11 = (std::string::value_type *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
  v12 = (__int128 *)(a2 + 16);
  v13 = &p_s->__r_.__value_.__r.__words[2];
  v14 = v5 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v15 = *v12;
    *((_OWORD *)v13 - 1) = *(v12 - 1);
    *(_OWORD *)v13 = v15;
    v12 += 2;
    v13 += 4;
    v14 -= 32;
  }
  while (v14);
  if (v5 != (v5 & 0xFFFFFFFFFFFFFFE0))
    goto LABEL_15;
LABEL_16:
  v10->__r_.__value_.__s.__data_[0] = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    v19 = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_29;
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    v19 = &__s;
  }
  std::__get_collation_name(&v25, (const char *)v19);
  *(_OWORD *)a4 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
  v20 = v25.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v25.__r_.__value_.__l + 2);
  v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a4 + 8);
  if (v21)
  {
LABEL_23:
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v19 = (std::string *)__s.__r_.__value_.__r.__words[0];
LABEL_29:
    operator delete(v19);
    return;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    v19 = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_29;
LABEL_31:
    (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v25, *(_QWORD *)(a1 + 16), v19, (char *)v19 + size);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v25;
    if (*(char *)(a4 + 23) < 0)
    {
      v24 = *(_QWORD *)(a4 + 8);
      if (v24 != 1 && v24 != 12)
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        goto LABEL_23;
      }
    }
    else
    {
      v23 = *(unsigned __int8 *)(a4 + 23);
      if (v23 != 12 && v23 != 1)
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
        goto LABEL_23;
      }
    }
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_23;
  }
  size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  if (HIBYTE(__s.__r_.__value_.__r.__words[2]) < 3u)
  {
    v19 = &__s;
    goto LABEL_31;
  }
}

void sub_236E2E600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, BOOL a4)
{
  unint64_t v4;
  _OWORD *v9;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  void **v20;
  void **v21;
  uint64_t classname;
  void *__p[3];

  v4 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 > 0x16)
  {
    v16 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v16 = v4 | 7;
    v17 = v16 + 1;
    v9 = operator new(v16 + 1);
    __p[1] = (void *)v4;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v9 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v4 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
  }
  else
  {
    v10 = (char *)v9 + (v4 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)(a2 + (v4 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(a2 + 16);
    v13 = v9 + 1;
    v14 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *v10 = 0;
  v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v19 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v20, &v19[(_QWORD)v20]);
  if (SHIBYTE(__p[2]) >= 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  classname = std::__get_classname((const char *)v21, a4);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_236E2E7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, std::string::value_type *a3)
{
  std::string::value_type *v6;
  int v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::basic_regex<char> *v14;
  std::__owns_one_state<char> *v15;
  int v16;
  std::basic_regex<char> *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::string::value_type *)a2, a3);
  if ((std::string::value_type *)a2 != v6
    || (std::string::value_type *)a2 == a3
    || (std::string::value_type *)(a2 + 1) == a3
    || *(_BYTE *)a2 != 92)
  {
    return v6;
  }
  v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v10 = operator new(0x18uLL);
      v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(v12 + 8);
      *v10 = &unk_25086B938;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3)
        goto LABEL_23;
      v14 = v9;
      v15 = *(std::__owns_one_state<char> **)(a1 + 56);
      v16 = *(_DWORD *)(a1 + 28);
      v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, v14, a3);
      if (v14 == v17)
        break;
      v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v14 != v9);
    if ((char *)&v14->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v14->__traits_.__loc_.__locale_) != 92
      || BYTE1(v14->__traits_.__loc_.__locale_) != 41)
    {
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    v6 = (char *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 41);
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    {
      v18 = operator new(0x18uLL);
      v19 = *(_QWORD *)(a1 + 56);
      v20 = *(_QWORD *)(v19 + 8);
      *v18 = &unk_25086B980;
      v18[1] = v20;
      *((_DWORD *)v18 + 4) = v11;
      *(_QWORD *)(v19 + 8) = v18;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v6;
    }
    return v6;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8)
    return v6;
  if ((v8 - 48) > *(_DWORD *)(a1 + 28))
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (std::string::value_type *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int locale_low;
  unsigned __int8 *v9;
  std::basic_regex<char> *v10;
  int v11;
  int v12;
  std::basic_regex<char> *v13;
  int v14;
  std::basic_regex<char> *v15;
  int v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;

  if (this == a3)
    return this;
  locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  v9 = (unsigned __int8 *)a3;
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return this;
  }
  v10 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v10 == a3)
    goto LABEL_45;
  v11 = LOBYTE(v10->__traits_.__loc_.__locale_);
  if ((v11 & 0xF8) != 0x30 && (v11 & 0xFE) != 0x38)
    goto LABEL_45;
  v12 = v11 - 48;
  v13 = (std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_15:
    v13 = a3;
  }
  else
  {
    while (1)
    {
      v14 = LOBYTE(v13->__traits_.__loc_.__locale_);
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
        break;
      if (v12 >= 214748364)
        goto LABEL_45;
      v12 = v14 + 10 * v12 - 48;
      v13 = (std::basic_regex<char> *)((char *)v13 + 1);
      if (v13 == a3)
        goto LABEL_15;
    }
  }
  if (v13 == v10)
    goto LABEL_45;
  if (v13 == a3)
LABEL_46:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 1);
  v16 = LOBYTE(v13->__traits_.__loc_.__locale_);
  if (v16 != 44)
  {
    if (v15 != a3 && v16 == 92 && LOBYTE(v15->__traits_.__loc_.__locale_) == 125)
    {
      v19 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v12, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_46;
  }
  if (v15 == a3)
    goto LABEL_46;
  v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
  if ((v17 & 0xF8) == 0x30 || (v17 & 0xFE) == 0x38)
  {
    v18 = v17 - 48;
    v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_37:
      v15 = a3;
      goto LABEL_40;
    }
    while (1)
    {
      v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
      if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38)
        break;
      if (v18 >= 214748364)
        goto LABEL_45;
      v18 = v17 + 10 * v18 - 48;
      v15 = (std::basic_regex<char> *)((char *)v15 + 1);
      if (v15 == a3)
        goto LABEL_37;
    }
  }
  else
  {
    v18 = -1;
  }
  if (v15 == a3)
  {
    v20 = (unsigned __int8 *)v15;
    v15 = a3;
    v9 = v20;
  }
  else if ((std::basic_regex<char> *)((char *)&v15->__traits_.__loc_.__locale_ + 1) == a3 || v17 != 92)
  {
    v9 = (unsigned __int8 *)v15;
  }
  else
  {
    v9 = (unsigned __int8 *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 125);
  }
LABEL_40:
  if (v15 == (std::basic_regex<char> *)v9)
    goto LABEL_46;
  if (v18 != -1)
  {
    if (v18 >= v12)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v18, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v9;
    }
LABEL_45:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v9;
}

std::string::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, std::string::value_type *a2, std::string::value_type *a3)
{
  int v5;
  std::string::value_type *v6;
  int v9;
  std::__node<char> *v10;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  v6 = a2 + 1;
  v5 = *a2;
  if (a2 + 1 == a3 && v5 == 36)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
    return a2 + 1;
  }
  else if (v6 != a3
         && v5 == 92
         && (v9 = *v6, (v9 - 36) <= 0x3A)
         && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
    return a2 + 2;
  }
  else
  {
    if (*a2 != 46)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
    v10 = (std::__node<char> *)operator new(0x10uLL);
    end = this->__end_;
    first = end->__first_;
    v10->__vftable = (std::__node<char>_vtbl *)&unk_25086BB30;
    v10[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v10;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return a2 + 1;
  }
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  std::basic_regex<char> *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int locale_low;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  std::basic_regex<char> *v22;
  std::basic_regex<char> *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2)
  {
    v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(a1, (char *)a2, (char *)a3);
    if (v8 == a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, (std::string::value_type *)a2, (std::string::value_type *)a3);
      }
      else
      {
        v9 = operator new(0x10uLL);
        v10 = *(_QWORD *)(a1 + 56);
        v11 = *(_QWORD *)(v10 + 8);
        *v9 = &unk_25086BB30;
        v9[1] = v11;
        *(_QWORD *)(v10 + 8) = v9;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      }
    }
  }
  if (v8 != a2 || v8 == a3)
  {
LABEL_23:
    if (v8 != a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    return a2;
  }
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v13 = operator new(0x18uLL);
      v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v15 = *(_QWORD *)(a1 + 56);
      goto LABEL_14;
    case '(':
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v19 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v18 = operator new(0x18uLL);
        v19 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v19;
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD *)(v20 + 8);
        *v18 = &unk_25086B938;
        v18[1] = v21;
        *((_DWORD *)v18 + 4) = v19;
        *(_QWORD *)(v20 + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v22 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v22 == a3 || (v23 = v22, LOBYTE(v22->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v24 = operator new(0x18uLL);
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(v25 + 8);
        *v24 = &unk_25086B980;
        v24[1] = v26;
        *((_DWORD *)v24 + 4) = v19;
        *(_QWORD *)(v25 + 8) = v24;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v8 = (std::basic_regex<char> *)((char *)&v23->__traits_.__loc_.__locale_ + 1);
      goto LABEL_23;
    case '^':
      v13 = operator new(0x18uLL);
      v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v15 = *(_QWORD *)(a1 + 56);
LABEL_14:
      v17 = *(_QWORD *)(v15 + 8);
      *v13 = v16 + 16;
      v13[1] = v17;
      *((_BYTE *)v13 + 16) = v14;
      *(_QWORD *)(v15 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return a2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_)
        return this;
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  std::basic_regex<char>::value_type v5;
  char *result;
  _BOOL4 v7;
  uint64_t v8;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      v3 += 2;
      return v3;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
      }
      else
      {
        v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        v8 = 2;
        if (!v7)
          v8 = 0;
        result = &v3[v8];
      }
      break;
  }
  return result;
}

uint64_t *BasebandTransport::getSupportedProtocols@<X0>(BasebandTransport *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *result;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  result = (uint64_t *)capabilities::radio::vendor(this);
  if ((_DWORD)result == 1)
  {
    v13 = operator new(0x18uLL);
    v13[4] = 0;
    *(_QWORD *)v13 = &v33;
    *((_QWORD *)v13 + 1) = &v33;
    v34 = (uint64_t *)v13;
    v14 = operator new(0x18uLL);
    v14[4] = 1;
    *(_QWORD *)v14 = v13;
    *((_QWORD *)v14 + 1) = &v33;
    *((_QWORD *)v13 + 1) = v14;
    v15 = operator new(0x18uLL);
    v15[4] = 2;
    *(_QWORD *)v15 = v14;
    *((_QWORD *)v15 + 1) = &v33;
    *((_QWORD *)v14 + 1) = v15;
    v16 = operator new(0x18uLL);
    v16[4] = 3;
    *(_QWORD *)v16 = v15;
    *((_QWORD *)v16 + 1) = &v33;
    *((_QWORD *)v15 + 1) = v16;
    v17 = operator new(0x18uLL);
    v17[4] = 4;
    *(_QWORD *)v17 = v16;
    *((_QWORD *)v17 + 1) = &v33;
    *((_QWORD *)v16 + 1) = v17;
    v18 = operator new(0x18uLL);
    v18[4] = 5;
    *(_QWORD *)v18 = v17;
    *((_QWORD *)v18 + 1) = &v33;
    *((_QWORD *)v17 + 1) = v18;
    v19 = operator new(0x18uLL);
    v19[4] = 10;
    *(_QWORD *)v19 = v18;
    *((_QWORD *)v19 + 1) = &v33;
    *((_QWORD *)v18 + 1) = v19;
    v20 = operator new(0x18uLL);
    v20[4] = 12;
    *(_QWORD *)v20 = v19;
    *((_QWORD *)v20 + 1) = &v33;
    *((_QWORD *)v19 + 1) = v20;
    v21 = operator new(0x18uLL);
    v21[4] = 14;
    *(_QWORD *)v21 = v20;
    *((_QWORD *)v21 + 1) = &v33;
    *((_QWORD *)v20 + 1) = v21;
    v33 = (uint64_t)v21;
    v35 = 9;
    result = (uint64_t *)capabilities::radio::mav20Plus((capabilities::radio *)v21);
    if ((_DWORD)result)
    {
      v22 = operator new(0x18uLL);
      v22[4] = 11;
      v23 = v33;
      *(_QWORD *)v22 = v33;
      *((_QWORD *)v22 + 1) = &v33;
      *(_QWORD *)(v23 + 8) = v22;
      v24 = v35;
      v33 = (uint64_t)v22;
      ++v35;
      result = (uint64_t *)operator new(0x18uLL);
      *((_DWORD *)result + 4) = 15;
      *result = (uint64_t)v22;
      result[1] = (uint64_t)&v33;
      *((_QWORD *)v22 + 1) = result;
      v33 = (uint64_t)result;
      v35 = v24 + 2;
    }
    if (a2[2])
    {
      v25 = *a2;
      result = (uint64_t *)a2[1];
      v26 = *result;
      *(_QWORD *)(v26 + 8) = *(_QWORD *)(*a2 + 8);
      **(_QWORD **)(v25 + 8) = v26;
      a2[2] = 0;
      if (result != a2)
      {
        do
        {
          v27 = result[1];
          operator delete(result);
          result = (uint64_t *)v27;
        }
        while ((uint64_t *)v27 != a2);
      }
    }
  }
  else
  {
    if ((_DWORD)result != 2)
      return result;
    v4 = operator new(0x18uLL);
    v4[4] = 6;
    *(_QWORD *)v4 = &v33;
    *((_QWORD *)v4 + 1) = &v33;
    v34 = (uint64_t *)v4;
    v5 = operator new(0x18uLL);
    v5[4] = 7;
    *(_QWORD *)v5 = v4;
    *((_QWORD *)v5 + 1) = &v33;
    *((_QWORD *)v4 + 1) = v5;
    v6 = operator new(0x18uLL);
    v6[4] = 8;
    *(_QWORD *)v6 = v5;
    *((_QWORD *)v6 + 1) = &v33;
    *((_QWORD *)v5 + 1) = v6;
    v7 = operator new(0x18uLL);
    v7[4] = 9;
    *(_QWORD *)v7 = v6;
    *((_QWORD *)v7 + 1) = &v33;
    *((_QWORD *)v6 + 1) = v7;
    v8 = operator new(0x18uLL);
    v8[4] = 10;
    *(_QWORD *)v8 = v7;
    *((_QWORD *)v8 + 1) = &v33;
    *((_QWORD *)v7 + 1) = v8;
    v33 = (uint64_t)v8;
    v35 = 5;
    result = (uint64_t *)capabilities::abs::supportsETSProtocol((capabilities::abs *)v8);
    if ((_DWORD)result)
    {
      result = (uint64_t *)operator new(0x18uLL);
      *((_DWORD *)result + 4) = 13;
      v9 = v33;
      *result = v33;
      result[1] = (uint64_t)&v33;
      *(_QWORD *)(v9 + 8) = result;
      v33 = (uint64_t)result;
      ++v35;
    }
    if (a2[2])
    {
      v10 = *a2;
      result = (uint64_t *)a2[1];
      v11 = *result;
      *(_QWORD *)(v11 + 8) = *(_QWORD *)(*a2 + 8);
      **(_QWORD **)(v10 + 8) = v11;
      a2[2] = 0;
      if (result != a2)
      {
        do
        {
          v12 = result[1];
          operator delete(result);
          result = (uint64_t *)v12;
        }
        while ((uint64_t *)v12 != a2);
      }
    }
  }
  v28 = v35;
  if (v35)
  {
    v30 = v33;
    v29 = v34;
    v31 = *v34;
    *(_QWORD *)(v31 + 8) = *(_QWORD *)(v33 + 8);
    **(_QWORD **)(v30 + 8) = v31;
    v32 = *a2;
    *(_QWORD *)(v32 + 8) = v29;
    *v29 = v32;
    *a2 = v30;
    *(_QWORD *)(v30 + 8) = a2;
    a2[2] += v28;
  }
  return result;
}

void sub_236E2F4F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  va_list va;

  va_start(va, a2);
  std::list<TCP::Mode>::~list((uint64_t *)va);
  std::list<TCP::Mode>::~list(v2);
  _Unwind_Resume(a1);
}

void sub_236E2F528(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::list<TCP::Mode>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_236E2F540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v16;

  do
  {
    v16 = (_QWORD *)v13[1];
    operator delete(v13);
    v13 = v16;
  }
  while (v16 != v14);
  std::list<TCP::Mode>::~list(v12);
  _Unwind_Resume(a1);
}

void BasebandTransport::getSupportedProtocolsAsStringLowerCase(BasebandTransport *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t i;
  int v4;
  char v5;
  char v6;
  char v7;
  char v8;
  __darwin_ct_rune_t v9;
  char v10;
  __darwin_ct_rune_t v11;
  _QWORD *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  __darwin_ct_rune_t v19[6];
  uint64_t v20[3];

  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  memset(v20, 170, sizeof(v20));
  BasebandTransport::getSupportedProtocols(this, v20);
  for (i = v20[1]; (uint64_t *)i != v20; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_DWORD *)(i + 16);
    memset(v19, 170, sizeof(v19));
    switch(v4)
    {
      case 0:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4997712;
        goto LABEL_30;
      case 1:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4997715;
        goto LABEL_30;
      case 2:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1195460932;
        goto LABEL_26;
      case 3:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1397114194;
        goto LABEL_26;
      case 4:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "QMUX1");
        v7 = 1;
        break;
      case 5:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "QMUX2");
        v7 = 1;
        break;
      case 6:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5066578;
        goto LABEL_30;
      case 7:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1414483778;
        goto LABEL_26;
      case 8:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4805185;
        goto LABEL_30;
      case 9:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5526611;
        goto LABEL_30;
      case 10:
        v10 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 2;
        strcpy((char *)v19, "AT");
        v5 = 1;
        break;
      case 11:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1280328769;
        goto LABEL_26;
      case 12:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 8;
        strcpy((char *)v19, "MEDIACTL");
        break;
      case 13:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5461061;
        goto LABEL_30;
      case 14:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        strcpy((char *)v19, "GNSS");
        v6 = 1;
        break;
      case 15:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1397965905;
        goto LABEL_26;
      case 16:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "RCTTH");
        v7 = 1;
        break;
      case 17:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5260097;
        goto LABEL_30;
      case 18:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1297040214;
        goto LABEL_26;
      case 19:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1129335117;
LABEL_26:
        v19[0] = v11;
        v6 = 1;
        LOBYTE(v19[1]) = 0;
        break;
      case 20:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4999236;
        goto LABEL_30;
      case 21:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5789005;
        goto LABEL_30;
      case 22:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4407622;
LABEL_30:
        v19[0] = v9;
        v10 = 1;
        break;
      default:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v7 = 0;
        HIBYTE(v19[5]) = 7;
        strcpy((char *)v19, "Unknown");
        v8 = 1;
        break;
    }
    LOBYTE(v19[0]) = __tolower(SLOBYTE(v19[0]));
    BYTE1(v19[0]) = __tolower(SBYTE1(v19[0]));
    if ((v5 & 1) == 0)
    {
      BYTE2(v19[0]) = __tolower(SBYTE2(v19[0]));
      if ((v10 & 1) == 0)
      {
        HIBYTE(v19[0]) = __tolower(SHIBYTE(v19[0]));
        if ((v6 & 1) == 0)
        {
          LOBYTE(v19[1]) = __tolower(SLOBYTE(v19[1]));
          if ((v7 & 1) == 0)
          {
            BYTE1(v19[1]) = __tolower(SBYTE1(v19[1]));
            BYTE2(v19[1]) = __tolower(SBYTE2(v19[1]));
            if ((v8 & 1) == 0)
              HIBYTE(v19[1]) = __tolower(SHIBYTE(v19[1]));
          }
        }
      }
    }
    v12 = operator new(0x28uLL);
    v13 = (std::string *)(v12 + 2);
    *v12 = 0;
    v12[1] = 0;
    if (SHIBYTE(v19[5]) < 0)
    {
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v19, *(std::string::size_type *)&v19[2]);
    }
    else
    {
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)v19;
      v12[4] = *(_QWORD *)&v19[4];
    }
    v14 = *a2;
    *v12 = *a2;
    v12[1] = a2;
    *(_QWORD *)(v14 + 8) = v12;
    *a2 = (uint64_t)v12;
    ++a2[2];
    if (SHIBYTE(v19[5]) < 0)
      operator delete(*(void **)v19);
  }
  if (v20[2])
  {
    v16 = v20[0];
    v15 = (uint64_t *)v20[1];
    v17 = *(_QWORD *)v20[1];
    *(_QWORD *)(v17 + 8) = *(_QWORD *)(v20[0] + 8);
    **(_QWORD **)(v16 + 8) = v17;
    v20[2] = 0;
    if (v15 != v20)
    {
      do
      {
        v18 = (uint64_t *)v15[1];
        operator delete(v15);
        v15 = v18;
      }
      while (v18 != v20);
    }
  }
}

void sub_236E2FB54(_Unwind_Exception *a1)
{
  char *v1;

  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_236E2FB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  char *v15;
  void *v16;
  void *v17;

  v17 = v16;
  operator delete(v17);
  if (a14 < 0)
    operator delete(__p);
  std::list<TCP::Mode>::~list(&a15);
  std::list<std::string>::~list(v15);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::asStringLowerCase@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;

  memset(a2, 170, 24);
  result = BasebandTransport::asString(a1, (char *)a2);
  v4 = *((unsigned __int8 *)a2 + 23);
  v5 = (char)v4;
  v6 = (char *)a2 + v4;
  if (v5 >= 0)
    v7 = v6;
  else
    v7 = (_BYTE *)(*a2 + a2[1]);
  if (v5 >= 0)
    v8 = a2;
  else
    v8 = (_BYTE *)*a2;
  for (; v8 != v7; ++v8)
  {
    result = __tolower((char)*v8);
    *v8 = result;
  }
  return result;
}

void sub_236E2FC20(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void BasebandTransport::getSupportedProtocolsAsString(BasebandTransport *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18[3];

  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  memset(v18, 170, sizeof(v18));
  BasebandTransport::getSupportedProtocols(this, v18);
  v3 = (uint64_t *)v18[1];
  if ((uint64_t *)v18[1] != v18)
  {
    v4 = a2[2];
    v5 = v4 + 1;
    v6 = (_QWORD *)*a2;
    v7 = v18[1];
    do
    {
      v8 = 8;
      v9 = 0x4C5443414944454DLL;
      switch(*(_DWORD *)(v7 + 16))
      {
        case 0:
          v9 = v4 & 0xFFFFFFFF00000000 | 0x4C4250;
          v8 = 3;
          break;
        case 1:
          v9 = (v4 & 0xFFFFFFFF00000000 | 0x4C4250) + 3;
          v8 = 3;
          break;
        case 2:
          v10 = 1195460932;
          goto LABEL_25;
        case 3:
          v10 = 1397114194;
          goto LABEL_25;
        case 4:
          v11 = 0x3158554D51;
          goto LABEL_21;
        case 5:
          v11 = 0x3258554D51;
          goto LABEL_21;
        case 6:
          v12 = 5066578;
          goto LABEL_29;
        case 7:
          v10 = 1414483778;
          goto LABEL_25;
        case 8:
          v12 = 4805185;
          goto LABEL_29;
        case 9:
          v12 = 5526611;
          goto LABEL_29;
        case 0xA:
          v13 = v4 & 0xFFFFFFFFFF000000 | 0x5441;
          v8 = 2;
          goto LABEL_30;
        case 0xB:
          v10 = 1280328769;
          goto LABEL_25;
        case 0xC:
          break;
        case 0xD:
          v12 = 5461061;
          goto LABEL_29;
        case 0xE:
          v9 = (v4 & 0xFFFFFF0000000000 | 0x53534451) + 2550;
          v8 = 4;
          break;
        case 0xF:
          v9 = v4 & 0xFFFFFF0000000000 | 0x53534451;
          v8 = 4;
          break;
        case 0x10:
          v11 = 0x4854544352;
LABEL_21:
          v13 = v4 & 0xFFFF000000000000 | v11 & 0xFFFFFFFFFFFFLL;
          v8 = 5;
          goto LABEL_30;
        case 0x11:
          v12 = 5260097;
          goto LABEL_29;
        case 0x12:
          v10 = 1297040214;
          goto LABEL_25;
        case 0x13:
          v10 = 1129335117;
LABEL_25:
          v13 = v4 & 0xFFFFFF0000000000 | v10 & 0xFFFFFFFFFFLL;
          v8 = 4;
          goto LABEL_30;
        case 0x14:
          v9 = (v4 & 0xFFFFFFFF00000000 | 0x4C4250) + 1524;
          v8 = 3;
          break;
        case 0x15:
          v12 = 5789005;
          goto LABEL_29;
        case 0x16:
          v12 = 4407622;
LABEL_29:
          v13 = v4 & 0xFFFFFFFF00000000 | v12;
          v8 = 3;
LABEL_30:
          v9 = v13;
          break;
        default:
          v8 = 7;
          v9 = 0x6E776F6E6B6E55;
          break;
      }
      v14 = operator new(0x28uLL);
      v14[2] = v9;
      v14[3] = 0;
      *((_BYTE *)v14 + 39) = v8;
      *v14 = v6;
      v14[1] = a2;
      v6[1] = v14;
      *a2 = v14;
      a2[2] = v5;
      v7 = *(_QWORD *)(v7 + 8);
      ++v5;
      v4 = v9;
      v6 = v14;
    }
    while ((uint64_t *)v7 != v18);
  }
  if (v18[2])
  {
    v15 = v18[0];
    v16 = *v3;
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(v18[0] + 8);
    **(_QWORD **)(v15 + 8) = v16;
    v18[2] = 0;
    if (v3 != v18)
    {
      do
      {
        v17 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v17;
      }
      while (v17 != v18);
    }
  }
}

void sub_236E2FEF8(_Unwind_Exception *a1)
{
  char *v1;

  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_236E2FF0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  char *v2;
  va_list va;

  va_start(va, a2);
  std::list<TCP::Mode>::~list((uint64_t *)va);
  std::list<std::string>::~list(v2);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::asString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      a2[23] = 3;
      *(_DWORD *)a2 = 4997712;
      break;
    case 1:
      a2[23] = 3;
      *(_DWORD *)a2 = 4997715;
      break;
    case 2:
      a2[23] = 4;
      strcpy(a2, "DIAG");
      break;
    case 3:
      a2[23] = 4;
      strcpy(a2, "REFS");
      break;
    case 4:
      a2[23] = 5;
      strcpy(a2, "QMUX1");
      break;
    case 5:
      a2[23] = 5;
      strcpy(a2, "QMUX2");
      break;
    case 6:
      a2[23] = 3;
      *(_DWORD *)a2 = 5066578;
      break;
    case 7:
      a2[23] = 4;
      strcpy(a2, "BOOT");
      break;
    case 8:
      a2[23] = 3;
      *(_DWORD *)a2 = 4805185;
      break;
    case 9:
      a2[23] = 3;
      *(_DWORD *)a2 = 5526611;
      break;
    case 10:
      a2[23] = 2;
      strcpy(a2, "AT");
      break;
    case 11:
      a2[23] = 4;
      strcpy(a2, "ADPL");
      break;
    case 12:
      a2[23] = 8;
      strcpy(a2, "MEDIACTL");
      break;
    case 13:
      a2[23] = 3;
      *(_DWORD *)a2 = 5461061;
      break;
    case 14:
      a2[23] = 4;
      strcpy(a2, "GNSS");
      break;
    case 15:
      a2[23] = 4;
      strcpy(a2, "QDSS");
      break;
    case 16:
      a2[23] = 5;
      strcpy(a2, "RCTTH");
      break;
    case 17:
      a2[23] = 3;
      *(_DWORD *)a2 = 5260097;
      break;
    case 18:
      a2[23] = 4;
      strcpy(a2, "VCOM");
      break;
    case 19:
      a2[23] = 4;
      strcpy(a2, "MIPC");
      break;
    case 20:
      a2[23] = 3;
      *(_DWORD *)a2 = 4999236;
      break;
    case 21:
      a2[23] = 3;
      *(_DWORD *)a2 = 5789005;
      break;
    case 22:
      a2[23] = 3;
      *(_DWORD *)a2 = 4407622;
      break;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      break;
  }
  return result;
}

{
  switch((int)result)
  {
    case 0:
      a2[23] = 8;
      strcpy(a2, "NotReady");
      break;
    case 1:
      a2[23] = 5;
      strcpy(a2, "Ready");
      break;
    case 2:
      a2[23] = 5;
      strcpy(a2, "Error");
      break;
    case 3:
      a2[23] = 7;
      strcpy(a2, "Stalled");
      break;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      break;
  }
  return result;
}

uint64_t BasebandTransport::asProtocol(char *__s1)
{
  const char *v1;
  uint64_t result;

  v1 = __s1;
  if ((__s1[23] & 0x80000000) == 0)
  {
    result = strcmp(__s1, "PBL");
    if (!(_DWORD)result)
      return result;
    if (!strcmp(v1, "SBL"))
      return 1;
    if (strcasecmp(v1, "DIAG"))
    {
      if (strcasecmp(v1, "REFS"))
      {
        if (strcasecmp(v1, "QMUX1"))
        {
          if (strcasecmp(v1, "QMUX2"))
          {
            if (strcasecmp(v1, "ROM"))
            {
              if (strcasecmp(v1, "BOOT"))
              {
                if (strcasecmp(v1, "ARI"))
                {
                  if (strcasecmp(v1, "STT"))
                  {
                    if (strcasecmp(v1, "AT"))
                    {
                      if (strcasecmp(v1, "ADPL"))
                      {
                        if (strcasecmp(v1, "MEDIACTL"))
                        {
                          if (strcasecmp(v1, "ETS"))
                          {
                            if (strcasecmp(v1, "GNSS"))
                            {
                              if (strcasecmp(v1, "QDSS"))
                              {
                                if (strcasecmp(v1, "RCTTH"))
                                {
                                  if (strcasecmp(v1, "ACP"))
                                  {
                                    if (strcasecmp(v1, "VCOM"))
                                    {
                                      if (strcasecmp(v1, "MIPC"))
                                      {
                                        if (strcasecmp(v1, "DHL"))
                                        {
                                          if (strcasecmp(v1, "MUX"))
                                            goto LABEL_24;
                                          return 21;
                                        }
                                        return 20;
                                      }
                                      return 19;
                                    }
                                    return 18;
                                  }
                                  return 17;
                                }
                                return 16;
                              }
                              return 15;
                            }
                            return 14;
                          }
                          return 13;
                        }
                        return 12;
                      }
                      return 11;
                    }
                    return 10;
                  }
                  return 9;
                }
                return 8;
              }
              return 7;
            }
            return 6;
          }
          return 5;
        }
        return 4;
      }
      return 3;
    }
    return 2;
  }
  v1 = *(const char **)__s1;
  result = strcmp(*(const char **)__s1, "PBL");
  if (!(_DWORD)result)
    return result;
  if (!strcmp(v1, "SBL"))
    return 1;
  if (!strcasecmp(v1, "DIAG"))
    return 2;
  if (!strcasecmp(v1, "REFS"))
    return 3;
  if (!strcasecmp(v1, "QMUX1"))
    return 4;
  if (!strcasecmp(v1, "QMUX2"))
    return 5;
  if (!strcasecmp(v1, "ROM"))
    return 6;
  if (!strcasecmp(v1, "BOOT"))
    return 7;
  if (!strcasecmp(v1, "ARI"))
    return 8;
  if (!strcasecmp(v1, "STT"))
    return 9;
  if (!strcasecmp(v1, "AT"))
    return 10;
  if (!strcasecmp(v1, "ADPL"))
    return 11;
  if (!strcasecmp(v1, "MEDIACTL"))
    return 12;
  if (!strcasecmp(v1, "ETS"))
    return 13;
  if (!strcasecmp(v1, "GNSS"))
    return 14;
  if (!strcasecmp(v1, "QDSS"))
    return 15;
  if (!strcasecmp(v1, "RCTTH"))
    return 16;
  if (!strcasecmp(v1, "ACP"))
    return 17;
  if (!strcasecmp(v1, "VCOM"))
    return 18;
  if (!strcasecmp(v1, "MIPC"))
    return 19;
  if (!strcasecmp(v1, "DHL"))
    return 20;
  if (!strcasecmp(v1, "MUX"))
    return 21;
LABEL_24:
  if (!strcasecmp(v1, "FAC"))
    return 22;
  else
    return 23;
}

uint64_t BasebandTransport::getDefaultTransportIOReadSize(capabilities::abs *a1)
{
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(a1))
    return 0x4000;
  else
    return 0x8000;
}

uint64_t BasebandTransport::getDefaultTransportIOReadCount(capabilities::abs *a1)
{
  int v1;
  char shouldUseMinBasebandTransportIOReadCount;
  int v3;
  int v4;
  unsigned int v5;

  v1 = (int)a1;
  shouldUseMinBasebandTransportIOReadCount = capabilities::abs::shouldUseMinBasebandTransportIOReadCount(a1);
  if (v1 == 15)
    v3 = 36;
  else
    v3 = 4;
  if (v1 == 16)
    v4 = 36;
  else
    v4 = v3;
  if (v1 == 2)
    v5 = 16;
  else
    v5 = v4;
  if ((shouldUseMinBasebandTransportIOReadCount & 1) != 0)
    return 4;
  else
    return v5;
}

double BasebandTransport::Status::Status(BasebandTransport::Status *this)
{
  double result;

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

double BasebandTransport::Status::init(BasebandTransport::Status *this)
{
  double result;

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t BasebandTransport::Status::toString(BasebandTransport::Status *this)
{
  __int128 v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void *__p[2];
  char v17;
  __int128 v18;
  _OWORD v19[4];
  void *v20[2];
  __int128 v21;
  __int128 v22;
  _OWORD v23[9];
  unint64_t v24;

  v24 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[7] = v2;
  v23[8] = v2;
  v23[5] = v2;
  v23[6] = v2;
  v23[3] = v2;
  v23[4] = v2;
  v23[1] = v2;
  v23[2] = v2;
  v22 = v2;
  v23[0] = v2;
  *(_OWORD *)v20 = v2;
  v21 = v2;
  v19[2] = v2;
  v19[3] = v2;
  v19[0] = v2;
  v19[1] = v2;
  v18 = v2;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v18);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"State: ", 7);
  switch(*(_DWORD *)this)
  {
    case 0:
      v4 = 8;
      v17 = 8;
      strcpy((char *)__p, "NotReady");
      break;
    case 1:
      v4 = 5;
      v17 = 5;
      strcpy((char *)__p, "Ready");
      break;
    case 2:
      v4 = 5;
      v17 = 5;
      strcpy((char *)__p, "Error");
      break;
    case 3:
      v4 = 7;
      v17 = 7;
      LODWORD(__p[0]) = 1818326099;
      v5 = 1684368492;
      goto LABEL_7;
    default:
      v4 = 7;
      v17 = 7;
      LODWORD(__p[0]) = 1852534357;
      v5 = 1853321070;
LABEL_7:
      *(_DWORD *)((char *)__p + 3) = v5;
      HIBYTE(__p[0]) = 0;
      break;
  }
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)__p, v4);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", ", 2);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Async: ", 7);
  *(_DWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 8) |= 1u;
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Total Rx: ", 10);
  v11 = (_QWORD *)std::ostream::operator<<();
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" KB, ", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Total Tx: ", 10);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" KB", 3);
  if (v17 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  *(_QWORD *)&v18 = *MEMORY[0x24BEDB7F0];
  v14 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v19[0] = v14;
  *((_QWORD *)&v19[0] + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v21) < 0)
    operator delete(v20[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23B804F8C](v23);
}

void sub_236E30A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_236E30A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_236E30B74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x23B804F8C](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B804F8C](a1 + 128);
  return a1;
}

uint64_t BasebandTransport::Parameters::toString(BasebandTransport::Parameters *this)
{
  __int128 v2;
  int v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v17[2];
  char v18;
  void *v19[2];
  unsigned __int8 v20;
  __int128 v21;
  _OWORD v22[4];
  void *__p[2];
  __int128 v24;
  __int128 v25;
  _OWORD v26[9];
  unint64_t v27;

  v27 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26[7] = v2;
  v26[8] = v2;
  v26[5] = v2;
  v26[6] = v2;
  v26[3] = v2;
  v26[4] = v2;
  v26[1] = v2;
  v26[2] = v2;
  v25 = v2;
  v26[0] = v2;
  *(_OWORD *)__p = v2;
  v24 = v2;
  v22[2] = v2;
  v22[3] = v2;
  v22[0] = v2;
  v22[1] = v2;
  v21 = v2;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v21);
  switch(*(_DWORD *)this)
  {
    case 0:
      v18 = 3;
      strcpy((char *)v17, "PBL");
      break;
    case 1:
      v18 = 3;
      strcpy((char *)v17, "SBL");
      break;
    case 2:
      v18 = 4;
      v3 = 1195460932;
      goto LABEL_23;
    case 3:
      v18 = 4;
      v3 = 1397114194;
      goto LABEL_23;
    case 4:
      v18 = 5;
      strcpy((char *)v17, "QMUX1");
      break;
    case 5:
      v18 = 5;
      strcpy((char *)v17, "QMUX2");
      break;
    case 6:
      v18 = 3;
      strcpy((char *)v17, "ROM");
      break;
    case 7:
      v18 = 4;
      v3 = 1414483778;
      goto LABEL_23;
    case 8:
      v18 = 3;
      strcpy((char *)v17, "ARI");
      break;
    case 9:
      v18 = 3;
      strcpy((char *)v17, "STT");
      break;
    case 0xA:
      v18 = 2;
      strcpy((char *)v17, "AT");
      break;
    case 0xB:
      v18 = 4;
      v3 = 1280328769;
      goto LABEL_23;
    case 0xC:
      v18 = 8;
      strcpy((char *)v17, "MEDIACTL");
      break;
    case 0xD:
      v18 = 3;
      strcpy((char *)v17, "ETS");
      break;
    case 0xE:
      v18 = 4;
      v3 = 1397968455;
      goto LABEL_23;
    case 0xF:
      v18 = 4;
      v3 = 1397965905;
      goto LABEL_23;
    case 0x10:
      v18 = 5;
      strcpy((char *)v17, "RCTTH");
      break;
    case 0x11:
      v18 = 3;
      strcpy((char *)v17, "ACP");
      break;
    case 0x12:
      v18 = 4;
      v3 = 1297040214;
      goto LABEL_23;
    case 0x13:
      v18 = 4;
      v3 = 1129335117;
LABEL_23:
      LODWORD(v17[0]) = v3;
      BYTE4(v17[0]) = 0;
      break;
    case 0x14:
      v18 = 3;
      strcpy((char *)v17, "DHL");
      break;
    case 0x15:
      v18 = 3;
      strcpy((char *)v17, "MUX");
      break;
    case 0x16:
      v18 = 3;
      strcpy((char *)v17, "FAC");
      break;
    default:
      v18 = 7;
      strcpy((char *)v17, "Unknown");
      break;
  }
  std::operator+<char>();
  if ((v20 & 0x80u) == 0)
    v4 = v19;
  else
    v4 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v5 = v20;
  else
    v5 = (uint64_t)v19[1];
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v4, v5);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", ", 2);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Powersave: ", 11);
  *(_DWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 8) |= 1u;
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Create Timeout: ", 16);
  v11 = (_QWORD *)std::ostream::operator<<();
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" sec, ", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"IO Size: ", 9);
  v13 = (_QWORD *)std::ostream::operator<<();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" KB, ", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Num Pending Reads: ", 19);
  std::ostream::operator<<();
  if ((char)v20 < 0)
  {
    operator delete(v19[0]);
    if ((v18 & 0x80000000) == 0)
      goto LABEL_32;
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_32;
  }
  operator delete(v17[0]);
LABEL_32:
  std::stringbuf::str();
  *(_QWORD *)&v21 = *MEMORY[0x24BEDB7F0];
  v15 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v22[-1] + *(_QWORD *)(v21 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v22[0] = v15;
  *((_QWORD *)&v22[0] + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v24) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23B804F8C](v26);
}

void sub_236E3118C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_236E311A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if ((a14 & 0x80000000) == 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::BasebandTransport(uint64_t a1, _QWORD *a2, NSObject **a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  const char *v8;
  const char *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  capabilities::abs *v15;
  capabilities::abs *shouldUseMinBasebandTransportIOReadSize;
  int v17;
  NSObject *v18;
  uint64_t Controller;
  _BYTE v21[16];
  _BYTE v22[16];
  _BYTE v23[16];

  *(_QWORD *)a1 = off_25086BB78;
  {
    std::string::basic_string[abi:ne180100]<0>(&BasebandTransport::getName(void)::kName, "ipc.bb");
  }
  {
    std::string::basic_string[abi:ne180100]<0>(&BasebandTransport::getName(void)::kName, "ipc.bb");
  }
  if (byte_25645252F >= 0)
    v8 = (const char *)&BasebandTransport::getName(void)::kName;
  else
    v8 = (const char *)BasebandTransport::getName(void)::kName;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v21, "com.apple.telephony.abm", v8);
  if (byte_25645252F >= 0)
    v9 = (const char *)&BasebandTransport::getName(void)::kName;
  else
    v9 = (const char *)BasebandTransport::getName(void)::kName;
  v10 = dispatch_queue_create(v9, 0);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v10;
  if (v10)
  {
    v11 = v10;
    dispatch_retain(v10);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v11);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_25086C000;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v23);
  *(_QWORD *)(a1 + 8) = &unk_25086ACA8;
  *(_QWORD *)(a1 + 56) = *a2;
  v12 = a2[1];
  *(_QWORD *)(a1 + 64) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
  *(_QWORD *)a1 = off_25086C118;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v21);
  *(_QWORD *)a1 = off_25086BB78;
  *(_DWORD *)(a1 + 104) = 23;
  *(_BYTE *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 112) = 10;
  shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v15);
  if ((_DWORD)shouldUseMinBasebandTransportIOReadSize)
    v17 = 0x4000;
  else
    v17 = 0x8000;
  *(_DWORD *)(a1 + 120) = v17;
  capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize);
  *(_DWORD *)(a1 + 124) = 4;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v18 = *a3;
  *(_QWORD *)(a1 + 152) = *a3;
  if (v18)
    dispatch_retain(v18);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  Controller = TelephonyBasebandCreateController();
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = Controller;
  *(_QWORD *)(a1 + 285) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 320) = dispatch_group_create();
  *(_DWORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 332) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 365) = 0;
  return a1;
}

void sub_236E31488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_236E314A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_236E314B8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  const void **v2;
  const void *v4;
  NSObject *v5;
  const void *v6;

  v4 = (const void *)v1[21];
  if (v4)
    _Block_release(v4);
  if (*v2)
    _Block_release(*v2);
  v5 = v1[19];
  if (v5)
    dispatch_release(v5);
  v6 = (const void *)v1[18];
  if (v6)
    _Block_release(v6);
  ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

__int128 *BasebandTransport::getName(BasebandTransport *this)
{
  unsigned __int8 v1;

    return &BasebandTransport::getName(void)::kName;
  std::string::basic_string[abi:ne180100]<0>(&BasebandTransport::getName(void)::kName, "ipc.bb");
  return &BasebandTransport::getName(void)::kName;
}

void sub_236E315B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_25086C000;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_25086C000;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void BasebandTransport::~BasebandTransport(BasebandTransport *this)
{
  const void *v2;
  void *v3;
  NSObject *v4;
  NSObject *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  NSObject *v9;
  const void *v10;
  NSObject *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;

  *(_QWORD *)this = off_25086BB78;
  BasebandTransport::timerOff_sync(this);
  (*(void (**)(BasebandTransport *))(*(_QWORD *)this + 80))(this);
  v2 = (const void *)*((_QWORD *)this + 33);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 33) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 37);
  if (v3)
  {
    operator delete[](v3);
    *((_QWORD *)this + 37) = 0;
  }
  v4 = *((_QWORD *)this + 40);
  if (v4)
    dispatch_release(v4);
  v5 = *((_QWORD *)this + 39);
  if (v5)
    dispatch_release(v5);
  v6 = (const void *)*((_QWORD *)this + 34);
  if (v6)
    _Block_release(v6);
  v7 = (const void *)*((_QWORD *)this + 21);
  if (v7)
    _Block_release(v7);
  v8 = (const void *)*((_QWORD *)this + 20);
  if (v8)
    _Block_release(v8);
  v9 = *((_QWORD *)this + 19);
  if (v9)
    dispatch_release(v9);
  v10 = (const void *)*((_QWORD *)this + 18);
  if (v10)
    _Block_release(v10);
  *(_QWORD *)this = off_25086C000;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v11 = *((_QWORD *)this + 12);
  if (v11)
    dispatch_release(v11);
  v12 = *((_QWORD *)this + 11);
  if (v12)
    dispatch_release(v12);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
}

{
  void *v1;

  BasebandTransport::~BasebandTransport(this);
  operator delete(v1);
}

NSObject *BasebandTransport::timerOff_sync(BasebandTransport *this)
{
  NSObject *result;
  char *v3;
  NSObject *v4;
  const char *v5;
  uint8_t v6[64];

  result = *((_QWORD *)this + 35);
  if (result)
  {
    dispatch_source_cancel(result);
    dispatch_release(*((dispatch_object_t *)this + 35));
    *((_QWORD *)this + 35) = 0;
    v3 = (char *)this + 8;
    v4 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_236E0D000, v4, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", v6, 2u);
    }
    result = (**(uint64_t (***)(char *, uint64_t))v3)(v3, 40);
    if ((_DWORD)result)
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Status report disabled", v5);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      return MEMORY[0x23B804B24](v6);
    }
  }
  return result;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void BasebandTransport::create(NSObject **a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD block[5];

  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZL14sLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_93;
  block[4] = &qword_2564524E8;
  if (_MergedGlobals_0 == -1)
  {
    v4 = (std::__shared_weak_count *)unk_2564524F0;
    v11 = qword_2564524E8;
    v12 = unk_2564524F0;
    if (!unk_2564524F0)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&_MergedGlobals_0, block);
    v4 = (std::__shared_weak_count *)unk_2564524F0;
    v11 = qword_2564524E8;
    v12 = unk_2564524F0;
    if (!unk_2564524F0)
      goto LABEL_5;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
LABEL_5:
  v7 = *a1;
  v10 = v7;
  if (v7)
    dispatch_retain(v7);
  BasebandTransport::create((capabilities::radio *)&v11, &v10, a2);
  if (v7)
    dispatch_release(v7);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_236E319F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  NSObject *v10;

  if (v10)
    dispatch_release(v10);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void BasebandTransport::create(capabilities::radio *a1@<X0>, NSObject **a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  BasebandTransportICE *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  std::__shared_weak_count_vtbl *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  NSObject *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  std::__shared_weak_count *v52;
  unint64_t v53;
  unint64_t *p_shared_weak_owners;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  NSObject *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  dispatch_object_t object;
  uint64_t v67;
  std::__shared_weak_count *v68;
  dispatch_object_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  _QWORD *v72;
  unint64_t v73;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = capabilities::radio::vendor(a1);
  if (v6 == 1)
  {
    v45 = (std::__shared_weak_count_vtbl *)operator new(0x198uLL);
    v46 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    v70 = *(_QWORD *)a1;
    v71 = v46;
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldxr(p_shared_owners);
      while (__stxr(v48 + 1, p_shared_owners));
    }
    v49 = *a2;
    v69 = v49;
    if (v49)
      dispatch_retain(v49);
    BasebandTransportMAV::BasebandTransportMAV(v45, &v70, &v69);
    v72 = &v45->~__shared_weak_count;
    v73 = 0xAAAAAAAAAAAAAAAALL;
    v50 = (std::__shared_weak_count *)operator new(0x20uLL);
    v50->__shared_owners_ = 0;
    v51 = (unint64_t *)&v50->__shared_owners_;
    v50->__vftable = (std::__shared_weak_count_vtbl *)off_25086C158;
    v50->__shared_weak_owners_ = 0;
    v50[1].__vftable = v45;
    v73 = (unint64_t)v50;
    v52 = (std::__shared_weak_count *)v45[2].~__shared_weak_count;
    if (v52)
    {
      if (v52->__shared_owners_ != -1)
      {
LABEL_70:
        v60 = (uint64_t)v72;
        ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v72);
        v61 = v73;
        v72 = 0;
        v73 = 0;
        *(_QWORD *)a3 = v60;
        *(_QWORD *)(a3 + 8) = v61;
        if (v69)
          dispatch_release(v69);
        v24 = v71;
        if (!v71)
          goto LABEL_77;
        v62 = (unint64_t *)&v71->__shared_owners_;
        do
          v26 = __ldaxr(v62);
        while (__stlxr(v26 - 1, v62));
        goto LABEL_75;
      }
      do
        v53 = __ldxr(v51);
      while (__stxr(v53 + 1, v51));
      p_shared_weak_owners = (unint64_t *)&v50->__shared_weak_owners_;
      do
        v55 = __ldxr(p_shared_weak_owners);
      while (__stxr(v55 + 1, p_shared_weak_owners));
      v45[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v45;
      v45[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v50;
      std::__shared_weak_count::__release_weak(v52);
    }
    else
    {
      do
        v56 = __ldxr(v51);
      while (__stxr(v56 + 1, v51));
      v57 = (unint64_t *)&v50->__shared_weak_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      v45[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v45;
      v45[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v50;
    }
    do
      v59 = __ldaxr(v51);
    while (__stlxr(v59 - 1, v51));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
    goto LABEL_70;
  }
  if (v6 == 2)
  {
    v27 = (BasebandTransportICE *)operator new(0x208uLL);
    v28 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    v67 = *(_QWORD *)a1;
    v68 = v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = *a2;
    object = v31;
    if (v31)
      dispatch_retain(v31);
    BasebandTransportICE::BasebandTransportICE(v27, &v67, &object);
    v72 = v27;
    v73 = 0xAAAAAAAAAAAAAAAALL;
    v32 = (std::__shared_weak_count *)operator new(0x20uLL);
    v32->__shared_owners_ = 0;
    v33 = (unint64_t *)&v32->__shared_owners_;
    v32->__vftable = (std::__shared_weak_count_vtbl *)off_25086C1A8;
    v32->__shared_weak_owners_ = 0;
    v32[1].__vftable = (std::__shared_weak_count_vtbl *)v27;
    v73 = (unint64_t)v32;
    v34 = (std::__shared_weak_count *)*((_QWORD *)v27 + 10);
    if (v34)
    {
      if (v34->__shared_owners_ != -1)
      {
LABEL_46:
        v42 = (uint64_t)v72;
        ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v72);
        v43 = v73;
        v72 = 0;
        v73 = 0;
        *(_QWORD *)a3 = v42;
        *(_QWORD *)(a3 + 8) = v43;
        if (object)
          dispatch_release(object);
        v24 = v68;
        if (!v68)
          goto LABEL_77;
        v44 = (unint64_t *)&v68->__shared_owners_;
        do
          v26 = __ldaxr(v44);
        while (__stlxr(v26 - 1, v44));
        goto LABEL_75;
      }
      do
        v35 = __ldxr(v33);
      while (__stxr(v35 + 1, v33));
      v36 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      *((_QWORD *)v27 + 9) = v27;
      *((_QWORD *)v27 + 10) = v32;
      std::__shared_weak_count::__release_weak(v34);
    }
    else
    {
      do
        v38 = __ldxr(v33);
      while (__stxr(v38 + 1, v33));
      v39 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      *((_QWORD *)v27 + 9) = v27;
      *((_QWORD *)v27 + 10) = v32;
    }
    do
      v41 = __ldaxr(v33);
    while (__stlxr(v41 - 1, v33));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    goto LABEL_46;
  }
  if (v6 != 3)
    return;
  v7 = (std::__shared_weak_count_vtbl *)operator new(0x198uLL);
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v64 = *(_QWORD *)a1;
  v65 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *a2;
  v63 = v11;
  if (v11)
    dispatch_retain(v11);
  BasebandTransport::BasebandTransport((uint64_t)v7, &v64, &v63);
  v72 = &v7->~__shared_weak_count;
  v73 = 0xAAAAAAAAAAAAAAAALL;
  v12 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12->__shared_owners_ = 0;
  v13 = (unint64_t *)&v12->__shared_owners_;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_25086C1F8;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = v7;
  v73 = (unint64_t)v12;
  v14 = (std::__shared_weak_count *)v7[2].~__shared_weak_count;
  if (!v14)
  {
    do
      v18 = __ldxr(v13);
    while (__stxr(v18 + 1, v13));
    v19 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v7[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
    v7[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
    do
LABEL_19:
      v21 = __ldaxr(v13);
    while (__stlxr(v21 - 1, v13));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    goto LABEL_22;
  }
  if (v14->__shared_owners_ == -1)
  {
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    v16 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v7[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
    v7[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
    std::__shared_weak_count::__release_weak(v14);
    goto LABEL_19;
  }
LABEL_22:
  v22 = (uint64_t)v72;
  ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v72);
  v23 = v73;
  v72 = 0;
  v73 = 0;
  *(_QWORD *)a3 = v22;
  *(_QWORD *)(a3 + 8) = v23;
  if (v11)
    dispatch_release(v11);
  v24 = v65;
  if (!v65)
    goto LABEL_77;
  v25 = (unint64_t *)&v65->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
LABEL_75:
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_77:
  BasebandTransport::init(*(BasebandTransport **)a3);
}

void sub_236E31EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, dispatch_object_t a13, char a14, uint64_t a15, dispatch_object_t object, char a17)
{
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;

  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v19 - 64);
  if (v18)
    dispatch_release(v18);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

void BasebandTransport::init(BasebandTransport *this)
{
  std::__shared_weak_count *v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  _QWORD *v18;
  _QWORD block[6];

  v5 = *((_QWORD *)this + 9);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v4 = (char *)this + 72;
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = MEMORY[0x24BDAC760];
  v16[0] = MEMORY[0x24BDAC760];
  v16[1] = 1174405120;
  v16[2] = ___ZN17BasebandTransport4initEv_block_invoke;
  v16[3] = &__block_descriptor_tmp_49;
  v16[4] = this;
  v16[5] = v5;
  v17 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v18 = v16;
  block[0] = v12;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_96;
  block[4] = v4;
  block[5] = &v18;
  v14 = *((_QWORD *)this + 11);
  if (!*((_QWORD *)this + 12))
  {
    dispatch_sync(v14, block);
    v15 = v17;
    if (!v17)
      goto LABEL_14;
    goto LABEL_13;
  }
  dispatch_async_and_wait(v14, block);
  v15 = v17;
  if (v17)
LABEL_13:
    std::__shared_weak_count::__release_weak(v15);
LABEL_14:
  std::__shared_weak_count::__release_weak(v7);
}

void ___ZN17BasebandTransport4initEv_block_invoke(capabilities::ipc *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  void *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  const void *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  _QWORD aBlock[6];
  std::__shared_weak_count *v19;

  v2 = *((_QWORD *)a1 + 4);
  if (capabilities::ipc::supportsPCI(a1))
  {
    v3 = MEMORY[0x24BDAC760];
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN17BasebandTransport4initEv_block_invoke_2;
    aBlock[3] = &__block_descriptor_tmp_2;
    v5 = *((_QWORD *)a1 + 5);
    v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 6);
    aBlock[4] = v2;
    aBlock[5] = v5;
    v19 = v4;
    if (v4)
    {
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
    }
    v8 = _Block_copy(aBlock);
    v9 = *(const void **)(v2 + 160);
    *(_QWORD *)(v2 + 160) = v8;
    if (v9)
      _Block_release(v9);
    v16[0] = v3;
    v16[1] = 1174405120;
    v16[2] = ___ZN17BasebandTransport4initEv_block_invoke_44;
    v16[3] = &__block_descriptor_tmp_47;
    v11 = *((_QWORD *)a1 + 5);
    v10 = (std::__shared_weak_count *)*((_QWORD *)a1 + 6);
    v16[4] = v2;
    v16[5] = v11;
    v17 = v10;
    if (v10)
    {
      v12 = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = _Block_copy(v16);
    v15 = *(const void **)(v2 + 168);
    *(_QWORD *)(v2 + 168) = v14;
    if (v15)
      _Block_release(v15);
    if (v17)
      std::__shared_weak_count::__release_weak(v17);
    if (v19)
      std::__shared_weak_count::__release_weak(v19);
  }
}

void ___ZN17BasebandTransport4initEv_block_invoke_2(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  const char *v13;
  const void *v14;
  void *v15;
  const void *v16;
  __int128 v17;
  NSObject *v18;
  void *v19;
  char *v20;
  __int128 v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _BYTE buf[32];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v9 = a1[4];
    v10 = std::__shared_weak_count::lock(v5);
    if (v10)
    {
      v11 = v10;
      if (a1[5])
      {
        v12 = *(NSObject **)(v9 + 40);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&buf[4] = a2;
          *(_WORD *)&buf[8] = 2048;
          *(_QWORD *)&buf[10] = a3;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = a4;
          _os_log_error_impl(&dword_236E0D000, v12, OS_LOG_TYPE_ERROR, "PCI Transport Status: 0x%x (0x%08lx, 0x%08lx)", buf, 0x1Cu);
        }
        if ((**(unsigned int (***)(uint64_t, uint64_t))(v9 + 8))(v9 + 8, 80))
        {
          ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"PCI Transport Status: 0x%x (0x%08lx, 0x%08lx)", v13, a2, a3, a4);
          ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
          MEMORY[0x23B804B24](buf);
        }
        *(_DWORD *)(v9 + 328) = 2 * ((_DWORD)a2 != 0);
        *(int64x2_t *)(v9 + 352) = vsubq_s64(*(int64x2_t *)(v9 + 336), *(int64x2_t *)(v9 + 376));
        v14 = *(const void **)(v9 + 272);
        if (v14)
        {
          v15 = _Block_copy(v14);
          v16 = v15;
          v17 = *(_OWORD *)(v9 + 344);
          *(_OWORD *)buf = *(_OWORD *)(v9 + 328);
          *(_OWORD *)&buf[16] = v17;
          v25 = *(_QWORD *)(v9 + 360);
          v18 = *(NSObject **)(v9 + 152);
          if (v15)
            v19 = _Block_copy(v15);
          else
            v19 = 0;
          v20 = (char *)operator new(0x30uLL);
          *(_QWORD *)v20 = v19;
          v21 = *(_OWORD *)&buf[16];
          *(_OWORD *)(v20 + 8) = *(_OWORD *)buf;
          *(_OWORD *)(v20 + 24) = v21;
          *((_QWORD *)v20 + 5) = v25;
          dispatch_async_f(v18, v20, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb0_E3__0EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          if (v16)
            _Block_release(v16);
        }
      }
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_236E32498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

int64x2_t BasebandTransport::updateDeltas_sync(BasebandTransport *this)
{
  int64x2_t result;

  result = vsubq_s64(*((int64x2_t *)this + 21), *(int64x2_t *)((char *)this + 376));
  *((int64x2_t *)this + 22) = result;
  return result;
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrI17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrI17BasebandTransportEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN17BasebandTransport4initEv_block_invoke_44(_QWORD *a1, uint64_t a2, void *a3, unsigned int a4)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  const char *v13;
  const void *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  char v19;
  NSObject *v20;
  void *v21;
  void *v22;
  size_t v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  void *__p;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint8_t buf[8];
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v6 = a1[4];
  v34 = 0;
  v35 = 0;
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v35 = std::__shared_weak_count::lock(v7)) != 0 && (v10 = a1[5], (v34 = v10) != 0))
  {
    v11 = *(NSObject **)(v10 + 320);
    if (v11)
    {
      dispatch_retain(*(dispatch_object_t *)(v10 + 320));
      dispatch_group_enter(v11);
    }
    if ((_DWORD)a2)
    {
      v12 = *(NSObject **)(v6 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = a2;
        _os_log_debug_impl(&dword_236E0D000, v12, OS_LOG_TYPE_DEBUG, "#D Async read error 0x%08x", buf, 8u);
      }
      if ((**(unsigned int (***)(uint64_t, uint64_t))(v6 + 8))(v6 + 8, 20))
      {
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Async read error 0x%08x", v13, a2);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        MEMORY[0x23B804B24](buf);
      }
    }
    else
    {
      *(_QWORD *)(v6 + 336) += a4;
      v14 = *(const void **)(v6 + 144);
      if (v14)
      {
        v15 = _Block_copy(v14);
        v16 = *(_QWORD *)(v6 + 128);
        if (v16)
        {
          __p = 0;
          v32 = 0;
          v33 = 0;
          (*(void (**)(uint64_t, void *, _QWORD, void **))(*(_QWORD *)v16 + 8))(v16, a3, a4, &__p);
          v17 = *(NSObject **)(v6 + 152);
          if (v15)
            v18 = _Block_copy(v15);
          else
            v18 = 0;
          *(_QWORD *)buf = v18;
          v37 = 0;
          v38 = 0;
          v39 = 0;
          v22 = __p;
          v23 = v32 - (_BYTE *)__p;
          if (v32 == __p)
          {
            v25 = 0;
            v24 = 0;
          }
          else
          {
            if ((v23 & 0x8000000000000000) != 0)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v24 = (char *)operator new(v32 - (_BYTE *)__p);
            v25 = &v24[v23];
            v37 = v24;
            v39 = &v24[v23];
            memcpy(v24, v22, v23);
            v38 = &v24[v23];
          }
          v26 = operator new(0x20uLL);
          *v26 = v18;
          v26[1] = v24;
          v26[2] = v25;
          v26[3] = v25;
          dispatch_async_f(v17, v26, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          if (__p)
          {
            v32 = __p;
            operator delete(__p);
          }
        }
        else
        {
          v19 = *(_BYTE *)(v6 + 136);
          v20 = *(NSObject **)(v6 + 152);
          if (v15)
            v21 = _Block_copy(v15);
          else
            v21 = 0;
          v27 = operator new(0x18uLL);
          *v27 = v21;
          v27[1] = a3;
          *((_DWORD *)v27 + 4) = a4;
          *((_BYTE *)v27 + 20) = v19;
          dispatch_async_f(v20, v27, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__2EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          a3 = 0;
        }
        if (v15)
          _Block_release(v15);
      }
    }
    if (a3 && !*(_BYTE *)(v6 + 136))
      free(a3);
    if (v11)
    {
      dispatch_group_leave(v11);
      dispatch_release(v11);
    }
  }
  else if (a3)
  {
    free(a3);
  }
  v28 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_236E32840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *aBlock, void *a16, uint64_t a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL BasebandTransport::open(BasebandTransport *a1, __int128 *a2, void **a3)
{
  uint64_t v6;
  __int128 v7;
  void *v8;
  NSObject *v9;
  int v10;
  void *v11;
  _QWORD v13[6];
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *aBlock;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  _QWORD block[6];

  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  BasebandTransport::stopReader(a1);
  v6 = MEMORY[0x24BDAC760];
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1174405120;
  v13[2] = ___ZN17BasebandTransport4openENS_10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke;
  v13[3] = &unk_25086BC68;
  v13[5] = a1;
  v7 = a2[1];
  v14 = *a2;
  v15 = v7;
  v16 = *((_QWORD *)a2 + 4);
  v8 = *a3;
  if (*a3)
    v8 = _Block_copy(v8);
  aBlock = v8;
  v13[4] = &v18;
  v22 = v13;
  block[0] = v6;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_96;
  block[4] = (char *)a1 + 72;
  block[5] = &v22;
  v9 = *((_QWORD *)a1 + 11);
  if (*((_QWORD *)a1 + 12))
  {
    dispatch_async_and_wait(v9, block);
    v10 = *((unsigned __int8 *)v19 + 24);
    v11 = aBlock;
    if (!aBlock)
      goto LABEL_8;
    goto LABEL_7;
  }
  dispatch_sync(v9, block);
  v10 = *((unsigned __int8 *)v19 + 24);
  v11 = aBlock;
  if (aBlock)
LABEL_7:
    _Block_release(v11);
LABEL_8:
  _Block_object_dispose(&v18, 8);
  return v10 != 0;
}

void sub_236E32A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void BasebandTransport::stopReader(BasebandTransport *this)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  char *v5;
  char *v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  dispatch_time_t v10;
  NSObject *v11;
  const char *v12;
  void *v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  _QWORD v17[7];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[3];
  char v21;
  _QWORD *v22;

  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x2000000000;
  v21 = 0;
  v2 = (uint64_t *)((char *)this + 72);
  v3 = MEMORY[0x24BDAC760];
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 0x40000000;
  v19[2] = ___ZN17BasebandTransport10stopReaderEv_block_invoke;
  v19[3] = &unk_25086BDD0;
  v19[4] = v20;
  v19[5] = this;
  v22 = v19;
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 0x40000000;
  v17[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v17[3] = &__block_descriptor_tmp_96;
  v17[4] = (char *)this + 72;
  v17[5] = &v22;
  v5 = (char *)this + 88;
  v4 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v5 + 1))
    dispatch_async_and_wait(v4, v17);
  else
    dispatch_sync(v4, v17);
  v18[0] = v3;
  v18[1] = 0x40000000;
  v18[2] = ___ZN17BasebandTransport10stopReaderEv_block_invoke_2;
  v18[3] = &unk_25086BDF8;
  v18[4] = v20;
  v18[5] = this;
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v2, (uint64_t)v18);
  if (*((_QWORD *)this + 40))
  {
    v6 = (char *)this + 8;
    v7 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17[0]) = 0;
      _os_log_impl(&dword_236E0D000, v7, OS_LOG_TYPE_DEFAULT, "#I Waiting for reader to be stopped", (uint8_t *)v17, 2u);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v6)((char *)this + 8, 40))
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Waiting for reader to be stopped", v8);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x23B804B24](v17);
    }
    v9 = *((_QWORD *)this + 40);
    v10 = dispatch_time(0, 3000000000);
    if (dispatch_group_wait(v9, v10))
    {
      (*(void (**)(BasebandTransport *))(*(_QWORD *)this + 80))(this);
      v11 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v17[0]) = 0;
        _os_log_error_impl(&dword_236E0D000, v11, OS_LOG_TYPE_ERROR, "Timeout waiting for read to unblock, freed transport to force read unblock", (uint8_t *)v17, 2u);
      }
      if ((**(unsigned int (***)(char *, uint64_t))v6)((char *)this + 8, 80))
      {
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Timeout waiting for read to unblock, freed transport to force read unblock", v12);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        MEMORY[0x23B804B24](v17);
      }
    }
    else
    {
      v13 = (void *)*((_QWORD *)this + 37);
      if (v13)
      {
        operator delete[](v13);
        *((_QWORD *)this + 37) = 0;
        v14 = *((_QWORD *)this + 39);
        *((_QWORD *)this + 39) = 0;
        if (v14)
          dispatch_release(v14);
      }
    }
    v15 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17[0]) = 0;
      _os_log_impl(&dword_236E0D000, v15, OS_LOG_TYPE_DEFAULT, "#I Reader stopped", (uint8_t *)v17, 2u);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v6)(v6, 40))
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Reader stopped", v16);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x23B804B24](v17);
    }
  }
  _Block_object_dispose(v20, 8);
}

void sub_236E32D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x23B804B24](&a9);
  _Block_object_dispose((const void *)(v9 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_236E32D80(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_236E32D98(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_236E32DB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_236E32DC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_236E32DE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void ___ZN17BasebandTransport4openENS_10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  char v3;
  __int128 v4;
  void *v5;
  const void *v6;
  _QWORD v7[5];
  char v8;

  v2 = *(_QWORD *)(a1 + 40);
  BasebandTransport::timerOff_sync((BasebandTransport *)v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
  *(_DWORD *)(v2 + 328) = 0;
  *(_BYTE *)(v2 + 332) = 0;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_QWORD *)(v2 + 365) = 0;
  v3 = *(_BYTE *)(a1 + 80);
  v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 120) = v4;
  *(_BYTE *)(v2 + 136) = v3;
  v5 = *(void **)(a1 + 88);
  if (v5)
    v5 = _Block_copy(v5);
  v6 = *(const void **)(v2 + 144);
  *(_QWORD *)(v2 + 144) = v5;
  if (v6)
    _Block_release(v6);
  if (*(_DWORD *)(v2 + 104) != 23)
  {
    if (capabilities::ipc::supportsPCI((capabilities::ipc *)v5))
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = BasebandTransport::openPCI_sync((BasebandTransport *)v2);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      BasebandTransport::timerOn_sync((dispatch_queue_t *)v2);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 0x40000000;
    v7[2] = ___ZN17BasebandTransport9dumpStateEb_block_invoke;
    v7[3] = &__block_descriptor_tmp_89;
    v7[4] = v2;
    v8 = 0;
    ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)(v2 + 72), (uint64_t)v7);
  }
}

uint64_t BasebandTransport::openPCI_sync(BasebandTransport *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  capabilities::abs *inited;
  int v10;
  uint64_t shouldUseMinBasebandTransportIOReadCount;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  unsigned int (***v21)(char *, uint64_t);
  NSObject *v22;
  NSObject *v23;
  const char *v24;
  NSObject *v25;
  const char *v26;
  int v27;
  uint8_t *v28;
  int v29;
  int v30;
  const char *v31;
  int v32;
  uint64_t v33;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[12];
  __int16 v44;
  uint64_t v45;
  char v46;
  uint8_t buf[23];
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v4 = v3;
  p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
  do
    v6 = __ldxr(p_shared_weak_owners);
  while (__stxr(v6 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  HIDWORD(v38) = -1431655766;
  inited = (capabilities::abs *)TelephonyBasebandPCITransportInitParameters();
  v10 = *((_DWORD *)this + 28);
  shouldUseMinBasebandTransportIOReadCount = capabilities::abs::traceTransportTimeoutScalingFactor(inited);
  v12 = (1000 * v10);
  if (((v12 * (unint64_t)shouldUseMinBasebandTransportIOReadCount) & 0xFFFFFFFF00000000) != 0)
  {
    v13 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 1000 * v10;
      _os_log_error_impl(&dword_236E0D000, v13, OS_LOG_TYPE_ERROR, "Scaled create timeout overflowed, falling back to unscaled value: %u", buf, 8u);
    }
    shouldUseMinBasebandTransportIOReadCount = (**((uint64_t (***)(char *, uint64_t))this + 1))((char *)this + 8, 80);
    if ((_DWORD)shouldUseMinBasebandTransportIOReadCount)
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Scaled create timeout overflowed, falling back to unscaled value: %u", v14, v12);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      shouldUseMinBasebandTransportIOReadCount = MEMORY[0x23B804B24](buf);
    }
  }
  else
  {
    LODWORD(v12) = v12 * shouldUseMinBasebandTransportIOReadCount;
  }
  v39 = *((_QWORD *)this + 11);
  v41 = v12 | 0x200000000;
  if (!*((_DWORD *)this + 31))
  {
    v16 = *((_DWORD *)this + 26);
    shouldUseMinBasebandTransportIOReadCount = capabilities::abs::shouldUseMinBasebandTransportIOReadCount((capabilities::abs *)shouldUseMinBasebandTransportIOReadCount);
    if ((shouldUseMinBasebandTransportIOReadCount & 1) != 0)
      goto LABEL_21;
    if (v16 == 2)
    {
      HIDWORD(v42) = 16;
      v15 = *((_DWORD *)this + 30);
      if (v15)
        goto LABEL_29;
      goto LABEL_17;
    }
    if (v16 == 16 || v16 == 15)
    {
      HIDWORD(v42) = 36;
      v15 = *((_DWORD *)this + 30);
      if (v15)
        goto LABEL_29;
    }
    else
    {
LABEL_21:
      HIDWORD(v42) = 4;
      v15 = *((_DWORD *)this + 30);
      if (v15)
        goto LABEL_29;
    }
LABEL_17:
    if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)shouldUseMinBasebandTransportIOReadCount))
      v15 = 0x4000;
    else
      v15 = 0x8000;
    goto LABEL_29;
  }
  HIDWORD(v42) = *((_DWORD *)this + 31);
  v15 = *((_DWORD *)this + 30);
  if (!v15)
    goto LABEL_17;
LABEL_29:
  LODWORD(v42) = -1431655765;
  v17 = *((_DWORD *)this + 26);
  switch(v17)
  {
    case 0:
      LODWORD(v38) = 0;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 1:
      LODWORD(v38) = 1;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 2:
      LODWORD(v38) = 2;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 3:
      LODWORD(v38) = 3;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 4:
      LODWORD(v38) = 4;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 5:
      LODWORD(v38) = 5;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 6:
      LODWORD(v38) = 6;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 7:
      LODWORD(v38) = 7;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 8:
      LODWORD(v38) = 8;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 9:
    case 17:
      LODWORD(v38) = 9;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) >= 0x41)
        goto LABEL_31;
      goto LABEL_36;
    case 10:
      LODWORD(v38) = 10;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 11:
      LODWORD(v38) = 11;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 12:
      LODWORD(v38) = 12;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 13:
    case 18:
      LODWORD(v38) = 13;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 14:
      LODWORD(v38) = 14;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 15:
      LODWORD(v38) = 15;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 16:
      LODWORD(v38) = 16;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) >= 0x41)
      {
LABEL_31:
        v19 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          switch(v17)
          {
            case 0:
              v48 = 3;
              strcpy((char *)buf, "PBL");
              break;
            case 1:
              v48 = 3;
              strcpy((char *)buf, "SBL");
              break;
            case 2:
              v48 = 4;
              v36 = 1195460932;
              goto LABEL_244;
            case 3:
              v48 = 4;
              v36 = 1397114194;
              goto LABEL_244;
            case 4:
              v48 = 5;
              strcpy((char *)buf, "QMUX1");
              break;
            case 5:
              v48 = 5;
              strcpy((char *)buf, "QMUX2");
              break;
            case 6:
              v48 = 3;
              strcpy((char *)buf, "ROM");
              break;
            case 7:
              v48 = 4;
              v36 = 1414483778;
              goto LABEL_244;
            case 8:
              v48 = 3;
              strcpy((char *)buf, "ARI");
              break;
            case 9:
              v48 = 3;
              strcpy((char *)buf, "STT");
              break;
            case 10:
              v48 = 2;
              strcpy((char *)buf, "AT");
              break;
            case 11:
              v48 = 4;
              v36 = 1280328769;
              goto LABEL_244;
            case 12:
              v48 = 8;
              strcpy((char *)buf, "MEDIACTL");
              break;
            case 13:
              v48 = 3;
              strcpy((char *)buf, "ETS");
              break;
            case 14:
              v48 = 4;
              v36 = 1397968455;
              goto LABEL_244;
            case 15:
              v48 = 4;
              v36 = 1397965905;
              goto LABEL_244;
            case 16:
              v48 = 5;
              strcpy((char *)buf, "RCTTH");
              break;
            case 17:
              v48 = 3;
              strcpy((char *)buf, "ACP");
              break;
            case 18:
              v48 = 4;
              v36 = 1297040214;
LABEL_244:
              *(_DWORD *)buf = v36;
              buf[4] = 0;
              break;
            default:
              v48 = 7;
              strcpy((char *)buf, "Unknown");
              break;
          }
          *(_DWORD *)v43 = 136315394;
          *(_QWORD *)&v43[4] = buf;
          v44 = 2048;
          v45 = v18;
          _os_log_error_impl(&dword_236E0D000, v19, OS_LOG_TYPE_ERROR, "%s: invalid transport io read count (%lu)", v43, 0x16u);
          if (v48 < 0)
            operator delete(*(void **)buf);
        }
        if (!(**((unsigned int (***)(char *, uint64_t))this + 1))((char *)this + 8, 80))
          goto LABEL_193;
        switch(*((_DWORD *)this + 26))
        {
          case 0:
            v46 = 3;
            strcpy(v43, "PBL");
            break;
          case 1:
            v46 = 3;
            strcpy(v43, "SBL");
            break;
          case 2:
            v46 = 4;
            v27 = 1195460932;
            goto LABEL_105;
          case 3:
            v46 = 4;
            v27 = 1397114194;
            goto LABEL_105;
          case 4:
            v46 = 5;
            strcpy(v43, "QMUX1");
            break;
          case 5:
            v46 = 5;
            strcpy(v43, "QMUX2");
            break;
          case 6:
            v46 = 3;
            strcpy(v43, "ROM");
            break;
          case 7:
            v46 = 4;
            v27 = 1414483778;
            goto LABEL_105;
          case 8:
            v46 = 3;
            strcpy(v43, "ARI");
            break;
          case 9:
            v46 = 3;
            strcpy(v43, "STT");
            break;
          case 0xA:
            v46 = 2;
            strcpy(v43, "AT");
            break;
          case 0xB:
            v46 = 4;
            v27 = 1280328769;
            goto LABEL_105;
          case 0xC:
            v46 = 8;
            strcpy(v43, "MEDIACTL");
            break;
          case 0xD:
            v46 = 3;
            strcpy(v43, "ETS");
            break;
          case 0xE:
            v46 = 4;
            v27 = 1397968455;
            goto LABEL_105;
          case 0xF:
            v46 = 4;
            v27 = 1397965905;
            goto LABEL_105;
          case 0x10:
            v46 = 5;
            strcpy(v43, "RCTTH");
            break;
          case 0x11:
            v46 = 3;
            strcpy(v43, "ACP");
            break;
          case 0x12:
            v46 = 4;
            v27 = 1297040214;
            goto LABEL_105;
          case 0x13:
            v46 = 4;
            v27 = 1129335117;
LABEL_105:
            *(_DWORD *)v43 = v27;
            v43[4] = 0;
            break;
          case 0x14:
            v46 = 3;
            strcpy(v43, "DHL");
            break;
          case 0x15:
            v46 = 3;
            strcpy(v43, "MUX");
            break;
          case 0x16:
            v46 = 3;
            strcpy(v43, "FAC");
            break;
          default:
            v46 = 7;
            strcpy(v43, "Unknown");
            break;
        }
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"%s: invalid transport io read count (%lu)", v20, v43, HIDWORD(v42), v38, v39, 0xAAAAAAAAAAAAAAAALL, v41, v42);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
LABEL_191:
        MEMORY[0x23B804B24](buf);
        if (v46 < 0)
          operator delete(*(void **)v43);
LABEL_193:
        v33 = 0;
        goto LABEL_194;
      }
LABEL_36:
      if (v15 - 0x4000 > 0xFC000)
      {
        v23 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          switch(v17)
          {
            case 0:
              v48 = 3;
              strcpy((char *)buf, "PBL");
              break;
            case 1:
              v48 = 3;
              strcpy((char *)buf, "SBL");
              break;
            case 2:
              v48 = 4;
              v37 = 1195460932;
              goto LABEL_266;
            case 3:
              v48 = 4;
              v37 = 1397114194;
              goto LABEL_266;
            case 4:
              v48 = 5;
              strcpy((char *)buf, "QMUX1");
              break;
            case 5:
              v48 = 5;
              strcpy((char *)buf, "QMUX2");
              break;
            case 6:
              v48 = 3;
              strcpy((char *)buf, "ROM");
              break;
            case 7:
              v48 = 4;
              v37 = 1414483778;
              goto LABEL_266;
            case 8:
              v48 = 3;
              strcpy((char *)buf, "ARI");
              break;
            case 9:
              v48 = 3;
              strcpy((char *)buf, "STT");
              break;
            case 10:
              v48 = 2;
              strcpy((char *)buf, "AT");
              break;
            case 11:
              v48 = 4;
              v37 = 1280328769;
              goto LABEL_266;
            case 12:
              v48 = 8;
              strcpy((char *)buf, "MEDIACTL");
              break;
            case 13:
              v48 = 3;
              strcpy((char *)buf, "ETS");
              break;
            case 14:
              v48 = 4;
              v37 = 1397968455;
              goto LABEL_266;
            case 15:
              v48 = 4;
              v37 = 1397965905;
              goto LABEL_266;
            case 16:
              v48 = 5;
              strcpy((char *)buf, "RCTTH");
              break;
            case 17:
              v48 = 3;
              strcpy((char *)buf, "ACP");
              break;
            case 18:
              v48 = 4;
              v37 = 1297040214;
LABEL_266:
              *(_DWORD *)buf = v37;
              buf[4] = 0;
              break;
            default:
              v48 = 7;
              strcpy((char *)buf, "Unknown");
              break;
          }
          *(_DWORD *)v43 = 136315394;
          *(_QWORD *)&v43[4] = buf;
          v44 = 2048;
          v45 = v15;
          _os_log_error_impl(&dword_236E0D000, v23, OS_LOG_TYPE_ERROR, "%s: invalid transport io read size (%lu)", v43, 0x16u);
          if (v48 < 0)
            operator delete(*(void **)buf);
        }
        if (!(**((unsigned int (***)(char *, uint64_t))this + 1))((char *)this + 8, 80))
          goto LABEL_193;
        switch(*((_DWORD *)this + 26))
        {
          case 0:
            v46 = 3;
            strcpy(v43, "PBL");
            break;
          case 1:
            v46 = 3;
            strcpy(v43, "SBL");
            break;
          case 2:
            v46 = 4;
            v29 = 1195460932;
            goto LABEL_135;
          case 3:
            v46 = 4;
            v29 = 1397114194;
            goto LABEL_135;
          case 4:
            v46 = 5;
            strcpy(v43, "QMUX1");
            break;
          case 5:
            v46 = 5;
            strcpy(v43, "QMUX2");
            break;
          case 6:
            v46 = 3;
            strcpy(v43, "ROM");
            break;
          case 7:
            v46 = 4;
            v29 = 1414483778;
            goto LABEL_135;
          case 8:
            v46 = 3;
            strcpy(v43, "ARI");
            break;
          case 9:
            v46 = 3;
            strcpy(v43, "STT");
            break;
          case 0xA:
            v46 = 2;
            strcpy(v43, "AT");
            break;
          case 0xB:
            v46 = 4;
            v29 = 1280328769;
            goto LABEL_135;
          case 0xC:
            v46 = 8;
            strcpy(v43, "MEDIACTL");
            break;
          case 0xD:
            v46 = 3;
            strcpy(v43, "ETS");
            break;
          case 0xE:
            v46 = 4;
            v29 = 1397968455;
            goto LABEL_135;
          case 0xF:
            v46 = 4;
            v29 = 1397965905;
            goto LABEL_135;
          case 0x10:
            v46 = 5;
            strcpy(v43, "RCTTH");
            break;
          case 0x11:
            v46 = 3;
            strcpy(v43, "ACP");
            break;
          case 0x12:
            v46 = 4;
            v29 = 1297040214;
            goto LABEL_135;
          case 0x13:
            v46 = 4;
            v29 = 1129335117;
LABEL_135:
            *(_DWORD *)v43 = v29;
            v43[4] = 0;
            break;
          case 0x14:
            v46 = 3;
            strcpy(v43, "DHL");
            break;
          case 0x15:
            v46 = 3;
            strcpy(v43, "MUX");
            break;
          case 0x16:
            v46 = 3;
            strcpy(v43, "FAC");
            break;
          default:
            v46 = 7;
            strcpy(v43, "Unknown");
            break;
        }
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"%s: invalid transport io read size (%lu)", v24, v43, v15, v38, v39, 0xAAAAAAAAAAAAAAAALL, v41, v42);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        goto LABEL_191;
      }
      v40 = *((_QWORD *)this + 20);
      if (*((_QWORD *)this + 18))
      {
        *((_BYTE *)this + 332) = 1;
        LODWORD(v42) = -1431655761;
      }
      v21 = (unsigned int (***)(char *, uint64_t))((char *)this + 8);
      if (!TelephonyBasebandPCITransportCreate())
      {
        *((_DWORD *)this + 82) = 2;
        v25 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          BasebandTransport::asString(*((unsigned int *)this + 26), (char *)buf);
          v28 = v48 >= 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)v43 = 136315138;
          *(_QWORD *)&v43[4] = v28;
          _os_log_error_impl(&dword_236E0D000, v25, OS_LOG_TYPE_ERROR, "%s: transport open failed", v43, 0xCu);
          if (v48 < 0)
            operator delete(*(void **)buf);
        }
        if (!(**v21)((char *)this + 8, 80))
          goto LABEL_193;
        switch(*((_DWORD *)this + 26))
        {
          case 0:
            v46 = 3;
            strcpy(v43, "PBL");
            break;
          case 1:
            v46 = 3;
            strcpy(v43, "SBL");
            break;
          case 2:
            v46 = 4;
            v32 = 1195460932;
            goto LABEL_189;
          case 3:
            v46 = 4;
            v32 = 1397114194;
            goto LABEL_189;
          case 4:
            v46 = 5;
            strcpy(v43, "QMUX1");
            break;
          case 5:
            v46 = 5;
            strcpy(v43, "QMUX2");
            break;
          case 6:
            v46 = 3;
            strcpy(v43, "ROM");
            break;
          case 7:
            v46 = 4;
            v32 = 1414483778;
            goto LABEL_189;
          case 8:
            v46 = 3;
            strcpy(v43, "ARI");
            break;
          case 9:
            v46 = 3;
            strcpy(v43, "STT");
            break;
          case 0xA:
            v46 = 2;
            strcpy(v43, "AT");
            break;
          case 0xB:
            v46 = 4;
            v32 = 1280328769;
            goto LABEL_189;
          case 0xC:
            v46 = 8;
            strcpy(v43, "MEDIACTL");
            break;
          case 0xD:
            v46 = 3;
            strcpy(v43, "ETS");
            break;
          case 0xE:
            v46 = 4;
            v32 = 1397968455;
            goto LABEL_189;
          case 0xF:
            v46 = 4;
            v32 = 1397965905;
            goto LABEL_189;
          case 0x10:
            v46 = 5;
            strcpy(v43, "RCTTH");
            break;
          case 0x11:
            v46 = 3;
            strcpy(v43, "ACP");
            break;
          case 0x12:
            v46 = 4;
            v32 = 1297040214;
            goto LABEL_189;
          case 0x13:
            v46 = 4;
            v32 = 1129335117;
LABEL_189:
            *(_DWORD *)v43 = v32;
            v43[4] = 0;
            break;
          case 0x14:
            v46 = 3;
            strcpy(v43, "DHL");
            break;
          case 0x15:
            v46 = 3;
            strcpy(v43, "MUX");
            break;
          case 0x16:
            v46 = 3;
            strcpy(v43, "FAC");
            break;
          default:
            v46 = 7;
            strcpy(v43, "Unknown");
            break;
        }
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"%s: transport open failed", v26, v43);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        goto LABEL_191;
      }
      *((_DWORD *)this + 82) = 1;
      v22 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        switch(*((_DWORD *)this + 26))
        {
          case 0:
            v48 = 3;
            strcpy((char *)buf, "PBL");
            break;
          case 1:
            v48 = 3;
            strcpy((char *)buf, "SBL");
            break;
          case 2:
            v48 = 4;
            v30 = 1195460932;
            goto LABEL_160;
          case 3:
            v48 = 4;
            v30 = 1397114194;
            goto LABEL_160;
          case 4:
            v48 = 5;
            strcpy((char *)buf, "QMUX1");
            break;
          case 5:
            v48 = 5;
            strcpy((char *)buf, "QMUX2");
            break;
          case 6:
            v48 = 3;
            strcpy((char *)buf, "ROM");
            break;
          case 7:
            v48 = 4;
            v30 = 1414483778;
            goto LABEL_160;
          case 8:
            v48 = 3;
            strcpy((char *)buf, "ARI");
            break;
          case 9:
            v48 = 3;
            strcpy((char *)buf, "STT");
            break;
          case 0xA:
            v48 = 2;
            strcpy((char *)buf, "AT");
            break;
          case 0xB:
            v48 = 4;
            v30 = 1280328769;
            goto LABEL_160;
          case 0xC:
            v48 = 8;
            strcpy((char *)buf, "MEDIACTL");
            break;
          case 0xD:
            v48 = 3;
            strcpy((char *)buf, "ETS");
            break;
          case 0xE:
            v48 = 4;
            v30 = 1397968455;
            goto LABEL_160;
          case 0xF:
            v48 = 4;
            v30 = 1397965905;
            goto LABEL_160;
          case 0x10:
            v48 = 5;
            strcpy((char *)buf, "RCTTH");
            break;
          case 0x11:
            v48 = 3;
            strcpy((char *)buf, "ACP");
            break;
          case 0x12:
            v48 = 4;
            v30 = 1297040214;
            goto LABEL_160;
          case 0x13:
            v48 = 4;
            v30 = 1129335117;
LABEL_160:
            *(_DWORD *)buf = v30;
            buf[4] = 0;
            break;
          case 0x14:
            v48 = 3;
            strcpy((char *)buf, "DHL");
            break;
          case 0x15:
            v48 = 3;
            strcpy((char *)buf, "MUX");
            break;
          case 0x16:
            v48 = 3;
            strcpy((char *)buf, "FAC");
            break;
          default:
            v48 = 7;
            strcpy((char *)buf, "Unknown");
            break;
        }
        *(_DWORD *)v43 = 136315394;
        *(_QWORD *)&v43[4] = buf;
        v44 = 1024;
        LODWORD(v45) = v15;
        _os_log_impl(&dword_236E0D000, v22, OS_LOG_TYPE_DEFAULT, "#I %s: transport successfully opened with read io size as %u", v43, 0x12u);
        if (v48 < 0)
          operator delete(*(void **)buf);
      }
      if ((**v21)((char *)this + 8, 40))
      {
        switch(*((_DWORD *)this + 26))
        {
          case 0:
            v46 = 3;
            strcpy(v43, "PBL");
            break;
          case 1:
            v46 = 3;
            strcpy(v43, "SBL");
            break;
          case 2:
            v46 = 4;
            v35 = 1195460932;
            goto LABEL_218;
          case 3:
            v46 = 4;
            v35 = 1397114194;
            goto LABEL_218;
          case 4:
            v46 = 5;
            strcpy(v43, "QMUX1");
            break;
          case 5:
            v46 = 5;
            strcpy(v43, "QMUX2");
            break;
          case 6:
            v46 = 3;
            strcpy(v43, "ROM");
            break;
          case 7:
            v46 = 4;
            v35 = 1414483778;
            goto LABEL_218;
          case 8:
            v46 = 3;
            strcpy(v43, "ARI");
            break;
          case 9:
            v46 = 3;
            strcpy(v43, "STT");
            break;
          case 0xA:
            v46 = 2;
            strcpy(v43, "AT");
            break;
          case 0xB:
            v46 = 4;
            v35 = 1280328769;
            goto LABEL_218;
          case 0xC:
            v46 = 8;
            strcpy(v43, "MEDIACTL");
            break;
          case 0xD:
            v46 = 3;
            strcpy(v43, "ETS");
            break;
          case 0xE:
            v46 = 4;
            v35 = 1397968455;
            goto LABEL_218;
          case 0xF:
            v46 = 4;
            v35 = 1397965905;
            goto LABEL_218;
          case 0x10:
            v46 = 5;
            strcpy(v43, "RCTTH");
            break;
          case 0x11:
            v46 = 3;
            strcpy(v43, "ACP");
            break;
          case 0x12:
            v46 = 4;
            v35 = 1297040214;
            goto LABEL_218;
          case 0x13:
            v46 = 4;
            v35 = 1129335117;
LABEL_218:
            *(_DWORD *)v43 = v35;
            v43[4] = 0;
            break;
          case 0x14:
            v46 = 3;
            strcpy(v43, "DHL");
            break;
          case 0x15:
            v46 = 3;
            strcpy(v43, "MUX");
            break;
          case 0x16:
            v46 = 3;
            strcpy(v43, "FAC");
            break;
          default:
            v46 = 7;
            strcpy(v43, "Unknown");
            break;
        }
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"%s: transport successfully opened with read io size as %u", v31, v43, v15, v38, v39, v40, v41, v42);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        MEMORY[0x23B804B24](buf);
        if (v46 < 0)
          operator delete(*(void **)v43);
      }
      v33 = 1;
LABEL_194:
      std::__shared_weak_count::__release_weak(v4);
      return v33;
    default:
      goto LABEL_193;
  }
}

void sub_236E34778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  std::__shared_weak_count *v30;

  MEMORY[0x23B804B24](&a30);
  if (a28 < 0)
  {
    operator delete(__p);
    std::__shared_weak_count::__release_weak(v30);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void BasebandTransport::timerOn_sync(dispatch_queue_t *this)
{
  unsigned int v2;
  uint64_t v3;
  NSObject *v4;
  dispatch_time_t v5;
  std::__shared_weak_count *v6;
  dispatch_queue_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  unint64_t v15;
  NSObject *v16;
  int v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  const char *v21;
  uint64_t handler;
  uint64_t v23;
  void (*v24)(_QWORD *);
  void *v25;
  dispatch_queue_t *v26;
  dispatch_queue_t v27;
  std::__shared_weak_count *v28;
  uint8_t buf[4];
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  BasebandTransport::timerOff_sync((BasebandTransport *)this);
  if (*((_DWORD *)this + 82) == 1)
  {
    v2 = *((_DWORD *)this + 72);
    if (v2 && this[34])
    {
      v3 = 1000000000 * v2;
      v4 = dispatch_source_create(MEMORY[0x24BDACA18], 1uLL, 0, this[11]);
      this[35] = v4;
      v5 = dispatch_time(0, v3);
      dispatch_source_set_timer(v4, v5, v3, 0xBEBC200uLL);
      v6 = (std::__shared_weak_count *)this[10];
      if (!v6 || (v7 = this[9], (v8 = std::__shared_weak_count::lock(v6)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v9 = v8;
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
      }
      v14 = this[35];
      handler = MEMORY[0x24BDAC760];
      v23 = 1174405120;
      v24 = ___ZN17BasebandTransport12timerOn_syncEv_block_invoke;
      v25 = &__block_descriptor_tmp_85;
      v26 = this;
      v27 = v7;
      v28 = v9;
      do
        v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
      dispatch_source_set_event_handler(v14, &handler);
      dispatch_activate(this[35]);
      v16 = this[5];
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *((_DWORD *)this + 72);
        *(_DWORD *)buf = 67109120;
        v30 = v17;
        _os_log_impl(&dword_236E0D000, v16, OS_LOG_TYPE_DEFAULT, "#I Status report enabled(%d sec)", buf, 8u);
      }
      if (((unsigned int (*)(char *, uint64_t))this[1]->isa)((char *)this + 8, 40))
      {
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Status report enabled(%d sec)", v18, *((unsigned int *)this + 72), handler, v23, v24, v25, v26, v27);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        MEMORY[0x23B804B24](buf);
      }
      if (v28)
        std::__shared_weak_count::__release_weak(v28);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    v19 = (char *)(this + 1);
    v20 = this[5];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_236E0D000, v20, OS_LOG_TYPE_DEFAULT, "#I Invalid state for status report enable.  Ignoring enable request.", buf, 2u);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v19)(v19, 40))
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Invalid state for status report enable.  Ignoring enable request.", v21);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x23B804B24](buf);
    }
  }
}

void BasebandTransport::dumpState(BasebandTransport *this, char a2)
{
  _QWORD v2[5];
  char v3;

  v2[0] = MEMORY[0x24BDAC760];
  v2[1] = 0x40000000;
  v2[2] = ___ZN17BasebandTransport9dumpStateEb_block_invoke;
  v2[3] = &__block_descriptor_tmp_89;
  v2[4] = this;
  v3 = a2;
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v2);
}

void *__copy_helper_block_e8_88c45_ZTSN8dispatch5blockIU13block_pointerFvPhjEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 88);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 88) = result;
  return result;
}

void __destroy_helper_block_e8_88c45_ZTSN8dispatch5blockIU13block_pointerFvPhjEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 88);
  if (v1)
    _Block_release(v1);
}

BOOL BasebandTransport::write(BasebandTransport *this, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4)
{
  char *v7;
  _QWORD *v8;
  NSObject *v9;
  char *v10;
  NSObject *v11;
  uint64_t (**v12)(_QWORD, uint64_t);
  int v13;
  NSObject *v14;
  _BOOL8 v15;
  _QWORD v17[6];
  _QWORD v18[10];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  const unsigned __int8 *v26;
  uint64_t block;
  uint64_t p_block;
  uint64_t v29;
  __n128 (*v30)(_QWORD *, uint64_t);
  void (*v31)(uint64_t);
  void *__p;
  void *v33;
  uint64_t v34;
  _QWORD v35[7];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *(*v47)(uint64_t);
  void *v48;
  char *v49;
  _QWORD *v50;

  v40 = 0;
  v41 = &v40;
  v42 = 0x2000000000;
  v43 = 0;
  v36 = 0;
  v37 = &v36;
  v38 = 0x2000000000;
  v39 = 0;
  v7 = (char *)this + 72;
  v8 = (_QWORD *)MEMORY[0x24BDAC760];
  v35[0] = MEMORY[0x24BDAC760];
  v35[1] = 0x40000000;
  v35[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke;
  v35[3] = &unk_25086BCA0;
  v35[5] = &v40;
  v35[6] = this;
  v35[4] = &v36;
  v45 = v35;
  block = MEMORY[0x24BDAC760];
  p_block = 0x40000000;
  v29 = (uint64_t)___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v30 = (__n128 (*)(_QWORD *, uint64_t))&__block_descriptor_tmp_96;
  v31 = (void (*)(uint64_t))((char *)this + 72);
  __p = &v45;
  v10 = (char *)this + 88;
  v9 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v10 + 1))
  {
    dispatch_async_and_wait(v9, &block);
    if (*((_BYTE *)v41 + 24))
      goto LABEL_3;
LABEL_10:
    v15 = 0;
    goto LABEL_19;
  }
  dispatch_sync(v9, &block);
  if (!*((_BYTE *)v41 + 24))
    goto LABEL_10;
LABEL_3:
  block = 0;
  p_block = (uint64_t)&block;
  v29 = 0x4002000000;
  v30 = __Block_byref_object_copy_;
  v31 = __Block_byref_object_dispose_;
  v33 = 0;
  v34 = 0;
  __p = 0;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = a2;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = a3;
  v18[0] = v8;
  v18[1] = 0x40000000;
  v18[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_52;
  v18[3] = &unk_25086BCC8;
  v18[8] = a2;
  v18[9] = a3;
  v18[4] = &block;
  v18[5] = &v23;
  v18[6] = &v19;
  v18[7] = this;
  v44 = v18;
  v45 = v8;
  v46 = 0x40000000;
  v47 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v48 = &__block_descriptor_tmp_96;
  v49 = v7;
  v50 = &v44;
  v11 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12))
  {
    dispatch_async_and_wait(v11, &v45);
    if (v20[3])
      goto LABEL_5;
  }
  else
  {
    dispatch_sync(v11, &v45);
    if (v20[3])
    {
LABEL_5:
      v12 = (uint64_t (**)(_QWORD, uint64_t))v37[3];
      if (*v12)
      {
        v13 = (*v12)(v12, v24[3]);
        *((_BYTE *)v41 + 24) = v13;
        if (v13)
        {
          v17[0] = v8;
          v17[1] = 0x40000000;
          v17[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_2;
          v17[3] = &unk_25086BCF0;
          v17[4] = &v19;
          v17[5] = this;
          v44 = v17;
          v45 = v8;
          v46 = 0x40000000;
          v47 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
          v48 = &__block_descriptor_tmp_96;
          v49 = v7;
          v50 = &v44;
          v14 = *((_QWORD *)this + 11);
          if (*((_QWORD *)this + 12))
            dispatch_async_and_wait(v14, &v45);
          else
            dispatch_sync(v14, &v45);
          v15 = *((_BYTE *)v41 + 24) != 0;
        }
        else
        {
          v15 = 0;
        }
      }
      else
      {
        v15 = 0;
        *((_BYTE *)v41 + 24) = 0;
      }
      goto LABEL_17;
    }
  }
  v15 = 1;
LABEL_17:
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&block, 8);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
LABEL_19:
  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(&v40, 8);
  return v15;
}

void sub_236E34EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  uint64_t v40;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  if (__p)
  {
    a40 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v40 - 224), 8);
  _Block_object_dispose((const void *)(v40 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t result;

  v2 = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v2 + 176;
  v3 = *(uint64_t (**)(void))(v2 + 232);
  if (v3)
  {
    result = v3();
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = result;
  }
  else
  {
    result = 0;
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
  }
  return result;
}

__n128 __Block_byref_object_copy_(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t result;
  const char *v6;
  uint64_t v7;
  uint8_t buf[4];
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(v2 + 344) + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  *(_QWORD *)(v2 + 344) = v3;
  v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    *(_DWORD *)buf = 134218240;
    v9 = v7;
    v10 = 2048;
    v11 = v3;
    _os_log_debug_impl(&dword_236E0D000, v4, OS_LOG_TYPE_DEBUG, "#D Written: %zu bytes, for a total of: %llu", buf, 0x16u);
  }
  result = (**(uint64_t (***)(uint64_t, uint64_t))(v2 + 8))(v2 + 8, 20);
  if ((_DWORD)result)
  {
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Written: %zu bytes, for a total of: %llu", v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(_QWORD *)(v2 + 344));
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    return MEMORY[0x23B804B24](buf);
  }
  return result;
}

uint64_t BasebandTransport::read(BasebandTransport *this, unsigned __int8 *a2, unint64_t a3, unsigned int *a4)
{
  uint64_t *v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  char v13;
  void (*v14)(void);
  uint64_t v15;
  _QWORD v17[6];
  _QWORD v18[7];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  _QWORD block[6];

  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = 0;
  v6 = (uint64_t *)((char *)this + 72);
  v7 = MEMORY[0x24BDAC760];
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 0x40000000;
  v18[2] = ___ZN17BasebandTransport4readEPhmPjbj_block_invoke;
  v18[3] = &unk_25086BD18;
  v18[5] = &v23;
  v18[6] = this;
  v18[4] = &v19;
  v27 = v18;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_96;
  block[4] = (char *)this + 72;
  block[5] = &v27;
  v9 = (char *)this + 88;
  v8 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v9 + 1))
  {
    dispatch_async_and_wait(v8, block);
    v10 = v24;
    if (!*((_BYTE *)v24 + 24))
      goto LABEL_13;
LABEL_5:
    v11 = v20[3];
    if (v11 && (v12 = *(uint64_t (**)(void))(v11 + 8)) != 0)
    {
      v13 = v12();
      *((_BYTE *)v24 + 24) = v13;
      if ((v13 & 1) != 0)
      {
        v17[0] = v7;
        v17[1] = 0x40000000;
        v17[2] = ___ZN17BasebandTransport4readEPhmPjbj_block_invoke_58;
        v17[3] = &__block_descriptor_tmp_59;
        v17[4] = this;
        v17[5] = a4;
        ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v6, (uint64_t)v17);
        goto LABEL_13;
      }
      v14 = *(void (**)(void))(v20[3] + 24);
      if (!v14)
        goto LABEL_13;
    }
    else
    {
      *((_BYTE *)v10 + 24) = 0;
      v14 = *(void (**)(void))(v11 + 24);
      if (!v14)
        goto LABEL_13;
    }
    v14();
    goto LABEL_13;
  }
  dispatch_sync(v8, block);
  v10 = v24;
  if (*((_BYTE *)v24 + 24))
    goto LABEL_5;
LABEL_13:
  v15 = *((unsigned __int8 *)v24 + 24);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  return v15;
}

void sub_236E35324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17BasebandTransport4readEPhmPjbj_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t (*v4)(void);
  uint64_t (***v5)(_QWORD, uint64_t);
  NSObject *v6;
  const char *v7;
  uint8_t v8[64];

  v2 = a1[6];
  result = v2 + 176;
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v2 + 176;
  v4 = *(uint64_t (**)(void))(v2 + 232);
  if (v4)
  {
    result = v4();
    if (!(_DWORD)result)
    {
      *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
      if (!*(_BYTE *)(v2 + 332))
        return result;
      goto LABEL_7;
    }
    LOBYTE(v4) = *(_BYTE *)(v2 + 332) == 0;
  }
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = (_BYTE)v4;
  if (!*(_BYTE *)(v2 + 332))
    return result;
LABEL_7:
  v5 = (uint64_t (***)(_QWORD, uint64_t))(v2 + 8);
  v6 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v8 = 0;
    _os_log_error_impl(&dword_236E0D000, v6, OS_LOG_TYPE_ERROR, "Explicit reads not allowed in async mode", v8, 2u);
    result = (**v5)(v5, 80);
    if ((_DWORD)result)
      goto LABEL_9;
  }
  else
  {
    result = (**v5)(v5, 80);
    if ((_DWORD)result)
    {
LABEL_9:
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Explicit reads not allowed in async mode", v7);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      return MEMORY[0x23B804B24](v8);
    }
  }
  return result;
}

uint64_t ___ZN17BasebandTransport4readEPhmPjbj_block_invoke_58(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 336) += **(unsigned int **)(result + 40);
  return result;
}

uint64_t BasebandTransport::close(BasebandTransport *this)
{
  char *v2;
  uint64_t v3;
  NSObject *v4;
  char *v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[6];
  _QWORD v10[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t block;
  uint64_t v17;
  _QWORD *(*v18)(uint64_t);
  void *v19;
  char *v20;
  _QWORD *v21;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 1;
  *((_DWORD *)this + 72) = 0;
  v2 = (char *)this + 72;
  v3 = MEMORY[0x24BDAC760];
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 0x40000000;
  v10[2] = ___ZN17BasebandTransport5closeEv_block_invoke;
  v10[3] = &__block_descriptor_tmp_60;
  v10[4] = this;
  v15 = v10;
  block = MEMORY[0x24BDAC760];
  v17 = 0x40000000;
  v18 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v19 = &__block_descriptor_tmp_96;
  v20 = (char *)this + 72;
  v21 = &v15;
  v5 = (char *)this + 88;
  v4 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v5 + 1))
    dispatch_async_and_wait(v4, &block);
  else
    dispatch_sync(v4, &block);
  BasebandTransport::stopReader(this);
  v9[0] = v3;
  v9[1] = 0x40000000;
  v9[2] = ___ZN17BasebandTransport5closeEv_block_invoke_2;
  v9[3] = &unk_25086BD80;
  v9[4] = &v11;
  v9[5] = this;
  v15 = v9;
  block = v3;
  v17 = 0x40000000;
  v18 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v19 = &__block_descriptor_tmp_96;
  v20 = v2;
  v21 = &v15;
  v6 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12))
    dispatch_async_and_wait(v6, &block);
  else
    dispatch_sync(v6, &block);
  v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_236E355EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17BasebandTransport5closeEv_block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 80))(*(_QWORD *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t BasebandTransport::operator*(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD block[6];

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = ___ZN17BasebandTransportdeEv_block_invoke;
  v5[3] = &unk_25086BDA8;
  v5[4] = &v6;
  v5[5] = a1;
  v10 = v5;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_96;
  block[4] = a1 + 72;
  block[5] = &v10;
  v2 = a1 + 88;
  v1 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(v2 + 8))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZN17BasebandTransportdeEv_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_QWORD *)(result + 40) + 176;
  return result;
}

uint64_t BasebandTransport::switchDIAG_sync(BasebandTransport *this)
{
  return 0;
}

uint64_t BasebandTransport::getIOSizeRx(BasebandTransport *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t BasebandTransport::close_sync(BasebandTransport *this)
{
  unsigned int (*v2)(char *);
  _OWORD *v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  int v7;
  const char *v8;
  const char *v9;
  int v10;
  const char *v11;
  void *__p[2];
  char v14;
  _BYTE buf[12];
  __int16 v16;
  const char *v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int (*)(char *))*((_QWORD *)this + 29);
  if (v2 && (v3 = (_OWORD *)((char *)this + 176), v2((char *)this + 176)))
  {
    *((_DWORD *)this + 82) = 0;
    v4 = TelephonyUtilTransportFree();
    *v3 = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_QWORD *)this + 32) = 0;
    v5 = (char *)this + 8;
    v6 = *((_QWORD *)this + 5);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      goto LABEL_33;
  }
  else
  {
    v4 = 1;
    v5 = (char *)this + 8;
    v6 = *((_QWORD *)this + 5);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      goto LABEL_33;
  }
  switch(*((_DWORD *)this + 26))
  {
    case 0:
      v14 = 3;
      LODWORD(__p[0]) = 4997712;
      break;
    case 1:
      v14 = 3;
      LODWORD(__p[0]) = 4997715;
      break;
    case 2:
      v14 = 4;
      v7 = 1195460932;
      goto LABEL_28;
    case 3:
      v14 = 4;
      v7 = 1397114194;
      goto LABEL_28;
    case 4:
      v14 = 5;
      strcpy((char *)__p, "QMUX1");
      break;
    case 5:
      v14 = 5;
      strcpy((char *)__p, "QMUX2");
      break;
    case 6:
      v14 = 3;
      LODWORD(__p[0]) = 5066578;
      break;
    case 7:
      v14 = 4;
      v7 = 1414483778;
      goto LABEL_28;
    case 8:
      v14 = 3;
      LODWORD(__p[0]) = 4805185;
      break;
    case 9:
      v14 = 3;
      LODWORD(__p[0]) = 5526611;
      break;
    case 0xA:
      v14 = 2;
      strcpy((char *)__p, "AT");
      break;
    case 0xB:
      v14 = 4;
      v7 = 1280328769;
      goto LABEL_28;
    case 0xC:
      v14 = 8;
      strcpy((char *)__p, "MEDIACTL");
      break;
    case 0xD:
      v14 = 3;
      LODWORD(__p[0]) = 5461061;
      break;
    case 0xE:
      v14 = 4;
      v7 = 1397968455;
      goto LABEL_28;
    case 0xF:
      v14 = 4;
      v7 = 1397965905;
      goto LABEL_28;
    case 0x10:
      v14 = 5;
      strcpy((char *)__p, "RCTTH");
      break;
    case 0x11:
      v14 = 3;
      LODWORD(__p[0]) = 5260097;
      break;
    case 0x12:
      v14 = 4;
      v7 = 1297040214;
      goto LABEL_28;
    case 0x13:
      v14 = 4;
      v7 = 1129335117;
LABEL_28:
      LODWORD(__p[0]) = v7;
      BYTE4(__p[0]) = 0;
      break;
    case 0x14:
      v14 = 3;
      LODWORD(__p[0]) = 4999236;
      break;
    case 0x15:
      v14 = 3;
      LODWORD(__p[0]) = 5789005;
      break;
    case 0x16:
      v14 = 3;
      LODWORD(__p[0]) = 4407622;
      break;
    default:
      v14 = 7;
      strcpy((char *)__p, "Unknown");
      break;
  }
  v8 = "error";
  if ((_DWORD)v4)
    v8 = "success";
  *(_DWORD *)buf = 136315394;
  *(_QWORD *)&buf[4] = __p;
  v16 = 2080;
  v17 = v8;
  _os_log_impl(&dword_236E0D000, v6, OS_LOG_TYPE_DEFAULT, "#I Transport close %s: %s", buf, 0x16u);
  if (v14 < 0)
    operator delete(__p[0]);
LABEL_33:
  if ((**(unsigned int (***)(char *, uint64_t))v5)(v5, 40))
  {
    switch(*((_DWORD *)this + 26))
    {
      case 0:
        v18 = 3;
        strcpy(buf, "PBL");
        break;
      case 1:
        v18 = 3;
        strcpy(buf, "SBL");
        break;
      case 2:
        v18 = 4;
        v10 = 1195460932;
        goto LABEL_59;
      case 3:
        v18 = 4;
        v10 = 1397114194;
        goto LABEL_59;
      case 4:
        v18 = 5;
        strcpy(buf, "QMUX1");
        break;
      case 5:
        v18 = 5;
        strcpy(buf, "QMUX2");
        break;
      case 6:
        v18 = 3;
        strcpy(buf, "ROM");
        break;
      case 7:
        v18 = 4;
        v10 = 1414483778;
        goto LABEL_59;
      case 8:
        v18 = 3;
        strcpy(buf, "ARI");
        break;
      case 9:
        v18 = 3;
        strcpy(buf, "STT");
        break;
      case 0xA:
        v18 = 2;
        strcpy(buf, "AT");
        break;
      case 0xB:
        v18 = 4;
        v10 = 1280328769;
        goto LABEL_59;
      case 0xC:
        v18 = 8;
        strcpy(buf, "MEDIACTL");
        break;
      case 0xD:
        v18 = 3;
        strcpy(buf, "ETS");
        break;
      case 0xE:
        v18 = 4;
        v10 = 1397968455;
        goto LABEL_59;
      case 0xF:
        v18 = 4;
        v10 = 1397965905;
        goto LABEL_59;
      case 0x10:
        v18 = 5;
        strcpy(buf, "RCTTH");
        break;
      case 0x11:
        v18 = 3;
        strcpy(buf, "ACP");
        break;
      case 0x12:
        v18 = 4;
        v10 = 1297040214;
        goto LABEL_59;
      case 0x13:
        v18 = 4;
        v10 = 1129335117;
LABEL_59:
        *(_DWORD *)buf = v10;
        buf[4] = 0;
        break;
      case 0x14:
        v18 = 3;
        strcpy(buf, "DHL");
        break;
      case 0x15:
        v18 = 3;
        strcpy(buf, "MUX");
        break;
      case 0x16:
        v18 = 3;
        strcpy(buf, "FAC");
        break;
      default:
        v18 = 7;
        strcpy(buf, "Unknown");
        break;
    }
    v11 = "error";
    if ((_DWORD)v4)
      v11 = "success";
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Transport close %s: %s", v9, buf, v11);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x23B804B24](__p);
    if (v18 < 0)
      operator delete(*(void **)buf);
  }
  return v4;
}

uint64_t BasebandTransport::startReader_sync(NSObject **this)
{
  size_t v2;
  unsigned __int8 v3;
  const char *v4;
  dispatch_queue_t v5;
  NSObject *v6;

  if (!this[37])
  {
    if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)this))
      v2 = 0x4000;
    else
      v2 = 0x8000;
    this[38] = v2;
    this[37] = operator new[](v2);
    {
      std::string::basic_string[abi:ne180100]<0>(&BasebandTransport::getName(void)::kName, "ipc.bb");
    }
    if (byte_25645252F >= 0)
      v4 = (const char *)&BasebandTransport::getName(void)::kName;
    else
      v4 = (const char *)BasebandTransport::getName(void)::kName;
    v5 = dispatch_queue_create(v4, 0);
    v6 = this[39];
    this[39] = v5;
    if (v6)
      dispatch_release(v6);
  }
  *((_BYTE *)this + 292) = 1;
  *((_BYTE *)this + 332) = 1;
  BasebandTransport::queueRead_sync((BasebandTransport *)this);
  return *((unsigned __int8 *)this + 292);
}

void sub_236E35EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void BasebandTransport::queueRead_sync(BasebandTransport *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v13[6];
  std::__shared_weak_count *v14;
  dispatch_group_t group;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = *((_QWORD *)this + 40);
  if (v6)
  {
    dispatch_retain(*((dispatch_object_t *)this + 40));
    dispatch_group_enter(v6);
  }
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1174405120;
  v13[2] = ___ZN17BasebandTransport14queueRead_syncEv_block_invoke;
  v13[3] = &__block_descriptor_tmp_78;
  v13[4] = this;
  v13[5] = v3;
  v14 = v5;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  group = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v6);
  }
  dispatch_async(*((dispatch_queue_t *)this + 39), v13);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v6)
  {
    dispatch_group_leave(v6);
    dispatch_release(v6);
  }
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t ___ZN17BasebandTransport10stopReaderEv_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_BYTE *)(v1 + 292);
  *(_BYTE *)(v1 + 292) = 0;
  *(_BYTE *)(v1 + 332) = 0;
  return result;
}

uint64_t ___ZN17BasebandTransport10stopReaderEv_block_invoke_2(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v1 = *(_QWORD *)(result + 40);
  v2 = *(uint64_t (**)(uint64_t))(v1 + 232);
  if (v2)
  {
    v3 = result;
    result = v2(v1 + 176);
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24))
      {
        v4 = *(uint64_t (**)(uint64_t))(v1 + 192);
        if (v4)
          return v4(v1 + 176);
      }
    }
  }
  return result;
}

void ___ZN17BasebandTransport14queueRead_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(a1 + 56);
  v3 = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v2);
  }
  BasebandTransport::read_sync(v1, &v3);
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void sub_236E36160(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void BasebandTransport::read_sync(uint64_t a1, NSObject **a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  capabilities::abs *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, int *, _QWORD, uint64_t, _QWORD);
  uint64_t v10;
  capabilities::abs *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD v31[6];
  std::__shared_weak_count *v32;
  _QWORD block[6];
  std::__shared_weak_count *v34;
  dispatch_group_t group;
  int v36;
  _QWORD v37[5];
  int v38;
  int v39;
  uint64_t v40;
  std::__shared_weak_count *v41;

  v6 = *(_QWORD *)(a1 + 72);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  v5 = (uint64_t *)(a1 + 72);
  v40 = v6;
  if (!v4
    || (v8 = (capabilities::abs *)std::__shared_weak_count::lock(v4), (v41 = (std::__shared_weak_count *)v8) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v39 = 0;
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, _QWORD, uint64_t, _QWORD))(a1 + 184);
  v10 = MEMORY[0x24BDAC760];
  if (v9)
  {
    v11 = v8;
    v12 = *(_QWORD *)(a1 + 296);
    v13 = capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v8) ? 0x4000 : 0x8000;
    v14 = v9(a1 + 176, v12, v13, &v39, 0, 0xFFFFFFFFLL, 0);
    v15 = v39 ? v14 : 0;
    if (v15 == 1)
    {
      v37[0] = v10;
      v37[1] = 0x40000000;
      v37[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke;
      v37[3] = &__block_descriptor_tmp_79;
      v37[4] = a1;
      v38 = v39;
      ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v5, (uint64_t)v37);
      block[0] = v10;
      block[1] = 1174405120;
      block[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_2;
      block[3] = &__block_descriptor_tmp_80;
      block[4] = a1;
      block[5] = v6;
      v34 = (std::__shared_weak_count *)v11;
      v16 = (unint64_t *)((char *)v11 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v18 = *a2;
      group = v18;
      if (v18)
      {
        dispatch_retain(v18);
        dispatch_group_enter(v18);
      }
      v36 = v39;
      dispatch_sync(*(dispatch_queue_t *)(a1 + 152), block);
      v19 = group;
      if (group)
      {
        dispatch_group_leave(group);
        dispatch_release(v19);
      }
      v20 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
  }
  v31[0] = v10;
  v31[1] = 1174405120;
  v31[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_81;
  v31[3] = &__block_descriptor_tmp_82;
  v31[4] = a1;
  v31[5] = v40;
  v32 = v41;
  if (v41)
  {
    v23 = (unint64_t *)&v41->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v5, (uint64_t)v31);
  v25 = v32;
  if (v32)
  {
    v26 = (unint64_t *)&v32->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v41;
  if (v41)
  {
    v29 = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_236E36404(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE56c30_ZTSN8dispatch13group_sessionE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[7];
  a1[7] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[7];
    if (v7)
      dispatch_group_enter(v7);
  }
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 56);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 336) += *(unsigned int *)(result + 40);
  return result;
}

void ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_2(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p;
  void *v5;
  uint64_t v6;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = v2[16];
  if (v3)
  {
    __p = 0;
    v5 = 0;
    v6 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)v3 + 8))(v3, v2[37], *(unsigned int *)(a1 + 64), &__p);
    (*(void (**)(void))(v2[18] + 16))();
    if (__p)
    {
      v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    (*(void (**)(void))(v2[18] + 16))();
  }
}

void sub_236E3659C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN17BasebandTransport12timerOn_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD block[6];
  std::__shared_weak_count *v22;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      if (!v6)
      {
LABEL_19:
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
      v7 = (_OWORD *)(v3 + 328);
      v8 = *(_QWORD *)(v3 + 336);
      v9 = *(_QWORD *)(v3 + 376);
      v10 = *(_QWORD *)(v3 + 344) - *(_QWORD *)(v3 + 384);
      *(_QWORD *)(v3 + 352) = v8 - v9;
      *(_QWORD *)(v3 + 360) = v10;
      if (v10)
        v11 = 0;
      else
        v11 = v8 == v9;
      if (v11)
      {
        v12 = 3;
      }
      else
      {
        if (*(_DWORD *)v7 != 3)
        {
LABEL_12:
          v13 = *(_OWORD *)(v3 + 344);
          *(_OWORD *)(v3 + 368) = *v7;
          *(_OWORD *)(v3 + 384) = v13;
          *(_QWORD *)(v3 + 400) = *(_QWORD *)(v3 + 360);
          block[0] = MEMORY[0x24BDAC760];
          block[1] = 1174405120;
          block[2] = ___ZN17BasebandTransport12timerOn_syncEv_block_invoke_2;
          block[3] = &__block_descriptor_tmp_84;
          block[4] = v3;
          block[5] = v6;
          v14 = (unint64_t *)&v4->__shared_owners_;
          v22 = v4;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          dispatch_async(*(dispatch_queue_t *)(v3 + 152), block);
          v16 = v22;
          if (v22)
          {
            v17 = (unint64_t *)&v22->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          goto LABEL_19;
        }
        v12 = 1;
      }
      *(_DWORD *)v7 = v12;
      goto LABEL_12;
    }
  }
}

uint64_t ___ZN17BasebandTransport12timerOn_syncEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v9[2];
  uint64_t v10;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 272);
  v10 = *(_QWORD *)(v5 + 400);
  v7 = *(_OWORD *)(v5 + 384);
  v9[0] = *(_OWORD *)(v5 + 368);
  v9[1] = v7;
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t))(v6 + 16))(v6, v9, a3, a4, a5);
}

__n128 BasebandTransport::getStatus@<Q0>(BasebandTransport *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 45);
  result = *(__n128 *)((char *)this + 328);
  v3 = *(_OWORD *)((char *)this + 344);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void ___ZN17BasebandTransport9dumpStateEb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void **v4;
  const char *v5;
  _BYTE *v6;
  NSObject *v7;
  void **v8;
  const char *v9;
  _BYTE *v10;
  void *__p[2];
  char v12;
  _BYTE buf[12];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  *(int64x2_t *)(v2 + 352) = vsubq_s64(*(int64x2_t *)(v2 + 336), *(int64x2_t *)(v2 + 376));
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BasebandTransport::Parameters::toString((uint64_t *)__p, (BasebandTransport::Parameters *)(v2 + 104));
    v4 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl(&dword_236E0D000, v3, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  if ((**(unsigned int (***)(uint64_t, uint64_t))(v2 + 8))(v2 + 8, 40)
    && ((BasebandTransport::Parameters::toString((uint64_t *)buf, (BasebandTransport::Parameters *)(v2 + 104)), v14 >= 0)
      ? (v6 = buf)
      : (v6 = *(_BYTE **)buf),
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"%s", v5, v6),
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog(),
        MEMORY[0x23B804B24](__p),
        v14 < 0))
  {
    operator delete(*(void **)buf);
    v7 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
  }
  else
  {
    v7 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
  }
  BasebandTransport::Status::toString((uint64_t *)__p, (BasebandTransport::Status *)(v2 + 328));
  if (v12 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)&buf[4] = v8;
  _os_log_impl(&dword_236E0D000, v7, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
  if (v12 < 0)
    operator delete(__p[0]);
LABEL_19:
  if ((**(unsigned int (***)(uint64_t, uint64_t))(v2 + 8))(v2 + 8, 40)
    && ((BasebandTransport::Status::toString((uint64_t *)buf, (BasebandTransport::Status *)(v2 + 328)), v14 >= 0)
      ? (v10 = buf)
      : (v10 = *(_BYTE **)buf),
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"%s", v9, v10),
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog(),
        MEMORY[0x23B804B24](__p),
        v14 < 0))
  {
    operator delete(*(void **)buf);
    if (!*(_BYTE *)(a1 + 40))
      return;
  }
  else if (!*(_BYTE *)(a1 + 40))
  {
    return;
  }
  *(_DWORD *)(v2 + 328) = 0;
  *(_BYTE *)(v2 + 332) = 0;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_QWORD *)(v2 + 365) = 0;
  BasebandTransport::timerOn_sync((dispatch_queue_t *)v2);
}

void sub_236E36AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  MEMORY[0x23B804B24](&a10);
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void BasebandTransport::reportStatus(uint64_t a1, int a2, void **a3)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  void *v7;
  _QWORD v8[5];
  void *aBlock;
  int v10;
  _QWORD *v11;
  _QWORD block[6];

  v4 = MEMORY[0x24BDAC760];
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 1174405120;
  v8[2] = ___ZN17BasebandTransport12reportStatusEjN8dispatch5blockIU13block_pointerFvNS_6StatusEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_90;
  v8[4] = a1;
  v10 = a2;
  v5 = *a3;
  if (*a3)
    v5 = _Block_copy(v5);
  aBlock = v5;
  v11 = v8;
  block[0] = v4;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_96;
  block[4] = a1 + 72;
  block[5] = &v11;
  v6 = *(NSObject **)(a1 + 88);
  if (!*(_QWORD *)(a1 + 96))
  {
    dispatch_sync(v6, block);
    v7 = aBlock;
    if (!aBlock)
      return;
    goto LABEL_7;
  }
  dispatch_async_and_wait(v6, block);
  v7 = aBlock;
  if (aBlock)
LABEL_7:
    _Block_release(v7);
}

void ___ZN17BasebandTransport12reportStatusEjN8dispatch5blockIU13block_pointerFvNS_6StatusEEEE_block_invoke(uint64_t a1)
{
  int v1;
  void *v2;
  uint64_t v3;
  const void *v4;

  v1 = *(_DWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  *(_DWORD *)(v3 + 288) = v1;
  if (v2)
    v2 = _Block_copy(v2);
  v4 = *(const void **)(v3 + 272);
  *(_QWORD *)(v3 + 272) = v2;
  if (v4)
    _Block_release(v4);
  BasebandTransport::timerOn_sync((dispatch_queue_t *)v3);
}

void *__copy_helper_block_e8_40c70_ZTSN8dispatch5blockIU13block_pointerFvN17BasebandTransport6StatusEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 40);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c70_ZTSN8dispatch5blockIU13block_pointerFvN17BasebandTransport6StatusEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

uint64_t ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(std::string *a1@<X8>)
{
  unsigned __int8 v1;
  int v2;
  std::string *v3;

  if ((v1 & 1) == 0)
  {
    v3 = a1;
    a1 = v3;
    if (v2)
    {
      byte_25645252F = 6;
      strcpy((char *)&BasebandTransport::getName(void)::kName, "ipc.bb");
      a1 = v3;
    }
  }
  if (byte_25645252F < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)BasebandTransport::getName(void)::kName, *((std::string::size_type *)&BasebandTransport::getName(void)::kName + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = BasebandTransport::getName(void)::kName;
    a1->__r_.__value_.__r.__words[2] = unk_256452528;
  }
}

uint64_t ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_25086C000;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_25086C000;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ___ZL14sLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  char __p[19];
  char v19;
  __int128 v20;

  v19 = 18;
  strcpy(__p, "baseband.transport");
  ctu::LogServer::create();
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v20;
  v20 = 0uLL;
  v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)v2 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (*((_QWORD *)&v20 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v20 + 1) + 16))(*((_QWORD *)&v20 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
      if ((v19 & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  if (v19 < 0)
LABEL_11:
    operator delete(*(void **)__p);
LABEL_12:
  v9 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_25086C060;
  *(_QWORD *)__p = v9;
  v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_25086C0C8;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = v9;
  *(_QWORD *)&__p[8] = v10;
  v17 = v10;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  ctu::LogServer::addWriter();
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  ctu::LogServer::setEnabled(**(ctu::LogServer ***)(a1 + 32));
  if (*(_QWORD *)&__p[8])
  {
    v15 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
    }
  }
}

void sub_236E36F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_236E36F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_236E36FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000236E52D59)
    return a1 + 24;
  if (((v3 & 0x8000000236E52D59 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000236E52D59))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000236E52D59 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _QWORD v13[2];
  std::locale v14;

  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x23B804E3C](v13, a1);
  if (LOBYTE(v13[0]))
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x23B804E48](v13);
  return a1;
}

void sub_236E371A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x23B804E48](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x236E37184);
}

void sub_236E371EC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[3];

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      memset(__b, 170, sizeof(__b));
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        __b[2] = (void *)(v15 | 0x8000000000000000);
        __b[0] = v13;
      }
      else
      {
        HIBYTE(__b[2]) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (SHIBYTE(__b[2]) >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(__b[2]) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_236E37394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_25086C000;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    v9 = v2;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v3);
    }
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_236E3759C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_236E375B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<BasebandTransportMAV *,std::shared_ptr<BasebandTransportMAV> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportMAV>(BasebandTransportMAV*)::{lambda(BasebandTransportMAV *)#1},std::allocator<BasebandTransportMAV>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandTransportMAV *,std::shared_ptr<BasebandTransportMAV> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportMAV>(BasebandTransportMAV*)::{lambda(BasebandTransportMAV *)#1},std::allocator<BasebandTransportMAV>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<BasebandTransportMAV> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportMAV>(BasebandTransportMAV*)::{lambda(BasebandTransportMAV*)#1}::operator() const(BasebandTransportMAV*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<BasebandTransportMAV *,std::shared_ptr<BasebandTransportMAV> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportMAV>(BasebandTransportMAV*)::{lambda(BasebandTransportMAV *)#1},std::allocator<BasebandTransportMAV>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportMAVEENSt3__11"
                     "0shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportMA"
                                "VEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportMAVEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportMAVEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<BasebandTransportMAV> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportMAV>(BasebandTransportMAV*)::{lambda(BasebandTransportMAV*)#1}::operator() const(BasebandTransportMAV*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<BasebandTransportICE *,std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE *)#1},std::allocator<BasebandTransportICE>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandTransportICE *,std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE *)#1},std::allocator<BasebandTransportICE>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE*)#1}::operator() const(BasebandTransportICE*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<BasebandTransportICE *,std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE *)#1},std::allocator<BasebandTransportICE>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportICEEENSt3__11"
                     "0shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportIC"
                                "EEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE*)#1}::operator() const(BasebandTransportICE*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport*)#1}::operator() const(BasebandTransport*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_"
                                "ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport*)#1}::operator() const(BasebandTransport*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb0_E3__0EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (**v6)(const void *, _OWORD *, uint64_t, uint64_t, uint64_t);
  __int128 v7;
  _OWORD v8[2];
  uint64_t v9;

  v6 = *(void (***)(const void *, _OWORD *, uint64_t, uint64_t, uint64_t))a1;
  v7 = *(_OWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 40);
  v8[0] = *(_OWORD *)(a1 + 8);
  v8[1] = v7;
  v6[2](v6, v8, a3, a4, a5);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  operator delete((void *)a1);
}

void sub_236E3783C(_Unwind_Exception *a1)
{
  const void **v1;

  if (*v1)
    _Block_release(*v1);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(const void **a1)
{
  void *v2;

  (*((void (**)(void))*a1 + 2))();
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  if (*a1)
    _Block_release(*a1);
  operator delete(a1);
}

void sub_236E378B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(_QWORD *)(v1 + 16) = v3;
    operator delete(v3);
  }
  if (*(_QWORD *)v1)
    _Block_release(*(const void **)v1);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__2EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(void *a1)
{
  const void *v2;

  (*(void (**)(void))(*(_QWORD *)a1 + 16))();
  if (*((_BYTE *)a1 + 20))
  {
    v2 = *(const void **)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_6;
    goto LABEL_5;
  }
  free(*((void **)a1 + 1));
  v2 = *(const void **)a1;
  if (*(_QWORD *)a1)
LABEL_5:
    _Block_release(v2);
LABEL_6:
  operator delete(a1);
}

void sub_236E37944(_Unwind_Exception *a1)
{
  const void **v1;

  if (*v1)
    _Block_release(*v1);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_25086C260;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIK17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIK17BasebandTransportEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *BasebandTransportMAV::BasebandTransportMAV(_QWORD *a1, uint64_t *a2, NSObject **a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  dispatch_object_t object;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v4 = (std::__shared_weak_count *)a2[1];
  v13 = *a2;
  v14 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *a3;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  BasebandTransport::BasebandTransport((uint64_t)a1, &v13, &object);
  if (object)
    dispatch_release(object);
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = off_25086C2B8;
  return a1;
}

void sub_236E37BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object)
    dispatch_release(object);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void BasebandTransportMAV::~BasebandTransportMAV(BasebandTransportMAV *this)
{
  void *v1;

  BasebandTransport::~BasebandTransport(this);
  operator delete(v1);
}

uint64_t BasebandTransportMAV::switchDIAG_sync(BasebandTransportMAV *this)
{
  NSObject *v2;
  CommandDriverFactory *v3;
  uint64_t v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  NSObject *v19;
  unint64_t v20;
  void *v21;
  dispatch_time_t v22;
  std::__shared_weak_count *v23;
  dispatch_time_t v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  NSObject *v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  _OWORD v33[3];
  _QWORD v34[5];
  dispatch_group_t group;
  void *v36;
  dispatch_object_t object;
  _QWORD aBlock[5];
  const void *v39;
  dispatch_object_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char v48;

  v45 = 0;
  v46 = &v45;
  v47 = 0x2000000000;
  v48 = 1;
  if (*((_DWORD *)this + 26) != 2)
    goto LABEL_51;
  v2 = dispatch_queue_create("internal diag queue", 0);
  v43 = 0xAAAAAAAAAAAAAAAALL;
  v44 = 0xAAAAAAAAAAAAAAAALL;
  v3 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v4 = off_2564522B0;
  if (!off_2564522B0)
  {
    CommandDriverFactory::create_default_global(v3);
    v5 = v33[0];
    v33[0] = 0uLL;
    v6 = (std::__shared_weak_count *)*(&off_2564522B0 + 1);
    off_2564522B0 = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (*((_QWORD *)&v33[0] + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v33[0] + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v33[0] + 1) + 16))(*((_QWORD *)&v33[0] + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v33[0] + 1));
      }
    }
    v4 = off_2564522B0;
  }
  v11 = (std::__shared_weak_count *)*(&off_2564522B0 + 1);
  v41 = v4;
  v42 = *(&off_2564522B0 + 1);
  if (*(&off_2564522B0 + 1))
  {
    v12 = (unint64_t *)(*(&off_2564522B0 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v14 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN20BasebandTransportMAV15switchDIAG_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_3;
  aBlock[4] = this;
  v15 = _Block_copy(aBlock);
  if (v2)
    dispatch_retain(v2);
  v39 = v15;
  v40 = v2;
  (*(void (**)(unint64_t *__return_ptr, uint64_t, const void **))(*(_QWORD *)v4 + 128))(&v43, v4, &v39);
  if (v40)
    dispatch_release(v40);
  if (v39)
    _Block_release(v39);
  if (v11)
  {
    v16 = (unint64_t *)&v11->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v18 = dispatch_group_create();
  v19 = v18;
  if (v18)
  {
    dispatch_retain(v18);
    dispatch_group_enter(v19);
  }
  v20 = v43;
  v34[0] = v14;
  v34[1] = 1174405120;
  v34[2] = ___ZN20BasebandTransportMAV15switchDIAG_syncEv_block_invoke_4;
  v34[3] = &unk_25086C338;
  group = v19;
  if (v19)
  {
    dispatch_retain(v19);
    dispatch_group_enter(group);
  }
  v34[4] = &v45;
  v21 = _Block_copy(v34);
  if (v2)
    dispatch_retain(v2);
  v36 = v21;
  object = v2;
  (*(void (**)(unint64_t, uint64_t, unint64_t, unint64_t, void **))(*(_QWORD *)v20 + 48))(v20, 1, 0xAAAAAAAA00000004, 0xAAAAAAAAAAAAAAAALL, &v36);
  if (object)
    dispatch_release(object);
  if (v36)
    _Block_release(v36);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (!v19)
  {
    v24 = dispatch_time(0, 6000000000);
    dispatch_group_wait(0, v24);
    v23 = (std::__shared_weak_count *)v44;
    if (!v44)
      goto LABEL_49;
LABEL_45:
    v25 = (unint64_t *)&v23->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    goto LABEL_49;
  }
  dispatch_group_leave(v19);
  dispatch_release(v19);
  v22 = dispatch_time(0, 6000000000);
  dispatch_group_wait(v19, v22);
  dispatch_release(v19);
  v23 = (std::__shared_weak_count *)v44;
  if (v44)
    goto LABEL_45;
LABEL_49:
  if (v2)
    dispatch_release(v2);
LABEL_51:
  v27 = (char *)this + 8;
  v28 = *((_QWORD *)this + 5);
  if (*((_BYTE *)v46 + 24))
  {
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v33[0]) = 0;
      _os_log_impl(&dword_236E0D000, v28, OS_LOG_TYPE_DEFAULT, "#I Switch succeeded", (uint8_t *)v33, 2u);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v27)(v27, 40))
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Switch succeeded", v29);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
LABEL_60:
      MEMORY[0x23B804B24](v33);
    }
  }
  else
  {
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v33[0]) = 0;
      _os_log_error_impl(&dword_236E0D000, v28, OS_LOG_TYPE_ERROR, "Switch failed", (uint8_t *)v33, 2u);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v27)(v27, 80))
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Switch failed", v30);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      goto LABEL_60;
    }
  }
  v31 = *((unsigned __int8 *)v46 + 24);
  _Block_object_dispose(&v45, 8);
  return v31;
}

void sub_236E380B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x23B804B24](&a9);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_236E38104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,dispatch_group_t group,char a22)
{
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;

  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)&a22);
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v23)
  {
    dispatch_group_leave(v23);
    dispatch_release(v23);
    dispatch_release(v23);
  }
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v24 - 112);
  if (v22)
  {
    dispatch_release(v22);
    _Block_object_dispose((const void *)(v24 - 96), 8);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x236E3819CLL);
}

void sub_236E38154(_Unwind_Exception *a1)
{
  NSObject *v1;
  uint64_t v2;

  dispatch::callback<void({block_pointer})(diag::CommandDriver::Event,dispatch::group_session)>::~callback(v2 - 144);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v2 - 128);
  if (v1)
  {
    dispatch_release(v1);
    _Block_object_dispose((const void *)(v2 - 96), 8);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x236E3819CLL);
}

void sub_236E38198(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20BasebandTransportMAV15switchDIAG_syncEv_block_invoke(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t (***v3)(_QWORD, uint64_t);
  NSObject *v4;
  const char *v5;
  uint8_t v6[64];

  if (a2 == 1)
  {
    v2 = *(_QWORD *)(result + 32);
    v3 = (uint64_t (***)(_QWORD, uint64_t))(v2 + 8);
    v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v6 = 0;
      _os_log_debug_impl(&dword_236E0D000, v4, OS_LOG_TYPE_DEBUG, "#D Diag driver is started", v6, 2u);
      result = (**v3)(v3, 20);
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      result = (**v3)(v3, 20);
      if (!(_DWORD)result)
        return result;
    }
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Diag driver is started", v5);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    return MEMORY[0x23B804B24](v6);
  }
  return result;
}

uint64_t dispatch::callback<void({block_pointer})(diag::CommandDriver::Event,dispatch::group_session)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t ___ZN20BasebandTransportMAV15switchDIAG_syncEv_block_invoke_4(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 40);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 40);
    if (v3)
      dispatch_release(v3);
  }
}

uint64_t dispatch::callback<void({block_pointer})(BOOL)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t __cxx_global_var_init_9()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_236E0D000);
  }
  return result;
}

void TraceFile::create(__int128 *a1@<X0>, size_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  void *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v10 = operator new(0x60uLL);
  v11 = v10;
  v12 = (std::__shared_weak_count *)a4[1];
  v19 = *a4;
  v20 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  TraceFile::TraceFile((uint64_t)v10, a1, a2, a3, &v19);
  *a5 = v11;
  v15 = operator new(0x20uLL);
  *v15 = off_25086C390;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = v11;
  a5[1] = v15;
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_236E38574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TraceFile *v9;
  void *v11;

  TraceFile::~TraceFile(v9);
  operator delete(v11);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_236E38594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t TraceFile::TraceFile(uint64_t a1, __int128 *a2, size_t size, int a4, _QWORD *a5)
{
  unsigned int v7;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  ctu::XpcJetsamAssertion *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v26;
  NSObject *v27;
  char *__p;
  std::__shared_weak_count *v29;
  __int128 v30;
  _BYTE buf[22];
  __int16 v32;
  const char *v33;
  __int16 v34;
  int v35;
  uint64_t v36;

  v7 = size;
  v36 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)a1 = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v9;
  }
  *(_QWORD *)(a1 + 40) = *a5;
  *(_QWORD *)(a1 + 32) = 0;
  v10 = a5[1];
  *(_QWORD *)(a1 + 48) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = v7;
  *(_DWORD *)(a1 + 72) = a4;
  *(_QWORD *)(a1 + 88) = 0;
  if ((v7 & (v7 - 1)) != 0)
  {
    v26 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_236E0D000, v26, OS_LOG_TYPE_FAULT, "Capacity must be the power of 2!", buf, 2u);
    }
    v27 = *(NSObject **)(GetOsLogContext() + 8);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ABM ASSERT";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "(!( fCapacity &(fCapacity - 1)))";
      v32 = 2080;
      v33 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandServices/Tr"
            "ace/TraceFile.cpp";
      v34 = 1024;
      v35 = 36;
      _os_log_fault_impl(&dword_236E0D000, v27, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    }
    __break(1u);
  }
  if (v7 >= 0x200000)
  {
    v13 = (ctu::XpcJetsamAssertion *)pthread_mutex_lock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
    if (!(_QWORD)xmmword_256452300)
    {
      ctu::XpcJetsamAssertion::create_default_global(v13);
      v14 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v15 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_256452300 + 1);
      xmmword_256452300 = v14;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_256452300 + 1);
    if (*((_QWORD *)&xmmword_256452300 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&xmmword_256452300 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
    __p = (char *)operator new(0x20uLL);
    strcpy(__p, "Creating large trace file");
    ctu::XpcJetsamAssertion::createActivity();
    v20 = *(std::__shared_weak_count **)(a1 + 88);
    *(_OWORD *)(a1 + 80) = v30;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    operator delete(__p);
    if (v29)
    {
      v23 = (unint64_t *)&v29->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v7 = *(_DWORD *)(a1 + 68);
  }
  *(_QWORD *)(a1 + 32) = malloc_type_zone_malloc(**(malloc_zone_t ***)(a1 + 40), v7, 0xF258B947uLL);
  return a1;
}

void sub_236E38980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;

  pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v19);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v18);
  if (*(char *)(v16 + 31) < 0)
    operator delete(*v17);
  _Unwind_Resume(a1);
}

void TraceFile::~TraceFile(TraceFile *this)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    malloc_zone_free(**((malloc_zone_t ***)this + 5), v2);
    *((_QWORD *)this + 4) = 0;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v6)
    goto LABEL_12;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
  {
LABEL_12:
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(*((void **)this + 1));
    return;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (*((char *)this + 31) < 0)
    goto LABEL_15;
}

uint64_t TraceFile::handleReadData(TraceFile *this, const unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v3;
  const unsigned __int8 *v4;
  int v6;
  int v7;
  int v8;
  int v9;
  int v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;

  v3 = a3;
  v4 = __src;
  v7 = *((_DWORD *)this + 16);
  v6 = *((_DWORD *)this + 17);
  v8 = v6 - v7;
  if (a3 <= v6 - v7)
  {
    v9 = v7 + a3;
  }
  else if ((*((_BYTE *)this + 72) & 1) != 0)
  {
    *((_DWORD *)this + 15) += a3 - v8;
    v9 = v6;
  }
  else
  {
    v9 = *((_DWORD *)this + 17);
    v3 = (v6 - v7);
    if (!v8)
      return (v6 - v7);
  }
  *((_DWORD *)this + 16) = v9;
  v11 = *((_DWORD *)this + 14);
  v12 = v11 & (v6 - 1);
  v13 = (v6 - v12);
  *((_DWORD *)this + 14) = v11 + v3;
  v14 = v3 - v13;
  if (v3 <= v13)
  {
    v14 = v3;
  }
  else
  {
    memcpy((void *)(*((_QWORD *)this + 4) + v12), __src, v13);
    v12 = 0;
    v4 += v13;
  }
  memcpy((void *)(*((_QWORD *)this + 4) + v12), v4, v14);
  return v3;
}

BOOL TraceFile::writeToCompletion(TraceFile *this, int __fd, const unsigned __int8 *__buf, size_t __nbyte)
{
  size_t v6;
  size_t v7;
  ssize_t v8;

  v6 = __nbyte;
  do
  {
    v7 = v6;
    if (!v6)
      break;
    v8 = write(__fd, __buf, v6);
    v6 = v7 - v8;
    __buf += v8;
  }
  while ((v8 & 0x8000000000000000) == 0);
  return v7 == 0;
}

uint64_t TraceFile::writeToFile(uint64_t a1, char **a2)
{
  const char **v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char *v9;
  char *v10;
  size_t v11;
  ssize_t v12;
  unsigned int v13;
  int v14;
  size_t v15;
  char *v16;
  size_t v17;
  ssize_t v18;
  ssize_t v19;
  uint64_t v20;
  char *v21;
  size_t v22;
  ssize_t v23;

  v4 = (const char **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    v5 = open(*v4, 1537, 420);
    if ((v5 & 0x80000000) == 0)
      goto LABEL_3;
    return 0;
  }
  v5 = open((const char *)v4, 1537, 420);
  if (v5 < 0)
    return 0;
LABEL_3:
  v6 = v5;
  v7 = *(_DWORD *)(a1 + 60);
  v8 = *(_DWORD *)(a1 + 68);
  v10 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    v11 = ((_DWORD)v9 - (_DWORD)v10);
    while (v11)
    {
      v12 = write(v6, v10, v11);
      v11 -= v12;
      v10 += v12;
      if (v12 < 0)
      {
LABEL_21:
        v20 = 0;
        goto LABEL_23;
      }
    }
  }
  v13 = (v8 - 1) & v7;
  v14 = v8 - v13;
  v15 = *(unsigned int *)(a1 + 64);
  v16 = (char *)(*(_QWORD *)(a1 + 32) + v13);
  if (v8 - v13 >= v15)
  {
    while (v15)
    {
      v19 = write(v6, v16, v15);
      v15 -= v19;
      v16 += v19;
      if (v19 < 0)
        goto LABEL_21;
    }
  }
  else
  {
    v17 = v8 - v13;
    while (v17)
    {
      v18 = write(v6, v16, v17);
      v17 -= v18;
      v16 += v18;
      if (v18 < 0)
        goto LABEL_21;
    }
    v21 = *(char **)(a1 + 32);
    v22 = (*(_DWORD *)(a1 + 64) - v14);
    while (v22)
    {
      v23 = write(v6, v21, v22);
      v22 -= v23;
      v21 += v23;
      if (v23 < 0)
        goto LABEL_21;
    }
  }
  v20 = 1;
  *(_DWORD *)a1 = 1;
  fsync(v6);
LABEL_23:
  close(v6);
  malloc_zone_free(**(malloc_zone_t ***)(a1 + 40), *(void **)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
  return v20;
}

void std::__shared_ptr_pointer<TraceFile *,std::shared_ptr<TraceFile>::__shared_ptr_default_delete<TraceFile,TraceFile>,std::allocator<TraceFile>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<TraceFile *,std::shared_ptr<TraceFile>::__shared_ptr_default_delete<TraceFile,TraceFile>,std::allocator<TraceFile>>::__on_zero_shared(uint64_t a1)
{
  TraceFile *v1;
  void *v2;

  v1 = *(TraceFile **)(a1 + 24);
  if (v1)
  {
    TraceFile::~TraceFile(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<TraceFile *,std::shared_ptr<TraceFile>::__shared_ptr_default_delete<TraceFile,TraceFile>,std::allocator<TraceFile>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000236E531F9)
    return a1 + 24;
  if (((v3 & 0x8000000236E531F9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000236E531F9))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000236E531F9 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t __cxx_global_var_init_3()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance, &dword_236E0D000);
  }
  return result;
}

void abm::trace::TraceReader::create(uint64_t *a1@<X0>, NSObject **a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, _QWORD *a7@<X8>)
{
  void *v14;
  void *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v21;
  unint64_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  v14 = operator new(0xD8uLL);
  v15 = v14;
  v16 = a1[1];
  v32 = *a1;
  v33 = (std::__shared_weak_count *)v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  abm::trace::TraceReader::TraceReader((uint64_t)v14, &v32, a2, a3, a4, a5, a6);
  *a7 = v15;
  v19 = (std::__shared_weak_count *)operator new(0x20uLL);
  v19->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  v19->__vftable = (std::__shared_weak_count_vtbl *)off_25086C530;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
  a7[1] = v19;
  v21 = (std::__shared_weak_count *)*((_QWORD *)v15 + 10);
  if (v21)
  {
    if (v21->__shared_owners_ != -1)
      goto LABEL_16;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v24 = __ldxr(p_shared_weak_owners);
    while (__stxr(v24 + 1, p_shared_weak_owners));
    *((_QWORD *)v15 + 9) = v15;
    *((_QWORD *)v15 + 10) = v19;
    std::__shared_weak_count::__release_weak(v21);
  }
  else
  {
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    v26 = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    *((_QWORD *)v15 + 9) = v15;
    *((_QWORD *)v15 + 10) = v19;
  }
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (v28)
  {
LABEL_16:
    v29 = v33;
    if (!v33)
      return;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  v29 = v33;
  if (!v33)
    return;
LABEL_17:
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
}

void sub_236E39118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_236E3913C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t abm::trace::TraceReader::TraceReader(uint64_t a1, uint64_t *a2, NSObject **a3, char *__s, uint64_t a5, uint64_t a6, int a7)
{
  size_t v14;
  size_t v15;
  __int128 *p_dst;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  NSObject *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v67[2];
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72[2];
  dispatch_object_t object;
  uint64_t v74;
  std::__shared_weak_count *v75;
  __int128 __dst;
  unint64_t v77;

  *(_QWORD *)a1 = off_25086C4F0;
  v14 = strlen(__s);
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    p_dst = (__int128 *)operator new(v17 + 1);
    *((_QWORD *)&__dst + 1) = v15;
    v77 = v18 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v77) = v14;
  p_dst = &__dst;
  if (v14)
LABEL_8:
    memcpy(p_dst, __s, v15);
  *((_BYTE *)p_dst + v15) = 0;
  ctu::LoggerCommonBase::LoggerCommonBase();
  *(_QWORD *)(a1 + 8) = &unk_25086ACA8;
  *(_QWORD *)(a1 + 56) = *a2;
  v19 = a2[1];
  *(_QWORD *)(a1 + 64) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  if (SHIBYTE(v77) < 0)
    operator delete((void *)__dst);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = off_25086C3E0;
  v22 = (std::__shared_weak_count *)a2[1];
  v74 = *a2;
  v75 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  v25 = *a3;
  object = v25;
  if (v25)
    dispatch_retain(v25);
  BasebandTransport::create((capabilities::radio *)&v74, &object, a1 + 88);
  if (object)
    dispatch_release(object);
  v26 = v75;
  if (v75)
  {
    v27 = (unint64_t *)&v75->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)a2[1];
  v72[0] = *a2;
  v72[1] = (uint64_t)v29;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  TraceFileCollection::create(v72, a5, (uint64_t *)(a1 + 104));
  if (v29)
  {
    v32 = (unint64_t *)&v29->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = a7;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  if (a7 == 2)
  {
    v34 = (std::__shared_weak_count *)a2[1];
    v70 = *a2;
    v71 = v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    TraceFileCollection::create(&v70, a6, (uint64_t *)&__dst);
    v37 = __dst;
    __dst = 0uLL;
    v38 = *(std::__shared_weak_count **)(a1 + 128);
    *(_OWORD *)(a1 + 120) = v37;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
    if (*((_QWORD *)&__dst + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = v71;
    if (v71)
    {
      v45 = (unint64_t *)&v71->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    a7 = *(_DWORD *)(a1 + 168);
  }
  if (a7 == 3)
  {
    v47 = (std::__shared_weak_count *)a2[1];
    v68 = *a2;
    v69 = v47;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    TraceFileCollection::create(&v68, a6, (uint64_t *)&__dst);
    v50 = __dst;
    __dst = 0uLL;
    v51 = *(std::__shared_weak_count **)(a1 + 128);
    *(_OWORD *)(a1 + 120) = v50;
    if (v51)
    {
      v52 = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
    if (*((_QWORD *)&__dst + 1))
    {
      v55 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = v69;
    if (v69)
    {
      v58 = (unint64_t *)&v69->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = *a2;
    v61 = (std::__shared_weak_count *)a2[1];
    v67[0] = v60;
    v67[1] = (uint64_t)v61;
    if (v61)
    {
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    abm::trace::TraceReader::createStreamingInstance((_QWORD *)a1, v67, a3, __s);
    if (v61)
    {
      v64 = (unint64_t *)&v61->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
  }
  return a1;
}

void sub_236E39614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, dispatch_object_t object,char a21)
{
  uint64_t v21;
  const void **v22;
  uint64_t v23;
  uint64_t v24;
  const void *v26;
  std::__shared_weak_count *v27;

  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v24 + 80);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v24 + 64);
  if (*v22)
    _Block_release(*v22);
  if (*(char *)(v21 + 167) < 0)
    operator delete(*(void **)(v21 + 144));
  v26 = *(const void **)(v21 + 136);
  if (v26)
    _Block_release(v26);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](a10);
  v27 = *(std::__shared_weak_count **)(v21 + 80);
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  *(_QWORD *)v21 = off_25086C4F0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  _Unwind_Resume(a1);
}

void sub_236E396E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t abm::trace::TraceReader::createStreamingInstance(_QWORD *a1, uint64_t *a2, NSObject **a3, const char *a4)
{
  unsigned int (***v5)(_QWORD, uint64_t);
  NSObject *v6;
  const char *v7;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t result;
  uint64_t (***v24)(_QWORD, uint64_t);
  NSObject *v25;
  const char *v26;
  _OWORD v27[3];
  dispatch_object_t object;
  uint64_t v29;
  std::__shared_weak_count *v30;

  if (a1[25])
  {
    v5 = (unsigned int (***)(_QWORD, uint64_t))(a1 + 1);
    v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v27[0]) = 0;
      _os_log_error_impl(&dword_236E0D000, v6, OS_LOG_TYPE_ERROR, "Streaming instance exists!", (uint8_t *)v27, 2u);
      if (!(**v5)(v5, 80))
        return 1;
    }
    else if (!(**v5)(v5, 80))
    {
      return 1;
    }
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Streaming instance exists!", v7);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x23B804B24](v27);
    return 1;
  }
  v9 = a2[1];
  v29 = *a2;
  v30 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *a3;
  object = v12;
  if (v12)
    dispatch_retain(v12);
  TraceStreamer::create(&v29, a4, 0, &object, v27);
  v13 = v27[0];
  v27[0] = 0uLL;
  v14 = (std::__shared_weak_count *)a1[26];
  *(_OWORD *)(a1 + 25) = v13;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v27[0] + 1);
  if (*((_QWORD *)&v27[0] + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v27[0] + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (object)
    dispatch_release(object);
  v20 = v30;
  if (!v30)
    goto LABEL_39;
  v21 = (unint64_t *)&v30->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (a1[25])
      return 1;
  }
  else
  {
LABEL_39:
    if (a1[25])
      return 1;
  }
  v24 = (uint64_t (***)(_QWORD, uint64_t))(a1 + 1);
  v25 = a1[5];
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v27[0]) = 0;
    _os_log_error_impl(&dword_236E0D000, v25, OS_LOG_TYPE_ERROR, "Failed to create streaming instance", (uint8_t *)v27, 2u);
    result = (**v24)(v24, 80);
    if ((_DWORD)result)
      goto LABEL_32;
  }
  else
  {
    result = (**v24)(v24, 80);
    if ((_DWORD)result)
    {
LABEL_32:
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Failed to create streaming instance", v26, *(_QWORD *)&v27[0]);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x23B804B24](v27);
      return 0;
    }
  }
  return result;
}

void abm::trace::TraceReader::~TraceReader(void **this)
{
  BasebandTransport *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const void *v19;
  const void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  uint8_t v31[64];

  *this = off_25086C3E0;
  abm::trace::TraceReader::clearFiles((abm::trace::TraceReader *)this, 0, 1);
  v3 = this + 11;
  v2 = (BasebandTransport *)this[11];
  if (!v2)
    goto LABEL_12;
  BasebandTransport::close(v2);
  v4 = (std::__shared_weak_count *)this[12];
  this[11] = 0;
  this[12] = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    v7 = (std::__shared_weak_count *)this[12];
    *v3 = 0;
    this[12] = 0;
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
LABEL_12:
    v10 = this[25];
    if (!v10)
      goto LABEL_18;
    goto LABEL_13;
  }
  *v3 = 0;
  this[12] = 0;
  v10 = this[25];
  if (!v10)
    goto LABEL_18;
LABEL_13:
  (*(void (**)(void *))(*(_QWORD *)v10 + 56))(v10);
  v11 = this[5];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v31 = 0;
    _os_log_impl(&dword_236E0D000, v11, OS_LOG_TYPE_DEFAULT, "#I Successfully stopped trace streamer!", v31, 2u);
  }
  if ((*(unsigned int (**)(char *, uint64_t))this[1])((char *)this + 8, 40))
  {
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Successfully stopped trace streamer!", v12);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x23B804B24](v31);
  }
LABEL_18:
  v13 = (std::__shared_weak_count *)this[26];
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)this[24];
  if (!v16)
    goto LABEL_27;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_27:
    v19 = this[22];
    if (!v19)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  v19 = this[22];
  if (v19)
LABEL_28:
    _Block_release(v19);
LABEL_29:
  if ((*((char *)this + 167) & 0x80000000) == 0)
  {
    v20 = this[17];
    if (!v20)
      goto LABEL_34;
    goto LABEL_33;
  }
  operator delete(this[18]);
  v20 = this[17];
  if (v20)
LABEL_33:
    _Block_release(v20);
LABEL_34:
  v21 = (std::__shared_weak_count *)this[16];
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)this[14];
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)this[12];
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)this[10];
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  *this = off_25086C4F0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
}

{
  void *v1;

  abm::trace::TraceReader::~TraceReader(this);
  operator delete(v1);
}

void abm::trace::TraceReader::clearFiles(abm::trace::TraceReader *this, char a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  size_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void *__p[2];
  unint64_t v35;
  void *__dst[2];
  unint64_t v37;

  v6 = (_QWORD *)((char *)this + 104);
  v7 = *((_QWORD *)this + 13);
  if (!v7)
    goto LABEL_25;
  v8 = abm::trace::kTrashFolder[0];
  v9 = strlen(abm::trace::kTrashFolder[0]);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v11 = (void **)operator new(v12 + 1);
    __dst[1] = v10;
    v37 = v13 | 0x8000000000000000;
    __dst[0] = v11;
  }
  else
  {
    HIBYTE(v37) = v9;
    v11 = __dst;
    if (!v9)
      goto LABEL_10;
  }
  memmove(v11, v8, (size_t)v10);
LABEL_10:
  *((_BYTE *)v10 + (_QWORD)v11) = 0;
  TraceFileCollection::clear(v7, (uint64_t)__dst, a2);
  if (SHIBYTE(v37) < 0)
  {
    operator delete(__dst[0]);
    if (!a3)
      goto LABEL_25;
  }
  else if (!a3)
  {
    goto LABEL_25;
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
    *v6 = 0;
    v6[1] = 0;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    *v6 = 0;
    v6[1] = 0;
  }
LABEL_25:
  v21 = (_QWORD *)((char *)this + 120);
  v20 = *((_QWORD *)this + 15);
  if (!v20)
    return;
  v22 = abm::trace::kTrashFolder[0];
  v23 = strlen(abm::trace::kTrashFolder[0]);
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v24 = (void *)v23;
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    v25 = operator new(v26 + 1);
    __p[1] = v24;
    v35 = v27 | 0x8000000000000000;
    __p[0] = v25;
    goto LABEL_33;
  }
  HIBYTE(v35) = v23;
  v25 = __p;
  if (v23)
LABEL_33:
    memmove(v25, v22, (size_t)v24);
  *((_BYTE *)v24 + (_QWORD)v25) = 0;
  TraceFileCollection::clear(v20, (uint64_t)__p, a2);
  if (SHIBYTE(v35) < 0)
  {
    operator delete(__p[0]);
    if (!a3)
      return;
  }
  else if (!a3)
  {
    return;
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  if (!v28)
  {
    *v21 = 0;
    *((_QWORD *)this + 16) = 0;
    return;
  }
  v29 = (unint64_t *)&v28->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (v30)
  {
    v31 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    *v21 = 0;
    *((_QWORD *)this + 16) = 0;
    if (!v31)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    v31 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    *v21 = 0;
    *((_QWORD *)this + 16) = 0;
    if (!v31)
      return;
  }
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
}

void sub_236E39FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t abm::trace::TraceReader::start(uint64_t a1, unsigned int *a2, int a3, const void **a4)
{
  uint64_t v5;
  unsigned int (***v6)(_QWORD, uint64_t);
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  unsigned int (***v10)(_QWORD, uint64_t);
  NSObject *v11;
  const char *v12;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  void *v22;
  unsigned int (***v23)(_QWORD, uint64_t);
  NSObject *v24;
  const char *v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  __int128 v41;
  void *v42;
  uint64_t v43;
  void *v44;
  NSObject *v45;
  const char *v46;
  _BYTE *v47;
  unsigned int (***v48)(_QWORD, uint64_t);
  NSObject *v49;
  const char *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint8_t *v58;
  void *v59;
  void *v60;
  _OWORD v61[2];
  uint64_t v62;
  _QWORD v63[6];
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  void *v67;
  _QWORD v68[5];
  _QWORD aBlock[5];
  uint8_t buf[16];
  char v71;
  _BYTE v72[12];
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
  {
    v10 = (unsigned int (***)(_QWORD, uint64_t))(a1 + 8);
    v11 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_236E0D000, v11, OS_LOG_TYPE_ERROR, "Transport is not ready!", buf, 2u);
    }
    if (!(**v10)(v10, 80))
      return 0;
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Transport is not ready!", v12);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
LABEL_23:
    MEMORY[0x23B804B24](buf);
    return 0;
  }
  if (*(_DWORD *)(v5 + 328) == 1)
  {
    v6 = (unsigned int (***)(_QWORD, uint64_t))(a1 + 8);
    v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_236E0D000, v7, OS_LOG_TYPE_DEFAULT, "#I Transport is opened already", buf, 2u);
    }
    if ((**v6)(v6, 40))
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Transport is opened already", v8);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x23B804B24](buf);
    }
    return 1;
  }
  v16 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3abm5trace11TraceReader5startERKN17BasebandTransport10ParametersENSt3__16chrono8durationIxNS6_5ratioILl1ELl1EEEEEN8dispatch5blockIU13block_pointerFvNS2_6StatusEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_4;
  aBlock[4] = a1;
  v17 = _Block_copy(aBlock);
  v18 = *(const void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v17;
  if (v18)
    _Block_release(v18);
  v19 = *(_QWORD *)(a1 + 200);
  if (v19 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 48))(v19) & 1) == 0)
  {
    v23 = (unsigned int (***)(_QWORD, uint64_t))(a1 + 8);
    v24 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_236E0D000, v24, OS_LOG_TYPE_ERROR, "Failed to start trace streamer; either socket connection is alive or TCP stack is abnormal",
        buf,
        2u);
    }
    if (!(**v23)(v23, 80))
      return 0;
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Failed to start trace streamer; either socket connection is alive or TCP stack is abnormal",
      v25);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    goto LABEL_23;
  }
  if ((*(_DWORD *)(a1 + 168) - 1) <= 2)
  {
    v68[0] = v16;
    v68[1] = 0x40000000;
    v68[2] = ___ZN3abm5trace11TraceReader5startERKN17BasebandTransport10ParametersENSt3__16chrono8durationIxNS6_5ratioILl1ELl1EEEEEN8dispatch5blockIU13block_pointerFvNS2_6StatusEEEE_block_invoke_9;
    v68[3] = &__block_descriptor_tmp_13;
    v68[4] = a1;
    v20 = _Block_copy(v68);
    v21 = v20;
    if (v20)
      v22 = _Block_copy(v20);
    else
      v22 = 0;
    v67 = v22;
    support::parsers::acp::ParserEngine::create((const void **)&v67, 1, (uint64_t *)buf);
    v26 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v27 = *(std::__shared_weak_count **)(a1 + 192);
    *(_OWORD *)(a1 + 184) = v26;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v31 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if (v67)
      _Block_release(v67);
    if (*(_QWORD *)(a1 + 184))
    {
      if (v21)
        _Block_release(v21);
      goto LABEL_41;
    }
    v48 = (unsigned int (***)(_QWORD, uint64_t))(a1 + 8);
    v49 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_236E0D000, v49, OS_LOG_TYPE_ERROR, "Failed to create packetParserEngine", buf, 2u);
    }
    if ((**v48)(v48, 80))
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Failed to create packetParserEngine", v50);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x23B804B24](buf);
    }
    if (v21)
      _Block_release(v21);
    return 0;
  }
LABEL_41:
  v34 = *(_QWORD *)(a1 + 72);
  v33 = *(std::__shared_weak_count **)(a1 + 80);
  v65 = v34;
  if (!v33 || (v35 = std::__shared_weak_count::lock(v33), (v66 = v35) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v63[0] = v16;
  v63[1] = 1174405120;
  v63[2] = ___ZN3abm5trace11TraceReader5startERKN17BasebandTransport10ParametersENSt3__16chrono8durationIxNS6_5ratioILl1ELl1EEEEEN8dispatch5blockIU13block_pointerFvNS2_6StatusEEEE_block_invoke_15;
  v63[3] = &__block_descriptor_tmp_18_0;
  v63[4] = a1;
  v63[5] = v34;
  v64 = v35;
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
  v38 = _Block_copy(v63);
  v39 = v38;
  v40 = *(_QWORD *)(a1 + 88);
  v41 = *((_OWORD *)a2 + 1);
  v61[0] = *(_OWORD *)a2;
  v61[1] = v41;
  v62 = *((_QWORD *)a2 + 4);
  if (v38)
    v42 = _Block_copy(v38);
  else
    v42 = 0;
  v60 = v42;
  v9 = (*(uint64_t (**)(uint64_t, _OWORD *, void **))(*(_QWORD *)v40 + 48))(v40, v61, &v60);
  if (v60)
    _Block_release(v60);
  if ((v9 & 1) != 0)
  {
    v43 = *(_QWORD *)(a1 + 88);
    if (*a4)
    {
      v44 = _Block_copy(*a4);
      v59 = v44;
      BasebandTransport::reportStatus(v43, a3, &v59);
      if (v44)
        _Block_release(v44);
    }
    else
    {
      v59 = 0;
      BasebandTransport::reportStatus(v43, a3, &v59);
    }
  }
  else
  {
    v45 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      BasebandTransport::asString(*a2, (char *)buf);
      v58 = v71 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v72 = 136315138;
      *(_QWORD *)&v72[4] = v58;
      _os_log_error_impl(&dword_236E0D000, v45, OS_LOG_TYPE_ERROR, "Failed to open %s transport channel", v72, 0xCu);
      if (v71 < 0)
        operator delete(*(void **)buf);
    }
    if ((**(unsigned int (***)(uint64_t, uint64_t))(a1 + 8))(a1 + 8, 80))
    {
      BasebandTransport::asString(*a2, v72);
      v47 = v73 >= 0 ? v72 : *(_BYTE **)v72;
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Failed to open %s transport channel", v46, v47);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x23B804B24](buf);
      if (v73 < 0)
        operator delete(*(void **)v72);
    }
  }
  if (v39)
    _Block_release(v39);
  v51 = v64;
  if (v64)
  {
    v52 = (unint64_t *)&v64->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v66;
  if (v66)
  {
    v55 = (unint64_t *)&v66->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  return v9;
}

void ___ZN3abm5trace11TraceReader5startERKN17BasebandTransport10ParametersENSt3__16chrono8durationIxNS6_5ratioILl1ELl1EEEEEN8dispatch5blockIU13block_pointerFvNS2_6StatusEEEE_block_invoke(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  int v18;
  unsigned int (***v19)(_QWORD, uint64_t);
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t v29;
  int v30;
  uint64_t *p_block;
  uint64_t block;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t **v36;
  uint64_t **v37;
  _BYTE buf[24];
  void *v39;
  _QWORD *v40;
  uint64_t **p_p_block;
  uint64_t v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *a2;
  if (*a2)
  {
    v27 = 0;
    v28 = &v27;
    v29 = 0x2000000000;
    v30 = 0;
    v9 = MEMORY[0x24BDAC760];
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZN19TraceFileCollection14handleReadDataEPKhj_block_invoke;
    v39 = &unk_25086CDC0;
    v43 = a4;
    v40 = &v27;
    p_p_block = (uint64_t **)v7;
    v42 = a3;
    p_block = (uint64_t *)buf;
    block = MEMORY[0x24BDAC760];
    v33 = 0x40000000;
    v34 = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    v35 = &__block_descriptor_tmp_52;
    v36 = (uint64_t **)(v7 + 72);
    v37 = &p_block;
    v10 = *(NSObject **)(v7 + 88);
    if (*(_QWORD *)(v7 + 96))
      dispatch_async_and_wait(v10, &block);
    else
      dispatch_sync(v10, &block);
    v14 = *((unsigned int *)v28 + 6);
    _Block_object_dispose(&v27, 8);
    v15 = *a2;
    v27 = 0;
    v28 = &v27;
    v29 = 0x2000000000;
    v30 = 0;
    v33 = 0x40000000;
    v34 = ___ZNK19TraceFileCollection20getInMemoryRemainingEv_block_invoke;
    v35 = &unk_25086CE70;
    v36 = &v27;
    v37 = (uint64_t **)v15;
    p_block = &block;
    block = v9;
    *(_QWORD *)buf = v9;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    v39 = &__block_descriptor_tmp_52;
    v40 = (_QWORD *)(v15 + 72);
    p_p_block = &p_block;
    v16 = *(NSObject **)(v15 + 88);
    if (*(_QWORD *)(v15 + 96))
    {
      dispatch_async_and_wait(v16, buf);
      v17 = *((_DWORD *)v28 + 6);
      _Block_object_dispose(&v27, 8);
      if (v17)
        goto LABEL_22;
    }
    else
    {
      dispatch_sync(v16, buf);
      v18 = *((_DWORD *)v28 + 6);
      _Block_object_dispose(&v27, 8);
      if (v18)
        goto LABEL_22;
    }
    v19 = (unsigned int (***)(_QWORD, uint64_t))(v6 + 8);
    v20 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_236E0D000, v20, OS_LOG_TYPE_DEBUG, "#D Archiving", buf, 2u);
    }
    if ((**v19)(v19, 20))
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Archiving", v21);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x23B804B24](buf);
    }
    v22 = *a2;
    v23 = *a2 + 72;
    block = v9;
    v33 = 0x40000000;
    v34 = ___ZN19TraceFileCollection7archiveEb_block_invoke;
    v35 = &__block_descriptor_tmp_7;
    v36 = (uint64_t **)v22;
    LOBYTE(v37) = 1;
    v27 = &block;
    *(_QWORD *)buf = v9;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    v39 = &__block_descriptor_tmp_52;
    v40 = (_QWORD *)v23;
    p_p_block = &v27;
    v24 = *(NSObject **)(v22 + 88);
    if (!*(_QWORD *)(v22 + 96))
    {
      dispatch_sync(v24, buf);
      if (!(_DWORD)v14)
        return;
LABEL_23:
      if (a4 > v14)
      {
        v25 = *a2;
        v27 = 0;
        v28 = &v27;
        v29 = 0x2000000000;
        v30 = 0;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZN19TraceFileCollection14handleReadDataEPKhj_block_invoke;
        v39 = &unk_25086CDC0;
        v43 = a4 - v14;
        v40 = &v27;
        p_p_block = (uint64_t **)v25;
        v42 = a3 + v14;
        p_block = (uint64_t *)buf;
        block = v9;
        v33 = 0x40000000;
        v34 = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
        v35 = &__block_descriptor_tmp_52;
        v36 = (uint64_t **)(v25 + 72);
        v37 = &p_block;
        *(_QWORD *)buf = v9;
        v26 = *(NSObject **)(v25 + 88);
        if (*(_QWORD *)(v25 + 96))
          dispatch_async_and_wait(v26, &block);
        else
          dispatch_sync(v26, &block);
        _Block_object_dispose(&v27, 8);
      }
      return;
    }
    dispatch_async_and_wait(v24, buf);
LABEL_22:
    if (!(_DWORD)v14)
      return;
    goto LABEL_23;
  }
  v11 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "null";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a4;
    _os_log_error_impl(&dword_236E0D000, v11, OS_LOG_TYPE_ERROR, "File collection (%s) is not ready. Dropping received TRACE chunk size %u", buf, 0x12u);
  }
  if ((**(unsigned int (***)(uint64_t, uint64_t))(v6 + 8))(v6 + 8, 80))
  {
    if (*a2)
      v13 = "not null";
    else
      v13 = "null";
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"File collection (%s) is not ready. Dropping received TRACE chunk size %u", v12, v13, a4);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x23B804B24](buf);
  }
}

void ___ZN3abm5trace11TraceReader5startERKN17BasebandTransport10ParametersENSt3__16chrono8durationIxNS6_5ratioILl1ELl1EEEEEN8dispatch5blockIU13block_pointerFvNS2_6StatusEEEE_block_invoke_9(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const UInt8 *BytePtr;
  CFIndex Length;
  unsigned int (***v6)(uint64_t, uint64_t);
  NSObject *v7;
  const char *v8;
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  NSObject *v30;
  const char *v31;
  uint8_t buf[8];
  std::__shared_weak_count *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  BytePtr = CFDataGetBytePtr(*(CFDataRef *)(*(_QWORD *)a2 + 8));
  Length = CFDataGetLength(*(CFDataRef *)(*(_QWORD *)a2 + 8));
  v6 = (unsigned int (***)(uint64_t, uint64_t))(v3 + 8);
  v7 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = Length;
    _os_log_debug_impl(&dword_236E0D000, v7, OS_LOG_TYPE_DEBUG, "#D Writing Superframe of size %u bytes", buf, 8u);
  }
  if ((**v6)(v3 + 8, 20))
  {
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Writing Superframe of size %u bytes", v8, Length);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x23B804B24](buf);
  }
  v9 = *(_DWORD *)(v3 + 168);
  switch(v9)
  {
    case 3:
      v17 = *(_QWORD *)(v3 + 176);
      v18 = *(std::__shared_weak_count **)(v3 + 128);
      *(_QWORD *)buf = *(_QWORD *)(v3 + 120);
      v33 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint8_t *, const UInt8 *, CFIndex))(v17 + 16))(v17, buf, BytePtr, Length);
      v21 = v33;
      if (!v33)
        goto LABEL_22;
      v22 = (unint64_t *)&v33->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        v24 = *(_QWORD *)(v3 + 200);
        if (v24)
          goto LABEL_23;
      }
      else
      {
LABEL_22:
        v24 = *(_QWORD *)(v3 + 200);
        if (v24)
        {
LABEL_23:
          (*(void (**)(uint64_t, const UInt8 *, CFIndex))(*(_QWORD *)v24 + 64))(v24, BytePtr, Length);
          return;
        }
      }
      v30 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_236E0D000, v30, OS_LOG_TYPE_ERROR, "streamer object gone!", buf, 2u);
      }
      if ((**v6)(v3 + 8, 80))
      {
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"streamer object gone!", v31);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        MEMORY[0x23B804B24](buf);
      }
      return;
    case 2:
      v25 = *(_QWORD *)(v3 + 176);
      v26 = *(std::__shared_weak_count **)(v3 + 128);
      *(_QWORD *)buf = *(_QWORD *)(v3 + 120);
      v33 = v26;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      (*(void (**)(uint64_t, uint8_t *, const UInt8 *, CFIndex))(v25 + 16))(v25, buf, BytePtr, Length);
      v14 = v33;
      if (v33)
      {
        v29 = (unint64_t *)&v33->__shared_owners_;
        do
          v16 = __ldaxr(v29);
        while (__stlxr(v16 - 1, v29));
        goto LABEL_30;
      }
      break;
    case 1:
      v10 = *(_QWORD *)(v3 + 176);
      v11 = *(std::__shared_weak_count **)(v3 + 112);
      *(_QWORD *)buf = *(_QWORD *)(v3 + 104);
      v33 = v11;
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      (*(void (**)(uint64_t, uint8_t *, const UInt8 *, CFIndex))(v10 + 16))(v10, buf, BytePtr, Length);
      v14 = v33;
      if (v33)
      {
        v15 = (unint64_t *)&v33->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
LABEL_30:
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      break;
  }
}

void ___ZN3abm5trace11TraceReader5startERKN17BasebandTransport10ParametersENSt3__16chrono8durationIxNS6_5ratioILl1ELl1EEEEEN8dispatch5blockIU13block_pointerFvNS2_6StatusEEEE_block_invoke_15(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  NSObject *v23;
  _QWORD v24[2];
  int v25;
  uint64_t block;
  uint64_t v27;
  void (*v28)(uint64_t);
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(NSObject **)(v5 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(block) = 67109120;
    HIDWORD(block) = a3;
    _os_log_debug_impl(&dword_236E0D000, v6, OS_LOG_TYPE_DEBUG, "#D Received TRACE chunk size %u", (uint8_t *)&block, 8u);
  }
  if ((**(unsigned int (***)(uint64_t, uint64_t))(v5 + 8))(v5 + 8, 20))
  {
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Received TRACE chunk size %u", v7, a3);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x23B804B24](&block);
  }
  v8 = *(_DWORD *)(v5 + 168);
  if ((v8 - 2) < 2)
  {
    v16 = *(_QWORD *)(v5 + 176);
    v17 = *(_QWORD *)(v5 + 112);
    block = *(_QWORD *)(v5 + 104);
    v27 = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v16 + 16))(v16, &block, a2, a3);
    v20 = (std::__shared_weak_count *)v27;
    if (v27)
    {
      v21 = (unint64_t *)(v27 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    goto LABEL_24;
  }
  if (v8 == 1)
  {
LABEL_24:
    v24[0] = *(_QWORD *)(v5 + 184);
    v24[1] = a2;
    v25 = a3;
    block = MEMORY[0x24BDAC760];
    v27 = 0x40000000;
    v28 = ___ZNK3ctu20SharedSynchronizableIN7support7parsers3acp12ParserEngineEE20execute_wrapped_syncIZNS4_7addDataEPhjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    v29 = &__block_descriptor_tmp_1;
    v30 = v24[0] + 8;
    v31 = v24;
    v23 = *(NSObject **)(v24[0] + 24);
    if (*(_QWORD *)(v24[0] + 32))
      dispatch_async_and_wait(v23, &block);
    else
      dispatch_sync(v23, &block);
    return;
  }
  if (!v8)
  {
    v9 = *(_QWORD *)(v5 + 176);
    v10 = *(_QWORD *)(v5 + 112);
    block = *(_QWORD *)(v5 + 104);
    v27 = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v9 + 16))(v9, &block, a2, a3);
    v13 = (std::__shared_weak_count *)v27;
    if (v27)
    {
      v14 = (unint64_t *)(v27 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_236E3B28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_236E3B2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c51_ZTSNSt3__110shared_ptrIN3abm5trace11TraceReaderEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c51_ZTSNSt3__110shared_ptrIN3abm5trace11TraceReaderEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t abm::trace::TraceReader::stop(abm::trace::TraceReader *this)
{
  BasebandTransport *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char *v6;
  NSObject *v7;
  const char *v8;
  const char *v10;
  uint8_t v11[64];

  v2 = (BasebandTransport *)*((_QWORD *)this + 11);
  if (v2)
  {
    v3 = BasebandTransport::close(v2);
    v4 = *((_QWORD *)this + 25);
    if (!v4)
      return v3;
  }
  else
  {
    v3 = 1;
    v4 = *((_QWORD *)this + 25);
    if (!v4)
      return v3;
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  v6 = (char *)this + 8;
  v7 = *((_QWORD *)this + 5);
  if ((v5 & 1) != 0)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_236E0D000, v7, OS_LOG_TYPE_DEFAULT, "#I Successfully stopped trace streamer", v11, 2u);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v6)(v6, 40))
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Successfully stopped trace streamer", v8);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x23B804B24](v11);
      return v3;
    }
    return v3;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v11 = 0;
    _os_log_error_impl(&dword_236E0D000, v7, OS_LOG_TYPE_ERROR, "Failed to stop trace streamer", v11, 2u);
    if (!(**(unsigned int (***)(char *, uint64_t))v6)(v6, 80))
      return 0;
    goto LABEL_13;
  }
  if ((**(unsigned int (***)(char *, uint64_t))v6)(v6, 80))
  {
LABEL_13:
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Failed to stop trace streamer", v10);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x23B804B24](v11);
  }
  return 0;
}

uint64_t abm::trace::TraceReader::snapshot(uint64_t a1, const __CFDictionary **a2, unsigned int a3, uint64_t *a4, uint64_t *a5)
{
  const void *v8;
  size_t v9;
  std::string::size_type v10;
  std::string *p_dst;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const void *v15;
  size_t v16;
  std::string::size_type v17;
  std::string *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  const void *v22;
  size_t v23;
  std::string::size_type v24;
  std::string *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  size_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  char *v36;
  size_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  const std::string::value_type *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  __int128 v52;
  int v53;
  int v54;
  size_t size;
  unint64_t v56;
  std::string *v57;
  int v58;
  size_t v59;
  unint64_t v60;
  std::string *v61;
  uint64_t v62;
  uint64_t v63;
  std::string *v64;
  uint64_t v65;
  uint64_t v66;
  std::string *v67;
  const char *v68;
  const char *v69;
  const void *v70;
  const void *v71;
  capabilities::radio *v72;
  unsigned int (***v73)(_QWORD, uint64_t);
  NSObject *v74;
  std::string *v75;
  uint64_t *v76;
  __int128 v77;
  void **v78;
  std::string::size_type v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  void *v84;
  size_t v85;
  void **v86;
  const void **v87;
  const char *v88;
  const void **v89;
  unsigned int (***v91)(_QWORD, uint64_t);
  NSObject *v92;
  const char *v93;
  unsigned int (***v94)(_QWORD, uint64_t);
  NSObject *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int (***v99)(_QWORD, uint64_t);
  NSObject *v100;
  const char *v101;
  unsigned int (***v102)(_QWORD, uint64_t);
  NSObject *v103;
  void **v104;
  const char *v105;
  void **v106;
  NSObject *v107;
  std::string *v108;
  const char *v109;
  std::string *v110;
  uint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *p_shared_owners;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  NSObject *v124;
  const char *v125;
  unsigned int v127;
  uint64_t v128[2];
  uint64_t v129[2];
  std::string v130;
  std::string v131;
  __int128 v132;
  std::string v133;
  std::string v134;
  std::string v135;
  __int128 v136;
  std::string v137;
  std::string v138;
  std::string v139;
  __int128 v140;
  __int128 v141;
  void *__p[4];
  void *v143[3];
  std::string v144;
  std::string v145;
  const void *__s1[3];
  void *v147[3];
  void *v148[3];
  _QWORD v149[2];
  std::string __dst;
  void *v151;
  uint64_t v152;
  char v153;
  uint64_t v154;

  v154 = *MEMORY[0x24BDAC8D0];
  v149[0] = 0xAAAAAAAAAAAAAAAALL;
  v149[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v149, *a2);
  memset(v148, 170, sizeof(v148));
  v8 = (const void *)*MEMORY[0x24BE04FF0];
  v9 = strlen((const char *)*MEMORY[0x24BE04FF0]);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = v9;
  v127 = a3;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v10;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v9;
  p_dst = &__dst;
  if (v9)
LABEL_8:
    memmove(p_dst, v8, v10);
  v14 = (const char *)*MEMORY[0x24BE05090];
  p_dst->__r_.__value_.__s.__data_[v10] = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v140, v14);
  ctu::cf::map_adapter::getString();
  MEMORY[0x23B804B84](&v140);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  memset(v147, 170, sizeof(v147));
  v15 = (const void *)*MEMORY[0x24BE05758];
  v16 = strlen((const char *)*MEMORY[0x24BE05758]);
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v17 = v16;
  if (v16 >= 0x17)
  {
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    v18 = (std::string *)operator new(v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v17;
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    goto LABEL_18;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v16;
  v18 = &__dst;
  if (v16)
LABEL_18:
    memmove(v18, v15, v17);
  v21 = (const char *)*MEMORY[0x24BE04F40];
  v18->__r_.__value_.__s.__data_[v17] = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v140, v21);
  ctu::cf::map_adapter::getString();
  MEMORY[0x23B804B84](&v140);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  memset(__s1, 170, sizeof(__s1));
  v22 = (const void *)*MEMORY[0x24BE05280];
  v23 = strlen((const char *)*MEMORY[0x24BE05280]);
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v24 = v23;
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    v25 = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = v24;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    goto LABEL_28;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v23;
  v25 = &__dst;
  if (v23)
LABEL_28:
    memmove(v25, v22, v24);
  v28 = (const char *)*MEMORY[0x24BE051A8];
  v25->__r_.__value_.__s.__data_[v24] = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v140, v28);
  ctu::cf::map_adapter::getString();
  MEMORY[0x23B804B84](&v140);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  memset(&v145, 170, sizeof(v145));
  v29 = abm::trace::kSnapshotFolder;
  v30 = strlen(abm::trace::kSnapshotFolder);
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v31 = (void *)v30;
  if (v30 >= 0x17)
  {
    v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v33 = v30 | 7;
    v34 = v33 + 1;
    v32 = operator new(v33 + 1);
    v143[1] = v31;
    v143[2] = (void *)(v34 | 0x8000000000000000);
    v143[0] = v32;
    goto LABEL_38;
  }
  HIBYTE(v143[2]) = v30;
  v32 = v143;
  if (v30)
LABEL_38:
    memmove(v32, v29, (size_t)v31);
  v35 = (const char *)*MEMORY[0x24BE05268];
  *((_BYTE *)v31 + (_QWORD)v32) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, v35);
  ctu::cf::map_adapter::getString();
  MEMORY[0x23B804B84](__p);
  v36 = abm::trace::kLogDirPrefix;
  v37 = strlen(abm::trace::kLogDirPrefix);
  if (v37 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v38 = (void *)v37;
  if (v37 >= 0x17)
  {
    v40 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v40 = v37 | 7;
    v41 = v40 + 1;
    v39 = operator new(v40 + 1);
    __p[1] = v38;
    __p[2] = (void *)(v41 | 0x8000000000000000);
    __p[0] = v39;
    goto LABEL_46;
  }
  HIBYTE(__p[2]) = v37;
  v39 = __p;
  if (v37)
LABEL_46:
    memmove(v39, v36, (size_t)v38);
  *((_BYTE *)v38 + (_QWORD)v39) = 0;
  if (SHIBYTE(__p[2]) >= 0)
    v42 = __p;
  else
    v42 = (void **)__p[0];
  if (SHIBYTE(__p[2]) >= 0)
    v43 = HIBYTE(__p[2]);
  else
    v43 = (std::string::size_type)__p[1];
  v44 = std::string::append(&v144, (const std::string::value_type *)v42, v43);
  v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  *(_QWORD *)&v141 = *((_QWORD *)&v44->__r_.__value_.__l + 2);
  v140 = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v148[2]) >= 0)
    v46 = (const std::string::value_type *)v148;
  else
    v46 = (const std::string::value_type *)v148[0];
  if (SHIBYTE(v148[2]) >= 0)
    v47 = HIBYTE(v148[2]);
  else
    v47 = (std::string::size_type)v148[1];
  v48 = std::string::append((std::string *)&v140, v46, v47);
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  v50 = std::string::append(&__dst, abm::trace::kICETraceSnapshotDirectorySuffix);
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v145.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SBYTE7(v141) & 0x80000000) == 0)
    {
LABEL_61:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_62;
      goto LABEL_82;
    }
  }
  else if ((SBYTE7(v141) & 0x80000000) == 0)
  {
    goto LABEL_61;
  }
  operator delete((void *)v140);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
LABEL_62:
    if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_63;
LABEL_83:
    operator delete(v144.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v143[2]) & 0x80000000) == 0)
      goto LABEL_64;
    goto LABEL_84;
  }
LABEL_82:
  operator delete(__p[0]);
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_83;
LABEL_63:
  if ((SHIBYTE(v143[2]) & 0x80000000) == 0)
    goto LABEL_64;
LABEL_84:
  operator delete(v143[0]);
LABEL_64:
  *(_QWORD *)&v52 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v52 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v140 = v52;
  v141 = v52;
  LOBYTE(v140) = 0;
  BYTE8(v141) = 0;
  v53 = *(_DWORD *)(a1 + 168);
  if ((v53 - 2) < 2)
  {
    v54 = SHIBYTE(v145.__r_.__value_.__r.__words[2]);
    if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v145.__r_.__value_.__r.__words[2]);
    else
      size = v145.__r_.__value_.__l.__size_;
    v56 = size + 5;
    memset(&__dst, 170, sizeof(__dst));
    if (size + 5 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v56 >= 0x17)
    {
      v62 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v56 | 7) != 0x17)
        v62 = v56 | 7;
      v63 = v62 + 1;
      v57 = (std::string *)operator new(v62 + 1);
      __dst.__r_.__value_.__l.__size_ = size + 5;
      __dst.__r_.__value_.__r.__words[2] = v63 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      v57 = &__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size + 5;
      if (!size)
      {
LABEL_92:
        strcpy((char *)v57 + size, "-live");
        v140 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        *(_QWORD *)&v141 = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
        BYTE8(v141) = 1;
        goto LABEL_103;
      }
    }
    if (v54 >= 0)
      v64 = &v145;
    else
      v64 = (std::string *)v145.__r_.__value_.__r.__words[0];
    memmove(v57, v64, size);
    goto LABEL_92;
  }
  if (v53 != 1)
    goto LABEL_103;
  v58 = SHIBYTE(v145.__r_.__value_.__r.__words[2]);
  if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v59 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
  else
    v59 = v145.__r_.__value_.__l.__size_;
  v60 = v59 + 5;
  memset(&__dst, 170, sizeof(__dst));
  if (v59 + 5 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v60 >= 0x17)
  {
    v65 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v60 | 7) != 0x17)
      v65 = v60 | 7;
    v66 = v65 + 1;
    v61 = (std::string *)operator new(v65 + 1);
    __dst.__r_.__value_.__l.__size_ = v59 + 5;
    __dst.__r_.__value_.__r.__words[2] = v66 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
    goto LABEL_96;
  }
  memset(&__dst, 0, sizeof(__dst));
  v61 = &__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v59 + 5;
  if (v59)
  {
LABEL_96:
    if (v58 >= 0)
      v67 = &v145;
    else
      v67 = (std::string *)v145.__r_.__value_.__r.__words[0];
    memmove(v61, v67, v59);
  }
  strcpy((char *)v61 + v59, "-live");
  if (v58 < 0)
    operator delete(v145.__r_.__value_.__l.__data_);
  v145 = __dst;
LABEL_103:
  memset(&v144, 170, sizeof(v144));
  v68 = (const char *)*MEMORY[0x24BE053F0];
  memset(&__dst, 0, sizeof(__dst));
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v143, v68);
  ctu::cf::map_adapter::getString();
  MEMORY[0x23B804B84](v143);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  memset(v143, 170, sizeof(v143));
  v69 = (const char *)*MEMORY[0x24BE05060];
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "Unknown");
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, v69);
  ctu::cf::map_adapter::getString();
  MEMORY[0x23B804B84](__p);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v70 = (const void *)strlen((const char *)v22);
    v71 = (const void *)HIBYTE(__s1[2]);
    if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
      goto LABEL_107;
LABEL_113:
    if (v70 != __s1[1])
    {
      v73 = (unsigned int (***)(_QWORD, uint64_t))(a1 + 8);
      v74 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
      {
LABEL_135:
        v87 = (const void **)__s1[0];
        goto LABEL_136;
      }
      goto LABEL_137;
    }
    if (v70 == (const void *)-1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v72 = (capabilities::radio *)memcmp(__s1[0], v22, (size_t)v70);
    if ((_DWORD)v72)
      goto LABEL_109;
    goto LABEL_116;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  v70 = (const void *)strlen((const char *)v22);
  v71 = (const void *)HIBYTE(__s1[2]);
  if (SHIBYTE(__s1[2]) < 0)
    goto LABEL_113;
LABEL_107:
  if (v70 != v71)
  {
    v73 = (unsigned int (***)(_QWORD, uint64_t))(a1 + 8);
    v74 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
      goto LABEL_133;
    goto LABEL_137;
  }
  v72 = (capabilities::radio *)memcmp(__s1, v22, (size_t)v70);
  if ((_DWORD)v72)
  {
LABEL_109:
    v73 = (unsigned int (***)(_QWORD, uint64_t))(a1 + 8);
    v74 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      if ((v71 & 0x80) != 0)
        goto LABEL_135;
LABEL_133:
      v87 = __s1;
LABEL_136:
      LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v87;
      _os_log_impl(&dword_236E0D000, v74, OS_LOG_TYPE_DEFAULT, "#I Skipping snapshot as trace filter is '%s'", (uint8_t *)&__dst, 0xCu);
    }
LABEL_137:
    if (!(**v73)(v73, 40))
      goto LABEL_142;
    v89 = __s1;
    if (SHIBYTE(__s1[2]) < 0)
      v89 = (const void **)__s1[0];
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Skipping snapshot as trace filter is '%s'", v88, v89);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    goto LABEL_141;
  }
LABEL_116:
  if (!*(_QWORD *)(a1 + 88))
  {
    v91 = (unsigned int (***)(_QWORD, uint64_t))(a1 + 8);
    v92 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_236E0D000, v92, OS_LOG_TYPE_ERROR, "Transport is not ready!", (uint8_t *)&__dst, 2u);
    }
    if (!(**v91)(v91, 80))
      goto LABEL_142;
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Transport is not ready!", v93);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
LABEL_141:
    MEMORY[0x23B804B24](&__dst);
    goto LABEL_142;
  }
  if (!*(_QWORD *)(a1 + 104))
  {
    v94 = (unsigned int (***)(_QWORD, uint64_t))(a1 + 8);
    v95 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_236E0D000, v95, OS_LOG_TYPE_ERROR, "File Collection is not ready!", (uint8_t *)&__dst, 2u);
    }
    if (!(**v94)(v94, 80))
      goto LABEL_142;
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"File Collection is not ready!", v96);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    goto LABEL_141;
  }
  if ((*(_DWORD *)(a1 + 168) & 0xFFFFFFFE) != 2 || *(_QWORD *)(a1 + 120))
  {
    memset(__p, 170, 24);
    capabilities::radio::firmwarePrefix(v72);
    v75 = std::string::insert(&v138, 0, "Baseband Trace\nBBFW Version: ");
    v76 = a5;
    v77 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
    v139.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v77;
    v75->__r_.__value_.__l.__size_ = 0;
    v75->__r_.__value_.__r.__words[2] = 0;
    v75->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v143[2]) >= 0)
      v78 = v143;
    else
      v78 = (void **)v143[0];
    if (SHIBYTE(v143[2]) >= 0)
      v79 = HIBYTE(v143[2]);
    else
      v79 = (std::string::size_type)v143[1];
    v80 = std::string::append(&v139, (const std::string::value_type *)v78, v79);
    v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    v82 = std::string::append(&__dst, "\n");
    v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    __p[2] = (void *)v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_128:
        if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_129;
LABEL_169:
        operator delete(v138.__r_.__value_.__l.__data_);
LABEL_129:
        v84 = (void *)strlen((const char *)*MEMORY[0x24BE04FD8]);
        v85 = (size_t)v84;
        if (SHIBYTE(v147[2]) < 0)
        {
          if (v84 != v147[1])
            goto LABEL_174;
          if (v84 == (void *)-1)
            std::string::__throw_out_of_range[abi:ne180100]();
          v86 = (void **)v147[0];
        }
        else
        {
          if (v84 != (void *)HIBYTE(v147[2]))
            goto LABEL_174;
          v86 = v147;
        }
        if (!memcmp(v86, (const void *)*MEMORY[0x24BE04FD8], v85))
        {
          BasebandTransport::close(*(BasebandTransport **)(a1 + 88));
LABEL_175:
          v97 = *a4;
          if (!*a4)
            goto LABEL_182;
          if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v137, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
          else
            v137 = v145;
          Timestamp::Timestamp((Timestamp *)&v136);
          *((_BYTE *)&v135.__r_.__value_.__s + 23) = 0;
          v135.__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v134.__r_.__value_.__s + 23) = 0;
          v134.__r_.__value_.__s.__data_[0] = 0;
          abm::trace::TraceInfo::push(v97, 9, &v137, &v136, &v135, &v134);
          if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v134.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_181:
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v136, *((_QWORD **)&v136 + 1));
              if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_182;
              goto LABEL_188;
            }
          }
          else if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_181;
          }
          operator delete(v135.__r_.__value_.__l.__data_);
          std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v136, *((_QWORD **)&v136 + 1));
          if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_182:
            v98 = *a5;
            if (!*a5)
              goto LABEL_199;
LABEL_183:
            if (!BYTE8(v141))
              goto LABEL_199;
            if (SBYTE7(v141) < 0)
            {
              std::string::__init_copy_ctor_external(&v133, (const std::string::value_type *)v140, *((std::string::size_type *)&v140 + 1));
            }
            else
            {
              *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v140;
              v133.__r_.__value_.__r.__words[2] = v141;
            }
            Timestamp::Timestamp((Timestamp *)&v132);
            *((_BYTE *)&v131.__r_.__value_.__s + 23) = 0;
            v131.__r_.__value_.__s.__data_[0] = 0;
            *((_BYTE *)&v130.__r_.__value_.__s + 23) = 0;
            v130.__r_.__value_.__s.__data_[0] = 0;
            abm::trace::TraceInfo::push(v98, 9, &v133, &v132, &v131, &v130);
            if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v130.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_198:
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v132, *((_QWORD **)&v132 + 1));
                if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_199;
LABEL_236:
                operator delete(v133.__r_.__value_.__l.__data_);
                v102 = (unsigned int (***)(_QWORD, uint64_t))(a1 + 8);
                v103 = *(NSObject **)(a1 + 40);
                if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
                  goto LABEL_200;
                goto LABEL_203;
              }
            }
            else if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_198;
            }
            operator delete(v131.__r_.__value_.__l.__data_);
            std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v132, *((_QWORD **)&v132 + 1));
            if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_236;
LABEL_199:
            v102 = (unsigned int (***)(_QWORD, uint64_t))(a1 + 8);
            v103 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
            {
LABEL_200:
              v104 = v143;
              if (SHIBYTE(v143[2]) < 0)
                v104 = (void **)v143[0];
              LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v104;
              _os_log_impl(&dword_236E0D000, v103, OS_LOG_TYPE_DEFAULT, "#I Snapshot: BBFW=%s", (uint8_t *)&__dst, 0xCu);
            }
LABEL_203:
            if ((**v102)(v102, 40))
            {
              v106 = v143;
              if (SHIBYTE(v143[2]) < 0)
                v106 = (void **)v143[0];
              ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Snapshot: BBFW=%s", v105, v106);
              ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
              MEMORY[0x23B804B24](&__dst);
            }
            v107 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
            {
              v108 = &v145;
              if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v108 = (std::string *)v145.__r_.__value_.__r.__words[0];
              LODWORD(__dst.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v108;
              WORD2(__dst.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = v127;
              _os_log_impl(&dword_236E0D000, v107, OS_LOG_TYPE_DEFAULT, "#I Snapshot: Path=%s [move=%d]", (uint8_t *)&__dst, 0x12u);
            }
            if ((**v102)(v102, 40))
            {
              v110 = &v145;
              if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v110 = (std::string *)v145.__r_.__value_.__r.__words[0];
              ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Snapshot: Path=%s [move=%d]", v109, v110, v127);
              ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
              MEMORY[0x23B804B24](&__dst);
            }
            v111 = *(_QWORD *)(a1 + 88);
            __dst.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
            __dst.__r_.__value_.__l.__size_ = 0x40000000;
            __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN17BasebandTransport9dumpStateEb_block_invoke;
            v151 = &__block_descriptor_tmp_89;
            v152 = v111;
            v153 = 1;
            ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)(v111 + 72), (uint64_t)&__dst);
            v112 = *(_QWORD *)(a1 + 104);
            v113 = (std::__shared_weak_count *)a4[1];
            v129[0] = *a4;
            v129[1] = (uint64_t)v113;
            if (v113)
            {
              p_shared_owners = (unint64_t *)&v113->__shared_owners_;
              do
                v115 = __ldxr(p_shared_owners);
              while (__stxr(v115 + 1, p_shared_owners));
              TraceFileCollection::snapshot(v112, (uint64_t)&v145, (uint64_t)&v144, (uint64_t)__p, v127, v129);
              do
                v116 = __ldaxr(p_shared_owners);
              while (__stlxr(v116 - 1, p_shared_owners));
              if (!v116)
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v113);
              }
            }
            else
            {
              TraceFileCollection::snapshot(v112, (uint64_t)&v145, (uint64_t)&v144, (uint64_t)__p, v127, v129);
            }
            v117 = *(_QWORD *)(a1 + 120);
            if (v117)
              v118 = BYTE8(v141) == 0;
            else
              v118 = 1;
            if (!v118)
            {
              v119 = *v76;
              v120 = (std::__shared_weak_count *)v76[1];
              v128[0] = v119;
              v128[1] = (uint64_t)v120;
              if (v120)
              {
                v121 = (unint64_t *)&v120->__shared_owners_;
                do
                  v122 = __ldxr(v121);
                while (__stxr(v122 + 1, v121));
                TraceFileCollection::snapshot(v117, (uint64_t)&v140, (uint64_t)&v144, (uint64_t)__p, v127, v128);
                do
                  v123 = __ldaxr(v121);
                while (__stlxr(v123 - 1, v121));
                if (!v123)
                {
                  ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                  std::__shared_weak_count::__release_weak(v120);
                }
              }
              else
              {
                TraceFileCollection::snapshot(v117, (uint64_t)&v140, (uint64_t)&v144, (uint64_t)__p, v127, v128);
              }
            }
            v124 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
              _os_log_impl(&dword_236E0D000, v124, OS_LOG_TYPE_DEFAULT, "#I snapshot complete", (uint8_t *)&__dst, 2u);
            }
            if ((**v102)(v102, 40))
            {
              ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"snapshot complete", v125);
              ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
              MEMORY[0x23B804B24](&__dst);
            }
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
            goto LABEL_142;
          }
LABEL_188:
          operator delete(v137.__r_.__value_.__l.__data_);
          v98 = *a5;
          if (!*a5)
            goto LABEL_199;
          goto LABEL_183;
        }
LABEL_174:
        v127 = 1;
        goto LABEL_175;
      }
    }
    else if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_128;
    }
    operator delete(v139.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_129;
    goto LABEL_169;
  }
  v99 = (unsigned int (***)(_QWORD, uint64_t))(a1 + 8);
  v100 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
    _os_log_error_impl(&dword_236E0D000, v100, OS_LOG_TYPE_ERROR, "Secondary File Collection is not ready!", (uint8_t *)&__dst, 2u);
  }
  if ((**v99)(v99, 80))
  {
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Secondary File Collection is not ready!", v101);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    goto LABEL_141;
  }
LABEL_142:
  if (SHIBYTE(v143[2]) < 0)
  {
    operator delete(v143[0]);
    if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_144:
      if (!BYTE8(v141))
        goto LABEL_150;
      goto LABEL_148;
    }
  }
  else if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_144;
  }
  operator delete(v144.__r_.__value_.__l.__data_);
  if (!BYTE8(v141))
    goto LABEL_150;
LABEL_148:
  if (SBYTE7(v141) < 0)
    operator delete((void *)v140);
LABEL_150:
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v145.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
    {
LABEL_152:
      if ((SHIBYTE(v147[2]) & 0x80000000) == 0)
        goto LABEL_153;
LABEL_157:
      operator delete(v147[0]);
      if ((SHIBYTE(v148[2]) & 0x80000000) == 0)
        return MEMORY[0x23B804B9C](v149);
LABEL_158:
      operator delete(v148[0]);
      return MEMORY[0x23B804B9C](v149);
    }
  }
  else if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    goto LABEL_152;
  }
  operator delete((void *)__s1[0]);
  if (SHIBYTE(v147[2]) < 0)
    goto LABEL_157;
LABEL_153:
  if (SHIBYTE(v148[2]) < 0)
    goto LABEL_158;
  return MEMORY[0x23B804B9C](v149);
}

void sub_236E3C778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a66;
  char a71;
  void *a72;
  char a73;
  uint64_t v73;

  MEMORY[0x23B804B24](v73 - 160);
  if (a65 < 0)
    operator delete(__p);
  if (a71 < 0)
    operator delete(a66);
  if (a55 && a54 < 0)
    operator delete(a49);
  if (a73 < 0)
    operator delete(a72);
  if (*(char *)(v73 - 225) < 0)
    operator delete(*(void **)(v73 - 248));
  if (*(char *)(v73 - 201) < 0)
    operator delete(*(void **)(v73 - 224));
  if (*(char *)(v73 - 177) < 0)
    operator delete(*(void **)(v73 - 200));
  MEMORY[0x23B804B9C](v73 - 176);
  _Unwind_Resume(a1);
}

void sub_236E3CB3C()
{
  uint64_t v0;

  if ((*(char *)(v0 - 225) & 0x80000000) == 0)
    JUMPOUT(0x236E3CB0CLL);
  JUMPOUT(0x236E3CB04);
}

void sub_236E3CB4C()
{
  JUMPOUT(0x236E3CB0CLL);
}

void sub_236E3CB54()
{
  uint64_t v0;

  if ((*(char *)(v0 - 177) & 0x80000000) == 0)
    JUMPOUT(0x236E3CB2CLL);
  JUMPOUT(0x236E3CB24);
}

void abm::trace::TraceReader::updateHistorySize(abm::trace::TraceReader *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  void *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t block;
  uint64_t v17;
  _QWORD *(*v18)(uint64_t);
  void *v19;
  uint64_t v20;
  uint64_t **v21;

  v4 = MEMORY[0x24BDAC760];
  v5 = *((_QWORD *)this + 13);
  if (v5)
  {
    v9 = MEMORY[0x24BDAC760];
    v10 = 0x40000000;
    v11 = ___ZN19TraceFileCollection10setHistoryEi_block_invoke;
    v12 = &__block_descriptor_tmp_20_1;
    v13 = v5;
    v14 = a2;
    v15 = &v9;
    block = MEMORY[0x24BDAC760];
    v17 = 0x40000000;
    v18 = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    v19 = &__block_descriptor_tmp_52;
    v20 = v5 + 72;
    v21 = &v15;
    v6 = *(NSObject **)(v5 + 88);
    if (!*(_QWORD *)(v5 + 96))
    {
      dispatch_sync(v6, &block);
      v7 = *((_QWORD *)this + 15);
      if (!v7)
        return;
      goto LABEL_5;
    }
    dispatch_async_and_wait(v6, &block);
  }
  v7 = *((_QWORD *)this + 15);
  if (!v7)
    return;
LABEL_5:
  v9 = v4;
  v10 = 0x40000000;
  v11 = ___ZN19TraceFileCollection10setHistoryEi_block_invoke;
  v12 = &__block_descriptor_tmp_20_1;
  v13 = v7;
  v14 = a2;
  v15 = &v9;
  block = v4;
  v17 = 0x40000000;
  v18 = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v19 = &__block_descriptor_tmp_52;
  v20 = v7 + 72;
  v21 = &v15;
  v8 = *(NSObject **)(v7 + 88);
  if (*(_QWORD *)(v7 + 96))
    dispatch_async_and_wait(v8, &block);
  else
    dispatch_sync(v8, &block);
}

void abm::trace::TraceReader::updateMaxMemoryFileCount(abm::trace::TraceReader *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  void *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t block;
  uint64_t v17;
  _QWORD *(*v18)(uint64_t);
  void *v19;
  uint64_t v20;
  uint64_t **v21;

  v4 = MEMORY[0x24BDAC760];
  v5 = *((_QWORD *)this + 13);
  if (v5)
  {
    v9 = MEMORY[0x24BDAC760];
    v10 = 0x40000000;
    v11 = ___ZN19TraceFileCollection21setMaxMemoryFileCountEj_block_invoke;
    v12 = &__block_descriptor_tmp_21_1;
    v13 = v5;
    v14 = a2;
    v15 = &v9;
    block = MEMORY[0x24BDAC760];
    v17 = 0x40000000;
    v18 = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    v19 = &__block_descriptor_tmp_52;
    v20 = v5 + 72;
    v21 = &v15;
    v6 = *(NSObject **)(v5 + 88);
    if (!*(_QWORD *)(v5 + 96))
    {
      dispatch_sync(v6, &block);
      v7 = *((_QWORD *)this + 15);
      if (!v7)
        return;
      goto LABEL_5;
    }
    dispatch_async_and_wait(v6, &block);
  }
  v7 = *((_QWORD *)this + 15);
  if (!v7)
    return;
LABEL_5:
  v9 = v4;
  v10 = 0x40000000;
  v11 = ___ZN19TraceFileCollection21setMaxMemoryFileCountEj_block_invoke;
  v12 = &__block_descriptor_tmp_21_1;
  v13 = v7;
  v14 = a2;
  v15 = &v9;
  block = v4;
  v17 = 0x40000000;
  v18 = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v19 = &__block_descriptor_tmp_52;
  v20 = v7 + 72;
  v21 = &v15;
  v8 = *(NSObject **)(v7 + 88);
  if (*(_QWORD *)(v7 + 96))
    dispatch_async_and_wait(v8, &block);
  else
    dispatch_sync(v8, &block);
}

void abm::trace::TraceReader::updateFileSize(abm::trace::TraceReader *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  void *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t block;
  uint64_t v17;
  _QWORD *(*v18)(uint64_t);
  void *v19;
  uint64_t v20;
  uint64_t **v21;

  v4 = MEMORY[0x24BDAC760];
  v5 = *((_QWORD *)this + 13);
  if (v5)
  {
    v9 = MEMORY[0x24BDAC760];
    v10 = 0x40000000;
    v11 = ___ZN19TraceFileCollection11setFileSizeEj_block_invoke;
    v12 = &__block_descriptor_tmp_22_0;
    v13 = v5;
    v14 = a2;
    v15 = &v9;
    block = MEMORY[0x24BDAC760];
    v17 = 0x40000000;
    v18 = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    v19 = &__block_descriptor_tmp_52;
    v20 = v5 + 72;
    v21 = &v15;
    v6 = *(NSObject **)(v5 + 88);
    if (!*(_QWORD *)(v5 + 96))
    {
      dispatch_sync(v6, &block);
      v7 = *((_QWORD *)this + 15);
      if (!v7)
        return;
      goto LABEL_5;
    }
    dispatch_async_and_wait(v6, &block);
  }
  v7 = *((_QWORD *)this + 15);
  if (!v7)
    return;
LABEL_5:
  v9 = v4;
  v10 = 0x40000000;
  v11 = ___ZN19TraceFileCollection11setFileSizeEj_block_invoke;
  v12 = &__block_descriptor_tmp_22_0;
  v13 = v7;
  v14 = a2;
  v15 = &v9;
  block = v4;
  v17 = 0x40000000;
  v18 = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v19 = &__block_descriptor_tmp_52;
  v20 = v7 + 72;
  v21 = &v15;
  v8 = *(NSObject **)(v7 + 88);
  if (*(_QWORD *)(v7 + 96))
    dispatch_async_and_wait(v8, &block);
  else
    dispatch_sync(v8, &block);
}

uint64_t abm::trace::TraceReader::getCurrentIndex(abm::trace::TraceReader *this)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v4;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD block[6];

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return 0;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK19TraceFileCollection19getNewestFileNumberEv_block_invoke;
  v5[3] = &unk_25086CFD8;
  v5[4] = &v6;
  v5[5] = v1;
  v10 = v5;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_52;
  block[4] = v1 + 72;
  block[5] = &v10;
  v2 = *(NSObject **)(v1 + 88);
  if (*(_QWORD *)(v1 + 96))
    dispatch_async_and_wait(v2, block);
  else
    dispatch_sync(v2, block);
  v4 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v4;
}

uint64_t abm::trace::TraceReader::notifyCellularLoggingPortNumber(abm::trace::TraceReader *this)
{
  uint64_t v2;
  char *v3;
  NSObject *v4;
  const char *v5;
  uint8_t v7[64];

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 25) + 72))(*((_QWORD *)this + 25));
  if ((v2 & 1) == 0)
  {
    v3 = (char *)this + 8;
    v4 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_236E0D000, v4, OS_LOG_TYPE_DEFAULT, "#I forward streaming info fail", v7, 2u);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v3)(v3, 40))
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"forward streaming info fail", v5);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x23B804B24](v7);
    }
  }
  return v2;
}

uint64_t ctu::Loggable<abm::trace::TraceReader,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<abm::trace::TraceReader,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
    v3 = *(const char **)v3;
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<abm::trace::TraceReader,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<abm::trace::TraceReader,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_25086C4F0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<abm::trace::TraceReader,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_25086C4F0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::__shared_ptr_pointer<abm::trace::TraceReader *,std::shared_ptr<abm::trace::TraceReader>::__shared_ptr_default_delete<abm::trace::TraceReader,abm::trace::TraceReader>,std::allocator<abm::trace::TraceReader>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<abm::trace::TraceReader *,std::shared_ptr<abm::trace::TraceReader>::__shared_ptr_default_delete<abm::trace::TraceReader,abm::trace::TraceReader>,std::allocator<abm::trace::TraceReader>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<abm::trace::TraceReader *,std::shared_ptr<abm::trace::TraceReader>::__shared_ptr_default_delete<abm::trace::TraceReader,abm::trace::TraceReader>,std::allocator<abm::trace::TraceReader>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000236E5337FLL)
    return a1 + 24;
  if (((v3 & 0x8000000236E5337FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000236E5337FLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000236E5337FLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

uint64_t abm::trace::getBasebandTraceDirSuffix@<X0>(abm::trace *this@<X0>, _BYTE *a2@<X8>)
{
  int v2;
  uint64_t result;
  char **v5;

  v2 = (int)this;
  memset(a2, 170, 24);
  a2[23] = 0;
  *a2 = 0;
  result = capabilities::radio::vendor(this);
  if ((result - 2) >= 2)
  {
    if ((_DWORD)result != 1)
      return result;
    v5 = &abm::trace::kEURTraceSnapshotDirectorySuffix;
    if (v2)
      v5 = &abm::trace::kEURQDSSTraceSnapshotDirectorySuffix;
  }
  else
  {
    v5 = &abm::trace::kICETraceSnapshotDirectorySuffix;
  }
  return MEMORY[0x23B804D4C](a2, *v5);
}

void sub_236E3D374(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void abm::trace::getCoreDumpDirSuffix(std::string *a1@<X8>)
{
  unsigned __int8 v3;
  capabilities::radio *v4;
  int v5;
  char **v6;

  v3 = atomic_load((unsigned __int8 *)&_MergedGlobals_1);
  if ((v3 & 1) == 0)
  {
    v4 = (capabilities::radio *)__cxa_guard_acquire(&_MergedGlobals_1);
    if ((_DWORD)v4)
    {
      v5 = capabilities::radio::maverick(v4);
      v6 = &abm::trace::kEURCoreDumpSnapshotDirectorySuffix;
      if (!v5)
        v6 = &abm::trace::kCoreDumpSnapshotDirectorySuffix;
      std::string::basic_string[abi:ne180100]<0>(&xmmword_256452500, *v6);
      __cxa_guard_release(&_MergedGlobals_1);
    }
  }
  if (byte_256452517 < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)xmmword_256452500, *((std::string::size_type *)&xmmword_256452500 + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = xmmword_256452500;
    a1->__r_.__value_.__r.__words[2] = unk_256452510;
  }
}

void sub_236E3D448(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_MergedGlobals_1);
  _Unwind_Resume(a1);
}

uint64_t abm::trace::isSupported(uint64_t a1)
{
  const char *v1;
  int v2;
  capabilities::radio *v3;
  const char *v4;
  capabilities::radio *v5;
  const char *v6;
  capabilities::radio *v7;
  capabilities::trace *v8;
  capabilities::trace *v9;

  v1 = (const char *)a1;
  v2 = *(char *)(a1 + 23);
  if (v2 < 0)
  {
    v3 = (capabilities::radio *)strcasecmp(*(const char **)a1, (const char *)abm::trace::kDIAG);
    if ((_DWORD)v3)
    {
LABEL_3:
      v4 = v1;
      if ((v2 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v3 = (capabilities::radio *)strcasecmp((const char *)a1, (const char *)abm::trace::kDIAG);
    if ((_DWORD)v3)
      goto LABEL_3;
  }
  if ((capabilities::radio::maverick(v3) & 1) != 0)
    return 1;
  LOBYTE(v2) = v1[23];
  v4 = v1;
  if ((v2 & 0x80) == 0)
  {
LABEL_4:
    v5 = (capabilities::radio *)strcasecmp(v4, (const char *)abm::trace::kICETrace);
    if ((_DWORD)v5)
      goto LABEL_5;
LABEL_12:
    if ((capabilities::radio::ice(v5) & 1) != 0)
      return 1;
    LOBYTE(v2) = v1[23];
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_11:
  v5 = (capabilities::radio *)strcasecmp(*(const char **)v1, (const char *)abm::trace::kICETrace);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_5:
  if ((v2 & 0x80) == 0)
  {
LABEL_6:
    v6 = v1;
    if (!strcasecmp(v1, (const char *)abm::trace::kBasebandTrace))
      return 1;
    goto LABEL_15;
  }
LABEL_14:
  v6 = *(const char **)v1;
  if (!strcasecmp(*(const char **)v1, (const char *)abm::trace::kBasebandTrace))
    return 1;
LABEL_15:
  v7 = (capabilities::radio *)strcasecmp(v6, (const char *)abm::trace::kEURCoreDump);
  if ((_DWORD)v7)
  {
    if ((v2 & 0x80) == 0)
      goto LABEL_17;
  }
  else
  {
    if ((capabilities::radio::maverick(v7) & 1) != 0)
      return 1;
    if ((v1[23] & 0x80) == 0)
    {
LABEL_17:
      if (!strcasecmp(v1, (const char *)abm::trace::kCoreDump)
        || !strcasecmp(v1, (const char *)abm::trace::kSystemLogs))
      {
        return 1;
      }
      v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kCompression);
      if (!(_DWORD)v8)
        return capabilities::trace::allowed(v8);
      v9 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kBasebandIPC);
      if ((_DWORD)v9)
      {
        v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kIPC);
        if (!(_DWORD)v8)
          return capabilities::trace::allowed(v8);
        v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kKernelPCI);
        if (!(_DWORD)v8)
          return capabilities::trace::allowed(v8);
        v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kTapToRadar);
        if (!(_DWORD)v8)
          return capabilities::trace::allowed(v8);
        goto LABEL_34;
      }
      return capabilities::trace::supportsBasebandIPCTrace(v9);
    }
  }
  v1 = *(const char **)v1;
  if (!strcasecmp(v1, (const char *)abm::trace::kCoreDump) || !strcasecmp(v1, (const char *)abm::trace::kSystemLogs))
    return 1;
  v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kCompression);
  if (!(_DWORD)v8)
    return capabilities::trace::allowed(v8);
  v9 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kBasebandIPC);
  if ((_DWORD)v9)
  {
    v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kIPC);
    if (!(_DWORD)v8)
      return capabilities::trace::allowed(v8);
    v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kKernelPCI);
    if (!(_DWORD)v8)
      return capabilities::trace::allowed(v8);
    v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kTapToRadar);
    if (!(_DWORD)v8)
      return capabilities::trace::allowed(v8);
LABEL_34:
    if (strcasecmp(v1, (const char *)abm::trace::kProfile))
    {
      v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kTraceTailspin);
      if ((_DWORD)v8)
      {
        v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kTraceSettings);
        if ((_DWORD)v8)
        {
          v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kTraceFilter);
          if ((_DWORD)v8)
            return 0;
        }
      }
      return capabilities::trace::allowed(v8);
    }
    return 1;
  }
  return capabilities::trace::supportsBasebandIPCTrace(v9);
}

void Timestamp::Timestamp(Timestamp *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  int *v10;
  char *v11;
  unsigned __int128 v12;
  uint8_t buf[4];
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 1) = 0;
  v2 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = (char *)this + 8;
  v12 = 0uLL;
  if ((gettimeofday((timeval *)&v12, 0) & 0x80000000) == 0
    || !os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v3 = *v2;
    v4 = v2;
    if (*v2)
      goto LABEL_4;
LABEL_10:
    v7 = (char *)operator new(0x38uLL);
    *((_DWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 5) = 0;
    *((_QWORD *)v7 + 6) = 0;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v4;
    *v2 = v7;
    v8 = **(_QWORD **)this;
    v9 = (uint64_t *)v7;
    if (v8)
    {
      *(_QWORD *)this = v8;
      v9 = (uint64_t *)*v2;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 1), v9);
    ++*((_QWORD *)this + 2);
    goto LABEL_13;
  }
  v10 = __error();
  v11 = strerror(*v10);
  *(_DWORD *)buf = 136315138;
  v14 = v11;
  _os_log_error_impl(&dword_236E0D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to get current time. Error: %s\n", buf, 0xCu);
  v3 = *v2;
  v4 = v2;
  if (!*v2)
    goto LABEL_10;
LABEL_4:
  v5 = v3;
  while (1)
  {
    while (1)
    {
      v4 = (_QWORD *)v5;
      v6 = *(_DWORD *)(v5 + 32);
      if (v6 < 1)
        break;
      v5 = *v4;
      v2 = v4;
      if (!*v4)
        goto LABEL_10;
    }
    if ((v6 & 0x80000000) == 0)
      break;
    v5 = v4[1];
    if (!v5)
    {
      v2 = v4 + 1;
      goto LABEL_10;
    }
  }
  v7 = (char *)v4;
LABEL_13:
  *(_OWORD *)(v7 + 40) = v12;
}

void sub_236E3D894(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_236E3D8B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, v2);
  _Unwind_Resume(a1);
}

void Timestamp::Timestamp(Timestamp *this, const Timestamp *a2)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(int **)a2, (int *)a2 + 2);
}

{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(int **)a2, (int *)a2 + 2);
}

void sub_236E3D908(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_236E3D95C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *Timestamp::Timestamp(_QWORD *a1, _OWORD *a2, int a3)
{
  _QWORD *v6;
  char *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

{
  _QWORD *v6;
  char *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

__n128 Timestamp::set(uint64_t **a1, __n128 *a2, int a3)
{
  char *v6;
  uint64_t **v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  __n128 result;

  v7 = a1 + 1;
  v6 = (char *)a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3)
          break;
        v6 = *(char **)v8;
        v7 = (uint64_t **)v8;
        if (!*(_QWORD *)v8)
          goto LABEL_8;
      }
      if (v9 >= a3)
        break;
      v6 = (char *)*((_QWORD *)v8 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = (char *)(a1 + 1);
LABEL_8:
    v10 = v8;
    v8 = (char *)operator new(0x38uLL);
    *((_DWORD *)v8 + 8) = a3;
    *((_QWORD *)v8 + 5) = 0;
    *((_QWORD *)v8 + 6) = 0;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v10;
    *v7 = (uint64_t *)v8;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  result = *a2;
  *(__n128 *)(v8 + 40) = *a2;
  return result;
}

_QWORD *Timestamp::Timestamp(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  _DWORD *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  *((_BYTE *)v7 + 24) = 1;
  a1[2] = 1;
  *((_QWORD *)v7 + 5) = a2;
  *((_QWORD *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

{
  _QWORD *v6;
  _DWORD *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  *((_BYTE *)v7 + 24) = 1;
  a1[2] = 1;
  *((_QWORD *)v7 + 5) = a2;
  *((_QWORD *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

uint64_t **Timestamp::Timestamp(uint64_t **a1, char *a2, char a3, int a4)
{
  uint64_t **v7;
  void **v8;
  int *v9;
  char *v10;
  NSObject *v11;
  const char *v12;
  uint64_t *v13;
  _QWORD *v14;
  int v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  int *v20;
  char *v21;
  int *v22;
  char *v23;
  unsigned __int128 v24;
  tm v25;
  void *__p[2];
  uint64_t v27;
  uint8_t buf[4];
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  a1[1] = 0;
  v7 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  v27 = 0x11AAAAAAAAAA0053;
  *(_OWORD *)__p = *(_OWORD *)"%Y-%m-%d-%H-%M-%S";
  if ((a3 & 0x10) != 0)
    MEMORY[0x23B804D4C](__p, "%Y.%m.%d_%H-%M-%S%z");
  *((_QWORD *)&v24 + 1) = 0xAAAAAAAA00000000;
  memset(&v25, 0, sizeof(v25));
  if (a2[23] < 0)
    a2 = *(char **)a2;
  if (v27 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if (strptime(a2, (const char *)v8, &v25))
  {
    v25.tm_isdst = -1;
    *(_QWORD *)&v24 = mktime(&v25);
    if ((_QWORD)v24 != -1)
      goto LABEL_18;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v20 = __error();
      v21 = strerror(*v20);
      *(_DWORD *)buf = 136315138;
      v29 = v21;
      _os_log_error_impl(&dword_236E0D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to convert to absolute time. Error: %s\n", buf, 0xCu);
      v24 = 0uLL;
      if ((gettimeofday((timeval *)&v24, 0) & 0x80000000) == 0)
        goto LABEL_18;
    }
    else
    {
      v24 = 0uLL;
      if ((gettimeofday((timeval *)&v24, 0) & 0x80000000) == 0)
        goto LABEL_18;
    }
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    v9 = __error();
    v10 = strerror(*v9);
    *(_DWORD *)buf = 136315138;
    v29 = v10;
    v11 = MEMORY[0x24BDACB70];
    v12 = "Failed to get current time after absolute time conversion failed. Error: %s\n";
    goto LABEL_35;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_236E0D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Failed to convert time from string format\n", buf, 2u);
  }
  v24 = 0uLL;
  if (gettimeofday((timeval *)&v24, 0) < 0 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v22 = __error();
    v23 = strerror(*v22);
    *(_DWORD *)buf = 136315138;
    v29 = v23;
    v11 = MEMORY[0x24BDACB70];
    v12 = "Failed to get current time after conversion failure. Error: %s\n";
LABEL_35:
    _os_log_error_impl(&dword_236E0D000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
  }
LABEL_18:
  v13 = *v7;
  v14 = v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        v14 = v13;
        v15 = *((_DWORD *)v13 + 8);
        if (v15 <= a4)
          break;
        v13 = (uint64_t *)*v14;
        v7 = (uint64_t **)v14;
        if (!*v14)
          goto LABEL_25;
      }
      if (v15 >= a4)
        break;
      v13 = (uint64_t *)v14[1];
      if (!v13)
      {
        v7 = (uint64_t **)(v14 + 1);
        goto LABEL_25;
      }
    }
    *(_OWORD *)(v14 + 5) = v24;
    if (SHIBYTE(v27) < 0)
      goto LABEL_28;
  }
  else
  {
LABEL_25:
    v16 = (char *)operator new(0x38uLL);
    *((_DWORD *)v16 + 8) = a4;
    *((_QWORD *)v16 + 5) = 0;
    *((_QWORD *)v16 + 6) = 0;
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = v14;
    *v7 = (uint64_t *)v16;
    v17 = (uint64_t *)**a1;
    v18 = (uint64_t *)v16;
    if (v17)
    {
      *a1 = v17;
      v18 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v18);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    *(_OWORD *)(v16 + 40) = v24;
    if (SHIBYTE(v27) < 0)
LABEL_28:
      operator delete(__p[0]);
  }
  return a1;
}

void sub_236E3DF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v24, *(_QWORD **)(v24 + 8));
  _Unwind_Resume(a1);
}

uint64_t Timestamp::get(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;

  *a2 = 0;
  a2[1] = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v3 = a1 + 8;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 < a3;
    if (v7 >= a3)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 || *(_DWORD *)(v6 + 32) > a3)
    return 0;
  *(_OWORD *)a2 = *(_OWORD *)(v6 + 40);
  return 1;
}

uint64_t Timestamp::now(timeval *this, timeval *a2)
{
  return gettimeofday(this, 0);
}

uint64_t Timestamp::asString(uint64_t a1, int a2, char a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  time_t v14;
  __int128 v15;
  const char *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  const std::locale::facet *v20;
  uint64_t v21;
  tm v23;
  time_t v24;
  __int128 v25;
  _OWORD v26[4];
  void *__p[2];
  __int128 v28;
  __int128 v29;
  _OWORD v30[9];
  unint64_t v31;
  std::locale v32;
  char __s[16];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v31 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v30[7] = v6;
  v30[8] = v6;
  v30[5] = v6;
  v30[6] = v6;
  v30[3] = v6;
  v30[4] = v6;
  v30[1] = v6;
  v30[2] = v6;
  v29 = v6;
  v30[0] = v6;
  *(_OWORD *)__p = v6;
  v28 = v6;
  v26[2] = v6;
  v26[3] = v6;
  v26[0] = v6;
  v26[1] = v6;
  v25 = v6;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v25);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = a1 + 8;
  v7 = v9;
  if (!v9)
    goto LABEL_11;
  v10 = v8;
  do
  {
    v11 = *(_DWORD *)(v7 + 32);
    v12 = v11 < a2;
    if (v11 >= a2)
      v13 = (uint64_t *)v7;
    else
      v13 = (uint64_t *)(v7 + 8);
    if (!v12)
      v10 = v7;
    v7 = *v13;
  }
  while (*v13);
  if (v10 != v8 && *(_DWORD *)(v10 + 32) <= a2)
  {
    v14 = *(_QWORD *)(v10 + 40);
    if ((a3 & 0x11) != 0)
    {
LABEL_12:
      v23.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
      v24 = v14;
      *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v23.tm_mon = v15;
      *(_OWORD *)&v23.tm_isdst = v15;
      *(_OWORD *)&v23.tm_sec = v15;
      localtime_r(&v24, &v23);
      v35 = 0u;
      v36 = 0u;
      *(_OWORD *)__s = 0u;
      v34 = 0u;
      if ((a3 & 0x10) != 0)
        v16 = "%Y.%m.%d_%H-%M-%S%z";
      else
        v16 = "%Y-%m-%d-%H-%M-%S";
      strftime(__s, 0x40uLL, v16, &v23);
      v17 = strlen(__s);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)__s, v17);
      if ((a3 & 8) != 0)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"-", 1);
        v18 = *(_QWORD *)&v26[0];
        v19 = (char *)v26 + *(_QWORD *)(*(_QWORD *)&v26[0] - 24);
        if (*((_DWORD *)v19 + 36) == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*(_QWORD *)&v26[0] - 24)));
          v20 = std::locale::use_facet(&v32, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 32);
          std::locale::~locale(&v32);
          v18 = *(_QWORD *)&v26[0];
        }
        *((_DWORD *)v19 + 36) = 48;
        *(_QWORD *)((char *)&v26[1] + *(_QWORD *)(v18 - 24) + 8) = 3;
        std::ostream::operator<<();
      }
      goto LABEL_23;
    }
  }
  else
  {
LABEL_11:
    v14 = 0;
    if ((a3 & 0x11) != 0)
      goto LABEL_12;
  }
  std::ostream::operator<<();
  if ((a3 & 4) != 0 || (a3 & 8) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)".", 1);
    std::ostream::operator<<();
  }
LABEL_23:
  std::stringbuf::str();
  *(_QWORD *)&v25 = *MEMORY[0x24BEDB7F0];
  v21 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v26[-1] + *(_QWORD *)(v25 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v26[0] = v21;
  *((_QWORD *)&v26[0] + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v28) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23B804F8C](v30);
}

void sub_236E3E2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_236E3E2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  std::locale::~locale((std::locale *)(v9 - 136));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_236E3E318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_236E3E330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_236E3E344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *Timestamp::convert(uint64_t a1)
{
  uint64_t *v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t **v5;
  int v6;
  uint64_t **v7;
  uint64_t *v8;
  std::string __p;
  uint64_t *v11[3];

  memset(v11, 170, sizeof(v11));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  Timestamp::Timestamp(v11, (char *)&__p, 9, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v1 = v11[1];
    if (!v11[1])
    {
LABEL_18:
      v8 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    v1 = v11[1];
    if (!v11[1])
      goto LABEL_18;
  }
  v2 = &v11[1];
  v3 = v1;
  do
  {
    v4 = (uint64_t **)v3;
    v5 = v2;
    v6 = *((_DWORD *)v3 + 8);
    if (v6 >= 0)
      v2 = (uint64_t **)v3;
    else
      ++v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v2 == &v11[1])
    goto LABEL_18;
  v7 = v6 >= 0 ? v4 : v5;
  if (*((int *)v7 + 8) > 0)
    goto LABEL_18;
  if (v6 < 0)
    v4 = v5;
  v8 = v4[5];
LABEL_19:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v11, v1);
  return v8;
}

void sub_236E3E454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int *v6;
  uint64_t *v7;
  uint64_t *v8;
  int *v9;
  uint64_t *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t *v15;
  int *v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t *v19[11];

  if (a2 != a3)
  {
    v19[9] = v3;
    v19[10] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      v19[0] = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      result = std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::__find_equal<Timestamp::TimeDomain>(v7, v8, v19, &v18, v6 + 8);
      if (*result)
      {
        v9 = (int *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = result;
        v11 = operator new(0x38uLL);
        v12 = *((_QWORD *)v6 + 6);
        v11[2] = *((_OWORD *)v6 + 2);
        *((_QWORD *)v11 + 6) = v12;
        v13 = v19[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v13;
        *v10 = (uint64_t)v11;
        v14 = *(_QWORD **)*v7;
        if (v14)
        {
          *v7 = (uint64_t)v14;
          v15 = (uint64_t *)*v10;
        }
        else
        {
          v15 = (uint64_t *)v11;
        }
        result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v15);
        ++v7[2];
        v9 = (int *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            v16 = v9;
            v9 = *(int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v16 = (int *)*((_QWORD *)v6 + 2);
        v17 = *(_QWORD *)v16 == (_QWORD)v6;
        v6 = v16;
      }
      while (!v17);
LABEL_3:
      v6 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::__find_equal<Timestamp::TimeDomain>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(_DWORD *)(v18 + 32);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 8))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(_DWORD *)(v22 + 32);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void MallocZone::create(uint64_t a1@<X0>, vm_size_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  malloc_zone_t *zone;
  _QWORD *v8;
  std::string *v9;
  std::string __p;
  std::string v11;

  v6 = operator new(0x20uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = off_25086C580;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v11 = __p;
  zone = malloc_create_zone(a2, 0);
  v8 = v6 + 3;
  v6[3] = zone;
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v11;
  else
    v9 = (std::string *)v11.__r_.__value_.__r.__words[0];
  malloc_set_zone_name(zone, (const char *)v9);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_12;
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_12:
    *a3 = v8;
    a3[1] = v6;
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  *a3 = v8;
  a3[1] = v6;
}

void sub_236E3E854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  void *v23;
  void *v24;

  if ((a14 & 0x80000000) == 0)
  {
    std::__shared_weak_count::~__shared_weak_count(v21);
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v24);
  _Unwind_Resume(a1);
}

malloc_zone_t **MallocZone::MallocZone(malloc_zone_t **a1, uint64_t a2, vm_size_t start_size)
{
  malloc_zone_t *zone;

  zone = malloc_create_zone(start_size, 0);
  *a1 = zone;
  if (*(char *)(a2 + 23) < 0)
    malloc_set_zone_name(zone, *(const char **)a2);
  else
    malloc_set_zone_name(zone, (const char *)a2);
  return a1;
}

{
  malloc_zone_t *zone;

  zone = malloc_create_zone(start_size, 0);
  *a1 = zone;
  if (*(char *)(a2 + 23) < 0)
    malloc_set_zone_name(zone, *(const char **)a2);
  else
    malloc_set_zone_name(zone, (const char *)a2);
  return a1;
}

void MallocZone::~MallocZone(malloc_zone_t **this)
{
  malloc_destroy_zone(*this);
  *this = 0;
}

{
  malloc_destroy_zone(*this);
  *this = 0;
}

void *MallocZone::malloc(malloc_zone_t **this, size_t a2)
{
  return malloc_type_zone_malloc(*this, a2, 0xF258B947uLL);
}

void *MallocZone::calloc(malloc_zone_t **this, size_t a2, size_t a3)
{
  return malloc_type_zone_calloc(*this, a2, a3, 0xCE120C5BuLL);
}

void *MallocZone::valloc(malloc_zone_t **this, size_t a2)
{
  return malloc_type_zone_valloc(*this, a2, 0xBFEFC488uLL);
}

void *MallocZone::realloc(malloc_zone_t **this, void *a2, size_t a3)
{
  return malloc_type_zone_realloc(*this, a2, a3, 0x24D19EE6uLL);
}

void *MallocZone::memalign(malloc_zone_t **this, size_t a2, size_t a3)
{
  return malloc_type_zone_memalign(*this, a2, a3, 0x330AAE71uLL);
}

void MallocZone::free(malloc_zone_t **this, void *a2)
{
  malloc_zone_free(*this, a2);
}

void std::__shared_ptr_emplace<MallocZone::create(std::string,unsigned long)::MallocZoneNoPrivate,std::allocator<MallocZone::create(std::string,unsigned long)::MallocZoneNoPrivate>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_25086C580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MallocZone::create(std::string,unsigned long)::MallocZoneNoPrivate,std::allocator<MallocZone::create(std::string,unsigned long)::MallocZoneNoPrivate>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_25086C580;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<MallocZone::create(std::string,unsigned long)::MallocZoneNoPrivate,std::allocator<MallocZone::create(std::string,unsigned long)::MallocZoneNoPrivate>>::__on_zero_shared(uint64_t a1)
{
  malloc_destroy_zone(*(malloc_zone_t **)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
}

BOOL util::writeJSON(ctu **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  _BOOL8 v10;
  NSObject *v11;
  NSObject *v12;
  id v14;
  uint64_t v15;
  id v16;
  CFTypeRef cf;
  uint8_t buf[4];
  uint64_t *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v2 = a2;
  v22 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  if (*((char *)a2 + 23) < 0)
    v4 = (uint64_t *)*a2;
  v5 = (void *)MEMORY[0x24BDBCF08];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "outputStreamToFileAtPath:append:", v6, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7 && (objc_msgSend(v7, "open"), objc_msgSend(v7, "streamStatus") == 2))
  {
    if ((objc_msgSend(v7, "hasSpaceAvailable") & 1) != 0)
    {
      cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      ctu::xpc_to_cf(*a1, v8);
      v16 = 0;
      objc_msgSend(MEMORY[0x24BDD1608], "writeJSONObject:toStream:options:error:", 0xAAAAAAAAAAAAAAAALL, v7, 1, &v16);
      v9 = v16;
      v10 = v9 == 0;
      if (v9)
      {
        v11 = *(NSObject **)(GetOsLogContext() + 8);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)v2 + 23) < 0)
            v2 = (uint64_t *)*v2;
          objc_msgSend(v9, "localizedDescription");
          v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v15 = objc_msgSend(v14, "UTF8String");
          *(_DWORD *)buf = 136315394;
          v19 = v2;
          v20 = 2080;
          v21 = v15;
          _os_log_error_impl(&dword_236E0D000, v11, OS_LOG_TYPE_ERROR, "Failed to write %s with error: %s", buf, 0x16u);

        }
      }
      if (cf)
        CFRelease(cf);

    }
    else
    {
      v12 = *(NSObject **)(GetOsLogContext() + 8);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)v2 + 23) < 0)
          v2 = (uint64_t *)*v2;
        *(_DWORD *)buf = 136315138;
        v19 = v2;
        _os_log_error_impl(&dword_236E0D000, v12, OS_LOG_TYPE_ERROR, "Failed to write %s due to no space available or invalid path.", buf, 0xCu);
      }
      v10 = 0;
    }
    objc_msgSend(v7, "close");
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_236E3ECD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<void const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

BOOL util::writeJSONToBuffer(ctu **a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  void *v6;
  void *v7;
  void *v8;
  int v9;
  id v10;
  _BOOL8 v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  const char *v18;
  id v20;
  CFTypeRef cf;
  uint8_t buf[4];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v15 = *(NSObject **)(GetOsLogContext() + 8);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      return 0;
    *(_WORD *)buf = 0;
    v16 = "Failed to write json to buffer due to invalid buffer";
LABEL_15:
    _os_log_error_impl(&dword_236E0D000, v15, OS_LOG_TYPE_ERROR, v16, buf, 2u);
    return 0;
  }
  if (!a4)
  {
    v15 = *(NSObject **)(GetOsLogContext() + 8);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      return 0;
    *(_WORD *)buf = 0;
    v16 = "Failed to write json to buffer due to invalid bytes written parameter";
    goto LABEL_15;
  }
  if (a3)
  {
    objc_msgSend(MEMORY[0x24BDBCF08], "outputStreamToBuffer:capacity:", a2, a3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6)
    {
      objc_msgSend(v6, "open");
      if (objc_msgSend(v7, "streamStatus") == 2)
      {
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        ctu::xpc_to_cf(*a1, v8);
        v20 = 0;
        v9 = objc_msgSend(MEMORY[0x24BDD1608], "writeJSONObject:toStream:options:error:", 0xAAAAAAAAAAAAAAAALL, v7, 1, &v20);
        v10 = v20;
        v11 = v10 == 0;
        if (v10)
        {
          v12 = *(NSObject **)(GetOsLogContext() + 8);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend(v10, "localizedDescription");
            v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v14 = objc_msgSend(v13, "UTF8String");
            *(_DWORD *)buf = 136315138;
            v23 = v14;
            _os_log_error_impl(&dword_236E0D000, v12, OS_LOG_TYPE_ERROR, "Failed to write json to buffer with error: %s", buf, 0xCu);

          }
        }
        else
        {
          *a4 = v9;
        }
        objc_msgSend(v7, "close");
        if (cf)
          CFRelease(cf);

        goto LABEL_25;
      }
      v17 = *(NSObject **)(GetOsLogContext() + 8);
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
LABEL_20:
        v11 = 0;
LABEL_25:

        return v11;
      }
      *(_WORD *)buf = 0;
      v18 = "Failed to write json to buffer due to stream opening failure";
    }
    else
    {
      v17 = *(NSObject **)(GetOsLogContext() + 8);
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        goto LABEL_20;
      *(_WORD *)buf = 0;
      v18 = "Failed to write json to buffer due to invalid stream";
    }
    _os_log_error_impl(&dword_236E0D000, v17, OS_LOG_TYPE_ERROR, v18, buf, 2u);
    goto LABEL_20;
  }
  v15 = *(NSObject **)(GetOsLogContext() + 8);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    v16 = "Failed to write json to buffer due to no buffer capacity";
    goto LABEL_15;
  }
  return 0;
}

void sub_236E3F02C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void util::readJSON(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  void *v8;
  ctu *v9;
  const void *v10;
  id v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  id v18;
  _BYTE buf[12];
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_null_create();
  *a2 = v4;
  v5 = a1;
  if (*((char *)a1 + 23) < 0)
    v5 = (uint64_t *)*a1;
  v6 = (void *)MEMORY[0x24BDBCE90];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "inputStreamWithFileAtPath:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    objc_msgSend(v8, "open");
    if (objc_msgSend(v8, "streamStatus") == 2)
    {
      if ((objc_msgSend(v8, "hasBytesAvailable") & 1) != 0)
      {
        v18 = 0;
        objc_msgSend(MEMORY[0x24BDD1608], "JSONObjectWithStream:options:error:", v8, 0, &v18);
        v9 = (ctu *)objc_claimAutoreleasedReturnValue();
        v11 = v18;
        if (v11)
        {
          v12 = *(NSObject **)(GetOsLogContext() + 8);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            if (*((char *)a1 + 23) < 0)
              a1 = (uint64_t *)*a1;
            objc_msgSend(v11, "localizedDescription");
            v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v14 = objc_msgSend(v13, "UTF8String");
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = a1;
            v20 = 2080;
            v21 = v14;
            _os_log_error_impl(&dword_236E0D000, v12, OS_LOG_TYPE_ERROR, "Failed to read %s with error: %s", buf, 0x16u);

          }
        }
        else
        {
          ctu::cf_to_xpc(v9, v10);
          v16 = *(xpc_object_t *)buf;
          if (*(_QWORD *)buf && MEMORY[0x23B8056AC](*(_QWORD *)buf) == MEMORY[0x24BDACFA0])
            xpc_retain(v16);
          else
            v16 = xpc_null_create();
          v17 = xpc_null_create();
          *a2 = v16;
          xpc_release(v4);
          xpc_release(v17);
          xpc_release(*(xpc_object_t *)buf);
        }

      }
      else
      {
        v15 = *(NSObject **)(GetOsLogContext() + 8);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)a1 + 23) < 0)
            a1 = (uint64_t *)*a1;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = a1;
          _os_log_error_impl(&dword_236E0D000, v15, OS_LOG_TYPE_ERROR, "Failed to read %s due to no bytes available or invalid path.", buf, 0xCu);
        }
      }
      objc_msgSend(v8, "close");
    }
  }

}

void sub_236E3F300(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void xpc::dict::~dict(xpc_object_t *this)
{
  xpc_release(*this);
  *this = 0;
}

BasebandTransportICE *BasebandTransportICE::BasebandTransportICE(BasebandTransportICE *a1, uint64_t *a2, NSObject **a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  dispatch_object_t object;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v4 = (std::__shared_weak_count *)a2[1];
  v13 = *a2;
  v14 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *a3;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  BasebandTransport::BasebandTransport((uint64_t)a1, &v13, &object);
  if (object)
    dispatch_release(object);
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)a1 = off_25086C5D0;
  *((_QWORD *)a1 + 54) = 0;
  *((_QWORD *)a1 + 58) = 0;
  *((_QWORD *)a1 + 62) = 0;
  *((_QWORD *)a1 + 63) = 0;
  *((_QWORD *)a1 + 64) = dispatch_queue_create("BasebandTransportARI", 0);
  BasebandTransportICE::configurePhysical(a1);
  return a1;
}

void sub_236E3F4D0(_Unwind_Exception *a1)
{
  BasebandTransport *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  NSObject *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v7 = *((_QWORD *)v1 + 64);
  if (v7)
    dispatch_release(v7);
  if ((_QWORD *)*v5 == v4)
  {
    v8 = 4;
  }
  else
  {
    if (!*v5)
      goto LABEL_8;
    v8 = 5;
    v4 = (_QWORD *)*v5;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v8))(v4);
LABEL_8:
  v9 = (_QWORD *)*((_QWORD *)v1 + 58);
  if (v9 == v3)
  {
    v10 = 4;
  }
  else
  {
    if (!v9)
      goto LABEL_13;
    v10 = 5;
    v3 = (_QWORD *)*((_QWORD *)v1 + 58);
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v10))(v3);
LABEL_13:
  v11 = (_QWORD *)*((_QWORD *)v1 + 54);
  if (v11 == v2)
  {
    v12 = 4;
  }
  else
  {
    if (!v11)
      goto LABEL_18;
    v12 = 5;
    v2 = (_QWORD *)*((_QWORD *)v1 + 54);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v12))(v2);
LABEL_18:
  BasebandTransport::~BasebandTransport(v1);
  _Unwind_Resume(a1);
}

void sub_236E3F580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object)
    dispatch_release(object);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t (***BasebandTransportICE::configurePhysical(BasebandTransportICE *this))()
{
  char *v2;
  NSObject *v3;
  const char *v4;
  uint64_t (***v5)();
  uint64_t v6;
  uint64_t (***v7)();
  uint64_t v8;
  uint64_t (***result)();
  uint64_t v10;
  uint64_t (**v11)();
  BasebandTransportICE *v12;
  uint64_t (***v13)();
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (char *)this + 8;
  v3 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v11) = 0;
    _os_log_impl(&dword_236E0D000, v3, OS_LOG_TYPE_DEFAULT, "#I using physical pipe...", (uint8_t *)&v11, 2u);
  }
  if ((**(unsigned int (***)(char *, uint64_t))v2)(v2, 40))
  {
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"using physical pipe...", v4);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x23B804B24](&v11);
  }
  v11 = off_25086C918;
  v12 = this;
  v13 = &v11;
  std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](&v11, (_QWORD *)this + 59);
  v5 = v13;
  if (v13 == &v11)
  {
    v6 = 4;
    v5 = &v11;
  }
  else
  {
    if (!v13)
      goto LABEL_10;
    v6 = 5;
  }
  (*v5)[v6]();
LABEL_10:
  v11 = off_25086C998;
  v12 = this;
  v13 = &v11;
  std::__function::__value_func<BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](&v11, (_QWORD *)this + 55);
  v7 = v13;
  if (v13 == &v11)
  {
    v8 = 4;
    v7 = &v11;
  }
  else
  {
    if (!v13)
      goto LABEL_15;
    v8 = 5;
  }
  (*v7)[v8]();
LABEL_15:
  v11 = off_25086CA18;
  v12 = this;
  v13 = &v11;
  std::__function::__value_func<BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](&v11, (_QWORD *)this + 51);
  result = v13;
  if (v13 == &v11)
  {
    v10 = 4;
    result = &v11;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
  }
  return (uint64_t (***)())(*result)[v10]();
}

uint64_t (***BasebandTransportICE::configureARIPipe(BasebandTransportICE *this))()
{
  char *v2;
  NSObject *v3;
  const char *v4;
  uint64_t (***v5)();
  uint64_t v6;
  uint64_t (***v7)();
  uint64_t v8;
  uint64_t (***result)();
  uint64_t v10;
  uint64_t (**v11)();
  BasebandTransportICE *v12;
  uint64_t (***v13)();
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (char *)this + 8;
  v3 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v11) = 0;
    _os_log_impl(&dword_236E0D000, v3, OS_LOG_TYPE_DEFAULT, "#I using ARI client pipe...", (uint8_t *)&v11, 2u);
  }
  if ((**(unsigned int (***)(char *, uint64_t))v2)(v2, 40))
  {
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"using ARI client pipe...", v4);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x23B804B24](&v11);
  }
  v11 = off_25086C720;
  v12 = this;
  v13 = &v11;
  std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](&v11, (_QWORD *)this + 59);
  v5 = v13;
  if (v13 == &v11)
  {
    v6 = 4;
    v5 = &v11;
  }
  else
  {
    if (!v13)
      goto LABEL_10;
    v6 = 5;
  }
  (*v5)[v6]();
LABEL_10:
  v11 = off_25086C7B0;
  v13 = &v11;
  std::__function::__value_func<BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](&v11, (_QWORD *)this + 55);
  v7 = v13;
  if (v13 == &v11)
  {
    v8 = 4;
    v7 = &v11;
  }
  else
  {
    if (!v13)
      goto LABEL_15;
    v8 = 5;
  }
  (*v7)[v8]();
LABEL_15:
  v11 = off_25086C840;
  v12 = this;
  v13 = &v11;
  std::__function::__value_func<BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](&v11, (_QWORD *)this + 51);
  result = v13;
  if (v13 == &v11)
  {
    v10 = 4;
    result = &v11;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
  }
  return (uint64_t (***)())(*result)[v10]();
}

uint64_t BasebandTransportICE::open(uint64_t a1, uint64_t *a2, const void **a3)
{
  uint64_t v6;
  void *v7;
  __int128 v8;
  void *v9;
  BOOL v10;
  _BOOL8 v11;
  NSObject *v12;
  const char *v13;
  __int128 v14;
  void *v15;
  void *v17;
  __int128 v18[2];
  uint64_t v19;
  void *v20;
  __int128 v21[2];
  uint64_t v22;
  uint8_t buf[64];
  void *v24;
  __int128 v25[2];
  uint64_t v26;

  if (*(_DWORD *)a2 != 8)
  {
    v8 = *((_OWORD *)a2 + 1);
    v18[0] = *(_OWORD *)a2;
    v18[1] = v8;
    v19 = a2[4];
    if (*a3)
      v9 = _Block_copy(*a3);
    else
      v9 = 0;
    v17 = v9;
    v11 = BasebandTransport::open((BasebandTransport *)a1, v18, &v17);
    if (v9)
      _Block_release(v9);
    goto LABEL_25;
  }
  v6 = *a2;
  v25[1] = *((_OWORD *)a2 + 1);
  v26 = a2[4];
  *(_QWORD *)&v25[0] = v6;
  *((_QWORD *)&v25[0] + 1) = 1;
  if (*a3)
    v7 = _Block_copy(*a3);
  else
    v7 = 0;
  v24 = v7;
  v10 = BasebandTransport::open((BasebandTransport *)a1, v25, &v24);
  if (v7)
    _Block_release(v7);
  if (v10)
  {
    v11 = 1;
LABEL_25:
    BasebandTransportICE::configurePhysical((BasebandTransportICE *)a1);
    return v11;
  }
  v12 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_236E0D000, v12, OS_LOG_TYPE_DEFAULT, "#I Physical transport not available.  Trying ARI pipe...", buf, 2u);
  }
  if ((**(unsigned int (***)(uint64_t, uint64_t))(a1 + 8))(a1 + 8, 40))
  {
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Physical transport not available.  Trying ARI pipe...", v13);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x23B804B24](buf);
  }
  v14 = *((_OWORD *)a2 + 1);
  v21[0] = *(_OWORD *)a2;
  v21[1] = v14;
  v22 = a2[4];
  if (*a3)
    v15 = _Block_copy(*a3);
  else
    v15 = 0;
  v20 = v15;
  v11 = BasebandTransportICE::openARIClientPipe(a1, v21, &v20);
  if (v15)
    _Block_release(v15);
  if (!v11)
    goto LABEL_25;
  BasebandTransportICE::configureARIPipe((BasebandTransportICE *)a1);
  return 1;
}

BOOL BasebandTransportICE::openARIClientPipe(uint64_t a1, __int128 *a2, void **a3)
{
  _QWORD *v3;
  __int128 v6;
  __int128 v7;
  void *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unsigned int *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unsigned __int8 v19;
  AriHost *v20;
  int v21;
  _BOOL8 v22;
  unsigned int (***v23)(_QWORD, uint64_t);
  NSObject *v24;
  const char *v25;
  unsigned int v26;
  const char *v27;
  const char *v28;
  std::__shared_weak_count *v29;
  unint64_t v31;
  _QWORD v32[2];
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  unsigned int v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v7 = a2[1];
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 32);
  *(_OWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 104) = v6;
  v8 = *a3;
  if (*a3)
    v8 = _Block_copy(v8);
  v9 = *(const void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v8;
  if (v9)
    _Block_release(v9);
  *(_DWORD *)(a1 + 504) = 0;
  v10 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v10 || (v11 = *(_QWORD *)(a1 + 72), (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  v14 = (unsigned int *)(a1 + 504);
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  {
    std::string::basic_string[abi:ne180100]<0>(&BasebandTransport::getName(void)::kName, "ipc.bb");
  }
  if (byte_25645252F >= 0)
    v20 = (AriHost *)&BasebandTransport::getName(void)::kName;
  else
    v20 = (AriHost *)BasebandTransport::getName(void)::kName;
  v21 = AriHost::RegisterClient(v20, (const char *)(a1 + 504), *(int **)(a1 + 512), (dispatch_queue_s *)(1000 * *((_DWORD *)a2 + 2)));
  if (v21)
  {
    v22 = 0;
    v23 = (unsigned int (***)(_QWORD, uint64_t))(a1 + 8);
    v24 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      goto LABEL_22;
  }
  else
  {
    v3 = v32;
    v32[0] = v11;
    v32[1] = v13;
    do
      v31 = __ldxr(p_shared_weak_owners);
    while (__stxr(v31 + 1, p_shared_weak_owners));
    v22 = AriHost::SetRTEventHandler() == 0;
    v23 = (unsigned int (***)(_QWORD, uint64_t))(a1 + 8);
    v24 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      goto LABEL_22;
  }
  v25 = "fail";
  v26 = *v14;
  if (v22)
    v25 = "success";
  *(_DWORD *)buf = 136315394;
  v34 = v25;
  v35 = 1024;
  v36 = v26;
  _os_log_impl(&dword_236E0D000, v24, OS_LOG_TYPE_DEFAULT, "#I ARI pipe open %s ctx 0x%x", buf, 0x12u);
LABEL_22:
  if ((**v23)(v23, 40))
  {
    v28 = "fail";
    if (v22)
      v28 = "success";
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"ARI pipe open %s ctx 0x%x", v27, v28, *v14);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x23B804B24](buf);
  }
  if (!v21)
  {
    v29 = (std::__shared_weak_count *)v3[1];
    if (v29)
      std::__shared_weak_count::__release_weak(v29);
  }
  std::__shared_weak_count::__release_weak(v13);
  return v22;
}

void sub_236E3FEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  std::__shared_weak_count *v18;

  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransportICE::write(BasebandTransportICE *this, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4, char a5, int a6)
{
  uint64_t v6;
  int v8;
  char v9;
  unsigned int *v10;
  uint64_t v11;
  const unsigned __int8 *v12;

  v12 = a2;
  v10 = a4;
  v11 = a3;
  v9 = a5;
  v8 = a6;
  v6 = *((_QWORD *)this + 54);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, const unsigned __int8 **, uint64_t *, unsigned int **, char *, int *))(*(_QWORD *)v6 + 48))(v6, &v12, &v11, &v10, &v9, &v8);
}

uint64_t BasebandTransportICE::read(BasebandTransportICE *this, unsigned __int8 *a2, uint64_t a3, unsigned int *a4, char a5, int a6)
{
  uint64_t v6;
  int v8;
  char v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned __int8 *v12;

  v12 = a2;
  v10 = a4;
  v11 = a3;
  v9 = a5;
  v8 = a6;
  v6 = *((_QWORD *)this + 58);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, unsigned __int8 **, uint64_t *, unsigned int **, char *, int *))(*(_QWORD *)v6 + 48))(v6, &v12, &v11, &v10, &v9, &v8);
}

uint64_t BasebandTransportICE::close_sync(BasebandTransportICE *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 62);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t ___ZN20BasebandTransportICE17openARIClientPipeEN17BasebandTransport10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  const char *v6;
  const char *v7;
  unsigned __int8 v8;
  __int128 *v9;
  unsigned __int8 v10;
  size_t v11;
  size_t v12;
  __int128 *p_dst;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int128 *Name;
  __int128 *v22;
  std::__shared_weak_count *v23;
  __int128 __dst;
  unint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    return 0xFFFFFFFFLL;
  v3 = a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  v23 = v4;
  if (!v4)
    return 0xFFFFFFFFLL;
  if (!a1[5])
  {
    v15 = v4;
    v14 = 0xFFFFFFFFLL;
LABEL_27:
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    return v14;
  }
  v5 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    Name = BasebandTransport::getName((BasebandTransport *)v3);
    if (*((char *)Name + 23) >= 0)
      v22 = Name;
    else
      v22 = *(__int128 **)Name;
    LODWORD(__dst) = 136315138;
    *(_QWORD *)((char *)&__dst + 4) = v22;
    _os_log_error_impl(&dword_236E0D000, v5, OS_LOG_TYPE_ERROR, "Got AriHost::ARI_RT_REINIT callback for %s", (uint8_t *)&__dst, 0xCu);
  }
  v7 = (const char *)&BasebandTransport::getName(void)::kName;
  if ((**(unsigned int (***)(uint64_t, uint64_t))(v3 + 8))(v3 + 8, 80))
  {
    {
      std::string::basic_string[abi:ne180100]<0>(&BasebandTransport::getName(void)::kName, "ipc.bb");
    }
    if (byte_25645252F >= 0)
      v9 = &BasebandTransport::getName(void)::kName;
    else
      v9 = (__int128 *)BasebandTransport::getName(void)::kName;
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Got AriHost::ARI_RT_REINIT callback for %s", v6, v9);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x23B804B24](&__dst);
  }
  {
    std::string::basic_string[abi:ne180100]<0>(&BasebandTransport::getName(void)::kName, "ipc.bb");
  }
  if (byte_25645252F < 0)
    v7 = (const char *)BasebandTransport::getName(void)::kName;
  v11 = strlen(v7);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v16 = v11 | 7;
    v17 = v16 + 1;
    p_dst = (__int128 *)operator new(v16 + 1);
    *((_QWORD *)&__dst + 1) = v12;
    v25 = v17 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_23;
  }
  HIBYTE(v25) = v11;
  p_dst = &__dst;
  if (v11)
LABEL_23:
    memmove(p_dst, v7, v12);
  *((_BYTE *)p_dst + v12) = 0;
  AriHost::ReRegisterClient();
  if (SHIBYTE(v25) < 0)
    operator delete((void *)__dst);
  v14 = 0;
  v15 = v23;
  if (v23)
    goto LABEL_27;
  return v14;
}

void sub_236E402B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL BasebandTransportICE::writeARIClientPipe(BasebandTransportICE *this, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  int started;
  std::__shared_weak_count *v16;
  char *v17;
  NSObject *v18;
  const char *v19;
  unint64_t v20;
  uint8_t buf[4];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v5 || (v8 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
  {
    if (*((_DWORD *)this + 127))
    {
      do
LABEL_9:
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      started = AriHost::Send();
      v16 = v9;
      goto LABEL_11;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (*((_DWORD *)this + 127))
      goto LABEL_9;
  }
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  started = AriHost::StartStream();
  v16 = v9;
LABEL_11:
  std::__shared_weak_count::__release_weak(v16);
  if (started)
  {
    v17 = (char *)this + 8;
    v18 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v23 = a3;
      _os_log_error_impl(&dword_236E0D000, v18, OS_LOG_TYPE_ERROR, "Failed to send %zu bytes on ARI pipe", buf, 0xCu);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v17)(v17, 80))
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Failed to send %zu bytes on ARI pipe", v19, a3);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x23B804B24](buf);
    }
  }
  else if (a4)
  {
    *a4 = a3;
  }
  std::__shared_weak_count::__release_weak(v9);
  return started == 0;
}

uint64_t ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke(_QWORD *a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD block[6];
  int v15;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return 0xFFFFFFFFLL;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return 0xFFFFFFFFLL;
  v9 = v8;
  if (a1[5])
  {
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_2;
    block[3] = &__block_descriptor_tmp_10;
    block[4] = v7;
    block[5] = a2;
    v15 = a3;
    dispatch_async(*(dispatch_queue_t *)(v7 + 152), block);
    v10 = 0;
  }
  else
  {
    v10 = 0xFFFFFFFFLL;
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return v10;
}

void ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  size_t v5;
  void *v6;
  const void *v7;
  size_t v8;
  void *v9;
  void *__p;
  _BYTE *v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 128);
  if (v3)
  {
    __p = 0;
    v11 = 0;
    v12 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)v3 + 8))(v3, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), &__p);
    v4 = __p;
    v5 = v11 - (_BYTE *)__p;
    if (*(_BYTE *)(v2 + 136))
    {
      v6 = malloc_type_malloc(v11 - (_BYTE *)__p, 0x6FF6341AuLL);
      memcpy(v6, v4, v5);
    }
    (*(void (**)(void))(*(_QWORD *)(v2 + 144) + 16))();
    if (__p)
    {
      v11 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v7 = *(const void **)(a1 + 40);
    v8 = *(unsigned int *)(a1 + 48);
    if (*(_BYTE *)(v2 + 136))
    {
      v9 = malloc_type_malloc(v8, 0x6FF6341AuLL);
      memcpy(v9, v7, v8);
    }
    (*(void (**)(void))(*(_QWORD *)(v2 + 144) + 16))();
  }
}

void sub_236E4083C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BasebandTransportICE::sendToDataHandler(BasebandTransportICE *this, unsigned __int8 *a2, size_t size)
{
  void *v6;

  if (!*((_BYTE *)this + 136))
    return (*(uint64_t (**)(void))(*((_QWORD *)this + 18) + 16))();
  v6 = malloc_type_malloc(size, 0x6FF6341AuLL);
  memcpy(v6, a2, size);
  return (*(uint64_t (**)(void))(*((_QWORD *)this + 18) + 16))();
}

uint64_t ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_13(_QWORD *a1, AriMsg *a2, unsigned int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  int BufCtx;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD block[6];
  unsigned int v18;
  std::__shared_weak_count *v20;
  uint8_t buf[4];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return 0xFFFFFFFFLL;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  v20 = v8;
  if (!v8)
    return 0xFFFFFFFFLL;
  v9 = v8;
  if (a1[5])
  {
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_2_14;
    block[3] = &__block_descriptor_tmp_15;
    block[4] = v7;
    block[5] = a2;
    v18 = a3;
    dispatch_async(*(dispatch_queue_t *)(v7 + 152), block);
    BufCtx = AriMsg::GetBufCtx(a2, (const unsigned __int8 *)a3);
    *(_DWORD *)(v7 + 508) = BufCtx;
    v11 = *(NSObject **)(v7 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v22 = BufCtx;
      _os_log_impl(&dword_236E0D000, v11, OS_LOG_TYPE_DEFAULT, "#I bypass will use ctx id 0x%x", buf, 8u);
    }
    if ((**(unsigned int (***)(uint64_t, uint64_t))(v7 + 8))(v7 + 8, 40))
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"bypass will use ctx id 0x%x", v12, *(unsigned int *)(v7 + 508));
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x23B804B24](buf);
    }
    v13 = 0;
  }
  else
  {
    v13 = 0xFFFFFFFFLL;
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return v13;
}

void ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_2_14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  size_t v5;
  void *v6;
  const void *v7;
  size_t v8;
  void *v9;
  void *__p;
  _BYTE *v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 128);
  if (v3)
  {
    __p = 0;
    v11 = 0;
    v12 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)v3 + 8))(v3, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), &__p);
    v4 = __p;
    v5 = v11 - (_BYTE *)__p;
    if (*(_BYTE *)(v2 + 136))
    {
      v6 = malloc_type_malloc(v11 - (_BYTE *)__p, 0x6FF6341AuLL);
      memcpy(v6, v4, v5);
    }
    (*(void (**)(void))(*(_QWORD *)(v2 + 144) + 16))();
    if (__p)
    {
      v11 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v7 = *(const void **)(a1 + 40);
    v8 = *(unsigned int *)(a1 + 48);
    if (*(_BYTE *)(v2 + 136))
    {
      v9 = malloc_type_malloc(v8, 0x6FF6341AuLL);
      memcpy(v9, v7, v8);
    }
    (*(void (**)(void))(*(_QWORD *)(v2 + 144) + 16))();
  }
}

void sub_236E40C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BasebandTransportICE::closeARIClientPipe_sync(BasebandTransportICE *this)
{
  AriHost::EndStream((AriHost *)*((unsigned int *)this + 127));
  *((_DWORD *)this + 127) = 0;
  AriHost::DeregisterClient((AriHost *)*((unsigned int *)this + 126));
  *((_DWORD *)this + 126) = 0;
  return 1;
}

void BasebandTransportICE::~BasebandTransportICE(BasebandTransportICE *this)
{
  NSObject *v2;
  BasebandTransportICE *v3;
  uint64_t v4;
  BasebandTransportICE *v5;
  uint64_t v6;
  BasebandTransportICE *v7;
  uint64_t v8;

  *(_QWORD *)this = off_25086C5D0;
  v2 = *((_QWORD *)this + 64);
  if (v2)
    dispatch_release(v2);
  v3 = (BasebandTransportICE *)*((_QWORD *)this + 62);
  if (v3 == (BasebandTransportICE *)((char *)this + 472))
  {
    v4 = 4;
    v3 = (BasebandTransportICE *)((char *)this + 472);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  v5 = (BasebandTransportICE *)*((_QWORD *)this + 58);
  if (v5 == (BasebandTransportICE *)((char *)this + 440))
  {
    v6 = 4;
    v5 = (BasebandTransportICE *)((char *)this + 440);
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_13:
  v7 = (BasebandTransportICE *)*((_QWORD *)this + 54);
  if (v7 == (BasebandTransportICE *)((char *)this + 408))
  {
    v8 = 4;
    v7 = (BasebandTransportICE *)((char *)this + 408);
    goto LABEL_17;
  }
  if (v7)
  {
    v8 = 5;
LABEL_17:
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
  }
  BasebandTransport::~BasebandTransport(this);
}

{
  NSObject *v2;
  BasebandTransportICE *v3;
  uint64_t v4;
  BasebandTransportICE *v5;
  uint64_t v6;
  BasebandTransportICE *v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)this = off_25086C5D0;
  v2 = *((_QWORD *)this + 64);
  if (v2)
    dispatch_release(v2);
  v3 = (BasebandTransportICE *)*((_QWORD *)this + 62);
  if (v3 == (BasebandTransportICE *)((char *)this + 472))
  {
    v4 = 4;
    v3 = (BasebandTransportICE *)((char *)this + 472);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  v5 = (BasebandTransportICE *)*((_QWORD *)this + 58);
  if (v5 == (BasebandTransportICE *)((char *)this + 440))
  {
    v6 = 4;
    v5 = (BasebandTransportICE *)((char *)this + 440);
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_13:
  v7 = (BasebandTransportICE *)*((_QWORD *)this + 54);
  if (v7 == (BasebandTransportICE *)((char *)this + 408))
  {
    v8 = 4;
    v7 = (BasebandTransportICE *)((char *)this + 408);
    goto LABEL_17;
  }
  if (v7)
  {
    v8 = 5;
LABEL_17:
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
  }
  BasebandTransport::~BasebandTransport(this);
  operator delete(v9);
}

_QWORD *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_25086C720;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_25086C720;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  AriHost::EndStream((AriHost *)*(unsigned int *)(v1 + 508));
  *(_DWORD *)(v1 + 508) = 0;
  AriHost::DeregisterClient((AriHost *)*(unsigned int *)(v1 + 504));
  *(_DWORD *)(v1 + 504) = 0;
  return 1;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE16configureARIPipeEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE16configureARIPipeEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::target_type()
{
}

_QWORD *std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, 24);
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_236E410AC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_25086C7B0;
  return result;
}

void std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_25086C7B0;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD **a4)
{
  **a4 = 0;
  return 0;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE16configureARIPipeEvE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE16configureARIPipeEvE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::target_type()
{
}

_QWORD *std::__function::__value_func<BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, 24);
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_236E41324(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_25086C840;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_25086C840;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int **a4)
{
  BasebandTransportICE *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  NSObject *v8;
  uint64_t v9;
  _BOOL8 v10;
  _QWORD v12[10];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];
  void *__p;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD block[6];

  v4 = *(BasebandTransportICE **)(a1 + 8);
  v5 = *a2;
  v6 = *a3;
  v7 = *a4;
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x4002000000;
  v21[3] = __Block_byref_object_copy__0;
  v21[4] = __Block_byref_object_dispose__0;
  v23 = 0;
  v24 = 0;
  __p = 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = v5;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = v6;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 0x40000000;
  v12[2] = ___ZZN20BasebandTransportICE16configureARIPipeEvENK3__2clEPKhmPjbj_block_invoke;
  v12[3] = &unk_25086C8B8;
  v12[8] = v5;
  v12[9] = v6;
  v12[4] = v21;
  v12[5] = &v17;
  v12[6] = &v13;
  v12[7] = v4;
  v25 = v12;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_0;
  block[3] = &__block_descriptor_tmp_21_0;
  block[4] = (char *)v4 + 72;
  block[5] = &v25;
  v8 = *((_QWORD *)v4 + 11);
  if (*((_QWORD *)v4 + 12))
  {
    dispatch_async_and_wait(v8, block);
    v9 = v14[3];
    if (v9)
    {
LABEL_3:
      v10 = BasebandTransportICE::writeARIClientPipe(v4, (const unsigned __int8 *)v18[3], v9, v7);
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_sync(v8, block);
    v9 = v14[3];
    if (v9)
      goto LABEL_3;
  }
  v10 = 1;
LABEL_6:
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(v21, 8);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_236E41504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE16configureARIPipeEvE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE16configureARIPipeEvE3$_2"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::target_type()
{
}

__n128 __Block_byref_object_copy__0(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

_QWORD *std::__function::__value_func<BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, 24);
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_236E4181C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_25086C918;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_25086C918;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return BasebandTransport::close_sync(*(BasebandTransport **)(a1 + 8));
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE17configurePhysicalEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE17configurePhysicalEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_25086C998;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_25086C998;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::operator()(uint64_t a1, unsigned __int8 **a2, unint64_t *a3, unsigned int **a4)
{
  return BasebandTransport::read(*(BasebandTransport **)(a1 + 8), *a2, *a3, *a4);
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE17configurePhysicalEvE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE17configurePhysicalEvE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::target_type()
{
}

_QWORD *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_25086CA18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_25086CA18;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::operator()(uint64_t a1, const unsigned __int8 **a2, uint64_t *a3, unsigned int **a4)
{
  return BasebandTransport::write(*(BasebandTransport **)(a1 + 8), *a2, *a3, *a4);
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE17configurePhysicalEvE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE17configurePhysicalEvE3$_2"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::target_type()
{
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  void *v1;

  std::exception::~exception(this);
  operator delete(v1);
}

BOOL trace::isModeActive(int a1)
{
  return !a1 || a1 == 6;
}

const char *trace::toString(unsigned int a1)
{
  if (a1 > 6)
    return "Unknown";
  else
    return off_25086CB28[a1];
}

{
  if (a1 > 3)
    return "unknown";
  else
    return off_25086CB60[a1];
}

{
  if (a1 > 2)
    return "Unknown";
  else
    return off_25086CB80[a1];
}

{
  if (a1 > 3)
    return "Unknown";
  else
    return off_25086CB98[a1];
}

const char *trace::dal::toString(unsigned int a1)
{
  if (a1 > 6)
    return "TraceLevelUnknown";
  else
    return off_25086CBB8[a1];
}

{
  if (a1 > 2)
    return "TraceModeUnknown";
  else
    return off_25086CBF0[a1];
}

abm::trace::TraceInfoEntry *abm::trace::TraceInfoEntry::TraceInfoEntry(abm::trace::TraceInfoEntry *this)
{
  *(_DWORD *)this = 0;
  Timestamp::Timestamp((abm::trace::TraceInfoEntry *)((char *)this + 8));
  *(_WORD *)((char *)this + 55) = 0;
  *((_BYTE *)this + 32) = 0;
  *(_WORD *)((char *)this + 79) = 0;
  *((_BYTE *)this + 103) = 0;
  return this;
}

{
  *(_DWORD *)this = 0;
  Timestamp::Timestamp((abm::trace::TraceInfoEntry *)((char *)this + 8));
  *(_WORD *)((char *)this + 55) = 0;
  *((_BYTE *)this + 32) = 0;
  *(_WORD *)((char *)this + 79) = 0;
  *((_BYTE *)this + 103) = 0;
  return this;
}

void abm::trace::TraceInfo::create(const void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v7;
  unint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v4 = operator new(0x78uLL);
  abm::trace::TraceInfo::TraceInfo((uint64_t)v4, a1);
  *a2 = v4;
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)off_25086CC18;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  a2[1] = v5;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 2);
  if (v7)
  {
    if (v7->__shared_owners_ != -1)
      return;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *((_QWORD *)v4 + 1) = v4;
    *((_QWORD *)v4 + 2) = v5;
    std::__shared_weak_count::__release_weak(v7);
  }
  else
  {
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    *((_QWORD *)v4 + 1) = v4;
    *((_QWORD *)v4 + 2) = v5;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_236E41DB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<abm::trace::TraceInfo>::~unique_ptr[abi:ne180100]((abm::trace::TraceInfo **)va);
  _Unwind_Resume(a1);
}

void sub_236E41DC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t abm::trace::TraceInfo::TraceInfo(uint64_t a1, const void **a2)
{
  _QWORD *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  xpc_object_t v12;
  xpc_object_t v13;
  _QWORD *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  _QWORD *v18;
  xpc_object_t v19;
  ctu::Gestalt *v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  ctu::Gestalt *v32;
  uint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  unint64_t *v42;
  unint64_t v43;
  NSObject *v44;
  uint8_t buf[16];

  v4 = (_QWORD *)ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)a1, "com.apple.telephony.abm", "trace.info");
  v4[3] = 0xAAAAAAAAAAAAAAAALL;
  v4[1] = 0;
  v4[2] = 0;
  v5 = *((char *)a2 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = v6 + 11;
  v4[4] = 0xAAAAAAAAAAAAAAAALL;
  v4[5] = 0xAAAAAAAAAAAAAAAALL;
  if (v6 + 11 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v10 | 0x8000000000000000;
    *(_QWORD *)(a1 + 24) = v8;
  }
  else
  {
    v4[4] = 0;
    v4[5] = 0;
    v4[3] = 0;
    v8 = v4 + 3;
    *(_BYTE *)(a1 + 47) = v7;
    if (!v6)
      goto LABEL_15;
  }
  if (v5 >= 0)
    v11 = a2;
  else
    v11 = *a2;
  memmove(v8, v11, v6);
LABEL_15:
  strcpy((char *)v8 + v6, "/trace.info");
  v12 = xpc_array_create(0, 0);
  v13 = v12;
  v14 = (_QWORD *)(a1 + 48);
  if (v12)
  {
    *v14 = v12;
  }
  else
  {
    v13 = xpc_null_create();
    *v14 = v13;
    if (!v13)
    {
      v15 = xpc_null_create();
      v13 = 0;
      goto LABEL_22;
    }
  }
  if (MEMORY[0x23B8056AC](v13) == MEMORY[0x24BDACF78])
  {
    xpc_retain(v13);
    goto LABEL_23;
  }
  v15 = xpc_null_create();
LABEL_22:
  *v14 = v15;
LABEL_23:
  xpc_release(v13);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v16 = xpc_dictionary_create(0, 0, 0);
  v17 = v16;
  v18 = (_QWORD *)(a1 + 80);
  if (v16)
  {
    *v18 = v16;
  }
  else
  {
    v17 = xpc_null_create();
    *v18 = v17;
    if (!v17)
    {
      v19 = xpc_null_create();
      v17 = 0;
      goto LABEL_30;
    }
  }
  if (MEMORY[0x23B8056AC](v17) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v17);
    goto LABEL_31;
  }
  v19 = xpc_null_create();
LABEL_30:
  *v18 = v19;
LABEL_31:
  xpc_release(v17);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  v20 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v21 = off_2542B5598;
  if (!off_2542B5598)
  {
    ctu::Gestalt::create_default_global(v20);
    v22 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v23 = (std::__shared_weak_count *)*(&off_2542B5598 + 1);
    off_2542B5598 = v22;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v21 = off_2542B5598;
  }
  v26 = (std::__shared_weak_count *)*(&off_2542B5598 + 1);
  if (*(&off_2542B5598 + 1))
  {
    v27 = (unint64_t *)(*(&off_2542B5598 + 1) + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 144))(v21))
    v29 = 1000;
  else
    v29 = 500;
  if (v26)
  {
    v30 = (unint64_t *)&v26->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  *(_DWORD *)(a1 + 112) = v29;
  v32 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v33 = off_2542B5598;
  if (!off_2542B5598)
  {
    ctu::Gestalt::create_default_global(v32);
    v34 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v35 = (std::__shared_weak_count *)*(&off_2542B5598 + 1);
    off_2542B5598 = v34;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v33 = off_2542B5598;
  }
  v38 = (std::__shared_weak_count *)*(&off_2542B5598 + 1);
  if (*(&off_2542B5598 + 1))
  {
    v39 = (unint64_t *)(*(&off_2542B5598 + 1) + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 144))(v33))
    v41 = 15;
  else
    v41 = 14;
  if (v38)
  {
    v42 = (unint64_t *)&v38->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  *(_DWORD *)(a1 + 116) = v41;
  v44 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_236E0D000, v44, OS_LOG_TYPE_DEBUG, "#D New Trace Info", buf, 2u);
  }
  return a1;
}

void sub_236E42284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void **v4;
  xpc_object_t *v5;
  xpc_object_t *v6;
  std::__shared_weak_count *v8;
  va_list va;

  va_start(va, a3);
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  std::__tree<std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>,std::__map_value_compare<abm::trace::TraceInfoState,std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>,std::less<abm::trace::TraceInfoState>,true>,std::allocator<std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>>>::destroy(*(_QWORD **)(v3 + 96));
  xpc::dict::~dict(v6);
  std::vector<abm::trace::TraceInfoEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  xpc::array::~array(v5);
  if (*(char *)(v3 + 47) < 0)
  {
    operator delete(*v4);
    v8 = *(std::__shared_weak_count **)(v3 + 16);
    if (v8)
      goto LABEL_3;
  }
  else
  {
    v8 = *(std::__shared_weak_count **)(v3 + 16);
    if (v8)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v8);
      MEMORY[0x23B804ADC](v3);
      _Unwind_Resume(a1);
    }
  }
  MEMORY[0x23B804ADC](v3);
  _Unwind_Resume(a1);
}

void sub_236E42358()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    JUMPOUT(0x236E4231CLL);
  JUMPOUT(0x236E42338);
}

void abm::trace::TraceInfo::init(os_log_t *this)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v2 = 0;
    _os_log_debug_impl(&dword_236E0D000, v1, OS_LOG_TYPE_DEBUG, "#D New Trace Info", v2, 2u);
  }
}

void xpc::array::~array(xpc_object_t *this)
{
  xpc_release(*this);
  *this = 0;
}

void abm::trace::TraceInfo::~TraceInfo(abm::trace::TraceInfo *this)
{
  std::__shared_weak_count *v2;
  void **v3;

  std::__tree<std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>,std::__map_value_compare<abm::trace::TraceInfoState,std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>,std::less<abm::trace::TraceInfoState>,true>,std::allocator<std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>>>::destroy(*((_QWORD **)this + 12));
  xpc_release(*((xpc_object_t *)this + 10));
  *((_QWORD *)this + 10) = 0;
  v3 = (void **)((char *)this + 56);
  std::vector<abm::trace::TraceInfoEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
  xpc_release(*((xpc_object_t *)this + 6));
  *((_QWORD *)this + 6) = 0;
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x23B804ADCLL);
}

const char *abm::trace::TraceInfo::asString(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xF)
    return "Unknown";
  else
    return off_25086CCD8[a2];
}

void abm::trace::TraceInfo::push(uint64_t a1, int a2, const std::string *a3, _OWORD *a4, const std::string *a5, const std::string *a6)
{
  __int128 v12;
  char v13[8];
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *__p;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[32];
  unint64_t v27;

  v27 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v26 = v12;
  *(_OWORD *)&v26[16] = v12;
  v24 = v12;
  v25 = v12;
  v22 = v12;
  v23 = v12;
  Timestamp::Timestamp((Timestamp *)((char *)&v22 + 8));
  *(_WORD *)((char *)&v25 + 7) = 0;
  LOBYTE(v24) = 0;
  *(_WORD *)&v26[15] = 0;
  HIBYTE(v27) = 0;
  LODWORD(v22) = a2;
  if ((__int128 *)((char *)&v22 + 8) != a4)
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>((uint64_t)&v22 + 8, *(_QWORD **)a4, (_QWORD *)a4 + 1);
  std::string::operator=((std::string *)&v24, a3);
  std::string::operator=((std::string *)((char *)&v25 + 8), a5);
  std::string::operator=((std::string *)&v26[16], a6);
  abm::trace::TraceInfoEntry::TraceInfoEntry((abm::trace::TraceInfoEntry *)v13, (const abm::trace::TraceInfoEntry *)&v22);
  abm::trace::TraceInfo::push(a1, v13);
  if (v21 < 0)
  {
    operator delete(__p);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_5:
      if ((v17 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_12;
    }
  }
  else if ((v19 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(v18);
  if ((v17 & 0x80000000) == 0)
  {
LABEL_6:
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v14, v15);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v16);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v14, v15);
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
LABEL_7:
    if ((v26[15] & 0x80000000) == 0)
      goto LABEL_8;
LABEL_14:
    operator delete(*((void **)&v25 + 1));
    if ((SBYTE7(v25) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_15:
    operator delete((void *)v24);
    goto LABEL_9;
  }
LABEL_13:
  operator delete(*(void **)&v26[16]);
  if ((v26[15] & 0x80000000) != 0)
    goto LABEL_14;
LABEL_8:
  if (SBYTE7(v25) < 0)
    goto LABEL_15;
LABEL_9:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v22 + 8, (_QWORD *)v23);
}

void sub_236E42654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  abm::trace::TraceInfoEntry::~TraceInfoEntry((void **)va);
  abm::trace::TraceInfoEntry::~TraceInfoEntry((void **)va1);
  _Unwind_Resume(a1);
}

void sub_236E42670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  abm::trace::TraceInfoEntry::~TraceInfoEntry((void **)va);
  _Unwind_Resume(a1);
}

void abm::trace::TraceInfo::push(uint64_t a1, char *a2)
{
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t v6;
  abm::trace::TraceInfoEntry *v7;
  abm::trace::TraceInfoEntry *v8;
  uint64_t v9;
  char *v10;
  void **v11;
  char *v12;
  char *v13;
  char *v14;
  void **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  NSObject *v26;
  const char *p_p;
  xpc_object_t v28;
  xpc_object_t v29;
  const char *v30;
  xpc_object_t v31;
  xpc_object_t v32;
  const char *v33;
  xpc_object_t v34;
  xpc_object_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void **v39;
  char *v40;
  void *__p;
  abm::trace::TraceInfoEntry *v42;
  __int128 v43;
  uint64_t v44;

  if (*(_DWORD *)a2 == 13)
  {
    v4 = xpc_dictionary_create(0, 0, 0);
    v5 = MEMORY[0x24BDACFA0];
    if (v4 || (v4 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x23B8056AC](v4) == v5)
      {
        xpc_retain(v4);
        v6 = v4;
      }
      else
      {
        v6 = xpc_null_create();
      }
    }
    else
    {
      v6 = xpc_null_create();
      v4 = 0;
    }
    xpc_release(v4);
    v25 = MEMORY[0x23B8056AC](v6);
    if (v25 != v5)
    {
      v26 = *(NSObject **)a1;
      if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_error_impl(&dword_236E0D000, v26, OS_LOG_TYPE_ERROR, "Failed to create entry dictionary!", (uint8_t *)&__p, 2u);
      }
      goto LABEL_58;
    }
    Timestamp::asString((uint64_t)(a2 + 8), 0, 9);
    if ((SBYTE7(v43) & 0x80u) == 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    v28 = xpc_string_create(p_p);
    if (!v28)
      v28 = xpc_null_create();
    xpc_dictionary_set_value(v6, "Timestamp", v28);
    v29 = xpc_null_create();
    xpc_release(v28);
    xpc_release(v29);
    if (SBYTE7(v43) < 0)
    {
      operator delete(__p);
      v30 = a2 + 56;
      if ((a2[79] & 0x80000000) == 0)
        goto LABEL_51;
    }
    else
    {
      v30 = a2 + 56;
      if ((a2[79] & 0x80000000) == 0)
      {
LABEL_51:
        v31 = xpc_string_create(v30);
        if (!v31)
          v31 = xpc_null_create();
        xpc_dictionary_set_value(v6, "File Name", v31);
        v32 = xpc_null_create();
        xpc_release(v31);
        xpc_release(v32);
        v33 = a2 + 80;
        if (a2[103] < 0)
          v33 = *(const char **)v33;
        v34 = xpc_string_create(v33);
        if (!v34)
          v34 = xpc_null_create();
        xpc_dictionary_set_value(v6, "File Size", v34);
        v35 = xpc_null_create();
        xpc_release(v34);
        xpc_release(v35);
        xpc_array_append_value(*(xpc_object_t *)(a1 + 48), v6);
LABEL_58:
        xpc_release(v6);
        if (v25 != v5)
          return;
        goto LABEL_80;
      }
    }
    v30 = *(const char **)v30;
    goto LABEL_51;
  }
  if (*(_DWORD *)(a1 + 116) >= *(_DWORD *)a2)
  {
    v7 = *(abm::trace::TraceInfoEntry **)(a1 + 56);
    v8 = *(abm::trace::TraceInfoEntry **)(a1 + 64);
    if (0x4EC4EC4EC4EC4EC5 * ((v8 - v7) >> 3) != *(_DWORD *)(a1 + 112))
    {
      v7 = *(abm::trace::TraceInfoEntry **)(a1 + 64);
      v16 = a1 + 72;
      v17 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v8 < v17)
      {
LABEL_31:
        abm::trace::TraceInfoEntry::TraceInfoEntry(v7, (const abm::trace::TraceInfoEntry *)a2);
        v24 = (char *)v7 + 104;
        *(_QWORD *)(a1 + 64) = (char *)v7 + 104;
LABEL_79:
        *(_QWORD *)(a1 + 64) = v24;
        goto LABEL_80;
      }
      goto LABEL_19;
    }
    if ((abm::trace::TraceInfoEntry *)((char *)v7 + 104) != v8)
    {
      v9 = 0;
      do
      {
        v10 = (char *)v7 + v9;
        *(_DWORD *)((char *)v7 + v9) = *(_DWORD *)((char *)v7 + v9 + 104);
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>((uint64_t)v7 + v9 + 8, *(_QWORD **)((char *)v7 + v9 + 112), (abm::trace::TraceInfoEntry *)((char *)v7 + v9 + 120));
        v11 = (void **)((char *)v7 + v9 + 32);
        if (*((char *)v7 + v9 + 55) < 0)
          operator delete(*v11);
        *(_OWORD *)v11 = *(_OWORD *)(v10 + 136);
        *((_QWORD *)v10 + 6) = *((_QWORD *)v10 + 19);
        v10[159] = 0;
        v10[136] = 0;
        v12 = v10 + 56;
        if (v10[79] < 0)
          operator delete(*(void **)v12);
        v13 = v10 + 160;
        v14 = (char *)v7 + v9;
        *(_OWORD *)v12 = *(_OWORD *)v13;
        *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
        *((_BYTE *)v7 + v9 + 183) = 0;
        *v13 = 0;
        v15 = (void **)((char *)v7 + v9 + 80);
        if (*((char *)v7 + v9 + 103) < 0)
          operator delete(*v15);
        *(_OWORD *)v15 = *(_OWORD *)(v14 + 184);
        *(_QWORD *)((char *)v7 + v9 + 96) = *((_QWORD *)v14 + 25);
        v14[207] = 0;
        v14[184] = 0;
        v9 += 104;
      }
      while ((abm::trace::TraceInfoEntry *)((char *)v7 + v9 + 104) != v8);
      v8 = *(abm::trace::TraceInfoEntry **)(a1 + 64);
      v7 = (abm::trace::TraceInfoEntry *)((char *)v7 + v9);
    }
    if (v8 == v7)
    {
LABEL_30:
      *(_QWORD *)(a1 + 64) = v7;
      v16 = a1 + 72;
      v17 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v7 < v17)
        goto LABEL_31;
LABEL_19:
      v18 = *(_QWORD *)(a1 + 56);
      v19 = 0x4EC4EC4EC4EC4EC5 * (((uint64_t)v7 - v18) >> 3);
      if ((unint64_t)(v19 + 1) > 0x276276276276276)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v20 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v17 - v18) >> 3);
      v21 = 2 * v20;
      if (2 * v20 <= v19 + 1)
        v21 = v19 + 1;
      if (v20 >= 0x13B13B13B13B13BLL)
        v22 = 0x276276276276276;
      else
        v22 = v21;
      v44 = v16;
      if (v22)
      {
        if (v22 > 0x276276276276276)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v23 = (char *)operator new(104 * v22);
      }
      else
      {
        v23 = 0;
      }
      __p = v23;
      v42 = (abm::trace::TraceInfoEntry *)&v23[104 * v19];
      *((_QWORD *)&v43 + 1) = &v23[104 * v22];
      abm::trace::TraceInfoEntry::TraceInfoEntry(v42, (const abm::trace::TraceInfoEntry *)a2);
      v24 = (char *)v42 + 104;
      *(_QWORD *)&v43 = (char *)v42 + 104;
      v37 = *(char **)(a1 + 56);
      v36 = *(char **)(a1 + 64);
      if (v36 == v37)
      {
        *(_QWORD *)(a1 + 56) = v42;
        *(_QWORD *)(a1 + 64) = v24;
        *(_QWORD *)(a1 + 72) = *((_QWORD *)&v43 + 1);
        goto LABEL_77;
      }
      v38 = 0;
      do
      {
        abm::trace::TraceInfoEntry::TraceInfoEntry((abm::trace::TraceInfoEntry *)((char *)v42 + v38 - 104), (const abm::trace::TraceInfoEntry *)&v36[v38 - 104]);
        v38 -= 104;
      }
      while (&v36[v38] != v37);
      v36 = *(char **)(a1 + 56);
      v39 = *(void ***)(a1 + 64);
      *(_QWORD *)(a1 + 56) = (char *)v42 + v38;
      v40 = (char *)v43;
      *(_OWORD *)(a1 + 64) = v43;
      v24 = v40;
      if (v39 == (void **)v36)
      {
LABEL_77:
        if (v36)
          operator delete(v36);
        goto LABEL_79;
      }
      while (1)
      {
        if (*((char *)v39 - 1) < 0)
        {
          operator delete(*(v39 - 3));
          if ((*((char *)v39 - 25) & 0x80000000) == 0)
          {
LABEL_71:
            if (*((char *)v39 - 49) < 0)
              goto LABEL_75;
            goto LABEL_68;
          }
        }
        else if ((*((char *)v39 - 25) & 0x80000000) == 0)
        {
          goto LABEL_71;
        }
        operator delete(*(v39 - 6));
        if (*((char *)v39 - 49) < 0)
LABEL_75:
          operator delete(*(v39 - 9));
LABEL_68:
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(v39 - 12), *(v39 - 11));
        v39 -= 13;
        if (v39 == (void **)v36)
          goto LABEL_77;
      }
    }
    while (1)
    {
      if (*((char *)v8 - 1) < 0)
      {
        operator delete(*((void **)v8 - 3));
        if ((*((char *)v8 - 25) & 0x80000000) == 0)
        {
LABEL_35:
          if (*((char *)v8 - 49) < 0)
            goto LABEL_39;
          goto LABEL_32;
        }
      }
      else if ((*((char *)v8 - 25) & 0x80000000) == 0)
      {
        goto LABEL_35;
      }
      operator delete(*((void **)v8 - 6));
      if (*((char *)v8 - 49) < 0)
LABEL_39:
        operator delete(*((void **)v8 - 9));
LABEL_32:
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v8 - 96, *((_QWORD **)v8 - 11));
      v8 = (abm::trace::TraceInfoEntry *)((char *)v8 - 104);
      if (v8 == v7)
        goto LABEL_30;
    }
  }
LABEL_80:
  abm::trace::TraceInfo::notify((abm::trace::TraceInfo *)a1, (const abm::trace::TraceInfoEntry *)a2);
}

void sub_236E42C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<abm::trace::TraceInfoEntry>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_236E42C64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 64) = v2;
  _Unwind_Resume(a1);
}

void sub_236E42CA8(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

void sub_236E42CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  if (!v10)
  {
LABEL_2:
    std::__split_buffer<abm::trace::TraceInfoEntry>::~__split_buffer((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  while (1)
  {
    v12 = v9 + v10;
    if (*(char *)(v9 + v10 + 103) < 0)
    {
      operator delete(*(void **)(v12 + 80));
      if ((*(char *)(v12 + 79) & 0x80000000) == 0)
      {
LABEL_6:
        v13 = v9 + v10;
        if (*(char *)(v9 + v10 + 55) < 0)
          goto LABEL_10;
        goto LABEL_3;
      }
    }
    else if ((*(char *)(v12 + 79) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(v9 + v10 + 56));
    v13 = v9 + v10;
    if (*(char *)(v9 + v10 + 55) < 0)
LABEL_10:
      operator delete(*(void **)(v13 + 32));
LABEL_3:
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v13 + 8, *(_QWORD **)(v13 + 16));
    v10 += 104;
    if (!v10)
      goto LABEL_2;
  }
}

void abm::trace::TraceInfoEntry::~TraceInfoEntry(void **this)
{
  if ((*((char *)this + 103) & 0x80000000) == 0)
  {
    if ((*((char *)this + 79) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(this[7]);
    if ((*((char *)this + 55) & 0x80000000) == 0)
      goto LABEL_4;
LABEL_7:
    operator delete(this[4]);
    goto LABEL_4;
  }
  operator delete(this[10]);
  if (*((char *)this + 79) < 0)
    goto LABEL_6;
LABEL_3:
  if (*((char *)this + 55) < 0)
    goto LABEL_7;
LABEL_4:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(this + 1), this[2]);
}

void abm::trace::TraceInfo::push(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  xpc_object_t v6;
  const char *v7;
  xpc_object_t v8;

  if (MEMORY[0x23B8056AC](*a3) == MEMORY[0x24BDACFA0])
  {
    v6 = (xpc_object_t)*a3;
    if (v6)
      xpc_retain(v6);
    else
      v6 = xpc_null_create();
    if (*(char *)(a2 + 23) >= 0)
      v7 = (const char *)a2;
    else
      v7 = *(const char **)a2;
    xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 80), v7, v6);
    v8 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v8);
  }
}

void abm::trace::TraceInfo::notify(abm::trace::TraceInfo *this, const abm::trace::TraceInfoEntry *a2)
{
  char *v2;
  char *v3;
  char *v4;
  int v6;
  char *v7;
  int v8;
  BOOL v9;
  char **v10;
  const void *v11;
  void *v12;
  const void *v13;
  NSObject *v14;
  void *v15;
  const void *v16;
  void *v17;
  void *v18;
  char v19[8];
  _QWORD *v20[5];
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  NSObject *v27;
  _QWORD block[4];
  void *aBlock;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  void *__p;
  char v38;

  v4 = (char *)*((_QWORD *)this + 12);
  v2 = (char *)this + 96;
  v3 = v4;
  if (v4)
  {
    v6 = *(_DWORD *)a2;
    v7 = v2;
    do
    {
      v8 = *((_DWORD *)v3 + 8);
      v9 = v8 < v6;
      if (v8 >= v6)
        v10 = (char **)v3;
      else
        v10 = (char **)(v3 + 8);
      if (!v9)
        v7 = v3;
      v3 = *v10;
    }
    while (*v10);
    if (v7 != v2 && v6 >= *((_DWORD *)v7 + 8))
    {
      v11 = (const void *)*((_QWORD *)v7 + 5);
      if (v11)
      {
        v12 = _Block_copy(v11);
        v13 = v12;
        v14 = *((_QWORD *)v7 + 6);
        v26 = v12;
        v27 = v14;
        if (!v14)
        {
          if (!v12)
            return;
          goto LABEL_37;
        }
        dispatch_retain(v14);
        if (v13)
        {
          abm::trace::TraceInfoEntry::TraceInfoEntry((abm::trace::TraceInfoEntry *)v19, a2);
          v15 = _Block_copy(v13);
          v16 = v15;
          block[0] = MEMORY[0x24BDAC760];
          block[1] = 1174405120;
          block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3abm5trace14TraceInfoEntryEEEclIJS3_EEEvDpT__block_invoke;
          block[3] = &__block_descriptor_tmp_6;
          if (v15)
            v17 = _Block_copy(v15);
          else
            v17 = 0;
          aBlock = v17;
          abm::trace::TraceInfoEntry::TraceInfoEntry((abm::trace::TraceInfoEntry *)&v30, (const abm::trace::TraceInfoEntry *)v19);
          dispatch_async(v14, block);
          if (v38 < 0)
          {
            operator delete(__p);
            if ((v36 & 0x80000000) == 0)
            {
LABEL_24:
              if ((v34 & 0x80000000) == 0)
                goto LABEL_25;
              goto LABEL_29;
            }
          }
          else if ((v36 & 0x80000000) == 0)
          {
            goto LABEL_24;
          }
          operator delete(v35);
          if ((v34 & 0x80000000) == 0)
          {
LABEL_25:
            std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v31, v32);
            v18 = aBlock;
            if (!aBlock)
            {
LABEL_31:
              if (v16)
                _Block_release(v16);
              if (v25 < 0)
              {
                operator delete(v24);
                if ((v23 & 0x80000000) == 0)
                {
LABEL_35:
                  if ((v21 & 0x80000000) == 0)
                  {
LABEL_36:
                    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v20, v20[1]);
                    dispatch_release(v14);
LABEL_37:
                    _Block_release(v13);
                    return;
                  }
LABEL_41:
                  operator delete(v20[3]);
                  goto LABEL_36;
                }
              }
              else if ((v23 & 0x80000000) == 0)
              {
                goto LABEL_35;
              }
              operator delete(v22);
              if ((v21 & 0x80000000) == 0)
                goto LABEL_36;
              goto LABEL_41;
            }
LABEL_30:
            _Block_release(v18);
            goto LABEL_31;
          }
LABEL_29:
          operator delete(v33);
          std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v31, v32);
          v18 = aBlock;
          if (!aBlock)
            goto LABEL_31;
          goto LABEL_30;
        }
      }
      else
      {
        v14 = *((_QWORD *)v7 + 6);
        if (!v14)
          return;
        dispatch_retain(v14);
      }
      dispatch_release(v14);
    }
  }
}

void sub_236E430A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *aBlock)
{
  const void *v29;

  if (aBlock)
    _Block_release(aBlock);
  if (v29)
    _Block_release(v29);
  abm::trace::TraceInfoEntry::~TraceInfoEntry(&a10);
  dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>::~callback((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_236E430E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL abm::trace::TraceInfo::flushDataToDisk(abm::trace::TraceInfo *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  const char *v6;
  xpc_object_t v7;
  void *v8;
  std::string *v9;
  _BOOL8 v10;
  NSObject *v11;
  NSObject *v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t v15;
  NSObject *v16;
  const char *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  void *v23;
  xpc_object_t v24;
  uint64_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  void *v28;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  std::string __p;
  xpc_object_t v35;
  xpc_object_t object;
  xpc_object_t value;
  void **p_buf;
  __int128 buf;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v2 = (xpc_object_t)*((_QWORD *)this + 6);
  if (v2)
    xpc_retain(*((xpc_object_t *)this + 6));
  else
    v2 = xpc_null_create();
  xpc_dictionary_set_value(*((xpc_object_t *)this + 10), "Segments", v2);
  v3 = xpc_null_create();
  xpc_release(v2);
  xpc_release(v3);
  abm::trace::TraceInfo::convertStateTransitionArray(this, &value);
  v4 = value;
  xpc_dictionary_set_value(*((xpc_object_t *)this + 10), "State Transition", value);
  v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  value = 0;
  abm::trace::TraceInfo::getHeader((NSObject **)this, &object);
  v6 = (const char *)*MEMORY[0x24BE05148];
  xpc_dictionary_set_value(*((xpc_object_t *)this + 10), (const char *)*MEMORY[0x24BE05148], object);
  v7 = object;
  object = xpc_null_create();
  xpc_release(v7);
  xpc_release(object);
  v8 = (void *)*((_QWORD *)this + 10);
  v35 = v8;
  object = 0;
  if (v8)
  {
    xpc_retain(v8);
    v9 = (std::string *)((char *)this + 24);
    if ((*((char *)this + 47) & 0x80000000) == 0)
    {
LABEL_6:
      __p = *v9;
      goto LABEL_9;
    }
  }
  else
  {
    v35 = xpc_null_create();
    v9 = (std::string *)((char *)this + 24);
    if ((*((char *)this + 47) & 0x80000000) == 0)
      goto LABEL_6;
  }
  std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
LABEL_9:
  v10 = util::writeJSON((ctu **)&v35, (uint64_t *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  xpc_release(v35);
  v35 = 0;
  v11 = *(NSObject **)this;
  v12 = *(NSObject **)this;
  if (v10)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)this + 47) < 0)
        v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v9;
      _os_log_impl(&dword_236E0D000, v11, OS_LOG_TYPE_DEFAULT, "#I Written %s", (uint8_t *)&buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)this + 47) < 0)
      v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v9;
    _os_log_error_impl(&dword_236E0D000, v11, OS_LOG_TYPE_ERROR, "Failed to store %s", (uint8_t *)&buf, 0xCu);
  }
  v13 = xpc_dictionary_create(0, 0, 0);
  v14 = MEMORY[0x24BDACFA0];
  if (v13 || (v13 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x23B8056AC](v13) == v14)
    {
      xpc_retain(v13);
      v15 = v13;
    }
    else
    {
      v15 = xpc_null_create();
    }
  }
  else
  {
    v15 = xpc_null_create();
    v13 = 0;
  }
  xpc_release(v13);
  if (MEMORY[0x23B8056AC](v15) != v14)
  {
    v16 = *(NSObject **)this;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      v17 = "Failed to create information dictionary!";
LABEL_62:
      _os_log_error_impl(&dword_236E0D000, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&buf, 2u);
      goto LABEL_42;
    }
    goto LABEL_42;
  }
  v18 = xpc_dictionary_get_value(*((xpc_object_t *)this + 10), v6);
  v19 = v18;
  if (v18)
  {
    xpc_retain(v18);
LABEL_29:
    xpc_retain(v19);
    v20 = v19;
    goto LABEL_30;
  }
  v19 = xpc_null_create();
  if (v19)
    goto LABEL_29;
  v20 = xpc_null_create();
  v19 = 0;
LABEL_30:
  xpc_dictionary_set_value(v15, v6, v20);
  v21 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v19);
  xpc_release(v20);
  if (v15)
  {
    xpc_retain(v15);
    v22 = v15;
  }
  else
  {
    v22 = xpc_null_create();
  }
  v23 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v22;
  xpc_release(v23);
  v24 = xpc_array_create(0, 0);
  v25 = MEMORY[0x24BDACF78];
  if (v24 || (v24 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x23B8056AC](v24) == v25)
    {
      xpc_retain(v24);
      v26 = v24;
    }
    else
    {
      v26 = xpc_null_create();
    }
  }
  else
  {
    v26 = xpc_null_create();
    v24 = 0;
  }
  xpc_release(v24);
  v27 = xpc_null_create();
  v28 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v26;
  xpc_release(v28);
  xpc_release(v27);
  if (MEMORY[0x23B8056AC](*((_QWORD *)this + 6)) == v25)
  {
    v30 = (void **)((char *)this + 56);
    v31 = *((_QWORD *)this + 7);
    if (!v31)
    {
LABEL_57:
      *v30 = 0;
      *((_QWORD *)this + 8) = 0;
      *((_QWORD *)this + 9) = 0;
      v40 = 0;
      p_buf = (void **)&buf;
      buf = 0uLL;
      std::vector<abm::trace::TraceInfoEntry>::__destroy_vector::operator()[abi:ne180100](&p_buf);
      goto LABEL_43;
    }
    v32 = *((_QWORD *)this + 8);
    v33 = (void *)*((_QWORD *)this + 7);
    if (v32 == v31)
    {
LABEL_56:
      *((_QWORD *)this + 8) = v31;
      operator delete(v33);
      *v30 = 0;
      *((_QWORD *)this + 8) = 0;
      *((_QWORD *)this + 9) = 0;
      goto LABEL_57;
    }
    while (1)
    {
      if (*(char *)(v32 - 1) < 0)
      {
        operator delete(*(void **)(v32 - 24));
        if (*(char *)(v32 - 25) < 0)
        {
LABEL_47:
          operator delete(*(void **)(v32 - 48));
          if (*(char *)(v32 - 49) < 0)
            goto LABEL_54;
          goto LABEL_48;
        }
      }
      else if (*(char *)(v32 - 25) < 0)
      {
        goto LABEL_47;
      }
      if (*(char *)(v32 - 49) < 0)
LABEL_54:
        operator delete(*(void **)(v32 - 72));
LABEL_48:
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v32 - 96, *(_QWORD **)(v32 - 88));
      v32 -= 104;
      if (v32 == v31)
      {
        v33 = *v30;
        goto LABEL_56;
      }
    }
  }
  v16 = *(NSObject **)this;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    v17 = "Failed to create information segment array!";
    goto LABEL_62;
  }
LABEL_42:
  v10 = 0;
LABEL_43:
  xpc_release(v15);
  return v10;
}

void sub_236E4363C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void abm::trace::TraceInfo::convertStateTransitionArray(abm::trace::TraceInfo *this@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t v6;
  NSObject *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  const char *v18;
  int v19;
  xpc_object_t v20;
  xpc_object_t v21;
  uint64_t v22;
  const char *v23;
  xpc_object_t v24;
  xpc_object_t v25;
  uint64_t v26;
  const char *v27;
  _BYTE __p[12];
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v4 = xpc_array_create(0, 0);
  v5 = MEMORY[0x24BDACF78];
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x23B8056AC](v4) == v5)
    {
      xpc_retain(v4);
      v6 = v4;
    }
    else
    {
      v6 = xpc_null_create();
    }
  }
  else
  {
    v6 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  if (MEMORY[0x23B8056AC](v6) == v5)
  {
    v9 = (int *)*((_QWORD *)this + 7);
    v8 = (int *)*((_QWORD *)this + 8);
    if (v9 == v8)
    {
LABEL_48:
      *a2 = v6;
      v6 = xpc_null_create();
      goto LABEL_49;
    }
    v10 = MEMORY[0x24BDACFA0];
    while (1)
    {
      v11 = xpc_dictionary_create(0, 0, 0);
      if (v11 || (v11 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x23B8056AC](v11) == v10)
        {
          xpc_retain(v11);
          v12 = v11;
        }
        else
        {
          v12 = xpc_null_create();
        }
      }
      else
      {
        v12 = xpc_null_create();
        v11 = 0;
      }
      xpc_release(v11);
      v13 = MEMORY[0x23B8056AC](v12);
      if (v13 == v10)
        break;
      v14 = *(NSObject **)this;
      if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      {
        v26 = *v9;
        v27 = "Unknown";
        if (v26 <= 0xF)
          v27 = off_25086CCD8[v26];
        *(_DWORD *)__p = 136315138;
        *(_QWORD *)&__p[4] = v27;
        _os_log_error_impl(&dword_236E0D000, v14, OS_LOG_TYPE_ERROR, "Failed to create entry dictionary for %s!", __p, 0xCu);
      }
      *a2 = xpc_null_create();
LABEL_42:
      xpc_release(v12);
      if (v13 != v10)
        goto LABEL_49;
      v9 += 26;
      if (v9 == v8)
        goto LABEL_48;
    }
    Timestamp::asString((uint64_t)(v9 + 2), 0, 9);
    if (v29 >= 0)
      v15 = __p;
    else
      v15 = *(const char **)__p;
    v16 = xpc_string_create(v15);
    if (!v16)
      v16 = xpc_null_create();
    xpc_dictionary_set_value(v12, "Timestamp", v16);
    v17 = xpc_null_create();
    xpc_release(v16);
    xpc_release(v17);
    if (v29 < 0)
    {
      operator delete(*(void **)__p);
      v18 = (const char *)(v9 + 8);
      v19 = *((char *)v9 + 55);
      if ((v19 & 0x80000000) == 0)
      {
LABEL_29:
        if (!v19)
          goto LABEL_37;
        goto LABEL_34;
      }
    }
    else
    {
      v18 = (const char *)(v9 + 8);
      v19 = *((char *)v9 + 55);
      if ((v19 & 0x80000000) == 0)
        goto LABEL_29;
    }
    if (!*((_QWORD *)v9 + 5))
    {
LABEL_37:
      v22 = *v9;
      v23 = "Unknown";
      if (v22 <= 0xF)
        v23 = off_25086CCD8[v22];
      v24 = xpc_string_create(v23);
      if (!v24)
        v24 = xpc_null_create();
      xpc_dictionary_set_value(v12, "Action", v24);
      v25 = xpc_null_create();
      xpc_release(v24);
      xpc_release(v25);
      xpc_array_append_value(v6, v12);
      goto LABEL_42;
    }
    v18 = *(const char **)v18;
LABEL_34:
    v20 = xpc_string_create(v18);
    if (!v20)
      v20 = xpc_null_create();
    xpc_dictionary_set_value(v12, "Detail", v20);
    v21 = xpc_null_create();
    xpc_release(v20);
    xpc_release(v21);
    goto LABEL_37;
  }
  v7 = *(NSObject **)this;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__p = 0;
    _os_log_error_impl(&dword_236E0D000, v7, OS_LOG_TYPE_ERROR, "Failed to create entry array!", __p, 2u);
  }
  *a2 = xpc_null_create();
LABEL_49:
  xpc_release(v6);
}

void sub_236E43AF0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void abm::trace::TraceInfo::getHeader(NSObject **this@<X0>, xpc_object_t *a2@<X8>)
{
  os_unfair_lock_s *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  const void *v20;
  size_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  void **v27;
  void *v28;
  void *v29;
  CFTypeID v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  const void *v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  NSObject *v43;
  char *v44;
  size_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  void *__p[3];
  void *v52;
  __int128 buf;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *a2 = xpc_null_create();
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v4 = (os_unfair_lock_s *)off_2564524A0;
  if (!off_2564524A0)
  {
    v5 = operator new(0x30uLL);
    MEMORY[0x23B804BA8](v5, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x24BDBD590]);
    v5[3] = 0;
    v5[4] = 0;
    *((_DWORD *)v5 + 10) = 0;
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v7 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    v6->__vftable = (std::__shared_weak_count_vtbl *)off_25086CC98;
    v6->__shared_weak_owners_ = 0;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
    __p[0] = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    v5[3] = v5;
    v5[4] = v6;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
    }
    if (__p[0])
    {
      v13 = (std::__shared_weak_count *)*((_QWORD *)__p[0] + 4);
      if (v13)
        std::__shared_weak_count::__release_weak(v13);
      v14 = (void *)MEMORY[0x23B804BB4](__p[0]);
      operator delete(v14);
    }
    v15 = (std::__shared_weak_count *)off_2564524A8;
    off_2564524A0 = v5;
    off_2564524A8 = v7;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v4 = (os_unfair_lock_s *)off_2564524A0;
  }
  *(_QWORD *)&buf = v4;
  *((_QWORD *)&buf + 1) = off_2564524A8;
  if (off_2564524A8)
  {
    v18 = (unint64_t *)((char *)off_2564524A8 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v20 = (const void *)*MEMORY[0x24BE05148];
  v21 = strlen((const char *)*MEMORY[0x24BE05148]);
  if (v21 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v22 = (void *)v21;
  if (v21 >= 0x17)
  {
    v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v24 = v21 | 7;
    v25 = v24 + 1;
    v23 = operator new(v24 + 1);
    __p[1] = v22;
    __p[2] = (void *)(v25 | 0x8000000000000000);
    __p[0] = v23;
    goto LABEL_30;
  }
  HIBYTE(__p[2]) = v21;
  v23 = __p;
  if (v21)
LABEL_30:
    memmove(v23, v20, (size_t)v22);
  *((_BYTE *)v22 + (_QWORD)v23) = 0;
  v26 = v4 + 10;
  os_unfair_lock_lock(v4 + 10);
  if (SHIBYTE(__p[2]) >= 0)
    v27 = __p;
  else
    v27 = (void **)__p[0];
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v52, (const char *)v27);
  v28 = (void *)(**(uint64_t (***)(void *, void *))&v4->_os_unfair_lock_opaque)(v4, v52);
  v29 = v28;
  if (v28)
  {
    v30 = CFGetTypeID(v28);
    if (v30 == CFDictionaryGetTypeID())
      v31 = v29;
    else
      v31 = 0;
    CFRelease(v29);
    MEMORY[0x23B804B84](&v52);
    os_unfair_lock_unlock(v26);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
LABEL_39:
      v32 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
      if (!*((_QWORD *)&buf + 1))
        goto LABEL_46;
      goto LABEL_43;
    }
  }
  else
  {
    v31 = 0;
    MEMORY[0x23B804B84](&v52);
    os_unfair_lock_unlock(v26);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_39;
  }
  operator delete(__p[0]);
  v32 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_46;
LABEL_43:
  v33 = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    if (!v31)
      return;
    goto LABEL_47;
  }
LABEL_46:
  if (!v31)
    return;
LABEL_47:
  v52 = v31;
  CFRetain(v31);
  ctu::cf_to_xpc((ctu *)v31, v35);
  v36 = __p[0];
  if (__p[0] && MEMORY[0x23B8056AC](__p[0]) == MEMORY[0x24BDACFA0])
    xpc_retain(v36);
  else
    v36 = xpc_null_create();
  v37 = xpc_null_create();
  v38 = *a2;
  *a2 = v36;
  xpc_release(v38);
  xpc_release(v37);
  xpc_release(__p[0]);
  v39 = xpc_string_create("<...>");
  if (!v39)
    v39 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x24BE050C0], v39);
  v40 = xpc_null_create();
  xpc_release(v39);
  xpc_release(v40);
  v41 = xpc_string_create("<...>");
  if (!v41)
    v41 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x24BE05178], v41);
  v42 = xpc_null_create();
  xpc_release(v41);
  xpc_release(v42);
  v43 = *this;
  if (!os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
    goto LABEL_58;
  v44 = (char *)MEMORY[0x23B80567C](v36);
  memset(__p, 170, sizeof(__p));
  v45 = strlen(v44);
  if (v45 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v46 = (void *)v45;
  if (v45 >= 0x17)
  {
    v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17)
      v48 = v45 | 7;
    v49 = v48 + 1;
    v47 = operator new(v48 + 1);
    __p[1] = v46;
    __p[2] = (void *)(v49 | 0x8000000000000000);
    __p[0] = v47;
    goto LABEL_67;
  }
  HIBYTE(__p[2]) = v45;
  v47 = __p;
  if (v45)
LABEL_67:
    memcpy(v47, v44, (size_t)v46);
  *((_BYTE *)v46 + (_QWORD)v47) = 0;
  free(v44);
  v50 = __p;
  if (SHIBYTE(__p[2]) < 0)
    v50 = (void **)__p[0];
  LODWORD(buf) = 136315138;
  *(_QWORD *)((char *)&buf + 4) = v50;
  _os_log_debug_impl(&dword_236E0D000, v43, OS_LOG_TYPE_DEBUG, "#D Trace info header set to: %s", (uint8_t *)&buf, 0xCu);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v31 = v52;
  if (v52)
LABEL_58:
    CFRelease(v31);
}

void sub_236E44118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void abm::trace::TraceInfo::setHandler(_QWORD *a1, int a2, uint64_t a3)
{
  void ***v6;
  void ***v7;
  void ***v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  void **v13;
  void **v14;
  void ***v15;
  void **v16;
  void **v17;
  void **v18;
  int v19;
  void ***v20;
  void **v21;
  int v22;
  void **v23;
  void **v24;
  void **v25;
  void ***v26;
  BOOL v27;
  void ***v28;
  _QWORD *v29;
  _BYTE *v30;
  void ****v31;
  void **v32;
  void **v33;
  void **v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  void **v43;
  void *v44;
  NSObject *v45;
  void **v46;
  void ***v47;
  int v48;
  _DWORD *v49;
  uint64_t v50;
  NSObject *v51;

  v7 = (void ***)(a1 + 12);
  v6 = (void ***)a1[12];
  if (!v6)
    goto LABEL_99;
  v8 = (void ***)(a1 + 12);
  v9 = a1[12];
  do
  {
    v10 = *(_DWORD *)(v9 + 32);
    v11 = v10 < a2;
    if (v10 >= a2)
      v12 = (uint64_t *)v9;
    else
      v12 = (uint64_t *)(v9 + 8);
    if (!v11)
      v8 = (void ***)v9;
    v9 = *v12;
  }
  while (*v12);
  if (v8 == v7 || *((_DWORD *)v8 + 8) > a2)
    goto LABEL_99;
  v13 = v8[1];
  if (v13)
  {
    do
    {
      v14 = v13;
      v13 = (void **)*v13;
    }
    while (v13);
  }
  else
  {
    v15 = v8;
    do
    {
      v14 = v15[2];
      v27 = *v14 == v15;
      v15 = (void ***)v14;
    }
    while (!v27);
  }
  if ((void ***)a1[11] == v8)
  {
    a1[11] = v14;
    --a1[13];
    v16 = *v8;
    v17 = (void **)v8;
    if (!*v8)
      goto LABEL_23;
  }
  else
  {
    --a1[13];
    v16 = *v8;
    v17 = (void **)v8;
    if (!*v8)
      goto LABEL_23;
  }
  v18 = v8[1];
  if (!v18)
  {
    v17 = (void **)v8;
    goto LABEL_29;
  }
  do
  {
    v17 = v18;
    v18 = (void **)*v18;
  }
  while (v18);
LABEL_23:
  v16 = (void **)v17[1];
  if (!v16)
  {
    v19 = 1;
    v20 = (void ***)v17[2];
    v21 = *v20;
    if (*v20 == v17)
      goto LABEL_25;
LABEL_30:
    v20[1] = v16;
    v22 = *((unsigned __int8 *)v17 + 24);
    if (v17 == (void **)v8)
      goto LABEL_35;
    goto LABEL_31;
  }
LABEL_29:
  v19 = 0;
  v16[2] = v17[2];
  v20 = (void ***)v17[2];
  v21 = *v20;
  if (*v20 != v17)
    goto LABEL_30;
LABEL_25:
  *v20 = v16;
  if (v17 != (void **)v6)
  {
    v21 = v20[1];
    v22 = *((unsigned __int8 *)v17 + 24);
    if (v17 == (void **)v8)
      goto LABEL_35;
LABEL_31:
    v23 = v8[2];
    v17[2] = v23;
    v23[*v8[2] != v8] = v17;
    v24 = *v8;
    *v17 = *v8;
    v24[2] = v17;
    v25 = v8[1];
    v17[1] = v25;
    if (v25)
      v25[2] = v17;
    *((_BYTE *)v17 + 24) = *((_BYTE *)v8 + 24);
    if (v6 == v8)
      v6 = (void ***)v17;
    goto LABEL_35;
  }
  v21 = 0;
  v6 = (void ***)v16;
  v22 = *((unsigned __int8 *)v17 + 24);
  if (v17 != (void **)v8)
    goto LABEL_31;
LABEL_35:
  if (!v22 || !v6)
    goto LABEL_94;
  if (!v19)
  {
    *((_BYTE *)v16 + 24) = 1;
    goto LABEL_94;
  }
  while (1)
  {
    v28 = (void ***)v21[2];
    if (*v28 != v21)
      break;
    if (*((_BYTE *)v21 + 24))
    {
      v30 = *v21;
      if (*v21)
        goto LABEL_67;
    }
    else
    {
      *((_BYTE *)v21 + 24) = 1;
      *((_BYTE *)v28 + 24) = 0;
      v34 = (void **)v21[1];
      *v28 = v34;
      if (v34)
        v34[2] = v28;
      v21[2] = v28[2];
      v28[2][*v28[2] != v28] = v21;
      v21[1] = v28;
      v28[2] = v21;
      if (v6 == v28)
        v6 = (void ***)v21;
      v21 = *v28;
      v30 = **v28;
      if (v30)
      {
LABEL_67:
        if (!v30[24])
          goto LABEL_89;
      }
    }
    v35 = (uint64_t *)v21[1];
    if (v35 && !*((_BYTE *)v35 + 24))
    {
      if (v30 && !v30[24])
      {
LABEL_89:
        v35 = (uint64_t *)v21;
      }
      else
      {
        *((_BYTE *)v35 + 24) = 1;
        *((_BYTE *)v21 + 24) = 0;
        v36 = *v35;
        v21[1] = (void *)*v35;
        if (v36)
          *(_QWORD *)(v36 + 16) = v21;
        v35[2] = (uint64_t)v21[2];
        *((_QWORD *)v21[2] + (*(_QWORD *)v21[2] != (_QWORD)v21)) = v35;
        *v35 = (uint64_t)v21;
        v21[2] = v35;
        v30 = v21;
      }
      v38 = v35[2];
      *((_BYTE *)v35 + 24) = *(_BYTE *)(v38 + 24);
      *(_BYTE *)(v38 + 24) = 1;
      v30[24] = 1;
      v39 = *(uint64_t **)v38;
      v41 = *(_QWORD *)(*(_QWORD *)v38 + 8);
      *(_QWORD *)v38 = v41;
      if (v41)
        *(_QWORD *)(v41 + 16) = v38;
      v39[2] = *(_QWORD *)(v38 + 16);
      *(_QWORD *)(*(_QWORD *)(v38 + 16) + 8 * (**(_QWORD **)(v38 + 16) != v38)) = v39;
      v39[1] = v38;
      goto LABEL_93;
    }
    *((_BYTE *)v21 + 24) = 0;
    v26 = (void ***)v21[2];
    if (*((_BYTE *)v26 + 24))
      v27 = v26 == v6;
    else
      v27 = 1;
    if (v27)
      goto LABEL_79;
LABEL_43:
    v21 = (void **)v26[2][*v26[2] == v26];
  }
  if (*((_BYTE *)v21 + 24))
  {
    v29 = *v21;
    if (!*v21)
    {
LABEL_57:
      v33 = (void **)v21[1];
      if (v33 && !*((_BYTE *)v33 + 24))
        goto LABEL_85;
      *((_BYTE *)v21 + 24) = 0;
      v26 = (void ***)v21[2];
      if (v26 == v6)
      {
        v26 = v6;
LABEL_79:
        *((_BYTE *)v26 + 24) = 1;
        goto LABEL_94;
      }
      if (!*((_BYTE *)v26 + 24))
        goto LABEL_79;
      goto LABEL_43;
    }
  }
  else
  {
    *((_BYTE *)v21 + 24) = 1;
    *((_BYTE *)v28 + 24) = 0;
    v31 = (void ****)v28[1];
    v32 = (void **)*v31;
    v28[1] = (void **)*v31;
    if (v32)
      v32[2] = v28;
    v31[2] = (void ***)v28[2];
    v28[2][*v28[2] != v28] = v31;
    *v31 = v28;
    v28[2] = (void **)v31;
    if (v6 == *v21)
      v6 = (void ***)v21;
    v21 = (void **)*((_QWORD *)*v21 + 1);
    v29 = *v21;
    if (!*v21)
      goto LABEL_57;
  }
  if (*((_BYTE *)v29 + 24))
    goto LABEL_57;
  v33 = (void **)v21[1];
  if (v33 && !*((_BYTE *)v33 + 24))
  {
LABEL_85:
    v29 = v21;
  }
  else
  {
    *((_BYTE *)v29 + 24) = 1;
    *((_BYTE *)v21 + 24) = 0;
    v37 = (_QWORD *)v29[1];
    *v21 = v37;
    if (v37)
      v37[2] = v21;
    v29[2] = v21[2];
    *((_QWORD *)v21[2] + (*(_QWORD *)v21[2] != (_QWORD)v21)) = v29;
    v29[1] = v21;
    v21[2] = v29;
    v33 = v21;
  }
  v38 = v29[2];
  *((_BYTE *)v29 + 24) = *(_BYTE *)(v38 + 24);
  *(_BYTE *)(v38 + 24) = 1;
  *((_BYTE *)v33 + 24) = 1;
  v39 = *(uint64_t **)(v38 + 8);
  v40 = *v39;
  *(_QWORD *)(v38 + 8) = *v39;
  if (v40)
    *(_QWORD *)(v40 + 16) = v38;
  v39[2] = *(_QWORD *)(v38 + 16);
  *(_QWORD *)(*(_QWORD *)(v38 + 16) + 8 * (**(_QWORD **)(v38 + 16) != v38)) = v39;
  *v39 = v38;
LABEL_93:
  *(_QWORD *)(v38 + 16) = v39;
LABEL_94:
  v42 = v8[6];
  if (v42)
    dispatch_release(v42);
  v43 = v8[5];
  if (v43)
    _Block_release(v43);
  operator delete(v8);
LABEL_99:
  if (*(_QWORD *)a3)
  {
    v44 = _Block_copy(*(const void **)a3);
    v45 = *(NSObject **)(a3 + 8);
    v51 = v45;
    if (v45)
      goto LABEL_101;
  }
  else
  {
    v44 = 0;
    v45 = *(NSObject **)(a3 + 8);
    v51 = v45;
    if (v45)
LABEL_101:
      dispatch_retain(v45);
  }
  v46 = *v7;
  v47 = v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        v47 = (void ***)v46;
        v48 = *((_DWORD *)v46 + 8);
        if (v48 <= a2)
          break;
        v46 = *v47;
        v7 = v47;
        if (!*v47)
          goto LABEL_109;
      }
      if (v48 >= a2)
        break;
      v46 = v47[1];
      if (!v46)
      {
        v7 = v47 + 1;
        goto LABEL_109;
      }
    }
  }
  else
  {
LABEL_109:
    v49 = operator new(0x38uLL);
    v49[8] = a2;
    if (v44)
    {
      *((_QWORD *)v49 + 5) = _Block_copy(v44);
      *((_QWORD *)v49 + 6) = v45;
      if (v45)
        goto LABEL_111;
    }
    else
    {
      *((_QWORD *)v49 + 5) = 0;
      *((_QWORD *)v49 + 6) = v45;
      if (v45)
LABEL_111:
        dispatch_retain(v45);
    }
    *(_QWORD *)v49 = 0;
    *((_QWORD *)v49 + 1) = 0;
    *((_QWORD *)v49 + 2) = v47;
    *v7 = (void **)v49;
    v50 = *(_QWORD *)a1[11];
    if (v50)
    {
      a1[11] = v50;
      v49 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[12], (uint64_t *)v49);
    ++a1[13];
    v45 = v51;
  }
  if (v45)
    dispatch_release(v45);
  if (v44)
    _Block_release(v44);
}

void sub_236E44800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>::~pair(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 16);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    _Block_release(v3);
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  int v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *i;
  uint64_t ***v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;

  v4 = a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v34 = (uint64_t *)v10[1];
            if (!v34)
              break;
            do
            {
              v10 = v34;
              v34 = (uint64_t *)*v34;
            }
            while (v34);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = v4;
        while (1)
        {
          v9 = v10;
          v14 = *((_DWORD *)v13 + 8);
          *((_DWORD *)v12 + 8) = v14;
          *(_OWORD *)(v12 + 5) = *(_OWORD *)(v13 + 5);
          v15 = *v8;
          v16 = (uint64_t **)(a1 + 8);
          v17 = (uint64_t **)(a1 + 8);
          if (*v8)
            break;
LABEL_14:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v16;
          *v17 = v12;
          v18 = **(_QWORD **)a1;
          if (v18)
            goto LABEL_15;
LABEL_16:
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v12);
          ++*(_QWORD *)(a1 + 16);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v21 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v22 = (uint64_t *)v10[1];
                  if (!v22)
                    break;
                  do
                  {
                    v10 = v22;
                    v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; v21 = (uint64_t *)v10[1])
                {
                  do
                  {
                    v10 = v21;
                    v21 = (uint64_t *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v19 = (_QWORD *)v13[1];
          if (v19)
          {
            do
            {
              v4 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v13[2];
              v20 = *v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v20);
          }
          if (v9)
          {
            v12 = v9;
            v13 = v4;
            if (v4 != a3)
              continue;
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            v16 = (uint64_t **)v15;
            if (v14 >= *((_DWORD *)v15 + 8))
              break;
            v15 = (uint64_t *)*v15;
            v17 = v16;
            if (!*v16)
              goto LABEL_14;
          }
          v15 = (uint64_t *)v15[1];
        }
        while (v15);
        v17 = v16 + 1;
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v16;
        v16[1] = v12;
        v18 = **(_QWORD **)a1;
        if (!v18)
          goto LABEL_16;
LABEL_15:
        *(_QWORD *)a1 = v18;
        v12 = *v17;
        goto LABEL_16;
      }
LABEL_42:
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, v9);
      if (v10)
      {
        for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
          v10 = i;
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    v24 = (uint64_t ***)(a1 + 8);
    while (1)
    {
      v25 = (uint64_t *)operator new(0x38uLL);
      v26 = v25;
      v27 = v4[6];
      *((_OWORD *)v25 + 2) = *((_OWORD *)v4 + 2);
      v25[6] = v27;
      v28 = *v24;
      v29 = (uint64_t **)(a1 + 8);
      v30 = (uint64_t **)(a1 + 8);
      if (*v24)
        break;
LABEL_54:
      *v25 = 0;
      v25[1] = 0;
      v25[2] = (uint64_t)v29;
      *v30 = v25;
      v31 = **(_QWORD **)a1;
      if (v31)
        goto LABEL_55;
LABEL_56:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v26);
      ++*(_QWORD *)(a1 + 16);
      v32 = (_QWORD *)v4[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v4[2];
          v20 = *v33 == (_QWORD)v4;
          v4 = v33;
        }
        while (!v20);
      }
      v4 = v33;
      if (v33 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v29 = v28;
        if (*((_DWORD *)v25 + 8) >= *((_DWORD *)v28 + 8))
          break;
        v28 = (uint64_t **)*v28;
        v30 = v29;
        if (!*v29)
          goto LABEL_54;
      }
      v28 = (uint64_t **)v28[1];
    }
    while (v28);
    v30 = v29 + 1;
    *v25 = 0;
    v25[1] = 0;
    v25[2] = (uint64_t)v29;
    v29[1] = v25;
    v31 = **(_QWORD **)a1;
    if (!v31)
      goto LABEL_56;
LABEL_55:
    *(_QWORD *)a1 = v31;
    v26 = *v30;
    goto LABEL_56;
  }
}

abm::trace::TraceInfoEntry *abm::trace::TraceInfoEntry::TraceInfoEntry(abm::trace::TraceInfoEntry *this, const abm::trace::TraceInfoEntry *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  *(_DWORD *)this = *(_DWORD *)a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_QWORD *)this + 3) = 0;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this + 1, *((int **)a2 + 1), (int *)a2 + 4);
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v4 = *((_OWORD *)a2 + 2);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    *((_OWORD *)this + 2) = v4;
  }
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 56);
    *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
    *(_OWORD *)((char *)this + 56) = v5;
  }
  v6 = (std::string *)((char *)this + 80);
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 10), *((_QWORD *)a2 + 11));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 5);
    *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_236E44E60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  _QWORD **v5;

  if (*(char *)(v2 + 79) < 0)
  {
    operator delete(*v4);
    if ((*(char *)(v2 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *v5);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v2 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *v5);
  _Unwind_Resume(a1);
}

void sub_236E44EC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_236E44EDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

abm::trace::TraceInfo **std::unique_ptr<abm::trace::TraceInfo>::~unique_ptr[abi:ne180100](abm::trace::TraceInfo **a1)
{
  abm::trace::TraceInfo *v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    abm::trace::TraceInfo::~TraceInfo(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<abm::trace::TraceInfo *,std::shared_ptr<abm::trace::TraceInfo>::__shared_ptr_default_delete<abm::trace::TraceInfo,abm::trace::TraceInfo>,std::allocator<abm::trace::TraceInfo>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<abm::trace::TraceInfo *,std::shared_ptr<abm::trace::TraceInfo>::__shared_ptr_default_delete<abm::trace::TraceInfo,abm::trace::TraceInfo>,std::allocator<abm::trace::TraceInfo>>::__on_zero_shared(uint64_t a1)
{
  abm::trace::TraceInfo *v1;
  void *v2;

  v1 = *(abm::trace::TraceInfo **)(a1 + 24);
  if (v1)
  {
    abm::trace::TraceInfo::~TraceInfo(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<abm::trace::TraceInfo *,std::shared_ptr<abm::trace::TraceInfo>::__shared_ptr_default_delete<abm::trace::TraceInfo,abm::trace::TraceInfo>,std::allocator<abm::trace::TraceInfo>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000236E5394BLL)
    return a1 + 24;
  if (((v3 & 0x8000000236E5394BLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000236E5394BLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000236E5394BLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::vector<abm::trace::TraceInfoEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 == v2)
    {
      v1[1] = v2;
      operator delete(v5);
      return;
    }
    while (1)
    {
      if (*((char *)v4 - 1) < 0)
      {
        operator delete(*(v4 - 3));
        if ((*((char *)v4 - 25) & 0x80000000) == 0)
        {
LABEL_7:
          if (*((char *)v4 - 49) < 0)
            goto LABEL_11;
          goto LABEL_4;
        }
      }
      else if ((*((char *)v4 - 25) & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(*(v4 - 6));
      if (*((char *)v4 - 49) < 0)
LABEL_11:
        operator delete(*(v4 - 9));
LABEL_4:
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(v4 - 12), *(v4 - 11));
      v4 -= 13;
      if (v4 == v2)
      {
        v6 = **a1;
        v1[1] = v2;
        operator delete(v6);
        return;
      }
    }
  }
}

void std::__tree<std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>,std::__map_value_compare<abm::trace::TraceInfoState,std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>,std::less<abm::trace::TraceInfoState>,true>,std::allocator<std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>>>::destroy(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;

  if (a1)
  {
    std::__tree<std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>,std::__map_value_compare<abm::trace::TraceInfoState,std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>,std::less<abm::trace::TraceInfoState>,true>,std::allocator<std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>>>::destroy(*a1);
    std::__tree<std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>,std::__map_value_compare<abm::trace::TraceInfoState,std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>,std::less<abm::trace::TraceInfoState>,true>,std::allocator<std::__value_type<abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>>>>::destroy(a1[1]);
    v2 = a1[6];
    if (v2)
      dispatch_release(v2);
    v3 = (const void *)a1[5];
    if (v3)
      _Block_release(v3);
    operator delete(a1);
  }
}

uint64_t std::__split_buffer<abm::trace::TraceInfoEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 104;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if (*(char *)(i - 25) < 0)
      {
LABEL_9:
        operator delete(*(void **)(i - 48));
        if ((*(char *)(i - 49) & 0x80000000) == 0)
          goto LABEL_2;
        goto LABEL_10;
      }
    }
    else if (*(char *)(i - 25) < 0)
    {
      goto LABEL_9;
    }
    if ((*(char *)(i - 49) & 0x80000000) == 0)
      goto LABEL_2;
LABEL_10:
    operator delete(*(void **)(i - 72));
LABEL_2:
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(i - 96, *(_QWORD **)(i - 88));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3abm5trace14TraceInfoEntryEEEclIJS3_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  _BYTE v2[8];
  _QWORD *v3[5];
  char v4;
  void *v5;
  char v6;
  void *__p;
  char v8;

  v1 = *(_QWORD *)(a1 + 32);
  abm::trace::TraceInfoEntry::TraceInfoEntry((abm::trace::TraceInfoEntry *)v2, (const abm::trace::TraceInfoEntry *)(a1 + 40));
  (*(void (**)(uint64_t, _BYTE *))(v1 + 16))(v1, v2);
  if ((v8 & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(v5);
    if ((v4 & 0x80000000) == 0)
      goto LABEL_4;
LABEL_7:
    operator delete(v3[3]);
    goto LABEL_4;
  }
  operator delete(__p);
  if (v6 < 0)
    goto LABEL_6;
LABEL_3:
  if (v4 < 0)
    goto LABEL_7;
LABEL_4:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v3, v3[1]);
}

void sub_236E4525C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, _QWORD *a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a19 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  if ((a19 & 0x80000000) == 0)
  {
LABEL_4:
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a11, a12);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a14);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

abm::trace::TraceInfoEntry *__copy_helper_block_e8_32c70_ZTSN8dispatch5blockIU13block_pointerFvN3abm5trace14TraceInfoEntryEEEE40c32_ZTSN3abm5trace14TraceInfoEntryE(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)(a2 + 32);
  if (v4)
    v4 = _Block_copy(v4);
  *(_QWORD *)(a1 + 32) = v4;
  return abm::trace::TraceInfoEntry::TraceInfoEntry((abm::trace::TraceInfoEntry *)(a1 + 40), (const abm::trace::TraceInfoEntry *)(a2 + 40));
}

void sub_236E45310(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  if (v3)
    _Block_release(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c70_ZTSN8dispatch5blockIU13block_pointerFvN3abm5trace14TraceInfoEntryEEEE40c32_ZTSN3abm5trace14TraceInfoEntryE(uint64_t a1)
{
  const void *v2;

  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 95) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 72));
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1 + 48, *(_QWORD **)(a1 + 56));
      v2 = *(const void **)(a1 + 32);
      if (!v2)
        return;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    goto LABEL_8;
LABEL_4:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1 + 48, *(_QWORD **)(a1 + 56));
  v2 = *(const void **)(a1 + 32);
  if (v2)
LABEL_9:
    _Block_release(v2);
}

uint64_t *std::unique_ptr<SharedData>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v4 = (void *)MEMORY[0x23B804BB4](v2);
    operator delete(v4);
  }
  return a1;
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void *v3;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 32);
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
    v3 = (void *)MEMORY[0x23B804BB4](v1);
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000236E53A18)
    return a1 + 24;
  if (((v3 & 0x8000000236E53A18 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000236E53A18))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000236E53A18 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t __cxx_global_var_init_29()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_236E0D000);
  }
  return result;
}

void TraceFileCollection::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD v19[5];
  _QWORD *v20;
  _QWORD block[6];

  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v6 = operator new(0x160uLL);
  v7 = (uint64_t)v6;
  v8 = (std::__shared_weak_count *)a1[1];
  v17 = *a1;
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  TraceFileCollection::TraceFileCollection((uint64_t)v6, &v17, a2);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<TraceFileCollection>::shared_ptr[abi:ne180100]<TraceFileCollection,std::shared_ptr<TraceFileCollection> ctu::SharedSynchronizable<TraceFileCollection>::make_shared_ptr<TraceFileCollection>(TraceFileCollection*)::{lambda(TraceFileCollection*)#1},void>(a3, v7);
  ctu::Loggable<TraceFileCollection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *a3;
  v15 = *a3 + 72;
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 0x40000000;
  v19[2] = ___ZN19TraceFileCollection4initEv_block_invoke;
  v19[3] = &__block_descriptor_tmp_7;
  v19[4] = v14;
  v20 = v19;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_52;
  block[4] = v15;
  block[5] = &v20;
  v16 = *(NSObject **)(v14 + 88);
  if (*(_QWORD *)(v14 + 96))
    dispatch_async_and_wait(v16, block);
  else
    dispatch_sync(v16, block);
}

void sub_236E4569C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_236E456B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_236E456CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void TraceFileCollection::init(TraceFileCollection *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = ___ZN19TraceFileCollection4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_7;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_52;
  block[4] = (char *)this + 72;
  block[5] = &v4;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

uint64_t TraceFileCollection::TraceFileCollection(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  NSObject *initially_inactive;
  NSObject *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  NSObject *v21;
  dispatch_group_t v22;
  unsigned int v23;
  vm_size_t v24;
  NSObject *v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  NSObject *v34;
  int v35;
  void *v37[4];
  void *__p[2];
  uint64_t v39;
  _BYTE v40[16];
  char v41[16];
  char v42[16];
  char label[18];
  __int16 v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_25086CD68;
  label[17] = -86;
  v44 = -21846;
  v45 = 279620266;
  strcpy(label, "trace.collection");
  v39 = 0x10AAAAAAAAAAAA00;
  *(_OWORD *)__p = *(_OWORD *)"trace.collection";
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v40, "com.apple.telephony.abm", (const char *)__p);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v7 = dispatch_queue_create_with_target_V2(label, initially_inactive, 0);
  dispatch_set_qos_class_floor(v7, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v7);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v7;
  if (v7)
  {
    dispatch_retain(v7);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v7);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_25086D098;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v42);
  *(_QWORD *)(a1 + 8) = &unk_25086ACA8;
  *(_QWORD *)(a1 + 56) = *a2;
  v8 = a2[1];
  *(_QWORD *)(a1 + 64) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v41);
  *(_QWORD *)a1 = off_25086D128;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v40);
  if (SHIBYTE(v39) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v45) & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)label);
LABEL_9:
  *(_QWORD *)a1 = off_25086CD68;
  *(_WORD *)(a1 + 104) = *(_WORD *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 112), *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v11 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)(a1 + 112) = v11;
  }
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v13 = *(_BYTE **)(a3 + 32);
  v12 = *(_BYTE **)(a3 + 40);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if ((v14 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v12 - v13);
    *(_QWORD *)(a1 + 136) = v15;
    *(_QWORD *)(a1 + 144) = v15;
    v16 = &v15[v14];
    *(_QWORD *)(a1 + 152) = &v15[v14];
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 144) = v16;
  }
  if (*(char *)(a3 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 160), *(const std::string::value_type **)(a3 + 56), *(_QWORD *)(a3 + 64));
  }
  else
  {
    v17 = *(_OWORD *)(a3 + 56);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a3 + 72);
    *(_OWORD *)(a1 + 160) = v17;
  }
  v18 = (std::string *)(a1 + 184);
  if (*(char *)(a3 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)(a3 + 80), *(_QWORD *)(a3 + 88));
  }
  else
  {
    v19 = *(_OWORD *)(a3 + 80);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a3 + 96);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
  }
  v20 = *(_QWORD *)(a3 + 104);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a3 + 112);
  *(_QWORD *)(a1 + 208) = v20;
  *(_QWORD *)(a1 + 224) = *(unsigned int *)(a3 + 108);
  *(_DWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  Timestamp::Timestamp((Timestamp *)(a1 + 280));
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  v21 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  *(_QWORD *)(a1 + 320) = dispatch_queue_create("trace.collection.writer", v21);
  v22 = dispatch_group_create();
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = v22;
  v23 = 2 * *(_DWORD *)(a1 + 212) * *(_DWORD *)(a1 + 216);
  if (v23)
    v24 = v23;
  else
    v24 = 0x800000;
  v25 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)label = 134217984;
    *(_QWORD *)&label[4] = v24;
    _os_log_impl(&dword_236E0D000, v25, OS_LOG_TYPE_DEFAULT, "#I Setting zone size: %lu", (uint8_t *)label, 0xCu);
  }
  HIBYTE(v37[2]) = 19;
  strcpy((char *)v37, "BasebandLoggingZone");
  MallocZone::create((uint64_t)v37, v24, label);
  v26 = *(_OWORD *)label;
  *(_QWORD *)label = 0;
  *(_QWORD *)&label[8] = 0;
  v27 = *(std::__shared_weak_count **)(a1 + 312);
  *(_OWORD *)(a1 + 304) = v26;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = *(std::__shared_weak_count **)&label[8];
  if (!*(_QWORD *)&label[8])
    goto LABEL_37;
  v31 = (unint64_t *)(*(_QWORD *)&label[8] + 8);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (v32)
  {
LABEL_37:
    if ((SHIBYTE(v37[2]) & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_38;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  if (SHIBYTE(v37[2]) < 0)
LABEL_38:
    operator delete(v37[0]);
LABEL_39:
  v33 = *(_DWORD *)(a1 + 208);
  v34 = *(NSObject **)(a1 + 40);
  v35 = (v33 << 10) / (*(_DWORD *)(a1 + 216) >> 10);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)label = 67109376;
    *(_DWORD *)&label[4] = v35;
    *(_WORD *)&label[8] = 1024;
    *(_DWORD *)&label[10] = v33;
    _os_log_impl(&dword_236E0D000, v34, OS_LOG_TYPE_DEFAULT, "#I ctor: Adjusting max file count as %u from the history size, %u", (uint8_t *)label, 0xEu);
  }
  *(_DWORD *)(a1 + 208) = v35;
  return a1;
}

void sub_236E45C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  uint64_t v24;
  TraceFileCollection::HeaderOptions *v25;
  void **v26;

  if (*(char *)(v24 + 183) < 0)
    operator delete(*v26);
  TraceFileCollection::HeaderOptions::~HeaderOptions(v25);
  ctu::SharedLoggable<TraceFileCollection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable((_QWORD *)v24);
  _Unwind_Resume(a1);
}

double TraceFileCollection::getName@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 16) = 0x10AAAAAAAAAAAA00;
  result = *(double *)"trace.collection";
  *(_OWORD *)a1 = *(_OWORD *)"trace.collection";
  return result;
}

void TraceFileCollection::Parameters::~Parameters(void **this)
{
  void *v2;

  if (*((char *)this + 103) < 0)
  {
    operator delete(this[10]);
    if ((*((char *)this + 79) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = this[4];
      if (!v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*((char *)this + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[7]);
  v2 = this[4];
  if (v2)
  {
LABEL_4:
    this[5] = v2;
    operator delete(v2);
  }
LABEL_5:
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

_QWORD *ctu::SharedLoggable<TraceFileCollection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_25086D098;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_25086D098;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void TraceFileCollection::getFileIndex_sync(TraceFileCollection *this, unsigned int *a2, unsigned int *a3)
{
  __int128 v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  __int128 v12;
  std::sub_match<const char *> *v13;
  std::sub_match<const char *> *v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  __int128 v18;
  const char *second;
  std::sub_match<const char *> *first;
  int v21;
  const char *v22;
  uint64_t v23;
  __int128 *v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  std::string::value_type **v28;
  std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  std::string *v32;
  std::string::value_type *v33;
  __int128 *v34;
  std::string::size_type *v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  std::string::value_type v40;
  unsigned int v41;
  unsigned int v42;
  void *v43;
  std::sub_match<const char *> *v44;
  std::__shared_weak_count *v45;
  void **v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  unsigned int *v49;
  char v50;
  unsigned int v51;
  _BYTE v52[40];
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void *__p;
  std::sub_match<const char *> *v60;
  uint64_t v61;
  std::locale v62[2];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  std::string __str[2];
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;

  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v64 = v6;
  v65 = v6;
  *(_OWORD *)&v62[0].__locale_ = v6;
  v63 = v6;
  v52[23] = 18;
  strcpy(v52, "(0x[0-9a-fA-F]{8})");
  v7 = *((char *)this + 183);
  if (v7 >= 0)
    v8 = (char *)this + 160;
  else
    v8 = (const std::string::value_type *)*((_QWORD *)this + 20);
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)this + 183);
  else
    v9 = *((_QWORD *)this + 21);
  v10 = std::string::append((std::string *)v52, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  __str[0].__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v62, (uint64_t)__str, 0);
  if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str[0].__r_.__value_.__l.__data_);
    if ((v52[23] & 0x80000000) == 0)
      goto LABEL_9;
LABEL_66:
    operator delete(*(void **)v52);
    goto LABEL_9;
  }
  if ((v52[23] & 0x80000000) != 0)
    goto LABEL_66;
LABEL_9:
  __p = 0;
  v60 = 0;
  v61 = 0;
  support::fs::readDir((const char *)this + 184, (uint64_t)&__p);
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53 = 0xAAAAAAAAAAAAAAAALL;
  v55 = 0xAAAAAAAAAAAAAA00;
  v57 = v12;
  v54 = 0;
  v56 = 0uLL;
  LOBYTE(v57) = 0;
  BYTE8(v57) = 0;
  v58 = 0;
  memset(v52, 0, sizeof(v52));
  v13 = (std::sub_match<const char *> *)__p;
  v14 = v60;
  if (__p == v60)
  {
    *a2 = 0;
    *a3 = 0;
    v44 = (std::sub_match<const char *> *)__p;
    if (!__p)
      goto LABEL_63;
    goto LABEL_68;
  }
  v49 = a2;
  v15 = 0;
  v16 = 0;
  v17 = 1;
  do
  {
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v72 = v18;
    v69 = 0xAAAAAAAAAAAAAA00;
    __str[1].__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
    v67 = 0;
    v68 = 0;
    v70 = 0;
    v71 = 0;
    LOBYTE(v72) = 0;
    BYTE8(v72) = 0;
    v73 = 0;
    memset(__str, 0, 41);
    second = (const char *)*((unsigned __int8 *)&v13->matched + 7);
    if ((char)second >= 0)
      first = v13;
    else
      first = (std::sub_match<const char *> *)v13->first;
    if ((char)second < 0)
      second = v13->second;
    v21 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v62, first, (std::sub_match<const char *> *)&second[(_QWORD)first], (std::vector<std::csub_match> *)__str, 0);
    v22 = (const char *)*((unsigned __int8 *)&v13->matched + 7);
    if ((char)v22 >= 0)
      v23 = (uint64_t)v13;
    else
      v23 = (uint64_t)v13->first;
    if ((char)v22 < 0)
      v22 = v13->second;
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)v52, v23, (std::sub_match<std::__wrap_iter<const char *>> *)&v22[v23], (uint64_t *)__str, 0);
    if (__str[0].__r_.__value_.__r.__words[0])
    {
      __str[0].__r_.__value_.__l.__size_ = __str[0].__r_.__value_.__r.__words[0];
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    if (v21)
    {
      memset(__str, 170, 24);
      v24 = &v53;
      if (*(_QWORD *)&v52[8] != *(_QWORD *)v52)
        v24 = (__int128 *)(*(_QWORD *)v52 + 16);
      if (!*(_BYTE *)v24)
      {
        memset(__str, 0, 24);
LABEL_50:
        v41 = std::stol(__str, 0, 16);
        if ((v17 & 1) != 0)
          v42 = v41;
        else
          v42 = v16;
        if (v42 >= v41)
          v16 = v41;
        else
          v16 = v42;
        if (v15 <= v41)
          v15 = v41;
        if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str[0].__r_.__value_.__l.__data_);
        v17 = 0;
        goto LABEL_12;
      }
      v50 = v17;
      v51 = v15;
      v25 = v16;
      v26 = (uint64_t *)&v52[24];
      if (*(_QWORD *)&v52[8] != *(_QWORD *)v52)
        v26 = *(uint64_t **)v52;
      v27 = *v26;
      v28 = (std::string::value_type **)(*(_QWORD *)v52 + 8);
      if (*(_QWORD *)&v52[8] == *(_QWORD *)v52)
        v28 = (std::string::value_type **)&v52[32];
      v29 = *v28;
      v30 = (std::string::size_type)&(*v28)[-v27];
      if (v30 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v30 > 0x16)
      {
        v38 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17)
          v38 = v30 | 7;
        v39 = v38 + 1;
        v31 = (std::string *)operator new(v38 + 1);
        __str[0].__r_.__value_.__l.__size_ = v30;
        __str[0].__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
        __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
        if ((std::string::value_type *)v27 != v29)
          goto LABEL_36;
      }
      else
      {
        *((_BYTE *)&__str[0].__r_.__value_.__s + 23) = *(_BYTE *)v28 - v27;
        v31 = __str;
        if ((std::string::value_type *)v27 != v29)
        {
LABEL_36:
          if (v30 < 0x20 || (unint64_t)v31 - v27 < 0x20)
          {
            v32 = v31;
            v33 = (std::string::value_type *)v27;
          }
          else
          {
            v32 = (std::string *)((char *)v31 + (v30 & 0xFFFFFFFFFFFFFFE0));
            v33 = (std::string::value_type *)(v27 + (v30 & 0xFFFFFFFFFFFFFFE0));
            v34 = (__int128 *)(v27 + 16);
            v35 = &v31->__r_.__value_.__r.__words[2];
            v36 = v30 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v37 = *v34;
              *((_OWORD *)v35 - 1) = *(v34 - 1);
              *(_OWORD *)v35 = v37;
              v34 += 2;
              v35 += 4;
              v36 -= 32;
            }
            while (v36);
            if (v30 == (v30 & 0x7FFFFFFFFFFFFFE0))
              goto LABEL_49;
          }
          do
          {
            v40 = *v33++;
            v32->__r_.__value_.__s.__data_[0] = v40;
            v32 = (std::string *)((char *)v32 + 1);
          }
          while (v33 != v29);
LABEL_49:
          v32->__r_.__value_.__s.__data_[0] = 0;
          v16 = v25;
          v17 = v50;
          v15 = v51;
          goto LABEL_50;
        }
      }
      v32 = v31;
      goto LABEL_49;
    }
LABEL_12:
    ++v13;
  }
  while (v13 != v14);
  v43 = *(void **)v52;
  *v49 = v16;
  *a3 = v15;
  if (v43)
  {
    *(_QWORD *)&v52[8] = v43;
    operator delete(v43);
  }
  v44 = (std::sub_match<const char *> *)__p;
  if (!__p)
  {
LABEL_63:
    v45 = (std::__shared_weak_count *)v65;
    if (!(_QWORD)v65)
      goto LABEL_79;
LABEL_75:
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
    goto LABEL_79;
  }
LABEL_68:
  v46 = (void **)v60;
  if (v60 == v44)
  {
    v60 = v44;
    operator delete(v44);
    v45 = (std::__shared_weak_count *)v65;
    if (!(_QWORD)v65)
      goto LABEL_79;
    goto LABEL_75;
  }
  do
  {
    if (*((char *)v46 - 1) < 0)
      operator delete(*(v46 - 3));
    v46 -= 3;
  }
  while (v46 != (void **)v44);
  v60 = v44;
  operator delete(__p);
  v45 = (std::__shared_weak_count *)v65;
  if ((_QWORD)v65)
    goto LABEL_75;
LABEL_79:
  std::locale::~locale(v62);
}

void sub_236E462E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,std::locale a36)
{
  std::vector<std::string>::~vector[abi:ne180100](&a33);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a36);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19TraceFileCollection4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  ctu::XpcJetsamAssertion *v2;
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  _QWORD *v20;
  int v21;
  timespec v22;
  const char *v23;
  NSObject *v24;
  int v25;
  int v26;
  int v27;
  const char *v29;
  DIR *v30;
  DIR *v31;
  dirent *v32;
  NSObject *v33;
  _BOOL4 v34;
  char __p[22];
  char v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  stat buf;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = (ctu::XpcJetsamAssertion *)pthread_mutex_lock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  v3 = xmmword_256452300;
  if (!(_QWORD)xmmword_256452300)
  {
    ctu::XpcJetsamAssertion::create_default_global(v2);
    v4 = *(_OWORD *)&buf.st_dev;
    *(_QWORD *)&buf.st_dev = 0;
    buf.st_ino = 0;
    v5 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_256452300 + 1);
    xmmword_256452300 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v3 = xmmword_256452300;
  }
  v37 = v3;
  v38 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_256452300 + 1);
  if (*((_QWORD *)&xmmword_256452300 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&xmmword_256452300 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  v36 = 21;
  strcpy(__p, "Trace File Collection");
  ctu::XpcJetsamAssertion::createActivity();
  v10 = v39;
  v39 = 0uLL;
  v11 = *(std::__shared_weak_count **)(v1 + 344);
  *(_OWORD *)(v1 + 336) = v10;
  if (!v11)
    goto LABEL_15;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (!*((_QWORD *)&v39 + 1))
      goto LABEL_19;
  }
  else
  {
LABEL_15:
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (!*((_QWORD *)&v39 + 1))
      goto LABEL_19;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if ((v36 & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_19:
  if (v36 < 0)
LABEL_20:
    operator delete(*(void **)__p);
LABEL_21:
  if (v38)
  {
    v17 = &v38->__shared_owners_;
    do
      v18 = __ldaxr((unint64_t *)v17);
    while (__stlxr(v18 - 1, (unint64_t *)v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (*(_QWORD *)(v1 + 336))
  {
    v19 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.st_dev) = 0;
      _os_log_impl(&dword_236E0D000, v19, OS_LOG_TYPE_DEFAULT, "#I Taking Trace File Collection Assertion", (uint8_t *)&buf, 2u);
    }
  }
  TraceFileCollection::registerForMemoryPressure_sync((TraceFileCollection *)v1);
  v20 = (_QWORD *)(v1 + 184);
  v21 = *(char *)(v1 + 207);
  if (v21 < 0)
  {
    if (*(_BYTE *)(*v20 + *(_QWORD *)(v1 + 192) - 1) == 47)
      goto LABEL_34;
    goto LABEL_33;
  }
  if (*((_BYTE *)v20 + *(unsigned __int8 *)(v1 + 207) - 1) != 47)
  {
LABEL_33:
    std::string::push_back((std::string *)(v1 + 184), 47);
    LOBYTE(v21) = *(_BYTE *)(v1 + 207);
  }
LABEL_34:
  v22.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v22.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&buf.st_blksize = v22;
  *(timespec *)buf.st_qspare = v22;
  buf.st_birthtimespec = v22;
  *(timespec *)&buf.st_size = v22;
  buf.st_mtimespec = v22;
  buf.st_ctimespec = v22;
  *(timespec *)&buf.st_uid = v22;
  buf.st_atimespec = v22;
  *(timespec *)&buf.st_dev = v22;
  if ((v21 & 0x80u) == 0)
    v23 = (const char *)(v1 + 184);
  else
    v23 = (const char *)*v20;
  if (!stat(v23, &buf))
  {
    v29 = *(char *)(v1 + 207) >= 0 ? (const char *)(v1 + 184) : *(const char **)(v1 + 184);
    v30 = opendir(v29);
    v31 = v30;
    if (v30)
    {
      v32 = readdir(v30);
      closedir(v31);
      if (v32)
        TraceFileCollection::getFileIndex_sync((TraceFileCollection *)v1, (unsigned int *)(v1 + 256), (unsigned int *)(v1 + 260));
    }
  }
  v24 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    v25 = *(_DWORD *)(v1 + 256);
    v26 = *(_DWORD *)(v1 + 260);
    buf.st_dev = 67109376;
    *(_DWORD *)&buf.st_mode = v25;
    LOWORD(buf.st_ino) = 1024;
    *(_DWORD *)((char *)&buf.st_ino + 2) = v26;
    _os_log_impl(&dword_236E0D000, v24, OS_LOG_TYPE_DEFAULT, "#I Init file index: fOldestFileNumber=%d, fNewestFileNumber=%d", (uint8_t *)&buf, 0xEu);
  }
  if (!*(_DWORD *)(v1 + 256) && !*(_DWORD *)(v1 + 260))
  {
    support::fs::removeDir((const char *)(v1 + 184));
    if (!support::fs::createDir((const char *)(v1 + 184), 0x1EDu, 1))
    {
      v33 = *(NSObject **)(v1 + 40);
      v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
      v27 = 0;
      if (!v34)
        return TraceFileCollection::createNewMemoryFile_sync((TraceFileCollection *)v1, v27);
      if (*(char *)(v1 + 207) < 0)
        v20 = (_QWORD *)*v20;
      buf.st_dev = 136315138;
      *(_QWORD *)&buf.st_mode = v20;
      _os_log_impl(&dword_236E0D000, v33, OS_LOG_TYPE_DEFAULT, "#I Failed to create: %s", (uint8_t *)&buf, 0xCu);
    }
    v27 = 0;
    return TraceFileCollection::createNewMemoryFile_sync((TraceFileCollection *)v1, v27);
  }
  v27 = 1;
  return TraceFileCollection::createNewMemoryFile_sync((TraceFileCollection *)v1, v27);
}

void sub_236E467D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  _Unwind_Resume(a1);
}

void TraceFileCollection::registerForMemoryPressure_sync(TraceFileCollection *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  dispatch_source_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  unint64_t v17;
  _QWORD handler[6];
  std::__shared_weak_count *v19;
  uint8_t buf[16];

  v2 = *((_QWORD *)this + 31);
  if (*((_DWORD *)this + 53))
  {
    if (!v2)
    {
      v5 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_236E0D000, v5, OS_LOG_TYPE_DEFAULT, "#I Register for memory pressure notifications", buf, 2u);
      }
      v6 = dispatch_source_create(MEMORY[0x24BDAC9F0], 0, 0x30uLL, *((dispatch_queue_t *)this + 11));
      v7 = *((_QWORD *)this + 31);
      *((_QWORD *)this + 31) = v6;
      if (v7)
      {
        dispatch_release(v7);
        v6 = (dispatch_source_t)*((_QWORD *)this + 31);
      }
      if (v6)
      {
        v8 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
        if (!v8 || (v9 = *((_QWORD *)this + 9), (v10 = std::__shared_weak_count::lock(v8)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v11 = v10;
        p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v11);
        }
        v16 = *((_QWORD *)this + 31);
        handler[0] = MEMORY[0x24BDAC760];
        handler[1] = 1174405120;
        handler[2] = ___ZN19TraceFileCollection30registerForMemoryPressure_syncEv_block_invoke;
        handler[3] = &__block_descriptor_tmp_33;
        handler[4] = this;
        handler[5] = v9;
        v19 = v11;
        do
          v17 = __ldxr(p_shared_weak_owners);
        while (__stxr(v17 + 1, p_shared_weak_owners));
        dispatch_source_set_event_handler(v16, handler);
        dispatch_activate(*((dispatch_object_t *)this + 31));
        if (v19)
          std::__shared_weak_count::__release_weak(v19);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else if (v2)
  {
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_236E0D000, v3, OS_LOG_TYPE_DEFAULT, "#I De-register from memory pressure notifications", buf, 2u);
      v2 = *((_QWORD *)this + 31);
    }
    dispatch_source_cancel(v2);
    v4 = *((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = 0;
    if (v4)
      dispatch_release(v4);
  }
}

uint64_t TraceFileCollection::createNewMemoryFile_sync(TraceFileCollection *this, int a2)
{
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  const char *v9;
  __int128 v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  int v16;
  size_t v17;
  int v18;
  size_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  void **v24;
  size_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  void **__dst;
  size_t v45;
  int64_t v46;
  void *__p[3];
  __int128 v48;
  char __str[16];
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 56))
  {
    v3 = atomic_load((unsigned int *)this + 57);
    if (v3 >= *((_DWORD *)this + 56))
      return 0;
  }
  if (a2)
    ++*((_DWORD *)this + 65);
  v4 = (unsigned int *)((char *)this + 228);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = atomic_load((unsigned int *)this + 57);
  if (v6 > *((_DWORD *)this + 58))
  {
    v7 = atomic_load((unsigned int *)this + 57);
    *((_DWORD *)this + 58) = v7;
  }
  v8 = *((_DWORD *)this + 65);
  v9 = (char *)this + 160;
  if (*((char *)this + 183) < 0)
    v9 = *(const char **)v9;
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__str = v10;
  v50 = v10;
  snprintf(__str, 0x20uLL, "0x%08X%s", v8, v9);
  v11 = strlen(__str);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v45 = v12;
    v46 = v15 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_18;
  }
  HIBYTE(v46) = v11;
  p_dst = (void **)&__dst;
  if (v11)
LABEL_18:
    memcpy(p_dst, __str, v12);
  *((_BYTE *)p_dst + v12) = 0;
  v16 = *((char *)this + 207);
  if (v16 >= 0)
    v17 = *((unsigned __int8 *)this + 207);
  else
    v17 = *((_QWORD *)this + 24);
  v18 = SHIBYTE(v46);
  if (v46 >= 0)
    v19 = HIBYTE(v46);
  else
    v19 = v45;
  v20 = v19 + v17;
  memset(__p, 170, sizeof(__p));
  if (v19 + v17 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v20 <= 0x16)
  {
    memset(__p, 0, sizeof(__p));
    v21 = (char *)__p;
    HIBYTE(__p[2]) = v19 + v17;
    if (!v17)
      goto LABEL_32;
    goto LABEL_28;
  }
  v40 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v20 | 7) != 0x17)
    v40 = v20 | 7;
  v41 = v40 + 1;
  v21 = (char *)operator new(v40 + 1);
  __p[1] = (void *)(v19 + v17);
  __p[2] = (void *)(v41 | 0x8000000000000000);
  __p[0] = v21;
  if (v17)
  {
LABEL_28:
    if (v16 >= 0)
      v22 = (char *)this + 184;
    else
      v22 = (char *)*((_QWORD *)this + 23);
    memmove(v21, v22, v17);
  }
LABEL_32:
  v23 = &v21[v17];
  if (v19)
  {
    if (v18 >= 0)
      v24 = (void **)&__dst;
    else
      v24 = __dst;
    memmove(v23, v24, v19);
  }
  v23[v19] = 0;
  v25 = *((unsigned int *)this + 54);
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  v42 = *((_QWORD *)this + 38);
  v43 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
  }
  TraceFile::create((__int128 *)__p, v25, 2, &v42, &v48);
  v29 = v48;
  v48 = 0uLL;
  v30 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
  *(_OWORD *)((char *)this + 264) = v29;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v43;
  if (!v43)
    goto LABEL_54;
  v37 = (unint64_t *)&v43->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (v38)
  {
LABEL_54:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_55;
LABEL_65:
    operator delete(__p[0]);
    if ((SHIBYTE(v46) & 0x80000000) == 0)
      goto LABEL_56;
LABEL_66:
    operator delete(__dst);
    goto LABEL_56;
  }
  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
  std::__shared_weak_count::__release_weak(v36);
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_65;
LABEL_55:
  if (SHIBYTE(v46) < 0)
    goto LABEL_66;
LABEL_56:
  Timestamp::Timestamp((Timestamp *)__str);
  if ((char *)this + 280 != __str)
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>((uint64_t)this + 280, *(_QWORD **)__str, &__str[8]);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)__str, *(_QWORD **)&__str[8]);
  return 1;
}

void sub_236E46E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,_QWORD *a22)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a21, a22);
  _Unwind_Resume(a1);
}

void sub_236E46E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  int v21;

  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a21 < 0)
    operator delete(__p);
  if (v21 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void TraceFileCollection::~TraceFileCollection(TraceFileCollection *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  void *v22;
  NSObject *v23;
  NSObject *v24;
  std::__shared_weak_count *v25;
  uint8_t v26[16];
  uint8_t v27[16];
  uint8_t buf[16];

  *(_QWORD *)this = off_25086CD68;
  v2 = *((_QWORD *)this + 31);
  if (v2)
  {
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_236E0D000, v3, OS_LOG_TYPE_DEFAULT, "#I De-register from memory pressure notifications", buf, 2u);
      v2 = *((_QWORD *)this + 31);
    }
    dispatch_source_cancel(v2);
    v4 = *((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = 0;
    if (v4)
      dispatch_release(v4);
  }
  if (*((_QWORD *)this + 42))
  {
    usleep(0x30D40u);
    v5 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_236E0D000, v5, OS_LOG_TYPE_DEFAULT, "#I Releasing Trace File Collection Assertion", v27, 2u);
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
    *((_QWORD *)this + 42) = 0;
    *((_QWORD *)this + 43) = 0;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        v9 = *((_QWORD *)this + 5);
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          goto LABEL_15;
        goto LABEL_14;
      }
    }
  }
  v9 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
LABEL_14:
    *(_WORD *)v26 = 0;
    _os_log_impl(&dword_236E0D000, v9, OS_LOG_TYPE_DEFAULT, "#I Destructor", v26, 2u);
  }
LABEL_15:
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *((_QWORD *)this + 41);
  if (v13)
    dispatch_release(v13);
  v14 = *((_QWORD *)this + 40);
  if (v14)
    dispatch_release(v14);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 280, *((_QWORD **)this + 36));
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = *((_QWORD *)this + 31);
  if (v21)
    dispatch_release(v21);
  if (*((char *)this + 207) < 0)
  {
    operator delete(*((void **)this + 23));
    if ((*((char *)this + 183) & 0x80000000) == 0)
    {
LABEL_38:
      v22 = (void *)*((_QWORD *)this + 17);
      if (!v22)
        goto LABEL_40;
      goto LABEL_39;
    }
  }
  else if ((*((char *)this + 183) & 0x80000000) == 0)
  {
    goto LABEL_38;
  }
  operator delete(*((void **)this + 20));
  v22 = (void *)*((_QWORD *)this + 17);
  if (v22)
  {
LABEL_39:
    *((_QWORD *)this + 18) = v22;
    operator delete(v22);
  }
LABEL_40:
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  *(_QWORD *)this = off_25086D098;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v23 = *((_QWORD *)this + 12);
  if (v23)
    dispatch_release(v23);
  v24 = *((_QWORD *)this + 11);
  if (v24)
    dispatch_release(v24);
  v25 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
}

{
  void *v1;

  TraceFileCollection::~TraceFileCollection(this);
  operator delete(v1);
}

void TraceFileCollection::deregisterForMemoryPressure_sync(TraceFileCollection *this)
{
  NSObject *v1;
  NSObject *v3;
  NSObject *v4;
  uint8_t v5[16];

  v1 = *((_QWORD *)this + 31);
  if (v1)
  {
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_236E0D000, v3, OS_LOG_TYPE_DEFAULT, "#I De-register from memory pressure notifications", v5, 2u);
      v1 = *((_QWORD *)this + 31);
    }
    dispatch_source_cancel(v1);
    v4 = *((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = 0;
    if (v4)
      dispatch_release(v4);
  }
}

uint64_t TraceFileCollection::handleReadData(TraceFileCollection *this, const unsigned __int8 *a2, int a3)
{
  NSObject *v3;
  char *v4;
  uint64_t v5;
  _QWORD v7[7];
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD block[6];

  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 0x40000000;
  v7[2] = ___ZN19TraceFileCollection14handleReadDataEPKhj_block_invoke;
  v7[3] = &unk_25086CDC0;
  v8 = a3;
  v7[4] = &v9;
  v7[5] = this;
  v7[6] = a2;
  v13 = v7;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_52;
  block[4] = (char *)this + 72;
  block[5] = &v13;
  v4 = (char *)this + 88;
  v3 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v4 + 1))
    dispatch_async_and_wait(v3, block);
  else
    dispatch_sync(v3, block);
  v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void ___ZN19TraceFileCollection14handleReadDataEPKhj_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(v2 + 264);
  if (!v3)
  {
    TraceFileCollection::createNewMemoryFile_sync(*(TraceFileCollection **)(a1 + 40), 1);
    v3 = *(_QWORD *)(v2 + 264);
    if (!v3)
    {
      *(_QWORD *)(v2 + 240) += *(unsigned int *)(a1 + 56);
      return;
    }
  }
  v4 = *(_DWORD *)(v3 + 64);
  if (v4)
  {
LABEL_8:
    v5 = *(char **)(a1 + 48);
    v6 = *(_DWORD *)(a1 + 56);
    v7 = *(_DWORD *)(v3 + 68);
    v8 = v7 - v4;
    v9 = v6 - (v7 - v4);
    if (v6 > v7 - v4)
      goto LABEL_9;
LABEL_15:
    v10 = v4 + v6;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a1 + 56))
  {
    Timestamp::Timestamp((Timestamp *)&v15);
    if ((_QWORD **)(v2 + 280) != &v15)
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>(v2 + 280, v15, &v16);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v15, v16);
    v3 = *(_QWORD *)(v2 + 264);
    v4 = *(_DWORD *)(v3 + 64);
    goto LABEL_8;
  }
  v4 = 0;
  v5 = *(char **)(a1 + 48);
  v6 = *(_DWORD *)(a1 + 56);
  v7 = *(_DWORD *)(v3 + 68);
  v8 = v7;
  v9 = v6 - v7;
  if (v6 <= v7)
    goto LABEL_15;
LABEL_9:
  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
  {
    *(_DWORD *)(v3 + 60) += v9;
    v10 = v7;
    goto LABEL_16;
  }
  v10 = v7;
  v6 = v8;
  if (v8)
  {
LABEL_16:
    *(_DWORD *)(v3 + 64) = v10;
    v11 = *(_DWORD *)(v3 + 56);
    v12 = v11 & (v7 - 1);
    v13 = v7 - v12;
    *(_DWORD *)(v3 + 56) = v11 + v6;
    v14 = v6 - v13;
    if (v6 <= v13)
    {
      v14 = v6;
    }
    else
    {
      memcpy((void *)(*(_QWORD *)(v3 + 32) + v12), v5, v13);
      v12 = 0;
      v5 += v13;
    }
    memcpy((void *)(*(_QWORD *)(v3 + 32) + v12), v5, v14);
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
}

void sub_236E47448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void TraceFileCollection::archive(TraceFileCollection *this, char a2)
{
  NSObject *v2;
  char *v3;
  _QWORD v4[5];
  char v5;
  _QWORD *v6;
  _QWORD block[6];

  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 0x40000000;
  v4[2] = ___ZN19TraceFileCollection7archiveEb_block_invoke;
  v4[3] = &__block_descriptor_tmp_7;
  v4[4] = this;
  v5 = a2;
  v6 = v4;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_52;
  block[4] = (char *)this + 72;
  block[5] = &v6;
  v3 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v3 + 1))
    dispatch_async_and_wait(v2, block);
  else
    dispatch_sync(v2, block);
}

void ___ZN19TraceFileCollection7archiveEb_block_invoke(uint64_t a1)
{
  TraceFileCollection::storeFile_sync(*(dispatch_group_t **)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void TraceFileCollection::storeFile_sync(dispatch_group_t *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  const char *v7;
  __int128 v8;
  size_t v9;
  std::error_code *v10;
  size_t v11;
  void **p_dst;
  uint64_t v13;
  uint64_t v14;
  int v15;
  size_t v16;
  int v17;
  size_t v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  void **v23;
  int v24;
  void *v25;
  const std::__fs::filesystem::path *v26;
  int v27;
  __int128 v28;
  size_t v29;
  std::error_code *v30;
  size_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  size_t v38;
  int v39;
  size_t v40;
  unint64_t v41;
  _QWORD *v42;
  char *v43;
  char *v44;
  void **v45;
  int v46;
  void *v47;
  const std::__fs::filesystem::path *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char **v53;
  void **__dst;
  size_t v55;
  int64_t v56;
  _QWORD v57[3];
  char __str[16];
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  if (this[33])
  {
    TraceFileCollection::archiveMemoryFile_sync(this);
    v3 = *((unsigned int *)this + 64);
    v4 = *((unsigned int *)this + 65) - v3;
    v5 = *((int *)this + 52);
    if ((_DWORD)v5)
      v6 = v4 + 1 <= v5;
    else
      v6 = 1;
    if (!v6)
    {
      v53 = (char **)(this + 23);
      while (1)
      {
        v7 = (const char *)(this + 20);
        if (*((char *)this + 183) < 0)
          v7 = (const char *)this[20];
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)__str = v8;
        v59 = v8;
        snprintf(__str, 0x20uLL, "0x%08X%s", v3, v7);
        v9 = strlen(__str);
        if (v9 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v11 = v9;
        if (v9 >= 0x17)
          break;
        HIBYTE(v56) = v9;
        p_dst = (void **)&__dst;
        if (v9)
          goto LABEL_16;
LABEL_17:
        *((_BYTE *)p_dst + v11) = 0;
        v15 = *((char *)this + 207);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)this + 207);
        else
          v16 = (size_t)this[24];
        v17 = SHIBYTE(v56);
        if (v56 >= 0)
          v18 = HIBYTE(v56);
        else
          v18 = v55;
        v19 = v18 + v16;
        memset(v57, 170, sizeof(v57));
        if (v18 + v16 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v19 <= 0x16)
        {
          memset(v57, 0, sizeof(v57));
          v20 = v57;
          HIBYTE(v57[2]) = v18 + v16;
          if (!v16)
            goto LABEL_30;
LABEL_26:
          if (v15 >= 0)
            v21 = (char *)(this + 23);
          else
            v21 = *v53;
          memmove(v20, v21, v16);
          goto LABEL_30;
        }
        v33 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17)
          v33 = v19 | 7;
        v34 = v33 + 1;
        v20 = operator new(v33 + 1);
        v57[1] = v18 + v16;
        v57[2] = v34 | 0x8000000000000000;
        v57[0] = v20;
        if (v16)
          goto LABEL_26;
LABEL_30:
        v22 = (char *)v20 + v16;
        if (v18)
        {
          if (v17 >= 0)
            v23 = (void **)&__dst;
          else
            v23 = __dst;
          memmove(v22, v23, v18);
        }
        v22[v18] = 0;
        v24 = SHIBYTE(v57[2]);
        v25 = (void *)v57[0];
        if (v57[2] >= 0)
          v26 = (const std::__fs::filesystem::path *)v57;
        else
          v26 = (const std::__fs::filesystem::path *)v57[0];
        if (remove(v26, v10))
          unlink((const char *)v26);
        if (v24 < 0)
        {
          operator delete(v25);
          if ((v17 & 0x80000000) == 0)
            goto LABEL_42;
        }
        else if ((v17 & 0x80000000) == 0)
        {
          goto LABEL_42;
        }
        operator delete(__dst);
LABEL_42:
        v27 = *((_DWORD *)this + 64);
        *(_QWORD *)&v28 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)__str = v28;
        v59 = v28;
        snprintf(__str, 0x20uLL, "0x%08X%s", v27, ".meta");
        v29 = strlen(__str);
        if (v29 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v31 = v29;
        if (v29 >= 0x17)
        {
          v35 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v29 | 7) != 0x17)
            v35 = v29 | 7;
          v36 = v35 + 1;
          v32 = (void **)operator new(v35 + 1);
          v55 = v31;
          v56 = v36 | 0x8000000000000000;
          __dst = v32;
LABEL_53:
          memcpy(v32, __str, v31);
          goto LABEL_54;
        }
        HIBYTE(v56) = v29;
        v32 = (void **)&__dst;
        if (v29)
          goto LABEL_53;
LABEL_54:
        *((_BYTE *)v32 + v31) = 0;
        v37 = *((char *)this + 207);
        if (v37 >= 0)
          v38 = *((unsigned __int8 *)this + 207);
        else
          v38 = (size_t)this[24];
        v39 = SHIBYTE(v56);
        if (v56 >= 0)
          v40 = HIBYTE(v56);
        else
          v40 = v55;
        v41 = v40 + v38;
        memset(v57, 170, sizeof(v57));
        if (v40 + v38 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v41 <= 0x16)
        {
          memset(v57, 0, sizeof(v57));
          v42 = v57;
          HIBYTE(v57[2]) = v40 + v38;
          if (!v38)
            goto LABEL_67;
LABEL_63:
          if (v37 >= 0)
            v43 = (char *)(this + 23);
          else
            v43 = *v53;
          memmove(v42, v43, v38);
          goto LABEL_67;
        }
        v50 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v41 | 7) != 0x17)
          v50 = v41 | 7;
        v51 = v50 + 1;
        v42 = operator new(v50 + 1);
        v57[1] = v40 + v38;
        v57[2] = v51 | 0x8000000000000000;
        v57[0] = v42;
        if (v38)
          goto LABEL_63;
LABEL_67:
        v44 = (char *)v42 + v38;
        if (v40)
        {
          if (v39 >= 0)
            v45 = (void **)&__dst;
          else
            v45 = __dst;
          memmove(v44, v45, v40);
        }
        v44[v40] = 0;
        v46 = SHIBYTE(v57[2]);
        v47 = (void *)v57[0];
        if (v57[2] >= 0)
          v48 = (const std::__fs::filesystem::path *)v57;
        else
          v48 = (const std::__fs::filesystem::path *)v57[0];
        if (remove(v48, v30))
          unlink((const char *)v48);
        if (v46 < 0)
        {
          operator delete(v47);
          if (v39 < 0)
          {
LABEL_88:
            operator delete(__dst);
            LODWORD(v3) = *((_DWORD *)this + 64) + 1;
            *((_DWORD *)this + 64) = v3;
            v49 = *((int *)this + 52);
            if (!(_DWORD)v49)
              goto LABEL_91;
            goto LABEL_89;
          }
        }
        else if (v39 < 0)
        {
          goto LABEL_88;
        }
        LODWORD(v3) = *((_DWORD *)this + 64) + 1;
        *((_DWORD *)this + 64) = v3;
        v49 = *((int *)this + 52);
        if (!(_DWORD)v49)
          goto LABEL_91;
LABEL_89:
        v6 = v4-- <= v49;
        if (v6)
          goto LABEL_91;
      }
      v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v13 = v9 | 7;
      v14 = v13 + 1;
      p_dst = (void **)operator new(v13 + 1);
      v55 = v11;
      v56 = v14 | 0x8000000000000000;
      __dst = p_dst;
LABEL_16:
      memcpy(p_dst, __str, v11);
      goto LABEL_17;
    }
LABEL_91:
    if (a2)
      TraceFileCollection::createNewMemoryFile_sync((TraceFileCollection *)this, 1);
  }
}

void sub_236E479FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p)
{
  int v15;

  if (v15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void TraceFileCollection::clear(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v8[5];
  std::string __p;
  char v10;
  _QWORD *v11;
  _QWORD block[6];

  v5 = a1 + 72;
  v6 = MEMORY[0x24BDAC760];
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 1174405120;
  v8[2] = ___ZN19TraceFileCollection5clearENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke;
  v8[3] = &__block_descriptor_tmp_8;
  v8[4] = a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v10 = a3;
  v11 = v8;
  block[0] = v6;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_52;
  block[4] = v5;
  block[5] = &v11;
  v7 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(a1 + 96))
  {
    dispatch_async_and_wait(v7, block);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  dispatch_sync(v7, block);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

void ___ZN19TraceFileCollection5clearENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    __p = *(std::string *)(a1 + 40);
  TraceFileCollection::clear_sync(v2, (uint64_t)&__p, *(unsigned __int8 *)(a1 + 64));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_236E47BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TraceFileCollection::clear_sync(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  dispatch_time_t v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  std::string::size_type v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::error_code *v19;
  std::string::size_type *v20;
  const std::__fs::filesystem::path *v21;
  int v22;
  const std::string::value_type *v23;
  const std::__fs::filesystem::path *v24;
  int v25;
  NSObject *v26;
  std::string::size_type v27;
  NSObject *v28;
  NSObject *global_queue;
  _QWORD block[4];
  std::string v31;
  std::string v32;
  void *__p[2];
  std::string::size_type v34;
  std::string v35;
  std::string buf;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = *(NSObject **)(a1 + 328);
  v7 = dispatch_time(0, 2000000000);
  if (dispatch_group_wait(v6, v7))
  {
    v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v35.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_236E0D000, v8, OS_LOG_TYPE_ERROR, "TraceFileCollection files will be removed on the next start", (uint8_t *)&v35, 2u);
    }
    return;
  }
  if (*(_QWORD *)(a1 + 264))
  {
    v9 = *(std::__shared_weak_count **)(a1 + 272);
    *(_QWORD *)(a1 + 264) = 0;
    *(_QWORD *)(a1 + 272) = 0;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (unsigned int *)(a1 + 228);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
  }
  *(_QWORD *)(a1 + 256) = 0;
  v14 = *(unsigned __int8 *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
      return;
  }
  else if (!*(_BYTE *)(a2 + 23))
  {
    return;
  }
  strcpy((char *)&v32, "filecollection.scratch");
  *((_BYTE *)&v32.__r_.__value_.__s + 23) = 22;
  if ((v14 & 0x80u) == 0)
    v15 = (const std::string::value_type *)a2;
  else
    v15 = *(const std::string::value_type **)a2;
  if ((v14 & 0x80u) == 0)
    v16 = v14;
  else
    v16 = *(_QWORD *)(a2 + 8);
  v17 = std::string::insert(&v32, 0, v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v34 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  support::fs::createUniquePath((const char *)__p, &buf);
  v35 = buf;
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v34) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
  }
  else if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(v32.__r_.__value_.__l.__data_);
LABEL_25:
  if (support::fs::createDir((const char *)a2, 0x1EDu, 1))
  {
    v20 = (std::string::size_type *)(a1 + 184);
    if (*(char *)(a1 + 207) >= 0)
      v21 = (const std::__fs::filesystem::path *)(a1 + 184);
    else
      v21 = *(const std::__fs::filesystem::path **)(a1 + 184);
    v22 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
    v23 = (const std::string::value_type *)v35.__r_.__value_.__r.__words[0];
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = (const std::__fs::filesystem::path *)&v35;
    else
      v24 = (const std::__fs::filesystem::path *)v35.__r_.__value_.__r.__words[0];
    rename(v21, v24, v19);
    if (!v25 && a3)
    {
      v26 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        v27 = a1 + 184;
        if (*(char *)(a1 + 207) < 0)
          v27 = *v20;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v27;
        _os_log_impl(&dword_236E0D000, v26, OS_LOG_TYPE_DEFAULT, "#I Creating folder %s", (uint8_t *)&buf, 0xCu);
      }
      if (!support::fs::createDir((const char *)(a1 + 184), 0x1EDu, 1))
      {
        v28 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a1 + 207) < 0)
            v20 = (std::string::size_type *)*v20;
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
          _os_log_error_impl(&dword_236E0D000, v28, OS_LOG_TYPE_ERROR, "Failed to create folder: %s", (uint8_t *)&buf, 0xCu);
        }
        goto LABEL_53;
      }
      TraceFileCollection::createNewMemoryFile_sync((TraceFileCollection *)a1, 0);
      goto LABEL_44;
    }
    if (!v25)
    {
LABEL_44:
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 1174405120;
      block[2] = ___ZN19TraceFileCollection10clear_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke;
      block[3] = &__block_descriptor_tmp_26;
      if (v22 < 0)
        std::string::__init_copy_ctor_external(&v31, v23, v35.__r_.__value_.__l.__size_);
      else
        v31 = v35;
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_async(global_queue, block);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    LOBYTE(v22) = *((_BYTE *)&v35.__r_.__value_.__s + 23);
  }
LABEL_53:
  if ((v22 & 0x80) != 0)
    operator delete(v35.__r_.__value_.__l.__data_);
}

void sub_236E47F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a29 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

BOOL TraceFileCollection::snapshot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v18[10];
  std::__shared_weak_count *v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  _QWORD block[6];

  v21 = 0;
  v22 = &v21;
  v23 = 0x2000000000;
  v24 = 1;
  v6 = MEMORY[0x24BDAC760];
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 1174405120;
  v18[2] = ___ZN19TraceFileCollection8snapshotERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_S8_bNS0_10shared_ptrIN3abm5trace9TraceInfoEEE_block_invoke;
  v18[3] = &unk_25086CE38;
  v20 = a5;
  v18[4] = &v21;
  v18[5] = a1;
  v18[6] = a4;
  v18[7] = a2;
  v8 = *a6;
  v7 = (std::__shared_weak_count *)a6[1];
  v18[8] = a3;
  v18[9] = v8;
  v19 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v25 = v18;
  block[0] = v6;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_52;
  block[4] = a1 + 72;
  block[5] = &v25;
  v12 = a1 + 88;
  v11 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(v12 + 8))
  {
    dispatch_async_and_wait(v11, block);
    v13 = *((unsigned __int8 *)v22 + 24);
    v14 = v19;
    if (!v19)
      goto LABEL_12;
  }
  else
  {
    dispatch_sync(v11, block);
    v13 = *((unsigned __int8 *)v22 + 24);
    v14 = v19;
    if (!v19)
      goto LABEL_12;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_12:
  _Block_object_dispose(&v21, 8);
  return v13 != 0;
}

void ___ZN19TraceFileCollection8snapshotERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_S8_bNS0_10shared_ptrIN3abm5trace9TraceInfoEEE_block_invoke(uint64_t a1)
{
  dispatch_group_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[2];

  v2 = *(dispatch_group_t **)(a1 + 40);
  TraceFileCollection::prepareSnapshot_sync(v2);
  if (*(_BYTE *)(a1 + 88))
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 64);
    v6 = *(std::__shared_weak_count **)(a1 + 80);
    v11[0] = *(_QWORD *)(a1 + 72);
    v11[1] = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = TraceFileCollection::finishSnapshot_sync((uint64_t)v2, v3, v4, v5, (uint64_t)v11);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_236E48224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void TraceFileCollection::prepareSnapshot_sync(dispatch_group_t *this)
{
  NSObject *v2;
  int v3;
  int v4;
  dispatch_group_t v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  __int16 v9;
  dispatch_group_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  dispatch_group_wait(this[41], 0xFFFFFFFFFFFFFFFFLL);
  TraceFileCollection::storeFile_sync(this, 0);
  dispatch_group_wait(this[41], 0xFFFFFFFFFFFFFFFFLL);
  v2 = this[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_DWORD *)this + 53);
    v4 = *((_DWORD *)this + 56);
    v5 = this[30];
    v6[0] = 67109632;
    v6[1] = v3;
    v7 = 1024;
    v8 = v4;
    v9 = 2048;
    v10 = v5;
    _os_log_impl(&dword_236E0D000, v2, OS_LOG_TYPE_DEFAULT, "#I File collection state: maxMemoryFileCount=%u, fAppliedMemoryFileCount=%u, fDroppedBytes=%llu", (uint8_t *)v6, 0x18u);
  }
}

BOOL TraceFileCollection::finishSnapshot_sync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9;
  int v10;
  _BOOL8 updated;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type size;
  unsigned int v20;
  std::string *v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type v27;
  unsigned int v28;
  std::string *v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type v35;
  const std::string::value_type *v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type v42;
  uint64_t v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string::size_type v46;
  std::ios_base *v47;
  const std::string::value_type *v48;
  char v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  NSObject *v54;
  std::string *v55;
  const char *v56;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::string *v63;
  std::string::size_type v64;
  std::string::size_type v65;
  std::ios_base *v66;
  int v67;
  size_t v68;
  int v69;
  size_t v70;
  unint64_t v71;
  char *p_dst;
  const void *v73;
  char *v74;
  const void *v75;
  uint64_t v76;
  NSObject *v77;
  std::string *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  std::string *v82;
  char *v83;
  size_t v84;
  std::string::size_type v85;
  std::string *v86;
  uint64_t v87;
  uint64_t v88;
  std::error_code *v89;
  const char *v90;
  const std::__fs::filesystem::path *v91;
  const std::__fs::filesystem::path *v92;
  int v93;
  int v94;
  NSObject *v95;
  NSObject *v96;
  int v98;
  size_t v99;
  unint64_t v100;
  void *v101;
  std::string::size_type v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  int v106;
  const std::string::value_type *v107;
  std::string::size_type v108;
  std::string *v109;
  __int128 v110;
  std::string *v111;
  __int128 v112;
  char *v113;
  std::string *v114;
  __int128 v115;
  std::string *v116;
  std::string::size_type v117;
  uint64_t v118;
  const void **v119;
  std::string v120;
  xpc_object_t object;
  uint64_t v122[2];
  std::string __dst;
  std::string __p[24];
  std::string v125;
  std::string v126;
  std::string v127;
  uint64_t v128;

  v128 = *MEMORY[0x24BDAC8D0];
  v9 = *(_DWORD *)(a1 + 256);
  v10 = *(_DWORD *)(a1 + 260);
  memset(&__dst, 170, sizeof(__dst));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__dst, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  if (v9 == v10 + 1)
  {
    updated = 1;
  }
  else
  {
    LOBYTE(updated) = 1;
    do
    {
      if (updated)
      {
        v58 = *(std::__shared_weak_count **)(a5 + 8);
        v122[0] = *(_QWORD *)a5;
        v122[1] = (uint64_t)v58;
        if (v58)
        {
          p_shared_owners = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldxr(p_shared_owners);
          while (__stxr(v60 + 1, p_shared_owners));
        }
        updated = TraceFileCollection::updateInfoForSnapshotFiles_sync(a1, v9, (const void **)(a1 + 184), &__dst, v122);
        if (v58)
        {
          v61 = (unint64_t *)&v58->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
      }
      else
      {
        updated = 0;
      }
    }
    while (v9++ != v10);
  }
  v12 = *(_QWORD *)a5;
  if (*(_QWORD *)a5)
  {
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_236E53A60;
    strcpy(__p[0].__r_.__value_.__l.__data_, "Trace Collection Statistics");
    TraceFileCollection::getStatisticsAsDict_sync((TraceFileCollection *)a1, &object);
    abm::trace::TraceInfo::push(v12, (uint64_t)__p, &object);
    xpc_release(object);
    object = 0;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    abm::trace::TraceInfo::flushDataToDisk(*(abm::trace::TraceInfo **)a5);
  }
  *((_BYTE *)&v125.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&v125, "Dropped (Bytes): ");
  std::to_string(__p, *(_QWORD *)(a1 + 240));
  v120 = __p[0];
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v120;
  else
    v13 = (std::string *)v120.__r_.__value_.__r.__words[0];
  v14 = std::string::append(&v125, (const std::string::value_type *)v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v126.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 1;
  LOWORD(__p[0].__r_.__value_.__l.__data_) = 10;
  v16 = std::string::append(&v126, (const std::string::value_type *)__p, 1uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v127.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v127;
  else
    v18 = (std::string *)v127.__r_.__value_.__r.__words[0];
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  else
    size = v127.__r_.__value_.__l.__size_;
  std::string::append(&__dst, (const std::string::value_type *)v18, size);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v127.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_92;
    }
  }
  else if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_23;
LABEL_93:
    operator delete(v120.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_94;
  }
LABEL_92:
  operator delete(v126.__r_.__value_.__l.__data_);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_93;
LABEL_23:
  if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_24;
LABEL_94:
  operator delete(v125.__r_.__value_.__l.__data_);
LABEL_24:
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v125.__r_.__value_.__r.__words[1] = xmmword_236E53A70;
  strcpy(v125.__r_.__value_.__l.__data_, "Max memory file count: ");
  v20 = *(_DWORD *)(a1 + 212);
  memset(&v120, 0, sizeof(v120));
  std::to_string(__p, v20);
  v120 = __p[0];
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &v120;
  else
    v21 = (std::string *)v120.__r_.__value_.__r.__words[0];
  v22 = std::string::append(&v125, (const std::string::value_type *)v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v126.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 1;
  LOWORD(__p[0].__r_.__value_.__l.__data_) = 10;
  v24 = std::string::append(&v126, (const std::string::value_type *)__p, 1uLL);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v127.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = &v127;
  else
    v26 = (std::string *)v127.__r_.__value_.__r.__words[0];
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  else
    v27 = v127.__r_.__value_.__l.__size_;
  std::string::append(&__dst, (const std::string::value_type *)v26, v27);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v127.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_35:
      if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_36;
      goto LABEL_97;
    }
  }
  else if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_35;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_36:
    if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_37;
LABEL_98:
    operator delete(v120.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_99;
  }
LABEL_97:
  operator delete(v126.__r_.__value_.__l.__data_);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_98;
LABEL_37:
  if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_38;
LABEL_99:
  operator delete(v125.__r_.__value_.__l.__data_);
LABEL_38:
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v125.__r_.__value_.__r.__words[1] = xmmword_236E53A60;
  strcpy(v125.__r_.__value_.__l.__data_, "Applied memory file count: ");
  v28 = *(_DWORD *)(a1 + 224);
  memset(&v120, 0, sizeof(v120));
  std::to_string(__p, v28);
  v120 = __p[0];
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &v120;
  else
    v29 = (std::string *)v120.__r_.__value_.__r.__words[0];
  v30 = std::string::append(&v125, (const std::string::value_type *)v29);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v126.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 1;
  LOWORD(__p[0].__r_.__value_.__l.__data_) = 10;
  v32 = std::string::append(&v126, (const std::string::value_type *)__p, 1uLL);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v127.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &v127;
  else
    v34 = (std::string *)v127.__r_.__value_.__r.__words[0];
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  else
    v35 = v127.__r_.__value_.__l.__size_;
  std::string::append(&__dst, (const std::string::value_type *)v34, v35);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v127.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_49:
      if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_50;
      goto LABEL_102;
    }
  }
  else if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_49;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_50:
    if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_51;
LABEL_103:
    operator delete(v120.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_52;
    goto LABEL_104;
  }
LABEL_102:
  operator delete(v126.__r_.__value_.__l.__data_);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_103;
LABEL_51:
  if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_52;
LABEL_104:
  operator delete(v125.__r_.__value_.__l.__data_);
LABEL_52:
  *((_BYTE *)&v126.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v126, "Dump Reason: ");
  if (*(char *)(a4 + 23) >= 0)
    v36 = (const std::string::value_type *)a4;
  else
    v36 = *(const std::string::value_type **)a4;
  v37 = std::string::append(&v126, v36);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v127.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  *((_BYTE *)&v125.__r_.__value_.__s + 23) = 1;
  LOWORD(v125.__r_.__value_.__l.__data_) = 10;
  v39 = std::string::append(&v127, (const std::string::value_type *)&v125, 1uLL);
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = __p;
  else
    v41 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  else
    v42 = __p[0].__r_.__value_.__l.__size_;
  std::string::append(&__dst, (const std::string::value_type *)v41, v42);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_63:
      if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_64;
LABEL_107:
      operator delete(v127.__r_.__value_.__l.__data_);
      v118 = a3;
      if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_65;
      goto LABEL_108;
    }
  }
  else if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_63;
  }
  operator delete(v125.__r_.__value_.__l.__data_);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_107;
LABEL_64:
  v118 = a3;
  if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_65;
LABEL_108:
  operator delete(v126.__r_.__value_.__l.__data_);
LABEL_65:
  *(_QWORD *)(a1 + 240) = 0;
  memset(&__p[0].__r_.__value_.__r.__words[1], 170, 0x230uLL);
  v43 = MEMORY[0x24BEDB840];
  v44 = MEMORY[0x24BEDB840] + 64;
  v45 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v46 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  __p[17].__r_.__value_.__l.__size_ = MEMORY[0x24BEDB840] + 64;
  __p[0].__r_.__value_.__r.__words[0] = v45;
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(_QWORD *)(v45 - 24)) = v46;
  v47 = (std::ios_base *)((char *)__p + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24));
  std::ios_base::init(v47, &__p[0].__r_.__value_.__r.__words[1]);
  v47[1].__vftable = 0;
  v47[1].__fmtflags_ = -1;
  __p[0].__r_.__value_.__r.__words[0] = v43 + 24;
  __p[17].__r_.__value_.__l.__size_ = v44;
  MEMORY[0x23B804DAC](&__p[0].__r_.__value_.__r.__words[1]);
  memset(&v127, 170, sizeof(v127));
  v48 = *(const std::string::value_type **)(a1 + 184);
  *((_BYTE *)&v126.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&v126, "/info.txt");
  v49 = *(_BYTE *)(a1 + 207);
  v119 = (const void **)(a1 + 184);
  if (v49 >= 0)
    v50 = (const std::string::value_type *)(a1 + 184);
  else
    v50 = v48;
  if (v49 >= 0)
    v51 = *(unsigned __int8 *)(a1 + 207);
  else
    v51 = *(_QWORD *)(a1 + 192);
  v52 = std::string::insert(&v126, 0, v50, v51);
  v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v127.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  std::ofstream::open();
  if (*(_DWORD *)((char *)&__p[1].__r_.__value_.__r.__words[1] + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)))
  {
    v54 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      v55 = &v127;
      if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v55 = (std::string *)v127.__r_.__value_.__r.__words[0];
      LODWORD(v126.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v126.__r_.__value_.__r.__words + 4) = (std::string::size_type)v55;
      v56 = "Failed to open info file: %s";
LABEL_116:
      _os_log_error_impl(&dword_236E0D000, v54, OS_LOG_TYPE_ERROR, v56, (uint8_t *)&v126, 0xCu);
      goto LABEL_117;
    }
    goto LABEL_117;
  }
  std::ostream::write();
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)__p + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&__p[1].__r_.__value_.__r.__words[1] + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) | 4);
  if ((__p[1].__r_.__value_.__s.__data_[*(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24) + 8] & 1) != 0)
  {
    v54 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      v63 = &v127;
      if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v63 = (std::string *)v127.__r_.__value_.__r.__words[0];
      LODWORD(v126.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v126.__r_.__value_.__r.__words + 4) = (std::string::size_type)v63;
      v56 = "Failed to write: %s";
      goto LABEL_116;
    }
LABEL_117:
    updated = 0;
  }
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  v64 = *MEMORY[0x24BEDB7E8];
  __p[0].__r_.__value_.__r.__words[0] = v64;
  v65 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(_QWORD *)(v64 - 24)) = v65;
  MEMORY[0x23B804DB8](&__p[0].__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x23B804F8C](&__p[17].__r_.__value_.__r.__words[1]);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 104))
      goto LABEL_122;
LABEL_146:
    v76 = v118;
    goto LABEL_163;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_146;
LABEL_122:
  memset(&__p[0].__r_.__value_.__r.__words[1], 170, 0x230uLL);
  __p[17].__r_.__value_.__l.__size_ = v43 + 64;
  __p[0].__r_.__value_.__r.__words[0] = v45;
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(_QWORD *)(v45 - 24)) = v46;
  v66 = (std::ios_base *)((char *)__p + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24));
  std::ios_base::init(v66, &__p[0].__r_.__value_.__r.__words[1]);
  v117 = v65;
  v66[1].__vftable = 0;
  v66[1].__fmtflags_ = -1;
  __p[0].__r_.__value_.__r.__words[0] = v43 + 24;
  __p[17].__r_.__value_.__l.__size_ = v43 + 64;
  MEMORY[0x23B804DAC](&__p[0].__r_.__value_.__r.__words[1]);
  v67 = *(char *)(a1 + 207);
  if (v67 >= 0)
    v68 = *(unsigned __int8 *)(a1 + 207);
  else
    v68 = *(_QWORD *)(a1 + 192);
  v69 = *(char *)(a1 + 135);
  if (v69 >= 0)
    v70 = *(unsigned __int8 *)(a1 + 135);
  else
    v70 = *(_QWORD *)(a1 + 120);
  v71 = v70 + v68;
  memset(&__dst, 170, sizeof(__dst));
  if (v70 + v68 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v71 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v70 + v68;
    if (!v68)
      goto LABEL_135;
    goto LABEL_131;
  }
  v80 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v71 | 7) != 0x17)
    v80 = v71 | 7;
  v81 = v80 + 1;
  p_dst = (char *)operator new(v80 + 1);
  __dst.__r_.__value_.__l.__size_ = v70 + v68;
  __dst.__r_.__value_.__r.__words[2] = v81 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v68)
  {
LABEL_131:
    if (v67 >= 0)
      v73 = (const void *)(a1 + 184);
    else
      v73 = *v119;
    memmove(p_dst, v73, v68);
  }
LABEL_135:
  v74 = &p_dst[v68];
  if (v70)
  {
    if (v69 >= 0)
      v75 = (const void *)(a1 + 112);
    else
      v75 = *(const void **)(a1 + 112);
    memmove(v74, v75, v70);
  }
  v74[v70] = 0;
  std::ofstream::open();
  v76 = v118;
  if (*(_DWORD *)((char *)&__p[1].__r_.__value_.__r.__words[1] + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)))
  {
    v77 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
    {
      v78 = &__dst;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v78 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      LODWORD(v127.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 4) = (std::string::size_type)v78;
      v79 = "Failed to open header file: %s";
LABEL_158:
      _os_log_error_impl(&dword_236E0D000, v77, OS_LOG_TYPE_ERROR, v79, (uint8_t *)&v127, 0xCu);
    }
  }
  else
  {
    std::ostream::write();
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)__p + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&__p[1].__r_.__value_.__r.__words[1] + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) | 4);
    if ((__p[1].__r_.__value_.__s.__data_[*(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24) + 8] & 1) == 0)
      goto LABEL_160;
    v77 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
    {
      v82 = &__dst;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v82 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      LODWORD(v127.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 4) = (std::string::size_type)v82;
      v79 = "Failed to write: %s";
      goto LABEL_158;
    }
  }
  updated = 0;
LABEL_160:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  __p[0].__r_.__value_.__r.__words[0] = v64;
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(_QWORD *)(v64 - 24)) = v117;
  MEMORY[0x23B804DB8](&__p[0].__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x23B804F8C](&__p[17].__r_.__value_.__r.__words[1]);
LABEL_163:
  v83 = abm::trace::kSnapshotFolder;
  v84 = strlen(abm::trace::kSnapshotFolder);
  if (v84 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v85 = v84;
  if (v84 >= 0x17)
  {
    v87 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17)
      v87 = v84 | 7;
    v88 = v87 + 1;
    v86 = (std::string *)operator new(v87 + 1);
    __p[0].__r_.__value_.__l.__size_ = v85;
    __p[0].__r_.__value_.__r.__words[2] = v88 | 0x8000000000000000;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v86;
    goto LABEL_170;
  }
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v84;
  v86 = __p;
  if (v84)
LABEL_170:
    memmove(v86, v83, v85);
  v86->__r_.__value_.__s.__data_[v85] = 0;
  support::fs::createDir((const char *)__p, 0x1EDu, 1);
  v90 = (const char *)(a1 + 184);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 207) >= 0)
    v91 = (const std::__fs::filesystem::path *)(a1 + 184);
  else
    v91 = *(const std::__fs::filesystem::path **)(a1 + 184);
  if (*(char *)(v76 + 23) >= 0)
    v92 = (const std::__fs::filesystem::path *)v76;
  else
    v92 = *(const std::__fs::filesystem::path **)v76;
  rename(v91, v92, v89);
  if (v93)
  {
    v94 = *__error();
    v95 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
    {
      updated = 0;
      v90 = (const char *)(a1 + 184);
      goto LABEL_182;
    }
    v98 = *(char *)(a1 + 207);
    if (v98 >= 0)
      v99 = *(unsigned __int8 *)(a1 + 207);
    else
      v99 = *(_QWORD *)(a1 + 192);
    v100 = v99 + 4;
    memset(&v126, 170, sizeof(v126));
    if (v99 + 4 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v100 >= 0x17)
    {
      v103 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v100 | 7) != 0x17)
        v103 = v100 | 7;
      v104 = v103 + 1;
      v101 = operator new(v103 + 1);
      v126.__r_.__value_.__l.__size_ = v99 + 4;
      v126.__r_.__value_.__r.__words[2] = v104 | 0x8000000000000000;
      v126.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
      v90 = (const char *)(a1 + 184);
    }
    else
    {
      memset(&v126, 0, sizeof(v126));
      v101 = &v126;
      *((_BYTE *)&v126.__r_.__value_.__s + 23) = v99 + 4;
      v90 = (const char *)(a1 + 184);
      if (!v99)
        goto LABEL_202;
    }
    if (v98 >= 0)
      v105 = v90;
    else
      v105 = *(const char **)v90;
    memmove(v101, v105, v99);
LABEL_202:
    strcpy((char *)v101 + v99, " to ");
    v106 = *(char *)(v76 + 23);
    if (v106 >= 0)
      v107 = (const std::string::value_type *)v76;
    else
      v107 = *(const std::string::value_type **)v76;
    if (v106 >= 0)
      v108 = *(unsigned __int8 *)(v76 + 23);
    else
      v108 = *(_QWORD *)(v76 + 8);
    v109 = std::string::append(&v126, v107, v108);
    v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
    v127.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v110;
    v109->__r_.__value_.__l.__size_ = 0;
    v109->__r_.__value_.__r.__words[2] = 0;
    v109->__r_.__value_.__r.__words[0] = 0;
    v111 = std::string::append(&v127, " Error: ");
    v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v112;
    v111->__r_.__value_.__l.__size_ = 0;
    v111->__r_.__value_.__r.__words[2] = 0;
    v111->__r_.__value_.__r.__words[0] = 0;
    v113 = strerror(v94);
    v114 = std::string::append(&__dst, v113);
    v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v115;
    v114->__r_.__value_.__l.__size_ = 0;
    v114->__r_.__value_.__r.__words[2] = 0;
    v114->__r_.__value_.__r.__words[0] = 0;
    v116 = __p;
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v116 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(v125.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v125.__r_.__value_.__r.__words + 4) = (std::string::size_type)v116;
    _os_log_error_impl(&dword_236E0D000, v95, OS_LOG_TYPE_ERROR, "Failed to rename: %s", (uint8_t *)&v125, 0xCu);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_212:
        if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_213;
        goto LABEL_219;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_212;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_213:
      if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_214:
        updated = 0;
        goto LABEL_182;
      }
LABEL_220:
      operator delete(v126.__r_.__value_.__l.__data_);
      goto LABEL_214;
    }
LABEL_219:
    operator delete(v127.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_214;
    goto LABEL_220;
  }
LABEL_182:
  if (!support::fs::createDir(v90, 0x1EDu, 1))
  {
    v96 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 207) < 0)
        v102 = (std::string::size_type)*v119;
      else
        v102 = a1 + 184;
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = v102;
      _os_log_error_impl(&dword_236E0D000, v96, OS_LOG_TYPE_ERROR, "Failed to create folder: %s", (uint8_t *)__p, 0xCu);
    }
    updated = 0;
  }
  *(_QWORD *)(a1 + 256) = 0;
  TraceFileCollection::createNewMemoryFile_sync((TraceFileCollection *)a1, 0);
  return updated;
}

void sub_236E49358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,xpc_object_t object,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (*(char *)(v36 - 105) < 0)
  {
    operator delete(*(void **)(v36 - 128));
    if ((*(char *)(v36 - 137) & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((*(char *)(v36 - 137) & 0x80000000) == 0)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  operator delete(*(void **)(v36 - 160));
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_72c48_ZTSNSt3__110shared_ptrIN3abm5trace9TraceInfoEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 80) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_72c48_ZTSNSt3__110shared_ptrIN3abm5trace9TraceInfoEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 80);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

BOOL TraceFileCollection::updateInfoForSnapshotFiles_sync(uint64_t a1, int a2, const void **a3, std::string *a4, uint64_t *a5)
{
  __int128 v9;
  size_t v10;
  size_t v11;
  __int128 *p_dst;
  uint64_t v13;
  uint64_t v14;
  int v15;
  size_t v16;
  int v17;
  size_t v18;
  unint64_t v19;
  char *v20;
  const void *v21;
  char *v22;
  __int128 *v23;
  const char *v24;
  __int128 v25;
  size_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::ios_base *v38;
  const std::ios_base *v39;
  NSObject *v40;
  _BOOL8 v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  size_t v44;
  std::locale::__imp *v45;
  std::locale::__imp *v46;
  uint64_t v47;
  uint64_t v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  const std::string::value_type *locale;
  std::string::size_type locale_high;
  const std::locale::facet *v55;
  size_t v56;
  std::locale::__imp *v57;
  std::locale::__imp *v58;
  uint64_t v59;
  uint64_t v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  std::string::size_type size;
  std::error_code *v67;
  const std::__fs::filesystem::path *v68;
  void **v69;
  int v70;
  size_t v71;
  int v72;
  size_t v73;
  unint64_t v74;
  _BYTE *v75;
  const void *v76;
  void **v77;
  std::string *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  _BOOL4 v83;
  void **v84;
  size_t v85;
  std::string::size_type v86;
  std::string *v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  size_t v91;
  std::string::size_type v92;
  std::string *v93;
  uint64_t v94;
  uint64_t v95;
  void **v97;
  uint64_t *v98;
  std::string *v100;
  std::string v101;
  std::string v102;
  std::string v103;
  __int128 v104;
  std::string v105;
  std::string::value_type v106[8];
  char v107;
  std::string __s;
  std::string v109;
  std::string v110;
  std::locale v111[4];
  void *__p[3];
  void *v113[3];
  std::locale v114[4];
  _OWORD __str[36];
  __int128 __dst;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  memset(v113, 170, sizeof(v113));
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __str[0] = v9;
  __str[1] = v9;
  snprintf((char *)__str, 0x20uLL, "0x%08X%s", a2, ".meta");
  v10 = strlen((const char *)__str);
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = v10;
  v98 = a5;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    p_dst = (__int128 *)operator new(v13 + 1);
    *((_QWORD *)&__dst + 1) = v11;
    *(_QWORD *)&v117 = v14 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  BYTE7(v117) = v10;
  p_dst = &__dst;
  if (v10)
LABEL_8:
    memcpy(p_dst, __str, v11);
  *((_BYTE *)p_dst + v11) = 0;
  v15 = *((char *)a3 + 23);
  if (v15 >= 0)
    v16 = *((unsigned __int8 *)a3 + 23);
  else
    v16 = (size_t)a3[1];
  v17 = SBYTE7(v117);
  if ((SBYTE7(v117) & 0x80u) == 0)
    v18 = BYTE7(v117);
  else
    v18 = *((_QWORD *)&__dst + 1);
  v19 = v18 + v16;
  memset(v113, 170, sizeof(v113));
  if (v18 + v16 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v19 <= 0x16)
  {
    memset(v113, 0, sizeof(v113));
    v20 = (char *)v113;
    HIBYTE(v113[2]) = v18 + v16;
    if (!v16)
      goto LABEL_22;
    goto LABEL_18;
  }
  v29 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v19 | 7) != 0x17)
    v29 = v19 | 7;
  v30 = v29 + 1;
  v20 = (char *)operator new(v29 + 1);
  v113[1] = (void *)(v18 + v16);
  v113[2] = (void *)(v30 | 0x8000000000000000);
  v113[0] = v20;
  if (v16)
  {
LABEL_18:
    if (v15 >= 0)
      v21 = a3;
    else
      v21 = *a3;
    memmove(v20, v21, v16);
  }
LABEL_22:
  v22 = &v20[v16];
  if (v18)
  {
    if (v17 >= 0)
      v23 = &__dst;
    else
      v23 = (__int128 *)__dst;
    memmove(v22, v23, v18);
  }
  v22[v18] = 0;
  if (v17 < 0)
  {
    operator delete((void *)__dst);
    v24 = (const char *)(a1 + 160);
    memset(__p, 170, sizeof(__p));
    if ((*(char *)(a1 + 183) & 0x80000000) == 0)
      goto LABEL_29;
  }
  else
  {
    v24 = (const char *)(a1 + 160);
    memset(__p, 170, sizeof(__p));
    if ((*(char *)(a1 + 183) & 0x80000000) == 0)
      goto LABEL_29;
  }
  v24 = *(const char **)v24;
LABEL_29:
  *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __str[0] = v25;
  __str[1] = v25;
  snprintf((char *)__str, 0x20uLL, "0x%08X%s", a2, v24);
  v26 = strlen((const char *)__str);
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    v31 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v31 = v26 | 7;
    v32 = v31 + 1;
    v28 = operator new(v31 + 1);
    __p[1] = v27;
    __p[2] = (void *)(v32 | 0x8000000000000000);
    __p[0] = v28;
    goto LABEL_40;
  }
  HIBYTE(__p[2]) = v26;
  v28 = __p;
  if (v26)
LABEL_40:
    memcpy(v28, __str, (size_t)v27);
  *((_BYTE *)v27 + (_QWORD)v28) = 0;
  *(_QWORD *)&v33 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v118 = v33;
  v119 = v33;
  __dst = v33;
  v117 = v33;
  memset((char *)__str + 8, 170, 0x238uLL);
  v34 = MEMORY[0x24BEDB838];
  v35 = MEMORY[0x24BEDB838] + 64;
  v36 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v37 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *((_QWORD *)&__str[26] + 1) = MEMORY[0x24BEDB838] + 64;
  *(_QWORD *)&__str[0] = v36;
  *(_QWORD *)((char *)__str + *(_QWORD *)(v36 - 24)) = v37;
  *((_QWORD *)&__str[0] + 1) = 0;
  v38 = (std::ios_base *)((char *)__str + *(_QWORD *)(*(_QWORD *)&__str[0] - 24));
  std::ios_base::init(v38, &__str[1]);
  v38[1].__vftable = 0;
  v38[1].__fmtflags_ = -1;
  *(_QWORD *)&__str[0] = v34 + 24;
  *((_QWORD *)&__str[26] + 1) = v35;
  MEMORY[0x23B804DAC](&__str[1]);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)__str + *(_QWORD *)(*(_QWORD *)&__str[0] - 24)), *(_DWORD *)((char *)&__str[2] + *(_QWORD *)(*(_QWORD *)&__str[0] - 24)) | 4);
  v39 = (const std::ios_base *)((char *)__str + *(_QWORD *)(*(_QWORD *)&__str[0] - 24));
  if (!v39->__rdstate_)
  {
    std::ios_base::getloc(v39);
    v43 = std::locale::use_facet(v114, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
    std::locale::~locale(v114);
    std::istream::getline();
    memset(v114, 170, 24);
    v44 = strlen((const char *)&__dst);
    if (v44 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v45 = (std::locale::__imp *)v44;
    if (v44 >= 0x17)
    {
      v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v44 | 7) != 0x17)
        v47 = v44 | 7;
      v48 = v47 + 1;
      v46 = (std::locale::__imp *)operator new(v47 + 1);
      v114[1].__locale_ = v45;
      v114[2].__locale_ = (std::locale::__imp *)(v48 | 0x8000000000000000);
      v114[0].__locale_ = v46;
    }
    else
    {
      HIBYTE(v114[2].__locale_) = v44;
      v46 = (std::locale::__imp *)v114;
      if (!v44)
      {
LABEL_56:
        *((_BYTE *)v45 + (_QWORD)v46) = 0;
        std::operator+<char>();
        *((_BYTE *)&__s.__r_.__value_.__s + 23) = 16;
        strcpy((char *)&__s, "\nStarting From: ");
        v49 = std::string::append(&v109, (const std::string::value_type *)&__s, 0x10uLL);
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v110.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        v51 = std::string::append(&v110, (const std::string::value_type *)&__dst);
        v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v111[2] = (std::locale)v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v111[0].__locale_ = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v111[2].__locale_) >= 0)
          locale = (const std::string::value_type *)v111;
        else
          locale = (const std::string::value_type *)v111[0].__locale_;
        if (SHIBYTE(v111[2].__locale_) >= 0)
          locale_high = HIBYTE(v111[2].__locale_);
        else
          locale_high = (std::string::size_type)v111[1].__locale_;
        std::string::append(a4, locale, locale_high);
        if (SHIBYTE(v111[2].__locale_) < 0)
        {
          operator delete(v111[0].__locale_);
          if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_64:
            if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_65;
            goto LABEL_125;
          }
        }
        else if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_64;
        }
        operator delete(v110.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_65:
          if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_66;
LABEL_126:
          operator delete(v109.__r_.__value_.__l.__data_);
LABEL_66:
          std::ios_base::getloc((const std::ios_base *)((char *)__str + *(_QWORD *)(*(_QWORD *)&__str[0] - 24)));
          v55 = std::locale::use_facet(v111, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
          std::locale::~locale(v111);
          std::istream::getline();
          memset(v111, 170, 24);
          v56 = strlen((const char *)&__dst);
          if (v56 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v57 = (std::locale::__imp *)v56;
          if (v56 >= 0x17)
          {
            v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v56 | 7) != 0x17)
              v59 = v56 | 7;
            v60 = v59 + 1;
            v58 = (std::locale::__imp *)operator new(v59 + 1);
            v111[1].__locale_ = v57;
            v111[2].__locale_ = (std::locale::__imp *)(v60 | 0x8000000000000000);
            v111[0].__locale_ = v58;
          }
          else
          {
            HIBYTE(v111[2].__locale_) = v56;
            v58 = (std::locale::__imp *)v111;
            if (!v56)
            {
LABEL_74:
              *((_BYTE *)v57 + (_QWORD)v58) = 0;
              *((_BYTE *)&__s.__r_.__value_.__s + 23) = 15;
              strcpy((char *)&__s, "\nSize (Bytes): ");
              v61 = std::string::append(&__s, (const std::string::value_type *)&__dst);
              v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
              v109.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v62;
              v61->__r_.__value_.__l.__size_ = 0;
              v61->__r_.__value_.__r.__words[2] = 0;
              v61->__r_.__value_.__r.__words[0] = 0;
              v107 = 1;
              strcpy(v106, "\n");
              v63 = std::string::append(&v109, v106, 1uLL);
              v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
              v110.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v64;
              v63->__r_.__value_.__l.__size_ = 0;
              v63->__r_.__value_.__r.__words[2] = 0;
              v63->__r_.__value_.__r.__words[0] = 0;
              if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v65 = &v110;
              else
                v65 = (std::string *)v110.__r_.__value_.__r.__words[0];
              if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
              else
                size = v110.__r_.__value_.__l.__size_;
              std::string::append(a4, (const std::string::value_type *)v65, size);
              if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v110.__r_.__value_.__l.__data_);
                if ((v107 & 0x80000000) == 0)
                {
LABEL_82:
                  if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_83;
                  goto LABEL_129;
                }
              }
              else if ((v107 & 0x80000000) == 0)
              {
                goto LABEL_82;
              }
              operator delete(*(void **)v106);
              if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_83:
                if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_84;
LABEL_130:
                operator delete(__s.__r_.__value_.__l.__data_);
LABEL_84:
                v100 = (std::string *)a1;
                if (!std::filebuf::close())
                  std::ios_base::clear((std::ios_base *)((char *)__str + *(_QWORD *)(*(_QWORD *)&__str[0] - 24)), *(_DWORD *)((char *)&__str[2] + *(_QWORD *)(*(_QWORD *)&__str[0] - 24)) | 4);
                if (SHIBYTE(v113[2]) >= 0)
                  v68 = (const std::__fs::filesystem::path *)v113;
                else
                  v68 = (const std::__fs::filesystem::path *)v113[0];
                if (remove(v68, v67))
                {
                  if (SHIBYTE(v113[2]) >= 0)
                    v69 = v113;
                  else
                    v69 = (void **)v113[0];
                  unlink((const char *)v69);
                }
                v70 = *((char *)a3 + 23);
                if (v70 >= 0)
                  v71 = *((unsigned __int8 *)a3 + 23);
                else
                  v71 = (size_t)a3[1];
                v72 = SHIBYTE(__p[2]);
                if (SHIBYTE(__p[2]) >= 0)
                  v73 = HIBYTE(__p[2]);
                else
                  v73 = (size_t)__p[1];
                v74 = v73 + v71;
                memset(&v110, 170, sizeof(v110));
                if (v73 + v71 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                if (v74 > 0x16)
                {
                  v80 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v74 | 7) != 0x17)
                    v80 = v74 | 7;
                  v81 = v80 + 1;
                  v75 = operator new(v80 + 1);
                  v110.__r_.__value_.__l.__size_ = v73 + v71;
                  v110.__r_.__value_.__r.__words[2] = v81 | 0x8000000000000000;
                  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
                  if (!v71)
                  {
LABEL_107:
                    if (v73)
                    {
                      if (v72 >= 0)
                        v77 = __p;
                      else
                        v77 = (void **)__p[0];
                      memmove(&v75[v71], v77, v73);
                    }
                    v75[v71 + v73] = 0;
                    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v78 = &v110;
                    else
                      v78 = (std::string *)v110.__r_.__value_.__r.__words[0];
                    v41 = chmod((const char *)v78, 0x1A4u) == 0;
                    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v110.__r_.__value_.__l.__data_);
                      v79 = *v98;
                      if (*v98)
                      {
LABEL_117:
                        *((_BYTE *)&v105.__r_.__value_.__s + 23) = 0;
                        v105.__r_.__value_.__s.__data_[0] = 0;
                        if (SHIBYTE(v114[2].__locale_) < 0)
                        {
                          std::string::__init_copy_ctor_external(&v103, (const std::string::value_type *)v114[0].__locale_, (std::string::size_type)v114[1].__locale_);
                        }
                        else
                        {
                          *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *(_OWORD *)&v114[0].__locale_;
                          v103.__r_.__value_.__r.__words[2] = (std::string::size_type)v114[2];
                        }
                        Timestamp::Timestamp((uint64_t **)&v104, (char *)&v103, 9, 0);
                        if (SHIBYTE(__p[2]) >= 0)
                          v84 = __p;
                        else
                          v84 = (void **)__p[0];
                        v85 = strlen((const char *)v84);
                        if (v85 > 0x7FFFFFFFFFFFFFF7)
                          std::string::__throw_length_error[abi:ne180100]();
                        v86 = v85;
                        if (v85 >= 0x17)
                        {
                          v88 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v85 | 7) != 0x17)
                            v88 = v85 | 7;
                          v89 = v88 + 1;
                          v87 = (std::string *)operator new(v88 + 1);
                          v102.__r_.__value_.__l.__size_ = v86;
                          v102.__r_.__value_.__r.__words[2] = v89 | 0x8000000000000000;
                          v102.__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
                        }
                        else
                        {
                          *((_BYTE *)&v102.__r_.__value_.__s + 23) = v85;
                          v87 = &v102;
                          if (!v85)
                          {
LABEL_147:
                            v87->__r_.__value_.__s.__data_[v86] = 0;
                            if (SHIBYTE(v111[2].__locale_) >= 0)
                              v90 = (const char *)v111;
                            else
                              v90 = (const char *)v111[0].__locale_;
                            v91 = strlen(v90);
                            if (v91 > 0x7FFFFFFFFFFFFFF7)
                              std::string::__throw_length_error[abi:ne180100]();
                            v92 = v91;
                            if (v91 >= 0x17)
                            {
                              v94 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v91 | 7) != 0x17)
                                v94 = v91 | 7;
                              v95 = v94 + 1;
                              v93 = (std::string *)operator new(v94 + 1);
                              v101.__r_.__value_.__l.__size_ = v92;
                              v101.__r_.__value_.__r.__words[2] = v95 | 0x8000000000000000;
                              v101.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
                            }
                            else
                            {
                              *((_BYTE *)&v101.__r_.__value_.__s + 23) = v91;
                              v93 = &v101;
                              if (!v91)
                              {
LABEL_158:
                                v93->__r_.__value_.__s.__data_[v92] = 0;
                                abm::trace::TraceInfo::push(v79, 13, &v105, &v104, &v102, &v101);
                                v42 = (_QWORD *)MEMORY[0x24BEDB7E0];
                                if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
                                {
                                  operator delete(v101.__r_.__value_.__l.__data_);
                                  if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                  {
LABEL_160:
                                    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v104, *((_QWORD **)&v104 + 1));
                                    if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                      goto LABEL_161;
                                    goto LABEL_171;
                                  }
                                }
                                else if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                {
                                  goto LABEL_160;
                                }
                                operator delete(v102.__r_.__value_.__l.__data_);
                                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v104, *((_QWORD **)&v104 + 1));
                                if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                {
LABEL_161:
                                  if ((SHIBYTE(v105.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                    goto LABEL_162;
                                  goto LABEL_172;
                                }
LABEL_171:
                                operator delete(v103.__r_.__value_.__l.__data_);
                                if ((SHIBYTE(v105.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                {
LABEL_162:
                                  if ((SHIBYTE(v111[2].__locale_) & 0x80000000) == 0)
                                    goto LABEL_163;
                                  goto LABEL_173;
                                }
LABEL_172:
                                operator delete(v105.__r_.__value_.__l.__data_);
                                if ((SHIBYTE(v111[2].__locale_) & 0x80000000) == 0)
                                {
LABEL_163:
                                  if ((SHIBYTE(v114[2].__locale_) & 0x80000000) == 0)
                                    goto LABEL_164;
LABEL_174:
                                  operator delete(v114[0].__locale_);
                                  goto LABEL_164;
                                }
LABEL_173:
                                operator delete(v111[0].__locale_);
                                if ((SHIBYTE(v114[2].__locale_) & 0x80000000) == 0)
                                  goto LABEL_164;
                                goto LABEL_174;
                              }
                            }
                            memmove(v93, v90, v92);
                            goto LABEL_158;
                          }
                        }
                        memmove(v87, v84, v86);
                        goto LABEL_147;
                      }
                    }
                    else
                    {
                      v79 = *v98;
                      if (*v98)
                        goto LABEL_117;
                    }
                    v82 = *(NSObject **)(a1 + 40);
                    v83 = os_log_type_enabled((os_log_t)v100[1].__r_.__value_.__r.__words[2], OS_LOG_TYPE_DEFAULT);
                    v42 = (_QWORD *)MEMORY[0x24BEDB7E0];
                    if (v83)
                    {
                      LOWORD(v110.__r_.__value_.__l.__data_) = 0;
                      _os_log_impl(&dword_236E0D000, v82, OS_LOG_TYPE_DEFAULT, "#I No trace info object is given!", (uint8_t *)&v110, 2u);
                      if ((SHIBYTE(v111[2].__locale_) & 0x80000000) == 0)
                        goto LABEL_163;
                      goto LABEL_173;
                    }
                    goto LABEL_162;
                  }
                }
                else
                {
                  memset(&v110, 0, sizeof(v110));
                  v75 = &v110;
                  *((_BYTE *)&v110.__r_.__value_.__s + 23) = v73 + v71;
                  if (!v71)
                    goto LABEL_107;
                }
                if (v70 >= 0)
                  v76 = a3;
                else
                  v76 = *a3;
                memmove(v75, v76, v71);
                goto LABEL_107;
              }
LABEL_129:
              operator delete(v109.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_84;
              goto LABEL_130;
            }
          }
          memcpy(v58, &__dst, (size_t)v57);
          goto LABEL_74;
        }
LABEL_125:
        operator delete(__s.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_66;
        goto LABEL_126;
      }
    }
    memcpy(v46, &__dst, (size_t)v45);
    goto LABEL_56;
  }
  v40 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    v97 = v113;
    if (SHIBYTE(v113[2]) < 0)
      v97 = (void **)v113[0];
    LODWORD(v114[0].__locale_) = 136315138;
    *(std::locale::__imp **)((char *)&v114[0].__locale_ + 4) = (std::locale::__imp *)v97;
    _os_log_error_impl(&dword_236E0D000, v40, OS_LOG_TYPE_ERROR, "File seems to have disappeared: %s", (uint8_t *)v114, 0xCu);
  }
  v41 = 0;
  v42 = (_QWORD *)MEMORY[0x24BEDB7E0];
LABEL_164:
  *(_QWORD *)&__str[0] = *v42;
  *(_QWORD *)((char *)__str + *(_QWORD *)(*(_QWORD *)&__str[0] - 24)) = v42[3];
  MEMORY[0x23B804DB8](&__str[1]);
  std::istream::~istream();
  MEMORY[0x23B804F8C]((char *)&__str[26] + 8);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v113[2]) & 0x80000000) == 0)
      return v41;
LABEL_168:
    operator delete(v113[0]);
    return v41;
  }
  if (SHIBYTE(v113[2]) < 0)
    goto LABEL_168;
  return v41;
}

void sub_236E4A448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;
  char a70;
  uint64_t a72;

  if (a30 < 0)
    operator delete(__p);
  if (a51 < 0)
    operator delete(a46);
  if (a70 < 0)
    operator delete(a65);
  std::ifstream::~ifstream(&a72);
  if (a58 < 0)
    operator delete(a53);
  if (a64 < 0)
  {
    operator delete(a59);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void TraceFileCollection::getStatisticsAsDict_sync(TraceFileCollection *this@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  NSObject *v8;
  unint64_t v9;
  std::string *p_p;
  xpc_object_t v11;
  xpc_object_t v12;
  unsigned int v13;
  std::string *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  unsigned int v17;
  std::string *v18;
  xpc_object_t v19;
  xpc_object_t v20;
  unsigned int v21;
  std::string *v22;
  xpc_object_t v23;
  xpc_object_t v24;
  NSObject *v25;
  std::string *v26;
  std::string v27;
  std::string __p;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  v6 = MEMORY[0x24BDACFA0];
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v7 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x23B8056AC](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v7 = xpc_null_create();
LABEL_8:
  *a2 = v7;
LABEL_9:
  xpc_release(v5);
  if (MEMORY[0x23B8056AC](*a2) == v6)
  {
    v9 = *((_QWORD *)this + 30);
    memset(&__p, 0, sizeof(__p));
    std::to_string(&v27, v9);
    __p = v27;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v11 = xpc_string_create((const char *)p_p);
    if (!v11)
      v11 = xpc_null_create();
    xpc_dictionary_set_value(*a2, "AP Dropped Bytes", v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v13 = *((_DWORD *)this + 53);
    memset(&__p, 0, sizeof(__p));
    std::to_string(&v27, v13);
    __p = v27;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &__p;
    else
      v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v15 = xpc_string_create((const char *)v14);
    if (!v15)
      v15 = xpc_null_create();
    xpc_dictionary_set_value(*a2, "Max Memory File Count", v15);
    v16 = xpc_null_create();
    xpc_release(v15);
    xpc_release(v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v17 = *((_DWORD *)this + 56);
    memset(&__p, 0, sizeof(__p));
    std::to_string(&v27, v17);
    __p = v27;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &__p;
    else
      v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v19 = xpc_string_create((const char *)v18);
    if (!v19)
      v19 = xpc_null_create();
    xpc_dictionary_set_value(*a2, "Applied Memory File Count", v19);
    v20 = xpc_null_create();
    xpc_release(v19);
    xpc_release(v20);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v21 = *((_DWORD *)this + 58);
    memset(&__p, 0, sizeof(__p));
    std::to_string(&v27, v21);
    __p = v27;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &__p;
    else
      v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v23 = xpc_string_create((const char *)v22);
    if (!v23)
      v23 = xpc_null_create();
    xpc_dictionary_set_value(*a2, "Maximum Number of In Memory Files", v23);
    v24 = xpc_null_create();
    xpc_release(v23);
    xpc_release(v24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      v25 = *((_QWORD *)this + 5);
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        return;
    }
    else
    {
      v25 = *((_QWORD *)this + 5);
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        return;
    }
    xpc::object::to_string((xpc::object *)a2);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v27;
    else
      v26 = (std::string *)v27.__r_.__value_.__r.__words[0];
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
    _os_log_impl(&dword_236E0D000, v25, OS_LOG_TYPE_DEFAULT, "#I Trace File Collection Statistics: %s", (uint8_t *)&__p, 0xCu);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v27.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_236E0D000, v8, OS_LOG_TYPE_ERROR, "Failed to create state dump dictionary", (uint8_t *)&v27, 2u);
    }
  }
}

void sub_236E4AAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *std::ofstream::~ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E8];
  v3 = *MEMORY[0x24BEDB7E8];
  *a1 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x23B804DB8](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x23B804F8C](a1 + 52);
  return a1;
}

uint64_t TraceFileCollection::getInMemoryRemaining(TraceFileCollection *this)
{
  NSObject *v1;
  char *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD block[6];

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK19TraceFileCollection20getInMemoryRemainingEv_block_invoke;
  v5[3] = &unk_25086CE70;
  v5[4] = &v6;
  v5[5] = this;
  v10 = v5;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_52;
  block[4] = (char *)this + 72;
  block[5] = &v10;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void ___ZNK19TraceFileCollection20getInMemoryRemainingEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(v1 + 264);
  if (v2)
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(v2 + 68) - *(_DWORD *)(v2 + 64);
  }
  else
  {
    v3 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_error_impl(&dword_236E0D000, v3, OS_LOG_TYPE_ERROR, "No memory file!", v4, 2u);
    }
  }
}

void TraceFileCollection::setHistory(TraceFileCollection *this, int a2)
{
  NSObject *v2;
  char *v3;
  _QWORD v4[5];
  int v5;
  _QWORD *v6;
  _QWORD block[6];

  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 0x40000000;
  v4[2] = ___ZN19TraceFileCollection10setHistoryEi_block_invoke;
  v4[3] = &__block_descriptor_tmp_20_1;
  v4[4] = this;
  v5 = a2;
  v6 = v4;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_52;
  block[4] = (char *)this + 72;
  block[5] = &v6;
  v3 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v3 + 1))
    dispatch_async_and_wait(v2, block);
  else
    dispatch_sync(v2, block);
}

void ___ZN19TraceFileCollection10setHistoryEi_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = (*(_DWORD *)(a1 + 40) << 10) / (*(_DWORD *)(v1 + 216) >> 10);
  v3 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(v1 + 208);
    v5[0] = 67109376;
    v5[1] = v2;
    v6 = 1024;
    v7 = v4;
    _os_log_impl(&dword_236E0D000, v3, OS_LOG_TYPE_DEFAULT, "#I setHistory: Adjusting max file count as %u from the history size, %u", (uint8_t *)v5, 0xEu);
  }
  *(_DWORD *)(v1 + 208) = v2;
}

void TraceFileCollection::setMaxMemoryFileCount(TraceFileCollection *this, int a2)
{
  NSObject *v2;
  char *v3;
  _QWORD v4[5];
  int v5;
  _QWORD *v6;
  _QWORD block[6];

  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 0x40000000;
  v4[2] = ___ZN19TraceFileCollection21setMaxMemoryFileCountEj_block_invoke;
  v4[3] = &__block_descriptor_tmp_21_1;
  v4[4] = this;
  v5 = a2;
  v6 = v4;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_52;
  block[4] = (char *)this + 72;
  block[5] = &v6;
  v3 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v3 + 1))
    dispatch_async_and_wait(v2, block);
  else
    dispatch_sync(v2, block);
}

void ___ZN19TraceFileCollection21setMaxMemoryFileCountEj_block_invoke(uint64_t a1)
{
  TraceFileCollection *v1;

  v1 = *(TraceFileCollection **)(a1 + 32);
  *((_DWORD *)v1 + 53) = *(_DWORD *)(a1 + 40);
  TraceFileCollection::registerForMemoryPressure_sync(v1);
}

void TraceFileCollection::setFileSize(TraceFileCollection *this, int a2)
{
  NSObject *v2;
  char *v3;
  _QWORD v4[5];
  int v5;
  _QWORD *v6;
  _QWORD block[6];

  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 0x40000000;
  v4[2] = ___ZN19TraceFileCollection11setFileSizeEj_block_invoke;
  v4[3] = &__block_descriptor_tmp_22_0;
  v4[4] = this;
  v5 = a2;
  v6 = v4;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_52;
  block[4] = (char *)this + 72;
  block[5] = &v6;
  v3 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v3 + 1))
    dispatch_async_and_wait(v2, block);
  else
    dispatch_sync(v2, block);
}

void ___ZN19TraceFileCollection11setFileSizeEj_block_invoke(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v1 + 216) = v2;
  v3 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = v2 >> 10;
    _os_log_impl(&dword_236E0D000, v3, OS_LOG_TYPE_DEFAULT, "#I Setting file size for trace collection: %u KB", (uint8_t *)v4, 8u);
  }
}

uint64_t TraceFileCollection::getFileSize(TraceFileCollection *this)
{
  NSObject *v1;
  char *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD block[6];

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK19TraceFileCollection11getFileSizeEv_block_invoke;
  v5[3] = &unk_25086CEF8;
  v5[4] = &v6;
  v5[5] = this;
  v10 = v5;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_52;
  block[4] = (char *)this + 72;
  block[5] = &v10;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZNK19TraceFileCollection11getFileSizeEv_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 40) + 216);
  return result;
}

uint64_t TraceFileCollection::getNumFilesCaptured(TraceFileCollection *this)
{
  NSObject *v1;
  char *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD block[6];

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK19TraceFileCollection19getNumFilesCapturedEv_block_invoke;
  v5[3] = &unk_25086CF20;
  v5[4] = &v6;
  v5[5] = this;
  v10 = v5;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_52;
  block[4] = (char *)this + 72;
  block[5] = &v10;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZNK19TraceFileCollection19getNumFilesCapturedEv_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 40) + 260)
                                                                  - *(_DWORD *)(*(_QWORD *)(result + 40) + 256)
                                                                  + 1;
  return result;
}

BOOL TraceFileCollection::allowNewMemoryFile_sync(TraceFileCollection *this)
{
  unsigned int v1;

  if (!*((_DWORD *)this + 56))
    return 1;
  v1 = atomic_load((unsigned int *)this + 57);
  return v1 < *((_DWORD *)this + 56);
}

unint64_t TraceFileCollection::getDataFileName_sync@<X0>(TraceFileCollection *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const char *v4;
  __int128 v5;
  unint64_t result;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char __str[16];
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 160;
  if (*((char *)this + 183) < 0)
    v4 = *(const char **)v4;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__str = v5;
  v12 = v5;
  snprintf(__str, 0x20uLL, "0x%08X%s", a2, v4);
  result = strlen(__str);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = result;
  if (result >= 0x17)
  {
    v8 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v8 = result | 7;
    v9 = v8 + 1;
    v10 = operator new(v8 + 1);
    a3[1] = v7;
    a3[2] = v9 | 0x8000000000000000;
    *a3 = v10;
    a3 = v10;
  }
  else
  {
    *((_BYTE *)a3 + 23) = result;
    if (!result)
      goto LABEL_11;
  }
  result = (unint64_t)memcpy(a3, __str, v7);
LABEL_11:
  *((_BYTE *)a3 + v7) = 0;
  return result;
}

void TraceFileCollection::archiveMemoryFile_sync(dispatch_group_t *this)
{
  int v2;
  __int128 v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  int v9;
  size_t v10;
  int v11;
  size_t size;
  unint64_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  std::string *v17;
  int isa;
  dispatch_group_t v19;
  dispatch_group_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  dispatch_group_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  _QWORD *v27;
  dispatch_group_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD block[6];
  std::__shared_weak_count *v53;
  dispatch_group_t v54;
  std::__shared_weak_count *v55;
  std::string v56;
  std::string v57;
  std::string __p;
  int v59;
  dispatch_group_t v60;
  std::__shared_weak_count *v61;
  dispatch_group_t v62;
  std::__shared_weak_count *v63;
  std::string __dst;
  std::string v65;
  char __str[40];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  dispatch_group_enter(this[41]);
  v2 = *((_DWORD *)this + 65);
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__str = v3;
  *(_OWORD *)&__str[16] = v3;
  snprintf(__str, 0x20uLL, "0x%08X%s", v2, ".meta");
  v4 = strlen(__str);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, __str, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v9 = *((char *)this + 207);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)this + 207);
  else
    v10 = (size_t)this[24];
  v11 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__r_.__value_.__l.__size_;
  v13 = size + v10;
  memset(&v65, 170, sizeof(v65));
  if (size + v10 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v13 <= 0x16)
  {
    memset(&v65, 0, sizeof(v65));
    v14 = &v65;
    *((_BYTE *)&v65.__r_.__value_.__s + 23) = size + v10;
    if (!v10)
      goto LABEL_22;
    goto LABEL_18;
  }
  v30 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17)
    v30 = v13 | 7;
  v31 = v30 + 1;
  v14 = (std::string *)operator new(v30 + 1);
  v65.__r_.__value_.__l.__size_ = size + v10;
  v65.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  if (v10)
  {
LABEL_18:
    if (v9 >= 0)
      v15 = (char *)(this + 23);
    else
      v15 = (char *)this[23];
    memmove(v14, v15, v10);
  }
LABEL_22:
  v16 = (char *)v14 + v10;
  if (size)
  {
    if (v11 >= 0)
      v17 = &__dst;
    else
      v17 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    memmove(v16, v17, size);
  }
  v16[size] = 0;
  if (v11 < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  isa = (int)this[33][8].isa;
  if (*((_BYTE *)this + 105))
    isa += *((_DWORD *)this + 36) - *((_DWORD *)this + 34);
  memset(__str, 170, 24);
  Timestamp::asString((uint64_t)(this + 35), 0, 1);
  v20 = this[33];
  v19 = this[34];
  v62 = v20;
  v63 = (std::__shared_weak_count *)v19;
  if (v19)
  {
    v21 = (unint64_t *)&v19[1];
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v24 = this[9];
  v23 = (std::__shared_weak_count *)this[10];
  v60 = v24;
  if (!v23 || (v25 = std::__shared_weak_count::lock(v23), (v61 = v25) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v26 = v25;
  v27 = this + 33;
  memset(&__dst, 170, sizeof(__dst));
  v28 = this[33];
  if (SHIBYTE(v28[3].isa) < 0)
  {
    std::string::__init_copy_ctor_external(&__dst, (const std::string::value_type *)v28[1].isa, (std::string::size_type)v28[2].isa);
  }
  else
  {
    v29 = *(_OWORD *)&v28[1].isa;
    __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v28[3].isa;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v29;
  }
  v32 = this[40];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZN19TraceFileCollection22archiveMemoryFile_syncEv_block_invoke;
  block[3] = &__block_descriptor_tmp_27;
  block[4] = this;
  block[5] = v24;
  v53 = v26;
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  do
    v34 = __ldxr(p_shared_owners);
  while (__stxr(v34 + 1, p_shared_owners));
  v54 = v20;
  v55 = (std::__shared_weak_count *)v19;
  if (v19)
  {
    v35 = (unint64_t *)&v19[1];
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v56, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v56 = __dst;
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v57, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
  else
    v57 = v65;
  if (__str[23] < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)__str, *(std::string::size_type *)&__str[8]);
  else
    __p = *(std::string *)__str;
  v59 = isa;
  dispatch_async(v32, block);
  v37 = (std::__shared_weak_count *)this[34];
  *v27 = 0;
  v27[1] = 0;
  if (!v37)
    goto LABEL_61;
  v38 = (unint64_t *)&v37->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_62:
      if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_63;
      goto LABEL_68;
    }
  }
  else
  {
LABEL_61:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_62;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_63:
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_64;
    goto LABEL_69;
  }
LABEL_68:
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_64:
    v40 = v55;
    if (!v55)
      goto LABEL_73;
    goto LABEL_70;
  }
LABEL_69:
  operator delete(v56.__r_.__value_.__l.__data_);
  v40 = v55;
  if (!v55)
    goto LABEL_73;
LABEL_70:
  v41 = (unint64_t *)&v40->__shared_owners_;
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    v43 = v53;
    if (!v53)
      goto LABEL_77;
    goto LABEL_74;
  }
LABEL_73:
  v43 = v53;
  if (!v53)
    goto LABEL_77;
LABEL_74:
  v44 = (unint64_t *)&v43->__shared_owners_;
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_79;
    goto LABEL_78;
  }
LABEL_77:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_78:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_79:
  v46 = v61;
  if (!v61)
    goto LABEL_83;
  v47 = (unint64_t *)&v61->__shared_owners_;
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
    v49 = v63;
    if (!v63)
      goto LABEL_87;
  }
  else
  {
LABEL_83:
    v49 = v63;
    if (!v63)
      goto LABEL_87;
  }
  v50 = (unint64_t *)&v49->__shared_owners_;
  do
    v51 = __ldaxr(v50);
  while (__stlxr(v51 - 1, v50));
  if (v51)
  {
LABEL_87:
    if ((__str[23] & 0x80000000) == 0)
      goto LABEL_88;
    goto LABEL_97;
  }
  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
  std::__shared_weak_count::__release_weak(v49);
  if ((__str[23] & 0x80000000) == 0)
  {
LABEL_88:
    if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_98:
    operator delete(v65.__r_.__value_.__l.__data_);
    return;
  }
LABEL_97:
  operator delete(*(void **)__str);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_98;
}

void sub_236E4B97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (a32 < 0)
  {
    operator delete(__p);
    if (a26 < 0)
    {
LABEL_5:
      operator delete(a21);
      std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v40 + 56);
      std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v39);
      if ((*(char *)(v41 - 169) & 0x80000000) == 0)
      {
LABEL_9:
        std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
        std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
        if (*(char *)(v41 - 121) < 0)
          operator delete(*(void **)(v41 - 144));
        if (*(char *)(v41 - 145) < 0)
          operator delete(*(void **)(v41 - 168));
        _Unwind_Resume(a1);
      }
LABEL_8:
      operator delete(*(void **)(v41 - 192));
      goto LABEL_9;
    }
  }
  else if (a26 < 0)
  {
    goto LABEL_5;
  }
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v40 + 56);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v39);
  if ((*(char *)(v41 - 169) & 0x80000000) == 0)
    goto LABEL_9;
  goto LABEL_8;
}

unint64_t TraceFileCollection::getMetaDataFileName_sync@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  __int128 v4;
  unint64_t result;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char __str[16];
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__str = v4;
  v11 = v4;
  snprintf(__str, 0x20uLL, "0x%08X%s", a1, ".meta");
  result = strlen(__str);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
      goto LABEL_9;
  }
  result = (unint64_t)memcpy(a2, __str, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t ___ZN19TraceFileCollection10clear_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke(uint64_t a1)
{
  return support::fs::removeDir((const char *)(a1 + 32));
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 32);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

uint64_t ___ZN19TraceFileCollection22archiveMemoryFile_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  NSObject *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  unsigned int *v21;
  unsigned int v22;
  int v24;
  _QWORD *v25;
  uint8_t buf[576];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(v2 + 105))
  {
    if ((TraceFile::writeToFile(v3, (char **)(v2 + 136)) & 1) == 0)
    {
      v4 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v5 = (_QWORD *)(a1 + 72);
        if (*(char *)(a1 + 95) < 0)
          v5 = (_QWORD *)*v5;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v5;
        _os_log_error_impl(&dword_236E0D000, v4, OS_LOG_TYPE_ERROR, "Error on writing a file: %s", buf, 0xCu);
      }
    }
  }
  else
  {
    memset(buf, 0, 24);
    TraceFile::writeToFile(v3, (char **)buf);
  }
  memset(&buf[8], 170, 0x230uLL);
  v6 = (_QWORD *)(a1 + 96);
  v7 = MEMORY[0x24BEDB840];
  v8 = MEMORY[0x24BEDB840] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB7E8];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *(_QWORD *)&buf[416] = MEMORY[0x24BEDB840] + 64;
  *(_QWORD *)buf = v10;
  *(_QWORD *)&buf[*(_QWORD *)(v10 - 24)] = v11;
  v12 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
  std::ios_base::init(v12, &buf[8]);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  *(_QWORD *)buf = v7 + 24;
  *(_QWORD *)&buf[416] = v8;
  MEMORY[0x23B804DAC](&buf[8]);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)], *(_DWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24) + 32] | 4);
  if (*(_DWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24) + 32])
  {
    v13 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 119) < 0)
        v6 = (_QWORD *)*v6;
      v24 = 136315138;
      v25 = v6;
      _os_log_error_impl(&dword_236E0D000, v13, OS_LOG_TYPE_ERROR, "Failed to open meta data file: %s", (uint8_t *)&v24, 0xCu);
    }
  }
  else
  {
    v14 = *(char *)(a1 + 143);
    if (v14 >= 0)
      v15 = a1 + 120;
    else
      v15 = *(_QWORD *)(a1 + 120);
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a1 + 143);
    else
      v16 = *(_QWORD *)(a1 + 128);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, v15, v16);
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
    v18 = std::locale::use_facet((const std::locale *)&v24, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale((std::locale *)&v24);
    std::ostream::put();
    std::ostream::flush();
    v19 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
    v20 = std::locale::use_facet((const std::locale *)&v24, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale((std::locale *)&v24);
    std::ostream::put();
    std::ostream::flush();
    std::ostream::flush();
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)], *(_DWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24) + 32] | 4);
  }
  v21 = (unsigned int *)(v2 + 228);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  dispatch_group_leave(*(dispatch_group_t *)(v2 + 328));
  *(_QWORD *)buf = *v9;
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v9[3];
  MEMORY[0x23B804DB8](&buf[8]);
  std::ostream::~ostream();
  return MEMORY[0x23B804F8C](&buf[416]);
}

void sub_236E4BF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::locale::~locale((std::locale *)&a9);
  std::ofstream::~ofstream(&a11);
  _Unwind_Resume(a1);
}

void sub_236E4BF74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x23B804F8C](v1);
  _Unwind_Resume(a1);
}

void sub_236E4BFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::ofstream::~ofstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrI19TraceFileCollectionEE56c36_ZTSNSt3__110shared_ptrI9TraceFileEE72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE120c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  std::string::size_type v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;

  v4 = *(_QWORD *)(a2 + 48);
  a1[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
  a1[2].__r_.__value_.__r.__words[0] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 64);
  a1[2].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 56);
  a1[2].__r_.__value_.__r.__words[2] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 3, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&a1[3].__r_.__value_.__l.__data_ = v10;
  }
  if (*(char *)(a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 4, *(const std::string::value_type **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 96);
    a1[4].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 112);
    *(_OWORD *)&a1[4].__r_.__value_.__l.__data_ = v11;
  }
  v12 = a1 + 5;
  if (*(char *)(a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 120), *(_QWORD *)(a2 + 128));
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 120);
    a1[5].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 136);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
}

void sub_236E4C0E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void **v5;

  if (*(char *)(v3 + 119) < 0)
  {
    operator delete(*v5);
    if ((*(char *)(v3 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v2);
      std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v3 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v4);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_236E4C14C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrI19TraceFileCollectionEE56c36_ZTSNSt3__110shared_ptrI9TraceFileEE72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE120c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 95) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_4:
    v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2)
      goto LABEL_12;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*(void **)(a1 + 72));
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_12;
LABEL_9:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      return;
    goto LABEL_13;
  }
LABEL_12:
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v5)
    return;
LABEL_13:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ___ZN19TraceFileCollection30registerForMemoryPressure_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  uintptr_t data;
  unsigned int v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint8_t v14[16];
  uint8_t buf[16];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 248);
        data = dispatch_source_get_data(v6);
        v8 = *(_DWORD *)(v3 + 212);
        *(_DWORD *)(v3 + 224) = v8;
        if (data == 16)
        {
          v9 = *(NSObject **)(v3 + 40);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v14 = 0;
            _os_log_impl(&dword_236E0D000, v9, OS_LOG_TYPE_DEFAULT, "#N Process memory limit warning; apply memory file limits",
              v14,
              2u);
            v8 = *(_DWORD *)(v3 + 212);
            v6 = *(NSObject **)(v3 + 248);
          }
          *(_DWORD *)(v3 + 224) = v8 >> 1;
          if (v6)
          {
            v10 = *(NSObject **)(v3 + 40);
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_236E0D000, v10, OS_LOG_TYPE_DEFAULT, "#I De-register from memory pressure notifications", buf, 2u);
              v6 = *(NSObject **)(v3 + 248);
            }
            dispatch_source_cancel(v6);
            v11 = *(NSObject **)(v3 + 248);
            *(_QWORD *)(v3 + 248) = 0;
            if (v11)
              dispatch_release(v11);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__18weak_ptrI19TraceFileCollectionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__18weak_ptrI19TraceFileCollectionEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t TraceFileCollection::getNewestFileNumber(TraceFileCollection *this)
{
  NSObject *v1;
  char *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD block[6];

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK19TraceFileCollection19getNewestFileNumberEv_block_invoke;
  v5[3] = &unk_25086CFD8;
  v5[4] = &v6;
  v5[5] = this;
  v10 = v5;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19TraceFileCollectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_52;
  block[4] = (char *)this + 72;
  block[5] = &v10;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZNK19TraceFileCollection19getNewestFileNumberEv_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 40) + 260);
  return result;
}

uint64_t TraceFileCollection::Parameters::desc(TraceFileCollection::Parameters *this)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  _OWORD v29[4];
  void *v30[2];
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v32 = 0xAAAAAAAAAAAAAAAALL;
  v42 = v2;
  v41 = v2;
  v40 = v2;
  v39 = v2;
  v38 = v2;
  v37 = v2;
  v36 = v2;
  v35 = v2;
  v34 = v2;
  *(_OWORD *)v30 = v2;
  v31 = v2;
  v29[2] = v2;
  v29[3] = v2;
  v29[0] = v2;
  v29[1] = v2;
  v3 = MEMORY[0x24BEDB870];
  v4 = MEMORY[0x24BEDB870] + 64;
  v33 = MEMORY[0x24BEDB870] + 64;
  v5 = (uint64_t *)MEMORY[0x24BEDB800];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v28 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = v6;
  v7 = (std::ios_base *)((char *)&v28 + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v7, v29);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v28 = v3 + 24;
  v33 = v4;
  std::streambuf::basic_streambuf();
  v8 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v29[0] = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)v30 = 0u;
  v31 = 0u;
  LODWORD(v32) = 16;
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"extension:", 10);
  v10 = *((char *)this + 79);
  if (v10 >= 0)
    v11 = (char *)this + 56;
  else
    v11 = (char *)*((_QWORD *)this + 7);
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)this + 79);
  else
    v12 = *((_QWORD *)this + 8);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)",scratch path:", 14);
  v15 = *((char *)this + 103);
  if (v15 >= 0)
    v16 = (char *)this + 80;
  else
    v16 = (char *)*((_QWORD *)this + 10);
  if (v15 >= 0)
    v17 = *((unsigned __int8 *)this + 103);
  else
    v17 = *((_QWORD *)this + 11);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)",max history:", 13);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)",Max Memory File Count:", 23);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)",file size:", 11);
  v21 = (_QWORD *)std::ostream::operator<<();
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", [header info]", 15);
  TraceFileCollection::HeaderOptions::desc((uint64_t *)__p, this);
  if ((v27 & 0x80u) == 0)
    v23 = __p;
  else
    v23 = (void **)__p[0];
  if ((v27 & 0x80u) == 0)
    v24 = v27;
  else
    v24 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
  if ((char)v27 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v28 = *v5;
  *(uint64_t *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = v5[3];
  *(_QWORD *)&v29[0] = v8 + 16;
  if (SBYTE7(v31) < 0)
    operator delete(v30[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x23B804F8C](&v33);
}

void sub_236E4C728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t TraceFileCollection::HeaderOptions::desc(TraceFileCollection::HeaderOptions *this)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _OWORD v20[4];
  void *__p[2];
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23 = 0xAAAAAAAAAAAAAAAALL;
  v25 = v2;
  v33 = v2;
  v32 = v2;
  v31 = v2;
  v30 = v2;
  v29 = v2;
  v28 = v2;
  v27 = v2;
  v26 = v2;
  *(_OWORD *)__p = v2;
  v22 = v2;
  v20[2] = v2;
  v20[3] = v2;
  v20[0] = v2;
  v20[1] = v2;
  v3 = MEMORY[0x24BEDB870];
  v4 = MEMORY[0x24BEDB870] + 64;
  v24 = MEMORY[0x24BEDB870] + 64;
  v5 = (uint64_t *)MEMORY[0x24BEDB800];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v19 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  *(uint64_t *)((char *)&v19 + *(_QWORD *)(v19 - 24)) = v6;
  v7 = (std::ios_base *)((char *)&v19 + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v7, v20);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v19 = v3 + 24;
  v24 = v4;
  std::streambuf::basic_streambuf();
  v8 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v20[0] = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  LODWORD(v23) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"create file:", 12);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)",append to each log file:", 25);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)",file name:", 11);
  v14 = *((_QWORD *)this + 1);
  v13 = (char *)this + 8;
  v12 = v14;
  v15 = v13[23];
  if (v15 >= 0)
    v16 = (uint64_t)v13;
  else
    v16 = v12;
  if (v15 >= 0)
    v17 = v13[23];
  else
    v17 = *((_QWORD *)v13 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v16, v17);
  std::stringbuf::str();
  v19 = *v5;
  *(uint64_t *)((char *)&v19 + *(_QWORD *)(v19 - 24)) = v5[3];
  *(_QWORD *)&v20[0] = v8 + 16;
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x23B804F8C](&v24);
}

void sub_236E4C96C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x23B804F8C](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23B804F8C](a1 + 112);
  return a1;
}

uint64_t ctu::Loggable<TraceFileCollection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

double ctu::Loggable<TraceFileCollection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 16) = 0x10AAAAAAAAAAAA00;
  result = *(double *)"trace.collection";
  *(_OWORD *)a1 = *(_OWORD *)"trace.collection";
  return result;
}

uint64_t ctu::Loggable<TraceFileCollection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void TraceFileCollection::HeaderOptions::~HeaderOptions(TraceFileCollection::HeaderOptions *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

_QWORD *ctu::Loggable<TraceFileCollection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_25086D098;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<TraceFileCollection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_25086D098;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<TraceFileCollection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    v9 = v2;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v3);
    }
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_236E4CC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_236E4CC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<TCP>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<TraceFileCollection>::shared_ptr[abi:ne180100]<TraceFileCollection,std::shared_ptr<TraceFileCollection> ctu::SharedSynchronizable<TraceFileCollection>::make_shared_ptr<TraceFileCollection>(TraceFileCollection*)::{lambda(TraceFileCollection*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_25086D0D8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_236E4CD9C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<TraceFileCollection> ctu::SharedSynchronizable<TraceFileCollection>::make_shared_ptr<TraceFileCollection>(TraceFileCollection*)::{lambda(TraceFileCollection*)#1}::operator() const(TraceFileCollection*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_236E4CDBC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<TraceFileCollection *,std::shared_ptr<TraceFileCollection> ctu::SharedSynchronizable<TraceFileCollection>::make_shared_ptr<TraceFileCollection>(TraceFileCollection*)::{lambda(TraceFileCollection *)#1},std::allocator<TraceFileCollection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<TraceFileCollection *,std::shared_ptr<TraceFileCollection> ctu::SharedSynchronizable<TraceFileCollection>::make_shared_ptr<TraceFileCollection>(TraceFileCollection*)::{lambda(TraceFileCollection *)#1},std::allocator<TraceFileCollection>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<TraceFileCollection> ctu::SharedSynchronizable<TraceFileCollection>::make_shared_ptr<TraceFileCollection>(TraceFileCollection*)::{lambda(TraceFileCollection*)#1}::operator() const(TraceFileCollection*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<TraceFileCollection *,std::shared_ptr<TraceFileCollection> ctu::SharedSynchronizable<TraceFileCollection>::make_shared_ptr<TraceFileCollection>(TraceFileCollection*)::{lambda(TraceFileCollection *)#1},std::allocator<TraceFileCollection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI19TraceFileCollectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI19TraceFileCollectionE15make_shared_ptrIS1_EENSt3__110share"
                                "d_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI19TraceFileCollectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI19TraceFileCollectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<TraceFileCollection> ctu::SharedSynchronizable<TraceFileCollection>::make_shared_ptr<TraceFileCollection>(TraceFileCollection*)::{lambda(TraceFileCollection*)#1}::operator() const(TraceFileCollection*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<TraceFileCollection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_25086D098;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

uint64_t __cxx_global_var_init_6()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance, &dword_236E0D000);
  }
  return result;
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
  MEMORY[0x24BDBBC88](theData, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x24BDBBCB0](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x24BDBBCF8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x24BDBBD00](theData);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x24BDBBE18]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

uint64_t TelephonyBasebandCreateController()
{
  return MEMORY[0x24BED8D60]();
}

uint64_t TelephonyBasebandPCITransportCreate()
{
  return MEMORY[0x24BED8A38]();
}

uint64_t TelephonyBasebandPCITransportInitParameters()
{
  return MEMORY[0x24BED8A40]();
}

uint64_t TelephonyUtilTransportFree()
{
  return MEMORY[0x24BED97A8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

uint64_t GetOsLogContext(void)
{
  return MEMORY[0x24BE04DD0]();
}

uint64_t capabilities::abs::supportsETSProtocol(capabilities::abs *this)
{
  return MEMORY[0x24BED90F0](this);
}

uint64_t capabilities::abs::traceTransportTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x24BED9170](this);
}

uint64_t capabilities::abs::shouldUseMinBasebandTransportIOReadSize(capabilities::abs *this)
{
  return MEMORY[0x24BED9190](this);
}

uint64_t capabilities::abs::shouldUseMinBasebandTransportIOReadCount(capabilities::abs *this)
{
  return MEMORY[0x24BED91A0](this);
}

uint64_t capabilities::ipc::supportsPCI(capabilities::ipc *this)
{
  return MEMORY[0x24BED91B0](this);
}

uint64_t capabilities::radio::firmwarePrefix(capabilities::radio *this)
{
  return MEMORY[0x24BED9250](this);
}

uint64_t capabilities::radio::ice(capabilities::radio *this)
{
  return MEMORY[0x24BED9298](this);
}

uint64_t capabilities::radio::vendor(capabilities::radio *this)
{
  return MEMORY[0x24BED92A8](this);
}

uint64_t capabilities::radio::maverick(capabilities::radio *this)
{
  return MEMORY[0x24BED92B8](this);
}

uint64_t capabilities::radio::mav20Plus(capabilities::radio *this)
{
  return MEMORY[0x24BED92C0](this);
}

uint64_t capabilities::trace::supportsBasebandIPCTrace(capabilities::trace *this)
{
  return MEMORY[0x24BED9300](this);
}

uint64_t capabilities::trace::allowed(capabilities::trace *this)
{
  return MEMORY[0x24BED9330](this);
}

uint64_t CommandDriverFactory::create_default_global(CommandDriverFactory *this)
{
  return MEMORY[0x24BED3490](this);
}

uint64_t ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase()
{
  return MEMORY[0x24BED97E8]();
}

uint64_t ctu::OsLogLogger::OsLogLogger(ctu::OsLogLogger *this, const char *a2, const char *a3)
{
  return MEMORY[0x24BED9828](this, a2, a3);
}

void ctu::OsLogLogger::~OsLogLogger(ctu::OsLogLogger *this)
{
  MEMORY[0x24BED9840](this);
}

uint64_t ctu::OsLogContext::OsLogContext()
{
  return MEMORY[0x24BED9850]();
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const char *a2, const char *a3)
{
  return MEMORY[0x24BED9858](this, a2, a3);
}

void ctu::OsLogContext::~OsLogContext(ctu::OsLogContext *this)
{
  MEMORY[0x24BED9868](this);
}

uint64_t ctu::TrackedLogger::registerLoggerToServer()
{
  return MEMORY[0x24BED9918]();
}

uint64_t ctu::LogMessageBuffer::createWithFormat(ctu::LogMessageBuffer *this, const char *a2, ...)
{
  return MEMORY[0x24BED9978](this, a2);
}

void ctu::LogMessageBuffer::~LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  MEMORY[0x24BED9998](this);
}

uint64_t ctu::LoggerCommonBase::setInheritedLogLevel()
{
  return MEMORY[0x24BED99A8]();
}

uint64_t ctu::LoggerCommonBase::LoggerCommonBase()
{
  return MEMORY[0x24BED99B0]();
}

{
  return MEMORY[0x24BED99B8]();
}

{
  return MEMORY[0x24BED99C0]();
}

uint64_t ctu::XpcJetsamAssertion::createActivity()
{
  return MEMORY[0x24BED99E8]();
}

uint64_t ctu::XpcJetsamAssertion::create_default_global(ctu::XpcJetsamAssertion *this)
{
  return MEMORY[0x24BED99F0](this);
}

uint64_t ctu::cf::MakeCFString::MakeCFString(ctu::cf::MakeCFString *this, const char *a2)
{
  return MEMORY[0x24BED9A78](this, a2);
}

void ctu::cf::MakeCFString::~MakeCFString(ctu::cf::MakeCFString *this)
{
  MEMORY[0x24BED9A80](this);
}

uint64_t ctu::cf::dict_adapter::dict_adapter(ctu::cf::dict_adapter *this, const __CFDictionary *a2)
{
  return MEMORY[0x24BED9AA0](this, a2);
}

void ctu::cf::dict_adapter::~dict_adapter(ctu::cf::dict_adapter *this)
{
  MEMORY[0x24BED9AB0](this);
}

uint64_t ctu::cf::plist_adapter::plist_adapter(ctu::cf::plist_adapter *this, const __CFString *a2, const __CFString *a3)
{
  return MEMORY[0x24BED9AB8](this, a2, a3);
}

void ctu::cf::plist_adapter::~plist_adapter(ctu::cf::plist_adapter *this)
{
  MEMORY[0x24BED9AC0](this);
}

uint64_t ctu::Gestalt::create_default_global(ctu::Gestalt *this)
{
  return MEMORY[0x24BED9C78](this);
}

uint64_t ctu::tokenize()
{
  return MEMORY[0x24BED9C98]();
}

uint64_t ctu::LogServer::setEnabled(ctu::LogServer *this)
{
  return MEMORY[0x24BED9CA0](this);
}

uint64_t ctu::LogServer::start(ctu::LogServer *this)
{
  return MEMORY[0x24BED9CB8](this);
}

uint64_t ctu::LogServer::create()
{
  return MEMORY[0x24BED9CC0]();
}

uint64_t ctu::LogServer::addWriter()
{
  return MEMORY[0x24BED9CC8]();
}

uint64_t ctu::cf_to_xpc(ctu *this, const void *a2)
{
  return MEMORY[0x24BED9D08](this, a2);
}

uint64_t ctu::xpc_to_cf(ctu *this, void *a2)
{
  return MEMORY[0x24BED9D20](this, a2);
}

uint64_t AriMsg::GetBufCtx(AriMsg *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECE888](this, a2);
}

uint64_t AriHost::StartStream()
{
  return MEMORY[0x24BED1C60]();
}

uint64_t AriHost::RegisterClient(AriHost *this, const char *a2, int *a3, dispatch_queue_s *a4)
{
  return MEMORY[0x24BED1C78](this, a2, a3, a4);
}

uint64_t AriHost::DeregisterClient(AriHost *this)
{
  return MEMORY[0x24BED1C90](this);
}

uint64_t AriHost::ReRegisterClient()
{
  return MEMORY[0x24BED1C98]();
}

uint64_t AriHost::SetRTEventHandler()
{
  return MEMORY[0x24BED1CA8]();
}

uint64_t AriHost::Send()
{
  return MEMORY[0x24BED1CC0]();
}

uint64_t AriHost::EndStream(AriHost *this)
{
  return MEMORY[0x24BED1CD8](this);
}

uint64_t ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog()
{
  return MEMORY[0x24BED9DC0]();
}

uint64_t ctu::LoggerCommonBase::getLogDomain(ctu::LoggerCommonBase *this)
{
  return MEMORY[0x24BED9E60](this);
}

uint64_t ctu::LoggerCommonBase::getLocalLogLevel(ctu::LoggerCommonBase *this)
{
  return MEMORY[0x24BED9E68](this);
}

uint64_t ctu::cf::map_adapter::getString()
{
  return MEMORY[0x24BED9EA8]();
}

uint64_t xpc::object::to_string(xpc::object *this)
{
  return MEMORY[0x24BED9ED0](this);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x24BEDA9E0]();
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x24BEDAA50](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB30](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x24BEDABC8](this, *(_QWORD *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC20](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC38](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC58](this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC80](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

std::string *__cdecl std::string::operator=(std::string *this, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x24BEDAD08](this, __c);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x24BEDADD8]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x24BEDADE0]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x24BEDADF0]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x24BEDADF8]();
}

uint64_t std::istream::peek()
{
  return MEMORY[0x24BEDAE10]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x24BEDAE18]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x24BEDAE30]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x24BEDAE38]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x24BEDAE50]();
}

uint64_t std::istream::getline()
{
  return MEMORY[0x24BEDAE58]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x24BEDAE70]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x24BEDAEE0]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x24BEDAEE8]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x24BEDAEF0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF28]();
}

{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF50]();
}

{
  return MEMORY[0x24BEDAF58]();
}

{
  return MEMORY[0x24BEDAF78]();
}

{
  return MEMORY[0x24BEDAF80]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

uint64_t std::ofstream::open()
{
  return MEMORY[0x24BEDB018]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x24BEDB030](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x24BEDB188](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x24BEDB1A0](retstr, __s);
}

uint64_t std::stol(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x24BEDB338](__str, __idx, *(_QWORD *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x24BEDB438](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x24BEDB440](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x24BEDB610](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB630](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

void operator delete[](void *__p)
{
  off_25086A3D0(__p);
}

void operator delete(void *__p)
{
  off_25086A3D8(__p);
}

void *__cdecl operator new[](size_t __sz)
{
  return (void *)off_25086A3E0(__sz);
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_25086A3E8(__sz);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

int __darwin_check_fd_set_overflow(int a1, const void *a2, int a3)
{
  return MEMORY[0x24BDAC7B8](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x24BDAC7D0]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC930](*(_QWORD *)&a1);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB88](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

int accept(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x24BDAD030](*(_QWORD *)&a1, a2, a3);
}

int bind(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x24BDAD2C8](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

int chmod(const char *a1, mode_t a2)
{
  return MEMORY[0x24BDAD990](a1, a2);
}

int chown(const char *a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x24BDAD998](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int close(int a1)
{
  return MEMORY[0x24BDAD9D8](*(_QWORD *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x24BDAD9F0](a1);
}

int connect(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x24BDADA10](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

double difftime(time_t a1, time_t a2)
{
  double result;

  MEMORY[0x24BDADC30](a1, a2);
  return result;
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x24BDADC58](object);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC8](queue, block);
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x24BDADCD8](queue, context, work);
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x24BDADCF0](queue, context, work);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x24BDADDA8](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x24BDADDC8]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x24BDADDD0](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x24BDADDD8](group);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADDF0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEB0](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEC8](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED8](label, attr, target);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x24BDADF10](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x24BDADF20](object);
}

void dispatch_set_qos_class_floor(dispatch_object_t object, dispatch_qos_class_t qos_class, int relative_priority)
{
  MEMORY[0x24BDADF58](object, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x24BDADF68](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x24BDADF70](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x24BDADF78](source);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x24BDADFB0](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x24BDADFD0](source, start, interval, leeway);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x24BDADFF8](when, delta);
}

int fchmod(int a1, mode_t a2)
{
  return MEMORY[0x24BDAE2B8](*(_QWORD *)&a1, a2);
}

int fclose(FILE *a1)
{
  return MEMORY[0x24BDAE2E0](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x24BDAE2E8](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int fflush(FILE *a1)
{
  return MEMORY[0x24BDAE350](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x24BDAE410](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE448](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x24BDAE4D8](a1, a2, *(_QWORD *)&a3);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x24BDAE508](*(_QWORD *)&a1, a2);
}

int fsync(int a1)
{
  return MEMORY[0x24BDAE528](*(_QWORD *)&a1);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x24BDAE530](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

hostent *__cdecl gethostbyname(const char *a1)
{
  return (hostent *)MEMORY[0x24BDAE640](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x24BDAE6D0]();
}

passwd *__cdecl getpwnam(const char *a1)
{
  return (passwd *)MEMORY[0x24BDAE710](a1);
}

int getsockname(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x24BDAE770](*(_QWORD *)&a1, a2, a3);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x24BDAE780](a1, a2);
}

int listen(int a1, int a2)
{
  return MEMORY[0x24BDAEA78](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x24BDAEAA0](a1, a2);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAEB28](a1, a2);
}

malloc_zone_t *__cdecl malloc_create_zone(vm_size_t start_size, unsigned int flags)
{
  return (malloc_zone_t *)MEMORY[0x24BDAED10](start_size, *(_QWORD *)&flags);
}

void malloc_destroy_zone(malloc_zone_t *zone)
{
  MEMORY[0x24BDAED28](zone);
}

void malloc_set_zone_name(malloc_zone_t *zone, const char *name)
{
  MEMORY[0x24BDAED58](zone, name);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

void *__cdecl malloc_type_zone_calloc(malloc_zone_t *zone, size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED98](zone, count, size, type_id);
}

void *__cdecl malloc_type_zone_malloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAEDA0](zone, size, type_id);
}

void *__cdecl malloc_type_zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAEDA8](zone, alignment, size, type_id);
}

void *__cdecl malloc_type_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAEDB0](zone, ptr, size, type_id);
}

void *__cdecl malloc_type_zone_valloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAEDB8](zone, size, type_id);
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
  MEMORY[0x24BDAEDC0](zone, ptr);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x24BDAEF28](a1, a2);
}

time_t mktime(tm *a1)
{
  return MEMORY[0x24BDAEF98](a1);
}

BOOL notify_is_valid_token(int val)
{
  return MEMORY[0x24BDAF150](*(_QWORD *)&val);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x24BDAF160](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x24BDAF168](name, out_token);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x24BDAF198](*(_QWORD *)&token, state64);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x24BDAF228](a1, *(_QWORD *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x24BDAF258](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8D0](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8E0](a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x24BDAFA80](*(_QWORD *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x24BDAFA88](a1);
}

ssize_t recv(int a1, void *a2, size_t a3, int a4)
{
  return MEMORY[0x24BDAFAE0](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x24BDAFB38](__p, __ec);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
  MEMORY[0x24BDAFB80](__from, __to, __ec);
}

void rewind(FILE *a1)
{
  MEMORY[0x24BDAFB98](a1);
}

int select(int a1, fd_set *a2, fd_set *a3, fd_set *a4, timeval *a5)
{
  return MEMORY[0x24BDAFC70](*(_QWORD *)&a1, a2, a3, a4, a5);
}

ssize_t send(int a1, const void *a2, size_t a3, int a4)
{
  return MEMORY[0x24BDAFCE8](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x24BDAFD78](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3, a4, *(_QWORD *)&a5);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x24BDAFE50](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAFEA8](a1, a2);
}

int statvfs(const char *a1, statvfs *a2)
{
  return MEMORY[0x24BDAFEB8](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x24BDAFED0](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x24BDAFF18](*(_QWORD *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x24BDAFF28](a1, a2, a3, a4);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

char *__cdecl strptime(const char *a1, const char *a2, tm *a3)
{
  return (char *)MEMORY[0x24BDAFF98](a1, a2, a3);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0000](__str, __endptr, *(_QWORD *)&__base);
}

time_t time(time_t *a1)
{
  return MEMORY[0x24BDB0240](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x24BDB02B0](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x24BDB02E8](*(_QWORD *)&a1);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x24BDB0558](*(_QWORD *)&__fd, __buf, __nbyte);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
  MEMORY[0x24BDB0630](xarray, value);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x24BDB0640](objects, count);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x24BDB0820](object);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x24BDB08C0](keys, values, count);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x24BDB0968](xdict, key);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x24BDB09E0](xdict, key, value);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x24BDB0A70](object);
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x24BDB0AC0]();
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x24BDB0AE0](object);
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x24BDB0AE8](object);
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x24BDB0B80](string);
}

