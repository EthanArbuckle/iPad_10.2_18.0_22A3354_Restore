uint64_t AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>::AllocatedVectorQuantizer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  const void *v15;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  _QWORD *v19;
  int v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v31;
  char *v32;
  const char *v33;
  char *v34;
  const char *v35;
  char *v36;
  const char *v37;
  char *v38;
  const char *v39;
  char *v40;
  const char *v41;
  char v42[1024];
  _BYTE buf[24];
  void *v44;
  _BYTE v45[24];
  int v46;
  char v47;
  char v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)a1 = &off_1E6E32628;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 20);
  *(_QWORD *)(a1 + 64) = fd_dup(*(_QWORD *)a2);
  bzero(v42, 0x400uLL);
  v5 = fd_name(*(_QWORD *)a2, v42, 0x400uLL);
  MEMORY[0x1BCCB03B0](v4, v5);
  if (!*(_QWORD *)(a1 + 64))
  {
    v31 = __si_assert_copy_extra_268();
    v32 = v31;
    v33 = "";
    if (v31)
      v33 = v31;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 478, "fdPtr != nullptr", v33);
    goto LABEL_32;
  }
  v6 = operator new();
  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_DWORD *)(a2 + 16);
  v10 = *(unsigned __int8 *)(a2 + 20);
  v11 = *(unsigned __int8 *)(a2 + 21);
  v12 = *(unsigned __int8 *)(a2 + 22);
  v13 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)v6 = 0;
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZN30vi_onefixedsize_disk_allocatorC2EmymN19vi_ondisk_allocator11meta_info_sEP16vector_storage_s_block_invoke;
  v44 = &__block_descriptor_tmp_80;
  *(_QWORD *)v45 = v6;
  *(_QWORD *)&v45[8] = v7;
  *(_QWORD *)&v45[16] = v8;
  v46 = v9;
  v47 = v10;
  v48 = v11;
  v49 = v12;
  v50 = v13;
  v51 = *(_QWORD *)(a2 + 24);
  storage_array_Init((_DWORD *)(v6 + 8), 1040, 0x40000uLL, 1024, v7, v11 != 0, v9, v10 != 0, v12 != 0, v51, 0, (uint64_t)buf);
  if (v11)
    vi_onefixedsize_disk_allocator::storeHeader((unint64_t *)v6);
  v14 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  if (v14)
  {
    storage_array_Close(v14 + 8);
    v15 = *(const void **)(v14 + 4208);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(v14 + 4208) = 0;
    }
    *(_OWORD *)(v14 + 4192) = 0u;
    MEMORY[0x1BCCB06A4](v14, 0x10A0C408BE2A288);
    v6 = *(_QWORD *)(a1 + 40);
  }
  v16 = (_DWORD *)_windowsResolvePtr(v6 + 40, 0x400uLL, *(_QWORD *)(v6 + 16));
  v17 = v16;
  if (!*(_BYTE *)(a2 + 21))
  {
    *(_DWORD *)(a1 + 52) = *v16;
    v19 = *(_QWORD **)(a1 + 40);
    v20 = *__error();
    v21 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = v19[6];
      v23 = (void *)v19[7];
      v25 = v19[2];
      v24 = v19[3];
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = v19;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v22;
      *(_WORD *)&buf[22] = 2048;
      v44 = v23;
      *(_WORD *)v45 = 2048;
      *(_QWORD *)&v45[2] = v24;
      *(_WORD *)&v45[10] = 2048;
      *(_QWORD *)&v45[12] = v25;
      _os_log_impl(&dword_1B8270000, v21, OS_LOG_TYPE_DEFAULT, "vi_onefixedsize_disk_allocator %p size: %llu, freeRegion: %llu, header: %llu, elemSize: %lu", buf, 0x34u);
    }
    *__error() = v20;
    v26 = *(_QWORD **)(a1 + 40);
    v27 = v26[2];
    v28 = v26[7] - v26[3];
    v29 = v28 / v27;
    if (v28 == v28 / v27 * v27)
    {
      *(_DWORD *)(a1 + 48) = v29;
      if (v17[1] == (_DWORD)v29)
      {
        if (v26[3] == 1040)
        {
          if (v26[2] == 1024)
            return a1;
          v40 = __si_assert_copy_extra_268();
          v32 = v40;
          v41 = "";
          if (v40)
            v41 = v40;
          __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 490, "vi_onefixedsize_disk_allocator::getElementSize(storage.get()) == sizeof(CIVector_t)", v41);
        }
        else
        {
          v38 = __si_assert_copy_extra_268();
          v32 = v38;
          v39 = "";
          if (v38)
            v39 = v38;
          __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 489, "vi_onefixedsize_disk_allocator::getHeaderSize(storage.get()) == sizeof(QuantizerHeader_t)", v39);
        }
      }
      else
      {
        v36 = __si_assert_copy_extra_268();
        v32 = v36;
        v37 = "";
        if (v36)
          v37 = v36;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 488, "nCentroids == header->count", v37);
      }
    }
    else
    {
      v34 = __si_assert_copy_extra_268();
      v32 = v34;
      v35 = "";
      if (v34)
        v35 = v34;
      __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 504, "offset % elemSize == 0", v35);
    }
LABEL_32:
    free(v32);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v16[1] = 0;
  v18 = *(_DWORD *)(a2 + 24);
  *v16 = v18;
  *(_DWORD *)(a1 + 52) = v18;
  return a1;
}

void std::__shared_ptr_pointer<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256> *,std::shared_ptr<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>>::__shared_ptr_default_delete<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>,AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>>,std::allocator<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

uint64_t std::__shared_ptr_pointer<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256> *,std::shared_ptr<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>>::__shared_ptr_default_delete<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>,AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>>,std::allocator<AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>::~AllocatedVectorQuantizer(uint64_t a1)
{
  AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>::~AllocatedVectorQuantizer(a1);
  JUMPOUT(0x1BCCB06A4);
}

uint64_t AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>::version(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>::count(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t Quantizer<float,256>::dimension()
{
  return 256;
}

uint64_t Quantizer<float,256>::elementSize()
{
  return 4;
}

BOOL Quantizer<float,256>::operator==(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  int v8;
  _BOOL8 result;
  char *v10;
  char *v11;
  const char *v12;
  char *v13;
  const char *v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) != 256)
  {
    v10 = __si_assert_copy_extra_268();
    v11 = v10;
    v12 = "";
    if (v10)
      v12 = v10;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 282, "D == other.dimension()", v12);
LABEL_17:
    free(v11);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) != 4)
  {
    v13 = __si_assert_copy_extra_268();
    v11 = v13;
    v14 = "";
    if (v13)
      v14 = v13;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 283, "sizeof(ELEM_TYPE) == other.elementSize()", v14);
    goto LABEL_17;
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
    return 0;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    return 1;
  v5 = 0;
  while (1)
  {
    v6 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, v5);
    v7 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, v5);
    v8 = memcmp(v6, v7, 0x400uLL);
    result = v8 == 0;
    if (v8)
      break;
    v5 = (v5 + 1);
    if (v5 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
      return 1;
  }
  return result;
}

BOOL Quantizer<float,256>::isPersistent(uint64_t a1)
{
  _QWORD *v1;
  int v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(char *)(a1 + 31);
  if ((v2 & 0x80000000) == 0)
  {
    if (v2 != 8)
      return 1;
    return *v1 != 0x3E79726F6D656D3CLL;
  }
  if (*(_QWORD *)(a1 + 16) == 8)
  {
    v1 = (_QWORD *)*v1;
    return *v1 != 0x3E79726F6D656D3CLL;
  }
  return 1;
}

unint64_t AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>::getCentroid(uint64_t a1, unsigned int a2)
{
  char *v3;
  char *v4;
  const char *v5;

  if (*(_DWORD *)(a1 + 48) <= a2)
  {
    v3 = __si_assert_copy_extra_268();
    v4 = v3;
    v5 = "";
    if (v3)
      v5 = v3;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 514, "i < nCentroids", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return _windowsResolvePtr(*(_QWORD *)(a1 + 40) + 40, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) * a2, 0x400uLL);
}

void Quantizer<float,256>::topKPartitions(uint64_t a1@<X0>, const float *a2@<X1>, unsigned int a3@<W2>, int **a4@<X8>)
{
  char *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  const float *v12;
  const float *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  int v18;
  _BOOL4 v19;
  uint64_t v20;
  char *v21;
  float v22;
  float v23;
  float v24;
  _BOOL4 v25;
  float *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _DWORD *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  float *v39;
  float v40;
  float v41;
  int v42;
  float v43;
  _BOOL4 v44;
  float *v45;
  float v46;
  BOOL v47;
  unint64_t v48;
  float *v49;
  unsigned int v50;
  char *v51;
  float v52;
  float v53;
  int v54;
  _BOOL4 v55;
  float *v56;
  float v57;
  BOOL v58;
  char *v59;
  unint64_t v60;
  float *v61;
  float v62;
  int v63;
  _BOOL4 v64;
  float *v65;
  float v66;
  BOOL v67;
  uint64_t v68;
  _OWORD *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  int *v74;
  float *v75;
  uint64_t v76;
  uint64_t v78;
  int v79;
  int v80;
  float *v81;
  float v82;
  float v83;
  float v84;
  _BOOL4 v85;
  float *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  float *v91;
  float v92;
  float v93;
  float v94;
  float v95;
  _BOOL4 v96;
  float *v97;
  float v98;
  BOOL v99;
  int **v100;
  unsigned int __C;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 0;
    v75 = 0;
    v74 = 0;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_74;
  }
  v100 = a4;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = a3;
  v12 = a2;
  do
  {
    v13 = (const float *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 64))(a1, v10);
    __C = 2139095039;
    vDSP_distancesq(v13, 1, v12, 1, (float *)&__C, 0x100uLL);
    v14 = (v10 | ((unint64_t)__C << 32)) >> 32;
    v15 = v7 - v9;
    v16 = (v7 - v9) >> 3;
    if (v16 < v11)
    {
      if (v7 < v8)
      {
        *(_DWORD *)v7 = v10;
        *((_DWORD *)v7 + 1) = v14;
        v7 += 8;
LABEL_47:
        if (v7 - v9 >= 9)
        {
          v48 = (((unint64_t)(v7 - v9) >> 3) - 2) >> 1;
          v49 = (float *)&v9[8 * v48];
          v51 = v7 - 8;
          v50 = *((_DWORD *)v7 - 2);
          v52 = v49[1];
          v53 = *((float *)v7 - 1);
          v54 = *(_DWORD *)v49;
          v55 = *(_DWORD *)v49 < v50;
          if (v52 != v53)
            v55 = v52 < v53;
          if (v55)
          {
            do
            {
              v56 = v49;
              *(_DWORD *)v51 = v54;
              *((float *)v51 + 1) = v49[1];
              if (!v48)
                break;
              v48 = (v48 - 1) >> 1;
              v49 = (float *)&v9[8 * v48];
              v57 = v49[1];
              v54 = *(_DWORD *)v49;
              v58 = v57 < v53;
              if (v57 == v53)
                v58 = *(_DWORD *)v49 < v50;
              v51 = (char *)v56;
            }
            while (v58);
            *(_DWORD *)v56 = v50;
            v56[1] = v53;
          }
        }
        goto LABEL_4;
      }
      if ((v8 - v9) >> 2 <= (unint64_t)(v16 + 1))
        v28 = v16 + 1;
      else
        v28 = (v8 - v9) >> 2;
      if ((unint64_t)(v8 - v9) >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      if (v28 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v29 = 8 * v28;
      v30 = operator new(8 * v28);
      v31 = &v30[8 * v16];
      *v31 = v10;
      v31[1] = v14;
      if (v7 == v9)
      {
        v36 = v7;
        v9 = &v30[8 * v16];
        goto LABEL_44;
      }
      v32 = v7 - v9 - 8;
      if (v32 >= 0x58 && (unint64_t)(v9 - v30) >= 0x20)
      {
        v68 = (v32 >> 3) + 1;
        v33 = &v7[-8 * (v68 & 0x3FFFFFFFFFFFFFFCLL)];
        v69 = &v30[8 * v16 - 16];
        v70 = v7 - 16;
        v71 = v68 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v72 = *(_OWORD *)v70;
          *(v69 - 1) = *((_OWORD *)v70 - 1);
          *v69 = v72;
          v69 -= 2;
          v70 -= 32;
          v71 -= 4;
        }
        while (v71);
        v34 = (char *)&v31[-2 * (v68 & 0x3FFFFFFFFFFFFFFCLL)];
        if (v68 == (v68 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_32;
      }
      else
      {
        v33 = v7;
        v34 = &v30[8 * v16];
      }
      do
      {
        v35 = *((_QWORD *)v33 - 1);
        v33 -= 8;
        *((_QWORD *)v34 - 1) = v35;
        v34 -= 8;
      }
      while (v33 != v9);
LABEL_32:
      v36 = v9;
      v9 = v34;
LABEL_44:
      v8 = &v30[v29];
      v7 = (char *)(v31 + 2);
      if (v36)
        operator delete(v36);
      v12 = a2;
      goto LABEL_47;
    }
    v17 = *((float *)v9 + 1);
    v18 = *(_DWORD *)v9;
    v19 = *(_DWORD *)v9 > v10;
    if (v17 != *(float *)&v14)
      v19 = v17 > *(float *)&v14;
    if (v19)
    {
      if (v15 <= 8)
      {
        *((_DWORD *)v7 - 2) = v10;
        *((_DWORD *)v7 - 1) = v14;
      }
      else
      {
        v20 = 0;
        v21 = v9;
        do
        {
          v26 = (float *)&v21[8 * v20 + 8];
          v27 = (2 * v20) | 1;
          v20 = 2 * v20 + 2;
          if (v20 < v16)
          {
            v22 = v26[1];
            v23 = v26[3];
            v24 = *v26;
            v25 = *(_DWORD *)v26 < *((_DWORD *)v26 + 2);
            if (v22 != v23)
              v25 = v22 < v23;
            if (v25)
            {
              v24 = v26[2];
              v26 += 2;
            }
            else
            {
              v20 = v27;
            }
          }
          else
          {
            v24 = *v26;
            v20 = v27;
          }
          *(float *)v21 = v24;
          *((float *)v21 + 1) = v26[1];
          v21 = (char *)v26;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v26 == (float *)(v7 - 8))
        {
          *(_DWORD *)v26 = v18;
          v26[1] = v17;
        }
        else
        {
          *v26 = *((float *)v7 - 2);
          v26[1] = *((float *)v7 - 1);
          *((_DWORD *)v7 - 2) = v18;
          *((float *)v7 - 1) = v17;
          v37 = (char *)v26 - v9 + 8;
          if (v37 >= 9)
          {
            v38 = (((unint64_t)v37 >> 3) - 2) >> 1;
            v39 = (float *)&v9[8 * v38];
            v40 = v39[1];
            v41 = v26[1];
            v42 = *(_DWORD *)v39;
            v43 = *v26;
            v44 = *(_DWORD *)v39 < *(_DWORD *)v26;
            if (v40 != v41)
              v44 = v40 < v41;
            if (v44)
            {
              do
              {
                v45 = v39;
                *(_DWORD *)v26 = v42;
                v26[1] = v39[1];
                if (!v38)
                  break;
                v38 = (v38 - 1) >> 1;
                v39 = (float *)&v9[8 * v38];
                v46 = v39[1];
                v42 = *(_DWORD *)v39;
                v47 = v46 < v41;
                if (v46 == v41)
                  v47 = *(_DWORD *)v39 < LODWORD(v43);
                v26 = v45;
              }
              while (v47);
              *v45 = v43;
              v45[1] = v41;
            }
          }
        }
        *((_DWORD *)v7 - 2) = v10;
        *((_DWORD *)v7 - 1) = v14;
        v59 = v7 - 8;
        v60 = (((unint64_t)v15 >> 3) - 2) >> 1;
        v61 = (float *)&v9[8 * v60];
        v62 = v61[1];
        v63 = *(_DWORD *)v61;
        v64 = *(_DWORD *)v61 < v10;
        if (v62 != *(float *)&v14)
          v64 = v62 < *(float *)&v14;
        if (v64)
        {
          do
          {
            v65 = v61;
            *(_DWORD *)v59 = v63;
            *((float *)v59 + 1) = v61[1];
            if (!v60)
              break;
            v60 = (v60 - 1) >> 1;
            v61 = (float *)&v9[8 * v60];
            v66 = v61[1];
            v63 = *(_DWORD *)v61;
            v67 = v66 < *(float *)&v14;
            if (v66 == *(float *)&v14)
              v67 = *(_DWORD *)v61 < v10;
            v59 = (char *)v65;
          }
          while (v67);
          *(_DWORD *)v65 = v10;
          *((_DWORD *)v65 + 1) = v14;
        }
      }
    }
LABEL_4:
    ++v10;
  }
  while (v10 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1));
  *v100 = 0;
  v100[1] = 0;
  v100[2] = 0;
  v73 = v7 - v9;
  if (v7 == v9)
  {
    v75 = 0;
    v74 = 0;
  }
  else
  {
    if (v73 < 0)
      abort();
    v74 = (int *)operator new(v7 - v9);
    *v100 = v74;
    v100[2] = &v74[2 * (v73 >> 3)];
    memcpy(v74, v9, v73 & 0xFFFFFFFFFFFFFFF8);
    v75 = (float *)((char *)v74 + (v73 & 0xFFFFFFFFFFFFFFF8));
    v100[1] = (int *)v75;
    v7 = v9;
  }
LABEL_74:
  if ((char *)v75 - (char *)v74 >= 9)
  {
    v76 = (unint64_t)((char *)v75 - (char *)v74) >> 3;
    do
    {
      v78 = 0;
      v79 = *v74;
      v80 = v74[1];
      v81 = (float *)v74;
      do
      {
        v86 = &v81[2 * v78 + 2];
        v87 = (2 * v78) | 1;
        v78 = 2 * v78 + 2;
        if (v78 < v76)
        {
          v82 = v86[1];
          v83 = v86[3];
          v84 = *v86;
          v85 = *(_DWORD *)v86 < *((_DWORD *)v86 + 2);
          if (v82 != v83)
            v85 = v82 < v83;
          if (v85)
          {
            v84 = v86[2];
            v86 += 2;
          }
          else
          {
            v78 = v87;
          }
        }
        else
        {
          v84 = *v86;
          v78 = v87;
        }
        *v81 = v84;
        v81[1] = v86[1];
        v81 = v86;
      }
      while (v78 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
      v88 = (char *)(v75 - 2);
      if (v86 == v75 - 2)
      {
        *(_DWORD *)v86 = v79;
        *((_DWORD *)v86 + 1) = v80;
      }
      else
      {
        *v86 = *(v75 - 2);
        v86[1] = *(v75 - 1);
        *((_DWORD *)v75 - 2) = v79;
        *((_DWORD *)v75 - 1) = v80;
        v89 = (char *)v86 - (char *)v74 + 8;
        if (v89 >= 9)
        {
          v90 = (((unint64_t)v89 >> 3) - 2) >> 1;
          v91 = (float *)&v74[2 * v90];
          v92 = v91[1];
          v93 = v86[1];
          v94 = *v91;
          v95 = *v86;
          v96 = *(_DWORD *)v91 < *(_DWORD *)v86;
          if (v92 != v93)
            v96 = v92 < v93;
          if (v96)
          {
            do
            {
              v97 = v91;
              *v86 = v94;
              v86[1] = v91[1];
              if (!v90)
                break;
              v90 = (v90 - 1) >> 1;
              v91 = (float *)&v74[2 * v90];
              v98 = v91[1];
              v94 = *v91;
              v99 = v98 < v93;
              if (v98 == v93)
                v99 = *(_DWORD *)v91 < LODWORD(v95);
              v86 = v97;
            }
            while (v99);
            *v97 = v95;
            v97[1] = v93;
          }
        }
      }
      v75 = (float *)v88;
    }
    while (v76-- > 2);
  }
  if (v7)
    operator delete(v7);
}

uint64_t AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>::~AllocatedVectorQuantizer(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  const void *v6;

  *(_QWORD *)a1 = &off_1E6E32628;
  v2 = atomic_load((unsigned __int8 *)(a1 + 57));
  if ((v2 & 1) != 0)
    vi_onefixedsize_disk_allocator::unlinkStorage(*(_QWORD *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
  {
    storage_array_Close(v3 + 8);
    v4 = *(const void **)(v3 + 4208);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(v3 + 4208) = 0;
    }
    *(_OWORD *)(v3 + 4192) = 0u;
    MEMORY[0x1BCCB06A4](v3, 0x10A0C408BE2A288);
  }
  fd_release(*(char **)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v5)
  {
    storage_array_Close(v5 + 8);
    v6 = *(const void **)(v5 + 4208);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(v5 + 4208) = 0;
    }
    *(_OWORD *)(v5 + 4192) = 0u;
    MEMORY[0x1BCCB06A4](v5, 0x10A0C408BE2A288);
  }
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void ___ZN19ZeroVectorQuantizerIfLi256EE14sharedInstanceEv_block_invoke()
{
  uint64_t v0;
  unsigned __int8 v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  char __str[8];
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[4];
  void *__p[2];
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  if ((v1 & 1) == 0
  {
    bzero(&ZeroVectorQuantizer<float,256>::centroid(void)::centroid, 0x400uLL);
  }
  if (ZeroVectorQuantizer<float,256>::centroid(void)::onceToken != -1)
    dispatch_once(&ZeroVectorQuantizer<float,256>::centroid(void)::onceToken, &__block_literal_global_513);
  *(_QWORD *)(v0 + 8) = 0;
  v2 = (void **)(v0 + 8);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)v0 = off_1E6E32498;
  memcpy((void *)(v0 + 33), &ZeroVectorQuantizer<float,256>::centroid(void)::centroid, 0x400uLL);
  bzero(__str, 0x400uLL);
  snprintf(__str, 0x400uLL, "S%08x%08x-1x%dx%u", ZeroVectorQuantizer<float,256>::centroid(void)::centroid, dword_1EF1AF21C, 256, 32);
  MEMORY[0x1BCCB03B0](v0 + 8, __str);
  *(_QWORD *)v0 = off_1E6E32418;
  v36 = 0u;
  v26 = 0;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  v25 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v23, 0, sizeof(v23));
  v3 = MEMORY[0x1E0DE4FD0];
  v4 = MEMORY[0x1E0DE4FD0] + 104;
  v27 = MEMORY[0x1E0DE4FD0] + 104;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = MEMORY[0x1E0DE4FD0] + 64;
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v22 = MEMORY[0x1E0DE4FD0] + 64;
  *(_QWORD *)__str = v7;
  *(_QWORD *)&__str[*(_QWORD *)(v7 - 24)] = v8;
  v21 = 0;
  v9 = (std::ios_base *)&__str[*(_QWORD *)(*(_QWORD *)__str - 24)];
  std::ios_base::init(v9, v23);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v10 = v5[5];
  v22 = v5[4];
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = v10;
  *(_QWORD *)__str = v5[1];
  *(_QWORD *)&__str[*(_QWORD *)(*(_QWORD *)__str - 24)] = v5[6];
  v27 = v4;
  *(_QWORD *)__str = v3 + 24;
  v22 = v6;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)&v23[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v25 = 0u;
  LODWORD(v26) = 24;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Z1000000000000000-1x", 20);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)"x", 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (*(char *)(v0 + 31) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = v18;
  *(_QWORD *)(v0 + 24) = v19;
  *(_QWORD *)__str = *v5;
  v13 = v5[9];
  *(_QWORD *)&__str[*(_QWORD *)(*(_QWORD *)__str - 24)] = v5[8];
  v22 = v13;
  *(_QWORD *)&v23[0] = v11;
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1BCCB0650](&v27);
  v14 = (_QWORD *)operator new();
  *v14 = &off_1E6E324F8;
  v14[1] = 0;
  v14[2] = 0;
  v14[3] = v0;
  v15 = (std::__shared_weak_count *)qword_1EF1AEE08;
  ZeroVectorQuantizer<float,256>::sharedInstance(void)::zvq = v0;
  qword_1EF1AEE08 = (uint64_t)v14;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void std::__shared_ptr_pointer<ZeroVectorQuantizer<float,256> *,std::shared_ptr<Quantizer<float,256>>::__shared_ptr_default_delete<Quantizer<float,256>,ZeroVectorQuantizer<float,256>>,std::allocator<ZeroVectorQuantizer<float,256>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

uint64_t std::__shared_ptr_pointer<ZeroVectorQuantizer<float,256> *,std::shared_ptr<Quantizer<float,256>>::__shared_ptr_default_delete<Quantizer<float,256>,ZeroVectorQuantizer<float,256>>,std::allocator<ZeroVectorQuantizer<float,256>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ZeroVectorQuantizer<float,256>::~ZeroVectorQuantizer(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void ZeroVectorQuantizer<float,256>::~ZeroVectorQuantizer(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1BCCB06A4);
}

uint64_t SingleVectorQuantizer<float,256>::count()
{
  return 1;
}

uint64_t SingleVectorQuantizer<float,256>::getCentroid(uint64_t a1, int a2)
{
  char *v3;
  char *v4;
  const char *v5;

  if (a2)
  {
    v3 = __si_assert_copy_extra_268();
    v4 = v3;
    v5 = "";
    if (v3)
      v5 = v3;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 387, "i < 1", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a1 + 33;
}

float *SingleVectorQuantizer<float,256>::topKPartitions@<X0>(const float *__A@<X1>, uint64_t a2@<X0>, float **a3@<X8>)
{
  float v4;
  float *result;
  float __C;

  __C = 3.4028e38;
  vDSP_distancesq(__A, 1, (const float *)(a2 + 33), 1, &__C, 0x100uLL);
  v4 = __C;
  result = (float *)operator new(8uLL);
  a3[1] = result + 2;
  a3[2] = result + 2;
  *result = 0.0;
  result[1] = v4;
  *a3 = result;
  return result;
}

uint64_t SingleVectorQuantizer<float,256>::~SingleVectorQuantizer(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void SingleVectorQuantizer<float,256>::~SingleVectorQuantizer(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1BCCB06A4);
}

void ___ZN19ZeroVectorQuantizerIfLi256EE8centroidEv_block_invoke()
{
  bzero(&unk_1EF1AEE24, 0x3FCuLL);
  ZeroVectorQuantizer<float,256>::centroid(void)::centroid = 1065353216;
}

uint64_t std::unordered_map<std::string,std::weak_ptr<QuantizerManager<float,256>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  std::__shared_weak_count *v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = (std::__shared_weak_count *)*((_QWORD *)v2 + 6);
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<QuantizerManager<float,256>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<QuantizerManager<float,256>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<QuantizerManager<float,256>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<QuantizerManager<float,256>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void **v11;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD **v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *i;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  void *v47;

  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (uint64_t *)a1;
  else
    v4 = *(uint64_t **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v4, v5);
  v7 = v6;
  v8 = *((_QWORD *)&QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + 1);
  if (*((_QWORD *)&QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers
                                        + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v6;
      if (v6 >= *((_QWORD *)&QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + 1))
        v10 = v6
            % *((_QWORD *)&QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + 1);
    }
    else
    {
      v10 = (*((_QWORD *)&QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + 1)
           - 1) & v6;
    }
    v11 = *(void ***)(QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + 8 * v10);
    if (v11)
    {
      v12 = (unsigned __int8 *)*v11;
      if (*v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = *((_QWORD *)v12 + 1);
            if (v17 == v7)
            {
              v18 = v12[39];
              if ((v18 & 0x80u) == 0)
                v19 = v12[39];
              else
                v19 = *((_QWORD *)v12 + 3);
              if (v19 == v5)
              {
                if ((v18 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v12 + 2), v4, *((_QWORD *)v12 + 3)))
                    return v12;
                }
                else
                {
                  if (!v12[39])
                    return v12;
                  v20 = 0;
                  while (v12[v20 + 16] == *((unsigned __int8 *)v4 + v20))
                  {
                    if (v18 == ++v20)
                      return v12;
                  }
                }
              }
            }
            else if ((v17 & (v8 - 1)) != v10)
            {
              goto LABEL_49;
            }
            v12 = *(unsigned __int8 **)v12;
            if (!v12)
              goto LABEL_49;
          }
        }
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v7)
          {
            v14 = v12[39];
            if ((v14 & 0x80u) == 0)
              v15 = v12[39];
            else
              v15 = *((_QWORD *)v12 + 3);
            if (v15 == v5)
            {
              if ((v14 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v12 + 2), v4, *((_QWORD *)v12 + 3)))
                  return v12;
              }
              else
              {
                if (!v12[39])
                  return v12;
                v16 = 0;
                while (v12[v16 + 16] == *((unsigned __int8 *)v4 + v16))
                {
                  if (v14 == ++v16)
                    return v12;
                }
              }
            }
          }
          else
          {
            if (v13 >= v8)
              v13 %= v8;
            if (v13 != v10)
              break;
          }
          v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_49:
  v12 = (unsigned __int8 *)operator new(0x38uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v7;
  v21 = (std::string *)(v12 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v12 + 4) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v12 + 5) = 0;
  *((_QWORD *)v12 + 6) = 0;
  v22 = (float)(unint64_t)(qword_1EF1B0718 + 1);
  if (!v8 || (float)(*(float *)&dword_1EF1B0720 * (float)v8) < v22)
  {
    v23 = 1;
    if (v8 >= 3)
      v23 = (v8 & (v8 - 1)) != 0;
    v24 = v23 | (2 * v8);
    v25 = vcvtps_u32_f32(v22 / *(float *)&dword_1EF1B0720);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v8 = *((_QWORD *)&QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + 1);
    if (prime <= *((_QWORD *)&QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + 1))
    {
      if (prime >= *((_QWORD *)&QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers
                    + 1))
        goto LABEL_89;
      v37 = vcvtps_u32_f32((float)(unint64_t)qword_1EF1B0718 / *(float *)&dword_1EF1B0720);
      if (*((_QWORD *)&QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + 1) < 3uLL
        || (v38 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers
                                                 + 8)),
            v38.i16[0] = vaddlv_u8(v38),
            v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime >= v8)
      {
        v8 = *((_QWORD *)&QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + 1);
LABEL_89:
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v7 >= v8)
            v10 = v7 % v8;
          else
            v10 = v7;
        }
        else
        {
          v10 = (v8 - 1) & v7;
        }
        goto LABEL_102;
      }
      if (!prime)
      {
        v47 = (void *)QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers;
        *(_QWORD *)&QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers = 0;
        if (v47)
          operator delete(v47);
        v8 = 0;
        *((_QWORD *)&QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + 1) = 0;
        goto LABEL_89;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v27 = operator new(8 * prime);
    v28 = (void *)QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers;
    *(_QWORD *)&QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers = v27;
    if (v28)
      operator delete(v28);
    v29 = 0;
    *((_QWORD *)&QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + 1) = prime;
    do
      *(_QWORD *)(QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + 8 * v29++) = 0;
    while (prime != v29);
    v30 = (_QWORD **)qword_1EF1B0710;
    if (!qword_1EF1B0710)
    {
LABEL_88:
      v8 = prime;
      goto LABEL_89;
    }
    v31 = *(_QWORD *)(qword_1EF1B0710 + 8);
    v32 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v33 = v31 & v32;
      *(_QWORD *)(QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + 8 * v33) = &qword_1EF1B0710;
      for (i = *v30; *v30; i = *v30)
      {
        v35 = i[1] & v32;
        if (v35 == v33)
        {
          v30 = (_QWORD **)i;
        }
        else if (*(_QWORD *)(QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers
                            + 8 * v35))
        {
          *v30 = (_QWORD *)*i;
          v36 = 8 * v35;
          *i = **(_QWORD **)(QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + v36);
          **(_QWORD **)(QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + v36) = i;
        }
        else
        {
          *(_QWORD *)(QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + 8 * v35) = v30;
          v30 = (_QWORD **)i;
          v33 = v35;
        }
      }
      goto LABEL_88;
    }
    if (v31 >= prime)
      v31 %= prime;
    *(_QWORD *)(QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + 8 * v31) = &qword_1EF1B0710;
    v40 = *v30;
    if (!*v30)
      goto LABEL_88;
    while (1)
    {
      v42 = v40[1];
      if (v42 >= prime)
        v42 %= prime;
      if (v42 != v31)
      {
        if (!*(_QWORD *)(QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers
                        + 8 * v42))
        {
          *(_QWORD *)(QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + 8 * v42) = v30;
          goto LABEL_93;
        }
        *v30 = (_QWORD *)*v40;
        v41 = 8 * v42;
        *v40 = **(_QWORD **)(QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + v41);
        **(_QWORD **)(QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + v41) = v40;
        v40 = v30;
      }
      v42 = v31;
LABEL_93:
      v30 = (_QWORD **)v40;
      v40 = (_QWORD *)*v40;
      v31 = v42;
      if (!v40)
        goto LABEL_88;
    }
  }
LABEL_102:
  v43 = QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers;
  v44 = *(_QWORD **)(QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + 8 * v10);
  if (v44)
  {
    *(_QWORD *)v12 = *v44;
LABEL_110:
    *v44 = v12;
    goto LABEL_111;
  }
  *(_QWORD *)v12 = qword_1EF1B0710;
  qword_1EF1B0710 = (uint64_t)v12;
  *(_QWORD *)(v43 + 8 * v10) = &qword_1EF1B0710;
  if (*(_QWORD *)v12)
  {
    v45 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v45 >= v8)
        v45 %= v8;
    }
    else
    {
      v45 &= v8 - 1;
    }
    v44 = (_QWORD *)(QuantizerManager<float,256>::sharedInstance(int,unsigned int,unsigned short)::managers + 8 * v45);
    goto LABEL_110;
  }
LABEL_111:
  ++qword_1EF1B0718;
  return v12;
}

void std::__shared_ptr_pointer<QuantizerManager<float,256> *,std::shared_ptr<QuantizerManager<float,256>>::__shared_ptr_default_delete<QuantizerManager<float,256>,QuantizerManager<float,256>>,std::allocator<QuantizerManager<float,256>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

uint64_t std::__shared_ptr_pointer<QuantizerManager<float,256> *,std::shared_ptr<QuantizerManager<float,256>>::__shared_ptr_default_delete<QuantizerManager<float,256>,QuantizerManager<float,256>>,std::allocator<QuantizerManager<float,256>>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *__error();
    v3 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = (_QWORD *)(v1 + 24);
      if (*(char *)(v1 + 47) < 0)
        v4 = (_QWORD *)*v4;
      v5 = (_QWORD *)(v1 + 48);
      if (*(char *)(v1 + 71) < 0)
        v5 = (_QWORD *)*v5;
      v16 = 136315394;
      v17 = v4;
      v18 = 2080;
      v19 = v5;
      _os_log_impl(&dword_1B8270000, v3, OS_LOG_TYPE_DEFAULT, "QuantizerManager %s/%s destroyed", (uint8_t *)&v16, 0x16u);
    }
    *__error() = v2;
    v6 = *(_QWORD **)(v1 + 128);
    if (v6)
    {
      do
      {
        v14 = (_QWORD *)*v6;
        v15 = (std::__shared_weak_count *)v6[4];
        if (v15)
          std::__shared_weak_count::__release_weak(v15);
        operator delete(v6);
        v6 = v14;
      }
      while (v14);
    }
    v7 = *(void **)(v1 + 112);
    *(_QWORD *)(v1 + 112) = 0;
    if (v7)
      operator delete(v7);
    v8 = *(std::__shared_weak_count **)(v1 + 104);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = *(std::__shared_weak_count **)(v1 + 88);
    if (!v11)
      goto LABEL_20;
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((*(char *)(v1 + 71) & 0x80000000) == 0)
      {
LABEL_21:
        if ((*(char *)(v1 + 47) & 0x80000000) == 0)
          goto LABEL_30;
        goto LABEL_29;
      }
    }
    else
    {
LABEL_20:
      if ((*(char *)(v1 + 71) & 0x80000000) == 0)
        goto LABEL_21;
    }
    operator delete(*(void **)(v1 + 48));
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
LABEL_30:
      JUMPOUT(0x1BCCB06A4);
LABEL_29:
    operator delete(*(void **)(v1 + 24));
    goto LABEL_30;
  }
  return result;
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E34218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E34218;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
  {
    storage_array_Close(v2 + 8);
    v3 = *(const void **)(v2 + 4208);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(v2 + 4208) = 0;
    }
    *(_OWORD *)(v2 + 4192) = 0u;
    JUMPOUT(0x1BCCB06A4);
  }
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::~IVFVectorIndexRoot_s(_QWORD *a1)
{
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::~IVFVectorIndexRoot_s(a1);
  JUMPOUT(0x1BCCB06A4);
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::getQuantizer(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  os_unfair_lock_s *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v6 = *(_QWORD *)(a1 + 80);
  v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(std::__shared_weak_count **)(a1 + 104);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  os_unfair_lock_unlock(v4);
  *a2 = v6;
  a2[1] = v5;
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (!v9)
    goto LABEL_14;
  v14 = (unint64_t *)&v9->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v5)
      return;
  }
  else
  {
LABEL_14:
    if (!v5)
      return;
  }
  v16 = (unint64_t *)&v5->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::getPartitions(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  os_unfair_lock_s *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v9 = *(_QWORD *)(a1 + 96);
  v8 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v8)
  {
    os_unfair_lock_unlock(v4);
    *a2 = v9;
    a2[1] = 0;
    if (!v5)
      return;
    goto LABEL_15;
  }
  v10 = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  os_unfair_lock_unlock(v4);
  *a2 = v9;
  a2[1] = v8;
  do
    v12 = __ldxr(v10);
  while (__stxr(v12 + 1, v10));
  do
    v13 = __ldaxr(v10);
  while (__stlxr(v13 - 1, v10));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v5)
  {
LABEL_15:
    v14 = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

unint64_t IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::getVectorAtOffset(uint64_t a1, unsigned int a2)
{
  return _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 16) * a2, 0x410uLL);
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::newPartitions(uint64_t a1@<X0>, char **a2@<X1>, _QWORD *a3@<X8>)
{
  os_unfair_lock_s *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  const char *v14;
  __int128 v15;
  size_t v16;
  void *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  int v32;
  int v33;
  NSObject *v34;
  void **v35;
  int v36;
  int v37;
  char *v38;
  _QWORD *v39;
  int v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  const char *v47;
  void *__p[2];
  char v49;
  _OWORD v50[2];
  void *__dst[2];
  unint64_t v52;
  _OWORD v53[2];
  __int128 v54;
  __int128 v55;
  uint8_t buf[24];
  __int16 v57;
  _QWORD *v58;
  __int16 v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v6 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v7 = *(std::__shared_weak_count **)(a1 + 88);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v11 = *(_QWORD *)(a1 + 96);
  v10 = *(std::__shared_weak_count **)(a1 + 104);
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  os_unfair_lock_unlock(v6);
  v14 = ".partitions";
  if (v11 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11))
    v14 = ".tmp.partitions";
  v55 = 0u;
  v15 = *(_OWORD *)(a1 + 24);
  v53[0] = *(_OWORD *)(a1 + 8);
  v53[1] = v15;
  v54 = 0u;
  v16 = strlen(v14);
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
LABEL_60:
    abort();
  v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    v18 = (void **)operator new(v19 + 1);
    __dst[1] = v17;
    v52 = v20 | 0x8000000000000000;
    __dst[0] = v18;
    goto LABEL_17;
  }
  HIBYTE(v52) = v16;
  v18 = __dst;
  if (v16)
LABEL_17:
    memcpy(v18, v14, (size_t)v17);
  *((_BYTE *)v17 + (_QWORD)v18) = 0;
  IVFVectorIndexTemplate<float,768>::childMetaInfo((uint64_t)&v54, (uint64_t)v53, (uint64_t)__dst, 1);
  if (SHIBYTE(v52) < 0)
    operator delete(__dst[0]);
  v21 = operator new();
  v22 = (_DWORD *)v21;
  v50[0] = v54;
  v50[1] = v55;
  v23 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)buf = *a2;
  *(_QWORD *)&buf[8] = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    PartitionStore<vi_onefixedsize_disk_allocator,512>::PartitionStore<vi_onefixedsize_disk_allocator>(v21, (uint64_t)v50, buf);
    do
      v26 = __ldaxr(v24);
    while (__stlxr(v26 - 1, v24));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  else
  {
    PartitionStore<vi_onefixedsize_disk_allocator,512>::PartitionStore<vi_onefixedsize_disk_allocator>(v21, (uint64_t)v50, buf);
  }
  *a3 = v22;
  v27 = (_QWORD *)operator new();
  *v27 = &off_1E6E33858;
  v27[1] = 0;
  v27[2] = 0;
  v27[3] = v22;
  a3[1] = v27;
  v28 = *(_QWORD *)(a1 + 48);
  if (*(_DWORD *)(v28 + 40))
  {
    v29 = 0;
    do
    {
      memset(buf, 0, sizeof(buf));
      v30 = *a2;
      v31 = _windowsResolvePtr(*(_QWORD *)(v28 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v28 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v28 + 32) + 16) * v29, 0x410uLL);
      (*(void (**)(uint8_t *__return_ptr, char *, unint64_t, uint64_t))(*(_QWORD *)v30 + 72))(buf, v30, v31, 1);
      (*(void (**)(_DWORD *, _QWORD, unint64_t, float))(*(_QWORD *)v22 + 56))(v22, **(_DWORD **)buf, v29, *(float *)(*(_QWORD *)buf + 4));
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      ++v29;
      v28 = *(_QWORD *)(a1 + 48);
    }
    while (v29 < *(unsigned int *)(v28 + 40));
  }
  (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v22 + 112))(v22, 0);
  v32 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 40);
  if (v32)
  {
    v33 = *__error();
    v34 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, _DWORD *))(*(_QWORD *)v22 + 144))(__p, v22);
      if (v49 >= 0)
        v35 = __p;
      else
        v35 = (void **)__p[0];
      v36 = v22[17];
      v37 = v22[18];
      v38 = *a2;
      v39 = *a2 + 8;
      if (v38[31] < 0)
        v39 = (_QWORD *)*v39;
      v40 = (*(uint64_t (**)(char *))(*(_QWORD *)v38 + 16))(v38);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = v35;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v37;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v36;
      v57 = 2080;
      v58 = v39;
      v59 = 1024;
      v60 = v40;
      _os_log_impl(&dword_1B8270000, v34, OS_LOG_TYPE_DEFAULT, "Create new partitions %s(%u/%u) for new quantizer %s(%u)", buf, 0x28u);
      if (v49 < 0)
        operator delete(__p[0]);
    }
    *__error() = v33;
    v32 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 40);
  }
  if (v22[18] != v32)
  {
    v45 = __si_assert_copy_extra_268();
    v46 = v45;
    v47 = "";
    if (v45)
      v47 = v45;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2363, "newPartitions->nVectors() == vectors->count()", v47);
    free(v46);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    goto LABEL_60;
  }
  if (v10)
  {
    v41 = (unint64_t *)&v10->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v7)
  {
    v43 = (unint64_t *)&v7->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  std::__shared_weak_count *v8;
  __int128 *v9;
  char *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  _DWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  _DWORD *v18;
  NSObject *v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  void **v23;
  int v24;
  void **v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  const char *v47;
  char *v48;
  const char *v49;
  _QWORD *v50;
  _QWORD *v51;
  int v52;
  int v53;
  int v54;
  os_unfair_lock_s *v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *__p[2];
  char v61;
  void *v62[2];
  char v63;
  uint8_t buf[4];
  _QWORD *v65;
  __int16 v66;
  int v67;
  __int16 v68;
  _QWORD *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  void **v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  void **v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v6 = (os_unfair_lock_s *)(a1 + 152);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
  v7 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v10 = *(char **)(a1 + 80);
  v8 = *(std::__shared_weak_count **)(a1 + 88);
  v9 = (__int128 *)(a1 + 80);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(_DWORD **)(a1 + 96);
  v13 = *(std::__shared_weak_count **)(a1 + 104);
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
  v18 = (_DWORD *)*a3;
  if (v17 != *(_DWORD *)(*a3 + 68))
  {
    v45 = __si_assert_copy_extra_268();
    v46 = v45;
    v47 = "";
    if (v45)
      v47 = v45;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2381, "newQuantizer->count() == newPartitions->nPartitions()", v47);
LABEL_64:
    free(v46);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 48) + 40) != v18[18])
  {
    v48 = __si_assert_copy_extra_268();
    v46 = v48;
    v49 = "";
    if (v48)
      v49 = v48;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2382, "vectors->count() == newPartitions->nVectors()", v49);
    goto LABEL_64;
  }
  if (v10 && v14)
  {
    v56 = *__error();
    v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = v10 + 8;
      if (v10[31] < 0)
        v20 = (_QWORD *)*v20;
      v51 = v20;
      v21 = (*(uint64_t (**)(char *))(*(_QWORD *)v10 + 16))(v10);
      v22 = (_QWORD *)(*a2 + 8);
      v55 = v6;
      v54 = v21;
      if (*(char *)(*a2 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v50 = v22;
      v53 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
      v23 = v62;
      (*(void (**)(void **__return_ptr, _DWORD *))(*(_QWORD *)v14 + 144))(v62, v14);
      if (v63 < 0)
        v23 = (void **)v62[0];
      v24 = v14[18];
      v52 = v14[17];
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a3 + 144))(__p);
      v25 = __p;
      if (v61 < 0)
        v25 = (void **)__p[0];
      v26 = *(_DWORD *)(*a3 + 68);
      v27 = *(_DWORD *)(*a3 + 72);
      *(_DWORD *)buf = 136317442;
      v65 = v51;
      v66 = 1024;
      v67 = v54;
      v68 = 2080;
      v69 = v50;
      v70 = 1024;
      v71 = v53;
      v72 = 2080;
      v73 = v23;
      v74 = 1024;
      v75 = v24;
      v76 = 1024;
      v77 = v52;
      v78 = 2080;
      v79 = v25;
      v80 = 1024;
      v81 = v27;
      v82 = 1024;
      v83 = v26;
      _os_log_impl(&dword_1B8270000, v19, OS_LOG_TYPE_DEFAULT, "Replace quantizer %s(%u) -> %s(%u), partitions %s(%u/%u) -> %s(%u/%u)", buf, 0x4Eu);
      if (v61 < 0)
        operator delete(__p[0]);
      v6 = v55;
      if (v63 < 0)
        operator delete(v62[0]);
    }
    *__error() = v56;
    v18 = (_DWORD *)*a3;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v18 + 24))(v18))
    v28 = v14 == 0;
  else
    v28 = 1;
  if (!v28 && (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v14 + 24))(v14))
    (*(void (**)(_QWORD, _DWORD *))(*(_QWORD *)*a3 + 168))(*a3, v14);
  v29 = a2[1];
  *(_QWORD *)&v57 = *a2;
  *((_QWORD *)&v57 + 1) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = (std::__shared_weak_count *)a3[1];
  v58 = *a3;
  v59 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  os_unfair_lock_lock(v7);
  std::swap[abi:nn180100]<IVFVectorIndexTemplate<float,768>::QuantizerPartitions>(v9, &v57);
  os_unfair_lock_unlock(v7);
  v35 = v59;
  if (v59)
  {
    v36 = (unint64_t *)&v59->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  os_unfair_lock_unlock(v6);
  if (v13)
  {
    v41 = (unint64_t *)&v13->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v8)
  {
    v43 = (unint64_t *)&v8->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

_QWORD *IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::~IVFVectorIndexRoot_s(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *a1 = &off_1E6E341D0;
  v2 = (std::__shared_weak_count *)a1[13];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[11];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[11];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[9];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[7];
    if (!v11)
      return a1;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[7];
    if (!v11)
      return a1;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return a1;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::~IVFVectorIndexInstance(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E34078;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::~IVFVectorIndexRoot_s((_QWORD *)(a1 + 48));
  *(_QWORD *)a1 = off_1E6E30C80;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::~IVFVectorIndexInstance(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E34078;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::~IVFVectorIndexRoot_s((_QWORD *)(a1 + 48));
  *(_QWORD *)a1 = off_1E6E30C80;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCCB06A4);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::nVectors(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1 + 48);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::nPartitions(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1 + 48);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::allExist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  float v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  char *v14;
  char *v15;
  const char *v16;
  uint8_t buf[4];
  double v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a3)
  {
    v5 = a1 + 48;
    v6 = a3;
    if (a3 <= 0x3E8)
    {
      while (IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::exists(v5, a2))
      {
        a2 += 1024;
        if (!--v6)
          return a3;
      }
    }
    else
    {
      v7 = 0;
      v8 = a3 / 0xA;
      v9 = 1.0 / (float)a3;
      while (1)
      {
        v10 = v7 + 1;
        if (!(((int)v7 + 1) % v8))
        {
          v11 = *__error();
          v12 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            v18 = (float)((float)((float)v7 * 100.0) * v9);
            _os_log_impl(&dword_1B8270000, v12, OS_LOG_TYPE_DEFAULT, "allExist: %.0f%%", buf, 0xCu);
          }
          *__error() = v11;
        }
        if (!IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::exists(v5, a2))break;
        a2 += 1024;
        ++v7;
        if (a3 == v10)
          return a3;
      }
    }
    v14 = __si_assert_copy_extra_268();
    v15 = v14;
    v16 = "";
    if (v14)
      v16 = v14;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3151, "false", v16);
    free(v15);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a3;
}

BOOL IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::validAddress(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 32);
  v3 = *(unsigned int *)(v2 + 64);
  if ((int)v3 < 1)
  {
    v8 = -1;
  }
  else
  {
    v4 = 11;
    do
    {
      v5 = *(_QWORD **)(v2 + 8 * v4);
      if (v5 && (v6 = v5[1], v6 + 1 >= 2) && v6 <= a2 && (v7 = v5[2], v6 - v7 + v5[3] > a2))
        v8 = a2 - v6 + v7;
      else
        v8 = -1;
      if (v4 - 10 >= v3)
        break;
      ++v4;
    }
    while (v8 == -1);
  }
  return v8 != -1;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::shadow(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  os_unfair_lock_s *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v6 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v7 = *(std::__shared_weak_count **)(a1 + 136);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v11 = *(_QWORD *)(a1 + 144);
  v10 = *(std::__shared_weak_count **)(a1 + 152);
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v11 + 160))(v11, a2, a3);
  v14 = vi_onefixedsize_disk_allocator::shadow(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32), a2, a3);
  if (!v10)
    goto LABEL_11;
  v15 = (unint64_t *)&v10->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v7)
      return v14;
  }
  else
  {
LABEL_11:
    if (!v7)
      return v14;
  }
  v17 = (unint64_t *)&v7->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v14;
}

_DWORD *IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::bulkInsertForTest(_DWORD *result, char *a2, unsigned int *a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint8_t buf[4];
  double v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v8 = (uint64_t)(result + 12);
    v9 = a4;
    if (a4 <= 0x3E8)
    {
      do
      {
        v19 = *a5++;
        v18 = v19;
        v20 = *a3++;
        result = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert(v8, v18, a2, 0xFFFFFFFFLL, 0, 3.4028e38);
        *((_QWORD *)result + 128) = v20;
        a2 += 1024;
        --v9;
      }
      while (v9);
    }
    else
    {
      v10 = 0;
      v11 = a4 / 0xA;
      v12 = 1.0 / (float)a4;
      do
      {
        v15 = v10 + 1;
        if (!(((int)v10 + 1) % v11))
        {
          v16 = *__error();
          v17 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            v22 = (float)((float)((float)v10 * 100.0) * v12);
            _os_log_impl(&dword_1B8270000, v17, OS_LOG_TYPE_DEFAULT, "bulkInsertForTest: %.0f%%", buf, 0xCu);
          }
          *__error() = v16;
        }
        v13 = a5[v10];
        v14 = a3[v10];
        result = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert(v8, v13, a2, 0xFFFFFFFFLL, 0, 3.4028e38);
        *((_QWORD *)result + 128) = v14;
        a2 += 1024;
        v10 = v15;
      }
      while (v9 != v15);
    }
  }
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::insertVector(_DWORD *a1, int a2, unsigned int a3, void *a4, int a5, int a6)
{
  char *v6;
  char *v7;
  const char *v8;
  char *v9;
  const char *v10;

  if (a1[2] == a2
    && a6 <= 2
    && a1[3] == vector_dimension_vec_sizes_10743[a5]
    && vector_size_elem_sizes_10742[a6] == a1[4])
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFFLL, 0, 3.4028e38);
    v6 = __si_assert_copy_extra_268();
    v7 = v6;
    v8 = "";
    if (v6)
      v8 = v6;
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2636, "0", v8);
  }
  else
  {
    v9 = __si_assert_copy_extra_268();
    v7 = v9;
    v10 = "";
    if (v9)
      v10 = v9;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v10);
  }
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::insertForMerge(uint64_t a1, int a2, int a3, unsigned int a4, void *a5, int a6, int a7, uint64_t a8, float a9, unsigned int a10)
{
  char *v11;
  char *v12;
  const char *v13;

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a7 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a6]
    || vector_size_elem_sizes_10742[a7] != *(_DWORD *)(a1 + 16))
  {
    v11 = __si_assert_copy_extra_268();
    v12 = v11;
    v13 = "";
    if (v11)
      v13 = v11;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v13);
    free(v12);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::insertForCompact(a1 + 48, a4, a5, a8, a10, a9);
  return 1;
}

_DWORD *IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::insertForTest(_DWORD *a1, int a2, unsigned int a3, void *a4, int a5, int a6, unsigned int a7)
{
  uint64_t v7;
  _DWORD *result;
  char *v9;
  char *v10;
  const char *v11;

  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != a1[4])
  {
    v9 = __si_assert_copy_extra_268();
    v10 = v9;
    v11 = "";
    if (v9)
      v11 = v9;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v11);
    free(v10);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v7 = a7;
  result = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFFLL, 0, 3.4028e38);
  *((_QWORD *)result + 128) = v7;
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::train(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  char *v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  char *v30;
  char *v31;
  const char *v32;
  char *v33;
  char *v34;
  const char *v35;
  char *v36;
  const char *v37;
  uint64_t v38;
  void *__p;
  _QWORD *v40;
  char *v41;

  v3 = *(_QWORD **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  v4 = v2 - *(_QWORD *)a2;
  if (v2 == *(_QWORD *)a2)
  {
    v33 = __si_assert_copy_extra_268();
    v34 = v33;
    v35 = "";
    if (v33)
      v35 = v33;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3170, "vi.size() > 0", v35);
    goto LABEL_53;
  }
  if (*v3 != a1)
  {
    v36 = __si_assert_copy_extra_268();
    v34 = v36;
    v37 = "";
    if (v36)
      v37 = v36;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3171, "this == vi[0]", v37);
LABEL_53:
    free(v34);
    if (__valid_fs(-1))
      v38 = 2989;
    else
      v38 = 3072;
    *(_DWORD *)v38 = -559038737;
LABEL_57:
    abort();
  }
  v7 = (char *)operator new(8uLL);
  *(_QWORD *)v7 = a1 + 48;
  v8 = v7 + 8;
  v40 = v7 + 8;
  v41 = v7 + 8;
  __p = v7;
  if (v4 < 9)
    goto LABEL_39;
  v9 = 1;
  do
  {
    v11 = v3[v9];
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(v11 + 8)
      || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(v11 + 20)
      || *(_DWORD *)(a1 + 12) != *(_DWORD *)(v11 + 12)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(v11 + 16))
    {
      v30 = __si_assert_copy_extra_268();
      v31 = v30;
      v32 = "";
      if (v30)
        v32 = v30;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v32);
      free(v31);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v12 = v11 + 48;
    if (v8 < v41)
    {
      *(_QWORD *)v8 = v12;
      v10 = v8 + 8;
      goto LABEL_6;
    }
    v13 = (char *)__p;
    v14 = v8 - (_BYTE *)__p;
    v15 = (v8 - (_BYTE *)__p) >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      goto LABEL_57;
    v17 = v41 - (_BYTE *)__p;
    if ((v41 - (_BYTE *)__p) >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = operator new(8 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = v12;
    v10 = v20 + 1;
    if (v8 == v13)
    {
      __p = &v19[8 * v15];
      v41 = v21;
LABEL_33:
      operator delete(v8);
      goto LABEL_6;
    }
    v22 = v8 - 8 - v13;
    if (v22 > 0x167
      && &v19[v14 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] <= &v19[v14 - 8]
      && &v8[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] <= v8 - 8
      && (unint64_t)(v8 - v19 - v14) >= 0x20)
    {
      v25 = (v22 >> 3) + 1;
      v23 = &v8[-8 * (v25 & 0x3FFFFFFFFFFFFFFCLL)];
      v26 = &v19[8 * v15 - 16];
      v27 = v8 - 16;
      v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v20 -= v25 & 0x3FFFFFFFFFFFFFFCLL;
      if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_30;
    }
    else
    {
      v23 = v8;
    }
    do
    {
      v24 = *((_QWORD *)v23 - 1);
      v23 -= 8;
      *--v20 = v24;
    }
    while (v23 != v13);
    v13 = (char *)__p;
LABEL_30:
    __p = v20;
    v41 = v21;
    v8 = v13;
    if (v13)
      goto LABEL_33;
LABEL_6:
    v40 = v10;
    ++v9;
    v3 = *(_QWORD **)a2;
    v8 = (char *)v10;
  }
  while (v9 < (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v7 = (char *)__p;
LABEL_39:
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::train<vi_onefixedsize_disk_allocator>(*(_QWORD *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)&__p);
  if (v7)
    operator delete(v7);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::mergeUpdateSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t result;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  const char *v36;
  char *v37;
  const char *v38;
  _DWORD v39[4];
  void *__src;
  uint64_t v41;
  uint8_t buf[1024];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v37 = __si_assert_copy_extra_268();
    v35 = v37;
    v38 = "";
    if (v37)
      v38 = v37;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v38);
LABEL_38:
    free(v35);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v7 = *__error();
  v8 = _SILogForLogForCategory(16);
  v9 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v10;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v11;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v12;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&buf[22] = v13;
    _os_log_impl(&dword_1B8270000, v8, v9, "mergeUpdateSet(termIds) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v7;
  v14 = a2 + 48;
  v15 = operator new(0x10uLL);
  *(_QWORD *)&buf[8] = v15 + 2;
  *(_QWORD *)&buf[16] = v15 + 2;
  *v15 = a1 + 48;
  v15[1] = v14;
  *(_QWORD *)buf = v15;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::train<vi_onefixedsize_disk_allocator>(*(_QWORD *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)buf);
  operator delete(v15);
  v16 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(v14);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::beginMerge(a1 + 48);
  while (1)
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::next((uint64_t)v39, v16);
    if (!__src)
      break;
    v17 = v39[0];
    v18 = *(float *)&v39[1];
    v19 = v39[2];
    v20 = v41;
    memcpy(buf, __src, sizeof(buf));
    v22 = *(_QWORD *)(a4 + 8);
    v21 = *(_QWORD *)(a4 + 16);
    v23 = v22 + 1;
    if (v22 + 1 < v21)
    {
      v24 = *(_QWORD **)a4;
      goto LABEL_17;
    }
    if (v21)
    {
      if (v23 >= v21)
        goto LABEL_14;
    }
    else
    {
      *(_QWORD *)(a4 + 16) = 1024;
      v21 = 1024;
      if (v23 >= 0x400)
      {
        do
LABEL_14:
          v21 *= 2;
        while (v23 >= v21);
        *(_QWORD *)(a4 + 16) = v21;
      }
    }
    v24 = malloc_type_realloc(*(void **)a4, 24 * v21, 0x10200409F4E64B8uLL);
    *(_QWORD *)a4 = v24;
    v22 = *(_QWORD *)(a4 + 8);
    v23 = v22 + 1;
LABEL_17:
    v24[3 * v22 + 1] = v20;
    *(_QWORD *)(a4 + 8) = v23;
    if (*(_DWORD *)(a1 + 204) == -1)
    {
      v34 = __si_assert_copy_extra_268();
      v35 = v34;
      v36 = "";
      if (v34)
        v36 = v34;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2689, "mergeBeginVectorOffset < VECTOR_NOT_FOUND", v36);
      goto LABEL_38;
    }
    v25 = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert(a1 + 48, v19, buf, v17, 0, v18);
    v26 = *((_QWORD *)v25 + 128);
    if (!v26)
    {
      v26 = (*(_DWORD *)(a4 + 24) + 1);
      *(_DWORD *)(a4 + 24) = v26;
      *((_QWORD *)v25 + 128) = v26;
    }
    *(_DWORD *)(*(_QWORD *)a4 + 24 * v22) = v26;
  }
  result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::endMerge(a1 + 48);
  if (v16)
  {
    std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100](v16 + 32);
    v28 = *(std::__shared_weak_count **)(v16 + 24);
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = *(std::__shared_weak_count **)(v16 + 8);
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    return MEMORY[0x1BCCB06A4](v16, 0x10A0C40B50FE552);
  }
  return result;
}

int *IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::mergeUpdateSet(int *result, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  const char *v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char *v14;
  const char *v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (result[2] != *(_DWORD *)(a2 + 8)
    || (v3 = result, *((unsigned __int16 *)result + 10) != *(unsigned __int16 *)(a2 + 20))
    || result[3] != *(_DWORD *)(a2 + 12)
    || result[4] != *(_DWORD *)(a2 + 16))
  {
    v5 = __si_assert_copy_extra_268();
    v6 = v5;
    v7 = "";
    if (v5)
      v7 = v5;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v7);
LABEL_11:
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (dword_1EF19FCCC >= 5)
  {
    v8 = *__error();
    v9 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (*(uint64_t (**)(int *))(*(_QWORD *)v3 + 16))(v3);
      v11 = (*(uint64_t (**)(int *))(*(_QWORD *)v3 + 24))(v3);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      *(_DWORD *)buf = 67109888;
      v17 = v10;
      v18 = 1024;
      v19 = v11;
      v20 = 1024;
      v21 = v12;
      v22 = 1024;
      v23 = v13;
      _os_log_impl(&dword_1B8270000, v9, OS_LOG_TYPE_DEFAULT, "mergeUpdateSet(DocID) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    result = __error();
    *result = v8;
  }
  v4 = *(_QWORD *)(a2 + 80);
  if (*(_DWORD *)(v4 + 24))
  {
    IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v4, 0);
    IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v4, 0);
    IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v4, 0);
    v14 = __si_assert_copy_extra_268();
    v6 = v14;
    v15 = "";
    if (v14)
      v15 = v14;
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2447, "0", v15);
    goto LABEL_11;
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::mergeUpdateSetForTest(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t result;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  const char *v28;
  char *v29;
  const char *v30;
  uint8_t buf[8];
  _QWORD *v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v26 = __si_assert_copy_extra_268();
    v27 = v26;
    v28 = "";
    if (v26)
      v28 = v26;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v28);
LABEL_32:
    free(v27);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  v6 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v7;
    LOWORD(v32) = 1024;
    *(_DWORD *)((char *)&v32 + 2) = v8;
    HIWORD(v32) = 1024;
    LODWORD(v33) = v9;
    WORD2(v33) = 1024;
    *(_DWORD *)((char *)&v33 + 6) = v10;
    _os_log_impl(&dword_1B8270000, v5, v6, "mergeUpdateSetForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v4;
  v11 = operator new(0x10uLL);
  v32 = v11 + 2;
  *(_QWORD *)&v33 = v11 + 2;
  *v11 = a1 + 48;
  v11[1] = a2 + 48;
  *(_QWORD *)buf = v11;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::train<vi_onefixedsize_disk_allocator>(*(_QWORD *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)buf);
  operator delete(v11);
  v12 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::beginMerge(a1 + 48);
  v15 = 0;
  while (1)
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::next((uint64_t)buf, v12);
    if (!(_QWORD)v33)
      break;
    v16 = *(unsigned int *)(*((_QWORD *)&v33 + 1) + 8);
    v17 = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert(a1 + 48, v32, (void *)v33, *(unsigned int *)buf, 0, *(float *)&buf[4]);
    v18 = *((_QWORD *)v17 + 128);
    *((_QWORD *)v17 + 128) = v16;
    if (v18)
      ++v15;
  }
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::endMerge(a1 + 48);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result + v15 != v14 + v13)
  {
    v29 = __si_assert_copy_extra_268();
    v27 = v29;
    v30 = "";
    if (v29)
      v30 = v29;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3267, "nVectors() + dup == old + added", v30);
    goto LABEL_32;
  }
  if (v12)
  {
    std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100](v12 + 32);
    v20 = *(std::__shared_weak_count **)(v12 + 24);
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = *(std::__shared_weak_count **)(v12 + 8);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    return MEMORY[0x1BCCB06A4](v12, 0x10A0C40B50FE552);
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::mergeIndexForTest(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  float v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t result;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  const char *v27;
  char *v28;
  const char *v29;
  uint8_t buf[4];
  float v31;
  _BYTE v32[6];
  __int16 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v25 = __si_assert_copy_extra_268();
    v26 = v25;
    v27 = "";
    if (v25)
      v27 = v25;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v27);
LABEL_32:
    free(v26);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  v6 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v5, v6))
  {
    LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    v31 = v7;
    *(_WORD *)v32 = 1024;
    *(_DWORD *)&v32[2] = v8;
    v33 = 1024;
    LODWORD(v34) = v9;
    WORD2(v34) = 1024;
    *(_DWORD *)((char *)&v34 + 6) = v10;
    _os_log_impl(&dword_1B8270000, v5, v6, "mergeIndexForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v4;
  v11 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator(a2 + 48);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::beginMerge(a1 + 48);
  v14 = 0;
  while (1)
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next((uint64_t)buf, v11);
    if (!(_QWORD)v34)
      break;
    v15 = **((_QWORD **)&v34 + 1);
    v16 = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert(a1 + 48, *(unsigned int *)v32, (void *)v34, *(unsigned int *)buf, 0, v31);
    v17 = *((_QWORD *)v16 + 128);
    *((_QWORD *)v16 + 128) = v15;
    if (v17)
      ++v14;
  }
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::endMerge(a1 + 48);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result + v14 != v13 + v12)
  {
    v28 = __si_assert_copy_extra_268();
    v26 = v28;
    v29 = "";
    if (v28)
      v29 = v28;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3281, "nVectors() + dup == old + added", v29);
    goto LABEL_32;
  }
  if (v11)
  {
    std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100](v11 + 32);
    v19 = *(std::__shared_weak_count **)(v11 + 24);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = *(std::__shared_weak_count **)(v11 + 8);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    return MEMORY[0x1BCCB06A4](v11, 0x10A0C40B50FE552);
  }
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::dump(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  os_unfair_lock_s *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD v37[2];
  uint64_t (*v38)(uint64_t, uint64_t, BOOL *);
  void *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[3];
  __int128 v48;
  __int128 v49;
  char v50;
  __int128 v51;
  __int128 v52;

  v9 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v10 = *(std::__shared_weak_count **)(a1 + 136);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(_QWORD *)(a1 + 144);
  v13 = *(std::__shared_weak_count **)(a1 + 152);
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  os_unfair_lock_unlock(v9);
  v46 = 0u;
  memset(v47, 0, sizeof(v47));
  v45 = 0u;
  v43 = v14;
  v44 = v13;
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(_QWORD *)(a1 + 96);
  v20 = *(std::__shared_weak_count **)(a1 + 104);
  v42[0] = v19;
  v42[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v45, &v43, v42);
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v45, &v43, v42);
  }
  v24 = v44;
  if (v44)
  {
    v25 = (unint64_t *)&v44->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 0x40000000;
  v38 = ___ZNK22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke;
  v39 = &unk_1E6E342E0;
  v40 = a6;
  v41 = a4;
  v51 = 0u;
  v52 = 0u;
  v50 = 0;
  do
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next((uint64_t)&v48, (uint64_t)&v45);
    v51 = v48;
    v52 = v49;
    if (!(_QWORD)v49)
      break;
    v38((uint64_t)v37, (uint64_t)&v51, (BOOL *)&v50);
  }
  while (!v50);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v47);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (!*((_QWORD *)&v46 + 1))
    goto LABEL_30;
  v28 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (!*((_QWORD *)&v45 + 1))
      goto LABEL_36;
  }
  else
  {
LABEL_30:
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (!*((_QWORD *)&v45 + 1))
      goto LABEL_36;
  }
  v31 = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  if (!v13)
    goto LABEL_40;
LABEL_36:
  v33 = (unint64_t *)&v13->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!v10)
      return;
  }
  else
  {
LABEL_40:
    if (!v10)
      return;
  }
  v35 = (unint64_t *)&v10->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::flush(uint64_t a1, uint64_t a2)
{
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, a2);
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::compact(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  int v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  const char *v53;
  char *v54;
  const char *v55;
  int v56;
  __int128 v59;
  __int128 v60;
  _QWORD v61[2];
  uint64_t v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  __int128 v65;
  _OWORD v66[3];
  _QWORD v67[3];
  char v68;
  uint64_t v69[2];
  void *__p[3];
  __int128 v71;
  __int128 v72;
  char v73;
  __int128 v74;
  __int128 v75;
  uint8_t buf[8];
  uint64_t v77;
  __int128 v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v10 = *__error();
  v11 = _SILogForLogForCategory(16);
  v12 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v11, v12))
  {
    v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v13 = a4;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v56;
    LOWORD(v77) = 1024;
    *(_DWORD *)((char *)&v77 + 2) = v14;
    a4 = v13;
    HIWORD(v77) = 1024;
    LODWORD(v78) = v15;
    WORD2(v78) = 1024;
    *(_DWORD *)((char *)&v78 + 6) = v16;
    _os_log_impl(&dword_1B8270000, v11, v12, "compact %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v10;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v51 = __si_assert_copy_extra_268();
    v52 = v51;
    v53 = "";
    if (v51)
      v53 = v51;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v53);
LABEL_70:
    free(v52);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v59 = *a5;
  v60 = a5[1];
  v17 = a2 + 48;
  if (IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a2 + 48))
  {
    v54 = __si_assert_copy_extra_268();
    v52 = v54;
    v55 = "";
    if (v54)
      v55 = v54;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2566, "target->nVectors() == 0", v55);
    goto LABEL_70;
  }
  v18 = operator new(8uLL);
  __p[0] = v18;
  *v18 = a1 + 48;
  __p[1] = v18 + 1;
  __p[2] = v18 + 1;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::train<vi_onefixedsize_disk_allocator>(*(_QWORD *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)__p);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v20 = *(_QWORD *)(a1 + 128);
  v19 = *(std::__shared_weak_count **)(a1 + 136);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v23 = *(_QWORD *)(a1 + 144);
  v24 = *(std::__shared_weak_count **)(a1 + 152);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  v69[0] = v20;
  v69[1] = (uint64_t)v19;
  if (v19)
  {
    v27 = (unint64_t *)&v19->__shared_owners_;
    v28 = a3;
    do
      v29 = __ldxr(v27);
    while (__stxr(v29 + 1, v27));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(v17, v69);
    do
      v30 = __ldaxr(v27);
    while (__stlxr(v30 - 1, v27));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(v17, v69);
    v28 = a3;
  }
  v67[0] = 0;
  v67[1] = v67;
  v67[2] = 0x2000000000;
  v68 = 1;
  v65 = 0u;
  memset(v66, 0, sizeof(v66));
  v64 = 0u;
  v62 = v23;
  v63 = v24;
  if (v24)
  {
    v31 = (unint64_t *)&v24->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = *(_QWORD *)(a1 + 96);
  v34 = *(std::__shared_weak_count **)(a1 + 104);
  v61[0] = v33;
  v61[1] = v34;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v64, &v62, v61);
    do
      v37 = __ldaxr(v35);
    while (__stlxr(v37 - 1, v35));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v64, &v62, v61);
  }
  v38 = v63;
  if (v63)
  {
    v39 = (unint64_t *)&v63->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v77 = 0x40000000;
  *(_QWORD *)&v78 = ___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE7compactIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_P12uint32_map_tP11TermIdStore18CICompactCallbacksPVi_block_invoke;
  *((_QWORD *)&v78 + 1) = &unk_1E6E34308;
  v79 = v67;
  v80 = v28;
  v81 = a4;
  v82 = v17;
  v83 = a6;
  v84 = v59;
  v85 = v60;
  v74 = 0u;
  v75 = 0u;
  v73 = 0;
  do
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next((uint64_t)&v71, (uint64_t)&v64);
    v74 = v71;
    v75 = v72;
    if (!(_QWORD)v72)
      break;
    ((void (*)(uint8_t *, __int128 *, char *))v78)(buf, &v74, &v73);
  }
  while (!v73);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v66);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
  if (*((_QWORD *)&v64 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  _Block_object_dispose(v67, 8);
  if (v24)
  {
    v47 = (unint64_t *)&v24->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v19)
  {
    v49 = (unint64_t *)&v19->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p[0])
    operator delete(__p[0]);
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::compactForTest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  NSObject *v7;
  os_log_type_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  const char *v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v13 = __si_assert_copy_extra_268();
    v14 = v13;
    v15 = "";
    if (v13)
      v15 = v13;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v6 = *__error();
  v7 = _SILogForLogForCategory(16);
  v8 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    v22 = 1024;
    v23 = v12;
    _os_log_impl(&dword_1B8270000, v7, v8, "compactForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v6;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::compactForTest<vi_onefixedsize_disk_allocator>(a1 + 48, a2 + 48, a3);
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::subvert(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  const char *v28;

  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v26 = __si_assert_copy_extra_268();
    v27 = v26;
    v28 = "";
    if (v26)
      v28 = v26;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v28);
    free(v27);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = *(_QWORD *)(a1 + 144);
  v7 = *(std::__shared_weak_count **)(a1 + 152);
  if (v7)
  {
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 160));
  v13 = *(std::__shared_weak_count **)(a2 + 136);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v17 = *(_QWORD *)(a2 + 144);
  v16 = *(std::__shared_weak_count **)(a2 + 152);
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 160));
  if (v13)
  {
    v20 = (unint64_t *)&v13->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 168))(v8, v17);
  vi_onefixedsize_disk_allocator::subvert(*(_QWORD *)(*(_QWORD *)(a2 + 96) + 32), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 32));
  if (!v16)
    goto LABEL_31;
  v22 = (unint64_t *)&v16->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!v7)
      return;
  }
  else
  {
LABEL_31:
    if (!v7)
      return;
  }
  v24 = (unint64_t *)&v7->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

BOOL IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::unlink(uint64_t a1)
{
  os_unfair_lock_s *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  _BOOL8 v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v23;
  _QWORD *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a1 + 144);
  v6 = *(std::__shared_weak_count **)(a1 + 152);
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  os_unfair_lock_unlock(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  v10 = *(_QWORD *)(a1 + 96);
  v11 = *__error();
  v12 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = (_QWORD *)(v10 + 56);
    if (*(char *)(v10 + 79) < 0)
      v13 = (_QWORD *)*v13;
    v14 = *(_DWORD *)(v10 + 40);
    v15 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v10 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24), 0x410uLL)+ 1032);
    v16 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v10 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(v10 + 32) + 16) * (*(_DWORD *)(v10 + 40) - 1), 0x410uLL)+ 1032);
    v23 = 136315906;
    v24 = v13;
    v25 = 1024;
    v26 = v14;
    v27 = 1024;
    v28 = v15;
    v29 = 1024;
    v30 = v16;
    _os_log_impl(&dword_1B8270000, v12, OS_LOG_TYPE_DEFAULT, "unlink VectorStore %s(%u)[%u,%u]", (uint8_t *)&v23, 0x1Eu);
  }
  *__error() = v11;
  v17 = vi_onefixedsize_disk_allocator::unlinkStorage(*(_QWORD *)(v10 + 32));
  if (v6)
  {
    v18 = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v17;
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::truncate(uint64_t a1)
{
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  os_unfair_lock_s *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint8_t v16[16];

  if (*(_BYTE *)(a1 + 208))
  {
    v1 = *__error();
    v2 = _SILogForLogForCategory(16);
    v3 = dword_1EF19FCCC < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1EF19FCCC < 3)))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1B8270000, v2, v3, "*warn* call truncate on readOnly index.", v16, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, 0);
    IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::truncate(*(_QWORD *)(a1 + 96));
    v5 = (os_unfair_lock_s *)(a1 + 160);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
    v6 = *(std::__shared_weak_count **)(a1 + 136);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v10 = *(_QWORD *)(a1 + 144);
    v9 = *(std::__shared_weak_count **)(a1 + 152);
    if (v9)
    {
      v11 = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      os_unfair_lock_unlock(v5);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      os_unfair_lock_unlock(v5);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
    }
    if (v6)
    {
      v14 = (unint64_t *)&v6->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::makeReadOnly(uint64_t a1)
{
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v5;
  int v6;
  NSObject *v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  int *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  _QWORD *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 208))
  {
    v1 = *__error();
    v2 = _SILogForLogForCategory(16);
    v3 = dword_1EF19FCCC < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1EF19FCCC < 3)))
    {
      LOWORD(v29) = 0;
      _os_log_impl(&dword_1B8270000, v2, v3, "*warn* call makeReadOnly on readOnly index.", (uint8_t *)&v29, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, 0);
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *__error();
    v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = (_QWORD *)(v5 + 56);
      if (*(char *)(v5 + 79) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_DWORD *)(v5 + 40);
      v10 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v5 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 24), 0x410uLL)+ 1032);
      v11 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v5 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(v5 + 32) + 16) * (*(_DWORD *)(v5 + 40) - 1), 0x410uLL)+ 1032);
      v29 = 136315906;
      v30 = v8;
      v31 = 1024;
      v32 = v9;
      v33 = 1024;
      v34 = v10;
      v35 = 1024;
      v36 = v11;
      _os_log_impl(&dword_1B8270000, v7, OS_LOG_TYPE_DEFAULT, "makeReadOnly VectorStore %s(%u)[%u,%u]", (uint8_t *)&v29, 0x1Eu);
    }
    *__error() = v6;
    IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::truncate(v5);
    v12 = *(_QWORD *)(v5 + 32);
    fd_make_readonly(*(_QWORD *)(v12 + 40));
    v13 = *(_QWORD *)(v12 + 40);
    if (v13)
    {
      do
      {
        v14 = fchmodat(*(_DWORD *)(v13 + 44), *(const char **)(v13 + 72), 0x100u, 2048);
        v15 = g_prot_error_callback;
        if (v14 != -1 || g_prot_error_callback == 0)
          break;
        v17 = *(unsigned int *)(v13 + 40);
        v18 = __error();
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v15 + 16))(v15, v17, *v18, 19) & 1) != 0);
    }
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
    v19 = *(std::__shared_weak_count **)(a1 + 136);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    v23 = *(_QWORD *)(a1 + 144);
    v22 = *(std::__shared_weak_count **)(a1 + 152);
    if (v22)
    {
      v24 = (unint64_t *)&v22->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 120))(v23);
      *(_BYTE *)(a1 + 208) = 1;
      do
        v26 = __ldaxr(v24);
      while (__stlxr(v26 - 1, v24));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 120))(v23);
      *(_BYTE *)(a1 + 208) = 1;
    }
    if (v19)
    {
      v27 = (unint64_t *)&v19->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::makePurgeable(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  _QWORD *v5;
  int v6;
  int v7;
  int v8;
  os_unfair_lock_s *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 96);
  v3 = *__error();
  v4 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (_QWORD *)(v2 + 56);
    if (*(char *)(v2 + 79) < 0)
      v5 = (_QWORD *)*v5;
    v6 = *(_DWORD *)(v2 + 40);
    v7 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v2 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v2 + 32) + 24), 0x410uLL)
                   + 1032);
    v8 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v2 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v2 + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(v2 + 32) + 16) * (*(_DWORD *)(v2 + 40) - 1), 0x410uLL)+ 1032);
    v20 = 136315906;
    v21 = v5;
    v22 = 1024;
    v23 = v6;
    v24 = 1024;
    v25 = v7;
    v26 = 1024;
    v27 = v8;
    _os_log_impl(&dword_1B8270000, v4, OS_LOG_TYPE_DEFAULT, "makePurgeable VectorStore %s(%u)[%u,%u]", (uint8_t *)&v20, 0x1Eu);
  }
  *__error() = v3;
  fd_mark_purgable(*(_DWORD **)(*(_QWORD *)(v2 + 32) + 40));
  v9 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v10 = *(std::__shared_weak_count **)(a1 + 136);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(_QWORD *)(a1 + 144);
  v13 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v13)
  {
    os_unfair_lock_unlock(v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 128))(v14);
    if (!v10)
      return;
    goto LABEL_18;
  }
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  os_unfair_lock_unlock(v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 128))(v14);
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v10)
  {
LABEL_18:
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::rename(uint64_t a1, const char *a2)
{
  int v4;
  NSObject *v5;
  size_t v6;
  std::string::size_type v7;
  std::string *p_buf;
  uint64_t v9;
  uint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  _QWORD *v23;
  int v24;
  int v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::string::value_type __s[23];
  char v32;
  std::string v33;
  std::string buf;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    _os_log_impl(&dword_1B8270000, v5, OS_LOG_TYPE_DEFAULT, "rename: %s", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v4;
  v6 = strlen(a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_buf = (std::string *)operator new(v9 + 1);
    buf.__r_.__value_.__l.__size_ = v7;
    buf.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_10;
  }
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = v6;
  p_buf = &buf;
  if (v6)
LABEL_10:
    memcpy(p_buf, a2, v7);
  p_buf->__r_.__value_.__s.__data_[v7] = 0;
  v32 = 11;
  strcpy(__s, ".partitions");
  memset(&v33, 0, sizeof(v33));
  v11 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v33, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  else
    v33 = buf;
  std::string::append(&v33, __s, 0xBuLL);
  if (v32 < 0)
  {
    operator delete(*(void **)__s);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_16;
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
LABEL_16:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v12 = *(std::__shared_weak_count **)(a1 + 136);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v16 = *(_QWORD *)(a1 + 144);
  v15 = *(std::__shared_weak_count **)(a1 + 152);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v33;
  else
    v19 = (std::string *)v33.__r_.__value_.__r.__words[0];
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 152))(v16, v19);
  v20 = *(_QWORD *)(a1 + 96);
  v21 = *__error();
  v22 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v23 = (_QWORD *)(v20 + 56);
    if (*(char *)(v20 + 79) < 0)
      v23 = (_QWORD *)*v23;
    v24 = *(_DWORD *)(v20 + 40);
    v25 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v20 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v20 + 32) + 24), 0x410uLL)+ 1032);
    v26 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v20 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v20 + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(v20 + 32) + 16) * (*(_DWORD *)(v20 + 40) - 1), 0x410uLL)+ 1032);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)a2;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
    v35 = v24;
    v36 = 1024;
    v37 = v25;
    v38 = 1024;
    v39 = v26;
    _os_log_impl(&dword_1B8270000, v22, OS_LOG_TYPE_DEFAULT, "rename VectorStore %s -> %s(%u)[%u,%u]", (uint8_t *)&buf, 0x28u);
  }
  *__error() = v21;
  MEMORY[0x1BCCB03B0](v20 + 56, a2);
  fd_rename(*(_QWORD *)(*(_QWORD *)(v20 + 32) + 40), a2);
  if (v15)
  {
    v27 = (unint64_t *)&v15->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (!v12)
    goto LABEL_38;
  v29 = (unint64_t *)&v12->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (v30)
  {
LABEL_38:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
LABEL_39:
    operator delete(v33.__r_.__value_.__l.__data_);
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::storeUpdateSet()
{
  char *v0;
  char *v1;
  const char *v2;

  v0 = __si_assert_copy_extra_268();
  v1 = v0;
  v2 = "";
  if (v0)
    v2 = v0;
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2998, "false", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::restoreUpdateSet()
{
  char *v0;
  char *v1;
  const char *v2;

  v0 = __si_assert_copy_extra_268();
  v1 = v0;
  v2 = "";
  if (v0)
    v2 = v0;
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3003, "false", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::aNN(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, int a7, char a8, float a9, uint64_t a10)
{
  uint64_t v13;
  int v14;
  _QWORD *v15;
  char *v17;
  char *v18;
  const char *v19;
  _QWORD v20[5];

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(a1 + 16))
  {
    v17 = __si_assert_copy_extra_268();
    v18 = v17;
    v19 = "";
    if (v17)
      v19 = v17;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v19);
    free(v18);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v13 = a1 + 48;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 0x40000000;
  v20[2] = ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIfLi256EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke;
  v20[3] = &unk_1E6E34330;
  v20[4] = a10;
  if ((a7 - 10001) >= 0xFFFFD8F0)
    v14 = a7;
  else
    v14 = 10000;
  v15 = (_QWORD *)operator new();
  *(_DWORD *)v15 = v14;
  v15[2] = 0;
  v15[3] = 0;
  v15[1] = 0;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNN(v13, a4, a8, v15, 0, a9);
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNProcessResult((uint64_t)v15, (uint64_t)v20);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::aNNForTest(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, int a7, char a8, float a9, uint64_t a10, unsigned int a11)
{
  uint64_t v14;
  int v15;
  _QWORD *v16;
  char *v18;
  char *v19;
  const char *v20;

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(a1 + 16))
  {
    v18 = __si_assert_copy_extra_268();
    v19 = v18;
    v20 = "";
    if (v18)
      v20 = v18;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v20);
    free(v19);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v14 = a1 + 48;
  if ((a7 - 10001) >= 0xFFFFD8F0)
    v15 = a7;
  else
    v15 = 10000;
  v16 = (_QWORD *)operator new();
  *(_DWORD *)v16 = v15;
  v16[2] = 0;
  v16[3] = 0;
  v16[1] = 0;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNN(v14, a4, a8, v16, a11, a9);
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNForTestProcessResult((uint64_t)v16, a10);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::createCandidateQueue(uint64_t a1, int a2)
{
  int v2;
  uint64_t result;

  if ((a2 - 10001) >= 0xFFFFD8F0)
    v2 = a2;
  else
    v2 = 10000;
  result = operator new();
  *(_DWORD *)result = v2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::aNN(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, char a7, _QWORD *a8, float a9)
{
  char *v9;
  char *v10;
  const char *v11;

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(a1 + 16))
  {
    v9 = __si_assert_copy_extra_268();
    v10 = v9;
    v11 = "";
    if (v9)
      v11 = v9;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v11);
    free(v10);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNN(a1 + 48, a4, a7, a8, 0, a9);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::aNNProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[5];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIfLi256EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke;
  v4[3] = &unk_1E6E34390;
  v4[4] = a3;
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNProcessResult(a2, (uint64_t)v4);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::aNNForTestProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNForTestProcessResult(a2, a3);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::aNNForDebugProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  __int128 *v15;
  BOOL v16;
  int v17;
  __int128 *v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  int v23;
  NSObject *v24;
  void **v25;
  __int128 *v26;
  char *v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  void **v31;
  void *v32;
  uint64_t v33;
  int v35;
  __int128 *v36;
  CFIndex AppIntegerValue;
  __int128 *v38;
  __int128 *v39;
  uint64_t v40;
  uint8_t v41[4];
  void **v42;
  void *__p[2];
  uint64_t v44;
  uint64_t v45;
  __int128 buf;
  uint64_t v47;
  _QWORD v48[8];
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v5 = *__error();
  v6 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4;
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_1B8270000, v6, OS_LOG_TYPE_DEFAULT, "search return %zu results", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v5;
  LOBYTE(buf) = 0;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("IVFANNLogQueryResult"), CFSTR("com.apple.Spotlight"), (Boolean *)&buf);
  v35 = buf;
  v61 = 0u;
  v51 = 0;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v50 = 0u;
  v49 = 0u;
  memset(v48, 0, sizeof(v48));
  v8 = MEMORY[0x1E0DE4FD0] + 104;
  v52 = MEMORY[0x1E0DE4FD0] + 104;
  v9 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v10 = MEMORY[0x1E0DE4FD0] + 64;
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v47 = MEMORY[0x1E0DE4FD0] + 64;
  *(_QWORD *)&buf = v11;
  *(_QWORD *)((char *)&buf + *(_QWORD *)(v11 - 24)) = v12;
  *((_QWORD *)&buf + 1) = 0;
  v13 = (std::ios_base *)((char *)&buf + *(_QWORD *)(buf - 24));
  std::ios_base::init(v13, v48);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v14 = v9[5];
  v47 = v9[4];
  *(_QWORD *)((char *)&v48[-1] + *(_QWORD *)(v47 - 24)) = v14;
  *(_QWORD *)&buf = v9[1];
  *(_QWORD *)((char *)&buf + *(_QWORD *)(buf - 24)) = v9[6];
  v52 = v8;
  *(_QWORD *)&buf = MEMORY[0x1E0DE4FD0] + 24;
  v47 = v10;
  std::streambuf::basic_streambuf();
  v48[0] = MEMORY[0x1E0DE4FB8] + 16;
  v49 = 0u;
  v50 = 0u;
  LODWORD(v51) = 24;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::allItems(&v38, *(_BYTE **)(a2 + 8), *(_BYTE **)(a2 + 16));
  v15 = v39;
  v36 = v38;
  if (v38 != v39)
  {
    if (AppIntegerValue)
      v16 = v35 == 0;
    else
      v16 = 1;
    if (v16)
    {
      v26 = v38;
      do
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD, float))(a3 + 16))(a3, *(unsigned int *)v26, *((unsigned int *)v26 + 2), *((float *)v26 + 3));
        ++v26;
      }
      while (v26 != v15);
    }
    else
    {
      v17 = 0;
      v18 = v38;
      do
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD, float))(a3 + 16))(a3, *(unsigned int *)v18, *((unsigned int *)v18 + 2), *((float *)v18 + 3));
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)",", 1);
        v20 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)";", 1);
        v21 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
        if ((v21[32] & 5) == 0
          && ((*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v21 + 5)
                                                                                            + 32))(__p, *((_QWORD *)v21 + 5), 0, 1, 16), v45 > 1000)|| (++v17, HIDWORD(v22) = -1030792151 * v17 + 85899344, LODWORD(v22) = HIDWORD(v22), (v22 >> 1) < 0x51EB851))
        {
          v23 = *__error();
          v24 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            v25 = __p;
            if (v44 < 0)
              v25 = (void **)__p[0];
            *(_DWORD *)v41 = 136315138;
            v42 = v25;
            _os_log_impl(&dword_1B8270000, v24, OS_LOG_TYPE_DEFAULT, "%s", v41, 0xCu);
            if (SHIBYTE(v44) < 0)
              operator delete(__p[0]);
          }
          *__error() = v23;
          __p[0] = 0;
          __p[1] = 0;
          v44 = 0;
          std::stringbuf::str();
          if (SHIBYTE(v44) < 0)
            operator delete(__p[0]);
        }
        ++v18;
      }
      while (v18 != v15);
    }
  }
  v27 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
  if ((v27[32] & 5) != 0)
  {
    v28 = a2;
  }
  else
  {
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(__p, *((_QWORD *)v27 + 5), 0, 1, 16);
    v28 = a2;
    if (v45 > 0)
    {
      v29 = *__error();
      v30 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        v31 = v44 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)v41 = 136315138;
        v42 = v31;
        _os_log_impl(&dword_1B8270000, v30, OS_LOG_TYPE_DEFAULT, "%s", v41, 0xCu);
        if (SHIBYTE(v44) < 0)
          operator delete(__p[0]);
      }
      *__error() = v29;
    }
  }
  if (v28)
  {
    v32 = *(void **)(v28 + 8);
    if (v32)
    {
      *(_QWORD *)(v28 + 16) = v32;
      operator delete(v32);
    }
    MEMORY[0x1BCCB06A4](v28, 0x1020C403EC25235);
  }
  if (v36)
    operator delete(v36);
  *(_QWORD *)&buf = *MEMORY[0x1E0DE4F50];
  v33 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&buf + *(_QWORD *)(buf - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v47 = v33;
  v48[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v50) < 0)
    operator delete((void *)v49);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BCCB0650](&v52);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::storageSize(uint64_t a1)
{
  os_unfair_lock_s *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v2 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a1 + 144);
  v6 = *(std::__shared_weak_count **)(a1 + 152);
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  os_unfair_lock_unlock(v2);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 48);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 184))(v7);
  if (!v6)
    goto LABEL_11;
  v12 = (unint64_t *)&v6->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v3)
      return v11 + v10;
  }
  else
  {
LABEL_11:
    if (!v3)
      return v11 + v10;
  }
  v14 = (unint64_t *)&v3->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v11 + v10;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::setVectorStore(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 192) = a2;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::getDataForOffset(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v7;
  int v8;
  NSObject *v9;
  int *v10;
  int v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1) <= a2)
  {
    v8 = *__error();
    v9 = _SILogForLogForCategory(2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
      v12 = 136315906;
      v13 = "getDataForOffset";
      v14 = 1024;
      v15 = 3455;
      v16 = 1024;
      v17 = a2;
      v18 = 1024;
      v19 = v11;
      _os_log_error_impl(&dword_1B8270000, v9, OS_LOG_TYPE_ERROR, "%s:%d: offset out of range: %u >= %u", (uint8_t *)&v12, 0x1Eu);
    }
    v10 = __error();
    v7 = 0;
    result = 0;
    *v10 = v8;
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(a1[6] + 32))(a1 + 6, a2);
    v7 = 1024;
  }
  *a3 = v7;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::updateVectorStorageOffsets(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t i;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  int v12;
  unint64_t j;
  unint64_t v14;

  v2 = a2;
  v4 = a1 + 48;
  if (a2)
  {
    for (i = 0; ; ++i)
    {
      result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v4);
      if (i >= result)
        break;
      v7 = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 16) * i, 0x410uLL);
      if (!*(_BYTE *)(v2 + 184))
      {
        v8 = *(unsigned int *)(v7 + 1032);
        v9 = *(_DWORD *)(v2 + 24);
        if (!v9 || !((*(_QWORD *)(v2 + 16) ^ v8) >> (-4 * v9)))
        {
          v10 = (60 - 4 * v9) & 0xFC;
          v11 = *(_QWORD *)(v2 + 56 + 8 * ((v8 >> v10) & 0xF));
          if ((v11 & 1) != 0)
          {
            v12 = v9 + 2;
            do
            {
              v10 = (64 - 4 * v12) & 0xFC;
              v11 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v8 >> v10) & 0xF));
              ++v12;
            }
            while ((v11 & 1) != 0);
          }
          if (v11)
          {
            if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v8, ~(-1 << v10)))
            {
              data_map_set_offset_for_id(*(_QWORD *)(a1 + 192), v8, ((unint64_t)*(unsigned int *)(a1 + 88) << 36) | (16 * i) | (4 * (*(_DWORD *)(a1 + 176) & 3)) | *(_DWORD *)(a1 + 172) & 3, *(unsigned __int16 *)(a1 + 168) | ((unint64_t)*(unsigned int *)(a1 + 180) << 32), *(_DWORD *)(a1 + 184));
            }
          }
        }
      }
    }
  }
  else
  {
    for (j = 0; ; ++j)
    {
      result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v4);
      if (j >= result)
        break;
      v14 = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 16) * j, 0x410uLL);
      data_map_set_offset_for_id(*(_QWORD *)(a1 + 192), *(unsigned int *)(v14 + 1032), v2 | ((unint64_t)*(unsigned int *)(a1 + 88) << 36) | (4 * (*(_DWORD *)(a1 + 176) & 3)) | *(_DWORD *)(a1 + 172) & 3, *(unsigned __int16 *)(a1 + 168) | ((unint64_t)*(unsigned int *)(a1 + 180) << 32), *(_DWORD *)(a1 + 184));
      v2 += 16;
    }
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::status(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  _QWORD v38[2];
  uint64_t v39;
  _OWORD v40[4];
  void *__p[2];
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v53 = 0u;
  v43 = 0;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v42 = 0u;
  *(_OWORD *)__p = 0u;
  v4 = MEMORY[0x1E0DE4FD0];
  memset(v40, 0, sizeof(v40));
  v5 = MEMORY[0x1E0DE4FD0] + 104;
  v44 = MEMORY[0x1E0DE4FD0] + 104;
  v6 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v7 = MEMORY[0x1E0DE4FD0] + 64;
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v39 = MEMORY[0x1E0DE4FD0] + 64;
  v38[0] = v8;
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v8 - 24)) = v9;
  v38[1] = 0;
  v10 = (std::ios_base *)((char *)v38 + *(_QWORD *)(v38[0] - 24));
  std::ios_base::init(v10, v40);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v11 = v6[5];
  v39 = v6[4];
  *(uint64_t *)((char *)&v39 + *(_QWORD *)(v39 - 24)) = v11;
  v38[0] = v6[1];
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = v6[6];
  v44 = v5;
  v38[0] = v4 + 24;
  v39 = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v40[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v42 = 0u;
  LODWORD(v43) = 24;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = a2;
  else
    v14 = *(_QWORD *)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, v14, v15);
  v17 = *(char *)(a1 + 47);
  if (v17 >= 0)
    v18 = a1 + 24;
  else
    v18 = *(_QWORD *)(a1 + 24);
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a1 + 47);
  else
    v19 = *(_QWORD *)(a1 + 32);
  v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, v18, v19);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)"(", 1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v21 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"/", 1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)"v", 1);
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::getPartitions(a1 + 48, &v36);
  if (v36)
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::getPartitions(a1 + 48, &v34);
    v23 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)")", 1);
    v24 = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v27 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)")", 1);
  }
  v28 = v37;
  if (v37)
  {
    v29 = (unint64_t *)&v37->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, (uint64_t)"[", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, (uint64_t)",", 1);
  v31 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"] indexId: ", 11);
  std::ostream::operator<<();
  std::stringbuf::str();
  v38[0] = *v6;
  v32 = v6[9];
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = v6[8];
  v39 = v32;
  *(_QWORD *)&v40[0] = v12 + 16;
  if (SBYTE7(v42) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BCCB0650](&v44);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_disk_allocator,vi_disk_postings>::IVFVectorIndexInstance<float,256>::diagnoseDump(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  uint64_t v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  uint64_t v44;
  std::locale *v45;
  uint64_t v46;
  const std::locale::facet *v47;
  uint64_t v48;
  _QWORD *v49;
  const char *v50;
  uint64_t v51;
  const std::locale::facet *v52;
  unint64_t v53;
  std::locale::id *v54;
  const std::locale::facet *v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  void *locale;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  std::locale::id *v66;
  _QWORD *v67;
  _QWORD *v68;
  const std::locale::facet *v69;
  const std::locale::facet *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::locale v82;
  std::locale v83;
  uint64_t v84;
  unsigned __int8 v85;

  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, a2, v8);
  v10 = *(char *)(a1 + 47);
  if (v10 >= 0)
    v11 = a1 + 24;
  else
    v11 = *(_QWORD *)(a1 + 24);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 47);
  else
    v12 = *(_QWORD *)(a1 + 32);
  v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" vectors ", 9);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" partitions.", 12);
  if (*(_BYTE *)(a1 + 208))
    v17 = "(readOnly)";
  else
    v17 = "(readWrite)";
  if (*(_BYTE *)(a1 + 208))
    v18 = 10;
  else
    v18 = 11;
  v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
  v20 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v21 = *(_QWORD *)(a1 + 128);
  v22 = *(std::__shared_weak_count **)(a1 + 136);
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  v25 = *(std::__shared_weak_count **)(a1 + 152);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if (v22)
  {
    v28 = (unint64_t *)&v22->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (!v25)
    goto LABEL_29;
  v30 = (unint64_t *)&v25->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    v32 = a1 + 48;
    if (!v22)
      goto LABEL_35;
  }
  else
  {
LABEL_29:
    v32 = a1 + 48;
    if (!v22)
      goto LABEL_35;
  }
  v33 = (unint64_t *)&v22->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_35:
  if (v21)
  {
    v35 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Quantizer: ", 11);
    v36 = *(char *)(v21 + 31);
    if (v36 >= 0)
      v37 = v21 + 8;
    else
      v37 = *(_QWORD *)(v21 + 8);
    if (v36 >= 0)
      v38 = *(unsigned __int8 *)(v21 + 31);
    else
      v38 = *(_QWORD *)(v21 + 16);
    v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, v37, v38);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)"(", 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    v40 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)") ", 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    v41 = (_QWORD *)std::ostream::operator<<();
    v42 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, (uint64_t)" centroids.", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(*v42 - 24)));
    v43 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
    std::locale::~locale(&v83);
    std::ostream::put();
    std::ostream::flush();
  }
  v80 = 0;
  v81 = 0;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::getPartitions(v32, &v80);
  v44 = v80;
  if (!v80)
    goto LABEL_51;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Partition: ", 11);
  (*(void (**)(std::locale *__return_ptr, uint64_t))(*(_QWORD *)v44 + 144))(&v83, v44);
  v45 = (v85 & 0x80u) == 0 ? &v83 : (std::locale *)v83.__locale_;
  v46 = (v85 & 0x80u) == 0 ? v85 : v84;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v45, v46);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
  v47 = std::locale::use_facet(&v82, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
  std::locale::~locale(&v82);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v85 < 0)
  {
    operator delete(v83.__locale_);
    if (!a4)
      goto LABEL_84;
  }
  else
  {
LABEL_51:
    if (!a4)
      goto LABEL_84;
  }
  v78 = v44;
  v48 = *(_QWORD *)(a1 + 96);
  v49 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"offset,vid", 10);
  v79 = a4;
  if (a4 <= 1)
    v50 = ",";
  else
    v50 = ",vector";
  if (a4 <= 1)
    v51 = 1;
  else
    v51 = 7;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
  v52 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  if (*(_DWORD *)(v48 + 40))
  {
    if (a4 <= 1)
    {
      v65 = 0;
      v66 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        _windowsResolvePtr(*(_QWORD *)(v48 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v48 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v48 + 32) + 16) * v65, 0x410uLL);
        v67 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v67, (uint64_t)",", 1);
        v68 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v68, (uint64_t)",", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
        v69 = std::locale::use_facet(&v83, v66);
        ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
        std::locale::~locale(&v83);
        std::ostream::put();
        std::ostream::flush();
        ++v65;
      }
      while (v65 < *(unsigned int *)(v48 + 40));
    }
    else
    {
      v53 = 0;
      v54 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        v56 = _windowsResolvePtr(*(_QWORD *)(v48 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v48 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v48 + 32) + 16) * v53, 0x410uLL);
        v57 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)",", 1);
        v58 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)",", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"{length = ", 10);
        v59 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)", bytes = 0x", 12);
        data2hexString((const unsigned __int8 *)&v83, v56, 16);
        if ((v85 & 0x80u) == 0)
          locale = &v83;
        else
          locale = v83.__locale_;
        if ((v85 & 0x80u) == 0)
          v61 = v85;
        else
          v61 = v84;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)locale, v61);
        if ((char)v85 < 0)
          operator delete(v83.__locale_);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)" ... ", 5);
        data2hexString((const unsigned __int8 *)&v83, v56 + 1016, 8);
        if ((v85 & 0x80u) == 0)
          v62 = &v83;
        else
          v62 = v83.__locale_;
        if ((v85 & 0x80u) == 0)
          v63 = v85;
        else
          v63 = v84;
        v64 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v62, v63);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)" }", 2);
        if ((char)v85 < 0)
          operator delete(v83.__locale_);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
        v55 = std::locale::use_facet(&v83, v54);
        ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
        std::locale::~locale(&v83);
        std::ostream::put();
        std::ostream::flush();
        ++v53;
      }
      while (v53 < *(unsigned int *)(v48 + 40));
    }
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
  v70 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  if (v78)
    (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v78 + 104))(v78, a3, v79);
LABEL_84:
  v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v72 = v81;
  if (!v81)
    goto LABEL_88;
  v73 = (unint64_t *)&v81->__shared_owners_;
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
    if (!v22)
      return v71;
  }
  else
  {
LABEL_88:
    if (!v22)
      return v71;
  }
  v75 = (unint64_t *)&v22->__shared_owners_;
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  return v71;
}

uint64_t ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIfLi256EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNN(uint64_t a1, unsigned __int8 *a2, char a3, _QWORD *a4, CFIndex AppIntegerValue, float a6)
{
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  double Current;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  char v32;
  int v33;
  char v34;
  unsigned int v35;
  char v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  NSObject *v43;
  int v44;
  int v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  int *v54;
  int *v55;
  int v56;
  int v57;
  void *v58;
  int64_t v59;
  char *v60;
  char *v61;
  int v62;
  NSObject *v63;
  int v64;
  int v65;
  double v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint8x8_t v72;
  unint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  float v77;
  int v79;
  NSObject *v80;
  int v81;
  NSObject *v82;
  int v83;
  int v84;
  NSObject *v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  CFAbsoluteTime v91;
  _QWORD *v92;
  _QWORD *v93;
  void *v94;
  _QWORD *v95;
  _QWORD *v96;
  void *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  char *v102;
  char *v103;
  const char *v104;
  char *v105;
  const char *v106;
  uint64_t v107;
  int v108;
  unint64_t v109;
  unsigned int lock;
  _QWORD v112[8];
  void *v113;
  void *v114;
  _QWORD *v115;
  float v116;
  void *v117;
  void *v118;
  char *v119;
  void *v120;
  _BYTE *v121;
  uint64_t v122;
  __int128 v123;
  __int128 __p;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  int v133;
  void **v134;
  _BYTE keyExistsAndHasValidFormat[46];
  __int16 v136;
  int v137;
  __int16 v138;
  int v139;
  __int16 v140;
  uint64_t v141;
  __int16 v142;
  CFAbsoluteTime v143;
  _OWORD __str[2];
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v11 = *(_DWORD *)a4;
  memset(__str, 0, sizeof(__str));
  snprintf((char *)__str, 0x20uLL, "%02x%02x%02x%02x...%02x%02x%02x%02x", *a2, a2[1], a2[2], a2[3], a2[1020], a2[1021], a2[1022], a2[1023]);
  if (!(_DWORD)AppIntegerValue)
    AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("IVFNumberOfParitionsProbe"), CFSTR("com.apple.Spotlight"), 0);
  keyExistsAndHasValidFormat[0] = 0;
  v12 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeMin"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v13 = v12;
  else
    v13 = 10000;
  if (10 * v11 <= v13)
    v14 = v13;
  else
    v14 = 10 * v11;
  v15 = v14
      * IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
  v16 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
  keyExistsAndHasValidFormat[0] = 0;
  v17 = v15 / v16;
  v18 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeMin"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v19 = v18;
  else
    v19 = 7;
  v130 = 0;
  v131 = &v130;
  if (v17 <= v19)
    v20 = v19;
  else
    v20 = v17;
  v133 = 0;
  v132 = 0x2000000000;
  v126 = 0;
  v127 = &v126;
  v129 = 0;
  v128 = 0x2000000000;
  v125 = 0;
  v123 = 0u;
  __p = 0u;
  QuantizerManager<float,768>::aNNLogQueryVecIds((uint64_t)&v123);
  Current = CFAbsoluteTimeGetCurrent();
  if ((a3 & 1) != 0
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1) <= v20
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1) <= v14)
  {
    v62 = *__error();
    v63 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
    {
      v64 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
      v65 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
      v66 = a6;
      *(_DWORD *)keyExistsAndHasValidFormat = 136316162;
      *(_QWORD *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v64;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = v65;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 2048;
      *(double *)&keyExistsAndHasValidFormat[32] = a6;
      _os_log_impl(&dword_1B8270000, v63, OS_LOG_TYPE_DEFAULT, "brute force search %s top %u of %u vectors in %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x28u);
    }
    else
    {
      v66 = a6;
    }
    *__error() = v62;
    v108 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
    v67 = 0;
    v68 = 0;
    v69 = *(_QWORD *)(a1 + 48);
    while (v68 != *(_DWORD *)(v69 + 40))
    {
      ++*((_DWORD *)v131 + 6);
      if (*(_DWORD *)(v69 + 40) <= v67)
      {
        v102 = __si_assert_copy_extra_268();
        v103 = v102;
        v104 = "";
        if (v102)
          v104 = v102;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1798, "offset < store->endOffset()", v104);
LABEL_133:
        free(v103);
        if (__valid_fs(-1))
          v107 = 2989;
        else
          v107 = 3072;
        *(_DWORD *)v107 = -559038737;
        abort();
      }
      v70 = _windowsResolvePtr(*(_QWORD *)(v69 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v69 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v69 + 32) + 16) * v67, 0x410uLL);
      v71 = *(unsigned int *)(v70 + 1032);
      *(_DWORD *)keyExistsAndHasValidFormat = 2139095039;
      vDSP_distancesq((const float *)a2, 1, (const float *)v70, 1, (float *)keyExistsAndHasValidFormat, 0x100uLL);
      if (*((_QWORD *)&v123 + 1))
      {
        v72 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v123 + 8));
        v72.i16[0] = vaddlv_u8(v72);
        if (v72.u32[0] > 1uLL)
        {
          v73 = v71;
          if (*((_QWORD *)&v123 + 1) <= v71)
            v73 = v71 % *((_QWORD *)&v123 + 1);
        }
        else
        {
          v73 = (DWORD2(v123) - 1) & v71;
        }
        v74 = *(uint64_t **)(v123 + 8 * v73);
        if (v74)
        {
          v74 = (uint64_t *)*v74;
          if (v74)
          {
            if (v72.u32[0] < 2uLL)
            {
              while (1)
              {
                v76 = v74[1];
                if (v76 == v71)
                {
                  if (*((_DWORD *)v74 + 4) == (_DWORD)v71)
                    goto LABEL_85;
                }
                else if ((v76 & (*((_QWORD *)&v123 + 1) - 1)) != v73)
                {
                  goto LABEL_84;
                }
                v74 = (uint64_t *)*v74;
                if (!v74)
                  goto LABEL_85;
              }
            }
            do
            {
              v75 = v74[1];
              if (v75 == v71)
              {
                if (*((_DWORD *)v74 + 4) == (_DWORD)v71)
                  break;
              }
              else
              {
                if (v75 >= *((_QWORD *)&v123 + 1))
                  v75 %= *((_QWORD *)&v123 + 1);
                if (v75 != v73)
                  goto LABEL_84;
              }
              v74 = (uint64_t *)*v74;
            }
            while (v74);
          }
        }
      }
      else
      {
LABEL_84:
        v74 = 0;
      }
LABEL_85:
      v77 = *(float *)keyExistsAndHasValidFormat;
      if (a6 == 0.0 || *(float *)keyExistsAndHasValidFormat <= a6)
      {
        if (v74)
        {
          v79 = *__error();
          v80 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109376;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v71;
            *(_WORD *)&keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v77;
            _os_log_impl(&dword_1B8270000, v80, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", keyExistsAndHasValidFormat, 0x12u);
          }
          *__error() = v79;
        }
        *(_QWORD *)keyExistsAndHasValidFormat = *(_QWORD *)(v70 + 1024);
        *(_DWORD *)&keyExistsAndHasValidFormat[8] = v71;
        *(float *)&keyExistsAndHasValidFormat[12] = v77;
        MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::push(a4, (uint64_t)keyExistsAndHasValidFormat);
      }
      else
      {
        if (v74)
        {
          v81 = *__error();
          v82 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109632;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v71;
            *(_WORD *)&keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v77;
            *(_WORD *)&keyExistsAndHasValidFormat[18] = 2048;
            *(double *)&keyExistsAndHasValidFormat[20] = v66;
            _os_log_impl(&dword_1B8270000, v82, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", keyExistsAndHasValidFormat, 0x1Cu);
          }
          *__error() = v81;
        }
        ++*((_DWORD *)v127 + 6);
      }
      v67 = (v67 + 1);
      v68 = v67;
      if (v69 != *(_QWORD *)(a1 + 48))
      {
        v105 = __si_assert_copy_extra_268();
        v103 = v105;
        v106 = "";
        if (v105)
          v106 = v105;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1814, "store == other.store", v106);
        goto LABEL_133;
      }
    }
    v83 = v11;
  }
  else
  {
    if (!(_DWORD)AppIntegerValue)
    {
      keyExistsAndHasValidFormat[0] = 0;
      v22 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeMax"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat[0])
        v23 = v22;
      else
        v23 = 40;
      lock = v23;
      keyExistsAndHasValidFormat[0] = 0;
      v24 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionSizeFactor"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat[0])
        v25 = v24;
      else
        v25 = 45;
      keyExistsAndHasValidFormat[0] = 0;
      v26 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeNumerator"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
      v27 = keyExistsAndHasValidFormat[0];
      v28 = 8 * v26;
      v29 = v25 * v25;
      keyExistsAndHasValidFormat[0] = 0;
      v30 = CFPreferencesGetAppIntegerValue(CFSTR("IVFpartitionProbeDecayExponent"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
      v31 = keyExistsAndHasValidFormat[0];
      if (v30 <= 0x12)
        v32 = 18;
      else
        v32 = v30;
      v33 = v11;
      v34 = v32 - 3;
      v35 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
      if (v31)
        v36 = v34;
      else
        v36 = 17;
      v11 = v33;
      v37 = v35 >> v36;
      if (v37 <= 8)
        v38 = 8;
      else
        v38 = v37;
      v39 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
      if (v27)
        v40 = v28;
      else
        v40 = 800;
      v41 = v40 * v39 / (v29 * v38);
      if (lock < v41)
        v41 = lock;
      if (v41 <= v20)
        AppIntegerValue = v20;
      else
        AppIntegerValue = v41;
    }
    v42 = *__error();
    v43 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      v44 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
      v45 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
      *(_DWORD *)keyExistsAndHasValidFormat = 136316418;
      *(_QWORD *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v44;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = AppIntegerValue;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[32] = v45;
      *(_WORD *)&keyExistsAndHasValidFormat[36] = 2048;
      *(double *)&keyExistsAndHasValidFormat[38] = a6;
      _os_log_impl(&dword_1B8270000, v43, OS_LOG_TYPE_DEFAULT, "aNN search %s top %u of %u vectors in %u of %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x2Eu);
    }
    *__error() = v42;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    v46 = *(_QWORD *)(a1 + 80);
    v47 = *(std::__shared_weak_count **)(a1 + 88);
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(p_shared_owners);
      while (__stxr(v49 + 1, p_shared_owners));
    }
    v51 = *(_QWORD *)(a1 + 96);
    v50 = *(std::__shared_weak_count **)(a1 + 104);
    if (v50)
    {
      v52 = (unint64_t *)&v50->__shared_owners_;
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    memset(keyExistsAndHasValidFormat, 0, 24);
    (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned __int8 *, CFIndex))(*(_QWORD *)v46 + 72))(keyExistsAndHasValidFormat, v46, a2, AppIntegerValue);
    v55 = *(int **)keyExistsAndHasValidFormat;
    v54 = *(int **)&keyExistsAndHasValidFormat[8];
    v120 = 0;
    v121 = 0;
    v122 = 0;
    v134 = &v120;
    v109 = *(_QWORD *)&keyExistsAndHasValidFormat[8] - *(_QWORD *)keyExistsAndHasValidFormat;
    v56 = v11;
    if (*(_QWORD *)&keyExistsAndHasValidFormat[8] == *(_QWORD *)keyExistsAndHasValidFormat)
    {
      v118 = 0;
      v119 = 0;
      v117 = 0;
    }
    else
    {
      do
      {
        v57 = *v55;
        v55 += 2;
        std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&v134, v57);
      }
      while (v55 != v54);
      v58 = v120;
      v118 = 0;
      v119 = 0;
      v117 = 0;
      v59 = v121 - (_BYTE *)v120;
      if (v121 != v120)
      {
        if (v59 < 0)
          abort();
        v60 = (char *)operator new(v121 - (_BYTE *)v120);
        v61 = &v60[4 * (v59 >> 2)];
        v117 = v60;
        v119 = v61;
        memcpy(v60, v58, v59);
        v118 = v61;
      }
    }
    v112[0] = MEMORY[0x1E0C809B0];
    v112[1] = 1174405120;
    v112[2] = ___ZNK22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIfLi256EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke;
    v112[3] = &unk_1E6E34358;
    v112[6] = a1;
    v112[7] = a2;
    v112[4] = &v130;
    std::unordered_set<unsigned int>::unordered_set((uint64_t)&v113, (uint64_t)&v123);
    v116 = a6;
    v112[5] = &v126;
    v115 = a4;
    (*(void (**)(uint64_t, void **, _QWORD *))(*(_QWORD *)v51 + 72))(v51, &v117, v112);
    if (v117)
    {
      v118 = v117;
      operator delete(v117);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 152));
    v95 = v114;
    if (v114)
    {
      do
      {
        v96 = (_QWORD *)*v95;
        operator delete(v95);
        v95 = v96;
      }
      while (v96);
    }
    v97 = v113;
    v113 = 0;
    if (v97)
      operator delete(v97);
    v83 = v56;
    if (v120)
    {
      v121 = v120;
      operator delete(v120);
    }
    if (*(_QWORD *)keyExistsAndHasValidFormat)
    {
      *(_QWORD *)&keyExistsAndHasValidFormat[8] = *(_QWORD *)keyExistsAndHasValidFormat;
      operator delete(*(void **)keyExistsAndHasValidFormat);
    }
    if (v50)
    {
      v98 = (unint64_t *)&v50->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v108 = v109 >> 3;
    if (v47)
    {
      v100 = (unint64_t *)&v47->__shared_owners_;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
  }
  v84 = *__error();
  v85 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
  {
    v86 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
    v87 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
    v88 = *((_DWORD *)v127 + 6);
    v89 = *((_DWORD *)v131 + 6);
    v90 = (uint64_t)(a4[2] - a4[1]) >> 4;
    v91 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)keyExistsAndHasValidFormat = 136317442;
    *(_QWORD *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v83;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v86;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 2048;
    *(double *)&keyExistsAndHasValidFormat[26] = a6;
    *(_WORD *)&keyExistsAndHasValidFormat[34] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[36] = v108;
    *(_WORD *)&keyExistsAndHasValidFormat[40] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[42] = v87;
    v136 = 1024;
    v137 = v88;
    v138 = 1024;
    v139 = v89;
    v140 = 2048;
    v141 = v90;
    v142 = 2048;
    v143 = v91 - Current;
    _os_log_impl(&dword_1B8270000, v85, OS_LOG_TYPE_DEFAULT, "search %s top %u of %u vectors max_distance=%f in %u of %u partitions skip %u of %u populate %zu results in duration: %f", keyExistsAndHasValidFormat, 0x4Eu);
  }
  *__error() = v84;
  v92 = (_QWORD *)__p;
  if ((_QWORD)__p)
  {
    do
    {
      v93 = (_QWORD *)*v92;
      operator delete(v92);
      v92 = v93;
    }
    while (v93);
  }
  v94 = (void *)v123;
  *(_QWORD *)&v123 = 0;
  if (v94)
    operator delete(v94);
  _Block_object_dispose(&v126, 8);
  _Block_object_dispose(&v130, 8);
}

void ___ZNK22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIfLi256EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  unint64_t v5;
  const float *v6;
  unint64_t v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  int v17;
  NSObject *v18;
  double v19;
  int v20;
  NSObject *v21;
  uint64_t v22;
  _BYTE v23[10];
  __int16 v24;
  double v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 48);
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v5 = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 32) + 16) * *a3, 0x410uLL);
  v6 = *(const float **)(a1 + 56);
  LODWORD(v22) = 2139095039;
  vDSP_distancesq(v6, 1, (const float *)v5, 1, (float *)&v22, 0x100uLL);
  v7 = *(unsigned int *)(v5 + 1032);
  v8 = *(int8x8_t *)(a1 + 72);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8(v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = *(unsigned int *)(v5 + 1032);
      if (*(_QWORD *)&v8 <= v7)
        v10 = v7 % *(_QWORD *)&v8;
    }
    else
    {
      v10 = (v8.i32[0] - 1) & v7;
    }
    v11 = *(uint64_t **)(*(_QWORD *)(a1 + 64) + 8 * v10);
    if (v11)
    {
      v11 = (uint64_t *)*v11;
      if (v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          v12 = *(_QWORD *)&v8 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                goto LABEL_22;
            }
            else if ((v14 & v12) != v10)
            {
              goto LABEL_21;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v11[1];
          if (v13 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              break;
          }
          else
          {
            if (v13 >= *(_QWORD *)&v8)
              v13 %= *(_QWORD *)&v8;
            if (v13 != v10)
              goto LABEL_21;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
  else
  {
LABEL_21:
    v11 = 0;
  }
LABEL_22:
  v15 = *(float *)&v22;
  v16 = *(float *)(a1 + 112);
  if (v16 == 0.0 || *(float *)&v22 <= v16)
  {
    if (v11)
    {
      v20 = *__error();
      v21 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v22) = 67109376;
        HIDWORD(v22) = v7;
        *(_WORD *)v23 = 2048;
        *(double *)&v23[2] = v15;
        _os_log_impl(&dword_1B8270000, v21, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", (uint8_t *)&v22, 0x12u);
      }
      *__error() = v20;
    }
    v22 = *(_QWORD *)(v5 + 1024);
    *(_DWORD *)v23 = v7;
    *(float *)&v23[4] = v15;
    MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::push(*(_QWORD **)(a1 + 104), (uint64_t)&v22);
  }
  else
  {
    if (v11)
    {
      v17 = *__error();
      v18 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v19 = *(float *)(a1 + 112);
        LODWORD(v22) = 67109632;
        HIDWORD(v22) = v7;
        *(_WORD *)v23 = 2048;
        *(double *)&v23[2] = v15;
        v24 = 2048;
        v25 = v19;
        _os_log_impl(&dword_1B8270000, v18, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", (uint8_t *)&v22, 0x1Cu);
      }
      *__error() = v17;
    }
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  }
}

uint64_t ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIfLi256EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

_DWORD *IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::truncate(uint64_t a1)
{
  int v2;
  NSObject *v3;
  _QWORD *v4;
  int v5;
  int v6;
  int v7;
  int v9;
  _QWORD *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *__error();
  v3 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (_QWORD *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      v4 = (_QWORD *)*v4;
    v5 = *(_DWORD *)(a1 + 40);
    v6 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(a1 + 32) + 40, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), 0x410uLL)
                   + 1032);
    v7 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(a1 + 32) + 40, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) * (*(_DWORD *)(a1 + 40) - 1), 0x410uLL)+ 1032);
    v9 = 136315906;
    v10 = v4;
    v11 = 1024;
    v12 = v5;
    v13 = 1024;
    v14 = v6;
    v15 = 1024;
    v16 = v7;
    _os_log_impl(&dword_1B8270000, v3, OS_LOG_TYPE_DEFAULT, "truncate VectorStore %s(%u)[%u,%u]", (uint8_t *)&v9, 0x1Eu);
  }
  *__error() = v2;
  return storage_array_Truncate((uint64_t *)(*(_QWORD *)(a1 + 32) + 8));
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::compactForTest<vi_onefixedsize_disk_allocator>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  const char *v40;
  _QWORD v41[2];
  _DWORD *(*v42)(uint64_t, unsigned int *, BOOL *);
  void *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[3];
  uint64_t v52[2];
  void *v53[3];
  __int128 v54;
  __int128 v55;
  char v56;
  __int128 v57;
  __int128 v58;

  if (IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a2))
  {
    v38 = __si_assert_copy_extra_268();
    v39 = v38;
    v40 = "";
    if (v38)
      v40 = v38;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2589, "target->nVectors() == 0", v40);
    free(v39);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v6 = operator new(8uLL);
  v53[0] = v6;
  *v6 = a1;
  v53[1] = v6 + 1;
  v53[2] = v6 + 1;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::train<vi_onefixedsize_disk_allocator>(*(_QWORD *)(a1 + 64), *(std::__shared_weak_count **)(a1 + 72), (uint64_t)v53);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v8 = *(_QWORD *)(a1 + 80);
  v7 = *(std::__shared_weak_count **)(a1 + 88);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v12 = *(_QWORD *)(a1 + 96);
  v11 = *(std::__shared_weak_count **)(a1 + 104);
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  v52[0] = v8;
  v52[1] = (uint64_t)v7;
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(a2, v52);
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(a2, v52);
  }
  v50 = 0u;
  memset(v51, 0, sizeof(v51));
  v49 = 0u;
  v47 = v12;
  v48 = v11;
  if (v11)
  {
    v18 = (unint64_t *)&v11->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *(_QWORD *)(a1 + 48);
  v21 = *(std::__shared_weak_count **)(a1 + 56);
  v46[0] = v20;
  v46[1] = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v49, &v47, v46);
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 - 1, v22));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v49, &v47, v46);
  }
  v25 = v48;
  if (v48)
  {
    v26 = (unint64_t *)&v48->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v41[0] = MEMORY[0x1E0C809B0];
  v41[1] = 0x40000000;
  v42 = ___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi_block_invoke;
  v43 = &__block_descriptor_tmp_561;
  v44 = a2;
  v45 = a3;
  v57 = 0u;
  v58 = 0u;
  v56 = 0;
  do
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next((uint64_t)&v54, (uint64_t)&v49);
    v57 = v54;
    v58 = v55;
    if (!(_QWORD)v55)
      break;
    v42((uint64_t)v41, (unsigned int *)&v57, (BOOL *)&v56);
  }
  while (!v56);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v51);
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v11)
  {
    v34 = (unint64_t *)&v11->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v7)
  {
    v36 = (unint64_t *)&v7->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v53[0])
    operator delete(v53[0]);
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::train<vi_onefixedsize_disk_allocator>(uint64_t a1, std::__shared_weak_count *a2, uint64_t a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  const void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  int v60;
  unint64_t *v61;
  unint64_t v62;
  unsigned int AppIntegerValue;
  unsigned int v64;
  unsigned int v65;
  double v66;
  unsigned __int8 *v67;
  unsigned __int8 v68;
  char *FdPtrForFile;
  char *v70;
  NSObject *v71;
  os_signpost_id_t v72;
  NSObject *v73;
  NSObject *v74;
  _QWORD *v75;
  uint64_t v76;
  std::ios_base *v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  int v84;
  NSObject *v85;
  os_log_type_t v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  int v89;
  NSObject *v90;
  os_log_type_t v91;
  Boolean *v92;
  double Current;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  char *v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  unint64_t *v106;
  unint64_t v107;
  unsigned int v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  char *v115;
  int v116;
  unint64_t v117;
  int v118;
  unsigned int v119;
  unsigned __int8 v120;
  NSObject *v121;
  unsigned int v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  NSObject *v126;
  NSObject *v127;
  int v128;
  NSObject *v129;
  CFAbsoluteTime v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  unsigned int v146;
  unsigned int v147;
  int v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  char *v153;
  char *v154;
  const char *v155;
  char *v156;
  char *v157;
  const char *v158;
  uint64_t v159;
  char *v160;
  const char *v161;
  os_signpost_id_t spid;
  unint64_t v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  unsigned int v167;
  size_t __sz;
  unint64_t v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176[2];
  uint64_t v177;
  std::__shared_weak_count *v178;
  Boolean keyExistsAndHasValidFormat[8];
  std::__shared_weak_count *v180;
  uint64_t v181;
  _OWORD v182[4];
  __int128 __p;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  uint8_t buf[32];
  Boolean block[8];
  uint64_t v206;
  _BYTE v207[24];
  uint64_t v208;

  v208 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = *(const void **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  v9 = v7 - *(_QWORD *)a3;
  if (v7 == *(_QWORD *)a3)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    if (v9 < 0)
      goto LABEL_251;
    v10 = (char *)operator new(v7 - *(_QWORD *)a3);
    v11 = &v10[8 * (v9 >> 3)];
    memcpy(v10, v8, v9);
  }
  v202 = 0;
  v203 = 0;
  QuantizerManager<float,256>::sharedQuantizer(&v202, a1, 0);
  v12 = v11 - v10;
  v170 = a1;
  v171 = a2;
  if (v11 == v10)
  {
    v14 = 0;
    v13 = 0;
  }
  else
  {
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF9)
      goto LABEL_251;
    v13 = (char *)operator new(2 * v12);
    bzero(v13, 2 * v12);
    v14 = &v13[2 * v12];
  }
  __sz = v11 - v10;
  v15 = v12 >> 3;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v202 + 24))(v202);
  v172 = v11;
  v169 = v15;
  v17 = 0;
  if (v11 != v10)
  {
    if (v15 <= 1)
      v15 = 1;
    while (1)
    {
      (*(void (**)(Boolean *__return_ptr))(**(_QWORD **)&v10[8 * v17] + 16))(keyExistsAndHasValidFormat);
      v18 = v202;
      v20 = *(_QWORD *)keyExistsAndHasValidFormat;
      v19 = v180;
      if (!v180)
        goto LABEL_21;
      v21 = (unint64_t *)&v180->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        if (v20 == v18)
          goto LABEL_16;
      }
      else
      {
LABEL_21:
        if (v20 == v18)
          goto LABEL_16;
      }
      *(_QWORD *)keyExistsAndHasValidFormat = 0;
      v180 = 0;
      v23 = *(_QWORD *)&v10[8 * v17];
      v200 = v202;
      v201 = v203;
      if (v203)
      {
        v24 = (unint64_t *)&v203->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      (*(void (**)(Boolean *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v23 + 40))(keyExistsAndHasValidFormat, v23, &v200);
      v26 = v201;
      if (!v201)
        goto LABEL_29;
      v27 = (unint64_t *)&v201->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        v30 = *(_QWORD *)keyExistsAndHasValidFormat;
        v29 = v180;
        if (!v180)
          goto LABEL_32;
      }
      else
      {
LABEL_29:
        v30 = *(_QWORD *)keyExistsAndHasValidFormat;
        v29 = v180;
        if (!v180)
          goto LABEL_32;
      }
      v31 = (unint64_t *)&v29->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
LABEL_32:
      v33 = &v13[16 * v17];
      v34 = (std::__shared_weak_count *)*((_QWORD *)v33 + 1);
      *(_QWORD *)v33 = v30;
      *((_QWORD *)v33 + 1) = v29;
      if (!v34)
        goto LABEL_36;
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        v37 = v180;
        if (v180)
        {
LABEL_37:
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
      }
      else
      {
LABEL_36:
        v37 = v180;
        if (v180)
          goto LABEL_37;
      }
LABEL_16:
      if (++v17 == v15)
      {
        v17 = 0;
        v40 = 0;
        if (v169 <= 1)
          v41 = 1;
        else
          v41 = v169;
        while (1)
        {
          v42 = *(_QWORD *)&v13[16 * v40];
          if (v42)
          {
            v43 = *(_QWORD *)&v10[8 * v40];
            v198 = v202;
            v199 = v203;
            if (v203)
            {
              v44 = (unint64_t *)&v203->__shared_owners_;
              do
                v45 = __ldxr(v44);
              while (__stxr(v45 + 1, v44));
            }
            v46 = *(std::__shared_weak_count **)&v13[16 * v40 + 8];
            v196 = v42;
            v197 = v46;
            if (v46)
            {
              v47 = (unint64_t *)&v46->__shared_owners_;
              do
                v48 = __ldxr(v47);
              while (__stxr(v48 + 1, v47));
            }
            (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v43 + 48))(v43, &v198, &v196);
            v49 = v197;
            if (!v197)
              goto LABEL_61;
            v50 = (unint64_t *)&v197->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
              v52 = v199;
              if (!v199)
                goto LABEL_67;
            }
            else
            {
LABEL_61:
              v52 = v199;
              if (!v199)
                goto LABEL_67;
            }
            v53 = (unint64_t *)&v52->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
LABEL_67:
          (*(void (**)(Boolean *__return_ptr))(**(_QWORD **)&v10[8 * v40] + 24))(keyExistsAndHasValidFormat);
          v55 = v180;
          v56 = *(unsigned int *)(*(_QWORD *)keyExistsAndHasValidFormat + 72);
          if (v180)
          {
            v57 = (unint64_t *)&v180->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          (*(void (**)(Boolean *__return_ptr))(**(_QWORD **)&v10[8 * v40] + 24))(keyExistsAndHasValidFormat);
          v59 = v180;
          v60 = *(_DWORD *)(*(_QWORD *)keyExistsAndHasValidFormat + 68);
          if (v180)
          {
            v61 = (unint64_t *)&v180->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          if (v60 != v16)
          {
            v153 = __si_assert_copy_extra_268();
            v154 = v153;
            v155 = "";
            if (v153)
              v155 = v153;
            __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2080, "vectorIndexes[i]->getPartitions()->nPartitions() == nPartitions", v155);
LABEL_239:
            free(v154);
            if (__valid_fs(-1))
            {
              MEMORY[0xBAD] = -559038737;
              abort();
            }
            MEMORY[0xC00] = -559038737;
            abort();
          }
          v17 += v56;
          if (++v40 == v41)
            goto LABEL_79;
        }
      }
    }
  }
LABEL_79:
  keyExistsAndHasValidFormat[0] = 0;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionSizeFactor"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v64 = AppIntegerValue;
  else
    v64 = 45;
  keyExistsAndHasValidFormat[0] = 0;
  v65 = CFPreferencesGetAppIntegerValue(CFSTR("IVFTrainingTimeBudget"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v66 = (double)v65;
  else
    v66 = 30.0;
  if (v17 >> 4 < 0x271 || v17 < v64 * (unint64_t)v16 * v64 * (unint64_t)v16 / 0x64)
  {
LABEL_108:
    v87 = v171;
    if (!v13)
      goto LABEL_109;
    goto LABEL_187;
  }
  v67 = (unsigned __int8 *)(v170 + 72);
  do
    v68 = __ldaxr(v67);
  while (__stlxr(1u, v67));
  if ((v68 & 1) == 0 && *(_QWORD *)(v170 + 96))
  {
    v156 = __si_assert_copy_extra_268();
    v157 = v156;
    v158 = "";
    if (v156)
      v158 = v156;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 717, "_trainingQuantizer == nullptr", v158);
    free(v157);
    if (__valid_fs(-1))
      v159 = 2989;
    else
      v159 = 3072;
    *(_DWORD *)v159 = -559038737;
    goto LABEL_251;
  }
  FdPtrForFile = (char *)QuantizerManager<float,768>::createFdPtrForFile(v170, "dummy");
  if (!FdPtrForFile)
  {
    atomic_store(0, v67);
    goto LABEL_105;
  }
  v70 = FdPtrForFile;
  _fd_unlink_with_origin((uint64_t)FdPtrForFile, 0);
  fd_release(v70);
  if ((v68 & 1) != 0)
  {
LABEL_105:
    v84 = *__error();
    v85 = _SILogForLogForCategory(16);
    v86 = 2 * (dword_1EF19FCCC < 4);
    if (os_log_type_enabled(v85, v86))
    {
      *(_WORD *)keyExistsAndHasValidFormat = 0;
      _os_log_impl(&dword_1B8270000, v85, v86, "training quantizer already happen in other thread. Skip!", keyExistsAndHasValidFormat, 2u);
    }
    *__error() = v84;
    goto LABEL_108;
  }
  v167 = v64;
  v71 = _SILogForLogForCategory(0);
  v72 = os_signpost_id_make_with_pointer(v71, 0);
  v73 = _SILogForLogForCategory(0);
  spid = v72;
  v163 = v72 - 1;
  if (v72 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v74 = v73;
    if (os_signpost_enabled(v73))
    {
      *(_WORD *)keyExistsAndHasValidFormat = 0;
      _os_signpost_emit_with_name_impl(&dword_1B8270000, v74, OS_SIGNPOST_INTERVAL_BEGIN, v72, "IVFVectorIndexTrain", "Start", keyExistsAndHasValidFormat, 2u);
    }
  }
  v195 = 0u;
  v194 = 0u;
  v193 = 0u;
  v192 = 0u;
  v191 = 0u;
  v190 = 0u;
  v189 = 0u;
  v188 = 0u;
  v187 = 0u;
  v185 = 0;
  v184 = 0u;
  __p = 0u;
  memset(v182, 0, sizeof(v182));
  v180 = 0;
  v166 = MEMORY[0x1E0DE4FD0] + 104;
  v186 = MEMORY[0x1E0DE4FD0] + 104;
  v164 = MEMORY[0x1E0DE4FD0] + 64;
  v181 = MEMORY[0x1E0DE4FD0] + 64;
  v75 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v76 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)keyExistsAndHasValidFormat = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  *(_QWORD *)&keyExistsAndHasValidFormat[*(_QWORD *)(*(_QWORD *)keyExistsAndHasValidFormat - 24)] = v76;
  v180 = 0;
  v77 = (std::ios_base *)&keyExistsAndHasValidFormat[*(_QWORD *)(*(_QWORD *)keyExistsAndHasValidFormat - 24)];
  std::ios_base::init(v77, v182);
  v77[1].__vftable = 0;
  v77[1].__fmtflags_ = -1;
  v78 = v75[5];
  v181 = v75[4];
  *(uint64_t *)((char *)&v181 + *(_QWORD *)(v181 - 24)) = v78;
  *(_QWORD *)keyExistsAndHasValidFormat = v75[1];
  *(_QWORD *)&keyExistsAndHasValidFormat[*(_QWORD *)(*(_QWORD *)keyExistsAndHasValidFormat - 24)] = v75[6];
  v186 = v166;
  *(_QWORD *)keyExistsAndHasValidFormat = MEMORY[0x1E0DE4FD0] + 24;
  v181 = v164;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&v182[0] = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v184 = 0u;
  LODWORD(v185) = 24;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v181, (uint64_t)"[", 1);
  if (v172 != v10)
  {
    v79 = v10;
    do
    {
      (*(void (**)(Boolean *__return_ptr))(**(_QWORD **)v79 + 24))(block);
      v80 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v80, (uint64_t)", ", 2);
      v81 = (std::__shared_weak_count *)v206;
      if (v206)
      {
        v82 = (unint64_t *)(v206 + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v79 += 8;
    }
    while (v79 != v172);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v181, (uint64_t)"]", 1);
  v89 = *__error();
  v90 = _SILogForLogForCategory(16);
  v91 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v90, v91))
  {
    std::stringbuf::str();
    v92 = v207[7] >= 0 ? block : *(Boolean **)block;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v92;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v16;
    _os_log_impl(&dword_1B8270000, v90, v91, "training quantizer with %s vectors in %u partitions", buf, 0x12u);
    if ((v207[7] & 0x80000000) != 0)
      operator delete(*(void **)block);
  }
  *__error() = v89;
  Current = CFAbsoluteTimeGetCurrent();
  if (CFAbsoluteTimeGetCurrent() - Current >= v66)
  {
    v102 = 0;
    goto LABEL_169;
  }
  v94 = (sqrt((double)v17) / (double)v167);
  block[0] = 0;
  v95 = CFPreferencesGetAppIntegerValue(CFSTR("IVFSeedCentroidPerTraining"), CFSTR("com.apple.Spotlight"), block);
  if (block[0])
    v96 = v95;
  else
    v96 = 60;
  v165 = v94;
  v97 = 2 * (v94 - v16);
  if (v96 <= v97)
    v98 = v97;
  else
    v98 = v96;
  v177 = v170;
  v178 = v171;
  if (v171)
  {
    v99 = (unint64_t *)&v171->__shared_owners_;
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 1, v99));
  }
  memset(buf, 0, 24);
  if (v172 == v10)
  {
    v101 = 0;
    goto LABEL_132;
  }
  if ((__sz & 0x8000000000000000) != 0)
LABEL_251:
    abort();
  v101 = (char *)operator new(__sz);
  *(_QWORD *)buf = v101;
  *(_QWORD *)&buf[16] = &v101[8 * v169];
  memcpy(v101, v10, __sz);
  *(_QWORD *)&buf[8] = &v101[8 * v169];
LABEL_132:
  block[0] = 0;
  v103 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionRecycleTheshold"), CFSTR("com.apple.Spotlight"), block);
  if (block[0])
    v104 = v103;
  else
    v104 = 3;
  v105 = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRootBase::trainOnce(&v177, (std::string::size_type *)buf, v98, v104);
  if (v101)
  {
    *(_QWORD *)&buf[8] = v101;
    operator delete(v101);
  }
  if (v171)
  {
    v106 = (unint64_t *)&v171->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  if (v105)
  {
    QuantizerManager<float,256>::lastTrainedQuantizer(block, v170);
    v108 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)block + 24))(*(_QWORD *)block);
    v109 = (std::__shared_weak_count *)v206;
    if (v206)
    {
      v110 = (unint64_t *)(v206 + 8);
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
    if (v17 >= v167 * (unint64_t)v108 * v167 * (unint64_t)v108 / 0x64)
    {
      v112 = v171;
      v139 = (unint64_t *)&v171->__shared_owners_;
      v102 = 1;
      while (CFAbsoluteTimeGetCurrent() - Current < v66)
      {
        block[0] = 0;
        v140 = CFPreferencesGetAppIntegerValue(CFSTR("IVFSeedCentroidPerTraining"), CFSTR("com.apple.Spotlight"), block);
        if (block[0])
          v141 = v140;
        else
          v141 = 60;
        v142 = 2 * (v165 - v108);
        if (v141 <= v142)
          v143 = v142;
        else
          v143 = v141;
        v177 = v170;
        v178 = v112;
        if (v112)
        {
          do
            v144 = __ldxr(v139);
          while (__stxr(v144 + 1, v139));
        }
        memset(buf, 0, 24);
        if (v172 == v10)
        {
          v145 = 0;
        }
        else
        {
          if ((__sz & 0x8000000000000000) != 0)
            goto LABEL_251;
          v145 = (char *)operator new(__sz);
          *(_QWORD *)buf = v145;
          *(_QWORD *)&buf[16] = &v145[8 * v169];
          memcpy(v145, v10, __sz);
          *(_QWORD *)&buf[8] = &v145[8 * v169];
        }
        block[0] = 0;
        v146 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionRecycleTheshold"), CFSTR("com.apple.Spotlight"), block);
        if (block[0])
          v147 = v146;
        else
          v147 = 3;
        v148 = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRootBase::trainOnce(&v177, (std::string::size_type *)buf, v143, v147);
        if (v145)
        {
          *(_QWORD *)&buf[8] = v145;
          operator delete(v145);
        }
        if (v171)
        {
          do
            v149 = __ldaxr(v139);
          while (__stlxr(v149 - 1, v139));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
          }
        }
        ++v102;
        if (!v148)
          goto LABEL_169;
        QuantizerManager<float,256>::lastTrainedQuantizer(block, v170);
        v108 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)block + 24))(*(_QWORD *)block);
        v150 = (std::__shared_weak_count *)v206;
        if (v206)
        {
          v151 = (unint64_t *)(v206 + 8);
          do
            v152 = __ldaxr(v151);
          while (__stlxr(v152 - 1, v151));
          if (!v152)
          {
            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
            std::__shared_weak_count::__release_weak(v150);
          }
        }
        v112 = v171;
        if (v17 < v167 * (unint64_t)v108 * v167 * (unint64_t)v108 / 0x64)
          break;
      }
    }
    else
    {
      v102 = 1;
      v112 = v171;
    }
    v113 = (unint64_t *)&v112->__shared_owners_;
    while (1)
    {
      if (CFAbsoluteTimeGetCurrent() - Current >= v66)
        goto LABEL_169;
      v176[0] = v170;
      v176[1] = (uint64_t)v171;
      if (v171)
      {
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
      }
      v173 = 0;
      v174 = 0;
      v175 = 0;
      if (v172 != v10)
        break;
      v116 = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRootBase::trainOnce(v176, (std::string::size_type *)&v173, 0, 2u);
      if (v171)
        goto LABEL_159;
LABEL_162:
      ++v102;
      if (v116)
      {
        block[0] = 0;
        v118 = CFPreferencesGetAppIntegerValue(CFSTR("IVFMaxTrainingIteration"), CFSTR("com.apple.Spotlight"), block);
        v119 = block[0] ? v118 : 3;
        if (v102 <= v119)
          continue;
      }
      goto LABEL_169;
    }
    if ((__sz & 0x8000000000000000) != 0)
      goto LABEL_251;
    v115 = (char *)operator new(__sz);
    v173 = v115;
    v175 = &v115[8 * v169];
    memcpy(v115, v10, __sz);
    v174 = &v115[8 * v169];
    v116 = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRootBase::trainOnce(v176, (std::string::size_type *)&v173, 0, 2u);
    v174 = v115;
    operator delete(v115);
    if (!v171)
      goto LABEL_162;
    do
LABEL_159:
      v117 = __ldaxr(v113);
    while (__stlxr(v117 - 1, v113));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
    goto LABEL_162;
  }
  v102 = 1;
LABEL_169:
  v120 = atomic_load(v67);
  if ((v120 & 1) == 0)
  {
    v160 = __si_assert_copy_extra_268();
    v154 = v160;
    v161 = "";
    if (v160)
      v161 = v160;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 794, "_training.test()", v161);
    goto LABEL_239;
  }
  if (*(_QWORD *)(v170 + 96))
  {
    v121 = *(NSObject **)(v170 + 16);
    *(_QWORD *)block = MEMORY[0x1E0C809B0];
    v206 = 0x40000000;
    *(_QWORD *)v207 = ___ZN16QuantizerManagerIfLi256EE23commitTrainingQuantizerEv_block_invoke;
    *(_QWORD *)&v207[8] = &__block_descriptor_tmp_578;
    *(_QWORD *)&v207[16] = v170;
    dispatch_sync(v121, block);
  }
  atomic_store(0, (unsigned __int8 *)(v170 + 72));
  QuantizerManager<float,256>::sharedQuantizer(block, v170, 0);
  v122 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)block + 24))(*(_QWORD *)block);
  v123 = (std::__shared_weak_count *)v206;
  if (v206)
  {
    v124 = (unint64_t *)(v206 + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = _SILogForLogForCategory(0);
  if (v163 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v127 = v126;
    if (os_signpost_enabled(v126))
    {
      *(_WORD *)block = 0;
      _os_signpost_emit_with_name_impl(&dword_1B8270000, v127, OS_SIGNPOST_INTERVAL_END, spid, "IVFVectorIndexTrain", "End", block, 2u);
    }
  }
  v128 = *__error();
  v129 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
  {
    v130 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)block = 67110144;
    *(_DWORD *)&block[4] = v17;
    LOWORD(v206) = 1024;
    *(_DWORD *)((char *)&v206 + 2) = v122;
    HIWORD(v206) = 1024;
    *(_DWORD *)v207 = v17 / v122;
    *(_WORD *)&v207[4] = 1024;
    *(_DWORD *)&v207[6] = v102;
    *(_WORD *)&v207[10] = 2048;
    *(double *)&v207[12] = v130 - Current;
    _os_log_impl(&dword_1B8270000, v129, OS_LOG_TYPE_DEFAULT, "training quantizer for %u vectors in %u partitions average size: %u for %u iterations duration: %fs", block, 0x24u);
  }
  *__error() = v128;
  *(_QWORD *)keyExistsAndHasValidFormat = *MEMORY[0x1E0DE4F50];
  v131 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)&keyExistsAndHasValidFormat[*(_QWORD *)(*(_QWORD *)keyExistsAndHasValidFormat - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v181 = v131;
  *(_QWORD *)&v182[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v184) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1BCCB0650](&v186);
  v87 = v171;
  if (!v13)
  {
LABEL_109:
    v88 = v203;
    if (!v203)
      goto LABEL_198;
    goto LABEL_194;
  }
LABEL_187:
  while (v14 != v13)
  {
    v132 = (std::__shared_weak_count *)*((_QWORD *)v14 - 1);
    if (v132)
    {
      v133 = (unint64_t *)&v132->__shared_owners_;
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
    v14 -= 16;
  }
  operator delete(v13);
  v88 = v203;
  if (v203)
  {
LABEL_194:
    v135 = (unint64_t *)&v88->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
LABEL_198:
  if (v10)
    operator delete(v10);
  if (v87)
  {
    v137 = (unint64_t *)&v87->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(_QWORD *)(a2 + 72))
  {
    for (i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + ((*(_QWORD *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * *(_QWORD *)(a2 + 64));
          ;
          i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + ((v11 >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * v11))
    {
      *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)i + 16))(i);
      if (!*(_QWORD *)(a2 + 72))
        break;
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + ((*(_QWORD *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * *(_QWORD *)(a2 + 64));
      v6 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
      if (v6)
      {
        *(_DWORD *)(a1 + 4) = v6[1];
        v12 = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 32) + 16) * *v6, 0x410uLL);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(v12 + 1032);
        *(_QWORD *)(a1 + 16) = v12;
        *(_QWORD *)(a1 + 24) = v12 + 1024;
        return;
      }
      v7 = *(std::__shared_weak_count **)(*(_QWORD *)(*(_QWORD *)(a2 + 40)
                                                    + ((*(_QWORD *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                                        + 16 * *(_QWORD *)(a2 + 64)
                                        + 8);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = *(_QWORD *)(a2 + 72) - 1;
      v11 = *(_QWORD *)(a2 + 64) + 1;
      *(_QWORD *)(a2 + 64) = v11;
      *(_QWORD *)(a2 + 72) = v10;
      if (v11 >= 0x200)
      {
        operator delete(**(void ***)(a2 + 40));
        *(_QWORD *)(a2 + 40) += 8;
        v10 = *(_QWORD *)(a2 + 72);
        v11 = *(_QWORD *)(a2 + 64) - 256;
        *(_QWORD *)(a2 + 64) = v11;
      }
      if (!v10)
        return;
    }
  }
}

_DWORD *IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, char a5, float a6)
{
  uint64_t v9;
  unsigned int Vector;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  const UInt8 *data;
  int v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  int v22;
  NSObject *v23;
  _BYTE *v24;
  int v25;
  NSObject *v26;
  _BYTE *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  _DWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  NSObject *v44;
  const UInt8 *v45;
  int v46;
  NSObject *v47;
  size_t v48;
  int v49;
  NSObject *v50;
  int v51;
  NSObject *v52;
  _BYTE *v53;
  int v54;
  NSObject *v55;
  _BYTE *v56;
  NSObject *v57;
  int v58;
  NSObject *v59;
  int v60;
  int v61;
  char *v62;
  char *v63;
  const char *v64;
  char *v65;
  char *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  NSObject *v76;
  _QWORD *v77;
  int v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  int v95;
  char *v96;
  const char *v97;
  char *v98;
  const char *v99;
  char *v100;
  const char *v101;
  char *v102;
  const char *v103;
  char *v104;
  const char *v105;
  std::__shared_weak_count *v106;
  unsigned int v107;
  void *__src;
  uint64_t v109;
  float v110;
  unsigned int v111;
  uint8_t buf[4];
  _BYTE *v113;
  _BYTE __p[12];
  __int16 v115;
  _BYTE v116[20];
  _BYTE v117[10];
  uint64_t v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v111 = a4;
  v110 = a6;
  if (*(_BYTE *)(a1 + 160))
  {
    v62 = __si_assert_copy_extra_268();
    v63 = v62;
    v64 = "";
    if (v62)
      v64 = v62;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2430, "!readOnly", v64);
    goto LABEL_121;
  }
  if ((a5 & 1) != 0)
  {
    v9 = a4;
    if ((_DWORD)a4 == -1)
      goto LABEL_79;
    goto LABEL_30;
  }
  Vector = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::findVector(a1, (uint64_t)a3, (int *)&v111, &v110, a2);
  v9 = v111;
  if (v111 == -1)
  {
LABEL_79:
    v65 = __si_assert_copy_extra_268();
    v66 = v65;
    v67 = "";
    if (v65)
      v67 = v65;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2435, "partID != VECTOR_NOT_FOUND", v67);
    goto LABEL_82;
  }
  if (Vector == -1)
  {
LABEL_30:
    __src = a3;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    v28 = *(std::__shared_weak_count **)(a1 + 88);
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
    }
    v106 = v28;
    v32 = *(_DWORD **)(a1 + 96);
    v31 = *(std::__shared_weak_count **)(a1 + 104);
    if (v31)
    {
      v33 = (unint64_t *)&v31->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    v35 = *(_QWORD *)(a1 + 48);
    v36 = *(_QWORD **)(v35 + 32);
    v37 = v36[2];
    v38 = v36[7];
    v39 = v38 + v37;
    v107 = a2;
    if (v38 + v37 >= v36[6])
    {
      if (!_storage_array_Expand((uint64_t)(v36 + 1)))
      {
        v40 = 0;
        if (v37 > 0x40F)
          goto LABEL_89;
        goto LABEL_38;
      }
      v38 = v36[7];
      v39 = v38 + v37;
    }
    v36[7] = v39;
    v40 = (v38 - v36[3]) / v37;
    if (v37 > 0x40F)
      goto LABEL_89;
LABEL_38:
    v41 = v36[2];
    if (v41 <= 0x40F)
    {
      LODWORD(v42) = 1040;
      do
      {
        v43 = v36[7] + v41;
        if (v43 >= v36[6])
        {
          if (!_storage_array_Expand((uint64_t)(v36 + 1)))
            goto LABEL_42;
          v43 = v36[7] + v41;
        }
        v36[7] = v43;
LABEL_42:
        v41 = v36[2];
        v42 = (v42 - v41);
      }
      while (v41 < v42);
    }
LABEL_89:
    v69 = (uint64_t)(v36 + 524);
    bit_vector_set_9027((uint64_t)(v36 + 524), (v40 >> 20));
    v70 = (v40 + 1040) >> 20;
    if (v70 > (v40 >> 20))
    {
      v71 = (v40 >> 20) + 1;
      do
      {
        v72 = v71;
        bit_vector_set_9027(v69, v71++);
      }
      while (v70 > v72);
    }
    v73 = *(unsigned int *)(v35 + 40);
    v74 = v40;
    if (v40 != v73)
    {
      v75 = *__error();
      v76 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
      {
        v95 = *(_DWORD *)(v35 + 40);
        *(_DWORD *)__p = 136315906;
        *(_QWORD *)&__p[4] = "newEntry";
        v115 = 1024;
        *(_DWORD *)v116 = 1779;
        *(_WORD *)&v116[4] = 2048;
        *(_QWORD *)&v116[6] = v40;
        *(_WORD *)&v116[14] = 1024;
        *(_DWORD *)&v116[16] = v95;
        _os_log_error_impl(&dword_1B8270000, v76, OS_LOG_TYPE_ERROR, "%s:%d: offset: %llu, nVectors: %u", __p, 0x22u);
      }
      *__error() = v75;
      v77 = *(_QWORD **)(v35 + 32);
      v78 = *__error();
      v79 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
      {
        v80 = v77[6];
        v81 = v77[7];
        v83 = v77[2];
        v82 = v77[3];
        *(_DWORD *)__p = 134219008;
        *(_QWORD *)&__p[4] = v77;
        v115 = 2048;
        *(_QWORD *)v116 = v80;
        *(_WORD *)&v116[8] = 2048;
        *(_QWORD *)&v116[10] = v81;
        *(_WORD *)&v116[18] = 2048;
        *(_QWORD *)v117 = v82;
        *(_WORD *)&v117[8] = 2048;
        v118 = v83;
        _os_log_impl(&dword_1B8270000, v79, OS_LOG_TYPE_DEFAULT, "vi_onefixedsize_disk_allocator %p size: %llu, freeRegion: %llu, header: %llu, elemSize: %lu", __p, 0x34u);
      }
      *__error() = v78;
      v74 = *(unsigned int *)(v35 + 40);
      LODWORD(v73) = *(_DWORD *)(v35 + 40);
    }
    if (v40 == v74)
    {
      *(_DWORD *)(v35 + 40) = v73 + 1;
      v84 = (_QWORD *)_windowsResolvePtr(*(_QWORD *)(v35 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v35 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v35 + 32) + 16) * v40, 0x410uLL);
      memcpy(v84, __src, 0x400uLL);
      v84[128] = 0;
      (*(void (**)(_DWORD *, uint64_t, unint64_t, float))(*(_QWORD *)v32 + 56))(v32, v9, v40, v110);
      v85 = *(_QWORD *)(a1 + 48);
      if (v32[18] == *(_DWORD *)(v85 + 40))
      {
        v86 = v40;
        v87 = v40 >> 20;
        v88 = *(_QWORD *)(v85 + 32) + 4192;
        bit_vector_set_9027(v88, v87);
        v89 = ((unint64_t)v40 + 1040) >> 20;
        if (v89 > v87)
        {
          do
            bit_vector_set_9027(v88, ++v87);
          while (v89 != v87);
        }
        v16 = (_DWORD *)_windowsResolvePtr(*(_QWORD *)(v85 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v85 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v85 + 32) + 16) * v86, 0x410uLL);
        v16[258] = v107;
        if (*(_DWORD *)(*(_QWORD *)(a1 + 48) + 40) == 1)
          *(_DWORD *)(a1 + 164) = v107;
        *(_DWORD *)(a1 + 168) = v107;
        data_map_set_offset_for_id(*(_QWORD *)(a1 + 144), v107, (16 * v86) | ((unint64_t)*(unsigned int *)(a1 + 40) << 36) | (4 * (*(_DWORD *)(a1 + 128) & 3)) | *(_DWORD *)(a1 + 124) & 3, *(unsigned __int16 *)(a1 + 120) | ((unint64_t)*(unsigned int *)(a1 + 132) << 32), *(_DWORD *)(a1 + 136));
        if (v31)
        {
          v90 = (unint64_t *)&v31->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        if (v106)
        {
          v92 = (unint64_t *)&v106->__shared_owners_;
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
        return v16;
      }
      v98 = __si_assert_copy_extra_268();
      v63 = v98;
      v99 = "";
      if (v98)
        v99 = v98;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2440, "cur.partitions->nVectors() == vectors->count()", v99);
    }
    else
    {
      v96 = __si_assert_copy_extra_268();
      v63 = v96;
      v97 = "";
      if (v96)
        v97 = v96;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1782, "offset == nVectors", v97);
    }
LABEL_121:
    free(v63);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v11 = *(_QWORD *)(a1 + 48);
  v12 = Vector;
  v13 = (unint64_t)Vector >> 20;
  v14 = *(_QWORD *)(v11 + 32) + 4192;
  bit_vector_set_9027(v14, v13);
  v15 = (unint64_t)(v12 + 1040) >> 20;
  if (v15 > v13)
  {
    do
      bit_vector_set_9027(v14, ++v13);
    while (v15 != v13);
  }
  v16 = (_DWORD *)_windowsResolvePtr(*(_QWORD *)(v11 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v11 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v11 + 32) + 16) * v12, 0x410uLL);
  if (v16[258] != a2)
  {
    v109 = 0;
    data = data_map_get_data(*(_QWORD *)(a1 + 144), a2, &v109);
    v18 = *__error();
    v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 136316162;
      *(_QWORD *)&__p[4] = "lookupForInsert";
      v115 = 1024;
      *(_DWORD *)v116 = 2463;
      *(_WORD *)&v116[4] = 1024;
      *(_DWORD *)&v116[6] = a2;
      *(_WORD *)&v116[10] = 2048;
      *(_QWORD *)&v116[12] = data;
      *(_WORD *)v117 = 2048;
      *(_QWORD *)&v117[2] = v109;
      _os_log_error_impl(&dword_1B8270000, v19, OS_LOG_TYPE_ERROR, "%s:%d: vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v18;
    if (v109 < 1)
    {
      v25 = *__error();
      v44 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "lookupForInsert";
        v115 = 1024;
        *(_DWORD *)v116 = 2472;
        _os_log_error_impl(&dword_1B8270000, v44, OS_LOG_TYPE_ERROR, "%s:%d: vectorId is invalid", __p, 0x12u);
      }
    }
    else
    {
      if (v109 != 1024)
      {
        v102 = __si_assert_copy_extra_268();
        v63 = v102;
        v103 = "";
        if (v102)
          v103 = v102;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2465, "size == D * sizeof(ELEM_TYPE)", v103);
        goto LABEL_121;
      }
      if (!data || !memcmp(data, a3, 0x400uLL))
      {
LABEL_49:
        v45 = data_map_get_data(*(_QWORD *)(a1 + 144), v16[258], &v109);
        v46 = *__error();
        v47 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          v60 = v16[258];
          *(_DWORD *)__p = 136316162;
          *(_QWORD *)&__p[4] = "lookupForInsert";
          v115 = 1024;
          *(_DWORD *)v116 = 2475;
          *(_WORD *)&v116[4] = 1024;
          *(_DWORD *)&v116[6] = v60;
          *(_WORD *)&v116[10] = 2048;
          *(_QWORD *)&v116[12] = v45;
          *(_WORD *)v117 = 2048;
          *(_QWORD *)&v117[2] = v109;
          _os_log_error_impl(&dword_1B8270000, v47, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
        }
        *__error() = v46;
        if (v109 < 1)
        {
          v54 = *__error();
          v57 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = "lookupForInsert";
            v115 = 1024;
            *(_DWORD *)v116 = 2484;
            _os_log_error_impl(&dword_1B8270000, v57, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId is invalid", __p, 0x12u);
          }
        }
        else
        {
          if (v109 != 1024)
          {
            v104 = __si_assert_copy_extra_268();
            v63 = v104;
            v105 = "";
            if (v104)
              v105 = v104;
            __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2477, "size == D * sizeof(ELEM_TYPE)", v105);
            goto LABEL_121;
          }
          v48 = 1024;
          if (!v45 || !memcmp(v45, v16, 0x400uLL))
            goto LABEL_72;
          v49 = *__error();
          v50 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = "lookupForInsert";
            v115 = 1024;
            *(_DWORD *)v116 = 2479;
            _os_log_error_impl(&dword_1B8270000, v50, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
          }
          *__error() = v49;
          v51 = *__error();
          v52 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            data2hexString(__p, (uint64_t)v45, v109);
            v53 = v116[9] >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)buf = 136315138;
            v113 = v53;
            _os_log_impl(&dword_1B8270000, v52, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
            if ((v116[9] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
          *__error() = v51;
          v54 = *__error();
          v55 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            data2hexString(__p, (uint64_t)v16, v109);
            v56 = v116[9] >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)buf = 136315138;
            v113 = v56;
            _os_log_impl(&dword_1B8270000, v55, OS_LOG_TYPE_DEFAULT, "vector in vector store: %s", buf, 0xCu);
            if ((v116[9] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
        }
        *__error() = v54;
        v48 = v109;
LABEL_72:
        if (memcmp(a3, v16, v48))
        {
          v100 = __si_assert_copy_extra_268();
          v66 = v100;
          v101 = "";
          if (v100)
            v101 = v100;
          __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2486, "memcmp(vec.vec, entry->vec.vec, size) == 0", v101);
LABEL_82:
          free(v66);
          if (__valid_fs(-1))
            v68 = 2989;
          else
            v68 = 3072;
          *(_DWORD *)v68 = -559038737;
          abort();
        }
        v58 = *__error();
        v59 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_FAULT))
        {
          v61 = v16[258];
          *(_DWORD *)__p = 136315906;
          *(_QWORD *)&__p[4] = "lookupForInsert";
          v115 = 1024;
          *(_DWORD *)v116 = 2487;
          *(_WORD *)&v116[4] = 1024;
          *(_DWORD *)&v116[6] = a2;
          *(_WORD *)&v116[10] = 1024;
          *(_DWORD *)&v116[12] = v61;
          _os_log_fault_impl(&dword_1B8270000, v59, OS_LOG_TYPE_FAULT, "%s:%d: Dup vector with new vectorId=%u old=%u", __p, 0x1Eu);
        }
        *__error() = v58;
        return v16;
      }
      v20 = *__error();
      v21 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "lookupForInsert";
        v115 = 1024;
        *(_DWORD *)v116 = 2467;
        _os_log_error_impl(&dword_1B8270000, v21, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v20;
      v22 = *__error();
      v23 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)data, v109);
        v24 = v116[9] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        v113 = v24;
        _os_log_impl(&dword_1B8270000, v23, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v116[9] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      *__error() = v22;
      v25 = *__error();
      v26 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)a3, v109);
        v27 = v116[9] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        v113 = v27;
        _os_log_impl(&dword_1B8270000, v26, OS_LOG_TYPE_DEFAULT, "vector passed in: %s", buf, 0xCu);
        if ((v116[9] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
    }
    *__error() = v25;
    goto LABEL_49;
  }
  return v16;
}

uint64_t IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::findVector(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, int a5)
{
  os_unfair_lock_s *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  _DWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char *v28;
  char *v29;
  const char *v30;
  char *v31;
  const char *v32;
  char *v33;
  char *v34;
  const char *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  _QWORD v40[8];
  int v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  int v45;

  v10 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v12 = *(_QWORD *)(a1 + 80);
  v11 = *(std::__shared_weak_count **)(a1 + 88);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v16 = *(_DWORD **)(a1 + 96);
  v15 = *(std::__shared_weak_count **)(a1 + 104);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  os_unfair_lock_unlock(v10);
  v19 = *a3;
  if ((_DWORD)v19 == -1)
  {
    if (*(_DWORD *)(a1 + 156) == -1)
    {
      v42 = 0;
      v43 = 0;
      v44 = 0;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 72))(&v42, v12, a2, 1);
      v20 = v42;
      if (v43 - (char *)v42 == 8)
      {
        v21 = *v42;
        *a3 = *v42;
        *a4 = v20[1];
        if (v21 >= IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1))
        {
          v33 = __si_assert_copy_extra_268();
          v34 = v33;
          if (v33)
            v35 = v33;
          else
            v35 = "";
          v36 = *a3;
          v37 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
          v38 = v16[19];
          v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          __message_assert("%s:%u: failed assertion '%s' %s Invalid partId %u >= %u (partitions: v%u quantizer v%u", "IVFVectorIndex.hh", 2403, "partID < nPartitions()", v35, v36, v37, v38, v39);
          free(v34);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if (v42)
        {
          v43 = (char *)v42;
          operator delete(v42);
        }
        v19 = *a3;
        goto LABEL_14;
      }
      v31 = __si_assert_copy_extra_268();
      v29 = v31;
      v32 = "";
      if (v31)
        v32 = v31;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2398, "topPartition.size() == 1", v32);
    }
    else
    {
      v28 = __si_assert_copy_extra_268();
      v29 = v28;
      v30 = "";
      if (v28)
        v30 = v28;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2396, "mergeBeginVectorOffset == VECTOR_NOT_FOUND", v30);
    }
    free(v29);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
LABEL_14:
  v42 = 0;
  v43 = (char *)&v42;
  v45 = -1;
  v44 = 0x2000000000;
  v40[0] = MEMORY[0x1E0C809B0];
  v40[1] = 0x40000000;
  v40[2] = ___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIfLi256EERjRfj_block_invoke;
  v40[3] = &unk_1E6E32768;
  v41 = a5;
  v40[6] = a4;
  v40[7] = a2;
  v40[4] = &v42;
  v40[5] = a1;
  (*(void (**)(_DWORD *, uint64_t, _QWORD *))(*(_QWORD *)v16 + 80))(v16, v19, v40);
  v22 = *((unsigned int *)v43 + 6);
  _Block_object_dispose(&v42, 8);
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v11)
  {
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v22;
}

unint64_t ___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIfLi256EERjRfj_block_invoke(unint64_t result, uint64_t a2, float *a3, _BYTE *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  int v15;
  const void *v16;
  const void *v17;

  v5 = *(_QWORD *)(result + 40);
  v6 = *(unsigned int *)a3;
  if (v6 >= *(_DWORD *)(v5 + 156))
    goto LABEL_12;
  v8 = result;
  v9 = **(float **)(result + 48);
  v10 = a3[1];
  v11 = v9 == v10;
  v12 = vabds_f32(v9, v10);
  v13 = fmaxf(fminf(fabsf(v10), fabsf(v9)) * 0.000015259, 0.000015259);
  if (v11 || v12 <= v13)
  {
    v15 = *(_DWORD *)(result + 64);
    if (v15)
    {
      result = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 16) * v6, 0x410uLL);
      if (v15 != *(_DWORD *)(result + 1032))
        return result;
      *(float *)&v6 = *a3;
    }
    v16 = *(const void **)(v8 + 56);
    v17 = (const void *)_windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 16) * v6, 0x410uLL);
    result = memcmp(v16, v17, 0x400uLL);
    if (!(_DWORD)result)
    {
      *(float *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8) + 24) = *a3;
LABEL_12:
      *a4 = 1;
    }
  }
  return result;
}

uint64_t IVFVectorIndexTemplate<float,256>::IVFVectorIndexRootBase::trainOnce(uint64_t *a1, std::string::size_type *a2, uint64_t a3, unsigned int a4)
{
  double Current;
  std::string::size_type v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  NSObject *v27;
  uint64_t v28;
  int v29;
  int v30;
  size_t v31;
  unint64_t v32;
  std::string *v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  int v37;
  std::string *v38;
  std::string::size_type size;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  const char *v44;
  _QWORD *FdPtrForFile;
  _QWORD *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  size_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  _QWORD *v65;
  size_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t *v76;
  char *v77;
  __int128 v78;
  int v79;
  NSObject *v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  const void *v86;
  _BYTE *v87;
  _BYTE *v88;
  _BYTE *v89;
  int64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  int64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t *v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  void *v116;
  void *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  __int128 v121;
  unint64_t *v122;
  uint64_t v123;
  size_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  int v134;
  int v135;
  std::string::size_type v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  const void *v141;
  const void *v142;
  uint64_t v143;
  float *v144;
  float v145;
  _QWORD *v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  int v154;
  int v155;
  NSObject *v156;
  unsigned int v157;
  uint64_t v158;
  unint64_t v159;
  unsigned int v160;
  unint64_t v161;
  void *v162;
  size_t v163;
  __int128 *v164;
  std::string::size_type v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::string::size_type v169;
  unint64_t v170;
  unint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  __int128 v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  int v183;
  std::__shared_weak_count *v184;
  int v185;
  unint64_t *v186;
  unint64_t v187;
  int v188;
  NSObject *v189;
  int v190;
  int v191;
  CFAbsoluteTime v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  __int128 *v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  int64_t v208;
  uint64_t v209;
  uint64_t *v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  _BYTE *v215;
  int v216;
  char *v217;
  char *v218;
  const char *v219;
  uint64_t v220;
  char *v221;
  char *v222;
  const char *v223;
  char *v224;
  const char *v225;
  char *v226;
  const char *v227;
  char *v228;
  const char *v229;
  char *v230;
  const char *v231;
  char *v232;
  const char *v233;
  __int128 v234;
  uint64_t v235;
  size_t v236;
  std::string::size_type v237;
  std::string::size_type v238;
  uint64_t v239;
  int v240;
  unsigned int v241;
  std::__shared_weak_count *v242;
  _DWORD *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  std::string::size_type v246;
  int v247;
  std::string::size_type *v248;
  __int128 v249;
  std::string::size_type v250;
  std::__shared_weak_count *v251;
  std::string v252;
  std::__shared_weak_count *v253;
  _QWORD v254[7];
  std::__shared_weak_count *v255;
  int v256;
  int v257;
  _BYTE v258[24];
  __int128 v259;
  _BYTE *v260;
  _BYTE *v261;
  unint64_t v262;
  uint64_t v263;
  std::__shared_weak_count *v264;
  std::string v265;
  _BYTE v266[1000];
  uint64_t v267;

  v241 = a4;
  v239 = a3;
  v267 = *MEMORY[0x1E0C80C00];
  Current = CFAbsoluteTimeGetCurrent();
  v263 = 0;
  v264 = 0;
  QuantizerManager<float,256>::lastTrainedQuantizer(&v263, *a1);
  v7 = a2[1];
  v237 = *a2;
  v238 = v7;
  v8 = v7 - v237;
  if (v7 == v237)
  {
    v9 = 0;
  }
  else
  {
    if (v8 < 0)
      goto LABEL_322;
    v9 = operator new((unint64_t)v8 >> 1);
    bzero(v9, (unint64_t)v8 >> 1);
  }
  v235 = v8;
  v236 = v8 >> 3;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v263 + 24))(v263);
  if (v238 != v237)
  {
    v11 = 0;
    if (v236 <= 1)
      v12 = 1;
    else
      v12 = v236;
    while (1)
    {
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(*a2 + 8 * v11) + 16))(v266);
      v13 = v263;
      v15 = *(_QWORD *)v266;
      v14 = *(std::__shared_weak_count **)&v266[8];
      if (*(_QWORD *)&v266[8])
      {
        v16 = (unint64_t *)(*(_QWORD *)&v266[8] + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (v15 != v13)
        break;
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(*a2 + 8 * v11) + 24))(v266);
      v18 = *(std::__shared_weak_count **)&v266[8];
      *((_DWORD *)v9 + v11) = *(_DWORD *)(*(_QWORD *)v266 + 72);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(*a2 + 8 * v11) + 24))(v266);
      v21 = *(std::__shared_weak_count **)&v266[8];
      v22 = *(_DWORD *)(*(_QWORD *)v266 + 68);
      if (*(_QWORD *)&v266[8])
      {
        v23 = (unint64_t *)(*(_QWORD *)&v266[8] + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      if (v22 != v10)
      {
        v221 = __si_assert_copy_extra_268();
        v222 = v221;
        v223 = "";
        if (v221)
          v223 = v221;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1967, "vectorIndexes[i]->getPartitions()->nPartitions() == nPartitions", v223);
LABEL_316:
        free(v222);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if (++v11 == v12)
        goto LABEL_27;
    }
    v217 = __si_assert_copy_extra_268();
    v218 = v217;
    v219 = "";
    if (v217)
      v219 = v217;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1965, "vectorIndexes[i]->getQuantizer() == quantizer", v219);
LABEL_297:
    free(v218);
    if (__valid_fs(-1))
      v220 = 2989;
    else
      v220 = 3072;
    *(_DWORD *)v220 = -559038737;
    abort();
  }
LABEL_27:
  v25 = *a1;
  v26 = atomic_load((unsigned __int8 *)(v25 + 72));
  if ((v26 & 1) == 0)
  {
    v232 = __si_assert_copy_extra_268();
    v218 = v232;
    v233 = "";
    if (v232)
      v233 = v232;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 752, "_training.test()", v233);
    goto LABEL_297;
  }
  if (*(_QWORD *)(v25 + 96))
  {
    v27 = *(NSObject **)(v25 + 16);
    *(_QWORD *)v266 = MEMORY[0x1E0C809B0];
    *(_QWORD *)&v266[8] = 0x40000000;
    *(_QWORD *)&v266[16] = ___ZN16QuantizerManagerIfLi256EE23commitTrainingQuantizerEv_block_invoke;
    *(_QWORD *)&v266[24] = &__block_descriptor_tmp_578;
    *(_QWORD *)&v266[32] = v25;
    dispatch_sync(v27, v266);
  }
  v28 = *(_QWORD *)(v25 + 80);
  v247 = v10;
  if (v28)
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28) + 1;
  else
    v29 = 1;
  v30 = *(char *)(v25 + 71);
  if (v30 >= 0)
    v31 = *(unsigned __int8 *)(v25 + 71);
  else
    v31 = *(_QWORD *)(v25 + 56);
  v32 = v31 + 1;
  if (v31 + 1 >= 0x7FFFFFFFFFFFFFF8)
LABEL_322:
    abort();
  if (v32 >= 0x17)
  {
    v34 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v34 = v32 | 7;
    v35 = v34 + 1;
    v33 = (std::string *)operator new(v34 + 1);
    v252.__r_.__value_.__l.__size_ = v31 + 1;
    v252.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
    v252.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
  }
  else
  {
    memset(&v252, 0, sizeof(v252));
    v33 = &v252;
    *((_BYTE *)&v252.__r_.__value_.__s + 23) = v31 + 1;
    if (!v31)
      goto LABEL_47;
  }
  if (v30 >= 0)
    v36 = (const void *)(v25 + 48);
  else
    v36 = *(const void **)(v25 + 48);
  memmove(v33, v36, v31);
LABEL_47:
  v37 = v247;
  *(_WORD *)((char *)&v33->__r_.__value_.__l.__data_ + v31) = 46;
  std::to_string(&v265, v29);
  if ((v265.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = &v265;
  else
    v38 = (std::string *)v265.__r_.__value_.__r.__words[0];
  if ((v265.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v265.__r_.__value_.__r.__words[2]);
  else
    size = v265.__r_.__value_.__l.__size_;
  v40 = std::string::append(&v252, (const std::string::value_type *)v38, size);
  v41 = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)v266 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  *(_QWORD *)&v266[16] = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  v42 = std::string::append((std::string *)v266, ".quantizer");
  v43 = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)v258 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  *(_QWORD *)&v258[16] = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if ((v266[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v265.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_55;
LABEL_107:
    operator delete(v265.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v252.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_56;
    goto LABEL_108;
  }
  operator delete(*(void **)v266);
  if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_107;
LABEL_55:
  if ((SHIBYTE(v252.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_56;
LABEL_108:
  operator delete(v252.__r_.__value_.__l.__data_);
LABEL_56:
  if (v258[23] >= 0)
    v44 = v258;
  else
    v44 = *(const char **)v258;
  FdPtrForFile = QuantizerManager<float,768>::createFdPtrForFile(v25, v44);
  if (FdPtrForFile)
  {
    v46 = FdPtrForFile;
    v47 = operator new();
    *(_QWORD *)v266 = v46;
    *(_QWORD *)&v266[8] = 0x1000000;
    *(_DWORD *)&v266[16] = 0;
    *(_DWORD *)&v266[20] = 65792;
    *(_DWORD *)&v266[24] = v29;
    *(_DWORD *)&v266[28] = 0;
    AllocatedVectorQuantizer<vi_onefixedsize_disk_allocator,float,256>::AllocatedVectorQuantizer(v47, (uint64_t)v266);
    v48 = (std::__shared_weak_count *)operator new();
    v48->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E32688;
    v48->__shared_owners_ = 0;
    v48->__shared_weak_owners_ = 0;
    v48[1].__vftable = (std::__shared_weak_count_vtbl *)v47;
    v49 = *(std::__shared_weak_count **)(v25 + 104);
    *(_QWORD *)(v25 + 96) = v47;
    *(_QWORD *)(v25 + 104) = v48;
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (v51)
      {
        v47 = *(_QWORD *)(v25 + 96);
        v48 = *(std::__shared_weak_count **)(v25 + 104);
        if (v48)
          goto LABEL_65;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
        v47 = *(_QWORD *)(v25 + 96);
        v48 = *(std::__shared_weak_count **)(v25 + 104);
        if (v48)
          goto LABEL_65;
      }
      v245 = 0;
      if ((v258[23] & 0x80000000) == 0)
        goto LABEL_68;
      goto LABEL_111;
    }
LABEL_65:
    v245 = v48;
    v52 = (unint64_t *)&v48->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
    if ((v258[23] & 0x80000000) == 0)
      goto LABEL_68;
    goto LABEL_111;
  }
  v79 = *__error();
  v80 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v80, OS_LOG_TYPE_FAULT))
  {
    v215 = v258;
    if (v258[23] < 0)
      v215 = *(_BYTE **)v258;
    v216 = *(_DWORD *)v25;
    *(_DWORD *)v266 = 136315906;
    *(_QWORD *)&v266[4] = "newQuantizer";
    *(_WORD *)&v266[12] = 1024;
    *(_DWORD *)&v266[14] = 772;
    *(_WORD *)&v266[18] = 2080;
    *(_QWORD *)&v266[20] = v215;
    *(_WORD *)&v266[28] = 1024;
    *(_DWORD *)&v266[30] = v216;
    _os_log_fault_impl(&dword_1B8270000, v80, OS_LOG_TYPE_FAULT, "%s:%d: Failed to create %s in parentFd: %i", v266, 0x22u);
  }
  v47 = 0;
  v245 = 0;
  *__error() = v79;
  if ((v258[23] & 0x80000000) == 0)
  {
LABEL_68:
    if (v47)
      goto LABEL_69;
LABEL_112:
    v81 = v245;
    goto LABEL_272;
  }
LABEL_111:
  operator delete(*(void **)v258);
  if (!v47)
    goto LABEL_112;
LABEL_69:
  v248 = a2;
  v243 = v9;
  v259 = 0u;
  *(_OWORD *)&v258[8] = 0u;
  *(_QWORD *)v258 = off_1E6E32710;
  v260 = 0;
  v261 = 0;
  v262 = 0;
  bzero(v266, 0x400uLL);
  snprintf(v266, 0x400uLL, "A0-%ux%dx%u", v239, 256, 32);
  MEMORY[0x1BCCB03B0](&v258[8], v266);
  v246 = v47;
  v54 = MEMORY[0x1E0C809B0];
  if ((_DWORD)v239)
  {
    memset(v266, 0, 24);
    if (v238 == v237)
    {
      v57 = 0;
      v56 = 0;
    }
    else
    {
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v58 = 0;
      if (v236 <= 1)
        v59 = 1;
      else
        v59 = v236;
      do
      {
        memset(&v252, 0, sizeof(v252));
        (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(*v248 + 8 * v55) + 24))(&v265);
        MaxSizePriorityQueue<AnyPartitionStore::CandidateEntry,std::vector<AnyPartitionStore::CandidateEntry>,AnyPartitionStore::CandidateQueue::Lesser>::allItems((uint64_t **)&v252, *(_BYTE **)(v265.__r_.__value_.__r.__words[0] + 32), *(_BYTE **)(v265.__r_.__value_.__r.__words[0] + 40));
        v60 = (std::__shared_weak_count *)v265.__r_.__value_.__l.__size_;
        if (v265.__r_.__value_.__l.__size_)
        {
          v61 = (unint64_t *)(v265.__r_.__value_.__l.__size_ + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        v63 = (_BYTE *)v252.__r_.__value_.__l.__size_;
        v64 = (_BYTE *)v252.__r_.__value_.__r.__words[0];
        if (v252.__r_.__value_.__l.__size_ != v252.__r_.__value_.__r.__words[0])
        {
          v65 = *(_QWORD **)&v266[8];
          if (*(_QWORD *)&v266[8] >= *(_QWORD *)&v266[16])
          {
            v69 = std::vector<std::vector<AnyPartitionStore::CandidateEntry>>::__push_back_slow_path<std::vector<AnyPartitionStore::CandidateEntry> const&>((char **)v266, v252.__r_.__value_.__l.__data_, v252.__r_.__value_.__l.__size_);
          }
          else
          {
            **(_QWORD **)&v266[8] = 0;
            v65[1] = 0;
            v65[2] = 0;
            v66 = v63 - v64;
            if (v63 - v64 < 0)
              goto LABEL_322;
            v67 = (char *)operator new(v63 - v64);
            *v65 = v67;
            v65[1] = v67;
            v68 = &v67[v66];
            v65[2] = &v67[v66];
            memcpy(v67, v64, v66);
            v65[1] = v68;
            v69 = (char *)(v65 + 3);
          }
          *(_QWORD *)&v266[8] = v69;
          v71 = *((_QWORD *)v69 - 3);
          v70 = *((_QWORD *)v69 - 2);
          if (v57 >= v58)
          {
            v72 = 0xAAAAAAAAAAAAAAABLL * ((v57 - (char *)v56) >> 3) + 1;
            if (v72 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_322;
            if (0x5555555555555556 * ((v58 - (char *)v56) >> 3) > v72)
              v72 = 0x5555555555555556 * ((v58 - (char *)v56) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v58 - (char *)v56) >> 3) >= 0x555555555555555)
              v73 = 0xAAAAAAAAAAAAAAALL;
            else
              v73 = v72;
            if (v73)
            {
              if (v73 > 0xAAAAAAAAAAAAAAALL)
LABEL_323:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v74 = (char *)operator new(24 * v73);
            }
            else
            {
              v74 = 0;
            }
            v75 = &v74[8 * ((v57 - (char *)v56) >> 3)];
            *(_QWORD *)v75 = v71;
            *((_QWORD *)v75 + 1) = v70;
            *((_QWORD *)v75 + 2) = v55;
            v76 = (uint64_t *)v75;
            if (v57 != (char *)v56)
            {
              v77 = &v74[8 * ((v57 - (char *)v56) >> 3)];
              do
              {
                v76 = (uint64_t *)(v77 - 24);
                v78 = *(_OWORD *)(v57 - 24);
                *((_QWORD *)v77 - 1) = *((_QWORD *)v57 - 1);
                *(_OWORD *)(v77 - 24) = v78;
                v57 -= 24;
                v77 -= 24;
              }
              while (v57 != (char *)v56);
            }
            v58 = &v74[24 * v73];
            if (v56)
              operator delete(v56);
            v57 = v75;
            v56 = v76;
          }
          else
          {
            *(_QWORD *)v57 = v71;
            *((_QWORD *)v57 + 1) = v70;
            *((_QWORD *)v57 + 2) = v55;
          }
          v57 += 24;
          v63 = (_BYTE *)v252.__r_.__value_.__r.__words[0];
        }
        if (v63)
          operator delete(v63);
        ++v55;
      }
      while (v55 != v59);
    }
    v82 = v57 - (char *)v56;
    if (v57 - (char *)v56 >= 25 && (unint64_t)v82 >= 0x30)
    {
      v208 = (v82 / 0x18uLL - 2) >> 1;
      v209 = v208;
      do
      {
        if (v208 >= v209)
        {
          v210 = &v56[3 * v209];
          v211 = *(_OWORD *)v210;
          v212 = v210[2];
          v213 = v209;
          do
          {
            v214 = v210;
            v213 = (2 * v213) | 1;
            v210 = &v56[3 * v213];
            *v214 = *v210;
            *(_OWORD *)(v214 + 1) = *(_OWORD *)(v210 + 1);
          }
          while (v208 >= v213);
          *(_OWORD *)v210 = v211;
          v210[2] = v212;
        }
        v101 = v209-- <= 0;
      }
      while (!v101);
    }
    for (; v57 != (char *)v56; v82 = v57 - (char *)v56)
    {
      if (((unint64_t)(v261 - v260) >> 10) >= v239)
        break;
      v85 = *(_QWORD *)(*v248 + 8 * v56[2]);
      v86 = (const void *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v85 + 32))(v85, *(unsigned int *)*v56);
      v87 = v261;
      if ((unint64_t)v261 >= v262)
      {
        v244 = v82;
        v89 = v260;
        v90 = (v261 - v260) >> 10;
        v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 54)
          goto LABEL_322;
        v92 = v262 - (_QWORD)v260;
        if ((uint64_t)(v262 - (_QWORD)v260) >> 9 > v91)
          v91 = v92 >> 9;
        v93 = (unint64_t)v92 >= 0x7FFFFFFFFFFFFC00 ? 0x3FFFFFFFFFFFFFLL : v91;
        if (v93)
        {
          if (v93 >> 54)
            goto LABEL_323;
          v94 = (std::__shared_weak_count *)operator new(v93 << 10);
        }
        else
        {
          v94 = 0;
        }
        v242 = v94;
        v95 = (char *)v94 + 1024 * v90;
        memcpy(v95, v86, 0x400uLL);
        v96 = v95;
        if (v87 != v89)
        {
          do
          {
            v87 -= 1024;
            v96 -= 1024;
            memcpy(v96, v87, 0x400uLL);
          }
          while (v87 != v89);
          v87 = v89;
        }
        v88 = v95 + 1024;
        v260 = v96;
        v261 = v88;
        v262 = (unint64_t)v242 + 1024 * v93;
        v82 = v244;
        if (v87)
          operator delete(v87);
      }
      else
      {
        memcpy(v261, v86, 0x400uLL);
        v88 = v87 + 1024;
      }
      v261 = v88;
      v97 = v56[1];
      v98 = *v56 + 8;
      *v56 = v98;
      if (v98 == v97)
      {
        if (v82 >= 25)
        {
          v107 = 0;
          v108 = v56[2];
          v109 = v56;
          do
          {
            v110 = v109;
            v111 = &v109[3 * v107];
            v112 = v111[3];
            v109 = v111 + 3;
            v107 = (2 * v107) | 1;
            *v110 = v112;
            *(_OWORD *)(v110 + 1) = *(_OWORD *)(v109 + 1);
          }
          while (v107 <= (uint64_t)((v82 / 0x18uLL - 2) >> 1));
          if (v109 == (uint64_t *)(v57 - 24))
          {
            v83 = (char *)(v109 + 1);
            v84 = (char *)(v109 + 2);
          }
          else
          {
            *v109 = *((_QWORD *)v57 - 3);
            v83 = v57 - 16;
            v84 = v57 - 8;
            *(_OWORD *)(v109 + 1) = *((_OWORD *)v57 - 1);
            v109 = (uint64_t *)(v57 - 24);
          }
          *v109 = v98;
          *(_QWORD *)v83 = v97;
          *(_QWORD *)v84 = v108;
        }
        v57 -= 24;
      }
      else if (v82 >= 48)
      {
        v99 = (v82 / 0x18uLL - 2) >> 1;
        v100 = v99;
        do
        {
          if (v99 >= v100)
          {
            v102 = &v56[3 * v100];
            v103 = *(_OWORD *)v102;
            v104 = v102[2];
            v105 = v100;
            do
            {
              v106 = v102;
              v105 = (2 * v105) | 1;
              v102 = &v56[3 * v105];
              *v106 = *v102;
              *(_OWORD *)(v106 + 1) = *(_OWORD *)(v102 + 1);
            }
            while (v99 >= v105);
            *(_OWORD *)v102 = v103;
            v102[2] = v104;
          }
          v101 = v100-- <= 0;
        }
        while (!v101);
      }
    }
    v113 = *(char **)v266;
    v37 = v247;
    v54 = MEMORY[0x1E0C809B0];
    if (*(_QWORD *)v266)
    {
      v114 = *(char **)&v266[8];
      if (*(_QWORD *)&v266[8] != *(_QWORD *)v266)
      {
        v115 = *(char **)&v266[8];
        do
        {
          v117 = (void *)*((_QWORD *)v115 - 3);
          v115 -= 24;
          v116 = v117;
          if (v117)
          {
            *((_QWORD *)v114 - 2) = v116;
            operator delete(v116);
          }
          v114 = v115;
        }
        while (v115 != v113);
      }
      operator delete(v113);
    }
    if (v56)
      operator delete(v56);
  }
  v244 = (unint64_t)(v261 - v260) >> 10;
  v118 = (std::__shared_weak_count_vtbl *)operator new[]();
  v119 = v118;
  if (v37 + (_DWORD)v244)
    bzero(v118, 1028 * ((1028 * (unint64_t)(v37 + v244) - 1028) / 0x404) + 1028);
  v120 = (std::__shared_weak_count *)operator new();
  v120->__shared_owners_ = 0;
  v122 = (unint64_t *)&v120->__shared_owners_;
  v120->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E31488;
  v120->__shared_weak_owners_ = 0;
  v120[1].__vftable = v119;
  v242 = v120;
  if (v238 != v237)
  {
    v123 = 0;
    if (v236 <= 1)
      v124 = 1;
    else
      v124 = v236;
    do
    {
      v125 = *(_QWORD *)(*v248 + 8 * v123);
      *(_QWORD *)v266 = 0;
      *(_QWORD *)&v266[8] = 0;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v125 + 24))(v266, v125);
      v126 = *(_QWORD *)v266;
      v254[0] = v54;
      v254[1] = 1174405120;
      v254[2] = ___ZN22IVFVectorIndexTemplateIfLi256EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIfLi256EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj_block_invoke;
      v254[3] = &__block_descriptor_tmp_574;
      v254[4] = v125;
      v254[5] = v258;
      v256 = v244;
      v257 = v247;
      v254[6] = v119;
      v255 = v242;
      do
        v127 = __ldxr(v122);
      while (__stxr(v127 + 1, v122));
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v126 + 64))(v126, v254);
      v128 = v255;
      if (!v255)
        goto LABEL_178;
      v129 = (unint64_t *)&v255->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
        v131 = *(std::__shared_weak_count **)&v266[8];
        if (*(_QWORD *)&v266[8])
        {
LABEL_179:
          v132 = (unint64_t *)&v131->__shared_owners_;
          do
            v133 = __ldaxr(v132);
          while (__stlxr(v133 - 1, v132));
          if (!v133)
          {
            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
            std::__shared_weak_count::__release_weak(v131);
          }
        }
      }
      else
      {
LABEL_178:
        v131 = *(std::__shared_weak_count **)&v266[8];
        if (*(_QWORD *)&v266[8])
          goto LABEL_179;
      }
      ++v123;
    }
    while (v123 != v124);
  }
  v134 = v247;
  if (v247 + ((unint64_t)(v261 - v260) >> 10))
  {
    v143 = 0;
    v135 = 0;
    *(_QWORD *)&v121 = 67109376;
    v234 = v121;
    v136 = v246;
    while (1)
    {
      v144 = (float *)((char *)v119 + 1028 * v143);
      v145 = v144[256];
      if (v145 < v241)
      {
        ++v135;
        if (dword_1EF19FCCC >= 5)
        {
          v154 = v135;
          v155 = *__error();
          v156 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT))
          {
            v157 = v144[256];
            *(_DWORD *)v266 = v234;
            *(_DWORD *)&v266[4] = v143;
            *(_WORD *)&v266[8] = 1024;
            *(_DWORD *)&v266[10] = v157;
            _os_log_impl(&dword_1B8270000, v156, OS_LOG_TYPE_DEFAULT, "remove outlier newCentroid[%u] with member: %u", v266, 0xEu);
          }
          *__error() = v155;
          v135 = v154;
        }
        goto LABEL_195;
      }
      if (v145 <= 0.0)
      {
        v226 = __si_assert_copy_extra_268();
        v222 = v226;
        v227 = "";
        if (v226)
          v227 = v226;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 152, "_count > 0.0f", v227);
        goto LABEL_316;
      }
      if (*(_BYTE *)(v136 + 56))
      {
        v228 = __si_assert_copy_extra_268();
        v222 = v228;
        v229 = "";
        if (v228)
          v229 = v228;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 522, "!readOnly", v229);
        goto LABEL_316;
      }
      v240 = v135;
      v146 = *(_QWORD **)(v136 + 40);
      v147 = v146[2];
      v148 = v146[7];
      v149 = v148 + v147;
      if (v148 + v147 < v146[6])
        goto LABEL_200;
      if (_storage_array_Expand((uint64_t)(v146 + 1)))
        break;
      v150 = 0;
      if (v147 <= 0x3FF)
      {
LABEL_201:
        v151 = v146[2];
        if (v151 <= 0x3FF)
        {
          LODWORD(v152) = 1024;
          do
          {
            v153 = v146[7] + v151;
            if (v153 >= v146[6])
            {
              if (!_storage_array_Expand((uint64_t)(v146 + 1)))
                goto LABEL_205;
              v153 = v146[7] + v151;
            }
            v146[7] = v153;
LABEL_205:
            v151 = v146[2];
            v152 = (v152 - v151);
          }
          while (v151 < v152);
        }
      }
LABEL_215:
      v158 = (uint64_t)(v146 + 524);
      bit_vector_set_9027(v158, (v150 >> 20));
      v159 = (v150 + 1024) >> 20;
      if (v159 > (v150 >> 20))
      {
        v160 = (v150 >> 20) + 1;
        do
        {
          v161 = v160;
          bit_vector_set_9027(v158, v160++);
        }
        while (v159 > v161);
      }
      v136 = v246;
      if (v150 != *(_DWORD *)(v246 + 48))
      {
        v230 = __si_assert_copy_extra_268();
        v222 = v230;
        v231 = "";
        if (v230)
          v231 = v230;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 524, "offset == nCentroids", v231);
        goto LABEL_316;
      }
      v162 = (void *)_windowsResolvePtr(*(_QWORD *)(v246 + 40) + 40, *(_QWORD *)(*(_QWORD *)(v246 + 40) + 24) + *(_QWORD *)(*(_QWORD *)(v246 + 40) + 16) * v150, 0x400uLL);
      memcpy(v162, (char *)v119 + 1028 * v143, 0x400uLL);
      ++*(_DWORD *)(v246 + 48);
      *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v136 + 40) + 40, 0x400uLL, *(_QWORD *)(*(_QWORD *)(v136 + 40) + 16))+ 4) = *(_DWORD *)(v136 + 48);
      v134 = v247;
      v135 = v240;
LABEL_195:
      if (++v143 >= (unint64_t)(v134 + ((unint64_t)(v261 - v260) >> 10)))
        goto LABEL_187;
    }
    v148 = v146[7];
    v149 = v148 + v147;
LABEL_200:
    v146[7] = v149;
    v150 = (v148 - v146[3]) / v147;
    if (v147 <= 0x3FF)
      goto LABEL_201;
    goto LABEL_215;
  }
  v135 = 0;
  v136 = v246;
LABEL_187:
  v240 = v135;
  v137 = v263;
  v138 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v263 + 24))(v263);
  v139 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v136 + 24))(v136);
  if (v138 == (_DWORD)v139)
  {
    v139 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v137 + 24))(v137);
    if ((_DWORD)v139)
    {
      v140 = 0;
      while (1)
      {
        v141 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v137 + 64))(v137, v140);
        v142 = (const void *)(*(uint64_t (**)(std::string::size_type, uint64_t))(*(_QWORD *)v136 + 64))(v136, v140);
        v139 = memcmp(v141, v142, 0x400uLL);
        v47 = (_DWORD)v139 != 0;
        if ((_DWORD)v139)
          break;
        v140 = (v140 + 1);
        v139 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v137 + 24))(v137);
        if (v140 >= v139)
          goto LABEL_192;
      }
    }
    else
    {
LABEL_192:
      v47 = 0;
    }
  }
  else
  {
    v47 = 1;
  }
  v163 = 16 * v236;
  MEMORY[0x1E0C80A78](v139);
  v164 = &v234 - v236;
  bzero(v164, 2 * v235);
  if (v238 != v237)
    bzero((char *)&v234 - v163, v163);
  v165 = *v248;
  v252.__r_.__value_.__r.__words[0] = (std::string::size_type)&v234 - v163;
  v252.__r_.__value_.__l.__size_ = v165;
  v166 = v245;
  v252.__r_.__value_.__r.__words[2] = v136;
  v253 = v245;
  if (v245)
  {
    v167 = (unint64_t *)&v245->__shared_owners_;
    do
      v168 = __ldxr(v167);
    while (__stxr(v168 + 1, v167));
  }
  dispatch_apply_f(v236, 0, &v252, (void (__cdecl *)(void *, size_t))IVFVectorIndexTemplate<float,256>::IVFVectorIndexRootBase::trainOnce(std::shared_ptr<QuantizerManager<float,256>>,std::vector<IVFVectorIndexTemplate<float,256>::IVFVectorIndexRootBase*,std::allocator<IVFVectorIndexTemplate<float,256>::IVFVectorIndexRootBase*>>,unsigned int,unsigned int)::{lambda(void *,unsigned long)#1}::__invoke);
  v169 = *v248;
  if (v248[1] != *v248)
  {
    v170 = 0;
    v171 = (unint64_t *)&v166->__shared_owners_;
    do
    {
      v172 = *(_QWORD *)(v169 + 8 * v170);
      v250 = v136;
      v251 = v166;
      if (v166)
      {
        do
          v173 = __ldxr(v171);
        while (__stxr(v173 + 1, v171));
      }
      v174 = v164[v170];
      v249 = v174;
      if (*((_QWORD *)&v174 + 1))
      {
        v175 = (unint64_t *)(*((_QWORD *)&v174 + 1) + 8);
        do
          v176 = __ldxr(v175);
        while (__stxr(v176 + 1, v175));
      }
      (*(void (**)(uint64_t, std::string::size_type *, __int128 *))(*(_QWORD *)v172 + 48))(v172, &v250, &v249);
      v177 = (std::__shared_weak_count *)*((_QWORD *)&v249 + 1);
      if (!*((_QWORD *)&v249 + 1))
        goto LABEL_237;
      v178 = (unint64_t *)(*((_QWORD *)&v249 + 1) + 8);
      do
        v179 = __ldaxr(v178);
      while (__stlxr(v179 - 1, v178));
      if (!v179)
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
        v180 = v251;
        if (!v251)
          goto LABEL_243;
      }
      else
      {
LABEL_237:
        v180 = v251;
        if (!v251)
          goto LABEL_243;
      }
      v181 = (unint64_t *)&v180->__shared_owners_;
      do
        v182 = __ldaxr(v181);
      while (__stlxr(v182 - 1, v181));
      if (!v182)
      {
        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
        std::__shared_weak_count::__release_weak(v180);
      }
LABEL_243:
      v183 = v243[v170];
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(*v248 + 8 * v170) + 24))(v266);
      v184 = *(std::__shared_weak_count **)&v266[8];
      v185 = *(_DWORD *)(*(_QWORD *)v266 + 72);
      if (*(_QWORD *)&v266[8])
      {
        v186 = (unint64_t *)(*(_QWORD *)&v266[8] + 8);
        do
          v187 = __ldaxr(v186);
        while (__stlxr(v187 - 1, v186));
        if (!v187)
        {
          ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
          std::__shared_weak_count::__release_weak(v184);
        }
      }
      if (v183 != v185)
      {
        v224 = __si_assert_copy_extra_268();
        v222 = v224;
        v225 = "";
        if (v224)
          v225 = v224;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2056, "vectorCounts[i] == vectorIndexes[i]->getPartitions()->nVectors()", v225);
        goto LABEL_316;
      }
      ++v170;
      v169 = *v248;
      v166 = v245;
      v136 = v246;
    }
    while (v170 < (uint64_t)(v248[1] - *v248) >> 3);
  }
  v188 = *__error();
  v189 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
  {
    v190 = v240;
    v191 = v244 - v240;
    v192 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)v266 = 67110144;
    *(_DWORD *)&v266[4] = v239;
    *(_WORD *)&v266[8] = 1024;
    *(_DWORD *)&v266[10] = v191;
    *(_WORD *)&v266[14] = 1024;
    *(_DWORD *)&v266[16] = v190;
    *(_WORD *)&v266[20] = 1024;
    *(_DWORD *)&v266[22] = v47;
    *(_WORD *)&v266[26] = 2048;
    *(double *)&v266[28] = v192 - Current;
    _os_log_impl(&dword_1B8270000, v189, OS_LOG_TYPE_DEFAULT, "training quantizer try addCentroids=%u added=%d removed=%u changed=%d duration: %fs", v266, 0x24u);
  }
  *__error() = v188;
  v193 = v253;
  if (v253)
  {
    v194 = (unint64_t *)&v253->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  if (v238 != v237)
  {
    v196 = &v164[v236];
    do
    {
      v197 = (std::__shared_weak_count *)*((_QWORD *)v196 - 1);
      if (v197)
      {
        v198 = (unint64_t *)&v197->__shared_owners_;
        do
          v199 = __ldaxr(v198);
        while (__stlxr(v199 - 1, v198));
        if (!v199)
        {
          ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
          std::__shared_weak_count::__release_weak(v197);
        }
      }
      --v196;
    }
    while (v196 != v164);
  }
  do
    v200 = __ldaxr(v122);
  while (__stlxr(v200 - 1, v122));
  v81 = v245;
  if (!v200)
  {
    v201 = v242;
    ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
    std::__shared_weak_count::__release_weak(v201);
  }
  *(_QWORD *)v258 = off_1E6E32710;
  v9 = v243;
  if (v260)
  {
    v261 = v260;
    operator delete(v260);
  }
  *(_QWORD *)v258 = off_1E6E30F58;
  if (SBYTE7(v259) < 0)
    operator delete(*(void **)&v258[8]);
LABEL_272:
  if (v81)
  {
    v202 = (unint64_t *)&v81->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (v9)
    operator delete(v9);
  v204 = v264;
  if (v264)
  {
    v205 = (unint64_t *)&v264->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  return v47;
}

_QWORD *QuantizerManager<float,256>::lastTrainedQuantizer(_QWORD *result, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;

  v2 = atomic_load((unsigned __int8 *)(a2 + 72));
  if ((v2 & 1) == 0)
  {
    v9 = __si_assert_copy_extra_268();
    v10 = v9;
    v11 = "";
    if (v9)
      v11 = v9;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 730, "_training.test()", v11);
    free(v10);
    if (__valid_fs(-1))
      v12 = 2989;
    else
      v12 = 3072;
    *(_DWORD *)v12 = -559038737;
    abort();
  }
  v3 = *(_QWORD *)(a2 + 96);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 104);
    *result = v3;
    result[1] = v4;
    if (!v4)
      return result;
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(a2 + 80);
  if (v5)
  {
    v4 = *(_QWORD *)(a2 + 88);
    *result = v5;
    result[1] = v4;
    if (!v4)
      return result;
    goto LABEL_12;
  }
  if ((v6 & 1) == 0)
  {
    v14 = result;
    result = v14;
    if (v15)
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<Quantizer<float,256>>::~shared_ptr[abi:nn180100], &ZeroVectorQuantizer<float,256>::sharedInstance(void)::zvq, &dword_1B8270000);
      result = v14;
    }
  }
  if (ZeroVectorQuantizer<float,256>::sharedInstance(void)::onceToken != -1)
  {
    v13 = result;
    dispatch_once(&ZeroVectorQuantizer<float,256>::sharedInstance(void)::onceToken, &__block_literal_global_511);
    result = v13;
  }
  v4 = qword_1EF1AEE08;
  *result = ZeroVectorQuantizer<float,256>::sharedInstance(void)::zvq;
  result[1] = v4;
  if (v4)
  {
LABEL_12:
    v7 = (unint64_t *)(v4 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void ___ZN16QuantizerManagerIfLi256EE23commitTrainingQuantizerEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  int v10;
  std::string *p_p;
  std::string::size_type size;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  int64_t v16;
  uint64_t v17;
  void **v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  uint64_t *v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  void **v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  size_t prime;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  std::__shared_weak_count *v53;
  int v54;
  size_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  const void *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  void **v69;
  uint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v77;
  int *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::string __p;
  std::string __dst;
  std::string v84;
  void *v85[2];
  int64_t v86;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 80);
  if (!v2)
    goto LABEL_109;
  v3 = *(char *)(v1 + 71);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(v1 + 71);
  else
    v4 = *(_QWORD *)(v1 + 56);
  v5 = v4 + 1;
  if (v4 + 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_149:
    abort();
  if (v5 >= 0x17)
  {
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v7 = v5 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_16;
  }
  if (v3 >= 0)
    v9 = (const void *)(v1 + 48);
  else
    v9 = *(const void **)(v1 + 48);
  memmove(p_dst, v9, v4);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  std::to_string(&__p, v10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v13 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v84.__r_.__value_.__r.__words[2] = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v84, ".quantizer");
  v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)v85 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v86 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
LABEL_36:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_37;
  }
  operator delete(v84.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_36;
LABEL_24:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_25;
LABEL_37:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_25:
  v17 = *(_QWORD *)(v1 + 80);
  if (v86 >= 0)
    v18 = v85;
  else
    v18 = (void **)v85[0];
  fd_rename(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 40), (const char *)v18);
  MEMORY[0x1BCCB03B0](v17 + 8, v18);
  atomic_store(1u, (unsigned __int8 *)(*(_QWORD *)(v1 + 80) + 57));
  v20 = *(_QWORD *)(v1 + 80);
  v19 = *(std::__shared_weak_count **)(v1 + 88);
  v21 = v20;
  if (v19)
  {
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v23 = __ldxr(p_shared_weak_owners);
    while (__stxr(v23 + 1, p_shared_weak_owners));
    v21 = *(_QWORD *)(v1 + 80);
  }
  v24 = (uint64_t *)(v1 + 112);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
  v26 = v25;
  v27 = v25;
  v28 = *(_QWORD *)(v1 + 120);
  if (v28)
  {
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      v30 = v25;
      if (v28 <= v25)
        v30 = v25 % v28;
    }
    else
    {
      v30 = (v28 - 1) & v25;
    }
    v31 = *(void ***)(*v24 + 8 * v30);
    if (v31)
    {
      v32 = *v31;
      if (*v31)
      {
        if (v29.u32[0] < 2uLL)
        {
          while (1)
          {
            v34 = *((_QWORD *)v32 + 1);
            if (v34 == v25)
            {
              if (*((_DWORD *)v32 + 4) == v25)
                goto LABEL_94;
            }
            else if ((v34 & (v28 - 1)) != v30)
            {
              goto LABEL_56;
            }
            v32 = *(void **)v32;
            if (!v32)
              goto LABEL_56;
          }
        }
        do
        {
          v33 = *((_QWORD *)v32 + 1);
          if (v33 == v25)
          {
            if (*((_DWORD *)v32 + 4) == v25)
              goto LABEL_94;
          }
          else
          {
            if (v33 >= v28)
              v33 %= v28;
            if (v33 != v30)
              break;
          }
          v32 = *(void **)v32;
        }
        while (v32);
      }
    }
  }
  else
  {
    v30 = 0;
  }
LABEL_56:
  v32 = operator new(0x28uLL);
  *(_QWORD *)v32 = 0;
  *((_QWORD *)v32 + 1) = v27;
  *((_DWORD *)v32 + 4) = v26;
  *((_QWORD *)v32 + 3) = 0;
  *((_QWORD *)v32 + 4) = 0;
  v35 = (float)(unint64_t)(*(_QWORD *)(v1 + 136) + 1);
  v36 = *(float *)(v1 + 144);
  if (!v28 || (float)(v36 * (float)v28) < v35)
  {
    v37 = 1;
    if (v28 >= 3)
      v37 = (v28 & (v28 - 1)) != 0;
    v38 = v37 | (2 * v28);
    v39 = vcvtps_u32_f32(v35 / v36);
    if (v38 <= v39)
      prime = v39;
    else
      prime = v38;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v28 = *(_QWORD *)(v1 + 120);
    }
    if (prime > v28)
      goto LABEL_78;
    if (prime < v28)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(v1 + 136) / *(float *)(v1 + 144));
      if (v28 < 3 || (v42 = (uint8x8_t)vcnt_s8((int8x8_t)v28), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < v28)
LABEL_78:
        std::__hash_table<std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,std::__unordered_map_hasher<SIUnicodeString,std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,HashFunction,HashEqual,true>,std::__unordered_map_equal<SIUnicodeString,std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,HashEqual,HashFunction,true>,std::allocator<std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>>>::__do_rehash<true>(v1 + 112, prime);
    }
    v28 = *(_QWORD *)(v1 + 120);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v28 <= v27)
        v30 = v27 % v28;
      else
        v30 = v27;
    }
    else
    {
      v30 = (v28 - 1) & v27;
    }
  }
  v44 = *v24;
  v45 = *(_QWORD **)(*v24 + 8 * v30);
  if (v45)
  {
    *(_QWORD *)v32 = *v45;
LABEL_92:
    *v45 = v32;
    goto LABEL_93;
  }
  *(_QWORD *)v32 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v1 + 128) = v32;
  *(_QWORD *)(v44 + 8 * v30) = v1 + 128;
  if (*(_QWORD *)v32)
  {
    v46 = *(_QWORD *)(*(_QWORD *)v32 + 8);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v46 >= v28)
        v46 %= v28;
    }
    else
    {
      v46 &= v28 - 1;
    }
    v45 = (_QWORD *)(*v24 + 8 * v46);
    goto LABEL_92;
  }
LABEL_93:
  ++*(_QWORD *)(v1 + 136);
LABEL_94:
  if (v19)
  {
    v47 = std::__shared_weak_count::lock(v19);
    v48 = v47;
    if (v47)
    {
      v49 = (unint64_t *)&v47->__shared_weak_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
      std::__shared_weak_count::__release_weak(v19);
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v52 = __ldaxr(p_shared_owners);
      while (__stlxr(v52 - 1, p_shared_owners));
      if (v52)
        goto LABEL_105;
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      v19 = v48;
    }
    else
    {
      v20 = 0;
    }
    std::__shared_weak_count::__release_weak(v19);
  }
  else
  {
    v20 = 0;
    v48 = 0;
  }
LABEL_105:
  v53 = (std::__shared_weak_count *)*((_QWORD *)v32 + 4);
  *((_QWORD *)v32 + 3) = v20;
  *((_QWORD *)v32 + 4) = v48;
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  if (SHIBYTE(v86) < 0)
    operator delete(v85[0]);
LABEL_109:
  v54 = *(char *)(v1 + 71);
  if (v54 >= 0)
    v55 = *(unsigned __int8 *)(v1 + 71);
  else
    v55 = *(_QWORD *)(v1 + 56);
  v56 = v55 + 10;
  if (v55 + 10 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_149;
  if (v56 >= 0x17)
  {
    v58 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17)
      v58 = v56 | 7;
    v59 = v58 + 1;
    v57 = operator new(v58 + 1);
    v85[1] = (void *)(v55 + 10);
    v86 = v59 | 0x8000000000000000;
    v85[0] = v57;
  }
  else
  {
    v85[1] = 0;
    v86 = 0;
    v85[0] = 0;
    v57 = v85;
    HIBYTE(v86) = v55 + 10;
    if (!v55)
      goto LABEL_123;
  }
  if (v54 >= 0)
    v60 = (const void *)(v1 + 48);
  else
    v60 = *(const void **)(v1 + 48);
  memmove(v57, v60, v55);
LABEL_123:
  strcpy((char *)v57 + v55, ".quantizer");
  v62 = *(_QWORD *)(v1 + 96);
  v61 = *(_QWORD *)(v1 + 104);
  if (v61)
  {
    v63 = (unint64_t *)(v61 + 8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  v65 = *(std::__shared_weak_count **)(v1 + 88);
  *(_QWORD *)(v1 + 80) = v62;
  *(_QWORD *)(v1 + 88) = v61;
  if (v65)
  {
    v66 = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = *(_QWORD *)(v1 + 80);
  if (v86 >= 0)
    v69 = v85;
  else
    v69 = (void **)v85[0];
  fd_rename(*(_QWORD *)(*(_QWORD *)(v68 + 40) + 40), (const char *)v69);
  MEMORY[0x1BCCB03B0](v68 + 8, v69);
  v70 = *(_QWORD *)(v1 + 80);
  v71 = *(unint64_t **)(v70 + 40);
  *v71 = 0;
  vi_onefixedsize_disk_allocator::storeHeader(v71);
  storage_array_SyncPages(*(_QWORD *)(v70 + 40) + 8, *(_QWORD *)(v70 + 40) + 4192);
  storage_array_Truncate((uint64_t *)(*(_QWORD *)(v70 + 40) + 8));
  v72 = *(_QWORD *)(v70 + 40);
  fd_make_readonly(*(_QWORD *)(v72 + 40));
  v73 = *(_QWORD *)(v72 + 40);
  if (v73)
  {
    do
    {
      v74 = fchmodat(*(_DWORD *)(v73 + 44), *(const char **)(v73 + 72), 0x100u, 2048);
      v75 = g_prot_error_callback;
      if (v74 != -1 || g_prot_error_callback == 0)
        break;
      v77 = *(unsigned int *)(v73 + 40);
      v78 = __error();
    }
    while (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v75 + 16))(v75, v77, *v78, 19) & 1) != 0);
  }
  *(_BYTE *)(v70 + 56) = 1;
  v79 = *(std::__shared_weak_count **)(v1 + 104);
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  if (!v79)
    goto LABEL_144;
  v80 = (unint64_t *)&v79->__shared_owners_;
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v81 - 1, v80));
  if (v81)
  {
LABEL_144:
    if ((SHIBYTE(v86) & 0x80000000) == 0)
      return;
    goto LABEL_145;
  }
  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
  std::__shared_weak_count::__release_weak(v79);
  if (SHIBYTE(v86) < 0)
LABEL_145:
    operator delete(v85[0]);
}

float ___ZN22IVFVectorIndexTemplateIfLi256EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIfLi256EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj_block_invoke(uint64_t a1, unsigned int a2, float *a3)
{
  const void *v6;
  uint64_t v7;
  float *v8;
  float *v9;
  float v10;
  float result;
  void *__p;
  void *v13;
  uint64_t v14;

  v6 = (const void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32), *(unsigned int *)a3);
  if (*(_DWORD *)(a1 + 64))
  {
    __p = 0;
    v13 = 0;
    v14 = 0;
    (*(void (**)(void **__return_ptr, _QWORD, const void *, uint64_t))(**(_QWORD **)(a1 + 40) + 72))(&__p, *(_QWORD *)(a1 + 40), v6, 1);
    if (*((float *)__p + 1) < a3[1])
      a2 = *(_DWORD *)(a1 + 68) + *(_DWORD *)__p;
    v13 = __p;
    operator delete(__p);
  }
  v7 = *(_QWORD *)(a1 + 48);
  v8 = (float *)(v7 + 1028 * a2);
  v9 = v8 + 256;
  v10 = v8[256];
  if (v10 == 0.0)
  {
    memcpy((void *)(v7 + 1028 * a2), v6, 0x400uLL);
  }
  else
  {
    vDSP_vavlin((const float *)v6, 1, v8 + 256, v8, 1, 0x100uLL);
    v10 = *v9;
  }
  result = v10 + 1.0;
  *v9 = v10 + 1.0;
  return result;
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRootBase::trainOnce(std::shared_ptr<QuantizerManager<float,256>>,std::vector<IVFVectorIndexTemplate<float,256>::IVFVectorIndexRootBase*,std::allocator<IVFVectorIndexTemplate<float,256>::IVFVectorIndexRootBase*>>,unsigned int,unsigned int)::{lambda(void *,unsigned long)#1}::__invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v4 = a1[2];
  v5 = *(_QWORD *)(a1[1] + 8 * a2);
  v6 = (std::__shared_weak_count *)a1[3];
  v23 = v4;
  v24 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v5 + 40))(&v25, v5, &v23);
  v9 = (_QWORD *)(*a1 + 16 * a2);
  v11 = v25;
  v10 = v26;
  if (v26)
  {
    v12 = (unint64_t *)&v26->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = (std::__shared_weak_count *)v9[1];
  *v9 = v11;
  v9[1] = v10;
  if (!v14)
    goto LABEL_11;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = v26;
    if (!v26)
      goto LABEL_17;
  }
  else
  {
LABEL_11:
    v17 = v26;
    if (!v26)
      goto LABEL_17;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_17:
  v20 = v24;
  if (v24)
  {
    v21 = (unint64_t *)&v24->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

uint64_t __copy_helper_block_8_48c61_ZTSNSt3__110shared_ptrIA_23IVFVectorMeanCalculatorILi256EEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_8_48c61_ZTSNSt3__110shared_ptrIA_23IVFVectorMeanCalculatorILi256EEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_pointer<IVFVectorMeanCalculator<256> *,std::shared_ptr<IVFVectorMeanCalculator<256>[]>::__shared_ptr_default_delete<IVFVectorMeanCalculator<256>[],IVFVectorMeanCalculator<256>>,std::allocator<IVFVectorMeanCalculator<256>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

uint64_t std::__shared_ptr_pointer<IVFVectorMeanCalculator<256> *,std::shared_ptr<IVFVectorMeanCalculator<256>[]>::__shared_ptr_default_delete<IVFVectorMeanCalculator<256>[],IVFVectorMeanCalculator<256>>,std::allocator<IVFVectorMeanCalculator<256>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1BCCB068CLL);
  return result;
}

uint64_t ArrayVectorQuantizer<float,256>::~ArrayVectorQuantizer(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E6E32710;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void ArrayVectorQuantizer<float,256>::~ArrayVectorQuantizer(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E6E32710;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1BCCB06A4);
}

uint64_t ArrayVectorQuantizer<float,256>::count(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 10;
}

uint64_t ArrayVectorQuantizer<float,256>::getCentroid(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  char *v4;
  char *v5;
  const char *v6;

  v2 = *(_QWORD *)(a1 + 40);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 48) - v2) >> 10))
  {
    v4 = __si_assert_copy_extra_268();
    v5 = v4;
    v6 = "";
    if (v4)
      v6 = v4;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 443, "i < centroids.size()", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return v2 + ((unint64_t)a2 << 10);
}

uint64_t ___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE7compactIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_P12uint32_map_tP11TermIdStore18CICompactCallbacksPVi_block_invoke(uint64_t a1, unsigned int *a2, _BYTE *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  char *v13;
  char *v14;
  const char *v15;

  v6 = (uint64_t *)*((_QWORD *)a2 + 3);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *v6;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    if ((_DWORD)v8)
    {
      if (*(_DWORD *)(v7 + 4408) <= v8)
      {
        v13 = __si_assert_copy_extra(0);
        v14 = v13;
        v15 = "";
        if (v13)
          v15 = v13;
        __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 1530, "position && position < inMap->count", v15);
        free(v14);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      v10 = *(_QWORD *)(a1 + 48);
      v11 = storageResolvePtr(v7, 4 * *v6, 4uLL, 1);
      v8 = *(_QWORD *)storageResolvePtr(v10, 8 * *(unsigned int *)v11, 8uLL, 1);
    }
    else
    {
      v8 = 0;
    }
  }
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::insertForCompact(*(_QWORD *)(a1 + 56), a2[2], *((void **)a2 + 2), v8, *a2, *((float *)a2 + 1));
  result = 1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) && !**(_DWORD **)(a1 + 64))
    result = (*(uint64_t (**)(_QWORD))(a1 + 88))(*(_QWORD *)(a1 + 96));
  *a3 = result;
  return result;
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::insertForCompact(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5, float a6)
{
  os_unfair_lock_s *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  void *v22;
  uint64_t v23;
  float v24;
  char v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  const char *v32;

  v12 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v13 = *(std::__shared_weak_count **)(a1 + 88);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v17 = *(_QWORD *)(a1 + 96);
  v16 = *(std::__shared_weak_count **)(a1 + 104);
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  os_unfair_lock_unlock(v12);
  if ((_DWORD)a5 == -1)
  {
    v20 = a1;
    v21 = a2;
    v22 = a3;
    v23 = 0xFFFFFFFFLL;
    v24 = a6;
    v25 = 0;
  }
  else
  {
    if (*(_DWORD *)(v17 + 68) <= a5)
    {
      v30 = __si_assert_copy_extra_268();
      v31 = v30;
      v32 = "";
      if (v30)
        v32 = v30;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2605, "partID == VECTOR_NOT_FOUND || partID < cur.partitions->nPartitions()", v32);
      free(v31);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v20 = a1;
    v21 = a2;
    v22 = a3;
    v23 = a5;
    v24 = a6;
    v25 = 1;
  }
  *((_QWORD *)IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::lookupForInsert(v20, v21, v22, v23, v25, v24)+ 128) = a4;
  if (!v16)
    goto LABEL_15;
  v26 = (unint64_t *)&v16->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!v13)
      return;
  }
  else
  {
LABEL_15:
    if (!v13)
      return;
  }
  v28 = (unint64_t *)&v13->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

uint64_t ___ZNK22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(float))(*(_QWORD *)(a1 + 32) + 16))(*(float *)(a2 + 4));
  *a3 = **(_DWORD **)(a1 + 40) != 0;
  return result;
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::next(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t Ptr;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(_QWORD *)(a2 + 72))
  {
    for (i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + ((*(_QWORD *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * *(_QWORD *)(a2 + 64));
          ;
          i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + ((v11 >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * v11))
    {
      *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)i + 16))(i);
      if (!*(_QWORD *)(a2 + 72))
        break;
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + ((*(_QWORD *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * *(_QWORD *)(a2 + 64));
      v6 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
      if (v6)
      {
        *(_DWORD *)(a1 + 4) = v6[1];
        Ptr = vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(a2 + 16) + 16), *v6, 1044);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(Ptr + 1040);
        *(_QWORD *)(a1 + 16) = Ptr;
        *(_QWORD *)(a1 + 24) = Ptr + 1024;
        return;
      }
      v7 = *(std::__shared_weak_count **)(*(_QWORD *)(*(_QWORD *)(a2 + 40)
                                                    + ((*(_QWORD *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                                        + 16 * *(_QWORD *)(a2 + 64)
                                        + 8);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = *(_QWORD *)(a2 + 72) - 1;
      v11 = *(_QWORD *)(a2 + 64) + 1;
      *(_QWORD *)(a2 + 64) = v11;
      *(_QWORD *)(a2 + 72) = v10;
      if (v11 >= 0x200)
      {
        operator delete(**(void ***)(a2 + 40));
        *(_QWORD *)(a2 + 40) += 8;
        v10 = *(_QWORD *)(a2 + 72);
        v11 = *(_QWORD *)(a2 + 64) - 256;
        *(_QWORD *)(a2 + 64) = v11;
      }
      if (!v10)
        return;
    }
  }
}

unint64_t IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(uint64_t a1, unsigned int a2)
{
  char *v3;
  char *v4;
  const char *v5;

  if (*(_DWORD *)(a1 + 24) <= a2)
  {
    v3 = __si_assert_copy_extra_268();
    v4 = v3;
    v5 = "";
    if (v3)
      v5 = v3;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1802, "offset < store->endOffset()", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(a1 + 16), a2, 1044);
}

BOOL IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::exists(uint64_t a1, uint64_t a2)
{
  int Vector;
  int v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD v32[8];
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unsigned int v36;
  _QWORD v37[7];
  unsigned int v38;
  float v39;
  float v40;
  unsigned int v41;
  _BYTE buf[24];
  _DWORD v43[4];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v40 = 3.4028e38;
  v41 = -1;
  Vector = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::findVector(a1, a2, (int *)&v41, &v40, 0);
  if (Vector == -1)
  {
    v6 = *__error();
    v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "exists";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2632;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v41;
      LOWORD(v43[0]) = 2048;
      *(double *)((char *)v43 + 2) = v40;
      _os_log_error_impl(&dword_1B8270000, v7, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v6;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    v9 = *(_QWORD *)(a1 + 80);
    v8 = *(std::__shared_weak_count **)(a1 + 88);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v13 = *(_QWORD *)(a1 + 96);
    v12 = *(std::__shared_weak_count **)(a1 + 104);
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v43[0] = -1;
    *(_QWORD *)&buf[16] = 0x2000000000;
    v16 = v41;
    v17 = MEMORY[0x1E0C809B0];
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 0x40000000;
    v37[2] = ___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIfLi256EE_block_invoke;
    v37[3] = &unk_1E6E34280;
    v37[5] = a1;
    v37[6] = a2;
    v38 = v41;
    v39 = v40;
    v37[4] = buf;
    (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v13 + 80))(v13, v41, v37);
    if (*(_DWORD *)(*(_QWORD *)&buf[8] + 24) == -1)
    {
      v32[0] = v17;
      v32[1] = 1174405120;
      v32[2] = ___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIfLi256EE_block_invoke_1082;
      v32[3] = &unk_1E6E342A8;
      v32[5] = a1;
      v32[6] = a2;
      v32[7] = v9;
      v33 = v8;
      if (v8)
      {
        v22 = (unint64_t *)&v8->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v34 = v13;
      v35 = v12;
      if (v12)
      {
        v24 = (unint64_t *)&v12->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v36 = v16;
      v32[4] = buf;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 64))(v13, v32);
      v26 = v35;
      if (v35)
      {
        v27 = (unint64_t *)&v35->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = v33;
      if (v33)
      {
        v30 = (unint64_t *)&v33->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
    _Block_object_dispose(buf, 8);
    if (v12)
    {
      v18 = (unint64_t *)&v12->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v8)
    {
      v20 = (unint64_t *)&v8->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  return Vector != -1;
}

void ___ZN22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIfLi256EE_block_invoke_1082(uint64_t a1, int a2, float *a3, _BYTE *a4)
{
  const void *v8;
  uint64_t v9;
  const void *v10;
  int v11;
  NSObject *v12;
  const float *v13;
  const float *v14;
  float v15;
  int v16;
  NSObject *v17;
  int v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  int v22;
  NSObject *v23;
  int v24;
  NSObject *v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  NSObject *v31;
  int v32;
  NSObject *v33;
  int v34;
  NSObject *v35;
  int v36;
  NSObject *v37;
  int v38;
  NSObject *v39;
  double v40;
  int v41;
  int v42;
  float v43;
  int v44;
  float v45;
  _BOOL4 v46;
  int v47;
  int v48;
  _BOOL4 v49;
  int v50;
  int v51;
  _BOOL4 v52;
  int v53;
  int v54;
  _BOOL4 v55;
  int v56;
  int v57;
  float v58;
  float v59;
  double v60;
  float v61;
  _BOOL4 v62;
  _BOOL4 v63;
  int v64;
  float v65;
  int v66;
  float v67;
  _BOOL4 v68;
  int v69;
  int v70;
  _BOOL4 v71;
  int v72;
  int v73;
  _BOOL4 v74;
  int v75;
  int v76;
  _BOOL4 v77;
  int v78;
  int v79;
  float v80;
  float v81;
  float v82;
  _BOOL4 v83;
  _BOOL4 v84;
  _BOOL4 v85;
  float v86;
  float v87;
  float v88;
  float v89;
  void *__p;
  void *v91;
  uint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  float __C;
  const char *v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;
  __int16 v102;
  _BYTE v103[14];
  __int16 v104;
  double v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  _BOOL4 v109;
  __int16 v110;
  _BOOL4 v111;
  __int16 v112;
  _BOOL4 v113;
  __int16 v114;
  _BOOL4 v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 40);
  v8 = *(const void **)(a1 + 48);
  v10 = (const void *)_windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 32) + 16) * *(unsigned int *)a3, 0x410uLL);
  if (!memcmp(v8, v10, 0x400uLL))
  {
    v11 = *__error();
    v12 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v40 = a3[1];
      __C = 4.8153e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2647;
      v100 = 1024;
      v101 = a2;
      v102 = 2048;
      *(double *)v103 = v40;
      _os_log_error_impl(&dword_1B8270000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", (uint8_t *)&__C, 0x22u);
    }
    *__error() = v11;
    v13 = *(const float **)(a1 + 48);
    v14 = (const float *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56), *(unsigned int *)(a1 + 88));
    __C = 3.4028e38;
    vDSP_distancesq(v13, 1, v14, 1, &__C, 0x100uLL);
    v15 = __C;
    v16 = *__error();
    v17 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v41 = *(_DWORD *)(a1 + 88);
      __C = 4.8153e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2649;
      v100 = 1024;
      v101 = v41;
      v102 = 2048;
      *(double *)v103 = v15;
      _os_log_error_impl(&dword_1B8270000, v17, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", (uint8_t *)&__C, 0x22u);
    }
    *__error() = v16;
    v93 = 0;
    v94 = 0;
    v95 = 0;
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 72))(&v93, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), 2);
    v18 = *__error();
    v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v42 = *(_DWORD *)v93;
      v43 = *((float *)v93 + 1);
      v44 = *((_DWORD *)v93 + 2);
      v45 = *((float *)v93 + 3);
      v46 = v43 == v45 || vabds_f32(v43, v45) <= fmaxf(fminf(fabsf(v45), fabsf(v43)) * 0.000015259, 0.000015259);
      __C = 4.8156e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2651;
      v100 = 1024;
      v101 = v42;
      v102 = 2048;
      *(double *)v103 = v43;
      *(_WORD *)&v103[8] = 1024;
      *(_DWORD *)&v103[10] = v44;
      v104 = 2048;
      v105 = v45;
      v106 = 1024;
      LODWORD(v107) = v46;
      _os_log_error_impl(&dword_1B8270000, v19, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(vec, 2) <%u, %e>, <%u, %e>, %d", (uint8_t *)&__C, 0x38u);
    }
    *__error() = v18;
    v20 = *__error();
    v21 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v47 = *(_DWORD *)v93;
      v48 = *((_DWORD *)v93 + 2);
      v49 = *((float *)v93 + 1) == *((float *)v93 + 3);
      __C = 4.8154e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2652;
      v100 = 1024;
      v101 = v47;
      v102 = 1024;
      *(_DWORD *)v103 = v48;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v49;
      _os_log_error_impl(&dword_1B8270000, v21, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v20;
    v22 = *__error();
    v23 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v50 = *(_DWORD *)v93;
      v51 = *((_DWORD *)v93 + 2);
      v52 = *((float *)v93 + 1) < *((float *)v93 + 3);
      __C = 4.8154e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2653;
      v100 = 1024;
      v101 = v50;
      v102 = 1024;
      *(_DWORD *)v103 = v51;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v52;
      _os_log_error_impl(&dword_1B8270000, v23, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v22;
    v24 = *__error();
    v25 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v53 = *(_DWORD *)v93;
      v54 = *((_DWORD *)v93 + 2);
      v55 = *((float *)v93 + 1) > *((float *)v93 + 3);
      __C = 4.8154e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2654;
      v100 = 1024;
      v101 = v53;
      v102 = 1024;
      *(_DWORD *)v103 = v54;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v55;
      _os_log_error_impl(&dword_1B8270000, v25, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v24;
    v26 = *__error();
    v27 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      v56 = *(_DWORD *)v93;
      v57 = *((_DWORD *)v93 + 2);
      v58 = *((float *)v93 + 1);
      v59 = *((float *)v93 + 3);
      v60 = (float)(v58 - v59);
      v61 = vabds_f32(v58, v59);
      if (v58 == v59)
      {
        v62 = 1;
        v63 = 1;
      }
      else
      {
        v86 = fabsf(v58);
        v87 = fabsf(v59);
        v62 = v61 <= fmaxf(fminf(v87, v86) * 0.000015259, 0.000015259);
        v63 = v61 <= (float)(fmaxf(v86, v87) * 0.000015259);
      }
      __C = 4.8161e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2655;
      v100 = 1024;
      v101 = v56;
      v102 = 1024;
      *(_DWORD *)v103 = v57;
      *(_WORD *)&v103[4] = 2048;
      *(double *)&v103[6] = v60;
      v104 = 2048;
      v105 = 1.17549435e-38;
      v106 = 2048;
      v107 = 0x3E80000000000000;
      v108 = 1024;
      v109 = v61 < 1.1755e-38;
      v110 = 1024;
      v111 = v61 < 0.00000011921;
      v112 = 1024;
      v113 = v62;
      v114 = 1024;
      v115 = v63;
      _os_log_error_impl(&dword_1B8270000, v27, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&__C, 0x54u);
    }
    *__error() = v26;
    v91 = 0;
    v92 = 0;
    __p = 0;
    v28 = *(_QWORD *)(a1 + 56);
    v29 = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 32) + 16) * *(unsigned int *)a3, 0x410uLL);
    (*(void (**)(void **__return_ptr, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v28 + 72))(&__p, v28, v29, 2);
    v30 = *__error();
    v31 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v64 = *(_DWORD *)__p;
      v65 = *((float *)__p + 1);
      v66 = *((_DWORD *)__p + 2);
      v67 = *((float *)__p + 3);
      v68 = v65 == v67 || vabds_f32(v65, v67) <= fmaxf(fminf(fabsf(v67), fabsf(v65)) * 0.000015259, 0.000015259);
      __C = 4.8156e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2658;
      v100 = 1024;
      v101 = v64;
      v102 = 2048;
      *(double *)v103 = v65;
      *(_WORD *)&v103[8] = 1024;
      *(_DWORD *)&v103[10] = v66;
      v104 = 2048;
      v105 = v67;
      v106 = 1024;
      LODWORD(v107) = v68;
      _os_log_error_impl(&dword_1B8270000, v31, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(entry->vec, 2) <%u, %e>, <%u, %e>, %d", (uint8_t *)&__C, 0x38u);
    }
    *__error() = v30;
    v32 = *__error();
    v33 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      v69 = *(_DWORD *)__p;
      v70 = *((_DWORD *)__p + 2);
      v71 = *((float *)__p + 1) == *((float *)__p + 3);
      __C = 4.8154e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2659;
      v100 = 1024;
      v101 = v69;
      v102 = 1024;
      *(_DWORD *)v103 = v70;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v71;
      _os_log_error_impl(&dword_1B8270000, v33, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v32;
    v34 = *__error();
    v35 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v72 = *(_DWORD *)__p;
      v73 = *((_DWORD *)__p + 2);
      v74 = *((float *)__p + 1) < *((float *)__p + 3);
      __C = 4.8154e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2660;
      v100 = 1024;
      v101 = v72;
      v102 = 1024;
      *(_DWORD *)v103 = v73;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v74;
      _os_log_error_impl(&dword_1B8270000, v35, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v34;
    v36 = *__error();
    v37 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      v75 = *(_DWORD *)__p;
      v76 = *((_DWORD *)__p + 2);
      v77 = *((float *)__p + 1) > *((float *)__p + 3);
      __C = 4.8154e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2661;
      v100 = 1024;
      v101 = v75;
      v102 = 1024;
      *(_DWORD *)v103 = v76;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v77;
      _os_log_error_impl(&dword_1B8270000, v37, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v36;
    v38 = *__error();
    v39 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      v78 = *(_DWORD *)__p;
      v79 = *((_DWORD *)__p + 2);
      v80 = *((float *)__p + 1);
      v81 = *((float *)__p + 3);
      v82 = vabds_f32(v80, v81);
      v83 = (float)(v80 - v81) < 1.1755e-38;
      if (v80 == v81)
      {
        v84 = 1;
        v85 = 1;
      }
      else
      {
        v88 = fabsf(v80);
        v89 = fabsf(v81);
        v84 = v82 <= fmaxf(fminf(v89, v88) * 0.000015259, 0.000015259);
        v85 = v82 <= (float)(fmaxf(v88, v89) * 0.000015259);
      }
      __C = 4.8161e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2662;
      v100 = 1024;
      v101 = v78;
      v102 = 1024;
      *(_DWORD *)v103 = v79;
      *(_WORD *)&v103[4] = 2048;
      *(double *)&v103[6] = v82;
      v104 = 2048;
      v105 = 1.17549435e-38;
      v106 = 2048;
      v107 = 0x3E80000000000000;
      v108 = 1024;
      v109 = v83;
      v110 = 1024;
      v111 = v82 < 0.00000011921;
      v112 = 1024;
      v113 = v84;
      v114 = 1024;
      v115 = v85;
      _os_log_error_impl(&dword_1B8270000, v39, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&__C, 0x54u);
    }
    *__error() = v38;
    *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *a3;
    *a4 = 1;
    if (__p)
    {
      v91 = __p;
      operator delete(__p);
    }
    if (v93)
    {
      v94 = v93;
      operator delete(v93);
    }
  }
}

_QWORD *__copy_helper_block_8_56c60_ZTSN22IVFVectorIndexTemplateIfLi256EE19QuantizerPartitionsE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[10];
  result[9] = a2[9];
  result[10] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_8_56c60_ZTSN22IVFVectorIndexTemplateIfLi256EE19QuantizerPartitionsE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void _ZN16QuantizerManagerIDF16_Li768EE15sharedQuantizerEi(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned __int8 v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[6];
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  __n128 (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;

  v18 = 0;
  v19 = &v18;
  v20 = 0x3802000000;
  v21 = __Block_byref_object_copy__459;
  v22 = __Block_byref_object_dispose__460;
  v23 = 0;
  v24 = 0;
  v6 = atomic_load((unsigned __int8 *)&_ZGVZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&_ZGVZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq))
  {
    __cxa_atexit((void (*)(void *))_ZNSt3__110shared_ptrI9QuantizerIDF16_Li768EEED1B8nn180100Ev, &_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq, &dword_1B8270000);
    __cxa_guard_release(&_ZGVZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq);
  }
  if (_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE9onceToken != -1)
    dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE9onceToken, &__block_literal_global_401);
  v23 = _ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq;
  v24 = qword_1EF1AE7D8;
  if (qword_1EF1AE7D8)
  {
    v7 = (unint64_t *)(qword_1EF1AE7D8 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(NSObject **)(a2 + 16);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v16[2] = ___ZN16QuantizerManagerIDF16_Li768EE15sharedQuantizerEi_block_invoke;
  v16[3] = &unk_1E6E31FA0;
  v17 = a3;
  v16[4] = &v18;
  v16[5] = a2;
  dispatch_sync(v9, v16);
  v10 = v19[6];
  *a1 = v19[5];
  a1[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  _Block_object_dispose(&v18, 8);
  v13 = (std::__shared_weak_count *)v24;
  if (v24)
  {
    v14 = (unint64_t *)(v24 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

__n128 __Block_byref_object_copy__459(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__460(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t _ZNSt3__110shared_ptrI9QuantizerIDF16_Li768EEED1B8nn180100Ev(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void ___ZN16QuantizerManagerIDF16_Li768EE15sharedQuantizerEi_block_invoke(uint64_t a1)
{
  int *v2;
  unint64_t v3;
  uint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  size_t v14;
  unint64_t v15;
  std::string *p_dst;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  std::string *v20;
  std::string::size_type size;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  int64_t v25;
  const char *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *p_shared_weak_owners;
  unint64_t v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  unint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  size_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  const void *v73;
  const char *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  _QWORD v95[2];
  int v96;
  char v97;
  _BYTE v98[11];
  _QWORD v99[2];
  int v100;
  char v101;
  _BYTE v102[11];
  std::string v103;
  std::string __dst;
  std::string v105;
  __int128 v106;
  int64_t v107;

  v2 = (int *)(a1 + 48);
  v3 = *(int *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 40);
  if (!(_DWORD)v3)
    goto LABEL_79;
  v5 = *(int8x8_t *)(v4 + 120);
  if (!*(_QWORD *)&v5)
    goto LABEL_22;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = *(int *)(a1 + 48);
    if (*(_QWORD *)&v5 <= v3)
      v7 = v3 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v3;
  }
  v8 = *(uint64_t ***)(*(_QWORD *)(v4 + 112) + 8 * v7);
  if (!v8 || (v9 = *v8) == 0)
  {
LABEL_22:
    v106 = 0uLL;
    v107 = 0;
    v13 = *(char *)(v4 + 71);
    if (v13 >= 0)
      v14 = *(unsigned __int8 *)(v4 + 71);
    else
      v14 = *(_QWORD *)(v4 + 56);
    v15 = v14 + 1;
    if (v14 + 1 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_147;
    if (v15 >= 0x17)
    {
      v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v17 = v15 | 7;
      v18 = v17 + 1;
      p_dst = (std::string *)operator new(v17 + 1);
      __dst.__r_.__value_.__l.__size_ = v14 + 1;
      __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14 + 1;
      if (!v14)
        goto LABEL_36;
    }
    if (v13 >= 0)
      v19 = (const void *)(v4 + 48);
    else
      v19 = *(const void **)(v4 + 48);
    memmove(p_dst, v19, v14);
LABEL_36:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v14) = 46;
    std::to_string(&v103, v3);
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v103;
    else
      v20 = (std::string *)v103.__r_.__value_.__r.__words[0];
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v103.__r_.__value_.__r.__words[2]);
    else
      size = v103.__r_.__value_.__l.__size_;
    v22 = std::string::append(&__dst, (const std::string::value_type *)v20, size);
    v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__r.__words[2] = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v105, ".quantizer");
    v25 = v24->__r_.__value_.__r.__words[2];
    v106 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v107 = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v105.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_44:
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_45;
LABEL_67:
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_45:
        if (v107 >= 0)
          v26 = (const char *)&v106;
        else
          v26 = (const char *)v106;
        v27 = fd_create_protected(*(_DWORD *)v4, v26, 0, 3u);
        if (!v27)
          goto LABEL_76;
        v28 = v27;
        v29 = operator new();
        v99[0] = v28;
        v99[1] = 0x1000000;
        v100 = 0;
        v101 = 1;
        memset(v102, 0, sizeof(v102));
        _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EEC2EN19vi_ondisk_allocator11meta_info_sE(v29, (uint64_t)v99);
        v30 = (std::__shared_weak_count *)operator new();
        v31 = v30;
        v30->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        v30->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E32030;
        v30->__shared_weak_owners_ = 0;
        v30[1].__vftable = (std::__shared_weak_count_vtbl *)v29;
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
        v34 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v35 = *(std::__shared_weak_count **)(v34 + 48);
        *(_QWORD *)(v34 + 40) = v29;
        *(_QWORD *)(v34 + 48) = v30;
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        p_shared_weak_owners = (unint64_t *)&v31->__shared_weak_owners_;
        do
          v39 = __ldxr(p_shared_weak_owners);
        while (__stxr(v39 + 1, p_shared_weak_owners));
        v40 = std::__hash_table<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v4 + 112, *v2, v2);
        v41 = std::__shared_weak_count::lock(v31);
        v42 = v41;
        if (v41)
        {
          v43 = (unint64_t *)&v41->__shared_weak_owners_;
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
          std::__shared_weak_count::__release_weak(v31);
          v45 = (unint64_t *)&v42->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (v46)
          {
            v47 = v29;
            goto LABEL_71;
          }
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          v48 = v42;
          v47 = v29;
        }
        else
        {
          v47 = 0;
          v48 = v31;
        }
        std::__shared_weak_count::__release_weak(v48);
LABEL_71:
        v49 = (std::__shared_weak_count *)v40[4];
        v40[3] = v47;
        v40[4] = v42;
        if (v49)
          std::__shared_weak_count::__release_weak(v49);
        atomic_store(1u, (unsigned __int8 *)(v29 + 57));
        do
          v50 = __ldaxr(p_shared_owners);
        while (__stlxr(v50 - 1, p_shared_owners));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
          if ((SHIBYTE(v107) & 0x80000000) == 0)
            goto LABEL_79;
          goto LABEL_77;
        }
LABEL_76:
        if ((SHIBYTE(v107) & 0x80000000) == 0)
          goto LABEL_79;
LABEL_77:
        operator delete((void *)v106);
        goto LABEL_79;
      }
    }
    else if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_44;
    }
    operator delete(v103.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_67;
  }
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == v3)
      {
        if (*((_DWORD *)v9 + 4) == (_DWORD)v3)
          goto LABEL_136;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_22;
      }
      v9 = (uint64_t *)*v9;
      if (!v9)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == v3)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_22;
LABEL_12:
    v9 = (uint64_t *)*v9;
    if (!v9)
      goto LABEL_22;
  }
  if (*((_DWORD *)v9 + 4) != (_DWORD)v3)
    goto LABEL_12;
LABEL_136:
  v88 = std::__hash_table<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v4 + 112, v3, v2);
  v89 = (std::__shared_weak_count *)v88[4];
  if (v89 && (v89 = std::__shared_weak_count::lock(v89)) != 0)
    v90 = v88[3];
  else
    v90 = 0;
  v91 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v92 = *(std::__shared_weak_count **)(v91 + 48);
  *(_QWORD *)(v91 + 40) = v90;
  *(_QWORD *)(v91 + 48) = v89;
  if (v92)
  {
    v93 = (unint64_t *)&v92->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
LABEL_79:
  v51 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v52 = atomic_load((unsigned __int8 *)&_ZGVZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq);
  if ((v52 & 1) == 0 && __cxa_guard_acquire(&_ZGVZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq))
  {
    __cxa_atexit((void (*)(void *))_ZNSt3__110shared_ptrI9QuantizerIDF16_Li768EEED1B8nn180100Ev, &_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq, &dword_1B8270000);
    __cxa_guard_release(&_ZGVZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq);
  }
  if (_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE9onceToken != -1)
    dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE9onceToken, &__block_literal_global_401);
  v54 = _ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq;
  v53 = (std::__shared_weak_count *)qword_1EF1AE7D8;
  if (!qword_1EF1AE7D8)
  {
    if (*(_QWORD *)(v51 + 40) != _ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq)
      return;
LABEL_93:
    v59 = *(_QWORD *)(v4 + 80);
    if (v59)
    {
      v60 = *(_QWORD *)(v4 + 88);
      if (v60)
      {
        v61 = (unint64_t *)(v60 + 8);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      v63 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v64 = *(std::__shared_weak_count **)(v63 + 48);
      *(_QWORD *)(v63 + 40) = v59;
      *(_QWORD *)(v63 + 48) = v60;
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      return;
    }
    v67 = *(char *)(v4 + 71);
    if (v67 >= 0)
      v68 = *(unsigned __int8 *)(v4 + 71);
    else
      v68 = *(_QWORD *)(v4 + 56);
    v69 = v68 + 10;
    if (v68 + 10 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v69 >= 0x17)
      {
        v71 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v69 | 7) != 0x17)
          v71 = v69 | 7;
        v72 = v71 + 1;
        v70 = (char *)operator new(v71 + 1);
        *((_QWORD *)&v106 + 1) = v68 + 10;
        v107 = v72 | 0x8000000000000000;
        *(_QWORD *)&v106 = v70;
      }
      else
      {
        v107 = 0;
        v106 = 0uLL;
        v70 = (char *)&v106;
        HIBYTE(v107) = v68 + 10;
        if (!v68)
        {
LABEL_116:
          strcpy(&v70[v68], ".quantizer");
          if (v107 >= 0)
            v74 = (const char *)&v106;
          else
            v74 = (const char *)v106;
          v75 = fd_create_protected(*(_DWORD *)v4, v74, 0, 3u);
          if (v75)
          {
            v76 = v75;
            v77 = operator new();
            v95[0] = v76;
            v95[1] = 0x1000000;
            v96 = 0;
            v97 = 1;
            memset(v98, 0, sizeof(v98));
            _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EEC2EN19vi_ondisk_allocator11meta_info_sE(v77, (uint64_t)v95);
            v78 = (_QWORD *)operator new();
            *v78 = &off_1E6E32030;
            v78[1] = 0;
            v78[2] = 0;
            v78[3] = v77;
            v79 = *(std::__shared_weak_count **)(v4 + 88);
            *(_QWORD *)(v4 + 80) = v77;
            *(_QWORD *)(v4 + 88) = v78;
            if (!v79)
              goto LABEL_126;
            v80 = (unint64_t *)&v79->__shared_owners_;
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
            v77 = *(_QWORD *)(v4 + 80);
            v78 = *(_QWORD **)(v4 + 88);
            if (v78)
            {
LABEL_126:
              v82 = v78 + 1;
              do
                v83 = __ldxr(v82);
              while (__stxr(v83 + 1, v82));
            }
            v84 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
            v85 = *(std::__shared_weak_count **)(v84 + 48);
            *(_QWORD *)(v84 + 40) = v77;
            *(_QWORD *)(v84 + 48) = v78;
            if (v85)
            {
              v86 = (unint64_t *)&v85->__shared_owners_;
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 - 1, v86));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
          }
          if (SHIBYTE(v107) < 0)
            operator delete((void *)v106);
          return;
        }
      }
      if (v67 >= 0)
        v73 = (const void *)(v4 + 48);
      else
        v73 = *(const void **)(v4 + 48);
      memmove(v70, v73, v68);
      goto LABEL_116;
    }
LABEL_147:
    abort();
  }
  v55 = (unint64_t *)(qword_1EF1AE7D8 + 8);
  do
    v56 = __ldxr(v55);
  while (__stxr(v56 + 1, v55));
  v57 = *(_QWORD *)(v51 + 40);
  do
    v58 = __ldaxr(v55);
  while (__stlxr(v58 - 1, v55));
  if (v58)
  {
    if (v57 == v54)
      goto LABEL_93;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
    if (v57 == v54)
      goto LABEL_93;
  }
}

uint64_t _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EEC2EN19vi_ondisk_allocator11meta_info_sE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  const void *v15;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  _QWORD *v19;
  int v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v31;
  char *v32;
  const char *v33;
  char *v34;
  const char *v35;
  char *v36;
  const char *v37;
  char *v38;
  const char *v39;
  char *v40;
  const char *v41;
  char v42[1024];
  _BYTE buf[24];
  void *v44;
  _BYTE v45[24];
  int v46;
  char v47;
  char v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)a1 = &off_1E6E31FD0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 20);
  *(_QWORD *)(a1 + 64) = fd_dup(*(_QWORD *)a2);
  bzero(v42, 0x400uLL);
  v5 = fd_name(*(_QWORD *)a2, v42, 0x400uLL);
  MEMORY[0x1BCCB03B0](v4, v5);
  if (!*(_QWORD *)(a1 + 64))
  {
    v31 = __si_assert_copy_extra_268();
    v32 = v31;
    v33 = "";
    if (v31)
      v33 = v31;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 478, "fdPtr != nullptr", v33);
    goto LABEL_32;
  }
  v6 = operator new();
  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_DWORD *)(a2 + 16);
  v10 = *(unsigned __int8 *)(a2 + 20);
  v11 = *(unsigned __int8 *)(a2 + 21);
  v12 = *(unsigned __int8 *)(a2 + 22);
  v13 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)v6 = 0;
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZN30vi_onefixedsize_disk_allocatorC2EmymN19vi_ondisk_allocator11meta_info_sEP16vector_storage_s_block_invoke;
  v44 = &__block_descriptor_tmp_80;
  *(_QWORD *)v45 = v6;
  *(_QWORD *)&v45[8] = v7;
  *(_QWORD *)&v45[16] = v8;
  v46 = v9;
  v47 = v10;
  v48 = v11;
  v49 = v12;
  v50 = v13;
  v51 = *(_QWORD *)(a2 + 24);
  storage_array_Init((_DWORD *)(v6 + 8), 1040, 0x40000uLL, 1536, v7, v11 != 0, v9, v10 != 0, v12 != 0, v51, 0, (uint64_t)buf);
  if (v11)
    vi_onefixedsize_disk_allocator::storeHeader((unint64_t *)v6);
  v14 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  if (v14)
  {
    storage_array_Close(v14 + 8);
    v15 = *(const void **)(v14 + 4208);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(v14 + 4208) = 0;
    }
    *(_OWORD *)(v14 + 4192) = 0u;
    MEMORY[0x1BCCB06A4](v14, 0x10A0C408BE2A288);
    v6 = *(_QWORD *)(a1 + 40);
  }
  v16 = (_DWORD *)_windowsResolvePtr(v6 + 40, 0x400uLL, *(_QWORD *)(v6 + 16));
  v17 = v16;
  if (!*(_BYTE *)(a2 + 21))
  {
    *(_DWORD *)(a1 + 52) = *v16;
    v19 = *(_QWORD **)(a1 + 40);
    v20 = *__error();
    v21 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = v19[6];
      v23 = (void *)v19[7];
      v25 = v19[2];
      v24 = v19[3];
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = v19;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v22;
      *(_WORD *)&buf[22] = 2048;
      v44 = v23;
      *(_WORD *)v45 = 2048;
      *(_QWORD *)&v45[2] = v24;
      *(_WORD *)&v45[10] = 2048;
      *(_QWORD *)&v45[12] = v25;
      _os_log_impl(&dword_1B8270000, v21, OS_LOG_TYPE_DEFAULT, "vi_onefixedsize_disk_allocator %p size: %llu, freeRegion: %llu, header: %llu, elemSize: %lu", buf, 0x34u);
    }
    *__error() = v20;
    v26 = *(_QWORD **)(a1 + 40);
    v27 = v26[2];
    v28 = v26[7] - v26[3];
    v29 = v28 / v27;
    if (v28 == v28 / v27 * v27)
    {
      *(_DWORD *)(a1 + 48) = v29;
      if (v17[1] == (_DWORD)v29)
      {
        if (v26[3] == 1040)
        {
          if (v26[2] == 1536)
            return a1;
          v40 = __si_assert_copy_extra_268();
          v32 = v40;
          v41 = "";
          if (v40)
            v41 = v40;
          __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 490, "vi_onefixedsize_disk_allocator::getElementSize(storage.get()) == sizeof(CIVector_t)", v41);
        }
        else
        {
          v38 = __si_assert_copy_extra_268();
          v32 = v38;
          v39 = "";
          if (v38)
            v39 = v38;
          __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 489, "vi_onefixedsize_disk_allocator::getHeaderSize(storage.get()) == sizeof(QuantizerHeader_t)", v39);
        }
      }
      else
      {
        v36 = __si_assert_copy_extra_268();
        v32 = v36;
        v37 = "";
        if (v36)
          v37 = v36;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 488, "nCentroids == header->count", v37);
      }
    }
    else
    {
      v34 = __si_assert_copy_extra_268();
      v32 = v34;
      v35 = "";
      if (v34)
        v35 = v34;
      __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 504, "offset % elemSize == 0", v35);
    }
LABEL_32:
    free(v32);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v16[1] = 0;
  v18 = *(_DWORD *)(a2 + 24);
  *v16 = v18;
  *(_DWORD *)(a1 + 52) = v18;
  return a1;
}

void _ZNSt3__120__shared_ptr_pointerIP24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EENS_10shared_ptrIS3_E27__shared_ptr_default_deleteIS3_S3_EENS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

uint64_t _ZNSt3__120__shared_ptr_pointerIP24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EENS_10shared_ptrIS3_E27__shared_ptr_default_deleteIS3_S3_EENS_9allocatorIS3_EEE16__on_zero_sharedEv(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EED0Ev(uint64_t a1)
{
  _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EED2Ev(a1);
  JUMPOUT(0x1BCCB06A4);
}

uint64_t _ZNK24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EE7versionEv(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t _ZNK24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EE5countEv(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t _ZNK9QuantizerIDF16_Li768EE9dimensionEv()
{
  return 768;
}

uint64_t _ZNK9QuantizerIDF16_Li768EE11elementSizeEv()
{
  return 2;
}

BOOL _ZNK9QuantizerIDF16_Li768EEeqERK12AnyQuantizer(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  int v8;
  _BOOL8 result;
  char *v10;
  char *v11;
  const char *v12;
  char *v13;
  const char *v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) != 768)
  {
    v10 = __si_assert_copy_extra_268();
    v11 = v10;
    v12 = "";
    if (v10)
      v12 = v10;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 282, "D == other.dimension()", v12);
LABEL_17:
    free(v11);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) != 2)
  {
    v13 = __si_assert_copy_extra_268();
    v11 = v13;
    v14 = "";
    if (v13)
      v14 = v13;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 283, "sizeof(ELEM_TYPE) == other.elementSize()", v14);
    goto LABEL_17;
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
    return 0;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    return 1;
  v5 = 0;
  while (1)
  {
    v6 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, v5);
    v7 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, v5);
    v8 = memcmp(v6, v7, 0x600uLL);
    result = v8 == 0;
    if (v8)
      break;
    v5 = (v5 + 1);
    if (v5 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
      return 1;
  }
  return result;
}

BOOL _ZNK9QuantizerIDF16_Li768EE12isPersistentEv(uint64_t a1)
{
  _QWORD *v1;
  int v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(char *)(a1 + 31);
  if ((v2 & 0x80000000) == 0)
  {
    if (v2 != 8)
      return 1;
    return *v1 != 0x3E79726F6D656D3CLL;
  }
  if (*(_QWORD *)(a1 + 16) == 8)
  {
    v1 = (_QWORD *)*v1;
    return *v1 != 0x3E79726F6D656D3CLL;
  }
  return 1;
}

unint64_t _ZNK24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EE11getCentroidEj(uint64_t a1, unsigned int a2)
{
  char *v3;
  char *v4;
  const char *v5;

  if (*(_DWORD *)(a1 + 48) <= a2)
  {
    v3 = __si_assert_copy_extra_268();
    v4 = v3;
    v5 = "";
    if (v3)
      v5 = v3;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 514, "i < nCentroids", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return _windowsResolvePtr(*(_QWORD *)(a1 + 40) + 40, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) * a2, 0x600uLL);
}

void _ZNK9QuantizerIDF16_Li768EE14topKPartitionsERK10CIVector_sIDF16_Li768EEi(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  float16x4_t *v4;
  float16x4_t *v5;
  uint64_t v6;
  int **v7;
  int **v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float16x4_t *v14;
  float16x8_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float *v18;
  uint64_t v19;
  float16x4_t *v20;
  float16x8_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  char *v32;
  float v33;
  float v34;
  float v35;
  _BOOL4 v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _DWORD *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  float *v51;
  float v52;
  float v53;
  int v54;
  float v55;
  _BOOL4 v56;
  float *v57;
  float v58;
  BOOL v59;
  unint64_t v60;
  float *v61;
  unsigned int v62;
  char *v63;
  float v64;
  float v65;
  int v66;
  _BOOL4 v67;
  float *v68;
  float v69;
  BOOL v70;
  char *v71;
  unint64_t v72;
  float *v73;
  float v74;
  int v75;
  _BOOL4 v76;
  float *v77;
  float v78;
  BOOL v79;
  uint64_t v80;
  _OWORD *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  int *v86;
  float *v87;
  uint64_t v88;
  uint64_t v90;
  int v91;
  int v92;
  float *v93;
  float v94;
  float v95;
  float v96;
  _BOOL4 v97;
  float *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  float *v103;
  float v104;
  float v105;
  float v106;
  float v107;
  _BOOL4 v108;
  float *v109;
  float v110;
  BOOL v111;
  int **v112;
  char *v113;
  unint64_t v114;
  float16x4_t *v115;
  float __B[768];
  float __A[768];
  unsigned int __C[3];

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v6 = v1;
  v8 = v7;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1))
  {
    v9 = 0;
    v87 = 0;
    v86 = 0;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    goto LABEL_77;
  }
  v112 = v8;
  v113 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v114 = v3;
  v115 = v5 + 2;
  do
  {
    v12 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v6 + 64))(v6, v11);
    bzero(__A, 0xC00uLL);
    v13 = 0;
    v14 = (float16x4_t *)(v12 + 16);
    do
    {
      v15 = *(float16x8_t *)v14[-2].i8;
      v16 = vcvtq_f32_f16(*v14);
      v17 = vcvt_hight_f32_f16(*(float16x8_t *)v14->i8);
      v18 = &__A[v13];
      *(float32x4_t *)v18 = vcvtq_f32_f16(*(float16x4_t *)v15.i8);
      *((float32x4_t *)v18 + 1) = vcvt_hight_f32_f16(v15);
      *((float32x4_t *)v18 + 2) = v16;
      *((float32x4_t *)v18 + 3) = v17;
      v13 += 16;
      v14 += 4;
    }
    while (v13 != 768);
    bzero(__B, 0xC00uLL);
    v19 = 0;
    v20 = v115;
    do
    {
      v21 = *(float16x8_t *)v20[-2].i8;
      v22 = vcvtq_f32_f16(*v20);
      v23 = vcvt_hight_f32_f16(*(float16x8_t *)v20->i8);
      v24 = &__B[v19];
      *(float32x4_t *)v24 = vcvtq_f32_f16(*(float16x4_t *)v21.i8);
      *((float32x4_t *)v24 + 1) = vcvt_hight_f32_f16(v21);
      *((float32x4_t *)v24 + 2) = v22;
      *((float32x4_t *)v24 + 3) = v23;
      v19 += 16;
      v20 += 4;
    }
    while (v19 != 768);
    __C[0] = 2139095039;
    vDSP_distancesq(__A, 1, __B, 1, (float *)__C, 0x300uLL);
    v25 = (v11 | ((unint64_t)__C[0] << 32)) >> 32;
    v26 = v9 - v10;
    v27 = (v9 - v10) >> 3;
    if (v27 < v114)
    {
      if (v9 < v113)
      {
        *(_DWORD *)v9 = v11;
        *((_DWORD *)v9 + 1) = v25;
        v9 += 8;
LABEL_50:
        if (v9 - v10 >= 9)
        {
          v60 = (((unint64_t)(v9 - v10) >> 3) - 2) >> 1;
          v61 = (float *)&v10[8 * v60];
          v63 = v9 - 8;
          v62 = *((_DWORD *)v9 - 2);
          v64 = v61[1];
          v65 = *((float *)v9 - 1);
          v66 = *(_DWORD *)v61;
          v67 = *(_DWORD *)v61 < v62;
          if (v64 != v65)
            v67 = v64 < v65;
          if (v67)
          {
            do
            {
              v68 = v61;
              *(_DWORD *)v63 = v66;
              *((float *)v63 + 1) = v61[1];
              if (!v60)
                break;
              v60 = (v60 - 1) >> 1;
              v61 = (float *)&v10[8 * v60];
              v69 = v61[1];
              v66 = *(_DWORD *)v61;
              v70 = v69 < v65;
              if (v69 == v65)
                v70 = *(_DWORD *)v61 < v62;
              v63 = (char *)v68;
            }
            while (v70);
            *(_DWORD *)v68 = v62;
            v68[1] = v65;
          }
        }
        goto LABEL_4;
      }
      v39 = v113 - v10;
      if ((v113 - v10) >> 2 <= (unint64_t)(v27 + 1))
        v40 = v27 + 1;
      else
        v40 = v39 >> 2;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
        v40 = 0x1FFFFFFFFFFFFFFFLL;
      if (v40 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v41 = 8 * v40;
      v42 = operator new(8 * v40);
      v43 = &v42[8 * v27];
      *v43 = v11;
      v43[1] = v25;
      if (v9 == v10)
      {
        v48 = v9;
        v10 = &v42[8 * v27];
LABEL_48:
        v113 = &v42[v41];
        v9 = (char *)(v43 + 2);
        if (v48)
          operator delete(v48);
        goto LABEL_50;
      }
      v44 = v9 - v10 - 8;
      if (v44 >= 0x58 && (unint64_t)(v10 - v42) >= 0x20)
      {
        v80 = (v44 >> 3) + 1;
        v45 = &v9[-8 * (v80 & 0x3FFFFFFFFFFFFFFCLL)];
        v81 = &v42[8 * v27 - 16];
        v82 = v9 - 16;
        v83 = v80 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v84 = *(_OWORD *)v82;
          *(v81 - 1) = *((_OWORD *)v82 - 1);
          *v81 = v84;
          v81 -= 2;
          v82 -= 32;
          v83 -= 4;
        }
        while (v83);
        v46 = (char *)&v43[-2 * (v80 & 0x3FFFFFFFFFFFFFFCLL)];
        if (v80 == (v80 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_36;
      }
      else
      {
        v45 = v9;
        v46 = &v42[8 * v27];
      }
      do
      {
        v47 = *((_QWORD *)v45 - 1);
        v45 -= 8;
        *((_QWORD *)v46 - 1) = v47;
        v46 -= 8;
      }
      while (v45 != v10);
LABEL_36:
      v48 = v10;
      v10 = v46;
      goto LABEL_48;
    }
    v28 = *((float *)v10 + 1);
    v29 = *(_DWORD *)v10;
    v30 = *(_DWORD *)v10 > v11;
    if (v28 != *(float *)&v25)
      v30 = v28 > *(float *)&v25;
    if (v30)
    {
      if (v26 <= 8)
      {
        *((_DWORD *)v9 - 2) = v11;
        *((_DWORD *)v9 - 1) = v25;
      }
      else
      {
        v31 = 0;
        v32 = v10;
        do
        {
          v37 = (float *)&v32[8 * v31 + 8];
          v38 = (2 * v31) | 1;
          v31 = 2 * v31 + 2;
          if (v31 < v27)
          {
            v33 = v37[1];
            v34 = v37[3];
            v35 = *v37;
            v36 = *(_DWORD *)v37 < *((_DWORD *)v37 + 2);
            if (v33 != v34)
              v36 = v33 < v34;
            if (v36)
            {
              v35 = v37[2];
              v37 += 2;
            }
            else
            {
              v31 = v38;
            }
          }
          else
          {
            v35 = *v37;
            v31 = v38;
          }
          *(float *)v32 = v35;
          *((float *)v32 + 1) = v37[1];
          v32 = (char *)v37;
        }
        while (v31 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
        if (v37 == (float *)(v9 - 8))
        {
          *(_DWORD *)v37 = v29;
          v37[1] = v28;
        }
        else
        {
          *v37 = *((float *)v9 - 2);
          v37[1] = *((float *)v9 - 1);
          *((_DWORD *)v9 - 2) = v29;
          *((float *)v9 - 1) = v28;
          v49 = (char *)v37 - v10 + 8;
          if (v49 >= 9)
          {
            v50 = (((unint64_t)v49 >> 3) - 2) >> 1;
            v51 = (float *)&v10[8 * v50];
            v52 = v51[1];
            v53 = v37[1];
            v54 = *(_DWORD *)v51;
            v55 = *v37;
            v56 = *(_DWORD *)v51 < *(_DWORD *)v37;
            if (v52 != v53)
              v56 = v52 < v53;
            if (v56)
            {
              do
              {
                v57 = v51;
                *(_DWORD *)v37 = v54;
                v37[1] = v51[1];
                if (!v50)
                  break;
                v50 = (v50 - 1) >> 1;
                v51 = (float *)&v10[8 * v50];
                v58 = v51[1];
                v54 = *(_DWORD *)v51;
                v59 = v58 < v53;
                if (v58 == v53)
                  v59 = *(_DWORD *)v51 < LODWORD(v55);
                v37 = v57;
              }
              while (v59);
              *v57 = v55;
              v57[1] = v53;
            }
          }
        }
        *((_DWORD *)v9 - 2) = v11;
        *((_DWORD *)v9 - 1) = v25;
        v71 = v9 - 8;
        v72 = (((unint64_t)v26 >> 3) - 2) >> 1;
        v73 = (float *)&v10[8 * v72];
        v74 = v73[1];
        v75 = *(_DWORD *)v73;
        v76 = *(_DWORD *)v73 < v11;
        if (v74 != *(float *)&v25)
          v76 = v74 < *(float *)&v25;
        if (v76)
        {
          do
          {
            v77 = v73;
            *(_DWORD *)v71 = v75;
            *((float *)v71 + 1) = v73[1];
            if (!v72)
              break;
            v72 = (v72 - 1) >> 1;
            v73 = (float *)&v10[8 * v72];
            v78 = v73[1];
            v75 = *(_DWORD *)v73;
            v79 = v78 < *(float *)&v25;
            if (v78 == *(float *)&v25)
              v79 = *(_DWORD *)v73 < v11;
            v71 = (char *)v77;
          }
          while (v79);
          *(_DWORD *)v77 = v11;
          *((_DWORD *)v77 + 1) = v25;
        }
      }
    }
LABEL_4:
    ++v11;
  }
  while (v11 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6));
  *v112 = 0;
  v112[1] = 0;
  v112[2] = 0;
  v85 = v9 - v10;
  if (v9 == v10)
  {
    v87 = 0;
    v86 = 0;
  }
  else
  {
    if (v85 < 0)
      abort();
    v86 = (int *)operator new(v9 - v10);
    *v112 = v86;
    v112[2] = &v86[2 * (v85 >> 3)];
    memcpy(v86, v10, v85 & 0xFFFFFFFFFFFFFFF8);
    v87 = (float *)((char *)v86 + (v85 & 0xFFFFFFFFFFFFFFF8));
    v112[1] = (int *)v87;
    v9 = v10;
  }
LABEL_77:
  if ((char *)v87 - (char *)v86 >= 9)
  {
    v88 = (unint64_t)((char *)v87 - (char *)v86) >> 3;
    do
    {
      v90 = 0;
      v91 = *v86;
      v92 = v86[1];
      v93 = (float *)v86;
      do
      {
        v98 = &v93[2 * v90 + 2];
        v99 = (2 * v90) | 1;
        v90 = 2 * v90 + 2;
        if (v90 < v88)
        {
          v94 = v98[1];
          v95 = v98[3];
          v96 = *v98;
          v97 = *(_DWORD *)v98 < *((_DWORD *)v98 + 2);
          if (v94 != v95)
            v97 = v94 < v95;
          if (v97)
          {
            v96 = v98[2];
            v98 += 2;
          }
          else
          {
            v90 = v99;
          }
        }
        else
        {
          v96 = *v98;
          v90 = v99;
        }
        *v93 = v96;
        v93[1] = v98[1];
        v93 = v98;
      }
      while (v90 <= (uint64_t)((unint64_t)(v88 - 2) >> 1));
      v100 = (char *)(v87 - 2);
      if (v98 == v87 - 2)
      {
        *(_DWORD *)v98 = v91;
        *((_DWORD *)v98 + 1) = v92;
      }
      else
      {
        *v98 = *(v87 - 2);
        v98[1] = *(v87 - 1);
        *((_DWORD *)v87 - 2) = v91;
        *((_DWORD *)v87 - 1) = v92;
        v101 = (char *)v98 - (char *)v86 + 8;
        if (v101 >= 9)
        {
          v102 = (((unint64_t)v101 >> 3) - 2) >> 1;
          v103 = (float *)&v86[2 * v102];
          v104 = v103[1];
          v105 = v98[1];
          v106 = *v103;
          v107 = *v98;
          v108 = *(_DWORD *)v103 < *(_DWORD *)v98;
          if (v104 != v105)
            v108 = v104 < v105;
          if (v108)
          {
            do
            {
              v109 = v103;
              *v98 = v106;
              v98[1] = v103[1];
              if (!v102)
                break;
              v102 = (v102 - 1) >> 1;
              v103 = (float *)&v86[2 * v102];
              v110 = v103[1];
              v106 = *v103;
              v111 = v110 < v105;
              if (v110 == v105)
                v111 = *(_DWORD *)v103 < LODWORD(v107);
              v98 = v109;
            }
            while (v111);
            *v109 = v107;
            v109[1] = v105;
          }
        }
      }
      v87 = (float *)v100;
    }
    while (v88-- > 2);
  }
  if (v9)
    operator delete(v9);
}

uint64_t _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EED2Ev(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  const void *v6;

  *(_QWORD *)a1 = &off_1E6E31FD0;
  v2 = atomic_load((unsigned __int8 *)(a1 + 57));
  if ((v2 & 1) != 0)
    vi_onefixedsize_disk_allocator::unlinkStorage(*(_QWORD *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
  {
    storage_array_Close(v3 + 8);
    v4 = *(const void **)(v3 + 4208);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(v3 + 4208) = 0;
    }
    *(_OWORD *)(v3 + 4192) = 0u;
    MEMORY[0x1BCCB06A4](v3, 0x10A0C408BE2A288);
  }
  fd_release(*(char **)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v5)
  {
    storage_array_Close(v5 + 8);
    v6 = *(const void **)(v5 + 4208);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(v5 + 4208) = 0;
    }
    *(_OWORD *)(v5 + 4192) = 0u;
    MEMORY[0x1BCCB06A4](v5, 0x10A0C408BE2A288);
  }
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void ___ZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEv_block_invoke()
{
  uint64_t v0;
  unsigned __int8 v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  char __str[8];
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[4];
  void *__p[2];
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  v1 = atomic_load((unsigned __int8 *)&_ZGVZN19ZeroVectorQuantizerIDF16_Li768EE8centroidEvE8centroid);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_ZGVZN19ZeroVectorQuantizerIDF16_Li768EE8centroidEvE8centroid))
  {
    bzero(&_ZZN19ZeroVectorQuantizerIDF16_Li768EE8centroidEvE8centroid, 0x600uLL);
    __cxa_guard_release(&_ZGVZN19ZeroVectorQuantizerIDF16_Li768EE8centroidEvE8centroid);
  }
  if (_ZZN19ZeroVectorQuantizerIDF16_Li768EE8centroidEvE9onceToken != -1)
    dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li768EE8centroidEvE9onceToken, &__block_literal_global_403);
  *(_QWORD *)(v0 + 8) = 0;
  v2 = (void **)(v0 + 8);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)v0 = off_1E6E31E40;
  memcpy((void *)(v0 + 33), &_ZZN19ZeroVectorQuantizerIDF16_Li768EE8centroidEvE8centroid, 0x600uLL);
  bzero(__str, 0x400uLL);
  snprintf(__str, 0x400uLL, "S%08x%08x-1x%dx%u", _ZZN19ZeroVectorQuantizerIDF16_Li768EE8centroidEvE8centroid, dword_1EF1AEDEC, 768, 16);
  MEMORY[0x1BCCB03B0](v0 + 8, __str);
  *(_QWORD *)v0 = off_1E6E31DA0;
  v36 = 0u;
  v26 = 0;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  v25 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v23, 0, sizeof(v23));
  v3 = MEMORY[0x1E0DE4FD0];
  v4 = MEMORY[0x1E0DE4FD0] + 104;
  v27 = MEMORY[0x1E0DE4FD0] + 104;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = MEMORY[0x1E0DE4FD0] + 64;
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v22 = MEMORY[0x1E0DE4FD0] + 64;
  *(_QWORD *)__str = v7;
  *(_QWORD *)&__str[*(_QWORD *)(v7 - 24)] = v8;
  v21 = 0;
  v9 = (std::ios_base *)&__str[*(_QWORD *)(*(_QWORD *)__str - 24)];
  std::ios_base::init(v9, v23);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v10 = v5[5];
  v22 = v5[4];
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = v10;
  *(_QWORD *)__str = v5[1];
  *(_QWORD *)&__str[*(_QWORD *)(*(_QWORD *)__str - 24)] = v5[6];
  v27 = v4;
  *(_QWORD *)__str = v3 + 24;
  v22 = v6;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)&v23[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v25 = 0u;
  LODWORD(v26) = 24;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Z1000000000000000-1x", 20);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)"x", 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (*(char *)(v0 + 31) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = v18;
  *(_QWORD *)(v0 + 24) = v19;
  *(_QWORD *)__str = *v5;
  v13 = v5[9];
  *(_QWORD *)&__str[*(_QWORD *)(*(_QWORD *)__str - 24)] = v5[8];
  v22 = v13;
  *(_QWORD *)&v23[0] = v11;
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1BCCB0650](&v27);
  v14 = (_QWORD *)operator new();
  *v14 = &off_1E6E31EA0;
  v14[1] = 0;
  v14[2] = 0;
  v14[3] = v0;
  v15 = (std::__shared_weak_count *)qword_1EF1AE7D8;
  _ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq = v0;
  qword_1EF1AE7D8 = (uint64_t)v14;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void _ZNSt3__120__shared_ptr_pointerIP19ZeroVectorQuantizerIDF16_Li768EENS_10shared_ptrI9QuantizerIDF16_Li768EEE27__shared_ptr_default_deleteIS6_S2_EENS_9allocatorIS2_EEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

uint64_t _ZNSt3__120__shared_ptr_pointerIP19ZeroVectorQuantizerIDF16_Li768EENS_10shared_ptrI9QuantizerIDF16_Li768EEE27__shared_ptr_default_deleteIS6_S2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _ZN19ZeroVectorQuantizerIDF16_Li768EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void _ZN19ZeroVectorQuantizerIDF16_Li768EED0Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1BCCB06A4);
}

uint64_t _ZNK21SingleVectorQuantizerIDF16_Li768EE5countEv()
{
  return 1;
}

uint64_t _ZNK21SingleVectorQuantizerIDF16_Li768EE11getCentroidEj(uint64_t a1, int a2)
{
  char *v3;
  char *v4;
  const char *v5;

  if (a2)
  {
    v3 = __si_assert_copy_extra_268();
    v4 = v3;
    v5 = "";
    if (v3)
      v5 = v3;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 387, "i < 1", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a1 + 33;
}

float *_ZNK21SingleVectorQuantizerIDF16_Li768EE14topKPartitionsERK10CIVector_sIDF16_Li768EEi(uint64_t a1)
{
  uint64_t v1;
  float16x4_t *v2;
  float16x4_t *v3;
  uint64_t v4;
  float **v5;
  float **v6;
  uint64_t v7;
  float16x4_t *v8;
  float16x8_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float *v12;
  uint64_t v13;
  float16x4_t *v14;
  float16x8_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float *v18;
  float v19;
  float *result;
  float __B[768];
  float __A[768];
  float __C;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v4 = v1;
  v6 = v5;
  bzero(__A, 0xC00uLL);
  v7 = 0;
  v8 = v3 + 2;
  do
  {
    v9 = *(float16x8_t *)v8[-2].i8;
    v10 = vcvtq_f32_f16(*v8);
    v11 = vcvt_hight_f32_f16(*(float16x8_t *)v8->i8);
    v12 = &__A[v7];
    *(float32x4_t *)v12 = vcvtq_f32_f16(*(float16x4_t *)v9.i8);
    *((float32x4_t *)v12 + 1) = vcvt_hight_f32_f16(v9);
    *((float32x4_t *)v12 + 2) = v10;
    *((float32x4_t *)v12 + 3) = v11;
    v7 += 16;
    v8 += 4;
  }
  while (v7 != 768);
  bzero(__B, 0xC00uLL);
  v13 = 0;
  v14 = (float16x4_t *)(v4 + 49);
  do
  {
    v15 = *(float16x8_t *)v14[-2].i8;
    v16 = vcvtq_f32_f16(*v14);
    v17 = vcvt_hight_f32_f16(*(float16x8_t *)v14->i8);
    v18 = &__B[v13];
    *(float32x4_t *)v18 = vcvtq_f32_f16(*(float16x4_t *)v15.i8);
    *((float32x4_t *)v18 + 1) = vcvt_hight_f32_f16(v15);
    *((float32x4_t *)v18 + 2) = v16;
    *((float32x4_t *)v18 + 3) = v17;
    v13 += 16;
    v14 += 4;
  }
  while (v13 != 768);
  __C = 3.4028e38;
  vDSP_distancesq(__A, 1, __B, 1, &__C, 0x300uLL);
  v19 = __C;
  result = (float *)operator new(8uLL);
  v6[1] = result + 2;
  v6[2] = result + 2;
  *result = 0.0;
  result[1] = v19;
  *v6 = result;
  return result;
}

uint64_t _ZN21SingleVectorQuantizerIDF16_Li768EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void _ZN21SingleVectorQuantizerIDF16_Li768EED0Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1BCCB06A4);
}

__int16 ___ZN19ZeroVectorQuantizerIDF16_Li768EE8centroidEv_block_invoke@<H0>()
{
  __int16 result;

  bzero((char *)&_ZZN19ZeroVectorQuantizerIDF16_Li768EE8centroidEvE8centroid + 2, 0x5FEuLL);
  result = 15360;
  LOWORD(_ZZN19ZeroVectorQuantizerIDF16_Li768EE8centroidEvE8centroid) = 15360;
  return result;
}

uint64_t _ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8weak_ptrI16QuantizerManagerIDF16_Li768EEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SA_EEEEED1B8nn180100Ev(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  std::__shared_weak_count *v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = (std::__shared_weak_count *)*((_QWORD *)v2 + 6);
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

unsigned __int8 *_ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8weak_ptrI16QuantizerManagerIDF16_Li768EEEEEENS_22__unordered_map_hasherIS7_SC_NS_4hashIS7_EENS_8equal_toIS7_EELb1EEENS_21__unordered_map_equalIS7_SC_SH_SF_Lb1EEENS5_ISC_EEE25__emplace_unique_key_argsIS7_JRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSR_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeISC_PvEEEEbEERKT_DpOT0_(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void **v11;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD **v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *i;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  void *v47;

  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (uint64_t *)a1;
  else
    v4 = *(uint64_t **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v4, v5);
  v7 = v6;
  v8 = *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 1);
  if (*((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v6;
      if (v6 >= *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 1))
        v10 = v6 % *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 1);
    }
    else
    {
      v10 = (*((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 1) - 1) & v6;
    }
    v11 = *(void ***)(_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 8 * v10);
    if (v11)
    {
      v12 = (unsigned __int8 *)*v11;
      if (*v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = *((_QWORD *)v12 + 1);
            if (v17 == v7)
            {
              v18 = v12[39];
              if ((v18 & 0x80u) == 0)
                v19 = v12[39];
              else
                v19 = *((_QWORD *)v12 + 3);
              if (v19 == v5)
              {
                if ((v18 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v12 + 2), v4, *((_QWORD *)v12 + 3)))
                    return v12;
                }
                else
                {
                  if (!v12[39])
                    return v12;
                  v20 = 0;
                  while (v12[v20 + 16] == *((unsigned __int8 *)v4 + v20))
                  {
                    if (v18 == ++v20)
                      return v12;
                  }
                }
              }
            }
            else if ((v17 & (v8 - 1)) != v10)
            {
              goto LABEL_49;
            }
            v12 = *(unsigned __int8 **)v12;
            if (!v12)
              goto LABEL_49;
          }
        }
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v7)
          {
            v14 = v12[39];
            if ((v14 & 0x80u) == 0)
              v15 = v12[39];
            else
              v15 = *((_QWORD *)v12 + 3);
            if (v15 == v5)
            {
              if ((v14 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v12 + 2), v4, *((_QWORD *)v12 + 3)))
                  return v12;
              }
              else
              {
                if (!v12[39])
                  return v12;
                v16 = 0;
                while (v12[v16 + 16] == *((unsigned __int8 *)v4 + v16))
                {
                  if (v14 == ++v16)
                    return v12;
                }
              }
            }
          }
          else
          {
            if (v13 >= v8)
              v13 %= v8;
            if (v13 != v10)
              break;
          }
          v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_49:
  v12 = (unsigned __int8 *)operator new(0x38uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v7;
  v21 = (std::string *)(v12 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v12 + 4) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v12 + 5) = 0;
  *((_QWORD *)v12 + 6) = 0;
  v22 = (float)(unint64_t)(qword_1EF1B06E0 + 1);
  if (!v8 || (float)(*(float *)&dword_1EF1B06E8 * (float)v8) < v22)
  {
    v23 = 1;
    if (v8 >= 3)
      v23 = (v8 & (v8 - 1)) != 0;
    v24 = v23 | (2 * v8);
    v25 = vcvtps_u32_f32(v22 / *(float *)&dword_1EF1B06E8);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v8 = *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 1);
    if (prime <= *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 1))
    {
      if (prime >= *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 1))
        goto LABEL_89;
      v37 = vcvtps_u32_f32((float)(unint64_t)qword_1EF1B06E0 / *(float *)&dword_1EF1B06E8);
      if (*((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 1) < 3uLL
        || (v38 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers
                                                 + 8)),
            v38.i16[0] = vaddlv_u8(v38),
            v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime >= v8)
      {
        v8 = *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 1);
LABEL_89:
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v7 >= v8)
            v10 = v7 % v8;
          else
            v10 = v7;
        }
        else
        {
          v10 = (v8 - 1) & v7;
        }
        goto LABEL_102;
      }
      if (!prime)
      {
        v47 = (void *)_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers;
        *(_QWORD *)&_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers = 0;
        if (v47)
          operator delete(v47);
        v8 = 0;
        *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 1) = 0;
        goto LABEL_89;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v27 = operator new(8 * prime);
    v28 = (void *)_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers;
    *(_QWORD *)&_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers = v27;
    if (v28)
      operator delete(v28);
    v29 = 0;
    *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 1) = prime;
    do
      *(_QWORD *)(_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 8 * v29++) = 0;
    while (prime != v29);
    v30 = (_QWORD **)qword_1EF1B06D8;
    if (!qword_1EF1B06D8)
    {
LABEL_88:
      v8 = prime;
      goto LABEL_89;
    }
    v31 = *(_QWORD *)(qword_1EF1B06D8 + 8);
    v32 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v33 = v31 & v32;
      *(_QWORD *)(_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 8 * v33) = &qword_1EF1B06D8;
      for (i = *v30; *v30; i = *v30)
      {
        v35 = i[1] & v32;
        if (v35 == v33)
        {
          v30 = (_QWORD **)i;
        }
        else if (*(_QWORD *)(_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 8 * v35))
        {
          *v30 = (_QWORD *)*i;
          v36 = 8 * v35;
          *i = **(_QWORD **)(_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + v36);
          **(_QWORD **)(_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + v36) = i;
        }
        else
        {
          *(_QWORD *)(_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 8 * v35) = v30;
          v30 = (_QWORD **)i;
          v33 = v35;
        }
      }
      goto LABEL_88;
    }
    if (v31 >= prime)
      v31 %= prime;
    *(_QWORD *)(_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 8 * v31) = &qword_1EF1B06D8;
    v40 = *v30;
    if (!*v30)
      goto LABEL_88;
    while (1)
    {
      v42 = v40[1];
      if (v42 >= prime)
        v42 %= prime;
      if (v42 != v31)
      {
        if (!*(_QWORD *)(_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 8 * v42))
        {
          *(_QWORD *)(_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 8 * v42) = v30;
          goto LABEL_93;
        }
        *v30 = (_QWORD *)*v40;
        v41 = 8 * v42;
        *v40 = **(_QWORD **)(_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + v41);
        **(_QWORD **)(_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + v41) = v40;
        v40 = v30;
      }
      v42 = v31;
LABEL_93:
      v30 = (_QWORD **)v40;
      v40 = (_QWORD *)*v40;
      v31 = v42;
      if (!v40)
        goto LABEL_88;
    }
  }
LABEL_102:
  v43 = _ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers;
  v44 = *(_QWORD **)(_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 8 * v10);
  if (v44)
  {
    *(_QWORD *)v12 = *v44;
LABEL_110:
    *v44 = v12;
    goto LABEL_111;
  }
  *(_QWORD *)v12 = qword_1EF1B06D8;
  qword_1EF1B06D8 = (uint64_t)v12;
  *(_QWORD *)(v43 + 8 * v10) = &qword_1EF1B06D8;
  if (*(_QWORD *)v12)
  {
    v45 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v45 >= v8)
        v45 %= v8;
    }
    else
    {
      v45 &= v8 - 1;
    }
    v44 = (_QWORD *)(_ZZN16QuantizerManagerIDF16_Li768EE14sharedInstanceEijtE8managers + 8 * v45);
    goto LABEL_110;
  }
LABEL_111:
  ++qword_1EF1B06E0;
  return v12;
}

void _ZNSt3__120__shared_ptr_pointerIP16QuantizerManagerIDF16_Li768EENS_10shared_ptrIS2_E27__shared_ptr_default_deleteIS2_S2_EENS_9allocatorIS2_EEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

uint64_t _ZNSt3__120__shared_ptr_pointerIP16QuantizerManagerIDF16_Li768EENS_10shared_ptrIS2_E27__shared_ptr_default_deleteIS2_S2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv(uint64_t result)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *__error();
    v3 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = (_QWORD *)(v1 + 24);
      if (*(char *)(v1 + 47) < 0)
        v4 = (_QWORD *)*v4;
      v5 = (_QWORD *)(v1 + 48);
      if (*(char *)(v1 + 71) < 0)
        v5 = (_QWORD *)*v5;
      v16 = 136315394;
      v17 = v4;
      v18 = 2080;
      v19 = v5;
      _os_log_impl(&dword_1B8270000, v3, OS_LOG_TYPE_DEFAULT, "QuantizerManager %s/%s destroyed", (uint8_t *)&v16, 0x16u);
    }
    *__error() = v2;
    v6 = *(_QWORD **)(v1 + 128);
    if (v6)
    {
      do
      {
        v14 = (_QWORD *)*v6;
        v15 = (std::__shared_weak_count *)v6[4];
        if (v15)
          std::__shared_weak_count::__release_weak(v15);
        operator delete(v6);
        v6 = v14;
      }
      while (v14);
    }
    v7 = *(void **)(v1 + 112);
    *(_QWORD *)(v1 + 112) = 0;
    if (v7)
      operator delete(v7);
    v8 = *(std::__shared_weak_count **)(v1 + 104);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = *(std::__shared_weak_count **)(v1 + 88);
    if (!v11)
      goto LABEL_20;
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((*(char *)(v1 + 71) & 0x80000000) == 0)
      {
LABEL_21:
        if ((*(char *)(v1 + 47) & 0x80000000) == 0)
          goto LABEL_30;
        goto LABEL_29;
      }
    }
    else
    {
LABEL_20:
      if ((*(char *)(v1 + 71) & 0x80000000) == 0)
        goto LABEL_21;
    }
    operator delete(*(void **)(v1 + 48));
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
LABEL_30:
      JUMPOUT(0x1BCCB06A4);
LABEL_29:
    operator delete(*(void **)(v1 + 24));
    goto LABEL_30;
  }
  return result;
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsEENS_9allocatorIS6_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E33ED0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsEENS_9allocatorIS6_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E33ED0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsEENS_9allocatorIS6_EEE16__on_zero_sharedEv(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
  {
    storage_array_Close(v2 + 8);
    v3 = *(const void **)(v2 + 4208);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(v2 + 4208) = 0;
    }
    *(_OWORD *)(v2 + 4192) = 0u;
    JUMPOUT(0x1BCCB06A4);
  }
}

void _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED0Ev(_QWORD *a1)
{
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev(a1);
  JUMPOUT(0x1BCCB06A4);
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12getQuantizerEv(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  os_unfair_lock_s *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v6 = *(_QWORD *)(a1 + 80);
  v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(std::__shared_weak_count **)(a1 + 104);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  os_unfair_lock_unlock(v4);
  *a2 = v6;
  a2[1] = v5;
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (!v9)
    goto LABEL_14;
  v14 = (unint64_t *)&v9->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v5)
      return;
  }
  else
  {
LABEL_14:
    if (!v5)
      return;
  }
  v16 = (unint64_t *)&v5->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  os_unfair_lock_s *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v9 = *(_QWORD *)(a1 + 96);
  v8 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v8)
  {
    os_unfair_lock_unlock(v4);
    *a2 = v9;
    a2[1] = 0;
    if (!v5)
      return;
    goto LABEL_15;
  }
  v10 = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  os_unfair_lock_unlock(v4);
  *a2 = v9;
  a2[1] = v8;
  do
    v12 = __ldxr(v10);
  while (__stxr(v12 + 1, v10));
  do
    v13 = __ldaxr(v10);
  while (__stlxr(v13 - 1, v10));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v5)
  {
LABEL_15:
    v14 = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

unint64_t _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE17getVectorAtOffsetEj(uint64_t a1, unsigned int a2)
{
  return _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 16) * a2, 0x610uLL);
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13newPartitionsENSt3__110shared_ptrI9QuantizerIDF16_Li768EEEE(uint64_t a1@<X0>, char **a2@<X1>, _QWORD *a3@<X8>)
{
  os_unfair_lock_s *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  const char *v14;
  __int128 v15;
  size_t v16;
  void *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  int v32;
  int v33;
  NSObject *v34;
  void **v35;
  int v36;
  int v37;
  char *v38;
  _QWORD *v39;
  int v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  const char *v47;
  void *__p[2];
  char v49;
  _OWORD v50[2];
  void *__dst[2];
  unint64_t v52;
  _OWORD v53[2];
  __int128 v54;
  __int128 v55;
  uint8_t buf[24];
  __int16 v57;
  _QWORD *v58;
  __int16 v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v6 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v7 = *(std::__shared_weak_count **)(a1 + 88);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v11 = *(_QWORD *)(a1 + 96);
  v10 = *(std::__shared_weak_count **)(a1 + 104);
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  os_unfair_lock_unlock(v6);
  v14 = ".partitions";
  if (v11 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11))
    v14 = ".tmp.partitions";
  v55 = 0u;
  v15 = *(_OWORD *)(a1 + 24);
  v53[0] = *(_OWORD *)(a1 + 8);
  v53[1] = v15;
  v54 = 0u;
  v16 = strlen(v14);
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
LABEL_60:
    abort();
  v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    v18 = (void **)operator new(v19 + 1);
    __dst[1] = v17;
    v52 = v20 | 0x8000000000000000;
    __dst[0] = v18;
    goto LABEL_17;
  }
  HIBYTE(v52) = v16;
  v18 = __dst;
  if (v16)
LABEL_17:
    memcpy(v18, v14, (size_t)v17);
  *((_BYTE *)v17 + (_QWORD)v18) = 0;
  IVFVectorIndexTemplate<float,768>::childMetaInfo((uint64_t)&v54, (uint64_t)v53, (uint64_t)__dst, 1);
  if (SHIBYTE(v52) < 0)
    operator delete(__dst[0]);
  v21 = operator new();
  v22 = (_DWORD *)v21;
  v50[0] = v54;
  v50[1] = v55;
  v23 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)buf = *a2;
  *(_QWORD *)&buf[8] = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    PartitionStore<vi_onefixedsize_disk_allocator,512>::PartitionStore<vi_onefixedsize_disk_allocator>(v21, (uint64_t)v50, buf);
    do
      v26 = __ldaxr(v24);
    while (__stlxr(v26 - 1, v24));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  else
  {
    PartitionStore<vi_onefixedsize_disk_allocator,512>::PartitionStore<vi_onefixedsize_disk_allocator>(v21, (uint64_t)v50, buf);
  }
  *a3 = v22;
  v27 = (_QWORD *)operator new();
  *v27 = &off_1E6E33858;
  v27[1] = 0;
  v27[2] = 0;
  v27[3] = v22;
  a3[1] = v27;
  v28 = *(_QWORD *)(a1 + 48);
  if (*(_DWORD *)(v28 + 40))
  {
    v29 = 0;
    do
    {
      memset(buf, 0, sizeof(buf));
      v30 = *a2;
      v31 = _windowsResolvePtr(*(_QWORD *)(v28 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v28 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v28 + 32) + 16) * v29, 0x610uLL);
      (*(void (**)(uint8_t *__return_ptr, char *, unint64_t, uint64_t))(*(_QWORD *)v30 + 72))(buf, v30, v31, 1);
      (*(void (**)(_DWORD *, _QWORD, unint64_t, float))(*(_QWORD *)v22 + 56))(v22, **(_DWORD **)buf, v29, *(float *)(*(_QWORD *)buf + 4));
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      ++v29;
      v28 = *(_QWORD *)(a1 + 48);
    }
    while (v29 < *(unsigned int *)(v28 + 40));
  }
  (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v22 + 112))(v22, 0);
  v32 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 40);
  if (v32)
  {
    v33 = *__error();
    v34 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, _DWORD *))(*(_QWORD *)v22 + 144))(__p, v22);
      if (v49 >= 0)
        v35 = __p;
      else
        v35 = (void **)__p[0];
      v36 = v22[17];
      v37 = v22[18];
      v38 = *a2;
      v39 = *a2 + 8;
      if (v38[31] < 0)
        v39 = (_QWORD *)*v39;
      v40 = (*(uint64_t (**)(char *))(*(_QWORD *)v38 + 16))(v38);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = v35;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v37;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v36;
      v57 = 2080;
      v58 = v39;
      v59 = 1024;
      v60 = v40;
      _os_log_impl(&dword_1B8270000, v34, OS_LOG_TYPE_DEFAULT, "Create new partitions %s(%u/%u) for new quantizer %s(%u)", buf, 0x28u);
      if (v49 < 0)
        operator delete(__p[0]);
    }
    *__error() = v33;
    v32 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 40);
  }
  if (v22[18] != v32)
  {
    v45 = __si_assert_copy_extra_268();
    v46 = v45;
    v47 = "";
    if (v45)
      v47 = v45;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2363, "newPartitions->nVectors() == vectors->count()", v47);
    free(v46);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    goto LABEL_60;
  }
  if (v10)
  {
    v41 = (unint64_t *)&v10->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v7)
  {
    v43 = (unint64_t *)&v7->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li768EEEENS6_I17AnyPartitionStoreEE(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  std::__shared_weak_count *v8;
  __int128 *v9;
  char *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  _DWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  _DWORD *v18;
  NSObject *v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  void **v23;
  int v24;
  void **v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  const char *v47;
  char *v48;
  const char *v49;
  _QWORD *v50;
  _QWORD *v51;
  int v52;
  int v53;
  int v54;
  os_unfair_lock_s *v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *__p[2];
  char v61;
  void *v62[2];
  char v63;
  uint8_t buf[4];
  _QWORD *v65;
  __int16 v66;
  int v67;
  __int16 v68;
  _QWORD *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  void **v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  void **v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v6 = (os_unfair_lock_s *)(a1 + 152);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
  v7 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v10 = *(char **)(a1 + 80);
  v8 = *(std::__shared_weak_count **)(a1 + 88);
  v9 = (__int128 *)(a1 + 80);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(_DWORD **)(a1 + 96);
  v13 = *(std::__shared_weak_count **)(a1 + 104);
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
  v18 = (_DWORD *)*a3;
  if (v17 != *(_DWORD *)(*a3 + 68))
  {
    v45 = __si_assert_copy_extra_268();
    v46 = v45;
    v47 = "";
    if (v45)
      v47 = v45;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2381, "newQuantizer->count() == newPartitions->nPartitions()", v47);
LABEL_64:
    free(v46);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 48) + 40) != v18[18])
  {
    v48 = __si_assert_copy_extra_268();
    v46 = v48;
    v49 = "";
    if (v48)
      v49 = v48;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2382, "vectors->count() == newPartitions->nVectors()", v49);
    goto LABEL_64;
  }
  if (v10 && v14)
  {
    v56 = *__error();
    v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = v10 + 8;
      if (v10[31] < 0)
        v20 = (_QWORD *)*v20;
      v51 = v20;
      v21 = (*(uint64_t (**)(char *))(*(_QWORD *)v10 + 16))(v10);
      v22 = (_QWORD *)(*a2 + 8);
      v55 = v6;
      v54 = v21;
      if (*(char *)(*a2 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v50 = v22;
      v53 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
      v23 = v62;
      (*(void (**)(void **__return_ptr, _DWORD *))(*(_QWORD *)v14 + 144))(v62, v14);
      if (v63 < 0)
        v23 = (void **)v62[0];
      v24 = v14[18];
      v52 = v14[17];
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a3 + 144))(__p);
      v25 = __p;
      if (v61 < 0)
        v25 = (void **)__p[0];
      v26 = *(_DWORD *)(*a3 + 68);
      v27 = *(_DWORD *)(*a3 + 72);
      *(_DWORD *)buf = 136317442;
      v65 = v51;
      v66 = 1024;
      v67 = v54;
      v68 = 2080;
      v69 = v50;
      v70 = 1024;
      v71 = v53;
      v72 = 2080;
      v73 = v23;
      v74 = 1024;
      v75 = v24;
      v76 = 1024;
      v77 = v52;
      v78 = 2080;
      v79 = v25;
      v80 = 1024;
      v81 = v27;
      v82 = 1024;
      v83 = v26;
      _os_log_impl(&dword_1B8270000, v19, OS_LOG_TYPE_DEFAULT, "Replace quantizer %s(%u) -> %s(%u), partitions %s(%u/%u) -> %s(%u/%u)", buf, 0x4Eu);
      if (v61 < 0)
        operator delete(__p[0]);
      v6 = v55;
      if (v63 < 0)
        operator delete(v62[0]);
    }
    *__error() = v56;
    v18 = (_DWORD *)*a3;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v18 + 24))(v18))
    v28 = v14 == 0;
  else
    v28 = 1;
  if (!v28 && (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v14 + 24))(v14))
    (*(void (**)(_QWORD, _DWORD *))(*(_QWORD *)*a3 + 168))(*a3, v14);
  v29 = a2[1];
  *(_QWORD *)&v57 = *a2;
  *((_QWORD *)&v57 + 1) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = (std::__shared_weak_count *)a3[1];
  v58 = *a3;
  v59 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  os_unfair_lock_lock(v7);
  std::swap[abi:nn180100]<IVFVectorIndexTemplate<float,768>::QuantizerPartitions>(v9, &v57);
  os_unfair_lock_unlock(v7);
  v35 = v59;
  if (v59)
  {
    v36 = (unint64_t *)&v59->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  os_unfair_lock_unlock(v6);
  if (v13)
  {
    v41 = (unint64_t *)&v13->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v8)
  {
    v43 = (unint64_t *)&v8->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

_QWORD *_ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *a1 = &off_1E6E33E88;
  v2 = (std::__shared_weak_count *)a1[13];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[11];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[11];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[9];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[7];
    if (!v11)
      return a1;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[7];
    if (!v11)
      return a1;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return a1;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E33D30;
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev((_QWORD *)(a1 + 48));
  *(_QWORD *)a1 = off_1E6E30C80;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EED0Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E33D30;
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev((_QWORD *)(a1 + 48));
  *(_QWORD *)a1 = off_1E6E30C80;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCCB06A4);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE8nVectorsEv(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1 + 48);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE11nPartitionsEv(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1 + 48);
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE8allExistEPKvj(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  float v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  char *v14;
  char *v15;
  const char *v16;
  uint8_t buf[4];
  double v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a3)
  {
    v5 = a1 + 48;
    v6 = a3;
    if (a3 <= 0x3E8)
    {
      while (_ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li768EE(v5, a2))
      {
        a2 += 1536;
        if (!--v6)
          return a3;
      }
    }
    else
    {
      v7 = 0;
      v8 = a3 / 0xA;
      v9 = 1.0 / (float)a3;
      while (1)
      {
        v10 = v7 + 1;
        if (!(((int)v7 + 1) % v8))
        {
          v11 = *__error();
          v12 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            v18 = (float)((float)((float)v7 * 100.0) * v9);
            _os_log_impl(&dword_1B8270000, v12, OS_LOG_TYPE_DEFAULT, "allExist: %.0f%%", buf, 0xCu);
          }
          *__error() = v11;
        }
        if (!_ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li768EE(v5, a2))break;
        a2 += 1536;
        ++v7;
        if (a3 == v10)
          return a3;
      }
    }
    v14 = __si_assert_copy_extra_268();
    v15 = v14;
    v16 = "";
    if (v14)
      v16 = v14;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3151, "false", v16);
    free(v15);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a3;
}

BOOL _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE12validAddressEPKv(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 32);
  v3 = *(unsigned int *)(v2 + 64);
  if ((int)v3 < 1)
  {
    v8 = -1;
  }
  else
  {
    v4 = 11;
    do
    {
      v5 = *(_QWORD **)(v2 + 8 * v4);
      if (v5 && (v6 = v5[1], v6 + 1 >= 2) && v6 <= a2 && (v7 = v5[2], v6 - v7 + v5[3] > a2))
        v8 = a2 - v6 + v7;
      else
        v8 = -1;
      if (v4 - 10 >= v3)
        break;
      ++v4;
    }
    while (v8 == -1);
  }
  return v8 != -1;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE6shadowEbPVi(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  os_unfair_lock_s *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v6 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v7 = *(std::__shared_weak_count **)(a1 + 136);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v11 = *(_QWORD *)(a1 + 144);
  v10 = *(std::__shared_weak_count **)(a1 + 152);
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v11 + 160))(v11, a2, a3);
  v14 = vi_onefixedsize_disk_allocator::shadow(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32), a2, a3);
  if (!v10)
    goto LABEL_11;
  v15 = (unint64_t *)&v10->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v7)
      return v14;
  }
  else
  {
LABEL_11:
    if (!v7)
      return v14;
  }
  v17 = (unint64_t *)&v7->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v14;
}

_DWORD *_ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE17bulkInsertForTestEPKvPKjjS8_(_DWORD *result, char *a2, unsigned int *a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint8_t buf[4];
  double v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v8 = (uint64_t)(result + 12);
    v9 = a4;
    if (a4 <= 0x3E8)
    {
      do
      {
        v19 = *a5++;
        v18 = v19;
        v20 = *a3++;
        result = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb(v8, v18, a2, 0xFFFFFFFFLL, 0, 3.4028e38);
        *((_QWORD *)result + 192) = v20;
        a2 += 1536;
        --v9;
      }
      while (v9);
    }
    else
    {
      v10 = 0;
      v11 = a4 / 0xA;
      v12 = 1.0 / (float)a4;
      do
      {
        v15 = v10 + 1;
        if (!(((int)v10 + 1) % v11))
        {
          v16 = *__error();
          v17 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            v22 = (float)((float)((float)v10 * 100.0) * v12);
            _os_log_impl(&dword_1B8270000, v17, OS_LOG_TYPE_DEFAULT, "bulkInsertForTest: %.0f%%", buf, 0xCu);
          }
          *__error() = v16;
        }
        v13 = a5[v10];
        v14 = a3[v10];
        result = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb(v8, v13, a2, 0xFFFFFFFFLL, 0, 3.4028e38);
        *((_QWORD *)result + 192) = v14;
        a2 += 1536;
        v10 = v15;
      }
      while (v9 != v15);
    }
  }
  return result;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE12insertVectorEjjPKv14vec_dimensions15vec_data_format14docInvertStateyP15PostingBaseInfo(_DWORD *a1, int a2, unsigned int a3, void *a4, int a5, int a6)
{
  char *v6;
  char *v7;
  const char *v8;
  char *v9;
  const char *v10;

  if (a1[2] == a2
    && a6 <= 2
    && a1[3] == vector_dimension_vec_sizes_10743[a5]
    && vector_size_elem_sizes_10742[a6] == a1[4])
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFFLL, 0, 3.4028e38);
    v6 = __si_assert_copy_extra_268();
    v7 = v6;
    v8 = "";
    if (v6)
      v8 = v6;
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2636, "0", v8);
  }
  else
  {
    v9 = __si_assert_copy_extra_268();
    v7 = v9;
    v10 = "";
    if (v9)
      v10 = v9;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v10);
  }
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE14insertForMergeEjtjPKv14vec_dimensions15vec_data_formatyjf(uint64_t a1, int a2, int a3, unsigned int a4, void *a5, int a6, int a7, uint64_t a8, float a9, unsigned int a10)
{
  char *v11;
  char *v12;
  const char *v13;

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a7 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a6]
    || vector_size_elem_sizes_10742[a7] != *(_DWORD *)(a1 + 16))
  {
    v11 = __si_assert_copy_extra_268();
    v12 = v11;
    v13 = "";
    if (v11)
      v13 = v11;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v13);
    free(v12);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16insertForCompactEjPK10CIVector_sIDF16_Li768EEyjf(a1 + 48, a4, a5, a8, a10, a9);
  return 1;
}

_DWORD *_ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE13insertForTestEjjPKv14vec_dimensions15vec_data_formatj(_DWORD *a1, int a2, unsigned int a3, void *a4, int a5, int a6, unsigned int a7)
{
  uint64_t v7;
  _DWORD *result;
  char *v9;
  char *v10;
  const char *v11;

  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != a1[4])
  {
    v9 = __si_assert_copy_extra_268();
    v10 = v9;
    v11 = "";
    if (v9)
      v11 = v9;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v11);
    free(v10);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v7 = a7;
  result = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFFLL, 0, 3.4028e38);
  *((_QWORD *)result + 192) = v7;
  return result;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE5trainERKNSt3__16vectorIP22AnyVectorIndexInstanceNS5_9allocatorIS8_EEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  char *v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  char *v30;
  char *v31;
  const char *v32;
  char *v33;
  char *v34;
  const char *v35;
  char *v36;
  const char *v37;
  uint64_t v38;
  void *__p;
  _QWORD *v40;
  char *v41;

  v3 = *(_QWORD **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  v4 = v2 - *(_QWORD *)a2;
  if (v2 == *(_QWORD *)a2)
  {
    v33 = __si_assert_copy_extra_268();
    v34 = v33;
    v35 = "";
    if (v33)
      v35 = v33;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3170, "vi.size() > 0", v35);
    goto LABEL_53;
  }
  if (*v3 != a1)
  {
    v36 = __si_assert_copy_extra_268();
    v34 = v36;
    v37 = "";
    if (v36)
      v37 = v36;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3171, "this == vi[0]", v37);
LABEL_53:
    free(v34);
    if (__valid_fs(-1))
      v38 = 2989;
    else
      v38 = 3072;
    *(_DWORD *)v38 = -559038737;
LABEL_57:
    abort();
  }
  v7 = (char *)operator new(8uLL);
  *(_QWORD *)v7 = a1 + 48;
  v8 = v7 + 8;
  v40 = v7 + 8;
  v41 = v7 + 8;
  __p = v7;
  if (v4 < 9)
    goto LABEL_39;
  v9 = 1;
  do
  {
    v11 = v3[v9];
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(v11 + 8)
      || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(v11 + 20)
      || *(_DWORD *)(a1 + 12) != *(_DWORD *)(v11 + 12)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(v11 + 16))
    {
      v30 = __si_assert_copy_extra_268();
      v31 = v30;
      v32 = "";
      if (v30)
        v32 = v30;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v32);
      free(v31);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v12 = v11 + 48;
    if (v8 < v41)
    {
      *(_QWORD *)v8 = v12;
      v10 = v8 + 8;
      goto LABEL_6;
    }
    v13 = (char *)__p;
    v14 = v8 - (_BYTE *)__p;
    v15 = (v8 - (_BYTE *)__p) >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      goto LABEL_57;
    v17 = v41 - (_BYTE *)__p;
    if ((v41 - (_BYTE *)__p) >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = operator new(8 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = v12;
    v10 = v20 + 1;
    if (v8 == v13)
    {
      __p = &v19[8 * v15];
      v41 = v21;
LABEL_33:
      operator delete(v8);
      goto LABEL_6;
    }
    v22 = v8 - 8 - v13;
    if (v22 > 0x167
      && &v19[v14 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] <= &v19[v14 - 8]
      && &v8[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] <= v8 - 8
      && (unint64_t)(v8 - v19 - v14) >= 0x20)
    {
      v25 = (v22 >> 3) + 1;
      v23 = &v8[-8 * (v25 & 0x3FFFFFFFFFFFFFFCLL)];
      v26 = &v19[8 * v15 - 16];
      v27 = v8 - 16;
      v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v20 -= v25 & 0x3FFFFFFFFFFFFFFCLL;
      if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_30;
    }
    else
    {
      v23 = v8;
    }
    do
    {
      v24 = *((_QWORD *)v23 - 1);
      v23 -= 8;
      *--v20 = v24;
    }
    while (v23 != v13);
    v13 = (char *)__p;
LABEL_30:
    __p = v20;
    v41 = v21;
    v8 = v13;
    if (v13)
      goto LABEL_33;
LABEL_6:
    v40 = v10;
    ++v9;
    v3 = *(_QWORD **)a2;
    v8 = (char *)v10;
  }
  while (v9 < (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v7 = (char *)__p;
LABEL_39:
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(_QWORD *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)&__p);
  if (v7)
    operator delete(v7);
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE14mergeUpdateSetEPK22AnyVectorIndexInstanceP15PostingBaseInfoP17TermIdContainer_s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _DWORD *inserted;
  uint64_t v26;
  uint64_t result;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  const char *v36;
  char *v37;
  const char *v38;
  _DWORD v39[4];
  void *__src;
  uint64_t v41;
  uint8_t buf[1536];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v37 = __si_assert_copy_extra_268();
    v35 = v37;
    v38 = "";
    if (v37)
      v38 = v37;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v38);
LABEL_38:
    free(v35);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v7 = *__error();
  v8 = _SILogForLogForCategory(16);
  v9 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v10;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v11;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v12;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&buf[22] = v13;
    _os_log_impl(&dword_1B8270000, v8, v9, "mergeUpdateSet(termIds) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v7;
  v14 = a2 + 48;
  v15 = operator new(0x10uLL);
  *(_QWORD *)&buf[8] = v15 + 2;
  *(_QWORD *)&buf[16] = v15 + 2;
  *v15 = a1 + 48;
  v15[1] = v14;
  *(_QWORD *)buf = v15;
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(_QWORD *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)buf);
  operator delete(v15);
  v16 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(v14);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::beginMerge(a1 + 48);
  while (1)
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE12enumerator_s4nextEv((uint64_t)v39, v16);
    if (!__src)
      break;
    v17 = v39[0];
    v18 = *(float *)&v39[1];
    v19 = v39[2];
    v20 = v41;
    memcpy(buf, __src, sizeof(buf));
    v22 = *(_QWORD *)(a4 + 8);
    v21 = *(_QWORD *)(a4 + 16);
    v23 = v22 + 1;
    if (v22 + 1 < v21)
    {
      v24 = *(_QWORD **)a4;
      goto LABEL_17;
    }
    if (v21)
    {
      if (v23 >= v21)
        goto LABEL_14;
    }
    else
    {
      *(_QWORD *)(a4 + 16) = 1024;
      v21 = 1024;
      if (v23 >= 0x400)
      {
        do
LABEL_14:
          v21 *= 2;
        while (v23 >= v21);
        *(_QWORD *)(a4 + 16) = v21;
      }
    }
    v24 = malloc_type_realloc(*(void **)a4, 24 * v21, 0x10200409F4E64B8uLL);
    *(_QWORD *)a4 = v24;
    v22 = *(_QWORD *)(a4 + 8);
    v23 = v22 + 1;
LABEL_17:
    v24[3 * v22 + 1] = v20;
    *(_QWORD *)(a4 + 8) = v23;
    if (*(_DWORD *)(a1 + 204) == -1)
    {
      v34 = __si_assert_copy_extra_268();
      v35 = v34;
      v36 = "";
      if (v34)
        v36 = v34;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2689, "mergeBeginVectorOffset < VECTOR_NOT_FOUND", v36);
      goto LABEL_38;
    }
    inserted = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb(a1 + 48, v19, buf, v17, 0, v18);
    v26 = *((_QWORD *)inserted + 192);
    if (!v26)
    {
      v26 = (*(_DWORD *)(a4 + 24) + 1);
      *(_DWORD *)(a4 + 24) = v26;
      *((_QWORD *)inserted + 192) = v26;
    }
    *(_DWORD *)(*(_QWORD *)a4 + 24 * v22) = v26;
  }
  result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::endMerge(a1 + 48);
  if (v16)
  {
    std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100](v16 + 32);
    v28 = *(std::__shared_weak_count **)(v16 + 24);
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = *(std::__shared_weak_count **)(v16 + 8);
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    return MEMORY[0x1BCCB06A4](v16, 0x10A0C40B50FE552);
  }
  return result;
}

int *_ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE14mergeUpdateSetEPK22AnyVectorIndexInstanceP15PostingBaseInfojy(int *result, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  const char *v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char *v14;
  const char *v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (result[2] != *(_DWORD *)(a2 + 8)
    || (v3 = result, *((unsigned __int16 *)result + 10) != *(unsigned __int16 *)(a2 + 20))
    || result[3] != *(_DWORD *)(a2 + 12)
    || result[4] != *(_DWORD *)(a2 + 16))
  {
    v5 = __si_assert_copy_extra_268();
    v6 = v5;
    v7 = "";
    if (v5)
      v7 = v5;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v7);
LABEL_11:
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (dword_1EF19FCCC >= 5)
  {
    v8 = *__error();
    v9 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (*(uint64_t (**)(int *))(*(_QWORD *)v3 + 16))(v3);
      v11 = (*(uint64_t (**)(int *))(*(_QWORD *)v3 + 24))(v3);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      *(_DWORD *)buf = 67109888;
      v17 = v10;
      v18 = 1024;
      v19 = v11;
      v20 = 1024;
      v21 = v12;
      v22 = 1024;
      v23 = v13;
      _os_log_impl(&dword_1B8270000, v9, OS_LOG_TYPE_DEFAULT, "mergeUpdateSet(DocID) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    result = __error();
    *result = v8;
  }
  v4 = *(_QWORD *)(a2 + 80);
  if (*(_DWORD *)(v4 + 24))
  {
    _ZNK22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratorptEv(v4, 0);
    _ZNK22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratorptEv(v4, 0);
    _ZNK22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratorptEv(v4, 0);
    v14 = __si_assert_copy_extra_268();
    v6 = v14;
    v15 = "";
    if (v14)
      v15 = v14;
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2447, "0", v15);
    goto LABEL_11;
  }
  return result;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE21mergeUpdateSetForTestEPK22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *inserted;
  uint64_t v18;
  uint64_t result;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  const char *v28;
  char *v29;
  const char *v30;
  uint8_t buf[8];
  _QWORD *v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v26 = __si_assert_copy_extra_268();
    v27 = v26;
    v28 = "";
    if (v26)
      v28 = v26;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v28);
LABEL_32:
    free(v27);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  v6 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v7;
    LOWORD(v32) = 1024;
    *(_DWORD *)((char *)&v32 + 2) = v8;
    HIWORD(v32) = 1024;
    LODWORD(v33) = v9;
    WORD2(v33) = 1024;
    *(_DWORD *)((char *)&v33 + 6) = v10;
    _os_log_impl(&dword_1B8270000, v5, v6, "mergeUpdateSetForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v4;
  v11 = operator new(0x10uLL);
  v32 = v11 + 2;
  *(_QWORD *)&v33 = v11 + 2;
  *v11 = a1 + 48;
  v11[1] = a2 + 48;
  *(_QWORD *)buf = v11;
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(_QWORD *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)buf);
  operator delete(v11);
  v12 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::beginMerge(a1 + 48);
  v15 = 0;
  while (1)
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE12enumerator_s4nextEv((uint64_t)buf, v12);
    if (!(_QWORD)v33)
      break;
    v16 = *(unsigned int *)(*((_QWORD *)&v33 + 1) + 8);
    inserted = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb(a1 + 48, v32, (void *)v33, *(unsigned int *)buf, 0, *(float *)&buf[4]);
    v18 = *((_QWORD *)inserted + 192);
    *((_QWORD *)inserted + 192) = v16;
    if (v18)
      ++v15;
  }
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::endMerge(a1 + 48);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result + v15 != v14 + v13)
  {
    v29 = __si_assert_copy_extra_268();
    v27 = v29;
    v30 = "";
    if (v29)
      v30 = v29;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3267, "nVectors() + dup == old + added", v30);
    goto LABEL_32;
  }
  if (v12)
  {
    std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100](v12 + 32);
    v20 = *(std::__shared_weak_count **)(v12 + 24);
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = *(std::__shared_weak_count **)(v12 + 8);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    return MEMORY[0x1BCCB06A4](v12, 0x10A0C40B50FE552);
  }
  return result;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE17mergeIndexForTestEP22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  float v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  _DWORD *inserted;
  uint64_t v17;
  uint64_t result;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  const char *v27;
  char *v28;
  const char *v29;
  uint8_t buf[4];
  float v31;
  _BYTE v32[6];
  __int16 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v25 = __si_assert_copy_extra_268();
    v26 = v25;
    v27 = "";
    if (v25)
      v27 = v25;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v27);
LABEL_32:
    free(v26);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  v6 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v5, v6))
  {
    LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    v31 = v7;
    *(_WORD *)v32 = 1024;
    *(_DWORD *)&v32[2] = v8;
    v33 = 1024;
    LODWORD(v34) = v9;
    WORD2(v34) = 1024;
    *(_DWORD *)((char *)&v34 + 6) = v10;
    _os_log_impl(&dword_1B8270000, v5, v6, "mergeIndexForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v4;
  v11 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator(a2 + 48);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::beginMerge(a1 + 48);
  v14 = 0;
  while (1)
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12enumerator_s4nextEv((uint64_t)buf, v11);
    if (!(_QWORD)v34)
      break;
    v15 = **((_QWORD **)&v34 + 1);
    inserted = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb(a1 + 48, *(unsigned int *)v32, (void *)v34, *(unsigned int *)buf, 0, v31);
    v17 = *((_QWORD *)inserted + 192);
    *((_QWORD *)inserted + 192) = v15;
    if (v17)
      ++v14;
  }
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::endMerge(a1 + 48);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result + v14 != v13 + v12)
  {
    v28 = __si_assert_copy_extra_268();
    v26 = v28;
    v29 = "";
    if (v28)
      v29 = v28;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3281, "nVectors() + dup == old + added", v29);
    goto LABEL_32;
  }
  if (v11)
  {
    std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100](v11 + 32);
    v19 = *(std::__shared_weak_count **)(v11 + 24);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = *(std::__shared_weak_count **)(v11 + 8);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    return MEMORY[0x1BCCB06A4](v11, 0x10A0C40B50FE552);
  }
  return result;
}

void _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE4dumpEbbPViPvU13block_pointerFbjPKvybjfE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  os_unfair_lock_s *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD v37[2];
  uint64_t (*v38)(uint64_t, uint64_t, BOOL *);
  void *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[3];
  __int128 v48;
  __int128 v49;
  char v50;
  __int128 v51;
  __int128 v52;

  v9 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v10 = *(std::__shared_weak_count **)(a1 + 136);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(_QWORD *)(a1 + 144);
  v13 = *(std::__shared_weak_count **)(a1 + 152);
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  os_unfair_lock_unlock(v9);
  v46 = 0u;
  memset(v47, 0, sizeof(v47));
  v45 = 0u;
  v43 = v14;
  v44 = v13;
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(_QWORD *)(a1 + 96);
  v20 = *(std::__shared_weak_count **)(a1 + 104);
  v42[0] = v19;
  v42[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v45, &v43, v42);
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v45, &v43, v42);
  }
  v24 = v44;
  if (v44)
  {
    v25 = (unint64_t *)&v44->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 0x40000000;
  v38 = ___ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke;
  v39 = &unk_1E6E33F98;
  v40 = a6;
  v41 = a4;
  v51 = 0u;
  v52 = 0u;
  v50 = 0;
  do
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12enumerator_s4nextEv((uint64_t)&v48, (uint64_t)&v45);
    v51 = v48;
    v52 = v49;
    if (!(_QWORD)v49)
      break;
    v38((uint64_t)v37, (uint64_t)&v51, (BOOL *)&v50);
  }
  while (!v50);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v47);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (!*((_QWORD *)&v46 + 1))
    goto LABEL_30;
  v28 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (!*((_QWORD *)&v45 + 1))
      goto LABEL_36;
  }
  else
  {
LABEL_30:
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (!*((_QWORD *)&v45 + 1))
      goto LABEL_36;
  }
  v31 = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  if (!v13)
    goto LABEL_40;
LABEL_36:
  v33 = (unint64_t *)&v13->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!v10)
      return;
  }
  else
  {
LABEL_40:
    if (!v10)
      return;
  }
  v35 = (unint64_t *)&v10->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE5flushEy(uint64_t a1, uint64_t a2)
{
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, a2);
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE7compactEP22AnyVectorIndexInstanceP12uint32_map_tP11TermIdStore18CICompactCallbacksPVi(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  int v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  const char *v53;
  char *v54;
  const char *v55;
  int v56;
  __int128 v59;
  __int128 v60;
  _QWORD v61[2];
  uint64_t v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  __int128 v65;
  _OWORD v66[3];
  _QWORD v67[3];
  char v68;
  uint64_t v69[2];
  void *__p[3];
  __int128 v71;
  __int128 v72;
  char v73;
  __int128 v74;
  __int128 v75;
  uint8_t buf[8];
  uint64_t v77;
  __int128 v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v10 = *__error();
  v11 = _SILogForLogForCategory(16);
  v12 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v11, v12))
  {
    v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v13 = a4;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v56;
    LOWORD(v77) = 1024;
    *(_DWORD *)((char *)&v77 + 2) = v14;
    a4 = v13;
    HIWORD(v77) = 1024;
    LODWORD(v78) = v15;
    WORD2(v78) = 1024;
    *(_DWORD *)((char *)&v78 + 6) = v16;
    _os_log_impl(&dword_1B8270000, v11, v12, "compact %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v10;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v51 = __si_assert_copy_extra_268();
    v52 = v51;
    v53 = "";
    if (v51)
      v53 = v51;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v53);
LABEL_70:
    free(v52);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v59 = *a5;
  v60 = a5[1];
  v17 = a2 + 48;
  if (IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a2 + 48))
  {
    v54 = __si_assert_copy_extra_268();
    v52 = v54;
    v55 = "";
    if (v54)
      v55 = v54;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2566, "target->nVectors() == 0", v55);
    goto LABEL_70;
  }
  v18 = operator new(8uLL);
  __p[0] = v18;
  *v18 = a1 + 48;
  __p[1] = v18 + 1;
  __p[2] = v18 + 1;
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(_QWORD *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)__p);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v20 = *(_QWORD *)(a1 + 128);
  v19 = *(std::__shared_weak_count **)(a1 + 136);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v23 = *(_QWORD *)(a1 + 144);
  v24 = *(std::__shared_weak_count **)(a1 + 152);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  v69[0] = v20;
  v69[1] = (uint64_t)v19;
  if (v19)
  {
    v27 = (unint64_t *)&v19->__shared_owners_;
    v28 = a3;
    do
      v29 = __ldxr(v27);
    while (__stxr(v29 + 1, v27));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(v17, v69);
    do
      v30 = __ldaxr(v27);
    while (__stlxr(v30 - 1, v27));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(v17, v69);
    v28 = a3;
  }
  v67[0] = 0;
  v67[1] = v67;
  v67[2] = 0x2000000000;
  v68 = 1;
  v65 = 0u;
  memset(v66, 0, sizeof(v66));
  v64 = 0u;
  v62 = v23;
  v63 = v24;
  if (v24)
  {
    v31 = (unint64_t *)&v24->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = *(_QWORD *)(a1 + 96);
  v34 = *(std::__shared_weak_count **)(a1 + 104);
  v61[0] = v33;
  v61[1] = v34;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v64, &v62, v61);
    do
      v37 = __ldaxr(v35);
    while (__stlxr(v37 - 1, v35));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v64, &v62, v61);
  }
  v38 = v63;
  if (v63)
  {
    v39 = (unint64_t *)&v63->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v77 = 0x40000000;
  *(_QWORD *)&v78 = ___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE7compactIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_P12uint32_map_tP11TermIdStore18CICompactCallbacksPVi_block_invoke;
  *((_QWORD *)&v78 + 1) = &unk_1E6E33FC0;
  v79 = v67;
  v80 = v28;
  v81 = a4;
  v82 = v17;
  v83 = a6;
  v84 = v59;
  v85 = v60;
  v74 = 0u;
  v75 = 0u;
  v73 = 0;
  do
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12enumerator_s4nextEv((uint64_t)&v71, (uint64_t)&v64);
    v74 = v71;
    v75 = v72;
    if (!(_QWORD)v72)
      break;
    ((void (*)(uint8_t *, __int128 *, char *))v78)(buf, &v74, &v73);
  }
  while (!v73);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v66);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
  if (*((_QWORD *)&v64 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  _Block_object_dispose(v67, 8);
  if (v24)
  {
    v47 = (unint64_t *)&v24->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v19)
  {
    v49 = (unint64_t *)&v19->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p[0])
    operator delete(__p[0]);
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE14compactForTestEP22AnyVectorIndexInstancePVi(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  NSObject *v7;
  os_log_type_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  const char *v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v13 = __si_assert_copy_extra_268();
    v14 = v13;
    v15 = "";
    if (v13)
      v15 = v13;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v6 = *__error();
  v7 = _SILogForLogForCategory(16);
  v8 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    v22 = 1024;
    v23 = v12;
    _os_log_impl(&dword_1B8270000, v7, v8, "compactForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v6;
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi(a1 + 48, a2 + 48, a3);
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE7subvertEPK22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  const char *v28;

  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v26 = __si_assert_copy_extra_268();
    v27 = v26;
    v28 = "";
    if (v26)
      v28 = v26;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v28);
    free(v27);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = *(_QWORD *)(a1 + 144);
  v7 = *(std::__shared_weak_count **)(a1 + 152);
  if (v7)
  {
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 160));
  v13 = *(std::__shared_weak_count **)(a2 + 136);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v17 = *(_QWORD *)(a2 + 144);
  v16 = *(std::__shared_weak_count **)(a2 + 152);
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 160));
  if (v13)
  {
    v20 = (unint64_t *)&v13->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 168))(v8, v17);
  vi_onefixedsize_disk_allocator::subvert(*(_QWORD *)(*(_QWORD *)(a2 + 96) + 32), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 32));
  if (!v16)
    goto LABEL_31;
  v22 = (unint64_t *)&v16->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!v7)
      return;
  }
  else
  {
LABEL_31:
    if (!v7)
      return;
  }
  v24 = (unint64_t *)&v7->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

BOOL _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE6unlinkEv(uint64_t a1)
{
  os_unfair_lock_s *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  _BOOL8 v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v23;
  _QWORD *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a1 + 144);
  v6 = *(std::__shared_weak_count **)(a1 + 152);
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  os_unfair_lock_unlock(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  v10 = *(_QWORD *)(a1 + 96);
  v11 = *__error();
  v12 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = (_QWORD *)(v10 + 56);
    if (*(char *)(v10 + 79) < 0)
      v13 = (_QWORD *)*v13;
    v14 = *(_DWORD *)(v10 + 40);
    v15 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v10 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24), 0x610uLL)+ 1544);
    v16 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v10 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(v10 + 32) + 16) * (*(_DWORD *)(v10 + 40) - 1), 0x610uLL)+ 1544);
    v23 = 136315906;
    v24 = v13;
    v25 = 1024;
    v26 = v14;
    v27 = 1024;
    v28 = v15;
    v29 = 1024;
    v30 = v16;
    _os_log_impl(&dword_1B8270000, v12, OS_LOG_TYPE_DEFAULT, "unlink VectorStore %s(%u)[%u,%u]", (uint8_t *)&v23, 0x1Eu);
  }
  *__error() = v11;
  v17 = vi_onefixedsize_disk_allocator::unlinkStorage(*(_QWORD *)(v10 + 32));
  if (v6)
  {
    v18 = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v17;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE8truncateEv(uint64_t a1)
{
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  os_unfair_lock_s *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint8_t v16[16];

  if (*(_BYTE *)(a1 + 208))
  {
    v1 = *__error();
    v2 = _SILogForLogForCategory(16);
    v3 = dword_1EF19FCCC < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1EF19FCCC < 3)))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1B8270000, v2, v3, "*warn* call truncate on readOnly index.", v16, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, 0);
    _ZN22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsE8truncateEv(*(_QWORD *)(a1 + 96));
    v5 = (os_unfair_lock_s *)(a1 + 160);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
    v6 = *(std::__shared_weak_count **)(a1 + 136);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v10 = *(_QWORD *)(a1 + 144);
    v9 = *(std::__shared_weak_count **)(a1 + 152);
    if (v9)
    {
      v11 = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      os_unfair_lock_unlock(v5);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      os_unfair_lock_unlock(v5);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
    }
    if (v6)
    {
      v14 = (unint64_t *)&v6->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE12makeReadOnlyEv(uint64_t a1)
{
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v5;
  int v6;
  NSObject *v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  int *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  _QWORD *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 208))
  {
    v1 = *__error();
    v2 = _SILogForLogForCategory(16);
    v3 = dword_1EF19FCCC < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1EF19FCCC < 3)))
    {
      LOWORD(v29) = 0;
      _os_log_impl(&dword_1B8270000, v2, v3, "*warn* call makeReadOnly on readOnly index.", (uint8_t *)&v29, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, 0);
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *__error();
    v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = (_QWORD *)(v5 + 56);
      if (*(char *)(v5 + 79) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_DWORD *)(v5 + 40);
      v10 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v5 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 24), 0x610uLL)+ 1544);
      v11 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v5 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(v5 + 32) + 16) * (*(_DWORD *)(v5 + 40) - 1), 0x610uLL)+ 1544);
      v29 = 136315906;
      v30 = v8;
      v31 = 1024;
      v32 = v9;
      v33 = 1024;
      v34 = v10;
      v35 = 1024;
      v36 = v11;
      _os_log_impl(&dword_1B8270000, v7, OS_LOG_TYPE_DEFAULT, "makeReadOnly VectorStore %s(%u)[%u,%u]", (uint8_t *)&v29, 0x1Eu);
    }
    *__error() = v6;
    _ZN22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsE8truncateEv(v5);
    v12 = *(_QWORD *)(v5 + 32);
    fd_make_readonly(*(_QWORD *)(v12 + 40));
    v13 = *(_QWORD *)(v12 + 40);
    if (v13)
    {
      do
      {
        v14 = fchmodat(*(_DWORD *)(v13 + 44), *(const char **)(v13 + 72), 0x100u, 2048);
        v15 = g_prot_error_callback;
        if (v14 != -1 || g_prot_error_callback == 0)
          break;
        v17 = *(unsigned int *)(v13 + 40);
        v18 = __error();
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v15 + 16))(v15, v17, *v18, 19) & 1) != 0);
    }
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
    v19 = *(std::__shared_weak_count **)(a1 + 136);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    v23 = *(_QWORD *)(a1 + 144);
    v22 = *(std::__shared_weak_count **)(a1 + 152);
    if (v22)
    {
      v24 = (unint64_t *)&v22->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 120))(v23);
      *(_BYTE *)(a1 + 208) = 1;
      do
        v26 = __ldaxr(v24);
      while (__stlxr(v26 - 1, v24));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 120))(v23);
      *(_BYTE *)(a1 + 208) = 1;
    }
    if (v19)
    {
      v27 = (unint64_t *)&v19->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE13makePurgeableEv(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  _QWORD *v5;
  int v6;
  int v7;
  int v8;
  os_unfair_lock_s *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 96);
  v3 = *__error();
  v4 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (_QWORD *)(v2 + 56);
    if (*(char *)(v2 + 79) < 0)
      v5 = (_QWORD *)*v5;
    v6 = *(_DWORD *)(v2 + 40);
    v7 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v2 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v2 + 32) + 24), 0x610uLL)
                   + 1544);
    v8 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v2 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v2 + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(v2 + 32) + 16) * (*(_DWORD *)(v2 + 40) - 1), 0x610uLL)+ 1544);
    v20 = 136315906;
    v21 = v5;
    v22 = 1024;
    v23 = v6;
    v24 = 1024;
    v25 = v7;
    v26 = 1024;
    v27 = v8;
    _os_log_impl(&dword_1B8270000, v4, OS_LOG_TYPE_DEFAULT, "makePurgeable VectorStore %s(%u)[%u,%u]", (uint8_t *)&v20, 0x1Eu);
  }
  *__error() = v3;
  fd_mark_purgable(*(_DWORD **)(*(_QWORD *)(v2 + 32) + 40));
  v9 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v10 = *(std::__shared_weak_count **)(a1 + 136);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(_QWORD *)(a1 + 144);
  v13 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v13)
  {
    os_unfair_lock_unlock(v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 128))(v14);
    if (!v10)
      return;
    goto LABEL_18;
  }
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  os_unfair_lock_unlock(v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 128))(v14);
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v10)
  {
LABEL_18:
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE6renameEPKc(uint64_t a1, const char *a2)
{
  int v4;
  NSObject *v5;
  size_t v6;
  std::string::size_type v7;
  std::string *p_buf;
  uint64_t v9;
  uint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  _QWORD *v23;
  int v24;
  int v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::string::value_type __s[23];
  char v32;
  std::string v33;
  std::string buf;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    _os_log_impl(&dword_1B8270000, v5, OS_LOG_TYPE_DEFAULT, "rename: %s", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v4;
  v6 = strlen(a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_buf = (std::string *)operator new(v9 + 1);
    buf.__r_.__value_.__l.__size_ = v7;
    buf.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_10;
  }
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = v6;
  p_buf = &buf;
  if (v6)
LABEL_10:
    memcpy(p_buf, a2, v7);
  p_buf->__r_.__value_.__s.__data_[v7] = 0;
  v32 = 11;
  strcpy(__s, ".partitions");
  memset(&v33, 0, sizeof(v33));
  v11 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v33, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  else
    v33 = buf;
  std::string::append(&v33, __s, 0xBuLL);
  if (v32 < 0)
  {
    operator delete(*(void **)__s);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_16;
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
LABEL_16:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v12 = *(std::__shared_weak_count **)(a1 + 136);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v16 = *(_QWORD *)(a1 + 144);
  v15 = *(std::__shared_weak_count **)(a1 + 152);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v33;
  else
    v19 = (std::string *)v33.__r_.__value_.__r.__words[0];
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 152))(v16, v19);
  v20 = *(_QWORD *)(a1 + 96);
  v21 = *__error();
  v22 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v23 = (_QWORD *)(v20 + 56);
    if (*(char *)(v20 + 79) < 0)
      v23 = (_QWORD *)*v23;
    v24 = *(_DWORD *)(v20 + 40);
    v25 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v20 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v20 + 32) + 24), 0x610uLL)+ 1544);
    v26 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v20 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v20 + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(v20 + 32) + 16) * (*(_DWORD *)(v20 + 40) - 1), 0x610uLL)+ 1544);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)a2;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
    v35 = v24;
    v36 = 1024;
    v37 = v25;
    v38 = 1024;
    v39 = v26;
    _os_log_impl(&dword_1B8270000, v22, OS_LOG_TYPE_DEFAULT, "rename VectorStore %s -> %s(%u)[%u,%u]", (uint8_t *)&buf, 0x28u);
  }
  *__error() = v21;
  MEMORY[0x1BCCB03B0](v20 + 56, a2);
  fd_rename(*(_QWORD *)(*(_QWORD *)(v20 + 32) + 40), a2);
  if (v15)
  {
    v27 = (unint64_t *)&v15->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (!v12)
    goto LABEL_38;
  v29 = (unint64_t *)&v12->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (v30)
  {
LABEL_38:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
LABEL_39:
    operator delete(v33.__r_.__value_.__l.__data_);
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE14storeUpdateSetEP15RelativePostingP14store_stream_t()
{
  char *v0;
  char *v1;
  const char *v2;

  v0 = __si_assert_copy_extra_268();
  v1 = v0;
  v2 = "";
  if (v0)
    v2 = v0;
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2998, "false", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE16restoreUpdateSetEP15PostingBaseInfoP14store_stream_t()
{
  char *v0;
  char *v1;
  const char *v2;

  v0 = __si_assert_copy_extra_268();
  v1 = v0;
  v2 = "";
  if (v0)
    v2 = v0;
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3003, "false", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  char *v13;
  char *v14;
  const char *v15;
  _QWORD v16[5];

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(a1 + 16))
  {
    v13 = __si_assert_copy_extra_268();
    v14 = v13;
    v15 = "";
    if (v13)
      v15 = v13;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v9 = a1 + 48;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v16[2] = ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke;
  v16[3] = &unk_1E6E33FE8;
  v16[4] = a9;
  if ((a7 - 10001) >= 0xFFFFD8F0)
    v10 = a7;
  else
    v10 = 10000;
  v11 = operator new();
  *(_DWORD *)v11 = v10;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 8) = 0;
  _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li768EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(v9);
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNProcessResult(v11, (uint64_t)v16);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE10aNNForTestEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvjfEj(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  char *v13;
  char *v14;
  const char *v15;

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(a1 + 16))
  {
    v13 = __si_assert_copy_extra_268();
    v14 = v13;
    v15 = "";
    if (v13)
      v15 = v13;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v9 = a1 + 48;
  if ((a7 - 10001) >= 0xFFFFD8F0)
    v10 = a7;
  else
    v10 = 10000;
  v11 = operator new();
  *(_DWORD *)v11 = v10;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 8) = 0;
  _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li768EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(v9);
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNForTestProcessResult(v11, a9);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE20createCandidateQueueEj(uint64_t a1, int a2)
{
  int v2;
  uint64_t result;

  if ((a2 - 10001) >= 0xFFFFD8F0)
    v2 = a2;
  else
    v2 = 10000;
  result = operator new();
  *(_DWORD *)result = v2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

void _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE3aNNEjtPKv14vec_dimensions15vec_data_formatfbPv(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6)
{
  char *v6;
  char *v7;
  const char *v8;

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(a1 + 16))
  {
    v6 = __si_assert_copy_extra_268();
    v7 = v6;
    v8 = "";
    if (v6)
      v8 = v6;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v8);
    free(v7);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li768EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(a1 + 48);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE16aNNProcessResultEPvU13block_pointerFvS5_fE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[5];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke;
  v4[3] = &unk_1E6E34048;
  v4[4] = a3;
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNProcessResult(a2, (uint64_t)v4);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE23aNNForTestProcessResultEPvU13block_pointerFvjfE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNForTestProcessResult(a2, a3);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE24aNNForDebugProcessResultEPvU13block_pointerFvjjfE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  __int128 *v15;
  BOOL v16;
  int v17;
  __int128 *v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  int v23;
  NSObject *v24;
  void **v25;
  __int128 *v26;
  char *v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  void **v31;
  void *v32;
  uint64_t v33;
  int v35;
  __int128 *v36;
  CFIndex AppIntegerValue;
  __int128 *v38;
  __int128 *v39;
  uint64_t v40;
  uint8_t v41[4];
  void **v42;
  void *__p[2];
  uint64_t v44;
  uint64_t v45;
  __int128 buf;
  uint64_t v47;
  _QWORD v48[8];
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v5 = *__error();
  v6 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4;
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_1B8270000, v6, OS_LOG_TYPE_DEFAULT, "search return %zu results", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v5;
  LOBYTE(buf) = 0;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("IVFANNLogQueryResult"), CFSTR("com.apple.Spotlight"), (Boolean *)&buf);
  v35 = buf;
  v61 = 0u;
  v51 = 0;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v50 = 0u;
  v49 = 0u;
  memset(v48, 0, sizeof(v48));
  v8 = MEMORY[0x1E0DE4FD0] + 104;
  v52 = MEMORY[0x1E0DE4FD0] + 104;
  v9 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v10 = MEMORY[0x1E0DE4FD0] + 64;
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v47 = MEMORY[0x1E0DE4FD0] + 64;
  *(_QWORD *)&buf = v11;
  *(_QWORD *)((char *)&buf + *(_QWORD *)(v11 - 24)) = v12;
  *((_QWORD *)&buf + 1) = 0;
  v13 = (std::ios_base *)((char *)&buf + *(_QWORD *)(buf - 24));
  std::ios_base::init(v13, v48);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v14 = v9[5];
  v47 = v9[4];
  *(_QWORD *)((char *)&v48[-1] + *(_QWORD *)(v47 - 24)) = v14;
  *(_QWORD *)&buf = v9[1];
  *(_QWORD *)((char *)&buf + *(_QWORD *)(buf - 24)) = v9[6];
  v52 = v8;
  *(_QWORD *)&buf = MEMORY[0x1E0DE4FD0] + 24;
  v47 = v10;
  std::streambuf::basic_streambuf();
  v48[0] = MEMORY[0x1E0DE4FB8] + 16;
  v49 = 0u;
  v50 = 0u;
  LODWORD(v51) = 24;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::allItems(&v38, *(_BYTE **)(a2 + 8), *(_BYTE **)(a2 + 16));
  v15 = v39;
  v36 = v38;
  if (v38 != v39)
  {
    if (AppIntegerValue)
      v16 = v35 == 0;
    else
      v16 = 1;
    if (v16)
    {
      v26 = v38;
      do
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD, float))(a3 + 16))(a3, *(unsigned int *)v26, *((unsigned int *)v26 + 2), *((float *)v26 + 3));
        ++v26;
      }
      while (v26 != v15);
    }
    else
    {
      v17 = 0;
      v18 = v38;
      do
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD, float))(a3 + 16))(a3, *(unsigned int *)v18, *((unsigned int *)v18 + 2), *((float *)v18 + 3));
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)",", 1);
        v20 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)";", 1);
        v21 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
        if ((v21[32] & 5) == 0
          && ((*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v21 + 5)
                                                                                            + 32))(__p, *((_QWORD *)v21 + 5), 0, 1, 16), v45 > 1000)|| (++v17, HIDWORD(v22) = -1030792151 * v17 + 85899344, LODWORD(v22) = HIDWORD(v22), (v22 >> 1) < 0x51EB851))
        {
          v23 = *__error();
          v24 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            v25 = __p;
            if (v44 < 0)
              v25 = (void **)__p[0];
            *(_DWORD *)v41 = 136315138;
            v42 = v25;
            _os_log_impl(&dword_1B8270000, v24, OS_LOG_TYPE_DEFAULT, "%s", v41, 0xCu);
            if (SHIBYTE(v44) < 0)
              operator delete(__p[0]);
          }
          *__error() = v23;
          __p[0] = 0;
          __p[1] = 0;
          v44 = 0;
          std::stringbuf::str();
          if (SHIBYTE(v44) < 0)
            operator delete(__p[0]);
        }
        ++v18;
      }
      while (v18 != v15);
    }
  }
  v27 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
  if ((v27[32] & 5) != 0)
  {
    v28 = a2;
  }
  else
  {
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(__p, *((_QWORD *)v27 + 5), 0, 1, 16);
    v28 = a2;
    if (v45 > 0)
    {
      v29 = *__error();
      v30 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        v31 = v44 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)v41 = 136315138;
        v42 = v31;
        _os_log_impl(&dword_1B8270000, v30, OS_LOG_TYPE_DEFAULT, "%s", v41, 0xCu);
        if (SHIBYTE(v44) < 0)
          operator delete(__p[0]);
      }
      *__error() = v29;
    }
  }
  if (v28)
  {
    v32 = *(void **)(v28 + 8);
    if (v32)
    {
      *(_QWORD *)(v28 + 16) = v32;
      operator delete(v32);
    }
    MEMORY[0x1BCCB06A4](v28, 0x1020C403EC25235);
  }
  if (v36)
    operator delete(v36);
  *(_QWORD *)&buf = *MEMORY[0x1E0DE4F50];
  v33 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&buf + *(_QWORD *)(buf - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v47 = v33;
  v48[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v50) < 0)
    operator delete((void *)v49);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BCCB0650](&v52);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE11storageSizeEv(uint64_t a1)
{
  os_unfair_lock_s *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v2 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a1 + 144);
  v6 = *(std::__shared_weak_count **)(a1 + 152);
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  os_unfair_lock_unlock(v2);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 48);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 184))(v7);
  if (!v6)
    goto LABEL_11;
  v12 = (unint64_t *)&v6->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v3)
      return v11 + v10;
  }
  else
  {
LABEL_11:
    if (!v3)
      return v11 + v10;
  }
  v14 = (unint64_t *)&v3->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v11 + v10;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE14setVectorStoreEP10data_map_s(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 192) = a2;
  return result;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE16getDataForOffsetEjPj(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v7;
  int v8;
  NSObject *v9;
  int *v10;
  int v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1) <= a2)
  {
    v8 = *__error();
    v9 = _SILogForLogForCategory(2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
      v12 = 136315906;
      v13 = "getDataForOffset";
      v14 = 1024;
      v15 = 3455;
      v16 = 1024;
      v17 = a2;
      v18 = 1024;
      v19 = v11;
      _os_log_error_impl(&dword_1B8270000, v9, OS_LOG_TYPE_ERROR, "%s:%d: offset out of range: %u >= %u", (uint8_t *)&v12, 0x1Eu);
    }
    v10 = __error();
    v7 = 0;
    result = 0;
    *v10 = v8;
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(a1[6] + 32))(a1 + 6, a2);
    v7 = 1536;
  }
  *a3 = v7;
  return result;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE26updateVectorStorageOffsetsEP13__SIUINT64Set(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t i;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  int v12;
  unint64_t j;
  unint64_t v14;

  v2 = a2;
  v4 = a1 + 48;
  if (a2)
  {
    for (i = 0; ; ++i)
    {
      result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v4);
      if (i >= result)
        break;
      v7 = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 16) * i, 0x610uLL);
      if (!*(_BYTE *)(v2 + 184))
      {
        v8 = *(unsigned int *)(v7 + 1544);
        v9 = *(_DWORD *)(v2 + 24);
        if (!v9 || !((*(_QWORD *)(v2 + 16) ^ v8) >> (-4 * v9)))
        {
          v10 = (60 - 4 * v9) & 0xFC;
          v11 = *(_QWORD *)(v2 + 56 + 8 * ((v8 >> v10) & 0xF));
          if ((v11 & 1) != 0)
          {
            v12 = v9 + 2;
            do
            {
              v10 = (64 - 4 * v12) & 0xFC;
              v11 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v8 >> v10) & 0xF));
              ++v12;
            }
            while ((v11 & 1) != 0);
          }
          if (v11)
          {
            if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v8, ~(-1 << v10)))
            {
              data_map_set_offset_for_id(*(_QWORD *)(a1 + 192), v8, ((unint64_t)*(unsigned int *)(a1 + 88) << 36) | (16 * i) | (4 * (*(_DWORD *)(a1 + 176) & 3)) | *(_DWORD *)(a1 + 172) & 3, *(unsigned __int16 *)(a1 + 168) | ((unint64_t)*(unsigned int *)(a1 + 180) << 32), *(_DWORD *)(a1 + 184));
            }
          }
        }
      }
    }
  }
  else
  {
    for (j = 0; ; ++j)
    {
      result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v4);
      if (j >= result)
        break;
      v14 = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 16) * j, 0x610uLL);
      data_map_set_offset_for_id(*(_QWORD *)(a1 + 192), *(unsigned int *)(v14 + 1544), v2 | ((unint64_t)*(unsigned int *)(a1 + 88) << 36) | (4 * (*(_DWORD *)(a1 + 176) & 3)) | *(_DWORD *)(a1 + 172) & 3, *(unsigned __int16 *)(a1 + 168) | ((unint64_t)*(unsigned int *)(a1 + 180) << 32), *(_DWORD *)(a1 + 184));
      v2 += 16;
    }
  }
  return result;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE6statusERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  _QWORD v38[2];
  uint64_t v39;
  _OWORD v40[4];
  void *__p[2];
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v53 = 0u;
  v43 = 0;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v42 = 0u;
  *(_OWORD *)__p = 0u;
  v4 = MEMORY[0x1E0DE4FD0];
  memset(v40, 0, sizeof(v40));
  v5 = MEMORY[0x1E0DE4FD0] + 104;
  v44 = MEMORY[0x1E0DE4FD0] + 104;
  v6 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v7 = MEMORY[0x1E0DE4FD0] + 64;
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v39 = MEMORY[0x1E0DE4FD0] + 64;
  v38[0] = v8;
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v8 - 24)) = v9;
  v38[1] = 0;
  v10 = (std::ios_base *)((char *)v38 + *(_QWORD *)(v38[0] - 24));
  std::ios_base::init(v10, v40);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v11 = v6[5];
  v39 = v6[4];
  *(uint64_t *)((char *)&v39 + *(_QWORD *)(v39 - 24)) = v11;
  v38[0] = v6[1];
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = v6[6];
  v44 = v5;
  v38[0] = v4 + 24;
  v39 = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v40[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v42 = 0u;
  LODWORD(v43) = 24;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = a2;
  else
    v14 = *(_QWORD *)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, v14, v15);
  v17 = *(char *)(a1 + 47);
  if (v17 >= 0)
    v18 = a1 + 24;
  else
    v18 = *(_QWORD *)(a1 + 24);
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a1 + 47);
  else
    v19 = *(_QWORD *)(a1 + 32);
  v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, v18, v19);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)"(", 1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v21 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"/", 1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)"v", 1);
  _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(a1 + 48, &v36);
  if (v36)
  {
    _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(a1 + 48, &v34);
    v23 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)")", 1);
    v24 = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v27 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)")", 1);
  }
  v28 = v37;
  if (v37)
  {
    v29 = (unint64_t *)&v37->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, (uint64_t)"[", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, (uint64_t)",", 1);
  v31 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"] indexId: ", 11);
  std::ostream::operator<<();
  std::stringbuf::str();
  v38[0] = *v6;
  v32 = v6[9];
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = v6[8];
  v39 = v32;
  *(_QWORD *)&v40[0] = v12 + 16;
  if (SBYTE7(v42) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BCCB0650](&v44);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE12diagnoseDumpERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERNS5_13basic_ostreamIcS8_EEi(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  uint64_t v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  uint64_t v44;
  std::locale *v45;
  uint64_t v46;
  const std::locale::facet *v47;
  uint64_t v48;
  _QWORD *v49;
  const char *v50;
  uint64_t v51;
  const std::locale::facet *v52;
  unint64_t v53;
  std::locale::id *v54;
  const std::locale::facet *v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  void *locale;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  std::locale::id *v66;
  _QWORD *v67;
  _QWORD *v68;
  const std::locale::facet *v69;
  const std::locale::facet *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::locale v82;
  std::locale v83;
  uint64_t v84;
  unsigned __int8 v85;

  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, a2, v8);
  v10 = *(char *)(a1 + 47);
  if (v10 >= 0)
    v11 = a1 + 24;
  else
    v11 = *(_QWORD *)(a1 + 24);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 47);
  else
    v12 = *(_QWORD *)(a1 + 32);
  v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" vectors ", 9);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" partitions.", 12);
  if (*(_BYTE *)(a1 + 208))
    v17 = "(readOnly)";
  else
    v17 = "(readWrite)";
  if (*(_BYTE *)(a1 + 208))
    v18 = 10;
  else
    v18 = 11;
  v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
  v20 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v21 = *(_QWORD *)(a1 + 128);
  v22 = *(std::__shared_weak_count **)(a1 + 136);
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  v25 = *(std::__shared_weak_count **)(a1 + 152);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if (v22)
  {
    v28 = (unint64_t *)&v22->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (!v25)
    goto LABEL_29;
  v30 = (unint64_t *)&v25->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    v32 = a1 + 48;
    if (!v22)
      goto LABEL_35;
  }
  else
  {
LABEL_29:
    v32 = a1 + 48;
    if (!v22)
      goto LABEL_35;
  }
  v33 = (unint64_t *)&v22->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_35:
  if (v21)
  {
    v35 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Quantizer: ", 11);
    v36 = *(char *)(v21 + 31);
    if (v36 >= 0)
      v37 = v21 + 8;
    else
      v37 = *(_QWORD *)(v21 + 8);
    if (v36 >= 0)
      v38 = *(unsigned __int8 *)(v21 + 31);
    else
      v38 = *(_QWORD *)(v21 + 16);
    v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, v37, v38);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)"(", 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    v40 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)") ", 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    v41 = (_QWORD *)std::ostream::operator<<();
    v42 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, (uint64_t)" centroids.", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(*v42 - 24)));
    v43 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
    std::locale::~locale(&v83);
    std::ostream::put();
    std::ostream::flush();
  }
  v80 = 0;
  v81 = 0;
  _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(v32, &v80);
  v44 = v80;
  if (!v80)
    goto LABEL_51;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Partition: ", 11);
  (*(void (**)(std::locale *__return_ptr, uint64_t))(*(_QWORD *)v44 + 144))(&v83, v44);
  v45 = (v85 & 0x80u) == 0 ? &v83 : (std::locale *)v83.__locale_;
  v46 = (v85 & 0x80u) == 0 ? v85 : v84;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v45, v46);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
  v47 = std::locale::use_facet(&v82, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
  std::locale::~locale(&v82);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v85 < 0)
  {
    operator delete(v83.__locale_);
    if (!a4)
      goto LABEL_84;
  }
  else
  {
LABEL_51:
    if (!a4)
      goto LABEL_84;
  }
  v78 = v44;
  v48 = *(_QWORD *)(a1 + 96);
  v49 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"offset,vid", 10);
  v79 = a4;
  if (a4 <= 1)
    v50 = ",";
  else
    v50 = ",vector";
  if (a4 <= 1)
    v51 = 1;
  else
    v51 = 7;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
  v52 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  if (*(_DWORD *)(v48 + 40))
  {
    if (a4 <= 1)
    {
      v65 = 0;
      v66 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        _windowsResolvePtr(*(_QWORD *)(v48 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v48 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v48 + 32) + 16) * v65, 0x610uLL);
        v67 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v67, (uint64_t)",", 1);
        v68 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v68, (uint64_t)",", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
        v69 = std::locale::use_facet(&v83, v66);
        ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
        std::locale::~locale(&v83);
        std::ostream::put();
        std::ostream::flush();
        ++v65;
      }
      while (v65 < *(unsigned int *)(v48 + 40));
    }
    else
    {
      v53 = 0;
      v54 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        v56 = _windowsResolvePtr(*(_QWORD *)(v48 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v48 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v48 + 32) + 16) * v53, 0x610uLL);
        v57 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)",", 1);
        v58 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)",", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"{length = ", 10);
        v59 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)", bytes = 0x", 12);
        data2hexString((const unsigned __int8 *)&v83, v56, 16);
        if ((v85 & 0x80u) == 0)
          locale = &v83;
        else
          locale = v83.__locale_;
        if ((v85 & 0x80u) == 0)
          v61 = v85;
        else
          v61 = v84;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)locale, v61);
        if ((char)v85 < 0)
          operator delete(v83.__locale_);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)" ... ", 5);
        data2hexString((const unsigned __int8 *)&v83, v56 + 1528, 8);
        if ((v85 & 0x80u) == 0)
          v62 = &v83;
        else
          v62 = v83.__locale_;
        if ((v85 & 0x80u) == 0)
          v63 = v85;
        else
          v63 = v84;
        v64 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v62, v63);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)" }", 2);
        if ((char)v85 < 0)
          operator delete(v83.__locale_);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
        v55 = std::locale::use_facet(&v83, v54);
        ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
        std::locale::~locale(&v83);
        std::ostream::put();
        std::ostream::flush();
        ++v53;
      }
      while (v53 < *(unsigned int *)(v48 + 40));
    }
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
  v70 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  if (v78)
    (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v78 + 104))(v78, a3, v79);
LABEL_84:
  v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v72 = v81;
  if (!v81)
    goto LABEL_88;
  v73 = (unint64_t *)&v81->__shared_owners_;
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
    if (!v22)
      return v71;
  }
  else
  {
LABEL_88:
    if (!v22)
      return v71;
  }
  v75 = (unint64_t *)&v22->__shared_owners_;
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  return v71;
}

uint64_t ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li768EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(uint64_t a1)
{
  uint64_t v1;
  CFIndex v2;
  CFIndex AppIntegerValue;
  char v4;
  char v5;
  float v6;
  float v7;
  unsigned __int8 *v8;
  float16x4_t *v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  double Current;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  char v32;
  char v33;
  unsigned int v34;
  char v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  NSObject *v43;
  int v44;
  int v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  int *v54;
  int *v55;
  unint64_t v56;
  int v57;
  const void *v58;
  int64_t v59;
  char *v60;
  char *v61;
  int v62;
  NSObject *v63;
  int v64;
  int v65;
  double v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  float16x4_t *v73;
  float16x8_t v74;
  float32x4_t v75;
  float32x4_t v76;
  Boolean *v77;
  uint64_t v78;
  float16x4_t *v79;
  float16x8_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t *v83;
  float v84;
  uint8x8_t v85;
  unint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  int v91;
  NSObject *v92;
  int v93;
  NSObject *v94;
  int v95;
  NSObject *v96;
  int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  CFAbsoluteTime v102;
  _QWORD *v103;
  _QWORD *v104;
  void *v105;
  _QWORD *v106;
  _QWORD *v107;
  void *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  char *v114;
  char *v115;
  const char *v116;
  char *v117;
  const char *v118;
  uint64_t v119;
  int v120;
  os_unfair_lock_s *lock;
  uint64_t v122;
  _QWORD *v123;
  _QWORD v124[8];
  void *v125;
  void *v126;
  _QWORD *v127;
  float v128;
  void *v129;
  void *v130;
  char *v131;
  void *v132[2];
  void *__p[2];
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  int v142;
  _BYTE *__B;
  _BYTE *v144;
  uint64_t v145;
  void **__C;
  char __str[16];
  __int128 v148;
  Boolean keyExistsAndHasValidFormat[46];
  __int16 v150;
  int v151;
  __int16 v152;
  int v153;
  __int16 v154;
  uint64_t v155;
  __int16 v156;
  CFAbsoluteTime v157;
  uint64_t v158;

  v1 = MEMORY[0x1E0C80A78](a1);
  AppIntegerValue = v2;
  v5 = v4;
  v7 = v6;
  v9 = (float16x4_t *)v8;
  v10 = v1;
  v158 = *MEMORY[0x1E0C80C00];
  v123 = v11;
  v12 = *v11;
  v148 = 0u;
  *(_OWORD *)__str = 0u;
  snprintf(__str, 0x20uLL, "%02x%02x%02x%02x...%02x%02x%02x%02x", *v8, v8[1], v8[2], v8[3], v8[1532], v8[1533], v8[1534], v8[1535]);
  if (!(_DWORD)AppIntegerValue)
    AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("IVFNumberOfParitionsProbe"), CFSTR("com.apple.Spotlight"), 0);
  keyExistsAndHasValidFormat[0] = 0;
  v13 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeMin"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v14 = v13;
  else
    v14 = 10000;
  if (10 * v12 <= v14)
    v15 = v14;
  else
    v15 = 10 * v12;
  v16 = v15
      * IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(v10);
  v17 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v10);
  keyExistsAndHasValidFormat[0] = 0;
  v18 = v16 / v17;
  v19 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeMin"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v20 = v19;
  else
    v20 = 7;
  v139 = 0;
  v140 = &v139;
  if (v18 <= v20)
    v18 = v20;
  v142 = 0;
  v141 = 0x2000000000;
  v135 = 0;
  v136 = &v135;
  v138 = 0;
  v137 = 0x2000000000;
  v134 = 0;
  *(_OWORD *)v132 = 0u;
  *(_OWORD *)__p = 0u;
  QuantizerManager<float,768>::aNNLogQueryVecIds((uint64_t)v132);
  Current = CFAbsoluteTimeGetCurrent();
  v122 = v10;
  if ((v5 & 1) != 0
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(v10) <= v18
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v10) <= v15)
  {
    v62 = *__error();
    v63 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
    {
      v64 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v10);
      v65 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(v10);
      v66 = v7;
      *(_DWORD *)keyExistsAndHasValidFormat = 136316162;
      *(_QWORD *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v12;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v64;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = v65;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 2048;
      *(double *)&keyExistsAndHasValidFormat[32] = v7;
      _os_log_impl(&dword_1B8270000, v63, OS_LOG_TYPE_DEFAULT, "brute force search %s top %u of %u vectors in %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x28u);
    }
    else
    {
      v66 = v7;
    }
    *__error() = v62;
    v120 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(v10);
    v67 = 0;
    v68 = 0;
    v69 = *(_QWORD *)(v10 + 48);
    while (1)
    {
      if (v68 == *(_DWORD *)(v69 + 40))
        goto LABEL_101;
      ++*((_DWORD *)v140 + 6);
      if (*(_DWORD *)(v69 + 40) <= v67)
        break;
      v70 = _windowsResolvePtr(*(_QWORD *)(v69 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v69 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v69 + 32) + 16) * v67, 0x610uLL);
      v71 = *(unsigned int *)(v70 + 1544);
      bzero(keyExistsAndHasValidFormat, 0xC00uLL);
      v72 = 0;
      v73 = v9 + 2;
      do
      {
        v74 = *(float16x8_t *)v73[-2].i8;
        v75 = vcvtq_f32_f16(*v73);
        v76 = vcvt_hight_f32_f16(*(float16x8_t *)v73->i8);
        v77 = &keyExistsAndHasValidFormat[v72];
        *(float32x4_t *)v77 = vcvtq_f32_f16(*(float16x4_t *)v74.i8);
        *((float32x4_t *)v77 + 1) = vcvt_hight_f32_f16(v74);
        *((float32x4_t *)v77 + 2) = v75;
        *((float32x4_t *)v77 + 3) = v76;
        v72 += 64;
        v73 += 4;
      }
      while (v72 != 3072);
      bzero(&__B, 0xC00uLL);
      v78 = 0;
      v79 = (float16x4_t *)(v70 + 16);
      do
      {
        v80 = *(float16x8_t *)v79[-2].i8;
        v81 = vcvtq_f32_f16(*v79);
        v82 = vcvt_hight_f32_f16(*(float16x8_t *)v79->i8);
        v83 = (float32x4_t *)&(&__B)[v78];
        *v83 = vcvtq_f32_f16(*(float16x4_t *)v80.i8);
        v83[1] = vcvt_hight_f32_f16(v80);
        v83[2] = v81;
        v83[3] = v82;
        v78 += 8;
        v79 += 4;
      }
      while (v78 != 384);
      LODWORD(__C) = 2139095039;
      vDSP_distancesq((const float *)keyExistsAndHasValidFormat, 1, (const float *)&__B, 1, (float *)&__C, 0x300uLL);
      v84 = *(float *)&__C;
      if (v132[1])
      {
        v85 = (uint8x8_t)vcnt_s8((int8x8_t)v132[1]);
        v85.i16[0] = vaddlv_u8(v85);
        if (v85.u32[0] > 1uLL)
        {
          v86 = v71;
          if (v132[1] <= (void *)v71)
            v86 = v71 % (unint64_t)v132[1];
        }
        else
        {
          v86 = (LODWORD(v132[1]) - 1) & v71;
        }
        v87 = (uint64_t *)*((_QWORD *)v132[0] + v86);
        if (v87)
        {
          v87 = (uint64_t *)*v87;
          if (v87)
          {
            if (v85.u32[0] < 2uLL)
            {
              while (1)
              {
                v89 = v87[1];
                if (v89 == v71)
                {
                  if (*((_DWORD *)v87 + 4) == (_DWORD)v71)
                    goto LABEL_88;
                }
                else if ((v89 & ((unint64_t)v132[1] - 1)) != v86)
                {
                  goto LABEL_87;
                }
                v87 = (uint64_t *)*v87;
                if (!v87)
                  goto LABEL_88;
              }
            }
            do
            {
              v88 = v87[1];
              if (v88 == v71)
              {
                if (*((_DWORD *)v87 + 4) == (_DWORD)v71)
                  break;
              }
              else
              {
                if ((void *)v88 >= v132[1])
                  v88 %= (unint64_t)v132[1];
                if (v88 != v86)
                  goto LABEL_87;
              }
              v87 = (uint64_t *)*v87;
            }
            while (v87);
          }
        }
      }
      else
      {
LABEL_87:
        v87 = 0;
      }
LABEL_88:
      if (v7 == 0.0 || *(float *)&__C <= v7)
      {
        if (v87)
        {
          v91 = *__error();
          v92 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109376;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v71;
            *(_WORD *)&keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v84;
            _os_log_impl(&dword_1B8270000, v92, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", keyExistsAndHasValidFormat, 0x12u);
          }
          *__error() = v91;
          v10 = v122;
        }
        *(_QWORD *)keyExistsAndHasValidFormat = *(_QWORD *)(v70 + 1536);
        *(_DWORD *)&keyExistsAndHasValidFormat[8] = v71;
        *(float *)&keyExistsAndHasValidFormat[12] = v84;
        MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::push(v123, (uint64_t)keyExistsAndHasValidFormat);
      }
      else
      {
        if (v87)
        {
          v93 = *__error();
          v94 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109632;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v71;
            *(_WORD *)&keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v84;
            *(_WORD *)&keyExistsAndHasValidFormat[18] = 2048;
            *(double *)&keyExistsAndHasValidFormat[20] = v66;
            _os_log_impl(&dword_1B8270000, v94, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", keyExistsAndHasValidFormat, 0x1Cu);
          }
          *__error() = v93;
        }
        ++*((_DWORD *)v136 + 6);
      }
      v67 = (v67 + 1);
      v68 = v67;
      if (v69 != *(_QWORD *)(v10 + 48))
      {
        v117 = __si_assert_copy_extra_268();
        v115 = v117;
        v118 = "";
        if (v117)
          v118 = v117;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1814, "store == other.store", v118);
        goto LABEL_135;
      }
    }
    v114 = __si_assert_copy_extra_268();
    v115 = v114;
    v116 = "";
    if (v114)
      v116 = v114;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1798, "offset < store->endOffset()", v116);
LABEL_135:
    free(v115);
    if (__valid_fs(-1))
      v119 = 2989;
    else
      v119 = 3072;
    *(_DWORD *)v119 = -559038737;
    abort();
  }
  if (!(_DWORD)AppIntegerValue)
  {
    keyExistsAndHasValidFormat[0] = 0;
    v22 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeMax"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0])
      v23 = v22;
    else
      v23 = 40;
    keyExistsAndHasValidFormat[0] = 0;
    v24 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionSizeFactor"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0])
      v25 = v24;
    else
      v25 = 45;
    keyExistsAndHasValidFormat[0] = 0;
    v26 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeNumerator"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
    v27 = keyExistsAndHasValidFormat[0];
    v28 = 8 * v26;
    v29 = v25 * v25;
    keyExistsAndHasValidFormat[0] = 0;
    v30 = CFPreferencesGetAppIntegerValue(CFSTR("IVFpartitionProbeDecayExponent"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
    v31 = keyExistsAndHasValidFormat[0];
    if (v30 <= 0x12)
      v32 = 18;
    else
      v32 = v30;
    v33 = v32 - 3;
    v34 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v122);
    if (v31)
      v35 = v33;
    else
      v35 = 17;
    v36 = v34 >> v35;
    if (v36 <= 8)
      v37 = 8;
    else
      v37 = v36;
    v38 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(v122);
    if (v27)
      v39 = v28;
    else
      v39 = 800;
    v40 = v29 * v37;
    v10 = v122;
    v41 = v39 * v38 / v40;
    if (v23 < v41)
      v41 = v23;
    if (v41 <= v18)
      AppIntegerValue = v18;
    else
      AppIntegerValue = v41;
  }
  v42 = *__error();
  v43 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    v44 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v10);
    v45 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(v10);
    *(_DWORD *)keyExistsAndHasValidFormat = 136316418;
    *(_QWORD *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v12;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v44;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[26] = AppIntegerValue;
    *(_WORD *)&keyExistsAndHasValidFormat[30] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[32] = v45;
    *(_WORD *)&keyExistsAndHasValidFormat[36] = 2048;
    *(double *)&keyExistsAndHasValidFormat[38] = v7;
    _os_log_impl(&dword_1B8270000, v43, OS_LOG_TYPE_DEFAULT, "aNN search %s top %u of %u vectors in %u of %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x2Eu);
  }
  *__error() = v42;
  lock = (os_unfair_lock_s *)(v10 + 152);
  os_unfair_lock_lock((os_unfair_lock_t)(v10 + 152));
  os_unfair_lock_lock((os_unfair_lock_t)(v10 + 112));
  v47 = *(_QWORD *)(v10 + 80);
  v46 = *(std::__shared_weak_count **)(v10 + 88);
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v49 = __ldxr(p_shared_owners);
    while (__stxr(v49 + 1, p_shared_owners));
  }
  v51 = *(_QWORD *)(v10 + 96);
  v50 = *(std::__shared_weak_count **)(v10 + 104);
  if (v50)
  {
    v52 = (unint64_t *)&v50->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 112));
  memset(keyExistsAndHasValidFormat, 0, 24);
  (*(void (**)(Boolean *__return_ptr, uint64_t, float16x4_t *, CFIndex))(*(_QWORD *)v47 + 72))(keyExistsAndHasValidFormat, v47, v9, AppIntegerValue);
  v54 = *(int **)&keyExistsAndHasValidFormat[8];
  v55 = *(int **)keyExistsAndHasValidFormat;
  __B = 0;
  v144 = 0;
  v145 = 0;
  __C = (void **)&__B;
  v56 = *(_QWORD *)&keyExistsAndHasValidFormat[8] - *(_QWORD *)keyExistsAndHasValidFormat;
  if (*(_QWORD *)&keyExistsAndHasValidFormat[8] == *(_QWORD *)keyExistsAndHasValidFormat)
  {
    v130 = 0;
    v131 = 0;
    v129 = 0;
  }
  else
  {
    do
    {
      v57 = *v55;
      v55 += 2;
      std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&__C, v57);
    }
    while (v55 != v54);
    v58 = __B;
    v130 = 0;
    v131 = 0;
    v129 = 0;
    v59 = v144 - __B;
    if (v144 != __B)
    {
      if (v59 < 0)
        abort();
      v60 = (char *)operator new(v144 - __B);
      v61 = &v60[4 * (v59 >> 2)];
      v129 = v60;
      v131 = v61;
      memcpy(v60, v58, v59);
      v130 = v61;
    }
  }
  v124[0] = MEMORY[0x1E0C809B0];
  v124[1] = 1174405120;
  v124[2] = ___ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li768EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke;
  v124[3] = &unk_1E6E34010;
  v124[6] = v122;
  v124[7] = v9;
  v124[4] = &v139;
  std::unordered_set<unsigned int>::unordered_set((uint64_t)&v125, (uint64_t)v132);
  v128 = v7;
  v124[5] = &v135;
  v127 = v123;
  (*(void (**)(uint64_t, void **, _QWORD *))(*(_QWORD *)v51 + 72))(v51, &v129, v124);
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
  os_unfair_lock_unlock(lock);
  v106 = v126;
  if (v126)
  {
    do
    {
      v107 = (_QWORD *)*v106;
      operator delete(v106);
      v106 = v107;
    }
    while (v107);
  }
  v108 = v125;
  v125 = 0;
  if (v108)
    operator delete(v108);
  if (__B)
  {
    v144 = __B;
    operator delete(__B);
  }
  if (*(_QWORD *)keyExistsAndHasValidFormat)
  {
    *(_QWORD *)&keyExistsAndHasValidFormat[8] = *(_QWORD *)keyExistsAndHasValidFormat;
    operator delete(*(void **)keyExistsAndHasValidFormat);
  }
  v109 = v56 >> 3;
  v10 = v122;
  if (v50)
  {
    v110 = (unint64_t *)&v50->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v120 = v109;
  if (v46)
  {
    v112 = (unint64_t *)&v46->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
LABEL_101:
  v95 = *__error();
  v96 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
  {
    v97 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v10);
    v98 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(v10);
    v99 = *((_DWORD *)v136 + 6);
    v100 = *((_DWORD *)v140 + 6);
    v101 = (uint64_t)(v123[2] - v123[1]) >> 4;
    v102 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)keyExistsAndHasValidFormat = 136317442;
    *(_QWORD *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v12;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v97;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 2048;
    *(double *)&keyExistsAndHasValidFormat[26] = v7;
    *(_WORD *)&keyExistsAndHasValidFormat[34] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[36] = v120;
    *(_WORD *)&keyExistsAndHasValidFormat[40] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[42] = v98;
    v150 = 1024;
    v151 = v99;
    v152 = 1024;
    v153 = v100;
    v154 = 2048;
    v155 = v101;
    v156 = 2048;
    v157 = v102 - Current;
    _os_log_impl(&dword_1B8270000, v96, OS_LOG_TYPE_DEFAULT, "search %s top %u of %u vectors max_distance=%f in %u of %u partitions skip %u of %u populate %zu results in duration: %f", keyExistsAndHasValidFormat, 0x4Eu);
  }
  *__error() = v95;
  v103 = __p[0];
  if (__p[0])
  {
    do
    {
      v104 = (_QWORD *)*v103;
      operator delete(v103);
      v103 = v104;
    }
    while (v104);
  }
  v105 = v132[0];
  v132[0] = 0;
  if (v105)
    operator delete(v105);
  _Block_object_dispose(&v135, 8);
  _Block_object_dispose(&v139, 8);
}

void ___ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li768EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unint64_t v4;
  float16x4_t *v5;
  uint64_t v6;
  float16x4_t *v7;
  float16x8_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t *v11;
  uint64_t v12;
  float16x4_t *v13;
  float16x8_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float *v17;
  float v18;
  unint64_t v19;
  int8x8_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  float v27;
  int v29;
  NSObject *v30;
  int v31;
  NSObject *v32;
  double v33;
  float __B[768];
  float __C;
  uint64_t __A;
  _BYTE v37[10];
  __int16 v38;
  double v39;
  uint64_t v40;

  v1 = MEMORY[0x1E0C80A78](a1);
  v40 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(v1 + 48);
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24);
  v4 = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 32) + 16) * *v3, 0x610uLL);
  v5 = *(float16x4_t **)(v1 + 56);
  bzero(&__A, 0xC00uLL);
  v6 = 0;
  v7 = v5 + 2;
  do
  {
    v8 = *(float16x8_t *)v7[-2].i8;
    v9 = vcvtq_f32_f16(*v7);
    v10 = vcvt_hight_f32_f16(*(float16x8_t *)v7->i8);
    v11 = (float32x4_t *)&v37[v6 - 8];
    *v11 = vcvtq_f32_f16(*(float16x4_t *)v8.i8);
    v11[1] = vcvt_hight_f32_f16(v8);
    v11[2] = v9;
    v11[3] = v10;
    v6 += 64;
    v7 += 4;
  }
  while (v6 != 3072);
  bzero(__B, 0xC00uLL);
  v12 = 0;
  v13 = (float16x4_t *)(v4 + 16);
  do
  {
    v14 = *(float16x8_t *)v13[-2].i8;
    v15 = vcvtq_f32_f16(*v13);
    v16 = vcvt_hight_f32_f16(*(float16x8_t *)v13->i8);
    v17 = &__B[v12];
    *(float32x4_t *)v17 = vcvtq_f32_f16(*(float16x4_t *)v14.i8);
    *((float32x4_t *)v17 + 1) = vcvt_hight_f32_f16(v14);
    *((float32x4_t *)v17 + 2) = v15;
    *((float32x4_t *)v17 + 3) = v16;
    v12 += 16;
    v13 += 4;
  }
  while (v12 != 768);
  __C = 3.4028e38;
  vDSP_distancesq((const float *)&__A, 1, __B, 1, &__C, 0x300uLL);
  v18 = __C;
  v19 = *(unsigned int *)(v4 + 1544);
  v20 = *(int8x8_t *)(v1 + 72);
  if (v20)
  {
    v21 = (uint8x8_t)vcnt_s8(v20);
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.u32[0] > 1uLL)
    {
      v22 = *(unsigned int *)(v4 + 1544);
      if (*(_QWORD *)&v20 <= v19)
        v22 = v19 % *(_QWORD *)&v20;
    }
    else
    {
      v22 = (v20.i32[0] - 1) & v19;
    }
    v23 = *(uint64_t **)(*(_QWORD *)(v1 + 64) + 8 * v22);
    if (v23)
    {
      v23 = (uint64_t *)*v23;
      if (v23)
      {
        if (v21.u32[0] < 2uLL)
        {
          v24 = *(_QWORD *)&v20 - 1;
          while (1)
          {
            v26 = v23[1];
            if (v26 == v19)
            {
              if (*((_DWORD *)v23 + 4) == (_DWORD)v19)
                goto LABEL_26;
            }
            else if ((v26 & v24) != v22)
            {
              goto LABEL_25;
            }
            v23 = (uint64_t *)*v23;
            if (!v23)
              goto LABEL_26;
          }
        }
        do
        {
          v25 = v23[1];
          if (v25 == v19)
          {
            if (*((_DWORD *)v23 + 4) == (_DWORD)v19)
              break;
          }
          else
          {
            if (v25 >= *(_QWORD *)&v20)
              v25 %= *(_QWORD *)&v20;
            if (v25 != v22)
              goto LABEL_25;
          }
          v23 = (uint64_t *)*v23;
        }
        while (v23);
      }
    }
  }
  else
  {
LABEL_25:
    v23 = 0;
  }
LABEL_26:
  v27 = *(float *)(v1 + 112);
  if (v27 == 0.0 || __C <= v27)
  {
    if (v23)
    {
      v29 = *__error();
      v30 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__A) = 67109376;
        HIDWORD(__A) = v19;
        *(_WORD *)v37 = 2048;
        *(double *)&v37[2] = v18;
        _os_log_impl(&dword_1B8270000, v30, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", (uint8_t *)&__A, 0x12u);
      }
      *__error() = v29;
    }
    __A = *(_QWORD *)(v4 + 1536);
    *(_DWORD *)v37 = v19;
    *(float *)&v37[4] = v18;
    MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::push(*(_QWORD **)(v1 + 104), (uint64_t)&__A);
  }
  else
  {
    if (v23)
    {
      v31 = *__error();
      v32 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        v33 = *(float *)(v1 + 112);
        LODWORD(__A) = 67109632;
        HIDWORD(__A) = v19;
        *(_WORD *)v37 = 2048;
        *(double *)&v37[2] = v18;
        v38 = 2048;
        v39 = v33;
        _os_log_impl(&dword_1B8270000, v32, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", (uint8_t *)&__A, 0x1Cu);
      }
      *__error() = v31;
    }
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 24);
  }
}

uint64_t ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li768EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

_DWORD *_ZN22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsE8truncateEv(uint64_t a1)
{
  int v2;
  NSObject *v3;
  _QWORD *v4;
  int v5;
  int v6;
  int v7;
  int v9;
  _QWORD *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *__error();
  v3 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (_QWORD *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      v4 = (_QWORD *)*v4;
    v5 = *(_DWORD *)(a1 + 40);
    v6 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(a1 + 32) + 40, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), 0x610uLL)
                   + 1544);
    v7 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(a1 + 32) + 40, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) * (*(_DWORD *)(a1 + 40) - 1), 0x610uLL)+ 1544);
    v9 = 136315906;
    v10 = v4;
    v11 = 1024;
    v12 = v5;
    v13 = 1024;
    v14 = v6;
    v15 = 1024;
    v16 = v7;
    _os_log_impl(&dword_1B8270000, v3, OS_LOG_TYPE_DEFAULT, "truncate VectorStore %s(%u)[%u,%u]", (uint8_t *)&v9, 0x1Eu);
  }
  *__error() = v2;
  return storage_array_Truncate((uint64_t *)(*(_QWORD *)(a1 + 32) + 8));
}

void _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  const char *v40;
  _QWORD v41[2];
  _DWORD *(*v42)(uint64_t, unsigned int *, BOOL *);
  void *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[3];
  uint64_t v52[2];
  void *v53[3];
  __int128 v54;
  __int128 v55;
  char v56;
  __int128 v57;
  __int128 v58;

  if (IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a2))
  {
    v38 = __si_assert_copy_extra_268();
    v39 = v38;
    v40 = "";
    if (v38)
      v40 = v38;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2589, "target->nVectors() == 0", v40);
    free(v39);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v6 = operator new(8uLL);
  v53[0] = v6;
  *v6 = a1;
  v53[1] = v6 + 1;
  v53[2] = v6 + 1;
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(_QWORD *)(a1 + 64), *(std::__shared_weak_count **)(a1 + 72), (uint64_t)v53);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v8 = *(_QWORD *)(a1 + 80);
  v7 = *(std::__shared_weak_count **)(a1 + 88);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v12 = *(_QWORD *)(a1 + 96);
  v11 = *(std::__shared_weak_count **)(a1 + 104);
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  v52[0] = v8;
  v52[1] = (uint64_t)v7;
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(a2, v52);
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(a2, v52);
  }
  v50 = 0u;
  memset(v51, 0, sizeof(v51));
  v49 = 0u;
  v47 = v12;
  v48 = v11;
  if (v11)
  {
    v18 = (unint64_t *)&v11->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *(_QWORD *)(a1 + 48);
  v21 = *(std::__shared_weak_count **)(a1 + 56);
  v46[0] = v20;
  v46[1] = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v49, &v47, v46);
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 - 1, v22));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v49, &v47, v46);
  }
  v25 = v48;
  if (v48)
  {
    v26 = (unint64_t *)&v48->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v41[0] = MEMORY[0x1E0C809B0];
  v41[1] = 0x40000000;
  v42 = ___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi_block_invoke;
  v43 = &__block_descriptor_tmp_451;
  v44 = a2;
  v45 = a3;
  v57 = 0u;
  v58 = 0u;
  v56 = 0;
  do
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12enumerator_s4nextEv((uint64_t)&v54, (uint64_t)&v49);
    v57 = v54;
    v58 = v55;
    if (!(_QWORD)v55)
      break;
    v42((uint64_t)v41, (unsigned int *)&v57, (BOOL *)&v56);
  }
  while (!v56);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v51);
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v11)
  {
    v34 = (unint64_t *)&v11->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v7)
  {
    v36 = (unint64_t *)&v7->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v53[0])
    operator delete(v53[0]);
}

void _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(uint64_t a1, std::__shared_weak_count *a2, uint64_t a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  const void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  int v60;
  unint64_t *v61;
  unint64_t v62;
  unsigned int AppIntegerValue;
  unsigned int v64;
  unsigned int v65;
  double v66;
  unsigned __int8 *v67;
  unsigned __int8 v68;
  char *FdPtrForFile;
  char *v70;
  NSObject *v71;
  os_signpost_id_t v72;
  NSObject *v73;
  NSObject *v74;
  _QWORD *v75;
  uint64_t v76;
  std::ios_base *v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  int v84;
  NSObject *v85;
  os_log_type_t v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  int v89;
  NSObject *v90;
  os_log_type_t v91;
  Boolean *v92;
  double Current;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  char *v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  _BOOL4 v105;
  unint64_t *v106;
  unint64_t v107;
  unsigned int v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  char *v115;
  _BOOL4 v116;
  unint64_t v117;
  int v118;
  unsigned int v119;
  unsigned __int8 v120;
  NSObject *v121;
  unsigned int v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  NSObject *v126;
  NSObject *v127;
  int v128;
  NSObject *v129;
  CFAbsoluteTime v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  unsigned int v146;
  unsigned int v147;
  _BOOL4 v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  char *v153;
  char *v154;
  const char *v155;
  char *v156;
  char *v157;
  const char *v158;
  uint64_t v159;
  char *v160;
  const char *v161;
  os_signpost_id_t spid;
  unint64_t v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  unsigned int v167;
  size_t __sz;
  unint64_t v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176[2];
  uint64_t v177;
  std::__shared_weak_count *v178;
  Boolean keyExistsAndHasValidFormat[8];
  std::__shared_weak_count *v180;
  uint64_t v181;
  _OWORD v182[4];
  __int128 __p;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  uint8_t buf[32];
  Boolean block[8];
  uint64_t v206;
  _BYTE v207[24];
  uint64_t v208;

  v208 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = *(const void **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  v9 = v7 - *(_QWORD *)a3;
  if (v7 == *(_QWORD *)a3)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    if (v9 < 0)
      goto LABEL_251;
    v10 = (char *)operator new(v7 - *(_QWORD *)a3);
    v11 = &v10[8 * (v9 >> 3)];
    memcpy(v10, v8, v9);
  }
  v202 = 0;
  v203 = 0;
  _ZN16QuantizerManagerIDF16_Li768EE15sharedQuantizerEi(&v202, a1, 0);
  v12 = v11 - v10;
  v170 = a1;
  v171 = a2;
  if (v11 == v10)
  {
    v14 = 0;
    v13 = 0;
  }
  else
  {
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF9)
      goto LABEL_251;
    v13 = (char *)operator new(2 * v12);
    bzero(v13, 2 * v12);
    v14 = &v13[2 * v12];
  }
  __sz = v11 - v10;
  v15 = v12 >> 3;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v202 + 24))(v202);
  v172 = v11;
  v169 = v15;
  v17 = 0;
  if (v11 != v10)
  {
    if (v15 <= 1)
      v15 = 1;
    while (1)
    {
      (*(void (**)(Boolean *__return_ptr))(**(_QWORD **)&v10[8 * v17] + 16))(keyExistsAndHasValidFormat);
      v18 = v202;
      v20 = *(_QWORD *)keyExistsAndHasValidFormat;
      v19 = v180;
      if (!v180)
        goto LABEL_21;
      v21 = (unint64_t *)&v180->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        if (v20 == v18)
          goto LABEL_16;
      }
      else
      {
LABEL_21:
        if (v20 == v18)
          goto LABEL_16;
      }
      *(_QWORD *)keyExistsAndHasValidFormat = 0;
      v180 = 0;
      v23 = *(_QWORD *)&v10[8 * v17];
      v200 = v202;
      v201 = v203;
      if (v203)
      {
        v24 = (unint64_t *)&v203->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      (*(void (**)(Boolean *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v23 + 40))(keyExistsAndHasValidFormat, v23, &v200);
      v26 = v201;
      if (!v201)
        goto LABEL_29;
      v27 = (unint64_t *)&v201->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        v30 = *(_QWORD *)keyExistsAndHasValidFormat;
        v29 = v180;
        if (!v180)
          goto LABEL_32;
      }
      else
      {
LABEL_29:
        v30 = *(_QWORD *)keyExistsAndHasValidFormat;
        v29 = v180;
        if (!v180)
          goto LABEL_32;
      }
      v31 = (unint64_t *)&v29->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
LABEL_32:
      v33 = &v13[16 * v17];
      v34 = (std::__shared_weak_count *)*((_QWORD *)v33 + 1);
      *(_QWORD *)v33 = v30;
      *((_QWORD *)v33 + 1) = v29;
      if (!v34)
        goto LABEL_36;
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        v37 = v180;
        if (v180)
        {
LABEL_37:
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
      }
      else
      {
LABEL_36:
        v37 = v180;
        if (v180)
          goto LABEL_37;
      }
LABEL_16:
      if (++v17 == v15)
      {
        v17 = 0;
        v40 = 0;
        if (v169 <= 1)
          v41 = 1;
        else
          v41 = v169;
        while (1)
        {
          v42 = *(_QWORD *)&v13[16 * v40];
          if (v42)
          {
            v43 = *(_QWORD *)&v10[8 * v40];
            v198 = v202;
            v199 = v203;
            if (v203)
            {
              v44 = (unint64_t *)&v203->__shared_owners_;
              do
                v45 = __ldxr(v44);
              while (__stxr(v45 + 1, v44));
            }
            v46 = *(std::__shared_weak_count **)&v13[16 * v40 + 8];
            v196 = v42;
            v197 = v46;
            if (v46)
            {
              v47 = (unint64_t *)&v46->__shared_owners_;
              do
                v48 = __ldxr(v47);
              while (__stxr(v48 + 1, v47));
            }
            (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v43 + 48))(v43, &v198, &v196);
            v49 = v197;
            if (!v197)
              goto LABEL_61;
            v50 = (unint64_t *)&v197->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
              v52 = v199;
              if (!v199)
                goto LABEL_67;
            }
            else
            {
LABEL_61:
              v52 = v199;
              if (!v199)
                goto LABEL_67;
            }
            v53 = (unint64_t *)&v52->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
LABEL_67:
          (*(void (**)(Boolean *__return_ptr))(**(_QWORD **)&v10[8 * v40] + 24))(keyExistsAndHasValidFormat);
          v55 = v180;
          v56 = *(unsigned int *)(*(_QWORD *)keyExistsAndHasValidFormat + 72);
          if (v180)
          {
            v57 = (unint64_t *)&v180->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          (*(void (**)(Boolean *__return_ptr))(**(_QWORD **)&v10[8 * v40] + 24))(keyExistsAndHasValidFormat);
          v59 = v180;
          v60 = *(_DWORD *)(*(_QWORD *)keyExistsAndHasValidFormat + 68);
          if (v180)
          {
            v61 = (unint64_t *)&v180->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          if (v60 != v16)
          {
            v153 = __si_assert_copy_extra_268();
            v154 = v153;
            v155 = "";
            if (v153)
              v155 = v153;
            __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2080, "vectorIndexes[i]->getPartitions()->nPartitions() == nPartitions", v155);
LABEL_239:
            free(v154);
            if (__valid_fs(-1))
            {
              MEMORY[0xBAD] = -559038737;
              abort();
            }
            MEMORY[0xC00] = -559038737;
            abort();
          }
          v17 += v56;
          if (++v40 == v41)
            goto LABEL_79;
        }
      }
    }
  }
LABEL_79:
  keyExistsAndHasValidFormat[0] = 0;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionSizeFactor"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v64 = AppIntegerValue;
  else
    v64 = 45;
  keyExistsAndHasValidFormat[0] = 0;
  v65 = CFPreferencesGetAppIntegerValue(CFSTR("IVFTrainingTimeBudget"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v66 = (double)v65;
  else
    v66 = 30.0;
  if (v17 >> 4 < 0x271 || v17 < v64 * (unint64_t)v16 * v64 * (unint64_t)v16 / 0x64)
  {
LABEL_108:
    v87 = v171;
    if (!v13)
      goto LABEL_109;
    goto LABEL_187;
  }
  v67 = (unsigned __int8 *)(v170 + 72);
  do
    v68 = __ldaxr(v67);
  while (__stlxr(1u, v67));
  if ((v68 & 1) == 0 && *(_QWORD *)(v170 + 96))
  {
    v156 = __si_assert_copy_extra_268();
    v157 = v156;
    v158 = "";
    if (v156)
      v158 = v156;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 717, "_trainingQuantizer == nullptr", v158);
    free(v157);
    if (__valid_fs(-1))
      v159 = 2989;
    else
      v159 = 3072;
    *(_DWORD *)v159 = -559038737;
    goto LABEL_251;
  }
  FdPtrForFile = (char *)QuantizerManager<float,768>::createFdPtrForFile(v170, "dummy");
  if (!FdPtrForFile)
  {
    atomic_store(0, v67);
    goto LABEL_105;
  }
  v70 = FdPtrForFile;
  _fd_unlink_with_origin((uint64_t)FdPtrForFile, 0);
  fd_release(v70);
  if ((v68 & 1) != 0)
  {
LABEL_105:
    v84 = *__error();
    v85 = _SILogForLogForCategory(16);
    v86 = 2 * (dword_1EF19FCCC < 4);
    if (os_log_type_enabled(v85, v86))
    {
      *(_WORD *)keyExistsAndHasValidFormat = 0;
      _os_log_impl(&dword_1B8270000, v85, v86, "training quantizer already happen in other thread. Skip!", keyExistsAndHasValidFormat, 2u);
    }
    *__error() = v84;
    goto LABEL_108;
  }
  v167 = v64;
  v71 = _SILogForLogForCategory(0);
  v72 = os_signpost_id_make_with_pointer(v71, 0);
  v73 = _SILogForLogForCategory(0);
  spid = v72;
  v163 = v72 - 1;
  if (v72 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v74 = v73;
    if (os_signpost_enabled(v73))
    {
      *(_WORD *)keyExistsAndHasValidFormat = 0;
      _os_signpost_emit_with_name_impl(&dword_1B8270000, v74, OS_SIGNPOST_INTERVAL_BEGIN, v72, "IVFVectorIndexTrain", "Start", keyExistsAndHasValidFormat, 2u);
    }
  }
  v195 = 0u;
  v194 = 0u;
  v193 = 0u;
  v192 = 0u;
  v191 = 0u;
  v190 = 0u;
  v189 = 0u;
  v188 = 0u;
  v187 = 0u;
  v185 = 0;
  v184 = 0u;
  __p = 0u;
  memset(v182, 0, sizeof(v182));
  v180 = 0;
  v166 = MEMORY[0x1E0DE4FD0] + 104;
  v186 = MEMORY[0x1E0DE4FD0] + 104;
  v164 = MEMORY[0x1E0DE4FD0] + 64;
  v181 = MEMORY[0x1E0DE4FD0] + 64;
  v75 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v76 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)keyExistsAndHasValidFormat = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  *(_QWORD *)&keyExistsAndHasValidFormat[*(_QWORD *)(*(_QWORD *)keyExistsAndHasValidFormat - 24)] = v76;
  v180 = 0;
  v77 = (std::ios_base *)&keyExistsAndHasValidFormat[*(_QWORD *)(*(_QWORD *)keyExistsAndHasValidFormat - 24)];
  std::ios_base::init(v77, v182);
  v77[1].__vftable = 0;
  v77[1].__fmtflags_ = -1;
  v78 = v75[5];
  v181 = v75[4];
  *(uint64_t *)((char *)&v181 + *(_QWORD *)(v181 - 24)) = v78;
  *(_QWORD *)keyExistsAndHasValidFormat = v75[1];
  *(_QWORD *)&keyExistsAndHasValidFormat[*(_QWORD *)(*(_QWORD *)keyExistsAndHasValidFormat - 24)] = v75[6];
  v186 = v166;
  *(_QWORD *)keyExistsAndHasValidFormat = MEMORY[0x1E0DE4FD0] + 24;
  v181 = v164;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&v182[0] = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v184 = 0u;
  LODWORD(v185) = 24;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v181, (uint64_t)"[", 1);
  if (v172 != v10)
  {
    v79 = v10;
    do
    {
      (*(void (**)(Boolean *__return_ptr))(**(_QWORD **)v79 + 24))(block);
      v80 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v80, (uint64_t)", ", 2);
      v81 = (std::__shared_weak_count *)v206;
      if (v206)
      {
        v82 = (unint64_t *)(v206 + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v79 += 8;
    }
    while (v79 != v172);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v181, (uint64_t)"]", 1);
  v89 = *__error();
  v90 = _SILogForLogForCategory(16);
  v91 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v90, v91))
  {
    std::stringbuf::str();
    v92 = v207[7] >= 0 ? block : *(Boolean **)block;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v92;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v16;
    _os_log_impl(&dword_1B8270000, v90, v91, "training quantizer with %s vectors in %u partitions", buf, 0x12u);
    if ((v207[7] & 0x80000000) != 0)
      operator delete(*(void **)block);
  }
  *__error() = v89;
  Current = CFAbsoluteTimeGetCurrent();
  if (CFAbsoluteTimeGetCurrent() - Current >= v66)
  {
    v102 = 0;
    goto LABEL_169;
  }
  v94 = (sqrt((double)v17) / (double)v167);
  block[0] = 0;
  v95 = CFPreferencesGetAppIntegerValue(CFSTR("IVFSeedCentroidPerTraining"), CFSTR("com.apple.Spotlight"), block);
  if (block[0])
    v96 = v95;
  else
    v96 = 60;
  v165 = v94;
  v97 = 2 * (v94 - v16);
  if (v96 <= v97)
    v98 = v97;
  else
    v98 = v96;
  v177 = v170;
  v178 = v171;
  if (v171)
  {
    v99 = (unint64_t *)&v171->__shared_owners_;
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 1, v99));
  }
  memset(buf, 0, 24);
  if (v172 == v10)
  {
    v101 = 0;
    goto LABEL_132;
  }
  if ((__sz & 0x8000000000000000) != 0)
LABEL_251:
    abort();
  v101 = (char *)operator new(__sz);
  *(_QWORD *)buf = v101;
  *(_QWORD *)&buf[16] = &v101[8 * v169];
  memcpy(v101, v10, __sz);
  *(_QWORD *)&buf[8] = &v101[8 * v169];
LABEL_132:
  block[0] = 0;
  v103 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionRecycleTheshold"), CFSTR("com.apple.Spotlight"), block);
  if (block[0])
    v104 = v103;
  else
    v104 = 3;
  v105 = _ZN22IVFVectorIndexTemplateIDF16_Li768EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li768EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(&v177, (std::string::size_type *)buf, v98, v104);
  if (v101)
  {
    *(_QWORD *)&buf[8] = v101;
    operator delete(v101);
  }
  if (v171)
  {
    v106 = (unint64_t *)&v171->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  if (v105)
  {
    _ZN16QuantizerManagerIDF16_Li768EE20lastTrainedQuantizerEv(block, v170);
    v108 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)block + 24))(*(_QWORD *)block);
    v109 = (std::__shared_weak_count *)v206;
    if (v206)
    {
      v110 = (unint64_t *)(v206 + 8);
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
    if (v17 >= v167 * (unint64_t)v108 * v167 * (unint64_t)v108 / 0x64)
    {
      v112 = v171;
      v139 = (unint64_t *)&v171->__shared_owners_;
      v102 = 1;
      while (CFAbsoluteTimeGetCurrent() - Current < v66)
      {
        block[0] = 0;
        v140 = CFPreferencesGetAppIntegerValue(CFSTR("IVFSeedCentroidPerTraining"), CFSTR("com.apple.Spotlight"), block);
        if (block[0])
          v141 = v140;
        else
          v141 = 60;
        v142 = 2 * (v165 - v108);
        if (v141 <= v142)
          v143 = v142;
        else
          v143 = v141;
        v177 = v170;
        v178 = v112;
        if (v112)
        {
          do
            v144 = __ldxr(v139);
          while (__stxr(v144 + 1, v139));
        }
        memset(buf, 0, 24);
        if (v172 == v10)
        {
          v145 = 0;
        }
        else
        {
          if ((__sz & 0x8000000000000000) != 0)
            goto LABEL_251;
          v145 = (char *)operator new(__sz);
          *(_QWORD *)buf = v145;
          *(_QWORD *)&buf[16] = &v145[8 * v169];
          memcpy(v145, v10, __sz);
          *(_QWORD *)&buf[8] = &v145[8 * v169];
        }
        block[0] = 0;
        v146 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionRecycleTheshold"), CFSTR("com.apple.Spotlight"), block);
        if (block[0])
          v147 = v146;
        else
          v147 = 3;
        v148 = _ZN22IVFVectorIndexTemplateIDF16_Li768EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li768EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(&v177, (std::string::size_type *)buf, v143, v147);
        if (v145)
        {
          *(_QWORD *)&buf[8] = v145;
          operator delete(v145);
        }
        if (v171)
        {
          do
            v149 = __ldaxr(v139);
          while (__stlxr(v149 - 1, v139));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
          }
        }
        ++v102;
        if (!v148)
          goto LABEL_169;
        _ZN16QuantizerManagerIDF16_Li768EE20lastTrainedQuantizerEv(block, v170);
        v108 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)block + 24))(*(_QWORD *)block);
        v150 = (std::__shared_weak_count *)v206;
        if (v206)
        {
          v151 = (unint64_t *)(v206 + 8);
          do
            v152 = __ldaxr(v151);
          while (__stlxr(v152 - 1, v151));
          if (!v152)
          {
            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
            std::__shared_weak_count::__release_weak(v150);
          }
        }
        v112 = v171;
        if (v17 < v167 * (unint64_t)v108 * v167 * (unint64_t)v108 / 0x64)
          break;
      }
    }
    else
    {
      v102 = 1;
      v112 = v171;
    }
    v113 = (unint64_t *)&v112->__shared_owners_;
    while (1)
    {
      if (CFAbsoluteTimeGetCurrent() - Current >= v66)
        goto LABEL_169;
      v176[0] = v170;
      v176[1] = (uint64_t)v171;
      if (v171)
      {
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
      }
      v173 = 0;
      v174 = 0;
      v175 = 0;
      if (v172 != v10)
        break;
      v116 = _ZN22IVFVectorIndexTemplateIDF16_Li768EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li768EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(v176, (std::string::size_type *)&v173, 0, 2u);
      if (v171)
        goto LABEL_159;
LABEL_162:
      ++v102;
      if (v116)
      {
        block[0] = 0;
        v118 = CFPreferencesGetAppIntegerValue(CFSTR("IVFMaxTrainingIteration"), CFSTR("com.apple.Spotlight"), block);
        v119 = block[0] ? v118 : 3;
        if (v102 <= v119)
          continue;
      }
      goto LABEL_169;
    }
    if ((__sz & 0x8000000000000000) != 0)
      goto LABEL_251;
    v115 = (char *)operator new(__sz);
    v173 = v115;
    v175 = &v115[8 * v169];
    memcpy(v115, v10, __sz);
    v174 = &v115[8 * v169];
    v116 = _ZN22IVFVectorIndexTemplateIDF16_Li768EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li768EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(v176, (std::string::size_type *)&v173, 0, 2u);
    v174 = v115;
    operator delete(v115);
    if (!v171)
      goto LABEL_162;
    do
LABEL_159:
      v117 = __ldaxr(v113);
    while (__stlxr(v117 - 1, v113));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
    goto LABEL_162;
  }
  v102 = 1;
LABEL_169:
  v120 = atomic_load(v67);
  if ((v120 & 1) == 0)
  {
    v160 = __si_assert_copy_extra_268();
    v154 = v160;
    v161 = "";
    if (v160)
      v161 = v160;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 794, "_training.test()", v161);
    goto LABEL_239;
  }
  if (*(_QWORD *)(v170 + 96))
  {
    v121 = *(NSObject **)(v170 + 16);
    *(_QWORD *)block = MEMORY[0x1E0C809B0];
    v206 = 0x40000000;
    *(_QWORD *)v207 = ___ZN16QuantizerManagerIDF16_Li768EE23commitTrainingQuantizerEv_block_invoke;
    *(_QWORD *)&v207[8] = &__block_descriptor_tmp_468;
    *(_QWORD *)&v207[16] = v170;
    dispatch_sync(v121, block);
  }
  atomic_store(0, (unsigned __int8 *)(v170 + 72));
  _ZN16QuantizerManagerIDF16_Li768EE15sharedQuantizerEi(block, v170, 0);
  v122 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)block + 24))(*(_QWORD *)block);
  v123 = (std::__shared_weak_count *)v206;
  if (v206)
  {
    v124 = (unint64_t *)(v206 + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = _SILogForLogForCategory(0);
  if (v163 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v127 = v126;
    if (os_signpost_enabled(v126))
    {
      *(_WORD *)block = 0;
      _os_signpost_emit_with_name_impl(&dword_1B8270000, v127, OS_SIGNPOST_INTERVAL_END, spid, "IVFVectorIndexTrain", "End", block, 2u);
    }
  }
  v128 = *__error();
  v129 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
  {
    v130 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)block = 67110144;
    *(_DWORD *)&block[4] = v17;
    LOWORD(v206) = 1024;
    *(_DWORD *)((char *)&v206 + 2) = v122;
    HIWORD(v206) = 1024;
    *(_DWORD *)v207 = v17 / v122;
    *(_WORD *)&v207[4] = 1024;
    *(_DWORD *)&v207[6] = v102;
    *(_WORD *)&v207[10] = 2048;
    *(double *)&v207[12] = v130 - Current;
    _os_log_impl(&dword_1B8270000, v129, OS_LOG_TYPE_DEFAULT, "training quantizer for %u vectors in %u partitions average size: %u for %u iterations duration: %fs", block, 0x24u);
  }
  *__error() = v128;
  *(_QWORD *)keyExistsAndHasValidFormat = *MEMORY[0x1E0DE4F50];
  v131 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)&keyExistsAndHasValidFormat[*(_QWORD *)(*(_QWORD *)keyExistsAndHasValidFormat - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v181 = v131;
  *(_QWORD *)&v182[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v184) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1BCCB0650](&v186);
  v87 = v171;
  if (!v13)
  {
LABEL_109:
    v88 = v203;
    if (!v203)
      goto LABEL_198;
    goto LABEL_194;
  }
LABEL_187:
  while (v14 != v13)
  {
    v132 = (std::__shared_weak_count *)*((_QWORD *)v14 - 1);
    if (v132)
    {
      v133 = (unint64_t *)&v132->__shared_owners_;
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
    v14 -= 16;
  }
  operator delete(v13);
  v88 = v203;
  if (v203)
  {
LABEL_194:
    v135 = (unint64_t *)&v88->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
LABEL_198:
  if (v10)
    operator delete(v10);
  if (v87)
  {
    v137 = (unint64_t *)&v87->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
}

void _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12enumerator_s4nextEv(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(_QWORD *)(a2 + 72))
  {
    for (i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + ((*(_QWORD *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * *(_QWORD *)(a2 + 64));
          ;
          i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + ((v11 >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * v11))
    {
      *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)i + 16))(i);
      if (!*(_QWORD *)(a2 + 72))
        break;
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + ((*(_QWORD *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * *(_QWORD *)(a2 + 64));
      v6 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
      if (v6)
      {
        *(_DWORD *)(a1 + 4) = v6[1];
        v12 = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 32) + 16) * *v6, 0x610uLL);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(v12 + 1544);
        *(_QWORD *)(a1 + 16) = v12;
        *(_QWORD *)(a1 + 24) = v12 + 1536;
        return;
      }
      v7 = *(std::__shared_weak_count **)(*(_QWORD *)(*(_QWORD *)(a2 + 40)
                                                    + ((*(_QWORD *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                                        + 16 * *(_QWORD *)(a2 + 64)
                                        + 8);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = *(_QWORD *)(a2 + 72) - 1;
      v11 = *(_QWORD *)(a2 + 64) + 1;
      *(_QWORD *)(a2 + 64) = v11;
      *(_QWORD *)(a2 + 72) = v10;
      if (v11 >= 0x200)
      {
        operator delete(**(void ***)(a2 + 40));
        *(_QWORD *)(a2 + 40) += 8;
        v10 = *(_QWORD *)(a2 + 72);
        v11 = *(_QWORD *)(a2 + 64) - 256;
        *(_QWORD *)(a2 + 64) = v11;
      }
      if (!v10)
        return;
    }
  }
}

_DWORD *_ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, char a5, float a6)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  const UInt8 *data;
  int v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  int v22;
  NSObject *v23;
  _BYTE *v24;
  int v25;
  NSObject *v26;
  _BYTE *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  _DWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  NSObject *v44;
  const UInt8 *v45;
  int v46;
  NSObject *v47;
  size_t v48;
  int v49;
  NSObject *v50;
  int v51;
  NSObject *v52;
  _BYTE *v53;
  int v54;
  NSObject *v55;
  _BYTE *v56;
  NSObject *v57;
  int v58;
  NSObject *v59;
  int v60;
  int v61;
  char *v62;
  char *v63;
  const char *v64;
  char *v65;
  char *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  NSObject *v76;
  _QWORD *v77;
  int v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  int v95;
  char *v96;
  const char *v97;
  char *v98;
  const char *v99;
  char *v100;
  const char *v101;
  char *v102;
  const char *v103;
  char *v104;
  const char *v105;
  std::__shared_weak_count *v106;
  unsigned int v107;
  void *__src;
  uint64_t v109;
  float v110;
  unsigned int v111;
  uint8_t buf[4];
  _BYTE *v113;
  _BYTE __p[12];
  __int16 v115;
  _BYTE v116[20];
  _BYTE v117[10];
  uint64_t v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v111 = a4;
  v110 = a6;
  if (*(_BYTE *)(a1 + 160))
  {
    v62 = __si_assert_copy_extra_268();
    v63 = v62;
    v64 = "";
    if (v62)
      v64 = v62;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2430, "!readOnly", v64);
    goto LABEL_121;
  }
  if ((a5 & 1) != 0)
  {
    v9 = a4;
    if ((_DWORD)a4 == -1)
      goto LABEL_79;
    goto LABEL_30;
  }
  v10 = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li768EERjRfj(a1, (uint64_t)a3, (int *)&v111, &v110, a2);
  v9 = v111;
  if (v111 == -1)
  {
LABEL_79:
    v65 = __si_assert_copy_extra_268();
    v66 = v65;
    v67 = "";
    if (v65)
      v67 = v65;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2435, "partID != VECTOR_NOT_FOUND", v67);
    goto LABEL_82;
  }
  if (v10 == -1)
  {
LABEL_30:
    __src = a3;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    v28 = *(std::__shared_weak_count **)(a1 + 88);
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
    }
    v106 = v28;
    v32 = *(_DWORD **)(a1 + 96);
    v31 = *(std::__shared_weak_count **)(a1 + 104);
    if (v31)
    {
      v33 = (unint64_t *)&v31->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    v35 = *(_QWORD *)(a1 + 48);
    v36 = *(_QWORD **)(v35 + 32);
    v37 = v36[2];
    v38 = v36[7];
    v39 = v38 + v37;
    v107 = a2;
    if (v38 + v37 >= v36[6])
    {
      if (!_storage_array_Expand((uint64_t)(v36 + 1)))
      {
        v40 = 0;
        if (v37 > 0x60F)
          goto LABEL_89;
        goto LABEL_38;
      }
      v38 = v36[7];
      v39 = v38 + v37;
    }
    v36[7] = v39;
    v40 = (v38 - v36[3]) / v37;
    if (v37 > 0x60F)
      goto LABEL_89;
LABEL_38:
    v41 = v36[2];
    if (v41 <= 0x60F)
    {
      LODWORD(v42) = 1552;
      do
      {
        v43 = v36[7] + v41;
        if (v43 >= v36[6])
        {
          if (!_storage_array_Expand((uint64_t)(v36 + 1)))
            goto LABEL_42;
          v43 = v36[7] + v41;
        }
        v36[7] = v43;
LABEL_42:
        v41 = v36[2];
        v42 = (v42 - v41);
      }
      while (v41 < v42);
    }
LABEL_89:
    v69 = (uint64_t)(v36 + 524);
    bit_vector_set_9027((uint64_t)(v36 + 524), (v40 >> 20));
    v70 = (v40 + 1552) >> 20;
    if (v70 > (v40 >> 20))
    {
      v71 = (v40 >> 20) + 1;
      do
      {
        v72 = v71;
        bit_vector_set_9027(v69, v71++);
      }
      while (v70 > v72);
    }
    v73 = *(unsigned int *)(v35 + 40);
    v74 = v40;
    if (v40 != v73)
    {
      v75 = *__error();
      v76 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
      {
        v95 = *(_DWORD *)(v35 + 40);
        *(_DWORD *)__p = 136315906;
        *(_QWORD *)&__p[4] = "newEntry";
        v115 = 1024;
        *(_DWORD *)v116 = 1779;
        *(_WORD *)&v116[4] = 2048;
        *(_QWORD *)&v116[6] = v40;
        *(_WORD *)&v116[14] = 1024;
        *(_DWORD *)&v116[16] = v95;
        _os_log_error_impl(&dword_1B8270000, v76, OS_LOG_TYPE_ERROR, "%s:%d: offset: %llu, nVectors: %u", __p, 0x22u);
      }
      *__error() = v75;
      v77 = *(_QWORD **)(v35 + 32);
      v78 = *__error();
      v79 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
      {
        v80 = v77[6];
        v81 = v77[7];
        v83 = v77[2];
        v82 = v77[3];
        *(_DWORD *)__p = 134219008;
        *(_QWORD *)&__p[4] = v77;
        v115 = 2048;
        *(_QWORD *)v116 = v80;
        *(_WORD *)&v116[8] = 2048;
        *(_QWORD *)&v116[10] = v81;
        *(_WORD *)&v116[18] = 2048;
        *(_QWORD *)v117 = v82;
        *(_WORD *)&v117[8] = 2048;
        v118 = v83;
        _os_log_impl(&dword_1B8270000, v79, OS_LOG_TYPE_DEFAULT, "vi_onefixedsize_disk_allocator %p size: %llu, freeRegion: %llu, header: %llu, elemSize: %lu", __p, 0x34u);
      }
      *__error() = v78;
      v74 = *(unsigned int *)(v35 + 40);
      LODWORD(v73) = *(_DWORD *)(v35 + 40);
    }
    if (v40 == v74)
    {
      *(_DWORD *)(v35 + 40) = v73 + 1;
      v84 = (_QWORD *)_windowsResolvePtr(*(_QWORD *)(v35 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v35 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v35 + 32) + 16) * v40, 0x610uLL);
      memcpy(v84, __src, 0x600uLL);
      v84[192] = 0;
      (*(void (**)(_DWORD *, uint64_t, unint64_t, float))(*(_QWORD *)v32 + 56))(v32, v9, v40, v110);
      v85 = *(_QWORD *)(a1 + 48);
      if (v32[18] == *(_DWORD *)(v85 + 40))
      {
        v86 = v40;
        v87 = v40 >> 20;
        v88 = *(_QWORD *)(v85 + 32) + 4192;
        bit_vector_set_9027(v88, v87);
        v89 = ((unint64_t)v40 + 1552) >> 20;
        if (v89 > v87)
        {
          do
            bit_vector_set_9027(v88, ++v87);
          while (v89 != v87);
        }
        v16 = (_DWORD *)_windowsResolvePtr(*(_QWORD *)(v85 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v85 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v85 + 32) + 16) * v86, 0x610uLL);
        v16[386] = v107;
        if (*(_DWORD *)(*(_QWORD *)(a1 + 48) + 40) == 1)
          *(_DWORD *)(a1 + 164) = v107;
        *(_DWORD *)(a1 + 168) = v107;
        data_map_set_offset_for_id(*(_QWORD *)(a1 + 144), v107, (16 * v86) | ((unint64_t)*(unsigned int *)(a1 + 40) << 36) | (4 * (*(_DWORD *)(a1 + 128) & 3)) | *(_DWORD *)(a1 + 124) & 3, *(unsigned __int16 *)(a1 + 120) | ((unint64_t)*(unsigned int *)(a1 + 132) << 32), *(_DWORD *)(a1 + 136));
        if (v31)
        {
          v90 = (unint64_t *)&v31->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        if (v106)
        {
          v92 = (unint64_t *)&v106->__shared_owners_;
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
        return v16;
      }
      v98 = __si_assert_copy_extra_268();
      v63 = v98;
      v99 = "";
      if (v98)
        v99 = v98;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2440, "cur.partitions->nVectors() == vectors->count()", v99);
    }
    else
    {
      v96 = __si_assert_copy_extra_268();
      v63 = v96;
      v97 = "";
      if (v96)
        v97 = v96;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1782, "offset == nVectors", v97);
    }
LABEL_121:
    free(v63);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v11 = *(_QWORD *)(a1 + 48);
  v12 = v10;
  v13 = (unint64_t)v10 >> 20;
  v14 = *(_QWORD *)(v11 + 32) + 4192;
  bit_vector_set_9027(v14, v13);
  v15 = (unint64_t)(v12 + 1552) >> 20;
  if (v15 > v13)
  {
    do
      bit_vector_set_9027(v14, ++v13);
    while (v15 != v13);
  }
  v16 = (_DWORD *)_windowsResolvePtr(*(_QWORD *)(v11 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v11 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v11 + 32) + 16) * v12, 0x610uLL);
  if (v16[386] != a2)
  {
    v109 = 0;
    data = data_map_get_data(*(_QWORD *)(a1 + 144), a2, &v109);
    v18 = *__error();
    v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 136316162;
      *(_QWORD *)&__p[4] = "lookupForInsert";
      v115 = 1024;
      *(_DWORD *)v116 = 2463;
      *(_WORD *)&v116[4] = 1024;
      *(_DWORD *)&v116[6] = a2;
      *(_WORD *)&v116[10] = 2048;
      *(_QWORD *)&v116[12] = data;
      *(_WORD *)v117 = 2048;
      *(_QWORD *)&v117[2] = v109;
      _os_log_error_impl(&dword_1B8270000, v19, OS_LOG_TYPE_ERROR, "%s:%d: vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v18;
    if (v109 < 1)
    {
      v25 = *__error();
      v44 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "lookupForInsert";
        v115 = 1024;
        *(_DWORD *)v116 = 2472;
        _os_log_error_impl(&dword_1B8270000, v44, OS_LOG_TYPE_ERROR, "%s:%d: vectorId is invalid", __p, 0x12u);
      }
    }
    else
    {
      if (v109 != 1536)
      {
        v102 = __si_assert_copy_extra_268();
        v63 = v102;
        v103 = "";
        if (v102)
          v103 = v102;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2465, "size == D * sizeof(ELEM_TYPE)", v103);
        goto LABEL_121;
      }
      if (!data || !memcmp(data, a3, 0x600uLL))
      {
LABEL_49:
        v45 = data_map_get_data(*(_QWORD *)(a1 + 144), v16[386], &v109);
        v46 = *__error();
        v47 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          v60 = v16[386];
          *(_DWORD *)__p = 136316162;
          *(_QWORD *)&__p[4] = "lookupForInsert";
          v115 = 1024;
          *(_DWORD *)v116 = 2475;
          *(_WORD *)&v116[4] = 1024;
          *(_DWORD *)&v116[6] = v60;
          *(_WORD *)&v116[10] = 2048;
          *(_QWORD *)&v116[12] = v45;
          *(_WORD *)v117 = 2048;
          *(_QWORD *)&v117[2] = v109;
          _os_log_error_impl(&dword_1B8270000, v47, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
        }
        *__error() = v46;
        if (v109 < 1)
        {
          v54 = *__error();
          v57 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = "lookupForInsert";
            v115 = 1024;
            *(_DWORD *)v116 = 2484;
            _os_log_error_impl(&dword_1B8270000, v57, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId is invalid", __p, 0x12u);
          }
        }
        else
        {
          if (v109 != 1536)
          {
            v104 = __si_assert_copy_extra_268();
            v63 = v104;
            v105 = "";
            if (v104)
              v105 = v104;
            __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2477, "size == D * sizeof(ELEM_TYPE)", v105);
            goto LABEL_121;
          }
          v48 = 1536;
          if (!v45 || !memcmp(v45, v16, 0x600uLL))
            goto LABEL_72;
          v49 = *__error();
          v50 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = "lookupForInsert";
            v115 = 1024;
            *(_DWORD *)v116 = 2479;
            _os_log_error_impl(&dword_1B8270000, v50, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
          }
          *__error() = v49;
          v51 = *__error();
          v52 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            data2hexString(__p, (uint64_t)v45, v109);
            v53 = v116[9] >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)buf = 136315138;
            v113 = v53;
            _os_log_impl(&dword_1B8270000, v52, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
            if ((v116[9] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
          *__error() = v51;
          v54 = *__error();
          v55 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            data2hexString(__p, (uint64_t)v16, v109);
            v56 = v116[9] >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)buf = 136315138;
            v113 = v56;
            _os_log_impl(&dword_1B8270000, v55, OS_LOG_TYPE_DEFAULT, "vector in vector store: %s", buf, 0xCu);
            if ((v116[9] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
        }
        *__error() = v54;
        v48 = v109;
LABEL_72:
        if (memcmp(a3, v16, v48))
        {
          v100 = __si_assert_copy_extra_268();
          v66 = v100;
          v101 = "";
          if (v100)
            v101 = v100;
          __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2486, "memcmp(vec.vec, entry->vec.vec, size) == 0", v101);
LABEL_82:
          free(v66);
          if (__valid_fs(-1))
            v68 = 2989;
          else
            v68 = 3072;
          *(_DWORD *)v68 = -559038737;
          abort();
        }
        v58 = *__error();
        v59 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_FAULT))
        {
          v61 = v16[386];
          *(_DWORD *)__p = 136315906;
          *(_QWORD *)&__p[4] = "lookupForInsert";
          v115 = 1024;
          *(_DWORD *)v116 = 2487;
          *(_WORD *)&v116[4] = 1024;
          *(_DWORD *)&v116[6] = a2;
          *(_WORD *)&v116[10] = 1024;
          *(_DWORD *)&v116[12] = v61;
          _os_log_fault_impl(&dword_1B8270000, v59, OS_LOG_TYPE_FAULT, "%s:%d: Dup vector with new vectorId=%u old=%u", __p, 0x1Eu);
        }
        *__error() = v58;
        return v16;
      }
      v20 = *__error();
      v21 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "lookupForInsert";
        v115 = 1024;
        *(_DWORD *)v116 = 2467;
        _os_log_error_impl(&dword_1B8270000, v21, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v20;
      v22 = *__error();
      v23 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)data, v109);
        v24 = v116[9] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        v113 = v24;
        _os_log_impl(&dword_1B8270000, v23, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v116[9] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      *__error() = v22;
      v25 = *__error();
      v26 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)a3, v109);
        v27 = v116[9] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        v113 = v27;
        _os_log_impl(&dword_1B8270000, v26, OS_LOG_TYPE_DEFAULT, "vector passed in: %s", buf, 0xCu);
        if ((v116[9] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
    }
    *__error() = v25;
    goto LABEL_49;
  }
  return v16;
}

uint64_t _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li768EERjRfj(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, int a5)
{
  os_unfair_lock_s *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  _DWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char *v28;
  char *v29;
  const char *v30;
  char *v31;
  const char *v32;
  char *v33;
  char *v34;
  const char *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  _QWORD v40[8];
  int v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  int v45;

  v10 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v12 = *(_QWORD *)(a1 + 80);
  v11 = *(std::__shared_weak_count **)(a1 + 88);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v16 = *(_DWORD **)(a1 + 96);
  v15 = *(std::__shared_weak_count **)(a1 + 104);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  os_unfair_lock_unlock(v10);
  v19 = *a3;
  if ((_DWORD)v19 == -1)
  {
    if (*(_DWORD *)(a1 + 156) == -1)
    {
      v42 = 0;
      v43 = 0;
      v44 = 0;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 72))(&v42, v12, a2, 1);
      v20 = v42;
      if (v43 - (char *)v42 == 8)
      {
        v21 = *v42;
        *a3 = *v42;
        *a4 = v20[1];
        if (v21 >= IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1))
        {
          v33 = __si_assert_copy_extra_268();
          v34 = v33;
          if (v33)
            v35 = v33;
          else
            v35 = "";
          v36 = *a3;
          v37 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
          v38 = v16[19];
          v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          __message_assert("%s:%u: failed assertion '%s' %s Invalid partId %u >= %u (partitions: v%u quantizer v%u", "IVFVectorIndex.hh", 2403, "partID < nPartitions()", v35, v36, v37, v38, v39);
          free(v34);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if (v42)
        {
          v43 = (char *)v42;
          operator delete(v42);
        }
        v19 = *a3;
        goto LABEL_14;
      }
      v31 = __si_assert_copy_extra_268();
      v29 = v31;
      v32 = "";
      if (v31)
        v32 = v31;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2398, "topPartition.size() == 1", v32);
    }
    else
    {
      v28 = __si_assert_copy_extra_268();
      v29 = v28;
      v30 = "";
      if (v28)
        v30 = v28;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2396, "mergeBeginVectorOffset == VECTOR_NOT_FOUND", v30);
    }
    free(v29);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
LABEL_14:
  v42 = 0;
  v43 = (char *)&v42;
  v45 = -1;
  v44 = 0x2000000000;
  v40[0] = MEMORY[0x1E0C809B0];
  v40[1] = 0x40000000;
  v40[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li768EERjRfj_block_invoke;
  v40[3] = &unk_1E6E32148;
  v41 = a5;
  v40[6] = a4;
  v40[7] = a2;
  v40[4] = &v42;
  v40[5] = a1;
  (*(void (**)(_DWORD *, uint64_t, _QWORD *))(*(_QWORD *)v16 + 80))(v16, v19, v40);
  v22 = *((unsigned int *)v43 + 6);
  _Block_object_dispose(&v42, 8);
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v11)
  {
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v22;
}

unint64_t ___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li768EERjRfj_block_invoke(unint64_t result, uint64_t a2, float *a3, _BYTE *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  int v15;
  const void *v16;
  const void *v17;

  v5 = *(_QWORD *)(result + 40);
  v6 = *(unsigned int *)a3;
  if (v6 >= *(_DWORD *)(v5 + 156))
    goto LABEL_12;
  v8 = result;
  v9 = **(float **)(result + 48);
  v10 = a3[1];
  v11 = v9 == v10;
  v12 = vabds_f32(v9, v10);
  v13 = fmaxf(fminf(fabsf(v10), fabsf(v9)) * 0.000015259, 0.000015259);
  if (v11 || v12 <= v13)
  {
    v15 = *(_DWORD *)(result + 64);
    if (v15)
    {
      result = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 16) * v6, 0x610uLL);
      if (v15 != *(_DWORD *)(result + 1544))
        return result;
      *(float *)&v6 = *a3;
    }
    v16 = *(const void **)(v8 + 56);
    v17 = (const void *)_windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 16) * v6, 0x610uLL);
    result = memcmp(v16, v17, 0x600uLL);
    if (!(_DWORD)result)
    {
      *(float *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8) + 24) = *a3;
LABEL_12:
      *a4 = 1;
    }
  }
  return result;
}

BOOL _ZN22IVFVectorIndexTemplateIDF16_Li768EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li768EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(uint64_t *a1, std::string::size_type *a2, uint64_t a3, unsigned int a4)
{
  double Current;
  std::string::size_type v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *size;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  std::string::size_type v23;
  unsigned __int8 v24;
  NSObject *v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  size_t v29;
  unint64_t v30;
  std::string *v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type v40;
  const char *v41;
  _QWORD *FdPtrForFile;
  std::string::size_type v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  int v50;
  NSObject *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  size_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  _QWORD *v65;
  size_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t *v76;
  char *v77;
  __int128 v78;
  _BOOL8 v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  const void *v84;
  _BYTE *v85;
  _BYTE *v86;
  _BYTE *v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  int64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t *v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  int64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  void *v110;
  std::string::size_type v111;
  std::string::size_type v112;
  void *v113;
  void *v114;
  unsigned int v115;
  void *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  __int128 v119;
  unint64_t *v120;
  std::string::size_type v121;
  uint64_t v122;
  size_t v123;
  uint64_t v124;
  std::string::size_type v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  std::string::size_type *v137;
  uint64_t v138;
  const void *v139;
  const void *v140;
  unint64_t v141;
  uint64_t v142;
  _OWORD *v143;
  unint64_t v144;
  float v145;
  uint64_t v146;
  float32x4_t *v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float16x8_t *v152;
  _QWORD *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  int v161;
  int v162;
  NSObject *v163;
  unsigned int v164;
  uint64_t v165;
  unint64_t v166;
  unsigned int v167;
  unint64_t v168;
  void *v169;
  size_t v170;
  char *v171;
  std::string::size_type v172;
  unint64_t *v173;
  unint64_t v174;
  std::string::size_type v175;
  unint64_t v176;
  unint64_t *v177;
  uint64_t v178;
  unint64_t v179;
  __int128 v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::string::size_type *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  int v190;
  std::__shared_weak_count *v191;
  int v192;
  unint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  int v196;
  NSObject *v197;
  int v198;
  int v199;
  CFAbsoluteTime v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  char *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  int64_t v216;
  uint64_t v217;
  uint64_t *v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  _BYTE *v223;
  int v224;
  char *v225;
  char *v226;
  const char *v227;
  uint64_t v228;
  char *v229;
  char *v230;
  const char *v231;
  char *v232;
  const char *v233;
  char *v234;
  const char *v235;
  char *v236;
  const char *v237;
  char *v238;
  const char *v239;
  char *v240;
  const char *v241;
  __int128 v242;
  uint64_t v243;
  size_t v244;
  std::string::size_type v245;
  std::string::size_type v246;
  uint64_t v247;
  int v248;
  unsigned int v249;
  std::__shared_weak_count *v250;
  std::__shared_weak_count *v251;
  _DWORD *v252;
  char *v253;
  uint64_t v254;
  std::string::size_type v255;
  std::string::size_type *v256;
  __int128 *v257;
  __int128 v258;
  std::string::size_type v259;
  std::__shared_weak_count *v260;
  std::string v261;
  std::__shared_weak_count *v262;
  _QWORD v263[7];
  std::__shared_weak_count *v264;
  int v265;
  int v266;
  _BYTE v267[24];
  __int128 v268;
  _BYTE *v269;
  _BYTE *v270;
  unint64_t v271;
  uint64_t v272;
  std::__shared_weak_count *v273;
  std::string v274;
  std::string v275[64];
  uint64_t v276;

  v249 = a4;
  v247 = a3;
  v276 = *MEMORY[0x1E0C80C00];
  Current = CFAbsoluteTimeGetCurrent();
  v272 = 0;
  v273 = 0;
  _ZN16QuantizerManagerIDF16_Li768EE20lastTrainedQuantizerEv(&v272, *a1);
  v7 = a2[1];
  v245 = *a2;
  v246 = v7;
  v8 = v7 - v245;
  if (v7 == v245)
  {
    v9 = 0;
  }
  else
  {
    if (v8 < 0)
      goto LABEL_325;
    v9 = operator new((unint64_t)v8 >> 1);
    bzero(v9, (unint64_t)v8 >> 1);
  }
  v244 = v8 >> 3;
  LODWORD(v257) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v272 + 24))(v272);
  if (v246 != v245)
  {
    v10 = 0;
    if (v244 <= 1)
      v11 = 1;
    else
      v11 = v244;
    while (1)
    {
      (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(*a2 + 8 * v10) + 16))(v275);
      v12 = v272;
      v13 = *(_OWORD *)&v275[0].__r_.__value_.__l.__data_;
      if (v275[0].__r_.__value_.__l.__size_)
      {
        v14 = (unint64_t *)(v275[0].__r_.__value_.__l.__size_ + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v13 + 1) + 16))(*((_QWORD *)&v13 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v13 + 1));
        }
      }
      if ((_QWORD)v13 != v12)
        break;
      (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(*a2 + 8 * v10) + 24))(v275);
      size = (std::__shared_weak_count *)v275[0].__r_.__value_.__l.__size_;
      *((_DWORD *)v9 + v10) = *(_DWORD *)(v275[0].__r_.__value_.__r.__words[0] + 72);
      if (size)
      {
        p_shared_owners = (unint64_t *)&size->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(*a2 + 8 * v10) + 24))(v275);
      v19 = (std::__shared_weak_count *)v275[0].__r_.__value_.__l.__size_;
      v20 = *(_DWORD *)(v275[0].__r_.__value_.__r.__words[0] + 68);
      if (v275[0].__r_.__value_.__l.__size_)
      {
        v21 = (unint64_t *)(v275[0].__r_.__value_.__l.__size_ + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (v20 != (_DWORD)v257)
      {
        v229 = __si_assert_copy_extra_268();
        v230 = v229;
        v231 = "";
        if (v229)
          v231 = v229;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1967, "vectorIndexes[i]->getPartitions()->nPartitions() == nPartitions", v231);
        goto LABEL_319;
      }
      if (++v10 == v11)
        goto LABEL_27;
    }
    v225 = __si_assert_copy_extra_268();
    v226 = v225;
    v227 = "";
    if (v225)
      v227 = v225;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1965, "vectorIndexes[i]->getQuantizer() == quantizer", v227);
LABEL_300:
    free(v226);
    if (__valid_fs(-1))
      v228 = 2989;
    else
      v228 = 3072;
    *(_DWORD *)v228 = -559038737;
    abort();
  }
LABEL_27:
  v23 = *a1;
  v24 = atomic_load((unsigned __int8 *)(v23 + 72));
  if ((v24 & 1) == 0)
  {
    v240 = __si_assert_copy_extra_268();
    v226 = v240;
    v241 = "";
    if (v240)
      v241 = v240;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 752, "_training.test()", v241);
    goto LABEL_300;
  }
  if (*(_QWORD *)(v23 + 96))
  {
    v25 = *(NSObject **)(v23 + 16);
    v275[0].__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
    v275[0].__r_.__value_.__l.__size_ = 0x40000000;
    v275[0].__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN16QuantizerManagerIDF16_Li768EE23commitTrainingQuantizerEv_block_invoke;
    v275[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&__block_descriptor_tmp_468;
    v275[1].__r_.__value_.__l.__size_ = v23;
    dispatch_sync(v25, v275);
  }
  v26 = *(_QWORD *)(v23 + 80);
  v256 = a2;
  if (v26)
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26) + 1;
  else
    v27 = 1;
  v28 = *(char *)(v23 + 71);
  if (v28 >= 0)
    v29 = *(unsigned __int8 *)(v23 + 71);
  else
    v29 = *(_QWORD *)(v23 + 56);
  v30 = v29 + 1;
  if (v29 + 1 >= 0x7FFFFFFFFFFFFFF8)
LABEL_325:
    abort();
  if (v30 >= 0x17)
  {
    v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v32 = v30 | 7;
    v33 = v32 + 1;
    v31 = (std::string *)operator new(v32 + 1);
    v261.__r_.__value_.__l.__size_ = v29 + 1;
    v261.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
    v261.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  }
  else
  {
    memset(&v261, 0, sizeof(v261));
    v31 = &v261;
    *((_BYTE *)&v261.__r_.__value_.__s + 23) = v29 + 1;
    if (!v29)
      goto LABEL_47;
  }
  if (v28 >= 0)
    v34 = (const void *)(v23 + 48);
  else
    v34 = *(const void **)(v23 + 48);
  memmove(v31, v34, v29);
LABEL_47:
  *(_WORD *)((char *)&v31->__r_.__value_.__l.__data_ + v29) = 46;
  std::to_string(&v274, v27);
  if ((v274.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v274;
  else
    v35 = (std::string *)v274.__r_.__value_.__r.__words[0];
  if ((v274.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(v274.__r_.__value_.__r.__words[2]);
  else
    v36 = v274.__r_.__value_.__l.__size_;
  v37 = std::string::append(&v261, (const std::string::value_type *)v35, v36);
  v38 = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v275[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v275[0].__r_.__value_.__r.__words[2] = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v39 = std::string::append(v275, ".quantizer");
  v40 = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)v267 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  *(_QWORD *)&v267[16] = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v275[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v274.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_55;
LABEL_68:
    operator delete(v274.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v261.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_56;
    goto LABEL_69;
  }
  operator delete(v275[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_68;
LABEL_55:
  if ((SHIBYTE(v261.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_56;
LABEL_69:
  operator delete(v261.__r_.__value_.__l.__data_);
LABEL_56:
  if (v267[23] >= 0)
    v41 = v267;
  else
    v41 = *(const char **)v267;
  FdPtrForFile = QuantizerManager<float,768>::createFdPtrForFile(v23, v41);
  if (FdPtrForFile)
  {
    v43 = (std::string::size_type)FdPtrForFile;
    v44 = operator new();
    v275[0].__r_.__value_.__r.__words[0] = v43;
    v275[0].__r_.__value_.__l.__size_ = 0x1000000;
    v275[0].__r_.__value_.__r.__words[2] = 0x1010000000000;
    v275[1].__r_.__value_.__r.__words[0] = v27;
    _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li768EEC2EN19vi_ondisk_allocator11meta_info_sE(v44, (uint64_t)v275);
    v45 = (std::__shared_weak_count *)operator new();
    v45->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E32030;
    v45->__shared_owners_ = 0;
    v45->__shared_weak_owners_ = 0;
    v45[1].__vftable = (std::__shared_weak_count_vtbl *)v44;
    v46 = *(std::__shared_weak_count **)(v23 + 104);
    *(_QWORD *)(v23 + 96) = v44;
    *(_QWORD *)(v23 + 104) = v45;
    if (v46)
    {
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
      v44 = *(_QWORD *)(v23 + 96);
      v49 = *(std::__shared_weak_count **)(v23 + 104);
      if (!v49)
        goto LABEL_75;
    }
    else
    {
      v49 = v45;
    }
    v52 = (unint64_t *)&v49->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
    goto LABEL_75;
  }
  v50 = *__error();
  v51 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v51, OS_LOG_TYPE_FAULT))
  {
    v223 = v267;
    if (v267[23] < 0)
      v223 = *(_BYTE **)v267;
    v224 = *(_DWORD *)v23;
    LODWORD(v275[0].__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)v275[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"newQuantizer";
    WORD2(v275[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v275[0].__r_.__value_.__r.__words[1] + 6) = 772;
    WORD1(v275[0].__r_.__value_.__r.__words[2]) = 2080;
    *(std::string::size_type *)((char *)&v275[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v223;
    WORD2(v275[1].__r_.__value_.__r.__words[0]) = 1024;
    *(_DWORD *)((char *)v275[1].__r_.__value_.__r.__words + 6) = v224;
    _os_log_fault_impl(&dword_1B8270000, v51, OS_LOG_TYPE_FAULT, "%s:%d: Failed to create %s in parentFd: %i", (uint8_t *)v275, 0x22u);
  }
  v44 = 0;
  v49 = 0;
  *__error() = v50;
LABEL_75:
  if ((v267[23] & 0x80000000) == 0)
  {
    if (v44)
      goto LABEL_77;
LABEL_115:
    v79 = 0;
    goto LABEL_275;
  }
  operator delete(*(void **)v267);
  if (!v44)
    goto LABEL_115;
LABEL_77:
  v255 = v44;
  v243 = v8;
  v252 = v9;
  v268 = 0u;
  *(_OWORD *)&v267[8] = 0u;
  *(_QWORD *)v267 = off_1E6E320B8;
  v269 = 0;
  v270 = 0;
  v271 = 0;
  bzero(v275, 0x400uLL);
  snprintf((char *)v275, 0x400uLL, "A0-%ux%dx%u", v247, 768, 16);
  MEMORY[0x1BCCB03B0](&v267[8], v275);
  v251 = v49;
  v54 = MEMORY[0x1E0C809B0];
  if ((_DWORD)v247)
  {
    memset(v275, 0, 24);
    if (v246 == v245)
    {
      v57 = 0;
      v56 = 0;
    }
    else
    {
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v58 = 0;
      if (v244 <= 1)
        v59 = 1;
      else
        v59 = v244;
      do
      {
        memset(&v261, 0, sizeof(v261));
        (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(*v256 + 8 * v55) + 24))(&v274);
        MaxSizePriorityQueue<AnyPartitionStore::CandidateEntry,std::vector<AnyPartitionStore::CandidateEntry>,AnyPartitionStore::CandidateQueue::Lesser>::allItems((uint64_t **)&v261, *(_BYTE **)(v274.__r_.__value_.__r.__words[0] + 32), *(_BYTE **)(v274.__r_.__value_.__r.__words[0] + 40));
        v60 = (std::__shared_weak_count *)v274.__r_.__value_.__l.__size_;
        if (v274.__r_.__value_.__l.__size_)
        {
          v61 = (unint64_t *)(v274.__r_.__value_.__l.__size_ + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        v63 = (_BYTE *)v261.__r_.__value_.__l.__size_;
        v64 = (_BYTE *)v261.__r_.__value_.__r.__words[0];
        if (v261.__r_.__value_.__l.__size_ != v261.__r_.__value_.__r.__words[0])
        {
          v65 = (_QWORD *)v275[0].__r_.__value_.__l.__size_;
          if (v275[0].__r_.__value_.__l.__size_ >= v275[0].__r_.__value_.__r.__words[2])
          {
            v69 = std::vector<std::vector<AnyPartitionStore::CandidateEntry>>::__push_back_slow_path<std::vector<AnyPartitionStore::CandidateEntry> const&>(&v275[0].__r_.__value_.__l.__data_, v261.__r_.__value_.__l.__data_, v261.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_QWORD *)v275[0].__r_.__value_.__l.__size_ = 0;
            v65[1] = 0;
            v65[2] = 0;
            v66 = v63 - v64;
            if (v63 - v64 < 0)
              goto LABEL_325;
            v67 = (char *)operator new(v63 - v64);
            *v65 = v67;
            v65[1] = v67;
            v68 = &v67[v66];
            v65[2] = &v67[v66];
            memcpy(v67, v64, v66);
            v65[1] = v68;
            v69 = (char *)(v65 + 3);
          }
          v275[0].__r_.__value_.__l.__size_ = (std::string::size_type)v69;
          v71 = *((_QWORD *)v69 - 3);
          v70 = *((_QWORD *)v69 - 2);
          if (v57 >= v58)
          {
            v72 = 0xAAAAAAAAAAAAAAABLL * ((v57 - (char *)v56) >> 3) + 1;
            if (v72 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_325;
            if (0x5555555555555556 * ((v58 - (char *)v56) >> 3) > v72)
              v72 = 0x5555555555555556 * ((v58 - (char *)v56) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v58 - (char *)v56) >> 3) >= 0x555555555555555)
              v73 = 0xAAAAAAAAAAAAAAALL;
            else
              v73 = v72;
            if (v73)
            {
              if (v73 > 0xAAAAAAAAAAAAAAALL)
LABEL_326:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v74 = (char *)operator new(24 * v73);
            }
            else
            {
              v74 = 0;
            }
            v75 = &v74[8 * ((v57 - (char *)v56) >> 3)];
            *(_QWORD *)v75 = v71;
            *((_QWORD *)v75 + 1) = v70;
            *((_QWORD *)v75 + 2) = v55;
            v76 = (uint64_t *)v75;
            if (v57 != (char *)v56)
            {
              v77 = &v74[8 * ((v57 - (char *)v56) >> 3)];
              do
              {
                v76 = (uint64_t *)(v77 - 24);
                v78 = *(_OWORD *)(v57 - 24);
                *((_QWORD *)v77 - 1) = *((_QWORD *)v57 - 1);
                *(_OWORD *)(v77 - 24) = v78;
                v57 -= 24;
                v77 -= 24;
              }
              while (v57 != (char *)v56);
            }
            v58 = &v74[24 * v73];
            if (v56)
              operator delete(v56);
            v57 = v75;
            v56 = v76;
          }
          else
          {
            *(_QWORD *)v57 = v71;
            *((_QWORD *)v57 + 1) = v70;
            *((_QWORD *)v57 + 2) = v55;
          }
          v57 += 24;
          v63 = (_BYTE *)v261.__r_.__value_.__r.__words[0];
        }
        if (v63)
          operator delete(v63);
        ++v55;
      }
      while (v55 != v59);
    }
    v80 = v57 - (char *)v56;
    if (v57 - (char *)v56 >= 25 && v80 >= 0x30)
    {
      v216 = (v80 / 0x18 - 2) >> 1;
      v217 = v216;
      do
      {
        if (v216 >= v217)
        {
          v218 = &v56[3 * v217];
          v219 = *(_OWORD *)v218;
          v220 = v218[2];
          v221 = v217;
          do
          {
            v222 = v218;
            v221 = (2 * v221) | 1;
            v218 = &v56[3 * v221];
            *v222 = *v218;
            *(_OWORD *)(v222 + 1) = *(_OWORD *)(v218 + 1);
          }
          while (v216 >= v221);
          *(_OWORD *)v218 = v219;
          v218[2] = v220;
        }
        v97 = v217-- <= 0;
      }
      while (!v97);
    }
    for (; v57 != (char *)v56; v80 = v57 - (char *)v56)
    {
      if (-1431655765 * ((unint64_t)(v270 - v269) >> 9) >= v247)
        break;
      v254 = v80;
      v83 = *(_QWORD *)(*v256 + 8 * v56[2]);
      v84 = (const void *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, *(unsigned int *)*v56);
      v85 = v270;
      if ((unint64_t)v270 >= v271)
      {
        v87 = v269;
        v88 = 0xAAAAAAAAAAAAAAABLL * ((v270 - v269) >> 9) + 1;
        if (v88 > 0x2AAAAAAAAAAAAALL)
          goto LABEL_325;
        if (0x5555555555555556 * ((uint64_t)(v271 - (_QWORD)v269) >> 9) > v88)
          v88 = 0x5555555555555556 * ((uint64_t)(v271 - (_QWORD)v269) >> 9);
        v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v271 - (_QWORD)v269) >> 9) >= 0x15555555555555
            ? 0x2AAAAAAAAAAAAALL
            : v88;
        if (v89)
        {
          if (v89 > 0x2AAAAAAAAAAAAALL)
            goto LABEL_326;
          v90 = (char *)operator new(1536 * v89);
        }
        else
        {
          v90 = 0;
        }
        v253 = v90;
        v91 = &v90[512 * ((v85 - v87) >> 9)];
        memcpy(v91, v84, 0x600uLL);
        v92 = v91;
        if (v85 != v87)
        {
          do
          {
            v85 -= 1536;
            v92 -= 1536;
            memcpy(v92, v85, 0x600uLL);
          }
          while (v85 != v87);
          v85 = v87;
        }
        v86 = v91 + 1536;
        v269 = v92;
        v270 = v86;
        v271 = (unint64_t)&v253[1536 * v89];
        if (v85)
          operator delete(v85);
      }
      else
      {
        memcpy(v270, v84, 0x600uLL);
        v86 = v85 + 1536;
      }
      v270 = v86;
      v93 = v56[1];
      v94 = *v56 + 8;
      *v56 = v94;
      if (v94 == v93)
      {
        if (v254 >= 25)
        {
          v103 = 0;
          v104 = v56[2];
          v105 = (v254 / 0x18uLL - 2) >> 1;
          v106 = v56;
          do
          {
            v107 = v106;
            v108 = &v106[3 * v103];
            v109 = v108[3];
            v106 = v108 + 3;
            v103 = (2 * v103) | 1;
            *v107 = v109;
            *(_OWORD *)(v107 + 1) = *(_OWORD *)(v106 + 1);
          }
          while (v103 <= v105);
          if (v106 == (uint64_t *)(v57 - 24))
          {
            v81 = (char *)(v106 + 1);
            v82 = (char *)(v106 + 2);
          }
          else
          {
            *v106 = *((_QWORD *)v57 - 3);
            v81 = v57 - 16;
            v82 = v57 - 8;
            *(_OWORD *)(v106 + 1) = *((_OWORD *)v57 - 1);
            v106 = (uint64_t *)(v57 - 24);
          }
          *v106 = v94;
          *(_QWORD *)v81 = v93;
          *(_QWORD *)v82 = v104;
        }
        v57 -= 24;
      }
      else if (v254 >= 48)
      {
        v95 = (v254 / 0x18uLL - 2) >> 1;
        v96 = v95;
        do
        {
          if (v95 >= v96)
          {
            v98 = &v56[3 * v96];
            v99 = *(_OWORD *)v98;
            v100 = v98[2];
            v101 = v96;
            do
            {
              v102 = v98;
              v101 = (2 * v101) | 1;
              v98 = &v56[3 * v101];
              *v102 = *v98;
              *(_OWORD *)(v102 + 1) = *(_OWORD *)(v98 + 1);
            }
            while (v95 >= v101);
            *(_OWORD *)v98 = v99;
            v98[2] = v100;
          }
          v97 = v96-- <= 0;
        }
        while (!v97);
      }
    }
    v110 = (void *)v275[0].__r_.__value_.__r.__words[0];
    v54 = MEMORY[0x1E0C809B0];
    if (v275[0].__r_.__value_.__r.__words[0])
    {
      v111 = v275[0].__r_.__value_.__l.__size_;
      if (v275[0].__r_.__value_.__l.__size_ != v275[0].__r_.__value_.__r.__words[0])
      {
        v112 = v275[0].__r_.__value_.__l.__size_;
        do
        {
          v114 = *(void **)(v112 - 24);
          v112 -= 24;
          v113 = v114;
          if (v114)
          {
            *(_QWORD *)(v111 - 16) = v113;
            operator delete(v113);
          }
          v111 = v112;
        }
        while ((void *)v112 != v110);
      }
      operator delete(v110);
    }
    if (v56)
      operator delete(v56);
  }
  LODWORD(v253) = -1431655765 * ((unint64_t)(v270 - v269) >> 9);
  v115 = (_DWORD)v257 - 1431655765 * ((unint64_t)(v270 - v269) >> 9);
  v116 = (void *)operator new[]();
  v117 = (uint64_t)v116;
  if (v115)
    bzero(v116, 3076 * ((3076 * (unint64_t)v115 - 3076) / 0xC04) + 3076);
  v118 = (std::__shared_weak_count *)operator new();
  v118->__shared_owners_ = 0;
  v120 = (unint64_t *)&v118->__shared_owners_;
  v118->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E32118;
  v118->__shared_weak_owners_ = 0;
  v118[1].__vftable = (std::__shared_weak_count_vtbl *)v117;
  v250 = v118;
  v254 = v117;
  v121 = v255;
  if (v246 != v245)
  {
    v122 = 0;
    if (v244 <= 1)
      v123 = 1;
    else
      v123 = v244;
    do
    {
      v124 = *(_QWORD *)(*v256 + 8 * v122);
      *(_OWORD *)&v275[0].__r_.__value_.__l.__data_ = 0uLL;
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v124 + 24))(v275, v124);
      v125 = v275[0].__r_.__value_.__r.__words[0];
      v263[0] = v54;
      v263[1] = 1174405120;
      v263[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li768EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li768EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj_block_invoke;
      v263[3] = &__block_descriptor_tmp_464;
      v263[4] = v124;
      v263[5] = v267;
      v265 = (int)v253;
      v266 = (int)v257;
      v263[6] = v254;
      v264 = v250;
      do
        v126 = __ldxr(v120);
      while (__stxr(v126 + 1, v120));
      (*(void (**)(std::string::size_type, _QWORD *))(*(_QWORD *)v125 + 64))(v125, v263);
      v127 = v264;
      if (!v264)
        goto LABEL_178;
      v128 = (unint64_t *)&v264->__shared_owners_;
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
        v130 = (std::__shared_weak_count *)v275[0].__r_.__value_.__l.__size_;
        if (v275[0].__r_.__value_.__l.__size_)
        {
LABEL_179:
          v131 = (unint64_t *)&v130->__shared_owners_;
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          if (!v132)
          {
            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
            std::__shared_weak_count::__release_weak(v130);
          }
        }
      }
      else
      {
LABEL_178:
        v130 = (std::__shared_weak_count *)v275[0].__r_.__value_.__l.__size_;
        if (v275[0].__r_.__value_.__l.__size_)
          goto LABEL_179;
      }
      ++v122;
    }
    while (v122 != v123);
  }
  if ((_DWORD)v257 != 1431655765 * ((unint64_t)(v270 - v269) >> 9))
  {
    v141 = 0;
    v133 = 0;
    v142 = v254;
    v143 = (_OWORD *)(v254 + 32);
    *(_QWORD *)&v119 = 67109376;
    v242 = v119;
    while (1)
    {
      v144 = v142 + 3076 * v141;
      v145 = *(float *)(v144 + 3072);
      if (v145 >= v249)
        break;
      ++v133;
      if (dword_1EF19FCCC >= 5)
      {
        v161 = v133;
        v162 = *__error();
        v163 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
        {
          v164 = *(float *)(v144 + 3072);
          v275[0].__r_.__value_.__r.__words[0] = __PAIR64__(v141, v242);
          LOWORD(v275[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v275[0].__r_.__value_.__r.__words[1] + 2) = v164;
          _os_log_impl(&dword_1B8270000, v163, OS_LOG_TYPE_DEFAULT, "remove outlier newCentroid[%u] with member: %u", (uint8_t *)v275, 0xEu);
        }
        *__error() = v162;
        v133 = v161;
LABEL_222:
        v142 = v254;
      }
      ++v141;
      v143 = (_OWORD *)((char *)v143 + 3076);
      if (v141 >= v257 - 1431655765 * ((unint64_t)(v270 - v269) >> 9))
        goto LABEL_187;
    }
    if (v145 <= 0.0)
    {
      v234 = __si_assert_copy_extra_268();
      v230 = v234;
      v235 = "";
      if (v234)
        v235 = v234;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 152, "_count > 0.0f", v235);
      goto LABEL_319;
    }
    v146 = 0;
    v147 = (float32x4_t *)v143;
    do
    {
      v149 = v147[-2];
      v148 = v147[-1];
      v151 = *v147;
      v150 = v147[1];
      v147 += 4;
      v152 = (float16x8_t *)((char *)v275 + v146);
      *v152 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v149), v148);
      v152[1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v151), v150);
      v146 += 32;
    }
    while (v146 != 1536);
    if (*(_BYTE *)(v121 + 56))
    {
      v236 = __si_assert_copy_extra_268();
      v230 = v236;
      v237 = "";
      if (v236)
        v237 = v236;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 522, "!readOnly", v237);
      goto LABEL_319;
    }
    v248 = v133;
    v153 = *(_QWORD **)(v121 + 40);
    v154 = v153[2];
    v155 = v153[7];
    v156 = v155 + v154;
    if (v155 + v154 >= v153[6])
    {
      if (!_storage_array_Expand((uint64_t)(v153 + 1)))
      {
        v157 = 0;
        if (v154 <= 0x5FF)
        {
LABEL_203:
          v158 = v153[2];
          if (v158 <= 0x5FF)
          {
            LODWORD(v159) = 1536;
            do
            {
              v160 = v153[7] + v158;
              if (v160 >= v153[6])
              {
                if (!_storage_array_Expand((uint64_t)(v153 + 1)))
                  goto LABEL_207;
                v160 = v153[7] + v158;
              }
              v153[7] = v160;
LABEL_207:
              v158 = v153[2];
              v159 = (v159 - v158);
            }
            while (v158 < v159);
          }
        }
LABEL_217:
        v165 = (uint64_t)(v153 + 524);
        bit_vector_set_9027(v165, (v157 >> 20));
        v166 = (v157 + 1536) >> 20;
        if (v166 > (v157 >> 20))
        {
          v167 = (v157 >> 20) + 1;
          do
          {
            v168 = v167;
            bit_vector_set_9027(v165, v167++);
          }
          while (v166 > v168);
        }
        v121 = v255;
        if (v157 != *(_DWORD *)(v255 + 48))
        {
          v238 = __si_assert_copy_extra_268();
          v230 = v238;
          v239 = "";
          if (v238)
            v239 = v238;
          __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 524, "offset == nCentroids", v239);
          goto LABEL_319;
        }
        v169 = (void *)_windowsResolvePtr(*(_QWORD *)(v255 + 40) + 40, *(_QWORD *)(*(_QWORD *)(v255 + 40) + 24) + *(_QWORD *)(*(_QWORD *)(v255 + 40) + 16) * v157, 0x600uLL);
        memcpy(v169, v275, 0x600uLL);
        ++*(_DWORD *)(v255 + 48);
        *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v121 + 40) + 40, 0x400uLL, *(_QWORD *)(*(_QWORD *)(v121 + 40) + 16))+ 4) = *(_DWORD *)(v121 + 48);
        v133 = v248;
        goto LABEL_222;
      }
      v155 = v153[7];
      v156 = v155 + v154;
    }
    v153[7] = v156;
    v157 = (v155 - v153[3]) / v154;
    if (v154 <= 0x5FF)
      goto LABEL_203;
    goto LABEL_217;
  }
  v133 = 0;
LABEL_187:
  v248 = v133;
  v134 = v272;
  v135 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v272 + 24))(v272);
  v136 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v121 + 24))(v121);
  if (v135 == (_DWORD)v136)
  {
    v136 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v134 + 24))(v134);
    v137 = v256;
    v49 = v251;
    if ((_DWORD)v136)
    {
      v138 = 0;
      while (1)
      {
        v139 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 64))(v134, v138);
        v140 = (const void *)(*(uint64_t (**)(std::string::size_type, uint64_t))(*(_QWORD *)v255 + 64))(v255, v138);
        v136 = memcmp(v139, v140, 0x600uLL);
        v79 = (_DWORD)v136 != 0;
        if ((_DWORD)v136)
          break;
        v138 = (v138 + 1);
        v136 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v134 + 24))(v134);
        if (v138 >= v136)
          goto LABEL_192;
      }
    }
    else
    {
LABEL_192:
      v79 = 0;
    }
  }
  else
  {
    v79 = 1;
    v137 = v256;
    v49 = v251;
  }
  v257 = &v242;
  v170 = 16 * v244;
  MEMORY[0x1E0C80A78](v136);
  v171 = (char *)&v242 - v170;
  bzero((char *)&v242 - v170, 2 * v243);
  if (v246 != v245)
    bzero((char *)&v242 - v170, v170);
  v172 = *v137;
  v261.__r_.__value_.__r.__words[0] = (std::string::size_type)&v242 - v170;
  v261.__r_.__value_.__l.__size_ = v172;
  v261.__r_.__value_.__r.__words[2] = v255;
  v262 = v49;
  if (v49)
  {
    v173 = (unint64_t *)&v49->__shared_owners_;
    do
      v174 = __ldxr(v173);
    while (__stxr(v174 + 1, v173));
  }
  dispatch_apply_f(v244, 0, &v261, (void (__cdecl *)(void *, size_t))_ZZN22IVFVectorIndexTemplateIDF16_Li768EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li768EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjjENUlPvmE_8__invokeESC_m);
  v175 = *v137;
  if (v137[1] != *v137)
  {
    v176 = 0;
    v177 = (unint64_t *)&v49->__shared_owners_;
    while (1)
    {
      v178 = *(_QWORD *)(v175 + 8 * v176);
      v259 = v255;
      v260 = v49;
      if (v49)
      {
        do
          v179 = __ldxr(v177);
        while (__stxr(v179 + 1, v177));
      }
      v180 = *(_OWORD *)&v171[16 * v176];
      v258 = v180;
      if (*((_QWORD *)&v180 + 1))
      {
        v181 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
        do
          v182 = __ldxr(v181);
        while (__stxr(v182 + 1, v181));
      }
      (*(void (**)(uint64_t, std::string::size_type *, __int128 *))(*(_QWORD *)v178 + 48))(v178, &v259, &v258);
      v183 = (std::__shared_weak_count *)*((_QWORD *)&v258 + 1);
      if (*((_QWORD *)&v258 + 1))
      {
        v184 = (unint64_t *)(*((_QWORD *)&v258 + 1) + 8);
        do
          v185 = __ldaxr(v184);
        while (__stlxr(v185 - 1, v184));
        if (!v185)
        {
          ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
          std::__shared_weak_count::__release_weak(v183);
        }
      }
      v186 = v137;
      v187 = v260;
      if (v260)
      {
        v188 = (unint64_t *)&v260->__shared_owners_;
        do
          v189 = __ldaxr(v188);
        while (__stlxr(v189 - 1, v188));
        if (!v189)
        {
          ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
          std::__shared_weak_count::__release_weak(v187);
        }
      }
      v190 = v252[v176];
      (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(*v186 + 8 * v176) + 24))(v275);
      v191 = (std::__shared_weak_count *)v275[0].__r_.__value_.__l.__size_;
      v192 = *(_DWORD *)(v275[0].__r_.__value_.__r.__words[0] + 72);
      if (v275[0].__r_.__value_.__l.__size_)
      {
        v193 = (unint64_t *)(v275[0].__r_.__value_.__l.__size_ + 8);
        do
          v194 = __ldaxr(v193);
        while (__stlxr(v194 - 1, v193));
        if (!v194)
        {
          ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
          std::__shared_weak_count::__release_weak(v191);
        }
      }
      if (v190 != v192)
        break;
      ++v176;
      v137 = v186;
      v175 = *v186;
      v195 = v186[1] - *v186;
      v49 = v251;
      if (v176 >= v195 >> 3)
        goto LABEL_253;
    }
    v232 = __si_assert_copy_extra_268();
    v230 = v232;
    v233 = "";
    if (v232)
      v233 = v232;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2056, "vectorCounts[i] == vectorIndexes[i]->getPartitions()->nVectors()", v233);
LABEL_319:
    free(v230);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
LABEL_253:
  v196 = *__error();
  v197 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v197, OS_LOG_TYPE_DEFAULT))
  {
    v198 = v248;
    v199 = (_DWORD)v253 - v248;
    v200 = CFAbsoluteTimeGetCurrent();
    LODWORD(v275[0].__r_.__value_.__l.__data_) = 67110144;
    HIDWORD(v275[0].__r_.__value_.__r.__words[0]) = v247;
    LOWORD(v275[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v275[0].__r_.__value_.__r.__words[1] + 2) = v199;
    HIWORD(v275[0].__r_.__value_.__r.__words[1]) = 1024;
    LODWORD(v275[0].__r_.__value_.__r.__words[2]) = v198;
    WORD2(v275[0].__r_.__value_.__r.__words[2]) = 1024;
    *(_DWORD *)((char *)&v275[0].__r_.__value_.__r.__words[2] + 6) = v79;
    *(_WORD *)&v275[1].__r_.__value_.__s.__data_[2] = 2048;
    *(double *)((char *)v275[1].__r_.__value_.__r.__words + 4) = v200 - Current;
    _os_log_impl(&dword_1B8270000, v197, OS_LOG_TYPE_DEFAULT, "training quantizer try addCentroids=%u added=%d removed=%u changed=%d duration: %fs", (uint8_t *)v275, 0x24u);
  }
  *__error() = v196;
  v201 = v262;
  if (v262)
  {
    v202 = (unint64_t *)&v262->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  if (v246 != v245)
  {
    v204 = &v171[16 * v244];
    do
    {
      v205 = (std::__shared_weak_count *)*((_QWORD *)v204 - 1);
      if (v205)
      {
        v206 = (unint64_t *)&v205->__shared_owners_;
        do
          v207 = __ldaxr(v206);
        while (__stlxr(v207 - 1, v206));
        if (!v207)
        {
          ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
          std::__shared_weak_count::__release_weak(v205);
        }
      }
      v204 -= 16;
    }
    while (v204 != v171);
  }
  do
    v208 = __ldaxr(v120);
  while (__stlxr(v208 - 1, v120));
  if (!v208)
  {
    v209 = v250;
    ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
    std::__shared_weak_count::__release_weak(v209);
  }
  *(_QWORD *)v267 = off_1E6E320B8;
  v9 = v252;
  if (v269)
  {
    v270 = v269;
    operator delete(v269);
  }
  *(_QWORD *)v267 = off_1E6E30F58;
  if (SBYTE7(v268) < 0)
    operator delete(*(void **)&v267[8]);
LABEL_275:
  if (v49)
  {
    v210 = (unint64_t *)&v49->__shared_owners_;
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    if (!v211)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v9)
    operator delete(v9);
  v212 = v273;
  if (v273)
  {
    v213 = (unint64_t *)&v273->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  return v79;
}

_QWORD *_ZN16QuantizerManagerIDF16_Li768EE20lastTrainedQuantizerEv(_QWORD *result, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;

  v2 = atomic_load((unsigned __int8 *)(a2 + 72));
  if ((v2 & 1) == 0)
  {
    v9 = __si_assert_copy_extra_268();
    v10 = v9;
    v11 = "";
    if (v9)
      v11 = v9;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 730, "_training.test()", v11);
    free(v10);
    if (__valid_fs(-1))
      v12 = 2989;
    else
      v12 = 3072;
    *(_DWORD *)v12 = -559038737;
    abort();
  }
  v3 = *(_QWORD *)(a2 + 96);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 104);
    *result = v3;
    result[1] = v4;
    if (!v4)
      return result;
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(a2 + 80);
  if (v5)
  {
    v4 = *(_QWORD *)(a2 + 88);
    *result = v5;
    result[1] = v4;
    if (!v4)
      return result;
    goto LABEL_12;
  }
  v6 = atomic_load((unsigned __int8 *)&_ZGVZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq);
  if ((v6 & 1) == 0)
  {
    v14 = result;
    v15 = __cxa_guard_acquire(&_ZGVZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq);
    result = v14;
    if (v15)
    {
      __cxa_atexit((void (*)(void *))_ZNSt3__110shared_ptrI9QuantizerIDF16_Li768EEED1B8nn180100Ev, &_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq, &dword_1B8270000);
      __cxa_guard_release(&_ZGVZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq);
      result = v14;
    }
  }
  if (_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE9onceToken != -1)
  {
    v13 = result;
    dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE9onceToken, &__block_literal_global_401);
    result = v13;
  }
  v4 = qword_1EF1AE7D8;
  *result = _ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq;
  result[1] = v4;
  if (v4)
  {
LABEL_12:
    v7 = (unint64_t *)(v4 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void ___ZN16QuantizerManagerIDF16_Li768EE23commitTrainingQuantizerEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  int v10;
  std::string *p_p;
  std::string::size_type size;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  int64_t v16;
  uint64_t v17;
  void **v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  uint64_t *v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  void **v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  size_t prime;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  std::__shared_weak_count *v53;
  int v54;
  size_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  const void *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  void **v69;
  uint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v77;
  int *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::string __p;
  std::string __dst;
  std::string v84;
  void *v85[2];
  int64_t v86;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 80);
  if (!v2)
    goto LABEL_109;
  v3 = *(char *)(v1 + 71);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(v1 + 71);
  else
    v4 = *(_QWORD *)(v1 + 56);
  v5 = v4 + 1;
  if (v4 + 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_149:
    abort();
  if (v5 >= 0x17)
  {
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v7 = v5 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_16;
  }
  if (v3 >= 0)
    v9 = (const void *)(v1 + 48);
  else
    v9 = *(const void **)(v1 + 48);
  memmove(p_dst, v9, v4);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  std::to_string(&__p, v10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v13 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v84.__r_.__value_.__r.__words[2] = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v84, ".quantizer");
  v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)v85 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v86 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
LABEL_36:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_37;
  }
  operator delete(v84.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_36;
LABEL_24:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_25;
LABEL_37:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_25:
  v17 = *(_QWORD *)(v1 + 80);
  if (v86 >= 0)
    v18 = v85;
  else
    v18 = (void **)v85[0];
  fd_rename(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 40), (const char *)v18);
  MEMORY[0x1BCCB03B0](v17 + 8, v18);
  atomic_store(1u, (unsigned __int8 *)(*(_QWORD *)(v1 + 80) + 57));
  v20 = *(_QWORD *)(v1 + 80);
  v19 = *(std::__shared_weak_count **)(v1 + 88);
  v21 = v20;
  if (v19)
  {
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v23 = __ldxr(p_shared_weak_owners);
    while (__stxr(v23 + 1, p_shared_weak_owners));
    v21 = *(_QWORD *)(v1 + 80);
  }
  v24 = (uint64_t *)(v1 + 112);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
  v26 = v25;
  v27 = v25;
  v28 = *(_QWORD *)(v1 + 120);
  if (v28)
  {
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      v30 = v25;
      if (v28 <= v25)
        v30 = v25 % v28;
    }
    else
    {
      v30 = (v28 - 1) & v25;
    }
    v31 = *(void ***)(*v24 + 8 * v30);
    if (v31)
    {
      v32 = *v31;
      if (*v31)
      {
        if (v29.u32[0] < 2uLL)
        {
          while (1)
          {
            v34 = *((_QWORD *)v32 + 1);
            if (v34 == v25)
            {
              if (*((_DWORD *)v32 + 4) == v25)
                goto LABEL_94;
            }
            else if ((v34 & (v28 - 1)) != v30)
            {
              goto LABEL_56;
            }
            v32 = *(void **)v32;
            if (!v32)
              goto LABEL_56;
          }
        }
        do
        {
          v33 = *((_QWORD *)v32 + 1);
          if (v33 == v25)
          {
            if (*((_DWORD *)v32 + 4) == v25)
              goto LABEL_94;
          }
          else
          {
            if (v33 >= v28)
              v33 %= v28;
            if (v33 != v30)
              break;
          }
          v32 = *(void **)v32;
        }
        while (v32);
      }
    }
  }
  else
  {
    v30 = 0;
  }
LABEL_56:
  v32 = operator new(0x28uLL);
  *(_QWORD *)v32 = 0;
  *((_QWORD *)v32 + 1) = v27;
  *((_DWORD *)v32 + 4) = v26;
  *((_QWORD *)v32 + 3) = 0;
  *((_QWORD *)v32 + 4) = 0;
  v35 = (float)(unint64_t)(*(_QWORD *)(v1 + 136) + 1);
  v36 = *(float *)(v1 + 144);
  if (!v28 || (float)(v36 * (float)v28) < v35)
  {
    v37 = 1;
    if (v28 >= 3)
      v37 = (v28 & (v28 - 1)) != 0;
    v38 = v37 | (2 * v28);
    v39 = vcvtps_u32_f32(v35 / v36);
    if (v38 <= v39)
      prime = v39;
    else
      prime = v38;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v28 = *(_QWORD *)(v1 + 120);
    }
    if (prime > v28)
      goto LABEL_78;
    if (prime < v28)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(v1 + 136) / *(float *)(v1 + 144));
      if (v28 < 3 || (v42 = (uint8x8_t)vcnt_s8((int8x8_t)v28), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < v28)
LABEL_78:
        std::__hash_table<std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,std::__unordered_map_hasher<SIUnicodeString,std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,HashFunction,HashEqual,true>,std::__unordered_map_equal<SIUnicodeString,std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,HashEqual,HashFunction,true>,std::allocator<std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>>>::__do_rehash<true>(v1 + 112, prime);
    }
    v28 = *(_QWORD *)(v1 + 120);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v28 <= v27)
        v30 = v27 % v28;
      else
        v30 = v27;
    }
    else
    {
      v30 = (v28 - 1) & v27;
    }
  }
  v44 = *v24;
  v45 = *(_QWORD **)(*v24 + 8 * v30);
  if (v45)
  {
    *(_QWORD *)v32 = *v45;
LABEL_92:
    *v45 = v32;
    goto LABEL_93;
  }
  *(_QWORD *)v32 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v1 + 128) = v32;
  *(_QWORD *)(v44 + 8 * v30) = v1 + 128;
  if (*(_QWORD *)v32)
  {
    v46 = *(_QWORD *)(*(_QWORD *)v32 + 8);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v46 >= v28)
        v46 %= v28;
    }
    else
    {
      v46 &= v28 - 1;
    }
    v45 = (_QWORD *)(*v24 + 8 * v46);
    goto LABEL_92;
  }
LABEL_93:
  ++*(_QWORD *)(v1 + 136);
LABEL_94:
  if (v19)
  {
    v47 = std::__shared_weak_count::lock(v19);
    v48 = v47;
    if (v47)
    {
      v49 = (unint64_t *)&v47->__shared_weak_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
      std::__shared_weak_count::__release_weak(v19);
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v52 = __ldaxr(p_shared_owners);
      while (__stlxr(v52 - 1, p_shared_owners));
      if (v52)
        goto LABEL_105;
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      v19 = v48;
    }
    else
    {
      v20 = 0;
    }
    std::__shared_weak_count::__release_weak(v19);
  }
  else
  {
    v20 = 0;
    v48 = 0;
  }
LABEL_105:
  v53 = (std::__shared_weak_count *)*((_QWORD *)v32 + 4);
  *((_QWORD *)v32 + 3) = v20;
  *((_QWORD *)v32 + 4) = v48;
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  if (SHIBYTE(v86) < 0)
    operator delete(v85[0]);
LABEL_109:
  v54 = *(char *)(v1 + 71);
  if (v54 >= 0)
    v55 = *(unsigned __int8 *)(v1 + 71);
  else
    v55 = *(_QWORD *)(v1 + 56);
  v56 = v55 + 10;
  if (v55 + 10 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_149;
  if (v56 >= 0x17)
  {
    v58 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17)
      v58 = v56 | 7;
    v59 = v58 + 1;
    v57 = operator new(v58 + 1);
    v85[1] = (void *)(v55 + 10);
    v86 = v59 | 0x8000000000000000;
    v85[0] = v57;
  }
  else
  {
    v85[1] = 0;
    v86 = 0;
    v85[0] = 0;
    v57 = v85;
    HIBYTE(v86) = v55 + 10;
    if (!v55)
      goto LABEL_123;
  }
  if (v54 >= 0)
    v60 = (const void *)(v1 + 48);
  else
    v60 = *(const void **)(v1 + 48);
  memmove(v57, v60, v55);
LABEL_123:
  strcpy((char *)v57 + v55, ".quantizer");
  v62 = *(_QWORD *)(v1 + 96);
  v61 = *(_QWORD *)(v1 + 104);
  if (v61)
  {
    v63 = (unint64_t *)(v61 + 8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  v65 = *(std::__shared_weak_count **)(v1 + 88);
  *(_QWORD *)(v1 + 80) = v62;
  *(_QWORD *)(v1 + 88) = v61;
  if (v65)
  {
    v66 = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = *(_QWORD *)(v1 + 80);
  if (v86 >= 0)
    v69 = v85;
  else
    v69 = (void **)v85[0];
  fd_rename(*(_QWORD *)(*(_QWORD *)(v68 + 40) + 40), (const char *)v69);
  MEMORY[0x1BCCB03B0](v68 + 8, v69);
  v70 = *(_QWORD *)(v1 + 80);
  v71 = *(unint64_t **)(v70 + 40);
  *v71 = 0;
  vi_onefixedsize_disk_allocator::storeHeader(v71);
  storage_array_SyncPages(*(_QWORD *)(v70 + 40) + 8, *(_QWORD *)(v70 + 40) + 4192);
  storage_array_Truncate((uint64_t *)(*(_QWORD *)(v70 + 40) + 8));
  v72 = *(_QWORD *)(v70 + 40);
  fd_make_readonly(*(_QWORD *)(v72 + 40));
  v73 = *(_QWORD *)(v72 + 40);
  if (v73)
  {
    do
    {
      v74 = fchmodat(*(_DWORD *)(v73 + 44), *(const char **)(v73 + 72), 0x100u, 2048);
      v75 = g_prot_error_callback;
      if (v74 != -1 || g_prot_error_callback == 0)
        break;
      v77 = *(unsigned int *)(v73 + 40);
      v78 = __error();
    }
    while (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v75 + 16))(v75, v77, *v78, 19) & 1) != 0);
  }
  *(_BYTE *)(v70 + 56) = 1;
  v79 = *(std::__shared_weak_count **)(v1 + 104);
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  if (!v79)
    goto LABEL_144;
  v80 = (unint64_t *)&v79->__shared_owners_;
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v81 - 1, v80));
  if (v81)
  {
LABEL_144:
    if ((SHIBYTE(v86) & 0x80000000) == 0)
      return;
    goto LABEL_145;
  }
  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
  std::__shared_weak_count::__release_weak(v79);
  if (SHIBYTE(v86) < 0)
LABEL_145:
    operator delete(v85[0]);
}

float ___ZN22IVFVectorIndexTemplateIDF16_Li768EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li768EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj_block_invoke(uint64_t a1, unsigned int a2, float *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float16x4_t *v9;
  float16x8_t v10;
  float32x4_t v11;
  float32x4_t v12;
  void **v13;
  float *v14;
  float *v15;
  float v16;
  float result;
  void *__p[384];

  v6 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32), *(unsigned int *)a3);
  if (*(_DWORD *)(a1 + 64))
  {
    memset(__p, 0, 24);
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 72))(__p, *(_QWORD *)(a1 + 40), v6, 1);
    if (*((float *)__p[0] + 1) < a3[1])
      a2 = *(_DWORD *)(a1 + 68) + *(_DWORD *)__p[0];
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v7 = *(_QWORD *)(a1 + 48);
  bzero(__p, 0xC00uLL);
  v8 = 0;
  v9 = (float16x4_t *)(v6 + 16);
  do
  {
    v10 = *(float16x8_t *)v9[-2].i8;
    v11 = vcvtq_f32_f16(*v9);
    v12 = vcvt_hight_f32_f16(*(float16x8_t *)v9->i8);
    v13 = &__p[v8];
    *(float32x4_t *)v13 = vcvtq_f32_f16(*(float16x4_t *)v10.i8);
    *((float32x4_t *)v13 + 1) = vcvt_hight_f32_f16(v10);
    *((float32x4_t *)v13 + 2) = v11;
    *((float32x4_t *)v13 + 3) = v12;
    v8 += 8;
    v9 += 4;
  }
  while (v8 != 384);
  v14 = (float *)(v7 + 3076 * a2);
  v15 = v14 + 768;
  v16 = v14[768];
  if (v16 == 0.0)
  {
    memcpy(v14, __p, 0xC00uLL);
  }
  else
  {
    vDSP_vavlin((const float *)__p, 1, v14 + 768, v14, 1, 0x300uLL);
    v16 = *v15;
  }
  result = v16 + 1.0;
  *v15 = v16 + 1.0;
  return result;
}

void _ZZN22IVFVectorIndexTemplateIDF16_Li768EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li768EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjjENUlPvmE_8__invokeESC_m(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v4 = a1[2];
  v5 = *(_QWORD *)(a1[1] + 8 * a2);
  v6 = (std::__shared_weak_count *)a1[3];
  v23 = v4;
  v24 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v5 + 40))(&v25, v5, &v23);
  v9 = (_QWORD *)(*a1 + 16 * a2);
  v11 = v25;
  v10 = v26;
  if (v26)
  {
    v12 = (unint64_t *)&v26->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = (std::__shared_weak_count *)v9[1];
  *v9 = v11;
  v9[1] = v10;
  if (!v14)
    goto LABEL_11;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = v26;
    if (!v26)
      goto LABEL_17;
  }
  else
  {
LABEL_11:
    v17 = v26;
    if (!v26)
      goto LABEL_17;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_17:
  v20 = v24;
  if (v24)
  {
    v21 = (unint64_t *)&v24->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

uint64_t _ZN20ArrayVectorQuantizerIDF16_Li768EED1Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E6E320B8;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void _ZN20ArrayVectorQuantizerIDF16_Li768EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E6E320B8;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1BCCB06A4);
}

uint64_t _ZNK20ArrayVectorQuantizerIDF16_Li768EE5countEv(uint64_t a1)
{
  return -1431655765 * ((*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 9);
}

uint64_t _ZNK20ArrayVectorQuantizerIDF16_Li768EE11getCentroidEj(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  char *v4;
  char *v5;
  const char *v6;

  v2 = *(_QWORD *)(a1 + 40);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 48) - v2) >> 9) <= a2)
  {
    v4 = __si_assert_copy_extra_268();
    v5 = v4;
    v6 = "";
    if (v4)
      v6 = v4;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 443, "i < centroids.size()", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return v2 + 1536 * a2;
}

uint64_t ___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE7compactIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_P12uint32_map_tP11TermIdStore18CICompactCallbacksPVi_block_invoke(uint64_t a1, unsigned int *a2, _BYTE *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  char *v13;
  char *v14;
  const char *v15;

  v6 = (uint64_t *)*((_QWORD *)a2 + 3);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *v6;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    if ((_DWORD)v8)
    {
      if (*(_DWORD *)(v7 + 4408) <= v8)
      {
        v13 = __si_assert_copy_extra(0);
        v14 = v13;
        v15 = "";
        if (v13)
          v15 = v13;
        __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 1530, "position && position < inMap->count", v15);
        free(v14);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      v10 = *(_QWORD *)(a1 + 48);
      v11 = storageResolvePtr(v7, 4 * *v6, 4uLL, 1);
      v8 = *(_QWORD *)storageResolvePtr(v10, 8 * *(unsigned int *)v11, 8uLL, 1);
    }
    else
    {
      v8 = 0;
    }
  }
  _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16insertForCompactEjPK10CIVector_sIDF16_Li768EEyjf(*(_QWORD *)(a1 + 56), a2[2], *((void **)a2 + 2), v8, *a2, *((float *)a2 + 1));
  result = 1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) && !**(_DWORD **)(a1 + 64))
    result = (*(uint64_t (**)(_QWORD))(a1 + 88))(*(_QWORD *)(a1 + 96));
  *a3 = result;
  return result;
}

void _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16insertForCompactEjPK10CIVector_sIDF16_Li768EEyjf(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5, float a6)
{
  os_unfair_lock_s *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  void *v22;
  uint64_t v23;
  float v24;
  char v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  const char *v32;

  v12 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v13 = *(std::__shared_weak_count **)(a1 + 88);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v17 = *(_QWORD *)(a1 + 96);
  v16 = *(std::__shared_weak_count **)(a1 + 104);
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  os_unfair_lock_unlock(v12);
  if ((_DWORD)a5 == -1)
  {
    v20 = a1;
    v21 = a2;
    v22 = a3;
    v23 = 0xFFFFFFFFLL;
    v24 = a6;
    v25 = 0;
  }
  else
  {
    if (*(_DWORD *)(v17 + 68) <= a5)
    {
      v30 = __si_assert_copy_extra_268();
      v31 = v30;
      v32 = "";
      if (v30)
        v32 = v30;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2605, "partID == VECTOR_NOT_FOUND || partID < cur.partitions->nPartitions()", v32);
      free(v31);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v20 = a1;
    v21 = a2;
    v22 = a3;
    v23 = a5;
    v24 = a6;
    v25 = 1;
  }
  *((_QWORD *)_ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li768EEjfb(v20, v21, v22, v23, v25, v24)+ 192) = a4;
  if (!v16)
    goto LABEL_15;
  v26 = (unint64_t *)&v16->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!v13)
      return;
  }
  else
  {
LABEL_15:
    if (!v13)
      return;
  }
  v28 = (unint64_t *)&v13->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

uint64_t ___ZNK22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(float))(*(_QWORD *)(a1 + 32) + 16))(*(float *)(a2 + 4));
  *a3 = **(_DWORD **)(a1 + 40) != 0;
  return result;
}

void _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE12enumerator_s4nextEv(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t Ptr;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(_QWORD *)(a2 + 72))
  {
    for (i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + ((*(_QWORD *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * *(_QWORD *)(a2 + 64));
          ;
          i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + ((v11 >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * v11))
    {
      *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)i + 16))(i);
      if (!*(_QWORD *)(a2 + 72))
        break;
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + ((*(_QWORD *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * *(_QWORD *)(a2 + 64));
      v6 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
      if (v6)
      {
        *(_DWORD *)(a1 + 4) = v6[1];
        Ptr = vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(a2 + 16) + 16), *v6, 1556);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(Ptr + 1552);
        *(_QWORD *)(a1 + 16) = Ptr;
        *(_QWORD *)(a1 + 24) = Ptr + 1536;
        return;
      }
      v7 = *(std::__shared_weak_count **)(*(_QWORD *)(*(_QWORD *)(a2 + 40)
                                                    + ((*(_QWORD *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                                        + 16 * *(_QWORD *)(a2 + 64)
                                        + 8);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = *(_QWORD *)(a2 + 72) - 1;
      v11 = *(_QWORD *)(a2 + 64) + 1;
      *(_QWORD *)(a2 + 64) = v11;
      *(_QWORD *)(a2 + 72) = v10;
      if (v11 >= 0x200)
      {
        operator delete(**(void ***)(a2 + 40));
        *(_QWORD *)(a2 + 40) += 8;
        v10 = *(_QWORD *)(a2 + 72);
        v11 = *(_QWORD *)(a2 + 64) - 256;
        *(_QWORD *)(a2 + 64) = v11;
      }
      if (!v10)
        return;
    }
  }
}

unint64_t _ZNK22IVFVectorIndexTemplateIDF16_Li768EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratorptEv(uint64_t a1, unsigned int a2)
{
  char *v3;
  char *v4;
  const char *v5;

  if (*(_DWORD *)(a1 + 24) <= a2)
  {
    v3 = __si_assert_copy_extra_268();
    v4 = v3;
    v5 = "";
    if (v3)
      v5 = v3;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1802, "offset < store->endOffset()", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(a1 + 16), a2, 1556);
}

BOOL _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li768EE(uint64_t a1, uint64_t a2)
{
  int v4;
  int v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD v32[8];
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unsigned int v36;
  _QWORD v37[7];
  unsigned int v38;
  float v39;
  float v40;
  unsigned int v41;
  _BYTE buf[24];
  _DWORD v43[4];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v40 = 3.4028e38;
  v41 = -1;
  v4 = _ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li768EERjRfj(a1, a2, (int *)&v41, &v40, 0);
  if (v4 == -1)
  {
    v6 = *__error();
    v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "exists";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2632;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v41;
      LOWORD(v43[0]) = 2048;
      *(double *)((char *)v43 + 2) = v40;
      _os_log_error_impl(&dword_1B8270000, v7, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v6;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    v9 = *(_QWORD *)(a1 + 80);
    v8 = *(std::__shared_weak_count **)(a1 + 88);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v13 = *(_QWORD *)(a1 + 96);
    v12 = *(std::__shared_weak_count **)(a1 + 104);
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v43[0] = -1;
    *(_QWORD *)&buf[16] = 0x2000000000;
    v16 = v41;
    v17 = MEMORY[0x1E0C809B0];
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 0x40000000;
    v37[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li768EE_block_invoke;
    v37[3] = &unk_1E6E33F38;
    v37[5] = a1;
    v37[6] = a2;
    v38 = v41;
    v39 = v40;
    v37[4] = buf;
    (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v13 + 80))(v13, v41, v37);
    if (*(_DWORD *)(*(_QWORD *)&buf[8] + 24) == -1)
    {
      v32[0] = v17;
      v32[1] = 1174405120;
      v32[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li768EE_block_invoke_1014;
      v32[3] = &unk_1E6E33F60;
      v32[5] = a1;
      v32[6] = a2;
      v32[7] = v9;
      v33 = v8;
      if (v8)
      {
        v22 = (unint64_t *)&v8->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v34 = v13;
      v35 = v12;
      if (v12)
      {
        v24 = (unint64_t *)&v12->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v36 = v16;
      v32[4] = buf;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 64))(v13, v32);
      v26 = v35;
      if (v35)
      {
        v27 = (unint64_t *)&v35->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = v33;
      if (v33)
      {
        v30 = (unint64_t *)&v33->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
    _Block_object_dispose(buf, 8);
    if (v12)
    {
      v18 = (unint64_t *)&v12->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v8)
    {
      v20 = (unint64_t *)&v8->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  return v4 != -1;
}

void ___ZN22IVFVectorIndexTemplateIDF16_Li768EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li768EE_block_invoke_1014(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;
  float *v4;
  float *v5;
  float v6;
  float v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  const void *v11;
  int v12;
  NSObject *v13;
  float16x4_t *v14;
  uint64_t v15;
  uint64_t v16;
  float16x4_t *v17;
  float16x8_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t *v21;
  uint64_t v22;
  float16x4_t *v23;
  float16x8_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  float v28;
  int v29;
  NSObject *v30;
  int v31;
  NSObject *v32;
  int v33;
  NSObject *v34;
  int v35;
  NSObject *v36;
  int v37;
  NSObject *v38;
  int v39;
  NSObject *v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  NSObject *v44;
  int v45;
  NSObject *v46;
  int v47;
  NSObject *v48;
  int v49;
  NSObject *v50;
  int v51;
  NSObject *v52;
  double v53;
  float v54;
  float v55;
  float v56;
  int v57;
  float v58;
  _BOOL4 v59;
  float v60;
  int v61;
  _BOOL4 v62;
  float v63;
  int v64;
  _BOOL4 v65;
  float v66;
  int v67;
  _BOOL4 v68;
  float v69;
  int v70;
  float v71;
  float v72;
  double v73;
  float v74;
  _BOOL4 v75;
  _BOOL4 v76;
  float v77;
  float v78;
  int v79;
  float v80;
  _BOOL4 v81;
  float v82;
  int v83;
  _BOOL4 v84;
  float v85;
  int v86;
  _BOOL4 v87;
  float v88;
  int v89;
  _BOOL4 v90;
  float v91;
  int v92;
  float v93;
  float v94;
  float v95;
  _BOOL4 v96;
  _BOOL4 v97;
  _BOOL4 v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float *__C;
  float *v104;
  uint64_t v105;
  float *__B;
  float *v107;
  uint64_t v108;
  float __A;
  const char *v110;
  __int16 v111;
  int v112;
  __int16 v113;
  float v114;
  __int16 v115;
  _BYTE v116[14];
  __int16 v117;
  double v118;
  __int16 v119;
  uint64_t v120;
  __int16 v121;
  _BOOL4 v122;
  __int16 v123;
  _BOOL4 v124;
  __int16 v125;
  _BOOL4 v126;
  __int16 v127;
  _BOOL4 v128;
  uint64_t v129;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = v1;
  v129 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(v1 + 40);
  v9 = *(const void **)(v1 + 48);
  v11 = (const void *)_windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 32) + 16) * *(unsigned int *)v4, 0x610uLL);
  if (!memcmp(v9, v11, 0x600uLL))
  {
    v12 = *__error();
    v13 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v53 = v5[1];
      __A = 4.8153e-34;
      v110 = "exists_block_invoke";
      v111 = 1024;
      v112 = 2647;
      v113 = 1024;
      v114 = v7;
      v115 = 2048;
      *(double *)v116 = v53;
      _os_log_error_impl(&dword_1B8270000, v13, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", (uint8_t *)&__A, 0x22u);
    }
    *__error() = v12;
    v14 = *(float16x4_t **)(v8 + 48);
    v15 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 56) + 64))(*(_QWORD *)(v8 + 56), *(unsigned int *)(v8 + 88));
    bzero(&__A, 0xC00uLL);
    v16 = 0;
    v17 = v14 + 2;
    do
    {
      v18 = *(float16x8_t *)v17[-2].i8;
      v19 = vcvtq_f32_f16(*v17);
      v20 = vcvt_hight_f32_f16(*(float16x8_t *)v17->i8);
      v21 = (float32x4_t *)((char *)&__A + v16);
      *v21 = vcvtq_f32_f16(*(float16x4_t *)v18.i8);
      v21[1] = vcvt_hight_f32_f16(v18);
      v21[2] = v19;
      v21[3] = v20;
      v16 += 64;
      v17 += 4;
    }
    while (v16 != 3072);
    bzero(&__B, 0xC00uLL);
    v22 = 0;
    v23 = (float16x4_t *)(v15 + 16);
    do
    {
      v24 = *(float16x8_t *)v23[-2].i8;
      v25 = vcvtq_f32_f16(*v23);
      v26 = vcvt_hight_f32_f16(*(float16x8_t *)v23->i8);
      v27 = (float32x4_t *)&(&__B)[v22];
      *v27 = vcvtq_f32_f16(*(float16x4_t *)v24.i8);
      v27[1] = vcvt_hight_f32_f16(v24);
      v27[2] = v25;
      v27[3] = v26;
      v22 += 8;
      v23 += 4;
    }
    while (v22 != 384);
    LODWORD(__C) = 2139095039;
    vDSP_distancesq(&__A, 1, (const float *)&__B, 1, (float *)&__C, 0x300uLL);
    v28 = *(float *)&__C;
    v29 = *__error();
    v30 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v54 = *(float *)(v8 + 88);
      __A = 4.8153e-34;
      v110 = "exists_block_invoke";
      v111 = 1024;
      v112 = 2649;
      v113 = 1024;
      v114 = v54;
      v115 = 2048;
      *(double *)v116 = v28;
      _os_log_error_impl(&dword_1B8270000, v30, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", (uint8_t *)&__A, 0x22u);
    }
    *__error() = v29;
    __B = 0;
    v107 = 0;
    v108 = 0;
    (*(void (**)(float **__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v8 + 56) + 72))(&__B, *(_QWORD *)(v8 + 56), *(_QWORD *)(v8 + 48), 2);
    v31 = *__error();
    v32 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v55 = *__B;
      v56 = __B[1];
      v57 = *((_DWORD *)__B + 2);
      v58 = __B[3];
      v59 = v56 == v58 || vabds_f32(v56, v58) <= fmaxf(fminf(fabsf(v58), fabsf(v56)) * 0.000015259, 0.000015259);
      __A = 4.8156e-34;
      v110 = "exists_block_invoke";
      v111 = 1024;
      v112 = 2651;
      v113 = 1024;
      v114 = v55;
      v115 = 2048;
      *(double *)v116 = v56;
      *(_WORD *)&v116[8] = 1024;
      *(_DWORD *)&v116[10] = v57;
      v117 = 2048;
      v118 = v58;
      v119 = 1024;
      LODWORD(v120) = v59;
      _os_log_error_impl(&dword_1B8270000, v32, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(vec, 2) <%u, %e>, <%u, %e>, %d", (uint8_t *)&__A, 0x38u);
    }
    *__error() = v31;
    v33 = *__error();
    v34 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v60 = *__B;
      v61 = *((_DWORD *)__B + 2);
      v62 = __B[1] == __B[3];
      __A = 4.8154e-34;
      v110 = "exists_block_invoke";
      v111 = 1024;
      v112 = 2652;
      v113 = 1024;
      v114 = v60;
      v115 = 1024;
      *(_DWORD *)v116 = v61;
      *(_WORD *)&v116[4] = 1024;
      *(_DWORD *)&v116[6] = v62;
      _os_log_error_impl(&dword_1B8270000, v34, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", (uint8_t *)&__A, 0x24u);
    }
    *__error() = v33;
    v35 = *__error();
    v36 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      v63 = *__B;
      v64 = *((_DWORD *)__B + 2);
      v65 = __B[1] < __B[3];
      __A = 4.8154e-34;
      v110 = "exists_block_invoke";
      v111 = 1024;
      v112 = 2653;
      v113 = 1024;
      v114 = v63;
      v115 = 1024;
      *(_DWORD *)v116 = v64;
      *(_WORD *)&v116[4] = 1024;
      *(_DWORD *)&v116[6] = v65;
      _os_log_error_impl(&dword_1B8270000, v36, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", (uint8_t *)&__A, 0x24u);
    }
    *__error() = v35;
    v37 = *__error();
    v38 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      v66 = *__B;
      v67 = *((_DWORD *)__B + 2);
      v68 = __B[1] > __B[3];
      __A = 4.8154e-34;
      v110 = "exists_block_invoke";
      v111 = 1024;
      v112 = 2654;
      v113 = 1024;
      v114 = v66;
      v115 = 1024;
      *(_DWORD *)v116 = v67;
      *(_WORD *)&v116[4] = 1024;
      *(_DWORD *)&v116[6] = v68;
      _os_log_error_impl(&dword_1B8270000, v38, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", (uint8_t *)&__A, 0x24u);
    }
    *__error() = v37;
    v39 = *__error();
    v40 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v69 = *__B;
      v70 = *((_DWORD *)__B + 2);
      v71 = __B[1];
      v72 = __B[3];
      v73 = (float)(v71 - v72);
      v74 = vabds_f32(v71, v72);
      if (v71 == v72)
      {
        v75 = 1;
        v76 = 1;
      }
      else
      {
        v99 = fabsf(v71);
        v100 = fabsf(v72);
        v75 = v74 <= fmaxf(fminf(v100, v99) * 0.000015259, 0.000015259);
        v76 = v74 <= (float)(fmaxf(v99, v100) * 0.000015259);
      }
      __A = 4.8161e-34;
      v110 = "exists_block_invoke";
      v111 = 1024;
      v112 = 2655;
      v113 = 1024;
      v114 = v69;
      v115 = 1024;
      *(_DWORD *)v116 = v70;
      *(_WORD *)&v116[4] = 2048;
      *(double *)&v116[6] = v73;
      v117 = 2048;
      v118 = 1.17549435e-38;
      v119 = 2048;
      v120 = 0x3E80000000000000;
      v121 = 1024;
      v122 = v74 < 1.1755e-38;
      v123 = 1024;
      v124 = v74 < 0.00000011921;
      v125 = 1024;
      v126 = v75;
      v127 = 1024;
      v128 = v76;
      _os_log_error_impl(&dword_1B8270000, v40, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&__A, 0x54u);
    }
    *__error() = v39;
    v104 = 0;
    v105 = 0;
    __C = 0;
    v41 = *(_QWORD *)(v8 + 56);
    v42 = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 32) + 16) * *(unsigned int *)v5, 0x610uLL);
    (*(void (**)(float **__return_ptr, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v41 + 72))(&__C, v41, v42, 2);
    v43 = *__error();
    v44 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      v77 = *__C;
      v78 = __C[1];
      v79 = *((_DWORD *)__C + 2);
      v80 = __C[3];
      v81 = v78 == v80 || vabds_f32(v78, v80) <= fmaxf(fminf(fabsf(v80), fabsf(v78)) * 0.000015259, 0.000015259);
      __A = 4.8156e-34;
      v110 = "exists_block_invoke";
      v111 = 1024;
      v112 = 2658;
      v113 = 1024;
      v114 = v77;
      v115 = 2048;
      *(double *)v116 = v78;
      *(_WORD *)&v116[8] = 1024;
      *(_DWORD *)&v116[10] = v79;
      v117 = 2048;
      v118 = v80;
      v119 = 1024;
      LODWORD(v120) = v81;
      _os_log_error_impl(&dword_1B8270000, v44, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(entry->vec, 2) <%u, %e>, <%u, %e>, %d", (uint8_t *)&__A, 0x38u);
    }
    *__error() = v43;
    v45 = *__error();
    v46 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      v82 = *__C;
      v83 = *((_DWORD *)__C + 2);
      v84 = __C[1] == __C[3];
      __A = 4.8154e-34;
      v110 = "exists_block_invoke";
      v111 = 1024;
      v112 = 2659;
      v113 = 1024;
      v114 = v82;
      v115 = 1024;
      *(_DWORD *)v116 = v83;
      *(_WORD *)&v116[4] = 1024;
      *(_DWORD *)&v116[6] = v84;
      _os_log_error_impl(&dword_1B8270000, v46, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", (uint8_t *)&__A, 0x24u);
    }
    *__error() = v45;
    v47 = *__error();
    v48 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      v85 = *__C;
      v86 = *((_DWORD *)__C + 2);
      v87 = __C[1] < __C[3];
      __A = 4.8154e-34;
      v110 = "exists_block_invoke";
      v111 = 1024;
      v112 = 2660;
      v113 = 1024;
      v114 = v85;
      v115 = 1024;
      *(_DWORD *)v116 = v86;
      *(_WORD *)&v116[4] = 1024;
      *(_DWORD *)&v116[6] = v87;
      _os_log_error_impl(&dword_1B8270000, v48, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", (uint8_t *)&__A, 0x24u);
    }
    *__error() = v47;
    v49 = *__error();
    v50 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      v88 = *__C;
      v89 = *((_DWORD *)__C + 2);
      v90 = __C[1] > __C[3];
      __A = 4.8154e-34;
      v110 = "exists_block_invoke";
      v111 = 1024;
      v112 = 2661;
      v113 = 1024;
      v114 = v88;
      v115 = 1024;
      *(_DWORD *)v116 = v89;
      *(_WORD *)&v116[4] = 1024;
      *(_DWORD *)&v116[6] = v90;
      _os_log_error_impl(&dword_1B8270000, v50, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", (uint8_t *)&__A, 0x24u);
    }
    *__error() = v49;
    v51 = *__error();
    v52 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      v91 = *__C;
      v92 = *((_DWORD *)__C + 2);
      v93 = __C[1];
      v94 = __C[3];
      v95 = vabds_f32(v93, v94);
      v96 = (float)(v93 - v94) < 1.1755e-38;
      if (v93 == v94)
      {
        v97 = 1;
        v98 = 1;
      }
      else
      {
        v101 = fabsf(v93);
        v102 = fabsf(v94);
        v97 = v95 <= fmaxf(fminf(v102, v101) * 0.000015259, 0.000015259);
        v98 = v95 <= (float)(fmaxf(v101, v102) * 0.000015259);
      }
      __A = 4.8161e-34;
      v110 = "exists_block_invoke";
      v111 = 1024;
      v112 = 2662;
      v113 = 1024;
      v114 = v91;
      v115 = 1024;
      *(_DWORD *)v116 = v92;
      *(_WORD *)&v116[4] = 2048;
      *(double *)&v116[6] = v95;
      v117 = 2048;
      v118 = 1.17549435e-38;
      v119 = 2048;
      v120 = 0x3E80000000000000;
      v121 = 1024;
      v122 = v96;
      v123 = 1024;
      v124 = v95 < 0.00000011921;
      v125 = 1024;
      v126 = v97;
      v127 = 1024;
      v128 = v98;
      _os_log_error_impl(&dword_1B8270000, v52, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&__A, 0x54u);
    }
    *__error() = v51;
    *(float *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8) + 24) = *v5;
    *v3 = 1;
    if (__C)
    {
      v104 = __C;
      operator delete(__C);
    }
    if (__B)
    {
      v107 = __B;
      operator delete(__B);
    }
  }
}

_QWORD *__copy_helper_block_8_56c64_ZTSN22IVFVectorIndexTemplateIDF16_Li768EE19QuantizerPartitionsE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[10];
  result[9] = a2[9];
  result[10] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_8_56c64_ZTSN22IVFVectorIndexTemplateIDF16_Li768EE19QuantizerPartitionsE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void _ZN16QuantizerManagerIDF16_Li512EE15sharedQuantizerEi(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned __int8 v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[6];
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  __n128 (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;

  v18 = 0;
  v19 = &v18;
  v20 = 0x3802000000;
  v21 = __Block_byref_object_copy__349;
  v22 = __Block_byref_object_dispose__350;
  v23 = 0;
  v24 = 0;
  v6 = atomic_load((unsigned __int8 *)_ZGVZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(_ZGVZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq))
  {
    __cxa_atexit((void (*)(void *))_ZNSt3__110shared_ptrI9QuantizerIDF16_Li512EEED1B8nn180100Ev, &_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq, &dword_1B8270000);
    __cxa_guard_release(_ZGVZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq);
  }
  if (_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE9onceToken != -1)
    dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE9onceToken, &__block_literal_global_291);
  v23 = _ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq;
  v24 = qword_1EF1AD258;
  if (qword_1EF1AD258)
  {
    v7 = (unint64_t *)(qword_1EF1AD258 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(NSObject **)(a2 + 16);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v16[2] = ___ZN16QuantizerManagerIDF16_Li512EE15sharedQuantizerEi_block_invoke;
  v16[3] = &unk_1E6E31948;
  v17 = a3;
  v16[4] = &v18;
  v16[5] = a2;
  dispatch_sync(v9, v16);
  v10 = v19[6];
  *a1 = v19[5];
  a1[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  _Block_object_dispose(&v18, 8);
  v13 = (std::__shared_weak_count *)v24;
  if (v24)
  {
    v14 = (unint64_t *)(v24 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

__n128 __Block_byref_object_copy__349(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__350(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t _ZNSt3__110shared_ptrI9QuantizerIDF16_Li512EEED1B8nn180100Ev(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void ___ZN16QuantizerManagerIDF16_Li512EE15sharedQuantizerEi_block_invoke(uint64_t a1)
{
  int *v2;
  unint64_t v3;
  uint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  size_t v14;
  unint64_t v15;
  std::string *p_dst;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  std::string *v20;
  std::string::size_type size;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  int64_t v25;
  const char *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *p_shared_weak_owners;
  unint64_t v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  unint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  size_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  const void *v73;
  const char *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  _QWORD v95[2];
  int v96;
  char v97;
  _BYTE v98[11];
  _QWORD v99[2];
  int v100;
  char v101;
  _BYTE v102[11];
  std::string v103;
  std::string __dst;
  std::string v105;
  __int128 v106;
  int64_t v107;

  v2 = (int *)(a1 + 48);
  v3 = *(int *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 40);
  if (!(_DWORD)v3)
    goto LABEL_79;
  v5 = *(int8x8_t *)(v4 + 120);
  if (!*(_QWORD *)&v5)
    goto LABEL_22;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = *(int *)(a1 + 48);
    if (*(_QWORD *)&v5 <= v3)
      v7 = v3 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v3;
  }
  v8 = *(uint64_t ***)(*(_QWORD *)(v4 + 112) + 8 * v7);
  if (!v8 || (v9 = *v8) == 0)
  {
LABEL_22:
    v106 = 0uLL;
    v107 = 0;
    v13 = *(char *)(v4 + 71);
    if (v13 >= 0)
      v14 = *(unsigned __int8 *)(v4 + 71);
    else
      v14 = *(_QWORD *)(v4 + 56);
    v15 = v14 + 1;
    if (v14 + 1 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_147;
    if (v15 >= 0x17)
    {
      v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v17 = v15 | 7;
      v18 = v17 + 1;
      p_dst = (std::string *)operator new(v17 + 1);
      __dst.__r_.__value_.__l.__size_ = v14 + 1;
      __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14 + 1;
      if (!v14)
        goto LABEL_36;
    }
    if (v13 >= 0)
      v19 = (const void *)(v4 + 48);
    else
      v19 = *(const void **)(v4 + 48);
    memmove(p_dst, v19, v14);
LABEL_36:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v14) = 46;
    std::to_string(&v103, v3);
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v103;
    else
      v20 = (std::string *)v103.__r_.__value_.__r.__words[0];
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v103.__r_.__value_.__r.__words[2]);
    else
      size = v103.__r_.__value_.__l.__size_;
    v22 = std::string::append(&__dst, (const std::string::value_type *)v20, size);
    v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__r.__words[2] = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v105, ".quantizer");
    v25 = v24->__r_.__value_.__r.__words[2];
    v106 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v107 = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v105.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_44:
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_45;
LABEL_67:
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_45:
        if (v107 >= 0)
          v26 = (const char *)&v106;
        else
          v26 = (const char *)v106;
        v27 = fd_create_protected(*(_DWORD *)v4, v26, 0, 3u);
        if (!v27)
          goto LABEL_76;
        v28 = v27;
        v29 = operator new();
        v99[0] = v28;
        v99[1] = 0x1000000;
        v100 = 0;
        v101 = 1;
        memset(v102, 0, sizeof(v102));
        _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EEC2EN19vi_ondisk_allocator11meta_info_sE(v29, (uint64_t)v99);
        v30 = (std::__shared_weak_count *)operator new();
        v31 = v30;
        v30->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        v30->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E319D8;
        v30->__shared_weak_owners_ = 0;
        v30[1].__vftable = (std::__shared_weak_count_vtbl *)v29;
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
        v34 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v35 = *(std::__shared_weak_count **)(v34 + 48);
        *(_QWORD *)(v34 + 40) = v29;
        *(_QWORD *)(v34 + 48) = v30;
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        p_shared_weak_owners = (unint64_t *)&v31->__shared_weak_owners_;
        do
          v39 = __ldxr(p_shared_weak_owners);
        while (__stxr(v39 + 1, p_shared_weak_owners));
        v40 = std::__hash_table<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v4 + 112, *v2, v2);
        v41 = std::__shared_weak_count::lock(v31);
        v42 = v41;
        if (v41)
        {
          v43 = (unint64_t *)&v41->__shared_weak_owners_;
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
          std::__shared_weak_count::__release_weak(v31);
          v45 = (unint64_t *)&v42->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (v46)
          {
            v47 = v29;
            goto LABEL_71;
          }
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          v48 = v42;
          v47 = v29;
        }
        else
        {
          v47 = 0;
          v48 = v31;
        }
        std::__shared_weak_count::__release_weak(v48);
LABEL_71:
        v49 = (std::__shared_weak_count *)v40[4];
        v40[3] = v47;
        v40[4] = v42;
        if (v49)
          std::__shared_weak_count::__release_weak(v49);
        atomic_store(1u, (unsigned __int8 *)(v29 + 57));
        do
          v50 = __ldaxr(p_shared_owners);
        while (__stlxr(v50 - 1, p_shared_owners));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
          if ((SHIBYTE(v107) & 0x80000000) == 0)
            goto LABEL_79;
          goto LABEL_77;
        }
LABEL_76:
        if ((SHIBYTE(v107) & 0x80000000) == 0)
          goto LABEL_79;
LABEL_77:
        operator delete((void *)v106);
        goto LABEL_79;
      }
    }
    else if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_44;
    }
    operator delete(v103.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_67;
  }
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == v3)
      {
        if (*((_DWORD *)v9 + 4) == (_DWORD)v3)
          goto LABEL_136;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_22;
      }
      v9 = (uint64_t *)*v9;
      if (!v9)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == v3)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_22;
LABEL_12:
    v9 = (uint64_t *)*v9;
    if (!v9)
      goto LABEL_22;
  }
  if (*((_DWORD *)v9 + 4) != (_DWORD)v3)
    goto LABEL_12;
LABEL_136:
  v88 = std::__hash_table<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v4 + 112, v3, v2);
  v89 = (std::__shared_weak_count *)v88[4];
  if (v89 && (v89 = std::__shared_weak_count::lock(v89)) != 0)
    v90 = v88[3];
  else
    v90 = 0;
  v91 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v92 = *(std::__shared_weak_count **)(v91 + 48);
  *(_QWORD *)(v91 + 40) = v90;
  *(_QWORD *)(v91 + 48) = v89;
  if (v92)
  {
    v93 = (unint64_t *)&v92->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
LABEL_79:
  v51 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v52 = atomic_load((unsigned __int8 *)_ZGVZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq);
  if ((v52 & 1) == 0 && __cxa_guard_acquire(_ZGVZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq))
  {
    __cxa_atexit((void (*)(void *))_ZNSt3__110shared_ptrI9QuantizerIDF16_Li512EEED1B8nn180100Ev, &_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq, &dword_1B8270000);
    __cxa_guard_release(_ZGVZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq);
  }
  if (_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE9onceToken != -1)
    dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE9onceToken, &__block_literal_global_291);
  v54 = _ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq;
  v53 = (std::__shared_weak_count *)qword_1EF1AD258;
  if (!qword_1EF1AD258)
  {
    if (*(_QWORD *)(v51 + 40) != _ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq)
      return;
LABEL_93:
    v59 = *(_QWORD *)(v4 + 80);
    if (v59)
    {
      v60 = *(_QWORD *)(v4 + 88);
      if (v60)
      {
        v61 = (unint64_t *)(v60 + 8);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      v63 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v64 = *(std::__shared_weak_count **)(v63 + 48);
      *(_QWORD *)(v63 + 40) = v59;
      *(_QWORD *)(v63 + 48) = v60;
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      return;
    }
    v67 = *(char *)(v4 + 71);
    if (v67 >= 0)
      v68 = *(unsigned __int8 *)(v4 + 71);
    else
      v68 = *(_QWORD *)(v4 + 56);
    v69 = v68 + 10;
    if (v68 + 10 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v69 >= 0x17)
      {
        v71 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v69 | 7) != 0x17)
          v71 = v69 | 7;
        v72 = v71 + 1;
        v70 = (char *)operator new(v71 + 1);
        *((_QWORD *)&v106 + 1) = v68 + 10;
        v107 = v72 | 0x8000000000000000;
        *(_QWORD *)&v106 = v70;
      }
      else
      {
        v107 = 0;
        v106 = 0uLL;
        v70 = (char *)&v106;
        HIBYTE(v107) = v68 + 10;
        if (!v68)
        {
LABEL_116:
          strcpy(&v70[v68], ".quantizer");
          if (v107 >= 0)
            v74 = (const char *)&v106;
          else
            v74 = (const char *)v106;
          v75 = fd_create_protected(*(_DWORD *)v4, v74, 0, 3u);
          if (v75)
          {
            v76 = v75;
            v77 = operator new();
            v95[0] = v76;
            v95[1] = 0x1000000;
            v96 = 0;
            v97 = 1;
            memset(v98, 0, sizeof(v98));
            _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EEC2EN19vi_ondisk_allocator11meta_info_sE(v77, (uint64_t)v95);
            v78 = (_QWORD *)operator new();
            *v78 = &off_1E6E319D8;
            v78[1] = 0;
            v78[2] = 0;
            v78[3] = v77;
            v79 = *(std::__shared_weak_count **)(v4 + 88);
            *(_QWORD *)(v4 + 80) = v77;
            *(_QWORD *)(v4 + 88) = v78;
            if (!v79)
              goto LABEL_126;
            v80 = (unint64_t *)&v79->__shared_owners_;
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
            v77 = *(_QWORD *)(v4 + 80);
            v78 = *(_QWORD **)(v4 + 88);
            if (v78)
            {
LABEL_126:
              v82 = v78 + 1;
              do
                v83 = __ldxr(v82);
              while (__stxr(v83 + 1, v82));
            }
            v84 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
            v85 = *(std::__shared_weak_count **)(v84 + 48);
            *(_QWORD *)(v84 + 40) = v77;
            *(_QWORD *)(v84 + 48) = v78;
            if (v85)
            {
              v86 = (unint64_t *)&v85->__shared_owners_;
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 - 1, v86));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
          }
          if (SHIBYTE(v107) < 0)
            operator delete((void *)v106);
          return;
        }
      }
      if (v67 >= 0)
        v73 = (const void *)(v4 + 48);
      else
        v73 = *(const void **)(v4 + 48);
      memmove(v70, v73, v68);
      goto LABEL_116;
    }
LABEL_147:
    abort();
  }
  v55 = (unint64_t *)(qword_1EF1AD258 + 8);
  do
    v56 = __ldxr(v55);
  while (__stxr(v56 + 1, v55));
  v57 = *(_QWORD *)(v51 + 40);
  do
    v58 = __ldaxr(v55);
  while (__stlxr(v58 - 1, v55));
  if (v58)
  {
    if (v57 == v54)
      goto LABEL_93;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
    if (v57 == v54)
      goto LABEL_93;
  }
}

uint64_t _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EEC2EN19vi_ondisk_allocator11meta_info_sE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  const void *v15;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  _QWORD *v19;
  int v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v31;
  char *v32;
  const char *v33;
  char *v34;
  const char *v35;
  char *v36;
  const char *v37;
  char *v38;
  const char *v39;
  char *v40;
  const char *v41;
  char v42[1024];
  _BYTE buf[24];
  void *v44;
  _BYTE v45[24];
  int v46;
  char v47;
  char v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)a1 = &off_1E6E31978;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 20);
  *(_QWORD *)(a1 + 64) = fd_dup(*(_QWORD *)a2);
  bzero(v42, 0x400uLL);
  v5 = fd_name(*(_QWORD *)a2, v42, 0x400uLL);
  MEMORY[0x1BCCB03B0](v4, v5);
  if (!*(_QWORD *)(a1 + 64))
  {
    v31 = __si_assert_copy_extra_268();
    v32 = v31;
    v33 = "";
    if (v31)
      v33 = v31;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 478, "fdPtr != nullptr", v33);
    goto LABEL_32;
  }
  v6 = operator new();
  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_DWORD *)(a2 + 16);
  v10 = *(unsigned __int8 *)(a2 + 20);
  v11 = *(unsigned __int8 *)(a2 + 21);
  v12 = *(unsigned __int8 *)(a2 + 22);
  v13 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)v6 = 0;
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZN30vi_onefixedsize_disk_allocatorC2EmymN19vi_ondisk_allocator11meta_info_sEP16vector_storage_s_block_invoke;
  v44 = &__block_descriptor_tmp_80;
  *(_QWORD *)v45 = v6;
  *(_QWORD *)&v45[8] = v7;
  *(_QWORD *)&v45[16] = v8;
  v46 = v9;
  v47 = v10;
  v48 = v11;
  v49 = v12;
  v50 = v13;
  v51 = *(_QWORD *)(a2 + 24);
  storage_array_Init((_DWORD *)(v6 + 8), 1040, 0x40000uLL, 1024, v7, v11 != 0, v9, v10 != 0, v12 != 0, v51, 0, (uint64_t)buf);
  if (v11)
    vi_onefixedsize_disk_allocator::storeHeader((unint64_t *)v6);
  v14 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  if (v14)
  {
    storage_array_Close(v14 + 8);
    v15 = *(const void **)(v14 + 4208);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(v14 + 4208) = 0;
    }
    *(_OWORD *)(v14 + 4192) = 0u;
    MEMORY[0x1BCCB06A4](v14, 0x10A0C408BE2A288);
    v6 = *(_QWORD *)(a1 + 40);
  }
  v16 = (_DWORD *)_windowsResolvePtr(v6 + 40, 0x400uLL, *(_QWORD *)(v6 + 16));
  v17 = v16;
  if (!*(_BYTE *)(a2 + 21))
  {
    *(_DWORD *)(a1 + 52) = *v16;
    v19 = *(_QWORD **)(a1 + 40);
    v20 = *__error();
    v21 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = v19[6];
      v23 = (void *)v19[7];
      v25 = v19[2];
      v24 = v19[3];
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = v19;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v22;
      *(_WORD *)&buf[22] = 2048;
      v44 = v23;
      *(_WORD *)v45 = 2048;
      *(_QWORD *)&v45[2] = v24;
      *(_WORD *)&v45[10] = 2048;
      *(_QWORD *)&v45[12] = v25;
      _os_log_impl(&dword_1B8270000, v21, OS_LOG_TYPE_DEFAULT, "vi_onefixedsize_disk_allocator %p size: %llu, freeRegion: %llu, header: %llu, elemSize: %lu", buf, 0x34u);
    }
    *__error() = v20;
    v26 = *(_QWORD **)(a1 + 40);
    v27 = v26[2];
    v28 = v26[7] - v26[3];
    v29 = v28 / v27;
    if (v28 == v28 / v27 * v27)
    {
      *(_DWORD *)(a1 + 48) = v29;
      if (v17[1] == (_DWORD)v29)
      {
        if (v26[3] == 1040)
        {
          if (v26[2] == 1024)
            return a1;
          v40 = __si_assert_copy_extra_268();
          v32 = v40;
          v41 = "";
          if (v40)
            v41 = v40;
          __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 490, "vi_onefixedsize_disk_allocator::getElementSize(storage.get()) == sizeof(CIVector_t)", v41);
        }
        else
        {
          v38 = __si_assert_copy_extra_268();
          v32 = v38;
          v39 = "";
          if (v38)
            v39 = v38;
          __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 489, "vi_onefixedsize_disk_allocator::getHeaderSize(storage.get()) == sizeof(QuantizerHeader_t)", v39);
        }
      }
      else
      {
        v36 = __si_assert_copy_extra_268();
        v32 = v36;
        v37 = "";
        if (v36)
          v37 = v36;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 488, "nCentroids == header->count", v37);
      }
    }
    else
    {
      v34 = __si_assert_copy_extra_268();
      v32 = v34;
      v35 = "";
      if (v34)
        v35 = v34;
      __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 504, "offset % elemSize == 0", v35);
    }
LABEL_32:
    free(v32);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v16[1] = 0;
  v18 = *(_DWORD *)(a2 + 24);
  *v16 = v18;
  *(_DWORD *)(a1 + 52) = v18;
  return a1;
}

void _ZNSt3__120__shared_ptr_pointerIP24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EENS_10shared_ptrIS3_E27__shared_ptr_default_deleteIS3_S3_EENS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

uint64_t _ZNSt3__120__shared_ptr_pointerIP24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EENS_10shared_ptrIS3_E27__shared_ptr_default_deleteIS3_S3_EENS_9allocatorIS3_EEE16__on_zero_sharedEv(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EED0Ev(uint64_t a1)
{
  _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EED2Ev(a1);
  JUMPOUT(0x1BCCB06A4);
}

uint64_t _ZNK24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EE7versionEv(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t _ZNK24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EE5countEv(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t _ZNK9QuantizerIDF16_Li512EE9dimensionEv()
{
  return 512;
}

uint64_t _ZNK9QuantizerIDF16_Li512EE11elementSizeEv()
{
  return 2;
}

BOOL _ZNK9QuantizerIDF16_Li512EEeqERK12AnyQuantizer(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  int v8;
  _BOOL8 result;
  char *v10;
  char *v11;
  const char *v12;
  char *v13;
  const char *v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) != 512)
  {
    v10 = __si_assert_copy_extra_268();
    v11 = v10;
    v12 = "";
    if (v10)
      v12 = v10;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 282, "D == other.dimension()", v12);
LABEL_17:
    free(v11);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) != 2)
  {
    v13 = __si_assert_copy_extra_268();
    v11 = v13;
    v14 = "";
    if (v13)
      v14 = v13;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 283, "sizeof(ELEM_TYPE) == other.elementSize()", v14);
    goto LABEL_17;
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
    return 0;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    return 1;
  v5 = 0;
  while (1)
  {
    v6 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, v5);
    v7 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, v5);
    v8 = memcmp(v6, v7, 0x400uLL);
    result = v8 == 0;
    if (v8)
      break;
    v5 = (v5 + 1);
    if (v5 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
      return 1;
  }
  return result;
}

BOOL _ZNK9QuantizerIDF16_Li512EE12isPersistentEv(uint64_t a1)
{
  _QWORD *v1;
  int v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(char *)(a1 + 31);
  if ((v2 & 0x80000000) == 0)
  {
    if (v2 != 8)
      return 1;
    return *v1 != 0x3E79726F6D656D3CLL;
  }
  if (*(_QWORD *)(a1 + 16) == 8)
  {
    v1 = (_QWORD *)*v1;
    return *v1 != 0x3E79726F6D656D3CLL;
  }
  return 1;
}

unint64_t _ZNK24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EE11getCentroidEj(uint64_t a1, unsigned int a2)
{
  char *v3;
  char *v4;
  const char *v5;

  if (*(_DWORD *)(a1 + 48) <= a2)
  {
    v3 = __si_assert_copy_extra_268();
    v4 = v3;
    v5 = "";
    if (v3)
      v5 = v3;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 514, "i < nCentroids", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return _windowsResolvePtr(*(_QWORD *)(a1 + 40) + 40, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) * a2, 0x400uLL);
}

void _ZNK9QuantizerIDF16_Li512EE14topKPartitionsERK10CIVector_sIDF16_Li512EEi(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int **v7;
  int **v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  float16x8_t v14;
  float32x4_t v15;
  float16x8_t v16;
  float16x8_t v17;
  float16x8_t v18;
  float16x8_t v19;
  float16x8_t v20;
  float16x8_t v21;
  float16x8_t v22;
  float16x8_t v23;
  float16x8_t v24;
  float16x8_t v25;
  float16x8_t v26;
  float16x8_t v27;
  float16x8_t v28;
  float16x8_t v29;
  float16x8_t v30;
  float16x8_t v31;
  float16x8_t v32;
  float16x8_t v33;
  float16x8_t v34;
  float16x8_t v35;
  float16x8_t v36;
  float16x8_t v37;
  float16x8_t v38;
  float16x8_t v39;
  float16x8_t v40;
  float16x8_t v41;
  float16x8_t v42;
  float16x8_t v43;
  float16x8_t v44;
  float16x8_t v45;
  float16x8_t v46;
  float16x8_t v47;
  float16x8_t v48;
  float16x8_t v49;
  float16x8_t v50;
  float16x8_t v51;
  float16x8_t v52;
  float16x8_t v53;
  float16x8_t v54;
  float16x8_t v55;
  float16x8_t v56;
  float16x8_t v57;
  float16x8_t v58;
  float16x8_t v59;
  float16x8_t v60;
  float16x8_t v61;
  float16x8_t v62;
  float16x8_t v63;
  float16x8_t v64;
  float16x8_t v65;
  float16x8_t v66;
  float16x8_t v67;
  float16x8_t v68;
  float16x8_t v69;
  float16x8_t v70;
  float16x8_t v71;
  float16x8_t v72;
  float16x8_t v73;
  float16x8_t v74;
  float16x8_t v75;
  float16x8_t v76;
  float16x8_t v77;
  float16x8_t v78;
  float32x4_t v79;
  float16x8_t v80;
  float16x8_t v81;
  float16x8_t v82;
  float16x8_t v83;
  float16x8_t v84;
  float16x8_t v85;
  float16x8_t v86;
  float16x8_t v87;
  float16x8_t v88;
  float16x8_t v89;
  float16x8_t v90;
  float16x8_t v91;
  float16x8_t v92;
  float16x8_t v93;
  float16x8_t v94;
  float16x8_t v95;
  float16x8_t v96;
  float16x8_t v97;
  float16x8_t v98;
  float16x8_t v99;
  float16x8_t v100;
  float16x8_t v101;
  float16x8_t v102;
  float16x8_t v103;
  float16x8_t v104;
  float16x8_t v105;
  float16x8_t v106;
  float16x8_t v107;
  float16x8_t v108;
  float16x8_t v109;
  float16x8_t v110;
  float16x8_t v111;
  float16x8_t v112;
  float16x8_t v113;
  float16x8_t v114;
  float16x8_t v115;
  float16x8_t v116;
  float16x8_t v117;
  float16x8_t v118;
  float16x8_t v119;
  float16x8_t v120;
  float16x8_t v121;
  float16x8_t v122;
  float16x8_t v123;
  float16x8_t v124;
  float16x8_t v125;
  float16x8_t v126;
  float16x8_t v127;
  float16x8_t v128;
  float16x8_t v129;
  float16x8_t v130;
  float16x8_t v131;
  float16x8_t v132;
  float16x8_t v133;
  float16x8_t v134;
  float16x8_t v135;
  float16x8_t v136;
  float16x8_t v137;
  float16x8_t v138;
  float16x8_t v139;
  float16x8_t v140;
  float16x8_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  float v145;
  int v146;
  _BOOL4 v147;
  uint64_t v148;
  char *v149;
  float v150;
  float v151;
  float v152;
  _BOOL4 v153;
  float *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  _BYTE *v158;
  _DWORD *v159;
  unint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  float *v167;
  float v168;
  float v169;
  int v170;
  float v171;
  _BOOL4 v172;
  float *v173;
  float v174;
  BOOL v175;
  unint64_t v176;
  float *v177;
  unsigned int v178;
  char *v179;
  float v180;
  float v181;
  int v182;
  _BOOL4 v183;
  float *v184;
  float v185;
  BOOL v186;
  char *v187;
  unint64_t v188;
  float *v189;
  float v190;
  int v191;
  _BOOL4 v192;
  float *v193;
  float v194;
  BOOL v195;
  uint64_t v196;
  _OWORD *v197;
  char *v198;
  uint64_t v199;
  __int128 v200;
  uint64_t v201;
  int *v202;
  float *v203;
  uint64_t v204;
  uint64_t v206;
  int v207;
  int v208;
  float *v209;
  float v210;
  float v211;
  float v212;
  _BOOL4 v213;
  float *v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  unint64_t v218;
  float *v219;
  float v220;
  float v221;
  float v222;
  float v223;
  _BOOL4 v224;
  float *v225;
  float v226;
  BOOL v227;
  int **v228;
  unint64_t v229;
  _OWORD __B[128];
  _OWORD __A[128];
  unsigned int __C[3];

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v6 = v1;
  v8 = v7;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1))
  {
    v9 = 0;
    v203 = 0;
    v202 = 0;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    goto LABEL_73;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v228 = v8;
  v229 = v3;
  do
  {
    v13 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v6 + 64))(v6, v12);
    bzero(__A, 0x800uLL);
    v14 = *(float16x8_t *)(v13 + 16);
    v15 = vcvtq_f32_f16(*(float16x4_t *)v13);
    __A[1] = vcvt_hight_f32_f16(*(float16x8_t *)v13);
    __A[0] = v15;
    __A[3] = vcvt_hight_f32_f16(v14);
    __A[2] = vcvtq_f32_f16(*(float16x4_t *)v14.i8);
    v16 = *(float16x8_t *)(v13 + 32);
    v17 = *(float16x8_t *)(v13 + 48);
    __A[5] = vcvt_hight_f32_f16(v16);
    __A[4] = vcvtq_f32_f16(*(float16x4_t *)v16.i8);
    __A[7] = vcvt_hight_f32_f16(v17);
    __A[6] = vcvtq_f32_f16(*(float16x4_t *)v17.i8);
    v18 = *(float16x8_t *)(v13 + 64);
    v19 = *(float16x8_t *)(v13 + 80);
    __A[9] = vcvt_hight_f32_f16(v18);
    __A[8] = vcvtq_f32_f16(*(float16x4_t *)v18.i8);
    __A[11] = vcvt_hight_f32_f16(v19);
    __A[10] = vcvtq_f32_f16(*(float16x4_t *)v19.i8);
    v20 = *(float16x8_t *)(v13 + 96);
    v21 = *(float16x8_t *)(v13 + 112);
    __A[13] = vcvt_hight_f32_f16(v20);
    __A[12] = vcvtq_f32_f16(*(float16x4_t *)v20.i8);
    __A[15] = vcvt_hight_f32_f16(v21);
    __A[14] = vcvtq_f32_f16(*(float16x4_t *)v21.i8);
    v22 = *(float16x8_t *)(v13 + 128);
    v23 = *(float16x8_t *)(v13 + 144);
    __A[17] = vcvt_hight_f32_f16(v22);
    __A[16] = vcvtq_f32_f16(*(float16x4_t *)v22.i8);
    __A[19] = vcvt_hight_f32_f16(v23);
    __A[18] = vcvtq_f32_f16(*(float16x4_t *)v23.i8);
    v24 = *(float16x8_t *)(v13 + 160);
    v25 = *(float16x8_t *)(v13 + 176);
    __A[21] = vcvt_hight_f32_f16(v24);
    __A[20] = vcvtq_f32_f16(*(float16x4_t *)v24.i8);
    __A[23] = vcvt_hight_f32_f16(v25);
    __A[22] = vcvtq_f32_f16(*(float16x4_t *)v25.i8);
    v26 = *(float16x8_t *)(v13 + 192);
    v27 = *(float16x8_t *)(v13 + 208);
    __A[25] = vcvt_hight_f32_f16(v26);
    __A[24] = vcvtq_f32_f16(*(float16x4_t *)v26.i8);
    __A[27] = vcvt_hight_f32_f16(v27);
    __A[26] = vcvtq_f32_f16(*(float16x4_t *)v27.i8);
    v28 = *(float16x8_t *)(v13 + 224);
    v29 = *(float16x8_t *)(v13 + 240);
    __A[29] = vcvt_hight_f32_f16(v28);
    __A[28] = vcvtq_f32_f16(*(float16x4_t *)v28.i8);
    __A[31] = vcvt_hight_f32_f16(v29);
    __A[30] = vcvtq_f32_f16(*(float16x4_t *)v29.i8);
    v30 = *(float16x8_t *)(v13 + 256);
    v31 = *(float16x8_t *)(v13 + 272);
    __A[33] = vcvt_hight_f32_f16(v30);
    __A[32] = vcvtq_f32_f16(*(float16x4_t *)v30.i8);
    __A[35] = vcvt_hight_f32_f16(v31);
    __A[34] = vcvtq_f32_f16(*(float16x4_t *)v31.i8);
    v32 = *(float16x8_t *)(v13 + 288);
    v33 = *(float16x8_t *)(v13 + 304);
    __A[37] = vcvt_hight_f32_f16(v32);
    __A[36] = vcvtq_f32_f16(*(float16x4_t *)v32.i8);
    __A[39] = vcvt_hight_f32_f16(v33);
    __A[38] = vcvtq_f32_f16(*(float16x4_t *)v33.i8);
    v34 = *(float16x8_t *)(v13 + 320);
    v35 = *(float16x8_t *)(v13 + 336);
    __A[41] = vcvt_hight_f32_f16(v34);
    __A[40] = vcvtq_f32_f16(*(float16x4_t *)v34.i8);
    __A[43] = vcvt_hight_f32_f16(v35);
    __A[42] = vcvtq_f32_f16(*(float16x4_t *)v35.i8);
    v36 = *(float16x8_t *)(v13 + 352);
    v37 = *(float16x8_t *)(v13 + 368);
    __A[45] = vcvt_hight_f32_f16(v36);
    __A[44] = vcvtq_f32_f16(*(float16x4_t *)v36.i8);
    __A[47] = vcvt_hight_f32_f16(v37);
    __A[46] = vcvtq_f32_f16(*(float16x4_t *)v37.i8);
    v38 = *(float16x8_t *)(v13 + 384);
    v39 = *(float16x8_t *)(v13 + 400);
    __A[49] = vcvt_hight_f32_f16(v38);
    __A[48] = vcvtq_f32_f16(*(float16x4_t *)v38.i8);
    __A[51] = vcvt_hight_f32_f16(v39);
    __A[50] = vcvtq_f32_f16(*(float16x4_t *)v39.i8);
    v40 = *(float16x8_t *)(v13 + 416);
    v41 = *(float16x8_t *)(v13 + 432);
    __A[53] = vcvt_hight_f32_f16(v40);
    __A[52] = vcvtq_f32_f16(*(float16x4_t *)v40.i8);
    __A[55] = vcvt_hight_f32_f16(v41);
    __A[54] = vcvtq_f32_f16(*(float16x4_t *)v41.i8);
    v42 = *(float16x8_t *)(v13 + 448);
    v43 = *(float16x8_t *)(v13 + 464);
    __A[57] = vcvt_hight_f32_f16(v42);
    __A[56] = vcvtq_f32_f16(*(float16x4_t *)v42.i8);
    __A[59] = vcvt_hight_f32_f16(v43);
    __A[58] = vcvtq_f32_f16(*(float16x4_t *)v43.i8);
    v44 = *(float16x8_t *)(v13 + 480);
    v45 = *(float16x8_t *)(v13 + 496);
    __A[61] = vcvt_hight_f32_f16(v44);
    __A[60] = vcvtq_f32_f16(*(float16x4_t *)v44.i8);
    __A[63] = vcvt_hight_f32_f16(v45);
    __A[62] = vcvtq_f32_f16(*(float16x4_t *)v45.i8);
    v46 = *(float16x8_t *)(v13 + 512);
    v47 = *(float16x8_t *)(v13 + 528);
    __A[65] = vcvt_hight_f32_f16(v46);
    __A[64] = vcvtq_f32_f16(*(float16x4_t *)v46.i8);
    __A[67] = vcvt_hight_f32_f16(v47);
    __A[66] = vcvtq_f32_f16(*(float16x4_t *)v47.i8);
    v48 = *(float16x8_t *)(v13 + 544);
    v49 = *(float16x8_t *)(v13 + 560);
    __A[69] = vcvt_hight_f32_f16(v48);
    __A[68] = vcvtq_f32_f16(*(float16x4_t *)v48.i8);
    __A[71] = vcvt_hight_f32_f16(v49);
    __A[70] = vcvtq_f32_f16(*(float16x4_t *)v49.i8);
    v50 = *(float16x8_t *)(v13 + 576);
    v51 = *(float16x8_t *)(v13 + 592);
    __A[73] = vcvt_hight_f32_f16(v50);
    __A[72] = vcvtq_f32_f16(*(float16x4_t *)v50.i8);
    __A[75] = vcvt_hight_f32_f16(v51);
    __A[74] = vcvtq_f32_f16(*(float16x4_t *)v51.i8);
    v52 = *(float16x8_t *)(v13 + 608);
    v53 = *(float16x8_t *)(v13 + 624);
    __A[77] = vcvt_hight_f32_f16(v52);
    __A[76] = vcvtq_f32_f16(*(float16x4_t *)v52.i8);
    __A[79] = vcvt_hight_f32_f16(v53);
    __A[78] = vcvtq_f32_f16(*(float16x4_t *)v53.i8);
    v54 = *(float16x8_t *)(v13 + 640);
    v55 = *(float16x8_t *)(v13 + 656);
    __A[81] = vcvt_hight_f32_f16(v54);
    __A[80] = vcvtq_f32_f16(*(float16x4_t *)v54.i8);
    __A[83] = vcvt_hight_f32_f16(v55);
    __A[82] = vcvtq_f32_f16(*(float16x4_t *)v55.i8);
    v56 = *(float16x8_t *)(v13 + 672);
    v57 = *(float16x8_t *)(v13 + 688);
    __A[85] = vcvt_hight_f32_f16(v56);
    __A[84] = vcvtq_f32_f16(*(float16x4_t *)v56.i8);
    __A[87] = vcvt_hight_f32_f16(v57);
    __A[86] = vcvtq_f32_f16(*(float16x4_t *)v57.i8);
    v58 = *(float16x8_t *)(v13 + 704);
    v59 = *(float16x8_t *)(v13 + 720);
    __A[89] = vcvt_hight_f32_f16(v58);
    __A[88] = vcvtq_f32_f16(*(float16x4_t *)v58.i8);
    __A[91] = vcvt_hight_f32_f16(v59);
    __A[90] = vcvtq_f32_f16(*(float16x4_t *)v59.i8);
    v60 = *(float16x8_t *)(v13 + 736);
    v61 = *(float16x8_t *)(v13 + 752);
    __A[93] = vcvt_hight_f32_f16(v60);
    __A[92] = vcvtq_f32_f16(*(float16x4_t *)v60.i8);
    __A[95] = vcvt_hight_f32_f16(v61);
    __A[94] = vcvtq_f32_f16(*(float16x4_t *)v61.i8);
    v62 = *(float16x8_t *)(v13 + 768);
    v63 = *(float16x8_t *)(v13 + 784);
    __A[97] = vcvt_hight_f32_f16(v62);
    __A[96] = vcvtq_f32_f16(*(float16x4_t *)v62.i8);
    __A[99] = vcvt_hight_f32_f16(v63);
    __A[98] = vcvtq_f32_f16(*(float16x4_t *)v63.i8);
    v64 = *(float16x8_t *)(v13 + 800);
    v65 = *(float16x8_t *)(v13 + 816);
    __A[101] = vcvt_hight_f32_f16(v64);
    __A[100] = vcvtq_f32_f16(*(float16x4_t *)v64.i8);
    __A[103] = vcvt_hight_f32_f16(v65);
    __A[102] = vcvtq_f32_f16(*(float16x4_t *)v65.i8);
    v66 = *(float16x8_t *)(v13 + 832);
    v67 = *(float16x8_t *)(v13 + 848);
    __A[105] = vcvt_hight_f32_f16(v66);
    __A[104] = vcvtq_f32_f16(*(float16x4_t *)v66.i8);
    __A[107] = vcvt_hight_f32_f16(v67);
    __A[106] = vcvtq_f32_f16(*(float16x4_t *)v67.i8);
    v68 = *(float16x8_t *)(v13 + 864);
    v69 = *(float16x8_t *)(v13 + 880);
    __A[109] = vcvt_hight_f32_f16(v68);
    __A[108] = vcvtq_f32_f16(*(float16x4_t *)v68.i8);
    __A[111] = vcvt_hight_f32_f16(v69);
    __A[110] = vcvtq_f32_f16(*(float16x4_t *)v69.i8);
    v70 = *(float16x8_t *)(v13 + 896);
    v71 = *(float16x8_t *)(v13 + 912);
    __A[113] = vcvt_hight_f32_f16(v70);
    __A[112] = vcvtq_f32_f16(*(float16x4_t *)v70.i8);
    __A[115] = vcvt_hight_f32_f16(v71);
    __A[114] = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
    v72 = *(float16x8_t *)(v13 + 928);
    v73 = *(float16x8_t *)(v13 + 944);
    __A[117] = vcvt_hight_f32_f16(v72);
    __A[116] = vcvtq_f32_f16(*(float16x4_t *)v72.i8);
    __A[119] = vcvt_hight_f32_f16(v73);
    __A[118] = vcvtq_f32_f16(*(float16x4_t *)v73.i8);
    v74 = *(float16x8_t *)(v13 + 960);
    v75 = *(float16x8_t *)(v13 + 976);
    __A[121] = vcvt_hight_f32_f16(v74);
    __A[120] = vcvtq_f32_f16(*(float16x4_t *)v74.i8);
    __A[123] = vcvt_hight_f32_f16(v75);
    __A[122] = vcvtq_f32_f16(*(float16x4_t *)v75.i8);
    v76 = *(float16x8_t *)(v13 + 992);
    v77 = *(float16x8_t *)(v13 + 1008);
    __A[125] = vcvt_hight_f32_f16(v76);
    __A[124] = vcvtq_f32_f16(*(float16x4_t *)v76.i8);
    __A[127] = vcvt_hight_f32_f16(v77);
    __A[126] = vcvtq_f32_f16(*(float16x4_t *)v77.i8);
    v78 = *(float16x8_t *)(v5 + 16);
    v79 = vcvtq_f32_f16(*(float16x4_t *)v5);
    __B[1] = vcvt_hight_f32_f16(*(float16x8_t *)v5);
    __B[0] = v79;
    __B[3] = vcvt_hight_f32_f16(v78);
    __B[2] = vcvtq_f32_f16(*(float16x4_t *)v78.i8);
    v80 = *(float16x8_t *)(v5 + 32);
    v81 = *(float16x8_t *)(v5 + 48);
    __B[5] = vcvt_hight_f32_f16(v80);
    __B[4] = vcvtq_f32_f16(*(float16x4_t *)v80.i8);
    __B[7] = vcvt_hight_f32_f16(v81);
    __B[6] = vcvtq_f32_f16(*(float16x4_t *)v81.i8);
    v82 = *(float16x8_t *)(v5 + 64);
    v83 = *(float16x8_t *)(v5 + 80);
    __B[9] = vcvt_hight_f32_f16(v82);
    __B[8] = vcvtq_f32_f16(*(float16x4_t *)v82.i8);
    __B[11] = vcvt_hight_f32_f16(v83);
    __B[10] = vcvtq_f32_f16(*(float16x4_t *)v83.i8);
    v84 = *(float16x8_t *)(v5 + 96);
    v85 = *(float16x8_t *)(v5 + 112);
    __B[13] = vcvt_hight_f32_f16(v84);
    __B[12] = vcvtq_f32_f16(*(float16x4_t *)v84.i8);
    __B[15] = vcvt_hight_f32_f16(v85);
    __B[14] = vcvtq_f32_f16(*(float16x4_t *)v85.i8);
    v86 = *(float16x8_t *)(v5 + 128);
    v87 = *(float16x8_t *)(v5 + 144);
    __B[17] = vcvt_hight_f32_f16(v86);
    __B[16] = vcvtq_f32_f16(*(float16x4_t *)v86.i8);
    __B[19] = vcvt_hight_f32_f16(v87);
    __B[18] = vcvtq_f32_f16(*(float16x4_t *)v87.i8);
    v88 = *(float16x8_t *)(v5 + 160);
    v89 = *(float16x8_t *)(v5 + 176);
    __B[21] = vcvt_hight_f32_f16(v88);
    __B[20] = vcvtq_f32_f16(*(float16x4_t *)v88.i8);
    __B[23] = vcvt_hight_f32_f16(v89);
    __B[22] = vcvtq_f32_f16(*(float16x4_t *)v89.i8);
    v90 = *(float16x8_t *)(v5 + 192);
    v91 = *(float16x8_t *)(v5 + 208);
    __B[25] = vcvt_hight_f32_f16(v90);
    __B[24] = vcvtq_f32_f16(*(float16x4_t *)v90.i8);
    __B[27] = vcvt_hight_f32_f16(v91);
    __B[26] = vcvtq_f32_f16(*(float16x4_t *)v91.i8);
    v92 = *(float16x8_t *)(v5 + 224);
    v93 = *(float16x8_t *)(v5 + 240);
    __B[29] = vcvt_hight_f32_f16(v92);
    __B[28] = vcvtq_f32_f16(*(float16x4_t *)v92.i8);
    __B[31] = vcvt_hight_f32_f16(v93);
    __B[30] = vcvtq_f32_f16(*(float16x4_t *)v93.i8);
    v94 = *(float16x8_t *)(v5 + 256);
    v95 = *(float16x8_t *)(v5 + 272);
    __B[33] = vcvt_hight_f32_f16(v94);
    __B[32] = vcvtq_f32_f16(*(float16x4_t *)v94.i8);
    __B[35] = vcvt_hight_f32_f16(v95);
    __B[34] = vcvtq_f32_f16(*(float16x4_t *)v95.i8);
    v96 = *(float16x8_t *)(v5 + 288);
    v97 = *(float16x8_t *)(v5 + 304);
    __B[37] = vcvt_hight_f32_f16(v96);
    __B[36] = vcvtq_f32_f16(*(float16x4_t *)v96.i8);
    __B[39] = vcvt_hight_f32_f16(v97);
    __B[38] = vcvtq_f32_f16(*(float16x4_t *)v97.i8);
    v98 = *(float16x8_t *)(v5 + 320);
    v99 = *(float16x8_t *)(v5 + 336);
    __B[41] = vcvt_hight_f32_f16(v98);
    __B[40] = vcvtq_f32_f16(*(float16x4_t *)v98.i8);
    __B[43] = vcvt_hight_f32_f16(v99);
    __B[42] = vcvtq_f32_f16(*(float16x4_t *)v99.i8);
    v100 = *(float16x8_t *)(v5 + 352);
    v101 = *(float16x8_t *)(v5 + 368);
    __B[45] = vcvt_hight_f32_f16(v100);
    __B[44] = vcvtq_f32_f16(*(float16x4_t *)v100.i8);
    __B[47] = vcvt_hight_f32_f16(v101);
    __B[46] = vcvtq_f32_f16(*(float16x4_t *)v101.i8);
    v102 = *(float16x8_t *)(v5 + 384);
    v103 = *(float16x8_t *)(v5 + 400);
    __B[49] = vcvt_hight_f32_f16(v102);
    __B[48] = vcvtq_f32_f16(*(float16x4_t *)v102.i8);
    __B[51] = vcvt_hight_f32_f16(v103);
    __B[50] = vcvtq_f32_f16(*(float16x4_t *)v103.i8);
    v104 = *(float16x8_t *)(v5 + 416);
    v105 = *(float16x8_t *)(v5 + 432);
    __B[53] = vcvt_hight_f32_f16(v104);
    __B[52] = vcvtq_f32_f16(*(float16x4_t *)v104.i8);
    __B[55] = vcvt_hight_f32_f16(v105);
    __B[54] = vcvtq_f32_f16(*(float16x4_t *)v105.i8);
    v106 = *(float16x8_t *)(v5 + 448);
    v107 = *(float16x8_t *)(v5 + 464);
    __B[57] = vcvt_hight_f32_f16(v106);
    __B[56] = vcvtq_f32_f16(*(float16x4_t *)v106.i8);
    __B[59] = vcvt_hight_f32_f16(v107);
    __B[58] = vcvtq_f32_f16(*(float16x4_t *)v107.i8);
    v108 = *(float16x8_t *)(v5 + 480);
    v109 = *(float16x8_t *)(v5 + 496);
    __B[61] = vcvt_hight_f32_f16(v108);
    __B[60] = vcvtq_f32_f16(*(float16x4_t *)v108.i8);
    __B[63] = vcvt_hight_f32_f16(v109);
    __B[62] = vcvtq_f32_f16(*(float16x4_t *)v109.i8);
    v110 = *(float16x8_t *)(v5 + 512);
    v111 = *(float16x8_t *)(v5 + 528);
    __B[65] = vcvt_hight_f32_f16(v110);
    __B[64] = vcvtq_f32_f16(*(float16x4_t *)v110.i8);
    __B[67] = vcvt_hight_f32_f16(v111);
    __B[66] = vcvtq_f32_f16(*(float16x4_t *)v111.i8);
    v112 = *(float16x8_t *)(v5 + 544);
    v113 = *(float16x8_t *)(v5 + 560);
    __B[69] = vcvt_hight_f32_f16(v112);
    __B[68] = vcvtq_f32_f16(*(float16x4_t *)v112.i8);
    __B[71] = vcvt_hight_f32_f16(v113);
    __B[70] = vcvtq_f32_f16(*(float16x4_t *)v113.i8);
    v114 = *(float16x8_t *)(v5 + 576);
    v115 = *(float16x8_t *)(v5 + 592);
    __B[73] = vcvt_hight_f32_f16(v114);
    __B[72] = vcvtq_f32_f16(*(float16x4_t *)v114.i8);
    __B[75] = vcvt_hight_f32_f16(v115);
    __B[74] = vcvtq_f32_f16(*(float16x4_t *)v115.i8);
    v116 = *(float16x8_t *)(v5 + 608);
    v117 = *(float16x8_t *)(v5 + 624);
    __B[77] = vcvt_hight_f32_f16(v116);
    __B[76] = vcvtq_f32_f16(*(float16x4_t *)v116.i8);
    __B[79] = vcvt_hight_f32_f16(v117);
    __B[78] = vcvtq_f32_f16(*(float16x4_t *)v117.i8);
    v118 = *(float16x8_t *)(v5 + 640);
    v119 = *(float16x8_t *)(v5 + 656);
    __B[81] = vcvt_hight_f32_f16(v118);
    __B[80] = vcvtq_f32_f16(*(float16x4_t *)v118.i8);
    __B[83] = vcvt_hight_f32_f16(v119);
    __B[82] = vcvtq_f32_f16(*(float16x4_t *)v119.i8);
    v120 = *(float16x8_t *)(v5 + 672);
    v121 = *(float16x8_t *)(v5 + 688);
    __B[85] = vcvt_hight_f32_f16(v120);
    __B[84] = vcvtq_f32_f16(*(float16x4_t *)v120.i8);
    __B[87] = vcvt_hight_f32_f16(v121);
    __B[86] = vcvtq_f32_f16(*(float16x4_t *)v121.i8);
    v122 = *(float16x8_t *)(v5 + 704);
    v123 = *(float16x8_t *)(v5 + 720);
    __B[89] = vcvt_hight_f32_f16(v122);
    __B[88] = vcvtq_f32_f16(*(float16x4_t *)v122.i8);
    __B[91] = vcvt_hight_f32_f16(v123);
    __B[90] = vcvtq_f32_f16(*(float16x4_t *)v123.i8);
    v124 = *(float16x8_t *)(v5 + 736);
    v125 = *(float16x8_t *)(v5 + 752);
    __B[93] = vcvt_hight_f32_f16(v124);
    __B[92] = vcvtq_f32_f16(*(float16x4_t *)v124.i8);
    __B[95] = vcvt_hight_f32_f16(v125);
    __B[94] = vcvtq_f32_f16(*(float16x4_t *)v125.i8);
    v126 = *(float16x8_t *)(v5 + 768);
    v127 = *(float16x8_t *)(v5 + 784);
    __B[97] = vcvt_hight_f32_f16(v126);
    __B[96] = vcvtq_f32_f16(*(float16x4_t *)v126.i8);
    __B[99] = vcvt_hight_f32_f16(v127);
    __B[98] = vcvtq_f32_f16(*(float16x4_t *)v127.i8);
    v128 = *(float16x8_t *)(v5 + 800);
    v129 = *(float16x8_t *)(v5 + 816);
    __B[101] = vcvt_hight_f32_f16(v128);
    __B[100] = vcvtq_f32_f16(*(float16x4_t *)v128.i8);
    __B[103] = vcvt_hight_f32_f16(v129);
    __B[102] = vcvtq_f32_f16(*(float16x4_t *)v129.i8);
    v130 = *(float16x8_t *)(v5 + 832);
    v131 = *(float16x8_t *)(v5 + 848);
    __B[105] = vcvt_hight_f32_f16(v130);
    __B[104] = vcvtq_f32_f16(*(float16x4_t *)v130.i8);
    __B[107] = vcvt_hight_f32_f16(v131);
    __B[106] = vcvtq_f32_f16(*(float16x4_t *)v131.i8);
    v132 = *(float16x8_t *)(v5 + 864);
    v133 = *(float16x8_t *)(v5 + 880);
    __B[109] = vcvt_hight_f32_f16(v132);
    __B[108] = vcvtq_f32_f16(*(float16x4_t *)v132.i8);
    __B[111] = vcvt_hight_f32_f16(v133);
    __B[110] = vcvtq_f32_f16(*(float16x4_t *)v133.i8);
    v134 = *(float16x8_t *)(v5 + 896);
    v135 = *(float16x8_t *)(v5 + 912);
    __B[113] = vcvt_hight_f32_f16(v134);
    __B[112] = vcvtq_f32_f16(*(float16x4_t *)v134.i8);
    __B[115] = vcvt_hight_f32_f16(v135);
    __B[114] = vcvtq_f32_f16(*(float16x4_t *)v135.i8);
    v136 = *(float16x8_t *)(v5 + 928);
    v137 = *(float16x8_t *)(v5 + 944);
    __B[117] = vcvt_hight_f32_f16(v136);
    __B[116] = vcvtq_f32_f16(*(float16x4_t *)v136.i8);
    __B[119] = vcvt_hight_f32_f16(v137);
    __B[118] = vcvtq_f32_f16(*(float16x4_t *)v137.i8);
    v138 = *(float16x8_t *)(v5 + 960);
    v139 = *(float16x8_t *)(v5 + 976);
    __B[121] = vcvt_hight_f32_f16(v138);
    __B[120] = vcvtq_f32_f16(*(float16x4_t *)v138.i8);
    __B[123] = vcvt_hight_f32_f16(v139);
    __B[122] = vcvtq_f32_f16(*(float16x4_t *)v139.i8);
    v140 = *(float16x8_t *)(v5 + 992);
    v141 = *(float16x8_t *)(v5 + 1008);
    __B[125] = vcvt_hight_f32_f16(v140);
    __B[124] = vcvtq_f32_f16(*(float16x4_t *)v140.i8);
    __B[127] = vcvt_hight_f32_f16(v141);
    __B[126] = vcvtq_f32_f16(*(float16x4_t *)v141.i8);
    __C[0] = 2139095039;
    vDSP_distancesq((const float *)__A, 1, (const float *)__B, 1, (float *)__C, 0x200uLL);
    v142 = (v12 | ((unint64_t)__C[0] << 32)) >> 32;
    v143 = v9 - v11;
    v144 = (v9 - v11) >> 3;
    if (v144 < v229)
    {
      if (v9 < v10)
      {
        *(_DWORD *)v9 = v12;
        *((_DWORD *)v9 + 1) = v142;
        v9 += 8;
LABEL_46:
        if (v9 - v11 >= 9)
        {
          v176 = (((unint64_t)(v9 - v11) >> 3) - 2) >> 1;
          v177 = (float *)&v11[8 * v176];
          v179 = v9 - 8;
          v178 = *((_DWORD *)v9 - 2);
          v180 = v177[1];
          v181 = *((float *)v9 - 1);
          v182 = *(_DWORD *)v177;
          v183 = *(_DWORD *)v177 < v178;
          if (v180 != v181)
            v183 = v180 < v181;
          if (v183)
          {
            do
            {
              v184 = v177;
              *(_DWORD *)v179 = v182;
              *((float *)v179 + 1) = v177[1];
              if (!v176)
                break;
              v176 = (v176 - 1) >> 1;
              v177 = (float *)&v11[8 * v176];
              v185 = v177[1];
              v182 = *(_DWORD *)v177;
              v186 = v185 < v181;
              if (v185 == v181)
                v186 = *(_DWORD *)v177 < v178;
              v179 = (char *)v184;
            }
            while (v186);
            *(_DWORD *)v184 = v178;
            v184[1] = v181;
          }
        }
        goto LABEL_4;
      }
      if ((v10 - v11) >> 2 <= (unint64_t)(v144 + 1))
        v156 = v144 + 1;
      else
        v156 = (v10 - v11) >> 2;
      if ((unint64_t)(v10 - v11) >= 0x7FFFFFFFFFFFFFF8)
        v156 = 0x1FFFFFFFFFFFFFFFLL;
      if (v156 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v157 = 8 * v156;
      v158 = operator new(8 * v156);
      v159 = &v158[8 * v144];
      *v159 = v12;
      v159[1] = v142;
      if (v9 == v11)
      {
        v164 = v9;
        v11 = &v158[8 * v144];
LABEL_44:
        v10 = &v158[v157];
        v9 = (char *)(v159 + 2);
        if (v164)
          operator delete(v164);
        goto LABEL_46;
      }
      v160 = v9 - v11 - 8;
      if (v160 >= 0x58 && (unint64_t)(v11 - v158) >= 0x20)
      {
        v196 = (v160 >> 3) + 1;
        v161 = &v9[-8 * (v196 & 0x3FFFFFFFFFFFFFFCLL)];
        v197 = &v158[8 * v144 - 16];
        v198 = v9 - 16;
        v199 = v196 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v200 = *(_OWORD *)v198;
          *(v197 - 1) = *((_OWORD *)v198 - 1);
          *v197 = v200;
          v197 -= 2;
          v198 -= 32;
          v199 -= 4;
        }
        while (v199);
        v162 = (char *)&v159[-2 * (v196 & 0x3FFFFFFFFFFFFFFCLL)];
        if (v196 == (v196 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_32;
      }
      else
      {
        v161 = v9;
        v162 = &v158[8 * v144];
      }
      do
      {
        v163 = *((_QWORD *)v161 - 1);
        v161 -= 8;
        *((_QWORD *)v162 - 1) = v163;
        v162 -= 8;
      }
      while (v161 != v11);
LABEL_32:
      v164 = v11;
      v11 = v162;
      goto LABEL_44;
    }
    v145 = *((float *)v11 + 1);
    v146 = *(_DWORD *)v11;
    v147 = *(_DWORD *)v11 > v12;
    if (v145 != *(float *)&v142)
      v147 = v145 > *(float *)&v142;
    if (v147)
    {
      if (v143 <= 8)
      {
        *((_DWORD *)v9 - 2) = v12;
        *((_DWORD *)v9 - 1) = v142;
      }
      else
      {
        v148 = 0;
        v149 = v11;
        do
        {
          v154 = (float *)&v149[8 * v148 + 8];
          v155 = (2 * v148) | 1;
          v148 = 2 * v148 + 2;
          if (v148 < v144)
          {
            v150 = v154[1];
            v151 = v154[3];
            v152 = *v154;
            v153 = *(_DWORD *)v154 < *((_DWORD *)v154 + 2);
            if (v150 != v151)
              v153 = v150 < v151;
            if (v153)
            {
              v152 = v154[2];
              v154 += 2;
            }
            else
            {
              v148 = v155;
            }
          }
          else
          {
            v152 = *v154;
            v148 = v155;
          }
          *(float *)v149 = v152;
          *((float *)v149 + 1) = v154[1];
          v149 = (char *)v154;
        }
        while (v148 <= (uint64_t)((unint64_t)(v144 - 2) >> 1));
        if (v154 == (float *)(v9 - 8))
        {
          *(_DWORD *)v154 = v146;
          v154[1] = v145;
        }
        else
        {
          *v154 = *((float *)v9 - 2);
          v154[1] = *((float *)v9 - 1);
          *((_DWORD *)v9 - 2) = v146;
          *((float *)v9 - 1) = v145;
          v165 = (char *)v154 - v11 + 8;
          if (v165 >= 9)
          {
            v166 = (((unint64_t)v165 >> 3) - 2) >> 1;
            v167 = (float *)&v11[8 * v166];
            v168 = v167[1];
            v169 = v154[1];
            v170 = *(_DWORD *)v167;
            v171 = *v154;
            v172 = *(_DWORD *)v167 < *(_DWORD *)v154;
            if (v168 != v169)
              v172 = v168 < v169;
            if (v172)
            {
              do
              {
                v173 = v167;
                *(_DWORD *)v154 = v170;
                v154[1] = v167[1];
                if (!v166)
                  break;
                v166 = (v166 - 1) >> 1;
                v167 = (float *)&v11[8 * v166];
                v174 = v167[1];
                v170 = *(_DWORD *)v167;
                v175 = v174 < v169;
                if (v174 == v169)
                  v175 = *(_DWORD *)v167 < LODWORD(v171);
                v154 = v173;
              }
              while (v175);
              *v173 = v171;
              v173[1] = v169;
            }
          }
        }
        *((_DWORD *)v9 - 2) = v12;
        *((_DWORD *)v9 - 1) = v142;
        v187 = v9 - 8;
        v188 = (((unint64_t)v143 >> 3) - 2) >> 1;
        v189 = (float *)&v11[8 * v188];
        v190 = v189[1];
        v191 = *(_DWORD *)v189;
        v192 = *(_DWORD *)v189 < v12;
        if (v190 != *(float *)&v142)
          v192 = v190 < *(float *)&v142;
        if (v192)
        {
          do
          {
            v193 = v189;
            *(_DWORD *)v187 = v191;
            *((float *)v187 + 1) = v189[1];
            if (!v188)
              break;
            v188 = (v188 - 1) >> 1;
            v189 = (float *)&v11[8 * v188];
            v194 = v189[1];
            v191 = *(_DWORD *)v189;
            v195 = v194 < *(float *)&v142;
            if (v194 == *(float *)&v142)
              v195 = *(_DWORD *)v189 < v12;
            v187 = (char *)v193;
          }
          while (v195);
          *(_DWORD *)v193 = v12;
          *((_DWORD *)v193 + 1) = v142;
        }
      }
    }
LABEL_4:
    ++v12;
  }
  while (v12 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6));
  *v228 = 0;
  v228[1] = 0;
  v228[2] = 0;
  v201 = v9 - v11;
  if (v9 == v11)
  {
    v203 = 0;
    v202 = 0;
  }
  else
  {
    if (v201 < 0)
      abort();
    v202 = (int *)operator new(v9 - v11);
    *v228 = v202;
    v228[2] = &v202[2 * (v201 >> 3)];
    memcpy(v202, v11, v201 & 0xFFFFFFFFFFFFFFF8);
    v203 = (float *)((char *)v202 + (v201 & 0xFFFFFFFFFFFFFFF8));
    v228[1] = (int *)v203;
    v9 = v11;
  }
LABEL_73:
  if ((char *)v203 - (char *)v202 >= 9)
  {
    v204 = (unint64_t)((char *)v203 - (char *)v202) >> 3;
    do
    {
      v206 = 0;
      v207 = *v202;
      v208 = v202[1];
      v209 = (float *)v202;
      do
      {
        v214 = &v209[2 * v206 + 2];
        v215 = (2 * v206) | 1;
        v206 = 2 * v206 + 2;
        if (v206 < v204)
        {
          v210 = v214[1];
          v211 = v214[3];
          v212 = *v214;
          v213 = *(_DWORD *)v214 < *((_DWORD *)v214 + 2);
          if (v210 != v211)
            v213 = v210 < v211;
          if (v213)
          {
            v212 = v214[2];
            v214 += 2;
          }
          else
          {
            v206 = v215;
          }
        }
        else
        {
          v212 = *v214;
          v206 = v215;
        }
        *v209 = v212;
        v209[1] = v214[1];
        v209 = v214;
      }
      while (v206 <= (uint64_t)((unint64_t)(v204 - 2) >> 1));
      v216 = (char *)(v203 - 2);
      if (v214 == v203 - 2)
      {
        *(_DWORD *)v214 = v207;
        *((_DWORD *)v214 + 1) = v208;
      }
      else
      {
        *v214 = *(v203 - 2);
        v214[1] = *(v203 - 1);
        *((_DWORD *)v203 - 2) = v207;
        *((_DWORD *)v203 - 1) = v208;
        v217 = (char *)v214 - (char *)v202 + 8;
        if (v217 >= 9)
        {
          v218 = (((unint64_t)v217 >> 3) - 2) >> 1;
          v219 = (float *)&v202[2 * v218];
          v220 = v219[1];
          v221 = v214[1];
          v222 = *v219;
          v223 = *v214;
          v224 = *(_DWORD *)v219 < *(_DWORD *)v214;
          if (v220 != v221)
            v224 = v220 < v221;
          if (v224)
          {
            do
            {
              v225 = v219;
              *v214 = v222;
              v214[1] = v219[1];
              if (!v218)
                break;
              v218 = (v218 - 1) >> 1;
              v219 = (float *)&v202[2 * v218];
              v226 = v219[1];
              v222 = *v219;
              v227 = v226 < v221;
              if (v226 == v221)
                v227 = *(_DWORD *)v219 < LODWORD(v223);
              v214 = v225;
            }
            while (v227);
            *v225 = v223;
            v225[1] = v221;
          }
        }
      }
      v203 = (float *)v216;
    }
    while (v204-- > 2);
  }
  if (v9)
    operator delete(v9);
}

uint64_t _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EED2Ev(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  const void *v6;

  *(_QWORD *)a1 = &off_1E6E31978;
  v2 = atomic_load((unsigned __int8 *)(a1 + 57));
  if ((v2 & 1) != 0)
    vi_onefixedsize_disk_allocator::unlinkStorage(*(_QWORD *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
  {
    storage_array_Close(v3 + 8);
    v4 = *(const void **)(v3 + 4208);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(v3 + 4208) = 0;
    }
    *(_OWORD *)(v3 + 4192) = 0u;
    MEMORY[0x1BCCB06A4](v3, 0x10A0C408BE2A288);
  }
  fd_release(*(char **)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v5)
  {
    storage_array_Close(v5 + 8);
    v6 = *(const void **)(v5 + 4208);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(v5 + 4208) = 0;
    }
    *(_OWORD *)(v5 + 4192) = 0u;
    MEMORY[0x1BCCB06A4](v5, 0x10A0C408BE2A288);
  }
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void ___ZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEv_block_invoke()
{
  uint64_t v0;
  unsigned __int8 v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  char __str[8];
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[4];
  void *__p[2];
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  v1 = atomic_load((unsigned __int8 *)&_ZGVZN19ZeroVectorQuantizerIDF16_Li512EE8centroidEvE8centroid);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_ZGVZN19ZeroVectorQuantizerIDF16_Li512EE8centroidEvE8centroid))
  {
    bzero(&_ZZN19ZeroVectorQuantizerIDF16_Li512EE8centroidEvE8centroid, 0x400uLL);
    __cxa_guard_release(&_ZGVZN19ZeroVectorQuantizerIDF16_Li512EE8centroidEvE8centroid);
  }
  if (_ZZN19ZeroVectorQuantizerIDF16_Li512EE8centroidEvE9onceToken[0] != -1)
    dispatch_once(_ZZN19ZeroVectorQuantizerIDF16_Li512EE8centroidEvE9onceToken, &__block_literal_global_293);
  *(_QWORD *)(v0 + 8) = 0;
  v2 = (void **)(v0 + 8);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)v0 = off_1E6E317E8;
  memcpy((void *)(v0 + 33), &_ZZN19ZeroVectorQuantizerIDF16_Li512EE8centroidEvE8centroid, 0x400uLL);
  bzero(__str, 0x400uLL);
  snprintf(__str, 0x400uLL, "S%08x%08x-1x%dx%u", _ZZN19ZeroVectorQuantizerIDF16_Li512EE8centroidEvE8centroid, dword_1EF1AD66C, 512, 16);
  MEMORY[0x1BCCB03B0](v0 + 8, __str);
  *(_QWORD *)v0 = off_1E6E31768;
  v36 = 0u;
  v26 = 0;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  v25 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v23, 0, sizeof(v23));
  v3 = MEMORY[0x1E0DE4FD0];
  v4 = MEMORY[0x1E0DE4FD0] + 104;
  v27 = MEMORY[0x1E0DE4FD0] + 104;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = MEMORY[0x1E0DE4FD0] + 64;
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v22 = MEMORY[0x1E0DE4FD0] + 64;
  *(_QWORD *)__str = v7;
  *(_QWORD *)&__str[*(_QWORD *)(v7 - 24)] = v8;
  v21 = 0;
  v9 = (std::ios_base *)&__str[*(_QWORD *)(*(_QWORD *)__str - 24)];
  std::ios_base::init(v9, v23);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v10 = v5[5];
  v22 = v5[4];
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = v10;
  *(_QWORD *)__str = v5[1];
  *(_QWORD *)&__str[*(_QWORD *)(*(_QWORD *)__str - 24)] = v5[6];
  v27 = v4;
  *(_QWORD *)__str = v3 + 24;
  v22 = v6;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)&v23[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v25 = 0u;
  LODWORD(v26) = 24;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Z1000000000000000-1x", 20);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)"x", 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (*(char *)(v0 + 31) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = v18;
  *(_QWORD *)(v0 + 24) = v19;
  *(_QWORD *)__str = *v5;
  v13 = v5[9];
  *(_QWORD *)&__str[*(_QWORD *)(*(_QWORD *)__str - 24)] = v5[8];
  v22 = v13;
  *(_QWORD *)&v23[0] = v11;
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1BCCB0650](&v27);
  v14 = (_QWORD *)operator new();
  *v14 = &off_1E6E31848;
  v14[1] = 0;
  v14[2] = 0;
  v14[3] = v0;
  v15 = (std::__shared_weak_count *)qword_1EF1AD258;
  _ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq = v0;
  qword_1EF1AD258 = (uint64_t)v14;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void _ZNSt3__120__shared_ptr_pointerIP19ZeroVectorQuantizerIDF16_Li512EENS_10shared_ptrI9QuantizerIDF16_Li512EEE27__shared_ptr_default_deleteIS6_S2_EENS_9allocatorIS2_EEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

uint64_t _ZNSt3__120__shared_ptr_pointerIP19ZeroVectorQuantizerIDF16_Li512EENS_10shared_ptrI9QuantizerIDF16_Li512EEE27__shared_ptr_default_deleteIS6_S2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _ZN19ZeroVectorQuantizerIDF16_Li512EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void _ZN19ZeroVectorQuantizerIDF16_Li512EED0Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1BCCB06A4);
}

uint64_t _ZNK21SingleVectorQuantizerIDF16_Li512EE5countEv()
{
  return 1;
}

uint64_t _ZNK21SingleVectorQuantizerIDF16_Li512EE11getCentroidEj(uint64_t a1, int a2)
{
  char *v3;
  char *v4;
  const char *v5;

  if (a2)
  {
    v3 = __si_assert_copy_extra_268();
    v4 = v3;
    v5 = "";
    if (v3)
      v5 = v3;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 387, "i < 1", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a1 + 33;
}

float *_ZNK21SingleVectorQuantizerIDF16_Li512EE14topKPartitionsERK10CIVector_sIDF16_Li512EEi(uint64_t a1)
{
  uint64_t v1;
  float **v2;
  float **v3;
  uint64_t v4;
  float16x8_t v5;
  float32x4_t v6;
  float16x8_t v7;
  float16x8_t v8;
  float16x8_t v9;
  float16x8_t v10;
  float16x8_t v11;
  float16x8_t v12;
  float16x8_t v13;
  float16x8_t v14;
  float16x8_t v15;
  float16x8_t v16;
  float16x8_t v17;
  float16x8_t v18;
  float16x8_t v19;
  float16x8_t v20;
  float16x8_t v21;
  float16x8_t v22;
  float16x8_t v23;
  float16x8_t v24;
  float16x8_t v25;
  float16x8_t v26;
  float16x8_t v27;
  float16x8_t v28;
  float16x8_t v29;
  float16x8_t v30;
  float16x8_t v31;
  float16x8_t v32;
  float16x8_t v33;
  float16x8_t v34;
  float16x8_t v35;
  float16x8_t v36;
  float16x8_t v37;
  float16x8_t v38;
  float16x8_t v39;
  float16x8_t v40;
  float16x8_t v41;
  float16x8_t v42;
  float16x8_t v43;
  float16x8_t v44;
  float16x8_t v45;
  float16x8_t v46;
  float16x8_t v47;
  float16x8_t v48;
  float16x8_t v49;
  float16x8_t v50;
  float16x8_t v51;
  float16x8_t v52;
  float16x8_t v53;
  float16x8_t v54;
  float16x8_t v55;
  float16x8_t v56;
  float16x8_t v57;
  float16x8_t v58;
  float16x8_t v59;
  float16x8_t v60;
  float16x8_t v61;
  float16x8_t v62;
  float16x8_t v63;
  float16x8_t v64;
  float16x8_t v65;
  float16x8_t v66;
  float16x8_t v67;
  float16x8_t v68;
  float16x8_t v69;
  float16x8_t v70;
  float16x8_t v71;
  float16x8_t v72;
  float16x8_t v73;
  float16x8_t v74;
  float16x8_t v75;
  float16x8_t v76;
  float16x8_t v77;
  float16x8_t v78;
  float16x8_t v79;
  float16x8_t v80;
  float16x8_t v81;
  float16x8_t v82;
  float16x8_t v83;
  float16x8_t v84;
  float16x8_t v85;
  float16x8_t v86;
  float16x8_t v87;
  float16x8_t v88;
  float16x8_t v89;
  float16x8_t v90;
  float16x8_t v91;
  float16x8_t v92;
  float16x8_t v93;
  float16x8_t v94;
  float16x8_t v95;
  float16x8_t v96;
  float16x8_t v97;
  float16x8_t v98;
  float16x8_t v99;
  float16x8_t v100;
  float16x8_t v101;
  float16x8_t v102;
  float16x8_t v103;
  float16x8_t v104;
  float16x8_t v105;
  float16x8_t v106;
  float16x8_t v107;
  float16x8_t v108;
  float16x8_t v109;
  float16x8_t v110;
  float16x8_t v111;
  float16x8_t v112;
  float16x8_t v113;
  float16x8_t v114;
  float16x8_t v115;
  float16x8_t v116;
  float16x8_t v117;
  float16x8_t v118;
  float16x8_t v119;
  float16x8_t v120;
  float16x8_t v121;
  float16x8_t v122;
  float16x8_t v123;
  float16x8_t v124;
  float16x8_t v125;
  float16x8_t v126;
  float16x8_t v127;
  float16x8_t v128;
  float16x8_t v129;
  float16x8_t v130;
  float16x8_t v131;
  float16x8_t v132;
  float v133;
  float *result;
  _OWORD __B[128];
  _OWORD __A[128];
  float __C;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = *(float16x8_t *)(v4 + 16);
  v6 = vcvtq_f32_f16(*(float16x4_t *)v4);
  __A[1] = vcvt_hight_f32_f16(*(float16x8_t *)v4);
  __A[0] = v6;
  __A[3] = vcvt_hight_f32_f16(v5);
  __A[2] = vcvtq_f32_f16(*(float16x4_t *)v5.i8);
  v7 = *(float16x8_t *)(v4 + 32);
  v8 = *(float16x8_t *)(v4 + 48);
  __A[5] = vcvt_hight_f32_f16(v7);
  __A[4] = vcvtq_f32_f16(*(float16x4_t *)v7.i8);
  __A[7] = vcvt_hight_f32_f16(v8);
  __A[6] = vcvtq_f32_f16(*(float16x4_t *)v8.i8);
  v9 = *(float16x8_t *)(v4 + 64);
  v10 = *(float16x8_t *)(v4 + 80);
  __A[9] = vcvt_hight_f32_f16(v9);
  __A[8] = vcvtq_f32_f16(*(float16x4_t *)v9.i8);
  __A[11] = vcvt_hight_f32_f16(v10);
  __A[10] = vcvtq_f32_f16(*(float16x4_t *)v10.i8);
  v11 = *(float16x8_t *)(v4 + 96);
  v12 = *(float16x8_t *)(v4 + 112);
  __A[13] = vcvt_hight_f32_f16(v11);
  __A[12] = vcvtq_f32_f16(*(float16x4_t *)v11.i8);
  __A[15] = vcvt_hight_f32_f16(v12);
  __A[14] = vcvtq_f32_f16(*(float16x4_t *)v12.i8);
  v13 = *(float16x8_t *)(v4 + 128);
  v14 = *(float16x8_t *)(v4 + 144);
  __A[17] = vcvt_hight_f32_f16(v13);
  __A[16] = vcvtq_f32_f16(*(float16x4_t *)v13.i8);
  __A[19] = vcvt_hight_f32_f16(v14);
  __A[18] = vcvtq_f32_f16(*(float16x4_t *)v14.i8);
  v15 = *(float16x8_t *)(v4 + 160);
  v16 = *(float16x8_t *)(v4 + 176);
  __A[21] = vcvt_hight_f32_f16(v15);
  __A[20] = vcvtq_f32_f16(*(float16x4_t *)v15.i8);
  __A[23] = vcvt_hight_f32_f16(v16);
  __A[22] = vcvtq_f32_f16(*(float16x4_t *)v16.i8);
  v17 = *(float16x8_t *)(v4 + 192);
  v18 = *(float16x8_t *)(v4 + 208);
  __A[25] = vcvt_hight_f32_f16(v17);
  __A[24] = vcvtq_f32_f16(*(float16x4_t *)v17.i8);
  __A[27] = vcvt_hight_f32_f16(v18);
  __A[26] = vcvtq_f32_f16(*(float16x4_t *)v18.i8);
  v19 = *(float16x8_t *)(v4 + 224);
  v20 = *(float16x8_t *)(v4 + 240);
  __A[29] = vcvt_hight_f32_f16(v19);
  __A[28] = vcvtq_f32_f16(*(float16x4_t *)v19.i8);
  __A[31] = vcvt_hight_f32_f16(v20);
  __A[30] = vcvtq_f32_f16(*(float16x4_t *)v20.i8);
  v21 = *(float16x8_t *)(v4 + 256);
  v22 = *(float16x8_t *)(v4 + 272);
  __A[33] = vcvt_hight_f32_f16(v21);
  __A[32] = vcvtq_f32_f16(*(float16x4_t *)v21.i8);
  __A[35] = vcvt_hight_f32_f16(v22);
  __A[34] = vcvtq_f32_f16(*(float16x4_t *)v22.i8);
  v23 = *(float16x8_t *)(v4 + 288);
  v24 = *(float16x8_t *)(v4 + 304);
  __A[37] = vcvt_hight_f32_f16(v23);
  __A[36] = vcvtq_f32_f16(*(float16x4_t *)v23.i8);
  __A[39] = vcvt_hight_f32_f16(v24);
  __A[38] = vcvtq_f32_f16(*(float16x4_t *)v24.i8);
  v25 = *(float16x8_t *)(v4 + 320);
  v26 = *(float16x8_t *)(v4 + 336);
  __A[41] = vcvt_hight_f32_f16(v25);
  __A[40] = vcvtq_f32_f16(*(float16x4_t *)v25.i8);
  __A[43] = vcvt_hight_f32_f16(v26);
  __A[42] = vcvtq_f32_f16(*(float16x4_t *)v26.i8);
  v27 = *(float16x8_t *)(v4 + 352);
  v28 = *(float16x8_t *)(v4 + 368);
  __A[45] = vcvt_hight_f32_f16(v27);
  __A[44] = vcvtq_f32_f16(*(float16x4_t *)v27.i8);
  __A[47] = vcvt_hight_f32_f16(v28);
  __A[46] = vcvtq_f32_f16(*(float16x4_t *)v28.i8);
  v29 = *(float16x8_t *)(v4 + 384);
  v30 = *(float16x8_t *)(v4 + 400);
  __A[49] = vcvt_hight_f32_f16(v29);
  __A[48] = vcvtq_f32_f16(*(float16x4_t *)v29.i8);
  __A[51] = vcvt_hight_f32_f16(v30);
  __A[50] = vcvtq_f32_f16(*(float16x4_t *)v30.i8);
  v31 = *(float16x8_t *)(v4 + 416);
  v32 = *(float16x8_t *)(v4 + 432);
  __A[53] = vcvt_hight_f32_f16(v31);
  __A[52] = vcvtq_f32_f16(*(float16x4_t *)v31.i8);
  __A[55] = vcvt_hight_f32_f16(v32);
  __A[54] = vcvtq_f32_f16(*(float16x4_t *)v32.i8);
  v33 = *(float16x8_t *)(v4 + 448);
  v34 = *(float16x8_t *)(v4 + 464);
  __A[57] = vcvt_hight_f32_f16(v33);
  __A[56] = vcvtq_f32_f16(*(float16x4_t *)v33.i8);
  __A[59] = vcvt_hight_f32_f16(v34);
  __A[58] = vcvtq_f32_f16(*(float16x4_t *)v34.i8);
  v35 = *(float16x8_t *)(v4 + 480);
  v36 = *(float16x8_t *)(v4 + 496);
  __A[61] = vcvt_hight_f32_f16(v35);
  __A[60] = vcvtq_f32_f16(*(float16x4_t *)v35.i8);
  __A[63] = vcvt_hight_f32_f16(v36);
  __A[62] = vcvtq_f32_f16(*(float16x4_t *)v36.i8);
  v37 = *(float16x8_t *)(v4 + 512);
  v38 = *(float16x8_t *)(v4 + 528);
  __A[65] = vcvt_hight_f32_f16(v37);
  __A[64] = vcvtq_f32_f16(*(float16x4_t *)v37.i8);
  __A[67] = vcvt_hight_f32_f16(v38);
  __A[66] = vcvtq_f32_f16(*(float16x4_t *)v38.i8);
  v39 = *(float16x8_t *)(v4 + 544);
  v40 = *(float16x8_t *)(v4 + 560);
  __A[69] = vcvt_hight_f32_f16(v39);
  __A[68] = vcvtq_f32_f16(*(float16x4_t *)v39.i8);
  __A[71] = vcvt_hight_f32_f16(v40);
  __A[70] = vcvtq_f32_f16(*(float16x4_t *)v40.i8);
  v41 = *(float16x8_t *)(v4 + 576);
  v42 = *(float16x8_t *)(v4 + 592);
  __A[73] = vcvt_hight_f32_f16(v41);
  __A[72] = vcvtq_f32_f16(*(float16x4_t *)v41.i8);
  __A[75] = vcvt_hight_f32_f16(v42);
  __A[74] = vcvtq_f32_f16(*(float16x4_t *)v42.i8);
  v43 = *(float16x8_t *)(v4 + 608);
  v44 = *(float16x8_t *)(v4 + 624);
  __A[77] = vcvt_hight_f32_f16(v43);
  __A[76] = vcvtq_f32_f16(*(float16x4_t *)v43.i8);
  __A[79] = vcvt_hight_f32_f16(v44);
  __A[78] = vcvtq_f32_f16(*(float16x4_t *)v44.i8);
  v45 = *(float16x8_t *)(v4 + 640);
  v46 = *(float16x8_t *)(v4 + 656);
  __A[81] = vcvt_hight_f32_f16(v45);
  __A[80] = vcvtq_f32_f16(*(float16x4_t *)v45.i8);
  __A[83] = vcvt_hight_f32_f16(v46);
  __A[82] = vcvtq_f32_f16(*(float16x4_t *)v46.i8);
  v47 = *(float16x8_t *)(v4 + 672);
  v48 = *(float16x8_t *)(v4 + 688);
  __A[85] = vcvt_hight_f32_f16(v47);
  __A[84] = vcvtq_f32_f16(*(float16x4_t *)v47.i8);
  __A[87] = vcvt_hight_f32_f16(v48);
  __A[86] = vcvtq_f32_f16(*(float16x4_t *)v48.i8);
  v49 = *(float16x8_t *)(v4 + 704);
  v50 = *(float16x8_t *)(v4 + 720);
  __A[89] = vcvt_hight_f32_f16(v49);
  __A[88] = vcvtq_f32_f16(*(float16x4_t *)v49.i8);
  __A[91] = vcvt_hight_f32_f16(v50);
  __A[90] = vcvtq_f32_f16(*(float16x4_t *)v50.i8);
  v51 = *(float16x8_t *)(v4 + 736);
  v52 = *(float16x8_t *)(v4 + 752);
  __A[93] = vcvt_hight_f32_f16(v51);
  __A[92] = vcvtq_f32_f16(*(float16x4_t *)v51.i8);
  __A[95] = vcvt_hight_f32_f16(v52);
  __A[94] = vcvtq_f32_f16(*(float16x4_t *)v52.i8);
  v53 = *(float16x8_t *)(v4 + 768);
  v54 = *(float16x8_t *)(v4 + 784);
  __A[97] = vcvt_hight_f32_f16(v53);
  __A[96] = vcvtq_f32_f16(*(float16x4_t *)v53.i8);
  __A[99] = vcvt_hight_f32_f16(v54);
  __A[98] = vcvtq_f32_f16(*(float16x4_t *)v54.i8);
  v55 = *(float16x8_t *)(v4 + 800);
  v56 = *(float16x8_t *)(v4 + 816);
  __A[101] = vcvt_hight_f32_f16(v55);
  __A[100] = vcvtq_f32_f16(*(float16x4_t *)v55.i8);
  __A[103] = vcvt_hight_f32_f16(v56);
  __A[102] = vcvtq_f32_f16(*(float16x4_t *)v56.i8);
  v57 = *(float16x8_t *)(v4 + 832);
  v58 = *(float16x8_t *)(v4 + 848);
  __A[105] = vcvt_hight_f32_f16(v57);
  __A[104] = vcvtq_f32_f16(*(float16x4_t *)v57.i8);
  __A[107] = vcvt_hight_f32_f16(v58);
  __A[106] = vcvtq_f32_f16(*(float16x4_t *)v58.i8);
  v59 = *(float16x8_t *)(v4 + 864);
  v60 = *(float16x8_t *)(v4 + 880);
  __A[109] = vcvt_hight_f32_f16(v59);
  __A[108] = vcvtq_f32_f16(*(float16x4_t *)v59.i8);
  __A[111] = vcvt_hight_f32_f16(v60);
  __A[110] = vcvtq_f32_f16(*(float16x4_t *)v60.i8);
  v61 = *(float16x8_t *)(v4 + 896);
  v62 = *(float16x8_t *)(v4 + 912);
  __A[113] = vcvt_hight_f32_f16(v61);
  __A[112] = vcvtq_f32_f16(*(float16x4_t *)v61.i8);
  __A[115] = vcvt_hight_f32_f16(v62);
  __A[114] = vcvtq_f32_f16(*(float16x4_t *)v62.i8);
  v63 = *(float16x8_t *)(v4 + 928);
  v64 = *(float16x8_t *)(v4 + 944);
  __A[117] = vcvt_hight_f32_f16(v63);
  __A[116] = vcvtq_f32_f16(*(float16x4_t *)v63.i8);
  __A[119] = vcvt_hight_f32_f16(v64);
  __A[118] = vcvtq_f32_f16(*(float16x4_t *)v64.i8);
  v65 = *(float16x8_t *)(v4 + 960);
  v66 = *(float16x8_t *)(v4 + 976);
  __A[121] = vcvt_hight_f32_f16(v65);
  __A[120] = vcvtq_f32_f16(*(float16x4_t *)v65.i8);
  __A[123] = vcvt_hight_f32_f16(v66);
  __A[122] = vcvtq_f32_f16(*(float16x4_t *)v66.i8);
  v67 = *(float16x8_t *)(v4 + 992);
  v68 = *(float16x8_t *)(v4 + 1008);
  __A[125] = vcvt_hight_f32_f16(v67);
  __A[124] = vcvtq_f32_f16(*(float16x4_t *)v67.i8);
  __A[127] = vcvt_hight_f32_f16(v68);
  __A[126] = vcvtq_f32_f16(*(float16x4_t *)v68.i8);
  v69 = *(float16x8_t *)(v1 + 33);
  v70 = *(float16x8_t *)(v1 + 49);
  __B[1] = vcvt_hight_f32_f16(v69);
  __B[0] = vcvtq_f32_f16(*(float16x4_t *)v69.i8);
  __B[3] = vcvt_hight_f32_f16(v70);
  __B[2] = vcvtq_f32_f16(*(float16x4_t *)v70.i8);
  v71 = *(float16x8_t *)(v1 + 65);
  v72 = *(float16x8_t *)(v1 + 81);
  __B[5] = vcvt_hight_f32_f16(v71);
  __B[4] = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
  __B[7] = vcvt_hight_f32_f16(v72);
  __B[6] = vcvtq_f32_f16(*(float16x4_t *)v72.i8);
  v73 = *(float16x8_t *)(v1 + 97);
  v74 = *(float16x8_t *)(v1 + 113);
  __B[9] = vcvt_hight_f32_f16(v73);
  __B[8] = vcvtq_f32_f16(*(float16x4_t *)v73.i8);
  __B[11] = vcvt_hight_f32_f16(v74);
  __B[10] = vcvtq_f32_f16(*(float16x4_t *)v74.i8);
  v75 = *(float16x8_t *)(v1 + 129);
  v76 = *(float16x8_t *)(v1 + 145);
  __B[13] = vcvt_hight_f32_f16(v75);
  __B[12] = vcvtq_f32_f16(*(float16x4_t *)v75.i8);
  __B[15] = vcvt_hight_f32_f16(v76);
  __B[14] = vcvtq_f32_f16(*(float16x4_t *)v76.i8);
  v77 = *(float16x8_t *)(v1 + 161);
  v78 = *(float16x8_t *)(v1 + 177);
  __B[17] = vcvt_hight_f32_f16(v77);
  __B[16] = vcvtq_f32_f16(*(float16x4_t *)v77.i8);
  __B[19] = vcvt_hight_f32_f16(v78);
  __B[18] = vcvtq_f32_f16(*(float16x4_t *)v78.i8);
  v79 = *(float16x8_t *)(v1 + 193);
  v80 = *(float16x8_t *)(v1 + 209);
  __B[21] = vcvt_hight_f32_f16(v79);
  __B[20] = vcvtq_f32_f16(*(float16x4_t *)v79.i8);
  __B[23] = vcvt_hight_f32_f16(v80);
  __B[22] = vcvtq_f32_f16(*(float16x4_t *)v80.i8);
  v81 = *(float16x8_t *)(v1 + 225);
  v82 = *(float16x8_t *)(v1 + 241);
  __B[25] = vcvt_hight_f32_f16(v81);
  __B[24] = vcvtq_f32_f16(*(float16x4_t *)v81.i8);
  __B[27] = vcvt_hight_f32_f16(v82);
  __B[26] = vcvtq_f32_f16(*(float16x4_t *)v82.i8);
  v83 = *(float16x8_t *)(v1 + 257);
  v84 = *(float16x8_t *)(v1 + 273);
  __B[29] = vcvt_hight_f32_f16(v83);
  __B[28] = vcvtq_f32_f16(*(float16x4_t *)v83.i8);
  __B[31] = vcvt_hight_f32_f16(v84);
  __B[30] = vcvtq_f32_f16(*(float16x4_t *)v84.i8);
  v85 = *(float16x8_t *)(v1 + 289);
  v86 = *(float16x8_t *)(v1 + 305);
  __B[33] = vcvt_hight_f32_f16(v85);
  __B[32] = vcvtq_f32_f16(*(float16x4_t *)v85.i8);
  __B[35] = vcvt_hight_f32_f16(v86);
  __B[34] = vcvtq_f32_f16(*(float16x4_t *)v86.i8);
  v87 = *(float16x8_t *)(v1 + 321);
  v88 = *(float16x8_t *)(v1 + 337);
  __B[37] = vcvt_hight_f32_f16(v87);
  __B[36] = vcvtq_f32_f16(*(float16x4_t *)v87.i8);
  __B[39] = vcvt_hight_f32_f16(v88);
  __B[38] = vcvtq_f32_f16(*(float16x4_t *)v88.i8);
  v89 = *(float16x8_t *)(v1 + 353);
  v90 = *(float16x8_t *)(v1 + 369);
  __B[41] = vcvt_hight_f32_f16(v89);
  __B[40] = vcvtq_f32_f16(*(float16x4_t *)v89.i8);
  __B[43] = vcvt_hight_f32_f16(v90);
  __B[42] = vcvtq_f32_f16(*(float16x4_t *)v90.i8);
  v91 = *(float16x8_t *)(v1 + 385);
  v92 = *(float16x8_t *)(v1 + 401);
  __B[45] = vcvt_hight_f32_f16(v91);
  __B[44] = vcvtq_f32_f16(*(float16x4_t *)v91.i8);
  __B[47] = vcvt_hight_f32_f16(v92);
  __B[46] = vcvtq_f32_f16(*(float16x4_t *)v92.i8);
  v93 = *(float16x8_t *)(v1 + 417);
  v94 = *(float16x8_t *)(v1 + 433);
  __B[49] = vcvt_hight_f32_f16(v93);
  __B[48] = vcvtq_f32_f16(*(float16x4_t *)v93.i8);
  __B[51] = vcvt_hight_f32_f16(v94);
  __B[50] = vcvtq_f32_f16(*(float16x4_t *)v94.i8);
  v95 = *(float16x8_t *)(v1 + 449);
  v96 = *(float16x8_t *)(v1 + 465);
  __B[53] = vcvt_hight_f32_f16(v95);
  __B[52] = vcvtq_f32_f16(*(float16x4_t *)v95.i8);
  __B[55] = vcvt_hight_f32_f16(v96);
  __B[54] = vcvtq_f32_f16(*(float16x4_t *)v96.i8);
  v97 = *(float16x8_t *)(v1 + 481);
  v98 = *(float16x8_t *)(v1 + 497);
  __B[57] = vcvt_hight_f32_f16(v97);
  __B[56] = vcvtq_f32_f16(*(float16x4_t *)v97.i8);
  __B[59] = vcvt_hight_f32_f16(v98);
  __B[58] = vcvtq_f32_f16(*(float16x4_t *)v98.i8);
  v99 = *(float16x8_t *)(v1 + 513);
  v100 = *(float16x8_t *)(v1 + 529);
  __B[61] = vcvt_hight_f32_f16(v99);
  __B[60] = vcvtq_f32_f16(*(float16x4_t *)v99.i8);
  __B[63] = vcvt_hight_f32_f16(v100);
  __B[62] = vcvtq_f32_f16(*(float16x4_t *)v100.i8);
  v101 = *(float16x8_t *)(v1 + 545);
  v102 = *(float16x8_t *)(v1 + 561);
  __B[65] = vcvt_hight_f32_f16(v101);
  __B[64] = vcvtq_f32_f16(*(float16x4_t *)v101.i8);
  __B[67] = vcvt_hight_f32_f16(v102);
  __B[66] = vcvtq_f32_f16(*(float16x4_t *)v102.i8);
  v103 = *(float16x8_t *)(v1 + 577);
  v104 = *(float16x8_t *)(v1 + 593);
  __B[69] = vcvt_hight_f32_f16(v103);
  __B[68] = vcvtq_f32_f16(*(float16x4_t *)v103.i8);
  __B[71] = vcvt_hight_f32_f16(v104);
  __B[70] = vcvtq_f32_f16(*(float16x4_t *)v104.i8);
  v105 = *(float16x8_t *)(v1 + 609);
  v106 = *(float16x8_t *)(v1 + 625);
  __B[73] = vcvt_hight_f32_f16(v105);
  __B[72] = vcvtq_f32_f16(*(float16x4_t *)v105.i8);
  __B[75] = vcvt_hight_f32_f16(v106);
  __B[74] = vcvtq_f32_f16(*(float16x4_t *)v106.i8);
  v107 = *(float16x8_t *)(v1 + 641);
  v108 = *(float16x8_t *)(v1 + 657);
  __B[77] = vcvt_hight_f32_f16(v107);
  __B[76] = vcvtq_f32_f16(*(float16x4_t *)v107.i8);
  __B[79] = vcvt_hight_f32_f16(v108);
  __B[78] = vcvtq_f32_f16(*(float16x4_t *)v108.i8);
  v109 = *(float16x8_t *)(v1 + 673);
  v110 = *(float16x8_t *)(v1 + 689);
  __B[81] = vcvt_hight_f32_f16(v109);
  __B[80] = vcvtq_f32_f16(*(float16x4_t *)v109.i8);
  __B[83] = vcvt_hight_f32_f16(v110);
  __B[82] = vcvtq_f32_f16(*(float16x4_t *)v110.i8);
  v111 = *(float16x8_t *)(v1 + 705);
  v112 = *(float16x8_t *)(v1 + 721);
  __B[85] = vcvt_hight_f32_f16(v111);
  __B[84] = vcvtq_f32_f16(*(float16x4_t *)v111.i8);
  __B[87] = vcvt_hight_f32_f16(v112);
  __B[86] = vcvtq_f32_f16(*(float16x4_t *)v112.i8);
  v113 = *(float16x8_t *)(v1 + 737);
  v114 = *(float16x8_t *)(v1 + 753);
  __B[89] = vcvt_hight_f32_f16(v113);
  __B[88] = vcvtq_f32_f16(*(float16x4_t *)v113.i8);
  __B[91] = vcvt_hight_f32_f16(v114);
  __B[90] = vcvtq_f32_f16(*(float16x4_t *)v114.i8);
  v115 = *(float16x8_t *)(v1 + 769);
  v116 = *(float16x8_t *)(v1 + 785);
  __B[93] = vcvt_hight_f32_f16(v115);
  __B[92] = vcvtq_f32_f16(*(float16x4_t *)v115.i8);
  __B[95] = vcvt_hight_f32_f16(v116);
  __B[94] = vcvtq_f32_f16(*(float16x4_t *)v116.i8);
  v117 = *(float16x8_t *)(v1 + 801);
  v118 = *(float16x8_t *)(v1 + 817);
  __B[97] = vcvt_hight_f32_f16(v117);
  __B[96] = vcvtq_f32_f16(*(float16x4_t *)v117.i8);
  __B[99] = vcvt_hight_f32_f16(v118);
  __B[98] = vcvtq_f32_f16(*(float16x4_t *)v118.i8);
  v119 = *(float16x8_t *)(v1 + 833);
  v120 = *(float16x8_t *)(v1 + 849);
  __B[101] = vcvt_hight_f32_f16(v119);
  __B[100] = vcvtq_f32_f16(*(float16x4_t *)v119.i8);
  __B[103] = vcvt_hight_f32_f16(v120);
  __B[102] = vcvtq_f32_f16(*(float16x4_t *)v120.i8);
  v121 = *(float16x8_t *)(v1 + 865);
  v122 = *(float16x8_t *)(v1 + 881);
  __B[105] = vcvt_hight_f32_f16(v121);
  __B[104] = vcvtq_f32_f16(*(float16x4_t *)v121.i8);
  __B[107] = vcvt_hight_f32_f16(v122);
  __B[106] = vcvtq_f32_f16(*(float16x4_t *)v122.i8);
  v123 = *(float16x8_t *)(v1 + 897);
  v124 = *(float16x8_t *)(v1 + 913);
  __B[109] = vcvt_hight_f32_f16(v123);
  __B[108] = vcvtq_f32_f16(*(float16x4_t *)v123.i8);
  __B[111] = vcvt_hight_f32_f16(v124);
  __B[110] = vcvtq_f32_f16(*(float16x4_t *)v124.i8);
  v125 = *(float16x8_t *)(v1 + 929);
  v126 = *(float16x8_t *)(v1 + 945);
  __B[113] = vcvt_hight_f32_f16(v125);
  __B[112] = vcvtq_f32_f16(*(float16x4_t *)v125.i8);
  __B[115] = vcvt_hight_f32_f16(v126);
  __B[114] = vcvtq_f32_f16(*(float16x4_t *)v126.i8);
  v127 = *(float16x8_t *)(v1 + 961);
  v128 = *(float16x8_t *)(v1 + 977);
  __B[117] = vcvt_hight_f32_f16(v127);
  __B[116] = vcvtq_f32_f16(*(float16x4_t *)v127.i8);
  __B[119] = vcvt_hight_f32_f16(v128);
  __B[118] = vcvtq_f32_f16(*(float16x4_t *)v128.i8);
  v129 = *(float16x8_t *)(v1 + 993);
  v130 = *(float16x8_t *)(v1 + 1009);
  __B[121] = vcvt_hight_f32_f16(v129);
  __B[120] = vcvtq_f32_f16(*(float16x4_t *)v129.i8);
  __B[123] = vcvt_hight_f32_f16(v130);
  __B[122] = vcvtq_f32_f16(*(float16x4_t *)v130.i8);
  v131 = *(float16x8_t *)(v1 + 1025);
  v132 = *(float16x8_t *)(v1 + 1041);
  __B[125] = vcvt_hight_f32_f16(v131);
  __B[124] = vcvtq_f32_f16(*(float16x4_t *)v131.i8);
  __B[127] = vcvt_hight_f32_f16(v132);
  __B[126] = vcvtq_f32_f16(*(float16x4_t *)v132.i8);
  __C = 3.4028e38;
  vDSP_distancesq((const float *)__A, 1, (const float *)__B, 1, &__C, 0x200uLL);
  v133 = __C;
  result = (float *)operator new(8uLL);
  v3[1] = result + 2;
  v3[2] = result + 2;
  *result = 0.0;
  result[1] = v133;
  *v3 = result;
  return result;
}

uint64_t _ZN21SingleVectorQuantizerIDF16_Li512EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void _ZN21SingleVectorQuantizerIDF16_Li512EED0Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1BCCB06A4);
}

__int16 ___ZN19ZeroVectorQuantizerIDF16_Li512EE8centroidEv_block_invoke@<H0>()
{
  __int16 result;

  bzero((char *)&_ZZN19ZeroVectorQuantizerIDF16_Li512EE8centroidEvE8centroid + 2, 0x3FEuLL);
  result = 15360;
  LOWORD(_ZZN19ZeroVectorQuantizerIDF16_Li512EE8centroidEvE8centroid) = 15360;
  return result;
}

uint64_t _ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8weak_ptrI16QuantizerManagerIDF16_Li512EEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SA_EEEEED1B8nn180100Ev(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  std::__shared_weak_count *v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = (std::__shared_weak_count *)*((_QWORD *)v2 + 6);
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

unsigned __int8 *_ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8weak_ptrI16QuantizerManagerIDF16_Li512EEEEEENS_22__unordered_map_hasherIS7_SC_NS_4hashIS7_EENS_8equal_toIS7_EELb1EEENS_21__unordered_map_equalIS7_SC_SH_SF_Lb1EEENS5_ISC_EEE25__emplace_unique_key_argsIS7_JRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSR_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeISC_PvEEEEbEERKT_DpOT0_(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void **v11;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD **v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *i;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  void *v47;

  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (uint64_t *)a1;
  else
    v4 = *(uint64_t **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v4, v5);
  v7 = v6;
  v8 = *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 1);
  if (*((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v6;
      if (v6 >= *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 1))
        v10 = v6 % *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 1);
    }
    else
    {
      v10 = (*((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 1) - 1) & v6;
    }
    v11 = *(void ***)(_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 8 * v10);
    if (v11)
    {
      v12 = (unsigned __int8 *)*v11;
      if (*v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = *((_QWORD *)v12 + 1);
            if (v17 == v7)
            {
              v18 = v12[39];
              if ((v18 & 0x80u) == 0)
                v19 = v12[39];
              else
                v19 = *((_QWORD *)v12 + 3);
              if (v19 == v5)
              {
                if ((v18 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v12 + 2), v4, *((_QWORD *)v12 + 3)))
                    return v12;
                }
                else
                {
                  if (!v12[39])
                    return v12;
                  v20 = 0;
                  while (v12[v20 + 16] == *((unsigned __int8 *)v4 + v20))
                  {
                    if (v18 == ++v20)
                      return v12;
                  }
                }
              }
            }
            else if ((v17 & (v8 - 1)) != v10)
            {
              goto LABEL_49;
            }
            v12 = *(unsigned __int8 **)v12;
            if (!v12)
              goto LABEL_49;
          }
        }
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v7)
          {
            v14 = v12[39];
            if ((v14 & 0x80u) == 0)
              v15 = v12[39];
            else
              v15 = *((_QWORD *)v12 + 3);
            if (v15 == v5)
            {
              if ((v14 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v12 + 2), v4, *((_QWORD *)v12 + 3)))
                  return v12;
              }
              else
              {
                if (!v12[39])
                  return v12;
                v16 = 0;
                while (v12[v16 + 16] == *((unsigned __int8 *)v4 + v16))
                {
                  if (v14 == ++v16)
                    return v12;
                }
              }
            }
          }
          else
          {
            if (v13 >= v8)
              v13 %= v8;
            if (v13 != v10)
              break;
          }
          v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_49:
  v12 = (unsigned __int8 *)operator new(0x38uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v7;
  v21 = (std::string *)(v12 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v12 + 4) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v12 + 5) = 0;
  *((_QWORD *)v12 + 6) = 0;
  v22 = (float)(unint64_t)(qword_1EF1AD238 + 1);
  if (!v8 || (float)(*(float *)&dword_1EF1AD240 * (float)v8) < v22)
  {
    v23 = 1;
    if (v8 >= 3)
      v23 = (v8 & (v8 - 1)) != 0;
    v24 = v23 | (2 * v8);
    v25 = vcvtps_u32_f32(v22 / *(float *)&dword_1EF1AD240);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v8 = *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 1);
    if (prime <= *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 1))
    {
      if (prime >= *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 1))
        goto LABEL_89;
      v37 = vcvtps_u32_f32((float)(unint64_t)qword_1EF1AD238 / *(float *)&dword_1EF1AD240);
      if (*((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 1) < 3uLL
        || (v38 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers
                                                 + 8)),
            v38.i16[0] = vaddlv_u8(v38),
            v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime >= v8)
      {
        v8 = *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 1);
LABEL_89:
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v7 >= v8)
            v10 = v7 % v8;
          else
            v10 = v7;
        }
        else
        {
          v10 = (v8 - 1) & v7;
        }
        goto LABEL_102;
      }
      if (!prime)
      {
        v47 = (void *)_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers;
        *(_QWORD *)&_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers = 0;
        if (v47)
          operator delete(v47);
        v8 = 0;
        *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 1) = 0;
        goto LABEL_89;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v27 = operator new(8 * prime);
    v28 = (void *)_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers;
    *(_QWORD *)&_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers = v27;
    if (v28)
      operator delete(v28);
    v29 = 0;
    *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 1) = prime;
    do
      *(_QWORD *)(_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 8 * v29++) = 0;
    while (prime != v29);
    v30 = (_QWORD **)qword_1EF1AD230;
    if (!qword_1EF1AD230)
    {
LABEL_88:
      v8 = prime;
      goto LABEL_89;
    }
    v31 = *(_QWORD *)(qword_1EF1AD230 + 8);
    v32 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v33 = v31 & v32;
      *(_QWORD *)(_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 8 * v33) = &qword_1EF1AD230;
      for (i = *v30; *v30; i = *v30)
      {
        v35 = i[1] & v32;
        if (v35 == v33)
        {
          v30 = (_QWORD **)i;
        }
        else if (*(_QWORD *)(_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 8 * v35))
        {
          *v30 = (_QWORD *)*i;
          v36 = 8 * v35;
          *i = **(_QWORD **)(_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + v36);
          **(_QWORD **)(_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + v36) = i;
        }
        else
        {
          *(_QWORD *)(_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 8 * v35) = v30;
          v30 = (_QWORD **)i;
          v33 = v35;
        }
      }
      goto LABEL_88;
    }
    if (v31 >= prime)
      v31 %= prime;
    *(_QWORD *)(_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 8 * v31) = &qword_1EF1AD230;
    v40 = *v30;
    if (!*v30)
      goto LABEL_88;
    while (1)
    {
      v42 = v40[1];
      if (v42 >= prime)
        v42 %= prime;
      if (v42 != v31)
      {
        if (!*(_QWORD *)(_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 8 * v42))
        {
          *(_QWORD *)(_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 8 * v42) = v30;
          goto LABEL_93;
        }
        *v30 = (_QWORD *)*v40;
        v41 = 8 * v42;
        *v40 = **(_QWORD **)(_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + v41);
        **(_QWORD **)(_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + v41) = v40;
        v40 = v30;
      }
      v42 = v31;
LABEL_93:
      v30 = (_QWORD **)v40;
      v40 = (_QWORD *)*v40;
      v31 = v42;
      if (!v40)
        goto LABEL_88;
    }
  }
LABEL_102:
  v43 = _ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers;
  v44 = *(_QWORD **)(_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 8 * v10);
  if (v44)
  {
    *(_QWORD *)v12 = *v44;
LABEL_110:
    *v44 = v12;
    goto LABEL_111;
  }
  *(_QWORD *)v12 = qword_1EF1AD230;
  qword_1EF1AD230 = (uint64_t)v12;
  *(_QWORD *)(v43 + 8 * v10) = &qword_1EF1AD230;
  if (*(_QWORD *)v12)
  {
    v45 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v45 >= v8)
        v45 %= v8;
    }
    else
    {
      v45 &= v8 - 1;
    }
    v44 = (_QWORD *)(_ZZN16QuantizerManagerIDF16_Li512EE14sharedInstanceEijtE8managers + 8 * v45);
    goto LABEL_110;
  }
LABEL_111:
  ++qword_1EF1AD238;
  return v12;
}

void _ZNSt3__120__shared_ptr_pointerIP16QuantizerManagerIDF16_Li512EENS_10shared_ptrIS2_E27__shared_ptr_default_deleteIS2_S2_EENS_9allocatorIS2_EEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

uint64_t _ZNSt3__120__shared_ptr_pointerIP16QuantizerManagerIDF16_Li512EENS_10shared_ptrIS2_E27__shared_ptr_default_deleteIS2_S2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv(uint64_t result)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *__error();
    v3 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = (_QWORD *)(v1 + 24);
      if (*(char *)(v1 + 47) < 0)
        v4 = (_QWORD *)*v4;
      v5 = (_QWORD *)(v1 + 48);
      if (*(char *)(v1 + 71) < 0)
        v5 = (_QWORD *)*v5;
      v16 = 136315394;
      v17 = v4;
      v18 = 2080;
      v19 = v5;
      _os_log_impl(&dword_1B8270000, v3, OS_LOG_TYPE_DEFAULT, "QuantizerManager %s/%s destroyed", (uint8_t *)&v16, 0x16u);
    }
    *__error() = v2;
    v6 = *(_QWORD **)(v1 + 128);
    if (v6)
    {
      do
      {
        v14 = (_QWORD *)*v6;
        v15 = (std::__shared_weak_count *)v6[4];
        if (v15)
          std::__shared_weak_count::__release_weak(v15);
        operator delete(v6);
        v6 = v14;
      }
      while (v14);
    }
    v7 = *(void **)(v1 + 112);
    *(_QWORD *)(v1 + 112) = 0;
    if (v7)
      operator delete(v7);
    v8 = *(std::__shared_weak_count **)(v1 + 104);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = *(std::__shared_weak_count **)(v1 + 88);
    if (!v11)
      goto LABEL_20;
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((*(char *)(v1 + 71) & 0x80000000) == 0)
      {
LABEL_21:
        if ((*(char *)(v1 + 47) & 0x80000000) == 0)
          goto LABEL_30;
        goto LABEL_29;
      }
    }
    else
    {
LABEL_20:
      if ((*(char *)(v1 + 71) & 0x80000000) == 0)
        goto LABEL_21;
    }
    operator delete(*(void **)(v1 + 48));
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
LABEL_30:
      JUMPOUT(0x1BCCB06A4);
LABEL_29:
    operator delete(*(void **)(v1 + 24));
    goto LABEL_30;
  }
  return result;
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li512EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsEENS_9allocatorIS6_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E33B88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li512EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsEENS_9allocatorIS6_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E33B88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li512EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsEENS_9allocatorIS6_EEE16__on_zero_sharedEv(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
  {
    storage_array_Close(v2 + 8);
    v3 = *(const void **)(v2 + 4208);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(v2 + 4208) = 0;
    }
    *(_OWORD *)(v2 + 4192) = 0u;
    JUMPOUT(0x1BCCB06A4);
  }
}

void _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED0Ev(_QWORD *a1)
{
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev(a1);
  JUMPOUT(0x1BCCB06A4);
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12getQuantizerEv(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  os_unfair_lock_s *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v6 = *(_QWORD *)(a1 + 80);
  v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(std::__shared_weak_count **)(a1 + 104);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  os_unfair_lock_unlock(v4);
  *a2 = v6;
  a2[1] = v5;
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (!v9)
    goto LABEL_14;
  v14 = (unint64_t *)&v9->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v5)
      return;
  }
  else
  {
LABEL_14:
    if (!v5)
      return;
  }
  v16 = (unint64_t *)&v5->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  os_unfair_lock_s *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v9 = *(_QWORD *)(a1 + 96);
  v8 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v8)
  {
    os_unfair_lock_unlock(v4);
    *a2 = v9;
    a2[1] = 0;
    if (!v5)
      return;
    goto LABEL_15;
  }
  v10 = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  os_unfair_lock_unlock(v4);
  *a2 = v9;
  a2[1] = v8;
  do
    v12 = __ldxr(v10);
  while (__stxr(v12 + 1, v10));
  do
    v13 = __ldaxr(v10);
  while (__stlxr(v13 - 1, v10));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v5)
  {
LABEL_15:
    v14 = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

unint64_t _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE17getVectorAtOffsetEj(uint64_t a1, unsigned int a2)
{
  return _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 16) * a2, 0x410uLL);
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13newPartitionsENSt3__110shared_ptrI9QuantizerIDF16_Li512EEEE(uint64_t a1@<X0>, char **a2@<X1>, _QWORD *a3@<X8>)
{
  os_unfair_lock_s *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  const char *v14;
  __int128 v15;
  size_t v16;
  void *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  int v32;
  int v33;
  NSObject *v34;
  void **v35;
  int v36;
  int v37;
  char *v38;
  _QWORD *v39;
  int v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  const char *v47;
  void *__p[2];
  char v49;
  _OWORD v50[2];
  void *__dst[2];
  unint64_t v52;
  _OWORD v53[2];
  __int128 v54;
  __int128 v55;
  uint8_t buf[24];
  __int16 v57;
  _QWORD *v58;
  __int16 v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v6 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v7 = *(std::__shared_weak_count **)(a1 + 88);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v11 = *(_QWORD *)(a1 + 96);
  v10 = *(std::__shared_weak_count **)(a1 + 104);
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  os_unfair_lock_unlock(v6);
  v14 = ".partitions";
  if (v11 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11))
    v14 = ".tmp.partitions";
  v55 = 0u;
  v15 = *(_OWORD *)(a1 + 24);
  v53[0] = *(_OWORD *)(a1 + 8);
  v53[1] = v15;
  v54 = 0u;
  v16 = strlen(v14);
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
LABEL_60:
    abort();
  v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    v18 = (void **)operator new(v19 + 1);
    __dst[1] = v17;
    v52 = v20 | 0x8000000000000000;
    __dst[0] = v18;
    goto LABEL_17;
  }
  HIBYTE(v52) = v16;
  v18 = __dst;
  if (v16)
LABEL_17:
    memcpy(v18, v14, (size_t)v17);
  *((_BYTE *)v17 + (_QWORD)v18) = 0;
  IVFVectorIndexTemplate<float,768>::childMetaInfo((uint64_t)&v54, (uint64_t)v53, (uint64_t)__dst, 1);
  if (SHIBYTE(v52) < 0)
    operator delete(__dst[0]);
  v21 = operator new();
  v22 = (_DWORD *)v21;
  v50[0] = v54;
  v50[1] = v55;
  v23 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)buf = *a2;
  *(_QWORD *)&buf[8] = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    PartitionStore<vi_onefixedsize_disk_allocator,512>::PartitionStore<vi_onefixedsize_disk_allocator>(v21, (uint64_t)v50, buf);
    do
      v26 = __ldaxr(v24);
    while (__stlxr(v26 - 1, v24));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  else
  {
    PartitionStore<vi_onefixedsize_disk_allocator,512>::PartitionStore<vi_onefixedsize_disk_allocator>(v21, (uint64_t)v50, buf);
  }
  *a3 = v22;
  v27 = (_QWORD *)operator new();
  *v27 = &off_1E6E33858;
  v27[1] = 0;
  v27[2] = 0;
  v27[3] = v22;
  a3[1] = v27;
  v28 = *(_QWORD *)(a1 + 48);
  if (*(_DWORD *)(v28 + 40))
  {
    v29 = 0;
    do
    {
      memset(buf, 0, sizeof(buf));
      v30 = *a2;
      v31 = _windowsResolvePtr(*(_QWORD *)(v28 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v28 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v28 + 32) + 16) * v29, 0x410uLL);
      (*(void (**)(uint8_t *__return_ptr, char *, unint64_t, uint64_t))(*(_QWORD *)v30 + 72))(buf, v30, v31, 1);
      (*(void (**)(_DWORD *, _QWORD, unint64_t, float))(*(_QWORD *)v22 + 56))(v22, **(_DWORD **)buf, v29, *(float *)(*(_QWORD *)buf + 4));
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      ++v29;
      v28 = *(_QWORD *)(a1 + 48);
    }
    while (v29 < *(unsigned int *)(v28 + 40));
  }
  (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v22 + 112))(v22, 0);
  v32 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 40);
  if (v32)
  {
    v33 = *__error();
    v34 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, _DWORD *))(*(_QWORD *)v22 + 144))(__p, v22);
      if (v49 >= 0)
        v35 = __p;
      else
        v35 = (void **)__p[0];
      v36 = v22[17];
      v37 = v22[18];
      v38 = *a2;
      v39 = *a2 + 8;
      if (v38[31] < 0)
        v39 = (_QWORD *)*v39;
      v40 = (*(uint64_t (**)(char *))(*(_QWORD *)v38 + 16))(v38);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = v35;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v37;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v36;
      v57 = 2080;
      v58 = v39;
      v59 = 1024;
      v60 = v40;
      _os_log_impl(&dword_1B8270000, v34, OS_LOG_TYPE_DEFAULT, "Create new partitions %s(%u/%u) for new quantizer %s(%u)", buf, 0x28u);
      if (v49 < 0)
        operator delete(__p[0]);
    }
    *__error() = v33;
    v32 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 40);
  }
  if (v22[18] != v32)
  {
    v45 = __si_assert_copy_extra_268();
    v46 = v45;
    v47 = "";
    if (v45)
      v47 = v45;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2363, "newPartitions->nVectors() == vectors->count()", v47);
    free(v46);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    goto LABEL_60;
  }
  if (v10)
  {
    v41 = (unint64_t *)&v10->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v7)
  {
    v43 = (unint64_t *)&v7->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li512EEEENS6_I17AnyPartitionStoreEE(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  std::__shared_weak_count *v8;
  __int128 *v9;
  char *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  _DWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  _DWORD *v18;
  NSObject *v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  void **v23;
  int v24;
  void **v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  const char *v47;
  char *v48;
  const char *v49;
  _QWORD *v50;
  _QWORD *v51;
  int v52;
  int v53;
  int v54;
  os_unfair_lock_s *v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *__p[2];
  char v61;
  void *v62[2];
  char v63;
  uint8_t buf[4];
  _QWORD *v65;
  __int16 v66;
  int v67;
  __int16 v68;
  _QWORD *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  void **v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  void **v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v6 = (os_unfair_lock_s *)(a1 + 152);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
  v7 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v10 = *(char **)(a1 + 80);
  v8 = *(std::__shared_weak_count **)(a1 + 88);
  v9 = (__int128 *)(a1 + 80);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(_DWORD **)(a1 + 96);
  v13 = *(std::__shared_weak_count **)(a1 + 104);
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
  v18 = (_DWORD *)*a3;
  if (v17 != *(_DWORD *)(*a3 + 68))
  {
    v45 = __si_assert_copy_extra_268();
    v46 = v45;
    v47 = "";
    if (v45)
      v47 = v45;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2381, "newQuantizer->count() == newPartitions->nPartitions()", v47);
LABEL_64:
    free(v46);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 48) + 40) != v18[18])
  {
    v48 = __si_assert_copy_extra_268();
    v46 = v48;
    v49 = "";
    if (v48)
      v49 = v48;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2382, "vectors->count() == newPartitions->nVectors()", v49);
    goto LABEL_64;
  }
  if (v10 && v14)
  {
    v56 = *__error();
    v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = v10 + 8;
      if (v10[31] < 0)
        v20 = (_QWORD *)*v20;
      v51 = v20;
      v21 = (*(uint64_t (**)(char *))(*(_QWORD *)v10 + 16))(v10);
      v22 = (_QWORD *)(*a2 + 8);
      v55 = v6;
      v54 = v21;
      if (*(char *)(*a2 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v50 = v22;
      v53 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
      v23 = v62;
      (*(void (**)(void **__return_ptr, _DWORD *))(*(_QWORD *)v14 + 144))(v62, v14);
      if (v63 < 0)
        v23 = (void **)v62[0];
      v24 = v14[18];
      v52 = v14[17];
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a3 + 144))(__p);
      v25 = __p;
      if (v61 < 0)
        v25 = (void **)__p[0];
      v26 = *(_DWORD *)(*a3 + 68);
      v27 = *(_DWORD *)(*a3 + 72);
      *(_DWORD *)buf = 136317442;
      v65 = v51;
      v66 = 1024;
      v67 = v54;
      v68 = 2080;
      v69 = v50;
      v70 = 1024;
      v71 = v53;
      v72 = 2080;
      v73 = v23;
      v74 = 1024;
      v75 = v24;
      v76 = 1024;
      v77 = v52;
      v78 = 2080;
      v79 = v25;
      v80 = 1024;
      v81 = v27;
      v82 = 1024;
      v83 = v26;
      _os_log_impl(&dword_1B8270000, v19, OS_LOG_TYPE_DEFAULT, "Replace quantizer %s(%u) -> %s(%u), partitions %s(%u/%u) -> %s(%u/%u)", buf, 0x4Eu);
      if (v61 < 0)
        operator delete(__p[0]);
      v6 = v55;
      if (v63 < 0)
        operator delete(v62[0]);
    }
    *__error() = v56;
    v18 = (_DWORD *)*a3;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v18 + 24))(v18))
    v28 = v14 == 0;
  else
    v28 = 1;
  if (!v28 && (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v14 + 24))(v14))
    (*(void (**)(_QWORD, _DWORD *))(*(_QWORD *)*a3 + 168))(*a3, v14);
  v29 = a2[1];
  *(_QWORD *)&v57 = *a2;
  *((_QWORD *)&v57 + 1) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = (std::__shared_weak_count *)a3[1];
  v58 = *a3;
  v59 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  os_unfair_lock_lock(v7);
  std::swap[abi:nn180100]<IVFVectorIndexTemplate<float,768>::QuantizerPartitions>(v9, &v57);
  os_unfair_lock_unlock(v7);
  v35 = v59;
  if (v59)
  {
    v36 = (unint64_t *)&v59->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  os_unfair_lock_unlock(v6);
  if (v13)
  {
    v41 = (unint64_t *)&v13->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v8)
  {
    v43 = (unint64_t *)&v8->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

_QWORD *_ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *a1 = &off_1E6E33B40;
  v2 = (std::__shared_weak_count *)a1[13];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[11];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[11];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[9];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[7];
    if (!v11)
      return a1;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[7];
    if (!v11)
      return a1;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return a1;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E339E8;
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev((_QWORD *)(a1 + 48));
  *(_QWORD *)a1 = off_1E6E30C80;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EED0Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E339E8;
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev((_QWORD *)(a1 + 48));
  *(_QWORD *)a1 = off_1E6E30C80;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCCB06A4);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE8nVectorsEv(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1 + 48);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE11nPartitionsEv(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1 + 48);
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE8allExistEPKvj(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  float v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  char *v14;
  char *v15;
  const char *v16;
  uint8_t buf[4];
  double v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a3)
  {
    v5 = a1 + 48;
    v6 = a3;
    if (a3 <= 0x3E8)
    {
      while (_ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li512EE(v5, a2))
      {
        a2 += 1024;
        if (!--v6)
          return a3;
      }
    }
    else
    {
      v7 = 0;
      v8 = a3 / 0xA;
      v9 = 1.0 / (float)a3;
      while (1)
      {
        v10 = v7 + 1;
        if (!(((int)v7 + 1) % v8))
        {
          v11 = *__error();
          v12 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            v18 = (float)((float)((float)v7 * 100.0) * v9);
            _os_log_impl(&dword_1B8270000, v12, OS_LOG_TYPE_DEFAULT, "allExist: %.0f%%", buf, 0xCu);
          }
          *__error() = v11;
        }
        if (!_ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li512EE(v5, a2))break;
        a2 += 1024;
        ++v7;
        if (a3 == v10)
          return a3;
      }
    }
    v14 = __si_assert_copy_extra_268();
    v15 = v14;
    v16 = "";
    if (v14)
      v16 = v14;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3151, "false", v16);
    free(v15);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a3;
}

BOOL _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE12validAddressEPKv(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 32);
  v3 = *(unsigned int *)(v2 + 64);
  if ((int)v3 < 1)
  {
    v8 = -1;
  }
  else
  {
    v4 = 11;
    do
    {
      v5 = *(_QWORD **)(v2 + 8 * v4);
      if (v5 && (v6 = v5[1], v6 + 1 >= 2) && v6 <= a2 && (v7 = v5[2], v6 - v7 + v5[3] > a2))
        v8 = a2 - v6 + v7;
      else
        v8 = -1;
      if (v4 - 10 >= v3)
        break;
      ++v4;
    }
    while (v8 == -1);
  }
  return v8 != -1;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE6shadowEbPVi(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  os_unfair_lock_s *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v6 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v7 = *(std::__shared_weak_count **)(a1 + 136);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v11 = *(_QWORD *)(a1 + 144);
  v10 = *(std::__shared_weak_count **)(a1 + 152);
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v11 + 160))(v11, a2, a3);
  v14 = vi_onefixedsize_disk_allocator::shadow(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32), a2, a3);
  if (!v10)
    goto LABEL_11;
  v15 = (unint64_t *)&v10->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v7)
      return v14;
  }
  else
  {
LABEL_11:
    if (!v7)
      return v14;
  }
  v17 = (unint64_t *)&v7->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v14;
}

_DWORD *_ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE17bulkInsertForTestEPKvPKjjS8_(_DWORD *result, char *a2, unsigned int *a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint8_t buf[4];
  double v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v8 = (uint64_t)(result + 12);
    v9 = a4;
    if (a4 <= 0x3E8)
    {
      do
      {
        v19 = *a5++;
        v18 = v19;
        v20 = *a3++;
        result = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb(v8, v18, a2, 0xFFFFFFFFLL, 0, 3.4028e38);
        *((_QWORD *)result + 128) = v20;
        a2 += 1024;
        --v9;
      }
      while (v9);
    }
    else
    {
      v10 = 0;
      v11 = a4 / 0xA;
      v12 = 1.0 / (float)a4;
      do
      {
        v15 = v10 + 1;
        if (!(((int)v10 + 1) % v11))
        {
          v16 = *__error();
          v17 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            v22 = (float)((float)((float)v10 * 100.0) * v12);
            _os_log_impl(&dword_1B8270000, v17, OS_LOG_TYPE_DEFAULT, "bulkInsertForTest: %.0f%%", buf, 0xCu);
          }
          *__error() = v16;
        }
        v13 = a5[v10];
        v14 = a3[v10];
        result = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb(v8, v13, a2, 0xFFFFFFFFLL, 0, 3.4028e38);
        *((_QWORD *)result + 128) = v14;
        a2 += 1024;
        v10 = v15;
      }
      while (v9 != v15);
    }
  }
  return result;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE12insertVectorEjjPKv14vec_dimensions15vec_data_format14docInvertStateyP15PostingBaseInfo(_DWORD *a1, int a2, unsigned int a3, void *a4, int a5, int a6)
{
  char *v6;
  char *v7;
  const char *v8;
  char *v9;
  const char *v10;

  if (a1[2] == a2
    && a6 <= 2
    && a1[3] == vector_dimension_vec_sizes_10743[a5]
    && vector_size_elem_sizes_10742[a6] == a1[4])
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFFLL, 0, 3.4028e38);
    v6 = __si_assert_copy_extra_268();
    v7 = v6;
    v8 = "";
    if (v6)
      v8 = v6;
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2636, "0", v8);
  }
  else
  {
    v9 = __si_assert_copy_extra_268();
    v7 = v9;
    v10 = "";
    if (v9)
      v10 = v9;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v10);
  }
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE14insertForMergeEjtjPKv14vec_dimensions15vec_data_formatyjf(uint64_t a1, int a2, int a3, unsigned int a4, void *a5, int a6, int a7, uint64_t a8, float a9, unsigned int a10)
{
  char *v11;
  char *v12;
  const char *v13;

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a7 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a6]
    || vector_size_elem_sizes_10742[a7] != *(_DWORD *)(a1 + 16))
  {
    v11 = __si_assert_copy_extra_268();
    v12 = v11;
    v13 = "";
    if (v11)
      v13 = v11;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v13);
    free(v12);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16insertForCompactEjPK10CIVector_sIDF16_Li512EEyjf(a1 + 48, a4, a5, a8, a10, a9);
  return 1;
}

_DWORD *_ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE13insertForTestEjjPKv14vec_dimensions15vec_data_formatj(_DWORD *a1, int a2, unsigned int a3, void *a4, int a5, int a6, unsigned int a7)
{
  uint64_t v7;
  _DWORD *result;
  char *v9;
  char *v10;
  const char *v11;

  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != a1[4])
  {
    v9 = __si_assert_copy_extra_268();
    v10 = v9;
    v11 = "";
    if (v9)
      v11 = v9;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v11);
    free(v10);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v7 = a7;
  result = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFFLL, 0, 3.4028e38);
  *((_QWORD *)result + 128) = v7;
  return result;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE5trainERKNSt3__16vectorIP22AnyVectorIndexInstanceNS5_9allocatorIS8_EEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  char *v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  char *v30;
  char *v31;
  const char *v32;
  char *v33;
  char *v34;
  const char *v35;
  char *v36;
  const char *v37;
  uint64_t v38;
  void *__p;
  _QWORD *v40;
  char *v41;

  v3 = *(_QWORD **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  v4 = v2 - *(_QWORD *)a2;
  if (v2 == *(_QWORD *)a2)
  {
    v33 = __si_assert_copy_extra_268();
    v34 = v33;
    v35 = "";
    if (v33)
      v35 = v33;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3170, "vi.size() > 0", v35);
    goto LABEL_53;
  }
  if (*v3 != a1)
  {
    v36 = __si_assert_copy_extra_268();
    v34 = v36;
    v37 = "";
    if (v36)
      v37 = v36;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3171, "this == vi[0]", v37);
LABEL_53:
    free(v34);
    if (__valid_fs(-1))
      v38 = 2989;
    else
      v38 = 3072;
    *(_DWORD *)v38 = -559038737;
LABEL_57:
    abort();
  }
  v7 = (char *)operator new(8uLL);
  *(_QWORD *)v7 = a1 + 48;
  v8 = v7 + 8;
  v40 = v7 + 8;
  v41 = v7 + 8;
  __p = v7;
  if (v4 < 9)
    goto LABEL_39;
  v9 = 1;
  do
  {
    v11 = v3[v9];
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(v11 + 8)
      || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(v11 + 20)
      || *(_DWORD *)(a1 + 12) != *(_DWORD *)(v11 + 12)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(v11 + 16))
    {
      v30 = __si_assert_copy_extra_268();
      v31 = v30;
      v32 = "";
      if (v30)
        v32 = v30;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v32);
      free(v31);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v12 = v11 + 48;
    if (v8 < v41)
    {
      *(_QWORD *)v8 = v12;
      v10 = v8 + 8;
      goto LABEL_6;
    }
    v13 = (char *)__p;
    v14 = v8 - (_BYTE *)__p;
    v15 = (v8 - (_BYTE *)__p) >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      goto LABEL_57;
    v17 = v41 - (_BYTE *)__p;
    if ((v41 - (_BYTE *)__p) >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = operator new(8 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = v12;
    v10 = v20 + 1;
    if (v8 == v13)
    {
      __p = &v19[8 * v15];
      v41 = v21;
LABEL_33:
      operator delete(v8);
      goto LABEL_6;
    }
    v22 = v8 - 8 - v13;
    if (v22 > 0x167
      && &v19[v14 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] <= &v19[v14 - 8]
      && &v8[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] <= v8 - 8
      && (unint64_t)(v8 - v19 - v14) >= 0x20)
    {
      v25 = (v22 >> 3) + 1;
      v23 = &v8[-8 * (v25 & 0x3FFFFFFFFFFFFFFCLL)];
      v26 = &v19[8 * v15 - 16];
      v27 = v8 - 16;
      v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v20 -= v25 & 0x3FFFFFFFFFFFFFFCLL;
      if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_30;
    }
    else
    {
      v23 = v8;
    }
    do
    {
      v24 = *((_QWORD *)v23 - 1);
      v23 -= 8;
      *--v20 = v24;
    }
    while (v23 != v13);
    v13 = (char *)__p;
LABEL_30:
    __p = v20;
    v41 = v21;
    v8 = v13;
    if (v13)
      goto LABEL_33;
LABEL_6:
    v40 = v10;
    ++v9;
    v3 = *(_QWORD **)a2;
    v8 = (char *)v10;
  }
  while (v9 < (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v7 = (char *)__p;
LABEL_39:
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(_QWORD *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)&__p);
  if (v7)
    operator delete(v7);
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE14mergeUpdateSetEPK22AnyVectorIndexInstanceP15PostingBaseInfoP17TermIdContainer_s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _DWORD *inserted;
  uint64_t v26;
  uint64_t result;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  const char *v36;
  char *v37;
  const char *v38;
  _DWORD v39[4];
  void *__src;
  uint64_t v41;
  uint8_t buf[1024];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v37 = __si_assert_copy_extra_268();
    v35 = v37;
    v38 = "";
    if (v37)
      v38 = v37;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v38);
LABEL_38:
    free(v35);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v7 = *__error();
  v8 = _SILogForLogForCategory(16);
  v9 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v10;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v11;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v12;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&buf[22] = v13;
    _os_log_impl(&dword_1B8270000, v8, v9, "mergeUpdateSet(termIds) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v7;
  v14 = a2 + 48;
  v15 = operator new(0x10uLL);
  *(_QWORD *)&buf[8] = v15 + 2;
  *(_QWORD *)&buf[16] = v15 + 2;
  *v15 = a1 + 48;
  v15[1] = v14;
  *(_QWORD *)buf = v15;
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(_QWORD *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)buf);
  operator delete(v15);
  v16 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(v14);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::beginMerge(a1 + 48);
  while (1)
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::next((uint64_t)v39, v16);
    if (!__src)
      break;
    v17 = v39[0];
    v18 = *(float *)&v39[1];
    v19 = v39[2];
    v20 = v41;
    memcpy(buf, __src, sizeof(buf));
    v22 = *(_QWORD *)(a4 + 8);
    v21 = *(_QWORD *)(a4 + 16);
    v23 = v22 + 1;
    if (v22 + 1 < v21)
    {
      v24 = *(_QWORD **)a4;
      goto LABEL_17;
    }
    if (v21)
    {
      if (v23 >= v21)
        goto LABEL_14;
    }
    else
    {
      *(_QWORD *)(a4 + 16) = 1024;
      v21 = 1024;
      if (v23 >= 0x400)
      {
        do
LABEL_14:
          v21 *= 2;
        while (v23 >= v21);
        *(_QWORD *)(a4 + 16) = v21;
      }
    }
    v24 = malloc_type_realloc(*(void **)a4, 24 * v21, 0x10200409F4E64B8uLL);
    *(_QWORD *)a4 = v24;
    v22 = *(_QWORD *)(a4 + 8);
    v23 = v22 + 1;
LABEL_17:
    v24[3 * v22 + 1] = v20;
    *(_QWORD *)(a4 + 8) = v23;
    if (*(_DWORD *)(a1 + 204) == -1)
    {
      v34 = __si_assert_copy_extra_268();
      v35 = v34;
      v36 = "";
      if (v34)
        v36 = v34;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2689, "mergeBeginVectorOffset < VECTOR_NOT_FOUND", v36);
      goto LABEL_38;
    }
    inserted = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb(a1 + 48, v19, buf, v17, 0, v18);
    v26 = *((_QWORD *)inserted + 128);
    if (!v26)
    {
      v26 = (*(_DWORD *)(a4 + 24) + 1);
      *(_DWORD *)(a4 + 24) = v26;
      *((_QWORD *)inserted + 128) = v26;
    }
    *(_DWORD *)(*(_QWORD *)a4 + 24 * v22) = v26;
  }
  result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::endMerge(a1 + 48);
  if (v16)
  {
    std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100](v16 + 32);
    v28 = *(std::__shared_weak_count **)(v16 + 24);
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = *(std::__shared_weak_count **)(v16 + 8);
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    return MEMORY[0x1BCCB06A4](v16, 0x10A0C40B50FE552);
  }
  return result;
}

int *_ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE14mergeUpdateSetEPK22AnyVectorIndexInstanceP15PostingBaseInfojy(int *result, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  const char *v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char *v14;
  const char *v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (result[2] != *(_DWORD *)(a2 + 8)
    || (v3 = result, *((unsigned __int16 *)result + 10) != *(unsigned __int16 *)(a2 + 20))
    || result[3] != *(_DWORD *)(a2 + 12)
    || result[4] != *(_DWORD *)(a2 + 16))
  {
    v5 = __si_assert_copy_extra_268();
    v6 = v5;
    v7 = "";
    if (v5)
      v7 = v5;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v7);
LABEL_11:
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (dword_1EF19FCCC >= 5)
  {
    v8 = *__error();
    v9 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (*(uint64_t (**)(int *))(*(_QWORD *)v3 + 16))(v3);
      v11 = (*(uint64_t (**)(int *))(*(_QWORD *)v3 + 24))(v3);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      *(_DWORD *)buf = 67109888;
      v17 = v10;
      v18 = 1024;
      v19 = v11;
      v20 = 1024;
      v21 = v12;
      v22 = 1024;
      v23 = v13;
      _os_log_impl(&dword_1B8270000, v9, OS_LOG_TYPE_DEFAULT, "mergeUpdateSet(DocID) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    result = __error();
    *result = v8;
  }
  v4 = *(_QWORD *)(a2 + 80);
  if (*(_DWORD *)(v4 + 24))
  {
    IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v4, 0);
    IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v4, 0);
    IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v4, 0);
    v14 = __si_assert_copy_extra_268();
    v6 = v14;
    v15 = "";
    if (v14)
      v15 = v14;
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2447, "0", v15);
    goto LABEL_11;
  }
  return result;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE21mergeUpdateSetForTestEPK22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *inserted;
  uint64_t v18;
  uint64_t result;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  const char *v28;
  char *v29;
  const char *v30;
  uint8_t buf[8];
  _QWORD *v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v26 = __si_assert_copy_extra_268();
    v27 = v26;
    v28 = "";
    if (v26)
      v28 = v26;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v28);
LABEL_32:
    free(v27);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  v6 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v7;
    LOWORD(v32) = 1024;
    *(_DWORD *)((char *)&v32 + 2) = v8;
    HIWORD(v32) = 1024;
    LODWORD(v33) = v9;
    WORD2(v33) = 1024;
    *(_DWORD *)((char *)&v33 + 6) = v10;
    _os_log_impl(&dword_1B8270000, v5, v6, "mergeUpdateSetForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v4;
  v11 = operator new(0x10uLL);
  v32 = v11 + 2;
  *(_QWORD *)&v33 = v11 + 2;
  *v11 = a1 + 48;
  v11[1] = a2 + 48;
  *(_QWORD *)buf = v11;
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(_QWORD *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)buf);
  operator delete(v11);
  v12 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::beginMerge(a1 + 48);
  v15 = 0;
  while (1)
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::next((uint64_t)buf, v12);
    if (!(_QWORD)v33)
      break;
    v16 = *(unsigned int *)(*((_QWORD *)&v33 + 1) + 8);
    inserted = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb(a1 + 48, v32, (void *)v33, *(unsigned int *)buf, 0, *(float *)&buf[4]);
    v18 = *((_QWORD *)inserted + 128);
    *((_QWORD *)inserted + 128) = v16;
    if (v18)
      ++v15;
  }
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::endMerge(a1 + 48);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result + v15 != v14 + v13)
  {
    v29 = __si_assert_copy_extra_268();
    v27 = v29;
    v30 = "";
    if (v29)
      v30 = v29;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3267, "nVectors() + dup == old + added", v30);
    goto LABEL_32;
  }
  if (v12)
  {
    std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100](v12 + 32);
    v20 = *(std::__shared_weak_count **)(v12 + 24);
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = *(std::__shared_weak_count **)(v12 + 8);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    return MEMORY[0x1BCCB06A4](v12, 0x10A0C40B50FE552);
  }
  return result;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE17mergeIndexForTestEP22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  float v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  _DWORD *inserted;
  uint64_t v17;
  uint64_t result;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  const char *v27;
  char *v28;
  const char *v29;
  uint8_t buf[4];
  float v31;
  _BYTE v32[6];
  __int16 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v25 = __si_assert_copy_extra_268();
    v26 = v25;
    v27 = "";
    if (v25)
      v27 = v25;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v27);
LABEL_32:
    free(v26);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  v6 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v5, v6))
  {
    LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    v31 = v7;
    *(_WORD *)v32 = 1024;
    *(_DWORD *)&v32[2] = v8;
    v33 = 1024;
    LODWORD(v34) = v9;
    WORD2(v34) = 1024;
    *(_DWORD *)((char *)&v34 + 6) = v10;
    _os_log_impl(&dword_1B8270000, v5, v6, "mergeIndexForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v4;
  v11 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator(a2 + 48);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::beginMerge(a1 + 48);
  v14 = 0;
  while (1)
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next((uint64_t)buf, v11);
    if (!(_QWORD)v34)
      break;
    v15 = **((_QWORD **)&v34 + 1);
    inserted = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb(a1 + 48, *(unsigned int *)v32, (void *)v34, *(unsigned int *)buf, 0, v31);
    v17 = *((_QWORD *)inserted + 128);
    *((_QWORD *)inserted + 128) = v15;
    if (v17)
      ++v14;
  }
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::endMerge(a1 + 48);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result + v14 != v13 + v12)
  {
    v28 = __si_assert_copy_extra_268();
    v26 = v28;
    v29 = "";
    if (v28)
      v29 = v28;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3281, "nVectors() + dup == old + added", v29);
    goto LABEL_32;
  }
  if (v11)
  {
    std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100](v11 + 32);
    v19 = *(std::__shared_weak_count **)(v11 + 24);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = *(std::__shared_weak_count **)(v11 + 8);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    return MEMORY[0x1BCCB06A4](v11, 0x10A0C40B50FE552);
  }
  return result;
}

void _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE4dumpEbbPViPvU13block_pointerFbjPKvybjfE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  os_unfair_lock_s *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD v37[2];
  uint64_t (*v38)(uint64_t, uint64_t, BOOL *);
  void *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[3];
  __int128 v48;
  __int128 v49;
  char v50;
  __int128 v51;
  __int128 v52;

  v9 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v10 = *(std::__shared_weak_count **)(a1 + 136);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(_QWORD *)(a1 + 144);
  v13 = *(std::__shared_weak_count **)(a1 + 152);
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  os_unfair_lock_unlock(v9);
  v46 = 0u;
  memset(v47, 0, sizeof(v47));
  v45 = 0u;
  v43 = v14;
  v44 = v13;
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(_QWORD *)(a1 + 96);
  v20 = *(std::__shared_weak_count **)(a1 + 104);
  v42[0] = v19;
  v42[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v45, &v43, v42);
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v45, &v43, v42);
  }
  v24 = v44;
  if (v44)
  {
    v25 = (unint64_t *)&v44->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 0x40000000;
  v38 = ___ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke;
  v39 = &unk_1E6E33C50;
  v40 = a6;
  v41 = a4;
  v51 = 0u;
  v52 = 0u;
  v50 = 0;
  do
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next((uint64_t)&v48, (uint64_t)&v45);
    v51 = v48;
    v52 = v49;
    if (!(_QWORD)v49)
      break;
    v38((uint64_t)v37, (uint64_t)&v51, (BOOL *)&v50);
  }
  while (!v50);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v47);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (!*((_QWORD *)&v46 + 1))
    goto LABEL_30;
  v28 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (!*((_QWORD *)&v45 + 1))
      goto LABEL_36;
  }
  else
  {
LABEL_30:
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (!*((_QWORD *)&v45 + 1))
      goto LABEL_36;
  }
  v31 = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  if (!v13)
    goto LABEL_40;
LABEL_36:
  v33 = (unint64_t *)&v13->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!v10)
      return;
  }
  else
  {
LABEL_40:
    if (!v10)
      return;
  }
  v35 = (unint64_t *)&v10->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE5flushEy(uint64_t a1, uint64_t a2)
{
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, a2);
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE7compactEP22AnyVectorIndexInstanceP12uint32_map_tP11TermIdStore18CICompactCallbacksPVi(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  int v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  const char *v53;
  char *v54;
  const char *v55;
  int v56;
  __int128 v59;
  __int128 v60;
  _QWORD v61[2];
  uint64_t v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  __int128 v65;
  _OWORD v66[3];
  _QWORD v67[3];
  char v68;
  uint64_t v69[2];
  void *__p[3];
  __int128 v71;
  __int128 v72;
  char v73;
  __int128 v74;
  __int128 v75;
  uint8_t buf[8];
  uint64_t v77;
  __int128 v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v10 = *__error();
  v11 = _SILogForLogForCategory(16);
  v12 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v11, v12))
  {
    v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v13 = a4;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v56;
    LOWORD(v77) = 1024;
    *(_DWORD *)((char *)&v77 + 2) = v14;
    a4 = v13;
    HIWORD(v77) = 1024;
    LODWORD(v78) = v15;
    WORD2(v78) = 1024;
    *(_DWORD *)((char *)&v78 + 6) = v16;
    _os_log_impl(&dword_1B8270000, v11, v12, "compact %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v10;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v51 = __si_assert_copy_extra_268();
    v52 = v51;
    v53 = "";
    if (v51)
      v53 = v51;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v53);
LABEL_70:
    free(v52);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v59 = *a5;
  v60 = a5[1];
  v17 = a2 + 48;
  if (IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a2 + 48))
  {
    v54 = __si_assert_copy_extra_268();
    v52 = v54;
    v55 = "";
    if (v54)
      v55 = v54;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2566, "target->nVectors() == 0", v55);
    goto LABEL_70;
  }
  v18 = operator new(8uLL);
  __p[0] = v18;
  *v18 = a1 + 48;
  __p[1] = v18 + 1;
  __p[2] = v18 + 1;
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(_QWORD *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)__p);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v20 = *(_QWORD *)(a1 + 128);
  v19 = *(std::__shared_weak_count **)(a1 + 136);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v23 = *(_QWORD *)(a1 + 144);
  v24 = *(std::__shared_weak_count **)(a1 + 152);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  v69[0] = v20;
  v69[1] = (uint64_t)v19;
  if (v19)
  {
    v27 = (unint64_t *)&v19->__shared_owners_;
    v28 = a3;
    do
      v29 = __ldxr(v27);
    while (__stxr(v29 + 1, v27));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(v17, v69);
    do
      v30 = __ldaxr(v27);
    while (__stlxr(v30 - 1, v27));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(v17, v69);
    v28 = a3;
  }
  v67[0] = 0;
  v67[1] = v67;
  v67[2] = 0x2000000000;
  v68 = 1;
  v65 = 0u;
  memset(v66, 0, sizeof(v66));
  v64 = 0u;
  v62 = v23;
  v63 = v24;
  if (v24)
  {
    v31 = (unint64_t *)&v24->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = *(_QWORD *)(a1 + 96);
  v34 = *(std::__shared_weak_count **)(a1 + 104);
  v61[0] = v33;
  v61[1] = v34;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v64, &v62, v61);
    do
      v37 = __ldaxr(v35);
    while (__stlxr(v37 - 1, v35));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v64, &v62, v61);
  }
  v38 = v63;
  if (v63)
  {
    v39 = (unint64_t *)&v63->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v77 = 0x40000000;
  *(_QWORD *)&v78 = ___ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE7compactIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_P12uint32_map_tP11TermIdStore18CICompactCallbacksPVi_block_invoke;
  *((_QWORD *)&v78 + 1) = &unk_1E6E33C78;
  v79 = v67;
  v80 = v28;
  v81 = a4;
  v82 = v17;
  v83 = a6;
  v84 = v59;
  v85 = v60;
  v74 = 0u;
  v75 = 0u;
  v73 = 0;
  do
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next((uint64_t)&v71, (uint64_t)&v64);
    v74 = v71;
    v75 = v72;
    if (!(_QWORD)v72)
      break;
    ((void (*)(uint8_t *, __int128 *, char *))v78)(buf, &v74, &v73);
  }
  while (!v73);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v66);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
  if (*((_QWORD *)&v64 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  _Block_object_dispose(v67, 8);
  if (v24)
  {
    v47 = (unint64_t *)&v24->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v19)
  {
    v49 = (unint64_t *)&v19->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p[0])
    operator delete(__p[0]);
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE14compactForTestEP22AnyVectorIndexInstancePVi(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  NSObject *v7;
  os_log_type_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  const char *v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v13 = __si_assert_copy_extra_268();
    v14 = v13;
    v15 = "";
    if (v13)
      v15 = v13;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v6 = *__error();
  v7 = _SILogForLogForCategory(16);
  v8 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    v22 = 1024;
    v23 = v12;
    _os_log_impl(&dword_1B8270000, v7, v8, "compactForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v6;
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi(a1 + 48, a2 + 48, a3);
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE7subvertEPK22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  const char *v28;

  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v26 = __si_assert_copy_extra_268();
    v27 = v26;
    v28 = "";
    if (v26)
      v28 = v26;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v28);
    free(v27);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = *(_QWORD *)(a1 + 144);
  v7 = *(std::__shared_weak_count **)(a1 + 152);
  if (v7)
  {
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 160));
  v13 = *(std::__shared_weak_count **)(a2 + 136);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v17 = *(_QWORD *)(a2 + 144);
  v16 = *(std::__shared_weak_count **)(a2 + 152);
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 160));
  if (v13)
  {
    v20 = (unint64_t *)&v13->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 168))(v8, v17);
  vi_onefixedsize_disk_allocator::subvert(*(_QWORD *)(*(_QWORD *)(a2 + 96) + 32), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 32));
  if (!v16)
    goto LABEL_31;
  v22 = (unint64_t *)&v16->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!v7)
      return;
  }
  else
  {
LABEL_31:
    if (!v7)
      return;
  }
  v24 = (unint64_t *)&v7->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

BOOL _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE6unlinkEv(uint64_t a1)
{
  os_unfair_lock_s *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  _BOOL8 v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v23;
  _QWORD *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a1 + 144);
  v6 = *(std::__shared_weak_count **)(a1 + 152);
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  os_unfair_lock_unlock(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  v10 = *(_QWORD *)(a1 + 96);
  v11 = *__error();
  v12 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = (_QWORD *)(v10 + 56);
    if (*(char *)(v10 + 79) < 0)
      v13 = (_QWORD *)*v13;
    v14 = *(_DWORD *)(v10 + 40);
    v15 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v10 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24), 0x410uLL)+ 1032);
    v16 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v10 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(v10 + 32) + 16) * (*(_DWORD *)(v10 + 40) - 1), 0x410uLL)+ 1032);
    v23 = 136315906;
    v24 = v13;
    v25 = 1024;
    v26 = v14;
    v27 = 1024;
    v28 = v15;
    v29 = 1024;
    v30 = v16;
    _os_log_impl(&dword_1B8270000, v12, OS_LOG_TYPE_DEFAULT, "unlink VectorStore %s(%u)[%u,%u]", (uint8_t *)&v23, 0x1Eu);
  }
  *__error() = v11;
  v17 = vi_onefixedsize_disk_allocator::unlinkStorage(*(_QWORD *)(v10 + 32));
  if (v6)
  {
    v18 = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v17;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE8truncateEv(uint64_t a1)
{
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  os_unfair_lock_s *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint8_t v16[16];

  if (*(_BYTE *)(a1 + 208))
  {
    v1 = *__error();
    v2 = _SILogForLogForCategory(16);
    v3 = dword_1EF19FCCC < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1EF19FCCC < 3)))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1B8270000, v2, v3, "*warn* call truncate on readOnly index.", v16, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, 0);
    IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::truncate(*(_QWORD *)(a1 + 96));
    v5 = (os_unfair_lock_s *)(a1 + 160);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
    v6 = *(std::__shared_weak_count **)(a1 + 136);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v10 = *(_QWORD *)(a1 + 144);
    v9 = *(std::__shared_weak_count **)(a1 + 152);
    if (v9)
    {
      v11 = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      os_unfair_lock_unlock(v5);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      os_unfair_lock_unlock(v5);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
    }
    if (v6)
    {
      v14 = (unint64_t *)&v6->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE12makeReadOnlyEv(uint64_t a1)
{
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v5;
  int v6;
  NSObject *v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  int *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  _QWORD *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 208))
  {
    v1 = *__error();
    v2 = _SILogForLogForCategory(16);
    v3 = dword_1EF19FCCC < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1EF19FCCC < 3)))
    {
      LOWORD(v29) = 0;
      _os_log_impl(&dword_1B8270000, v2, v3, "*warn* call makeReadOnly on readOnly index.", (uint8_t *)&v29, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, 0);
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *__error();
    v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = (_QWORD *)(v5 + 56);
      if (*(char *)(v5 + 79) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_DWORD *)(v5 + 40);
      v10 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v5 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 24), 0x410uLL)+ 1032);
      v11 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v5 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(v5 + 32) + 16) * (*(_DWORD *)(v5 + 40) - 1), 0x410uLL)+ 1032);
      v29 = 136315906;
      v30 = v8;
      v31 = 1024;
      v32 = v9;
      v33 = 1024;
      v34 = v10;
      v35 = 1024;
      v36 = v11;
      _os_log_impl(&dword_1B8270000, v7, OS_LOG_TYPE_DEFAULT, "makeReadOnly VectorStore %s(%u)[%u,%u]", (uint8_t *)&v29, 0x1Eu);
    }
    *__error() = v6;
    IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_disk_allocator,vi_disk_postings>::truncate(v5);
    v12 = *(_QWORD *)(v5 + 32);
    fd_make_readonly(*(_QWORD *)(v12 + 40));
    v13 = *(_QWORD *)(v12 + 40);
    if (v13)
    {
      do
      {
        v14 = fchmodat(*(_DWORD *)(v13 + 44), *(const char **)(v13 + 72), 0x100u, 2048);
        v15 = g_prot_error_callback;
        if (v14 != -1 || g_prot_error_callback == 0)
          break;
        v17 = *(unsigned int *)(v13 + 40);
        v18 = __error();
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v15 + 16))(v15, v17, *v18, 19) & 1) != 0);
    }
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
    v19 = *(std::__shared_weak_count **)(a1 + 136);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    v23 = *(_QWORD *)(a1 + 144);
    v22 = *(std::__shared_weak_count **)(a1 + 152);
    if (v22)
    {
      v24 = (unint64_t *)&v22->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 120))(v23);
      *(_BYTE *)(a1 + 208) = 1;
      do
        v26 = __ldaxr(v24);
      while (__stlxr(v26 - 1, v24));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 120))(v23);
      *(_BYTE *)(a1 + 208) = 1;
    }
    if (v19)
    {
      v27 = (unint64_t *)&v19->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE13makePurgeableEv(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  _QWORD *v5;
  int v6;
  int v7;
  int v8;
  os_unfair_lock_s *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 96);
  v3 = *__error();
  v4 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (_QWORD *)(v2 + 56);
    if (*(char *)(v2 + 79) < 0)
      v5 = (_QWORD *)*v5;
    v6 = *(_DWORD *)(v2 + 40);
    v7 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v2 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v2 + 32) + 24), 0x410uLL)
                   + 1032);
    v8 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v2 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v2 + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(v2 + 32) + 16) * (*(_DWORD *)(v2 + 40) - 1), 0x410uLL)+ 1032);
    v20 = 136315906;
    v21 = v5;
    v22 = 1024;
    v23 = v6;
    v24 = 1024;
    v25 = v7;
    v26 = 1024;
    v27 = v8;
    _os_log_impl(&dword_1B8270000, v4, OS_LOG_TYPE_DEFAULT, "makePurgeable VectorStore %s(%u)[%u,%u]", (uint8_t *)&v20, 0x1Eu);
  }
  *__error() = v3;
  fd_mark_purgable(*(_DWORD **)(*(_QWORD *)(v2 + 32) + 40));
  v9 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v10 = *(std::__shared_weak_count **)(a1 + 136);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(_QWORD *)(a1 + 144);
  v13 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v13)
  {
    os_unfair_lock_unlock(v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 128))(v14);
    if (!v10)
      return;
    goto LABEL_18;
  }
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  os_unfair_lock_unlock(v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 128))(v14);
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v10)
  {
LABEL_18:
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE6renameEPKc(uint64_t a1, const char *a2)
{
  int v4;
  NSObject *v5;
  size_t v6;
  std::string::size_type v7;
  std::string *p_buf;
  uint64_t v9;
  uint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  _QWORD *v23;
  int v24;
  int v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::string::value_type __s[23];
  char v32;
  std::string v33;
  std::string buf;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    _os_log_impl(&dword_1B8270000, v5, OS_LOG_TYPE_DEFAULT, "rename: %s", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v4;
  v6 = strlen(a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_buf = (std::string *)operator new(v9 + 1);
    buf.__r_.__value_.__l.__size_ = v7;
    buf.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_10;
  }
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = v6;
  p_buf = &buf;
  if (v6)
LABEL_10:
    memcpy(p_buf, a2, v7);
  p_buf->__r_.__value_.__s.__data_[v7] = 0;
  v32 = 11;
  strcpy(__s, ".partitions");
  memset(&v33, 0, sizeof(v33));
  v11 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v33, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  else
    v33 = buf;
  std::string::append(&v33, __s, 0xBuLL);
  if (v32 < 0)
  {
    operator delete(*(void **)__s);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_16;
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
LABEL_16:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v12 = *(std::__shared_weak_count **)(a1 + 136);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v16 = *(_QWORD *)(a1 + 144);
  v15 = *(std::__shared_weak_count **)(a1 + 152);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v33;
  else
    v19 = (std::string *)v33.__r_.__value_.__r.__words[0];
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 152))(v16, v19);
  v20 = *(_QWORD *)(a1 + 96);
  v21 = *__error();
  v22 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v23 = (_QWORD *)(v20 + 56);
    if (*(char *)(v20 + 79) < 0)
      v23 = (_QWORD *)*v23;
    v24 = *(_DWORD *)(v20 + 40);
    v25 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v20 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v20 + 32) + 24), 0x410uLL)+ 1032);
    v26 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v20 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v20 + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(v20 + 32) + 16) * (*(_DWORD *)(v20 + 40) - 1), 0x410uLL)+ 1032);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)a2;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
    v35 = v24;
    v36 = 1024;
    v37 = v25;
    v38 = 1024;
    v39 = v26;
    _os_log_impl(&dword_1B8270000, v22, OS_LOG_TYPE_DEFAULT, "rename VectorStore %s -> %s(%u)[%u,%u]", (uint8_t *)&buf, 0x28u);
  }
  *__error() = v21;
  MEMORY[0x1BCCB03B0](v20 + 56, a2);
  fd_rename(*(_QWORD *)(*(_QWORD *)(v20 + 32) + 40), a2);
  if (v15)
  {
    v27 = (unint64_t *)&v15->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (!v12)
    goto LABEL_38;
  v29 = (unint64_t *)&v12->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (v30)
  {
LABEL_38:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
LABEL_39:
    operator delete(v33.__r_.__value_.__l.__data_);
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE14storeUpdateSetEP15RelativePostingP14store_stream_t()
{
  char *v0;
  char *v1;
  const char *v2;

  v0 = __si_assert_copy_extra_268();
  v1 = v0;
  v2 = "";
  if (v0)
    v2 = v0;
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2998, "false", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE16restoreUpdateSetEP15PostingBaseInfoP14store_stream_t()
{
  char *v0;
  char *v1;
  const char *v2;

  v0 = __si_assert_copy_extra_268();
  v1 = v0;
  v2 = "";
  if (v0)
    v2 = v0;
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3003, "false", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  char *v13;
  char *v14;
  const char *v15;
  _QWORD v16[5];

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(a1 + 16))
  {
    v13 = __si_assert_copy_extra_268();
    v14 = v13;
    v15 = "";
    if (v13)
      v15 = v13;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v9 = a1 + 48;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v16[2] = ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke;
  v16[3] = &unk_1E6E33CA0;
  v16[4] = a9;
  if ((a7 - 10001) >= 0xFFFFD8F0)
    v10 = a7;
  else
    v10 = 10000;
  v11 = operator new();
  *(_DWORD *)v11 = v10;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 8) = 0;
  _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li512EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(v9);
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNProcessResult(v11, (uint64_t)v16);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE10aNNForTestEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvjfEj(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  char *v13;
  char *v14;
  const char *v15;

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(a1 + 16))
  {
    v13 = __si_assert_copy_extra_268();
    v14 = v13;
    v15 = "";
    if (v13)
      v15 = v13;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v9 = a1 + 48;
  if ((a7 - 10001) >= 0xFFFFD8F0)
    v10 = a7;
  else
    v10 = 10000;
  v11 = operator new();
  *(_DWORD *)v11 = v10;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 8) = 0;
  _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li512EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(v9);
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNForTestProcessResult(v11, a9);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE20createCandidateQueueEj(uint64_t a1, int a2)
{
  int v2;
  uint64_t result;

  if ((a2 - 10001) >= 0xFFFFD8F0)
    v2 = a2;
  else
    v2 = 10000;
  result = operator new();
  *(_DWORD *)result = v2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

void _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE3aNNEjtPKv14vec_dimensions15vec_data_formatfbPv(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6)
{
  char *v6;
  char *v7;
  const char *v8;

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(a1 + 16))
  {
    v6 = __si_assert_copy_extra_268();
    v7 = v6;
    v8 = "";
    if (v6)
      v8 = v6;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v8);
    free(v7);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li512EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(a1 + 48);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE16aNNProcessResultEPvU13block_pointerFvS5_fE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[5];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke;
  v4[3] = &unk_1E6E33D00;
  v4[4] = a3;
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNProcessResult(a2, (uint64_t)v4);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE23aNNForTestProcessResultEPvU13block_pointerFvjfE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNForTestProcessResult(a2, a3);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE24aNNForDebugProcessResultEPvU13block_pointerFvjjfE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  __int128 *v15;
  BOOL v16;
  int v17;
  __int128 *v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  int v23;
  NSObject *v24;
  void **v25;
  __int128 *v26;
  char *v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  void **v31;
  void *v32;
  uint64_t v33;
  int v35;
  __int128 *v36;
  CFIndex AppIntegerValue;
  __int128 *v38;
  __int128 *v39;
  uint64_t v40;
  uint8_t v41[4];
  void **v42;
  void *__p[2];
  uint64_t v44;
  uint64_t v45;
  __int128 buf;
  uint64_t v47;
  _QWORD v48[8];
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v5 = *__error();
  v6 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4;
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_1B8270000, v6, OS_LOG_TYPE_DEFAULT, "search return %zu results", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v5;
  LOBYTE(buf) = 0;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("IVFANNLogQueryResult"), CFSTR("com.apple.Spotlight"), (Boolean *)&buf);
  v35 = buf;
  v61 = 0u;
  v51 = 0;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v50 = 0u;
  v49 = 0u;
  memset(v48, 0, sizeof(v48));
  v8 = MEMORY[0x1E0DE4FD0] + 104;
  v52 = MEMORY[0x1E0DE4FD0] + 104;
  v9 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v10 = MEMORY[0x1E0DE4FD0] + 64;
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v47 = MEMORY[0x1E0DE4FD0] + 64;
  *(_QWORD *)&buf = v11;
  *(_QWORD *)((char *)&buf + *(_QWORD *)(v11 - 24)) = v12;
  *((_QWORD *)&buf + 1) = 0;
  v13 = (std::ios_base *)((char *)&buf + *(_QWORD *)(buf - 24));
  std::ios_base::init(v13, v48);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v14 = v9[5];
  v47 = v9[4];
  *(_QWORD *)((char *)&v48[-1] + *(_QWORD *)(v47 - 24)) = v14;
  *(_QWORD *)&buf = v9[1];
  *(_QWORD *)((char *)&buf + *(_QWORD *)(buf - 24)) = v9[6];
  v52 = v8;
  *(_QWORD *)&buf = MEMORY[0x1E0DE4FD0] + 24;
  v47 = v10;
  std::streambuf::basic_streambuf();
  v48[0] = MEMORY[0x1E0DE4FB8] + 16;
  v49 = 0u;
  v50 = 0u;
  LODWORD(v51) = 24;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::allItems(&v38, *(_BYTE **)(a2 + 8), *(_BYTE **)(a2 + 16));
  v15 = v39;
  v36 = v38;
  if (v38 != v39)
  {
    if (AppIntegerValue)
      v16 = v35 == 0;
    else
      v16 = 1;
    if (v16)
    {
      v26 = v38;
      do
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD, float))(a3 + 16))(a3, *(unsigned int *)v26, *((unsigned int *)v26 + 2), *((float *)v26 + 3));
        ++v26;
      }
      while (v26 != v15);
    }
    else
    {
      v17 = 0;
      v18 = v38;
      do
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD, float))(a3 + 16))(a3, *(unsigned int *)v18, *((unsigned int *)v18 + 2), *((float *)v18 + 3));
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)",", 1);
        v20 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)";", 1);
        v21 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
        if ((v21[32] & 5) == 0
          && ((*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v21 + 5)
                                                                                            + 32))(__p, *((_QWORD *)v21 + 5), 0, 1, 16), v45 > 1000)|| (++v17, HIDWORD(v22) = -1030792151 * v17 + 85899344, LODWORD(v22) = HIDWORD(v22), (v22 >> 1) < 0x51EB851))
        {
          v23 = *__error();
          v24 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            v25 = __p;
            if (v44 < 0)
              v25 = (void **)__p[0];
            *(_DWORD *)v41 = 136315138;
            v42 = v25;
            _os_log_impl(&dword_1B8270000, v24, OS_LOG_TYPE_DEFAULT, "%s", v41, 0xCu);
            if (SHIBYTE(v44) < 0)
              operator delete(__p[0]);
          }
          *__error() = v23;
          __p[0] = 0;
          __p[1] = 0;
          v44 = 0;
          std::stringbuf::str();
          if (SHIBYTE(v44) < 0)
            operator delete(__p[0]);
        }
        ++v18;
      }
      while (v18 != v15);
    }
  }
  v27 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
  if ((v27[32] & 5) != 0)
  {
    v28 = a2;
  }
  else
  {
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(__p, *((_QWORD *)v27 + 5), 0, 1, 16);
    v28 = a2;
    if (v45 > 0)
    {
      v29 = *__error();
      v30 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        v31 = v44 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)v41 = 136315138;
        v42 = v31;
        _os_log_impl(&dword_1B8270000, v30, OS_LOG_TYPE_DEFAULT, "%s", v41, 0xCu);
        if (SHIBYTE(v44) < 0)
          operator delete(__p[0]);
      }
      *__error() = v29;
    }
  }
  if (v28)
  {
    v32 = *(void **)(v28 + 8);
    if (v32)
    {
      *(_QWORD *)(v28 + 16) = v32;
      operator delete(v32);
    }
    MEMORY[0x1BCCB06A4](v28, 0x1020C403EC25235);
  }
  if (v36)
    operator delete(v36);
  *(_QWORD *)&buf = *MEMORY[0x1E0DE4F50];
  v33 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&buf + *(_QWORD *)(buf - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v47 = v33;
  v48[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v50) < 0)
    operator delete((void *)v49);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BCCB0650](&v52);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE11storageSizeEv(uint64_t a1)
{
  os_unfair_lock_s *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v2 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a1 + 144);
  v6 = *(std::__shared_weak_count **)(a1 + 152);
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  os_unfair_lock_unlock(v2);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 48);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 184))(v7);
  if (!v6)
    goto LABEL_11;
  v12 = (unint64_t *)&v6->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v3)
      return v11 + v10;
  }
  else
  {
LABEL_11:
    if (!v3)
      return v11 + v10;
  }
  v14 = (unint64_t *)&v3->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v11 + v10;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE14setVectorStoreEP10data_map_s(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 192) = a2;
  return result;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE16getDataForOffsetEjPj(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v7;
  int v8;
  NSObject *v9;
  int *v10;
  int v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1) <= a2)
  {
    v8 = *__error();
    v9 = _SILogForLogForCategory(2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
      v12 = 136315906;
      v13 = "getDataForOffset";
      v14 = 1024;
      v15 = 3455;
      v16 = 1024;
      v17 = a2;
      v18 = 1024;
      v19 = v11;
      _os_log_error_impl(&dword_1B8270000, v9, OS_LOG_TYPE_ERROR, "%s:%d: offset out of range: %u >= %u", (uint8_t *)&v12, 0x1Eu);
    }
    v10 = __error();
    v7 = 0;
    result = 0;
    *v10 = v8;
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(a1[6] + 32))(a1 + 6, a2);
    v7 = 1024;
  }
  *a3 = v7;
  return result;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE26updateVectorStorageOffsetsEP13__SIUINT64Set(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t i;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  int v12;
  unint64_t j;
  unint64_t v14;

  v2 = a2;
  v4 = a1 + 48;
  if (a2)
  {
    for (i = 0; ; ++i)
    {
      result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v4);
      if (i >= result)
        break;
      v7 = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 16) * i, 0x410uLL);
      if (!*(_BYTE *)(v2 + 184))
      {
        v8 = *(unsigned int *)(v7 + 1032);
        v9 = *(_DWORD *)(v2 + 24);
        if (!v9 || !((*(_QWORD *)(v2 + 16) ^ v8) >> (-4 * v9)))
        {
          v10 = (60 - 4 * v9) & 0xFC;
          v11 = *(_QWORD *)(v2 + 56 + 8 * ((v8 >> v10) & 0xF));
          if ((v11 & 1) != 0)
          {
            v12 = v9 + 2;
            do
            {
              v10 = (64 - 4 * v12) & 0xFC;
              v11 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v8 >> v10) & 0xF));
              ++v12;
            }
            while ((v11 & 1) != 0);
          }
          if (v11)
          {
            if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v8, ~(-1 << v10)))
            {
              data_map_set_offset_for_id(*(_QWORD *)(a1 + 192), v8, ((unint64_t)*(unsigned int *)(a1 + 88) << 36) | (16 * i) | (4 * (*(_DWORD *)(a1 + 176) & 3)) | *(_DWORD *)(a1 + 172) & 3, *(unsigned __int16 *)(a1 + 168) | ((unint64_t)*(unsigned int *)(a1 + 180) << 32), *(_DWORD *)(a1 + 184));
            }
          }
        }
      }
    }
  }
  else
  {
    for (j = 0; ; ++j)
    {
      result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v4);
      if (j >= result)
        break;
      v14 = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 16) * j, 0x410uLL);
      data_map_set_offset_for_id(*(_QWORD *)(a1 + 192), *(unsigned int *)(v14 + 1032), v2 | ((unint64_t)*(unsigned int *)(a1 + 88) << 36) | (4 * (*(_DWORD *)(a1 + 176) & 3)) | *(_DWORD *)(a1 + 172) & 3, *(unsigned __int16 *)(a1 + 168) | ((unint64_t)*(unsigned int *)(a1 + 180) << 32), *(_DWORD *)(a1 + 184));
      v2 += 16;
    }
  }
  return result;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE6statusERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  _QWORD v38[2];
  uint64_t v39;
  _OWORD v40[4];
  void *__p[2];
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v53 = 0u;
  v43 = 0;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v42 = 0u;
  *(_OWORD *)__p = 0u;
  v4 = MEMORY[0x1E0DE4FD0];
  memset(v40, 0, sizeof(v40));
  v5 = MEMORY[0x1E0DE4FD0] + 104;
  v44 = MEMORY[0x1E0DE4FD0] + 104;
  v6 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v7 = MEMORY[0x1E0DE4FD0] + 64;
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v39 = MEMORY[0x1E0DE4FD0] + 64;
  v38[0] = v8;
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v8 - 24)) = v9;
  v38[1] = 0;
  v10 = (std::ios_base *)((char *)v38 + *(_QWORD *)(v38[0] - 24));
  std::ios_base::init(v10, v40);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v11 = v6[5];
  v39 = v6[4];
  *(uint64_t *)((char *)&v39 + *(_QWORD *)(v39 - 24)) = v11;
  v38[0] = v6[1];
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = v6[6];
  v44 = v5;
  v38[0] = v4 + 24;
  v39 = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v40[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v42 = 0u;
  LODWORD(v43) = 24;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = a2;
  else
    v14 = *(_QWORD *)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, v14, v15);
  v17 = *(char *)(a1 + 47);
  if (v17 >= 0)
    v18 = a1 + 24;
  else
    v18 = *(_QWORD *)(a1 + 24);
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a1 + 47);
  else
    v19 = *(_QWORD *)(a1 + 32);
  v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, v18, v19);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)"(", 1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v21 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"/", 1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)"v", 1);
  _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(a1 + 48, &v36);
  if (v36)
  {
    _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(a1 + 48, &v34);
    v23 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)")", 1);
    v24 = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v27 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)")", 1);
  }
  v28 = v37;
  if (v37)
  {
    v29 = (unint64_t *)&v37->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, (uint64_t)"[", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, (uint64_t)",", 1);
  v31 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"] indexId: ", 11);
  std::ostream::operator<<();
  std::stringbuf::str();
  v38[0] = *v6;
  v32 = v6[9];
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = v6[8];
  v39 = v32;
  *(_QWORD *)&v40[0] = v12 + 16;
  if (SBYTE7(v42) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BCCB0650](&v44);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE12diagnoseDumpERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERNS5_13basic_ostreamIcS8_EEi(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  uint64_t v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  uint64_t v44;
  std::locale *v45;
  uint64_t v46;
  const std::locale::facet *v47;
  uint64_t v48;
  _QWORD *v49;
  const char *v50;
  uint64_t v51;
  const std::locale::facet *v52;
  unint64_t v53;
  std::locale::id *v54;
  const std::locale::facet *v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  void *locale;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  std::locale::id *v66;
  _QWORD *v67;
  _QWORD *v68;
  const std::locale::facet *v69;
  const std::locale::facet *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::locale v82;
  std::locale v83;
  uint64_t v84;
  unsigned __int8 v85;

  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, a2, v8);
  v10 = *(char *)(a1 + 47);
  if (v10 >= 0)
    v11 = a1 + 24;
  else
    v11 = *(_QWORD *)(a1 + 24);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 47);
  else
    v12 = *(_QWORD *)(a1 + 32);
  v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" vectors ", 9);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" partitions.", 12);
  if (*(_BYTE *)(a1 + 208))
    v17 = "(readOnly)";
  else
    v17 = "(readWrite)";
  if (*(_BYTE *)(a1 + 208))
    v18 = 10;
  else
    v18 = 11;
  v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
  v20 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v21 = *(_QWORD *)(a1 + 128);
  v22 = *(std::__shared_weak_count **)(a1 + 136);
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  v25 = *(std::__shared_weak_count **)(a1 + 152);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if (v22)
  {
    v28 = (unint64_t *)&v22->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (!v25)
    goto LABEL_29;
  v30 = (unint64_t *)&v25->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    v32 = a1 + 48;
    if (!v22)
      goto LABEL_35;
  }
  else
  {
LABEL_29:
    v32 = a1 + 48;
    if (!v22)
      goto LABEL_35;
  }
  v33 = (unint64_t *)&v22->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_35:
  if (v21)
  {
    v35 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Quantizer: ", 11);
    v36 = *(char *)(v21 + 31);
    if (v36 >= 0)
      v37 = v21 + 8;
    else
      v37 = *(_QWORD *)(v21 + 8);
    if (v36 >= 0)
      v38 = *(unsigned __int8 *)(v21 + 31);
    else
      v38 = *(_QWORD *)(v21 + 16);
    v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, v37, v38);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)"(", 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    v40 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)") ", 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    v41 = (_QWORD *)std::ostream::operator<<();
    v42 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, (uint64_t)" centroids.", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(*v42 - 24)));
    v43 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
    std::locale::~locale(&v83);
    std::ostream::put();
    std::ostream::flush();
  }
  v80 = 0;
  v81 = 0;
  _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(v32, &v80);
  v44 = v80;
  if (!v80)
    goto LABEL_51;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Partition: ", 11);
  (*(void (**)(std::locale *__return_ptr, uint64_t))(*(_QWORD *)v44 + 144))(&v83, v44);
  v45 = (v85 & 0x80u) == 0 ? &v83 : (std::locale *)v83.__locale_;
  v46 = (v85 & 0x80u) == 0 ? v85 : v84;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v45, v46);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
  v47 = std::locale::use_facet(&v82, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
  std::locale::~locale(&v82);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v85 < 0)
  {
    operator delete(v83.__locale_);
    if (!a4)
      goto LABEL_84;
  }
  else
  {
LABEL_51:
    if (!a4)
      goto LABEL_84;
  }
  v78 = v44;
  v48 = *(_QWORD *)(a1 + 96);
  v49 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"offset,vid", 10);
  v79 = a4;
  if (a4 <= 1)
    v50 = ",";
  else
    v50 = ",vector";
  if (a4 <= 1)
    v51 = 1;
  else
    v51 = 7;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
  v52 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  if (*(_DWORD *)(v48 + 40))
  {
    if (a4 <= 1)
    {
      v65 = 0;
      v66 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        _windowsResolvePtr(*(_QWORD *)(v48 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v48 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v48 + 32) + 16) * v65, 0x410uLL);
        v67 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v67, (uint64_t)",", 1);
        v68 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v68, (uint64_t)",", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
        v69 = std::locale::use_facet(&v83, v66);
        ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
        std::locale::~locale(&v83);
        std::ostream::put();
        std::ostream::flush();
        ++v65;
      }
      while (v65 < *(unsigned int *)(v48 + 40));
    }
    else
    {
      v53 = 0;
      v54 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        v56 = _windowsResolvePtr(*(_QWORD *)(v48 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v48 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v48 + 32) + 16) * v53, 0x410uLL);
        v57 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)",", 1);
        v58 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)",", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"{length = ", 10);
        v59 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)", bytes = 0x", 12);
        data2hexString((const unsigned __int8 *)&v83, v56, 16);
        if ((v85 & 0x80u) == 0)
          locale = &v83;
        else
          locale = v83.__locale_;
        if ((v85 & 0x80u) == 0)
          v61 = v85;
        else
          v61 = v84;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)locale, v61);
        if ((char)v85 < 0)
          operator delete(v83.__locale_);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)" ... ", 5);
        data2hexString((const unsigned __int8 *)&v83, v56 + 1016, 8);
        if ((v85 & 0x80u) == 0)
          v62 = &v83;
        else
          v62 = v83.__locale_;
        if ((v85 & 0x80u) == 0)
          v63 = v85;
        else
          v63 = v84;
        v64 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v62, v63);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)" }", 2);
        if ((char)v85 < 0)
          operator delete(v83.__locale_);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
        v55 = std::locale::use_facet(&v83, v54);
        ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
        std::locale::~locale(&v83);
        std::ostream::put();
        std::ostream::flush();
        ++v53;
      }
      while (v53 < *(unsigned int *)(v48 + 40));
    }
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
  v70 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  if (v78)
    (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v78 + 104))(v78, a3, v79);
LABEL_84:
  v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v72 = v81;
  if (!v81)
    goto LABEL_88;
  v73 = (unint64_t *)&v81->__shared_owners_;
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
    if (!v22)
      return v71;
  }
  else
  {
LABEL_88:
    if (!v22)
      return v71;
  }
  v75 = (unint64_t *)&v22->__shared_owners_;
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  return v71;
}

uint64_t ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li512EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(uint64_t a1)
{
  uint64_t v1;
  CFIndex v2;
  CFIndex AppIntegerValue;
  char v4;
  char v5;
  float v6;
  float v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  double Current;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  char v33;
  char v34;
  unsigned int v35;
  char v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  NSObject *v43;
  int v44;
  int v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  int *v54;
  int *v55;
  unint64_t v56;
  int v57;
  const void *v58;
  int64_t v59;
  char *v60;
  char *v61;
  int v62;
  NSObject *v63;
  int v64;
  int v65;
  double v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  float16x8_t v72;
  float32x4_t v73;
  float16x8_t v74;
  float16x8_t v75;
  float16x8_t v76;
  float16x8_t v77;
  float16x8_t v78;
  float16x8_t v79;
  float16x8_t v80;
  float16x8_t v81;
  float16x8_t v82;
  float16x8_t v83;
  float16x8_t v84;
  float16x8_t v85;
  float16x8_t v86;
  float16x8_t v87;
  float16x8_t v88;
  float16x8_t v89;
  float16x8_t v90;
  float16x8_t v91;
  float16x8_t v92;
  float16x8_t v93;
  float16x8_t v94;
  float16x8_t v95;
  float16x8_t v96;
  float16x8_t v97;
  float16x8_t v98;
  float16x8_t v99;
  float16x8_t v100;
  float16x8_t v101;
  float16x8_t v102;
  float16x8_t v103;
  float16x8_t v104;
  float16x8_t v105;
  float16x8_t v106;
  float16x8_t v107;
  float16x8_t v108;
  float16x8_t v109;
  float16x8_t v110;
  float16x8_t v111;
  float16x8_t v112;
  float16x8_t v113;
  float16x8_t v114;
  float16x8_t v115;
  float16x8_t v116;
  float16x8_t v117;
  float16x8_t v118;
  float16x8_t v119;
  float16x8_t v120;
  float16x8_t v121;
  float16x8_t v122;
  float16x8_t v123;
  float16x8_t v124;
  float16x8_t v125;
  float16x8_t v126;
  float16x8_t v127;
  float16x8_t v128;
  float16x8_t v129;
  float16x8_t v130;
  float16x8_t v131;
  float16x8_t v132;
  float16x8_t v133;
  float16x8_t v134;
  float16x8_t v135;
  float16x8_t v136;
  float32x4_t v137;
  float16x8_t v138;
  float16x8_t v139;
  float16x8_t v140;
  float16x8_t v141;
  float16x8_t v142;
  float16x8_t v143;
  float16x8_t v144;
  float16x8_t v145;
  float16x8_t v146;
  float16x8_t v147;
  float16x8_t v148;
  float16x8_t v149;
  float16x8_t v150;
  float16x8_t v151;
  float16x8_t v152;
  float16x8_t v153;
  float16x8_t v154;
  float16x8_t v155;
  float16x8_t v156;
  float16x8_t v157;
  float16x8_t v158;
  float16x8_t v159;
  float16x8_t v160;
  float16x8_t v161;
  float16x8_t v162;
  float16x8_t v163;
  float16x8_t v164;
  float16x8_t v165;
  float16x8_t v166;
  float16x8_t v167;
  float16x8_t v168;
  float16x8_t v169;
  float16x8_t v170;
  float16x8_t v171;
  float16x8_t v172;
  float16x8_t v173;
  float16x8_t v174;
  float16x8_t v175;
  float16x8_t v176;
  float16x8_t v177;
  float16x8_t v178;
  float16x8_t v179;
  float16x8_t v180;
  float16x8_t v181;
  float16x8_t v182;
  float16x8_t v183;
  float16x8_t v184;
  float16x8_t v185;
  float16x8_t v186;
  float16x8_t v187;
  float16x8_t v188;
  float16x8_t v189;
  float16x8_t v190;
  float16x8_t v191;
  float16x8_t v192;
  float16x8_t v193;
  float16x8_t v194;
  float16x8_t v195;
  float16x8_t v196;
  float16x8_t v197;
  float16x8_t v198;
  float16x8_t v199;
  uint8x8_t v200;
  unint64_t v201;
  uint64_t *v202;
  unint64_t v203;
  unint64_t v204;
  float v205;
  int v207;
  NSObject *v208;
  int v209;
  NSObject *v210;
  int v211;
  int v212;
  NSObject *v213;
  int v214;
  int v215;
  int v216;
  int v217;
  uint64_t v218;
  CFAbsoluteTime v219;
  _QWORD *v220;
  _QWORD *v221;
  void *v222;
  _QWORD *v223;
  _QWORD *v224;
  void *v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  char *v230;
  char *v231;
  const char *v232;
  char *v233;
  const char *v234;
  uint64_t v235;
  unint64_t v236;
  int v237;
  _QWORD *v238;
  _QWORD v239[8];
  void *v240;
  void *v241;
  _QWORD *v242;
  float v243;
  void *v244;
  void *v245;
  char *v246;
  void *v247[2];
  void *__p[2];
  uint64_t v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  int v257;
  float32x4_t __B;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  float32x4_t v362;
  float32x4_t v363;
  float32x4_t v364;
  float32x4_t v365;
  float32x4_t v366;
  float32x4_t v367;
  float32x4_t v368;
  float32x4_t v369;
  float32x4_t v370;
  float32x4_t v371;
  float32x4_t v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t v378;
  float32x4_t v379;
  float32x4_t v380;
  float32x4_t v381;
  float32x4_t v382;
  float32x4_t v383;
  float32x4_t v384;
  float32x4_t v385;
  float32x4_t *__C;
  char __str[16];
  __int128 v388;
  _BYTE keyExistsAndHasValidFormat[48];
  _BYTE v390[32];
  float32x4_t v391;
  float32x4_t v392;
  float32x4_t v393;
  float32x4_t v394;
  float32x4_t v395;
  float32x4_t v396;
  float32x4_t v397;
  float32x4_t v398;
  float32x4_t v399;
  float32x4_t v400;
  float32x4_t v401;
  float32x4_t v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  float32x4_t v407;
  float32x4_t v408;
  float32x4_t v409;
  float32x4_t v410;
  float32x4_t v411;
  float32x4_t v412;
  float32x4_t v413;
  float32x4_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  float32x4_t v418;
  float32x4_t v419;
  float32x4_t v420;
  float32x4_t v421;
  float32x4_t v422;
  float32x4_t v423;
  float32x4_t v424;
  float32x4_t v425;
  float32x4_t v426;
  float32x4_t v427;
  float32x4_t v428;
  float32x4_t v429;
  float32x4_t v430;
  float32x4_t v431;
  float32x4_t v432;
  float32x4_t v433;
  float32x4_t v434;
  float32x4_t v435;
  float32x4_t v436;
  float32x4_t v437;
  float32x4_t v438;
  float32x4_t v439;
  float32x4_t v440;
  float32x4_t v441;
  float32x4_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  float32x4_t v446;
  float32x4_t v447;
  float32x4_t v448;
  float32x4_t v449;
  float32x4_t v450;
  float32x4_t v451;
  float32x4_t v452;
  float32x4_t v453;
  float32x4_t v454;
  float32x4_t v455;
  float32x4_t v456;
  float32x4_t v457;
  float32x4_t v458;
  float32x4_t v459;
  float32x4_t v460;
  float32x4_t v461;
  float32x4_t v462;
  float32x4_t v463;
  float32x4_t v464;
  float32x4_t v465;
  float32x4_t v466;
  float32x4_t v467;
  float32x4_t v468;
  float32x4_t v469;
  float32x4_t v470;
  float32x4_t v471;
  float32x4_t v472;
  float32x4_t v473;
  float32x4_t v474;
  float32x4_t v475;
  float32x4_t v476;
  float32x4_t v477;
  float32x4_t v478;
  float32x4_t v479;
  float32x4_t v480;
  float32x4_t v481;
  float32x4_t v482;
  float32x4_t v483;
  float32x4_t v484;
  float32x4_t v485;
  float32x4_t v486;
  float32x4_t v487;
  float32x4_t v488;
  float32x4_t v489;
  float32x4_t v490;
  float32x4_t v491;
  float32x4_t v492;
  float32x4_t v493;
  float32x4_t v494;
  float32x4_t v495;
  float32x4_t v496;
  float32x4_t v497;
  float32x4_t v498;
  float32x4_t v499;
  float32x4_t v500;
  float32x4_t v501;
  float32x4_t v502;
  float32x4_t v503;
  float32x4_t v504;
  float32x4_t v505;
  float32x4_t v506;
  float32x4_t v507;
  float32x4_t v508;
  float32x4_t v509;
  float32x4_t v510;
  float32x4_t v511;
  float32x4_t v512;
  float32x4_t v513;
  uint64_t v514;

  v1 = MEMORY[0x1E0C80A78](a1);
  AppIntegerValue = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v1;
  v514 = *MEMORY[0x1E0C80C00];
  v238 = v11;
  v12 = *v11;
  v388 = 0u;
  *(_OWORD *)__str = 0u;
  snprintf(__str, 0x20uLL, "%02x%02x%02x%02x...%02x%02x%02x%02x", *v8, v8[1], v8[2], v8[3], v8[1020], v8[1021], v8[1022], v8[1023]);
  if (!(_DWORD)AppIntegerValue)
    AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("IVFNumberOfParitionsProbe"), CFSTR("com.apple.Spotlight"), 0);
  keyExistsAndHasValidFormat[0] = 0;
  v13 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeMin"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v14 = v13;
  else
    v14 = 10000;
  if (10 * v12 <= v14)
    v15 = v14;
  else
    v15 = 10 * v12;
  v16 = v15
      * IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(v10);
  v17 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v10);
  keyExistsAndHasValidFormat[0] = 0;
  v18 = v16 / v17;
  v19 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeMin"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v20 = v19;
  else
    v20 = 7;
  v254 = 0;
  v255 = &v254;
  if (v18 <= v20)
    v21 = v20;
  else
    v21 = v18;
  v257 = 0;
  v256 = 0x2000000000;
  v250 = 0;
  v251 = &v250;
  v253 = 0;
  v252 = 0x2000000000;
  v249 = 0;
  *(_OWORD *)v247 = 0u;
  *(_OWORD *)__p = 0u;
  QuantizerManager<float,768>::aNNLogQueryVecIds((uint64_t)v247);
  Current = CFAbsoluteTimeGetCurrent();
  v237 = v12;
  if ((v5 & 1) != 0
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(v10) <= v21
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v10) <= v15)
  {
    v62 = *__error();
    v63 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
    {
      v64 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v10);
      v65 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(v10);
      v66 = v7;
      *(_DWORD *)keyExistsAndHasValidFormat = 136316162;
      *(_QWORD *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v12;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v64;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = v65;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 2048;
      *(double *)&keyExistsAndHasValidFormat[32] = v7;
      _os_log_impl(&dword_1B8270000, v63, OS_LOG_TYPE_DEFAULT, "brute force search %s top %u of %u vectors in %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x28u);
    }
    else
    {
      v66 = v7;
    }
    *__error() = v62;
    LODWORD(v236) = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(v10);
    v67 = 0;
    v68 = 0;
    v69 = *(_QWORD *)(v10 + 48);
    while (v68 != *(_DWORD *)(v69 + 40))
    {
      ++*((_DWORD *)v255 + 6);
      if (*(_DWORD *)(v69 + 40) <= v67)
      {
        v230 = __si_assert_copy_extra_268();
        v231 = v230;
        v232 = "";
        if (v230)
          v232 = v230;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1798, "offset < store->endOffset()", v232);
LABEL_133:
        free(v231);
        if (__valid_fs(-1))
          v235 = 2989;
        else
          v235 = 3072;
        *(_DWORD *)v235 = -559038737;
        abort();
      }
      v70 = _windowsResolvePtr(*(_QWORD *)(v69 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v69 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v69 + 32) + 16) * v67, 0x410uLL);
      v71 = *(unsigned int *)(v70 + 1032);
      v72 = *((float16x8_t *)v9 + 1);
      v73 = vcvtq_f32_f16(*(float16x4_t *)v9);
      *(float32x4_t *)&keyExistsAndHasValidFormat[16] = vcvt_hight_f32_f16(*(float16x8_t *)v9);
      *(float32x4_t *)keyExistsAndHasValidFormat = v73;
      *(float32x4_t *)v390 = vcvt_hight_f32_f16(v72);
      *(float32x4_t *)&keyExistsAndHasValidFormat[32] = vcvtq_f32_f16(*(float16x4_t *)v72.i8);
      v74 = *((float16x8_t *)v9 + 2);
      v75 = *((float16x8_t *)v9 + 3);
      v391 = vcvt_hight_f32_f16(v74);
      *(float32x4_t *)&v390[16] = vcvtq_f32_f16(*(float16x4_t *)v74.i8);
      v393 = vcvt_hight_f32_f16(v75);
      v392 = vcvtq_f32_f16(*(float16x4_t *)v75.i8);
      v76 = *((float16x8_t *)v9 + 4);
      v77 = *((float16x8_t *)v9 + 5);
      v395 = vcvt_hight_f32_f16(v76);
      v394 = vcvtq_f32_f16(*(float16x4_t *)v76.i8);
      v397 = vcvt_hight_f32_f16(v77);
      v396 = vcvtq_f32_f16(*(float16x4_t *)v77.i8);
      v78 = *((float16x8_t *)v9 + 6);
      v79 = *((float16x8_t *)v9 + 7);
      v399 = vcvt_hight_f32_f16(v78);
      v398 = vcvtq_f32_f16(*(float16x4_t *)v78.i8);
      v401 = vcvt_hight_f32_f16(v79);
      v400 = vcvtq_f32_f16(*(float16x4_t *)v79.i8);
      v80 = *((float16x8_t *)v9 + 8);
      v81 = *((float16x8_t *)v9 + 9);
      v403 = vcvt_hight_f32_f16(v80);
      v402 = vcvtq_f32_f16(*(float16x4_t *)v80.i8);
      v405 = vcvt_hight_f32_f16(v81);
      v404 = vcvtq_f32_f16(*(float16x4_t *)v81.i8);
      v82 = *((float16x8_t *)v9 + 10);
      v83 = *((float16x8_t *)v9 + 11);
      v407 = vcvt_hight_f32_f16(v82);
      v406 = vcvtq_f32_f16(*(float16x4_t *)v82.i8);
      v409 = vcvt_hight_f32_f16(v83);
      v408 = vcvtq_f32_f16(*(float16x4_t *)v83.i8);
      v84 = *((float16x8_t *)v9 + 12);
      v85 = *((float16x8_t *)v9 + 13);
      v411 = vcvt_hight_f32_f16(v84);
      v410 = vcvtq_f32_f16(*(float16x4_t *)v84.i8);
      v413 = vcvt_hight_f32_f16(v85);
      v412 = vcvtq_f32_f16(*(float16x4_t *)v85.i8);
      v86 = *((float16x8_t *)v9 + 14);
      v87 = *((float16x8_t *)v9 + 15);
      v415 = vcvt_hight_f32_f16(v86);
      v414 = vcvtq_f32_f16(*(float16x4_t *)v86.i8);
      v417 = vcvt_hight_f32_f16(v87);
      v416 = vcvtq_f32_f16(*(float16x4_t *)v87.i8);
      v88 = *((float16x8_t *)v9 + 16);
      v89 = *((float16x8_t *)v9 + 17);
      v419 = vcvt_hight_f32_f16(v88);
      v418 = vcvtq_f32_f16(*(float16x4_t *)v88.i8);
      v421 = vcvt_hight_f32_f16(v89);
      v420 = vcvtq_f32_f16(*(float16x4_t *)v89.i8);
      v90 = *((float16x8_t *)v9 + 18);
      v91 = *((float16x8_t *)v9 + 19);
      v423 = vcvt_hight_f32_f16(v90);
      v422 = vcvtq_f32_f16(*(float16x4_t *)v90.i8);
      v425 = vcvt_hight_f32_f16(v91);
      v424 = vcvtq_f32_f16(*(float16x4_t *)v91.i8);
      v92 = *((float16x8_t *)v9 + 20);
      v93 = *((float16x8_t *)v9 + 21);
      v427 = vcvt_hight_f32_f16(v92);
      v426 = vcvtq_f32_f16(*(float16x4_t *)v92.i8);
      v429 = vcvt_hight_f32_f16(v93);
      v428 = vcvtq_f32_f16(*(float16x4_t *)v93.i8);
      v94 = *((float16x8_t *)v9 + 22);
      v95 = *((float16x8_t *)v9 + 23);
      v431 = vcvt_hight_f32_f16(v94);
      v430 = vcvtq_f32_f16(*(float16x4_t *)v94.i8);
      v433 = vcvt_hight_f32_f16(v95);
      v432 = vcvtq_f32_f16(*(float16x4_t *)v95.i8);
      v96 = *((float16x8_t *)v9 + 24);
      v97 = *((float16x8_t *)v9 + 25);
      v435 = vcvt_hight_f32_f16(v96);
      v434 = vcvtq_f32_f16(*(float16x4_t *)v96.i8);
      v437 = vcvt_hight_f32_f16(v97);
      v436 = vcvtq_f32_f16(*(float16x4_t *)v97.i8);
      v98 = *((float16x8_t *)v9 + 26);
      v99 = *((float16x8_t *)v9 + 27);
      v439 = vcvt_hight_f32_f16(v98);
      v438 = vcvtq_f32_f16(*(float16x4_t *)v98.i8);
      v441 = vcvt_hight_f32_f16(v99);
      v440 = vcvtq_f32_f16(*(float16x4_t *)v99.i8);
      v100 = *((float16x8_t *)v9 + 28);
      v101 = *((float16x8_t *)v9 + 29);
      v443 = vcvt_hight_f32_f16(v100);
      v442 = vcvtq_f32_f16(*(float16x4_t *)v100.i8);
      v445 = vcvt_hight_f32_f16(v101);
      v444 = vcvtq_f32_f16(*(float16x4_t *)v101.i8);
      v102 = *((float16x8_t *)v9 + 30);
      v103 = *((float16x8_t *)v9 + 31);
      v447 = vcvt_hight_f32_f16(v102);
      v446 = vcvtq_f32_f16(*(float16x4_t *)v102.i8);
      v449 = vcvt_hight_f32_f16(v103);
      v448 = vcvtq_f32_f16(*(float16x4_t *)v103.i8);
      v104 = *((float16x8_t *)v9 + 32);
      v105 = *((float16x8_t *)v9 + 33);
      v451 = vcvt_hight_f32_f16(v104);
      v450 = vcvtq_f32_f16(*(float16x4_t *)v104.i8);
      v453 = vcvt_hight_f32_f16(v105);
      v452 = vcvtq_f32_f16(*(float16x4_t *)v105.i8);
      v106 = *((float16x8_t *)v9 + 34);
      v107 = *((float16x8_t *)v9 + 35);
      v455 = vcvt_hight_f32_f16(v106);
      v454 = vcvtq_f32_f16(*(float16x4_t *)v106.i8);
      v457 = vcvt_hight_f32_f16(v107);
      v456 = vcvtq_f32_f16(*(float16x4_t *)v107.i8);
      v108 = *((float16x8_t *)v9 + 36);
      v109 = *((float16x8_t *)v9 + 37);
      v459 = vcvt_hight_f32_f16(v108);
      v458 = vcvtq_f32_f16(*(float16x4_t *)v108.i8);
      v461 = vcvt_hight_f32_f16(v109);
      v460 = vcvtq_f32_f16(*(float16x4_t *)v109.i8);
      v110 = *((float16x8_t *)v9 + 38);
      v111 = *((float16x8_t *)v9 + 39);
      v463 = vcvt_hight_f32_f16(v110);
      v462 = vcvtq_f32_f16(*(float16x4_t *)v110.i8);
      v465 = vcvt_hight_f32_f16(v111);
      v464 = vcvtq_f32_f16(*(float16x4_t *)v111.i8);
      v112 = *((float16x8_t *)v9 + 40);
      v113 = *((float16x8_t *)v9 + 41);
      v467 = vcvt_hight_f32_f16(v112);
      v466 = vcvtq_f32_f16(*(float16x4_t *)v112.i8);
      v469 = vcvt_hight_f32_f16(v113);
      v468 = vcvtq_f32_f16(*(float16x4_t *)v113.i8);
      v114 = *((float16x8_t *)v9 + 42);
      v115 = *((float16x8_t *)v9 + 43);
      v471 = vcvt_hight_f32_f16(v114);
      v470 = vcvtq_f32_f16(*(float16x4_t *)v114.i8);
      v473 = vcvt_hight_f32_f16(v115);
      v472 = vcvtq_f32_f16(*(float16x4_t *)v115.i8);
      v116 = *((float16x8_t *)v9 + 44);
      v117 = *((float16x8_t *)v9 + 45);
      v475 = vcvt_hight_f32_f16(v116);
      v474 = vcvtq_f32_f16(*(float16x4_t *)v116.i8);
      v477 = vcvt_hight_f32_f16(v117);
      v476 = vcvtq_f32_f16(*(float16x4_t *)v117.i8);
      v118 = *((float16x8_t *)v9 + 46);
      v119 = *((float16x8_t *)v9 + 47);
      v479 = vcvt_hight_f32_f16(v118);
      v478 = vcvtq_f32_f16(*(float16x4_t *)v118.i8);
      v481 = vcvt_hight_f32_f16(v119);
      v480 = vcvtq_f32_f16(*(float16x4_t *)v119.i8);
      v120 = *((float16x8_t *)v9 + 48);
      v121 = *((float16x8_t *)v9 + 49);
      v483 = vcvt_hight_f32_f16(v120);
      v482 = vcvtq_f32_f16(*(float16x4_t *)v120.i8);
      v485 = vcvt_hight_f32_f16(v121);
      v484 = vcvtq_f32_f16(*(float16x4_t *)v121.i8);
      v122 = *((float16x8_t *)v9 + 50);
      v123 = *((float16x8_t *)v9 + 51);
      v487 = vcvt_hight_f32_f16(v122);
      v486 = vcvtq_f32_f16(*(float16x4_t *)v122.i8);
      v489 = vcvt_hight_f32_f16(v123);
      v488 = vcvtq_f32_f16(*(float16x4_t *)v123.i8);
      v124 = *((float16x8_t *)v9 + 52);
      v125 = *((float16x8_t *)v9 + 53);
      v491 = vcvt_hight_f32_f16(v124);
      v490 = vcvtq_f32_f16(*(float16x4_t *)v124.i8);
      v493 = vcvt_hight_f32_f16(v125);
      v492 = vcvtq_f32_f16(*(float16x4_t *)v125.i8);
      v126 = *((float16x8_t *)v9 + 54);
      v127 = *((float16x8_t *)v9 + 55);
      v495 = vcvt_hight_f32_f16(v126);
      v494 = vcvtq_f32_f16(*(float16x4_t *)v126.i8);
      v497 = vcvt_hight_f32_f16(v127);
      v496 = vcvtq_f32_f16(*(float16x4_t *)v127.i8);
      v128 = *((float16x8_t *)v9 + 56);
      v129 = *((float16x8_t *)v9 + 57);
      v499 = vcvt_hight_f32_f16(v128);
      v498 = vcvtq_f32_f16(*(float16x4_t *)v128.i8);
      v501 = vcvt_hight_f32_f16(v129);
      v500 = vcvtq_f32_f16(*(float16x4_t *)v129.i8);
      v130 = *((float16x8_t *)v9 + 58);
      v131 = *((float16x8_t *)v9 + 59);
      v503 = vcvt_hight_f32_f16(v130);
      v502 = vcvtq_f32_f16(*(float16x4_t *)v130.i8);
      v505 = vcvt_hight_f32_f16(v131);
      v504 = vcvtq_f32_f16(*(float16x4_t *)v131.i8);
      v132 = *((float16x8_t *)v9 + 60);
      v133 = *((float16x8_t *)v9 + 61);
      v507 = vcvt_hight_f32_f16(v132);
      v506 = vcvtq_f32_f16(*(float16x4_t *)v132.i8);
      v509 = vcvt_hight_f32_f16(v133);
      v508 = vcvtq_f32_f16(*(float16x4_t *)v133.i8);
      v134 = *((float16x8_t *)v9 + 62);
      v135 = *((float16x8_t *)v9 + 63);
      v511 = vcvt_hight_f32_f16(v134);
      v510 = vcvtq_f32_f16(*(float16x4_t *)v134.i8);
      v513 = vcvt_hight_f32_f16(v135);
      v512 = vcvtq_f32_f16(*(float16x4_t *)v135.i8);
      bzero(&__B, 0x800uLL);
      v136 = *(float16x8_t *)(v70 + 16);
      v137 = vcvt_hight_f32_f16(*(float16x8_t *)v70);
      __B = vcvtq_f32_f16(*(float16x4_t *)v70);
      v259 = v137;
      v260 = vcvtq_f32_f16(*(float16x4_t *)v136.i8);
      v261 = vcvt_hight_f32_f16(v136);
      v138 = *(float16x8_t *)(v70 + 32);
      v139 = *(float16x8_t *)(v70 + 48);
      v262 = vcvtq_f32_f16(*(float16x4_t *)v138.i8);
      v263 = vcvt_hight_f32_f16(v138);
      v264 = vcvtq_f32_f16(*(float16x4_t *)v139.i8);
      v265 = vcvt_hight_f32_f16(v139);
      v140 = *(float16x8_t *)(v70 + 64);
      v141 = *(float16x8_t *)(v70 + 80);
      v266 = vcvtq_f32_f16(*(float16x4_t *)v140.i8);
      v267 = vcvt_hight_f32_f16(v140);
      v268 = vcvtq_f32_f16(*(float16x4_t *)v141.i8);
      v269 = vcvt_hight_f32_f16(v141);
      v142 = *(float16x8_t *)(v70 + 96);
      v143 = *(float16x8_t *)(v70 + 112);
      v270 = vcvtq_f32_f16(*(float16x4_t *)v142.i8);
      v271 = vcvt_hight_f32_f16(v142);
      v272 = vcvtq_f32_f16(*(float16x4_t *)v143.i8);
      v273 = vcvt_hight_f32_f16(v143);
      v144 = *(float16x8_t *)(v70 + 128);
      v145 = *(float16x8_t *)(v70 + 144);
      v274 = vcvtq_f32_f16(*(float16x4_t *)v144.i8);
      v275 = vcvt_hight_f32_f16(v144);
      v276 = vcvtq_f32_f16(*(float16x4_t *)v145.i8);
      v277 = vcvt_hight_f32_f16(v145);
      v146 = *(float16x8_t *)(v70 + 160);
      v147 = *(float16x8_t *)(v70 + 176);
      v278 = vcvtq_f32_f16(*(float16x4_t *)v146.i8);
      v279 = vcvt_hight_f32_f16(v146);
      v280 = vcvtq_f32_f16(*(float16x4_t *)v147.i8);
      v281 = vcvt_hight_f32_f16(v147);
      v148 = *(float16x8_t *)(v70 + 192);
      v149 = *(float16x8_t *)(v70 + 208);
      v282 = vcvtq_f32_f16(*(float16x4_t *)v148.i8);
      v283 = vcvt_hight_f32_f16(v148);
      v284 = vcvtq_f32_f16(*(float16x4_t *)v149.i8);
      v285 = vcvt_hight_f32_f16(v149);
      v150 = *(float16x8_t *)(v70 + 224);
      v151 = *(float16x8_t *)(v70 + 240);
      v286 = vcvtq_f32_f16(*(float16x4_t *)v150.i8);
      v287 = vcvt_hight_f32_f16(v150);
      v288 = vcvtq_f32_f16(*(float16x4_t *)v151.i8);
      v289 = vcvt_hight_f32_f16(v151);
      v152 = *(float16x8_t *)(v70 + 256);
      v153 = *(float16x8_t *)(v70 + 272);
      v290 = vcvtq_f32_f16(*(float16x4_t *)v152.i8);
      v291 = vcvt_hight_f32_f16(v152);
      v292 = vcvtq_f32_f16(*(float16x4_t *)v153.i8);
      v293 = vcvt_hight_f32_f16(v153);
      v154 = *(float16x8_t *)(v70 + 288);
      v155 = *(float16x8_t *)(v70 + 304);
      v294 = vcvtq_f32_f16(*(float16x4_t *)v154.i8);
      v295 = vcvt_hight_f32_f16(v154);
      v296 = vcvtq_f32_f16(*(float16x4_t *)v155.i8);
      v297 = vcvt_hight_f32_f16(v155);
      v156 = *(float16x8_t *)(v70 + 320);
      v157 = *(float16x8_t *)(v70 + 336);
      v298 = vcvtq_f32_f16(*(float16x4_t *)v156.i8);
      v299 = vcvt_hight_f32_f16(v156);
      v300 = vcvtq_f32_f16(*(float16x4_t *)v157.i8);
      v301 = vcvt_hight_f32_f16(v157);
      v158 = *(float16x8_t *)(v70 + 352);
      v159 = *(float16x8_t *)(v70 + 368);
      v302 = vcvtq_f32_f16(*(float16x4_t *)v158.i8);
      v303 = vcvt_hight_f32_f16(v158);
      v304 = vcvtq_f32_f16(*(float16x4_t *)v159.i8);
      v305 = vcvt_hight_f32_f16(v159);
      v160 = *(float16x8_t *)(v70 + 384);
      v161 = *(float16x8_t *)(v70 + 400);
      v306 = vcvtq_f32_f16(*(float16x4_t *)v160.i8);
      v307 = vcvt_hight_f32_f16(v160);
      v308 = vcvtq_f32_f16(*(float16x4_t *)v161.i8);
      v309 = vcvt_hight_f32_f16(v161);
      v162 = *(float16x8_t *)(v70 + 416);
      v163 = *(float16x8_t *)(v70 + 432);
      v310 = vcvtq_f32_f16(*(float16x4_t *)v162.i8);
      v311 = vcvt_hight_f32_f16(v162);
      v312 = vcvtq_f32_f16(*(float16x4_t *)v163.i8);
      v313 = vcvt_hight_f32_f16(v163);
      v164 = *(float16x8_t *)(v70 + 448);
      v165 = *(float16x8_t *)(v70 + 464);
      v314 = vcvtq_f32_f16(*(float16x4_t *)v164.i8);
      v315 = vcvt_hight_f32_f16(v164);
      v316 = vcvtq_f32_f16(*(float16x4_t *)v165.i8);
      v317 = vcvt_hight_f32_f16(v165);
      v166 = *(float16x8_t *)(v70 + 480);
      v167 = *(float16x8_t *)(v70 + 496);
      v318 = vcvtq_f32_f16(*(float16x4_t *)v166.i8);
      v319 = vcvt_hight_f32_f16(v166);
      v320 = vcvtq_f32_f16(*(float16x4_t *)v167.i8);
      v321 = vcvt_hight_f32_f16(v167);
      v168 = *(float16x8_t *)(v70 + 512);
      v169 = *(float16x8_t *)(v70 + 528);
      v323 = vcvt_hight_f32_f16(v168);
      v322 = vcvtq_f32_f16(*(float16x4_t *)v168.i8);
      v325 = vcvt_hight_f32_f16(v169);
      v324 = vcvtq_f32_f16(*(float16x4_t *)v169.i8);
      v170 = *(float16x8_t *)(v70 + 544);
      v171 = *(float16x8_t *)(v70 + 560);
      v327 = vcvt_hight_f32_f16(v170);
      v326 = vcvtq_f32_f16(*(float16x4_t *)v170.i8);
      v329 = vcvt_hight_f32_f16(v171);
      v328 = vcvtq_f32_f16(*(float16x4_t *)v171.i8);
      v172 = *(float16x8_t *)(v70 + 576);
      v173 = *(float16x8_t *)(v70 + 592);
      v331 = vcvt_hight_f32_f16(v172);
      v330 = vcvtq_f32_f16(*(float16x4_t *)v172.i8);
      v333 = vcvt_hight_f32_f16(v173);
      v332 = vcvtq_f32_f16(*(float16x4_t *)v173.i8);
      v174 = *(float16x8_t *)(v70 + 608);
      v175 = *(float16x8_t *)(v70 + 624);
      v335 = vcvt_hight_f32_f16(v174);
      v334 = vcvtq_f32_f16(*(float16x4_t *)v174.i8);
      v337 = vcvt_hight_f32_f16(v175);
      v336 = vcvtq_f32_f16(*(float16x4_t *)v175.i8);
      v176 = *(float16x8_t *)(v70 + 640);
      v177 = *(float16x8_t *)(v70 + 656);
      v339 = vcvt_hight_f32_f16(v176);
      v338 = vcvtq_f32_f16(*(float16x4_t *)v176.i8);
      v341 = vcvt_hight_f32_f16(v177);
      v340 = vcvtq_f32_f16(*(float16x4_t *)v177.i8);
      v178 = *(float16x8_t *)(v70 + 672);
      v179 = *(float16x8_t *)(v70 + 688);
      v343 = vcvt_hight_f32_f16(v178);
      v342 = vcvtq_f32_f16(*(float16x4_t *)v178.i8);
      v345 = vcvt_hight_f32_f16(v179);
      v344 = vcvtq_f32_f16(*(float16x4_t *)v179.i8);
      v180 = *(float16x8_t *)(v70 + 704);
      v181 = *(float16x8_t *)(v70 + 720);
      v347 = vcvt_hight_f32_f16(v180);
      v346 = vcvtq_f32_f16(*(float16x4_t *)v180.i8);
      v349 = vcvt_hight_f32_f16(v181);
      v348 = vcvtq_f32_f16(*(float16x4_t *)v181.i8);
      v182 = *(float16x8_t *)(v70 + 736);
      v183 = *(float16x8_t *)(v70 + 752);
      v351 = vcvt_hight_f32_f16(v182);
      v350 = vcvtq_f32_f16(*(float16x4_t *)v182.i8);
      v353 = vcvt_hight_f32_f16(v183);
      v352 = vcvtq_f32_f16(*(float16x4_t *)v183.i8);
      v184 = *(float16x8_t *)(v70 + 768);
      v185 = *(float16x8_t *)(v70 + 784);
      v355 = vcvt_hight_f32_f16(v184);
      v354 = vcvtq_f32_f16(*(float16x4_t *)v184.i8);
      v357 = vcvt_hight_f32_f16(v185);
      v356 = vcvtq_f32_f16(*(float16x4_t *)v185.i8);
      v186 = *(float16x8_t *)(v70 + 800);
      v187 = *(float16x8_t *)(v70 + 816);
      v359 = vcvt_hight_f32_f16(v186);
      v358 = vcvtq_f32_f16(*(float16x4_t *)v186.i8);
      v361 = vcvt_hight_f32_f16(v187);
      v360 = vcvtq_f32_f16(*(float16x4_t *)v187.i8);
      v188 = *(float16x8_t *)(v70 + 832);
      v189 = *(float16x8_t *)(v70 + 848);
      v363 = vcvt_hight_f32_f16(v188);
      v362 = vcvtq_f32_f16(*(float16x4_t *)v188.i8);
      v365 = vcvt_hight_f32_f16(v189);
      v364 = vcvtq_f32_f16(*(float16x4_t *)v189.i8);
      v190 = *(float16x8_t *)(v70 + 864);
      v191 = *(float16x8_t *)(v70 + 880);
      v367 = vcvt_hight_f32_f16(v190);
      v366 = vcvtq_f32_f16(*(float16x4_t *)v190.i8);
      v369 = vcvt_hight_f32_f16(v191);
      v368 = vcvtq_f32_f16(*(float16x4_t *)v191.i8);
      v192 = *(float16x8_t *)(v70 + 896);
      v193 = *(float16x8_t *)(v70 + 912);
      v371 = vcvt_hight_f32_f16(v192);
      v370 = vcvtq_f32_f16(*(float16x4_t *)v192.i8);
      v373 = vcvt_hight_f32_f16(v193);
      v372 = vcvtq_f32_f16(*(float16x4_t *)v193.i8);
      v194 = *(float16x8_t *)(v70 + 928);
      v195 = *(float16x8_t *)(v70 + 944);
      v375 = vcvt_hight_f32_f16(v194);
      v374 = vcvtq_f32_f16(*(float16x4_t *)v194.i8);
      v377 = vcvt_hight_f32_f16(v195);
      v376 = vcvtq_f32_f16(*(float16x4_t *)v195.i8);
      v196 = *(float16x8_t *)(v70 + 960);
      v197 = *(float16x8_t *)(v70 + 976);
      v379 = vcvt_hight_f32_f16(v196);
      v378 = vcvtq_f32_f16(*(float16x4_t *)v196.i8);
      v381 = vcvt_hight_f32_f16(v197);
      v380 = vcvtq_f32_f16(*(float16x4_t *)v197.i8);
      v198 = *(float16x8_t *)(v70 + 992);
      v199 = *(float16x8_t *)(v70 + 1008);
      v383 = vcvt_hight_f32_f16(v198);
      v382 = vcvtq_f32_f16(*(float16x4_t *)v198.i8);
      v385 = vcvt_hight_f32_f16(v199);
      v384 = vcvtq_f32_f16(*(float16x4_t *)v199.i8);
      LODWORD(__C) = 2139095039;
      vDSP_distancesq((const float *)keyExistsAndHasValidFormat, 1, __B.f32, 1, (float *)&__C, 0x200uLL);
      if (v247[1])
      {
        v200 = (uint8x8_t)vcnt_s8((int8x8_t)v247[1]);
        v200.i16[0] = vaddlv_u8(v200);
        if (v200.u32[0] > 1uLL)
        {
          v201 = v71;
          if (v247[1] <= (void *)v71)
            v201 = v71 % (unint64_t)v247[1];
        }
        else
        {
          v201 = (LODWORD(v247[1]) - 1) & v71;
        }
        v202 = (uint64_t *)*((_QWORD *)v247[0] + v201);
        if (v202)
        {
          v202 = (uint64_t *)*v202;
          if (v202)
          {
            if (v200.u32[0] < 2uLL)
            {
              while (1)
              {
                v204 = v202[1];
                if (v204 == v71)
                {
                  if (*((_DWORD *)v202 + 4) == (_DWORD)v71)
                    goto LABEL_85;
                }
                else if ((v204 & ((unint64_t)v247[1] - 1)) != v201)
                {
                  goto LABEL_84;
                }
                v202 = (uint64_t *)*v202;
                if (!v202)
                  goto LABEL_85;
              }
            }
            do
            {
              v203 = v202[1];
              if (v203 == v71)
              {
                if (*((_DWORD *)v202 + 4) == (_DWORD)v71)
                  break;
              }
              else
              {
                if ((void *)v203 >= v247[1])
                  v203 %= (unint64_t)v247[1];
                if (v203 != v201)
                  goto LABEL_84;
              }
              v202 = (uint64_t *)*v202;
            }
            while (v202);
          }
        }
      }
      else
      {
LABEL_84:
        v202 = 0;
      }
LABEL_85:
      v205 = *(float *)&__C;
      if (v7 == 0.0 || *(float *)&__C <= v7)
      {
        if (v202)
        {
          v207 = *__error();
          v208 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v208, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109376;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v71;
            *(_WORD *)&keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v205;
            _os_log_impl(&dword_1B8270000, v208, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", keyExistsAndHasValidFormat, 0x12u);
          }
          *__error() = v207;
        }
        *(_QWORD *)keyExistsAndHasValidFormat = *(_QWORD *)(v70 + 1024);
        *(_DWORD *)&keyExistsAndHasValidFormat[8] = v71;
        *(float *)&keyExistsAndHasValidFormat[12] = v205;
        MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::push(v238, (uint64_t)keyExistsAndHasValidFormat);
      }
      else
      {
        if (v202)
        {
          v209 = *__error();
          v210 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v210, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109632;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v71;
            *(_WORD *)&keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v205;
            *(_WORD *)&keyExistsAndHasValidFormat[18] = 2048;
            *(double *)&keyExistsAndHasValidFormat[20] = v66;
            _os_log_impl(&dword_1B8270000, v210, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", keyExistsAndHasValidFormat, 0x1Cu);
          }
          *__error() = v209;
        }
        ++*((_DWORD *)v251 + 6);
      }
      v67 = (v67 + 1);
      v68 = v67;
      if (v69 != *(_QWORD *)(v10 + 48))
      {
        v233 = __si_assert_copy_extra_268();
        v231 = v233;
        v234 = "";
        if (v233)
          v234 = v233;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1814, "store == other.store", v234);
        goto LABEL_133;
      }
    }
    v211 = v12;
  }
  else
  {
    if (!(_DWORD)AppIntegerValue)
    {
      keyExistsAndHasValidFormat[0] = 0;
      v23 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeMax"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat[0])
        v24 = v23;
      else
        v24 = 40;
      keyExistsAndHasValidFormat[0] = 0;
      v25 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionSizeFactor"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat[0])
        v26 = v25;
      else
        v26 = 45;
      keyExistsAndHasValidFormat[0] = 0;
      v27 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeNumerator"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
      v28 = keyExistsAndHasValidFormat[0];
      v29 = 8 * v27;
      v30 = v26 * v26;
      keyExistsAndHasValidFormat[0] = 0;
      v31 = CFPreferencesGetAppIntegerValue(CFSTR("IVFpartitionProbeDecayExponent"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
      v32 = keyExistsAndHasValidFormat[0];
      if (v31 <= 0x12)
        v33 = 18;
      else
        v33 = v31;
      v34 = v33 - 3;
      v35 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v10);
      if (v32)
        v36 = v34;
      else
        v36 = 17;
      v37 = v35 >> v36;
      if (v37 <= 8)
        v38 = 8;
      else
        v38 = v37;
      v39 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(v10);
      if (v28)
        v40 = v29;
      else
        v40 = 800;
      v41 = v40 * v39 / (v30 * v38);
      if (v24 < v41)
        v41 = v24;
      if (v41 <= v21)
        AppIntegerValue = v21;
      else
        AppIntegerValue = v41;
    }
    v42 = *__error();
    v43 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      v44 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v10);
      v45 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(v10);
      *(_DWORD *)keyExistsAndHasValidFormat = 136316418;
      *(_QWORD *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v12;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v44;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = AppIntegerValue;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[32] = v45;
      *(_WORD *)&keyExistsAndHasValidFormat[36] = 2048;
      *(double *)&keyExistsAndHasValidFormat[38] = v7;
      _os_log_impl(&dword_1B8270000, v43, OS_LOG_TYPE_DEFAULT, "aNN search %s top %u of %u vectors in %u of %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x2Eu);
    }
    *__error() = v42;
    os_unfair_lock_lock((os_unfair_lock_t)(v10 + 152));
    os_unfair_lock_lock((os_unfair_lock_t)(v10 + 112));
    v47 = *(_QWORD *)(v10 + 80);
    v46 = *(std::__shared_weak_count **)(v10 + 88);
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v49 = __ldxr(p_shared_owners);
      while (__stxr(v49 + 1, p_shared_owners));
    }
    v51 = *(_QWORD *)(v10 + 96);
    v50 = *(std::__shared_weak_count **)(v10 + 104);
    if (v50)
    {
      v52 = (unint64_t *)&v50->__shared_owners_;
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 112));
    memset(keyExistsAndHasValidFormat, 0, 24);
    (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned __int8 *, CFIndex))(*(_QWORD *)v47 + 72))(keyExistsAndHasValidFormat, v47, v9, AppIntegerValue);
    v54 = *(int **)&keyExistsAndHasValidFormat[8];
    v55 = *(int **)keyExistsAndHasValidFormat;
    __B = 0uLL;
    v259.i64[0] = 0;
    __C = &__B;
    v56 = *(_QWORD *)&keyExistsAndHasValidFormat[8] - *(_QWORD *)keyExistsAndHasValidFormat;
    if (*(_QWORD *)&keyExistsAndHasValidFormat[8] == *(_QWORD *)keyExistsAndHasValidFormat)
    {
      v245 = 0;
      v246 = 0;
      v244 = 0;
    }
    else
    {
      do
      {
        v57 = *v55;
        v55 += 2;
        std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&__C, v57);
      }
      while (v55 != v54);
      v58 = (const void *)__B.i64[0];
      v245 = 0;
      v246 = 0;
      v244 = 0;
      v59 = __B.i64[1] - __B.i64[0];
      if (__B.i64[1] != __B.i64[0])
      {
        if (v59 < 0)
          abort();
        v60 = (char *)operator new(__B.i64[1] - __B.i64[0]);
        v61 = &v60[4 * (v59 >> 2)];
        v244 = v60;
        v246 = v61;
        memcpy(v60, v58, v59);
        v245 = v61;
      }
    }
    v239[0] = MEMORY[0x1E0C809B0];
    v239[1] = 1174405120;
    v239[2] = ___ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li512EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke;
    v239[3] = &unk_1E6E33CC8;
    v239[6] = v10;
    v239[7] = v9;
    v239[4] = &v254;
    std::unordered_set<unsigned int>::unordered_set((uint64_t)&v240, (uint64_t)v247);
    v243 = v7;
    v239[5] = &v250;
    v242 = v238;
    (*(void (**)(uint64_t, void **, _QWORD *))(*(_QWORD *)v51 + 72))(v51, &v244, v239);
    if (v244)
    {
      v245 = v244;
      operator delete(v244);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 152));
    v223 = v241;
    if (v241)
    {
      do
      {
        v224 = (_QWORD *)*v223;
        operator delete(v223);
        v223 = v224;
      }
      while (v224);
    }
    v225 = v240;
    v240 = 0;
    if (v225)
      operator delete(v225);
    if (__B.i64[0])
    {
      __B.i64[1] = __B.i64[0];
      operator delete((void *)__B.i64[0]);
    }
    if (*(_QWORD *)keyExistsAndHasValidFormat)
    {
      *(_QWORD *)&keyExistsAndHasValidFormat[8] = *(_QWORD *)keyExistsAndHasValidFormat;
      operator delete(*(void **)keyExistsAndHasValidFormat);
    }
    v211 = v237;
    if (v50)
    {
      v226 = (unint64_t *)&v50->__shared_owners_;
      do
        v227 = __ldaxr(v226);
      while (__stlxr(v227 - 1, v226));
      if (!v227)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v236 = v56 >> 3;
    if (v46)
    {
      v228 = (unint64_t *)&v46->__shared_owners_;
      do
        v229 = __ldaxr(v228);
      while (__stlxr(v229 - 1, v228));
      if (!v229)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
  v212 = *__error();
  v213 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v213, OS_LOG_TYPE_DEFAULT))
  {
    v214 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v10);
    v215 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(v10);
    v216 = *((_DWORD *)v251 + 6);
    v217 = *((_DWORD *)v255 + 6);
    v218 = (uint64_t)(v238[2] - v238[1]) >> 4;
    v219 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)keyExistsAndHasValidFormat = 136317442;
    *(_QWORD *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v211;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v214;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 2048;
    *(double *)&keyExistsAndHasValidFormat[26] = v7;
    *(_WORD *)&keyExistsAndHasValidFormat[34] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[36] = v236;
    *(_WORD *)&keyExistsAndHasValidFormat[40] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[42] = v215;
    *(_WORD *)&keyExistsAndHasValidFormat[46] = 1024;
    *(_DWORD *)v390 = v216;
    *(_WORD *)&v390[4] = 1024;
    *(_DWORD *)&v390[6] = v217;
    *(_WORD *)&v390[10] = 2048;
    *(_QWORD *)&v390[12] = v218;
    *(_WORD *)&v390[20] = 2048;
    *(double *)&v390[22] = v219 - Current;
    _os_log_impl(&dword_1B8270000, v213, OS_LOG_TYPE_DEFAULT, "search %s top %u of %u vectors max_distance=%f in %u of %u partitions skip %u of %u populate %zu results in duration: %f", keyExistsAndHasValidFormat, 0x4Eu);
  }
  *__error() = v212;
  v220 = __p[0];
  if (__p[0])
  {
    do
    {
      v221 = (_QWORD *)*v220;
      operator delete(v220);
      v220 = v221;
    }
    while (v221);
  }
  v222 = v247[0];
  v247[0] = 0;
  if (v222)
    operator delete(v222);
  _Block_object_dispose(&v250, 8);
  _Block_object_dispose(&v254, 8);
}

void ___ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li512EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unint64_t v4;
  float16x8_t *v5;
  float16x8_t v6;
  float32x4_t v7;
  float16x8_t v8;
  float16x8_t v9;
  float16x8_t v10;
  float16x8_t v11;
  float16x8_t v12;
  float16x8_t v13;
  float16x8_t v14;
  float16x8_t v15;
  float16x8_t v16;
  float16x8_t v17;
  float16x8_t v18;
  float16x8_t v19;
  float16x8_t v20;
  float16x8_t v21;
  float16x8_t v22;
  float16x8_t v23;
  float16x8_t v24;
  float16x8_t v25;
  float16x8_t v26;
  float16x8_t v27;
  float16x8_t v28;
  float16x8_t v29;
  float16x8_t v30;
  float16x8_t v31;
  float16x8_t v32;
  float16x8_t v33;
  float16x8_t v34;
  float16x8_t v35;
  float16x8_t v36;
  float16x8_t v37;
  float16x8_t v38;
  float16x8_t v39;
  float16x8_t v40;
  float16x8_t v41;
  float16x8_t v42;
  float16x8_t v43;
  float16x8_t v44;
  float16x8_t v45;
  float16x8_t v46;
  float16x8_t v47;
  float16x8_t v48;
  float16x8_t v49;
  float16x8_t v50;
  float16x8_t v51;
  float16x8_t v52;
  float16x8_t v53;
  float16x8_t v54;
  float16x8_t v55;
  float16x8_t v56;
  float16x8_t v57;
  float16x8_t v58;
  float16x8_t v59;
  float16x8_t v60;
  float16x8_t v61;
  float16x8_t v62;
  float16x8_t v63;
  float16x8_t v64;
  float16x8_t v65;
  float16x8_t v66;
  float16x8_t v67;
  float16x8_t v68;
  float16x8_t v69;
  float16x8_t v70;
  float32x4_t v71;
  float16x8_t v72;
  float16x8_t v73;
  float16x8_t v74;
  float16x8_t v75;
  float16x8_t v76;
  float16x8_t v77;
  float16x8_t v78;
  float16x8_t v79;
  float16x8_t v80;
  float16x8_t v81;
  float16x8_t v82;
  float16x8_t v83;
  float16x8_t v84;
  float16x8_t v85;
  float16x8_t v86;
  float16x8_t v87;
  float16x8_t v88;
  float16x8_t v89;
  float16x8_t v90;
  float16x8_t v91;
  float16x8_t v92;
  float16x8_t v93;
  float16x8_t v94;
  float16x8_t v95;
  float16x8_t v96;
  float16x8_t v97;
  float16x8_t v98;
  float16x8_t v99;
  float16x8_t v100;
  float16x8_t v101;
  float16x8_t v102;
  float16x8_t v103;
  float16x8_t v104;
  float16x8_t v105;
  float16x8_t v106;
  float16x8_t v107;
  float16x8_t v108;
  float16x8_t v109;
  float16x8_t v110;
  float16x8_t v111;
  float16x8_t v112;
  float16x8_t v113;
  float16x8_t v114;
  float16x8_t v115;
  float16x8_t v116;
  float16x8_t v117;
  float16x8_t v118;
  float16x8_t v119;
  float16x8_t v120;
  float16x8_t v121;
  float16x8_t v122;
  float16x8_t v123;
  float16x8_t v124;
  float16x8_t v125;
  float16x8_t v126;
  float16x8_t v127;
  float16x8_t v128;
  float16x8_t v129;
  float16x8_t v130;
  float16x8_t v131;
  float16x8_t v132;
  float16x8_t v133;
  unint64_t v134;
  int8x8_t v135;
  uint8x8_t v136;
  unint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  float v142;
  float v143;
  int v144;
  NSObject *v145;
  double v146;
  int v147;
  NSObject *v148;
  _OWORD __B[128];
  float __C;
  _BYTE __A[32];
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  uint64_t v278;

  v1 = MEMORY[0x1E0C80A78](a1);
  v278 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(v1 + 48);
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24);
  v4 = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 32) + 16) * *v3, 0x410uLL);
  v5 = *(float16x8_t **)(v1 + 56);
  bzero(__A, 0x800uLL);
  v6 = v5[1];
  v7 = vcvt_hight_f32_f16(*v5);
  *(float32x4_t *)__A = vcvtq_f32_f16(*(float16x4_t *)v5->i8);
  *(float32x4_t *)&__A[16] = v7;
  v152 = vcvtq_f32_f16(*(float16x4_t *)v6.i8);
  v153 = vcvt_hight_f32_f16(v6);
  v8 = v5[2];
  v9 = v5[3];
  v154 = vcvtq_f32_f16(*(float16x4_t *)v8.i8);
  v155 = vcvt_hight_f32_f16(v8);
  v156 = vcvtq_f32_f16(*(float16x4_t *)v9.i8);
  v157 = vcvt_hight_f32_f16(v9);
  v10 = v5[4];
  v11 = v5[5];
  v158 = vcvtq_f32_f16(*(float16x4_t *)v10.i8);
  v159 = vcvt_hight_f32_f16(v10);
  v160 = vcvtq_f32_f16(*(float16x4_t *)v11.i8);
  v161 = vcvt_hight_f32_f16(v11);
  v12 = v5[6];
  v13 = v5[7];
  v162 = vcvtq_f32_f16(*(float16x4_t *)v12.i8);
  v163 = vcvt_hight_f32_f16(v12);
  v164 = vcvtq_f32_f16(*(float16x4_t *)v13.i8);
  v165 = vcvt_hight_f32_f16(v13);
  v14 = v5[8];
  v15 = v5[9];
  v166 = vcvtq_f32_f16(*(float16x4_t *)v14.i8);
  v167 = vcvt_hight_f32_f16(v14);
  v168 = vcvtq_f32_f16(*(float16x4_t *)v15.i8);
  v169 = vcvt_hight_f32_f16(v15);
  v16 = v5[10];
  v17 = v5[11];
  v170 = vcvtq_f32_f16(*(float16x4_t *)v16.i8);
  v171 = vcvt_hight_f32_f16(v16);
  v172 = vcvtq_f32_f16(*(float16x4_t *)v17.i8);
  v173 = vcvt_hight_f32_f16(v17);
  v18 = v5[12];
  v19 = v5[13];
  v174 = vcvtq_f32_f16(*(float16x4_t *)v18.i8);
  v175 = vcvt_hight_f32_f16(v18);
  v176 = vcvtq_f32_f16(*(float16x4_t *)v19.i8);
  v177 = vcvt_hight_f32_f16(v19);
  v20 = v5[14];
  v21 = v5[15];
  v178 = vcvtq_f32_f16(*(float16x4_t *)v20.i8);
  v179 = vcvt_hight_f32_f16(v20);
  v180 = vcvtq_f32_f16(*(float16x4_t *)v21.i8);
  v181 = vcvt_hight_f32_f16(v21);
  v22 = v5[16];
  v23 = v5[17];
  v182 = vcvtq_f32_f16(*(float16x4_t *)v22.i8);
  v183 = vcvt_hight_f32_f16(v22);
  v184 = vcvtq_f32_f16(*(float16x4_t *)v23.i8);
  v185 = vcvt_hight_f32_f16(v23);
  v24 = v5[18];
  v25 = v5[19];
  v186 = vcvtq_f32_f16(*(float16x4_t *)v24.i8);
  v187 = vcvt_hight_f32_f16(v24);
  v188 = vcvtq_f32_f16(*(float16x4_t *)v25.i8);
  v189 = vcvt_hight_f32_f16(v25);
  v26 = v5[20];
  v27 = v5[21];
  v190 = vcvtq_f32_f16(*(float16x4_t *)v26.i8);
  v191 = vcvt_hight_f32_f16(v26);
  v192 = vcvtq_f32_f16(*(float16x4_t *)v27.i8);
  v193 = vcvt_hight_f32_f16(v27);
  v28 = v5[22];
  v29 = v5[23];
  v194 = vcvtq_f32_f16(*(float16x4_t *)v28.i8);
  v195 = vcvt_hight_f32_f16(v28);
  v196 = vcvtq_f32_f16(*(float16x4_t *)v29.i8);
  v197 = vcvt_hight_f32_f16(v29);
  v30 = v5[24];
  v31 = v5[25];
  v198 = vcvtq_f32_f16(*(float16x4_t *)v30.i8);
  v199 = vcvt_hight_f32_f16(v30);
  v200 = vcvtq_f32_f16(*(float16x4_t *)v31.i8);
  v201 = vcvt_hight_f32_f16(v31);
  v32 = v5[26];
  v33 = v5[27];
  v202 = vcvtq_f32_f16(*(float16x4_t *)v32.i8);
  v203 = vcvt_hight_f32_f16(v32);
  v204 = vcvtq_f32_f16(*(float16x4_t *)v33.i8);
  v205 = vcvt_hight_f32_f16(v33);
  v34 = v5[28];
  v35 = v5[29];
  v206 = vcvtq_f32_f16(*(float16x4_t *)v34.i8);
  v207 = vcvt_hight_f32_f16(v34);
  v208 = vcvtq_f32_f16(*(float16x4_t *)v35.i8);
  v209 = vcvt_hight_f32_f16(v35);
  v36 = v5[30];
  v37 = v5[31];
  v210 = vcvtq_f32_f16(*(float16x4_t *)v36.i8);
  v211 = vcvt_hight_f32_f16(v36);
  v212 = vcvtq_f32_f16(*(float16x4_t *)v37.i8);
  v213 = vcvt_hight_f32_f16(v37);
  v38 = v5[32];
  v39 = v5[33];
  v215 = vcvt_hight_f32_f16(v38);
  v214 = vcvtq_f32_f16(*(float16x4_t *)v38.i8);
  v217 = vcvt_hight_f32_f16(v39);
  v216 = vcvtq_f32_f16(*(float16x4_t *)v39.i8);
  v40 = v5[34];
  v41 = v5[35];
  v219 = vcvt_hight_f32_f16(v40);
  v218 = vcvtq_f32_f16(*(float16x4_t *)v40.i8);
  v221 = vcvt_hight_f32_f16(v41);
  v220 = vcvtq_f32_f16(*(float16x4_t *)v41.i8);
  v42 = v5[36];
  v43 = v5[37];
  v223 = vcvt_hight_f32_f16(v42);
  v222 = vcvtq_f32_f16(*(float16x4_t *)v42.i8);
  v225 = vcvt_hight_f32_f16(v43);
  v224 = vcvtq_f32_f16(*(float16x4_t *)v43.i8);
  v44 = v5[38];
  v45 = v5[39];
  v227 = vcvt_hight_f32_f16(v44);
  v226 = vcvtq_f32_f16(*(float16x4_t *)v44.i8);
  v229 = vcvt_hight_f32_f16(v45);
  v228 = vcvtq_f32_f16(*(float16x4_t *)v45.i8);
  v46 = v5[40];
  v47 = v5[41];
  v231 = vcvt_hight_f32_f16(v46);
  v230 = vcvtq_f32_f16(*(float16x4_t *)v46.i8);
  v233 = vcvt_hight_f32_f16(v47);
  v232 = vcvtq_f32_f16(*(float16x4_t *)v47.i8);
  v48 = v5[42];
  v49 = v5[43];
  v235 = vcvt_hight_f32_f16(v48);
  v234 = vcvtq_f32_f16(*(float16x4_t *)v48.i8);
  v237 = vcvt_hight_f32_f16(v49);
  v236 = vcvtq_f32_f16(*(float16x4_t *)v49.i8);
  v50 = v5[44];
  v51 = v5[45];
  v239 = vcvt_hight_f32_f16(v50);
  v238 = vcvtq_f32_f16(*(float16x4_t *)v50.i8);
  v241 = vcvt_hight_f32_f16(v51);
  v240 = vcvtq_f32_f16(*(float16x4_t *)v51.i8);
  v52 = v5[46];
  v53 = v5[47];
  v243 = vcvt_hight_f32_f16(v52);
  v242 = vcvtq_f32_f16(*(float16x4_t *)v52.i8);
  v245 = vcvt_hight_f32_f16(v53);
  v244 = vcvtq_f32_f16(*(float16x4_t *)v53.i8);
  v54 = v5[48];
  v55 = v5[49];
  v247 = vcvt_hight_f32_f16(v54);
  v246 = vcvtq_f32_f16(*(float16x4_t *)v54.i8);
  v249 = vcvt_hight_f32_f16(v55);
  v248 = vcvtq_f32_f16(*(float16x4_t *)v55.i8);
  v56 = v5[50];
  v57 = v5[51];
  v251 = vcvt_hight_f32_f16(v56);
  v250 = vcvtq_f32_f16(*(float16x4_t *)v56.i8);
  v253 = vcvt_hight_f32_f16(v57);
  v252 = vcvtq_f32_f16(*(float16x4_t *)v57.i8);
  v58 = v5[52];
  v59 = v5[53];
  v255 = vcvt_hight_f32_f16(v58);
  v254 = vcvtq_f32_f16(*(float16x4_t *)v58.i8);
  v257 = vcvt_hight_f32_f16(v59);
  v256 = vcvtq_f32_f16(*(float16x4_t *)v59.i8);
  v60 = v5[54];
  v61 = v5[55];
  v259 = vcvt_hight_f32_f16(v60);
  v258 = vcvtq_f32_f16(*(float16x4_t *)v60.i8);
  v261 = vcvt_hight_f32_f16(v61);
  v260 = vcvtq_f32_f16(*(float16x4_t *)v61.i8);
  v62 = v5[56];
  v63 = v5[57];
  v263 = vcvt_hight_f32_f16(v62);
  v262 = vcvtq_f32_f16(*(float16x4_t *)v62.i8);
  v265 = vcvt_hight_f32_f16(v63);
  v264 = vcvtq_f32_f16(*(float16x4_t *)v63.i8);
  v64 = v5[58];
  v65 = v5[59];
  v267 = vcvt_hight_f32_f16(v64);
  v266 = vcvtq_f32_f16(*(float16x4_t *)v64.i8);
  v269 = vcvt_hight_f32_f16(v65);
  v268 = vcvtq_f32_f16(*(float16x4_t *)v65.i8);
  v66 = v5[60];
  v67 = v5[61];
  v271 = vcvt_hight_f32_f16(v66);
  v270 = vcvtq_f32_f16(*(float16x4_t *)v66.i8);
  v273 = vcvt_hight_f32_f16(v67);
  v272 = vcvtq_f32_f16(*(float16x4_t *)v67.i8);
  v68 = v5[62];
  v69 = v5[63];
  v275 = vcvt_hight_f32_f16(v68);
  v274 = vcvtq_f32_f16(*(float16x4_t *)v68.i8);
  v277 = vcvt_hight_f32_f16(v69);
  v276 = vcvtq_f32_f16(*(float16x4_t *)v69.i8);
  bzero(__B, 0x800uLL);
  v70 = *(float16x8_t *)(v4 + 16);
  v71 = vcvtq_f32_f16(*(float16x4_t *)v4);
  __B[1] = vcvt_hight_f32_f16(*(float16x8_t *)v4);
  __B[0] = v71;
  __B[3] = vcvt_hight_f32_f16(v70);
  __B[2] = vcvtq_f32_f16(*(float16x4_t *)v70.i8);
  v72 = *(float16x8_t *)(v4 + 32);
  v73 = *(float16x8_t *)(v4 + 48);
  __B[5] = vcvt_hight_f32_f16(v72);
  __B[4] = vcvtq_f32_f16(*(float16x4_t *)v72.i8);
  __B[7] = vcvt_hight_f32_f16(v73);
  __B[6] = vcvtq_f32_f16(*(float16x4_t *)v73.i8);
  v74 = *(float16x8_t *)(v4 + 64);
  v75 = *(float16x8_t *)(v4 + 80);
  __B[9] = vcvt_hight_f32_f16(v74);
  __B[8] = vcvtq_f32_f16(*(float16x4_t *)v74.i8);
  __B[11] = vcvt_hight_f32_f16(v75);
  __B[10] = vcvtq_f32_f16(*(float16x4_t *)v75.i8);
  v76 = *(float16x8_t *)(v4 + 96);
  v77 = *(float16x8_t *)(v4 + 112);
  __B[13] = vcvt_hight_f32_f16(v76);
  __B[12] = vcvtq_f32_f16(*(float16x4_t *)v76.i8);
  __B[15] = vcvt_hight_f32_f16(v77);
  __B[14] = vcvtq_f32_f16(*(float16x4_t *)v77.i8);
  v78 = *(float16x8_t *)(v4 + 128);
  v79 = *(float16x8_t *)(v4 + 144);
  __B[17] = vcvt_hight_f32_f16(v78);
  __B[16] = vcvtq_f32_f16(*(float16x4_t *)v78.i8);
  __B[19] = vcvt_hight_f32_f16(v79);
  __B[18] = vcvtq_f32_f16(*(float16x4_t *)v79.i8);
  v80 = *(float16x8_t *)(v4 + 160);
  v81 = *(float16x8_t *)(v4 + 176);
  __B[21] = vcvt_hight_f32_f16(v80);
  __B[20] = vcvtq_f32_f16(*(float16x4_t *)v80.i8);
  __B[23] = vcvt_hight_f32_f16(v81);
  __B[22] = vcvtq_f32_f16(*(float16x4_t *)v81.i8);
  v82 = *(float16x8_t *)(v4 + 192);
  v83 = *(float16x8_t *)(v4 + 208);
  __B[25] = vcvt_hight_f32_f16(v82);
  __B[24] = vcvtq_f32_f16(*(float16x4_t *)v82.i8);
  __B[27] = vcvt_hight_f32_f16(v83);
  __B[26] = vcvtq_f32_f16(*(float16x4_t *)v83.i8);
  v84 = *(float16x8_t *)(v4 + 224);
  v85 = *(float16x8_t *)(v4 + 240);
  __B[29] = vcvt_hight_f32_f16(v84);
  __B[28] = vcvtq_f32_f16(*(float16x4_t *)v84.i8);
  __B[31] = vcvt_hight_f32_f16(v85);
  __B[30] = vcvtq_f32_f16(*(float16x4_t *)v85.i8);
  v86 = *(float16x8_t *)(v4 + 256);
  v87 = *(float16x8_t *)(v4 + 272);
  __B[33] = vcvt_hight_f32_f16(v86);
  __B[32] = vcvtq_f32_f16(*(float16x4_t *)v86.i8);
  __B[35] = vcvt_hight_f32_f16(v87);
  __B[34] = vcvtq_f32_f16(*(float16x4_t *)v87.i8);
  v88 = *(float16x8_t *)(v4 + 288);
  v89 = *(float16x8_t *)(v4 + 304);
  __B[37] = vcvt_hight_f32_f16(v88);
  __B[36] = vcvtq_f32_f16(*(float16x4_t *)v88.i8);
  __B[39] = vcvt_hight_f32_f16(v89);
  __B[38] = vcvtq_f32_f16(*(float16x4_t *)v89.i8);
  v90 = *(float16x8_t *)(v4 + 320);
  v91 = *(float16x8_t *)(v4 + 336);
  __B[41] = vcvt_hight_f32_f16(v90);
  __B[40] = vcvtq_f32_f16(*(float16x4_t *)v90.i8);
  __B[43] = vcvt_hight_f32_f16(v91);
  __B[42] = vcvtq_f32_f16(*(float16x4_t *)v91.i8);
  v92 = *(float16x8_t *)(v4 + 352);
  v93 = *(float16x8_t *)(v4 + 368);
  __B[45] = vcvt_hight_f32_f16(v92);
  __B[44] = vcvtq_f32_f16(*(float16x4_t *)v92.i8);
  __B[47] = vcvt_hight_f32_f16(v93);
  __B[46] = vcvtq_f32_f16(*(float16x4_t *)v93.i8);
  v94 = *(float16x8_t *)(v4 + 384);
  v95 = *(float16x8_t *)(v4 + 400);
  __B[49] = vcvt_hight_f32_f16(v94);
  __B[48] = vcvtq_f32_f16(*(float16x4_t *)v94.i8);
  __B[51] = vcvt_hight_f32_f16(v95);
  __B[50] = vcvtq_f32_f16(*(float16x4_t *)v95.i8);
  v96 = *(float16x8_t *)(v4 + 416);
  v97 = *(float16x8_t *)(v4 + 432);
  __B[53] = vcvt_hight_f32_f16(v96);
  __B[52] = vcvtq_f32_f16(*(float16x4_t *)v96.i8);
  __B[55] = vcvt_hight_f32_f16(v97);
  __B[54] = vcvtq_f32_f16(*(float16x4_t *)v97.i8);
  v98 = *(float16x8_t *)(v4 + 448);
  v99 = *(float16x8_t *)(v4 + 464);
  __B[57] = vcvt_hight_f32_f16(v98);
  __B[56] = vcvtq_f32_f16(*(float16x4_t *)v98.i8);
  __B[59] = vcvt_hight_f32_f16(v99);
  __B[58] = vcvtq_f32_f16(*(float16x4_t *)v99.i8);
  v100 = *(float16x8_t *)(v4 + 480);
  v101 = *(float16x8_t *)(v4 + 496);
  __B[61] = vcvt_hight_f32_f16(v100);
  __B[60] = vcvtq_f32_f16(*(float16x4_t *)v100.i8);
  __B[63] = vcvt_hight_f32_f16(v101);
  __B[62] = vcvtq_f32_f16(*(float16x4_t *)v101.i8);
  v102 = *(float16x8_t *)(v4 + 512);
  v103 = *(float16x8_t *)(v4 + 528);
  __B[65] = vcvt_hight_f32_f16(v102);
  __B[64] = vcvtq_f32_f16(*(float16x4_t *)v102.i8);
  __B[67] = vcvt_hight_f32_f16(v103);
  __B[66] = vcvtq_f32_f16(*(float16x4_t *)v103.i8);
  v104 = *(float16x8_t *)(v4 + 544);
  v105 = *(float16x8_t *)(v4 + 560);
  __B[69] = vcvt_hight_f32_f16(v104);
  __B[68] = vcvtq_f32_f16(*(float16x4_t *)v104.i8);
  __B[71] = vcvt_hight_f32_f16(v105);
  __B[70] = vcvtq_f32_f16(*(float16x4_t *)v105.i8);
  v106 = *(float16x8_t *)(v4 + 576);
  v107 = *(float16x8_t *)(v4 + 592);
  __B[73] = vcvt_hight_f32_f16(v106);
  __B[72] = vcvtq_f32_f16(*(float16x4_t *)v106.i8);
  __B[75] = vcvt_hight_f32_f16(v107);
  __B[74] = vcvtq_f32_f16(*(float16x4_t *)v107.i8);
  v108 = *(float16x8_t *)(v4 + 608);
  v109 = *(float16x8_t *)(v4 + 624);
  __B[77] = vcvt_hight_f32_f16(v108);
  __B[76] = vcvtq_f32_f16(*(float16x4_t *)v108.i8);
  __B[79] = vcvt_hight_f32_f16(v109);
  __B[78] = vcvtq_f32_f16(*(float16x4_t *)v109.i8);
  v110 = *(float16x8_t *)(v4 + 640);
  v111 = *(float16x8_t *)(v4 + 656);
  __B[81] = vcvt_hight_f32_f16(v110);
  __B[80] = vcvtq_f32_f16(*(float16x4_t *)v110.i8);
  __B[83] = vcvt_hight_f32_f16(v111);
  __B[82] = vcvtq_f32_f16(*(float16x4_t *)v111.i8);
  v112 = *(float16x8_t *)(v4 + 672);
  v113 = *(float16x8_t *)(v4 + 688);
  __B[85] = vcvt_hight_f32_f16(v112);
  __B[84] = vcvtq_f32_f16(*(float16x4_t *)v112.i8);
  __B[87] = vcvt_hight_f32_f16(v113);
  __B[86] = vcvtq_f32_f16(*(float16x4_t *)v113.i8);
  v114 = *(float16x8_t *)(v4 + 704);
  v115 = *(float16x8_t *)(v4 + 720);
  __B[89] = vcvt_hight_f32_f16(v114);
  __B[88] = vcvtq_f32_f16(*(float16x4_t *)v114.i8);
  __B[91] = vcvt_hight_f32_f16(v115);
  __B[90] = vcvtq_f32_f16(*(float16x4_t *)v115.i8);
  v116 = *(float16x8_t *)(v4 + 736);
  v117 = *(float16x8_t *)(v4 + 752);
  __B[93] = vcvt_hight_f32_f16(v116);
  __B[92] = vcvtq_f32_f16(*(float16x4_t *)v116.i8);
  __B[95] = vcvt_hight_f32_f16(v117);
  __B[94] = vcvtq_f32_f16(*(float16x4_t *)v117.i8);
  v118 = *(float16x8_t *)(v4 + 768);
  v119 = *(float16x8_t *)(v4 + 784);
  __B[97] = vcvt_hight_f32_f16(v118);
  __B[96] = vcvtq_f32_f16(*(float16x4_t *)v118.i8);
  __B[99] = vcvt_hight_f32_f16(v119);
  __B[98] = vcvtq_f32_f16(*(float16x4_t *)v119.i8);
  v120 = *(float16x8_t *)(v4 + 800);
  v121 = *(float16x8_t *)(v4 + 816);
  __B[101] = vcvt_hight_f32_f16(v120);
  __B[100] = vcvtq_f32_f16(*(float16x4_t *)v120.i8);
  __B[103] = vcvt_hight_f32_f16(v121);
  __B[102] = vcvtq_f32_f16(*(float16x4_t *)v121.i8);
  v122 = *(float16x8_t *)(v4 + 832);
  v123 = *(float16x8_t *)(v4 + 848);
  __B[105] = vcvt_hight_f32_f16(v122);
  __B[104] = vcvtq_f32_f16(*(float16x4_t *)v122.i8);
  __B[107] = vcvt_hight_f32_f16(v123);
  __B[106] = vcvtq_f32_f16(*(float16x4_t *)v123.i8);
  v124 = *(float16x8_t *)(v4 + 864);
  v125 = *(float16x8_t *)(v4 + 880);
  __B[109] = vcvt_hight_f32_f16(v124);
  __B[108] = vcvtq_f32_f16(*(float16x4_t *)v124.i8);
  __B[111] = vcvt_hight_f32_f16(v125);
  __B[110] = vcvtq_f32_f16(*(float16x4_t *)v125.i8);
  v126 = *(float16x8_t *)(v4 + 896);
  v127 = *(float16x8_t *)(v4 + 912);
  __B[113] = vcvt_hight_f32_f16(v126);
  __B[112] = vcvtq_f32_f16(*(float16x4_t *)v126.i8);
  __B[115] = vcvt_hight_f32_f16(v127);
  __B[114] = vcvtq_f32_f16(*(float16x4_t *)v127.i8);
  v128 = *(float16x8_t *)(v4 + 928);
  v129 = *(float16x8_t *)(v4 + 944);
  __B[117] = vcvt_hight_f32_f16(v128);
  __B[116] = vcvtq_f32_f16(*(float16x4_t *)v128.i8);
  __B[119] = vcvt_hight_f32_f16(v129);
  __B[118] = vcvtq_f32_f16(*(float16x4_t *)v129.i8);
  v130 = *(float16x8_t *)(v4 + 960);
  v131 = *(float16x8_t *)(v4 + 976);
  __B[121] = vcvt_hight_f32_f16(v130);
  __B[120] = vcvtq_f32_f16(*(float16x4_t *)v130.i8);
  __B[123] = vcvt_hight_f32_f16(v131);
  __B[122] = vcvtq_f32_f16(*(float16x4_t *)v131.i8);
  v132 = *(float16x8_t *)(v4 + 992);
  v133 = *(float16x8_t *)(v4 + 1008);
  __B[125] = vcvt_hight_f32_f16(v132);
  __B[124] = vcvtq_f32_f16(*(float16x4_t *)v132.i8);
  __B[127] = vcvt_hight_f32_f16(v133);
  __B[126] = vcvtq_f32_f16(*(float16x4_t *)v133.i8);
  __C = 3.4028e38;
  vDSP_distancesq((const float *)__A, 1, (const float *)__B, 1, &__C, 0x200uLL);
  v134 = *(unsigned int *)(v4 + 1032);
  v135 = *(int8x8_t *)(v1 + 72);
  if (v135)
  {
    v136 = (uint8x8_t)vcnt_s8(v135);
    v136.i16[0] = vaddlv_u8(v136);
    if (v136.u32[0] > 1uLL)
    {
      v137 = *(unsigned int *)(v4 + 1032);
      if (*(_QWORD *)&v135 <= v134)
        v137 = v134 % *(_QWORD *)&v135;
    }
    else
    {
      v137 = (v135.i32[0] - 1) & v134;
    }
    v138 = *(uint64_t **)(*(_QWORD *)(v1 + 64) + 8 * v137);
    if (v138)
    {
      v138 = (uint64_t *)*v138;
      if (v138)
      {
        if (v136.u32[0] < 2uLL)
        {
          v139 = *(_QWORD *)&v135 - 1;
          while (1)
          {
            v141 = v138[1];
            if (v141 == v134)
            {
              if (*((_DWORD *)v138 + 4) == (_DWORD)v134)
                goto LABEL_22;
            }
            else if ((v141 & v139) != v137)
            {
              goto LABEL_21;
            }
            v138 = (uint64_t *)*v138;
            if (!v138)
              goto LABEL_22;
          }
        }
        do
        {
          v140 = v138[1];
          if (v140 == v134)
          {
            if (*((_DWORD *)v138 + 4) == (_DWORD)v134)
              break;
          }
          else
          {
            if (v140 >= *(_QWORD *)&v135)
              v140 %= *(_QWORD *)&v135;
            if (v140 != v137)
              goto LABEL_21;
          }
          v138 = (uint64_t *)*v138;
        }
        while (v138);
      }
    }
  }
  else
  {
LABEL_21:
    v138 = 0;
  }
LABEL_22:
  v142 = __C;
  v143 = *(float *)(v1 + 112);
  if (v143 == 0.0 || __C <= v143)
  {
    if (v138)
    {
      v147 = *__error();
      v148 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__A = 67109376;
        *(_DWORD *)&__A[4] = v134;
        *(_WORD *)&__A[8] = 2048;
        *(double *)&__A[10] = v142;
        _os_log_impl(&dword_1B8270000, v148, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", __A, 0x12u);
      }
      *__error() = v147;
    }
    *(_QWORD *)__A = *(_QWORD *)(v4 + 1024);
    *(_DWORD *)&__A[8] = v134;
    *(float *)&__A[12] = v142;
    MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::push(*(_QWORD **)(v1 + 104), (uint64_t)__A);
  }
  else
  {
    if (v138)
    {
      v144 = *__error();
      v145 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
      {
        v146 = *(float *)(v1 + 112);
        *(_DWORD *)__A = 67109632;
        *(_DWORD *)&__A[4] = v134;
        *(_WORD *)&__A[8] = 2048;
        *(double *)&__A[10] = v142;
        *(_WORD *)&__A[18] = 2048;
        *(double *)&__A[20] = v146;
        _os_log_impl(&dword_1B8270000, v145, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", __A, 0x1Cu);
      }
      *__error() = v144;
    }
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 24);
  }
}

uint64_t ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li512EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  const char *v40;
  _QWORD v41[2];
  _DWORD *(*v42)(uint64_t, unsigned int *, BOOL *);
  void *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[3];
  uint64_t v52[2];
  void *v53[3];
  __int128 v54;
  __int128 v55;
  char v56;
  __int128 v57;
  __int128 v58;

  if (IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a2))
  {
    v38 = __si_assert_copy_extra_268();
    v39 = v38;
    v40 = "";
    if (v38)
      v40 = v38;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2589, "target->nVectors() == 0", v40);
    free(v39);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v6 = operator new(8uLL);
  v53[0] = v6;
  *v6 = a1;
  v53[1] = v6 + 1;
  v53[2] = v6 + 1;
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(_QWORD *)(a1 + 64), *(std::__shared_weak_count **)(a1 + 72), (uint64_t)v53);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v8 = *(_QWORD *)(a1 + 80);
  v7 = *(std::__shared_weak_count **)(a1 + 88);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v12 = *(_QWORD *)(a1 + 96);
  v11 = *(std::__shared_weak_count **)(a1 + 104);
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  v52[0] = v8;
  v52[1] = (uint64_t)v7;
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(a2, v52);
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(a2, v52);
  }
  v50 = 0u;
  memset(v51, 0, sizeof(v51));
  v49 = 0u;
  v47 = v12;
  v48 = v11;
  if (v11)
  {
    v18 = (unint64_t *)&v11->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *(_QWORD *)(a1 + 48);
  v21 = *(std::__shared_weak_count **)(a1 + 56);
  v46[0] = v20;
  v46[1] = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v49, &v47, v46);
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 - 1, v22));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v49, &v47, v46);
  }
  v25 = v48;
  if (v48)
  {
    v26 = (unint64_t *)&v48->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v41[0] = MEMORY[0x1E0C809B0];
  v41[1] = 0x40000000;
  v42 = ___ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi_block_invoke;
  v43 = &__block_descriptor_tmp_341;
  v44 = a2;
  v45 = a3;
  v57 = 0u;
  v58 = 0u;
  v56 = 0;
  do
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next((uint64_t)&v54, (uint64_t)&v49);
    v57 = v54;
    v58 = v55;
    if (!(_QWORD)v55)
      break;
    v42((uint64_t)v41, (unsigned int *)&v57, (BOOL *)&v56);
  }
  while (!v56);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v51);
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v11)
  {
    v34 = (unint64_t *)&v11->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v7)
  {
    v36 = (unint64_t *)&v7->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v53[0])
    operator delete(v53[0]);
}

void _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(uint64_t a1, std::__shared_weak_count *a2, uint64_t a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  const void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  int v60;
  unint64_t *v61;
  unint64_t v62;
  unsigned int AppIntegerValue;
  unsigned int v64;
  unsigned int v65;
  double v66;
  unsigned __int8 *v67;
  unsigned __int8 v68;
  char *FdPtrForFile;
  char *v70;
  NSObject *v71;
  os_signpost_id_t v72;
  NSObject *v73;
  NSObject *v74;
  _QWORD *v75;
  uint64_t v76;
  std::ios_base *v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  int v84;
  NSObject *v85;
  os_log_type_t v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  int v89;
  NSObject *v90;
  os_log_type_t v91;
  Boolean *v92;
  double Current;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  char *v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  _BOOL4 v105;
  unint64_t *v106;
  unint64_t v107;
  unsigned int v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  char *v115;
  _BOOL4 v116;
  unint64_t v117;
  int v118;
  unsigned int v119;
  unsigned __int8 v120;
  NSObject *v121;
  unsigned int v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  NSObject *v126;
  NSObject *v127;
  int v128;
  NSObject *v129;
  CFAbsoluteTime v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  unsigned int v146;
  unsigned int v147;
  _BOOL4 v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  char *v153;
  char *v154;
  const char *v155;
  char *v156;
  char *v157;
  const char *v158;
  uint64_t v159;
  char *v160;
  const char *v161;
  os_signpost_id_t spid;
  unint64_t v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  unsigned int v167;
  size_t __sz;
  unint64_t v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176[2];
  uint64_t v177;
  std::__shared_weak_count *v178;
  Boolean keyExistsAndHasValidFormat[8];
  std::__shared_weak_count *v180;
  uint64_t v181;
  _OWORD v182[4];
  __int128 __p;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  uint8_t buf[32];
  Boolean block[8];
  uint64_t v206;
  _BYTE v207[24];
  uint64_t v208;

  v208 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = *(const void **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  v9 = v7 - *(_QWORD *)a3;
  if (v7 == *(_QWORD *)a3)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    if (v9 < 0)
      goto LABEL_251;
    v10 = (char *)operator new(v7 - *(_QWORD *)a3);
    v11 = &v10[8 * (v9 >> 3)];
    memcpy(v10, v8, v9);
  }
  v202 = 0;
  v203 = 0;
  _ZN16QuantizerManagerIDF16_Li512EE15sharedQuantizerEi(&v202, a1, 0);
  v12 = v11 - v10;
  v170 = a1;
  v171 = a2;
  if (v11 == v10)
  {
    v14 = 0;
    v13 = 0;
  }
  else
  {
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF9)
      goto LABEL_251;
    v13 = (char *)operator new(2 * v12);
    bzero(v13, 2 * v12);
    v14 = &v13[2 * v12];
  }
  __sz = v11 - v10;
  v15 = v12 >> 3;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v202 + 24))(v202);
  v172 = v11;
  v169 = v15;
  v17 = 0;
  if (v11 != v10)
  {
    if (v15 <= 1)
      v15 = 1;
    while (1)
    {
      (*(void (**)(Boolean *__return_ptr))(**(_QWORD **)&v10[8 * v17] + 16))(keyExistsAndHasValidFormat);
      v18 = v202;
      v20 = *(_QWORD *)keyExistsAndHasValidFormat;
      v19 = v180;
      if (!v180)
        goto LABEL_21;
      v21 = (unint64_t *)&v180->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        if (v20 == v18)
          goto LABEL_16;
      }
      else
      {
LABEL_21:
        if (v20 == v18)
          goto LABEL_16;
      }
      *(_QWORD *)keyExistsAndHasValidFormat = 0;
      v180 = 0;
      v23 = *(_QWORD *)&v10[8 * v17];
      v200 = v202;
      v201 = v203;
      if (v203)
      {
        v24 = (unint64_t *)&v203->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      (*(void (**)(Boolean *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v23 + 40))(keyExistsAndHasValidFormat, v23, &v200);
      v26 = v201;
      if (!v201)
        goto LABEL_29;
      v27 = (unint64_t *)&v201->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        v30 = *(_QWORD *)keyExistsAndHasValidFormat;
        v29 = v180;
        if (!v180)
          goto LABEL_32;
      }
      else
      {
LABEL_29:
        v30 = *(_QWORD *)keyExistsAndHasValidFormat;
        v29 = v180;
        if (!v180)
          goto LABEL_32;
      }
      v31 = (unint64_t *)&v29->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
LABEL_32:
      v33 = &v13[16 * v17];
      v34 = (std::__shared_weak_count *)*((_QWORD *)v33 + 1);
      *(_QWORD *)v33 = v30;
      *((_QWORD *)v33 + 1) = v29;
      if (!v34)
        goto LABEL_36;
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        v37 = v180;
        if (v180)
        {
LABEL_37:
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
      }
      else
      {
LABEL_36:
        v37 = v180;
        if (v180)
          goto LABEL_37;
      }
LABEL_16:
      if (++v17 == v15)
      {
        v17 = 0;
        v40 = 0;
        if (v169 <= 1)
          v41 = 1;
        else
          v41 = v169;
        while (1)
        {
          v42 = *(_QWORD *)&v13[16 * v40];
          if (v42)
          {
            v43 = *(_QWORD *)&v10[8 * v40];
            v198 = v202;
            v199 = v203;
            if (v203)
            {
              v44 = (unint64_t *)&v203->__shared_owners_;
              do
                v45 = __ldxr(v44);
              while (__stxr(v45 + 1, v44));
            }
            v46 = *(std::__shared_weak_count **)&v13[16 * v40 + 8];
            v196 = v42;
            v197 = v46;
            if (v46)
            {
              v47 = (unint64_t *)&v46->__shared_owners_;
              do
                v48 = __ldxr(v47);
              while (__stxr(v48 + 1, v47));
            }
            (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v43 + 48))(v43, &v198, &v196);
            v49 = v197;
            if (!v197)
              goto LABEL_61;
            v50 = (unint64_t *)&v197->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
              v52 = v199;
              if (!v199)
                goto LABEL_67;
            }
            else
            {
LABEL_61:
              v52 = v199;
              if (!v199)
                goto LABEL_67;
            }
            v53 = (unint64_t *)&v52->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
LABEL_67:
          (*(void (**)(Boolean *__return_ptr))(**(_QWORD **)&v10[8 * v40] + 24))(keyExistsAndHasValidFormat);
          v55 = v180;
          v56 = *(unsigned int *)(*(_QWORD *)keyExistsAndHasValidFormat + 72);
          if (v180)
          {
            v57 = (unint64_t *)&v180->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          (*(void (**)(Boolean *__return_ptr))(**(_QWORD **)&v10[8 * v40] + 24))(keyExistsAndHasValidFormat);
          v59 = v180;
          v60 = *(_DWORD *)(*(_QWORD *)keyExistsAndHasValidFormat + 68);
          if (v180)
          {
            v61 = (unint64_t *)&v180->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          if (v60 != v16)
          {
            v153 = __si_assert_copy_extra_268();
            v154 = v153;
            v155 = "";
            if (v153)
              v155 = v153;
            __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2080, "vectorIndexes[i]->getPartitions()->nPartitions() == nPartitions", v155);
LABEL_239:
            free(v154);
            if (__valid_fs(-1))
            {
              MEMORY[0xBAD] = -559038737;
              abort();
            }
            MEMORY[0xC00] = -559038737;
            abort();
          }
          v17 += v56;
          if (++v40 == v41)
            goto LABEL_79;
        }
      }
    }
  }
LABEL_79:
  keyExistsAndHasValidFormat[0] = 0;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionSizeFactor"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v64 = AppIntegerValue;
  else
    v64 = 45;
  keyExistsAndHasValidFormat[0] = 0;
  v65 = CFPreferencesGetAppIntegerValue(CFSTR("IVFTrainingTimeBudget"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v66 = (double)v65;
  else
    v66 = 30.0;
  if (v17 >> 4 < 0x271 || v17 < v64 * (unint64_t)v16 * v64 * (unint64_t)v16 / 0x64)
  {
LABEL_108:
    v87 = v171;
    if (!v13)
      goto LABEL_109;
    goto LABEL_187;
  }
  v67 = (unsigned __int8 *)(v170 + 72);
  do
    v68 = __ldaxr(v67);
  while (__stlxr(1u, v67));
  if ((v68 & 1) == 0 && *(_QWORD *)(v170 + 96))
  {
    v156 = __si_assert_copy_extra_268();
    v157 = v156;
    v158 = "";
    if (v156)
      v158 = v156;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 717, "_trainingQuantizer == nullptr", v158);
    free(v157);
    if (__valid_fs(-1))
      v159 = 2989;
    else
      v159 = 3072;
    *(_DWORD *)v159 = -559038737;
    goto LABEL_251;
  }
  FdPtrForFile = (char *)QuantizerManager<float,768>::createFdPtrForFile(v170, "dummy");
  if (!FdPtrForFile)
  {
    atomic_store(0, v67);
    goto LABEL_105;
  }
  v70 = FdPtrForFile;
  _fd_unlink_with_origin((uint64_t)FdPtrForFile, 0);
  fd_release(v70);
  if ((v68 & 1) != 0)
  {
LABEL_105:
    v84 = *__error();
    v85 = _SILogForLogForCategory(16);
    v86 = 2 * (dword_1EF19FCCC < 4);
    if (os_log_type_enabled(v85, v86))
    {
      *(_WORD *)keyExistsAndHasValidFormat = 0;
      _os_log_impl(&dword_1B8270000, v85, v86, "training quantizer already happen in other thread. Skip!", keyExistsAndHasValidFormat, 2u);
    }
    *__error() = v84;
    goto LABEL_108;
  }
  v167 = v64;
  v71 = _SILogForLogForCategory(0);
  v72 = os_signpost_id_make_with_pointer(v71, 0);
  v73 = _SILogForLogForCategory(0);
  spid = v72;
  v163 = v72 - 1;
  if (v72 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v74 = v73;
    if (os_signpost_enabled(v73))
    {
      *(_WORD *)keyExistsAndHasValidFormat = 0;
      _os_signpost_emit_with_name_impl(&dword_1B8270000, v74, OS_SIGNPOST_INTERVAL_BEGIN, v72, "IVFVectorIndexTrain", "Start", keyExistsAndHasValidFormat, 2u);
    }
  }
  v195 = 0u;
  v194 = 0u;
  v193 = 0u;
  v192 = 0u;
  v191 = 0u;
  v190 = 0u;
  v189 = 0u;
  v188 = 0u;
  v187 = 0u;
  v185 = 0;
  v184 = 0u;
  __p = 0u;
  memset(v182, 0, sizeof(v182));
  v180 = 0;
  v166 = MEMORY[0x1E0DE4FD0] + 104;
  v186 = MEMORY[0x1E0DE4FD0] + 104;
  v164 = MEMORY[0x1E0DE4FD0] + 64;
  v181 = MEMORY[0x1E0DE4FD0] + 64;
  v75 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v76 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)keyExistsAndHasValidFormat = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  *(_QWORD *)&keyExistsAndHasValidFormat[*(_QWORD *)(*(_QWORD *)keyExistsAndHasValidFormat - 24)] = v76;
  v180 = 0;
  v77 = (std::ios_base *)&keyExistsAndHasValidFormat[*(_QWORD *)(*(_QWORD *)keyExistsAndHasValidFormat - 24)];
  std::ios_base::init(v77, v182);
  v77[1].__vftable = 0;
  v77[1].__fmtflags_ = -1;
  v78 = v75[5];
  v181 = v75[4];
  *(uint64_t *)((char *)&v181 + *(_QWORD *)(v181 - 24)) = v78;
  *(_QWORD *)keyExistsAndHasValidFormat = v75[1];
  *(_QWORD *)&keyExistsAndHasValidFormat[*(_QWORD *)(*(_QWORD *)keyExistsAndHasValidFormat - 24)] = v75[6];
  v186 = v166;
  *(_QWORD *)keyExistsAndHasValidFormat = MEMORY[0x1E0DE4FD0] + 24;
  v181 = v164;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&v182[0] = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v184 = 0u;
  LODWORD(v185) = 24;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v181, (uint64_t)"[", 1);
  if (v172 != v10)
  {
    v79 = v10;
    do
    {
      (*(void (**)(Boolean *__return_ptr))(**(_QWORD **)v79 + 24))(block);
      v80 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v80, (uint64_t)", ", 2);
      v81 = (std::__shared_weak_count *)v206;
      if (v206)
      {
        v82 = (unint64_t *)(v206 + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v79 += 8;
    }
    while (v79 != v172);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v181, (uint64_t)"]", 1);
  v89 = *__error();
  v90 = _SILogForLogForCategory(16);
  v91 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v90, v91))
  {
    std::stringbuf::str();
    v92 = v207[7] >= 0 ? block : *(Boolean **)block;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v92;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v16;
    _os_log_impl(&dword_1B8270000, v90, v91, "training quantizer with %s vectors in %u partitions", buf, 0x12u);
    if ((v207[7] & 0x80000000) != 0)
      operator delete(*(void **)block);
  }
  *__error() = v89;
  Current = CFAbsoluteTimeGetCurrent();
  if (CFAbsoluteTimeGetCurrent() - Current >= v66)
  {
    v102 = 0;
    goto LABEL_169;
  }
  v94 = (sqrt((double)v17) / (double)v167);
  block[0] = 0;
  v95 = CFPreferencesGetAppIntegerValue(CFSTR("IVFSeedCentroidPerTraining"), CFSTR("com.apple.Spotlight"), block);
  if (block[0])
    v96 = v95;
  else
    v96 = 60;
  v165 = v94;
  v97 = 2 * (v94 - v16);
  if (v96 <= v97)
    v98 = v97;
  else
    v98 = v96;
  v177 = v170;
  v178 = v171;
  if (v171)
  {
    v99 = (unint64_t *)&v171->__shared_owners_;
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 1, v99));
  }
  memset(buf, 0, 24);
  if (v172 == v10)
  {
    v101 = 0;
    goto LABEL_132;
  }
  if ((__sz & 0x8000000000000000) != 0)
LABEL_251:
    abort();
  v101 = (char *)operator new(__sz);
  *(_QWORD *)buf = v101;
  *(_QWORD *)&buf[16] = &v101[8 * v169];
  memcpy(v101, v10, __sz);
  *(_QWORD *)&buf[8] = &v101[8 * v169];
LABEL_132:
  block[0] = 0;
  v103 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionRecycleTheshold"), CFSTR("com.apple.Spotlight"), block);
  if (block[0])
    v104 = v103;
  else
    v104 = 3;
  v105 = _ZN22IVFVectorIndexTemplateIDF16_Li512EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li512EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(&v177, buf, v98, v104);
  if (v101)
  {
    *(_QWORD *)&buf[8] = v101;
    operator delete(v101);
  }
  if (v171)
  {
    v106 = (unint64_t *)&v171->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  if (v105)
  {
    _ZN16QuantizerManagerIDF16_Li512EE20lastTrainedQuantizerEv(block, v170);
    v108 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)block + 24))(*(_QWORD *)block);
    v109 = (std::__shared_weak_count *)v206;
    if (v206)
    {
      v110 = (unint64_t *)(v206 + 8);
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
    if (v17 >= v167 * (unint64_t)v108 * v167 * (unint64_t)v108 / 0x64)
    {
      v112 = v171;
      v139 = (unint64_t *)&v171->__shared_owners_;
      v102 = 1;
      while (CFAbsoluteTimeGetCurrent() - Current < v66)
      {
        block[0] = 0;
        v140 = CFPreferencesGetAppIntegerValue(CFSTR("IVFSeedCentroidPerTraining"), CFSTR("com.apple.Spotlight"), block);
        if (block[0])
          v141 = v140;
        else
          v141 = 60;
        v142 = 2 * (v165 - v108);
        if (v141 <= v142)
          v143 = v142;
        else
          v143 = v141;
        v177 = v170;
        v178 = v112;
        if (v112)
        {
          do
            v144 = __ldxr(v139);
          while (__stxr(v144 + 1, v139));
        }
        memset(buf, 0, 24);
        if (v172 == v10)
        {
          v145 = 0;
        }
        else
        {
          if ((__sz & 0x8000000000000000) != 0)
            goto LABEL_251;
          v145 = (char *)operator new(__sz);
          *(_QWORD *)buf = v145;
          *(_QWORD *)&buf[16] = &v145[8 * v169];
          memcpy(v145, v10, __sz);
          *(_QWORD *)&buf[8] = &v145[8 * v169];
        }
        block[0] = 0;
        v146 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionRecycleTheshold"), CFSTR("com.apple.Spotlight"), block);
        if (block[0])
          v147 = v146;
        else
          v147 = 3;
        v148 = _ZN22IVFVectorIndexTemplateIDF16_Li512EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li512EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(&v177, buf, v143, v147);
        if (v145)
        {
          *(_QWORD *)&buf[8] = v145;
          operator delete(v145);
        }
        if (v171)
        {
          do
            v149 = __ldaxr(v139);
          while (__stlxr(v149 - 1, v139));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
          }
        }
        ++v102;
        if (!v148)
          goto LABEL_169;
        _ZN16QuantizerManagerIDF16_Li512EE20lastTrainedQuantizerEv(block, v170);
        v108 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)block + 24))(*(_QWORD *)block);
        v150 = (std::__shared_weak_count *)v206;
        if (v206)
        {
          v151 = (unint64_t *)(v206 + 8);
          do
            v152 = __ldaxr(v151);
          while (__stlxr(v152 - 1, v151));
          if (!v152)
          {
            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
            std::__shared_weak_count::__release_weak(v150);
          }
        }
        v112 = v171;
        if (v17 < v167 * (unint64_t)v108 * v167 * (unint64_t)v108 / 0x64)
          break;
      }
    }
    else
    {
      v102 = 1;
      v112 = v171;
    }
    v113 = (unint64_t *)&v112->__shared_owners_;
    while (1)
    {
      if (CFAbsoluteTimeGetCurrent() - Current >= v66)
        goto LABEL_169;
      v176[0] = v170;
      v176[1] = (uint64_t)v171;
      if (v171)
      {
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
      }
      v173 = 0;
      v174 = 0;
      v175 = 0;
      if (v172 != v10)
        break;
      v116 = _ZN22IVFVectorIndexTemplateIDF16_Li512EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li512EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(v176, &v173, 0, 2u);
      if (v171)
        goto LABEL_159;
LABEL_162:
      ++v102;
      if (v116)
      {
        block[0] = 0;
        v118 = CFPreferencesGetAppIntegerValue(CFSTR("IVFMaxTrainingIteration"), CFSTR("com.apple.Spotlight"), block);
        v119 = block[0] ? v118 : 3;
        if (v102 <= v119)
          continue;
      }
      goto LABEL_169;
    }
    if ((__sz & 0x8000000000000000) != 0)
      goto LABEL_251;
    v115 = (char *)operator new(__sz);
    v173 = v115;
    v175 = &v115[8 * v169];
    memcpy(v115, v10, __sz);
    v174 = &v115[8 * v169];
    v116 = _ZN22IVFVectorIndexTemplateIDF16_Li512EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li512EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(v176, &v173, 0, 2u);
    v174 = v115;
    operator delete(v115);
    if (!v171)
      goto LABEL_162;
    do
LABEL_159:
      v117 = __ldaxr(v113);
    while (__stlxr(v117 - 1, v113));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
    goto LABEL_162;
  }
  v102 = 1;
LABEL_169:
  v120 = atomic_load(v67);
  if ((v120 & 1) == 0)
  {
    v160 = __si_assert_copy_extra_268();
    v154 = v160;
    v161 = "";
    if (v160)
      v161 = v160;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 794, "_training.test()", v161);
    goto LABEL_239;
  }
  if (*(_QWORD *)(v170 + 96))
  {
    v121 = *(NSObject **)(v170 + 16);
    *(_QWORD *)block = MEMORY[0x1E0C809B0];
    v206 = 0x40000000;
    *(_QWORD *)v207 = ___ZN16QuantizerManagerIDF16_Li512EE23commitTrainingQuantizerEv_block_invoke;
    *(_QWORD *)&v207[8] = &__block_descriptor_tmp_358;
    *(_QWORD *)&v207[16] = v170;
    dispatch_sync(v121, block);
  }
  atomic_store(0, (unsigned __int8 *)(v170 + 72));
  _ZN16QuantizerManagerIDF16_Li512EE15sharedQuantizerEi(block, v170, 0);
  v122 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)block + 24))(*(_QWORD *)block);
  v123 = (std::__shared_weak_count *)v206;
  if (v206)
  {
    v124 = (unint64_t *)(v206 + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = _SILogForLogForCategory(0);
  if (v163 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v127 = v126;
    if (os_signpost_enabled(v126))
    {
      *(_WORD *)block = 0;
      _os_signpost_emit_with_name_impl(&dword_1B8270000, v127, OS_SIGNPOST_INTERVAL_END, spid, "IVFVectorIndexTrain", "End", block, 2u);
    }
  }
  v128 = *__error();
  v129 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
  {
    v130 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)block = 67110144;
    *(_DWORD *)&block[4] = v17;
    LOWORD(v206) = 1024;
    *(_DWORD *)((char *)&v206 + 2) = v122;
    HIWORD(v206) = 1024;
    *(_DWORD *)v207 = v17 / v122;
    *(_WORD *)&v207[4] = 1024;
    *(_DWORD *)&v207[6] = v102;
    *(_WORD *)&v207[10] = 2048;
    *(double *)&v207[12] = v130 - Current;
    _os_log_impl(&dword_1B8270000, v129, OS_LOG_TYPE_DEFAULT, "training quantizer for %u vectors in %u partitions average size: %u for %u iterations duration: %fs", block, 0x24u);
  }
  *__error() = v128;
  *(_QWORD *)keyExistsAndHasValidFormat = *MEMORY[0x1E0DE4F50];
  v131 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)&keyExistsAndHasValidFormat[*(_QWORD *)(*(_QWORD *)keyExistsAndHasValidFormat - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v181 = v131;
  *(_QWORD *)&v182[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v184) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1BCCB0650](&v186);
  v87 = v171;
  if (!v13)
  {
LABEL_109:
    v88 = v203;
    if (!v203)
      goto LABEL_198;
    goto LABEL_194;
  }
LABEL_187:
  while (v14 != v13)
  {
    v132 = (std::__shared_weak_count *)*((_QWORD *)v14 - 1);
    if (v132)
    {
      v133 = (unint64_t *)&v132->__shared_owners_;
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
    v14 -= 16;
  }
  operator delete(v13);
  v88 = v203;
  if (v203)
  {
LABEL_194:
    v135 = (unint64_t *)&v88->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
LABEL_198:
  if (v10)
    operator delete(v10);
  if (v87)
  {
    v137 = (unint64_t *)&v87->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
}

_DWORD *_ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, char a5, float a6)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  const UInt8 *data;
  int v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  int v22;
  NSObject *v23;
  _BYTE *v24;
  int v25;
  NSObject *v26;
  _BYTE *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  _DWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  NSObject *v44;
  const UInt8 *v45;
  int v46;
  NSObject *v47;
  size_t v48;
  int v49;
  NSObject *v50;
  int v51;
  NSObject *v52;
  _BYTE *v53;
  int v54;
  NSObject *v55;
  _BYTE *v56;
  NSObject *v57;
  int v58;
  NSObject *v59;
  int v60;
  int v61;
  char *v62;
  char *v63;
  const char *v64;
  char *v65;
  char *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  NSObject *v76;
  _QWORD *v77;
  int v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  int v95;
  char *v96;
  const char *v97;
  char *v98;
  const char *v99;
  char *v100;
  const char *v101;
  char *v102;
  const char *v103;
  char *v104;
  const char *v105;
  std::__shared_weak_count *v106;
  unsigned int v107;
  void *__src;
  uint64_t v109;
  float v110;
  unsigned int v111;
  uint8_t buf[4];
  _BYTE *v113;
  _BYTE __p[12];
  __int16 v115;
  _BYTE v116[20];
  _BYTE v117[10];
  uint64_t v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v111 = a4;
  v110 = a6;
  if (*(_BYTE *)(a1 + 160))
  {
    v62 = __si_assert_copy_extra_268();
    v63 = v62;
    v64 = "";
    if (v62)
      v64 = v62;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2430, "!readOnly", v64);
    goto LABEL_121;
  }
  if ((a5 & 1) != 0)
  {
    v9 = a4;
    if ((_DWORD)a4 == -1)
      goto LABEL_79;
    goto LABEL_30;
  }
  v10 = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li512EERjRfj(a1, (uint64_t)a3, (int *)&v111, &v110, a2);
  v9 = v111;
  if (v111 == -1)
  {
LABEL_79:
    v65 = __si_assert_copy_extra_268();
    v66 = v65;
    v67 = "";
    if (v65)
      v67 = v65;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2435, "partID != VECTOR_NOT_FOUND", v67);
    goto LABEL_82;
  }
  if (v10 == -1)
  {
LABEL_30:
    __src = a3;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    v28 = *(std::__shared_weak_count **)(a1 + 88);
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
    }
    v106 = v28;
    v32 = *(_DWORD **)(a1 + 96);
    v31 = *(std::__shared_weak_count **)(a1 + 104);
    if (v31)
    {
      v33 = (unint64_t *)&v31->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    v35 = *(_QWORD *)(a1 + 48);
    v36 = *(_QWORD **)(v35 + 32);
    v37 = v36[2];
    v38 = v36[7];
    v39 = v38 + v37;
    v107 = a2;
    if (v38 + v37 >= v36[6])
    {
      if (!_storage_array_Expand((uint64_t)(v36 + 1)))
      {
        v40 = 0;
        if (v37 > 0x40F)
          goto LABEL_89;
        goto LABEL_38;
      }
      v38 = v36[7];
      v39 = v38 + v37;
    }
    v36[7] = v39;
    v40 = (v38 - v36[3]) / v37;
    if (v37 > 0x40F)
      goto LABEL_89;
LABEL_38:
    v41 = v36[2];
    if (v41 <= 0x40F)
    {
      LODWORD(v42) = 1040;
      do
      {
        v43 = v36[7] + v41;
        if (v43 >= v36[6])
        {
          if (!_storage_array_Expand((uint64_t)(v36 + 1)))
            goto LABEL_42;
          v43 = v36[7] + v41;
        }
        v36[7] = v43;
LABEL_42:
        v41 = v36[2];
        v42 = (v42 - v41);
      }
      while (v41 < v42);
    }
LABEL_89:
    v69 = (uint64_t)(v36 + 524);
    bit_vector_set_9027((uint64_t)(v36 + 524), (v40 >> 20));
    v70 = (v40 + 1040) >> 20;
    if (v70 > (v40 >> 20))
    {
      v71 = (v40 >> 20) + 1;
      do
      {
        v72 = v71;
        bit_vector_set_9027(v69, v71++);
      }
      while (v70 > v72);
    }
    v73 = *(unsigned int *)(v35 + 40);
    v74 = v40;
    if (v40 != v73)
    {
      v75 = *__error();
      v76 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
      {
        v95 = *(_DWORD *)(v35 + 40);
        *(_DWORD *)__p = 136315906;
        *(_QWORD *)&__p[4] = "newEntry";
        v115 = 1024;
        *(_DWORD *)v116 = 1779;
        *(_WORD *)&v116[4] = 2048;
        *(_QWORD *)&v116[6] = v40;
        *(_WORD *)&v116[14] = 1024;
        *(_DWORD *)&v116[16] = v95;
        _os_log_error_impl(&dword_1B8270000, v76, OS_LOG_TYPE_ERROR, "%s:%d: offset: %llu, nVectors: %u", __p, 0x22u);
      }
      *__error() = v75;
      v77 = *(_QWORD **)(v35 + 32);
      v78 = *__error();
      v79 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
      {
        v80 = v77[6];
        v81 = v77[7];
        v83 = v77[2];
        v82 = v77[3];
        *(_DWORD *)__p = 134219008;
        *(_QWORD *)&__p[4] = v77;
        v115 = 2048;
        *(_QWORD *)v116 = v80;
        *(_WORD *)&v116[8] = 2048;
        *(_QWORD *)&v116[10] = v81;
        *(_WORD *)&v116[18] = 2048;
        *(_QWORD *)v117 = v82;
        *(_WORD *)&v117[8] = 2048;
        v118 = v83;
        _os_log_impl(&dword_1B8270000, v79, OS_LOG_TYPE_DEFAULT, "vi_onefixedsize_disk_allocator %p size: %llu, freeRegion: %llu, header: %llu, elemSize: %lu", __p, 0x34u);
      }
      *__error() = v78;
      v74 = *(unsigned int *)(v35 + 40);
      LODWORD(v73) = *(_DWORD *)(v35 + 40);
    }
    if (v40 == v74)
    {
      *(_DWORD *)(v35 + 40) = v73 + 1;
      v84 = (_QWORD *)_windowsResolvePtr(*(_QWORD *)(v35 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v35 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v35 + 32) + 16) * v40, 0x410uLL);
      memcpy(v84, __src, 0x400uLL);
      v84[128] = 0;
      (*(void (**)(_DWORD *, uint64_t, unint64_t, float))(*(_QWORD *)v32 + 56))(v32, v9, v40, v110);
      v85 = *(_QWORD *)(a1 + 48);
      if (v32[18] == *(_DWORD *)(v85 + 40))
      {
        v86 = v40;
        v87 = v40 >> 20;
        v88 = *(_QWORD *)(v85 + 32) + 4192;
        bit_vector_set_9027(v88, v87);
        v89 = ((unint64_t)v40 + 1040) >> 20;
        if (v89 > v87)
        {
          do
            bit_vector_set_9027(v88, ++v87);
          while (v89 != v87);
        }
        v16 = (_DWORD *)_windowsResolvePtr(*(_QWORD *)(v85 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v85 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v85 + 32) + 16) * v86, 0x410uLL);
        v16[258] = v107;
        if (*(_DWORD *)(*(_QWORD *)(a1 + 48) + 40) == 1)
          *(_DWORD *)(a1 + 164) = v107;
        *(_DWORD *)(a1 + 168) = v107;
        data_map_set_offset_for_id(*(_QWORD *)(a1 + 144), v107, (16 * v86) | ((unint64_t)*(unsigned int *)(a1 + 40) << 36) | (4 * (*(_DWORD *)(a1 + 128) & 3)) | *(_DWORD *)(a1 + 124) & 3, *(unsigned __int16 *)(a1 + 120) | ((unint64_t)*(unsigned int *)(a1 + 132) << 32), *(_DWORD *)(a1 + 136));
        if (v31)
        {
          v90 = (unint64_t *)&v31->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        if (v106)
        {
          v92 = (unint64_t *)&v106->__shared_owners_;
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
        return v16;
      }
      v98 = __si_assert_copy_extra_268();
      v63 = v98;
      v99 = "";
      if (v98)
        v99 = v98;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2440, "cur.partitions->nVectors() == vectors->count()", v99);
    }
    else
    {
      v96 = __si_assert_copy_extra_268();
      v63 = v96;
      v97 = "";
      if (v96)
        v97 = v96;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1782, "offset == nVectors", v97);
    }
LABEL_121:
    free(v63);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v11 = *(_QWORD *)(a1 + 48);
  v12 = v10;
  v13 = (unint64_t)v10 >> 20;
  v14 = *(_QWORD *)(v11 + 32) + 4192;
  bit_vector_set_9027(v14, v13);
  v15 = (unint64_t)(v12 + 1040) >> 20;
  if (v15 > v13)
  {
    do
      bit_vector_set_9027(v14, ++v13);
    while (v15 != v13);
  }
  v16 = (_DWORD *)_windowsResolvePtr(*(_QWORD *)(v11 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v11 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v11 + 32) + 16) * v12, 0x410uLL);
  if (v16[258] != a2)
  {
    v109 = 0;
    data = data_map_get_data(*(_QWORD *)(a1 + 144), a2, &v109);
    v18 = *__error();
    v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 136316162;
      *(_QWORD *)&__p[4] = "lookupForInsert";
      v115 = 1024;
      *(_DWORD *)v116 = 2463;
      *(_WORD *)&v116[4] = 1024;
      *(_DWORD *)&v116[6] = a2;
      *(_WORD *)&v116[10] = 2048;
      *(_QWORD *)&v116[12] = data;
      *(_WORD *)v117 = 2048;
      *(_QWORD *)&v117[2] = v109;
      _os_log_error_impl(&dword_1B8270000, v19, OS_LOG_TYPE_ERROR, "%s:%d: vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v18;
    if (v109 < 1)
    {
      v25 = *__error();
      v44 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "lookupForInsert";
        v115 = 1024;
        *(_DWORD *)v116 = 2472;
        _os_log_error_impl(&dword_1B8270000, v44, OS_LOG_TYPE_ERROR, "%s:%d: vectorId is invalid", __p, 0x12u);
      }
    }
    else
    {
      if (v109 != 1024)
      {
        v102 = __si_assert_copy_extra_268();
        v63 = v102;
        v103 = "";
        if (v102)
          v103 = v102;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2465, "size == D * sizeof(ELEM_TYPE)", v103);
        goto LABEL_121;
      }
      if (!data || !memcmp(data, a3, 0x400uLL))
      {
LABEL_49:
        v45 = data_map_get_data(*(_QWORD *)(a1 + 144), v16[258], &v109);
        v46 = *__error();
        v47 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          v60 = v16[258];
          *(_DWORD *)__p = 136316162;
          *(_QWORD *)&__p[4] = "lookupForInsert";
          v115 = 1024;
          *(_DWORD *)v116 = 2475;
          *(_WORD *)&v116[4] = 1024;
          *(_DWORD *)&v116[6] = v60;
          *(_WORD *)&v116[10] = 2048;
          *(_QWORD *)&v116[12] = v45;
          *(_WORD *)v117 = 2048;
          *(_QWORD *)&v117[2] = v109;
          _os_log_error_impl(&dword_1B8270000, v47, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
        }
        *__error() = v46;
        if (v109 < 1)
        {
          v54 = *__error();
          v57 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = "lookupForInsert";
            v115 = 1024;
            *(_DWORD *)v116 = 2484;
            _os_log_error_impl(&dword_1B8270000, v57, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId is invalid", __p, 0x12u);
          }
        }
        else
        {
          if (v109 != 1024)
          {
            v104 = __si_assert_copy_extra_268();
            v63 = v104;
            v105 = "";
            if (v104)
              v105 = v104;
            __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2477, "size == D * sizeof(ELEM_TYPE)", v105);
            goto LABEL_121;
          }
          v48 = 1024;
          if (!v45 || !memcmp(v45, v16, 0x400uLL))
            goto LABEL_72;
          v49 = *__error();
          v50 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = "lookupForInsert";
            v115 = 1024;
            *(_DWORD *)v116 = 2479;
            _os_log_error_impl(&dword_1B8270000, v50, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
          }
          *__error() = v49;
          v51 = *__error();
          v52 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            data2hexString(__p, (uint64_t)v45, v109);
            v53 = v116[9] >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)buf = 136315138;
            v113 = v53;
            _os_log_impl(&dword_1B8270000, v52, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
            if ((v116[9] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
          *__error() = v51;
          v54 = *__error();
          v55 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            data2hexString(__p, (uint64_t)v16, v109);
            v56 = v116[9] >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)buf = 136315138;
            v113 = v56;
            _os_log_impl(&dword_1B8270000, v55, OS_LOG_TYPE_DEFAULT, "vector in vector store: %s", buf, 0xCu);
            if ((v116[9] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
        }
        *__error() = v54;
        v48 = v109;
LABEL_72:
        if (memcmp(a3, v16, v48))
        {
          v100 = __si_assert_copy_extra_268();
          v66 = v100;
          v101 = "";
          if (v100)
            v101 = v100;
          __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2486, "memcmp(vec.vec, entry->vec.vec, size) == 0", v101);
LABEL_82:
          free(v66);
          if (__valid_fs(-1))
            v68 = 2989;
          else
            v68 = 3072;
          *(_DWORD *)v68 = -559038737;
          abort();
        }
        v58 = *__error();
        v59 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_FAULT))
        {
          v61 = v16[258];
          *(_DWORD *)__p = 136315906;
          *(_QWORD *)&__p[4] = "lookupForInsert";
          v115 = 1024;
          *(_DWORD *)v116 = 2487;
          *(_WORD *)&v116[4] = 1024;
          *(_DWORD *)&v116[6] = a2;
          *(_WORD *)&v116[10] = 1024;
          *(_DWORD *)&v116[12] = v61;
          _os_log_fault_impl(&dword_1B8270000, v59, OS_LOG_TYPE_FAULT, "%s:%d: Dup vector with new vectorId=%u old=%u", __p, 0x1Eu);
        }
        *__error() = v58;
        return v16;
      }
      v20 = *__error();
      v21 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "lookupForInsert";
        v115 = 1024;
        *(_DWORD *)v116 = 2467;
        _os_log_error_impl(&dword_1B8270000, v21, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v20;
      v22 = *__error();
      v23 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)data, v109);
        v24 = v116[9] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        v113 = v24;
        _os_log_impl(&dword_1B8270000, v23, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v116[9] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      *__error() = v22;
      v25 = *__error();
      v26 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)a3, v109);
        v27 = v116[9] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        v113 = v27;
        _os_log_impl(&dword_1B8270000, v26, OS_LOG_TYPE_DEFAULT, "vector passed in: %s", buf, 0xCu);
        if ((v116[9] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
    }
    *__error() = v25;
    goto LABEL_49;
  }
  return v16;
}

uint64_t _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li512EERjRfj(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, int a5)
{
  os_unfair_lock_s *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  _DWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char *v28;
  char *v29;
  const char *v30;
  char *v31;
  const char *v32;
  char *v33;
  char *v34;
  const char *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  _QWORD v40[8];
  int v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  int v45;

  v10 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v12 = *(_QWORD *)(a1 + 80);
  v11 = *(std::__shared_weak_count **)(a1 + 88);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v16 = *(_DWORD **)(a1 + 96);
  v15 = *(std::__shared_weak_count **)(a1 + 104);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  os_unfair_lock_unlock(v10);
  v19 = *a3;
  if ((_DWORD)v19 == -1)
  {
    if (*(_DWORD *)(a1 + 156) == -1)
    {
      v42 = 0;
      v43 = 0;
      v44 = 0;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 72))(&v42, v12, a2, 1);
      v20 = v42;
      if (v43 - (char *)v42 == 8)
      {
        v21 = *v42;
        *a3 = *v42;
        *a4 = v20[1];
        if (v21 >= IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1))
        {
          v33 = __si_assert_copy_extra_268();
          v34 = v33;
          if (v33)
            v35 = v33;
          else
            v35 = "";
          v36 = *a3;
          v37 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
          v38 = v16[19];
          v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          __message_assert("%s:%u: failed assertion '%s' %s Invalid partId %u >= %u (partitions: v%u quantizer v%u", "IVFVectorIndex.hh", 2403, "partID < nPartitions()", v35, v36, v37, v38, v39);
          free(v34);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if (v42)
        {
          v43 = (char *)v42;
          operator delete(v42);
        }
        v19 = *a3;
        goto LABEL_14;
      }
      v31 = __si_assert_copy_extra_268();
      v29 = v31;
      v32 = "";
      if (v31)
        v32 = v31;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2398, "topPartition.size() == 1", v32);
    }
    else
    {
      v28 = __si_assert_copy_extra_268();
      v29 = v28;
      v30 = "";
      if (v28)
        v30 = v28;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2396, "mergeBeginVectorOffset == VECTOR_NOT_FOUND", v30);
    }
    free(v29);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
LABEL_14:
  v42 = 0;
  v43 = (char *)&v42;
  v45 = -1;
  v44 = 0x2000000000;
  v40[0] = MEMORY[0x1E0C809B0];
  v40[1] = 0x40000000;
  v40[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li512EERjRfj_block_invoke;
  v40[3] = &unk_1E6E31AF0;
  v41 = a5;
  v40[6] = a4;
  v40[7] = a2;
  v40[4] = &v42;
  v40[5] = a1;
  (*(void (**)(_DWORD *, uint64_t, _QWORD *))(*(_QWORD *)v16 + 80))(v16, v19, v40);
  v22 = *((unsigned int *)v43 + 6);
  _Block_object_dispose(&v42, 8);
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v11)
  {
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v22;
}

unint64_t ___ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li512EERjRfj_block_invoke(unint64_t result, uint64_t a2, float *a3, _BYTE *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  int v15;
  const void *v16;
  const void *v17;

  v5 = *(_QWORD *)(result + 40);
  v6 = *(unsigned int *)a3;
  if (v6 >= *(_DWORD *)(v5 + 156))
    goto LABEL_12;
  v8 = result;
  v9 = **(float **)(result + 48);
  v10 = a3[1];
  v11 = v9 == v10;
  v12 = vabds_f32(v9, v10);
  v13 = fmaxf(fminf(fabsf(v10), fabsf(v9)) * 0.000015259, 0.000015259);
  if (v11 || v12 <= v13)
  {
    v15 = *(_DWORD *)(result + 64);
    if (v15)
    {
      result = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 16) * v6, 0x410uLL);
      if (v15 != *(_DWORD *)(result + 1032))
        return result;
      *(float *)&v6 = *a3;
    }
    v16 = *(const void **)(v8 + 56);
    v17 = (const void *)_windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 16) * v6, 0x410uLL);
    result = memcmp(v16, v17, 0x400uLL);
    if (!(_DWORD)result)
    {
      *(float *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8) + 24) = *a3;
LABEL_12:
      *a4 = 1;
    }
  }
  return result;
}

BOOL _ZN22IVFVectorIndexTemplateIDF16_Li512EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li512EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(uint64_t *a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  double Current;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  NSObject *v26;
  uint64_t v27;
  int v28;
  int v29;
  size_t v30;
  unint64_t v31;
  std::string *v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  std::string *v36;
  std::string::size_type size;
  std::string *v38;
  std::string::size_type v39;
  std::string *v40;
  std::string::size_type v41;
  const char *v42;
  _QWORD *FdPtrForFile;
  _QWORD *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  size_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  _QWORD *v62;
  size_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t *v73;
  char *v74;
  __int128 v75;
  int v76;
  NSObject *v77;
  _BOOL8 v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  const void *v84;
  _BYTE *v85;
  _BYTE *v86;
  _BYTE *v87;
  int64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t *v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  void *v114;
  void *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  __int128 v119;
  unint64_t *v120;
  uint64_t v121;
  size_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  int v132;
  std::string::size_type v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  const void *v138;
  const void *v139;
  uint64_t v140;
  float32x4_t *v141;
  float v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  _QWORD *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  int v181;
  int v182;
  NSObject *v183;
  unsigned int v184;
  uint64_t v185;
  unint64_t v186;
  unsigned int v187;
  unint64_t v188;
  unint64_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  size_t v222;
  char *v223;
  std::string::size_type v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t *v230;
  uint64_t v231;
  unint64_t v232;
  __int128 v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  void *v242;
  int v243;
  std::__shared_weak_count *v244;
  int v245;
  unint64_t *v246;
  unint64_t v247;
  int v248;
  NSObject *v249;
  int v250;
  int v251;
  CFAbsoluteTime v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  char *v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  int64_t v268;
  uint64_t v269;
  uint64_t *v270;
  __int128 v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  _BYTE *v275;
  int v276;
  char *v277;
  char *v278;
  const char *v279;
  uint64_t v280;
  char *v281;
  char *v282;
  const char *v283;
  char *v284;
  const char *v285;
  char *v286;
  const char *v287;
  char *v288;
  const char *v289;
  char *v290;
  const char *v291;
  char *v292;
  const char *v293;
  __int128 v294;
  uint64_t v295;
  size_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335;
  float16x8_t v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  float16x8_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float16x8_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float16x8_t v347;
  float32x4_t v348;
  float16x8_t v349;
  float32x4_t v350;
  float32x4_t v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  float16x8_t v356;
  float32x4_t v357;
  float16x8_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  float32x4_t v362;
  float32x4_t v363;
  float32x4_t v364;
  float32x4_t v365;
  float32x4_t v366;
  float32x4_t v367;
  float32x4_t v368;
  float32x4_t v369;
  float32x4_t v370;
  float32x4_t v371;
  float32x4_t v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t v378;
  float32x4_t v379;
  float32x4_t v380;
  float32x4_t v381;
  float32x4_t v382;
  float32x4_t v383;
  float32x4_t v384;
  float32x4_t v385;
  float32x4_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  float32x4_t v390;
  float32x4_t v391;
  float32x4_t v392;
  float32x4_t v393;
  float32x4_t v394;
  float32x4_t v395;
  float32x4_t v396;
  float32x4_t v397;
  float32x4_t v398;
  float32x4_t v399;
  float32x4_t v400;
  float32x4_t v401;
  float32x4_t v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  float32x4_t v407;
  float32x4_t v408;
  float32x4_t v409;
  float32x4_t v410;
  float32x4_t v411;
  float32x4_t v412;
  float32x4_t v413;
  float32x4_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  float32x4_t v418;
  float32x4_t v419;
  float32x4_t v420;
  float32x4_t v421;
  float32x4_t v422;
  float32x4_t v423;
  float32x4_t v424;
  float32x4_t v425;
  float32x4_t v426;
  float32x4_t v427;
  void *v428;
  unsigned int v429;
  std::__shared_weak_count *v430;
  unint64_t v431;
  std::__shared_weak_count *v432;
  std::string::size_type v433;
  __int128 *v434;
  _QWORD *v435;
  __int128 v436;
  std::string::size_type v437;
  std::__shared_weak_count *v438;
  std::string v439;
  std::__shared_weak_count *v440;
  _QWORD v441[7];
  std::__shared_weak_count *v442;
  int v443;
  int v444;
  _BYTE v445[24];
  __int128 v446;
  _BYTE *v447;
  _BYTE *v448;
  unint64_t v449;
  uint64_t v450;
  std::__shared_weak_count *v451;
  std::string v452;
  _BYTE v453[1000];
  uint64_t v454;

  v429 = a4;
  v299 = a3;
  v454 = *MEMORY[0x1E0C80C00];
  Current = CFAbsoluteTimeGetCurrent();
  v451 = 0;
  v450 = 0;
  _ZN16QuantizerManagerIDF16_Li512EE20lastTrainedQuantizerEv(&v450, *a1);
  v7 = a2[1];
  v297 = *a2;
  v298 = v7;
  v8 = v7 - v297;
  if (v7 == v297)
  {
    v9 = 0;
  }
  else
  {
    if (v8 < 0)
      goto LABEL_322;
    v9 = operator new((unint64_t)v8 >> 1);
    bzero(v9, (unint64_t)v8 >> 1);
  }
  v295 = v8;
  v296 = v8 >> 3;
  LODWORD(v434) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v450 + 24))(v450);
  if (v298 != v297)
  {
    v10 = 0;
    if (v296 <= 1)
      v11 = 1;
    else
      v11 = v296;
    while (1)
    {
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(*a2 + 8 * v10) + 16))(v453);
      v12 = v450;
      v13 = *(_QWORD *)v453;
      v14 = *(std::__shared_weak_count **)&v453[8];
      if (*(_QWORD *)&v453[8])
      {
        v15 = (unint64_t *)(*(_QWORD *)&v453[8] + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (v13 != v12)
        break;
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(*a2 + 8 * v10) + 24))(v453);
      v17 = *(std::__shared_weak_count **)&v453[8];
      *((_DWORD *)v9 + v10) = *(_DWORD *)(*(_QWORD *)v453 + 72);
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(*a2 + 8 * v10) + 24))(v453);
      v20 = *(std::__shared_weak_count **)&v453[8];
      v21 = *(_DWORD *)(*(_QWORD *)v453 + 68);
      if (*(_QWORD *)&v453[8])
      {
        v22 = (unint64_t *)(*(_QWORD *)&v453[8] + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (v21 != (_DWORD)v434)
      {
        v281 = __si_assert_copy_extra_268();
        v282 = v281;
        v283 = "";
        if (v281)
          v283 = v281;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1967, "vectorIndexes[i]->getPartitions()->nPartitions() == nPartitions", v283);
LABEL_316:
        free(v282);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if (++v10 == v11)
        goto LABEL_27;
    }
    v277 = __si_assert_copy_extra_268();
    v278 = v277;
    v279 = "";
    if (v277)
      v279 = v277;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1965, "vectorIndexes[i]->getQuantizer() == quantizer", v279);
LABEL_297:
    free(v278);
    if (__valid_fs(-1))
      v280 = 2989;
    else
      v280 = 3072;
    *(_DWORD *)v280 = -559038737;
    abort();
  }
LABEL_27:
  v24 = *a1;
  v25 = atomic_load((unsigned __int8 *)(v24 + 72));
  if ((v25 & 1) == 0)
  {
    v292 = __si_assert_copy_extra_268();
    v278 = v292;
    v293 = "";
    if (v292)
      v293 = v292;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 752, "_training.test()", v293);
    goto LABEL_297;
  }
  if (*(_QWORD *)(v24 + 96))
  {
    v26 = *(NSObject **)(v24 + 16);
    *(_QWORD *)v453 = MEMORY[0x1E0C809B0];
    *(_QWORD *)&v453[8] = 0x40000000;
    *(_QWORD *)&v453[16] = ___ZN16QuantizerManagerIDF16_Li512EE23commitTrainingQuantizerEv_block_invoke;
    *(_QWORD *)&v453[24] = &__block_descriptor_tmp_358;
    *(_QWORD *)&v453[32] = v24;
    dispatch_sync(v26, v453);
  }
  v27 = *(_QWORD *)(v24 + 80);
  if (v27)
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27) + 1;
  else
    v28 = 1;
  v29 = *(char *)(v24 + 71);
  if (v29 >= 0)
    v30 = *(unsigned __int8 *)(v24 + 71);
  else
    v30 = *(_QWORD *)(v24 + 56);
  v31 = v30 + 1;
  if (v30 + 1 >= 0x7FFFFFFFFFFFFFF8)
LABEL_322:
    abort();
  if (v31 >= 0x17)
  {
    v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v33 = v31 | 7;
    v34 = v33 + 1;
    v32 = (std::string *)operator new(v33 + 1);
    v439.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
    v439.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    v439.__r_.__value_.__l.__size_ = v30 + 1;
  }
  else
  {
    memset(&v439, 0, sizeof(v439));
    v32 = &v439;
    *((_BYTE *)&v439.__r_.__value_.__s + 23) = v30 + 1;
    if (!v30)
      goto LABEL_47;
  }
  if (v29 >= 0)
    v35 = (const void *)(v24 + 48);
  else
    v35 = *(const void **)(v24 + 48);
  memmove(v32, v35, v30);
LABEL_47:
  *(_WORD *)((char *)&v32->__r_.__value_.__l.__data_ + v30) = 46;
  std::to_string(&v452, v28);
  if ((v452.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = &v452;
  else
    v36 = (std::string *)v452.__r_.__value_.__r.__words[0];
  if ((v452.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v452.__r_.__value_.__r.__words[2]);
  else
    size = v452.__r_.__value_.__l.__size_;
  v38 = std::string::append(&v439, (const std::string::value_type *)v36, size);
  v39 = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)v453 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  *(_QWORD *)&v453[16] = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  v40 = std::string::append((std::string *)v453, ".quantizer");
  v41 = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)v445 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  *(_QWORD *)&v445[16] = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if ((v453[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v452.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_55;
LABEL_107:
    operator delete(v452.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v439.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_56;
    goto LABEL_108;
  }
  operator delete(*(void **)v453);
  if (SHIBYTE(v452.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_107;
LABEL_55:
  if ((SHIBYTE(v439.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_56;
LABEL_108:
  operator delete(v439.__r_.__value_.__l.__data_);
LABEL_56:
  if (v445[23] >= 0)
    v42 = v445;
  else
    v42 = *(const char **)v445;
  FdPtrForFile = QuantizerManager<float,768>::createFdPtrForFile(v24, v42);
  if (FdPtrForFile)
  {
    v44 = FdPtrForFile;
    v45 = operator new();
    *(_QWORD *)v453 = v44;
    *(_QWORD *)&v453[8] = 0x1000000;
    *(_DWORD *)&v453[16] = 0;
    *(_DWORD *)&v453[20] = 65792;
    *(_DWORD *)&v453[24] = v28;
    *(_DWORD *)&v453[28] = 0;
    _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li512EEC2EN19vi_ondisk_allocator11meta_info_sE(v45, (uint64_t)v453);
    v46 = (std::__shared_weak_count *)operator new();
    v46->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E319D8;
    v46->__shared_owners_ = 0;
    v46->__shared_weak_owners_ = 0;
    v46[1].__vftable = (std::__shared_weak_count_vtbl *)v45;
    v47 = *(std::__shared_weak_count **)(v24 + 104);
    *(_QWORD *)(v24 + 96) = v45;
    *(_QWORD *)(v24 + 104) = v46;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (v49)
      {
        v45 = *(_QWORD *)(v24 + 96);
        v46 = *(std::__shared_weak_count **)(v24 + 104);
        if (v46)
          goto LABEL_65;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
        v45 = *(_QWORD *)(v24 + 96);
        v46 = *(std::__shared_weak_count **)(v24 + 104);
        if (v46)
          goto LABEL_65;
      }
      v432 = 0;
      if ((v445[23] & 0x80000000) == 0)
        goto LABEL_68;
      goto LABEL_111;
    }
LABEL_65:
    v432 = v46;
    v50 = (unint64_t *)&v46->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    if ((v445[23] & 0x80000000) == 0)
      goto LABEL_68;
    goto LABEL_111;
  }
  v76 = *__error();
  v77 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v77, OS_LOG_TYPE_FAULT))
  {
    v275 = v445;
    if (v445[23] < 0)
      v275 = *(_BYTE **)v445;
    v276 = *(_DWORD *)v24;
    *(_DWORD *)v453 = 136315906;
    *(_QWORD *)&v453[4] = "newQuantizer";
    *(_WORD *)&v453[12] = 1024;
    *(_DWORD *)&v453[14] = 772;
    *(_WORD *)&v453[18] = 2080;
    *(_QWORD *)&v453[20] = v275;
    *(_WORD *)&v453[28] = 1024;
    *(_DWORD *)&v453[30] = v276;
    _os_log_fault_impl(&dword_1B8270000, v77, OS_LOG_TYPE_FAULT, "%s:%d: Failed to create %s in parentFd: %i", v453, 0x22u);
  }
  v432 = 0;
  v45 = 0;
  *__error() = v76;
  if ((v445[23] & 0x80000000) == 0)
  {
LABEL_68:
    if (v45)
      goto LABEL_69;
LABEL_112:
    v78 = 0;
    v79 = v432;
    goto LABEL_272;
  }
LABEL_111:
  operator delete(*(void **)v445);
  if (!v45)
    goto LABEL_112;
LABEL_69:
  v446 = 0u;
  *(_OWORD *)&v445[8] = 0u;
  *(_QWORD *)v445 = off_1E6E31A60;
  v447 = 0;
  v449 = 0;
  v448 = 0;
  bzero(v453, 0x400uLL);
  snprintf(v453, 0x400uLL, "A0-%ux%dx%u", v299, 512, 16);
  MEMORY[0x1BCCB03B0](&v445[8], v453);
  v435 = a2;
  v433 = v45;
  if ((_DWORD)v299)
  {
    v428 = v9;
    memset(v453, 0, 24);
    if (v298 == v297)
    {
      v54 = 0;
      v53 = 0;
    }
    else
    {
      v52 = 0;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      if (v296 <= 1)
        v56 = 1;
      else
        v56 = v296;
      do
      {
        memset(&v439, 0, sizeof(v439));
        (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(*a2 + 8 * v52) + 24))(&v452);
        MaxSizePriorityQueue<AnyPartitionStore::CandidateEntry,std::vector<AnyPartitionStore::CandidateEntry>,AnyPartitionStore::CandidateQueue::Lesser>::allItems((uint64_t **)&v439, *(_BYTE **)(v452.__r_.__value_.__r.__words[0] + 32), *(_BYTE **)(v452.__r_.__value_.__r.__words[0] + 40));
        v57 = (std::__shared_weak_count *)v452.__r_.__value_.__l.__size_;
        if (v452.__r_.__value_.__l.__size_)
        {
          v58 = (unint64_t *)(v452.__r_.__value_.__l.__size_ + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v60 = (_BYTE *)v439.__r_.__value_.__l.__size_;
        v61 = (_BYTE *)v439.__r_.__value_.__r.__words[0];
        if (v439.__r_.__value_.__l.__size_ != v439.__r_.__value_.__r.__words[0])
        {
          v62 = *(_QWORD **)&v453[8];
          if (*(_QWORD *)&v453[8] >= *(_QWORD *)&v453[16])
          {
            v66 = std::vector<std::vector<AnyPartitionStore::CandidateEntry>>::__push_back_slow_path<std::vector<AnyPartitionStore::CandidateEntry> const&>((char **)v453, v439.__r_.__value_.__l.__data_, v439.__r_.__value_.__l.__size_);
          }
          else
          {
            **(_QWORD **)&v453[8] = 0;
            v62[1] = 0;
            v62[2] = 0;
            v63 = v60 - v61;
            if (v60 - v61 < 0)
              goto LABEL_322;
            v64 = (char *)operator new(v60 - v61);
            *v62 = v64;
            v62[1] = v64;
            v65 = &v64[v63];
            v62[2] = &v64[v63];
            memcpy(v64, v61, v63);
            v62[1] = v65;
            v66 = (char *)(v62 + 3);
          }
          *(_QWORD *)&v453[8] = v66;
          v68 = *((_QWORD *)v66 - 3);
          v67 = *((_QWORD *)v66 - 2);
          if (v54 >= v55)
          {
            v69 = 0xAAAAAAAAAAAAAAABLL * ((v54 - (char *)v53) >> 3) + 1;
            if (v69 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_322;
            if (0x5555555555555556 * ((v55 - (char *)v53) >> 3) > v69)
              v69 = 0x5555555555555556 * ((v55 - (char *)v53) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v55 - (char *)v53) >> 3) >= 0x555555555555555)
              v70 = 0xAAAAAAAAAAAAAAALL;
            else
              v70 = v69;
            if (v70)
            {
              if (v70 > 0xAAAAAAAAAAAAAAALL)
LABEL_323:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v71 = (char *)operator new(24 * v70);
            }
            else
            {
              v71 = 0;
            }
            v72 = &v71[8 * ((v54 - (char *)v53) >> 3)];
            *(_QWORD *)v72 = v68;
            *((_QWORD *)v72 + 1) = v67;
            *((_QWORD *)v72 + 2) = v52;
            v73 = (uint64_t *)v72;
            if (v54 != (char *)v53)
            {
              v74 = &v71[8 * ((v54 - (char *)v53) >> 3)];
              do
              {
                v73 = (uint64_t *)(v74 - 24);
                v75 = *(_OWORD *)(v54 - 24);
                *((_QWORD *)v74 - 1) = *((_QWORD *)v54 - 1);
                *(_OWORD *)(v74 - 24) = v75;
                v54 -= 24;
                v74 -= 24;
              }
              while (v54 != (char *)v53);
            }
            v55 = &v71[24 * v70];
            a2 = v435;
            if (v53)
              operator delete(v53);
            v54 = v72;
            v53 = v73;
          }
          else
          {
            *(_QWORD *)v54 = v68;
            *((_QWORD *)v54 + 1) = v67;
            *((_QWORD *)v54 + 2) = v52;
            a2 = v435;
          }
          v54 += 24;
          v60 = (_BYTE *)v439.__r_.__value_.__r.__words[0];
        }
        if (v60)
          operator delete(v60);
        ++v52;
      }
      while (v52 != v56);
    }
    v80 = v54 - (char *)v53;
    if (v54 - (char *)v53 >= 25 && (unint64_t)v80 >= 0x30)
    {
      v268 = (v80 / 0x18uLL - 2) >> 1;
      v269 = v268;
      do
      {
        if (v268 >= v269)
        {
          v270 = &v53[3 * v269];
          v271 = *(_OWORD *)v270;
          v272 = v270[2];
          v273 = v269;
          do
          {
            v274 = v270;
            v273 = (2 * v273) | 1;
            v270 = &v53[3 * v273];
            *v274 = *v270;
            *(_OWORD *)(v274 + 1) = *(_OWORD *)(v270 + 1);
          }
          while (v268 >= v273);
          *(_OWORD *)v270 = v271;
          v270[2] = v272;
        }
        v99 = v269-- <= 0;
      }
      while (!v99);
    }
    for (; v54 != (char *)v53; v80 = v54 - (char *)v53)
    {
      if (((unint64_t)(v448 - v447) >> 10) >= v299)
        break;
      v83 = *(_QWORD *)(*a2 + 8 * v53[2]);
      v84 = (const void *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, *(unsigned int *)*v53);
      v85 = v448;
      if ((unint64_t)v448 >= v449)
      {
        v431 = v80;
        v87 = v447;
        v88 = (v448 - v447) >> 10;
        v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 54)
          goto LABEL_322;
        v90 = v449 - (_QWORD)v447;
        if ((uint64_t)(v449 - (_QWORD)v447) >> 9 > v89)
          v89 = v90 >> 9;
        v91 = (unint64_t)v90 >= 0x7FFFFFFFFFFFFC00 ? 0x3FFFFFFFFFFFFFLL : v89;
        if (v91)
        {
          if (v91 >> 54)
            goto LABEL_323;
          v92 = (std::__shared_weak_count *)operator new(v91 << 10);
        }
        else
        {
          v92 = 0;
        }
        v430 = v92;
        v93 = (char *)v92 + 1024 * v88;
        memcpy(v93, v84, 0x400uLL);
        v94 = v93;
        if (v85 != v87)
        {
          do
          {
            v85 -= 1024;
            v94 -= 1024;
            memcpy(v94, v85, 0x400uLL);
          }
          while (v85 != v87);
          v85 = v87;
        }
        v86 = v93 + 1024;
        v447 = v94;
        v448 = v86;
        v449 = (unint64_t)v430 + 1024 * v91;
        v80 = v431;
        if (v85)
          operator delete(v85);
      }
      else
      {
        memcpy(v448, v84, 0x400uLL);
        v86 = v85 + 1024;
      }
      v448 = v86;
      v95 = v53[1];
      v96 = *v53 + 8;
      *v53 = v96;
      a2 = v435;
      if (v96 == v95)
      {
        if (v80 >= 25)
        {
          v105 = 0;
          v106 = v53[2];
          v107 = v53;
          do
          {
            v108 = v107;
            v109 = &v107[3 * v105];
            v110 = v109[3];
            v107 = v109 + 3;
            v105 = (2 * v105) | 1;
            *v108 = v110;
            *(_OWORD *)(v108 + 1) = *(_OWORD *)(v107 + 1);
          }
          while (v105 <= (uint64_t)((v80 / 0x18uLL - 2) >> 1));
          if (v107 == (uint64_t *)(v54 - 24))
          {
            v81 = (char *)(v107 + 1);
            v82 = (char *)(v107 + 2);
          }
          else
          {
            *v107 = *((_QWORD *)v54 - 3);
            v81 = v54 - 16;
            v82 = v54 - 8;
            *(_OWORD *)(v107 + 1) = *((_OWORD *)v54 - 1);
            v107 = (uint64_t *)(v54 - 24);
          }
          *v107 = v96;
          *(_QWORD *)v81 = v95;
          *(_QWORD *)v82 = v106;
        }
        v54 -= 24;
      }
      else if (v80 >= 48)
      {
        v97 = (v80 / 0x18uLL - 2) >> 1;
        v98 = v97;
        do
        {
          if (v97 >= v98)
          {
            v100 = &v53[3 * v98];
            v101 = *(_OWORD *)v100;
            v102 = v100[2];
            v103 = v98;
            do
            {
              v104 = v100;
              v103 = (2 * v103) | 1;
              v100 = &v53[3 * v103];
              *v104 = *v100;
              *(_OWORD *)(v104 + 1) = *(_OWORD *)(v100 + 1);
            }
            while (v97 >= v103);
            *(_OWORD *)v100 = v101;
            v100[2] = v102;
          }
          v99 = v98-- <= 0;
        }
        while (!v99);
      }
    }
    v111 = *(char **)v453;
    v9 = v428;
    if (*(_QWORD *)v453)
    {
      v112 = *(char **)&v453[8];
      if (*(_QWORD *)&v453[8] != *(_QWORD *)v453)
      {
        v113 = *(char **)&v453[8];
        do
        {
          v115 = (void *)*((_QWORD *)v113 - 3);
          v113 -= 24;
          v114 = v115;
          if (v115)
          {
            *((_QWORD *)v112 - 2) = v114;
            operator delete(v114);
          }
          v112 = v113;
        }
        while (v113 != v111);
      }
      operator delete(v111);
    }
    if (v53)
      operator delete(v53);
  }
  v431 = (unint64_t)(v448 - v447) >> 10;
  v116 = (std::__shared_weak_count_vtbl *)operator new[]();
  v117 = v116;
  if ((_DWORD)v434 + (_DWORD)v431)
    bzero(v116, 2052 * ((2052 * (unint64_t)((_DWORD)v434 + v431) - 2052) / 0x804) + 2052);
  v118 = (std::__shared_weak_count *)operator new();
  v118->__shared_owners_ = 0;
  v120 = (unint64_t *)&v118->__shared_owners_;
  v118->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E31AC0;
  v118->__shared_weak_owners_ = 0;
  v118[1].__vftable = v117;
  v430 = v118;
  if (v298 != v297)
  {
    v121 = 0;
    if (v296 <= 1)
      v122 = 1;
    else
      v122 = v296;
    do
    {
      v123 = *(_QWORD *)(*v435 + 8 * v121);
      *(_QWORD *)&v453[8] = 0;
      *(_QWORD *)v453 = 0;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v123 + 24))(v453, v123);
      v124 = *(_QWORD *)v453;
      v441[0] = MEMORY[0x1E0C809B0];
      v441[1] = 1174405120;
      v441[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li512EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li512EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj_block_invoke;
      v441[3] = &__block_descriptor_tmp_354;
      v441[4] = v123;
      v441[5] = v445;
      v443 = v431;
      v444 = (int)v434;
      v441[6] = v117;
      v442 = v430;
      do
        v125 = __ldxr(v120);
      while (__stxr(v125 + 1, v120));
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v124 + 64))(v124, v441);
      v126 = v442;
      if (!v442)
        goto LABEL_178;
      v127 = (unint64_t *)&v442->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
        v129 = *(std::__shared_weak_count **)&v453[8];
        if (*(_QWORD *)&v453[8])
        {
LABEL_179:
          v130 = (unint64_t *)&v129->__shared_owners_;
          do
            v131 = __ldaxr(v130);
          while (__stlxr(v131 - 1, v130));
          if (!v131)
          {
            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
            std::__shared_weak_count::__release_weak(v129);
          }
        }
      }
      else
      {
LABEL_178:
        v129 = *(std::__shared_weak_count **)&v453[8];
        if (*(_QWORD *)&v453[8])
          goto LABEL_179;
      }
      ++v121;
    }
    while (v121 != v122);
  }
  if ((_DWORD)v434 + ((unint64_t)(v448 - v447) >> 10))
  {
    v140 = 0;
    v132 = 0;
    *(_QWORD *)&v119 = 67109376;
    v294 = v119;
    v133 = v433;
    while (1)
    {
      v141 = (float32x4_t *)((char *)v117 + 2052 * v140);
      v142 = v141[128].f32[0];
      if (v142 < v429)
      {
        ++v132;
        if (dword_1EF19FCCC >= 5)
        {
          v181 = v132;
          v182 = *__error();
          v183 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v183, OS_LOG_TYPE_DEFAULT))
          {
            v184 = v141[128].f32[0];
            *(_DWORD *)v453 = v294;
            *(_DWORD *)&v453[4] = v140;
            *(_WORD *)&v453[8] = 1024;
            *(_DWORD *)&v453[10] = v184;
            _os_log_impl(&dword_1B8270000, v183, OS_LOG_TYPE_DEFAULT, "remove outlier newCentroid[%u] with member: %u", v453, 0xEu);
          }
          *__error() = v182;
          v132 = v181;
        }
        goto LABEL_195;
      }
      if (v142 <= 0.0)
      {
        v286 = __si_assert_copy_extra_268();
        v282 = v286;
        v287 = "";
        if (v286)
          v287 = v286;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 152, "_count > 0.0f", v287);
        goto LABEL_316;
      }
      if (*(_BYTE *)(v133 + 56))
      {
        v288 = __si_assert_copy_extra_268();
        v282 = v288;
        v289 = "";
        if (v288)
          v289 = v288;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 522, "!readOnly", v289);
        goto LABEL_316;
      }
      LODWORD(v428) = v132;
      v143 = v141[1];
      v347 = *(float16x8_t *)v141;
      v144 = v141[3];
      v350 = v141[2];
      v145 = v141[5];
      v353 = v141[4];
      v354 = v143;
      v364 = v141[7];
      v355 = v141[6];
      v356 = (float16x8_t)v144;
      v366 = v141[9];
      v359 = v141[8];
      v360 = v145;
      v370 = v141[11];
      v363 = v141[10];
      v374 = v141[13];
      v365 = v141[12];
      v376 = v141[15];
      v369 = v141[14];
      v380 = v141[17];
      v373 = v141[16];
      v384 = v141[19];
      v375 = v141[18];
      v386 = v141[21];
      v379 = v141[20];
      v390 = v141[23];
      v383 = v141[22];
      v394 = v141[25];
      v385 = v141[24];
      v396 = v141[27];
      v389 = v141[26];
      v399 = v141[29];
      v393 = v141[28];
      v402 = v141[31];
      v395 = v141[30];
      v146 = *(_QWORD **)(v133 + 40);
      v147 = v146[2];
      v149 = v146[6];
      v148 = v146[7];
      v150 = v148 + v147;
      v151 = v141[33];
      v300 = v141[32];
      v152 = v141[35];
      v301 = v141[34];
      v302 = v151;
      v153 = v141[37];
      v303 = v141[36];
      v304 = v152;
      v154 = v141[39];
      v305 = v141[38];
      v306 = v153;
      v155 = v141[41];
      v307 = v141[40];
      v308 = v154;
      v156 = v141[43];
      v309 = v141[42];
      v310 = v155;
      v157 = v141[45];
      v311 = v141[44];
      v312 = v156;
      v158 = v141[47];
      v313 = v141[46];
      v314 = v157;
      v159 = v141[49];
      v315 = v141[48];
      v316 = v158;
      v160 = v141[51];
      v317 = v141[50];
      v318 = v159;
      v161 = v141[53];
      v319 = v141[52];
      v320 = v160;
      v162 = v141[55];
      v321 = v141[54];
      v322 = v161;
      v163 = v141[57];
      v323 = v141[56];
      v324 = v162;
      v164 = v141[59];
      v325 = v141[58];
      v326 = v163;
      v165 = v141[61];
      v327 = v141[60];
      v328 = v164;
      v166 = v141[63];
      v329 = v141[62];
      v330 = v165;
      v167 = v141[65];
      v331 = v141[64];
      v332 = v166;
      v168 = v141[67];
      v333 = v141[66];
      v334 = v167;
      v169 = v141[69];
      v335 = v141[68];
      v336 = (float16x8_t)v168;
      v170 = v141[71];
      v337 = v141[70];
      v338 = v169;
      v171 = v141[73];
      v339 = v141[72];
      v340 = (float16x8_t)v170;
      v172 = v141[75];
      v341 = v141[74];
      v342 = v171;
      v173 = v141[77];
      v343 = v141[76];
      v344 = (float16x8_t)v172;
      v174 = v141[79];
      v345 = v141[78];
      v346 = v173;
      v175 = v141[81];
      v348 = v141[80];
      v349 = (float16x8_t)v174;
      v176 = v141[83];
      v351 = v141[82];
      v352 = v175;
      v362 = v141[85];
      v357 = v141[84];
      v358 = (float16x8_t)v176;
      v368 = v141[87];
      v361 = v141[86];
      v372 = v141[89];
      v367 = v141[88];
      v378 = v141[91];
      v371 = v141[90];
      v382 = v141[93];
      v377 = v141[92];
      v388 = v141[95];
      v381 = v141[94];
      v392 = v141[97];
      v387 = v141[96];
      v398 = v141[99];
      v391 = v141[98];
      v401 = v141[101];
      v397 = v141[100];
      v404 = v141[103];
      v400 = v141[102];
      v406 = v141[105];
      v403 = v141[104];
      v408 = v141[107];
      v405 = v141[106];
      v410 = v141[109];
      v407 = v141[108];
      v412 = v141[111];
      v409 = v141[110];
      v414 = v141[113];
      v411 = v141[112];
      v416 = v141[115];
      v413 = v141[114];
      v418 = v141[117];
      v415 = v141[116];
      v420 = v141[119];
      v417 = v141[118];
      v422 = v141[121];
      v419 = v141[120];
      v424 = v141[123];
      v421 = v141[122];
      v426 = v141[125];
      v423 = v141[124];
      v427 = v141[127];
      v425 = v141[126];
      if (v148 + v147 < v149)
        goto LABEL_200;
      if (_storage_array_Expand((uint64_t)(v146 + 1)))
        break;
      v177 = 0;
      if (v147 <= 0x3FF)
      {
LABEL_201:
        v178 = v146[2];
        if (v178 <= 0x3FF)
        {
          LODWORD(v179) = 1024;
          do
          {
            v180 = v146[7] + v178;
            if (v180 >= v146[6])
            {
              if (!_storage_array_Expand((uint64_t)(v146 + 1)))
                goto LABEL_205;
              v180 = v146[7] + v178;
            }
            v146[7] = v180;
LABEL_205:
            v178 = v146[2];
            v179 = (v179 - v178);
          }
          while (v178 < v179);
        }
      }
LABEL_215:
      v185 = (uint64_t)(v146 + 524);
      bit_vector_set_9027(v185, (v177 >> 20));
      v186 = (v177 + 1024) >> 20;
      if (v186 > (v177 >> 20))
      {
        v187 = (v177 >> 20) + 1;
        do
        {
          v188 = v187;
          bit_vector_set_9027(v185, v187++);
        }
        while (v186 > v188);
      }
      v133 = v433;
      if (v177 != *(_DWORD *)(v433 + 48))
      {
        v290 = __si_assert_copy_extra_268();
        v282 = v290;
        v291 = "";
        if (v290)
          v291 = v290;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 524, "offset == nCentroids", v291);
        goto LABEL_316;
      }
      v354 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)v347), v354);
      v356 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v350), (float32x4_t)v356);
      v360 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v353), v360);
      v364 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v355), v364);
      v366 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v359), v366);
      v370 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v363), v370);
      v374 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v365), v374);
      v376 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v369), v376);
      v380 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v373), v380);
      v384 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v375), v384);
      v386 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v379), v386);
      v390 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v383), v390);
      v394 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v385), v394);
      v396 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v389), v396);
      v399 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v393), v399);
      v402 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v395), v402);
      v395 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v300), v302);
      v393 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v301), v304);
      v389 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v303), v306);
      v385 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v305), v308);
      v383 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v307), v310);
      v379 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v309), v312);
      v375 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v311), v314);
      v373 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v313), v316);
      v369 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v315), v318);
      v365 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v317), v320);
      v363 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v319), v322);
      v359 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v321), v324);
      v355 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v323), v326);
      v353 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v325), v328);
      v350 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v327), v330);
      v347 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v329), v332);
      v334 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v331), v334);
      v336 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v333), (float32x4_t)v336);
      v338 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v335), v338);
      v340 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v337), (float32x4_t)v340);
      v342 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v339), v342);
      v344 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v341), (float32x4_t)v344);
      v346 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v343), v346);
      v349 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v345), (float32x4_t)v349);
      v352 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v348), v352);
      v358 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v351), (float32x4_t)v358);
      v362 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v357), v362);
      v368 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v361), v368);
      v372 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v367), v372);
      v378 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v371), v378);
      v382 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v377), v382);
      v388 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v381), v388);
      v392 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v387), v392);
      v398 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v391), v398);
      v401 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v397), v401);
      v404 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v400), v404);
      v406 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v403), v406);
      v408 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v405), v408);
      v410 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v407), v410);
      v412 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v409), v412);
      v414 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v411), v414);
      v416 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v413), v416);
      v418 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v415), v418);
      v420 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v417), v420);
      v422 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v419), v422);
      v424 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v421), v424);
      v426 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v423), v426);
      v427 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v425), v427);
      v189 = _windowsResolvePtr(*(_QWORD *)(v433 + 40) + 40, *(_QWORD *)(*(_QWORD *)(v433 + 40) + 24) + *(_QWORD *)(*(_QWORD *)(v433 + 40) + 16) * v177, 0x400uLL);
      v190 = (float32x4_t)v356;
      *(float32x4_t *)v189 = v354;
      *(float32x4_t *)(v189 + 16) = v190;
      v191 = v364;
      *(float32x4_t *)(v189 + 32) = v360;
      *(float32x4_t *)(v189 + 48) = v191;
      v192 = v370;
      *(float32x4_t *)(v189 + 64) = v366;
      *(float32x4_t *)(v189 + 80) = v192;
      v193 = v376;
      *(float32x4_t *)(v189 + 96) = v374;
      *(float32x4_t *)(v189 + 112) = v193;
      v194 = v384;
      *(float32x4_t *)(v189 + 128) = v380;
      *(float32x4_t *)(v189 + 144) = v194;
      v195 = v390;
      *(float32x4_t *)(v189 + 160) = v386;
      *(float32x4_t *)(v189 + 176) = v195;
      v196 = v396;
      *(float32x4_t *)(v189 + 192) = v394;
      *(float32x4_t *)(v189 + 208) = v196;
      v197 = v402;
      *(float32x4_t *)(v189 + 224) = v399;
      *(float32x4_t *)(v189 + 240) = v197;
      v198 = v393;
      *(float32x4_t *)(v189 + 256) = v395;
      *(float32x4_t *)(v189 + 272) = v198;
      v199 = v385;
      *(float32x4_t *)(v189 + 288) = v389;
      *(float32x4_t *)(v189 + 304) = v199;
      v200 = v379;
      *(float32x4_t *)(v189 + 320) = v383;
      *(float32x4_t *)(v189 + 336) = v200;
      v201 = v373;
      *(float32x4_t *)(v189 + 352) = v375;
      *(float32x4_t *)(v189 + 368) = v201;
      v202 = v365;
      *(float32x4_t *)(v189 + 384) = v369;
      *(float32x4_t *)(v189 + 400) = v202;
      v203 = v359;
      *(float32x4_t *)(v189 + 416) = v363;
      *(float32x4_t *)(v189 + 432) = v203;
      v204 = v353;
      *(float32x4_t *)(v189 + 448) = v355;
      *(float32x4_t *)(v189 + 464) = v204;
      v205 = (float32x4_t)v347;
      *(float32x4_t *)(v189 + 480) = v350;
      *(float32x4_t *)(v189 + 496) = v205;
      v206 = (float32x4_t)v336;
      *(float32x4_t *)(v189 + 512) = v334;
      *(float32x4_t *)(v189 + 528) = v206;
      v207 = (float32x4_t)v340;
      *(float32x4_t *)(v189 + 544) = v338;
      *(float32x4_t *)(v189 + 560) = v207;
      v208 = (float32x4_t)v344;
      *(float32x4_t *)(v189 + 576) = v342;
      *(float32x4_t *)(v189 + 592) = v208;
      v209 = (float32x4_t)v349;
      *(float32x4_t *)(v189 + 608) = v346;
      *(float32x4_t *)(v189 + 624) = v209;
      v210 = (float32x4_t)v358;
      *(float32x4_t *)(v189 + 640) = v352;
      *(float32x4_t *)(v189 + 656) = v210;
      v211 = v368;
      *(float32x4_t *)(v189 + 672) = v362;
      *(float32x4_t *)(v189 + 688) = v211;
      v212 = v378;
      *(float32x4_t *)(v189 + 704) = v372;
      *(float32x4_t *)(v189 + 720) = v212;
      v213 = v388;
      *(float32x4_t *)(v189 + 736) = v382;
      *(float32x4_t *)(v189 + 752) = v213;
      v214 = v398;
      *(float32x4_t *)(v189 + 768) = v392;
      *(float32x4_t *)(v189 + 784) = v214;
      v215 = v404;
      *(float32x4_t *)(v189 + 800) = v401;
      *(float32x4_t *)(v189 + 816) = v215;
      v216 = v408;
      *(float32x4_t *)(v189 + 832) = v406;
      *(float32x4_t *)(v189 + 848) = v216;
      v217 = v412;
      *(float32x4_t *)(v189 + 864) = v410;
      *(float32x4_t *)(v189 + 880) = v217;
      v218 = v416;
      *(float32x4_t *)(v189 + 896) = v414;
      *(float32x4_t *)(v189 + 912) = v218;
      v219 = v420;
      *(float32x4_t *)(v189 + 928) = v418;
      *(float32x4_t *)(v189 + 944) = v219;
      v220 = v424;
      *(float32x4_t *)(v189 + 960) = v422;
      *(float32x4_t *)(v189 + 976) = v220;
      v221 = v427;
      *(float32x4_t *)(v189 + 992) = v426;
      *(float32x4_t *)(v189 + 1008) = v221;
      ++*(_DWORD *)(v133 + 48);
      *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v133 + 40) + 40, 0x400uLL, *(_QWORD *)(*(_QWORD *)(v133 + 40) + 16))+ 4) = *(_DWORD *)(v133 + 48);
      v132 = (int)v428;
LABEL_195:
      if (++v140 >= (unint64_t)(v434 + ((unint64_t)(v448 - v447) >> 10)))
        goto LABEL_187;
    }
    v148 = v146[7];
    v150 = v148 + v147;
LABEL_200:
    v146[7] = v150;
    v177 = (v148 - v146[3]) / v147;
    if (v147 <= 0x3FF)
      goto LABEL_201;
    goto LABEL_215;
  }
  v132 = 0;
  v133 = v433;
LABEL_187:
  LODWORD(v428) = v132;
  v134 = v450;
  v135 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v450 + 24))(v450);
  v136 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v133 + 24))(v133);
  if (v135 == (_DWORD)v136)
  {
    v136 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v134 + 24))(v134);
    if ((_DWORD)v136)
    {
      v137 = 0;
      while (1)
      {
        v138 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 64))(v134, v137);
        v139 = (const void *)(*(uint64_t (**)(std::string::size_type, uint64_t))(*(_QWORD *)v133 + 64))(v133, v137);
        v136 = memcmp(v138, v139, 0x400uLL);
        v78 = (_DWORD)v136 != 0;
        if ((_DWORD)v136)
          break;
        v137 = (v137 + 1);
        v136 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v134 + 24))(v134);
        if (v137 >= v136)
          goto LABEL_192;
      }
    }
    else
    {
LABEL_192:
      v78 = 0;
    }
  }
  else
  {
    v78 = 1;
  }
  v434 = &v294;
  v222 = 16 * v296;
  MEMORY[0x1E0C80A78](v136);
  v223 = (char *)&v294 - v222;
  bzero((char *)&v294 - v222, 2 * v295);
  if (v298 != v297)
    bzero((char *)&v294 - v222, v222);
  v224 = *v435;
  v439.__r_.__value_.__r.__words[0] = (std::string::size_type)&v294 - v222;
  v439.__r_.__value_.__l.__size_ = v224;
  v439.__r_.__value_.__r.__words[2] = v133;
  v225 = v432;
  v440 = v432;
  if (v432)
  {
    v226 = (unint64_t *)&v432->__shared_owners_;
    do
      v227 = __ldxr(v226);
    while (__stxr(v227 + 1, v226));
  }
  dispatch_apply_f(v296, 0, &v439, (void (__cdecl *)(void *, size_t))_ZZN22IVFVectorIndexTemplateIDF16_Li512EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li512EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjjENUlPvmE_8__invokeESC_m);
  v228 = *v435;
  if (v435[1] != *v435)
  {
    v229 = 0;
    v230 = (unint64_t *)&v225->__shared_owners_;
    do
    {
      v231 = *(_QWORD *)(v228 + 8 * v229);
      v437 = v133;
      v438 = v225;
      if (v225)
      {
        do
          v232 = __ldxr(v230);
        while (__stxr(v232 + 1, v230));
      }
      v233 = *(_OWORD *)&v223[16 * v229];
      v436 = v233;
      if (*((_QWORD *)&v233 + 1))
      {
        v234 = (unint64_t *)(*((_QWORD *)&v233 + 1) + 8);
        do
          v235 = __ldxr(v234);
        while (__stxr(v235 + 1, v234));
      }
      (*(void (**)(uint64_t, std::string::size_type *, __int128 *))(*(_QWORD *)v231 + 48))(v231, &v437, &v436);
      v236 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
      if (!*((_QWORD *)&v436 + 1))
        goto LABEL_237;
      v237 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 8);
      do
        v238 = __ldaxr(v237);
      while (__stlxr(v238 - 1, v237));
      if (!v238)
      {
        ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
        std::__shared_weak_count::__release_weak(v236);
        v239 = v438;
        if (!v438)
          goto LABEL_243;
      }
      else
      {
LABEL_237:
        v239 = v438;
        if (!v438)
          goto LABEL_243;
      }
      v240 = (unint64_t *)&v239->__shared_owners_;
      do
        v241 = __ldaxr(v240);
      while (__stlxr(v241 - 1, v240));
      if (!v241)
      {
        ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
        std::__shared_weak_count::__release_weak(v239);
      }
LABEL_243:
      v242 = v9;
      v243 = *((_DWORD *)v9 + v229);
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(*v435 + 8 * v229) + 24))(v453);
      v244 = *(std::__shared_weak_count **)&v453[8];
      v245 = *(_DWORD *)(*(_QWORD *)v453 + 72);
      if (*(_QWORD *)&v453[8])
      {
        v246 = (unint64_t *)(*(_QWORD *)&v453[8] + 8);
        do
          v247 = __ldaxr(v246);
        while (__stlxr(v247 - 1, v246));
        if (!v247)
        {
          ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
          std::__shared_weak_count::__release_weak(v244);
        }
      }
      if (v243 != v245)
      {
        v284 = __si_assert_copy_extra_268();
        v282 = v284;
        v285 = "";
        if (v284)
          v285 = v284;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2056, "vectorCounts[i] == vectorIndexes[i]->getPartitions()->nVectors()", v285);
        goto LABEL_316;
      }
      ++v229;
      v228 = *v435;
      v9 = v242;
      v225 = v432;
      v133 = v433;
    }
    while (v229 < (uint64_t)(v435[1] - *v435) >> 3);
  }
  v248 = *__error();
  v249 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v249, OS_LOG_TYPE_DEFAULT))
  {
    v250 = (int)v428;
    v251 = v431 - (_DWORD)v428;
    v252 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)v453 = 67110144;
    *(_DWORD *)&v453[4] = v299;
    *(_WORD *)&v453[8] = 1024;
    *(_DWORD *)&v453[10] = v251;
    *(_WORD *)&v453[14] = 1024;
    *(_DWORD *)&v453[16] = v250;
    *(_WORD *)&v453[20] = 1024;
    *(_DWORD *)&v453[22] = v78;
    *(_WORD *)&v453[26] = 2048;
    *(double *)&v453[28] = v252 - Current;
    _os_log_impl(&dword_1B8270000, v249, OS_LOG_TYPE_DEFAULT, "training quantizer try addCentroids=%u added=%d removed=%u changed=%d duration: %fs", v453, 0x24u);
  }
  *__error() = v248;
  v253 = v440;
  if (v440)
  {
    v254 = (unint64_t *)&v440->__shared_owners_;
    do
      v255 = __ldaxr(v254);
    while (__stlxr(v255 - 1, v254));
    if (!v255)
    {
      ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
      std::__shared_weak_count::__release_weak(v253);
    }
  }
  if (v298 != v297)
  {
    v256 = &v223[16 * v296];
    do
    {
      v257 = (std::__shared_weak_count *)*((_QWORD *)v256 - 1);
      if (v257)
      {
        v258 = (unint64_t *)&v257->__shared_owners_;
        do
          v259 = __ldaxr(v258);
        while (__stlxr(v259 - 1, v258));
        if (!v259)
        {
          ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
          std::__shared_weak_count::__release_weak(v257);
        }
      }
      v256 -= 16;
    }
    while (v256 != v223);
  }
  do
    v260 = __ldaxr(v120);
  while (__stlxr(v260 - 1, v120));
  v79 = v432;
  if (!v260)
  {
    v261 = v430;
    ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
    std::__shared_weak_count::__release_weak(v261);
  }
  *(_QWORD *)v445 = off_1E6E31A60;
  if (v447)
  {
    v448 = v447;
    operator delete(v447);
  }
  *(_QWORD *)v445 = off_1E6E30F58;
  if (SBYTE7(v446) < 0)
    operator delete(*(void **)&v445[8]);
LABEL_272:
  if (v79)
  {
    v262 = (unint64_t *)&v79->__shared_owners_;
    do
      v263 = __ldaxr(v262);
    while (__stlxr(v263 - 1, v262));
    if (!v263)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (v9)
    operator delete(v9);
  v264 = v451;
  if (v451)
  {
    v265 = (unint64_t *)&v451->__shared_owners_;
    do
      v266 = __ldaxr(v265);
    while (__stlxr(v266 - 1, v265));
    if (!v266)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
  return v78;
}

_QWORD *_ZN16QuantizerManagerIDF16_Li512EE20lastTrainedQuantizerEv(_QWORD *result, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;

  v2 = atomic_load((unsigned __int8 *)(a2 + 72));
  if ((v2 & 1) == 0)
  {
    v9 = __si_assert_copy_extra_268();
    v10 = v9;
    v11 = "";
    if (v9)
      v11 = v9;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 730, "_training.test()", v11);
    free(v10);
    if (__valid_fs(-1))
      v12 = 2989;
    else
      v12 = 3072;
    *(_DWORD *)v12 = -559038737;
    abort();
  }
  v3 = *(_QWORD *)(a2 + 96);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 104);
    *result = v3;
    result[1] = v4;
    if (!v4)
      return result;
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(a2 + 80);
  if (v5)
  {
    v4 = *(_QWORD *)(a2 + 88);
    *result = v5;
    result[1] = v4;
    if (!v4)
      return result;
    goto LABEL_12;
  }
  v6 = atomic_load((unsigned __int8 *)_ZGVZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq);
  if ((v6 & 1) == 0)
  {
    v14 = result;
    v15 = __cxa_guard_acquire(_ZGVZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq);
    result = v14;
    if (v15)
    {
      __cxa_atexit((void (*)(void *))_ZNSt3__110shared_ptrI9QuantizerIDF16_Li512EEED1B8nn180100Ev, &_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq, &dword_1B8270000);
      __cxa_guard_release(_ZGVZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq);
      result = v14;
    }
  }
  if (_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE9onceToken != -1)
  {
    v13 = result;
    dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE9onceToken, &__block_literal_global_291);
    result = v13;
  }
  v4 = qword_1EF1AD258;
  *result = _ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq;
  result[1] = v4;
  if (v4)
  {
LABEL_12:
    v7 = (unint64_t *)(v4 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void ___ZN16QuantizerManagerIDF16_Li512EE23commitTrainingQuantizerEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  int v10;
  std::string *p_p;
  std::string::size_type size;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  int64_t v16;
  uint64_t v17;
  void **v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  uint64_t *v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  void **v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  size_t prime;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  std::__shared_weak_count *v53;
  int v54;
  size_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  const void *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  void **v69;
  uint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v77;
  int *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::string __p;
  std::string __dst;
  std::string v84;
  void *v85[2];
  int64_t v86;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 80);
  if (!v2)
    goto LABEL_109;
  v3 = *(char *)(v1 + 71);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(v1 + 71);
  else
    v4 = *(_QWORD *)(v1 + 56);
  v5 = v4 + 1;
  if (v4 + 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_149:
    abort();
  if (v5 >= 0x17)
  {
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v7 = v5 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_16;
  }
  if (v3 >= 0)
    v9 = (const void *)(v1 + 48);
  else
    v9 = *(const void **)(v1 + 48);
  memmove(p_dst, v9, v4);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  std::to_string(&__p, v10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v13 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v84.__r_.__value_.__r.__words[2] = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v84, ".quantizer");
  v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)v85 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v86 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
LABEL_36:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_37;
  }
  operator delete(v84.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_36;
LABEL_24:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_25;
LABEL_37:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_25:
  v17 = *(_QWORD *)(v1 + 80);
  if (v86 >= 0)
    v18 = v85;
  else
    v18 = (void **)v85[0];
  fd_rename(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 40), (const char *)v18);
  MEMORY[0x1BCCB03B0](v17 + 8, v18);
  atomic_store(1u, (unsigned __int8 *)(*(_QWORD *)(v1 + 80) + 57));
  v20 = *(_QWORD *)(v1 + 80);
  v19 = *(std::__shared_weak_count **)(v1 + 88);
  v21 = v20;
  if (v19)
  {
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v23 = __ldxr(p_shared_weak_owners);
    while (__stxr(v23 + 1, p_shared_weak_owners));
    v21 = *(_QWORD *)(v1 + 80);
  }
  v24 = (uint64_t *)(v1 + 112);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
  v26 = v25;
  v27 = v25;
  v28 = *(_QWORD *)(v1 + 120);
  if (v28)
  {
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      v30 = v25;
      if (v28 <= v25)
        v30 = v25 % v28;
    }
    else
    {
      v30 = (v28 - 1) & v25;
    }
    v31 = *(void ***)(*v24 + 8 * v30);
    if (v31)
    {
      v32 = *v31;
      if (*v31)
      {
        if (v29.u32[0] < 2uLL)
        {
          while (1)
          {
            v34 = *((_QWORD *)v32 + 1);
            if (v34 == v25)
            {
              if (*((_DWORD *)v32 + 4) == v25)
                goto LABEL_94;
            }
            else if ((v34 & (v28 - 1)) != v30)
            {
              goto LABEL_56;
            }
            v32 = *(void **)v32;
            if (!v32)
              goto LABEL_56;
          }
        }
        do
        {
          v33 = *((_QWORD *)v32 + 1);
          if (v33 == v25)
          {
            if (*((_DWORD *)v32 + 4) == v25)
              goto LABEL_94;
          }
          else
          {
            if (v33 >= v28)
              v33 %= v28;
            if (v33 != v30)
              break;
          }
          v32 = *(void **)v32;
        }
        while (v32);
      }
    }
  }
  else
  {
    v30 = 0;
  }
LABEL_56:
  v32 = operator new(0x28uLL);
  *(_QWORD *)v32 = 0;
  *((_QWORD *)v32 + 1) = v27;
  *((_DWORD *)v32 + 4) = v26;
  *((_QWORD *)v32 + 3) = 0;
  *((_QWORD *)v32 + 4) = 0;
  v35 = (float)(unint64_t)(*(_QWORD *)(v1 + 136) + 1);
  v36 = *(float *)(v1 + 144);
  if (!v28 || (float)(v36 * (float)v28) < v35)
  {
    v37 = 1;
    if (v28 >= 3)
      v37 = (v28 & (v28 - 1)) != 0;
    v38 = v37 | (2 * v28);
    v39 = vcvtps_u32_f32(v35 / v36);
    if (v38 <= v39)
      prime = v39;
    else
      prime = v38;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v28 = *(_QWORD *)(v1 + 120);
    }
    if (prime > v28)
      goto LABEL_78;
    if (prime < v28)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(v1 + 136) / *(float *)(v1 + 144));
      if (v28 < 3 || (v42 = (uint8x8_t)vcnt_s8((int8x8_t)v28), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < v28)
LABEL_78:
        std::__hash_table<std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,std::__unordered_map_hasher<SIUnicodeString,std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,HashFunction,HashEqual,true>,std::__unordered_map_equal<SIUnicodeString,std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,HashEqual,HashFunction,true>,std::allocator<std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>>>::__do_rehash<true>(v1 + 112, prime);
    }
    v28 = *(_QWORD *)(v1 + 120);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v28 <= v27)
        v30 = v27 % v28;
      else
        v30 = v27;
    }
    else
    {
      v30 = (v28 - 1) & v27;
    }
  }
  v44 = *v24;
  v45 = *(_QWORD **)(*v24 + 8 * v30);
  if (v45)
  {
    *(_QWORD *)v32 = *v45;
LABEL_92:
    *v45 = v32;
    goto LABEL_93;
  }
  *(_QWORD *)v32 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v1 + 128) = v32;
  *(_QWORD *)(v44 + 8 * v30) = v1 + 128;
  if (*(_QWORD *)v32)
  {
    v46 = *(_QWORD *)(*(_QWORD *)v32 + 8);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v46 >= v28)
        v46 %= v28;
    }
    else
    {
      v46 &= v28 - 1;
    }
    v45 = (_QWORD *)(*v24 + 8 * v46);
    goto LABEL_92;
  }
LABEL_93:
  ++*(_QWORD *)(v1 + 136);
LABEL_94:
  if (v19)
  {
    v47 = std::__shared_weak_count::lock(v19);
    v48 = v47;
    if (v47)
    {
      v49 = (unint64_t *)&v47->__shared_weak_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
      std::__shared_weak_count::__release_weak(v19);
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v52 = __ldaxr(p_shared_owners);
      while (__stlxr(v52 - 1, p_shared_owners));
      if (v52)
        goto LABEL_105;
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      v19 = v48;
    }
    else
    {
      v20 = 0;
    }
    std::__shared_weak_count::__release_weak(v19);
  }
  else
  {
    v20 = 0;
    v48 = 0;
  }
LABEL_105:
  v53 = (std::__shared_weak_count *)*((_QWORD *)v32 + 4);
  *((_QWORD *)v32 + 3) = v20;
  *((_QWORD *)v32 + 4) = v48;
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  if (SHIBYTE(v86) < 0)
    operator delete(v85[0]);
LABEL_109:
  v54 = *(char *)(v1 + 71);
  if (v54 >= 0)
    v55 = *(unsigned __int8 *)(v1 + 71);
  else
    v55 = *(_QWORD *)(v1 + 56);
  v56 = v55 + 10;
  if (v55 + 10 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_149;
  if (v56 >= 0x17)
  {
    v58 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17)
      v58 = v56 | 7;
    v59 = v58 + 1;
    v57 = operator new(v58 + 1);
    v85[1] = (void *)(v55 + 10);
    v86 = v59 | 0x8000000000000000;
    v85[0] = v57;
  }
  else
  {
    v85[1] = 0;
    v86 = 0;
    v85[0] = 0;
    v57 = v85;
    HIBYTE(v86) = v55 + 10;
    if (!v55)
      goto LABEL_123;
  }
  if (v54 >= 0)
    v60 = (const void *)(v1 + 48);
  else
    v60 = *(const void **)(v1 + 48);
  memmove(v57, v60, v55);
LABEL_123:
  strcpy((char *)v57 + v55, ".quantizer");
  v62 = *(_QWORD *)(v1 + 96);
  v61 = *(_QWORD *)(v1 + 104);
  if (v61)
  {
    v63 = (unint64_t *)(v61 + 8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  v65 = *(std::__shared_weak_count **)(v1 + 88);
  *(_QWORD *)(v1 + 80) = v62;
  *(_QWORD *)(v1 + 88) = v61;
  if (v65)
  {
    v66 = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = *(_QWORD *)(v1 + 80);
  if (v86 >= 0)
    v69 = v85;
  else
    v69 = (void **)v85[0];
  fd_rename(*(_QWORD *)(*(_QWORD *)(v68 + 40) + 40), (const char *)v69);
  MEMORY[0x1BCCB03B0](v68 + 8, v69);
  v70 = *(_QWORD *)(v1 + 80);
  v71 = *(unint64_t **)(v70 + 40);
  *v71 = 0;
  vi_onefixedsize_disk_allocator::storeHeader(v71);
  storage_array_SyncPages(*(_QWORD *)(v70 + 40) + 8, *(_QWORD *)(v70 + 40) + 4192);
  storage_array_Truncate((uint64_t *)(*(_QWORD *)(v70 + 40) + 8));
  v72 = *(_QWORD *)(v70 + 40);
  fd_make_readonly(*(_QWORD *)(v72 + 40));
  v73 = *(_QWORD *)(v72 + 40);
  if (v73)
  {
    do
    {
      v74 = fchmodat(*(_DWORD *)(v73 + 44), *(const char **)(v73 + 72), 0x100u, 2048);
      v75 = g_prot_error_callback;
      if (v74 != -1 || g_prot_error_callback == 0)
        break;
      v77 = *(unsigned int *)(v73 + 40);
      v78 = __error();
    }
    while (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v75 + 16))(v75, v77, *v78, 19) & 1) != 0);
  }
  *(_BYTE *)(v70 + 56) = 1;
  v79 = *(std::__shared_weak_count **)(v1 + 104);
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  if (!v79)
    goto LABEL_144;
  v80 = (unint64_t *)&v79->__shared_owners_;
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v81 - 1, v80));
  if (v81)
  {
LABEL_144:
    if ((SHIBYTE(v86) & 0x80000000) == 0)
      return;
    goto LABEL_145;
  }
  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
  std::__shared_weak_count::__release_weak(v79);
  if (SHIBYTE(v86) < 0)
LABEL_145:
    operator delete(v85[0]);
}

float ___ZN22IVFVectorIndexTemplateIDF16_Li512EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li512EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj_block_invoke(uint64_t a1, unsigned int a2, float *a3)
{
  uint64_t v6;
  uint64_t v7;
  float16x8_t v8;
  float32x4_t v9;
  float16x8_t v10;
  float16x8_t v11;
  float16x8_t v12;
  float16x8_t v13;
  float16x8_t v14;
  float16x8_t v15;
  float16x8_t v16;
  float16x8_t v17;
  float16x8_t v18;
  float16x8_t v19;
  float16x8_t v20;
  float16x8_t v21;
  float16x8_t v22;
  float16x8_t v23;
  float16x8_t v24;
  float16x8_t v25;
  float16x8_t v26;
  float16x8_t v27;
  float16x8_t v28;
  float16x8_t v29;
  float16x8_t v30;
  float16x8_t v31;
  float16x8_t v32;
  float16x8_t v33;
  float16x8_t v34;
  float16x8_t v35;
  float16x8_t v36;
  float16x8_t v37;
  float16x8_t v38;
  float16x8_t v39;
  float16x8_t v40;
  float16x8_t v41;
  float16x8_t v42;
  float16x8_t v43;
  float16x8_t v44;
  float16x8_t v45;
  float16x8_t v46;
  float16x8_t v47;
  float16x8_t v48;
  float16x8_t v49;
  float16x8_t v50;
  float16x8_t v51;
  float16x8_t v52;
  float16x8_t v53;
  float16x8_t v54;
  float16x8_t v55;
  float16x8_t v56;
  float16x8_t v57;
  float16x8_t v58;
  float16x8_t v59;
  float16x8_t v60;
  float16x8_t v61;
  float16x8_t v62;
  float16x8_t v63;
  float16x8_t v64;
  float16x8_t v65;
  float16x8_t v66;
  float16x8_t v67;
  float16x8_t v68;
  float16x8_t v69;
  float16x8_t v70;
  float16x8_t v71;
  float *v72;
  float *v73;
  float v74;
  float result;
  void *__p[256];

  v6 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32), *(unsigned int *)a3);
  if (*(_DWORD *)(a1 + 64))
  {
    memset(__p, 0, 24);
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 72))(__p, *(_QWORD *)(a1 + 40), v6, 1);
    if (*((float *)__p[0] + 1) < a3[1])
      a2 = *(_DWORD *)(a1 + 68) + *(_DWORD *)__p[0];
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v7 = *(_QWORD *)(a1 + 48);
  bzero(__p, 0x800uLL);
  v8 = *(float16x8_t *)(v6 + 16);
  v9 = vcvt_hight_f32_f16(*(float16x8_t *)v6);
  *(float32x4_t *)__p = vcvtq_f32_f16(*(float16x4_t *)v6);
  *(float32x4_t *)&__p[2] = v9;
  *(float32x4_t *)&__p[4] = vcvtq_f32_f16(*(float16x4_t *)v8.i8);
  *(float32x4_t *)&__p[6] = vcvt_hight_f32_f16(v8);
  v10 = *(float16x8_t *)(v6 + 32);
  v11 = *(float16x8_t *)(v6 + 48);
  *(float32x4_t *)&__p[8] = vcvtq_f32_f16(*(float16x4_t *)v10.i8);
  *(float32x4_t *)&__p[10] = vcvt_hight_f32_f16(v10);
  *(float32x4_t *)&__p[12] = vcvtq_f32_f16(*(float16x4_t *)v11.i8);
  *(float32x4_t *)&__p[14] = vcvt_hight_f32_f16(v11);
  v12 = *(float16x8_t *)(v6 + 64);
  v13 = *(float16x8_t *)(v6 + 80);
  *(float32x4_t *)&__p[16] = vcvtq_f32_f16(*(float16x4_t *)v12.i8);
  *(float32x4_t *)&__p[18] = vcvt_hight_f32_f16(v12);
  *(float32x4_t *)&__p[20] = vcvtq_f32_f16(*(float16x4_t *)v13.i8);
  *(float32x4_t *)&__p[22] = vcvt_hight_f32_f16(v13);
  v14 = *(float16x8_t *)(v6 + 96);
  v15 = *(float16x8_t *)(v6 + 112);
  *(float32x4_t *)&__p[24] = vcvtq_f32_f16(*(float16x4_t *)v14.i8);
  *(float32x4_t *)&__p[26] = vcvt_hight_f32_f16(v14);
  *(float32x4_t *)&__p[28] = vcvtq_f32_f16(*(float16x4_t *)v15.i8);
  *(float32x4_t *)&__p[30] = vcvt_hight_f32_f16(v15);
  v16 = *(float16x8_t *)(v6 + 128);
  v17 = *(float16x8_t *)(v6 + 144);
  *(float32x4_t *)&__p[32] = vcvtq_f32_f16(*(float16x4_t *)v16.i8);
  *(float32x4_t *)&__p[34] = vcvt_hight_f32_f16(v16);
  *(float32x4_t *)&__p[36] = vcvtq_f32_f16(*(float16x4_t *)v17.i8);
  *(float32x4_t *)&__p[38] = vcvt_hight_f32_f16(v17);
  v18 = *(float16x8_t *)(v6 + 160);
  v19 = *(float16x8_t *)(v6 + 176);
  *(float32x4_t *)&__p[40] = vcvtq_f32_f16(*(float16x4_t *)v18.i8);
  *(float32x4_t *)&__p[42] = vcvt_hight_f32_f16(v18);
  *(float32x4_t *)&__p[44] = vcvtq_f32_f16(*(float16x4_t *)v19.i8);
  *(float32x4_t *)&__p[46] = vcvt_hight_f32_f16(v19);
  v20 = *(float16x8_t *)(v6 + 192);
  v21 = *(float16x8_t *)(v6 + 208);
  *(float32x4_t *)&__p[48] = vcvtq_f32_f16(*(float16x4_t *)v20.i8);
  *(float32x4_t *)&__p[50] = vcvt_hight_f32_f16(v20);
  *(float32x4_t *)&__p[52] = vcvtq_f32_f16(*(float16x4_t *)v21.i8);
  *(float32x4_t *)&__p[54] = vcvt_hight_f32_f16(v21);
  v22 = *(float16x8_t *)(v6 + 224);
  v23 = *(float16x8_t *)(v6 + 240);
  *(float32x4_t *)&__p[56] = vcvtq_f32_f16(*(float16x4_t *)v22.i8);
  *(float32x4_t *)&__p[58] = vcvt_hight_f32_f16(v22);
  *(float32x4_t *)&__p[60] = vcvtq_f32_f16(*(float16x4_t *)v23.i8);
  *(float32x4_t *)&__p[62] = vcvt_hight_f32_f16(v23);
  v24 = *(float16x8_t *)(v6 + 256);
  v25 = *(float16x8_t *)(v6 + 272);
  *(float32x4_t *)&__p[64] = vcvtq_f32_f16(*(float16x4_t *)v24.i8);
  *(float32x4_t *)&__p[66] = vcvt_hight_f32_f16(v24);
  *(float32x4_t *)&__p[68] = vcvtq_f32_f16(*(float16x4_t *)v25.i8);
  *(float32x4_t *)&__p[70] = vcvt_hight_f32_f16(v25);
  v26 = *(float16x8_t *)(v6 + 288);
  v27 = *(float16x8_t *)(v6 + 304);
  *(float32x4_t *)&__p[72] = vcvtq_f32_f16(*(float16x4_t *)v26.i8);
  *(float32x4_t *)&__p[74] = vcvt_hight_f32_f16(v26);
  *(float32x4_t *)&__p[76] = vcvtq_f32_f16(*(float16x4_t *)v27.i8);
  *(float32x4_t *)&__p[78] = vcvt_hight_f32_f16(v27);
  v28 = *(float16x8_t *)(v6 + 320);
  v29 = *(float16x8_t *)(v6 + 336);
  *(float32x4_t *)&__p[80] = vcvtq_f32_f16(*(float16x4_t *)v28.i8);
  *(float32x4_t *)&__p[82] = vcvt_hight_f32_f16(v28);
  *(float32x4_t *)&__p[84] = vcvtq_f32_f16(*(float16x4_t *)v29.i8);
  *(float32x4_t *)&__p[86] = vcvt_hight_f32_f16(v29);
  v30 = *(float16x8_t *)(v6 + 352);
  v31 = *(float16x8_t *)(v6 + 368);
  *(float32x4_t *)&__p[88] = vcvtq_f32_f16(*(float16x4_t *)v30.i8);
  *(float32x4_t *)&__p[90] = vcvt_hight_f32_f16(v30);
  *(float32x4_t *)&__p[92] = vcvtq_f32_f16(*(float16x4_t *)v31.i8);
  *(float32x4_t *)&__p[94] = vcvt_hight_f32_f16(v31);
  v32 = *(float16x8_t *)(v6 + 384);
  v33 = *(float16x8_t *)(v6 + 400);
  *(float32x4_t *)&__p[96] = vcvtq_f32_f16(*(float16x4_t *)v32.i8);
  *(float32x4_t *)&__p[98] = vcvt_hight_f32_f16(v32);
  *(float32x4_t *)&__p[100] = vcvtq_f32_f16(*(float16x4_t *)v33.i8);
  *(float32x4_t *)&__p[102] = vcvt_hight_f32_f16(v33);
  v34 = *(float16x8_t *)(v6 + 416);
  v35 = *(float16x8_t *)(v6 + 432);
  *(float32x4_t *)&__p[104] = vcvtq_f32_f16(*(float16x4_t *)v34.i8);
  *(float32x4_t *)&__p[106] = vcvt_hight_f32_f16(v34);
  *(float32x4_t *)&__p[108] = vcvtq_f32_f16(*(float16x4_t *)v35.i8);
  *(float32x4_t *)&__p[110] = vcvt_hight_f32_f16(v35);
  v36 = *(float16x8_t *)(v6 + 448);
  v37 = *(float16x8_t *)(v6 + 464);
  *(float32x4_t *)&__p[112] = vcvtq_f32_f16(*(float16x4_t *)v36.i8);
  *(float32x4_t *)&__p[114] = vcvt_hight_f32_f16(v36);
  *(float32x4_t *)&__p[116] = vcvtq_f32_f16(*(float16x4_t *)v37.i8);
  *(float32x4_t *)&__p[118] = vcvt_hight_f32_f16(v37);
  v38 = *(float16x8_t *)(v6 + 480);
  v39 = *(float16x8_t *)(v6 + 496);
  *(float32x4_t *)&__p[120] = vcvtq_f32_f16(*(float16x4_t *)v38.i8);
  *(float32x4_t *)&__p[122] = vcvt_hight_f32_f16(v38);
  *(float32x4_t *)&__p[124] = vcvtq_f32_f16(*(float16x4_t *)v39.i8);
  *(float32x4_t *)&__p[126] = vcvt_hight_f32_f16(v39);
  v40 = *(float16x8_t *)(v6 + 512);
  v41 = *(float16x8_t *)(v6 + 528);
  *(float32x4_t *)&__p[130] = vcvt_hight_f32_f16(v40);
  *(float32x4_t *)&__p[128] = vcvtq_f32_f16(*(float16x4_t *)v40.i8);
  *(float32x4_t *)&__p[134] = vcvt_hight_f32_f16(v41);
  *(float32x4_t *)&__p[132] = vcvtq_f32_f16(*(float16x4_t *)v41.i8);
  v42 = *(float16x8_t *)(v6 + 544);
  v43 = *(float16x8_t *)(v6 + 560);
  *(float32x4_t *)&__p[138] = vcvt_hight_f32_f16(v42);
  *(float32x4_t *)&__p[136] = vcvtq_f32_f16(*(float16x4_t *)v42.i8);
  *(float32x4_t *)&__p[142] = vcvt_hight_f32_f16(v43);
  *(float32x4_t *)&__p[140] = vcvtq_f32_f16(*(float16x4_t *)v43.i8);
  v44 = *(float16x8_t *)(v6 + 576);
  v45 = *(float16x8_t *)(v6 + 592);
  *(float32x4_t *)&__p[146] = vcvt_hight_f32_f16(v44);
  *(float32x4_t *)&__p[144] = vcvtq_f32_f16(*(float16x4_t *)v44.i8);
  *(float32x4_t *)&__p[150] = vcvt_hight_f32_f16(v45);
  *(float32x4_t *)&__p[148] = vcvtq_f32_f16(*(float16x4_t *)v45.i8);
  v46 = *(float16x8_t *)(v6 + 608);
  v47 = *(float16x8_t *)(v6 + 624);
  *(float32x4_t *)&__p[154] = vcvt_hight_f32_f16(v46);
  *(float32x4_t *)&__p[152] = vcvtq_f32_f16(*(float16x4_t *)v46.i8);
  *(float32x4_t *)&__p[158] = vcvt_hight_f32_f16(v47);
  *(float32x4_t *)&__p[156] = vcvtq_f32_f16(*(float16x4_t *)v47.i8);
  v48 = *(float16x8_t *)(v6 + 640);
  v49 = *(float16x8_t *)(v6 + 656);
  *(float32x4_t *)&__p[162] = vcvt_hight_f32_f16(v48);
  *(float32x4_t *)&__p[160] = vcvtq_f32_f16(*(float16x4_t *)v48.i8);
  *(float32x4_t *)&__p[166] = vcvt_hight_f32_f16(v49);
  *(float32x4_t *)&__p[164] = vcvtq_f32_f16(*(float16x4_t *)v49.i8);
  v50 = *(float16x8_t *)(v6 + 672);
  v51 = *(float16x8_t *)(v6 + 688);
  *(float32x4_t *)&__p[170] = vcvt_hight_f32_f16(v50);
  *(float32x4_t *)&__p[168] = vcvtq_f32_f16(*(float16x4_t *)v50.i8);
  *(float32x4_t *)&__p[174] = vcvt_hight_f32_f16(v51);
  *(float32x4_t *)&__p[172] = vcvtq_f32_f16(*(float16x4_t *)v51.i8);
  v52 = *(float16x8_t *)(v6 + 704);
  v53 = *(float16x8_t *)(v6 + 720);
  *(float32x4_t *)&__p[178] = vcvt_hight_f32_f16(v52);
  *(float32x4_t *)&__p[176] = vcvtq_f32_f16(*(float16x4_t *)v52.i8);
  *(float32x4_t *)&__p[182] = vcvt_hight_f32_f16(v53);
  *(float32x4_t *)&__p[180] = vcvtq_f32_f16(*(float16x4_t *)v53.i8);
  v54 = *(float16x8_t *)(v6 + 736);
  v55 = *(float16x8_t *)(v6 + 752);
  *(float32x4_t *)&__p[186] = vcvt_hight_f32_f16(v54);
  *(float32x4_t *)&__p[184] = vcvtq_f32_f16(*(float16x4_t *)v54.i8);
  *(float32x4_t *)&__p[190] = vcvt_hight_f32_f16(v55);
  *(float32x4_t *)&__p[188] = vcvtq_f32_f16(*(float16x4_t *)v55.i8);
  v56 = *(float16x8_t *)(v6 + 768);
  v57 = *(float16x8_t *)(v6 + 784);
  *(float32x4_t *)&__p[194] = vcvt_hight_f32_f16(v56);
  *(float32x4_t *)&__p[192] = vcvtq_f32_f16(*(float16x4_t *)v56.i8);
  *(float32x4_t *)&__p[198] = vcvt_hight_f32_f16(v57);
  *(float32x4_t *)&__p[196] = vcvtq_f32_f16(*(float16x4_t *)v57.i8);
  v58 = *(float16x8_t *)(v6 + 800);
  v59 = *(float16x8_t *)(v6 + 816);
  *(float32x4_t *)&__p[202] = vcvt_hight_f32_f16(v58);
  *(float32x4_t *)&__p[200] = vcvtq_f32_f16(*(float16x4_t *)v58.i8);
  *(float32x4_t *)&__p[206] = vcvt_hight_f32_f16(v59);
  *(float32x4_t *)&__p[204] = vcvtq_f32_f16(*(float16x4_t *)v59.i8);
  v60 = *(float16x8_t *)(v6 + 832);
  v61 = *(float16x8_t *)(v6 + 848);
  *(float32x4_t *)&__p[210] = vcvt_hight_f32_f16(v60);
  *(float32x4_t *)&__p[208] = vcvtq_f32_f16(*(float16x4_t *)v60.i8);
  *(float32x4_t *)&__p[214] = vcvt_hight_f32_f16(v61);
  *(float32x4_t *)&__p[212] = vcvtq_f32_f16(*(float16x4_t *)v61.i8);
  v62 = *(float16x8_t *)(v6 + 864);
  v63 = *(float16x8_t *)(v6 + 880);
  *(float32x4_t *)&__p[218] = vcvt_hight_f32_f16(v62);
  *(float32x4_t *)&__p[216] = vcvtq_f32_f16(*(float16x4_t *)v62.i8);
  *(float32x4_t *)&__p[222] = vcvt_hight_f32_f16(v63);
  *(float32x4_t *)&__p[220] = vcvtq_f32_f16(*(float16x4_t *)v63.i8);
  v64 = *(float16x8_t *)(v6 + 896);
  v65 = *(float16x8_t *)(v6 + 912);
  *(float32x4_t *)&__p[226] = vcvt_hight_f32_f16(v64);
  *(float32x4_t *)&__p[224] = vcvtq_f32_f16(*(float16x4_t *)v64.i8);
  *(float32x4_t *)&__p[230] = vcvt_hight_f32_f16(v65);
  *(float32x4_t *)&__p[228] = vcvtq_f32_f16(*(float16x4_t *)v65.i8);
  v66 = *(float16x8_t *)(v6 + 928);
  v67 = *(float16x8_t *)(v6 + 944);
  *(float32x4_t *)&__p[234] = vcvt_hight_f32_f16(v66);
  *(float32x4_t *)&__p[232] = vcvtq_f32_f16(*(float16x4_t *)v66.i8);
  *(float32x4_t *)&__p[238] = vcvt_hight_f32_f16(v67);
  *(float32x4_t *)&__p[236] = vcvtq_f32_f16(*(float16x4_t *)v67.i8);
  v68 = *(float16x8_t *)(v6 + 960);
  v69 = *(float16x8_t *)(v6 + 976);
  *(float32x4_t *)&__p[242] = vcvt_hight_f32_f16(v68);
  *(float32x4_t *)&__p[240] = vcvtq_f32_f16(*(float16x4_t *)v68.i8);
  *(float32x4_t *)&__p[246] = vcvt_hight_f32_f16(v69);
  *(float32x4_t *)&__p[244] = vcvtq_f32_f16(*(float16x4_t *)v69.i8);
  v70 = *(float16x8_t *)(v6 + 992);
  v71 = *(float16x8_t *)(v6 + 1008);
  *(float32x4_t *)&__p[250] = vcvt_hight_f32_f16(v70);
  *(float32x4_t *)&__p[248] = vcvtq_f32_f16(*(float16x4_t *)v70.i8);
  *(float32x4_t *)&__p[254] = vcvt_hight_f32_f16(v71);
  *(float32x4_t *)&__p[252] = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
  v72 = (float *)(v7 + 2052 * a2);
  v73 = v72 + 512;
  v74 = v72[512];
  if (v74 == 0.0)
  {
    memcpy(v72, __p, 0x800uLL);
  }
  else
  {
    vDSP_vavlin((const float *)__p, 1, v72 + 512, v72, 1, 0x200uLL);
    v74 = *v73;
  }
  result = v74 + 1.0;
  *v73 = v74 + 1.0;
  return result;
}

void _ZZN22IVFVectorIndexTemplateIDF16_Li512EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li512EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjjENUlPvmE_8__invokeESC_m(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v4 = a1[2];
  v5 = *(_QWORD *)(a1[1] + 8 * a2);
  v6 = (std::__shared_weak_count *)a1[3];
  v23 = v4;
  v24 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v5 + 40))(&v25, v5, &v23);
  v9 = (_QWORD *)(*a1 + 16 * a2);
  v11 = v25;
  v10 = v26;
  if (v26)
  {
    v12 = (unint64_t *)&v26->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = (std::__shared_weak_count *)v9[1];
  *v9 = v11;
  v9[1] = v10;
  if (!v14)
    goto LABEL_11;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = v26;
    if (!v26)
      goto LABEL_17;
  }
  else
  {
LABEL_11:
    v17 = v26;
    if (!v26)
      goto LABEL_17;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_17:
  v20 = v24;
  if (v24)
  {
    v21 = (unint64_t *)&v24->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

uint64_t _ZN20ArrayVectorQuantizerIDF16_Li512EED1Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E6E31A60;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void _ZN20ArrayVectorQuantizerIDF16_Li512EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E6E31A60;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1BCCB06A4);
}

uint64_t _ZNK20ArrayVectorQuantizerIDF16_Li512EE5countEv(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 10;
}

uint64_t _ZNK20ArrayVectorQuantizerIDF16_Li512EE11getCentroidEj(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  char *v4;
  char *v5;
  const char *v6;

  v2 = *(_QWORD *)(a1 + 40);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 48) - v2) >> 10))
  {
    v4 = __si_assert_copy_extra_268();
    v5 = v4;
    v6 = "";
    if (v4)
      v6 = v4;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 443, "i < centroids.size()", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return v2 + ((unint64_t)a2 << 10);
}

uint64_t ___ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE7compactIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_P12uint32_map_tP11TermIdStore18CICompactCallbacksPVi_block_invoke(uint64_t a1, unsigned int *a2, _BYTE *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  char *v13;
  char *v14;
  const char *v15;

  v6 = (uint64_t *)*((_QWORD *)a2 + 3);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *v6;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    if ((_DWORD)v8)
    {
      if (*(_DWORD *)(v7 + 4408) <= v8)
      {
        v13 = __si_assert_copy_extra(0);
        v14 = v13;
        v15 = "";
        if (v13)
          v15 = v13;
        __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 1530, "position && position < inMap->count", v15);
        free(v14);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      v10 = *(_QWORD *)(a1 + 48);
      v11 = storageResolvePtr(v7, 4 * *v6, 4uLL, 1);
      v8 = *(_QWORD *)storageResolvePtr(v10, 8 * *(unsigned int *)v11, 8uLL, 1);
    }
    else
    {
      v8 = 0;
    }
  }
  _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16insertForCompactEjPK10CIVector_sIDF16_Li512EEyjf(*(_QWORD *)(a1 + 56), a2[2], *((void **)a2 + 2), v8, *a2, *((float *)a2 + 1));
  result = 1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) && !**(_DWORD **)(a1 + 64))
    result = (*(uint64_t (**)(_QWORD))(a1 + 88))(*(_QWORD *)(a1 + 96));
  *a3 = result;
  return result;
}

void _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16insertForCompactEjPK10CIVector_sIDF16_Li512EEyjf(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5, float a6)
{
  os_unfair_lock_s *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  void *v22;
  uint64_t v23;
  float v24;
  char v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  const char *v32;

  v12 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v13 = *(std::__shared_weak_count **)(a1 + 88);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v17 = *(_QWORD *)(a1 + 96);
  v16 = *(std::__shared_weak_count **)(a1 + 104);
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  os_unfair_lock_unlock(v12);
  if ((_DWORD)a5 == -1)
  {
    v20 = a1;
    v21 = a2;
    v22 = a3;
    v23 = 0xFFFFFFFFLL;
    v24 = a6;
    v25 = 0;
  }
  else
  {
    if (*(_DWORD *)(v17 + 68) <= a5)
    {
      v30 = __si_assert_copy_extra_268();
      v31 = v30;
      v32 = "";
      if (v30)
        v32 = v30;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2605, "partID == VECTOR_NOT_FOUND || partID < cur.partitions->nPartitions()", v32);
      free(v31);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v20 = a1;
    v21 = a2;
    v22 = a3;
    v23 = a5;
    v24 = a6;
    v25 = 1;
  }
  *((_QWORD *)_ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li512EEjfb(v20, v21, v22, v23, v25, v24)+ 128) = a4;
  if (!v16)
    goto LABEL_15;
  v26 = (unint64_t *)&v16->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!v13)
      return;
  }
  else
  {
LABEL_15:
    if (!v13)
      return;
  }
  v28 = (unint64_t *)&v13->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

uint64_t ___ZNK22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(float))(*(_QWORD *)(a1 + 32) + 16))(*(float *)(a2 + 4));
  *a3 = **(_DWORD **)(a1 + 40) != 0;
  return result;
}

BOOL _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li512EE(uint64_t a1, uint64_t a2)
{
  int v4;
  int v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD v32[8];
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unsigned int v36;
  _QWORD v37[7];
  unsigned int v38;
  float v39;
  float v40;
  unsigned int v41;
  _BYTE buf[24];
  _DWORD v43[4];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v40 = 3.4028e38;
  v41 = -1;
  v4 = _ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li512EERjRfj(a1, a2, (int *)&v41, &v40, 0);
  if (v4 == -1)
  {
    v6 = *__error();
    v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "exists";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2632;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v41;
      LOWORD(v43[0]) = 2048;
      *(double *)((char *)v43 + 2) = v40;
      _os_log_error_impl(&dword_1B8270000, v7, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v6;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    v9 = *(_QWORD *)(a1 + 80);
    v8 = *(std::__shared_weak_count **)(a1 + 88);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v13 = *(_QWORD *)(a1 + 96);
    v12 = *(std::__shared_weak_count **)(a1 + 104);
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v43[0] = -1;
    *(_QWORD *)&buf[16] = 0x2000000000;
    v16 = v41;
    v17 = MEMORY[0x1E0C809B0];
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 0x40000000;
    v37[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li512EE_block_invoke;
    v37[3] = &unk_1E6E33BF0;
    v37[5] = a1;
    v37[6] = a2;
    v38 = v41;
    v39 = v40;
    v37[4] = buf;
    (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v13 + 80))(v13, v41, v37);
    if (*(_DWORD *)(*(_QWORD *)&buf[8] + 24) == -1)
    {
      v32[0] = v17;
      v32[1] = 1174405120;
      v32[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li512EE_block_invoke_946;
      v32[3] = &unk_1E6E33C18;
      v32[5] = a1;
      v32[6] = a2;
      v32[7] = v9;
      v33 = v8;
      if (v8)
      {
        v22 = (unint64_t *)&v8->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v34 = v13;
      v35 = v12;
      if (v12)
      {
        v24 = (unint64_t *)&v12->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v36 = v16;
      v32[4] = buf;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 64))(v13, v32);
      v26 = v35;
      if (v35)
      {
        v27 = (unint64_t *)&v35->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = v33;
      if (v33)
      {
        v30 = (unint64_t *)&v33->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
    _Block_object_dispose(buf, 8);
    if (v12)
    {
      v18 = (unint64_t *)&v12->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v8)
    {
      v20 = (unint64_t *)&v8->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  return v4 != -1;
}

void ___ZN22IVFVectorIndexTemplateIDF16_Li512EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li512EE_block_invoke_946(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;
  float *v4;
  float *v5;
  int v6;
  int v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  const void *v11;
  int v12;
  NSObject *v13;
  float16x8_t *v14;
  uint64_t v15;
  float16x8_t v16;
  float32x4_t v17;
  float16x8_t v18;
  float16x8_t v19;
  float16x8_t v20;
  float16x8_t v21;
  float16x8_t v22;
  float16x8_t v23;
  float16x8_t v24;
  float16x8_t v25;
  float16x8_t v26;
  float16x8_t v27;
  float16x8_t v28;
  float16x8_t v29;
  float16x8_t v30;
  float16x8_t v31;
  float16x8_t v32;
  float16x8_t v33;
  float16x8_t v34;
  float16x8_t v35;
  float16x8_t v36;
  float16x8_t v37;
  float16x8_t v38;
  float16x8_t v39;
  float16x8_t v40;
  float16x8_t v41;
  float16x8_t v42;
  float16x8_t v43;
  float16x8_t v44;
  float16x8_t v45;
  float16x8_t v46;
  float16x8_t v47;
  float16x8_t v48;
  float16x8_t v49;
  float16x8_t v50;
  float16x8_t v51;
  float16x8_t v52;
  float16x8_t v53;
  float16x8_t v54;
  float16x8_t v55;
  float16x8_t v56;
  float16x8_t v57;
  float16x8_t v58;
  float16x8_t v59;
  float16x8_t v60;
  float16x8_t v61;
  float16x8_t v62;
  float16x8_t v63;
  float16x8_t v64;
  float16x8_t v65;
  float16x8_t v66;
  float16x8_t v67;
  float16x8_t v68;
  float16x8_t v69;
  float16x8_t v70;
  float16x8_t v71;
  float16x8_t v72;
  float16x8_t v73;
  float16x8_t v74;
  float16x8_t v75;
  float16x8_t v76;
  float16x8_t v77;
  float16x8_t v78;
  float16x8_t v79;
  float16x8_t v80;
  float32x4_t v81;
  float16x8_t v82;
  float16x8_t v83;
  float16x8_t v84;
  float16x8_t v85;
  float16x8_t v86;
  float16x8_t v87;
  float16x8_t v88;
  float16x8_t v89;
  float16x8_t v90;
  float16x8_t v91;
  float16x8_t v92;
  float16x8_t v93;
  float16x8_t v94;
  float16x8_t v95;
  float16x8_t v96;
  float16x8_t v97;
  float16x8_t v98;
  float16x8_t v99;
  float16x8_t v100;
  float16x8_t v101;
  float16x8_t v102;
  float16x8_t v103;
  float16x8_t v104;
  float16x8_t v105;
  float16x8_t v106;
  float16x8_t v107;
  float16x8_t v108;
  float16x8_t v109;
  float16x8_t v110;
  float16x8_t v111;
  float16x8_t v112;
  float16x8_t v113;
  float16x8_t v114;
  float16x8_t v115;
  float16x8_t v116;
  float16x8_t v117;
  float16x8_t v118;
  float16x8_t v119;
  float16x8_t v120;
  float16x8_t v121;
  float16x8_t v122;
  float16x8_t v123;
  float16x8_t v124;
  float16x8_t v125;
  float16x8_t v126;
  float16x8_t v127;
  float16x8_t v128;
  float16x8_t v129;
  float16x8_t v130;
  float16x8_t v131;
  float16x8_t v132;
  float16x8_t v133;
  float16x8_t v134;
  float16x8_t v135;
  float16x8_t v136;
  float16x8_t v137;
  float16x8_t v138;
  float16x8_t v139;
  float16x8_t v140;
  float16x8_t v141;
  float16x8_t v142;
  float16x8_t v143;
  float v144;
  int v145;
  NSObject *v146;
  int v147;
  NSObject *v148;
  int v149;
  NSObject *v150;
  int v151;
  NSObject *v152;
  int v153;
  NSObject *v154;
  int v155;
  NSObject *v156;
  uint64_t v157;
  unint64_t v158;
  int v159;
  NSObject *v160;
  int v161;
  NSObject *v162;
  int v163;
  NSObject *v164;
  int v165;
  NSObject *v166;
  int v167;
  NSObject *v168;
  double v169;
  int v170;
  int v171;
  float v172;
  int v173;
  float v174;
  _BOOL4 v175;
  int v176;
  int v177;
  _BOOL4 v178;
  int v179;
  int v180;
  _BOOL4 v181;
  int v182;
  int v183;
  _BOOL4 v184;
  int v185;
  int v186;
  float v187;
  float v188;
  double v189;
  float v190;
  _BOOL4 v191;
  _BOOL4 v192;
  float v193;
  float v194;
  int v195;
  float v196;
  _BOOL4 v197;
  float v198;
  int v199;
  _BOOL4 v200;
  float v201;
  int v202;
  _BOOL4 v203;
  float v204;
  int v205;
  _BOOL4 v206;
  float v207;
  int v208;
  float v209;
  float v210;
  float v211;
  _BOOL4 v212;
  _BOOL4 v213;
  _BOOL4 v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float *__C;
  float *v220;
  uint64_t v221;
  float32x4_t __B;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  _BYTE __A[80];
  float32x4_t v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  float32x4_t v362;
  float32x4_t v363;
  float32x4_t v364;
  float32x4_t v365;
  float32x4_t v366;
  float32x4_t v367;
  float32x4_t v368;
  float32x4_t v369;
  float32x4_t v370;
  float32x4_t v371;
  float32x4_t v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t v378;
  float32x4_t v379;
  float32x4_t v380;
  float32x4_t v381;
  float32x4_t v382;
  float32x4_t v383;
  float32x4_t v384;
  float32x4_t v385;
  float32x4_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  float32x4_t v390;
  float32x4_t v391;
  float32x4_t v392;
  float32x4_t v393;
  float32x4_t v394;
  float32x4_t v395;
  float32x4_t v396;
  float32x4_t v397;
  float32x4_t v398;
  float32x4_t v399;
  float32x4_t v400;
  float32x4_t v401;
  float32x4_t v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  float32x4_t v407;
  float32x4_t v408;
  float32x4_t v409;
  float32x4_t v410;
  float32x4_t v411;
  float32x4_t v412;
  float32x4_t v413;
  float32x4_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  float32x4_t v418;
  float32x4_t v419;
  float32x4_t v420;
  float32x4_t v421;
  float32x4_t v422;
  float32x4_t v423;
  float32x4_t v424;
  float32x4_t v425;
  float32x4_t v426;
  float32x4_t v427;
  float32x4_t v428;
  float32x4_t v429;
  float32x4_t v430;
  float32x4_t v431;
  float32x4_t v432;
  float32x4_t v433;
  float32x4_t v434;
  float32x4_t v435;
  float32x4_t v436;
  float32x4_t v437;
  float32x4_t v438;
  float32x4_t v439;
  float32x4_t v440;
  float32x4_t v441;
  float32x4_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  float32x4_t v446;
  float32x4_t v447;
  float32x4_t v448;
  float32x4_t v449;
  float32x4_t v450;
  float32x4_t v451;
  float32x4_t v452;
  float32x4_t v453;
  float32x4_t v454;
  float32x4_t v455;
  float32x4_t v456;
  float32x4_t v457;
  float32x4_t v458;
  float32x4_t v459;
  float32x4_t v460;
  float32x4_t v461;
  float32x4_t v462;
  float32x4_t v463;
  float32x4_t v464;
  float32x4_t v465;
  float32x4_t v466;
  float32x4_t v467;
  float32x4_t v468;
  float32x4_t v469;
  float32x4_t v470;
  float32x4_t v471;
  float32x4_t v472;
  float32x4_t v473;
  uint64_t v474;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = v1;
  v474 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(v1 + 40);
  v9 = *(const void **)(v1 + 48);
  v11 = (const void *)_windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 32) + 16) * *(unsigned int *)v4, 0x410uLL);
  if (!memcmp(v9, v11, 0x400uLL))
  {
    v12 = *__error();
    v13 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v169 = v5[1];
      *(_DWORD *)__A = 136315906;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2647;
      *(_WORD *)&__A[18] = 1024;
      *(_DWORD *)&__A[20] = v7;
      *(_WORD *)&__A[24] = 2048;
      *(double *)&__A[26] = v169;
      _os_log_error_impl(&dword_1B8270000, v13, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", __A, 0x22u);
    }
    *__error() = v12;
    v14 = *(float16x8_t **)(v8 + 48);
    v15 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 56) + 64))(*(_QWORD *)(v8 + 56), *(unsigned int *)(v8 + 88));
    bzero(__A, 0x800uLL);
    v16 = v14[1];
    v17 = vcvt_hight_f32_f16(*v14);
    *(float32x4_t *)__A = vcvtq_f32_f16(*(float16x4_t *)v14->i8);
    *(float32x4_t *)&__A[16] = v17;
    *(float32x4_t *)&__A[32] = vcvtq_f32_f16(*(float16x4_t *)v16.i8);
    *(float32x4_t *)&__A[48] = vcvt_hight_f32_f16(v16);
    v18 = v14[2];
    v19 = v14[3];
    *(float32x4_t *)&__A[64] = vcvtq_f32_f16(*(float16x4_t *)v18.i8);
    v351 = vcvt_hight_f32_f16(v18);
    v352 = vcvtq_f32_f16(*(float16x4_t *)v19.i8);
    v353 = vcvt_hight_f32_f16(v19);
    v20 = v14[4];
    v21 = v14[5];
    v354 = vcvtq_f32_f16(*(float16x4_t *)v20.i8);
    v355 = vcvt_hight_f32_f16(v20);
    v356 = vcvtq_f32_f16(*(float16x4_t *)v21.i8);
    v357 = vcvt_hight_f32_f16(v21);
    v22 = v14[6];
    v23 = v14[7];
    v358 = vcvtq_f32_f16(*(float16x4_t *)v22.i8);
    v359 = vcvt_hight_f32_f16(v22);
    v360 = vcvtq_f32_f16(*(float16x4_t *)v23.i8);
    v361 = vcvt_hight_f32_f16(v23);
    v24 = v14[8];
    v25 = v14[9];
    v362 = vcvtq_f32_f16(*(float16x4_t *)v24.i8);
    v363 = vcvt_hight_f32_f16(v24);
    v364 = vcvtq_f32_f16(*(float16x4_t *)v25.i8);
    v365 = vcvt_hight_f32_f16(v25);
    v26 = v14[10];
    v27 = v14[11];
    v366 = vcvtq_f32_f16(*(float16x4_t *)v26.i8);
    v367 = vcvt_hight_f32_f16(v26);
    v368 = vcvtq_f32_f16(*(float16x4_t *)v27.i8);
    v369 = vcvt_hight_f32_f16(v27);
    v28 = v14[12];
    v29 = v14[13];
    v370 = vcvtq_f32_f16(*(float16x4_t *)v28.i8);
    v371 = vcvt_hight_f32_f16(v28);
    v372 = vcvtq_f32_f16(*(float16x4_t *)v29.i8);
    v373 = vcvt_hight_f32_f16(v29);
    v30 = v14[14];
    v31 = v14[15];
    v374 = vcvtq_f32_f16(*(float16x4_t *)v30.i8);
    v375 = vcvt_hight_f32_f16(v30);
    v376 = vcvtq_f32_f16(*(float16x4_t *)v31.i8);
    v377 = vcvt_hight_f32_f16(v31);
    v32 = v14[16];
    v33 = v14[17];
    v378 = vcvtq_f32_f16(*(float16x4_t *)v32.i8);
    v379 = vcvt_hight_f32_f16(v32);
    v380 = vcvtq_f32_f16(*(float16x4_t *)v33.i8);
    v381 = vcvt_hight_f32_f16(v33);
    v34 = v14[18];
    v35 = v14[19];
    v382 = vcvtq_f32_f16(*(float16x4_t *)v34.i8);
    v383 = vcvt_hight_f32_f16(v34);
    v384 = vcvtq_f32_f16(*(float16x4_t *)v35.i8);
    v385 = vcvt_hight_f32_f16(v35);
    v36 = v14[20];
    v37 = v14[21];
    v386 = vcvtq_f32_f16(*(float16x4_t *)v36.i8);
    v387 = vcvt_hight_f32_f16(v36);
    v388 = vcvtq_f32_f16(*(float16x4_t *)v37.i8);
    v389 = vcvt_hight_f32_f16(v37);
    v38 = v14[22];
    v39 = v14[23];
    v390 = vcvtq_f32_f16(*(float16x4_t *)v38.i8);
    v391 = vcvt_hight_f32_f16(v38);
    v392 = vcvtq_f32_f16(*(float16x4_t *)v39.i8);
    v393 = vcvt_hight_f32_f16(v39);
    v40 = v14[24];
    v41 = v14[25];
    v394 = vcvtq_f32_f16(*(float16x4_t *)v40.i8);
    v395 = vcvt_hight_f32_f16(v40);
    v396 = vcvtq_f32_f16(*(float16x4_t *)v41.i8);
    v397 = vcvt_hight_f32_f16(v41);
    v42 = v14[26];
    v43 = v14[27];
    v398 = vcvtq_f32_f16(*(float16x4_t *)v42.i8);
    v399 = vcvt_hight_f32_f16(v42);
    v400 = vcvtq_f32_f16(*(float16x4_t *)v43.i8);
    v401 = vcvt_hight_f32_f16(v43);
    v44 = v14[28];
    v45 = v14[29];
    v402 = vcvtq_f32_f16(*(float16x4_t *)v44.i8);
    v403 = vcvt_hight_f32_f16(v44);
    v404 = vcvtq_f32_f16(*(float16x4_t *)v45.i8);
    v405 = vcvt_hight_f32_f16(v45);
    v46 = v14[30];
    v47 = v14[31];
    v406 = vcvtq_f32_f16(*(float16x4_t *)v46.i8);
    v407 = vcvt_hight_f32_f16(v46);
    v408 = vcvtq_f32_f16(*(float16x4_t *)v47.i8);
    v409 = vcvt_hight_f32_f16(v47);
    v48 = v14[32];
    v49 = v14[33];
    v411 = vcvt_hight_f32_f16(v48);
    v410 = vcvtq_f32_f16(*(float16x4_t *)v48.i8);
    v413 = vcvt_hight_f32_f16(v49);
    v412 = vcvtq_f32_f16(*(float16x4_t *)v49.i8);
    v50 = v14[34];
    v51 = v14[35];
    v415 = vcvt_hight_f32_f16(v50);
    v414 = vcvtq_f32_f16(*(float16x4_t *)v50.i8);
    v417 = vcvt_hight_f32_f16(v51);
    v416 = vcvtq_f32_f16(*(float16x4_t *)v51.i8);
    v52 = v14[36];
    v53 = v14[37];
    v419 = vcvt_hight_f32_f16(v52);
    v418 = vcvtq_f32_f16(*(float16x4_t *)v52.i8);
    v421 = vcvt_hight_f32_f16(v53);
    v420 = vcvtq_f32_f16(*(float16x4_t *)v53.i8);
    v54 = v14[38];
    v55 = v14[39];
    v423 = vcvt_hight_f32_f16(v54);
    v422 = vcvtq_f32_f16(*(float16x4_t *)v54.i8);
    v425 = vcvt_hight_f32_f16(v55);
    v424 = vcvtq_f32_f16(*(float16x4_t *)v55.i8);
    v56 = v14[40];
    v57 = v14[41];
    v427 = vcvt_hight_f32_f16(v56);
    v426 = vcvtq_f32_f16(*(float16x4_t *)v56.i8);
    v429 = vcvt_hight_f32_f16(v57);
    v428 = vcvtq_f32_f16(*(float16x4_t *)v57.i8);
    v58 = v14[42];
    v59 = v14[43];
    v431 = vcvt_hight_f32_f16(v58);
    v430 = vcvtq_f32_f16(*(float16x4_t *)v58.i8);
    v433 = vcvt_hight_f32_f16(v59);
    v432 = vcvtq_f32_f16(*(float16x4_t *)v59.i8);
    v60 = v14[44];
    v61 = v14[45];
    v435 = vcvt_hight_f32_f16(v60);
    v434 = vcvtq_f32_f16(*(float16x4_t *)v60.i8);
    v437 = vcvt_hight_f32_f16(v61);
    v436 = vcvtq_f32_f16(*(float16x4_t *)v61.i8);
    v62 = v14[46];
    v63 = v14[47];
    v439 = vcvt_hight_f32_f16(v62);
    v438 = vcvtq_f32_f16(*(float16x4_t *)v62.i8);
    v441 = vcvt_hight_f32_f16(v63);
    v440 = vcvtq_f32_f16(*(float16x4_t *)v63.i8);
    v64 = v14[48];
    v65 = v14[49];
    v443 = vcvt_hight_f32_f16(v64);
    v442 = vcvtq_f32_f16(*(float16x4_t *)v64.i8);
    v445 = vcvt_hight_f32_f16(v65);
    v444 = vcvtq_f32_f16(*(float16x4_t *)v65.i8);
    v66 = v14[50];
    v67 = v14[51];
    v447 = vcvt_hight_f32_f16(v66);
    v446 = vcvtq_f32_f16(*(float16x4_t *)v66.i8);
    v449 = vcvt_hight_f32_f16(v67);
    v448 = vcvtq_f32_f16(*(float16x4_t *)v67.i8);
    v68 = v14[52];
    v69 = v14[53];
    v451 = vcvt_hight_f32_f16(v68);
    v450 = vcvtq_f32_f16(*(float16x4_t *)v68.i8);
    v453 = vcvt_hight_f32_f16(v69);
    v452 = vcvtq_f32_f16(*(float16x4_t *)v69.i8);
    v70 = v14[54];
    v71 = v14[55];
    v455 = vcvt_hight_f32_f16(v70);
    v454 = vcvtq_f32_f16(*(float16x4_t *)v70.i8);
    v457 = vcvt_hight_f32_f16(v71);
    v456 = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
    v72 = v14[56];
    v73 = v14[57];
    v459 = vcvt_hight_f32_f16(v72);
    v458 = vcvtq_f32_f16(*(float16x4_t *)v72.i8);
    v461 = vcvt_hight_f32_f16(v73);
    v460 = vcvtq_f32_f16(*(float16x4_t *)v73.i8);
    v74 = v14[58];
    v75 = v14[59];
    v463 = vcvt_hight_f32_f16(v74);
    v462 = vcvtq_f32_f16(*(float16x4_t *)v74.i8);
    v465 = vcvt_hight_f32_f16(v75);
    v464 = vcvtq_f32_f16(*(float16x4_t *)v75.i8);
    v76 = v14[60];
    v77 = v14[61];
    v467 = vcvt_hight_f32_f16(v76);
    v466 = vcvtq_f32_f16(*(float16x4_t *)v76.i8);
    v469 = vcvt_hight_f32_f16(v77);
    v468 = vcvtq_f32_f16(*(float16x4_t *)v77.i8);
    v78 = v14[62];
    v79 = v14[63];
    v471 = vcvt_hight_f32_f16(v78);
    v470 = vcvtq_f32_f16(*(float16x4_t *)v78.i8);
    v473 = vcvt_hight_f32_f16(v79);
    v472 = vcvtq_f32_f16(*(float16x4_t *)v79.i8);
    bzero(&__B, 0x800uLL);
    v80 = *(float16x8_t *)(v15 + 16);
    v81 = vcvt_hight_f32_f16(*(float16x8_t *)v15);
    __B = vcvtq_f32_f16(*(float16x4_t *)v15);
    v223 = v81;
    v224 = vcvtq_f32_f16(*(float16x4_t *)v80.i8);
    v225 = vcvt_hight_f32_f16(v80);
    v82 = *(float16x8_t *)(v15 + 32);
    v83 = *(float16x8_t *)(v15 + 48);
    v226 = vcvtq_f32_f16(*(float16x4_t *)v82.i8);
    v227 = vcvt_hight_f32_f16(v82);
    v229 = vcvt_hight_f32_f16(v83);
    v228 = vcvtq_f32_f16(*(float16x4_t *)v83.i8);
    v84 = *(float16x8_t *)(v15 + 64);
    v85 = *(float16x8_t *)(v15 + 80);
    v230 = vcvtq_f32_f16(*(float16x4_t *)v84.i8);
    v231 = vcvt_hight_f32_f16(v84);
    v232 = vcvtq_f32_f16(*(float16x4_t *)v85.i8);
    v233 = vcvt_hight_f32_f16(v85);
    v86 = *(float16x8_t *)(v15 + 96);
    v87 = *(float16x8_t *)(v15 + 112);
    v234 = vcvtq_f32_f16(*(float16x4_t *)v86.i8);
    v235 = vcvt_hight_f32_f16(v86);
    v236 = vcvtq_f32_f16(*(float16x4_t *)v87.i8);
    v237 = vcvt_hight_f32_f16(v87);
    v88 = *(float16x8_t *)(v15 + 128);
    v89 = *(float16x8_t *)(v15 + 144);
    v238 = vcvtq_f32_f16(*(float16x4_t *)v88.i8);
    v239 = vcvt_hight_f32_f16(v88);
    v240 = vcvtq_f32_f16(*(float16x4_t *)v89.i8);
    v241 = vcvt_hight_f32_f16(v89);
    v90 = *(float16x8_t *)(v15 + 160);
    v91 = *(float16x8_t *)(v15 + 176);
    v242 = vcvtq_f32_f16(*(float16x4_t *)v90.i8);
    v243 = vcvt_hight_f32_f16(v90);
    v244 = vcvtq_f32_f16(*(float16x4_t *)v91.i8);
    v245 = vcvt_hight_f32_f16(v91);
    v92 = *(float16x8_t *)(v15 + 192);
    v93 = *(float16x8_t *)(v15 + 208);
    v246 = vcvtq_f32_f16(*(float16x4_t *)v92.i8);
    v247 = vcvt_hight_f32_f16(v92);
    v248 = vcvtq_f32_f16(*(float16x4_t *)v93.i8);
    v249 = vcvt_hight_f32_f16(v93);
    v94 = *(float16x8_t *)(v15 + 224);
    v95 = *(float16x8_t *)(v15 + 240);
    v250 = vcvtq_f32_f16(*(float16x4_t *)v94.i8);
    v251 = vcvt_hight_f32_f16(v94);
    v252 = vcvtq_f32_f16(*(float16x4_t *)v95.i8);
    v253 = vcvt_hight_f32_f16(v95);
    v96 = *(float16x8_t *)(v15 + 256);
    v97 = *(float16x8_t *)(v15 + 272);
    v254 = vcvtq_f32_f16(*(float16x4_t *)v96.i8);
    v255 = vcvt_hight_f32_f16(v96);
    v256 = vcvtq_f32_f16(*(float16x4_t *)v97.i8);
    v257 = vcvt_hight_f32_f16(v97);
    v98 = *(float16x8_t *)(v15 + 288);
    v99 = *(float16x8_t *)(v15 + 304);
    v258 = vcvtq_f32_f16(*(float16x4_t *)v98.i8);
    v259 = vcvt_hight_f32_f16(v98);
    v260 = vcvtq_f32_f16(*(float16x4_t *)v99.i8);
    v261 = vcvt_hight_f32_f16(v99);
    v100 = *(float16x8_t *)(v15 + 320);
    v101 = *(float16x8_t *)(v15 + 336);
    v262 = vcvtq_f32_f16(*(float16x4_t *)v100.i8);
    v263 = vcvt_hight_f32_f16(v100);
    v264 = vcvtq_f32_f16(*(float16x4_t *)v101.i8);
    v265 = vcvt_hight_f32_f16(v101);
    v102 = *(float16x8_t *)(v15 + 352);
    v103 = *(float16x8_t *)(v15 + 368);
    v266 = vcvtq_f32_f16(*(float16x4_t *)v102.i8);
    v267 = vcvt_hight_f32_f16(v102);
    v268 = vcvtq_f32_f16(*(float16x4_t *)v103.i8);
    v269 = vcvt_hight_f32_f16(v103);
    v104 = *(float16x8_t *)(v15 + 384);
    v105 = *(float16x8_t *)(v15 + 400);
    v270 = vcvtq_f32_f16(*(float16x4_t *)v104.i8);
    v271 = vcvt_hight_f32_f16(v104);
    v272 = vcvtq_f32_f16(*(float16x4_t *)v105.i8);
    v273 = vcvt_hight_f32_f16(v105);
    v106 = *(float16x8_t *)(v15 + 416);
    v107 = *(float16x8_t *)(v15 + 432);
    v274 = vcvtq_f32_f16(*(float16x4_t *)v106.i8);
    v275 = vcvt_hight_f32_f16(v106);
    v276 = vcvtq_f32_f16(*(float16x4_t *)v107.i8);
    v277 = vcvt_hight_f32_f16(v107);
    v108 = *(float16x8_t *)(v15 + 448);
    v109 = *(float16x8_t *)(v15 + 464);
    v278 = vcvtq_f32_f16(*(float16x4_t *)v108.i8);
    v279 = vcvt_hight_f32_f16(v108);
    v280 = vcvtq_f32_f16(*(float16x4_t *)v109.i8);
    v281 = vcvt_hight_f32_f16(v109);
    v110 = *(float16x8_t *)(v15 + 480);
    v111 = *(float16x8_t *)(v15 + 496);
    v282 = vcvtq_f32_f16(*(float16x4_t *)v110.i8);
    v283 = vcvt_hight_f32_f16(v110);
    v284 = vcvtq_f32_f16(*(float16x4_t *)v111.i8);
    v285 = vcvt_hight_f32_f16(v111);
    v112 = *(float16x8_t *)(v15 + 512);
    v113 = *(float16x8_t *)(v15 + 528);
    v287 = vcvt_hight_f32_f16(v112);
    v286 = vcvtq_f32_f16(*(float16x4_t *)v112.i8);
    v289 = vcvt_hight_f32_f16(v113);
    v288 = vcvtq_f32_f16(*(float16x4_t *)v113.i8);
    v114 = *(float16x8_t *)(v15 + 544);
    v115 = *(float16x8_t *)(v15 + 560);
    v291 = vcvt_hight_f32_f16(v114);
    v290 = vcvtq_f32_f16(*(float16x4_t *)v114.i8);
    v293 = vcvt_hight_f32_f16(v115);
    v292 = vcvtq_f32_f16(*(float16x4_t *)v115.i8);
    v116 = *(float16x8_t *)(v15 + 576);
    v117 = *(float16x8_t *)(v15 + 592);
    v295 = vcvt_hight_f32_f16(v116);
    v294 = vcvtq_f32_f16(*(float16x4_t *)v116.i8);
    v297 = vcvt_hight_f32_f16(v117);
    v296 = vcvtq_f32_f16(*(float16x4_t *)v117.i8);
    v118 = *(float16x8_t *)(v15 + 608);
    v119 = *(float16x8_t *)(v15 + 624);
    v299 = vcvt_hight_f32_f16(v118);
    v298 = vcvtq_f32_f16(*(float16x4_t *)v118.i8);
    v301 = vcvt_hight_f32_f16(v119);
    v300 = vcvtq_f32_f16(*(float16x4_t *)v119.i8);
    v120 = *(float16x8_t *)(v15 + 640);
    v121 = *(float16x8_t *)(v15 + 656);
    v303 = vcvt_hight_f32_f16(v120);
    v302 = vcvtq_f32_f16(*(float16x4_t *)v120.i8);
    v305 = vcvt_hight_f32_f16(v121);
    v304 = vcvtq_f32_f16(*(float16x4_t *)v121.i8);
    v122 = *(float16x8_t *)(v15 + 672);
    v123 = *(float16x8_t *)(v15 + 688);
    v307 = vcvt_hight_f32_f16(v122);
    v306 = vcvtq_f32_f16(*(float16x4_t *)v122.i8);
    v309 = vcvt_hight_f32_f16(v123);
    v308 = vcvtq_f32_f16(*(float16x4_t *)v123.i8);
    v124 = *(float16x8_t *)(v15 + 704);
    v125 = *(float16x8_t *)(v15 + 720);
    v311 = vcvt_hight_f32_f16(v124);
    v310 = vcvtq_f32_f16(*(float16x4_t *)v124.i8);
    v313 = vcvt_hight_f32_f16(v125);
    v312 = vcvtq_f32_f16(*(float16x4_t *)v125.i8);
    v126 = *(float16x8_t *)(v15 + 736);
    v127 = *(float16x8_t *)(v15 + 752);
    v315 = vcvt_hight_f32_f16(v126);
    v314 = vcvtq_f32_f16(*(float16x4_t *)v126.i8);
    v317 = vcvt_hight_f32_f16(v127);
    v316 = vcvtq_f32_f16(*(float16x4_t *)v127.i8);
    v128 = *(float16x8_t *)(v15 + 768);
    v129 = *(float16x8_t *)(v15 + 784);
    v319 = vcvt_hight_f32_f16(v128);
    v318 = vcvtq_f32_f16(*(float16x4_t *)v128.i8);
    v321 = vcvt_hight_f32_f16(v129);
    v320 = vcvtq_f32_f16(*(float16x4_t *)v129.i8);
    v130 = *(float16x8_t *)(v15 + 800);
    v131 = *(float16x8_t *)(v15 + 816);
    v323 = vcvt_hight_f32_f16(v130);
    v322 = vcvtq_f32_f16(*(float16x4_t *)v130.i8);
    v325 = vcvt_hight_f32_f16(v131);
    v324 = vcvtq_f32_f16(*(float16x4_t *)v131.i8);
    v132 = *(float16x8_t *)(v15 + 832);
    v133 = *(float16x8_t *)(v15 + 848);
    v327 = vcvt_hight_f32_f16(v132);
    v326 = vcvtq_f32_f16(*(float16x4_t *)v132.i8);
    v329 = vcvt_hight_f32_f16(v133);
    v328 = vcvtq_f32_f16(*(float16x4_t *)v133.i8);
    v134 = *(float16x8_t *)(v15 + 864);
    v135 = *(float16x8_t *)(v15 + 880);
    v331 = vcvt_hight_f32_f16(v134);
    v330 = vcvtq_f32_f16(*(float16x4_t *)v134.i8);
    v333 = vcvt_hight_f32_f16(v135);
    v332 = vcvtq_f32_f16(*(float16x4_t *)v135.i8);
    v136 = *(float16x8_t *)(v15 + 896);
    v137 = *(float16x8_t *)(v15 + 912);
    v335 = vcvt_hight_f32_f16(v136);
    v334 = vcvtq_f32_f16(*(float16x4_t *)v136.i8);
    v337 = vcvt_hight_f32_f16(v137);
    v336 = vcvtq_f32_f16(*(float16x4_t *)v137.i8);
    v138 = *(float16x8_t *)(v15 + 928);
    v139 = *(float16x8_t *)(v15 + 944);
    v339 = vcvt_hight_f32_f16(v138);
    v338 = vcvtq_f32_f16(*(float16x4_t *)v138.i8);
    v341 = vcvt_hight_f32_f16(v139);
    v340 = vcvtq_f32_f16(*(float16x4_t *)v139.i8);
    v140 = *(float16x8_t *)(v15 + 960);
    v141 = *(float16x8_t *)(v15 + 976);
    v343 = vcvt_hight_f32_f16(v140);
    v342 = vcvtq_f32_f16(*(float16x4_t *)v140.i8);
    v345 = vcvt_hight_f32_f16(v141);
    v344 = vcvtq_f32_f16(*(float16x4_t *)v141.i8);
    v142 = *(float16x8_t *)(v15 + 992);
    v143 = *(float16x8_t *)(v15 + 1008);
    v347 = vcvt_hight_f32_f16(v142);
    v346 = vcvtq_f32_f16(*(float16x4_t *)v142.i8);
    v349 = vcvt_hight_f32_f16(v143);
    v348 = vcvtq_f32_f16(*(float16x4_t *)v143.i8);
    LODWORD(__C) = 2139095039;
    vDSP_distancesq((const float *)__A, 1, __B.f32, 1, (float *)&__C, 0x200uLL);
    v144 = *(float *)&__C;
    v145 = *__error();
    v146 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
    {
      v170 = *(_DWORD *)(v8 + 88);
      *(_DWORD *)__A = 136315906;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2649;
      *(_WORD *)&__A[18] = 1024;
      *(_DWORD *)&__A[20] = v170;
      *(_WORD *)&__A[24] = 2048;
      *(double *)&__A[26] = v144;
      _os_log_error_impl(&dword_1B8270000, v146, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", __A, 0x22u);
    }
    *__error() = v145;
    __B = 0uLL;
    v223.i64[0] = 0;
    (*(void (**)(float32x4_t *__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v8 + 56) + 72))(&__B, *(_QWORD *)(v8 + 56), *(_QWORD *)(v8 + 48), 2);
    v147 = *__error();
    v148 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
    {
      v171 = *(_DWORD *)__B.i64[0];
      v172 = *(float *)(__B.i64[0] + 4);
      v173 = *(_DWORD *)(__B.i64[0] + 8);
      v174 = *(float *)(__B.i64[0] + 12);
      v175 = v172 == v174 || vabds_f32(v172, v174) <= fmaxf(fminf(fabsf(v174), fabsf(v172)) * 0.000015259, 0.000015259);
      *(_DWORD *)__A = 136316674;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2651;
      *(_WORD *)&__A[18] = 1024;
      *(_DWORD *)&__A[20] = v171;
      *(_WORD *)&__A[24] = 2048;
      *(double *)&__A[26] = v172;
      *(_WORD *)&__A[34] = 1024;
      *(_DWORD *)&__A[36] = v173;
      *(_WORD *)&__A[40] = 2048;
      *(double *)&__A[42] = v174;
      *(_WORD *)&__A[50] = 1024;
      *(_DWORD *)&__A[52] = v175;
      _os_log_error_impl(&dword_1B8270000, v148, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(vec, 2) <%u, %e>, <%u, %e>, %d", __A, 0x38u);
    }
    *__error() = v147;
    v149 = *__error();
    v150 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
    {
      v176 = *(_DWORD *)__B.i64[0];
      v177 = *(_DWORD *)(__B.i64[0] + 8);
      v178 = *(float *)(__B.i64[0] + 4) == *(float *)(__B.i64[0] + 12);
      *(_DWORD *)__A = 136316162;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2652;
      *(_WORD *)&__A[18] = 1024;
      *(_DWORD *)&__A[20] = v176;
      *(_WORD *)&__A[24] = 1024;
      *(_DWORD *)&__A[26] = v177;
      *(_WORD *)&__A[30] = 1024;
      *(_DWORD *)&__A[32] = v178;
      _os_log_error_impl(&dword_1B8270000, v150, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", __A, 0x24u);
    }
    *__error() = v149;
    v151 = *__error();
    v152 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
    {
      v179 = *(_DWORD *)__B.i64[0];
      v180 = *(_DWORD *)(__B.i64[0] + 8);
      v181 = *(float *)(__B.i64[0] + 4) < *(float *)(__B.i64[0] + 12);
      *(_DWORD *)__A = 136316162;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2653;
      *(_WORD *)&__A[18] = 1024;
      *(_DWORD *)&__A[20] = v179;
      *(_WORD *)&__A[24] = 1024;
      *(_DWORD *)&__A[26] = v180;
      *(_WORD *)&__A[30] = 1024;
      *(_DWORD *)&__A[32] = v181;
      _os_log_error_impl(&dword_1B8270000, v152, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", __A, 0x24u);
    }
    *__error() = v151;
    v153 = *__error();
    v154 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
    {
      v182 = *(_DWORD *)__B.i64[0];
      v183 = *(_DWORD *)(__B.i64[0] + 8);
      v184 = *(float *)(__B.i64[0] + 4) > *(float *)(__B.i64[0] + 12);
      *(_DWORD *)__A = 136316162;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2654;
      *(_WORD *)&__A[18] = 1024;
      *(_DWORD *)&__A[20] = v182;
      *(_WORD *)&__A[24] = 1024;
      *(_DWORD *)&__A[26] = v183;
      *(_WORD *)&__A[30] = 1024;
      *(_DWORD *)&__A[32] = v184;
      _os_log_error_impl(&dword_1B8270000, v154, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", __A, 0x24u);
    }
    *__error() = v153;
    v155 = *__error();
    v156 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
    {
      v185 = *(_DWORD *)__B.i64[0];
      v186 = *(_DWORD *)(__B.i64[0] + 8);
      v187 = *(float *)(__B.i64[0] + 4);
      v188 = *(float *)(__B.i64[0] + 12);
      v189 = (float)(v187 - v188);
      v190 = vabds_f32(v187, v188);
      if (v187 == v188)
      {
        v191 = 1;
        v192 = 1;
      }
      else
      {
        v215 = fabsf(v187);
        v216 = fabsf(v188);
        v191 = v190 <= fmaxf(fminf(v216, v215) * 0.000015259, 0.000015259);
        v192 = v190 <= (float)(fmaxf(v215, v216) * 0.000015259);
      }
      *(_DWORD *)__A = 136317698;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2655;
      *(_WORD *)&__A[18] = 1024;
      *(_DWORD *)&__A[20] = v185;
      *(_WORD *)&__A[24] = 1024;
      *(_DWORD *)&__A[26] = v186;
      *(_WORD *)&__A[30] = 2048;
      *(double *)&__A[32] = v189;
      *(_WORD *)&__A[40] = 2048;
      *(_QWORD *)&__A[42] = 0x3810000000000000;
      *(_WORD *)&__A[50] = 2048;
      *(_QWORD *)&__A[52] = 0x3E80000000000000;
      *(_WORD *)&__A[60] = 1024;
      *(_DWORD *)&__A[62] = v190 < 1.1755e-38;
      *(_WORD *)&__A[66] = 1024;
      *(_DWORD *)&__A[68] = v190 < 0.00000011921;
      *(_WORD *)&__A[72] = 1024;
      *(_DWORD *)&__A[74] = v191;
      *(_WORD *)&__A[78] = 1024;
      v351.i32[0] = v192;
      _os_log_error_impl(&dword_1B8270000, v156, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", __A, 0x54u);
    }
    *__error() = v155;
    v220 = 0;
    v221 = 0;
    __C = 0;
    v157 = *(_QWORD *)(v8 + 56);
    v158 = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 32) + 16) * *(unsigned int *)v5, 0x410uLL);
    (*(void (**)(float **__return_ptr, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v157 + 72))(&__C, v157, v158, 2);
    v159 = *__error();
    v160 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
    {
      v193 = *__C;
      v194 = __C[1];
      v195 = *((_DWORD *)__C + 2);
      v196 = __C[3];
      v197 = v194 == v196 || vabds_f32(v194, v196) <= fmaxf(fminf(fabsf(v196), fabsf(v194)) * 0.000015259, 0.000015259);
      *(_DWORD *)__A = 136316674;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2658;
      *(_WORD *)&__A[18] = 1024;
      *(float *)&__A[20] = v193;
      *(_WORD *)&__A[24] = 2048;
      *(double *)&__A[26] = v194;
      *(_WORD *)&__A[34] = 1024;
      *(_DWORD *)&__A[36] = v195;
      *(_WORD *)&__A[40] = 2048;
      *(double *)&__A[42] = v196;
      *(_WORD *)&__A[50] = 1024;
      *(_DWORD *)&__A[52] = v197;
      _os_log_error_impl(&dword_1B8270000, v160, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(entry->vec, 2) <%u, %e>, <%u, %e>, %d", __A, 0x38u);
    }
    *__error() = v159;
    v161 = *__error();
    v162 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
    {
      v198 = *__C;
      v199 = *((_DWORD *)__C + 2);
      v200 = __C[1] == __C[3];
      *(_DWORD *)__A = 136316162;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2659;
      *(_WORD *)&__A[18] = 1024;
      *(float *)&__A[20] = v198;
      *(_WORD *)&__A[24] = 1024;
      *(_DWORD *)&__A[26] = v199;
      *(_WORD *)&__A[30] = 1024;
      *(_DWORD *)&__A[32] = v200;
      _os_log_error_impl(&dword_1B8270000, v162, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", __A, 0x24u);
    }
    *__error() = v161;
    v163 = *__error();
    v164 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v164, OS_LOG_TYPE_ERROR))
    {
      v201 = *__C;
      v202 = *((_DWORD *)__C + 2);
      v203 = __C[1] < __C[3];
      *(_DWORD *)__A = 136316162;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2660;
      *(_WORD *)&__A[18] = 1024;
      *(float *)&__A[20] = v201;
      *(_WORD *)&__A[24] = 1024;
      *(_DWORD *)&__A[26] = v202;
      *(_WORD *)&__A[30] = 1024;
      *(_DWORD *)&__A[32] = v203;
      _os_log_error_impl(&dword_1B8270000, v164, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", __A, 0x24u);
    }
    *__error() = v163;
    v165 = *__error();
    v166 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v166, OS_LOG_TYPE_ERROR))
    {
      v204 = *__C;
      v205 = *((_DWORD *)__C + 2);
      v206 = __C[1] > __C[3];
      *(_DWORD *)__A = 136316162;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2661;
      *(_WORD *)&__A[18] = 1024;
      *(float *)&__A[20] = v204;
      *(_WORD *)&__A[24] = 1024;
      *(_DWORD *)&__A[26] = v205;
      *(_WORD *)&__A[30] = 1024;
      *(_DWORD *)&__A[32] = v206;
      _os_log_error_impl(&dword_1B8270000, v166, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", __A, 0x24u);
    }
    *__error() = v165;
    v167 = *__error();
    v168 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
    {
      v207 = *__C;
      v208 = *((_DWORD *)__C + 2);
      v209 = __C[1];
      v210 = __C[3];
      v211 = vabds_f32(v209, v210);
      v212 = (float)(v209 - v210) < 1.1755e-38;
      if (v209 == v210)
      {
        v213 = 1;
        v214 = 1;
      }
      else
      {
        v217 = fabsf(v209);
        v218 = fabsf(v210);
        v213 = v211 <= fmaxf(fminf(v218, v217) * 0.000015259, 0.000015259);
        v214 = v211 <= (float)(fmaxf(v217, v218) * 0.000015259);
      }
      *(_DWORD *)__A = 136317698;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2662;
      *(_WORD *)&__A[18] = 1024;
      *(float *)&__A[20] = v207;
      *(_WORD *)&__A[24] = 1024;
      *(_DWORD *)&__A[26] = v208;
      *(_WORD *)&__A[30] = 2048;
      *(double *)&__A[32] = v211;
      *(_WORD *)&__A[40] = 2048;
      *(_QWORD *)&__A[42] = 0x3810000000000000;
      *(_WORD *)&__A[50] = 2048;
      *(_QWORD *)&__A[52] = 0x3E80000000000000;
      *(_WORD *)&__A[60] = 1024;
      *(_DWORD *)&__A[62] = v212;
      *(_WORD *)&__A[66] = 1024;
      *(_DWORD *)&__A[68] = v211 < 0.00000011921;
      *(_WORD *)&__A[72] = 1024;
      *(_DWORD *)&__A[74] = v213;
      *(_WORD *)&__A[78] = 1024;
      v351.i32[0] = v214;
      _os_log_error_impl(&dword_1B8270000, v168, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", __A, 0x54u);
    }
    *__error() = v167;
    *(float *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8) + 24) = *v5;
    *v3 = 1;
    if (__C)
    {
      v220 = __C;
      operator delete(__C);
    }
    if (__B.i64[0])
    {
      __B.i64[1] = __B.i64[0];
      operator delete((void *)__B.i64[0]);
    }
  }
}

_QWORD *__copy_helper_block_8_56c64_ZTSN22IVFVectorIndexTemplateIDF16_Li512EE19QuantizerPartitionsE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[10];
  result[9] = a2[9];
  result[10] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_8_56c64_ZTSN22IVFVectorIndexTemplateIDF16_Li512EE19QuantizerPartitionsE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void _ZN16QuantizerManagerIDF16_Li256EE15sharedQuantizerEi(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned __int8 v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[6];
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  __n128 (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;

  v18 = 0;
  v19 = &v18;
  v20 = 0x3802000000;
  v21 = __Block_byref_object_copy__197;
  v22 = __Block_byref_object_dispose__198;
  v23 = 0;
  v24 = 0;
  v6 = atomic_load((unsigned __int8 *)&_ZGVZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&_ZGVZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq))
  {
    __cxa_atexit((void (*)(void *))_ZNSt3__110shared_ptrI9QuantizerIDF16_Li256EEED1B8nn180100Ev, &_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq, &dword_1B8270000);
    __cxa_guard_release(&_ZGVZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq);
  }
  if (_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE9onceToken != -1)
    dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE9onceToken, &__block_literal_global_134);
  v23 = _ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq;
  v24 = qword_1EF1AE5A8;
  if (qword_1EF1AE5A8)
  {
    v7 = (unint64_t *)(qword_1EF1AE5A8 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(NSObject **)(a2 + 16);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v16[2] = ___ZN16QuantizerManagerIDF16_Li256EE15sharedQuantizerEi_block_invoke;
  v16[3] = &unk_1E6E31310;
  v17 = a3;
  v16[4] = &v18;
  v16[5] = a2;
  dispatch_sync(v9, v16);
  v10 = v19[6];
  *a1 = v19[5];
  a1[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  _Block_object_dispose(&v18, 8);
  v13 = (std::__shared_weak_count *)v24;
  if (v24)
  {
    v14 = (unint64_t *)(v24 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

__n128 __Block_byref_object_copy__197(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__198(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t _ZNSt3__110shared_ptrI9QuantizerIDF16_Li256EEED1B8nn180100Ev(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void ___ZN16QuantizerManagerIDF16_Li256EE15sharedQuantizerEi_block_invoke(uint64_t a1)
{
  int *v2;
  unint64_t v3;
  uint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  size_t v14;
  unint64_t v15;
  std::string *p_dst;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  std::string *v20;
  std::string::size_type size;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  int64_t v25;
  const char *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *p_shared_weak_owners;
  unint64_t v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  unint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  size_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  const void *v73;
  const char *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  _QWORD v95[2];
  int v96;
  char v97;
  _BYTE v98[11];
  _QWORD v99[2];
  int v100;
  char v101;
  _BYTE v102[11];
  std::string v103;
  std::string __dst;
  std::string v105;
  __int128 v106;
  int64_t v107;

  v2 = (int *)(a1 + 48);
  v3 = *(int *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 40);
  if (!(_DWORD)v3)
    goto LABEL_79;
  v5 = *(int8x8_t *)(v4 + 120);
  if (!*(_QWORD *)&v5)
    goto LABEL_22;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = *(int *)(a1 + 48);
    if (*(_QWORD *)&v5 <= v3)
      v7 = v3 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v3;
  }
  v8 = *(uint64_t ***)(*(_QWORD *)(v4 + 112) + 8 * v7);
  if (!v8 || (v9 = *v8) == 0)
  {
LABEL_22:
    v106 = 0uLL;
    v107 = 0;
    v13 = *(char *)(v4 + 71);
    if (v13 >= 0)
      v14 = *(unsigned __int8 *)(v4 + 71);
    else
      v14 = *(_QWORD *)(v4 + 56);
    v15 = v14 + 1;
    if (v14 + 1 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_147;
    if (v15 >= 0x17)
    {
      v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v17 = v15 | 7;
      v18 = v17 + 1;
      p_dst = (std::string *)operator new(v17 + 1);
      __dst.__r_.__value_.__l.__size_ = v14 + 1;
      __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14 + 1;
      if (!v14)
        goto LABEL_36;
    }
    if (v13 >= 0)
      v19 = (const void *)(v4 + 48);
    else
      v19 = *(const void **)(v4 + 48);
    memmove(p_dst, v19, v14);
LABEL_36:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v14) = 46;
    std::to_string(&v103, v3);
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v103;
    else
      v20 = (std::string *)v103.__r_.__value_.__r.__words[0];
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v103.__r_.__value_.__r.__words[2]);
    else
      size = v103.__r_.__value_.__l.__size_;
    v22 = std::string::append(&__dst, (const std::string::value_type *)v20, size);
    v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__r.__words[2] = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v105, ".quantizer");
    v25 = v24->__r_.__value_.__r.__words[2];
    v106 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v107 = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v105.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_44:
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_45;
LABEL_67:
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_45:
        if (v107 >= 0)
          v26 = (const char *)&v106;
        else
          v26 = (const char *)v106;
        v27 = fd_create_protected(*(_DWORD *)v4, v26, 0, 3u);
        if (!v27)
          goto LABEL_76;
        v28 = v27;
        v29 = operator new();
        v99[0] = v28;
        v99[1] = 0x1000000;
        v100 = 0;
        v101 = 1;
        memset(v102, 0, sizeof(v102));
        _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EEC2EN19vi_ondisk_allocator11meta_info_sE(v29, (uint64_t)v99);
        v30 = (std::__shared_weak_count *)operator new();
        v31 = v30;
        v30->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        v30->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E313A0;
        v30->__shared_weak_owners_ = 0;
        v30[1].__vftable = (std::__shared_weak_count_vtbl *)v29;
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
        v34 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v35 = *(std::__shared_weak_count **)(v34 + 48);
        *(_QWORD *)(v34 + 40) = v29;
        *(_QWORD *)(v34 + 48) = v30;
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        p_shared_weak_owners = (unint64_t *)&v31->__shared_weak_owners_;
        do
          v39 = __ldxr(p_shared_weak_owners);
        while (__stxr(v39 + 1, p_shared_weak_owners));
        v40 = std::__hash_table<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v4 + 112, *v2, v2);
        v41 = std::__shared_weak_count::lock(v31);
        v42 = v41;
        if (v41)
        {
          v43 = (unint64_t *)&v41->__shared_weak_owners_;
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
          std::__shared_weak_count::__release_weak(v31);
          v45 = (unint64_t *)&v42->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (v46)
          {
            v47 = v29;
            goto LABEL_71;
          }
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          v48 = v42;
          v47 = v29;
        }
        else
        {
          v47 = 0;
          v48 = v31;
        }
        std::__shared_weak_count::__release_weak(v48);
LABEL_71:
        v49 = (std::__shared_weak_count *)v40[4];
        v40[3] = v47;
        v40[4] = v42;
        if (v49)
          std::__shared_weak_count::__release_weak(v49);
        atomic_store(1u, (unsigned __int8 *)(v29 + 57));
        do
          v50 = __ldaxr(p_shared_owners);
        while (__stlxr(v50 - 1, p_shared_owners));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
          if ((SHIBYTE(v107) & 0x80000000) == 0)
            goto LABEL_79;
          goto LABEL_77;
        }
LABEL_76:
        if ((SHIBYTE(v107) & 0x80000000) == 0)
          goto LABEL_79;
LABEL_77:
        operator delete((void *)v106);
        goto LABEL_79;
      }
    }
    else if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_44;
    }
    operator delete(v103.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_67;
  }
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == v3)
      {
        if (*((_DWORD *)v9 + 4) == (_DWORD)v3)
          goto LABEL_136;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_22;
      }
      v9 = (uint64_t *)*v9;
      if (!v9)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == v3)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_22;
LABEL_12:
    v9 = (uint64_t *)*v9;
    if (!v9)
      goto LABEL_22;
  }
  if (*((_DWORD *)v9 + 4) != (_DWORD)v3)
    goto LABEL_12;
LABEL_136:
  v88 = std::__hash_table<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::weak_ptr<Quantizer<float,768>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v4 + 112, v3, v2);
  v89 = (std::__shared_weak_count *)v88[4];
  if (v89 && (v89 = std::__shared_weak_count::lock(v89)) != 0)
    v90 = v88[3];
  else
    v90 = 0;
  v91 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v92 = *(std::__shared_weak_count **)(v91 + 48);
  *(_QWORD *)(v91 + 40) = v90;
  *(_QWORD *)(v91 + 48) = v89;
  if (v92)
  {
    v93 = (unint64_t *)&v92->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
LABEL_79:
  v51 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v52 = atomic_load((unsigned __int8 *)&_ZGVZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq);
  if ((v52 & 1) == 0 && __cxa_guard_acquire(&_ZGVZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq))
  {
    __cxa_atexit((void (*)(void *))_ZNSt3__110shared_ptrI9QuantizerIDF16_Li256EEED1B8nn180100Ev, &_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq, &dword_1B8270000);
    __cxa_guard_release(&_ZGVZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq);
  }
  if (_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE9onceToken != -1)
    dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE9onceToken, &__block_literal_global_134);
  v54 = _ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq;
  v53 = (std::__shared_weak_count *)qword_1EF1AE5A8;
  if (!qword_1EF1AE5A8)
  {
    if (*(_QWORD *)(v51 + 40) != _ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq)
      return;
LABEL_93:
    v59 = *(_QWORD *)(v4 + 80);
    if (v59)
    {
      v60 = *(_QWORD *)(v4 + 88);
      if (v60)
      {
        v61 = (unint64_t *)(v60 + 8);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      v63 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v64 = *(std::__shared_weak_count **)(v63 + 48);
      *(_QWORD *)(v63 + 40) = v59;
      *(_QWORD *)(v63 + 48) = v60;
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      return;
    }
    v67 = *(char *)(v4 + 71);
    if (v67 >= 0)
      v68 = *(unsigned __int8 *)(v4 + 71);
    else
      v68 = *(_QWORD *)(v4 + 56);
    v69 = v68 + 10;
    if (v68 + 10 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v69 >= 0x17)
      {
        v71 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v69 | 7) != 0x17)
          v71 = v69 | 7;
        v72 = v71 + 1;
        v70 = (char *)operator new(v71 + 1);
        *((_QWORD *)&v106 + 1) = v68 + 10;
        v107 = v72 | 0x8000000000000000;
        *(_QWORD *)&v106 = v70;
      }
      else
      {
        v107 = 0;
        v106 = 0uLL;
        v70 = (char *)&v106;
        HIBYTE(v107) = v68 + 10;
        if (!v68)
        {
LABEL_116:
          strcpy(&v70[v68], ".quantizer");
          if (v107 >= 0)
            v74 = (const char *)&v106;
          else
            v74 = (const char *)v106;
          v75 = fd_create_protected(*(_DWORD *)v4, v74, 0, 3u);
          if (v75)
          {
            v76 = v75;
            v77 = operator new();
            v95[0] = v76;
            v95[1] = 0x1000000;
            v96 = 0;
            v97 = 1;
            memset(v98, 0, sizeof(v98));
            _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EEC2EN19vi_ondisk_allocator11meta_info_sE(v77, (uint64_t)v95);
            v78 = (_QWORD *)operator new();
            *v78 = &off_1E6E313A0;
            v78[1] = 0;
            v78[2] = 0;
            v78[3] = v77;
            v79 = *(std::__shared_weak_count **)(v4 + 88);
            *(_QWORD *)(v4 + 80) = v77;
            *(_QWORD *)(v4 + 88) = v78;
            if (!v79)
              goto LABEL_126;
            v80 = (unint64_t *)&v79->__shared_owners_;
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
            v77 = *(_QWORD *)(v4 + 80);
            v78 = *(_QWORD **)(v4 + 88);
            if (v78)
            {
LABEL_126:
              v82 = v78 + 1;
              do
                v83 = __ldxr(v82);
              while (__stxr(v83 + 1, v82));
            }
            v84 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
            v85 = *(std::__shared_weak_count **)(v84 + 48);
            *(_QWORD *)(v84 + 40) = v77;
            *(_QWORD *)(v84 + 48) = v78;
            if (v85)
            {
              v86 = (unint64_t *)&v85->__shared_owners_;
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 - 1, v86));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
          }
          if (SHIBYTE(v107) < 0)
            operator delete((void *)v106);
          return;
        }
      }
      if (v67 >= 0)
        v73 = (const void *)(v4 + 48);
      else
        v73 = *(const void **)(v4 + 48);
      memmove(v70, v73, v68);
      goto LABEL_116;
    }
LABEL_147:
    abort();
  }
  v55 = (unint64_t *)(qword_1EF1AE5A8 + 8);
  do
    v56 = __ldxr(v55);
  while (__stxr(v56 + 1, v55));
  v57 = *(_QWORD *)(v51 + 40);
  do
    v58 = __ldaxr(v55);
  while (__stlxr(v58 - 1, v55));
  if (v58)
  {
    if (v57 == v54)
      goto LABEL_93;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
    if (v57 == v54)
      goto LABEL_93;
  }
}

uint64_t _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EEC2EN19vi_ondisk_allocator11meta_info_sE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  const void *v15;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  _QWORD *v19;
  int v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v31;
  char *v32;
  const char *v33;
  char *v34;
  const char *v35;
  char *v36;
  const char *v37;
  char *v38;
  const char *v39;
  char *v40;
  const char *v41;
  char v42[1024];
  _BYTE buf[24];
  void *v44;
  _BYTE v45[24];
  int v46;
  char v47;
  char v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)a1 = &off_1E6E31340;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 20);
  *(_QWORD *)(a1 + 64) = fd_dup(*(_QWORD *)a2);
  bzero(v42, 0x400uLL);
  v5 = fd_name(*(_QWORD *)a2, v42, 0x400uLL);
  MEMORY[0x1BCCB03B0](v4, v5);
  if (!*(_QWORD *)(a1 + 64))
  {
    v31 = __si_assert_copy_extra_268();
    v32 = v31;
    v33 = "";
    if (v31)
      v33 = v31;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 478, "fdPtr != nullptr", v33);
    goto LABEL_32;
  }
  v6 = operator new();
  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_DWORD *)(a2 + 16);
  v10 = *(unsigned __int8 *)(a2 + 20);
  v11 = *(unsigned __int8 *)(a2 + 21);
  v12 = *(unsigned __int8 *)(a2 + 22);
  v13 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)v6 = 0;
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZN30vi_onefixedsize_disk_allocatorC2EmymN19vi_ondisk_allocator11meta_info_sEP16vector_storage_s_block_invoke;
  v44 = &__block_descriptor_tmp_80;
  *(_QWORD *)v45 = v6;
  *(_QWORD *)&v45[8] = v7;
  *(_QWORD *)&v45[16] = v8;
  v46 = v9;
  v47 = v10;
  v48 = v11;
  v49 = v12;
  v50 = v13;
  v51 = *(_QWORD *)(a2 + 24);
  storage_array_Init((_DWORD *)(v6 + 8), 1040, 0x40000uLL, 512, v7, v11 != 0, v9, v10 != 0, v12 != 0, v51, 0, (uint64_t)buf);
  if (v11)
    vi_onefixedsize_disk_allocator::storeHeader((unint64_t *)v6);
  v14 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  if (v14)
  {
    storage_array_Close(v14 + 8);
    v15 = *(const void **)(v14 + 4208);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(v14 + 4208) = 0;
    }
    *(_OWORD *)(v14 + 4192) = 0u;
    MEMORY[0x1BCCB06A4](v14, 0x10A0C408BE2A288);
    v6 = *(_QWORD *)(a1 + 40);
  }
  v16 = (_DWORD *)_windowsResolvePtr(v6 + 40, 0x400uLL, *(_QWORD *)(v6 + 16));
  v17 = v16;
  if (!*(_BYTE *)(a2 + 21))
  {
    *(_DWORD *)(a1 + 52) = *v16;
    v19 = *(_QWORD **)(a1 + 40);
    v20 = *__error();
    v21 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = v19[6];
      v23 = (void *)v19[7];
      v25 = v19[2];
      v24 = v19[3];
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = v19;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v22;
      *(_WORD *)&buf[22] = 2048;
      v44 = v23;
      *(_WORD *)v45 = 2048;
      *(_QWORD *)&v45[2] = v24;
      *(_WORD *)&v45[10] = 2048;
      *(_QWORD *)&v45[12] = v25;
      _os_log_impl(&dword_1B8270000, v21, OS_LOG_TYPE_DEFAULT, "vi_onefixedsize_disk_allocator %p size: %llu, freeRegion: %llu, header: %llu, elemSize: %lu", buf, 0x34u);
    }
    *__error() = v20;
    v26 = *(_QWORD **)(a1 + 40);
    v27 = v26[2];
    v28 = v26[7] - v26[3];
    v29 = v28 / v27;
    if (v28 == v28 / v27 * v27)
    {
      *(_DWORD *)(a1 + 48) = v29;
      if (v17[1] == (_DWORD)v29)
      {
        if (v26[3] == 1040)
        {
          if (v26[2] == 512)
            return a1;
          v40 = __si_assert_copy_extra_268();
          v32 = v40;
          v41 = "";
          if (v40)
            v41 = v40;
          __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 490, "vi_onefixedsize_disk_allocator::getElementSize(storage.get()) == sizeof(CIVector_t)", v41);
        }
        else
        {
          v38 = __si_assert_copy_extra_268();
          v32 = v38;
          v39 = "";
          if (v38)
            v39 = v38;
          __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 489, "vi_onefixedsize_disk_allocator::getHeaderSize(storage.get()) == sizeof(QuantizerHeader_t)", v39);
        }
      }
      else
      {
        v36 = __si_assert_copy_extra_268();
        v32 = v36;
        v37 = "";
        if (v36)
          v37 = v36;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 488, "nCentroids == header->count", v37);
      }
    }
    else
    {
      v34 = __si_assert_copy_extra_268();
      v32 = v34;
      v35 = "";
      if (v34)
        v35 = v34;
      __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 504, "offset % elemSize == 0", v35);
    }
LABEL_32:
    free(v32);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v16[1] = 0;
  v18 = *(_DWORD *)(a2 + 24);
  *v16 = v18;
  *(_DWORD *)(a1 + 52) = v18;
  return a1;
}

void _ZNSt3__120__shared_ptr_pointerIP24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EENS_10shared_ptrIS3_E27__shared_ptr_default_deleteIS3_S3_EENS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

uint64_t _ZNSt3__120__shared_ptr_pointerIP24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EENS_10shared_ptrIS3_E27__shared_ptr_default_deleteIS3_S3_EENS_9allocatorIS3_EEE16__on_zero_sharedEv(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EED0Ev(uint64_t a1)
{
  _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EED2Ev(a1);
  JUMPOUT(0x1BCCB06A4);
}

uint64_t _ZNK24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EE7versionEv(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t _ZNK24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EE5countEv(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t _ZNK9QuantizerIDF16_Li256EE9dimensionEv()
{
  return 256;
}

uint64_t _ZNK9QuantizerIDF16_Li256EE11elementSizeEv()
{
  return 2;
}

BOOL _ZNK9QuantizerIDF16_Li256EEeqERK12AnyQuantizer(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  int v8;
  _BOOL8 result;
  char *v10;
  char *v11;
  const char *v12;
  char *v13;
  const char *v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) != 256)
  {
    v10 = __si_assert_copy_extra_268();
    v11 = v10;
    v12 = "";
    if (v10)
      v12 = v10;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 282, "D == other.dimension()", v12);
LABEL_17:
    free(v11);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) != 2)
  {
    v13 = __si_assert_copy_extra_268();
    v11 = v13;
    v14 = "";
    if (v13)
      v14 = v13;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 283, "sizeof(ELEM_TYPE) == other.elementSize()", v14);
    goto LABEL_17;
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
    return 0;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    return 1;
  v5 = 0;
  while (1)
  {
    v6 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, v5);
    v7 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, v5);
    v8 = memcmp(v6, v7, 0x200uLL);
    result = v8 == 0;
    if (v8)
      break;
    v5 = (v5 + 1);
    if (v5 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
      return 1;
  }
  return result;
}

BOOL _ZNK9QuantizerIDF16_Li256EE12isPersistentEv(uint64_t a1)
{
  _QWORD *v1;
  int v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(char *)(a1 + 31);
  if ((v2 & 0x80000000) == 0)
  {
    if (v2 != 8)
      return 1;
    return *v1 != 0x3E79726F6D656D3CLL;
  }
  if (*(_QWORD *)(a1 + 16) == 8)
  {
    v1 = (_QWORD *)*v1;
    return *v1 != 0x3E79726F6D656D3CLL;
  }
  return 1;
}

unint64_t _ZNK24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EE11getCentroidEj(uint64_t a1, unsigned int a2)
{
  char *v3;
  char *v4;
  const char *v5;

  if (*(_DWORD *)(a1 + 48) <= a2)
  {
    v3 = __si_assert_copy_extra_268();
    v4 = v3;
    v5 = "";
    if (v3)
      v5 = v3;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 514, "i < nCentroids", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return _windowsResolvePtr(*(_QWORD *)(a1 + 40) + 40, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) * a2, 0x200uLL);
}

void _ZNK9QuantizerIDF16_Li256EE14topKPartitionsERK10CIVector_sIDF16_Li256EEi(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int **a4@<X8>)
{
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  float16x8_t v13;
  float32x4_t v14;
  float16x8_t v15;
  float16x8_t v16;
  float16x8_t v17;
  float16x8_t v18;
  float16x8_t v19;
  float16x8_t v20;
  float16x8_t v21;
  float16x8_t v22;
  float16x8_t v23;
  float16x8_t v24;
  float16x8_t v25;
  float16x8_t v26;
  float16x8_t v27;
  float16x8_t v28;
  float16x8_t v29;
  float16x8_t v30;
  float16x8_t v31;
  float16x8_t v32;
  float16x8_t v33;
  float16x8_t v34;
  float16x8_t v35;
  float16x8_t v36;
  float16x8_t v37;
  float16x8_t v38;
  float16x8_t v39;
  float16x8_t v40;
  float16x8_t v41;
  float16x8_t v42;
  float16x8_t v43;
  float16x8_t v44;
  float16x8_t v45;
  float32x4_t v46;
  float16x8_t v47;
  float16x8_t v48;
  float16x8_t v49;
  float16x8_t v50;
  float16x8_t v51;
  float16x8_t v52;
  float16x8_t v53;
  float16x8_t v54;
  float16x8_t v55;
  float16x8_t v56;
  float16x8_t v57;
  float16x8_t v58;
  float16x8_t v59;
  float16x8_t v60;
  float16x8_t v61;
  float16x8_t v62;
  float16x8_t v63;
  float16x8_t v64;
  float16x8_t v65;
  float16x8_t v66;
  float16x8_t v67;
  float16x8_t v68;
  float16x8_t v69;
  float16x8_t v70;
  float16x8_t v71;
  float16x8_t v72;
  float16x8_t v73;
  float16x8_t v74;
  float16x8_t v75;
  float16x8_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  int v81;
  _BOOL4 v82;
  uint64_t v83;
  char *v84;
  float v85;
  float v86;
  float v87;
  _BOOL4 v88;
  float *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  _DWORD *v94;
  unint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  float *v102;
  float v103;
  float v104;
  int v105;
  float v106;
  _BOOL4 v107;
  float *v108;
  float v109;
  BOOL v110;
  unint64_t v111;
  float *v112;
  unsigned int v113;
  char *v114;
  float v115;
  float v116;
  int v117;
  _BOOL4 v118;
  float *v119;
  float v120;
  BOOL v121;
  char *v122;
  unint64_t v123;
  float *v124;
  float v125;
  int v126;
  _BOOL4 v127;
  float *v128;
  float v129;
  BOOL v130;
  uint64_t v131;
  _OWORD *v132;
  char *v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  int *v137;
  float *v138;
  uint64_t v139;
  uint64_t v141;
  int v142;
  int v143;
  float *v144;
  float v145;
  float v146;
  float v147;
  _BOOL4 v148;
  float *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  float *v154;
  float v155;
  float v156;
  float v157;
  float v158;
  _BOOL4 v159;
  float *v160;
  float v161;
  BOOL v162;
  int **v163;
  unint64_t v164;
  _OWORD __B[64];
  _OWORD __A[64];
  unsigned int __C[3];

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v8 = 0;
    v138 = 0;
    v137 = 0;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_73;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v163 = a4;
  v164 = a3;
  do
  {
    v12 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 64))(a1, v11);
    bzero(__A, 0x400uLL);
    v13 = *(float16x8_t *)(v12 + 16);
    v14 = vcvtq_f32_f16(*(float16x4_t *)v12);
    __A[1] = vcvt_hight_f32_f16(*(float16x8_t *)v12);
    __A[0] = v14;
    __A[3] = vcvt_hight_f32_f16(v13);
    __A[2] = vcvtq_f32_f16(*(float16x4_t *)v13.i8);
    v15 = *(float16x8_t *)(v12 + 32);
    v16 = *(float16x8_t *)(v12 + 48);
    __A[5] = vcvt_hight_f32_f16(v15);
    __A[4] = vcvtq_f32_f16(*(float16x4_t *)v15.i8);
    __A[7] = vcvt_hight_f32_f16(v16);
    __A[6] = vcvtq_f32_f16(*(float16x4_t *)v16.i8);
    v17 = *(float16x8_t *)(v12 + 64);
    v18 = *(float16x8_t *)(v12 + 80);
    __A[9] = vcvt_hight_f32_f16(v17);
    __A[8] = vcvtq_f32_f16(*(float16x4_t *)v17.i8);
    __A[11] = vcvt_hight_f32_f16(v18);
    __A[10] = vcvtq_f32_f16(*(float16x4_t *)v18.i8);
    v19 = *(float16x8_t *)(v12 + 96);
    v20 = *(float16x8_t *)(v12 + 112);
    __A[13] = vcvt_hight_f32_f16(v19);
    __A[12] = vcvtq_f32_f16(*(float16x4_t *)v19.i8);
    __A[15] = vcvt_hight_f32_f16(v20);
    __A[14] = vcvtq_f32_f16(*(float16x4_t *)v20.i8);
    v21 = *(float16x8_t *)(v12 + 128);
    v22 = *(float16x8_t *)(v12 + 144);
    __A[17] = vcvt_hight_f32_f16(v21);
    __A[16] = vcvtq_f32_f16(*(float16x4_t *)v21.i8);
    __A[19] = vcvt_hight_f32_f16(v22);
    __A[18] = vcvtq_f32_f16(*(float16x4_t *)v22.i8);
    v23 = *(float16x8_t *)(v12 + 160);
    v24 = *(float16x8_t *)(v12 + 176);
    __A[21] = vcvt_hight_f32_f16(v23);
    __A[20] = vcvtq_f32_f16(*(float16x4_t *)v23.i8);
    __A[23] = vcvt_hight_f32_f16(v24);
    __A[22] = vcvtq_f32_f16(*(float16x4_t *)v24.i8);
    v25 = *(float16x8_t *)(v12 + 192);
    v26 = *(float16x8_t *)(v12 + 208);
    __A[25] = vcvt_hight_f32_f16(v25);
    __A[24] = vcvtq_f32_f16(*(float16x4_t *)v25.i8);
    __A[27] = vcvt_hight_f32_f16(v26);
    __A[26] = vcvtq_f32_f16(*(float16x4_t *)v26.i8);
    v27 = *(float16x8_t *)(v12 + 224);
    v28 = *(float16x8_t *)(v12 + 240);
    __A[29] = vcvt_hight_f32_f16(v27);
    __A[28] = vcvtq_f32_f16(*(float16x4_t *)v27.i8);
    __A[31] = vcvt_hight_f32_f16(v28);
    __A[30] = vcvtq_f32_f16(*(float16x4_t *)v28.i8);
    v29 = *(float16x8_t *)(v12 + 256);
    v30 = *(float16x8_t *)(v12 + 272);
    __A[33] = vcvt_hight_f32_f16(v29);
    __A[32] = vcvtq_f32_f16(*(float16x4_t *)v29.i8);
    __A[35] = vcvt_hight_f32_f16(v30);
    __A[34] = vcvtq_f32_f16(*(float16x4_t *)v30.i8);
    v31 = *(float16x8_t *)(v12 + 288);
    v32 = *(float16x8_t *)(v12 + 304);
    __A[37] = vcvt_hight_f32_f16(v31);
    __A[36] = vcvtq_f32_f16(*(float16x4_t *)v31.i8);
    __A[39] = vcvt_hight_f32_f16(v32);
    __A[38] = vcvtq_f32_f16(*(float16x4_t *)v32.i8);
    v33 = *(float16x8_t *)(v12 + 320);
    v34 = *(float16x8_t *)(v12 + 336);
    __A[41] = vcvt_hight_f32_f16(v33);
    __A[40] = vcvtq_f32_f16(*(float16x4_t *)v33.i8);
    __A[43] = vcvt_hight_f32_f16(v34);
    __A[42] = vcvtq_f32_f16(*(float16x4_t *)v34.i8);
    v35 = *(float16x8_t *)(v12 + 352);
    v36 = *(float16x8_t *)(v12 + 368);
    __A[45] = vcvt_hight_f32_f16(v35);
    __A[44] = vcvtq_f32_f16(*(float16x4_t *)v35.i8);
    __A[47] = vcvt_hight_f32_f16(v36);
    __A[46] = vcvtq_f32_f16(*(float16x4_t *)v36.i8);
    v37 = *(float16x8_t *)(v12 + 384);
    v38 = *(float16x8_t *)(v12 + 400);
    __A[49] = vcvt_hight_f32_f16(v37);
    __A[48] = vcvtq_f32_f16(*(float16x4_t *)v37.i8);
    __A[51] = vcvt_hight_f32_f16(v38);
    __A[50] = vcvtq_f32_f16(*(float16x4_t *)v38.i8);
    v39 = *(float16x8_t *)(v12 + 416);
    v40 = *(float16x8_t *)(v12 + 432);
    __A[53] = vcvt_hight_f32_f16(v39);
    __A[52] = vcvtq_f32_f16(*(float16x4_t *)v39.i8);
    __A[55] = vcvt_hight_f32_f16(v40);
    __A[54] = vcvtq_f32_f16(*(float16x4_t *)v40.i8);
    v41 = *(float16x8_t *)(v12 + 448);
    v42 = *(float16x8_t *)(v12 + 464);
    __A[57] = vcvt_hight_f32_f16(v41);
    __A[56] = vcvtq_f32_f16(*(float16x4_t *)v41.i8);
    __A[59] = vcvt_hight_f32_f16(v42);
    __A[58] = vcvtq_f32_f16(*(float16x4_t *)v42.i8);
    v43 = *(float16x8_t *)(v12 + 480);
    v44 = *(float16x8_t *)(v12 + 496);
    __A[61] = vcvt_hight_f32_f16(v43);
    __A[60] = vcvtq_f32_f16(*(float16x4_t *)v43.i8);
    __A[63] = vcvt_hight_f32_f16(v44);
    __A[62] = vcvtq_f32_f16(*(float16x4_t *)v44.i8);
    v45 = *(float16x8_t *)(a2 + 16);
    v46 = vcvtq_f32_f16(*(float16x4_t *)a2);
    __B[1] = vcvt_hight_f32_f16(*(float16x8_t *)a2);
    __B[0] = v46;
    __B[3] = vcvt_hight_f32_f16(v45);
    __B[2] = vcvtq_f32_f16(*(float16x4_t *)v45.i8);
    v47 = *(float16x8_t *)(a2 + 32);
    v48 = *(float16x8_t *)(a2 + 48);
    __B[5] = vcvt_hight_f32_f16(v47);
    __B[4] = vcvtq_f32_f16(*(float16x4_t *)v47.i8);
    __B[7] = vcvt_hight_f32_f16(v48);
    __B[6] = vcvtq_f32_f16(*(float16x4_t *)v48.i8);
    v49 = *(float16x8_t *)(a2 + 64);
    v50 = *(float16x8_t *)(a2 + 80);
    __B[9] = vcvt_hight_f32_f16(v49);
    __B[8] = vcvtq_f32_f16(*(float16x4_t *)v49.i8);
    __B[11] = vcvt_hight_f32_f16(v50);
    __B[10] = vcvtq_f32_f16(*(float16x4_t *)v50.i8);
    v51 = *(float16x8_t *)(a2 + 96);
    v52 = *(float16x8_t *)(a2 + 112);
    __B[13] = vcvt_hight_f32_f16(v51);
    __B[12] = vcvtq_f32_f16(*(float16x4_t *)v51.i8);
    __B[15] = vcvt_hight_f32_f16(v52);
    __B[14] = vcvtq_f32_f16(*(float16x4_t *)v52.i8);
    v53 = *(float16x8_t *)(a2 + 128);
    v54 = *(float16x8_t *)(a2 + 144);
    __B[17] = vcvt_hight_f32_f16(v53);
    __B[16] = vcvtq_f32_f16(*(float16x4_t *)v53.i8);
    __B[19] = vcvt_hight_f32_f16(v54);
    __B[18] = vcvtq_f32_f16(*(float16x4_t *)v54.i8);
    v55 = *(float16x8_t *)(a2 + 160);
    v56 = *(float16x8_t *)(a2 + 176);
    __B[21] = vcvt_hight_f32_f16(v55);
    __B[20] = vcvtq_f32_f16(*(float16x4_t *)v55.i8);
    __B[23] = vcvt_hight_f32_f16(v56);
    __B[22] = vcvtq_f32_f16(*(float16x4_t *)v56.i8);
    v57 = *(float16x8_t *)(a2 + 192);
    v58 = *(float16x8_t *)(a2 + 208);
    __B[25] = vcvt_hight_f32_f16(v57);
    __B[24] = vcvtq_f32_f16(*(float16x4_t *)v57.i8);
    __B[27] = vcvt_hight_f32_f16(v58);
    __B[26] = vcvtq_f32_f16(*(float16x4_t *)v58.i8);
    v59 = *(float16x8_t *)(a2 + 224);
    v60 = *(float16x8_t *)(a2 + 240);
    __B[29] = vcvt_hight_f32_f16(v59);
    __B[28] = vcvtq_f32_f16(*(float16x4_t *)v59.i8);
    __B[31] = vcvt_hight_f32_f16(v60);
    __B[30] = vcvtq_f32_f16(*(float16x4_t *)v60.i8);
    v61 = *(float16x8_t *)(a2 + 256);
    v62 = *(float16x8_t *)(a2 + 272);
    __B[33] = vcvt_hight_f32_f16(v61);
    __B[32] = vcvtq_f32_f16(*(float16x4_t *)v61.i8);
    __B[35] = vcvt_hight_f32_f16(v62);
    __B[34] = vcvtq_f32_f16(*(float16x4_t *)v62.i8);
    v63 = *(float16x8_t *)(a2 + 288);
    v64 = *(float16x8_t *)(a2 + 304);
    __B[37] = vcvt_hight_f32_f16(v63);
    __B[36] = vcvtq_f32_f16(*(float16x4_t *)v63.i8);
    __B[39] = vcvt_hight_f32_f16(v64);
    __B[38] = vcvtq_f32_f16(*(float16x4_t *)v64.i8);
    v65 = *(float16x8_t *)(a2 + 320);
    v66 = *(float16x8_t *)(a2 + 336);
    __B[41] = vcvt_hight_f32_f16(v65);
    __B[40] = vcvtq_f32_f16(*(float16x4_t *)v65.i8);
    __B[43] = vcvt_hight_f32_f16(v66);
    __B[42] = vcvtq_f32_f16(*(float16x4_t *)v66.i8);
    v67 = *(float16x8_t *)(a2 + 352);
    v68 = *(float16x8_t *)(a2 + 368);
    __B[45] = vcvt_hight_f32_f16(v67);
    __B[44] = vcvtq_f32_f16(*(float16x4_t *)v67.i8);
    __B[47] = vcvt_hight_f32_f16(v68);
    __B[46] = vcvtq_f32_f16(*(float16x4_t *)v68.i8);
    v69 = *(float16x8_t *)(a2 + 384);
    v70 = *(float16x8_t *)(a2 + 400);
    __B[49] = vcvt_hight_f32_f16(v69);
    __B[48] = vcvtq_f32_f16(*(float16x4_t *)v69.i8);
    __B[51] = vcvt_hight_f32_f16(v70);
    __B[50] = vcvtq_f32_f16(*(float16x4_t *)v70.i8);
    v71 = *(float16x8_t *)(a2 + 416);
    v72 = *(float16x8_t *)(a2 + 432);
    __B[53] = vcvt_hight_f32_f16(v71);
    __B[52] = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
    __B[55] = vcvt_hight_f32_f16(v72);
    __B[54] = vcvtq_f32_f16(*(float16x4_t *)v72.i8);
    v73 = *(float16x8_t *)(a2 + 448);
    v74 = *(float16x8_t *)(a2 + 464);
    __B[57] = vcvt_hight_f32_f16(v73);
    __B[56] = vcvtq_f32_f16(*(float16x4_t *)v73.i8);
    __B[59] = vcvt_hight_f32_f16(v74);
    __B[58] = vcvtq_f32_f16(*(float16x4_t *)v74.i8);
    v75 = *(float16x8_t *)(a2 + 480);
    v76 = *(float16x8_t *)(a2 + 496);
    __B[61] = vcvt_hight_f32_f16(v75);
    __B[60] = vcvtq_f32_f16(*(float16x4_t *)v75.i8);
    __B[63] = vcvt_hight_f32_f16(v76);
    __B[62] = vcvtq_f32_f16(*(float16x4_t *)v76.i8);
    __C[0] = 2139095039;
    vDSP_distancesq((const float *)__A, 1, (const float *)__B, 1, (float *)__C, 0x100uLL);
    v77 = (v11 | ((unint64_t)__C[0] << 32)) >> 32;
    v78 = v8 - v10;
    v79 = (v8 - v10) >> 3;
    if (v79 < v164)
    {
      if (v8 < v9)
      {
        *(_DWORD *)v8 = v11;
        *((_DWORD *)v8 + 1) = v77;
        v8 += 8;
LABEL_46:
        if (v8 - v10 >= 9)
        {
          v111 = (((unint64_t)(v8 - v10) >> 3) - 2) >> 1;
          v112 = (float *)&v10[8 * v111];
          v114 = v8 - 8;
          v113 = *((_DWORD *)v8 - 2);
          v115 = v112[1];
          v116 = *((float *)v8 - 1);
          v117 = *(_DWORD *)v112;
          v118 = *(_DWORD *)v112 < v113;
          if (v115 != v116)
            v118 = v115 < v116;
          if (v118)
          {
            do
            {
              v119 = v112;
              *(_DWORD *)v114 = v117;
              *((float *)v114 + 1) = v112[1];
              if (!v111)
                break;
              v111 = (v111 - 1) >> 1;
              v112 = (float *)&v10[8 * v111];
              v120 = v112[1];
              v117 = *(_DWORD *)v112;
              v121 = v120 < v116;
              if (v120 == v116)
                v121 = *(_DWORD *)v112 < v113;
              v114 = (char *)v119;
            }
            while (v121);
            *(_DWORD *)v119 = v113;
            v119[1] = v116;
          }
        }
        goto LABEL_4;
      }
      if ((v9 - v10) >> 2 <= (unint64_t)(v79 + 1))
        v91 = v79 + 1;
      else
        v91 = (v9 - v10) >> 2;
      if ((unint64_t)(v9 - v10) >= 0x7FFFFFFFFFFFFFF8)
        v91 = 0x1FFFFFFFFFFFFFFFLL;
      if (v91 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v92 = 8 * v91;
      v93 = operator new(8 * v91);
      v94 = &v93[8 * v79];
      *v94 = v11;
      v94[1] = v77;
      if (v8 == v10)
      {
        v99 = v8;
        v10 = &v93[8 * v79];
LABEL_44:
        v9 = &v93[v92];
        v8 = (char *)(v94 + 2);
        if (v99)
          operator delete(v99);
        goto LABEL_46;
      }
      v95 = v8 - v10 - 8;
      if (v95 >= 0x58 && (unint64_t)(v10 - v93) >= 0x20)
      {
        v131 = (v95 >> 3) + 1;
        v96 = &v8[-8 * (v131 & 0x3FFFFFFFFFFFFFFCLL)];
        v132 = &v93[8 * v79 - 16];
        v133 = v8 - 16;
        v134 = v131 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v135 = *(_OWORD *)v133;
          *(v132 - 1) = *((_OWORD *)v133 - 1);
          *v132 = v135;
          v132 -= 2;
          v133 -= 32;
          v134 -= 4;
        }
        while (v134);
        v97 = (char *)&v94[-2 * (v131 & 0x3FFFFFFFFFFFFFFCLL)];
        if (v131 == (v131 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_32;
      }
      else
      {
        v96 = v8;
        v97 = &v93[8 * v79];
      }
      do
      {
        v98 = *((_QWORD *)v96 - 1);
        v96 -= 8;
        *((_QWORD *)v97 - 1) = v98;
        v97 -= 8;
      }
      while (v96 != v10);
LABEL_32:
      v99 = v10;
      v10 = v97;
      goto LABEL_44;
    }
    v80 = *((float *)v10 + 1);
    v81 = *(_DWORD *)v10;
    v82 = *(_DWORD *)v10 > v11;
    if (v80 != *(float *)&v77)
      v82 = v80 > *(float *)&v77;
    if (v82)
    {
      if (v78 <= 8)
      {
        *((_DWORD *)v8 - 2) = v11;
        *((_DWORD *)v8 - 1) = v77;
      }
      else
      {
        v83 = 0;
        v84 = v10;
        do
        {
          v89 = (float *)&v84[8 * v83 + 8];
          v90 = (2 * v83) | 1;
          v83 = 2 * v83 + 2;
          if (v83 < v79)
          {
            v85 = v89[1];
            v86 = v89[3];
            v87 = *v89;
            v88 = *(_DWORD *)v89 < *((_DWORD *)v89 + 2);
            if (v85 != v86)
              v88 = v85 < v86;
            if (v88)
            {
              v87 = v89[2];
              v89 += 2;
            }
            else
            {
              v83 = v90;
            }
          }
          else
          {
            v87 = *v89;
            v83 = v90;
          }
          *(float *)v84 = v87;
          *((float *)v84 + 1) = v89[1];
          v84 = (char *)v89;
        }
        while (v83 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
        if (v89 == (float *)(v8 - 8))
        {
          *(_DWORD *)v89 = v81;
          v89[1] = v80;
        }
        else
        {
          *v89 = *((float *)v8 - 2);
          v89[1] = *((float *)v8 - 1);
          *((_DWORD *)v8 - 2) = v81;
          *((float *)v8 - 1) = v80;
          v100 = (char *)v89 - v10 + 8;
          if (v100 >= 9)
          {
            v101 = (((unint64_t)v100 >> 3) - 2) >> 1;
            v102 = (float *)&v10[8 * v101];
            v103 = v102[1];
            v104 = v89[1];
            v105 = *(_DWORD *)v102;
            v106 = *v89;
            v107 = *(_DWORD *)v102 < *(_DWORD *)v89;
            if (v103 != v104)
              v107 = v103 < v104;
            if (v107)
            {
              do
              {
                v108 = v102;
                *(_DWORD *)v89 = v105;
                v89[1] = v102[1];
                if (!v101)
                  break;
                v101 = (v101 - 1) >> 1;
                v102 = (float *)&v10[8 * v101];
                v109 = v102[1];
                v105 = *(_DWORD *)v102;
                v110 = v109 < v104;
                if (v109 == v104)
                  v110 = *(_DWORD *)v102 < LODWORD(v106);
                v89 = v108;
              }
              while (v110);
              *v108 = v106;
              v108[1] = v104;
            }
          }
        }
        *((_DWORD *)v8 - 2) = v11;
        *((_DWORD *)v8 - 1) = v77;
        v122 = v8 - 8;
        v123 = (((unint64_t)v78 >> 3) - 2) >> 1;
        v124 = (float *)&v10[8 * v123];
        v125 = v124[1];
        v126 = *(_DWORD *)v124;
        v127 = *(_DWORD *)v124 < v11;
        if (v125 != *(float *)&v77)
          v127 = v125 < *(float *)&v77;
        if (v127)
        {
          do
          {
            v128 = v124;
            *(_DWORD *)v122 = v126;
            *((float *)v122 + 1) = v124[1];
            if (!v123)
              break;
            v123 = (v123 - 1) >> 1;
            v124 = (float *)&v10[8 * v123];
            v129 = v124[1];
            v126 = *(_DWORD *)v124;
            v130 = v129 < *(float *)&v77;
            if (v129 == *(float *)&v77)
              v130 = *(_DWORD *)v124 < v11;
            v122 = (char *)v128;
          }
          while (v130);
          *(_DWORD *)v128 = v11;
          *((_DWORD *)v128 + 1) = v77;
        }
      }
    }
LABEL_4:
    ++v11;
  }
  while (v11 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1));
  *v163 = 0;
  v163[1] = 0;
  v163[2] = 0;
  v136 = v8 - v10;
  if (v8 == v10)
  {
    v138 = 0;
    v137 = 0;
  }
  else
  {
    if (v136 < 0)
      abort();
    v137 = (int *)operator new(v8 - v10);
    *v163 = v137;
    v163[2] = &v137[2 * (v136 >> 3)];
    memcpy(v137, v10, v136 & 0xFFFFFFFFFFFFFFF8);
    v138 = (float *)((char *)v137 + (v136 & 0xFFFFFFFFFFFFFFF8));
    v163[1] = (int *)v138;
    v8 = v10;
  }
LABEL_73:
  if ((char *)v138 - (char *)v137 >= 9)
  {
    v139 = (unint64_t)((char *)v138 - (char *)v137) >> 3;
    do
    {
      v141 = 0;
      v142 = *v137;
      v143 = v137[1];
      v144 = (float *)v137;
      do
      {
        v149 = &v144[2 * v141 + 2];
        v150 = (2 * v141) | 1;
        v141 = 2 * v141 + 2;
        if (v141 < v139)
        {
          v145 = v149[1];
          v146 = v149[3];
          v147 = *v149;
          v148 = *(_DWORD *)v149 < *((_DWORD *)v149 + 2);
          if (v145 != v146)
            v148 = v145 < v146;
          if (v148)
          {
            v147 = v149[2];
            v149 += 2;
          }
          else
          {
            v141 = v150;
          }
        }
        else
        {
          v147 = *v149;
          v141 = v150;
        }
        *v144 = v147;
        v144[1] = v149[1];
        v144 = v149;
      }
      while (v141 <= (uint64_t)((unint64_t)(v139 - 2) >> 1));
      v151 = (char *)(v138 - 2);
      if (v149 == v138 - 2)
      {
        *(_DWORD *)v149 = v142;
        *((_DWORD *)v149 + 1) = v143;
      }
      else
      {
        *v149 = *(v138 - 2);
        v149[1] = *(v138 - 1);
        *((_DWORD *)v138 - 2) = v142;
        *((_DWORD *)v138 - 1) = v143;
        v152 = (char *)v149 - (char *)v137 + 8;
        if (v152 >= 9)
        {
          v153 = (((unint64_t)v152 >> 3) - 2) >> 1;
          v154 = (float *)&v137[2 * v153];
          v155 = v154[1];
          v156 = v149[1];
          v157 = *v154;
          v158 = *v149;
          v159 = *(_DWORD *)v154 < *(_DWORD *)v149;
          if (v155 != v156)
            v159 = v155 < v156;
          if (v159)
          {
            do
            {
              v160 = v154;
              *v149 = v157;
              v149[1] = v154[1];
              if (!v153)
                break;
              v153 = (v153 - 1) >> 1;
              v154 = (float *)&v137[2 * v153];
              v161 = v154[1];
              v157 = *v154;
              v162 = v161 < v156;
              if (v161 == v156)
                v162 = *(_DWORD *)v154 < LODWORD(v158);
              v149 = v160;
            }
            while (v162);
            *v160 = v158;
            v160[1] = v156;
          }
        }
      }
      v138 = (float *)v151;
    }
    while (v139-- > 2);
  }
  if (v8)
    operator delete(v8);
}

uint64_t _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EED2Ev(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  const void *v6;

  *(_QWORD *)a1 = &off_1E6E31340;
  v2 = atomic_load((unsigned __int8 *)(a1 + 57));
  if ((v2 & 1) != 0)
    vi_onefixedsize_disk_allocator::unlinkStorage(*(_QWORD *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
  {
    storage_array_Close(v3 + 8);
    v4 = *(const void **)(v3 + 4208);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(v3 + 4208) = 0;
    }
    *(_OWORD *)(v3 + 4192) = 0u;
    MEMORY[0x1BCCB06A4](v3, 0x10A0C408BE2A288);
  }
  fd_release(*(char **)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v5)
  {
    storage_array_Close(v5 + 8);
    v6 = *(const void **)(v5 + 4208);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(v5 + 4208) = 0;
    }
    *(_OWORD *)(v5 + 4192) = 0u;
    MEMORY[0x1BCCB06A4](v5, 0x10A0C408BE2A288);
  }
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void ___ZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEv_block_invoke()
{
  uint64_t v0;
  unsigned __int8 v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  char __str[8];
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[4];
  void *__p[2];
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  v1 = atomic_load((unsigned __int8 *)&_ZGVZN19ZeroVectorQuantizerIDF16_Li256EE8centroidEvE8centroid);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_ZGVZN19ZeroVectorQuantizerIDF16_Li256EE8centroidEvE8centroid))
  {
    *(__int128 *)((char *)&xmmword_1EF1AE792 + 14) = 0u;
    unk_1EF1AE7B0 = 0u;
    *(__int128 *)((char *)&xmmword_1EF1AE772 + 14) = 0u;
    unk_1EF1AE790 = 0u;
    *(__int128 *)((char *)&xmmword_1EF1AE752 + 14) = 0u;
    unk_1EF1AE770 = 0u;
    *(__int128 *)((char *)&xmmword_1EF1AE732 + 14) = 0u;
    unk_1EF1AE750 = 0u;
    *(__int128 *)((char *)&xmmword_1EF1AE712 + 14) = 0u;
    unk_1EF1AE730 = 0u;
    *(__int128 *)((char *)&xmmword_1EF1AE6F2 + 14) = 0u;
    unk_1EF1AE710 = 0u;
    *(__int128 *)((char *)&xmmword_1EF1AE6D2 + 14) = 0u;
    unk_1EF1AE6F0 = 0u;
    xmmword_1EF1AE6C0 = 0u;
    unk_1EF1AE6D0 = 0u;
    xmmword_1EF1AE6A0 = 0u;
    unk_1EF1AE6B0 = 0u;
    xmmword_1EF1AE680 = 0u;
    unk_1EF1AE690 = 0u;
    xmmword_1EF1AE660 = 0u;
    unk_1EF1AE670 = 0u;
    xmmword_1EF1AE640 = 0u;
    unk_1EF1AE650 = 0u;
    xmmword_1EF1AE620 = 0u;
    unk_1EF1AE630 = 0u;
    xmmword_1EF1AE600 = 0u;
    unk_1EF1AE610 = 0u;
    xmmword_1EF1AE5E0 = 0u;
    unk_1EF1AE5F0 = 0u;
    _ZZN19ZeroVectorQuantizerIDF16_Li256EE8centroidEvE8centroid = 0u;
    *(_OWORD *)algn_1EF1AE5D0 = 0u;
    __cxa_guard_release(&_ZGVZN19ZeroVectorQuantizerIDF16_Li256EE8centroidEvE8centroid);
  }
  if (_ZZN19ZeroVectorQuantizerIDF16_Li256EE8centroidEvE9onceToken != -1)
    dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li256EE8centroidEvE9onceToken, &__block_literal_global_137);
  *(_QWORD *)(v0 + 8) = 0;
  v2 = (void **)(v0 + 8);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)v0 = off_1E6E30EF8;
  memcpy((void *)(v0 + 33), &_ZZN19ZeroVectorQuantizerIDF16_Li256EE8centroidEvE8centroid, 0x200uLL);
  bzero(__str, 0x400uLL);
  snprintf(__str, 0x400uLL, "S%08x%08x-1x%dx%u", (_DWORD)_ZZN19ZeroVectorQuantizerIDF16_Li256EE8centroidEvE8centroid, dword_1EF1AE7BC, 256, 16);
  MEMORY[0x1BCCB03B0](v0 + 8, __str);
  *(_QWORD *)v0 = off_1E6E30E78;
  v36 = 0u;
  v26 = 0;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  v25 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v23, 0, sizeof(v23));
  v3 = MEMORY[0x1E0DE4FD0];
  v4 = MEMORY[0x1E0DE4FD0] + 104;
  v27 = MEMORY[0x1E0DE4FD0] + 104;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = MEMORY[0x1E0DE4FD0] + 64;
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v22 = MEMORY[0x1E0DE4FD0] + 64;
  *(_QWORD *)__str = v7;
  *(_QWORD *)&__str[*(_QWORD *)(v7 - 24)] = v8;
  v21 = 0;
  v9 = (std::ios_base *)&__str[*(_QWORD *)(*(_QWORD *)__str - 24)];
  std::ios_base::init(v9, v23);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v10 = v5[5];
  v22 = v5[4];
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = v10;
  *(_QWORD *)__str = v5[1];
  *(_QWORD *)&__str[*(_QWORD *)(*(_QWORD *)__str - 24)] = v5[6];
  v27 = v4;
  *(_QWORD *)__str = v3 + 24;
  v22 = v6;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)&v23[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v25 = 0u;
  LODWORD(v26) = 24;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Z1000000000000000-1x", 20);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)"x", 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (*(char *)(v0 + 31) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = v18;
  *(_QWORD *)(v0 + 24) = v19;
  *(_QWORD *)__str = *v5;
  v13 = v5[9];
  *(_QWORD *)&__str[*(_QWORD *)(*(_QWORD *)__str - 24)] = v5[8];
  v22 = v13;
  *(_QWORD *)&v23[0] = v11;
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1BCCB0650](&v27);
  v14 = (_QWORD *)operator new();
  *v14 = &off_1E6E30FA0;
  v14[1] = 0;
  v14[2] = 0;
  v14[3] = v0;
  v15 = (std::__shared_weak_count *)qword_1EF1AE5A8;
  _ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq = v0;
  qword_1EF1AE5A8 = (uint64_t)v14;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void _ZNSt3__120__shared_ptr_pointerIP19ZeroVectorQuantizerIDF16_Li256EENS_10shared_ptrI9QuantizerIDF16_Li256EEE27__shared_ptr_default_deleteIS6_S2_EENS_9allocatorIS2_EEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

uint64_t _ZNSt3__120__shared_ptr_pointerIP19ZeroVectorQuantizerIDF16_Li256EENS_10shared_ptrI9QuantizerIDF16_Li256EEE27__shared_ptr_default_deleteIS6_S2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _ZN19ZeroVectorQuantizerIDF16_Li256EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void _ZN19ZeroVectorQuantizerIDF16_Li256EED0Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1BCCB06A4);
}

uint64_t _ZNK21SingleVectorQuantizerIDF16_Li256EE5countEv()
{
  return 1;
}

uint64_t _ZNK21SingleVectorQuantizerIDF16_Li256EE11getCentroidEj(uint64_t a1, int a2)
{
  char *v3;
  char *v4;
  const char *v5;

  if (a2)
  {
    v3 = __si_assert_copy_extra_268();
    v4 = v3;
    v5 = "";
    if (v3)
      v5 = v3;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 387, "i < 1", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a1 + 33;
}

float *_ZNK21SingleVectorQuantizerIDF16_Li256EE14topKPartitionsERK10CIVector_sIDF16_Li256EEi@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float **a3@<X8>)
{
  float16x8_t v4;
  float32x4_t v5;
  float16x8_t v6;
  float16x8_t v7;
  float16x8_t v8;
  float16x8_t v9;
  float16x8_t v10;
  float16x8_t v11;
  float16x8_t v12;
  float16x8_t v13;
  float16x8_t v14;
  float16x8_t v15;
  float16x8_t v16;
  float16x8_t v17;
  float16x8_t v18;
  float16x8_t v19;
  float16x8_t v20;
  float16x8_t v21;
  float16x8_t v22;
  float16x8_t v23;
  float16x8_t v24;
  float16x8_t v25;
  float16x8_t v26;
  float16x8_t v27;
  float16x8_t v28;
  float16x8_t v29;
  float16x8_t v30;
  float16x8_t v31;
  float16x8_t v32;
  float16x8_t v33;
  float16x8_t v34;
  float16x8_t v35;
  float16x8_t v36;
  float16x8_t v37;
  float16x8_t v38;
  float16x8_t v39;
  float16x8_t v40;
  float16x8_t v41;
  float16x8_t v42;
  float16x8_t v43;
  float16x8_t v44;
  float16x8_t v45;
  float16x8_t v46;
  float16x8_t v47;
  float16x8_t v48;
  float16x8_t v49;
  float16x8_t v50;
  float16x8_t v51;
  float16x8_t v52;
  float16x8_t v53;
  float16x8_t v54;
  float16x8_t v55;
  float16x8_t v56;
  float16x8_t v57;
  float16x8_t v58;
  float16x8_t v59;
  float16x8_t v60;
  float16x8_t v61;
  float16x8_t v62;
  float16x8_t v63;
  float16x8_t v64;
  float16x8_t v65;
  float16x8_t v66;
  float16x8_t v67;
  float v68;
  float *result;
  _OWORD __B[64];
  _OWORD __A[64];
  float __C;

  v4 = *(float16x8_t *)(a2 + 16);
  v5 = vcvtq_f32_f16(*(float16x4_t *)a2);
  __A[1] = vcvt_hight_f32_f16(*(float16x8_t *)a2);
  __A[0] = v5;
  __A[3] = vcvt_hight_f32_f16(v4);
  __A[2] = vcvtq_f32_f16(*(float16x4_t *)v4.i8);
  v6 = *(float16x8_t *)(a2 + 32);
  v7 = *(float16x8_t *)(a2 + 48);
  __A[5] = vcvt_hight_f32_f16(v6);
  __A[4] = vcvtq_f32_f16(*(float16x4_t *)v6.i8);
  __A[7] = vcvt_hight_f32_f16(v7);
  __A[6] = vcvtq_f32_f16(*(float16x4_t *)v7.i8);
  v8 = *(float16x8_t *)(a2 + 64);
  v9 = *(float16x8_t *)(a2 + 80);
  __A[9] = vcvt_hight_f32_f16(v8);
  __A[8] = vcvtq_f32_f16(*(float16x4_t *)v8.i8);
  __A[11] = vcvt_hight_f32_f16(v9);
  __A[10] = vcvtq_f32_f16(*(float16x4_t *)v9.i8);
  v10 = *(float16x8_t *)(a2 + 96);
  v11 = *(float16x8_t *)(a2 + 112);
  __A[13] = vcvt_hight_f32_f16(v10);
  __A[12] = vcvtq_f32_f16(*(float16x4_t *)v10.i8);
  __A[15] = vcvt_hight_f32_f16(v11);
  __A[14] = vcvtq_f32_f16(*(float16x4_t *)v11.i8);
  v12 = *(float16x8_t *)(a2 + 128);
  v13 = *(float16x8_t *)(a2 + 144);
  __A[17] = vcvt_hight_f32_f16(v12);
  __A[16] = vcvtq_f32_f16(*(float16x4_t *)v12.i8);
  __A[19] = vcvt_hight_f32_f16(v13);
  __A[18] = vcvtq_f32_f16(*(float16x4_t *)v13.i8);
  v14 = *(float16x8_t *)(a2 + 160);
  v15 = *(float16x8_t *)(a2 + 176);
  __A[21] = vcvt_hight_f32_f16(v14);
  __A[20] = vcvtq_f32_f16(*(float16x4_t *)v14.i8);
  __A[23] = vcvt_hight_f32_f16(v15);
  __A[22] = vcvtq_f32_f16(*(float16x4_t *)v15.i8);
  v16 = *(float16x8_t *)(a2 + 192);
  v17 = *(float16x8_t *)(a2 + 208);
  __A[25] = vcvt_hight_f32_f16(v16);
  __A[24] = vcvtq_f32_f16(*(float16x4_t *)v16.i8);
  __A[27] = vcvt_hight_f32_f16(v17);
  __A[26] = vcvtq_f32_f16(*(float16x4_t *)v17.i8);
  v18 = *(float16x8_t *)(a2 + 224);
  v19 = *(float16x8_t *)(a2 + 240);
  __A[29] = vcvt_hight_f32_f16(v18);
  __A[28] = vcvtq_f32_f16(*(float16x4_t *)v18.i8);
  __A[31] = vcvt_hight_f32_f16(v19);
  __A[30] = vcvtq_f32_f16(*(float16x4_t *)v19.i8);
  v20 = *(float16x8_t *)(a2 + 256);
  v21 = *(float16x8_t *)(a2 + 272);
  __A[33] = vcvt_hight_f32_f16(v20);
  __A[32] = vcvtq_f32_f16(*(float16x4_t *)v20.i8);
  __A[35] = vcvt_hight_f32_f16(v21);
  __A[34] = vcvtq_f32_f16(*(float16x4_t *)v21.i8);
  v22 = *(float16x8_t *)(a2 + 288);
  v23 = *(float16x8_t *)(a2 + 304);
  __A[37] = vcvt_hight_f32_f16(v22);
  __A[36] = vcvtq_f32_f16(*(float16x4_t *)v22.i8);
  __A[39] = vcvt_hight_f32_f16(v23);
  __A[38] = vcvtq_f32_f16(*(float16x4_t *)v23.i8);
  v24 = *(float16x8_t *)(a2 + 320);
  v25 = *(float16x8_t *)(a2 + 336);
  __A[41] = vcvt_hight_f32_f16(v24);
  __A[40] = vcvtq_f32_f16(*(float16x4_t *)v24.i8);
  __A[43] = vcvt_hight_f32_f16(v25);
  __A[42] = vcvtq_f32_f16(*(float16x4_t *)v25.i8);
  v26 = *(float16x8_t *)(a2 + 352);
  v27 = *(float16x8_t *)(a2 + 368);
  __A[45] = vcvt_hight_f32_f16(v26);
  __A[44] = vcvtq_f32_f16(*(float16x4_t *)v26.i8);
  __A[47] = vcvt_hight_f32_f16(v27);
  __A[46] = vcvtq_f32_f16(*(float16x4_t *)v27.i8);
  v28 = *(float16x8_t *)(a2 + 384);
  v29 = *(float16x8_t *)(a2 + 400);
  __A[49] = vcvt_hight_f32_f16(v28);
  __A[48] = vcvtq_f32_f16(*(float16x4_t *)v28.i8);
  __A[51] = vcvt_hight_f32_f16(v29);
  __A[50] = vcvtq_f32_f16(*(float16x4_t *)v29.i8);
  v30 = *(float16x8_t *)(a2 + 416);
  v31 = *(float16x8_t *)(a2 + 432);
  __A[53] = vcvt_hight_f32_f16(v30);
  __A[52] = vcvtq_f32_f16(*(float16x4_t *)v30.i8);
  __A[55] = vcvt_hight_f32_f16(v31);
  __A[54] = vcvtq_f32_f16(*(float16x4_t *)v31.i8);
  v32 = *(float16x8_t *)(a2 + 448);
  v33 = *(float16x8_t *)(a2 + 464);
  __A[57] = vcvt_hight_f32_f16(v32);
  __A[56] = vcvtq_f32_f16(*(float16x4_t *)v32.i8);
  __A[59] = vcvt_hight_f32_f16(v33);
  __A[58] = vcvtq_f32_f16(*(float16x4_t *)v33.i8);
  v34 = *(float16x8_t *)(a2 + 480);
  v35 = *(float16x8_t *)(a2 + 496);
  __A[61] = vcvt_hight_f32_f16(v34);
  __A[60] = vcvtq_f32_f16(*(float16x4_t *)v34.i8);
  __A[63] = vcvt_hight_f32_f16(v35);
  __A[62] = vcvtq_f32_f16(*(float16x4_t *)v35.i8);
  v36 = *(float16x8_t *)(a1 + 33);
  v37 = *(float16x8_t *)(a1 + 49);
  __B[1] = vcvt_hight_f32_f16(v36);
  __B[0] = vcvtq_f32_f16(*(float16x4_t *)v36.i8);
  __B[3] = vcvt_hight_f32_f16(v37);
  __B[2] = vcvtq_f32_f16(*(float16x4_t *)v37.i8);
  v38 = *(float16x8_t *)(a1 + 65);
  v39 = *(float16x8_t *)(a1 + 81);
  __B[5] = vcvt_hight_f32_f16(v38);
  __B[4] = vcvtq_f32_f16(*(float16x4_t *)v38.i8);
  __B[7] = vcvt_hight_f32_f16(v39);
  __B[6] = vcvtq_f32_f16(*(float16x4_t *)v39.i8);
  v40 = *(float16x8_t *)(a1 + 97);
  v41 = *(float16x8_t *)(a1 + 113);
  __B[9] = vcvt_hight_f32_f16(v40);
  __B[8] = vcvtq_f32_f16(*(float16x4_t *)v40.i8);
  __B[11] = vcvt_hight_f32_f16(v41);
  __B[10] = vcvtq_f32_f16(*(float16x4_t *)v41.i8);
  v42 = *(float16x8_t *)(a1 + 129);
  v43 = *(float16x8_t *)(a1 + 145);
  __B[13] = vcvt_hight_f32_f16(v42);
  __B[12] = vcvtq_f32_f16(*(float16x4_t *)v42.i8);
  __B[15] = vcvt_hight_f32_f16(v43);
  __B[14] = vcvtq_f32_f16(*(float16x4_t *)v43.i8);
  v44 = *(float16x8_t *)(a1 + 161);
  v45 = *(float16x8_t *)(a1 + 177);
  __B[17] = vcvt_hight_f32_f16(v44);
  __B[16] = vcvtq_f32_f16(*(float16x4_t *)v44.i8);
  __B[19] = vcvt_hight_f32_f16(v45);
  __B[18] = vcvtq_f32_f16(*(float16x4_t *)v45.i8);
  v46 = *(float16x8_t *)(a1 + 193);
  v47 = *(float16x8_t *)(a1 + 209);
  __B[21] = vcvt_hight_f32_f16(v46);
  __B[20] = vcvtq_f32_f16(*(float16x4_t *)v46.i8);
  __B[23] = vcvt_hight_f32_f16(v47);
  __B[22] = vcvtq_f32_f16(*(float16x4_t *)v47.i8);
  v48 = *(float16x8_t *)(a1 + 225);
  v49 = *(float16x8_t *)(a1 + 241);
  __B[25] = vcvt_hight_f32_f16(v48);
  __B[24] = vcvtq_f32_f16(*(float16x4_t *)v48.i8);
  __B[27] = vcvt_hight_f32_f16(v49);
  __B[26] = vcvtq_f32_f16(*(float16x4_t *)v49.i8);
  v50 = *(float16x8_t *)(a1 + 257);
  v51 = *(float16x8_t *)(a1 + 273);
  __B[29] = vcvt_hight_f32_f16(v50);
  __B[28] = vcvtq_f32_f16(*(float16x4_t *)v50.i8);
  __B[31] = vcvt_hight_f32_f16(v51);
  __B[30] = vcvtq_f32_f16(*(float16x4_t *)v51.i8);
  v52 = *(float16x8_t *)(a1 + 289);
  v53 = *(float16x8_t *)(a1 + 305);
  __B[33] = vcvt_hight_f32_f16(v52);
  __B[32] = vcvtq_f32_f16(*(float16x4_t *)v52.i8);
  __B[35] = vcvt_hight_f32_f16(v53);
  __B[34] = vcvtq_f32_f16(*(float16x4_t *)v53.i8);
  v54 = *(float16x8_t *)(a1 + 321);
  v55 = *(float16x8_t *)(a1 + 337);
  __B[37] = vcvt_hight_f32_f16(v54);
  __B[36] = vcvtq_f32_f16(*(float16x4_t *)v54.i8);
  __B[39] = vcvt_hight_f32_f16(v55);
  __B[38] = vcvtq_f32_f16(*(float16x4_t *)v55.i8);
  v56 = *(float16x8_t *)(a1 + 353);
  v57 = *(float16x8_t *)(a1 + 369);
  __B[41] = vcvt_hight_f32_f16(v56);
  __B[40] = vcvtq_f32_f16(*(float16x4_t *)v56.i8);
  __B[43] = vcvt_hight_f32_f16(v57);
  __B[42] = vcvtq_f32_f16(*(float16x4_t *)v57.i8);
  v58 = *(float16x8_t *)(a1 + 385);
  v59 = *(float16x8_t *)(a1 + 401);
  __B[45] = vcvt_hight_f32_f16(v58);
  __B[44] = vcvtq_f32_f16(*(float16x4_t *)v58.i8);
  __B[47] = vcvt_hight_f32_f16(v59);
  __B[46] = vcvtq_f32_f16(*(float16x4_t *)v59.i8);
  v60 = *(float16x8_t *)(a1 + 417);
  v61 = *(float16x8_t *)(a1 + 433);
  __B[49] = vcvt_hight_f32_f16(v60);
  __B[48] = vcvtq_f32_f16(*(float16x4_t *)v60.i8);
  __B[51] = vcvt_hight_f32_f16(v61);
  __B[50] = vcvtq_f32_f16(*(float16x4_t *)v61.i8);
  v62 = *(float16x8_t *)(a1 + 449);
  v63 = *(float16x8_t *)(a1 + 465);
  __B[53] = vcvt_hight_f32_f16(v62);
  __B[52] = vcvtq_f32_f16(*(float16x4_t *)v62.i8);
  __B[55] = vcvt_hight_f32_f16(v63);
  __B[54] = vcvtq_f32_f16(*(float16x4_t *)v63.i8);
  v64 = *(float16x8_t *)(a1 + 481);
  v65 = *(float16x8_t *)(a1 + 497);
  __B[57] = vcvt_hight_f32_f16(v64);
  __B[56] = vcvtq_f32_f16(*(float16x4_t *)v64.i8);
  __B[59] = vcvt_hight_f32_f16(v65);
  __B[58] = vcvtq_f32_f16(*(float16x4_t *)v65.i8);
  v66 = *(float16x8_t *)(a1 + 513);
  v67 = *(float16x8_t *)(a1 + 529);
  __B[61] = vcvt_hight_f32_f16(v66);
  __B[60] = vcvtq_f32_f16(*(float16x4_t *)v66.i8);
  __B[63] = vcvt_hight_f32_f16(v67);
  __B[62] = vcvtq_f32_f16(*(float16x4_t *)v67.i8);
  __C = 3.4028e38;
  vDSP_distancesq((const float *)__A, 1, (const float *)__B, 1, &__C, 0x100uLL);
  v68 = __C;
  result = (float *)operator new(8uLL);
  a3[1] = result + 2;
  a3[2] = result + 2;
  *result = 0.0;
  result[1] = v68;
  *a3 = result;
  return result;
}

uint64_t _ZN21SingleVectorQuantizerIDF16_Li256EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void _ZN21SingleVectorQuantizerIDF16_Li256EED0Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1BCCB06A4);
}

double ___ZN19ZeroVectorQuantizerIDF16_Li256EE8centroidEv_block_invoke()
{
  double result;

  LOWORD(_ZZN19ZeroVectorQuantizerIDF16_Li256EE8centroidEvE8centroid) = 15360;
  result = 0.0;
  unk_1EF1AE7B0 = 0u;
  unk_1EF1AE6B2 = 0u;
  *(__int128 *)((char *)&xmmword_1EF1AE6A0 + 2) = 0u;
  unk_1EF1AE692 = 0u;
  *(__int128 *)((char *)&xmmword_1EF1AE680 + 2) = 0u;
  unk_1EF1AE672 = 0u;
  *(__int128 *)((char *)&xmmword_1EF1AE660 + 2) = 0u;
  unk_1EF1AE652 = 0u;
  *(__int128 *)((char *)&xmmword_1EF1AE640 + 2) = 0u;
  unk_1EF1AE632 = 0u;
  *(__int128 *)((char *)&xmmword_1EF1AE620 + 2) = 0u;
  unk_1EF1AE612 = 0u;
  *(__int128 *)((char *)&xmmword_1EF1AE600 + 2) = 0u;
  unk_1EF1AE5F2 = 0u;
  *(__int128 *)((char *)&xmmword_1EF1AE5E0 + 2) = 0u;
  *(_OWORD *)&algn_1EF1AE5D0[2] = 0u;
  *(__int128 *)((char *)&_ZZN19ZeroVectorQuantizerIDF16_Li256EE8centroidEvE8centroid + 2) = 0u;
  xmmword_1EF1AE792 = 0u;
  unk_1EF1AE7A2 = 0u;
  xmmword_1EF1AE772 = 0u;
  unk_1EF1AE782 = 0u;
  xmmword_1EF1AE752 = 0u;
  unk_1EF1AE762 = 0u;
  xmmword_1EF1AE732 = 0u;
  unk_1EF1AE742 = 0u;
  xmmword_1EF1AE712 = 0u;
  unk_1EF1AE722 = 0u;
  xmmword_1EF1AE6F2 = 0u;
  unk_1EF1AE702 = 0u;
  xmmword_1EF1AE6D2 = 0u;
  unk_1EF1AE6E2 = 0u;
  *(__int128 *)((char *)&xmmword_1EF1AE6C0 + 2) = 0u;
  return result;
}

uint64_t _ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8weak_ptrI16QuantizerManagerIDF16_Li256EEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SA_EEEEED1B8nn180100Ev(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  std::__shared_weak_count *v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = (std::__shared_weak_count *)*((_QWORD *)v2 + 6);
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

unsigned __int8 *_ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8weak_ptrI16QuantizerManagerIDF16_Li256EEEEEENS_22__unordered_map_hasherIS7_SC_NS_4hashIS7_EENS_8equal_toIS7_EELb1EEENS_21__unordered_map_equalIS7_SC_SH_SF_Lb1EEENS5_ISC_EEE25__emplace_unique_key_argsIS7_JRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSR_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeISC_PvEEEEbEERKT_DpOT0_(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void **v11;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD **v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *i;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  void *v47;

  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (uint64_t *)a1;
  else
    v4 = *(uint64_t **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v4, v5);
  v7 = v6;
  v8 = *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 1);
  if (*((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v6;
      if (v6 >= *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 1))
        v10 = v6 % *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 1);
    }
    else
    {
      v10 = (*((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 1) - 1) & v6;
    }
    v11 = *(void ***)(_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 8 * v10);
    if (v11)
    {
      v12 = (unsigned __int8 *)*v11;
      if (*v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = *((_QWORD *)v12 + 1);
            if (v17 == v7)
            {
              v18 = v12[39];
              if ((v18 & 0x80u) == 0)
                v19 = v12[39];
              else
                v19 = *((_QWORD *)v12 + 3);
              if (v19 == v5)
              {
                if ((v18 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v12 + 2), v4, *((_QWORD *)v12 + 3)))
                    return v12;
                }
                else
                {
                  if (!v12[39])
                    return v12;
                  v20 = 0;
                  while (v12[v20 + 16] == *((unsigned __int8 *)v4 + v20))
                  {
                    if (v18 == ++v20)
                      return v12;
                  }
                }
              }
            }
            else if ((v17 & (v8 - 1)) != v10)
            {
              goto LABEL_49;
            }
            v12 = *(unsigned __int8 **)v12;
            if (!v12)
              goto LABEL_49;
          }
        }
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v7)
          {
            v14 = v12[39];
            if ((v14 & 0x80u) == 0)
              v15 = v12[39];
            else
              v15 = *((_QWORD *)v12 + 3);
            if (v15 == v5)
            {
              if ((v14 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v12 + 2), v4, *((_QWORD *)v12 + 3)))
                  return v12;
              }
              else
              {
                if (!v12[39])
                  return v12;
                v16 = 0;
                while (v12[v16 + 16] == *((unsigned __int8 *)v4 + v16))
                {
                  if (v14 == ++v16)
                    return v12;
                }
              }
            }
          }
          else
          {
            if (v13 >= v8)
              v13 %= v8;
            if (v13 != v10)
              break;
          }
          v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_49:
  v12 = (unsigned __int8 *)operator new(0x38uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v7;
  v21 = (std::string *)(v12 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v12 + 4) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v12 + 5) = 0;
  *((_QWORD *)v12 + 6) = 0;
  v22 = (float)(unint64_t)(qword_1EF1B06A0 + 1);
  if (!v8 || (float)(*(float *)&dword_1EF1B06A8 * (float)v8) < v22)
  {
    v23 = 1;
    if (v8 >= 3)
      v23 = (v8 & (v8 - 1)) != 0;
    v24 = v23 | (2 * v8);
    v25 = vcvtps_u32_f32(v22 / *(float *)&dword_1EF1B06A8);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v8 = *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 1);
    if (prime <= *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 1))
    {
      if (prime >= *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 1))
        goto LABEL_89;
      v37 = vcvtps_u32_f32((float)(unint64_t)qword_1EF1B06A0 / *(float *)&dword_1EF1B06A8);
      if (*((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 1) < 3uLL
        || (v38 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers
                                                 + 8)),
            v38.i16[0] = vaddlv_u8(v38),
            v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime >= v8)
      {
        v8 = *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 1);
LABEL_89:
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v7 >= v8)
            v10 = v7 % v8;
          else
            v10 = v7;
        }
        else
        {
          v10 = (v8 - 1) & v7;
        }
        goto LABEL_102;
      }
      if (!prime)
      {
        v47 = (void *)_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers;
        *(_QWORD *)&_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers = 0;
        if (v47)
          operator delete(v47);
        v8 = 0;
        *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 1) = 0;
        goto LABEL_89;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v27 = operator new(8 * prime);
    v28 = (void *)_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers;
    *(_QWORD *)&_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers = v27;
    if (v28)
      operator delete(v28);
    v29 = 0;
    *((_QWORD *)&_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 1) = prime;
    do
      *(_QWORD *)(_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 8 * v29++) = 0;
    while (prime != v29);
    v30 = (_QWORD **)qword_1EF1B0698;
    if (!qword_1EF1B0698)
    {
LABEL_88:
      v8 = prime;
      goto LABEL_89;
    }
    v31 = *(_QWORD *)(qword_1EF1B0698 + 8);
    v32 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v33 = v31 & v32;
      *(_QWORD *)(_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 8 * v33) = &qword_1EF1B0698;
      for (i = *v30; *v30; i = *v30)
      {
        v35 = i[1] & v32;
        if (v35 == v33)
        {
          v30 = (_QWORD **)i;
        }
        else if (*(_QWORD *)(_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 8 * v35))
        {
          *v30 = (_QWORD *)*i;
          v36 = 8 * v35;
          *i = **(_QWORD **)(_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + v36);
          **(_QWORD **)(_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + v36) = i;
        }
        else
        {
          *(_QWORD *)(_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 8 * v35) = v30;
          v30 = (_QWORD **)i;
          v33 = v35;
        }
      }
      goto LABEL_88;
    }
    if (v31 >= prime)
      v31 %= prime;
    *(_QWORD *)(_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 8 * v31) = &qword_1EF1B0698;
    v40 = *v30;
    if (!*v30)
      goto LABEL_88;
    while (1)
    {
      v42 = v40[1];
      if (v42 >= prime)
        v42 %= prime;
      if (v42 != v31)
      {
        if (!*(_QWORD *)(_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 8 * v42))
        {
          *(_QWORD *)(_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 8 * v42) = v30;
          goto LABEL_93;
        }
        *v30 = (_QWORD *)*v40;
        v41 = 8 * v42;
        *v40 = **(_QWORD **)(_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + v41);
        **(_QWORD **)(_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + v41) = v40;
        v40 = v30;
      }
      v42 = v31;
LABEL_93:
      v30 = (_QWORD **)v40;
      v40 = (_QWORD *)*v40;
      v31 = v42;
      if (!v40)
        goto LABEL_88;
    }
  }
LABEL_102:
  v43 = _ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers;
  v44 = *(_QWORD **)(_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 8 * v10);
  if (v44)
  {
    *(_QWORD *)v12 = *v44;
LABEL_110:
    *v44 = v12;
    goto LABEL_111;
  }
  *(_QWORD *)v12 = qword_1EF1B0698;
  qword_1EF1B0698 = (uint64_t)v12;
  *(_QWORD *)(v43 + 8 * v10) = &qword_1EF1B0698;
  if (*(_QWORD *)v12)
  {
    v45 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v45 >= v8)
        v45 %= v8;
    }
    else
    {
      v45 &= v8 - 1;
    }
    v44 = (_QWORD *)(_ZZN16QuantizerManagerIDF16_Li256EE14sharedInstanceEijtE8managers + 8 * v45);
    goto LABEL_110;
  }
LABEL_111:
  ++qword_1EF1B06A0;
  return v12;
}

void _ZNSt3__120__shared_ptr_pointerIP16QuantizerManagerIDF16_Li256EENS_10shared_ptrIS2_E27__shared_ptr_default_deleteIS2_S2_EENS_9allocatorIS2_EEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

uint64_t _ZNSt3__120__shared_ptr_pointerIP16QuantizerManagerIDF16_Li256EENS_10shared_ptrIS2_E27__shared_ptr_default_deleteIS2_S2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv(uint64_t result)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *__error();
    v3 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = (_QWORD *)(v1 + 24);
      if (*(char *)(v1 + 47) < 0)
        v4 = (_QWORD *)*v4;
      v5 = (_QWORD *)(v1 + 48);
      if (*(char *)(v1 + 71) < 0)
        v5 = (_QWORD *)*v5;
      v16 = 136315394;
      v17 = v4;
      v18 = 2080;
      v19 = v5;
      _os_log_impl(&dword_1B8270000, v3, OS_LOG_TYPE_DEFAULT, "QuantizerManager %s/%s destroyed", (uint8_t *)&v16, 0x16u);
    }
    *__error() = v2;
    v6 = *(_QWORD **)(v1 + 128);
    if (v6)
    {
      do
      {
        v14 = (_QWORD *)*v6;
        v15 = (std::__shared_weak_count *)v6[4];
        if (v15)
          std::__shared_weak_count::__release_weak(v15);
        operator delete(v6);
        v6 = v14;
      }
      while (v14);
    }
    v7 = *(void **)(v1 + 112);
    *(_QWORD *)(v1 + 112) = 0;
    if (v7)
      operator delete(v7);
    v8 = *(std::__shared_weak_count **)(v1 + 104);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = *(std::__shared_weak_count **)(v1 + 88);
    if (!v11)
      goto LABEL_20;
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((*(char *)(v1 + 71) & 0x80000000) == 0)
      {
LABEL_21:
        if ((*(char *)(v1 + 47) & 0x80000000) == 0)
          goto LABEL_30;
        goto LABEL_29;
      }
    }
    else
    {
LABEL_20:
      if ((*(char *)(v1 + 71) & 0x80000000) == 0)
        goto LABEL_21;
    }
    operator delete(*(void **)(v1 + 48));
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
LABEL_30:
      JUMPOUT(0x1BCCB06A4);
LABEL_29:
    operator delete(*(void **)(v1 + 24));
    goto LABEL_30;
  }
  return result;
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li256EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsEENS_9allocatorIS6_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E33620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li256EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsEENS_9allocatorIS6_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E33620;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

void _ZNSt3__120__shared_ptr_emplaceIN22IVFVectorIndexTemplateIDF16_Li256EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsEENS_9allocatorIS6_EEE16__on_zero_sharedEv(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
  {
    storage_array_Close(v2 + 8);
    v3 = *(const void **)(v2 + 4208);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(v2 + 4208) = 0;
    }
    *(_OWORD *)(v2 + 4192) = 0u;
    JUMPOUT(0x1BCCB06A4);
  }
}

void _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED0Ev(_QWORD *a1)
{
  _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev(a1);
  JUMPOUT(0x1BCCB06A4);
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12getQuantizerEv(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  os_unfair_lock_s *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v6 = *(_QWORD *)(a1 + 80);
  v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(std::__shared_weak_count **)(a1 + 104);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  os_unfair_lock_unlock(v4);
  *a2 = v6;
  a2[1] = v5;
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (!v9)
    goto LABEL_14;
  v14 = (unint64_t *)&v9->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v5)
      return;
  }
  else
  {
LABEL_14:
    if (!v5)
      return;
  }
  v16 = (unint64_t *)&v5->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  os_unfair_lock_s *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v9 = *(_QWORD *)(a1 + 96);
  v8 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v8)
  {
    os_unfair_lock_unlock(v4);
    *a2 = v9;
    a2[1] = 0;
    if (!v5)
      return;
    goto LABEL_15;
  }
  v10 = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  os_unfair_lock_unlock(v4);
  *a2 = v9;
  a2[1] = v8;
  do
    v12 = __ldxr(v10);
  while (__stxr(v12 + 1, v10));
  do
    v13 = __ldaxr(v10);
  while (__stlxr(v13 - 1, v10));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v5)
  {
LABEL_15:
    v14 = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

unint64_t _ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE17getVectorAtOffsetEj(uint64_t a1, unsigned int a2)
{
  return _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 16) * a2, 0x210uLL);
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13newPartitionsENSt3__110shared_ptrI9QuantizerIDF16_Li256EEEE(uint64_t a1@<X0>, char **a2@<X1>, _QWORD *a3@<X8>)
{
  os_unfair_lock_s *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  const char *v14;
  __int128 v15;
  size_t v16;
  void *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  int v32;
  int v33;
  NSObject *v34;
  void **v35;
  int v36;
  int v37;
  char *v38;
  _QWORD *v39;
  int v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  const char *v47;
  void *__p[2];
  char v49;
  _OWORD v50[2];
  void *__dst[2];
  unint64_t v52;
  _OWORD v53[2];
  __int128 v54;
  __int128 v55;
  uint8_t buf[24];
  __int16 v57;
  _QWORD *v58;
  __int16 v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v6 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v7 = *(std::__shared_weak_count **)(a1 + 88);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v11 = *(_QWORD *)(a1 + 96);
  v10 = *(std::__shared_weak_count **)(a1 + 104);
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  os_unfair_lock_unlock(v6);
  v14 = ".partitions";
  if (v11 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11))
    v14 = ".tmp.partitions";
  v55 = 0u;
  v15 = *(_OWORD *)(a1 + 24);
  v53[0] = *(_OWORD *)(a1 + 8);
  v53[1] = v15;
  v54 = 0u;
  v16 = strlen(v14);
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
LABEL_60:
    abort();
  v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    v18 = (void **)operator new(v19 + 1);
    __dst[1] = v17;
    v52 = v20 | 0x8000000000000000;
    __dst[0] = v18;
    goto LABEL_17;
  }
  HIBYTE(v52) = v16;
  v18 = __dst;
  if (v16)
LABEL_17:
    memcpy(v18, v14, (size_t)v17);
  *((_BYTE *)v17 + (_QWORD)v18) = 0;
  IVFVectorIndexTemplate<float,768>::childMetaInfo((uint64_t)&v54, (uint64_t)v53, (uint64_t)__dst, 1);
  if (SHIBYTE(v52) < 0)
    operator delete(__dst[0]);
  v21 = operator new();
  v22 = (_DWORD *)v21;
  v50[0] = v54;
  v50[1] = v55;
  v23 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)buf = *a2;
  *(_QWORD *)&buf[8] = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    PartitionStore<vi_onefixedsize_disk_allocator,512>::PartitionStore<vi_onefixedsize_disk_allocator>(v21, (uint64_t)v50, buf);
    do
      v26 = __ldaxr(v24);
    while (__stlxr(v26 - 1, v24));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  else
  {
    PartitionStore<vi_onefixedsize_disk_allocator,512>::PartitionStore<vi_onefixedsize_disk_allocator>(v21, (uint64_t)v50, buf);
  }
  *a3 = v22;
  v27 = (_QWORD *)operator new();
  *v27 = &off_1E6E33858;
  v27[1] = 0;
  v27[2] = 0;
  v27[3] = v22;
  a3[1] = v27;
  v28 = *(_QWORD *)(a1 + 48);
  if (*(_DWORD *)(v28 + 40))
  {
    v29 = 0;
    do
    {
      memset(buf, 0, sizeof(buf));
      v30 = *a2;
      v31 = _windowsResolvePtr(*(_QWORD *)(v28 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v28 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v28 + 32) + 16) * v29, 0x210uLL);
      (*(void (**)(uint8_t *__return_ptr, char *, unint64_t, uint64_t))(*(_QWORD *)v30 + 72))(buf, v30, v31, 1);
      (*(void (**)(_DWORD *, _QWORD, unint64_t, float))(*(_QWORD *)v22 + 56))(v22, **(_DWORD **)buf, v29, *(float *)(*(_QWORD *)buf + 4));
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      ++v29;
      v28 = *(_QWORD *)(a1 + 48);
    }
    while (v29 < *(unsigned int *)(v28 + 40));
  }
  (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v22 + 112))(v22, 0);
  v32 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 40);
  if (v32)
  {
    v33 = *__error();
    v34 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, _DWORD *))(*(_QWORD *)v22 + 144))(__p, v22);
      if (v49 >= 0)
        v35 = __p;
      else
        v35 = (void **)__p[0];
      v36 = v22[17];
      v37 = v22[18];
      v38 = *a2;
      v39 = *a2 + 8;
      if (v38[31] < 0)
        v39 = (_QWORD *)*v39;
      v40 = (*(uint64_t (**)(char *))(*(_QWORD *)v38 + 16))(v38);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = v35;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v37;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v36;
      v57 = 2080;
      v58 = v39;
      v59 = 1024;
      v60 = v40;
      _os_log_impl(&dword_1B8270000, v34, OS_LOG_TYPE_DEFAULT, "Create new partitions %s(%u/%u) for new quantizer %s(%u)", buf, 0x28u);
      if (v49 < 0)
        operator delete(__p[0]);
    }
    *__error() = v33;
    v32 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 40);
  }
  if (v22[18] != v32)
  {
    v45 = __si_assert_copy_extra_268();
    v46 = v45;
    v47 = "";
    if (v45)
      v47 = v45;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2363, "newPartitions->nVectors() == vectors->count()", v47);
    free(v46);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    goto LABEL_60;
  }
  if (v10)
  {
    v41 = (unint64_t *)&v10->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v7)
  {
    v43 = (unint64_t *)&v7->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16replaceQuantizerENSt3__110shared_ptrI9QuantizerIDF16_Li256EEEENS6_I17AnyPartitionStoreEE(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  std::__shared_weak_count *v8;
  __int128 *v9;
  char *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  _DWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  _DWORD *v18;
  NSObject *v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  void **v23;
  int v24;
  void **v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  const char *v47;
  char *v48;
  const char *v49;
  _QWORD *v50;
  _QWORD *v51;
  int v52;
  int v53;
  int v54;
  os_unfair_lock_s *v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *__p[2];
  char v61;
  void *v62[2];
  char v63;
  uint8_t buf[4];
  _QWORD *v65;
  __int16 v66;
  int v67;
  __int16 v68;
  _QWORD *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  void **v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  void **v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v6 = (os_unfair_lock_s *)(a1 + 152);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
  v7 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v10 = *(char **)(a1 + 80);
  v8 = *(std::__shared_weak_count **)(a1 + 88);
  v9 = (__int128 *)(a1 + 80);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(_DWORD **)(a1 + 96);
  v13 = *(std::__shared_weak_count **)(a1 + 104);
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
  v18 = (_DWORD *)*a3;
  if (v17 != *(_DWORD *)(*a3 + 68))
  {
    v45 = __si_assert_copy_extra_268();
    v46 = v45;
    v47 = "";
    if (v45)
      v47 = v45;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2381, "newQuantizer->count() == newPartitions->nPartitions()", v47);
LABEL_64:
    free(v46);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 48) + 40) != v18[18])
  {
    v48 = __si_assert_copy_extra_268();
    v46 = v48;
    v49 = "";
    if (v48)
      v49 = v48;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2382, "vectors->count() == newPartitions->nVectors()", v49);
    goto LABEL_64;
  }
  if (v10 && v14)
  {
    v56 = *__error();
    v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = v10 + 8;
      if (v10[31] < 0)
        v20 = (_QWORD *)*v20;
      v51 = v20;
      v21 = (*(uint64_t (**)(char *))(*(_QWORD *)v10 + 16))(v10);
      v22 = (_QWORD *)(*a2 + 8);
      v55 = v6;
      v54 = v21;
      if (*(char *)(*a2 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v50 = v22;
      v53 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
      v23 = v62;
      (*(void (**)(void **__return_ptr, _DWORD *))(*(_QWORD *)v14 + 144))(v62, v14);
      if (v63 < 0)
        v23 = (void **)v62[0];
      v24 = v14[18];
      v52 = v14[17];
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a3 + 144))(__p);
      v25 = __p;
      if (v61 < 0)
        v25 = (void **)__p[0];
      v26 = *(_DWORD *)(*a3 + 68);
      v27 = *(_DWORD *)(*a3 + 72);
      *(_DWORD *)buf = 136317442;
      v65 = v51;
      v66 = 1024;
      v67 = v54;
      v68 = 2080;
      v69 = v50;
      v70 = 1024;
      v71 = v53;
      v72 = 2080;
      v73 = v23;
      v74 = 1024;
      v75 = v24;
      v76 = 1024;
      v77 = v52;
      v78 = 2080;
      v79 = v25;
      v80 = 1024;
      v81 = v27;
      v82 = 1024;
      v83 = v26;
      _os_log_impl(&dword_1B8270000, v19, OS_LOG_TYPE_DEFAULT, "Replace quantizer %s(%u) -> %s(%u), partitions %s(%u/%u) -> %s(%u/%u)", buf, 0x4Eu);
      if (v61 < 0)
        operator delete(__p[0]);
      v6 = v55;
      if (v63 < 0)
        operator delete(v62[0]);
    }
    *__error() = v56;
    v18 = (_DWORD *)*a3;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v18 + 24))(v18))
    v28 = v14 == 0;
  else
    v28 = 1;
  if (!v28 && (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v14 + 24))(v14))
    (*(void (**)(_QWORD, _DWORD *))(*(_QWORD *)*a3 + 168))(*a3, v14);
  v29 = a2[1];
  *(_QWORD *)&v57 = *a2;
  *((_QWORD *)&v57 + 1) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = (std::__shared_weak_count *)a3[1];
  v58 = *a3;
  v59 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  os_unfair_lock_lock(v7);
  std::swap[abi:nn180100]<IVFVectorIndexTemplate<float,768>::QuantizerPartitions>(v9, &v57);
  os_unfair_lock_unlock(v7);
  v35 = v59;
  if (v59)
  {
    v36 = (unint64_t *)&v59->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  os_unfair_lock_unlock(v6);
  if (v13)
  {
    v41 = (unint64_t *)&v13->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v8)
  {
    v43 = (unint64_t *)&v8->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

_QWORD *_ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *a1 = &off_1E6E335D8;
  v2 = (std::__shared_weak_count *)a1[13];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[11];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[11];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[9];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[7];
    if (!v11)
      return a1;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[7];
    if (!v11)
      return a1;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return a1;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E33480;
  _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev((_QWORD *)(a1 + 48));
  *(_QWORD *)a1 = off_1E6E30C80;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EED0Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E33480;
  _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsED2Ev((_QWORD *)(a1 + 48));
  *(_QWORD *)a1 = off_1E6E30C80;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCCB06A4);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE8nVectorsEv(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1 + 48);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE11nPartitionsEv(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1 + 48);
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE8allExistEPKvj(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  float v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  char *v14;
  char *v15;
  const char *v16;
  uint8_t buf[4];
  double v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a3)
  {
    v5 = a1 + 48;
    v6 = a3;
    if (a3 <= 0x3E8)
    {
      while (_ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li256EE(v5, a2))
      {
        a2 += 512;
        if (!--v6)
          return a3;
      }
    }
    else
    {
      v7 = 0;
      v8 = a3 / 0xA;
      v9 = 1.0 / (float)a3;
      while (1)
      {
        v10 = v7 + 1;
        if (!(((int)v7 + 1) % v8))
        {
          v11 = *__error();
          v12 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            v18 = (float)((float)((float)v7 * 100.0) * v9);
            _os_log_impl(&dword_1B8270000, v12, OS_LOG_TYPE_DEFAULT, "allExist: %.0f%%", buf, 0xCu);
          }
          *__error() = v11;
        }
        if (!_ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li256EE(v5, a2))break;
        a2 += 512;
        ++v7;
        if (a3 == v10)
          return a3;
      }
    }
    v14 = __si_assert_copy_extra_268();
    v15 = v14;
    v16 = "";
    if (v14)
      v16 = v14;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3151, "false", v16);
    free(v15);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a3;
}

BOOL _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE12validAddressEPKv(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 32);
  v3 = *(unsigned int *)(v2 + 64);
  if ((int)v3 < 1)
  {
    v8 = -1;
  }
  else
  {
    v4 = 11;
    do
    {
      v5 = *(_QWORD **)(v2 + 8 * v4);
      if (v5 && (v6 = v5[1], v6 + 1 >= 2) && v6 <= a2 && (v7 = v5[2], v6 - v7 + v5[3] > a2))
        v8 = a2 - v6 + v7;
      else
        v8 = -1;
      if (v4 - 10 >= v3)
        break;
      ++v4;
    }
    while (v8 == -1);
  }
  return v8 != -1;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE6shadowEbPVi(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  os_unfair_lock_s *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v6 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v7 = *(std::__shared_weak_count **)(a1 + 136);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v11 = *(_QWORD *)(a1 + 144);
  v10 = *(std::__shared_weak_count **)(a1 + 152);
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  os_unfair_lock_unlock(v6);
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v11 + 160))(v11, a2, a3);
  v14 = vi_onefixedsize_disk_allocator::shadow(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32), a2, a3);
  if (!v10)
    goto LABEL_11;
  v15 = (unint64_t *)&v10->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v7)
      return v14;
  }
  else
  {
LABEL_11:
    if (!v7)
      return v14;
  }
  v17 = (unint64_t *)&v7->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v14;
}

_DWORD *_ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE17bulkInsertForTestEPKvPKjjS8_(_DWORD *result, char *a2, unsigned int *a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint8_t buf[4];
  double v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v8 = (uint64_t)(result + 12);
    v9 = a4;
    if (a4 <= 0x3E8)
    {
      do
      {
        v19 = *a5++;
        v18 = v19;
        v20 = *a3++;
        result = _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li256EEjfb(v8, v18, a2, 0xFFFFFFFFLL, 0, 3.4028e38);
        *((_QWORD *)result + 64) = v20;
        a2 += 512;
        --v9;
      }
      while (v9);
    }
    else
    {
      v10 = 0;
      v11 = a4 / 0xA;
      v12 = 1.0 / (float)a4;
      do
      {
        v15 = v10 + 1;
        if (!(((int)v10 + 1) % v11))
        {
          v16 = *__error();
          v17 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            v22 = (float)((float)((float)v10 * 100.0) * v12);
            _os_log_impl(&dword_1B8270000, v17, OS_LOG_TYPE_DEFAULT, "bulkInsertForTest: %.0f%%", buf, 0xCu);
          }
          *__error() = v16;
        }
        v13 = a5[v10];
        v14 = a3[v10];
        result = _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li256EEjfb(v8, v13, a2, 0xFFFFFFFFLL, 0, 3.4028e38);
        *((_QWORD *)result + 64) = v14;
        a2 += 512;
        v10 = v15;
      }
      while (v9 != v15);
    }
  }
  return result;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE12insertVectorEjjPKv14vec_dimensions15vec_data_format14docInvertStateyP15PostingBaseInfo(_DWORD *a1, int a2, unsigned int a3, void *a4, int a5, int a6)
{
  char *v6;
  char *v7;
  const char *v8;
  char *v9;
  const char *v10;

  if (a1[2] == a2
    && a6 <= 2
    && a1[3] == vector_dimension_vec_sizes_10743[a5]
    && vector_size_elem_sizes_10742[a6] == a1[4])
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li256EEjfb((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFFLL, 0, 3.4028e38);
    v6 = __si_assert_copy_extra_268();
    v7 = v6;
    v8 = "";
    if (v6)
      v8 = v6;
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2636, "0", v8);
  }
  else
  {
    v9 = __si_assert_copy_extra_268();
    v7 = v9;
    v10 = "";
    if (v9)
      v10 = v9;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v10);
  }
  free(v7);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE14insertForMergeEjtjPKv14vec_dimensions15vec_data_formatyjf(uint64_t a1, int a2, int a3, unsigned int a4, void *a5, int a6, int a7, uint64_t a8, float a9, unsigned int a10)
{
  char *v11;
  char *v12;
  const char *v13;

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a7 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a6]
    || vector_size_elem_sizes_10742[a7] != *(_DWORD *)(a1 + 16))
  {
    v11 = __si_assert_copy_extra_268();
    v12 = v11;
    v13 = "";
    if (v11)
      v13 = v11;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v13);
    free(v12);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16insertForCompactEjPK10CIVector_sIDF16_Li256EEyjf(a1 + 48, a4, a5, a8, a10, a9);
  return 1;
}

_DWORD *_ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE13insertForTestEjjPKv14vec_dimensions15vec_data_formatj(_DWORD *a1, int a2, unsigned int a3, void *a4, int a5, int a6, unsigned int a7)
{
  uint64_t v7;
  _DWORD *result;
  char *v9;
  char *v10;
  const char *v11;

  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != a1[4])
  {
    v9 = __si_assert_copy_extra_268();
    v10 = v9;
    v11 = "";
    if (v9)
      v11 = v9;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v11);
    free(v10);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v7 = a7;
  result = _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li256EEjfb((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFFLL, 0, 3.4028e38);
  *((_QWORD *)result + 64) = v7;
  return result;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE5trainERKNSt3__16vectorIP22AnyVectorIndexInstanceNS5_9allocatorIS8_EEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  char *v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  char *v30;
  char *v31;
  const char *v32;
  char *v33;
  char *v34;
  const char *v35;
  char *v36;
  const char *v37;
  uint64_t v38;
  void *__p;
  _QWORD *v40;
  char *v41;

  v3 = *(_QWORD **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  v4 = v2 - *(_QWORD *)a2;
  if (v2 == *(_QWORD *)a2)
  {
    v33 = __si_assert_copy_extra_268();
    v34 = v33;
    v35 = "";
    if (v33)
      v35 = v33;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3170, "vi.size() > 0", v35);
    goto LABEL_53;
  }
  if (*v3 != a1)
  {
    v36 = __si_assert_copy_extra_268();
    v34 = v36;
    v37 = "";
    if (v36)
      v37 = v36;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3171, "this == vi[0]", v37);
LABEL_53:
    free(v34);
    if (__valid_fs(-1))
      v38 = 2989;
    else
      v38 = 3072;
    *(_DWORD *)v38 = -559038737;
LABEL_57:
    abort();
  }
  v7 = (char *)operator new(8uLL);
  *(_QWORD *)v7 = a1 + 48;
  v8 = v7 + 8;
  v40 = v7 + 8;
  v41 = v7 + 8;
  __p = v7;
  if (v4 < 9)
    goto LABEL_39;
  v9 = 1;
  do
  {
    v11 = v3[v9];
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(v11 + 8)
      || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(v11 + 20)
      || *(_DWORD *)(a1 + 12) != *(_DWORD *)(v11 + 12)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(v11 + 16))
    {
      v30 = __si_assert_copy_extra_268();
      v31 = v30;
      v32 = "";
      if (v30)
        v32 = v30;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v32);
      free(v31);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v12 = v11 + 48;
    if (v8 < v41)
    {
      *(_QWORD *)v8 = v12;
      v10 = v8 + 8;
      goto LABEL_6;
    }
    v13 = (char *)__p;
    v14 = v8 - (_BYTE *)__p;
    v15 = (v8 - (_BYTE *)__p) >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      goto LABEL_57;
    v17 = v41 - (_BYTE *)__p;
    if ((v41 - (_BYTE *)__p) >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = operator new(8 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = v12;
    v10 = v20 + 1;
    if (v8 == v13)
    {
      __p = &v19[8 * v15];
      v41 = v21;
LABEL_33:
      operator delete(v8);
      goto LABEL_6;
    }
    v22 = v8 - 8 - v13;
    if (v22 > 0x167
      && &v19[v14 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] <= &v19[v14 - 8]
      && &v8[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] <= v8 - 8
      && (unint64_t)(v8 - v19 - v14) >= 0x20)
    {
      v25 = (v22 >> 3) + 1;
      v23 = &v8[-8 * (v25 & 0x3FFFFFFFFFFFFFFCLL)];
      v26 = &v19[8 * v15 - 16];
      v27 = v8 - 16;
      v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v20 -= v25 & 0x3FFFFFFFFFFFFFFCLL;
      if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_30;
    }
    else
    {
      v23 = v8;
    }
    do
    {
      v24 = *((_QWORD *)v23 - 1);
      v23 -= 8;
      *--v20 = v24;
    }
    while (v23 != v13);
    v13 = (char *)__p;
LABEL_30:
    __p = v20;
    v41 = v21;
    v8 = v13;
    if (v13)
      goto LABEL_33;
LABEL_6:
    v40 = v10;
    ++v9;
    v3 = *(_QWORD **)a2;
    v8 = (char *)v10;
  }
  while (v9 < (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v7 = (char *)__p;
LABEL_39:
  _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(_QWORD *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)&__p);
  if (v7)
    operator delete(v7);
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE14mergeUpdateSetEPK22AnyVectorIndexInstanceP15PostingBaseInfoP17TermIdContainer_s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _DWORD *inserted;
  uint64_t v26;
  uint64_t result;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  const char *v36;
  char *v37;
  const char *v38;
  _DWORD v39[4];
  void *__src;
  uint64_t v41;
  uint8_t buf[512];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v37 = __si_assert_copy_extra_268();
    v35 = v37;
    v38 = "";
    if (v37)
      v38 = v37;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v38);
LABEL_38:
    free(v35);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v7 = *__error();
  v8 = _SILogForLogForCategory(16);
  v9 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v10;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v11;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v12;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&buf[22] = v13;
    _os_log_impl(&dword_1B8270000, v8, v9, "mergeUpdateSet(termIds) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v7;
  v14 = a2 + 48;
  v15 = operator new(0x10uLL);
  *(_QWORD *)&buf[8] = v15 + 2;
  *(_QWORD *)&buf[16] = v15 + 2;
  *v15 = a1 + 48;
  v15[1] = v14;
  *(_QWORD *)buf = v15;
  _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(_QWORD *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)buf);
  operator delete(v15);
  v16 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(v14);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::beginMerge(a1 + 48);
  while (1)
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE12enumerator_s4nextEv((uint64_t)v39, v16);
    if (!__src)
      break;
    v17 = v39[0];
    v18 = *(float *)&v39[1];
    v19 = v39[2];
    v20 = v41;
    memcpy(buf, __src, sizeof(buf));
    v22 = *(_QWORD *)(a4 + 8);
    v21 = *(_QWORD *)(a4 + 16);
    v23 = v22 + 1;
    if (v22 + 1 < v21)
    {
      v24 = *(_QWORD **)a4;
      goto LABEL_17;
    }
    if (v21)
    {
      if (v23 >= v21)
        goto LABEL_14;
    }
    else
    {
      *(_QWORD *)(a4 + 16) = 1024;
      v21 = 1024;
      if (v23 >= 0x400)
      {
        do
LABEL_14:
          v21 *= 2;
        while (v23 >= v21);
        *(_QWORD *)(a4 + 16) = v21;
      }
    }
    v24 = malloc_type_realloc(*(void **)a4, 24 * v21, 0x10200409F4E64B8uLL);
    *(_QWORD *)a4 = v24;
    v22 = *(_QWORD *)(a4 + 8);
    v23 = v22 + 1;
LABEL_17:
    v24[3 * v22 + 1] = v20;
    *(_QWORD *)(a4 + 8) = v23;
    if (*(_DWORD *)(a1 + 204) == -1)
    {
      v34 = __si_assert_copy_extra_268();
      v35 = v34;
      v36 = "";
      if (v34)
        v36 = v34;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2689, "mergeBeginVectorOffset < VECTOR_NOT_FOUND", v36);
      goto LABEL_38;
    }
    inserted = _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li256EEjfb(a1 + 48, v19, buf, v17, 0, v18);
    v26 = *((_QWORD *)inserted + 64);
    if (!v26)
    {
      v26 = (*(_DWORD *)(a4 + 24) + 1);
      *(_DWORD *)(a4 + 24) = v26;
      *((_QWORD *)inserted + 64) = v26;
    }
    *(_DWORD *)(*(_QWORD *)a4 + 24 * v22) = v26;
  }
  result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::endMerge(a1 + 48);
  if (v16)
  {
    std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100](v16 + 32);
    v28 = *(std::__shared_weak_count **)(v16 + 24);
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = *(std::__shared_weak_count **)(v16 + 8);
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    return MEMORY[0x1BCCB06A4](v16, 0x10A0C40B50FE552);
  }
  return result;
}

int *_ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE14mergeUpdateSetEPK22AnyVectorIndexInstanceP15PostingBaseInfojy(int *result, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  const char *v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char *v14;
  const char *v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (result[2] != *(_DWORD *)(a2 + 8)
    || (v3 = result, *((unsigned __int16 *)result + 10) != *(unsigned __int16 *)(a2 + 20))
    || result[3] != *(_DWORD *)(a2 + 12)
    || result[4] != *(_DWORD *)(a2 + 16))
  {
    v5 = __si_assert_copy_extra_268();
    v6 = v5;
    v7 = "";
    if (v5)
      v7 = v5;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v7);
LABEL_11:
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (dword_1EF19FCCC >= 5)
  {
    v8 = *__error();
    v9 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (*(uint64_t (**)(int *))(*(_QWORD *)v3 + 16))(v3);
      v11 = (*(uint64_t (**)(int *))(*(_QWORD *)v3 + 24))(v3);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      *(_DWORD *)buf = 67109888;
      v17 = v10;
      v18 = 1024;
      v19 = v11;
      v20 = 1024;
      v21 = v12;
      v22 = 1024;
      v23 = v13;
      _os_log_impl(&dword_1B8270000, v9, OS_LOG_TYPE_DEFAULT, "mergeUpdateSet(DocID) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
    }
    result = __error();
    *result = v8;
  }
  v4 = *(_QWORD *)(a2 + 80);
  if (*(_DWORD *)(v4 + 24))
  {
    _ZNK22IVFVectorIndexTemplateIDF16_Li256EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratorptEv(v4, 0);
    _ZNK22IVFVectorIndexTemplateIDF16_Li256EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratorptEv(v4, 0);
    _ZNK22IVFVectorIndexTemplateIDF16_Li256EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratorptEv(v4, 0);
    v14 = __si_assert_copy_extra_268();
    v6 = v14;
    v15 = "";
    if (v14)
      v15 = v14;
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2447, "0", v15);
    goto LABEL_11;
  }
  return result;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE21mergeUpdateSetForTestEPK22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *inserted;
  uint64_t v18;
  uint64_t result;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  const char *v28;
  char *v29;
  const char *v30;
  uint8_t buf[8];
  _QWORD *v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v26 = __si_assert_copy_extra_268();
    v27 = v26;
    v28 = "";
    if (v26)
      v28 = v26;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v28);
LABEL_32:
    free(v27);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  v6 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v7;
    LOWORD(v32) = 1024;
    *(_DWORD *)((char *)&v32 + 2) = v8;
    HIWORD(v32) = 1024;
    LODWORD(v33) = v9;
    WORD2(v33) = 1024;
    *(_DWORD *)((char *)&v33 + 6) = v10;
    _os_log_impl(&dword_1B8270000, v5, v6, "mergeUpdateSetForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v4;
  v11 = operator new(0x10uLL);
  v32 = v11 + 2;
  *(_QWORD *)&v33 = v11 + 2;
  *v11 = a1 + 48;
  v11[1] = a2 + 48;
  *(_QWORD *)buf = v11;
  _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(_QWORD *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)buf);
  operator delete(v11);
  v12 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::beginMerge(a1 + 48);
  v15 = 0;
  while (1)
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE12enumerator_s4nextEv((uint64_t)buf, v12);
    if (!(_QWORD)v33)
      break;
    v16 = *(unsigned int *)(*((_QWORD *)&v33 + 1) + 8);
    inserted = _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li256EEjfb(a1 + 48, v32, (void *)v33, *(unsigned int *)buf, 0, *(float *)&buf[4]);
    v18 = *((_QWORD *)inserted + 64);
    *((_QWORD *)inserted + 64) = v16;
    if (v18)
      ++v15;
  }
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::endMerge(a1 + 48);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result + v15 != v14 + v13)
  {
    v29 = __si_assert_copy_extra_268();
    v27 = v29;
    v30 = "";
    if (v29)
      v30 = v29;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3267, "nVectors() + dup == old + added", v30);
    goto LABEL_32;
  }
  if (v12)
  {
    std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100](v12 + 32);
    v20 = *(std::__shared_weak_count **)(v12 + 24);
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = *(std::__shared_weak_count **)(v12 + 8);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    return MEMORY[0x1BCCB06A4](v12, 0x10A0C40B50FE552);
  }
  return result;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE17mergeIndexForTestEP22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  float v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  _DWORD *inserted;
  uint64_t v17;
  uint64_t result;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  const char *v27;
  char *v28;
  const char *v29;
  uint8_t buf[4];
  float v31;
  _BYTE v32[6];
  __int16 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v25 = __si_assert_copy_extra_268();
    v26 = v25;
    v27 = "";
    if (v25)
      v27 = v25;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v27);
LABEL_32:
    free(v26);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  v6 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v5, v6))
  {
    LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    v31 = v7;
    *(_WORD *)v32 = 1024;
    *(_DWORD *)&v32[2] = v8;
    v33 = 1024;
    LODWORD(v34) = v9;
    WORD2(v34) = 1024;
    *(_DWORD *)((char *)&v34 + 6) = v10;
    _os_log_impl(&dword_1B8270000, v5, v6, "mergeIndexForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v4;
  v11 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator(a2 + 48);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::beginMerge(a1 + 48);
  v14 = 0;
  while (1)
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12enumerator_s4nextEv((uint64_t)buf, v11);
    if (!(_QWORD)v34)
      break;
    v15 = **((_QWORD **)&v34 + 1);
    inserted = _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li256EEjfb(a1 + 48, *(unsigned int *)v32, (void *)v34, *(unsigned int *)buf, 0, v31);
    v17 = *((_QWORD *)inserted + 64);
    *((_QWORD *)inserted + 64) = v15;
    if (v17)
      ++v14;
  }
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::endMerge(a1 + 48);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result + v14 != v13 + v12)
  {
    v28 = __si_assert_copy_extra_268();
    v26 = v28;
    v29 = "";
    if (v28)
      v29 = v28;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3281, "nVectors() + dup == old + added", v29);
    goto LABEL_32;
  }
  if (v11)
  {
    std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100](v11 + 32);
    v19 = *(std::__shared_weak_count **)(v11 + 24);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = *(std::__shared_weak_count **)(v11 + 8);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    return MEMORY[0x1BCCB06A4](v11, 0x10A0C40B50FE552);
  }
  return result;
}

void _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE4dumpEbbPViPvU13block_pointerFbjPKvybjfE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  os_unfair_lock_s *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD v37[2];
  uint64_t (*v38)(uint64_t, uint64_t, BOOL *);
  void *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[3];
  __int128 v48;
  __int128 v49;
  char v50;
  __int128 v51;
  __int128 v52;

  v9 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v10 = *(std::__shared_weak_count **)(a1 + 136);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(_QWORD *)(a1 + 144);
  v13 = *(std::__shared_weak_count **)(a1 + 152);
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  os_unfair_lock_unlock(v9);
  v46 = 0u;
  memset(v47, 0, sizeof(v47));
  v45 = 0u;
  v43 = v14;
  v44 = v13;
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(_QWORD *)(a1 + 96);
  v20 = *(std::__shared_weak_count **)(a1 + 104);
  v42[0] = v19;
  v42[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v45, &v43, v42);
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v45, &v43, v42);
  }
  v24 = v44;
  if (v44)
  {
    v25 = (unint64_t *)&v44->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 0x40000000;
  v38 = ___ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke;
  v39 = &unk_1E6E33908;
  v40 = a6;
  v41 = a4;
  v51 = 0u;
  v52 = 0u;
  v50 = 0;
  do
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12enumerator_s4nextEv((uint64_t)&v48, (uint64_t)&v45);
    v51 = v48;
    v52 = v49;
    if (!(_QWORD)v49)
      break;
    v38((uint64_t)v37, (uint64_t)&v51, (BOOL *)&v50);
  }
  while (!v50);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v47);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (!*((_QWORD *)&v46 + 1))
    goto LABEL_30;
  v28 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (!*((_QWORD *)&v45 + 1))
      goto LABEL_36;
  }
  else
  {
LABEL_30:
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (!*((_QWORD *)&v45 + 1))
      goto LABEL_36;
  }
  v31 = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  if (!v13)
    goto LABEL_40;
LABEL_36:
  v33 = (unint64_t *)&v13->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!v10)
      return;
  }
  else
  {
LABEL_40:
    if (!v10)
      return;
  }
  v35 = (unint64_t *)&v10->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE5flushEy(uint64_t a1, uint64_t a2)
{
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, a2);
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE7compactEP22AnyVectorIndexInstanceP12uint32_map_tP11TermIdStore18CICompactCallbacksPVi(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  int v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  const char *v53;
  char *v54;
  const char *v55;
  int v56;
  __int128 v59;
  __int128 v60;
  _QWORD v61[2];
  uint64_t v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  __int128 v65;
  _OWORD v66[3];
  _QWORD v67[3];
  char v68;
  uint64_t v69[2];
  void *__p[3];
  __int128 v71;
  __int128 v72;
  char v73;
  __int128 v74;
  __int128 v75;
  uint8_t buf[8];
  uint64_t v77;
  __int128 v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v10 = *__error();
  v11 = _SILogForLogForCategory(16);
  v12 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v11, v12))
  {
    v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v13 = a4;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v56;
    LOWORD(v77) = 1024;
    *(_DWORD *)((char *)&v77 + 2) = v14;
    a4 = v13;
    HIWORD(v77) = 1024;
    LODWORD(v78) = v15;
    WORD2(v78) = 1024;
    *(_DWORD *)((char *)&v78 + 6) = v16;
    _os_log_impl(&dword_1B8270000, v11, v12, "compact %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v10;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v51 = __si_assert_copy_extra_268();
    v52 = v51;
    v53 = "";
    if (v51)
      v53 = v51;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v53);
LABEL_70:
    free(v52);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v59 = *a5;
  v60 = a5[1];
  v17 = a2 + 48;
  if (IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a2 + 48))
  {
    v54 = __si_assert_copy_extra_268();
    v52 = v54;
    v55 = "";
    if (v54)
      v55 = v54;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2566, "target->nVectors() == 0", v55);
    goto LABEL_70;
  }
  v18 = operator new(8uLL);
  __p[0] = v18;
  *v18 = a1 + 48;
  __p[1] = v18 + 1;
  __p[2] = v18 + 1;
  _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(_QWORD *)(a1 + 112), *(std::__shared_weak_count **)(a1 + 120), (uint64_t)__p);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v20 = *(_QWORD *)(a1 + 128);
  v19 = *(std::__shared_weak_count **)(a1 + 136);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v23 = *(_QWORD *)(a1 + 144);
  v24 = *(std::__shared_weak_count **)(a1 + 152);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  v69[0] = v20;
  v69[1] = (uint64_t)v19;
  if (v19)
  {
    v27 = (unint64_t *)&v19->__shared_owners_;
    v28 = a3;
    do
      v29 = __ldxr(v27);
    while (__stxr(v29 + 1, v27));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(v17, v69);
    do
      v30 = __ldaxr(v27);
    while (__stlxr(v30 - 1, v27));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(v17, v69);
    v28 = a3;
  }
  v67[0] = 0;
  v67[1] = v67;
  v67[2] = 0x2000000000;
  v68 = 1;
  v65 = 0u;
  memset(v66, 0, sizeof(v66));
  v64 = 0u;
  v62 = v23;
  v63 = v24;
  if (v24)
  {
    v31 = (unint64_t *)&v24->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = *(_QWORD *)(a1 + 96);
  v34 = *(std::__shared_weak_count **)(a1 + 104);
  v61[0] = v33;
  v61[1] = v34;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v64, &v62, v61);
    do
      v37 = __ldaxr(v35);
    while (__stlxr(v37 - 1, v35));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v64, &v62, v61);
  }
  v38 = v63;
  if (v63)
  {
    v39 = (unint64_t *)&v63->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v77 = 0x40000000;
  *(_QWORD *)&v78 = ___ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE7compactIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_P12uint32_map_tP11TermIdStore18CICompactCallbacksPVi_block_invoke;
  *((_QWORD *)&v78 + 1) = &unk_1E6E33930;
  v79 = v67;
  v80 = v28;
  v81 = a4;
  v82 = v17;
  v83 = a6;
  v84 = v59;
  v85 = v60;
  v74 = 0u;
  v75 = 0u;
  v73 = 0;
  do
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12enumerator_s4nextEv((uint64_t)&v71, (uint64_t)&v64);
    v74 = v71;
    v75 = v72;
    if (!(_QWORD)v72)
      break;
    ((void (*)(uint8_t *, __int128 *, char *))v78)(buf, &v74, &v73);
  }
  while (!v73);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v66);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
  if (*((_QWORD *)&v64 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  _Block_object_dispose(v67, 8);
  if (v24)
  {
    v47 = (unint64_t *)&v24->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v19)
  {
    v49 = (unint64_t *)&v19->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p[0])
    operator delete(__p[0]);
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE14compactForTestEP22AnyVectorIndexInstancePVi(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  NSObject *v7;
  os_log_type_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  const char *v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v13 = __si_assert_copy_extra_268();
    v14 = v13;
    v15 = "";
    if (v13)
      v15 = v13;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v6 = *__error();
  v7 = _SILogForLogForCategory(16);
  v8 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    v22 = 1024;
    v23 = v12;
    _os_log_impl(&dword_1B8270000, v7, v8, "compactForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v6;
  _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi(a1 + 48, a2 + 48, a3);
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE7subvertEPK22AnyVectorIndexInstance(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  const char *v28;

  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v26 = __si_assert_copy_extra_268();
    v27 = v26;
    v28 = "";
    if (v26)
      v28 = v26;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v28);
    free(v27);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = *(_QWORD *)(a1 + 144);
  v7 = *(std::__shared_weak_count **)(a1 + 152);
  if (v7)
  {
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 160));
  v13 = *(std::__shared_weak_count **)(a2 + 136);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v17 = *(_QWORD *)(a2 + 144);
  v16 = *(std::__shared_weak_count **)(a2 + 152);
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 160));
  if (v13)
  {
    v20 = (unint64_t *)&v13->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 168))(v8, v17);
  vi_onefixedsize_disk_allocator::subvert(*(_QWORD *)(*(_QWORD *)(a2 + 96) + 32), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 32));
  if (!v16)
    goto LABEL_31;
  v22 = (unint64_t *)&v16->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!v7)
      return;
  }
  else
  {
LABEL_31:
    if (!v7)
      return;
  }
  v24 = (unint64_t *)&v7->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

BOOL _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE6unlinkEv(uint64_t a1)
{
  os_unfair_lock_s *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  _BOOL8 v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v23;
  _QWORD *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a1 + 144);
  v6 = *(std::__shared_weak_count **)(a1 + 152);
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  os_unfair_lock_unlock(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  v10 = *(_QWORD *)(a1 + 96);
  v11 = *__error();
  v12 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = (_QWORD *)(v10 + 56);
    if (*(char *)(v10 + 79) < 0)
      v13 = (_QWORD *)*v13;
    v14 = *(_DWORD *)(v10 + 40);
    v15 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v10 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24), 0x210uLL)+ 520);
    v16 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v10 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(v10 + 32) + 16) * (*(_DWORD *)(v10 + 40) - 1), 0x210uLL)+ 520);
    v23 = 136315906;
    v24 = v13;
    v25 = 1024;
    v26 = v14;
    v27 = 1024;
    v28 = v15;
    v29 = 1024;
    v30 = v16;
    _os_log_impl(&dword_1B8270000, v12, OS_LOG_TYPE_DEFAULT, "unlink VectorStore %s(%u)[%u,%u]", (uint8_t *)&v23, 0x1Eu);
  }
  *__error() = v11;
  v17 = vi_onefixedsize_disk_allocator::unlinkStorage(*(_QWORD *)(v10 + 32));
  if (v6)
  {
    v18 = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v17;
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE8truncateEv(uint64_t a1)
{
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  os_unfair_lock_s *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint8_t v16[16];

  if (*(_BYTE *)(a1 + 208))
  {
    v1 = *__error();
    v2 = _SILogForLogForCategory(16);
    v3 = dword_1EF19FCCC < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1EF19FCCC < 3)))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1B8270000, v2, v3, "*warn* call truncate on readOnly index.", v16, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, 0);
    _ZN22IVFVectorIndexTemplateIDF16_Li256EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsE8truncateEv(*(_QWORD *)(a1 + 96));
    v5 = (os_unfair_lock_s *)(a1 + 160);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
    v6 = *(std::__shared_weak_count **)(a1 + 136);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v10 = *(_QWORD *)(a1 + 144);
    v9 = *(std::__shared_weak_count **)(a1 + 152);
    if (v9)
    {
      v11 = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      os_unfair_lock_unlock(v5);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      os_unfair_lock_unlock(v5);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
    }
    if (v6)
    {
      v14 = (unint64_t *)&v6->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE12makeReadOnlyEv(uint64_t a1)
{
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v5;
  int v6;
  NSObject *v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  int *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  _QWORD *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 208))
  {
    v1 = *__error();
    v2 = _SILogForLogForCategory(16);
    v3 = dword_1EF19FCCC < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1EF19FCCC < 3)))
    {
      LOWORD(v29) = 0;
      _os_log_impl(&dword_1B8270000, v2, v3, "*warn* call makeReadOnly on readOnly index.", (uint8_t *)&v29, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::flush(a1 + 48, 0);
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *__error();
    v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = (_QWORD *)(v5 + 56);
      if (*(char *)(v5 + 79) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_DWORD *)(v5 + 40);
      v10 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v5 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 24), 0x210uLL)+ 520);
      v11 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v5 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(v5 + 32) + 16) * (*(_DWORD *)(v5 + 40) - 1), 0x210uLL)+ 520);
      v29 = 136315906;
      v30 = v8;
      v31 = 1024;
      v32 = v9;
      v33 = 1024;
      v34 = v10;
      v35 = 1024;
      v36 = v11;
      _os_log_impl(&dword_1B8270000, v7, OS_LOG_TYPE_DEFAULT, "makeReadOnly VectorStore %s(%u)[%u,%u]", (uint8_t *)&v29, 0x1Eu);
    }
    *__error() = v6;
    _ZN22IVFVectorIndexTemplateIDF16_Li256EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsE8truncateEv(v5);
    v12 = *(_QWORD *)(v5 + 32);
    fd_make_readonly(*(_QWORD *)(v12 + 40));
    v13 = *(_QWORD *)(v12 + 40);
    if (v13)
    {
      do
      {
        v14 = fchmodat(*(_DWORD *)(v13 + 44), *(const char **)(v13 + 72), 0x100u, 2048);
        v15 = g_prot_error_callback;
        if (v14 != -1 || g_prot_error_callback == 0)
          break;
        v17 = *(unsigned int *)(v13 + 40);
        v18 = __error();
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v15 + 16))(v15, v17, *v18, 19) & 1) != 0);
    }
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
    v19 = *(std::__shared_weak_count **)(a1 + 136);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    v23 = *(_QWORD *)(a1 + 144);
    v22 = *(std::__shared_weak_count **)(a1 + 152);
    if (v22)
    {
      v24 = (unint64_t *)&v22->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 120))(v23);
      *(_BYTE *)(a1 + 208) = 1;
      do
        v26 = __ldaxr(v24);
      while (__stlxr(v26 - 1, v24));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 120))(v23);
      *(_BYTE *)(a1 + 208) = 1;
    }
    if (v19)
    {
      v27 = (unint64_t *)&v19->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE13makePurgeableEv(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  _QWORD *v5;
  int v6;
  int v7;
  int v8;
  os_unfair_lock_s *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 96);
  v3 = *__error();
  v4 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (_QWORD *)(v2 + 56);
    if (*(char *)(v2 + 79) < 0)
      v5 = (_QWORD *)*v5;
    v6 = *(_DWORD *)(v2 + 40);
    v7 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v2 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v2 + 32) + 24), 0x210uLL)
                   + 520);
    v8 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v2 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v2 + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(v2 + 32) + 16) * (*(_DWORD *)(v2 + 40) - 1), 0x210uLL)+ 520);
    v20 = 136315906;
    v21 = v5;
    v22 = 1024;
    v23 = v6;
    v24 = 1024;
    v25 = v7;
    v26 = 1024;
    v27 = v8;
    _os_log_impl(&dword_1B8270000, v4, OS_LOG_TYPE_DEFAULT, "makePurgeable VectorStore %s(%u)[%u,%u]", (uint8_t *)&v20, 0x1Eu);
  }
  *__error() = v3;
  fd_mark_purgable(*(_DWORD **)(*(_QWORD *)(v2 + 32) + 40));
  v9 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v10 = *(std::__shared_weak_count **)(a1 + 136);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(_QWORD *)(a1 + 144);
  v13 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v13)
  {
    os_unfair_lock_unlock(v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 128))(v14);
    if (!v10)
      return;
    goto LABEL_18;
  }
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  os_unfair_lock_unlock(v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 128))(v14);
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v10)
  {
LABEL_18:
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE6renameEPKc(uint64_t a1, const char *a2)
{
  int v4;
  NSObject *v5;
  size_t v6;
  std::string::size_type v7;
  std::string *p_buf;
  uint64_t v9;
  uint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  _QWORD *v23;
  int v24;
  int v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::string::value_type __s[23];
  char v32;
  std::string v33;
  std::string buf;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    _os_log_impl(&dword_1B8270000, v5, OS_LOG_TYPE_DEFAULT, "rename: %s", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v4;
  v6 = strlen(a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_buf = (std::string *)operator new(v9 + 1);
    buf.__r_.__value_.__l.__size_ = v7;
    buf.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_10;
  }
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = v6;
  p_buf = &buf;
  if (v6)
LABEL_10:
    memcpy(p_buf, a2, v7);
  p_buf->__r_.__value_.__s.__data_[v7] = 0;
  v32 = 11;
  strcpy(__s, ".partitions");
  memset(&v33, 0, sizeof(v33));
  v11 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v33, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  else
    v33 = buf;
  std::string::append(&v33, __s, 0xBuLL);
  if (v32 < 0)
  {
    operator delete(*(void **)__s);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_16;
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
LABEL_16:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v12 = *(std::__shared_weak_count **)(a1 + 136);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v16 = *(_QWORD *)(a1 + 144);
  v15 = *(std::__shared_weak_count **)(a1 + 152);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v33;
  else
    v19 = (std::string *)v33.__r_.__value_.__r.__words[0];
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 152))(v16, v19);
  v20 = *(_QWORD *)(a1 + 96);
  v21 = *__error();
  v22 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v23 = (_QWORD *)(v20 + 56);
    if (*(char *)(v20 + 79) < 0)
      v23 = (_QWORD *)*v23;
    v24 = *(_DWORD *)(v20 + 40);
    v25 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v20 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v20 + 32) + 24), 0x210uLL)+ 520);
    v26 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v20 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v20 + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(v20 + 32) + 16) * (*(_DWORD *)(v20 + 40) - 1), 0x210uLL)+ 520);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)a2;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
    v35 = v24;
    v36 = 1024;
    v37 = v25;
    v38 = 1024;
    v39 = v26;
    _os_log_impl(&dword_1B8270000, v22, OS_LOG_TYPE_DEFAULT, "rename VectorStore %s -> %s(%u)[%u,%u]", (uint8_t *)&buf, 0x28u);
  }
  *__error() = v21;
  MEMORY[0x1BCCB03B0](v20 + 56, a2);
  fd_rename(*(_QWORD *)(*(_QWORD *)(v20 + 32) + 40), a2);
  if (v15)
  {
    v27 = (unint64_t *)&v15->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (!v12)
    goto LABEL_38;
  v29 = (unint64_t *)&v12->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (v30)
  {
LABEL_38:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
LABEL_39:
    operator delete(v33.__r_.__value_.__l.__data_);
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE14storeUpdateSetEP15RelativePostingP14store_stream_t()
{
  char *v0;
  char *v1;
  const char *v2;

  v0 = __si_assert_copy_extra_268();
  v1 = v0;
  v2 = "";
  if (v0)
    v2 = v0;
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2998, "false", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

void _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE16restoreUpdateSetEP15PostingBaseInfoP14store_stream_t()
{
  char *v0;
  char *v1;
  const char *v2;

  v0 = __si_assert_copy_extra_268();
  v1 = v0;
  v2 = "";
  if (v0)
    v2 = v0;
  __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3003, "false", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE(uint64_t a1, int a2, int a3, float16x8_t *a4, int a5, int a6, int a7, char a8, float a9, uint64_t a10)
{
  uint64_t v13;
  int v14;
  _QWORD *v15;
  char *v17;
  char *v18;
  const char *v19;
  _QWORD v20[5];

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(a1 + 16))
  {
    v17 = __si_assert_copy_extra_268();
    v18 = v17;
    v19 = "";
    if (v17)
      v19 = v17;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v19);
    free(v18);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v13 = a1 + 48;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 0x40000000;
  v20[2] = ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke;
  v20[3] = &unk_1E6E33958;
  v20[4] = a10;
  if ((a7 - 10001) >= 0xFFFFD8F0)
    v14 = a7;
  else
    v14 = 10000;
  v15 = (_QWORD *)operator new();
  *(_DWORD *)v15 = v14;
  v15[2] = 0;
  v15[3] = 0;
  v15[1] = 0;
  _ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li256EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(v13, a4, a8, v15, 0, a9);
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNProcessResult((uint64_t)v15, (uint64_t)v20);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE10aNNForTestEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvjfEj(uint64_t a1, int a2, int a3, float16x8_t *a4, int a5, int a6, int a7, char a8, float a9, uint64_t a10, unsigned int a11)
{
  uint64_t v14;
  int v15;
  _QWORD *v16;
  char *v18;
  char *v19;
  const char *v20;

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(a1 + 16))
  {
    v18 = __si_assert_copy_extra_268();
    v19 = v18;
    v20 = "";
    if (v18)
      v20 = v18;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v20);
    free(v19);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v14 = a1 + 48;
  if ((a7 - 10001) >= 0xFFFFD8F0)
    v15 = a7;
  else
    v15 = 10000;
  v16 = (_QWORD *)operator new();
  *(_DWORD *)v16 = v15;
  v16[2] = 0;
  v16[3] = 0;
  v16[1] = 0;
  _ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li256EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(v14, a4, a8, v16, a11, a9);
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNForTestProcessResult((uint64_t)v16, a10);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE20createCandidateQueueEj(uint64_t a1, int a2)
{
  int v2;
  uint64_t result;

  if ((a2 - 10001) >= 0xFFFFD8F0)
    v2 = a2;
  else
    v2 = 10000;
  result = operator new();
  *(_DWORD *)result = v2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

void _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE3aNNEjtPKv14vec_dimensions15vec_data_formatfbPv(uint64_t a1, int a2, int a3, float16x8_t *a4, int a5, int a6, char a7, _QWORD *a8, float a9)
{
  char *v9;
  char *v10;
  const char *v11;

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(a1 + 16))
  {
    v9 = __si_assert_copy_extra_268();
    v10 = v9;
    v11 = "";
    if (v9)
      v11 = v9;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v11);
    free(v10);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  _ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li256EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(a1 + 48, a4, a7, a8, 0, a9);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE16aNNProcessResultEPvU13block_pointerFvS5_fE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[5];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke;
  v4[3] = &unk_1E6E339B8;
  v4[4] = a3;
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNProcessResult(a2, (uint64_t)v4);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE23aNNForTestProcessResultEPvU13block_pointerFvjfE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::aNNForTestProcessResult(a2, a3);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE24aNNForDebugProcessResultEPvU13block_pointerFvjjfE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  __int128 *v15;
  BOOL v16;
  int v17;
  __int128 *v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  int v23;
  NSObject *v24;
  void **v25;
  __int128 *v26;
  char *v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  void **v31;
  void *v32;
  uint64_t v33;
  int v35;
  __int128 *v36;
  CFIndex AppIntegerValue;
  __int128 *v38;
  __int128 *v39;
  uint64_t v40;
  uint8_t v41[4];
  void **v42;
  void *__p[2];
  uint64_t v44;
  uint64_t v45;
  __int128 buf;
  uint64_t v47;
  _QWORD v48[8];
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v5 = *__error();
  v6 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4;
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_1B8270000, v6, OS_LOG_TYPE_DEFAULT, "search return %zu results", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v5;
  LOBYTE(buf) = 0;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("IVFANNLogQueryResult"), CFSTR("com.apple.Spotlight"), (Boolean *)&buf);
  v35 = buf;
  v61 = 0u;
  v51 = 0;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v50 = 0u;
  v49 = 0u;
  memset(v48, 0, sizeof(v48));
  v8 = MEMORY[0x1E0DE4FD0] + 104;
  v52 = MEMORY[0x1E0DE4FD0] + 104;
  v9 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v10 = MEMORY[0x1E0DE4FD0] + 64;
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v47 = MEMORY[0x1E0DE4FD0] + 64;
  *(_QWORD *)&buf = v11;
  *(_QWORD *)((char *)&buf + *(_QWORD *)(v11 - 24)) = v12;
  *((_QWORD *)&buf + 1) = 0;
  v13 = (std::ios_base *)((char *)&buf + *(_QWORD *)(buf - 24));
  std::ios_base::init(v13, v48);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v14 = v9[5];
  v47 = v9[4];
  *(_QWORD *)((char *)&v48[-1] + *(_QWORD *)(v47 - 24)) = v14;
  *(_QWORD *)&buf = v9[1];
  *(_QWORD *)((char *)&buf + *(_QWORD *)(buf - 24)) = v9[6];
  v52 = v8;
  *(_QWORD *)&buf = MEMORY[0x1E0DE4FD0] + 24;
  v47 = v10;
  std::streambuf::basic_streambuf();
  v48[0] = MEMORY[0x1E0DE4FB8] + 16;
  v49 = 0u;
  v50 = 0u;
  LODWORD(v51) = 24;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::allItems(&v38, *(_BYTE **)(a2 + 8), *(_BYTE **)(a2 + 16));
  v15 = v39;
  v36 = v38;
  if (v38 != v39)
  {
    if (AppIntegerValue)
      v16 = v35 == 0;
    else
      v16 = 1;
    if (v16)
    {
      v26 = v38;
      do
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD, float))(a3 + 16))(a3, *(unsigned int *)v26, *((unsigned int *)v26 + 2), *((float *)v26 + 3));
        ++v26;
      }
      while (v26 != v15);
    }
    else
    {
      v17 = 0;
      v18 = v38;
      do
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD, float))(a3 + 16))(a3, *(unsigned int *)v18, *((unsigned int *)v18 + 2), *((float *)v18 + 3));
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)",", 1);
        v20 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)";", 1);
        v21 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
        if ((v21[32] & 5) == 0
          && ((*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v21 + 5)
                                                                                            + 32))(__p, *((_QWORD *)v21 + 5), 0, 1, 16), v45 > 1000)|| (++v17, HIDWORD(v22) = -1030792151 * v17 + 85899344, LODWORD(v22) = HIDWORD(v22), (v22 >> 1) < 0x51EB851))
        {
          v23 = *__error();
          v24 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            v25 = __p;
            if (v44 < 0)
              v25 = (void **)__p[0];
            *(_DWORD *)v41 = 136315138;
            v42 = v25;
            _os_log_impl(&dword_1B8270000, v24, OS_LOG_TYPE_DEFAULT, "%s", v41, 0xCu);
            if (SHIBYTE(v44) < 0)
              operator delete(__p[0]);
          }
          *__error() = v23;
          __p[0] = 0;
          __p[1] = 0;
          v44 = 0;
          std::stringbuf::str();
          if (SHIBYTE(v44) < 0)
            operator delete(__p[0]);
        }
        ++v18;
      }
      while (v18 != v15);
    }
  }
  v27 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
  if ((v27[32] & 5) != 0)
  {
    v28 = a2;
  }
  else
  {
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(__p, *((_QWORD *)v27 + 5), 0, 1, 16);
    v28 = a2;
    if (v45 > 0)
    {
      v29 = *__error();
      v30 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        v31 = v44 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)v41 = 136315138;
        v42 = v31;
        _os_log_impl(&dword_1B8270000, v30, OS_LOG_TYPE_DEFAULT, "%s", v41, 0xCu);
        if (SHIBYTE(v44) < 0)
          operator delete(__p[0]);
      }
      *__error() = v29;
    }
  }
  if (v28)
  {
    v32 = *(void **)(v28 + 8);
    if (v32)
    {
      *(_QWORD *)(v28 + 16) = v32;
      operator delete(v32);
    }
    MEMORY[0x1BCCB06A4](v28, 0x1020C403EC25235);
  }
  if (v36)
    operator delete(v36);
  *(_QWORD *)&buf = *MEMORY[0x1E0DE4F50];
  v33 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&buf + *(_QWORD *)(buf - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v47 = v33;
  v48[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v50) < 0)
    operator delete((void *)v49);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BCCB0650](&v52);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE11storageSizeEv(uint64_t a1)
{
  os_unfair_lock_s *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v2 = (os_unfair_lock_s *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a1 + 144);
  v6 = *(std::__shared_weak_count **)(a1 + 152);
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  os_unfair_lock_unlock(v2);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 48);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 184))(v7);
  if (!v6)
    goto LABEL_11;
  v12 = (unint64_t *)&v6->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v3)
      return v11 + v10;
  }
  else
  {
LABEL_11:
    if (!v3)
      return v11 + v10;
  }
  v14 = (unint64_t *)&v3->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v11 + v10;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE14setVectorStoreEP10data_map_s(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 192) = a2;
  return result;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE16getDataForOffsetEjPj(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v7;
  int v8;
  NSObject *v9;
  int *v10;
  int v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1) <= a2)
  {
    v8 = *__error();
    v9 = _SILogForLogForCategory(2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
      v12 = 136315906;
      v13 = "getDataForOffset";
      v14 = 1024;
      v15 = 3455;
      v16 = 1024;
      v17 = a2;
      v18 = 1024;
      v19 = v11;
      _os_log_error_impl(&dword_1B8270000, v9, OS_LOG_TYPE_ERROR, "%s:%d: offset out of range: %u >= %u", (uint8_t *)&v12, 0x1Eu);
    }
    v10 = __error();
    v7 = 0;
    result = 0;
    *v10 = v8;
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(a1[6] + 32))(a1 + 6, a2);
    v7 = 512;
  }
  *a3 = v7;
  return result;
}

uint64_t _ZN16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE26updateVectorStorageOffsetsEP13__SIUINT64Set(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t i;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  int v12;
  unint64_t j;
  unint64_t v14;

  v2 = a2;
  v4 = a1 + 48;
  if (a2)
  {
    for (i = 0; ; ++i)
    {
      result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v4);
      if (i >= result)
        break;
      v7 = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 16) * i, 0x210uLL);
      if (!*(_BYTE *)(v2 + 184))
      {
        v8 = *(unsigned int *)(v7 + 520);
        v9 = *(_DWORD *)(v2 + 24);
        if (!v9 || !((*(_QWORD *)(v2 + 16) ^ v8) >> (-4 * v9)))
        {
          v10 = (60 - 4 * v9) & 0xFC;
          v11 = *(_QWORD *)(v2 + 56 + 8 * ((v8 >> v10) & 0xF));
          if ((v11 & 1) != 0)
          {
            v12 = v9 + 2;
            do
            {
              v10 = (64 - 4 * v12) & 0xFC;
              v11 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v8 >> v10) & 0xF));
              ++v12;
            }
            while ((v11 & 1) != 0);
          }
          if (v11)
          {
            if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v8, ~(-1 << v10)))
            {
              data_map_set_offset_for_id(*(_QWORD *)(a1 + 192), v8, ((unint64_t)*(unsigned int *)(a1 + 88) << 36) | (16 * i) | (4 * (*(_DWORD *)(a1 + 176) & 3)) | *(_DWORD *)(a1 + 172) & 3, *(unsigned __int16 *)(a1 + 168) | ((unint64_t)*(unsigned int *)(a1 + 180) << 32), *(_DWORD *)(a1 + 184));
            }
          }
        }
      }
    }
  }
  else
  {
    for (j = 0; ; ++j)
    {
      result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(v4);
      if (j >= result)
        break;
      v14 = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 16) * j, 0x210uLL);
      data_map_set_offset_for_id(*(_QWORD *)(a1 + 192), *(unsigned int *)(v14 + 520), v2 | ((unint64_t)*(unsigned int *)(a1 + 88) << 36) | (4 * (*(_DWORD *)(a1 + 176) & 3)) | *(_DWORD *)(a1 + 172) & 3, *(unsigned __int16 *)(a1 + 168) | ((unint64_t)*(unsigned int *)(a1 + 180) << 32), *(_DWORD *)(a1 + 184));
      v2 += 16;
    }
  }
  return result;
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE6statusERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  _QWORD v38[2];
  uint64_t v39;
  _OWORD v40[4];
  void *__p[2];
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v53 = 0u;
  v43 = 0;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v42 = 0u;
  *(_OWORD *)__p = 0u;
  v4 = MEMORY[0x1E0DE4FD0];
  memset(v40, 0, sizeof(v40));
  v5 = MEMORY[0x1E0DE4FD0] + 104;
  v44 = MEMORY[0x1E0DE4FD0] + 104;
  v6 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v7 = MEMORY[0x1E0DE4FD0] + 64;
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v39 = MEMORY[0x1E0DE4FD0] + 64;
  v38[0] = v8;
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v8 - 24)) = v9;
  v38[1] = 0;
  v10 = (std::ios_base *)((char *)v38 + *(_QWORD *)(v38[0] - 24));
  std::ios_base::init(v10, v40);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v11 = v6[5];
  v39 = v6[4];
  *(uint64_t *)((char *)&v39 + *(_QWORD *)(v39 - 24)) = v11;
  v38[0] = v6[1];
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = v6[6];
  v44 = v5;
  v38[0] = v4 + 24;
  v39 = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v40[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v42 = 0u;
  LODWORD(v43) = 24;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = a2;
  else
    v14 = *(_QWORD *)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, v14, v15);
  v17 = *(char *)(a1 + 47);
  if (v17 >= 0)
    v18 = a1 + 24;
  else
    v18 = *(_QWORD *)(a1 + 24);
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a1 + 47);
  else
    v19 = *(_QWORD *)(a1 + 32);
  v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, v18, v19);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)"(", 1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v21 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"/", 1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)"v", 1);
  _ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(a1 + 48, &v36);
  if (v36)
  {
    _ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(a1 + 48, &v34);
    v23 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)")", 1);
    v24 = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v27 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)")", 1);
  }
  v28 = v37;
  if (v37)
  {
    v29 = (unint64_t *)&v37->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, (uint64_t)"[", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, (uint64_t)",", 1);
  v31 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"] indexId: ", 11);
  std::ostream::operator<<();
  std::stringbuf::str();
  v38[0] = *v6;
  v32 = v6[9];
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = v6[8];
  v39 = v32;
  *(_QWORD *)&v40[0] = v12 + 16;
  if (SBYTE7(v42) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BCCB0650](&v44);
}

uint64_t _ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE12diagnoseDumpERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERNS5_13basic_ostreamIcS8_EEi(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  uint64_t v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  uint64_t v44;
  std::locale *v45;
  uint64_t v46;
  const std::locale::facet *v47;
  uint64_t v48;
  _QWORD *v49;
  const char *v50;
  uint64_t v51;
  const std::locale::facet *v52;
  unint64_t v53;
  std::locale::id *v54;
  const std::locale::facet *v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  void *locale;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  std::locale::id *v66;
  _QWORD *v67;
  _QWORD *v68;
  const std::locale::facet *v69;
  const std::locale::facet *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::locale v82;
  std::locale v83;
  uint64_t v84;
  unsigned __int8 v85;

  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, a2, v8);
  v10 = *(char *)(a1 + 47);
  if (v10 >= 0)
    v11 = a1 + 24;
  else
    v11 = *(_QWORD *)(a1 + 24);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 47);
  else
    v12 = *(_QWORD *)(a1 + 32);
  v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" vectors ", 9);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" partitions.", 12);
  if (*(_BYTE *)(a1 + 208))
    v17 = "(readOnly)";
  else
    v17 = "(readWrite)";
  if (*(_BYTE *)(a1 + 208))
    v18 = 10;
  else
    v18 = 11;
  v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
  v20 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v21 = *(_QWORD *)(a1 + 128);
  v22 = *(std::__shared_weak_count **)(a1 + 136);
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  v25 = *(std::__shared_weak_count **)(a1 + 152);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  if (v22)
  {
    v28 = (unint64_t *)&v22->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (!v25)
    goto LABEL_29;
  v30 = (unint64_t *)&v25->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    v32 = a1 + 48;
    if (!v22)
      goto LABEL_35;
  }
  else
  {
LABEL_29:
    v32 = a1 + 48;
    if (!v22)
      goto LABEL_35;
  }
  v33 = (unint64_t *)&v22->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_35:
  if (v21)
  {
    v35 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Quantizer: ", 11);
    v36 = *(char *)(v21 + 31);
    if (v36 >= 0)
      v37 = v21 + 8;
    else
      v37 = *(_QWORD *)(v21 + 8);
    if (v36 >= 0)
      v38 = *(unsigned __int8 *)(v21 + 31);
    else
      v38 = *(_QWORD *)(v21 + 16);
    v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, v37, v38);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)"(", 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    v40 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)") ", 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    v41 = (_QWORD *)std::ostream::operator<<();
    v42 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, (uint64_t)" centroids.", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(*v42 - 24)));
    v43 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
    std::locale::~locale(&v83);
    std::ostream::put();
    std::ostream::flush();
  }
  v80 = 0;
  v81 = 0;
  _ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE13getPartitionsEv(v32, &v80);
  v44 = v80;
  if (!v80)
    goto LABEL_51;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Partition: ", 11);
  (*(void (**)(std::locale *__return_ptr, uint64_t))(*(_QWORD *)v44 + 144))(&v83, v44);
  v45 = (v85 & 0x80u) == 0 ? &v83 : (std::locale *)v83.__locale_;
  v46 = (v85 & 0x80u) == 0 ? v85 : v84;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v45, v46);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
  v47 = std::locale::use_facet(&v82, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
  std::locale::~locale(&v82);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v85 < 0)
  {
    operator delete(v83.__locale_);
    if (!a4)
      goto LABEL_84;
  }
  else
  {
LABEL_51:
    if (!a4)
      goto LABEL_84;
  }
  v78 = v44;
  v48 = *(_QWORD *)(a1 + 96);
  v49 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"offset,vid", 10);
  v79 = a4;
  if (a4 <= 1)
    v50 = ",";
  else
    v50 = ",vector";
  if (a4 <= 1)
    v51 = 1;
  else
    v51 = 7;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
  v52 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  if (*(_DWORD *)(v48 + 40))
  {
    if (a4 <= 1)
    {
      v65 = 0;
      v66 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        _windowsResolvePtr(*(_QWORD *)(v48 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v48 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v48 + 32) + 16) * v65, 0x210uLL);
        v67 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v67, (uint64_t)",", 1);
        v68 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v68, (uint64_t)",", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
        v69 = std::locale::use_facet(&v83, v66);
        ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
        std::locale::~locale(&v83);
        std::ostream::put();
        std::ostream::flush();
        ++v65;
      }
      while (v65 < *(unsigned int *)(v48 + 40));
    }
    else
    {
      v53 = 0;
      v54 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        v56 = _windowsResolvePtr(*(_QWORD *)(v48 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v48 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v48 + 32) + 16) * v53, 0x210uLL);
        v57 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)",", 1);
        v58 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)",", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"{length = ", 10);
        v59 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)", bytes = 0x", 12);
        data2hexString((const unsigned __int8 *)&v83, v56, 16);
        if ((v85 & 0x80u) == 0)
          locale = &v83;
        else
          locale = v83.__locale_;
        if ((v85 & 0x80u) == 0)
          v61 = v85;
        else
          v61 = v84;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)locale, v61);
        if ((char)v85 < 0)
          operator delete(v83.__locale_);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)" ... ", 5);
        data2hexString((const unsigned __int8 *)&v83, v56 + 504, 8);
        if ((v85 & 0x80u) == 0)
          v62 = &v83;
        else
          v62 = v83.__locale_;
        if ((v85 & 0x80u) == 0)
          v63 = v85;
        else
          v63 = v84;
        v64 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v62, v63);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)" }", 2);
        if ((char)v85 < 0)
          operator delete(v83.__locale_);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
        v55 = std::locale::use_facet(&v83, v54);
        ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
        std::locale::~locale(&v83);
        std::ostream::put();
        std::ostream::flush();
        ++v53;
      }
      while (v53 < *(unsigned int *)(v48 + 40));
    }
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
  v70 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  if (v78)
    (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v78 + 104))(v78, a3, v79);
LABEL_84:
  v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v72 = v81;
  if (!v81)
    goto LABEL_88;
  v73 = (unint64_t *)&v81->__shared_owners_;
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
    if (!v22)
      return v71;
  }
  else
  {
LABEL_88:
    if (!v22)
      return v71;
  }
  v75 = (unint64_t *)&v22->__shared_owners_;
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  return v71;
}

uint64_t ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void _ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li256EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj(uint64_t a1, float16x8_t *a2, char a3, _QWORD *a4, CFIndex AppIntegerValue, float a6)
{
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  double Current;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  char v32;
  char v33;
  unsigned int v34;
  char v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  NSObject *v42;
  int v43;
  int v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  int *v53;
  int *v54;
  unint64_t v55;
  int v56;
  const void *v57;
  int64_t v58;
  char *v59;
  char *v60;
  int v61;
  NSObject *v62;
  int v63;
  int v64;
  double v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  float16x8_t v71;
  float32x4_t v72;
  float16x8_t v73;
  float16x8_t v74;
  float16x8_t v75;
  float16x8_t v76;
  float16x8_t v77;
  float16x8_t v78;
  float16x8_t v79;
  float16x8_t v80;
  float16x8_t v81;
  float16x8_t v82;
  float16x8_t v83;
  float16x8_t v84;
  float16x8_t v85;
  float16x8_t v86;
  float16x8_t v87;
  float16x8_t v88;
  float16x8_t v89;
  float16x8_t v90;
  float16x8_t v91;
  float16x8_t v92;
  float16x8_t v93;
  float16x8_t v94;
  float16x8_t v95;
  float16x8_t v96;
  float16x8_t v97;
  float16x8_t v98;
  float16x8_t v99;
  float16x8_t v100;
  float16x8_t v101;
  float16x8_t v102;
  float16x8_t v103;
  float32x4_t v104;
  float16x8_t v105;
  float16x8_t v106;
  float16x8_t v107;
  float16x8_t v108;
  float16x8_t v109;
  float16x8_t v110;
  float16x8_t v111;
  float16x8_t v112;
  float16x8_t v113;
  float16x8_t v114;
  float16x8_t v115;
  float16x8_t v116;
  float16x8_t v117;
  float16x8_t v118;
  float16x8_t v119;
  float16x8_t v120;
  float16x8_t v121;
  float16x8_t v122;
  float16x8_t v123;
  float16x8_t v124;
  float16x8_t v125;
  float16x8_t v126;
  float16x8_t v127;
  float16x8_t v128;
  float16x8_t v129;
  float16x8_t v130;
  float16x8_t v131;
  float16x8_t v132;
  float16x8_t v133;
  float16x8_t v134;
  uint8x8_t v135;
  unint64_t v136;
  uint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  float v140;
  int v142;
  NSObject *v143;
  int v144;
  NSObject *v145;
  int v146;
  int v147;
  NSObject *v148;
  int v149;
  int v150;
  int v151;
  int v152;
  uint64_t v153;
  CFAbsoluteTime v154;
  _QWORD *v155;
  _QWORD *v156;
  void *v157;
  _QWORD *v158;
  _QWORD *v159;
  void *v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  char *v165;
  char *v166;
  const char *v167;
  char *v168;
  const char *v169;
  uint64_t v170;
  unint64_t v171;
  int v172;
  _QWORD v174[8];
  void *v175;
  void *v176;
  _QWORD *v177;
  float v178;
  void *v179;
  void *v180;
  char *v181;
  void *v182[2];
  void *__p[2];
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  int v192;
  float32x4_t __B;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t *__C;
  char __str[16];
  __int128 v259;
  _BYTE keyExistsAndHasValidFormat[48];
  _BYTE v261[32];
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  uint64_t v321;

  v321 = *MEMORY[0x1E0C80C00];
  v11 = *(_DWORD *)a4;
  v259 = 0u;
  *(_OWORD *)__str = 0u;
  snprintf(__str, 0x20uLL, "%02x%02x%02x%02x...%02x%02x%02x%02x", a2->u8[0], a2->u8[1], a2->u8[2], a2->u8[3], a2[31].u8[12], a2[31].u8[13], a2[31].u8[14], a2[31].u8[15]);
  if (!(_DWORD)AppIntegerValue)
    AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("IVFNumberOfParitionsProbe"), CFSTR("com.apple.Spotlight"), 0);
  keyExistsAndHasValidFormat[0] = 0;
  v12 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeMin"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v13 = v12;
  else
    v13 = 10000;
  if (10 * v11 <= v13)
    v14 = v13;
  else
    v14 = 10 * v11;
  v15 = v14
      * IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
  v16 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
  keyExistsAndHasValidFormat[0] = 0;
  v17 = v15 / v16;
  v18 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeMin"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v19 = v18;
  else
    v19 = 7;
  v189 = 0;
  v190 = &v189;
  if (v17 <= v19)
    v20 = v19;
  else
    v20 = v17;
  v192 = 0;
  v191 = 0x2000000000;
  v185 = 0;
  v186 = &v185;
  v188 = 0;
  v187 = 0x2000000000;
  v184 = 0;
  *(_OWORD *)v182 = 0u;
  *(_OWORD *)__p = 0u;
  QuantizerManager<float,768>::aNNLogQueryVecIds((uint64_t)v182);
  Current = CFAbsoluteTimeGetCurrent();
  v172 = v11;
  if ((a3 & 1) != 0
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1) <= v20
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1) <= v14)
  {
    v61 = *__error();
    v62 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
    {
      v63 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
      v64 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
      v65 = a6;
      *(_DWORD *)keyExistsAndHasValidFormat = 136316162;
      *(_QWORD *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v63;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = v64;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 2048;
      *(double *)&keyExistsAndHasValidFormat[32] = a6;
      _os_log_impl(&dword_1B8270000, v62, OS_LOG_TYPE_DEFAULT, "brute force search %s top %u of %u vectors in %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x28u);
    }
    else
    {
      v65 = a6;
    }
    *__error() = v61;
    LODWORD(v171) = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
    v66 = 0;
    v67 = 0;
    v68 = *(_QWORD *)(a1 + 48);
    while (v67 != *(_DWORD *)(v68 + 40))
    {
      ++*((_DWORD *)v190 + 6);
      if (*(_DWORD *)(v68 + 40) <= v66)
      {
        v165 = __si_assert_copy_extra_268();
        v166 = v165;
        v167 = "";
        if (v165)
          v167 = v165;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1798, "offset < store->endOffset()", v167);
LABEL_133:
        free(v166);
        if (__valid_fs(-1))
          v170 = 2989;
        else
          v170 = 3072;
        *(_DWORD *)v170 = -559038737;
        abort();
      }
      v69 = _windowsResolvePtr(*(_QWORD *)(v68 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v68 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v68 + 32) + 16) * v66, 0x210uLL);
      v70 = *(unsigned int *)(v69 + 520);
      v71 = a2[1];
      v72 = vcvtq_f32_f16(*(float16x4_t *)a2->i8);
      *(float32x4_t *)&keyExistsAndHasValidFormat[16] = vcvt_hight_f32_f16(*a2);
      *(float32x4_t *)keyExistsAndHasValidFormat = v72;
      *(float32x4_t *)v261 = vcvt_hight_f32_f16(v71);
      *(float32x4_t *)&keyExistsAndHasValidFormat[32] = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
      v73 = a2[2];
      v74 = a2[3];
      v262 = vcvt_hight_f32_f16(v73);
      *(float32x4_t *)&v261[16] = vcvtq_f32_f16(*(float16x4_t *)v73.i8);
      v264 = vcvt_hight_f32_f16(v74);
      v263 = vcvtq_f32_f16(*(float16x4_t *)v74.i8);
      v75 = a2[4];
      v76 = a2[5];
      v266 = vcvt_hight_f32_f16(v75);
      v265 = vcvtq_f32_f16(*(float16x4_t *)v75.i8);
      v268 = vcvt_hight_f32_f16(v76);
      v267 = vcvtq_f32_f16(*(float16x4_t *)v76.i8);
      v77 = a2[6];
      v78 = a2[7];
      v270 = vcvt_hight_f32_f16(v77);
      v269 = vcvtq_f32_f16(*(float16x4_t *)v77.i8);
      v272 = vcvt_hight_f32_f16(v78);
      v271 = vcvtq_f32_f16(*(float16x4_t *)v78.i8);
      v79 = a2[8];
      v80 = a2[9];
      v274 = vcvt_hight_f32_f16(v79);
      v273 = vcvtq_f32_f16(*(float16x4_t *)v79.i8);
      v276 = vcvt_hight_f32_f16(v80);
      v275 = vcvtq_f32_f16(*(float16x4_t *)v80.i8);
      v81 = a2[10];
      v82 = a2[11];
      v278 = vcvt_hight_f32_f16(v81);
      v277 = vcvtq_f32_f16(*(float16x4_t *)v81.i8);
      v280 = vcvt_hight_f32_f16(v82);
      v279 = vcvtq_f32_f16(*(float16x4_t *)v82.i8);
      v83 = a2[12];
      v84 = a2[13];
      v282 = vcvt_hight_f32_f16(v83);
      v281 = vcvtq_f32_f16(*(float16x4_t *)v83.i8);
      v284 = vcvt_hight_f32_f16(v84);
      v283 = vcvtq_f32_f16(*(float16x4_t *)v84.i8);
      v85 = a2[14];
      v86 = a2[15];
      v286 = vcvt_hight_f32_f16(v85);
      v285 = vcvtq_f32_f16(*(float16x4_t *)v85.i8);
      v288 = vcvt_hight_f32_f16(v86);
      v287 = vcvtq_f32_f16(*(float16x4_t *)v86.i8);
      v87 = a2[16];
      v88 = a2[17];
      v290 = vcvt_hight_f32_f16(v87);
      v289 = vcvtq_f32_f16(*(float16x4_t *)v87.i8);
      v292 = vcvt_hight_f32_f16(v88);
      v291 = vcvtq_f32_f16(*(float16x4_t *)v88.i8);
      v89 = a2[18];
      v90 = a2[19];
      v294 = vcvt_hight_f32_f16(v89);
      v293 = vcvtq_f32_f16(*(float16x4_t *)v89.i8);
      v296 = vcvt_hight_f32_f16(v90);
      v295 = vcvtq_f32_f16(*(float16x4_t *)v90.i8);
      v91 = a2[20];
      v92 = a2[21];
      v298 = vcvt_hight_f32_f16(v91);
      v297 = vcvtq_f32_f16(*(float16x4_t *)v91.i8);
      v300 = vcvt_hight_f32_f16(v92);
      v299 = vcvtq_f32_f16(*(float16x4_t *)v92.i8);
      v93 = a2[22];
      v94 = a2[23];
      v302 = vcvt_hight_f32_f16(v93);
      v301 = vcvtq_f32_f16(*(float16x4_t *)v93.i8);
      v304 = vcvt_hight_f32_f16(v94);
      v303 = vcvtq_f32_f16(*(float16x4_t *)v94.i8);
      v95 = a2[24];
      v96 = a2[25];
      v306 = vcvt_hight_f32_f16(v95);
      v305 = vcvtq_f32_f16(*(float16x4_t *)v95.i8);
      v308 = vcvt_hight_f32_f16(v96);
      v307 = vcvtq_f32_f16(*(float16x4_t *)v96.i8);
      v97 = a2[26];
      v98 = a2[27];
      v310 = vcvt_hight_f32_f16(v97);
      v309 = vcvtq_f32_f16(*(float16x4_t *)v97.i8);
      v312 = vcvt_hight_f32_f16(v98);
      v311 = vcvtq_f32_f16(*(float16x4_t *)v98.i8);
      v99 = a2[28];
      v100 = a2[29];
      v314 = vcvt_hight_f32_f16(v99);
      v313 = vcvtq_f32_f16(*(float16x4_t *)v99.i8);
      v316 = vcvt_hight_f32_f16(v100);
      v315 = vcvtq_f32_f16(*(float16x4_t *)v100.i8);
      v101 = a2[30];
      v102 = a2[31];
      v318 = vcvt_hight_f32_f16(v101);
      v317 = vcvtq_f32_f16(*(float16x4_t *)v101.i8);
      v320 = vcvt_hight_f32_f16(v102);
      v319 = vcvtq_f32_f16(*(float16x4_t *)v102.i8);
      bzero(&__B, 0x400uLL);
      v103 = *(float16x8_t *)(v69 + 16);
      v104 = vcvt_hight_f32_f16(*(float16x8_t *)v69);
      __B = vcvtq_f32_f16(*(float16x4_t *)v69);
      v194 = v104;
      v195 = vcvtq_f32_f16(*(float16x4_t *)v103.i8);
      v196 = vcvt_hight_f32_f16(v103);
      v105 = *(float16x8_t *)(v69 + 32);
      v106 = *(float16x8_t *)(v69 + 48);
      v197 = vcvtq_f32_f16(*(float16x4_t *)v105.i8);
      v198 = vcvt_hight_f32_f16(v105);
      v199 = vcvtq_f32_f16(*(float16x4_t *)v106.i8);
      v200 = vcvt_hight_f32_f16(v106);
      v107 = *(float16x8_t *)(v69 + 64);
      v108 = *(float16x8_t *)(v69 + 80);
      v201 = vcvtq_f32_f16(*(float16x4_t *)v107.i8);
      v202 = vcvt_hight_f32_f16(v107);
      v203 = vcvtq_f32_f16(*(float16x4_t *)v108.i8);
      v204 = vcvt_hight_f32_f16(v108);
      v109 = *(float16x8_t *)(v69 + 96);
      v110 = *(float16x8_t *)(v69 + 112);
      v205 = vcvtq_f32_f16(*(float16x4_t *)v109.i8);
      v206 = vcvt_hight_f32_f16(v109);
      v207 = vcvtq_f32_f16(*(float16x4_t *)v110.i8);
      v208 = vcvt_hight_f32_f16(v110);
      v111 = *(float16x8_t *)(v69 + 128);
      v112 = *(float16x8_t *)(v69 + 144);
      v209 = vcvtq_f32_f16(*(float16x4_t *)v111.i8);
      v210 = vcvt_hight_f32_f16(v111);
      v211 = vcvtq_f32_f16(*(float16x4_t *)v112.i8);
      v212 = vcvt_hight_f32_f16(v112);
      v113 = *(float16x8_t *)(v69 + 160);
      v114 = *(float16x8_t *)(v69 + 176);
      v213 = vcvtq_f32_f16(*(float16x4_t *)v113.i8);
      v214 = vcvt_hight_f32_f16(v113);
      v215 = vcvtq_f32_f16(*(float16x4_t *)v114.i8);
      v216 = vcvt_hight_f32_f16(v114);
      v115 = *(float16x8_t *)(v69 + 192);
      v116 = *(float16x8_t *)(v69 + 208);
      v217 = vcvtq_f32_f16(*(float16x4_t *)v115.i8);
      v218 = vcvt_hight_f32_f16(v115);
      v219 = vcvtq_f32_f16(*(float16x4_t *)v116.i8);
      v220 = vcvt_hight_f32_f16(v116);
      v117 = *(float16x8_t *)(v69 + 224);
      v118 = *(float16x8_t *)(v69 + 240);
      v221 = vcvtq_f32_f16(*(float16x4_t *)v117.i8);
      v222 = vcvt_hight_f32_f16(v117);
      v223 = vcvtq_f32_f16(*(float16x4_t *)v118.i8);
      v224 = vcvt_hight_f32_f16(v118);
      v119 = *(float16x8_t *)(v69 + 256);
      v120 = *(float16x8_t *)(v69 + 272);
      v225 = vcvtq_f32_f16(*(float16x4_t *)v119.i8);
      v226 = vcvt_hight_f32_f16(v119);
      v227 = vcvtq_f32_f16(*(float16x4_t *)v120.i8);
      v228 = vcvt_hight_f32_f16(v120);
      v121 = *(float16x8_t *)(v69 + 288);
      v122 = *(float16x8_t *)(v69 + 304);
      v229 = vcvtq_f32_f16(*(float16x4_t *)v121.i8);
      v230 = vcvt_hight_f32_f16(v121);
      v231 = vcvtq_f32_f16(*(float16x4_t *)v122.i8);
      v232 = vcvt_hight_f32_f16(v122);
      v123 = *(float16x8_t *)(v69 + 320);
      v124 = *(float16x8_t *)(v69 + 336);
      v233 = vcvtq_f32_f16(*(float16x4_t *)v123.i8);
      v234 = vcvt_hight_f32_f16(v123);
      v235 = vcvtq_f32_f16(*(float16x4_t *)v124.i8);
      v236 = vcvt_hight_f32_f16(v124);
      v125 = *(float16x8_t *)(v69 + 352);
      v126 = *(float16x8_t *)(v69 + 368);
      v237 = vcvtq_f32_f16(*(float16x4_t *)v125.i8);
      v238 = vcvt_hight_f32_f16(v125);
      v239 = vcvtq_f32_f16(*(float16x4_t *)v126.i8);
      v240 = vcvt_hight_f32_f16(v126);
      v127 = *(float16x8_t *)(v69 + 384);
      v128 = *(float16x8_t *)(v69 + 400);
      v241 = vcvtq_f32_f16(*(float16x4_t *)v127.i8);
      v242 = vcvt_hight_f32_f16(v127);
      v243 = vcvtq_f32_f16(*(float16x4_t *)v128.i8);
      v244 = vcvt_hight_f32_f16(v128);
      v129 = *(float16x8_t *)(v69 + 416);
      v130 = *(float16x8_t *)(v69 + 432);
      v245 = vcvtq_f32_f16(*(float16x4_t *)v129.i8);
      v246 = vcvt_hight_f32_f16(v129);
      v247 = vcvtq_f32_f16(*(float16x4_t *)v130.i8);
      v248 = vcvt_hight_f32_f16(v130);
      v131 = *(float16x8_t *)(v69 + 448);
      v132 = *(float16x8_t *)(v69 + 464);
      v249 = vcvtq_f32_f16(*(float16x4_t *)v131.i8);
      v250 = vcvt_hight_f32_f16(v131);
      v251 = vcvtq_f32_f16(*(float16x4_t *)v132.i8);
      v252 = vcvt_hight_f32_f16(v132);
      v133 = *(float16x8_t *)(v69 + 480);
      v134 = *(float16x8_t *)(v69 + 496);
      v253 = vcvtq_f32_f16(*(float16x4_t *)v133.i8);
      v254 = vcvt_hight_f32_f16(v133);
      v255 = vcvtq_f32_f16(*(float16x4_t *)v134.i8);
      v256 = vcvt_hight_f32_f16(v134);
      LODWORD(__C) = 2139095039;
      vDSP_distancesq((const float *)keyExistsAndHasValidFormat, 1, __B.f32, 1, (float *)&__C, 0x100uLL);
      if (v182[1])
      {
        v135 = (uint8x8_t)vcnt_s8((int8x8_t)v182[1]);
        v135.i16[0] = vaddlv_u8(v135);
        if (v135.u32[0] > 1uLL)
        {
          v136 = v70;
          if (v182[1] <= (void *)v70)
            v136 = v70 % (unint64_t)v182[1];
        }
        else
        {
          v136 = (LODWORD(v182[1]) - 1) & v70;
        }
        v137 = (uint64_t *)*((_QWORD *)v182[0] + v136);
        if (v137)
        {
          v137 = (uint64_t *)*v137;
          if (v137)
          {
            if (v135.u32[0] < 2uLL)
            {
              while (1)
              {
                v139 = v137[1];
                if (v139 == v70)
                {
                  if (*((_DWORD *)v137 + 4) == (_DWORD)v70)
                    goto LABEL_85;
                }
                else if ((v139 & ((unint64_t)v182[1] - 1)) != v136)
                {
                  goto LABEL_84;
                }
                v137 = (uint64_t *)*v137;
                if (!v137)
                  goto LABEL_85;
              }
            }
            do
            {
              v138 = v137[1];
              if (v138 == v70)
              {
                if (*((_DWORD *)v137 + 4) == (_DWORD)v70)
                  break;
              }
              else
              {
                if ((void *)v138 >= v182[1])
                  v138 %= (unint64_t)v182[1];
                if (v138 != v136)
                  goto LABEL_84;
              }
              v137 = (uint64_t *)*v137;
            }
            while (v137);
          }
        }
      }
      else
      {
LABEL_84:
        v137 = 0;
      }
LABEL_85:
      v140 = *(float *)&__C;
      if (a6 == 0.0 || *(float *)&__C <= a6)
      {
        if (v137)
        {
          v142 = *__error();
          v143 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109376;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v70;
            *(_WORD *)&keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v140;
            _os_log_impl(&dword_1B8270000, v143, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", keyExistsAndHasValidFormat, 0x12u);
          }
          *__error() = v142;
        }
        *(_QWORD *)keyExistsAndHasValidFormat = *(_QWORD *)(v69 + 512);
        *(_DWORD *)&keyExistsAndHasValidFormat[8] = v70;
        *(float *)&keyExistsAndHasValidFormat[12] = v140;
        MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::push(a4, (uint64_t)keyExistsAndHasValidFormat);
      }
      else
      {
        if (v137)
        {
          v144 = *__error();
          v145 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109632;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v70;
            *(_WORD *)&keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v140;
            *(_WORD *)&keyExistsAndHasValidFormat[18] = 2048;
            *(double *)&keyExistsAndHasValidFormat[20] = v65;
            _os_log_impl(&dword_1B8270000, v145, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", keyExistsAndHasValidFormat, 0x1Cu);
          }
          *__error() = v144;
        }
        ++*((_DWORD *)v186 + 6);
      }
      v66 = (v66 + 1);
      v67 = v66;
      if (v68 != *(_QWORD *)(a1 + 48))
      {
        v168 = __si_assert_copy_extra_268();
        v166 = v168;
        v169 = "";
        if (v168)
          v169 = v168;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1814, "store == other.store", v169);
        goto LABEL_133;
      }
    }
    v146 = v11;
  }
  else
  {
    if (!(_DWORD)AppIntegerValue)
    {
      keyExistsAndHasValidFormat[0] = 0;
      v22 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeMax"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat[0])
        v23 = v22;
      else
        v23 = 40;
      keyExistsAndHasValidFormat[0] = 0;
      v24 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionSizeFactor"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat[0])
        v25 = v24;
      else
        v25 = 45;
      keyExistsAndHasValidFormat[0] = 0;
      v26 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeNumerator"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
      v27 = keyExistsAndHasValidFormat[0];
      v28 = 8 * v26;
      v29 = v25 * v25;
      keyExistsAndHasValidFormat[0] = 0;
      v30 = CFPreferencesGetAppIntegerValue(CFSTR("IVFpartitionProbeDecayExponent"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
      v31 = keyExistsAndHasValidFormat[0];
      if (v30 <= 0x12)
        v32 = 18;
      else
        v32 = v30;
      v33 = v32 - 3;
      v34 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
      if (v31)
        v35 = v33;
      else
        v35 = 17;
      v36 = v34 >> v35;
      if (v36 <= 8)
        v37 = 8;
      else
        v37 = v36;
      v38 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
      if (v27)
        v39 = v28;
      else
        v39 = 800;
      v40 = v39 * v38 / (v29 * v37);
      if (v23 < v40)
        v40 = v23;
      if (v40 <= v20)
        AppIntegerValue = v20;
      else
        AppIntegerValue = v40;
    }
    v41 = *__error();
    v42 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      v43 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
      v44 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
      *(_DWORD *)keyExistsAndHasValidFormat = 136316418;
      *(_QWORD *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v11;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v43;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = AppIntegerValue;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[32] = v44;
      *(_WORD *)&keyExistsAndHasValidFormat[36] = 2048;
      *(double *)&keyExistsAndHasValidFormat[38] = a6;
      _os_log_impl(&dword_1B8270000, v42, OS_LOG_TYPE_DEFAULT, "aNN search %s top %u of %u vectors in %u of %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x2Eu);
    }
    *__error() = v41;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    v46 = *(_QWORD *)(a1 + 80);
    v45 = *(std::__shared_weak_count **)(a1 + 88);
    if (v45)
    {
      p_shared_owners = (unint64_t *)&v45->__shared_owners_;
      do
        v48 = __ldxr(p_shared_owners);
      while (__stxr(v48 + 1, p_shared_owners));
    }
    v50 = *(_QWORD *)(a1 + 96);
    v49 = *(std::__shared_weak_count **)(a1 + 104);
    if (v49)
    {
      v51 = (unint64_t *)&v49->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    memset(keyExistsAndHasValidFormat, 0, 24);
    (*(void (**)(_BYTE *__return_ptr, uint64_t, float16x8_t *, CFIndex))(*(_QWORD *)v46 + 72))(keyExistsAndHasValidFormat, v46, a2, AppIntegerValue);
    v53 = *(int **)&keyExistsAndHasValidFormat[8];
    v54 = *(int **)keyExistsAndHasValidFormat;
    __B = 0uLL;
    v194.i64[0] = 0;
    __C = &__B;
    v55 = *(_QWORD *)&keyExistsAndHasValidFormat[8] - *(_QWORD *)keyExistsAndHasValidFormat;
    if (*(_QWORD *)&keyExistsAndHasValidFormat[8] == *(_QWORD *)keyExistsAndHasValidFormat)
    {
      v180 = 0;
      v181 = 0;
      v179 = 0;
    }
    else
    {
      do
      {
        v56 = *v54;
        v54 += 2;
        std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&__C, v56);
      }
      while (v54 != v53);
      v57 = (const void *)__B.i64[0];
      v180 = 0;
      v181 = 0;
      v179 = 0;
      v58 = __B.i64[1] - __B.i64[0];
      if (__B.i64[1] != __B.i64[0])
      {
        if (v58 < 0)
          abort();
        v59 = (char *)operator new(__B.i64[1] - __B.i64[0]);
        v60 = &v59[4 * (v58 >> 2)];
        v179 = v59;
        v181 = v60;
        memcpy(v59, v57, v58);
        v180 = v60;
      }
    }
    v174[0] = MEMORY[0x1E0C809B0];
    v174[1] = 1174405120;
    v174[2] = ___ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li256EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke;
    v174[3] = &unk_1E6E33980;
    v174[6] = a1;
    v174[7] = a2;
    v174[4] = &v189;
    std::unordered_set<unsigned int>::unordered_set((uint64_t)&v175, (uint64_t)v182);
    v178 = a6;
    v174[5] = &v185;
    v177 = a4;
    (*(void (**)(uint64_t, void **, _QWORD *))(*(_QWORD *)v50 + 72))(v50, &v179, v174);
    if (v179)
    {
      v180 = v179;
      operator delete(v179);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 152));
    v158 = v176;
    if (v176)
    {
      do
      {
        v159 = (_QWORD *)*v158;
        operator delete(v158);
        v158 = v159;
      }
      while (v159);
    }
    v160 = v175;
    v175 = 0;
    if (v160)
      operator delete(v160);
    if (__B.i64[0])
    {
      __B.i64[1] = __B.i64[0];
      operator delete((void *)__B.i64[0]);
    }
    if (*(_QWORD *)keyExistsAndHasValidFormat)
    {
      *(_QWORD *)&keyExistsAndHasValidFormat[8] = *(_QWORD *)keyExistsAndHasValidFormat;
      operator delete(*(void **)keyExistsAndHasValidFormat);
    }
    v146 = v172;
    if (v49)
    {
      v161 = (unint64_t *)&v49->__shared_owners_;
      do
        v162 = __ldaxr(v161);
      while (__stlxr(v162 - 1, v161));
      if (!v162)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v171 = v55 >> 3;
    if (v45)
    {
      v163 = (unint64_t *)&v45->__shared_owners_;
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      if (!v164)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  v147 = *__error();
  v148 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
  {
    v149 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a1);
    v150 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
    v151 = *((_DWORD *)v186 + 6);
    v152 = *((_DWORD *)v190 + 6);
    v153 = (uint64_t)(a4[2] - a4[1]) >> 4;
    v154 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)keyExistsAndHasValidFormat = 136317442;
    *(_QWORD *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v146;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v149;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 2048;
    *(double *)&keyExistsAndHasValidFormat[26] = a6;
    *(_WORD *)&keyExistsAndHasValidFormat[34] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[36] = v171;
    *(_WORD *)&keyExistsAndHasValidFormat[40] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[42] = v150;
    *(_WORD *)&keyExistsAndHasValidFormat[46] = 1024;
    *(_DWORD *)v261 = v151;
    *(_WORD *)&v261[4] = 1024;
    *(_DWORD *)&v261[6] = v152;
    *(_WORD *)&v261[10] = 2048;
    *(_QWORD *)&v261[12] = v153;
    *(_WORD *)&v261[20] = 2048;
    *(double *)&v261[22] = v154 - Current;
    _os_log_impl(&dword_1B8270000, v148, OS_LOG_TYPE_DEFAULT, "search %s top %u of %u vectors max_distance=%f in %u of %u partitions skip %u of %u populate %zu results in duration: %f", keyExistsAndHasValidFormat, 0x4Eu);
  }
  *__error() = v147;
  v155 = __p[0];
  if (__p[0])
  {
    do
    {
      v156 = (_QWORD *)*v155;
      operator delete(v155);
      v155 = v156;
    }
    while (v156);
  }
  v157 = v182[0];
  v182[0] = 0;
  if (v157)
    operator delete(v157);
  _Block_object_dispose(&v185, 8);
  _Block_object_dispose(&v189, 8);
}

void ___ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE3aNNERK10CIVector_sIDF16_Li256EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  unint64_t v5;
  float16x8_t *v6;
  float16x8_t v7;
  float32x4_t v8;
  float16x8_t v9;
  float16x8_t v10;
  float16x8_t v11;
  float16x8_t v12;
  float16x8_t v13;
  float16x8_t v14;
  float16x8_t v15;
  float16x8_t v16;
  float16x8_t v17;
  float16x8_t v18;
  float16x8_t v19;
  float16x8_t v20;
  float16x8_t v21;
  float16x8_t v22;
  float16x8_t v23;
  float16x8_t v24;
  float16x8_t v25;
  float16x8_t v26;
  float16x8_t v27;
  float16x8_t v28;
  float16x8_t v29;
  float16x8_t v30;
  float16x8_t v31;
  float16x8_t v32;
  float16x8_t v33;
  float16x8_t v34;
  float16x8_t v35;
  float16x8_t v36;
  float16x8_t v37;
  float16x8_t v38;
  float16x8_t v39;
  float32x4_t v40;
  float16x8_t v41;
  float16x8_t v42;
  float16x8_t v43;
  float16x8_t v44;
  float16x8_t v45;
  float16x8_t v46;
  float16x8_t v47;
  float16x8_t v48;
  float16x8_t v49;
  float16x8_t v50;
  float16x8_t v51;
  float16x8_t v52;
  float16x8_t v53;
  float16x8_t v54;
  float16x8_t v55;
  float16x8_t v56;
  float16x8_t v57;
  float16x8_t v58;
  float16x8_t v59;
  float16x8_t v60;
  float16x8_t v61;
  float16x8_t v62;
  float16x8_t v63;
  float16x8_t v64;
  float16x8_t v65;
  float16x8_t v66;
  float16x8_t v67;
  float16x8_t v68;
  float16x8_t v69;
  float16x8_t v70;
  unint64_t v71;
  int8x8_t v72;
  uint8x8_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  float v79;
  float v80;
  int v81;
  NSObject *v82;
  double v83;
  int v84;
  NSObject *v85;
  _OWORD __B[64];
  float __C;
  _BYTE __A[32];
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 48);
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v5 = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 32) + 16) * *a3, 0x210uLL);
  v6 = *(float16x8_t **)(a1 + 56);
  v7 = v6[1];
  v8 = vcvt_hight_f32_f16(*v6);
  *(float32x4_t *)__A = vcvtq_f32_f16(*(float16x4_t *)v6->i8);
  *(float32x4_t *)&__A[16] = v8;
  v89 = vcvtq_f32_f16(*(float16x4_t *)v7.i8);
  v90 = vcvt_hight_f32_f16(v7);
  v9 = v6[2];
  v10 = v6[3];
  v91 = vcvtq_f32_f16(*(float16x4_t *)v9.i8);
  v92 = vcvt_hight_f32_f16(v9);
  v93 = vcvtq_f32_f16(*(float16x4_t *)v10.i8);
  v94 = vcvt_hight_f32_f16(v10);
  v11 = v6[4];
  v12 = v6[5];
  v95 = vcvtq_f32_f16(*(float16x4_t *)v11.i8);
  v96 = vcvt_hight_f32_f16(v11);
  v97 = vcvtq_f32_f16(*(float16x4_t *)v12.i8);
  v98 = vcvt_hight_f32_f16(v12);
  v13 = v6[6];
  v14 = v6[7];
  v99 = vcvtq_f32_f16(*(float16x4_t *)v13.i8);
  v100 = vcvt_hight_f32_f16(v13);
  v101 = vcvtq_f32_f16(*(float16x4_t *)v14.i8);
  v102 = vcvt_hight_f32_f16(v14);
  v15 = v6[8];
  v16 = v6[9];
  v103 = vcvtq_f32_f16(*(float16x4_t *)v15.i8);
  v104 = vcvt_hight_f32_f16(v15);
  v105 = vcvtq_f32_f16(*(float16x4_t *)v16.i8);
  v106 = vcvt_hight_f32_f16(v16);
  v17 = v6[10];
  v18 = v6[11];
  v107 = vcvtq_f32_f16(*(float16x4_t *)v17.i8);
  v108 = vcvt_hight_f32_f16(v17);
  v109 = vcvtq_f32_f16(*(float16x4_t *)v18.i8);
  v110 = vcvt_hight_f32_f16(v18);
  v19 = v6[12];
  v20 = v6[13];
  v111 = vcvtq_f32_f16(*(float16x4_t *)v19.i8);
  v112 = vcvt_hight_f32_f16(v19);
  v113 = vcvtq_f32_f16(*(float16x4_t *)v20.i8);
  v114 = vcvt_hight_f32_f16(v20);
  v21 = v6[14];
  v22 = v6[15];
  v115 = vcvtq_f32_f16(*(float16x4_t *)v21.i8);
  v116 = vcvt_hight_f32_f16(v21);
  v117 = vcvtq_f32_f16(*(float16x4_t *)v22.i8);
  v118 = vcvt_hight_f32_f16(v22);
  v23 = v6[16];
  v24 = v6[17];
  v119 = vcvtq_f32_f16(*(float16x4_t *)v23.i8);
  v120 = vcvt_hight_f32_f16(v23);
  v121 = vcvtq_f32_f16(*(float16x4_t *)v24.i8);
  v122 = vcvt_hight_f32_f16(v24);
  v25 = v6[18];
  v26 = v6[19];
  v123 = vcvtq_f32_f16(*(float16x4_t *)v25.i8);
  v124 = vcvt_hight_f32_f16(v25);
  v125 = vcvtq_f32_f16(*(float16x4_t *)v26.i8);
  v126 = vcvt_hight_f32_f16(v26);
  v27 = v6[20];
  v28 = v6[21];
  v127 = vcvtq_f32_f16(*(float16x4_t *)v27.i8);
  v128 = vcvt_hight_f32_f16(v27);
  v129 = vcvtq_f32_f16(*(float16x4_t *)v28.i8);
  v130 = vcvt_hight_f32_f16(v28);
  v29 = v6[22];
  v30 = v6[23];
  v131 = vcvtq_f32_f16(*(float16x4_t *)v29.i8);
  v132 = vcvt_hight_f32_f16(v29);
  v133 = vcvtq_f32_f16(*(float16x4_t *)v30.i8);
  v134 = vcvt_hight_f32_f16(v30);
  v31 = v6[24];
  v32 = v6[25];
  v135 = vcvtq_f32_f16(*(float16x4_t *)v31.i8);
  v136 = vcvt_hight_f32_f16(v31);
  v137 = vcvtq_f32_f16(*(float16x4_t *)v32.i8);
  v138 = vcvt_hight_f32_f16(v32);
  v33 = v6[26];
  v34 = v6[27];
  v139 = vcvtq_f32_f16(*(float16x4_t *)v33.i8);
  v140 = vcvt_hight_f32_f16(v33);
  v141 = vcvtq_f32_f16(*(float16x4_t *)v34.i8);
  v142 = vcvt_hight_f32_f16(v34);
  v35 = v6[28];
  v36 = v6[29];
  v143 = vcvtq_f32_f16(*(float16x4_t *)v35.i8);
  v144 = vcvt_hight_f32_f16(v35);
  v145 = vcvtq_f32_f16(*(float16x4_t *)v36.i8);
  v146 = vcvt_hight_f32_f16(v36);
  v37 = v6[30];
  v38 = v6[31];
  v147 = vcvtq_f32_f16(*(float16x4_t *)v37.i8);
  v148 = vcvt_hight_f32_f16(v37);
  v149 = vcvtq_f32_f16(*(float16x4_t *)v38.i8);
  v150 = vcvt_hight_f32_f16(v38);
  v39 = *(float16x8_t *)(v5 + 16);
  v40 = vcvtq_f32_f16(*(float16x4_t *)v5);
  __B[1] = vcvt_hight_f32_f16(*(float16x8_t *)v5);
  __B[0] = v40;
  __B[3] = vcvt_hight_f32_f16(v39);
  __B[2] = vcvtq_f32_f16(*(float16x4_t *)v39.i8);
  v41 = *(float16x8_t *)(v5 + 32);
  v42 = *(float16x8_t *)(v5 + 48);
  __B[5] = vcvt_hight_f32_f16(v41);
  __B[4] = vcvtq_f32_f16(*(float16x4_t *)v41.i8);
  __B[7] = vcvt_hight_f32_f16(v42);
  __B[6] = vcvtq_f32_f16(*(float16x4_t *)v42.i8);
  v43 = *(float16x8_t *)(v5 + 64);
  v44 = *(float16x8_t *)(v5 + 80);
  __B[9] = vcvt_hight_f32_f16(v43);
  __B[8] = vcvtq_f32_f16(*(float16x4_t *)v43.i8);
  __B[11] = vcvt_hight_f32_f16(v44);
  __B[10] = vcvtq_f32_f16(*(float16x4_t *)v44.i8);
  v45 = *(float16x8_t *)(v5 + 96);
  v46 = *(float16x8_t *)(v5 + 112);
  __B[13] = vcvt_hight_f32_f16(v45);
  __B[12] = vcvtq_f32_f16(*(float16x4_t *)v45.i8);
  __B[15] = vcvt_hight_f32_f16(v46);
  __B[14] = vcvtq_f32_f16(*(float16x4_t *)v46.i8);
  v47 = *(float16x8_t *)(v5 + 128);
  v48 = *(float16x8_t *)(v5 + 144);
  __B[17] = vcvt_hight_f32_f16(v47);
  __B[16] = vcvtq_f32_f16(*(float16x4_t *)v47.i8);
  __B[19] = vcvt_hight_f32_f16(v48);
  __B[18] = vcvtq_f32_f16(*(float16x4_t *)v48.i8);
  v49 = *(float16x8_t *)(v5 + 160);
  v50 = *(float16x8_t *)(v5 + 176);
  __B[21] = vcvt_hight_f32_f16(v49);
  __B[20] = vcvtq_f32_f16(*(float16x4_t *)v49.i8);
  __B[23] = vcvt_hight_f32_f16(v50);
  __B[22] = vcvtq_f32_f16(*(float16x4_t *)v50.i8);
  v51 = *(float16x8_t *)(v5 + 192);
  v52 = *(float16x8_t *)(v5 + 208);
  __B[25] = vcvt_hight_f32_f16(v51);
  __B[24] = vcvtq_f32_f16(*(float16x4_t *)v51.i8);
  __B[27] = vcvt_hight_f32_f16(v52);
  __B[26] = vcvtq_f32_f16(*(float16x4_t *)v52.i8);
  v53 = *(float16x8_t *)(v5 + 224);
  v54 = *(float16x8_t *)(v5 + 240);
  __B[29] = vcvt_hight_f32_f16(v53);
  __B[28] = vcvtq_f32_f16(*(float16x4_t *)v53.i8);
  __B[31] = vcvt_hight_f32_f16(v54);
  __B[30] = vcvtq_f32_f16(*(float16x4_t *)v54.i8);
  v55 = *(float16x8_t *)(v5 + 256);
  v56 = *(float16x8_t *)(v5 + 272);
  __B[33] = vcvt_hight_f32_f16(v55);
  __B[32] = vcvtq_f32_f16(*(float16x4_t *)v55.i8);
  __B[35] = vcvt_hight_f32_f16(v56);
  __B[34] = vcvtq_f32_f16(*(float16x4_t *)v56.i8);
  v57 = *(float16x8_t *)(v5 + 288);
  v58 = *(float16x8_t *)(v5 + 304);
  __B[37] = vcvt_hight_f32_f16(v57);
  __B[36] = vcvtq_f32_f16(*(float16x4_t *)v57.i8);
  __B[39] = vcvt_hight_f32_f16(v58);
  __B[38] = vcvtq_f32_f16(*(float16x4_t *)v58.i8);
  v59 = *(float16x8_t *)(v5 + 320);
  v60 = *(float16x8_t *)(v5 + 336);
  __B[41] = vcvt_hight_f32_f16(v59);
  __B[40] = vcvtq_f32_f16(*(float16x4_t *)v59.i8);
  __B[43] = vcvt_hight_f32_f16(v60);
  __B[42] = vcvtq_f32_f16(*(float16x4_t *)v60.i8);
  v61 = *(float16x8_t *)(v5 + 352);
  v62 = *(float16x8_t *)(v5 + 368);
  __B[45] = vcvt_hight_f32_f16(v61);
  __B[44] = vcvtq_f32_f16(*(float16x4_t *)v61.i8);
  __B[47] = vcvt_hight_f32_f16(v62);
  __B[46] = vcvtq_f32_f16(*(float16x4_t *)v62.i8);
  v63 = *(float16x8_t *)(v5 + 384);
  v64 = *(float16x8_t *)(v5 + 400);
  __B[49] = vcvt_hight_f32_f16(v63);
  __B[48] = vcvtq_f32_f16(*(float16x4_t *)v63.i8);
  __B[51] = vcvt_hight_f32_f16(v64);
  __B[50] = vcvtq_f32_f16(*(float16x4_t *)v64.i8);
  v65 = *(float16x8_t *)(v5 + 416);
  v66 = *(float16x8_t *)(v5 + 432);
  __B[53] = vcvt_hight_f32_f16(v65);
  __B[52] = vcvtq_f32_f16(*(float16x4_t *)v65.i8);
  __B[55] = vcvt_hight_f32_f16(v66);
  __B[54] = vcvtq_f32_f16(*(float16x4_t *)v66.i8);
  v67 = *(float16x8_t *)(v5 + 448);
  v68 = *(float16x8_t *)(v5 + 464);
  __B[57] = vcvt_hight_f32_f16(v67);
  __B[56] = vcvtq_f32_f16(*(float16x4_t *)v67.i8);
  __B[59] = vcvt_hight_f32_f16(v68);
  __B[58] = vcvtq_f32_f16(*(float16x4_t *)v68.i8);
  v69 = *(float16x8_t *)(v5 + 480);
  v70 = *(float16x8_t *)(v5 + 496);
  __B[61] = vcvt_hight_f32_f16(v69);
  __B[60] = vcvtq_f32_f16(*(float16x4_t *)v69.i8);
  __B[63] = vcvt_hight_f32_f16(v70);
  __B[62] = vcvtq_f32_f16(*(float16x4_t *)v70.i8);
  __C = 3.4028e38;
  vDSP_distancesq((const float *)__A, 1, (const float *)__B, 1, &__C, 0x100uLL);
  v71 = *(unsigned int *)(v5 + 520);
  v72 = *(int8x8_t *)(a1 + 72);
  if (v72)
  {
    v73 = (uint8x8_t)vcnt_s8(v72);
    v73.i16[0] = vaddlv_u8(v73);
    if (v73.u32[0] > 1uLL)
    {
      v74 = *(unsigned int *)(v5 + 520);
      if (*(_QWORD *)&v72 <= v71)
        v74 = v71 % *(_QWORD *)&v72;
    }
    else
    {
      v74 = (v72.i32[0] - 1) & v71;
    }
    v75 = *(uint64_t **)(*(_QWORD *)(a1 + 64) + 8 * v74);
    if (v75)
    {
      v75 = (uint64_t *)*v75;
      if (v75)
      {
        if (v73.u32[0] < 2uLL)
        {
          v76 = *(_QWORD *)&v72 - 1;
          while (1)
          {
            v78 = v75[1];
            if (v78 == v71)
            {
              if (*((_DWORD *)v75 + 4) == (_DWORD)v71)
                goto LABEL_22;
            }
            else if ((v78 & v76) != v74)
            {
              goto LABEL_21;
            }
            v75 = (uint64_t *)*v75;
            if (!v75)
              goto LABEL_22;
          }
        }
        do
        {
          v77 = v75[1];
          if (v77 == v71)
          {
            if (*((_DWORD *)v75 + 4) == (_DWORD)v71)
              break;
          }
          else
          {
            if (v77 >= *(_QWORD *)&v72)
              v77 %= *(_QWORD *)&v72;
            if (v77 != v74)
              goto LABEL_21;
          }
          v75 = (uint64_t *)*v75;
        }
        while (v75);
      }
    }
  }
  else
  {
LABEL_21:
    v75 = 0;
  }
LABEL_22:
  v79 = __C;
  v80 = *(float *)(a1 + 112);
  if (v80 == 0.0 || __C <= v80)
  {
    if (v75)
    {
      v84 = *__error();
      v85 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__A = 67109376;
        *(_DWORD *)&__A[4] = v71;
        *(_WORD *)&__A[8] = 2048;
        *(double *)&__A[10] = v79;
        _os_log_impl(&dword_1B8270000, v85, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", __A, 0x12u);
      }
      *__error() = v84;
    }
    *(_QWORD *)__A = *(_QWORD *)(v5 + 512);
    *(_DWORD *)&__A[8] = v71;
    *(float *)&__A[12] = v79;
    MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_disk_postings>>>::push(*(_QWORD **)(a1 + 104), (uint64_t)__A);
  }
  else
  {
    if (v75)
    {
      v81 = *__error();
      v82 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
      {
        v83 = *(float *)(a1 + 112);
        *(_DWORD *)__A = 67109632;
        *(_DWORD *)&__A[4] = v71;
        *(_WORD *)&__A[8] = 2048;
        *(double *)&__A[10] = v79;
        *(_WORD *)&__A[18] = 2048;
        *(double *)&__A[20] = v83;
        _os_log_impl(&dword_1B8270000, v82, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", __A, 0x1Cu);
      }
      *__error() = v81;
    }
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  }
}

uint64_t ___ZNK16IVFVectorIndexenI30vi_onefixedsize_disk_allocator16vi_disk_postingsE22IVFVectorIndexInstanceIDF16_Li256EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

_DWORD *_ZN22IVFVectorIndexTemplateIDF16_Li256EE11VectorStoreI30vi_onefixedsize_disk_allocator16vi_disk_postingsE8truncateEv(uint64_t a1)
{
  int v2;
  NSObject *v3;
  _QWORD *v4;
  int v5;
  int v6;
  int v7;
  int v9;
  _QWORD *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *__error();
  v3 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (_QWORD *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      v4 = (_QWORD *)*v4;
    v5 = *(_DWORD *)(a1 + 40);
    v6 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(a1 + 32) + 40, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), 0x210uLL)
                   + 520);
    v7 = *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(a1 + 32) + 40, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) * (*(_DWORD *)(a1 + 40) - 1), 0x210uLL)+ 520);
    v9 = 136315906;
    v10 = v4;
    v11 = 1024;
    v12 = v5;
    v13 = 1024;
    v14 = v6;
    v15 = 1024;
    v16 = v7;
    _os_log_impl(&dword_1B8270000, v3, OS_LOG_TYPE_DEFAULT, "truncate VectorStore %s(%u)[%u,%u]", (uint8_t *)&v9, 0x1Eu);
  }
  *__error() = v2;
  return storage_array_Truncate((uint64_t *)(*(_QWORD *)(a1 + 32) + 8));
}

void _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  const char *v40;
  _QWORD v41[2];
  _DWORD *(*v42)(uint64_t, unsigned int *, BOOL *);
  void *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[3];
  uint64_t v52[2];
  void *v53[3];
  __int128 v54;
  __int128 v55;
  char v56;
  __int128 v57;
  __int128 v58;

  if (IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nVectors(a2))
  {
    v38 = __si_assert_copy_extra_268();
    v39 = v38;
    v40 = "";
    if (v38)
      v40 = v38;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2589, "target->nVectors() == 0", v40);
    free(v39);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v6 = operator new(8uLL);
  v53[0] = v6;
  *v6 = a1;
  v53[1] = v6 + 1;
  v53[2] = v6 + 1;
  _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(*(_QWORD *)(a1 + 64), *(std::__shared_weak_count **)(a1 + 72), (uint64_t)v53);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v8 = *(_QWORD *)(a1 + 80);
  v7 = *(std::__shared_weak_count **)(a1 + 88);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v12 = *(_QWORD *)(a1 + 96);
  v11 = *(std::__shared_weak_count **)(a1 + 104);
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  v52[0] = v8;
  v52[1] = (uint64_t)v7;
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(a2, v52);
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::replaceQuantizer(a2, v52);
  }
  v50 = 0u;
  memset(v51, 0, sizeof(v51));
  v49 = 0u;
  v47 = v12;
  v48 = v11;
  if (v11)
  {
    v18 = (unint64_t *)&v11->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *(_QWORD *)(a1 + 48);
  v21 = *(std::__shared_weak_count **)(a1 + 56);
  v46[0] = v20;
  v46[1] = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v49, &v47, v46);
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 - 1, v22));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::enumerator_s((uint64_t)&v49, &v47, v46);
  }
  v25 = v48;
  if (v48)
  {
    v26 = (unint64_t *)&v48->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v41[0] = MEMORY[0x1E0C809B0];
  v41[1] = 0x40000000;
  v42 = ___ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE14compactForTestIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_PVi_block_invoke;
  v43 = &__block_descriptor_tmp_193;
  v44 = a2;
  v45 = a3;
  v57 = 0u;
  v58 = 0u;
  v56 = 0;
  do
  {
    _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12enumerator_s4nextEv((uint64_t)&v54, (uint64_t)&v49);
    v57 = v54;
    v58 = v55;
    if (!(_QWORD)v55)
      break;
    v42((uint64_t)v41, (unsigned int *)&v57, (BOOL *)&v56);
  }
  while (!v56);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v51);
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v11)
  {
    v34 = (unint64_t *)&v11->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v7)
  {
    v36 = (unint64_t *)&v7->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v53[0])
    operator delete(v53[0]);
}

void _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE5trainIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEvE4typeERKNS6_6vectorIPNS0_22IVFVectorIndexRootBaseENS6_9allocatorISD_EEEE(uint64_t a1, std::__shared_weak_count *a2, uint64_t a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  const void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  int v60;
  unint64_t *v61;
  unint64_t v62;
  unsigned int AppIntegerValue;
  unsigned int v64;
  unsigned int v65;
  double v66;
  unsigned __int8 *v67;
  unsigned __int8 v68;
  char *FdPtrForFile;
  char *v70;
  NSObject *v71;
  os_signpost_id_t v72;
  NSObject *v73;
  NSObject *v74;
  _QWORD *v75;
  uint64_t v76;
  std::ios_base *v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  int v84;
  NSObject *v85;
  os_log_type_t v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  int v89;
  NSObject *v90;
  os_log_type_t v91;
  Boolean *v92;
  double Current;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  char *v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  _BOOL4 v105;
  unint64_t *v106;
  unint64_t v107;
  unsigned int v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  char *v115;
  _BOOL4 v116;
  unint64_t v117;
  int v118;
  unsigned int v119;
  unsigned __int8 v120;
  NSObject *v121;
  unsigned int v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  NSObject *v126;
  NSObject *v127;
  int v128;
  NSObject *v129;
  CFAbsoluteTime v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  unsigned int v146;
  unsigned int v147;
  _BOOL4 v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  char *v153;
  char *v154;
  const char *v155;
  char *v156;
  char *v157;
  const char *v158;
  uint64_t v159;
  char *v160;
  const char *v161;
  os_signpost_id_t spid;
  unint64_t v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  unsigned int v167;
  size_t __sz;
  unint64_t v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176[2];
  uint64_t v177;
  std::__shared_weak_count *v178;
  Boolean keyExistsAndHasValidFormat[8];
  std::__shared_weak_count *v180;
  uint64_t v181;
  _OWORD v182[4];
  __int128 __p;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  uint8_t buf[32];
  Boolean block[8];
  uint64_t v206;
  _BYTE v207[24];
  uint64_t v208;

  v208 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = *(const void **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  v9 = v7 - *(_QWORD *)a3;
  if (v7 == *(_QWORD *)a3)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    if (v9 < 0)
      goto LABEL_251;
    v10 = (char *)operator new(v7 - *(_QWORD *)a3);
    v11 = &v10[8 * (v9 >> 3)];
    memcpy(v10, v8, v9);
  }
  v202 = 0;
  v203 = 0;
  _ZN16QuantizerManagerIDF16_Li256EE15sharedQuantizerEi(&v202, a1, 0);
  v12 = v11 - v10;
  v170 = a1;
  v171 = a2;
  if (v11 == v10)
  {
    v14 = 0;
    v13 = 0;
  }
  else
  {
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF9)
      goto LABEL_251;
    v13 = (char *)operator new(2 * v12);
    bzero(v13, 2 * v12);
    v14 = &v13[2 * v12];
  }
  __sz = v11 - v10;
  v15 = v12 >> 3;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v202 + 24))(v202);
  v172 = v11;
  v169 = v15;
  v17 = 0;
  if (v11 != v10)
  {
    if (v15 <= 1)
      v15 = 1;
    while (1)
    {
      (*(void (**)(Boolean *__return_ptr))(**(_QWORD **)&v10[8 * v17] + 16))(keyExistsAndHasValidFormat);
      v18 = v202;
      v20 = *(_QWORD *)keyExistsAndHasValidFormat;
      v19 = v180;
      if (!v180)
        goto LABEL_21;
      v21 = (unint64_t *)&v180->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        if (v20 == v18)
          goto LABEL_16;
      }
      else
      {
LABEL_21:
        if (v20 == v18)
          goto LABEL_16;
      }
      *(_QWORD *)keyExistsAndHasValidFormat = 0;
      v180 = 0;
      v23 = *(_QWORD *)&v10[8 * v17];
      v200 = v202;
      v201 = v203;
      if (v203)
      {
        v24 = (unint64_t *)&v203->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      (*(void (**)(Boolean *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v23 + 40))(keyExistsAndHasValidFormat, v23, &v200);
      v26 = v201;
      if (!v201)
        goto LABEL_29;
      v27 = (unint64_t *)&v201->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        v30 = *(_QWORD *)keyExistsAndHasValidFormat;
        v29 = v180;
        if (!v180)
          goto LABEL_32;
      }
      else
      {
LABEL_29:
        v30 = *(_QWORD *)keyExistsAndHasValidFormat;
        v29 = v180;
        if (!v180)
          goto LABEL_32;
      }
      v31 = (unint64_t *)&v29->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
LABEL_32:
      v33 = &v13[16 * v17];
      v34 = (std::__shared_weak_count *)*((_QWORD *)v33 + 1);
      *(_QWORD *)v33 = v30;
      *((_QWORD *)v33 + 1) = v29;
      if (!v34)
        goto LABEL_36;
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        v37 = v180;
        if (v180)
        {
LABEL_37:
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
      }
      else
      {
LABEL_36:
        v37 = v180;
        if (v180)
          goto LABEL_37;
      }
LABEL_16:
      if (++v17 == v15)
      {
        v17 = 0;
        v40 = 0;
        if (v169 <= 1)
          v41 = 1;
        else
          v41 = v169;
        while (1)
        {
          v42 = *(_QWORD *)&v13[16 * v40];
          if (v42)
          {
            v43 = *(_QWORD *)&v10[8 * v40];
            v198 = v202;
            v199 = v203;
            if (v203)
            {
              v44 = (unint64_t *)&v203->__shared_owners_;
              do
                v45 = __ldxr(v44);
              while (__stxr(v45 + 1, v44));
            }
            v46 = *(std::__shared_weak_count **)&v13[16 * v40 + 8];
            v196 = v42;
            v197 = v46;
            if (v46)
            {
              v47 = (unint64_t *)&v46->__shared_owners_;
              do
                v48 = __ldxr(v47);
              while (__stxr(v48 + 1, v47));
            }
            (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v43 + 48))(v43, &v198, &v196);
            v49 = v197;
            if (!v197)
              goto LABEL_61;
            v50 = (unint64_t *)&v197->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
              v52 = v199;
              if (!v199)
                goto LABEL_67;
            }
            else
            {
LABEL_61:
              v52 = v199;
              if (!v199)
                goto LABEL_67;
            }
            v53 = (unint64_t *)&v52->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
LABEL_67:
          (*(void (**)(Boolean *__return_ptr))(**(_QWORD **)&v10[8 * v40] + 24))(keyExistsAndHasValidFormat);
          v55 = v180;
          v56 = *(unsigned int *)(*(_QWORD *)keyExistsAndHasValidFormat + 72);
          if (v180)
          {
            v57 = (unint64_t *)&v180->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          (*(void (**)(Boolean *__return_ptr))(**(_QWORD **)&v10[8 * v40] + 24))(keyExistsAndHasValidFormat);
          v59 = v180;
          v60 = *(_DWORD *)(*(_QWORD *)keyExistsAndHasValidFormat + 68);
          if (v180)
          {
            v61 = (unint64_t *)&v180->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          if (v60 != v16)
          {
            v153 = __si_assert_copy_extra_268();
            v154 = v153;
            v155 = "";
            if (v153)
              v155 = v153;
            __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2080, "vectorIndexes[i]->getPartitions()->nPartitions() == nPartitions", v155);
LABEL_239:
            free(v154);
            if (__valid_fs(-1))
            {
              MEMORY[0xBAD] = -559038737;
              abort();
            }
            MEMORY[0xC00] = -559038737;
            abort();
          }
          v17 += v56;
          if (++v40 == v41)
            goto LABEL_79;
        }
      }
    }
  }
LABEL_79:
  keyExistsAndHasValidFormat[0] = 0;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionSizeFactor"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v64 = AppIntegerValue;
  else
    v64 = 45;
  keyExistsAndHasValidFormat[0] = 0;
  v65 = CFPreferencesGetAppIntegerValue(CFSTR("IVFTrainingTimeBudget"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v66 = (double)v65;
  else
    v66 = 30.0;
  if (v17 >> 4 < 0x271 || v17 < v64 * (unint64_t)v16 * v64 * (unint64_t)v16 / 0x64)
  {
LABEL_108:
    v87 = v171;
    if (!v13)
      goto LABEL_109;
    goto LABEL_187;
  }
  v67 = (unsigned __int8 *)(v170 + 72);
  do
    v68 = __ldaxr(v67);
  while (__stlxr(1u, v67));
  if ((v68 & 1) == 0 && *(_QWORD *)(v170 + 96))
  {
    v156 = __si_assert_copy_extra_268();
    v157 = v156;
    v158 = "";
    if (v156)
      v158 = v156;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 717, "_trainingQuantizer == nullptr", v158);
    free(v157);
    if (__valid_fs(-1))
      v159 = 2989;
    else
      v159 = 3072;
    *(_DWORD *)v159 = -559038737;
    goto LABEL_251;
  }
  FdPtrForFile = (char *)QuantizerManager<float,768>::createFdPtrForFile(v170, "dummy");
  if (!FdPtrForFile)
  {
    atomic_store(0, v67);
    goto LABEL_105;
  }
  v70 = FdPtrForFile;
  _fd_unlink_with_origin((uint64_t)FdPtrForFile, 0);
  fd_release(v70);
  if ((v68 & 1) != 0)
  {
LABEL_105:
    v84 = *__error();
    v85 = _SILogForLogForCategory(16);
    v86 = 2 * (dword_1EF19FCCC < 4);
    if (os_log_type_enabled(v85, v86))
    {
      *(_WORD *)keyExistsAndHasValidFormat = 0;
      _os_log_impl(&dword_1B8270000, v85, v86, "training quantizer already happen in other thread. Skip!", keyExistsAndHasValidFormat, 2u);
    }
    *__error() = v84;
    goto LABEL_108;
  }
  v167 = v64;
  v71 = _SILogForLogForCategory(0);
  v72 = os_signpost_id_make_with_pointer(v71, 0);
  v73 = _SILogForLogForCategory(0);
  spid = v72;
  v163 = v72 - 1;
  if (v72 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v74 = v73;
    if (os_signpost_enabled(v73))
    {
      *(_WORD *)keyExistsAndHasValidFormat = 0;
      _os_signpost_emit_with_name_impl(&dword_1B8270000, v74, OS_SIGNPOST_INTERVAL_BEGIN, v72, "IVFVectorIndexTrain", "Start", keyExistsAndHasValidFormat, 2u);
    }
  }
  v195 = 0u;
  v194 = 0u;
  v193 = 0u;
  v192 = 0u;
  v191 = 0u;
  v190 = 0u;
  v189 = 0u;
  v188 = 0u;
  v187 = 0u;
  v185 = 0;
  v184 = 0u;
  __p = 0u;
  memset(v182, 0, sizeof(v182));
  v180 = 0;
  v166 = MEMORY[0x1E0DE4FD0] + 104;
  v186 = MEMORY[0x1E0DE4FD0] + 104;
  v164 = MEMORY[0x1E0DE4FD0] + 64;
  v181 = MEMORY[0x1E0DE4FD0] + 64;
  v75 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v76 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)keyExistsAndHasValidFormat = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  *(_QWORD *)&keyExistsAndHasValidFormat[*(_QWORD *)(*(_QWORD *)keyExistsAndHasValidFormat - 24)] = v76;
  v180 = 0;
  v77 = (std::ios_base *)&keyExistsAndHasValidFormat[*(_QWORD *)(*(_QWORD *)keyExistsAndHasValidFormat - 24)];
  std::ios_base::init(v77, v182);
  v77[1].__vftable = 0;
  v77[1].__fmtflags_ = -1;
  v78 = v75[5];
  v181 = v75[4];
  *(uint64_t *)((char *)&v181 + *(_QWORD *)(v181 - 24)) = v78;
  *(_QWORD *)keyExistsAndHasValidFormat = v75[1];
  *(_QWORD *)&keyExistsAndHasValidFormat[*(_QWORD *)(*(_QWORD *)keyExistsAndHasValidFormat - 24)] = v75[6];
  v186 = v166;
  *(_QWORD *)keyExistsAndHasValidFormat = MEMORY[0x1E0DE4FD0] + 24;
  v181 = v164;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&v182[0] = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v184 = 0u;
  LODWORD(v185) = 24;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v181, (uint64_t)"[", 1);
  if (v172 != v10)
  {
    v79 = v10;
    do
    {
      (*(void (**)(Boolean *__return_ptr))(**(_QWORD **)v79 + 24))(block);
      v80 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v80, (uint64_t)", ", 2);
      v81 = (std::__shared_weak_count *)v206;
      if (v206)
      {
        v82 = (unint64_t *)(v206 + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v79 += 8;
    }
    while (v79 != v172);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v181, (uint64_t)"]", 1);
  v89 = *__error();
  v90 = _SILogForLogForCategory(16);
  v91 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v90, v91))
  {
    std::stringbuf::str();
    v92 = v207[7] >= 0 ? block : *(Boolean **)block;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v92;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v16;
    _os_log_impl(&dword_1B8270000, v90, v91, "training quantizer with %s vectors in %u partitions", buf, 0x12u);
    if ((v207[7] & 0x80000000) != 0)
      operator delete(*(void **)block);
  }
  *__error() = v89;
  Current = CFAbsoluteTimeGetCurrent();
  if (CFAbsoluteTimeGetCurrent() - Current >= v66)
  {
    v102 = 0;
    goto LABEL_169;
  }
  v94 = (sqrt((double)v17) / (double)v167);
  block[0] = 0;
  v95 = CFPreferencesGetAppIntegerValue(CFSTR("IVFSeedCentroidPerTraining"), CFSTR("com.apple.Spotlight"), block);
  if (block[0])
    v96 = v95;
  else
    v96 = 60;
  v165 = v94;
  v97 = 2 * (v94 - v16);
  if (v96 <= v97)
    v98 = v97;
  else
    v98 = v96;
  v177 = v170;
  v178 = v171;
  if (v171)
  {
    v99 = (unint64_t *)&v171->__shared_owners_;
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 1, v99));
  }
  memset(buf, 0, 24);
  if (v172 == v10)
  {
    v101 = 0;
    goto LABEL_132;
  }
  if ((__sz & 0x8000000000000000) != 0)
LABEL_251:
    abort();
  v101 = (char *)operator new(__sz);
  *(_QWORD *)buf = v101;
  *(_QWORD *)&buf[16] = &v101[8 * v169];
  memcpy(v101, v10, __sz);
  *(_QWORD *)&buf[8] = &v101[8 * v169];
LABEL_132:
  block[0] = 0;
  v103 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionRecycleTheshold"), CFSTR("com.apple.Spotlight"), block);
  if (block[0])
    v104 = v103;
  else
    v104 = 3;
  v105 = _ZN22IVFVectorIndexTemplateIDF16_Li256EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li256EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(&v177, buf, v98, v104);
  if (v101)
  {
    *(_QWORD *)&buf[8] = v101;
    operator delete(v101);
  }
  if (v171)
  {
    v106 = (unint64_t *)&v171->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  if (v105)
  {
    _ZN16QuantizerManagerIDF16_Li256EE20lastTrainedQuantizerEv(block, v170);
    v108 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)block + 24))(*(_QWORD *)block);
    v109 = (std::__shared_weak_count *)v206;
    if (v206)
    {
      v110 = (unint64_t *)(v206 + 8);
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
    if (v17 >= v167 * (unint64_t)v108 * v167 * (unint64_t)v108 / 0x64)
    {
      v112 = v171;
      v139 = (unint64_t *)&v171->__shared_owners_;
      v102 = 1;
      while (CFAbsoluteTimeGetCurrent() - Current < v66)
      {
        block[0] = 0;
        v140 = CFPreferencesGetAppIntegerValue(CFSTR("IVFSeedCentroidPerTraining"), CFSTR("com.apple.Spotlight"), block);
        if (block[0])
          v141 = v140;
        else
          v141 = 60;
        v142 = 2 * (v165 - v108);
        if (v141 <= v142)
          v143 = v142;
        else
          v143 = v141;
        v177 = v170;
        v178 = v112;
        if (v112)
        {
          do
            v144 = __ldxr(v139);
          while (__stxr(v144 + 1, v139));
        }
        memset(buf, 0, 24);
        if (v172 == v10)
        {
          v145 = 0;
        }
        else
        {
          if ((__sz & 0x8000000000000000) != 0)
            goto LABEL_251;
          v145 = (char *)operator new(__sz);
          *(_QWORD *)buf = v145;
          *(_QWORD *)&buf[16] = &v145[8 * v169];
          memcpy(v145, v10, __sz);
          *(_QWORD *)&buf[8] = &v145[8 * v169];
        }
        block[0] = 0;
        v146 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionRecycleTheshold"), CFSTR("com.apple.Spotlight"), block);
        if (block[0])
          v147 = v146;
        else
          v147 = 3;
        v148 = _ZN22IVFVectorIndexTemplateIDF16_Li256EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li256EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(&v177, buf, v143, v147);
        if (v145)
        {
          *(_QWORD *)&buf[8] = v145;
          operator delete(v145);
        }
        if (v171)
        {
          do
            v149 = __ldaxr(v139);
          while (__stlxr(v149 - 1, v139));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
          }
        }
        ++v102;
        if (!v148)
          goto LABEL_169;
        _ZN16QuantizerManagerIDF16_Li256EE20lastTrainedQuantizerEv(block, v170);
        v108 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)block + 24))(*(_QWORD *)block);
        v150 = (std::__shared_weak_count *)v206;
        if (v206)
        {
          v151 = (unint64_t *)(v206 + 8);
          do
            v152 = __ldaxr(v151);
          while (__stlxr(v152 - 1, v151));
          if (!v152)
          {
            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
            std::__shared_weak_count::__release_weak(v150);
          }
        }
        v112 = v171;
        if (v17 < v167 * (unint64_t)v108 * v167 * (unint64_t)v108 / 0x64)
          break;
      }
    }
    else
    {
      v102 = 1;
      v112 = v171;
    }
    v113 = (unint64_t *)&v112->__shared_owners_;
    while (1)
    {
      if (CFAbsoluteTimeGetCurrent() - Current >= v66)
        goto LABEL_169;
      v176[0] = v170;
      v176[1] = (uint64_t)v171;
      if (v171)
      {
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
      }
      v173 = 0;
      v174 = 0;
      v175 = 0;
      if (v172 != v10)
        break;
      v116 = _ZN22IVFVectorIndexTemplateIDF16_Li256EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li256EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(v176, &v173, 0, 2u);
      if (v171)
        goto LABEL_159;
LABEL_162:
      ++v102;
      if (v116)
      {
        block[0] = 0;
        v118 = CFPreferencesGetAppIntegerValue(CFSTR("IVFMaxTrainingIteration"), CFSTR("com.apple.Spotlight"), block);
        v119 = block[0] ? v118 : 3;
        if (v102 <= v119)
          continue;
      }
      goto LABEL_169;
    }
    if ((__sz & 0x8000000000000000) != 0)
      goto LABEL_251;
    v115 = (char *)operator new(__sz);
    v173 = v115;
    v175 = &v115[8 * v169];
    memcpy(v115, v10, __sz);
    v174 = &v115[8 * v169];
    v116 = _ZN22IVFVectorIndexTemplateIDF16_Li256EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li256EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(v176, &v173, 0, 2u);
    v174 = v115;
    operator delete(v115);
    if (!v171)
      goto LABEL_162;
    do
LABEL_159:
      v117 = __ldaxr(v113);
    while (__stlxr(v117 - 1, v113));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
    goto LABEL_162;
  }
  v102 = 1;
LABEL_169:
  v120 = atomic_load(v67);
  if ((v120 & 1) == 0)
  {
    v160 = __si_assert_copy_extra_268();
    v154 = v160;
    v161 = "";
    if (v160)
      v161 = v160;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 794, "_training.test()", v161);
    goto LABEL_239;
  }
  if (*(_QWORD *)(v170 + 96))
  {
    v121 = *(NSObject **)(v170 + 16);
    *(_QWORD *)block = MEMORY[0x1E0C809B0];
    v206 = 0x40000000;
    *(_QWORD *)v207 = ___ZN16QuantizerManagerIDF16_Li256EE23commitTrainingQuantizerEv_block_invoke;
    *(_QWORD *)&v207[8] = &__block_descriptor_tmp_226_5944;
    *(_QWORD *)&v207[16] = v170;
    dispatch_sync(v121, block);
  }
  atomic_store(0, (unsigned __int8 *)(v170 + 72));
  _ZN16QuantizerManagerIDF16_Li256EE15sharedQuantizerEi(block, v170, 0);
  v122 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)block + 24))(*(_QWORD *)block);
  v123 = (std::__shared_weak_count *)v206;
  if (v206)
  {
    v124 = (unint64_t *)(v206 + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = _SILogForLogForCategory(0);
  if (v163 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v127 = v126;
    if (os_signpost_enabled(v126))
    {
      *(_WORD *)block = 0;
      _os_signpost_emit_with_name_impl(&dword_1B8270000, v127, OS_SIGNPOST_INTERVAL_END, spid, "IVFVectorIndexTrain", "End", block, 2u);
    }
  }
  v128 = *__error();
  v129 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
  {
    v130 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)block = 67110144;
    *(_DWORD *)&block[4] = v17;
    LOWORD(v206) = 1024;
    *(_DWORD *)((char *)&v206 + 2) = v122;
    HIWORD(v206) = 1024;
    *(_DWORD *)v207 = v17 / v122;
    *(_WORD *)&v207[4] = 1024;
    *(_DWORD *)&v207[6] = v102;
    *(_WORD *)&v207[10] = 2048;
    *(double *)&v207[12] = v130 - Current;
    _os_log_impl(&dword_1B8270000, v129, OS_LOG_TYPE_DEFAULT, "training quantizer for %u vectors in %u partitions average size: %u for %u iterations duration: %fs", block, 0x24u);
  }
  *__error() = v128;
  *(_QWORD *)keyExistsAndHasValidFormat = *MEMORY[0x1E0DE4F50];
  v131 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)&keyExistsAndHasValidFormat[*(_QWORD *)(*(_QWORD *)keyExistsAndHasValidFormat - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v181 = v131;
  *(_QWORD *)&v182[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v184) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1BCCB0650](&v186);
  v87 = v171;
  if (!v13)
  {
LABEL_109:
    v88 = v203;
    if (!v203)
      goto LABEL_198;
    goto LABEL_194;
  }
LABEL_187:
  while (v14 != v13)
  {
    v132 = (std::__shared_weak_count *)*((_QWORD *)v14 - 1);
    if (v132)
    {
      v133 = (unint64_t *)&v132->__shared_owners_;
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
    v14 -= 16;
  }
  operator delete(v13);
  v88 = v203;
  if (v203)
  {
LABEL_194:
    v135 = (unint64_t *)&v88->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
LABEL_198:
  if (v10)
    operator delete(v10);
  if (v87)
  {
    v137 = (unint64_t *)&v87->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
}

void _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE12enumerator_s4nextEv(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(_QWORD *)(a2 + 72))
  {
    for (i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + ((*(_QWORD *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * *(_QWORD *)(a2 + 64));
          ;
          i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + ((v11 >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * v11))
    {
      *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)i + 16))(i);
      if (!*(_QWORD *)(a2 + 72))
        break;
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + ((*(_QWORD *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * *(_QWORD *)(a2 + 64));
      v6 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
      if (v6)
      {
        *(_DWORD *)(a1 + 4) = v6[1];
        v12 = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 32) + 16) * *v6, 0x210uLL);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(v12 + 520);
        *(_QWORD *)(a1 + 16) = v12;
        *(_QWORD *)(a1 + 24) = v12 + 512;
        return;
      }
      v7 = *(std::__shared_weak_count **)(*(_QWORD *)(*(_QWORD *)(a2 + 40)
                                                    + ((*(_QWORD *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                                        + 16 * *(_QWORD *)(a2 + 64)
                                        + 8);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = *(_QWORD *)(a2 + 72) - 1;
      v11 = *(_QWORD *)(a2 + 64) + 1;
      *(_QWORD *)(a2 + 64) = v11;
      *(_QWORD *)(a2 + 72) = v10;
      if (v11 >= 0x200)
      {
        operator delete(**(void ***)(a2 + 40));
        *(_QWORD *)(a2 + 40) += 8;
        v10 = *(_QWORD *)(a2 + 72);
        v11 = *(_QWORD *)(a2 + 64) - 256;
        *(_QWORD *)(a2 + 64) = v11;
      }
      if (!v10)
        return;
    }
  }
}

_DWORD *_ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li256EEjfb(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, char a5, float a6)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  const UInt8 *data;
  int v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  int v22;
  NSObject *v23;
  _BYTE *v24;
  int v25;
  NSObject *v26;
  _BYTE *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  _DWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  NSObject *v44;
  const UInt8 *v45;
  int v46;
  NSObject *v47;
  size_t v48;
  int v49;
  NSObject *v50;
  int v51;
  NSObject *v52;
  _BYTE *v53;
  int v54;
  NSObject *v55;
  _BYTE *v56;
  NSObject *v57;
  int v58;
  NSObject *v59;
  int v60;
  int v61;
  char *v62;
  char *v63;
  const char *v64;
  char *v65;
  char *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  NSObject *v76;
  _QWORD *v77;
  int v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  int v95;
  char *v96;
  const char *v97;
  char *v98;
  const char *v99;
  char *v100;
  const char *v101;
  char *v102;
  const char *v103;
  char *v104;
  const char *v105;
  std::__shared_weak_count *v106;
  unsigned int v107;
  void *__src;
  uint64_t v109;
  float v110;
  unsigned int v111;
  uint8_t buf[4];
  _BYTE *v113;
  _BYTE __p[12];
  __int16 v115;
  _BYTE v116[20];
  _BYTE v117[10];
  uint64_t v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v111 = a4;
  v110 = a6;
  if (*(_BYTE *)(a1 + 160))
  {
    v62 = __si_assert_copy_extra_268();
    v63 = v62;
    v64 = "";
    if (v62)
      v64 = v62;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2430, "!readOnly", v64);
    goto LABEL_121;
  }
  if ((a5 & 1) != 0)
  {
    v9 = a4;
    if ((_DWORD)a4 == -1)
      goto LABEL_79;
    goto LABEL_30;
  }
  v10 = _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li256EERjRfj(a1, (uint64_t)a3, (int *)&v111, &v110, a2);
  v9 = v111;
  if (v111 == -1)
  {
LABEL_79:
    v65 = __si_assert_copy_extra_268();
    v66 = v65;
    v67 = "";
    if (v65)
      v67 = v65;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2435, "partID != VECTOR_NOT_FOUND", v67);
    goto LABEL_82;
  }
  if (v10 == -1)
  {
LABEL_30:
    __src = a3;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    v28 = *(std::__shared_weak_count **)(a1 + 88);
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
    }
    v106 = v28;
    v32 = *(_DWORD **)(a1 + 96);
    v31 = *(std::__shared_weak_count **)(a1 + 104);
    if (v31)
    {
      v33 = (unint64_t *)&v31->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    v35 = *(_QWORD *)(a1 + 48);
    v36 = *(_QWORD **)(v35 + 32);
    v37 = v36[2];
    v38 = v36[7];
    v39 = v38 + v37;
    v107 = a2;
    if (v38 + v37 >= v36[6])
    {
      if (!_storage_array_Expand((uint64_t)(v36 + 1)))
      {
        v40 = 0;
        if (v37 > 0x20F)
          goto LABEL_89;
        goto LABEL_38;
      }
      v38 = v36[7];
      v39 = v38 + v37;
    }
    v36[7] = v39;
    v40 = (v38 - v36[3]) / v37;
    if (v37 > 0x20F)
      goto LABEL_89;
LABEL_38:
    v41 = v36[2];
    if (v41 <= 0x20F)
    {
      LODWORD(v42) = 528;
      do
      {
        v43 = v36[7] + v41;
        if (v43 >= v36[6])
        {
          if (!_storage_array_Expand((uint64_t)(v36 + 1)))
            goto LABEL_42;
          v43 = v36[7] + v41;
        }
        v36[7] = v43;
LABEL_42:
        v41 = v36[2];
        v42 = (v42 - v41);
      }
      while (v41 < v42);
    }
LABEL_89:
    v69 = (uint64_t)(v36 + 524);
    bit_vector_set_9027((uint64_t)(v36 + 524), (v40 >> 20));
    v70 = (v40 + 528) >> 20;
    if (v70 > (v40 >> 20))
    {
      v71 = (v40 >> 20) + 1;
      do
      {
        v72 = v71;
        bit_vector_set_9027(v69, v71++);
      }
      while (v70 > v72);
    }
    v73 = *(unsigned int *)(v35 + 40);
    v74 = v40;
    if (v40 != v73)
    {
      v75 = *__error();
      v76 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
      {
        v95 = *(_DWORD *)(v35 + 40);
        *(_DWORD *)__p = 136315906;
        *(_QWORD *)&__p[4] = "newEntry";
        v115 = 1024;
        *(_DWORD *)v116 = 1779;
        *(_WORD *)&v116[4] = 2048;
        *(_QWORD *)&v116[6] = v40;
        *(_WORD *)&v116[14] = 1024;
        *(_DWORD *)&v116[16] = v95;
        _os_log_error_impl(&dword_1B8270000, v76, OS_LOG_TYPE_ERROR, "%s:%d: offset: %llu, nVectors: %u", __p, 0x22u);
      }
      *__error() = v75;
      v77 = *(_QWORD **)(v35 + 32);
      v78 = *__error();
      v79 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
      {
        v80 = v77[6];
        v81 = v77[7];
        v83 = v77[2];
        v82 = v77[3];
        *(_DWORD *)__p = 134219008;
        *(_QWORD *)&__p[4] = v77;
        v115 = 2048;
        *(_QWORD *)v116 = v80;
        *(_WORD *)&v116[8] = 2048;
        *(_QWORD *)&v116[10] = v81;
        *(_WORD *)&v116[18] = 2048;
        *(_QWORD *)v117 = v82;
        *(_WORD *)&v117[8] = 2048;
        v118 = v83;
        _os_log_impl(&dword_1B8270000, v79, OS_LOG_TYPE_DEFAULT, "vi_onefixedsize_disk_allocator %p size: %llu, freeRegion: %llu, header: %llu, elemSize: %lu", __p, 0x34u);
      }
      *__error() = v78;
      v74 = *(unsigned int *)(v35 + 40);
      LODWORD(v73) = *(_DWORD *)(v35 + 40);
    }
    if (v40 == v74)
    {
      *(_DWORD *)(v35 + 40) = v73 + 1;
      v84 = (_QWORD *)_windowsResolvePtr(*(_QWORD *)(v35 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v35 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v35 + 32) + 16) * v40, 0x210uLL);
      memcpy(v84, __src, 0x200uLL);
      v84[64] = 0;
      (*(void (**)(_DWORD *, uint64_t, unint64_t, float))(*(_QWORD *)v32 + 56))(v32, v9, v40, v110);
      v85 = *(_QWORD *)(a1 + 48);
      if (v32[18] == *(_DWORD *)(v85 + 40))
      {
        v86 = v40;
        v87 = v40 >> 20;
        v88 = *(_QWORD *)(v85 + 32) + 4192;
        bit_vector_set_9027(v88, v87);
        v89 = ((unint64_t)v40 + 528) >> 20;
        if (v89 > v87)
        {
          do
            bit_vector_set_9027(v88, ++v87);
          while (v89 != v87);
        }
        v16 = (_DWORD *)_windowsResolvePtr(*(_QWORD *)(v85 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v85 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v85 + 32) + 16) * v86, 0x210uLL);
        v16[130] = v107;
        if (*(_DWORD *)(*(_QWORD *)(a1 + 48) + 40) == 1)
          *(_DWORD *)(a1 + 164) = v107;
        *(_DWORD *)(a1 + 168) = v107;
        data_map_set_offset_for_id(*(_QWORD *)(a1 + 144), v107, (16 * v86) | ((unint64_t)*(unsigned int *)(a1 + 40) << 36) | (4 * (*(_DWORD *)(a1 + 128) & 3)) | *(_DWORD *)(a1 + 124) & 3, *(unsigned __int16 *)(a1 + 120) | ((unint64_t)*(unsigned int *)(a1 + 132) << 32), *(_DWORD *)(a1 + 136));
        if (v31)
        {
          v90 = (unint64_t *)&v31->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        if (v106)
        {
          v92 = (unint64_t *)&v106->__shared_owners_;
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
        return v16;
      }
      v98 = __si_assert_copy_extra_268();
      v63 = v98;
      v99 = "";
      if (v98)
        v99 = v98;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2440, "cur.partitions->nVectors() == vectors->count()", v99);
    }
    else
    {
      v96 = __si_assert_copy_extra_268();
      v63 = v96;
      v97 = "";
      if (v96)
        v97 = v96;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1782, "offset == nVectors", v97);
    }
LABEL_121:
    free(v63);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v11 = *(_QWORD *)(a1 + 48);
  v12 = v10;
  v13 = (unint64_t)v10 >> 20;
  v14 = *(_QWORD *)(v11 + 32) + 4192;
  bit_vector_set_9027(v14, v13);
  v15 = (unint64_t)(v12 + 528) >> 20;
  if (v15 > v13)
  {
    do
      bit_vector_set_9027(v14, ++v13);
    while (v15 != v13);
  }
  v16 = (_DWORD *)_windowsResolvePtr(*(_QWORD *)(v11 + 32) + 40, *(_QWORD *)(*(_QWORD *)(v11 + 32) + 24) + *(_QWORD *)(*(_QWORD *)(v11 + 32) + 16) * v12, 0x210uLL);
  if (v16[130] != a2)
  {
    v109 = 0;
    data = data_map_get_data(*(_QWORD *)(a1 + 144), a2, &v109);
    v18 = *__error();
    v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 136316162;
      *(_QWORD *)&__p[4] = "lookupForInsert";
      v115 = 1024;
      *(_DWORD *)v116 = 2463;
      *(_WORD *)&v116[4] = 1024;
      *(_DWORD *)&v116[6] = a2;
      *(_WORD *)&v116[10] = 2048;
      *(_QWORD *)&v116[12] = data;
      *(_WORD *)v117 = 2048;
      *(_QWORD *)&v117[2] = v109;
      _os_log_error_impl(&dword_1B8270000, v19, OS_LOG_TYPE_ERROR, "%s:%d: vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v18;
    if (v109 < 1)
    {
      v25 = *__error();
      v44 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "lookupForInsert";
        v115 = 1024;
        *(_DWORD *)v116 = 2472;
        _os_log_error_impl(&dword_1B8270000, v44, OS_LOG_TYPE_ERROR, "%s:%d: vectorId is invalid", __p, 0x12u);
      }
    }
    else
    {
      if (v109 != 512)
      {
        v102 = __si_assert_copy_extra_268();
        v63 = v102;
        v103 = "";
        if (v102)
          v103 = v102;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2465, "size == D * sizeof(ELEM_TYPE)", v103);
        goto LABEL_121;
      }
      if (!data || !memcmp(data, a3, 0x200uLL))
      {
LABEL_49:
        v45 = data_map_get_data(*(_QWORD *)(a1 + 144), v16[130], &v109);
        v46 = *__error();
        v47 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          v60 = v16[130];
          *(_DWORD *)__p = 136316162;
          *(_QWORD *)&__p[4] = "lookupForInsert";
          v115 = 1024;
          *(_DWORD *)v116 = 2475;
          *(_WORD *)&v116[4] = 1024;
          *(_DWORD *)&v116[6] = v60;
          *(_WORD *)&v116[10] = 2048;
          *(_QWORD *)&v116[12] = v45;
          *(_WORD *)v117 = 2048;
          *(_QWORD *)&v117[2] = v109;
          _os_log_error_impl(&dword_1B8270000, v47, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
        }
        *__error() = v46;
        if (v109 < 1)
        {
          v54 = *__error();
          v57 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = "lookupForInsert";
            v115 = 1024;
            *(_DWORD *)v116 = 2484;
            _os_log_error_impl(&dword_1B8270000, v57, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId is invalid", __p, 0x12u);
          }
        }
        else
        {
          if (v109 != 512)
          {
            v104 = __si_assert_copy_extra_268();
            v63 = v104;
            v105 = "";
            if (v104)
              v105 = v104;
            __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2477, "size == D * sizeof(ELEM_TYPE)", v105);
            goto LABEL_121;
          }
          v48 = 512;
          if (!v45 || !memcmp(v45, v16, 0x200uLL))
            goto LABEL_72;
          v49 = *__error();
          v50 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = "lookupForInsert";
            v115 = 1024;
            *(_DWORD *)v116 = 2479;
            _os_log_error_impl(&dword_1B8270000, v50, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
          }
          *__error() = v49;
          v51 = *__error();
          v52 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            data2hexString(__p, (uint64_t)v45, v109);
            v53 = v116[9] >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)buf = 136315138;
            v113 = v53;
            _os_log_impl(&dword_1B8270000, v52, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
            if ((v116[9] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
          *__error() = v51;
          v54 = *__error();
          v55 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            data2hexString(__p, (uint64_t)v16, v109);
            v56 = v116[9] >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)buf = 136315138;
            v113 = v56;
            _os_log_impl(&dword_1B8270000, v55, OS_LOG_TYPE_DEFAULT, "vector in vector store: %s", buf, 0xCu);
            if ((v116[9] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
        }
        *__error() = v54;
        v48 = v109;
LABEL_72:
        if (memcmp(a3, v16, v48))
        {
          v100 = __si_assert_copy_extra_268();
          v66 = v100;
          v101 = "";
          if (v100)
            v101 = v100;
          __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2486, "memcmp(vec.vec, entry->vec.vec, size) == 0", v101);
LABEL_82:
          free(v66);
          if (__valid_fs(-1))
            v68 = 2989;
          else
            v68 = 3072;
          *(_DWORD *)v68 = -559038737;
          abort();
        }
        v58 = *__error();
        v59 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_FAULT))
        {
          v61 = v16[130];
          *(_DWORD *)__p = 136315906;
          *(_QWORD *)&__p[4] = "lookupForInsert";
          v115 = 1024;
          *(_DWORD *)v116 = 2487;
          *(_WORD *)&v116[4] = 1024;
          *(_DWORD *)&v116[6] = a2;
          *(_WORD *)&v116[10] = 1024;
          *(_DWORD *)&v116[12] = v61;
          _os_log_fault_impl(&dword_1B8270000, v59, OS_LOG_TYPE_FAULT, "%s:%d: Dup vector with new vectorId=%u old=%u", __p, 0x1Eu);
        }
        *__error() = v58;
        return v16;
      }
      v20 = *__error();
      v21 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "lookupForInsert";
        v115 = 1024;
        *(_DWORD *)v116 = 2467;
        _os_log_error_impl(&dword_1B8270000, v21, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v20;
      v22 = *__error();
      v23 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)data, v109);
        v24 = v116[9] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        v113 = v24;
        _os_log_impl(&dword_1B8270000, v23, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v116[9] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      *__error() = v22;
      v25 = *__error();
      v26 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)a3, v109);
        v27 = v116[9] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        v113 = v27;
        _os_log_impl(&dword_1B8270000, v26, OS_LOG_TYPE_DEFAULT, "vector passed in: %s", buf, 0xCu);
        if ((v116[9] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
    }
    *__error() = v25;
    goto LABEL_49;
  }
  return v16;
}

uint64_t _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li256EERjRfj(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, int a5)
{
  os_unfair_lock_s *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  _DWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char *v28;
  char *v29;
  const char *v30;
  char *v31;
  const char *v32;
  char *v33;
  char *v34;
  const char *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  _QWORD v40[8];
  int v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  int v45;

  v10 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v12 = *(_QWORD *)(a1 + 80);
  v11 = *(std::__shared_weak_count **)(a1 + 88);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v16 = *(_DWORD **)(a1 + 96);
  v15 = *(std::__shared_weak_count **)(a1 + 104);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  os_unfair_lock_unlock(v10);
  v19 = *a3;
  if ((_DWORD)v19 == -1)
  {
    if (*(_DWORD *)(a1 + 156) == -1)
    {
      v42 = 0;
      v43 = 0;
      v44 = 0;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 72))(&v42, v12, a2, 1);
      v20 = v42;
      if (v43 - (char *)v42 == 8)
      {
        v21 = *v42;
        *a3 = *v42;
        *a4 = v20[1];
        if (v21 >= IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1))
        {
          v33 = __si_assert_copy_extra_268();
          v34 = v33;
          if (v33)
            v35 = v33;
          else
            v35 = "";
          v36 = *a3;
          v37 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::nPartitions(a1);
          v38 = v16[19];
          v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          __message_assert("%s:%u: failed assertion '%s' %s Invalid partId %u >= %u (partitions: v%u quantizer v%u", "IVFVectorIndex.hh", 2403, "partID < nPartitions()", v35, v36, v37, v38, v39);
          free(v34);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if (v42)
        {
          v43 = (char *)v42;
          operator delete(v42);
        }
        v19 = *a3;
        goto LABEL_14;
      }
      v31 = __si_assert_copy_extra_268();
      v29 = v31;
      v32 = "";
      if (v31)
        v32 = v31;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2398, "topPartition.size() == 1", v32);
    }
    else
    {
      v28 = __si_assert_copy_extra_268();
      v29 = v28;
      v30 = "";
      if (v28)
        v30 = v28;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2396, "mergeBeginVectorOffset == VECTOR_NOT_FOUND", v30);
    }
    free(v29);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
LABEL_14:
  v42 = 0;
  v43 = (char *)&v42;
  v45 = -1;
  v44 = 0x2000000000;
  v40[0] = MEMORY[0x1E0C809B0];
  v40[1] = 0x40000000;
  v40[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li256EERjRfj_block_invoke;
  v40[3] = &unk_1E6E314B8;
  v41 = a5;
  v40[6] = a4;
  v40[7] = a2;
  v40[4] = &v42;
  v40[5] = a1;
  (*(void (**)(_DWORD *, uint64_t, _QWORD *))(*(_QWORD *)v16 + 80))(v16, v19, v40);
  v22 = *((unsigned int *)v43 + 6);
  _Block_object_dispose(&v42, 8);
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v11)
  {
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v22;
}

unint64_t ___ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li256EERjRfj_block_invoke(unint64_t result, uint64_t a2, float *a3, _BYTE *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  int v15;
  const void *v16;
  const void *v17;

  v5 = *(_QWORD *)(result + 40);
  v6 = *(unsigned int *)a3;
  if (v6 >= *(_DWORD *)(v5 + 156))
    goto LABEL_12;
  v8 = result;
  v9 = **(float **)(result + 48);
  v10 = a3[1];
  v11 = v9 == v10;
  v12 = vabds_f32(v9, v10);
  v13 = fmaxf(fminf(fabsf(v10), fabsf(v9)) * 0.000015259, 0.000015259);
  if (v11 || v12 <= v13)
  {
    v15 = *(_DWORD *)(result + 64);
    if (v15)
    {
      result = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 16) * v6, 0x210uLL);
      if (v15 != *(_DWORD *)(result + 520))
        return result;
      *(float *)&v6 = *a3;
    }
    v16 = *(const void **)(v8 + 56);
    v17 = (const void *)_windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32) + 16) * v6, 0x210uLL);
    result = memcmp(v16, v17, 0x200uLL);
    if (!(_DWORD)result)
    {
      *(float *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8) + 24) = *a3;
LABEL_12:
      *a4 = 1;
    }
  }
  return result;
}

BOOL _ZN22IVFVectorIndexTemplateIDF16_Li256EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li256EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj(uint64_t *a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  double Current;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  NSObject *v26;
  uint64_t v27;
  int v28;
  int v29;
  size_t v30;
  unint64_t v31;
  std::string *v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  std::string *v36;
  std::string::size_type size;
  std::string *v38;
  std::string::size_type v39;
  std::string *v40;
  std::string::size_type v41;
  const char *v42;
  _QWORD *FdPtrForFile;
  _QWORD *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  size_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  _QWORD *v62;
  size_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t *v73;
  char *v74;
  __int128 v75;
  int v76;
  NSObject *v77;
  _BOOL8 v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  const void *v84;
  _BYTE *v85;
  _BYTE *v86;
  _BYTE *v87;
  int64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t *v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  void *v114;
  void *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  __int128 v119;
  unint64_t *v120;
  uint64_t v121;
  size_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  int v132;
  std::string::size_type v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  const void *v138;
  const void *v139;
  uint64_t v140;
  float32x4_t *v141;
  float v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  _QWORD *v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  int v182;
  NSObject *v183;
  unsigned int v184;
  uint64_t v185;
  unint64_t v186;
  unsigned int v187;
  unint64_t v188;
  unint64_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  size_t v206;
  __int128 *v207;
  std::string::size_type v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t *v214;
  uint64_t v215;
  unint64_t v216;
  __int128 v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  int v226;
  std::__shared_weak_count *v227;
  int v228;
  unint64_t *v229;
  unint64_t v230;
  int v231;
  NSObject *v232;
  int v233;
  int v234;
  CFAbsoluteTime v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  __int128 *v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  int64_t v251;
  uint64_t v252;
  uint64_t *v253;
  __int128 v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t *v257;
  _BYTE *v258;
  int v259;
  char *v260;
  char *v261;
  const char *v262;
  uint64_t v263;
  char *v264;
  char *v265;
  const char *v266;
  char *v267;
  const char *v268;
  char *v269;
  const char *v270;
  char *v271;
  const char *v272;
  char *v273;
  const char *v274;
  char *v275;
  const char *v276;
  __int128 v277;
  uint64_t v278;
  size_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float16x8_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float16x8_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float16x8_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float16x8_t v315;
  float32x4_t v316;
  float16x8_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  float32x4_t v322;
  float16x8_t v323;
  float32x4_t v324;
  float16x8_t v325;
  float32x4_t v326;
  float32x4_t v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float16x8_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float16x8_t v335;
  float32x4_t v336;
  float16x8_t v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  float16x8_t v341;
  float32x4_t v342;
  float16x8_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  unsigned int v347;
  std::__shared_weak_count *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  void *v351;
  std::string::size_type v352;
  int v353;
  _QWORD *v354;
  __int128 v355;
  std::string::size_type v356;
  std::__shared_weak_count *v357;
  std::string v358;
  std::__shared_weak_count *v359;
  _QWORD v360[7];
  std::__shared_weak_count *v361;
  int v362;
  int v363;
  _BYTE v364[24];
  __int128 v365;
  _BYTE *v366;
  _BYTE *v367;
  unint64_t v368;
  uint64_t v369;
  std::__shared_weak_count *v370;
  std::string v371;
  _BYTE v372[1000];
  uint64_t v373;

  v347 = a4;
  v282 = a3;
  v373 = *MEMORY[0x1E0C80C00];
  Current = CFAbsoluteTimeGetCurrent();
  v370 = 0;
  v369 = 0;
  _ZN16QuantizerManagerIDF16_Li256EE20lastTrainedQuantizerEv(&v369, *a1);
  v7 = a2[1];
  v280 = *a2;
  v281 = v7;
  v8 = v7 - v280;
  if (v7 == v280)
  {
    v9 = 0;
  }
  else
  {
    if (v8 < 0)
      goto LABEL_322;
    v9 = operator new((unint64_t)v8 >> 1);
    bzero(v9, (unint64_t)v8 >> 1);
  }
  v278 = v8;
  v279 = v8 >> 3;
  v353 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v369 + 24))(v369);
  if (v281 != v280)
  {
    v10 = 0;
    if (v279 <= 1)
      v11 = 1;
    else
      v11 = v279;
    while (1)
    {
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(*a2 + 8 * v10) + 16))(v372);
      v12 = v369;
      v13 = *(_QWORD *)v372;
      v14 = *(std::__shared_weak_count **)&v372[8];
      if (*(_QWORD *)&v372[8])
      {
        v15 = (unint64_t *)(*(_QWORD *)&v372[8] + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (v13 != v12)
        break;
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(*a2 + 8 * v10) + 24))(v372);
      v17 = *(std::__shared_weak_count **)&v372[8];
      *((_DWORD *)v9 + v10) = *(_DWORD *)(*(_QWORD *)v372 + 72);
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(*a2 + 8 * v10) + 24))(v372);
      v20 = *(std::__shared_weak_count **)&v372[8];
      v21 = *(_DWORD *)(*(_QWORD *)v372 + 68);
      if (*(_QWORD *)&v372[8])
      {
        v22 = (unint64_t *)(*(_QWORD *)&v372[8] + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (v21 != v353)
      {
        v264 = __si_assert_copy_extra_268();
        v265 = v264;
        v266 = "";
        if (v264)
          v266 = v264;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1967, "vectorIndexes[i]->getPartitions()->nPartitions() == nPartitions", v266);
LABEL_316:
        free(v265);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if (++v10 == v11)
        goto LABEL_27;
    }
    v260 = __si_assert_copy_extra_268();
    v261 = v260;
    v262 = "";
    if (v260)
      v262 = v260;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1965, "vectorIndexes[i]->getQuantizer() == quantizer", v262);
LABEL_297:
    free(v261);
    if (__valid_fs(-1))
      v263 = 2989;
    else
      v263 = 3072;
    *(_DWORD *)v263 = -559038737;
    abort();
  }
LABEL_27:
  v24 = *a1;
  v25 = atomic_load((unsigned __int8 *)(v24 + 72));
  if ((v25 & 1) == 0)
  {
    v275 = __si_assert_copy_extra_268();
    v261 = v275;
    v276 = "";
    if (v275)
      v276 = v275;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 752, "_training.test()", v276);
    goto LABEL_297;
  }
  if (*(_QWORD *)(v24 + 96))
  {
    v26 = *(NSObject **)(v24 + 16);
    *(_QWORD *)v372 = MEMORY[0x1E0C809B0];
    *(_QWORD *)&v372[8] = 0x40000000;
    *(_QWORD *)&v372[16] = ___ZN16QuantizerManagerIDF16_Li256EE23commitTrainingQuantizerEv_block_invoke;
    *(_QWORD *)&v372[24] = &__block_descriptor_tmp_226_5944;
    *(_QWORD *)&v372[32] = v24;
    dispatch_sync(v26, v372);
  }
  v27 = *(_QWORD *)(v24 + 80);
  if (v27)
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27) + 1;
  else
    v28 = 1;
  v29 = *(char *)(v24 + 71);
  if (v29 >= 0)
    v30 = *(unsigned __int8 *)(v24 + 71);
  else
    v30 = *(_QWORD *)(v24 + 56);
  v31 = v30 + 1;
  if (v30 + 1 >= 0x7FFFFFFFFFFFFFF8)
LABEL_322:
    abort();
  if (v31 >= 0x17)
  {
    v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v33 = v31 | 7;
    v34 = v33 + 1;
    v32 = (std::string *)operator new(v33 + 1);
    v358.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
    v358.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    v358.__r_.__value_.__l.__size_ = v30 + 1;
  }
  else
  {
    memset(&v358, 0, sizeof(v358));
    v32 = &v358;
    *((_BYTE *)&v358.__r_.__value_.__s + 23) = v30 + 1;
    if (!v30)
      goto LABEL_47;
  }
  if (v29 >= 0)
    v35 = (const void *)(v24 + 48);
  else
    v35 = *(const void **)(v24 + 48);
  memmove(v32, v35, v30);
LABEL_47:
  *(_WORD *)((char *)&v32->__r_.__value_.__l.__data_ + v30) = 46;
  std::to_string(&v371, v28);
  if ((v371.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = &v371;
  else
    v36 = (std::string *)v371.__r_.__value_.__r.__words[0];
  if ((v371.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v371.__r_.__value_.__r.__words[2]);
  else
    size = v371.__r_.__value_.__l.__size_;
  v38 = std::string::append(&v358, (const std::string::value_type *)v36, size);
  v39 = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)v372 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  *(_QWORD *)&v372[16] = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  v40 = std::string::append((std::string *)v372, ".quantizer");
  v41 = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)v364 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  *(_QWORD *)&v364[16] = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if ((v372[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v371.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_55;
LABEL_107:
    operator delete(v371.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v358.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_56;
    goto LABEL_108;
  }
  operator delete(*(void **)v372);
  if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_107;
LABEL_55:
  if ((SHIBYTE(v358.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_56;
LABEL_108:
  operator delete(v358.__r_.__value_.__l.__data_);
LABEL_56:
  if (v364[23] >= 0)
    v42 = v364;
  else
    v42 = *(const char **)v364;
  FdPtrForFile = QuantizerManager<float,768>::createFdPtrForFile(v24, v42);
  if (FdPtrForFile)
  {
    v44 = FdPtrForFile;
    v45 = operator new();
    *(_QWORD *)v372 = v44;
    *(_QWORD *)&v372[8] = 0x1000000;
    *(_DWORD *)&v372[16] = 0;
    *(_DWORD *)&v372[20] = 65792;
    *(_DWORD *)&v372[24] = v28;
    *(_DWORD *)&v372[28] = 0;
    _ZN24AllocatedVectorQuantizerI30vi_onefixedsize_disk_allocatorDF16_Li256EEC2EN19vi_ondisk_allocator11meta_info_sE(v45, (uint64_t)v372);
    v46 = (std::__shared_weak_count *)operator new();
    v46->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E313A0;
    v46->__shared_owners_ = 0;
    v46->__shared_weak_owners_ = 0;
    v46[1].__vftable = (std::__shared_weak_count_vtbl *)v45;
    v47 = *(std::__shared_weak_count **)(v24 + 104);
    *(_QWORD *)(v24 + 96) = v45;
    *(_QWORD *)(v24 + 104) = v46;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (v49)
      {
        v45 = *(_QWORD *)(v24 + 96);
        v46 = *(std::__shared_weak_count **)(v24 + 104);
        if (v46)
          goto LABEL_65;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
        v45 = *(_QWORD *)(v24 + 96);
        v46 = *(std::__shared_weak_count **)(v24 + 104);
        if (v46)
          goto LABEL_65;
      }
      v350 = 0;
      if ((v364[23] & 0x80000000) == 0)
        goto LABEL_68;
      goto LABEL_111;
    }
LABEL_65:
    v350 = v46;
    v50 = (unint64_t *)&v46->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    if ((v364[23] & 0x80000000) == 0)
      goto LABEL_68;
    goto LABEL_111;
  }
  v76 = *__error();
  v77 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v77, OS_LOG_TYPE_FAULT))
  {
    v258 = v364;
    if (v364[23] < 0)
      v258 = *(_BYTE **)v364;
    v259 = *(_DWORD *)v24;
    *(_DWORD *)v372 = 136315906;
    *(_QWORD *)&v372[4] = "newQuantizer";
    *(_WORD *)&v372[12] = 1024;
    *(_DWORD *)&v372[14] = 772;
    *(_WORD *)&v372[18] = 2080;
    *(_QWORD *)&v372[20] = v258;
    *(_WORD *)&v372[28] = 1024;
    *(_DWORD *)&v372[30] = v259;
    _os_log_fault_impl(&dword_1B8270000, v77, OS_LOG_TYPE_FAULT, "%s:%d: Failed to create %s in parentFd: %i", v372, 0x22u);
  }
  v350 = 0;
  v45 = 0;
  *__error() = v76;
  if ((v364[23] & 0x80000000) == 0)
  {
LABEL_68:
    if (v45)
      goto LABEL_69;
LABEL_112:
    v78 = 0;
    v79 = v350;
    goto LABEL_272;
  }
LABEL_111:
  operator delete(*(void **)v364);
  if (!v45)
    goto LABEL_112;
LABEL_69:
  v365 = 0u;
  *(_OWORD *)&v364[8] = 0u;
  *(_QWORD *)v364 = off_1E6E31428;
  v366 = 0;
  v368 = 0;
  v367 = 0;
  bzero(v372, 0x400uLL);
  snprintf(v372, 0x400uLL, "A0-%ux%dx%u", v282, 256, 16);
  MEMORY[0x1BCCB03B0](&v364[8], v372);
  v351 = v9;
  v354 = a2;
  v352 = v45;
  if ((_DWORD)v282)
  {
    memset(v372, 0, 24);
    if (v281 == v280)
    {
      v54 = 0;
      v53 = 0;
    }
    else
    {
      v52 = 0;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      if (v279 <= 1)
        v56 = 1;
      else
        v56 = v279;
      do
      {
        memset(&v358, 0, sizeof(v358));
        (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(*a2 + 8 * v52) + 24))(&v371);
        MaxSizePriorityQueue<AnyPartitionStore::CandidateEntry,std::vector<AnyPartitionStore::CandidateEntry>,AnyPartitionStore::CandidateQueue::Lesser>::allItems((uint64_t **)&v358, *(_BYTE **)(v371.__r_.__value_.__r.__words[0] + 32), *(_BYTE **)(v371.__r_.__value_.__r.__words[0] + 40));
        v57 = (std::__shared_weak_count *)v371.__r_.__value_.__l.__size_;
        if (v371.__r_.__value_.__l.__size_)
        {
          v58 = (unint64_t *)(v371.__r_.__value_.__l.__size_ + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v60 = (_BYTE *)v358.__r_.__value_.__l.__size_;
        v61 = (_BYTE *)v358.__r_.__value_.__r.__words[0];
        if (v358.__r_.__value_.__l.__size_ != v358.__r_.__value_.__r.__words[0])
        {
          v62 = *(_QWORD **)&v372[8];
          if (*(_QWORD *)&v372[8] >= *(_QWORD *)&v372[16])
          {
            v66 = std::vector<std::vector<AnyPartitionStore::CandidateEntry>>::__push_back_slow_path<std::vector<AnyPartitionStore::CandidateEntry> const&>((char **)v372, v358.__r_.__value_.__l.__data_, v358.__r_.__value_.__l.__size_);
          }
          else
          {
            **(_QWORD **)&v372[8] = 0;
            v62[1] = 0;
            v62[2] = 0;
            v63 = v60 - v61;
            if (v60 - v61 < 0)
              goto LABEL_322;
            v64 = (char *)operator new(v60 - v61);
            *v62 = v64;
            v62[1] = v64;
            v65 = &v64[v63];
            v62[2] = &v64[v63];
            memcpy(v64, v61, v63);
            v62[1] = v65;
            v66 = (char *)(v62 + 3);
          }
          *(_QWORD *)&v372[8] = v66;
          v68 = *((_QWORD *)v66 - 3);
          v67 = *((_QWORD *)v66 - 2);
          if (v54 >= v55)
          {
            v69 = 0xAAAAAAAAAAAAAAABLL * ((v54 - (char *)v53) >> 3) + 1;
            if (v69 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_322;
            if (0x5555555555555556 * ((v55 - (char *)v53) >> 3) > v69)
              v69 = 0x5555555555555556 * ((v55 - (char *)v53) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v55 - (char *)v53) >> 3) >= 0x555555555555555)
              v70 = 0xAAAAAAAAAAAAAAALL;
            else
              v70 = v69;
            if (v70)
            {
              if (v70 > 0xAAAAAAAAAAAAAAALL)
LABEL_323:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v71 = (char *)operator new(24 * v70);
            }
            else
            {
              v71 = 0;
            }
            v72 = &v71[8 * ((v54 - (char *)v53) >> 3)];
            *(_QWORD *)v72 = v68;
            *((_QWORD *)v72 + 1) = v67;
            *((_QWORD *)v72 + 2) = v52;
            v73 = (uint64_t *)v72;
            if (v54 != (char *)v53)
            {
              v74 = &v71[8 * ((v54 - (char *)v53) >> 3)];
              do
              {
                v73 = (uint64_t *)(v74 - 24);
                v75 = *(_OWORD *)(v54 - 24);
                *((_QWORD *)v74 - 1) = *((_QWORD *)v54 - 1);
                *(_OWORD *)(v74 - 24) = v75;
                v54 -= 24;
                v74 -= 24;
              }
              while (v54 != (char *)v53);
            }
            v55 = &v71[24 * v70];
            a2 = v354;
            if (v53)
              operator delete(v53);
            v54 = v72;
            v53 = v73;
          }
          else
          {
            *(_QWORD *)v54 = v68;
            *((_QWORD *)v54 + 1) = v67;
            *((_QWORD *)v54 + 2) = v52;
            a2 = v354;
          }
          v54 += 24;
          v60 = (_BYTE *)v358.__r_.__value_.__r.__words[0];
        }
        if (v60)
          operator delete(v60);
        ++v52;
      }
      while (v52 != v56);
    }
    v80 = v54 - (char *)v53;
    if (v54 - (char *)v53 >= 25 && (unint64_t)v80 >= 0x30)
    {
      v251 = (v80 / 0x18uLL - 2) >> 1;
      v252 = v251;
      do
      {
        if (v251 >= v252)
        {
          v253 = &v53[3 * v252];
          v254 = *(_OWORD *)v253;
          v255 = v253[2];
          v256 = v252;
          do
          {
            v257 = v253;
            v256 = (2 * v256) | 1;
            v253 = &v53[3 * v256];
            *v257 = *v253;
            *(_OWORD *)(v257 + 1) = *(_OWORD *)(v253 + 1);
          }
          while (v251 >= v256);
          *(_OWORD *)v253 = v254;
          v253[2] = v255;
        }
        v99 = v252-- <= 0;
      }
      while (!v99);
    }
    for (; v54 != (char *)v53; v80 = v54 - (char *)v53)
    {
      if (((unint64_t)(v367 - v366) >> 9) >= v282)
        break;
      v83 = *(_QWORD *)(*a2 + 8 * v53[2]);
      v84 = (const void *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, *(unsigned int *)*v53);
      v85 = v367;
      if ((unint64_t)v367 >= v368)
      {
        v349 = v80;
        v87 = v366;
        v88 = (v367 - v366) >> 9;
        v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 55)
          goto LABEL_322;
        v90 = v368 - (_QWORD)v366;
        if ((uint64_t)(v368 - (_QWORD)v366) >> 8 > v89)
          v89 = v90 >> 8;
        v91 = (unint64_t)v90 >= 0x7FFFFFFFFFFFFE00 ? 0x7FFFFFFFFFFFFFLL : v89;
        if (v91)
        {
          if (v91 >> 55)
            goto LABEL_323;
          v92 = (std::__shared_weak_count *)operator new(v91 << 9);
        }
        else
        {
          v92 = 0;
        }
        v348 = v92;
        v93 = (char *)v92 + 512 * v88;
        memcpy(v93, v84, 0x200uLL);
        v94 = v93;
        if (v85 != v87)
        {
          do
          {
            v85 -= 512;
            v94 -= 512;
            memcpy(v94, v85, 0x200uLL);
          }
          while (v85 != v87);
          v85 = v87;
        }
        v86 = v93 + 512;
        v366 = v94;
        v367 = v86;
        v368 = (unint64_t)v348 + 512 * v91;
        v80 = v349;
        if (v85)
          operator delete(v85);
      }
      else
      {
        memcpy(v367, v84, 0x200uLL);
        v86 = v85 + 512;
      }
      v367 = v86;
      v95 = v53[1];
      v96 = *v53 + 8;
      *v53 = v96;
      a2 = v354;
      if (v96 == v95)
      {
        if (v80 >= 25)
        {
          v105 = 0;
          v106 = v53[2];
          v107 = v53;
          do
          {
            v108 = v107;
            v109 = &v107[3 * v105];
            v110 = v109[3];
            v107 = v109 + 3;
            v105 = (2 * v105) | 1;
            *v108 = v110;
            *(_OWORD *)(v108 + 1) = *(_OWORD *)(v107 + 1);
          }
          while (v105 <= (uint64_t)((v80 / 0x18uLL - 2) >> 1));
          if (v107 == (uint64_t *)(v54 - 24))
          {
            v81 = (char *)(v107 + 1);
            v82 = (char *)(v107 + 2);
          }
          else
          {
            *v107 = *((_QWORD *)v54 - 3);
            v81 = v54 - 16;
            v82 = v54 - 8;
            *(_OWORD *)(v107 + 1) = *((_OWORD *)v54 - 1);
            v107 = (uint64_t *)(v54 - 24);
          }
          *v107 = v96;
          *(_QWORD *)v81 = v95;
          *(_QWORD *)v82 = v106;
        }
        v54 -= 24;
      }
      else if (v80 >= 48)
      {
        v97 = (v80 / 0x18uLL - 2) >> 1;
        v98 = v97;
        do
        {
          if (v97 >= v98)
          {
            v100 = &v53[3 * v98];
            v101 = *(_OWORD *)v100;
            v102 = v100[2];
            v103 = v98;
            do
            {
              v104 = v100;
              v103 = (2 * v103) | 1;
              v100 = &v53[3 * v103];
              *v104 = *v100;
              *(_OWORD *)(v104 + 1) = *(_OWORD *)(v100 + 1);
            }
            while (v97 >= v103);
            *(_OWORD *)v100 = v101;
            v100[2] = v102;
          }
          v99 = v98-- <= 0;
        }
        while (!v99);
      }
    }
    v111 = *(char **)v372;
    v9 = v351;
    if (*(_QWORD *)v372)
    {
      v112 = *(char **)&v372[8];
      if (*(_QWORD *)&v372[8] != *(_QWORD *)v372)
      {
        v113 = *(char **)&v372[8];
        do
        {
          v115 = (void *)*((_QWORD *)v113 - 3);
          v113 -= 24;
          v114 = v115;
          if (v115)
          {
            *((_QWORD *)v112 - 2) = v114;
            operator delete(v114);
          }
          v112 = v113;
        }
        while (v113 != v111);
      }
      operator delete(v111);
    }
    if (v53)
      operator delete(v53);
  }
  v349 = (unint64_t)(v367 - v366) >> 9;
  v116 = (std::__shared_weak_count_vtbl *)operator new[]();
  v117 = v116;
  if (v353 + (_DWORD)v349)
    bzero(v116, 1028 * ((1028 * (unint64_t)(v353 + v349) - 1028) / 0x404) + 1028);
  v118 = (std::__shared_weak_count *)operator new();
  v118->__shared_owners_ = 0;
  v120 = (unint64_t *)&v118->__shared_owners_;
  v118->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E31488;
  v118->__shared_weak_owners_ = 0;
  v118[1].__vftable = v117;
  v348 = v118;
  if (v281 != v280)
  {
    v121 = 0;
    if (v279 <= 1)
      v122 = 1;
    else
      v122 = v279;
    do
    {
      v123 = *(_QWORD *)(*v354 + 8 * v121);
      *(_QWORD *)&v372[8] = 0;
      *(_QWORD *)v372 = 0;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v123 + 24))(v372, v123);
      v124 = *(_QWORD *)v372;
      v360[0] = MEMORY[0x1E0C809B0];
      v360[1] = 1174405120;
      v360[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li256EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li256EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj_block_invoke;
      v360[3] = &__block_descriptor_tmp_223;
      v360[4] = v123;
      v360[5] = v364;
      v362 = v349;
      v363 = v353;
      v360[6] = v117;
      v361 = v348;
      do
        v125 = __ldxr(v120);
      while (__stxr(v125 + 1, v120));
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v124 + 64))(v124, v360);
      v126 = v361;
      if (!v361)
        goto LABEL_178;
      v127 = (unint64_t *)&v361->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
        v129 = *(std::__shared_weak_count **)&v372[8];
        if (*(_QWORD *)&v372[8])
        {
LABEL_179:
          v130 = (unint64_t *)&v129->__shared_owners_;
          do
            v131 = __ldaxr(v130);
          while (__stlxr(v131 - 1, v130));
          if (!v131)
          {
            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
            std::__shared_weak_count::__release_weak(v129);
          }
        }
      }
      else
      {
LABEL_178:
        v129 = *(std::__shared_weak_count **)&v372[8];
        if (*(_QWORD *)&v372[8])
          goto LABEL_179;
      }
      ++v121;
    }
    while (v121 != v122);
  }
  if (v353 + ((unint64_t)(v367 - v366) >> 9))
  {
    v140 = 0;
    v132 = 0;
    *(_QWORD *)&v119 = 67109376;
    v277 = v119;
    v133 = v352;
    while (1)
    {
      v141 = (float32x4_t *)((char *)v117 + 1028 * v140);
      v142 = v141[64].f32[0];
      if (v142 < v347)
      {
        ++v132;
        if (dword_1EF19FCCC >= 5)
        {
          v182 = *__error();
          v183 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v183, OS_LOG_TYPE_DEFAULT))
          {
            v184 = v141[64].f32[0];
            *(_DWORD *)v372 = v277;
            *(_DWORD *)&v372[4] = v140;
            *(_WORD *)&v372[8] = 1024;
            *(_DWORD *)&v372[10] = v184;
            _os_log_impl(&dword_1B8270000, v183, OS_LOG_TYPE_DEFAULT, "remove outlier newCentroid[%u] with member: %u", v372, 0xEu);
          }
          *__error() = v182;
        }
        goto LABEL_195;
      }
      if (v142 <= 0.0)
      {
        v269 = __si_assert_copy_extra_268();
        v265 = v269;
        v270 = "";
        if (v269)
          v270 = v269;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 152, "_count > 0.0f", v270);
        goto LABEL_316;
      }
      if (*(_BYTE *)(v133 + 56))
      {
        v271 = __si_assert_copy_extra_268();
        v265 = v271;
        v272 = "";
        if (v271)
          v272 = v271;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 522, "!readOnly", v272);
        goto LABEL_316;
      }
      v143 = v141[1];
      v288 = *v141;
      v144 = v141[3];
      v291 = v141[2];
      v145 = v141[5];
      v292 = v141[4];
      v293 = v143;
      v146 = v141[7];
      v296 = v141[6];
      v297 = (float16x8_t)v144;
      v147 = v141[9];
      v300 = v141[8];
      v301 = v145;
      v148 = v141[11];
      v302 = v141[10];
      v303 = (float16x8_t)v146;
      v149 = v141[13];
      v306 = v141[12];
      v307 = v147;
      v150 = v141[15];
      v310 = v141[14];
      v311 = (float16x8_t)v148;
      v151 = v141[17];
      v312 = v141[16];
      v313 = v149;
      v152 = v141[19];
      v316 = v141[18];
      v317 = (float16x8_t)v150;
      v153 = v141[21];
      v320 = v141[20];
      v321 = v151;
      v154 = v141[23];
      v322 = v141[22];
      v323 = (float16x8_t)v152;
      v155 = v141[25];
      v326 = v141[24];
      v327 = v153;
      v156 = v141[27];
      v330 = v141[26];
      v331 = (float16x8_t)v154;
      v157 = v141[29];
      v332 = v141[28];
      v333 = v155;
      v158 = v141[31];
      v340 = v157;
      v341 = (float16x8_t)v158;
      v336 = v141[30];
      v337 = (float16x8_t)v156;
      v159 = *(_QWORD **)(v133 + 40);
      v160 = v159[2];
      v162 = v159[6];
      v161 = v159[7];
      v163 = v161 + v160;
      v164 = v141[33];
      v283 = v141[32];
      v165 = v141[35];
      v284 = v141[34];
      v285 = v164;
      v166 = v141[37];
      v286 = v141[36];
      v287 = v165;
      v167 = v141[39];
      v289 = v141[38];
      v290 = v166;
      v168 = v141[41];
      v294 = v141[40];
      v295 = v167;
      v169 = v141[43];
      v298 = v141[42];
      v299 = v168;
      v170 = v141[45];
      v304 = v141[44];
      v305 = v169;
      v171 = v141[47];
      v308 = v141[46];
      v309 = v170;
      v172 = v141[49];
      v314 = v141[48];
      v315 = (float16x8_t)v171;
      v173 = v141[51];
      v318 = v141[50];
      v319 = v172;
      v174 = v141[53];
      v324 = v141[52];
      v325 = (float16x8_t)v173;
      v175 = v141[55];
      v328 = v141[54];
      v329 = v174;
      v176 = v141[57];
      v334 = v141[56];
      v335 = (float16x8_t)v175;
      v177 = v141[59];
      v338 = v141[58];
      v339 = v176;
      v345 = v141[61];
      v342 = v141[60];
      v343 = (float16x8_t)v177;
      v346 = v141[63];
      v344 = v141[62];
      if (v161 + v160 < v162)
        goto LABEL_200;
      if (_storage_array_Expand((uint64_t)(v159 + 1)))
        break;
      v178 = 0;
      if (v160 <= 0x1FF)
      {
LABEL_201:
        v179 = v159[2];
        if (v179 <= 0x1FF)
        {
          LODWORD(v180) = 512;
          do
          {
            v181 = v159[7] + v179;
            if (v181 >= v159[6])
            {
              if (!_storage_array_Expand((uint64_t)(v159 + 1)))
                goto LABEL_205;
              v181 = v159[7] + v179;
            }
            v159[7] = v181;
LABEL_205:
            v179 = v159[2];
            v180 = (v180 - v179);
          }
          while (v179 < v180);
        }
      }
LABEL_215:
      v185 = (uint64_t)(v159 + 524);
      bit_vector_set_9027(v185, (v178 >> 20));
      v186 = (v178 + 512) >> 20;
      if (v186 > (v178 >> 20))
      {
        v187 = (v178 >> 20) + 1;
        do
        {
          v188 = v187;
          bit_vector_set_9027(v185, v187++);
        }
        while (v186 > v188);
      }
      v133 = v352;
      if (v178 != *(_DWORD *)(v352 + 48))
      {
        v273 = __si_assert_copy_extra_268();
        v265 = v273;
        v274 = "";
        if (v273)
          v274 = v273;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 524, "offset == nCentroids", v274);
        goto LABEL_316;
      }
      v293 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v288), v293);
      v297 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v291), (float32x4_t)v297);
      v301 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v292), v301);
      v303 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v296), (float32x4_t)v303);
      v307 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v300), v307);
      v311 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v302), (float32x4_t)v311);
      v313 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v306), v313);
      v317 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v310), (float32x4_t)v317);
      v321 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v312), v321);
      v323 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v316), (float32x4_t)v323);
      v327 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v320), v327);
      v331 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v322), (float32x4_t)v331);
      v333 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v326), v333);
      v337 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v330), (float32x4_t)v337);
      v340 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v332), v340);
      v341 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v336), (float32x4_t)v341);
      v336 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v283), v285);
      v332 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v284), v287);
      v330 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v286), v290);
      v326 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v289), v295);
      v322 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v294), v299);
      v320 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v298), v305);
      v316 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v304), v309);
      v315 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v308), (float32x4_t)v315);
      v319 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v314), v319);
      v325 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v318), (float32x4_t)v325);
      v329 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v324), v329);
      v335 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v328), (float32x4_t)v335);
      v339 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v334), v339);
      v343 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v338), (float32x4_t)v343);
      v345 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v342), v345);
      v346 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v344), v346);
      v189 = _windowsResolvePtr(*(_QWORD *)(v352 + 40) + 40, *(_QWORD *)(*(_QWORD *)(v352 + 40) + 24) + *(_QWORD *)(*(_QWORD *)(v352 + 40) + 16) * v178, 0x200uLL);
      v190 = (float32x4_t)v297;
      *(float32x4_t *)v189 = v293;
      *(float32x4_t *)(v189 + 16) = v190;
      v191 = (float32x4_t)v303;
      *(float32x4_t *)(v189 + 32) = v301;
      *(float32x4_t *)(v189 + 48) = v191;
      v192 = (float32x4_t)v311;
      *(float32x4_t *)(v189 + 64) = v307;
      *(float32x4_t *)(v189 + 80) = v192;
      v193 = (float32x4_t)v317;
      *(float32x4_t *)(v189 + 96) = v313;
      *(float32x4_t *)(v189 + 112) = v193;
      v194 = (float32x4_t)v323;
      *(float32x4_t *)(v189 + 128) = v321;
      *(float32x4_t *)(v189 + 144) = v194;
      v195 = (float32x4_t)v331;
      *(float32x4_t *)(v189 + 160) = v327;
      *(float32x4_t *)(v189 + 176) = v195;
      v196 = (float32x4_t)v337;
      *(float32x4_t *)(v189 + 192) = v333;
      *(float32x4_t *)(v189 + 208) = v196;
      v197 = (float32x4_t)v341;
      *(float32x4_t *)(v189 + 224) = v340;
      *(float32x4_t *)(v189 + 240) = v197;
      v198 = v332;
      *(float32x4_t *)(v189 + 256) = v336;
      *(float32x4_t *)(v189 + 272) = v198;
      v199 = v326;
      *(float32x4_t *)(v189 + 288) = v330;
      *(float32x4_t *)(v189 + 304) = v199;
      v200 = v320;
      *(float32x4_t *)(v189 + 320) = v322;
      *(float32x4_t *)(v189 + 336) = v200;
      v201 = (float32x4_t)v315;
      *(float32x4_t *)(v189 + 352) = v316;
      *(float32x4_t *)(v189 + 368) = v201;
      v202 = (float32x4_t)v325;
      *(float32x4_t *)(v189 + 384) = v319;
      *(float32x4_t *)(v189 + 400) = v202;
      v203 = (float32x4_t)v335;
      *(float32x4_t *)(v189 + 416) = v329;
      *(float32x4_t *)(v189 + 432) = v203;
      v204 = (float32x4_t)v343;
      *(float32x4_t *)(v189 + 448) = v339;
      *(float32x4_t *)(v189 + 464) = v204;
      v205 = v346;
      *(float32x4_t *)(v189 + 480) = v345;
      *(float32x4_t *)(v189 + 496) = v205;
      ++*(_DWORD *)(v133 + 48);
      *(_DWORD *)(_windowsResolvePtr(*(_QWORD *)(v133 + 40) + 40, 0x400uLL, *(_QWORD *)(*(_QWORD *)(v133 + 40) + 16))+ 4) = *(_DWORD *)(v133 + 48);
      v9 = v351;
LABEL_195:
      if (++v140 >= (unint64_t)(v353 + ((unint64_t)(v367 - v366) >> 9)))
        goto LABEL_187;
    }
    v161 = v159[7];
    v163 = v161 + v160;
LABEL_200:
    v159[7] = v163;
    v178 = (v161 - v159[3]) / v160;
    if (v160 <= 0x1FF)
      goto LABEL_201;
    goto LABEL_215;
  }
  v132 = 0;
  v133 = v352;
LABEL_187:
  v353 = v132;
  v134 = v369;
  v135 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v369 + 24))(v369);
  v136 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v133 + 24))(v133);
  if (v135 == (_DWORD)v136)
  {
    v136 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v134 + 24))(v134);
    if ((_DWORD)v136)
    {
      v137 = 0;
      while (1)
      {
        v138 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 64))(v134, v137);
        v139 = (const void *)(*(uint64_t (**)(std::string::size_type, uint64_t))(*(_QWORD *)v133 + 64))(v133, v137);
        v136 = memcmp(v138, v139, 0x200uLL);
        v78 = (_DWORD)v136 != 0;
        if ((_DWORD)v136)
          break;
        v137 = (v137 + 1);
        v136 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v134 + 24))(v134);
        if (v137 >= v136)
          goto LABEL_192;
      }
    }
    else
    {
LABEL_192:
      v78 = 0;
    }
  }
  else
  {
    v78 = 1;
  }
  v206 = 16 * v279;
  MEMORY[0x1E0C80A78](v136);
  v207 = &v277 - v279;
  bzero(v207, 2 * v278);
  if (v281 != v280)
    bzero((char *)&v277 - v206, v206);
  v208 = *v354;
  v358.__r_.__value_.__r.__words[0] = (std::string::size_type)&v277 - v206;
  v358.__r_.__value_.__l.__size_ = v208;
  v358.__r_.__value_.__r.__words[2] = v133;
  v209 = v350;
  v359 = v350;
  if (v350)
  {
    v210 = (unint64_t *)&v350->__shared_owners_;
    do
      v211 = __ldxr(v210);
    while (__stxr(v211 + 1, v210));
  }
  dispatch_apply_f(v279, 0, &v358, (void (__cdecl *)(void *, size_t))_ZZN22IVFVectorIndexTemplateIDF16_Li256EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li256EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjjENUlPvmE_8__invokeESC_m);
  v212 = *v354;
  if (v354[1] != *v354)
  {
    v213 = 0;
    v214 = (unint64_t *)&v209->__shared_owners_;
    do
    {
      v215 = *(_QWORD *)(v212 + 8 * v213);
      v356 = v133;
      v357 = v209;
      if (v209)
      {
        do
          v216 = __ldxr(v214);
        while (__stxr(v216 + 1, v214));
      }
      v217 = v207[v213];
      v355 = v217;
      if (*((_QWORD *)&v217 + 1))
      {
        v218 = (unint64_t *)(*((_QWORD *)&v217 + 1) + 8);
        do
          v219 = __ldxr(v218);
        while (__stxr(v219 + 1, v218));
      }
      (*(void (**)(uint64_t, std::string::size_type *, __int128 *))(*(_QWORD *)v215 + 48))(v215, &v356, &v355);
      v220 = (std::__shared_weak_count *)*((_QWORD *)&v355 + 1);
      if (!*((_QWORD *)&v355 + 1))
        goto LABEL_237;
      v221 = (unint64_t *)(*((_QWORD *)&v355 + 1) + 8);
      do
        v222 = __ldaxr(v221);
      while (__stlxr(v222 - 1, v221));
      if (!v222)
      {
        ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
        std::__shared_weak_count::__release_weak(v220);
        v223 = v357;
        if (!v357)
          goto LABEL_243;
      }
      else
      {
LABEL_237:
        v223 = v357;
        if (!v357)
          goto LABEL_243;
      }
      v224 = (unint64_t *)&v223->__shared_owners_;
      do
        v225 = __ldaxr(v224);
      while (__stlxr(v225 - 1, v224));
      if (!v225)
      {
        ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
        std::__shared_weak_count::__release_weak(v223);
      }
LABEL_243:
      v226 = *((_DWORD *)v9 + v213);
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(*v354 + 8 * v213) + 24))(v372);
      v227 = *(std::__shared_weak_count **)&v372[8];
      v228 = *(_DWORD *)(*(_QWORD *)v372 + 72);
      if (*(_QWORD *)&v372[8])
      {
        v229 = (unint64_t *)(*(_QWORD *)&v372[8] + 8);
        do
          v230 = __ldaxr(v229);
        while (__stlxr(v230 - 1, v229));
        if (!v230)
        {
          ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
          std::__shared_weak_count::__release_weak(v227);
        }
      }
      if (v226 != v228)
      {
        v267 = __si_assert_copy_extra_268();
        v265 = v267;
        v268 = "";
        if (v267)
          v268 = v267;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2056, "vectorCounts[i] == vectorIndexes[i]->getPartitions()->nVectors()", v268);
        goto LABEL_316;
      }
      ++v213;
      v212 = *v354;
      v9 = v351;
      v209 = v350;
      v133 = v352;
    }
    while (v213 < (uint64_t)(v354[1] - *v354) >> 3);
  }
  v231 = *__error();
  v232 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v232, OS_LOG_TYPE_DEFAULT))
  {
    v233 = v353;
    v234 = v349 - v353;
    v235 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)v372 = 67110144;
    *(_DWORD *)&v372[4] = v282;
    *(_WORD *)&v372[8] = 1024;
    *(_DWORD *)&v372[10] = v234;
    *(_WORD *)&v372[14] = 1024;
    *(_DWORD *)&v372[16] = v233;
    *(_WORD *)&v372[20] = 1024;
    *(_DWORD *)&v372[22] = v78;
    *(_WORD *)&v372[26] = 2048;
    *(double *)&v372[28] = v235 - Current;
    _os_log_impl(&dword_1B8270000, v232, OS_LOG_TYPE_DEFAULT, "training quantizer try addCentroids=%u added=%d removed=%u changed=%d duration: %fs", v372, 0x24u);
  }
  *__error() = v231;
  v236 = v359;
  if (v359)
  {
    v237 = (unint64_t *)&v359->__shared_owners_;
    do
      v238 = __ldaxr(v237);
    while (__stlxr(v238 - 1, v237));
    if (!v238)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
  if (v281 != v280)
  {
    v239 = &v207[v279];
    do
    {
      v240 = (std::__shared_weak_count *)*((_QWORD *)v239 - 1);
      if (v240)
      {
        v241 = (unint64_t *)&v240->__shared_owners_;
        do
          v242 = __ldaxr(v241);
        while (__stlxr(v242 - 1, v241));
        if (!v242)
        {
          ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
          std::__shared_weak_count::__release_weak(v240);
        }
      }
      --v239;
    }
    while (v239 != v207);
  }
  do
    v243 = __ldaxr(v120);
  while (__stlxr(v243 - 1, v120));
  v79 = v350;
  if (!v243)
  {
    v244 = v348;
    ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
    std::__shared_weak_count::__release_weak(v244);
  }
  *(_QWORD *)v364 = off_1E6E31428;
  if (v366)
  {
    v367 = v366;
    operator delete(v366);
  }
  *(_QWORD *)v364 = off_1E6E30F58;
  if (SBYTE7(v365) < 0)
    operator delete(*(void **)&v364[8]);
LABEL_272:
  if (v79)
  {
    v245 = (unint64_t *)&v79->__shared_owners_;
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v246 - 1, v245));
    if (!v246)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (v9)
    operator delete(v9);
  v247 = v370;
  if (v370)
  {
    v248 = (unint64_t *)&v370->__shared_owners_;
    do
      v249 = __ldaxr(v248);
    while (__stlxr(v249 - 1, v248));
    if (!v249)
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
  }
  return v78;
}

_QWORD *_ZN16QuantizerManagerIDF16_Li256EE20lastTrainedQuantizerEv(_QWORD *result, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;

  v2 = atomic_load((unsigned __int8 *)(a2 + 72));
  if ((v2 & 1) == 0)
  {
    v9 = __si_assert_copy_extra_268();
    v10 = v9;
    v11 = "";
    if (v9)
      v11 = v9;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 730, "_training.test()", v11);
    free(v10);
    if (__valid_fs(-1))
      v12 = 2989;
    else
      v12 = 3072;
    *(_DWORD *)v12 = -559038737;
    abort();
  }
  v3 = *(_QWORD *)(a2 + 96);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 104);
    *result = v3;
    result[1] = v4;
    if (!v4)
      return result;
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(a2 + 80);
  if (v5)
  {
    v4 = *(_QWORD *)(a2 + 88);
    *result = v5;
    result[1] = v4;
    if (!v4)
      return result;
    goto LABEL_12;
  }
  v6 = atomic_load((unsigned __int8 *)&_ZGVZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq);
  if ((v6 & 1) == 0)
  {
    v14 = result;
    v15 = __cxa_guard_acquire(&_ZGVZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq);
    result = v14;
    if (v15)
    {
      __cxa_atexit((void (*)(void *))_ZNSt3__110shared_ptrI9QuantizerIDF16_Li256EEED1B8nn180100Ev, &_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq, &dword_1B8270000);
      __cxa_guard_release(&_ZGVZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq);
      result = v14;
    }
  }
  if (_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE9onceToken != -1)
  {
    v13 = result;
    dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE9onceToken, &__block_literal_global_134);
    result = v13;
  }
  v4 = qword_1EF1AE5A8;
  *result = _ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq;
  result[1] = v4;
  if (v4)
  {
LABEL_12:
    v7 = (unint64_t *)(v4 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void ___ZN16QuantizerManagerIDF16_Li256EE23commitTrainingQuantizerEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  int v10;
  std::string *p_p;
  std::string::size_type size;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  int64_t v16;
  uint64_t v17;
  void **v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  uint64_t *v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  void **v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  size_t prime;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  std::__shared_weak_count *v53;
  int v54;
  size_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  const void *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  void **v69;
  uint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v77;
  int *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::string __p;
  std::string __dst;
  std::string v84;
  void *v85[2];
  int64_t v86;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 80);
  if (!v2)
    goto LABEL_109;
  v3 = *(char *)(v1 + 71);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(v1 + 71);
  else
    v4 = *(_QWORD *)(v1 + 56);
  v5 = v4 + 1;
  if (v4 + 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_149:
    abort();
  if (v5 >= 0x17)
  {
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v7 = v5 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_16;
  }
  if (v3 >= 0)
    v9 = (const void *)(v1 + 48);
  else
    v9 = *(const void **)(v1 + 48);
  memmove(p_dst, v9, v4);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  std::to_string(&__p, v10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v13 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v84.__r_.__value_.__r.__words[2] = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v84, ".quantizer");
  v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)v85 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v86 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
LABEL_36:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_37;
  }
  operator delete(v84.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_36;
LABEL_24:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_25;
LABEL_37:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_25:
  v17 = *(_QWORD *)(v1 + 80);
  if (v86 >= 0)
    v18 = v85;
  else
    v18 = (void **)v85[0];
  fd_rename(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 40), (const char *)v18);
  MEMORY[0x1BCCB03B0](v17 + 8, v18);
  atomic_store(1u, (unsigned __int8 *)(*(_QWORD *)(v1 + 80) + 57));
  v20 = *(_QWORD *)(v1 + 80);
  v19 = *(std::__shared_weak_count **)(v1 + 88);
  v21 = v20;
  if (v19)
  {
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v23 = __ldxr(p_shared_weak_owners);
    while (__stxr(v23 + 1, p_shared_weak_owners));
    v21 = *(_QWORD *)(v1 + 80);
  }
  v24 = (uint64_t *)(v1 + 112);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
  v26 = v25;
  v27 = v25;
  v28 = *(_QWORD *)(v1 + 120);
  if (v28)
  {
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      v30 = v25;
      if (v28 <= v25)
        v30 = v25 % v28;
    }
    else
    {
      v30 = (v28 - 1) & v25;
    }
    v31 = *(void ***)(*v24 + 8 * v30);
    if (v31)
    {
      v32 = *v31;
      if (*v31)
      {
        if (v29.u32[0] < 2uLL)
        {
          while (1)
          {
            v34 = *((_QWORD *)v32 + 1);
            if (v34 == v25)
            {
              if (*((_DWORD *)v32 + 4) == v25)
                goto LABEL_94;
            }
            else if ((v34 & (v28 - 1)) != v30)
            {
              goto LABEL_56;
            }
            v32 = *(void **)v32;
            if (!v32)
              goto LABEL_56;
          }
        }
        do
        {
          v33 = *((_QWORD *)v32 + 1);
          if (v33 == v25)
          {
            if (*((_DWORD *)v32 + 4) == v25)
              goto LABEL_94;
          }
          else
          {
            if (v33 >= v28)
              v33 %= v28;
            if (v33 != v30)
              break;
          }
          v32 = *(void **)v32;
        }
        while (v32);
      }
    }
  }
  else
  {
    v30 = 0;
  }
LABEL_56:
  v32 = operator new(0x28uLL);
  *(_QWORD *)v32 = 0;
  *((_QWORD *)v32 + 1) = v27;
  *((_DWORD *)v32 + 4) = v26;
  *((_QWORD *)v32 + 3) = 0;
  *((_QWORD *)v32 + 4) = 0;
  v35 = (float)(unint64_t)(*(_QWORD *)(v1 + 136) + 1);
  v36 = *(float *)(v1 + 144);
  if (!v28 || (float)(v36 * (float)v28) < v35)
  {
    v37 = 1;
    if (v28 >= 3)
      v37 = (v28 & (v28 - 1)) != 0;
    v38 = v37 | (2 * v28);
    v39 = vcvtps_u32_f32(v35 / v36);
    if (v38 <= v39)
      prime = v39;
    else
      prime = v38;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v28 = *(_QWORD *)(v1 + 120);
    }
    if (prime > v28)
      goto LABEL_78;
    if (prime < v28)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(v1 + 136) / *(float *)(v1 + 144));
      if (v28 < 3 || (v42 = (uint8x8_t)vcnt_s8((int8x8_t)v28), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < v28)
LABEL_78:
        std::__hash_table<std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,std::__unordered_map_hasher<SIUnicodeString,std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,HashFunction,HashEqual,true>,std::__unordered_map_equal<SIUnicodeString,std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>,HashEqual,HashFunction,true>,std::allocator<std::__hash_value_type<SIUnicodeString,std::unique_ptr<NGram_s>>>>::__do_rehash<true>(v1 + 112, prime);
    }
    v28 = *(_QWORD *)(v1 + 120);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v28 <= v27)
        v30 = v27 % v28;
      else
        v30 = v27;
    }
    else
    {
      v30 = (v28 - 1) & v27;
    }
  }
  v44 = *v24;
  v45 = *(_QWORD **)(*v24 + 8 * v30);
  if (v45)
  {
    *(_QWORD *)v32 = *v45;
LABEL_92:
    *v45 = v32;
    goto LABEL_93;
  }
  *(_QWORD *)v32 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v1 + 128) = v32;
  *(_QWORD *)(v44 + 8 * v30) = v1 + 128;
  if (*(_QWORD *)v32)
  {
    v46 = *(_QWORD *)(*(_QWORD *)v32 + 8);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v46 >= v28)
        v46 %= v28;
    }
    else
    {
      v46 &= v28 - 1;
    }
    v45 = (_QWORD *)(*v24 + 8 * v46);
    goto LABEL_92;
  }
LABEL_93:
  ++*(_QWORD *)(v1 + 136);
LABEL_94:
  if (v19)
  {
    v47 = std::__shared_weak_count::lock(v19);
    v48 = v47;
    if (v47)
    {
      v49 = (unint64_t *)&v47->__shared_weak_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
      std::__shared_weak_count::__release_weak(v19);
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v52 = __ldaxr(p_shared_owners);
      while (__stlxr(v52 - 1, p_shared_owners));
      if (v52)
        goto LABEL_105;
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      v19 = v48;
    }
    else
    {
      v20 = 0;
    }
    std::__shared_weak_count::__release_weak(v19);
  }
  else
  {
    v20 = 0;
    v48 = 0;
  }
LABEL_105:
  v53 = (std::__shared_weak_count *)*((_QWORD *)v32 + 4);
  *((_QWORD *)v32 + 3) = v20;
  *((_QWORD *)v32 + 4) = v48;
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  if (SHIBYTE(v86) < 0)
    operator delete(v85[0]);
LABEL_109:
  v54 = *(char *)(v1 + 71);
  if (v54 >= 0)
    v55 = *(unsigned __int8 *)(v1 + 71);
  else
    v55 = *(_QWORD *)(v1 + 56);
  v56 = v55 + 10;
  if (v55 + 10 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_149;
  if (v56 >= 0x17)
  {
    v58 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17)
      v58 = v56 | 7;
    v59 = v58 + 1;
    v57 = operator new(v58 + 1);
    v85[1] = (void *)(v55 + 10);
    v86 = v59 | 0x8000000000000000;
    v85[0] = v57;
  }
  else
  {
    v85[1] = 0;
    v86 = 0;
    v85[0] = 0;
    v57 = v85;
    HIBYTE(v86) = v55 + 10;
    if (!v55)
      goto LABEL_123;
  }
  if (v54 >= 0)
    v60 = (const void *)(v1 + 48);
  else
    v60 = *(const void **)(v1 + 48);
  memmove(v57, v60, v55);
LABEL_123:
  strcpy((char *)v57 + v55, ".quantizer");
  v62 = *(_QWORD *)(v1 + 96);
  v61 = *(_QWORD *)(v1 + 104);
  if (v61)
  {
    v63 = (unint64_t *)(v61 + 8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  v65 = *(std::__shared_weak_count **)(v1 + 88);
  *(_QWORD *)(v1 + 80) = v62;
  *(_QWORD *)(v1 + 88) = v61;
  if (v65)
  {
    v66 = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = *(_QWORD *)(v1 + 80);
  if (v86 >= 0)
    v69 = v85;
  else
    v69 = (void **)v85[0];
  fd_rename(*(_QWORD *)(*(_QWORD *)(v68 + 40) + 40), (const char *)v69);
  MEMORY[0x1BCCB03B0](v68 + 8, v69);
  v70 = *(_QWORD *)(v1 + 80);
  v71 = *(unint64_t **)(v70 + 40);
  *v71 = 0;
  vi_onefixedsize_disk_allocator::storeHeader(v71);
  storage_array_SyncPages(*(_QWORD *)(v70 + 40) + 8, *(_QWORD *)(v70 + 40) + 4192);
  storage_array_Truncate((uint64_t *)(*(_QWORD *)(v70 + 40) + 8));
  v72 = *(_QWORD *)(v70 + 40);
  fd_make_readonly(*(_QWORD *)(v72 + 40));
  v73 = *(_QWORD *)(v72 + 40);
  if (v73)
  {
    do
    {
      v74 = fchmodat(*(_DWORD *)(v73 + 44), *(const char **)(v73 + 72), 0x100u, 2048);
      v75 = g_prot_error_callback;
      if (v74 != -1 || g_prot_error_callback == 0)
        break;
      v77 = *(unsigned int *)(v73 + 40);
      v78 = __error();
    }
    while (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v75 + 16))(v75, v77, *v78, 19) & 1) != 0);
  }
  *(_BYTE *)(v70 + 56) = 1;
  v79 = *(std::__shared_weak_count **)(v1 + 104);
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  if (!v79)
    goto LABEL_144;
  v80 = (unint64_t *)&v79->__shared_owners_;
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v81 - 1, v80));
  if (v81)
  {
LABEL_144:
    if ((SHIBYTE(v86) & 0x80000000) == 0)
      return;
    goto LABEL_145;
  }
  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
  std::__shared_weak_count::__release_weak(v79);
  if (SHIBYTE(v86) < 0)
LABEL_145:
    operator delete(v85[0]);
}

float ___ZN22IVFVectorIndexTemplateIDF16_Li256EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li256EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjj_block_invoke(uint64_t a1, unsigned int a2, float *a3)
{
  uint64_t v6;
  uint64_t v7;
  float16x8_t v8;
  float32x4_t v9;
  float16x8_t v10;
  float16x8_t v11;
  float16x8_t v12;
  float16x8_t v13;
  float16x8_t v14;
  float16x8_t v15;
  float16x8_t v16;
  float16x8_t v17;
  float16x8_t v18;
  float16x8_t v19;
  float16x8_t v20;
  float16x8_t v21;
  float16x8_t v22;
  float16x8_t v23;
  float16x8_t v24;
  float16x8_t v25;
  float16x8_t v26;
  float16x8_t v27;
  float16x8_t v28;
  float16x8_t v29;
  float16x8_t v30;
  float16x8_t v31;
  float16x8_t v32;
  float16x8_t v33;
  float16x8_t v34;
  float16x8_t v35;
  float16x8_t v36;
  float16x8_t v37;
  float16x8_t v38;
  float16x8_t v39;
  float *v40;
  float *v41;
  float v42;
  float result;
  void *__p[128];

  v6 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32), *(unsigned int *)a3);
  if (*(_DWORD *)(a1 + 64))
  {
    memset(__p, 0, 24);
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 72))(__p, *(_QWORD *)(a1 + 40), v6, 1);
    if (*((float *)__p[0] + 1) < a3[1])
      a2 = *(_DWORD *)(a1 + 68) + *(_DWORD *)__p[0];
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(float16x8_t *)(v6 + 16);
  v9 = vcvt_hight_f32_f16(*(float16x8_t *)v6);
  *(float32x4_t *)__p = vcvtq_f32_f16(*(float16x4_t *)v6);
  *(float32x4_t *)&__p[2] = v9;
  *(float32x4_t *)&__p[4] = vcvtq_f32_f16(*(float16x4_t *)v8.i8);
  *(float32x4_t *)&__p[6] = vcvt_hight_f32_f16(v8);
  v10 = *(float16x8_t *)(v6 + 32);
  v11 = *(float16x8_t *)(v6 + 48);
  *(float32x4_t *)&__p[8] = vcvtq_f32_f16(*(float16x4_t *)v10.i8);
  *(float32x4_t *)&__p[10] = vcvt_hight_f32_f16(v10);
  *(float32x4_t *)&__p[12] = vcvtq_f32_f16(*(float16x4_t *)v11.i8);
  *(float32x4_t *)&__p[14] = vcvt_hight_f32_f16(v11);
  v12 = *(float16x8_t *)(v6 + 64);
  v13 = *(float16x8_t *)(v6 + 80);
  *(float32x4_t *)&__p[16] = vcvtq_f32_f16(*(float16x4_t *)v12.i8);
  *(float32x4_t *)&__p[18] = vcvt_hight_f32_f16(v12);
  *(float32x4_t *)&__p[20] = vcvtq_f32_f16(*(float16x4_t *)v13.i8);
  *(float32x4_t *)&__p[22] = vcvt_hight_f32_f16(v13);
  v14 = *(float16x8_t *)(v6 + 96);
  v15 = *(float16x8_t *)(v6 + 112);
  *(float32x4_t *)&__p[24] = vcvtq_f32_f16(*(float16x4_t *)v14.i8);
  *(float32x4_t *)&__p[26] = vcvt_hight_f32_f16(v14);
  *(float32x4_t *)&__p[28] = vcvtq_f32_f16(*(float16x4_t *)v15.i8);
  *(float32x4_t *)&__p[30] = vcvt_hight_f32_f16(v15);
  v16 = *(float16x8_t *)(v6 + 128);
  v17 = *(float16x8_t *)(v6 + 144);
  *(float32x4_t *)&__p[32] = vcvtq_f32_f16(*(float16x4_t *)v16.i8);
  *(float32x4_t *)&__p[34] = vcvt_hight_f32_f16(v16);
  *(float32x4_t *)&__p[36] = vcvtq_f32_f16(*(float16x4_t *)v17.i8);
  *(float32x4_t *)&__p[38] = vcvt_hight_f32_f16(v17);
  v18 = *(float16x8_t *)(v6 + 160);
  v19 = *(float16x8_t *)(v6 + 176);
  *(float32x4_t *)&__p[40] = vcvtq_f32_f16(*(float16x4_t *)v18.i8);
  *(float32x4_t *)&__p[42] = vcvt_hight_f32_f16(v18);
  *(float32x4_t *)&__p[44] = vcvtq_f32_f16(*(float16x4_t *)v19.i8);
  *(float32x4_t *)&__p[46] = vcvt_hight_f32_f16(v19);
  v20 = *(float16x8_t *)(v6 + 192);
  v21 = *(float16x8_t *)(v6 + 208);
  *(float32x4_t *)&__p[48] = vcvtq_f32_f16(*(float16x4_t *)v20.i8);
  *(float32x4_t *)&__p[50] = vcvt_hight_f32_f16(v20);
  *(float32x4_t *)&__p[52] = vcvtq_f32_f16(*(float16x4_t *)v21.i8);
  *(float32x4_t *)&__p[54] = vcvt_hight_f32_f16(v21);
  v22 = *(float16x8_t *)(v6 + 224);
  v23 = *(float16x8_t *)(v6 + 240);
  *(float32x4_t *)&__p[56] = vcvtq_f32_f16(*(float16x4_t *)v22.i8);
  *(float32x4_t *)&__p[58] = vcvt_hight_f32_f16(v22);
  *(float32x4_t *)&__p[60] = vcvtq_f32_f16(*(float16x4_t *)v23.i8);
  *(float32x4_t *)&__p[62] = vcvt_hight_f32_f16(v23);
  v24 = *(float16x8_t *)(v6 + 256);
  v25 = *(float16x8_t *)(v6 + 272);
  *(float32x4_t *)&__p[64] = vcvtq_f32_f16(*(float16x4_t *)v24.i8);
  *(float32x4_t *)&__p[66] = vcvt_hight_f32_f16(v24);
  *(float32x4_t *)&__p[68] = vcvtq_f32_f16(*(float16x4_t *)v25.i8);
  *(float32x4_t *)&__p[70] = vcvt_hight_f32_f16(v25);
  v26 = *(float16x8_t *)(v6 + 288);
  v27 = *(float16x8_t *)(v6 + 304);
  *(float32x4_t *)&__p[72] = vcvtq_f32_f16(*(float16x4_t *)v26.i8);
  *(float32x4_t *)&__p[74] = vcvt_hight_f32_f16(v26);
  *(float32x4_t *)&__p[76] = vcvtq_f32_f16(*(float16x4_t *)v27.i8);
  *(float32x4_t *)&__p[78] = vcvt_hight_f32_f16(v27);
  v28 = *(float16x8_t *)(v6 + 320);
  v29 = *(float16x8_t *)(v6 + 336);
  *(float32x4_t *)&__p[80] = vcvtq_f32_f16(*(float16x4_t *)v28.i8);
  *(float32x4_t *)&__p[82] = vcvt_hight_f32_f16(v28);
  *(float32x4_t *)&__p[84] = vcvtq_f32_f16(*(float16x4_t *)v29.i8);
  *(float32x4_t *)&__p[86] = vcvt_hight_f32_f16(v29);
  v30 = *(float16x8_t *)(v6 + 352);
  v31 = *(float16x8_t *)(v6 + 368);
  *(float32x4_t *)&__p[88] = vcvtq_f32_f16(*(float16x4_t *)v30.i8);
  *(float32x4_t *)&__p[90] = vcvt_hight_f32_f16(v30);
  *(float32x4_t *)&__p[92] = vcvtq_f32_f16(*(float16x4_t *)v31.i8);
  *(float32x4_t *)&__p[94] = vcvt_hight_f32_f16(v31);
  v32 = *(float16x8_t *)(v6 + 384);
  v33 = *(float16x8_t *)(v6 + 400);
  *(float32x4_t *)&__p[96] = vcvtq_f32_f16(*(float16x4_t *)v32.i8);
  *(float32x4_t *)&__p[98] = vcvt_hight_f32_f16(v32);
  *(float32x4_t *)&__p[100] = vcvtq_f32_f16(*(float16x4_t *)v33.i8);
  *(float32x4_t *)&__p[102] = vcvt_hight_f32_f16(v33);
  v34 = *(float16x8_t *)(v6 + 416);
  v35 = *(float16x8_t *)(v6 + 432);
  *(float32x4_t *)&__p[104] = vcvtq_f32_f16(*(float16x4_t *)v34.i8);
  *(float32x4_t *)&__p[106] = vcvt_hight_f32_f16(v34);
  *(float32x4_t *)&__p[108] = vcvtq_f32_f16(*(float16x4_t *)v35.i8);
  *(float32x4_t *)&__p[110] = vcvt_hight_f32_f16(v35);
  v36 = *(float16x8_t *)(v6 + 448);
  v37 = *(float16x8_t *)(v6 + 464);
  *(float32x4_t *)&__p[112] = vcvtq_f32_f16(*(float16x4_t *)v36.i8);
  *(float32x4_t *)&__p[114] = vcvt_hight_f32_f16(v36);
  *(float32x4_t *)&__p[116] = vcvtq_f32_f16(*(float16x4_t *)v37.i8);
  *(float32x4_t *)&__p[118] = vcvt_hight_f32_f16(v37);
  v38 = *(float16x8_t *)(v6 + 480);
  v39 = *(float16x8_t *)(v6 + 496);
  *(float32x4_t *)&__p[120] = vcvtq_f32_f16(*(float16x4_t *)v38.i8);
  *(float32x4_t *)&__p[122] = vcvt_hight_f32_f16(v38);
  *(float32x4_t *)&__p[124] = vcvtq_f32_f16(*(float16x4_t *)v39.i8);
  *(float32x4_t *)&__p[126] = vcvt_hight_f32_f16(v39);
  v40 = (float *)(v7 + 1028 * a2);
  v41 = v40 + 256;
  v42 = v40[256];
  if (v42 == 0.0)
  {
    memcpy(v40, __p, 0x400uLL);
  }
  else
  {
    vDSP_vavlin((const float *)__p, 1, v40 + 256, v40, 1, 0x100uLL);
    v42 = *v41;
  }
  result = v42 + 1.0;
  *v41 = v42 + 1.0;
  return result;
}

void _ZZN22IVFVectorIndexTemplateIDF16_Li256EE22IVFVectorIndexRootBase9trainOnceENSt3__110shared_ptrI16QuantizerManagerIDF16_Li256EEEENS2_6vectorIPS1_NS2_9allocatorIS8_EEEEjjENUlPvmE_8__invokeESC_m(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v4 = a1[2];
  v5 = *(_QWORD *)(a1[1] + 8 * a2);
  v6 = (std::__shared_weak_count *)a1[3];
  v23 = v4;
  v24 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v5 + 40))(&v25, v5, &v23);
  v9 = (_QWORD *)(*a1 + 16 * a2);
  v11 = v25;
  v10 = v26;
  if (v26)
  {
    v12 = (unint64_t *)&v26->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = (std::__shared_weak_count *)v9[1];
  *v9 = v11;
  v9[1] = v10;
  if (!v14)
    goto LABEL_11;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = v26;
    if (!v26)
      goto LABEL_17;
  }
  else
  {
LABEL_11:
    v17 = v26;
    if (!v26)
      goto LABEL_17;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_17:
  v20 = v24;
  if (v24)
  {
    v21 = (unint64_t *)&v24->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

uint64_t _ZN20ArrayVectorQuantizerIDF16_Li256EED1Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E6E31428;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void _ZN20ArrayVectorQuantizerIDF16_Li256EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E6E31428;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_1E6E30F58;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1BCCB06A4);
}

uint64_t _ZNK20ArrayVectorQuantizerIDF16_Li256EE5countEv(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 9;
}

uint64_t _ZNK20ArrayVectorQuantizerIDF16_Li256EE11getCentroidEj(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  char *v4;
  char *v5;
  const char *v6;

  v2 = *(_QWORD *)(a1 + 40);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 48) - v2) >> 9))
  {
    v4 = __si_assert_copy_extra_268();
    v5 = v4;
    v6 = "";
    if (v4)
      v6 = v4;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 443, "i < centroids.size()", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return v2 + ((unint64_t)a2 << 9);
}

uint64_t ___ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE7compactIS2_EENSt3__19enable_ifIXsr13is_persistentIT_EE5valueEbE4typeEPS4_P12uint32_map_tP11TermIdStore18CICompactCallbacksPVi_block_invoke(uint64_t a1, unsigned int *a2, _BYTE *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  char *v13;
  char *v14;
  const char *v15;

  v6 = (uint64_t *)*((_QWORD *)a2 + 3);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *v6;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    if ((_DWORD)v8)
    {
      if (*(_DWORD *)(v7 + 4408) <= v8)
      {
        v13 = __si_assert_copy_extra(0);
        v14 = v13;
        v15 = "";
        if (v13)
          v15 = v13;
        __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 1530, "position && position < inMap->count", v15);
        free(v14);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      v10 = *(_QWORD *)(a1 + 48);
      v11 = storageResolvePtr(v7, 4 * *v6, 4uLL, 1);
      v8 = *(_QWORD *)storageResolvePtr(v10, 8 * *(unsigned int *)v11, 8uLL, 1);
    }
    else
    {
      v8 = 0;
    }
  }
  _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16insertForCompactEjPK10CIVector_sIDF16_Li256EEyjf(*(_QWORD *)(a1 + 56), a2[2], *((void **)a2 + 2), v8, *a2, *((float *)a2 + 1));
  result = 1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) && !**(_DWORD **)(a1 + 64))
    result = (*(uint64_t (**)(_QWORD))(a1 + 88))(*(_QWORD *)(a1 + 96));
  *a3 = result;
  return result;
}

void _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE16insertForCompactEjPK10CIVector_sIDF16_Li256EEyjf(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5, float a6)
{
  os_unfair_lock_s *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  void *v22;
  uint64_t v23;
  float v24;
  char v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  const char *v32;

  v12 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v13 = *(std::__shared_weak_count **)(a1 + 88);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v17 = *(_QWORD *)(a1 + 96);
  v16 = *(std::__shared_weak_count **)(a1 + 104);
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  os_unfair_lock_unlock(v12);
  if ((_DWORD)a5 == -1)
  {
    v20 = a1;
    v21 = a2;
    v22 = a3;
    v23 = 0xFFFFFFFFLL;
    v24 = a6;
    v25 = 0;
  }
  else
  {
    if (*(_DWORD *)(v17 + 68) <= a5)
    {
      v30 = __si_assert_copy_extra_268();
      v31 = v30;
      v32 = "";
      if (v30)
        v32 = v30;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2605, "partID == VECTOR_NOT_FOUND || partID < cur.partitions->nPartitions()", v32);
      free(v31);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v20 = a1;
    v21 = a2;
    v22 = a3;
    v23 = a5;
    v24 = a6;
    v25 = 1;
  }
  *((_QWORD *)_ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE15lookupForInsertEjRK10CIVector_sIDF16_Li256EEjfb(v20, v21, v22, v23, v25, v24)+ 64) = a4;
  if (!v16)
    goto LABEL_15;
  v26 = (unint64_t *)&v16->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!v13)
      return;
  }
  else
  {
LABEL_15:
    if (!v13)
      return;
  }
  v28 = (unint64_t *)&v13->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

uint64_t ___ZNK22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(float))(*(_QWORD *)(a1 + 32) + 16))(*(float *)(a2 + 4));
  *a3 = **(_DWORD **)(a1 + 40) != 0;
  return result;
}

void _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE12enumerator_s4nextEv(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t Ptr;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(_QWORD *)(a2 + 72))
  {
    for (i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + ((*(_QWORD *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * *(_QWORD *)(a2 + 64));
          ;
          i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + ((v11 >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * v11))
    {
      *(_DWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)i + 16))(i);
      if (!*(_QWORD *)(a2 + 72))
        break;
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + ((*(_QWORD *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * *(_QWORD *)(a2 + 64));
      v6 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
      if (v6)
      {
        *(_DWORD *)(a1 + 4) = v6[1];
        Ptr = vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(a2 + 16) + 16), *v6, 532);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(Ptr + 528);
        *(_QWORD *)(a1 + 16) = Ptr;
        *(_QWORD *)(a1 + 24) = Ptr + 512;
        return;
      }
      v7 = *(std::__shared_weak_count **)(*(_QWORD *)(*(_QWORD *)(a2 + 40)
                                                    + ((*(_QWORD *)(a2 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
                                        + 16 * *(_QWORD *)(a2 + 64)
                                        + 8);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = *(_QWORD *)(a2 + 72) - 1;
      v11 = *(_QWORD *)(a2 + 64) + 1;
      *(_QWORD *)(a2 + 64) = v11;
      *(_QWORD *)(a2 + 72) = v10;
      if (v11 >= 0x200)
      {
        operator delete(**(void ***)(a2 + 40));
        *(_QWORD *)(a2 + 40) += 8;
        v10 = *(_QWORD *)(a2 + 72);
        v11 = *(_QWORD *)(a2 + 64) - 256;
        *(_QWORD *)(a2 + 64) = v11;
      }
      if (!v10)
        return;
    }
  }
}

unint64_t _ZNK22IVFVectorIndexTemplateIDF16_Li256EE11VectorStoreI32vi_onefixedsize_memory_allocator18vi_memory_postingsE8IteratorptEv(uint64_t a1, unsigned int a2)
{
  char *v3;
  char *v4;
  const char *v5;

  if (*(_DWORD *)(a1 + 24) <= a2)
  {
    v3 = __si_assert_copy_extra_268();
    v4 = v3;
    v5 = "";
    if (v3)
      v5 = v3;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1802, "offset < store->endOffset()", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(a1 + 16), a2, 532);
}

BOOL _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li256EE(uint64_t a1, uint64_t a2)
{
  int v4;
  int v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD v32[8];
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unsigned int v36;
  _QWORD v37[7];
  unsigned int v38;
  float v39;
  float v40;
  unsigned int v41;
  _BYTE buf[24];
  _DWORD v43[4];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v40 = 3.4028e38;
  v41 = -1;
  v4 = _ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE10findVectorERK10CIVector_sIDF16_Li256EERjRfj(a1, a2, (int *)&v41, &v40, 0);
  if (v4 == -1)
  {
    v6 = *__error();
    v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "exists";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2632;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v41;
      LOWORD(v43[0]) = 2048;
      *(double *)((char *)v43 + 2) = v40;
      _os_log_error_impl(&dword_1B8270000, v7, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v6;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    v9 = *(_QWORD *)(a1 + 80);
    v8 = *(std::__shared_weak_count **)(a1 + 88);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v13 = *(_QWORD *)(a1 + 96);
    v12 = *(std::__shared_weak_count **)(a1 + 104);
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v43[0] = -1;
    *(_QWORD *)&buf[16] = 0x2000000000;
    v16 = v41;
    v17 = MEMORY[0x1E0C809B0];
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 0x40000000;
    v37[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li256EE_block_invoke;
    v37[3] = &unk_1E6E33888;
    v37[5] = a1;
    v37[6] = a2;
    v38 = v41;
    v39 = v40;
    v37[4] = buf;
    (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v13 + 80))(v13, v41, v37);
    if (*(_DWORD *)(*(_QWORD *)&buf[8] + 24) == -1)
    {
      v32[0] = v17;
      v32[1] = 1174405120;
      v32[2] = ___ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li256EE_block_invoke_872;
      v32[3] = &unk_1E6E338B0;
      v32[5] = a1;
      v32[6] = a2;
      v32[7] = v9;
      v33 = v8;
      if (v8)
      {
        v22 = (unint64_t *)&v8->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v34 = v13;
      v35 = v12;
      if (v12)
      {
        v24 = (unint64_t *)&v12->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v36 = v16;
      v32[4] = buf;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 64))(v13, v32);
      v26 = v35;
      if (v35)
      {
        v27 = (unint64_t *)&v35->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = v33;
      if (v33)
      {
        v30 = (unint64_t *)&v33->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
    _Block_object_dispose(buf, 8);
    if (v12)
    {
      v18 = (unint64_t *)&v12->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v8)
    {
      v20 = (unint64_t *)&v8->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  return v4 != -1;
}

void ___ZN22IVFVectorIndexTemplateIDF16_Li256EE20IVFVectorIndexRoot_sI30vi_onefixedsize_disk_allocator16vi_disk_postingsE6existsERK10CIVector_sIDF16_Li256EE_block_invoke_872(uint64_t a1, int a2, float *a3, _BYTE *a4)
{
  const void *v8;
  uint64_t v9;
  const void *v10;
  int v11;
  NSObject *v12;
  float16x8_t *v13;
  uint64_t v14;
  float16x8_t v15;
  float32x4_t v16;
  float16x8_t v17;
  float16x8_t v18;
  float16x8_t v19;
  float16x8_t v20;
  float16x8_t v21;
  float16x8_t v22;
  float16x8_t v23;
  float16x8_t v24;
  float16x8_t v25;
  float16x8_t v26;
  float16x8_t v27;
  float16x8_t v28;
  float16x8_t v29;
  float16x8_t v30;
  float16x8_t v31;
  float16x8_t v32;
  float16x8_t v33;
  float16x8_t v34;
  float16x8_t v35;
  float16x8_t v36;
  float16x8_t v37;
  float16x8_t v38;
  float16x8_t v39;
  float16x8_t v40;
  float16x8_t v41;
  float16x8_t v42;
  float16x8_t v43;
  float16x8_t v44;
  float16x8_t v45;
  float16x8_t v46;
  float16x8_t v47;
  float32x4_t v48;
  float16x8_t v49;
  float16x8_t v50;
  float16x8_t v51;
  float16x8_t v52;
  float16x8_t v53;
  float16x8_t v54;
  float16x8_t v55;
  float16x8_t v56;
  float16x8_t v57;
  float16x8_t v58;
  float16x8_t v59;
  float16x8_t v60;
  float16x8_t v61;
  float16x8_t v62;
  float16x8_t v63;
  float16x8_t v64;
  float16x8_t v65;
  float16x8_t v66;
  float16x8_t v67;
  float16x8_t v68;
  float16x8_t v69;
  float16x8_t v70;
  float16x8_t v71;
  float16x8_t v72;
  float16x8_t v73;
  float16x8_t v74;
  float16x8_t v75;
  float16x8_t v76;
  float16x8_t v77;
  float16x8_t v78;
  float v79;
  int v80;
  NSObject *v81;
  int v82;
  NSObject *v83;
  int v84;
  NSObject *v85;
  int v86;
  NSObject *v87;
  int v88;
  NSObject *v89;
  int v90;
  NSObject *v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  NSObject *v95;
  int v96;
  NSObject *v97;
  int v98;
  NSObject *v99;
  int v100;
  NSObject *v101;
  int v102;
  NSObject *v103;
  double v104;
  int v105;
  int v106;
  float v107;
  int v108;
  float v109;
  _BOOL4 v110;
  int v111;
  int v112;
  _BOOL4 v113;
  int v114;
  int v115;
  _BOOL4 v116;
  int v117;
  int v118;
  _BOOL4 v119;
  int v120;
  int v121;
  float v122;
  float v123;
  double v124;
  float v125;
  _BOOL4 v126;
  _BOOL4 v127;
  float v128;
  float v129;
  int v130;
  float v131;
  _BOOL4 v132;
  float v133;
  int v134;
  _BOOL4 v135;
  float v136;
  int v137;
  _BOOL4 v138;
  float v139;
  int v140;
  _BOOL4 v141;
  float v142;
  int v143;
  float v144;
  float v145;
  float v146;
  _BOOL4 v147;
  _BOOL4 v148;
  _BOOL4 v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float *__C;
  float *v155;
  uint64_t v156;
  float32x4_t __B;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  _BYTE __A[80];
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  uint64_t v281;

  v281 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 40);
  v8 = *(const void **)(a1 + 48);
  v10 = (const void *)_windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 32) + 16) * *(unsigned int *)a3, 0x210uLL);
  if (!memcmp(v8, v10, 0x200uLL))
  {
    v11 = *__error();
    v12 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v104 = a3[1];
      *(_DWORD *)__A = 136315906;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2647;
      *(_WORD *)&__A[18] = 1024;
      *(_DWORD *)&__A[20] = a2;
      *(_WORD *)&__A[24] = 2048;
      *(double *)&__A[26] = v104;
      _os_log_error_impl(&dword_1B8270000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", __A, 0x22u);
    }
    *__error() = v11;
    v13 = *(float16x8_t **)(a1 + 48);
    v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56), *(unsigned int *)(a1 + 88));
    bzero(__A, 0x400uLL);
    v15 = v13[1];
    v16 = vcvt_hight_f32_f16(*v13);
    *(float32x4_t *)__A = vcvtq_f32_f16(*(float16x4_t *)v13->i8);
    *(float32x4_t *)&__A[16] = v16;
    *(float32x4_t *)&__A[32] = vcvtq_f32_f16(*(float16x4_t *)v15.i8);
    *(float32x4_t *)&__A[48] = vcvt_hight_f32_f16(v15);
    v17 = v13[2];
    v18 = v13[3];
    *(float32x4_t *)&__A[64] = vcvtq_f32_f16(*(float16x4_t *)v17.i8);
    v222 = vcvt_hight_f32_f16(v17);
    v223 = vcvtq_f32_f16(*(float16x4_t *)v18.i8);
    v224 = vcvt_hight_f32_f16(v18);
    v19 = v13[4];
    v20 = v13[5];
    v225 = vcvtq_f32_f16(*(float16x4_t *)v19.i8);
    v226 = vcvt_hight_f32_f16(v19);
    v227 = vcvtq_f32_f16(*(float16x4_t *)v20.i8);
    v228 = vcvt_hight_f32_f16(v20);
    v21 = v13[6];
    v22 = v13[7];
    v229 = vcvtq_f32_f16(*(float16x4_t *)v21.i8);
    v230 = vcvt_hight_f32_f16(v21);
    v231 = vcvtq_f32_f16(*(float16x4_t *)v22.i8);
    v232 = vcvt_hight_f32_f16(v22);
    v23 = v13[8];
    v24 = v13[9];
    v233 = vcvtq_f32_f16(*(float16x4_t *)v23.i8);
    v234 = vcvt_hight_f32_f16(v23);
    v235 = vcvtq_f32_f16(*(float16x4_t *)v24.i8);
    v236 = vcvt_hight_f32_f16(v24);
    v25 = v13[10];
    v26 = v13[11];
    v237 = vcvtq_f32_f16(*(float16x4_t *)v25.i8);
    v238 = vcvt_hight_f32_f16(v25);
    v239 = vcvtq_f32_f16(*(float16x4_t *)v26.i8);
    v240 = vcvt_hight_f32_f16(v26);
    v27 = v13[12];
    v28 = v13[13];
    v241 = vcvtq_f32_f16(*(float16x4_t *)v27.i8);
    v242 = vcvt_hight_f32_f16(v27);
    v243 = vcvtq_f32_f16(*(float16x4_t *)v28.i8);
    v244 = vcvt_hight_f32_f16(v28);
    v29 = v13[14];
    v30 = v13[15];
    v245 = vcvtq_f32_f16(*(float16x4_t *)v29.i8);
    v246 = vcvt_hight_f32_f16(v29);
    v247 = vcvtq_f32_f16(*(float16x4_t *)v30.i8);
    v248 = vcvt_hight_f32_f16(v30);
    v31 = v13[16];
    v32 = v13[17];
    v249 = vcvtq_f32_f16(*(float16x4_t *)v31.i8);
    v250 = vcvt_hight_f32_f16(v31);
    v251 = vcvtq_f32_f16(*(float16x4_t *)v32.i8);
    v252 = vcvt_hight_f32_f16(v32);
    v33 = v13[18];
    v34 = v13[19];
    v253 = vcvtq_f32_f16(*(float16x4_t *)v33.i8);
    v254 = vcvt_hight_f32_f16(v33);
    v255 = vcvtq_f32_f16(*(float16x4_t *)v34.i8);
    v256 = vcvt_hight_f32_f16(v34);
    v35 = v13[20];
    v36 = v13[21];
    v257 = vcvtq_f32_f16(*(float16x4_t *)v35.i8);
    v258 = vcvt_hight_f32_f16(v35);
    v259 = vcvtq_f32_f16(*(float16x4_t *)v36.i8);
    v260 = vcvt_hight_f32_f16(v36);
    v37 = v13[22];
    v38 = v13[23];
    v261 = vcvtq_f32_f16(*(float16x4_t *)v37.i8);
    v262 = vcvt_hight_f32_f16(v37);
    v263 = vcvtq_f32_f16(*(float16x4_t *)v38.i8);
    v264 = vcvt_hight_f32_f16(v38);
    v39 = v13[24];
    v40 = v13[25];
    v265 = vcvtq_f32_f16(*(float16x4_t *)v39.i8);
    v266 = vcvt_hight_f32_f16(v39);
    v267 = vcvtq_f32_f16(*(float16x4_t *)v40.i8);
    v268 = vcvt_hight_f32_f16(v40);
    v41 = v13[26];
    v42 = v13[27];
    v269 = vcvtq_f32_f16(*(float16x4_t *)v41.i8);
    v270 = vcvt_hight_f32_f16(v41);
    v271 = vcvtq_f32_f16(*(float16x4_t *)v42.i8);
    v272 = vcvt_hight_f32_f16(v42);
    v43 = v13[28];
    v44 = v13[29];
    v273 = vcvtq_f32_f16(*(float16x4_t *)v43.i8);
    v274 = vcvt_hight_f32_f16(v43);
    v275 = vcvtq_f32_f16(*(float16x4_t *)v44.i8);
    v276 = vcvt_hight_f32_f16(v44);
    v45 = v13[30];
    v46 = v13[31];
    v277 = vcvtq_f32_f16(*(float16x4_t *)v45.i8);
    v278 = vcvt_hight_f32_f16(v45);
    v279 = vcvtq_f32_f16(*(float16x4_t *)v46.i8);
    v280 = vcvt_hight_f32_f16(v46);
    bzero(&__B, 0x400uLL);
    v47 = *(float16x8_t *)(v14 + 16);
    v48 = vcvt_hight_f32_f16(*(float16x8_t *)v14);
    __B = vcvtq_f32_f16(*(float16x4_t *)v14);
    v158 = v48;
    v159 = vcvtq_f32_f16(*(float16x4_t *)v47.i8);
    v160 = vcvt_hight_f32_f16(v47);
    v49 = *(float16x8_t *)(v14 + 32);
    v50 = *(float16x8_t *)(v14 + 48);
    v161 = vcvtq_f32_f16(*(float16x4_t *)v49.i8);
    v162 = vcvt_hight_f32_f16(v49);
    v164 = vcvt_hight_f32_f16(v50);
    v163 = vcvtq_f32_f16(*(float16x4_t *)v50.i8);
    v51 = *(float16x8_t *)(v14 + 64);
    v52 = *(float16x8_t *)(v14 + 80);
    v165 = vcvtq_f32_f16(*(float16x4_t *)v51.i8);
    v166 = vcvt_hight_f32_f16(v51);
    v167 = vcvtq_f32_f16(*(float16x4_t *)v52.i8);
    v168 = vcvt_hight_f32_f16(v52);
    v53 = *(float16x8_t *)(v14 + 96);
    v54 = *(float16x8_t *)(v14 + 112);
    v169 = vcvtq_f32_f16(*(float16x4_t *)v53.i8);
    v170 = vcvt_hight_f32_f16(v53);
    v171 = vcvtq_f32_f16(*(float16x4_t *)v54.i8);
    v172 = vcvt_hight_f32_f16(v54);
    v55 = *(float16x8_t *)(v14 + 128);
    v56 = *(float16x8_t *)(v14 + 144);
    v173 = vcvtq_f32_f16(*(float16x4_t *)v55.i8);
    v174 = vcvt_hight_f32_f16(v55);
    v175 = vcvtq_f32_f16(*(float16x4_t *)v56.i8);
    v176 = vcvt_hight_f32_f16(v56);
    v57 = *(float16x8_t *)(v14 + 160);
    v58 = *(float16x8_t *)(v14 + 176);
    v177 = vcvtq_f32_f16(*(float16x4_t *)v57.i8);
    v178 = vcvt_hight_f32_f16(v57);
    v179 = vcvtq_f32_f16(*(float16x4_t *)v58.i8);
    v180 = vcvt_hight_f32_f16(v58);
    v59 = *(float16x8_t *)(v14 + 192);
    v60 = *(float16x8_t *)(v14 + 208);
    v181 = vcvtq_f32_f16(*(float16x4_t *)v59.i8);
    v182 = vcvt_hight_f32_f16(v59);
    v183 = vcvtq_f32_f16(*(float16x4_t *)v60.i8);
    v184 = vcvt_hight_f32_f16(v60);
    v61 = *(float16x8_t *)(v14 + 224);
    v62 = *(float16x8_t *)(v14 + 240);
    v185 = vcvtq_f32_f16(*(float16x4_t *)v61.i8);
    v186 = vcvt_hight_f32_f16(v61);
    v187 = vcvtq_f32_f16(*(float16x4_t *)v62.i8);
    v188 = vcvt_hight_f32_f16(v62);
    v63 = *(float16x8_t *)(v14 + 256);
    v64 = *(float16x8_t *)(v14 + 272);
    v189 = vcvtq_f32_f16(*(float16x4_t *)v63.i8);
    v190 = vcvt_hight_f32_f16(v63);
    v191 = vcvtq_f32_f16(*(float16x4_t *)v64.i8);
    v192 = vcvt_hight_f32_f16(v64);
    v65 = *(float16x8_t *)(v14 + 288);
    v66 = *(float16x8_t *)(v14 + 304);
    v193 = vcvtq_f32_f16(*(float16x4_t *)v65.i8);
    v194 = vcvt_hight_f32_f16(v65);
    v195 = vcvtq_f32_f16(*(float16x4_t *)v66.i8);
    v196 = vcvt_hight_f32_f16(v66);
    v67 = *(float16x8_t *)(v14 + 320);
    v68 = *(float16x8_t *)(v14 + 336);
    v197 = vcvtq_f32_f16(*(float16x4_t *)v67.i8);
    v198 = vcvt_hight_f32_f16(v67);
    v199 = vcvtq_f32_f16(*(float16x4_t *)v68.i8);
    v200 = vcvt_hight_f32_f16(v68);
    v69 = *(float16x8_t *)(v14 + 352);
    v70 = *(float16x8_t *)(v14 + 368);
    v201 = vcvtq_f32_f16(*(float16x4_t *)v69.i8);
    v202 = vcvt_hight_f32_f16(v69);
    v203 = vcvtq_f32_f16(*(float16x4_t *)v70.i8);
    v204 = vcvt_hight_f32_f16(v70);
    v71 = *(float16x8_t *)(v14 + 384);
    v72 = *(float16x8_t *)(v14 + 400);
    v205 = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
    v206 = vcvt_hight_f32_f16(v71);
    v207 = vcvtq_f32_f16(*(float16x4_t *)v72.i8);
    v208 = vcvt_hight_f32_f16(v72);
    v73 = *(float16x8_t *)(v14 + 416);
    v74 = *(float16x8_t *)(v14 + 432);
    v209 = vcvtq_f32_f16(*(float16x4_t *)v73.i8);
    v210 = vcvt_hight_f32_f16(v73);
    v211 = vcvtq_f32_f16(*(float16x4_t *)v74.i8);
    v212 = vcvt_hight_f32_f16(v74);
    v75 = *(float16x8_t *)(v14 + 448);
    v76 = *(float16x8_t *)(v14 + 464);
    v213 = vcvtq_f32_f16(*(float16x4_t *)v75.i8);
    v214 = vcvt_hight_f32_f16(v75);
    v215 = vcvtq_f32_f16(*(float16x4_t *)v76.i8);
    v216 = vcvt_hight_f32_f16(v76);
    v77 = *(float16x8_t *)(v14 + 480);
    v78 = *(float16x8_t *)(v14 + 496);
    v217 = vcvtq_f32_f16(*(float16x4_t *)v77.i8);
    v218 = vcvt_hight_f32_f16(v77);
    v219 = vcvtq_f32_f16(*(float16x4_t *)v78.i8);
    v220 = vcvt_hight_f32_f16(v78);
    LODWORD(__C) = 2139095039;
    vDSP_distancesq((const float *)__A, 1, __B.f32, 1, (float *)&__C, 0x100uLL);
    v79 = *(float *)&__C;
    v80 = *__error();
    v81 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
    {
      v105 = *(_DWORD *)(a1 + 88);
      *(_DWORD *)__A = 136315906;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2649;
      *(_WORD *)&__A[18] = 1024;
      *(_DWORD *)&__A[20] = v105;
      *(_WORD *)&__A[24] = 2048;
      *(double *)&__A[26] = v79;
      _os_log_error_impl(&dword_1B8270000, v81, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", __A, 0x22u);
    }
    *__error() = v80;
    __B = 0uLL;
    v158.i64[0] = 0;
    (*(void (**)(float32x4_t *__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 72))(&__B, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), 2);
    v82 = *__error();
    v83 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
    {
      v106 = *(_DWORD *)__B.i64[0];
      v107 = *(float *)(__B.i64[0] + 4);
      v108 = *(_DWORD *)(__B.i64[0] + 8);
      v109 = *(float *)(__B.i64[0] + 12);
      v110 = v107 == v109 || vabds_f32(v107, v109) <= fmaxf(fminf(fabsf(v109), fabsf(v107)) * 0.000015259, 0.000015259);
      *(_DWORD *)__A = 136316674;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2651;
      *(_WORD *)&__A[18] = 1024;
      *(_DWORD *)&__A[20] = v106;
      *(_WORD *)&__A[24] = 2048;
      *(double *)&__A[26] = v107;
      *(_WORD *)&__A[34] = 1024;
      *(_DWORD *)&__A[36] = v108;
      *(_WORD *)&__A[40] = 2048;
      *(double *)&__A[42] = v109;
      *(_WORD *)&__A[50] = 1024;
      *(_DWORD *)&__A[52] = v110;
      _os_log_error_impl(&dword_1B8270000, v83, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(vec, 2) <%u, %e>, <%u, %e>, %d", __A, 0x38u);
    }
    *__error() = v82;
    v84 = *__error();
    v85 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
    {
      v111 = *(_DWORD *)__B.i64[0];
      v112 = *(_DWORD *)(__B.i64[0] + 8);
      v113 = *(float *)(__B.i64[0] + 4) == *(float *)(__B.i64[0] + 12);
      *(_DWORD *)__A = 136316162;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2652;
      *(_WORD *)&__A[18] = 1024;
      *(_DWORD *)&__A[20] = v111;
      *(_WORD *)&__A[24] = 1024;
      *(_DWORD *)&__A[26] = v112;
      *(_WORD *)&__A[30] = 1024;
      *(_DWORD *)&__A[32] = v113;
      _os_log_error_impl(&dword_1B8270000, v85, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", __A, 0x24u);
    }
    *__error() = v84;
    v86 = *__error();
    v87 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
    {
      v114 = *(_DWORD *)__B.i64[0];
      v115 = *(_DWORD *)(__B.i64[0] + 8);
      v116 = *(float *)(__B.i64[0] + 4) < *(float *)(__B.i64[0] + 12);
      *(_DWORD *)__A = 136316162;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2653;
      *(_WORD *)&__A[18] = 1024;
      *(_DWORD *)&__A[20] = v114;
      *(_WORD *)&__A[24] = 1024;
      *(_DWORD *)&__A[26] = v115;
      *(_WORD *)&__A[30] = 1024;
      *(_DWORD *)&__A[32] = v116;
      _os_log_error_impl(&dword_1B8270000, v87, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", __A, 0x24u);
    }
    *__error() = v86;
    v88 = *__error();
    v89 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
    {
      v117 = *(_DWORD *)__B.i64[0];
      v118 = *(_DWORD *)(__B.i64[0] + 8);
      v119 = *(float *)(__B.i64[0] + 4) > *(float *)(__B.i64[0] + 12);
      *(_DWORD *)__A = 136316162;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2654;
      *(_WORD *)&__A[18] = 1024;
      *(_DWORD *)&__A[20] = v117;
      *(_WORD *)&__A[24] = 1024;
      *(_DWORD *)&__A[26] = v118;
      *(_WORD *)&__A[30] = 1024;
      *(_DWORD *)&__A[32] = v119;
      _os_log_error_impl(&dword_1B8270000, v89, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", __A, 0x24u);
    }
    *__error() = v88;
    v90 = *__error();
    v91 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
    {
      v120 = *(_DWORD *)__B.i64[0];
      v121 = *(_DWORD *)(__B.i64[0] + 8);
      v122 = *(float *)(__B.i64[0] + 4);
      v123 = *(float *)(__B.i64[0] + 12);
      v124 = (float)(v122 - v123);
      v125 = vabds_f32(v122, v123);
      if (v122 == v123)
      {
        v126 = 1;
        v127 = 1;
      }
      else
      {
        v150 = fabsf(v122);
        v151 = fabsf(v123);
        v126 = v125 <= fmaxf(fminf(v151, v150) * 0.000015259, 0.000015259);
        v127 = v125 <= (float)(fmaxf(v150, v151) * 0.000015259);
      }
      *(_DWORD *)__A = 136317698;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2655;
      *(_WORD *)&__A[18] = 1024;
      *(_DWORD *)&__A[20] = v120;
      *(_WORD *)&__A[24] = 1024;
      *(_DWORD *)&__A[26] = v121;
      *(_WORD *)&__A[30] = 2048;
      *(double *)&__A[32] = v124;
      *(_WORD *)&__A[40] = 2048;
      *(_QWORD *)&__A[42] = 0x3810000000000000;
      *(_WORD *)&__A[50] = 2048;
      *(_QWORD *)&__A[52] = 0x3E80000000000000;
      *(_WORD *)&__A[60] = 1024;
      *(_DWORD *)&__A[62] = v125 < 1.1755e-38;
      *(_WORD *)&__A[66] = 1024;
      *(_DWORD *)&__A[68] = v125 < 0.00000011921;
      *(_WORD *)&__A[72] = 1024;
      *(_DWORD *)&__A[74] = v126;
      *(_WORD *)&__A[78] = 1024;
      v222.i32[0] = v127;
      _os_log_error_impl(&dword_1B8270000, v91, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", __A, 0x54u);
    }
    *__error() = v90;
    v155 = 0;
    v156 = 0;
    __C = 0;
    v92 = *(_QWORD *)(a1 + 56);
    v93 = _windowsResolvePtr(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 32) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 32) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 32) + 16) * *(unsigned int *)a3, 0x210uLL);
    (*(void (**)(float **__return_ptr, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v92 + 72))(&__C, v92, v93, 2);
    v94 = *__error();
    v95 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
    {
      v128 = *__C;
      v129 = __C[1];
      v130 = *((_DWORD *)__C + 2);
      v131 = __C[3];
      v132 = v129 == v131 || vabds_f32(v129, v131) <= fmaxf(fminf(fabsf(v131), fabsf(v129)) * 0.000015259, 0.000015259);
      *(_DWORD *)__A = 136316674;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2658;
      *(_WORD *)&__A[18] = 1024;
      *(float *)&__A[20] = v128;
      *(_WORD *)&__A[24] = 2048;
      *(double *)&__A[26] = v129;
      *(_WORD *)&__A[34] = 1024;
      *(_DWORD *)&__A[36] = v130;
      *(_WORD *)&__A[40] = 2048;
      *(double *)&__A[42] = v131;
      *(_WORD *)&__A[50] = 1024;
      *(_DWORD *)&__A[52] = v132;
      _os_log_error_impl(&dword_1B8270000, v95, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(entry->vec, 2) <%u, %e>, <%u, %e>, %d", __A, 0x38u);
    }
    *__error() = v94;
    v96 = *__error();
    v97 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
    {
      v133 = *__C;
      v134 = *((_DWORD *)__C + 2);
      v135 = __C[1] == __C[3];
      *(_DWORD *)__A = 136316162;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2659;
      *(_WORD *)&__A[18] = 1024;
      *(float *)&__A[20] = v133;
      *(_WORD *)&__A[24] = 1024;
      *(_DWORD *)&__A[26] = v134;
      *(_WORD *)&__A[30] = 1024;
      *(_DWORD *)&__A[32] = v135;
      _os_log_error_impl(&dword_1B8270000, v97, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", __A, 0x24u);
    }
    *__error() = v96;
    v98 = *__error();
    v99 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
    {
      v136 = *__C;
      v137 = *((_DWORD *)__C + 2);
      v138 = __C[1] < __C[3];
      *(_DWORD *)__A = 136316162;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2660;
      *(_WORD *)&__A[18] = 1024;
      *(float *)&__A[20] = v136;
      *(_WORD *)&__A[24] = 1024;
      *(_DWORD *)&__A[26] = v137;
      *(_WORD *)&__A[30] = 1024;
      *(_DWORD *)&__A[32] = v138;
      _os_log_error_impl(&dword_1B8270000, v99, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", __A, 0x24u);
    }
    *__error() = v98;
    v100 = *__error();
    v101 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
    {
      v139 = *__C;
      v140 = *((_DWORD *)__C + 2);
      v141 = __C[1] > __C[3];
      *(_DWORD *)__A = 136316162;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2661;
      *(_WORD *)&__A[18] = 1024;
      *(float *)&__A[20] = v139;
      *(_WORD *)&__A[24] = 1024;
      *(_DWORD *)&__A[26] = v140;
      *(_WORD *)&__A[30] = 1024;
      *(_DWORD *)&__A[32] = v141;
      _os_log_error_impl(&dword_1B8270000, v101, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", __A, 0x24u);
    }
    *__error() = v100;
    v102 = *__error();
    v103 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
    {
      v142 = *__C;
      v143 = *((_DWORD *)__C + 2);
      v144 = __C[1];
      v145 = __C[3];
      v146 = vabds_f32(v144, v145);
      v147 = (float)(v144 - v145) < 1.1755e-38;
      if (v144 == v145)
      {
        v148 = 1;
        v149 = 1;
      }
      else
      {
        v152 = fabsf(v144);
        v153 = fabsf(v145);
        v148 = v146 <= fmaxf(fminf(v153, v152) * 0.000015259, 0.000015259);
        v149 = v146 <= (float)(fmaxf(v152, v153) * 0.000015259);
      }
      *(_DWORD *)__A = 136317698;
      *(_QWORD *)&__A[4] = "exists_block_invoke";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 2662;
      *(_WORD *)&__A[18] = 1024;
      *(float *)&__A[20] = v142;
      *(_WORD *)&__A[24] = 1024;
      *(_DWORD *)&__A[26] = v143;
      *(_WORD *)&__A[30] = 2048;
      *(double *)&__A[32] = v146;
      *(_WORD *)&__A[40] = 2048;
      *(_QWORD *)&__A[42] = 0x3810000000000000;
      *(_WORD *)&__A[50] = 2048;
      *(_QWORD *)&__A[52] = 0x3E80000000000000;
      *(_WORD *)&__A[60] = 1024;
      *(_DWORD *)&__A[62] = v147;
      *(_WORD *)&__A[66] = 1024;
      *(_DWORD *)&__A[68] = v146 < 0.00000011921;
      *(_WORD *)&__A[72] = 1024;
      *(_DWORD *)&__A[74] = v148;
      *(_WORD *)&__A[78] = 1024;
      v222.i32[0] = v149;
      _os_log_error_impl(&dword_1B8270000, v103, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", __A, 0x54u);
    }
    *__error() = v102;
    *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *a3;
    *a4 = 1;
    if (__C)
    {
      v155 = __C;
      operator delete(__C);
    }
    if (__B.i64[0])
    {
      __B.i64[1] = __B.i64[0];
      operator delete((void *)__B.i64[0]);
    }
  }
}

_QWORD *__copy_helper_block_8_56c64_ZTSN22IVFVectorIndexTemplateIDF16_Li256EE19QuantizerPartitionsE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[10];
  result[9] = a2[9];
  result[10] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_8_56c64_ZTSN22IVFVectorIndexTemplateIDF16_Li256EE19QuantizerPartitionsE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t freeVectorIndex(uint64_t result)
{
  if (result)
  {
    IVFVectorIndex_s::~IVFVectorIndex_s((void **)(result + 8));
    JUMPOUT(0x1BCCB06A4);
  }
  return result;
}

void IVFVectorIndex_s::~IVFVectorIndex_s(void **this)
{
  int v2;
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  __int16 v8;
  IVFVectorIndex_s *v9;
  __int16 v10;
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *__error();
  v3 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = this + 7;
    if (*((char *)this + 79) < 0)
      v4 = (_QWORD *)*v4;
    v5 = this + 4;
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    v6 = 136315650;
    v7 = v4;
    v8 = 2048;
    v9 = (IVFVectorIndex_s *)this;
    v10 = 2080;
    v11 = v5;
    _os_log_impl(&dword_1B8270000, v3, OS_LOG_TYPE_DEFAULT, "[%s] close %p with prefix %s", (uint8_t *)&v6, 0x20u);
  }
  *__error() = v2;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<AnyVectorIndexInstance>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<AnyVectorIndexInstance>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<AnyVectorIndexInstance>>>>::destroy(this[11]);
  if (*((char *)this + 79) < 0)
  {
    operator delete(this[7]);
    if ((*((char *)this + 55) & 0x80000000) == 0)
    {
LABEL_9:
      if ((*((char *)this + 31) & 0x80000000) == 0)
        return;
LABEL_13:
      operator delete(this[1]);
      return;
    }
  }
  else if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    goto LABEL_13;
}

void std::__tree<std::__value_type<unsigned long long,std::shared_ptr<AnyVectorIndexInstance>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<AnyVectorIndexInstance>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<AnyVectorIndexInstance>>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<AnyVectorIndexInstance>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<AnyVectorIndexInstance>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<AnyVectorIndexInstance>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<AnyVectorIndexInstance>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<AnyVectorIndexInstance>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<AnyVectorIndexInstance>>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[6];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    operator delete(a1);
  }
}

BOOL recoverVectorIndex(int a1, const char *a2, uint64_t a3)
{
  int v6;
  BOOL v7;
  void **p_p;
  size_t v9;
  std::string::size_type v10;
  std::string *p_dst;
  uint64_t v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  void *v16;
  size_t v17;
  size_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  size_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *v30[2];
  unint64_t v31;
  std::string __dst;
  void *v33;
  std::string pn;
  std::__fs::filesystem::path v35;
  _BYTE buf[24];
  char v37;
  void *__p;
  uint64_t v39;
  int64_t v40;
  void *v41;
  _BYTE *v42;
  std::string v43;
  uint64_t v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  bzero(&__p, 0x400uLL);
  v6 = fcntl(a1, 50, &__p);
  if ((_BYTE)__p)
    v7 = v6 < 0;
  else
    v7 = 1;
  if (v7)
    p_p = 0;
  else
    p_p = &__p;
  v9 = strlen((const char *)p_p);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_59;
  v10 = v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v10;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_14;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v9;
  p_dst = &__dst;
  if (v9)
LABEL_14:
    memcpy(p_dst, p_p, v10);
  p_dst->__r_.__value_.__s.__data_[v10] = 0;
  v35.__pn_ = __dst;
  v14 = *__error();
  v15 = _SILogForLogForCategory(16);
  if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    goto LABEL_24;
  if (SHIBYTE(v35.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__dst, v35.__pn_.__r_.__value_.__l.__data_, v35.__pn_.__r_.__value_.__l.__size_);
  else
    __dst = v35.__pn_;
  IVFVectorIndex_s::protectionClassForParentPath((char *)&__p, (uint64_t)&__dst);
  if (v40 >= 0)
    v16 = &__p;
  else
    v16 = __p;
  *(_DWORD *)buf = 136315394;
  *(_QWORD *)&buf[4] = v16;
  *(_WORD *)&buf[12] = 2080;
  *(_QWORD *)&buf[14] = a2;
  _os_log_impl(&dword_1B8270000, v15, OS_LOG_TYPE_DEFAULT, "[%s] recoverFromShadow: %s", buf, 0x16u);
  if (SHIBYTE(v40) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
  *__error() = v14;
  v17 = strlen(a2);
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_59;
  v18 = v17;
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    v19 = operator new(v20 + 1);
    v39 = v18;
    v40 = v21 | 0x8000000000000000;
    __p = v19;
    goto LABEL_31;
  }
  HIBYTE(v40) = v17;
  v19 = &__p;
  if (v17)
LABEL_31:
    memcpy(v19, a2, v18);
  *((_BYTE *)v19 + v18) = 0;
  v22 = (void *)MEMORY[0x1E0C809B0];
  __dst.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  __dst.__r_.__value_.__l.__size_ = 1174405120;
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN16IVFVectorIndex_s17recoverFromShadowEiPKcPVi_block_invoke;
  v33 = &__block_descriptor_tmp_86;
  if (SHIBYTE(v35.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, v35.__pn_.__r_.__value_.__l.__data_, v35.__pn_.__r_.__value_.__l.__size_);
  else
    pn = v35.__pn_;
  IVFVectorIndex_s::enumerateIndexes(&v35, (const void **)&__p, 0, 1, (uint64_t)&__dst);
  if (SHIBYTE(v40) < 0)
    operator delete(__p);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2000000000;
  v37 = 1;
  v23 = strlen(a2);
  if (v23 > 0x7FFFFFFFFFFFFFF7)
LABEL_59:
    abort();
  v24 = (void *)v23;
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    v25 = operator new(v26 + 1);
    v30[1] = v24;
    v31 = v27 | 0x8000000000000000;
    v30[0] = v25;
    goto LABEL_44;
  }
  HIBYTE(v31) = v23;
  v25 = v30;
  if (v23)
LABEL_44:
    memcpy(v25, a2, (size_t)v24);
  *((_BYTE *)v24 + (_QWORD)v25) = 0;
  __p = v22;
  v39 = 1174405120;
  v40 = (int64_t)___ZN16IVFVectorIndex_s17recoverFromShadowEiPKcPVi_block_invoke_87;
  v41 = &unk_1E6E309D0;
  if (SHIBYTE(v35.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v43, v35.__pn_.__r_.__value_.__l.__data_, v35.__pn_.__r_.__value_.__l.__size_);
  else
    v43 = v35.__pn_;
  v45 = a1;
  v44 = a3;
  v42 = buf;
  IVFVectorIndex_s::enumerateIndexes(&v35, (const void **)v30, 1, 0, (uint64_t)&__p);
  if (SHIBYTE(v31) < 0)
    operator delete(v30[0]);
  v28 = *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 24);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  _Block_object_dispose(buf, 8);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(pn.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v28 != 0;
LABEL_56:
    operator delete(v35.__pn_.__r_.__value_.__l.__data_);
    return v28 != 0;
  }
  if (SHIBYTE(v35.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_56;
  return v28 != 0;
}

void ___ZN16IVFVectorIndex_s17recoverFromShadowEiPKcPVi_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  int v10;
  NSObject *v11;
  const std::string::value_type *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  std::string *v16;
  std::string::size_type v17;
  int v18;
  NSObject *v19;
  std::string *p_buf;
  std::string::size_type size;
  std::string *v22;
  std::string v23;
  std::string v24;
  std::string __p;
  std::string buf;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if ((a8 & 0x80) == 0)
    return;
  v10 = *__error();
  v11 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a7 + 23) >= 0)
      v12 = (const std::string::value_type *)a7;
    else
      v12 = *(const std::string::value_type **)a7;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
    _os_log_impl(&dword_1B8270000, v11, OS_LOG_TYPE_DEFAULT, "remove: %s", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v10;
  v13 = a1 + 32;
  memset(&v24, 0, sizeof(v24));
  v14 = *(unsigned __int8 *)(a7 + 23);
  if ((v14 & 0x80u) == 0)
    v15 = (char *)a7;
  else
    v15 = *(char **)a7;
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a7 + 8);
  std::string::append[abi:nn180100]<char const*,0>(&v24, v15, &v15[v14]);
  std::__fs::filesystem::operator/[abi:nn180100](&__p, v13, (std::__fs::filesystem::path *)&v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    buf = __p;
  IVFVectorIndex_s::unlink((char *)&buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_18;
LABEL_22:
      operator delete(v24.__r_.__value_.__l.__data_);
      if ((*(char *)(a7 + 23) & 0x80000000) == 0)
        goto LABEL_19;
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_22;
LABEL_18:
  if ((*(char *)(a7 + 23) & 0x80000000) == 0)
  {
LABEL_19:
    __p = *(std::string *)a7;
    goto LABEL_24;
  }
LABEL_23:
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a7, *(_QWORD *)(a7 + 8));
LABEL_24:
  v16 = std::string::append(&__p, ".partitions");
  v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  buf.__r_.__value_.__r.__words[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v18 = *__error();
  v19 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    p_buf = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
    _os_log_impl(&dword_1B8270000, v19, OS_LOG_TYPE_DEFAULT, "remove partitions: %s", (uint8_t *)&__p, 0xCu);
  }
  *__error() = v18;
  memset(&v23, 0, sizeof(v23));
  size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &buf;
  else
    v22 = (std::string *)buf.__r_.__value_.__r.__words[0];
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = buf.__r_.__value_.__l.__size_;
  std::string::append[abi:nn180100]<char const*,0>(&v23, (char *)v22, (char *)v22 + size);
  std::__fs::filesystem::operator/[abi:nn180100](&v24, v13, (std::__fs::filesystem::path *)&v23);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  else
    __p = v24;
  IVFVectorIndex_s::unlink((char *)&__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_40;
LABEL_44:
    operator delete(v24.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_41:
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_46:
      operator delete(buf.__r_.__value_.__l.__data_);
      return;
    }
    goto LABEL_45;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_44;
LABEL_40:
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_41;
LABEL_45:
  operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_46;
}

void IVFVectorIndex_s::enumerateIndexes(const std::__fs::filesystem::path *a1, const void **a2, int a3, char a4, uint64_t a5)
{
  int v7;
  size_t v8;
  unint64_t v9;
  void **p_dst;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *ptr;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  const std::__fs::filesystem::directory_entry *v25;
  std::string::value_type cache_type;
  const std::__fs::filesystem::path *p_p;
  uint64_t non_sym_perms;
  int v29;
  std::__fs::filesystem::path::__string_view v31;
  __int128 *v32;
  std::basic_string_view<_CharT, _Traits>::size_type v33;
  std::basic_string_view<_CharT, _Traits>::size_type v34;
  std::string::size_type size;
  void *v36;
  unint64_t v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  std::ios_base *v41;
  uint64_t v42;
  size_t v43;
  size_t v44;
  void **v45;
  void **p_s1;
  int v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  char *v51;
  const char *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  const std::locale::facet *v58;
  unsigned __int8 v59;
  const char *v60;
  uint64_t v61;
  char *v62;
  size_t v63;
  std::string::size_type v64;
  std::string::size_type v65;
  std::string *v66;
  uint64_t v67;
  uint64_t v68;
  char *locale;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *cntrl;
  uint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  char *v78;
  char *v79;
  const char *v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  std::string v94;
  std::__fs::filesystem::path v95;
  unsigned int v96;
  std::string v97;
  std::__fs::filesystem::path v98;
  std::locale v99;
  uint64_t v100;
  uint64_t v101;
  char *__endptr;
  void *__s1;
  size_t __n;
  uint64_t v105;
  __int128 v106;
  _QWORD v107[8];
  __int128 __p;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  std::string __src;
  std::__fs::filesystem::directory_iterator v122;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v123;
  std::__shared_weak_count *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void **__dst;
  size_t v129;
  int64_t v130;

  std::__fs::filesystem::__status(a1, 0);
  if (v106 != 2 || (std::__fs::filesystem::__status(a1, 0), (WORD2(v106) & 0x100) == 0))
  {
    v78 = __si_assert_copy_extra_268();
    v79 = v78;
    v80 = "";
    if (v78)
      v80 = v78;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3966, "fs::is_directory(path) && (fs::status(path).permissions() & fs::perms::owner_read) != fs::perms::none", v80);
    free(v79);
    if (__valid_fs(-1))
      v81 = 2989;
    else
      v81 = 3072;
    *(_DWORD *)v81 = -559038737;
LABEL_178:
    abort();
  }
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  v9 = v8 + 3;
  if (v8 + 3 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_178;
  if (v9 >= 0x17)
  {
    v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v11 = v9 | 7;
    v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    v129 = v8 + 3;
    v130 = v12 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v129 = 0;
    v130 = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v130) = v8 + 3;
    if (!v8)
      goto LABEL_17;
  }
  if (v7 >= 0)
    v13 = a2;
  else
    v13 = *a2;
  memmove(p_dst, v13, v8);
LABEL_17:
  *(_DWORD *)((char *)p_dst + v8) = 6714985;
  v126 = 0;
  v127 = 0x300000000000000;
  v125 = 7366264;
  MEMORY[0x1BCCB05B4](&v123, a1, 0, 0);
  ptr = v123;
  v15 = v124;
  if (!v124)
  {
    v122.__imp_.__ptr_ = v123;
    v122.__imp_.__cntrl_ = 0;
    v86 = (uint64_t)a1;
    if (!v123)
      goto LABEL_156;
    goto LABEL_30;
  }
  p_shared_owners = (unint64_t *)&v124->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = v124;
  v122.__imp_.__ptr_ = ptr;
  v122.__imp_.__cntrl_ = v15;
  if (v124)
  {
    v19 = (unint64_t *)&v124->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    ptr = v122.__imp_.__ptr_;
  }
  v86 = (uint64_t)a1;
  if (ptr)
  {
LABEL_30:
    v22 = *MEMORY[0x1E0DE4F58];
    v93 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 8);
    v91 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
    v92 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 16);
    v90 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      v25 = std::__fs::filesystem::directory_iterator::__dereference(&v122);
      cache_type = v25->__data_.__cache_type_;
      p_p = &v25->__p_;
      if (((1 << cache_type) & 0x17) != 0)
      {
        std::__fs::filesystem::__status(&v25->__p_, 0);
        non_sym_perms = DWORD1(v106);
        cache_type = p_p[3].__pn_.__r_.__value_.__s.__data_[1];
      }
      else
      {
        non_sym_perms = v25->__data_.__non_sym_perms_;
      }
      if (((1 << cache_type) & 0x13) != 0)
      {
        std::__fs::filesystem::__status(p_p, 0);
        v29 = v106;
      }
      else
      {
        v29 = p_p[3].__pn_.__r_.__value_.__s.__data_[0];
      }
      if (v29 != 1 || (non_sym_perms & 0x100) == 0)
        goto LABEL_38;
      memset(&__src, 0, sizeof(__src));
      v31 = std::__fs::filesystem::path::__filename(p_p);
      if (v31.__size_ > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_178;
      if (v31.__size_ >= 0x17)
        break;
      HIBYTE(v107[0]) = v31.__size_;
      v32 = &v106;
      if (v31.__size_)
        goto LABEL_56;
LABEL_57:
      *((_BYTE *)v32 + v31.__size_) = 0;
      size = *((_QWORD *)&v106 + 1);
      v36 = (void *)v106;
      LODWORD(__s1) = v107[0];
      *(_DWORD *)((char *)&__s1 + 3) = *(_DWORD *)((char *)v107 + 3);
      if (SHIBYTE(v107[0]) < 0)
      {
        std::string::__init_copy_ctor_external(&__src, (const std::string::value_type *)v106, *((std::string::size_type *)&v106 + 1));
        operator delete(v36);
        v24 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        size = __src.__r_.__value_.__l.__size_;
      }
      else
      {
        v24 = HIBYTE(v107[0]);
        *(_OWORD *)&__src.__r_.__value_.__l.__data_ = v106;
        LODWORD(__src.__r_.__value_.__r.__words[2]) = (_DWORD)__s1;
        *(_DWORD *)((char *)&__src.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&__s1 + 3);
        *((_BYTE *)&__src.__r_.__value_.__s + 23) = HIBYTE(v107[0]);
      }
      if ((v24 & 0x80u) == 0)
        v37 = v24;
      else
        v37 = size;
      v38 = (const void *)*((unsigned __int8 *)a2 + 23);
      if ((char)v38 < 0)
        v38 = a2[1];
      if (v37 < (unint64_t)v38 + 30)
        goto LABEL_36;
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v115 = 0u;
      v116 = 0u;
      v113 = 0u;
      v114 = 0u;
      v110 = 0;
      v112 = 0u;
      __p = 0u;
      v109 = 0u;
      memset(v107, 0, sizeof(v107));
      v39 = MEMORY[0x1E0DE4FD8];
      v40 = MEMORY[0x1E0DE4FD8] + 64;
      v111 = MEMORY[0x1E0DE4FD8] + 64;
      *(_QWORD *)&v106 = v93;
      *(_QWORD *)((char *)&v107[-2] + *(_QWORD *)(v93 - 24)) = v92;
      *((_QWORD *)&v106 + 1) = 0;
      v41 = (std::ios_base *)((char *)&v107[-2] + *(_QWORD *)(v106 - 24));
      std::ios_base::init(v41, v107);
      v41[1].__vftable = 0;
      v41[1].__fmtflags_ = -1;
      *(_QWORD *)&v106 = v39 + 24;
      v111 = v40;
      std::streambuf::basic_streambuf();
      v107[0] = v90;
      __p = 0u;
      v109 = 0u;
      LODWORD(v110) = 8;
      std::stringbuf::str();
      __s1 = 0;
      __n = 0;
      v105 = 0;
      std::getline[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v106, (uint64_t)&__s1, 0x2Du);
      v42 = HIBYTE(v105);
      if (v105 >= 0)
        v43 = HIBYTE(v105);
      else
        v43 = __n;
      v44 = HIBYTE(v130);
      if (v130 < 0)
        v44 = v129;
      if (v43 != v44)
        goto LABEL_83;
      if (v130 >= 0)
        v45 = (void **)&__dst;
      else
        v45 = __dst;
      if ((SHIBYTE(v105) & 0x80000000) == 0)
      {
        if (HIBYTE(v105))
        {
          p_s1 = &__s1;
          while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v45)
          {
            p_s1 = (void **)((char *)p_s1 + 1);
            v45 = (void **)((char *)v45 + 1);
            if (!--v42)
              goto LABEL_80;
          }
LABEL_83:
          if ((v105 & 0x8000000000000000) == 0)
            goto LABEL_33;
LABEL_84:
          v23 = (char *)__s1;
          goto LABEL_32;
        }
LABEL_80:
        std::getline[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v106, (uint64_t)&__s1, 0x2Du);
        if (SHIBYTE(v105) < 0)
        {
          v23 = (char *)__s1;
          if (__n != 8)
            goto LABEL_32;
        }
        else
        {
          if (SHIBYTE(v105) != 8)
            goto LABEL_33;
          v23 = (char *)&__s1;
        }
        __endptr = 0;
        v47 = strtol(v23, &__endptr, 10);
        switch(v47)
        {
          case 256:
            v85 = 0;
            break;
          case 768:
            v48 = 2;
LABEL_92:
            v85 = v48;
            break;
          case 512:
            v48 = 1;
            goto LABEL_92;
          default:
LABEL_154:
            if ((v105 & 0x8000000000000000) == 0)
              goto LABEL_33;
            goto LABEL_84;
        }
        v49 = &v125;
        if (v127 >= 0)
        {
          v50 = HIBYTE(v127);
        }
        else
        {
          v49 = (uint64_t *)v125;
          v50 = v126;
        }
        v51 = __endptr;
        if (v50)
        {
          v52 = &__endptr[v50];
          v53 = v50;
          v54 = v49;
          while (*(unsigned __int8 *)v54 == *v51)
          {
            v54 = (uint64_t *)((char *)v54 + 1);
            ++v51;
            if (!--v53)
              goto LABEL_103;
          }
        }
        else
        {
          v54 = v49;
        }
        v52 = v51;
        if (v54 != (uint64_t *)((char *)v49 + v50))
          goto LABEL_154;
LABEL_103:
        v55 = strtol(v52, &__endptr, 10) >> 3;
        if (v55 == 2)
          v56 = 1;
        else
          v56 = 3;
        if (v55 == 4)
          v57 = 0;
        else
          v57 = v56;
        if ((_DWORD)v57 == 3)
          goto LABEL_154;
        std::ios_base::getloc((const std::ios_base *)((char *)&v107[-2] + *(_QWORD *)(v106 - 24)));
        v58 = std::locale::use_facet(&v99, MEMORY[0x1E0DE4A90]);
        v59 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
        std::locale::~locale(&v99);
        std::getline[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v106, (uint64_t)&__s1, v59);
        v60 = v105 >= 0 ? (const char *)&__s1 : (const char *)__s1;
        v61 = strtol(v60, &__endptr, 16);
        if (__endptr - v60 != 8)
          goto LABEL_154;
        if (*__endptr != 45)
          goto LABEL_154;
        v62 = __endptr + 1;
        v84 = v61;
        v83 = strtol(__endptr + 1, &__endptr, 16);
        if (__endptr - v62 != 8)
          goto LABEL_154;
        v63 = strlen(__endptr);
        if (v63)
        {
          if (v63 != 7 || strcmp(__endptr, ".shadow") || !a3)
            goto LABEL_154;
          v99.__locale_ = 0;
          v100 = 0;
          v101 = 0;
          v64 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
          if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v64 = __src.__r_.__value_.__l.__size_;
          std::string::substr[abi:nn180100](&v99, &__src, v64 - 7);
          LOBYTE(v82) = 0;
          (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unint64_t, std::locale *, uint64_t, int))(a5 + 16))(a5, v84, (unsigned __int16)v83, v85, v57, (v83 >> 31) & 1, &v99, non_sym_perms, v82);
          if ((a4 & 1) == 0)
          {
            memset(&v98, 0, sizeof(v98));
            std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v98, (const void **)&v99.__locale_, ".partitions");
            memset(&v97, 0, sizeof(v97));
            std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v97, (const void **)&v98.__pn_.__r_.__value_.__l.__data_, ".shadow");
            memset(&v94, 0, sizeof(v94));
            v65 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
            if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v66 = &v97;
            else
              v66 = (std::string *)v97.__r_.__value_.__r.__words[0];
            if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v65 = v97.__r_.__value_.__l.__size_;
            std::string::append[abi:nn180100]<char const*,0>(&v94, (char *)v66, (char *)v66 + v65);
            std::__fs::filesystem::operator/[abi:nn180100](&v95.__pn_, v86, (std::__fs::filesystem::path *)&v94);
            std::__fs::filesystem::__status(&v95, 0);
            v67 = v96;
            if (SHIBYTE(v95.__pn_.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v95.__pn_.__r_.__value_.__l.__data_);
              if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_148;
LABEL_130:
              if ((v67 & 0x100) == 0)
                goto LABEL_131;
LABEL_149:
              LOBYTE(v82) = 1;
              (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unint64_t, std::__fs::filesystem::path *, uint64_t, int))(a5 + 16))(a5, v84, (unsigned __int16)v83, v85, v57, (v83 >> 31) & 1, &v98, v67, v82);
              if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_150;
LABEL_132:
              if (SHIBYTE(v98.__pn_.__r_.__value_.__r.__words[2]) < 0)
LABEL_151:
                operator delete(v98.__pn_.__r_.__value_.__l.__data_);
            }
            else
            {
              if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_130;
LABEL_148:
              operator delete(v94.__r_.__value_.__l.__data_);
              if ((v67 & 0x100) != 0)
                goto LABEL_149;
LABEL_131:
              if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_132;
LABEL_150:
              operator delete(v97.__r_.__value_.__l.__data_);
              if (SHIBYTE(v98.__pn_.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_151;
            }
          }
        }
        else
        {
          if ((a3 & 1) != 0)
            goto LABEL_154;
          LOBYTE(v82) = 0;
          (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unint64_t, std::string *, uint64_t, int))(a5 + 16))(a5, v84, (unsigned __int16)v83, v85, v57, (v83 >> 31) & 1, &__src, non_sym_perms, v82);
          if ((a4 & 1) != 0)
            goto LABEL_154;
          v99.__locale_ = 0;
          v100 = 0;
          v101 = 0;
          std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v99, (const void **)&__src.__r_.__value_.__l.__data_, ".partitions");
          memset(&v97, 0, sizeof(v97));
          v68 = HIBYTE(v101);
          if (v101 >= 0)
            locale = (char *)&v99;
          else
            locale = (char *)v99.__locale_;
          if (v101 < 0)
            v68 = v100;
          std::string::append[abi:nn180100]<char const*,0>(&v97, locale, &locale[v68]);
          std::__fs::filesystem::operator/[abi:nn180100](&v98.__pn_, v86, (std::__fs::filesystem::path *)&v97);
          std::__fs::filesystem::__status(&v98, 0);
          v70 = HIDWORD(v95.__pn_.__r_.__value_.__r.__words[0]);
          if (SHIBYTE(v98.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v98.__pn_.__r_.__value_.__l.__data_);
          v71 = v84;
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v97.__r_.__value_.__l.__data_);
            v71 = v84;
          }
          if ((v70 & 0x100) != 0)
          {
            LOBYTE(v82) = 1;
            (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unint64_t, std::locale *, uint64_t, int))(a5 + 16))(a5, v71, (unsigned __int16)v83, v85, v57, (v83 >> 31) & 1, &v99, v70, v82);
          }
        }
        if (SHIBYTE(v101) < 0)
          operator delete(v99.__locale_);
        goto LABEL_154;
      }
      v23 = (char *)__s1;
      if (!memcmp(__s1, v45, __n))
        goto LABEL_80;
LABEL_32:
      operator delete(v23);
LABEL_33:
      *(_QWORD *)&v106 = v22;
      *(_QWORD *)((char *)&v107[-2] + *(_QWORD *)(v22 - 24)) = v91;
      v107[0] = MEMORY[0x1E0DE4FB8] + 16;
      if (SBYTE7(v109) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::istream::~istream();
      MEMORY[0x1BCCB0650](&v111);
      LOBYTE(v24) = *((_BYTE *)&__src.__r_.__value_.__s + 23);
LABEL_36:
      if ((v24 & 0x80) != 0)
        operator delete(__src.__r_.__value_.__l.__data_);
LABEL_38:
      std::__fs::filesystem::directory_iterator::__increment(&v122, 0);
      if (!v122.__imp_.__ptr_)
        goto LABEL_156;
    }
    v33 = (v31.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31.__size_ | 7) != 0x17)
      v33 = v31.__size_ | 7;
    v34 = v33 + 1;
    v32 = (__int128 *)operator new(v33 + 1);
    *((_QWORD *)&v106 + 1) = v31.__size_;
    v107[0] = v34 | 0x8000000000000000;
    *(_QWORD *)&v106 = v32;
LABEL_56:
    memmove(v32, v31.__data_, v31.__size_);
    goto LABEL_57;
  }
LABEL_156:
  cntrl = v122.__imp_.__cntrl_;
  if (!v122.__imp_.__cntrl_)
    goto LABEL_160;
  v73 = &v122.__imp_.__cntrl_->__shared_owners_;
  do
    v74 = __ldaxr((unint64_t *)v73);
  while (__stlxr(v74 - 1, (unint64_t *)v73));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
    std::__shared_weak_count::__release_weak(cntrl);
    v75 = v124;
    if (!v124)
      goto LABEL_164;
  }
  else
  {
LABEL_160:
    v75 = v124;
    if (!v124)
      goto LABEL_164;
  }
  v76 = (unint64_t *)&v75->__shared_owners_;
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v77 - 1, v76));
  if (v77)
  {
LABEL_164:
    if ((SHIBYTE(v127) & 0x80000000) == 0)
      goto LABEL_165;
    goto LABEL_170;
  }
  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
  std::__shared_weak_count::__release_weak(v75);
  if ((SHIBYTE(v127) & 0x80000000) == 0)
  {
LABEL_165:
    if ((SHIBYTE(v130) & 0x80000000) == 0)
      return;
LABEL_171:
    operator delete(__dst);
    return;
  }
LABEL_170:
  operator delete((void *)v125);
  if (SHIBYTE(v130) < 0)
    goto LABEL_171;
}

void ___ZN16IVFVectorIndex_s17recoverFromShadowEiPKcPVi_block_invoke_87(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void **a7)
{
  int v7;
  size_t v8;
  unint64_t v9;
  void **v10;
  void **v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  void **v20;
  void *v21;
  const char *v22;
  const char *v23;
  int v24;
  NSObject *v25;
  unint64_t v26;
  int v27;
  NSObject *v28;
  void **v29;
  size_t v30;
  char *v31;
  void *v32;
  std::string v33;
  std::string __p;
  void **__dst;
  size_t v36;
  int64_t v37;
  _BYTE v38[28];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v7 = *((char *)a7 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a7 + 23);
  else
    v8 = (size_t)a7[1];
  v9 = v8 + 7;
  if (v8 + 7 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v10 = a7;
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v36 = v8 + 7;
    v37 = v15 | 0x8000000000000000;
    __dst = p_dst;
    v12 = (void **)*v10;
    goto LABEL_11;
  }
  v36 = 0;
  v37 = 0;
  __dst = 0;
  HIBYTE(v37) = v8 + 7;
  v12 = (void **)*a7;
  if (v8)
  {
    p_dst = (void **)&__dst;
LABEL_11:
    if (v7 >= 0)
      v16 = v10;
    else
      v16 = v12;
    memmove(p_dst, v16, v8);
    goto LABEL_15;
  }
  if (v7 >= 0)
    v16 = a7;
  else
    v16 = (void **)*a7;
  p_dst = (void **)&__dst;
LABEL_15:
  strcpy((char *)p_dst + v8, ".shadow");
  v17 = a1 + 40;
  memset(&__p, 0, sizeof(__p));
  std::string::append[abi:nn180100]<char const*,0>(&__p, (char *)v16, (char *)v16 + v8);
  std::__fs::filesystem::operator/[abi:nn180100]((std::string *)v38, a1 + 40, (std::__fs::filesystem::path *)&__p);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)v38, 0);
  if ((v38[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v38);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
LABEL_38:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_17;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_38;
LABEL_17:
  if (v33.__r_.__value_.__s.__data_[0] == 255 || !v33.__r_.__value_.__s.__data_[0])
  {
    v18 = *__error();
    v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = (void **)&__dst;
      if (v37 < 0)
        v20 = __dst;
      if (*((char *)v10 + 23) >= 0)
        v21 = v10;
      else
        v21 = *v10;
      *(_DWORD *)v38 = 136315394;
      *(_QWORD *)&v38[4] = v20;
      *(_WORD *)&v38[12] = 2080;
      *(_QWORD *)&v38[14] = v21;
      _os_log_impl(&dword_1B8270000, v19, OS_LOG_TYPE_DEFAULT, "copy file: %s to %s", v38, 0x16u);
    }
    *__error() = v18;
    if (v37 >= 0)
      v22 = (const char *)&__dst;
    else
      v22 = (const char *)__dst;
    if (*((char *)v10 + 23) >= 0)
      v23 = (const char *)v10;
    else
      v23 = (const char *)*v10;
    if ((copyFileFallback(*(unsigned int *)(a1 + 72), v22, *(_DWORD *)(a1 + 72), v23, *(_DWORD **)(a1 + 64), 1, 1) & 1) == 0)
    {
      v24 = *__error();
      v25 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)v10 + 23) >= 0)
          v32 = v10;
        else
          v32 = *v10;
        *(_DWORD *)v38 = 136315650;
        *(_QWORD *)&v38[4] = "recoverFromShadow_block_invoke";
        *(_WORD *)&v38[12] = 1024;
        *(_DWORD *)&v38[14] = 3842;
        *(_WORD *)&v38[18] = 2080;
        *(_QWORD *)&v38[20] = v32;
        _os_log_error_impl(&dword_1B8270000, v25, OS_LOG_TYPE_ERROR, "%s:%d: Could not recover file from shadow: %s", v38, 0x1Cu);
      }
      *__error() = v24;
      if (*((char *)v10 + 23) < 0)
      {
        v26 = (unint64_t)v10[1];
        if (v26 < 0xB)
          goto LABEL_57;
        v10 = (void **)*v10;
      }
      else
      {
        v26 = *((unsigned __int8 *)v10 + 23);
        if (v26 < 0xB)
        {
LABEL_57:
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
          if ((SHIBYTE(v37) & 0x80000000) == 0)
            return;
          goto LABEL_64;
        }
      }
      if (strcmp((const char *)v10 + v26 - 11, ".partitions"))
        goto LABEL_57;
    }
LABEL_63:
    if ((SHIBYTE(v37) & 0x80000000) == 0)
      return;
    goto LABEL_64;
  }
  v27 = *__error();
  v28 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    v29 = (void **)&__dst;
    if (v37 < 0)
      v29 = __dst;
    *(_DWORD *)v38 = 136315138;
    *(_QWORD *)&v38[4] = v29;
    _os_log_impl(&dword_1B8270000, v28, OS_LOG_TYPE_DEFAULT, "remove: %s", v38, 0xCu);
  }
  *__error() = v27;
  memset(&v33, 0, sizeof(v33));
  v30 = HIBYTE(v37);
  if (v37 >= 0)
    v31 = (char *)&__dst;
  else
    v31 = (char *)__dst;
  if (v37 < 0)
    v30 = v36;
  std::string::append[abi:nn180100]<char const*,0>(&v33, v31, &v31[v30]);
  std::__fs::filesystem::operator/[abi:nn180100](&__p, v17, (std::__fs::filesystem::path *)&v33);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v38, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    *(std::string *)v38 = __p;
  IVFVectorIndex_s::unlink(v38);
  if ((v38[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v38);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_62:
      if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_63;
      goto LABEL_68;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_62;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_63;
LABEL_68:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37) < 0)
LABEL_64:
    operator delete(__dst);
}

void __copy_helper_block_8_40c34_ZTSNSt3__14__fs10filesystem4pathE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_8_40c34_ZTSNSt3__14__fs10filesystem4pathE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

int *IVFVectorIndex_s::unlink(char *a1)
{
  uint64_t v2;
  char *v3;
  _BOOL4 v4;
  int v5;
  NSObject *v6;
  _BOOL4 v7;
  char *v8;
  int val;
  std::string *v10;
  int *result;
  std::string v12;
  std::error_code __ec;
  _BYTE v14[28];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&__ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  memset(v14, 0, 24);
  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1;
  else
    v3 = *(char **)a1;
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)a1 + 1);
  std::string::append[abi:nn180100]<char const*,0>((std::string *)v14, v3, &v3[v2]);
  v4 = std::__fs::filesystem::__remove((const std::__fs::filesystem::path *)v14, &__ec);
  if ((v14[23] & 0x80000000) != 0)
    operator delete(*(void **)v14);
  v5 = *__error();
  v6 = _SILogForLogForCategory(16);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v7)
    {
      if (a1[23] >= 0)
        v8 = a1;
      else
        v8 = *(char **)a1;
      *(_DWORD *)v14 = 136315138;
      *(_QWORD *)&v14[4] = v8;
      _os_log_impl(&dword_1B8270000, v6, OS_LOG_TYPE_DEFAULT, "IVFVectorIndex::unlink %s", v14, 0xCu);
    }
  }
  else if (v7)
  {
    if (a1[23] < 0)
      a1 = *(char **)a1;
    val = __ec.__val_;
    std::error_code::message(&v12, &__ec);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v12;
    else
      v10 = (std::string *)v12.__r_.__value_.__r.__words[0];
    *(_DWORD *)v14 = 136315650;
    *(_QWORD *)&v14[4] = a1;
    *(_WORD *)&v14[12] = 1024;
    *(_DWORD *)&v14[14] = val;
    *(_WORD *)&v14[18] = 2080;
    *(_QWORD *)&v14[20] = v10;
    _os_log_impl(&dword_1B8270000, v6, OS_LOG_TYPE_DEFAULT, "IVFVectorIndex::unlink %s failed %d %s", v14, 0x1Cu);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *std::string::substr[abi:nn180100](_QWORD *__dst, _QWORD *__src, size_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = __src;
  v4 = __dst;
  if (*((char *)__src + 23) < 0)
  {
    v3 = (_QWORD *)*__src;
    v5 = __src[1];
  }
  else
  {
    v5 = *((unsigned __int8 *)__src + 23);
  }
  if (v5 >= a3)
    v6 = a3;
  else
    v6 = v5;
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v6 >= 0x17)
  {
    v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v7 = v6 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    v4[1] = v6;
    v4[2] = v8 | 0x8000000000000000;
    *v4 = v9;
    v4 = v9;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v6;
    if (!v6)
      goto LABEL_15;
  }
  __dst = memmove(v4, v3, v6);
LABEL_15:
  *((_BYTE *)v4 + v6) = 0;
  return __dst;
}

void __copy_helper_block_8_32c34_ZTSNSt3__14__fs10filesystem4pathE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 32);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_8_32c34_ZTSNSt3__14__fs10filesystem4pathE(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

uint64_t openVectorIndex(int a1, const char *a2, int a3, uint64_t a4, int a5)
{
  uint64_t v8;
  std::__fs::filesystem::path *v9;
  int v10;
  BOOL v11;
  const char *v12;
  size_t v13;
  size_t v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::ios_base *v33;
  int v34;
  int v35;
  NSObject *v36;
  os_log_type_t v37;
  _QWORD *v38;
  __int128 *v39;
  const char *v40;
  int v41;
  NSObject *v42;
  size_t v43;
  size_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::ios_base *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  std::ios_base *v62;
  _QWORD *v63;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  BOOL v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  char *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  char *v92;
  char *v93;
  const char *v94;
  char *v95;
  char *v96;
  const char *v97;
  uint64_t v98;
  char *v99;
  const char *v100;
  _QWORD *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v108;
  uint64_t v109;
  _QWORD v110[2];
  int *(*v111)(int *, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int);
  void *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  char v120;
  _QWORD v121[7];
  char v122;
  uint64_t v123;
  _BYTE v124[38];
  __int16 v125;
  _QWORD v126[12];
  uint64_t v127;
  uint64_t v128;
  _QWORD v129[75];
  uint8_t buf[32];
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  __int128 __dst;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  unint64_t v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_DWORD *)v8 = a1;
  v9 = (std::__fs::filesystem::path *)(v8 + 16);
  *(_DWORD *)(v8 + 8) = a1;
  v108 = v8 + 8;
  bzero(v124, 0x400uLL);
  v10 = fcntl(a1, 50, v124);
  if (v124[0])
    v11 = v10 < 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = v124;
  v13 = strlen(v12);
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_152;
  v14 = v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    p_dst = (__int128 *)operator new(v16 + 1);
    *((_QWORD *)&__dst + 1) = v14;
    *(_QWORD *)&v139 = v17 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_14;
  }
  BYTE7(v139) = v13;
  p_dst = &__dst;
  if (v13)
LABEL_14:
    memcpy(p_dst, v12, v14);
  *((_BYTE *)p_dst + v14) = 0;
  *(_OWORD *)&v9->__pn_.__r_.__value_.__l.__data_ = __dst;
  *(_QWORD *)(v8 + 32) = v139;
  v18 = strlen(a2);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_152;
  v19 = v18;
  v20 = (void *)(v8 + 40);
  v102 = (uint64_t *)(v8 + 40);
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    *(_QWORD *)(v8 + 48) = v19;
    *(_QWORD *)(v8 + 56) = v22 | 0x8000000000000000;
    *(_QWORD *)(v8 + 40) = v20;
    goto LABEL_22;
  }
  *(_BYTE *)(v8 + 63) = v18;
  if (v18)
LABEL_22:
    memcpy(v20, a2, v19);
  *((_BYTE *)v20 + v19) = 0;
  if (*(char *)(v8 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v124, *(const std::string::value_type **)(v8 + 16), *(_QWORD *)(v8 + 24));
  }
  else
  {
    *(_OWORD *)v124 = *(_OWORD *)&v9->__pn_.__r_.__value_.__l.__data_;
    *(_QWORD *)&v124[16] = *(_QWORD *)(v8 + 32);
  }
  IVFVectorIndex_s::protectionClassForParentPath((char *)(v8 + 64), (uint64_t)v124);
  if ((v124[23] & 0x80000000) != 0)
    operator delete(*(void **)v124);
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  v23 = (_QWORD *)(v8 + 96);
  *(_QWORD *)(v8 + 88) = v8 + 96;
  *(_DWORD *)(v8 + 116) = a5;
  *(_WORD *)(v8 + 120) = a5;
  *(_OWORD *)(v8 + 124) = xmmword_1B8631CE0;
  *(_QWORD *)(v8 + 144) = a4;
  v24 = *__error();
  v25 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    v26 = v8 + 64;
    if (*(char *)(v8 + 87) < 0)
      v26 = *(_QWORD *)(v8 + 64);
    v27 = v8 + 40;
    if (*(char *)(v8 + 63) < 0)
      v27 = *v102;
    *(_DWORD *)v124 = 136316162;
    *(_QWORD *)&v124[4] = v26;
    *(_WORD *)&v124[12] = 2048;
    if (a3)
      v28 = "readOnly";
    else
      v28 = "";
    *(_QWORD *)&v124[14] = v8 + 8;
    *(_WORD *)&v124[22] = 2080;
    *(_QWORD *)&v124[24] = v27;
    *(_WORD *)&v124[32] = 1024;
    *(_DWORD *)&v124[34] = a5;
    v125 = 2080;
    v126[0] = v28;
    _os_log_impl(&dword_1B8270000, v25, OS_LOG_TYPE_DEFAULT, "[%s] open %p with prefix %s indexId: %u %s", v124, 0x30u);
  }
  v101 = (_QWORD *)(v8 + 64);
  v109 = v8;
  *__error() = v24;
  __dst = 0uLL;
  *(_QWORD *)&v139 = 0;
  IVFVectorIndex_s::metaFilename((std::string *)&__dst, v108);
  bzero(&v124[16], 0x230uLL);
  v29 = MEMORY[0x1E0DE4FA8];
  v30 = MEMORY[0x1E0DE4FA8] + 64;
  v32 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v31 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  v129[0] = MEMORY[0x1E0DE4FA8] + 64;
  *(_QWORD *)v124 = v32;
  v105 = v31;
  *(_QWORD *)&v124[*(_QWORD *)(v32 - 24)] = v31;
  *(_QWORD *)&v124[8] = 0;
  v33 = (std::ios_base *)&v124[*(_QWORD *)(*(_QWORD *)v124 - 24)];
  std::ios_base::init(v33, &v124[16]);
  v33[1].__vftable = 0;
  v33[1].__fmtflags_ = -1;
  *(_QWORD *)v124 = v29 + 24;
  v129[0] = v30;
  MEMORY[0x1BCCB0428](&v124[16]);
  std::ifstream::open();
  if (!v127
    || (*(_QWORD *)buf = -1,
        std::istream::read(),
        v34 = *(_DWORD *)buf,
        (*(_QWORD *)buf & 0xFFFFFFFF00000000) != 0x15F1DA600000000))
  {
    v35 = *__error();
    v36 = _SILogForLogForCategory(16);
    v37 = dword_1EF19FCCC < 3;
    if (os_log_type_enabled(v36, (os_log_type_t)(dword_1EF19FCCC < 3)))
    {
      v38 = (_QWORD *)(v8 + 64);
      if (*(char *)(v8 + 87) < 0)
        v38 = (_QWORD *)*v101;
      v39 = &__dst;
      if (SBYTE7(v139) < 0)
        v39 = (__int128 *)__dst;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v38;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v39;
      _os_log_impl(&dword_1B8270000, v36, v37, "*warn* [%s] metaFile %s not valid", buf, 0x16u);
    }
    *__error() = v35;
    v34 = -1;
  }
  *(_QWORD *)v124 = *MEMORY[0x1E0DE4F40];
  v103 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  v104 = *(_QWORD *)v124;
  *(_QWORD *)&v124[*(_QWORD *)(*(_QWORD *)v124 - 24)] = v103;
  MEMORY[0x1BCCB0434](&v124[16]);
  std::istream::~istream();
  MEMORY[0x1BCCB0650](v129);
  if (SBYTE7(v139) < 0)
    operator delete((void *)__dst);
  v40 = a2;
  if (v34 != -1)
  {
    *(_DWORD *)(v8 + 116) = v34;
    if (a5 != -1 && v34 != a5)
    {
      v41 = *__error();
      v42 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_FAULT))
      {
        if (*(char *)(v8 + 87) < 0)
          v101 = (_QWORD *)*v101;
        v91 = v8 + 40;
        if (*(char *)(v8 + 63) < 0)
          v91 = *v102;
        *(_DWORD *)v124 = 136316418;
        *(_QWORD *)&v124[4] = "IVFVectorIndex_s";
        *(_WORD *)&v124[12] = 1024;
        *(_DWORD *)&v124[14] = 4064;
        *(_WORD *)&v124[18] = 2080;
        *(_QWORD *)&v124[20] = v101;
        *(_WORD *)&v124[28] = 2080;
        *(_QWORD *)&v124[30] = v91;
        v125 = 1024;
        LODWORD(v126[0]) = a5;
        WORD2(v126[0]) = 1024;
        *(_DWORD *)((char *)v126 + 6) = v34;
        _os_log_fault_impl(&dword_1B8270000, v42, OS_LOG_TYPE_FAULT, "%s:%d: [%s] open %s indexId: %u doesn't match previous assigned %u", v124, 0x32u);
      }
      *__error() = v41;
      v40 = a2;
    }
  }
  v43 = strlen(v40);
  if (v43 > 0x7FFFFFFFFFFFFFF7)
LABEL_152:
    abort();
  v44 = v43;
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v45 = operator new(v46 + 1);
    *(_QWORD *)&v124[8] = v44;
    *(_QWORD *)&v124[16] = v47 | 0x8000000000000000;
    *(_QWORD *)v124 = v45;
    goto LABEL_60;
  }
  v124[23] = v43;
  v45 = v124;
  if (v43)
LABEL_60:
    memcpy(v45, v40, v44);
  v45[v44] = 0;
  v48 = MEMORY[0x1E0C809B0];
  v121[0] = MEMORY[0x1E0C809B0];
  v121[1] = 0x40000000;
  v121[2] = ___ZN16IVFVectorIndex_sC2EiPKcbbPViP10data_map_sjU13block_pointerFvS1_jt14vec_dimensions15vec_data_formatb20VectorIndexOpenErrorE_block_invoke;
  v121[3] = &unk_1E6E30A08;
  v122 = a3;
  v121[5] = v108;
  v121[6] = v40;
  v121[4] = 0;
  IVFVectorIndex_s::enumerateIndexes(v9, (const void **)v124, 0, 1, (uint64_t)v121);
  if ((v124[23] & 0x80000000) != 0)
    operator delete(*(void **)v124);
  v117 = 0;
  v118 = &v117;
  v119 = 0x2000000000;
  v120 = 0;
  v49 = v109;
  if (v34 != -1)
  {
    v110[0] = v48;
    v110[1] = 0x40000000;
    v111 = ___ZN16IVFVectorIndex_sC2EiPKcbbPViP10data_map_sjU13block_pointerFvS1_jt14vec_dimensions15vec_data_formatb20VectorIndexOpenErrorE_block_invoke_93;
    v112 = &unk_1E6E30A30;
    v115 = v108;
    v116 = v40;
    v113 = 0;
    v114 = &v117;
    bzero(&v124[16], 0x230uLL);
    v50 = MEMORY[0x1E0DE4FA8];
    v51 = MEMORY[0x1E0DE4FA8] + 64;
    v129[0] = MEMORY[0x1E0DE4FA8] + 64;
    *(_QWORD *)v124 = v32;
    *(_QWORD *)&v124[*(_QWORD *)(v32 - 24)] = v105;
    *(_QWORD *)&v124[8] = 0;
    v52 = (std::ios_base *)&v124[*(_QWORD *)(*(_QWORD *)v124 - 24)];
    std::ios_base::init(v52, &v124[16]);
    v52[1].__vftable = 0;
    v52[1].__fmtflags_ = -1;
    *(_QWORD *)v124 = v50 + 24;
    v129[0] = v51;
    MEMORY[0x1BCCB0428](&v124[16]);
    IVFVectorIndex_s::metaFilename((std::string *)&__dst, v108);
    std::ifstream::open();
    if (SBYTE7(v139) < 0)
      operator delete((void *)__dst);
    if (!v127)
    {
      v54 = 0;
      v55 = 0;
LABEL_71:
      *(_QWORD *)v124 = v104;
      *(_QWORD *)&v124[*(_QWORD *)(v104 - 24)] = v103;
      MEMORY[0x1BCCB0434](&v124[16]);
      std::istream::~istream();
      MEMORY[0x1BCCB0650](v129);
      if (v54 != v55)
      {
        v56 = v54;
        do
        {
          if (*(_QWORD *)v56 >> 53)
          {
            v92 = __si_assert_copy_extra_268();
            v93 = v92;
            v94 = "";
            if (v92)
              v94 = v92;
            __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3601, "key == 0", v94);
            free(v93);
            if (__valid_fs(-1))
            {
              MEMORY[0xBAD] = -559038737;
              abort();
            }
            MEMORY[0xC00] = -559038737;
            abort();
          }
          v111((int *)v110, *(_QWORD *)v56 >> 1, (unsigned __int16)(*(_QWORD *)v56 >> 33), *(_QWORD *)v56 >> 51, (*(_QWORD *)v56 >> 49) & 3, *(_QWORD *)v56 & 1);
          v56 += 8;
        }
        while (v56 != v55);
      }
      if (v54)
        operator delete(v54);
      if (!*((_BYTE *)v118 + 24))
        goto LABEL_83;
      goto LABEL_78;
    }
    v146 = 0;
    v144 = 0u;
    v145 = 0u;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    __dst = 0u;
    v139 = 0u;
    std::istream::tellg();
    v53 = v146;
    if ((v146 & 7) != 0)
    {
      v99 = __si_assert_copy_extra_268();
      v96 = v99;
      v100 = "";
      if (v99)
        v100 = v99;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3910, "pos % sizeof(uint64_t) == 0", v100);
LABEL_145:
      free(v96);
      if (__valid_fs(-1))
        v98 = 2989;
      else
        v98 = 3072;
      *(_DWORD *)v98 = -559038737;
      abort();
    }
    v137 = 0;
    v135 = 0u;
    v136 = 0u;
    v133 = 0u;
    v134 = 0u;
    v131 = 0u;
    v132 = 0u;
    memset(buf, 0, sizeof(buf));
    std::istream::seekg();
    v54 = 0;
    v55 = 0;
    if (v53 < 8)
    {
LABEL_69:
      v49 = v109;
      goto LABEL_71;
    }
    v54 = 0;
    v55 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    while (1)
    {
      v123 = 0;
      std::istream::read();
      if (v77)
      {
        if (v76 >= v75)
        {
          v79 = (v76 - v78) >> 3;
          v80 = v79 + 1;
          if ((unint64_t)(v79 + 1) >> 61)
            goto LABEL_152;
          if ((v75 - v78) >> 2 > v80)
            v80 = (v75 - v78) >> 2;
          if ((unint64_t)(v75 - v78) >= 0x7FFFFFFFFFFFFFF8)
            v81 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v81 = v80;
          if (v81)
          {
            if (v81 >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v82 = operator new(8 * v81);
          }
          else
          {
            v82 = 0;
          }
          v54 = &v82[8 * v79];
          *(_QWORD *)v54 = v123;
          v55 = v54 + 8;
          if (v76 != v78)
          {
            v83 = v76 - 8 - v78;
            if (v83 < 0x168)
            {
              v84 = v76;
              goto LABEL_118;
            }
            if (&v82[v76 - v78 - 8 - (v83 & 0xFFFFFFFFFFFFFFF8)] > &v82[v76 - v78 - 8])
            {
              v84 = v76;
              goto LABEL_118;
            }
            if (&v76[-(v83 & 0xFFFFFFFFFFFFFFF8) - 8] > v76 - 8)
            {
              v84 = v76;
              goto LABEL_118;
            }
            if ((unint64_t)(v78 - v82) < 0x20)
            {
              v84 = v76;
              goto LABEL_118;
            }
            v86 = (v83 >> 3) + 1;
            v84 = &v76[-8 * (v86 & 0x3FFFFFFFFFFFFFFCLL)];
            v87 = &v82[8 * v79 - 16];
            v88 = v76 - 16;
            v89 = v86 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v90 = *(_OWORD *)v88;
              *(v87 - 1) = *((_OWORD *)v88 - 1);
              *v87 = v90;
              v87 -= 2;
              v88 -= 32;
              v89 -= 4;
            }
            while (v89);
            v54 -= 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
            if (v86 != (v86 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_118:
                v85 = *((_QWORD *)v84 - 1);
                v84 -= 8;
                *((_QWORD *)v54 - 1) = v85;
                v54 -= 8;
              }
              while (v84 != v78);
            }
          }
          v75 = &v82[8 * v81];
          if (v78)
            operator delete(v78);
          v76 = v55;
          v78 = v54;
          goto LABEL_101;
        }
        *(_QWORD *)v76 = v123;
        v76 += 8;
        v55 = v76;
      }
      else if (v123 != (*(unsigned int *)(v109 + 116) | 0x15F1DA600000000))
      {
        v95 = __si_assert_copy_extra_268();
        v96 = v95;
        v97 = "";
        if (v95)
          v97 = v95;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3917, "metaKey == (((uint64_t)(0x015F1DA6) << 32) | (uint64_t)index_id)", v97);
        goto LABEL_145;
      }
LABEL_101:
      if (++v77 == v53 >> 3)
        goto LABEL_69;
    }
  }
LABEL_78:
  if (*(_DWORD *)(v49 + 116) != -1)
  {
    bzero(&v124[8], 0x230uLL);
    v57 = MEMORY[0x1E0DE4FB0];
    v58 = MEMORY[0x1E0DE4FB0] + 64;
    v59 = (_QWORD *)MEMORY[0x1E0DE4F48];
    v60 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
    v61 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
    v128 = MEMORY[0x1E0DE4FB0] + 64;
    *(_QWORD *)v124 = v60;
    *(_QWORD *)&v124[*(_QWORD *)(v60 - 24)] = v61;
    v62 = (std::ios_base *)&v124[*(_QWORD *)(*(_QWORD *)v124 - 24)];
    std::ios_base::init(v62, &v124[8]);
    v62[1].__vftable = 0;
    v62[1].__fmtflags_ = -1;
    *(_QWORD *)v124 = v57 + 24;
    v128 = v58;
    MEMORY[0x1BCCB0428](&v124[8]);
    IVFVectorIndex_s::metaFilename((std::string *)&__dst, v108);
    std::ofstream::open();
    if (SBYTE7(v139) < 0)
      operator delete((void *)__dst);
    *(_QWORD *)buf = *(unsigned int *)(v49 + 116) | 0x15F1DA600000000;
    std::ostream::write();
    v63 = *(_QWORD **)(v49 + 88);
    if (v63 == v23)
    {
LABEL_82:
      *(_QWORD *)v124 = *v59;
      *(_QWORD *)&v124[*(_QWORD *)(*(_QWORD *)v124 - 24)] = v59[3];
      MEMORY[0x1BCCB0434](&v124[8]);
      std::ostream::~ostream();
      MEMORY[0x1BCCB0650](&v128);
      goto LABEL_83;
    }
    while (1)
    {
      v65 = v63[5];
      *(_QWORD *)&__dst = v63[4];
      *((_QWORD *)&__dst + 1) = v65;
      v66 = v63[6];
      *(_QWORD *)&v139 = v66;
      if (v66)
      {
        v67 = (unint64_t *)(v66 + 8);
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      std::ostream::write();
      v69 = (std::__shared_weak_count *)v139;
      if (!(_QWORD)v139)
        goto LABEL_92;
      v70 = (unint64_t *)(v139 + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        v72 = (_QWORD *)v63[1];
        if (!v72)
        {
          do
          {
LABEL_96:
            v73 = (_QWORD *)v63[2];
            v74 = *v73 == (_QWORD)v63;
            v63 = v73;
          }
          while (!v74);
          goto LABEL_84;
        }
      }
      else
      {
LABEL_92:
        v72 = (_QWORD *)v63[1];
        if (!v72)
          goto LABEL_96;
      }
      do
      {
        v73 = v72;
        v72 = (_QWORD *)*v72;
      }
      while (v72);
LABEL_84:
      v63 = v73;
      if (v73 == v23)
        goto LABEL_82;
    }
  }
LABEL_83:
  _Block_object_dispose(&v117, 8);
  return v49;
}

void ___ZN16IVFVectorIndex_sC2EiPKcbbPViP10data_map_sjU13block_pointerFvS1_jt14vec_dimensions15vec_data_formatb20VectorIndexOpenErrorE_block_invoke(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, char *a7, char a8)
{
  unsigned int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void (*v21)(_QWORD);
  _DWORD *v22;
  int v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  pthread_key_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _DWORD *v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  NSObject *v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  unsigned __int8 v42;
  uint64_t IVFDiskOne;
  uint64_t v44;
  unsigned int data;
  uint64_t v46;
  void (*v47)(_QWORD);
  int v48;
  NSObject *v49;
  std::string::size_type v50;
  int v51;
  size_t v52;
  unint64_t v53;
  std::string *p_dst;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::string *v58;
  _BYTE *v59;
  int v60;
  size_t v61;
  unint64_t v62;
  std::string *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::string *v67;
  _BYTE *v68;
  int v69;
  size_t v70;
  unint64_t v71;
  std::string *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::string *v76;
  _BYTE *v77;
  uint64_t v78;
  _QWORD *v79;
  char *v80;
  const char *v81;
  std::string::size_type v82;
  size_t v83;
  std::string *v84;
  uint64_t v85;
  _BYTE *v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t **v90;
  uint64_t *v91;
  uint64_t **v92;
  unint64_t v93;
  uint64_t **v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  unint64_t *p_shared_owners;
  unint64_t v102;
  uint64_t v105;
  std::string __dst;
  _OWORD v113[2];
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  std::string __p;
  _BYTE v118[28];
  __int16 v119;
  char *v120;
  __int16 v121;
  unsigned int v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v105 = *(_QWORD *)(a1 + 40);
  v116 = 4;
  do
  {
    v10 = __ldxr(exceptionSequenceNum);
    v11 = v10 + 1;
  }
  while (__stxr(v10 + 1, exceptionSequenceNum));
  v12 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v11);
  v14 = v13;
  v15 = v12;
  v17 = v16;
  v18 = *(_QWORD *)&threadData[18 * v12 + 2];
  v19 = v18 + 320 * HIDWORD(v12);
  v20 = *(_DWORD *)(v19 + 312);
  v21 = *(void (**)(_QWORD))(v19 + 224);
  if (v21)
    v21(*(_QWORD *)(v18 + 320 * HIDWORD(v12) + 288));
  LODWORD(__p.__r_.__value_.__l.__data_) = HIDWORD(v15);
  LODWORD(__dst.__r_.__value_.__l.__data_) = v15;
  v114 = v14;
  v115 = v17;
  if (_setjmp((int *)v19))
  {
    v22 = (_DWORD *)(v19 + 312);
    v23 = *__error();
    v24 = _SILogForLogForCategory(0);
    v25 = a2;
    v26 = v105;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v118 = 136315394;
      *(_QWORD *)&v118[4] = "IVFVectorIndex_s_block_invoke";
      *(_WORD *)&v118[12] = 1024;
      *(_DWORD *)&v118[14] = 4075;
      _os_log_error_impl(&dword_1B8270000, v24, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", v118, 0x12u);
    }
    *__error() = v23;
    *v22 = v20;
    v27 = __THREAD_SLOT_KEY;
    if (!__THREAD_SLOT_KEY)
    {
      makeThreadId();
      v27 = __THREAD_SLOT_KEY;
    }
    v28 = pthread_getspecific(v27);
    v29 = a5;
    if (!v28 || (v30 = v28, (unint64_t)v28 >= 0x801))
    {
      makeThreadId();
      v30 = pthread_getspecific(__THREAD_SLOT_KEY);
    }
    v31 = (uint64_t)v30 - 1;
    v32 = &threadData[18 * ((uint64_t)v30 - 1)];
    v34 = v32[14];
    v33 = v32 + 14;
    if (v34 > v114)
    {
      do
        CIOnThreadCleanUpPop(v31);
      while (*v33 > v114);
    }
    dropThreadId(LODWORD(__dst.__r_.__value_.__l.__data_), 1, v11);
    CICleanUpReset(LODWORD(__dst.__r_.__value_.__l.__data_), v115);
    v35 = v105;
    goto LABEL_15;
  }
  v26 = v105;
  v40 = *(_OWORD *)(v105 + 128);
  v113[0] = *(_OWORD *)(v105 + 112);
  v113[1] = v40;
  v35 = v105;
  v42 = (a8 & 0x80) == 0 || *(_BYTE *)(a1 + 56) != 0;
  v25 = a2;
  v29 = a5;
  IVFDiskOne = makeIVFDiskOne(v113, *(_DWORD *)v105, v105 + 32, a2, a3, a4, a5, a6, 0, v42, (int *)&v116);
  v44 = *(_QWORD *)&threadData[18 * LODWORD(__dst.__r_.__value_.__l.__data_) + 2];
  data = __p.__r_.__value_.__l.__data_;
  v46 = v44 + 320 * LODWORD(__p.__r_.__value_.__l.__data_);
  *(_DWORD *)(v46 + 312) = v20;
  v47 = *(void (**)(_QWORD))(v46 + 232);
  if (v47)
    v47(*(_QWORD *)(v44 + 320 * data + 288));
  dropThreadId(LODWORD(__dst.__r_.__value_.__l.__data_), 0, v11);
  if (!IVFDiskOne)
  {
LABEL_15:
    v36 = *__error();
    v37 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      v79 = (_QWORD *)(v35 + 56);
      if (*(char *)(v26 + 79) < 0)
        v79 = (_QWORD *)*v79;
      if (a7[23] >= 0)
        v80 = a7;
      else
        v80 = *(char **)a7;
      *(_DWORD *)v118 = 136316162;
      *(_QWORD *)&v118[4] = "IVFVectorIndex_s_block_invoke";
      *(_WORD *)&v118[12] = 1024;
      *(_DWORD *)&v118[14] = 4080;
      *(_WORD *)&v118[18] = 2080;
      *(_QWORD *)&v118[20] = v79;
      v119 = 2080;
      v120 = v80;
      v121 = 1024;
      v122 = v116;
      _os_log_error_impl(&dword_1B8270000, v37, OS_LOG_TYPE_ERROR, "%s:%d: [%s] %s reset for error %d", v118, 0x2Cu);
    }
    *__error() = v36;
    memset(v118, 0, 24);
    memset(&__p, 0, sizeof(__p));
    v38 = a7[23];
    if ((v38 & 0x80u) == 0)
      v39 = a7;
    else
      v39 = *(char **)a7;
    if ((v38 & 0x80u) != 0)
      v38 = *((_QWORD *)a7 + 1);
    std::string::append[abi:nn180100]<char const*,0>(&__p, v39, &v39[v38]);
    std::__fs::filesystem::operator/[abi:nn180100](&__dst, v35 + 8, (std::__fs::filesystem::path *)&__p);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v118, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_39:
          IVFVectorIndex_s::unlink(v118);
          v51 = v118[23];
          if (v118[23] >= 0)
            v52 = v118[23];
          else
            v52 = *(_QWORD *)&v118[8];
          v53 = v52 + 7;
          if (v52 + 7 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_133;
          if (v53 >= 0x17)
          {
            v55 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
            v56 = v53 | 7;
            if (v56 == 23)
              v56 = v55;
            v57 = v56 + 1;
            v58 = (std::string *)operator new(v56 + 1);
            __dst.__r_.__value_.__l.__size_ = v52 + 7;
            __dst.__r_.__value_.__r.__words[2] = v57 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
            p_dst = v58;
          }
          else
          {
            memset(&__dst, 0, sizeof(__dst));
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v52 + 7;
            p_dst = &__dst;
            if (!v52)
            {
              p_dst = &__dst;
              goto LABEL_53;
            }
          }
          if (v51 >= 0)
            v59 = v118;
          else
            v59 = *(_BYTE **)v118;
          memmove(p_dst, v59, v52);
LABEL_53:
          strcpy((char *)p_dst + v52, ".shadow");
          IVFVectorIndex_s::unlink((char *)&__dst);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          v60 = v118[23];
          if (v118[23] >= 0)
            v61 = v118[23];
          else
            v61 = *(_QWORD *)&v118[8];
          v62 = v61 + 11;
          if (v61 + 11 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_133;
          if (v62 >= 0x17)
          {
            v64 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
            v65 = v62 | 7;
            if (v65 == 23)
              v65 = v64;
            v66 = v65 + 1;
            v67 = (std::string *)operator new(v65 + 1);
            __dst.__r_.__value_.__l.__size_ = v61 + 11;
            __dst.__r_.__value_.__r.__words[2] = v66 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
            v63 = v67;
          }
          else
          {
            memset(&__dst, 0, sizeof(__dst));
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v61 + 11;
            v63 = &__dst;
            if (!v61)
            {
              v63 = &__dst;
              goto LABEL_69;
            }
          }
          if (v60 >= 0)
            v68 = v118;
          else
            v68 = *(_BYTE **)v118;
          memmove(v63, v68, v61);
LABEL_69:
          strcpy((char *)v63 + v61, ".partitions");
          IVFVectorIndex_s::unlink((char *)&__dst);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          v69 = v118[23];
          if (v118[23] >= 0)
            v70 = v118[23];
          else
            v70 = *(_QWORD *)&v118[8];
          v71 = v70 + 18;
          if (v70 + 18 <= 0x7FFFFFFFFFFFFFF7)
          {
            if (v71 >= 0x17)
            {
              v73 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
              v74 = v71 | 7;
              if (v74 == 23)
                v74 = v73;
              v75 = v74 + 1;
              v76 = (std::string *)operator new(v74 + 1);
              __dst.__r_.__value_.__l.__size_ = v70 + 18;
              __dst.__r_.__value_.__r.__words[2] = v75 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
              v72 = v76;
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v70 + 18;
              v72 = &__dst;
              if (!v70)
              {
                v72 = &__dst;
LABEL_85:
                strcpy((char *)v72 + v70, ".partitions.shadow");
                IVFVectorIndex_s::unlink((char *)&__dst);
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__dst.__r_.__value_.__l.__data_);
                v78 = *(_QWORD *)(a1 + 32);
                if (v78)
                  (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(v78 + 16))(v78, *(_QWORD *)(a1 + 48), v25, a3, a4, v29, a6, v116);
                if ((v118[23] & 0x80000000) != 0)
                  operator delete(*(void **)v118);
                return;
              }
            }
            if (v69 >= 0)
              v77 = v118;
            else
              v77 = *(_BYTE **)v118;
            memmove(v72, v77, v70);
            goto LABEL_85;
          }
LABEL_133:
          abort();
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_39;
      }
    }
    else
    {
      *(std::string *)v118 = __dst;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_39;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_39;
  }
  v48 = *__error();
  v49 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(v105 + 79) < 0)
      v50 = *(_QWORD *)(v105 + 56);
    else
      v50 = v105 + 56;
    v81 = *(const char **)(a1 + 48);
    v82 = strlen(v81);
    if (v82 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_133;
    v83 = v82;
    if (v82 >= 0x17)
    {
      v85 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v82 | 7) != 0x17)
        v85 = v82 | 7;
      __dst.__r_.__value_.__l.__size_ = v82;
      __dst.__r_.__value_.__r.__words[2] = (v85 + 1) | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v85 + 1);
      v84 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v82;
      v84 = &__dst;
      if (!v82)
      {
        v84 = &__dst;
LABEL_108:
        v84->__r_.__value_.__s.__data_[v83] = 0;
        (*(void (**)(_BYTE *__return_ptr, uint64_t, std::string *))(*(_QWORD *)IVFDiskOne + 312))(v118, IVFDiskOne, &__dst);
        if (v118[23] >= 0)
          v86 = v118;
        else
          v86 = *(_BYTE **)v118;
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v50;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v86;
        _os_log_impl(&dword_1B8270000, v49, OS_LOG_TYPE_DEFAULT, "[%s] %s opened", (uint8_t *)&__p, 0x16u);
        if ((v118[23] & 0x80000000) != 0)
          operator delete(*(void **)v118);
        v26 = v105;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_115;
      }
    }
    memmove(v84, v81, v83);
    goto LABEL_108;
  }
LABEL_115:
  *__error() = v48;
  v87 = (_QWORD *)operator new();
  *v87 = &off_1E6E30970;
  v87[1] = 0;
  v87[2] = 0;
  v87[3] = IVFDiskOne;
  v88 = v87;
  v89 = a6 | (2
            * (((unint64_t)(a4 & 3) << 50) | ((unint64_t)(a5 & 3) << 48) | ((unint64_t)a3 << 32) | v25));
  v90 = (uint64_t **)(v26 + 88);
  v91 = *(uint64_t **)(v26 + 88);
  if (v91)
  {
    while (1)
    {
      while (1)
      {
        v90 = (uint64_t **)v91;
        v93 = v91[4];
        if (v89 >= v93)
          break;
        v91 = *v90;
        v92 = v90;
        if (!*v90)
          goto LABEL_122;
      }
      if (v93 >= v89)
        break;
      v91 = v90[1];
      if (!v91)
      {
        v92 = v90 + 1;
        goto LABEL_122;
      }
    }
    v96 = (uint64_t *)v90;
  }
  else
  {
    v92 = (uint64_t **)(v26 + 88);
LABEL_122:
    v94 = v90;
    v95 = (uint64_t *)operator new(0x38uLL);
    v95[5] = 0;
    v95[6] = 0;
    v95[4] = a6 | (2
                 * (((unint64_t)(a4 & 3) << 50) | ((unint64_t)(a5 & 3) << 48) | ((unint64_t)a3 << 32) | v25));
    *v95 = 0;
    v95[1] = 0;
    v95[2] = (uint64_t)v94;
    *v92 = v95;
    v96 = v95;
    v97 = **(_QWORD **)(v26 + 80);
    v98 = v95;
    if (v97)
    {
      *(_QWORD *)(v26 + 80) = v97;
      v98 = *v92;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v26 + 88), v98);
    ++*(_QWORD *)(v26 + 96);
  }
  v99 = (std::__shared_weak_count *)v96[6];
  v96[5] = IVFDiskOne;
  v96[6] = (uint64_t)v88;
  if (v99)
  {
    v100 = v99;
    p_shared_owners = (unint64_t *)&v99->__shared_owners_;
    do
      v102 = __ldaxr(p_shared_owners);
    while (__stlxr(v102 - 1, p_shared_owners));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
}

_QWORD *IVFVectorIndex_s::flush(_QWORD *this, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  _QWORD *v11;
  void **v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  void *__p[2];
  char v17;
  uint8_t buf[4];
  _QWORD *v19;
  __int16 v20;
  void **v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)this[10];
  v3 = this + 11;
  if (v2 != this + 11)
  {
    v5 = (uint64_t)this;
    v6 = this + 7;
    v7 = this + 4;
    do
    {
      v8 = v2[5];
      v9 = *__error();
      v10 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = v6;
        if (*(char *)(v5 + 79) < 0)
          v11 = (_QWORD *)*v6;
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v8 + 312))(__p, v8, v7);
        v12 = __p;
        if (v17 < 0)
          v12 = (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        v19 = v11;
        v20 = 2080;
        v21 = v12;
        _os_log_impl(&dword_1B8270000, v10, OS_LOG_TYPE_DEFAULT, "[%s] flush %s", buf, 0x16u);
        if (v17 < 0)
          operator delete(__p[0]);
      }
      *__error() = v9;
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 136))(v8, a2);
      v13 = (_QWORD *)v2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v2[2];
          v15 = *v14 == (_QWORD)v2;
          v2 = v14;
        }
        while (!v15);
      }
      v2 = v14;
    }
    while (v14 != v3);
  }
  return this;
}

uint64_t shadowVectorIndex(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  void **v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD **)(result + 88);
  v4 = (_QWORD *)(result + 96);
  if (v3 != (_QWORD *)(result + 96))
  {
    v7 = result;
    v8 = (_QWORD *)(result + 64);
    v17 = result + 40;
    do
    {
      v9 = v3[5];
      v10 = *__error();
      v11 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = v8;
        if (*(char *)(v7 + 87) < 0)
          v12 = (_QWORD *)*v8;
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v9 + 312))(__p, v9, v17);
        v13 = __p;
        if (v19 < 0)
          v13 = (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        v21 = v12;
        v22 = 2080;
        v23 = v13;
        _os_log_impl(&dword_1B8270000, v11, OS_LOG_TYPE_DEFAULT, "[%s] shadow %s", buf, 0x16u);
        if (v19 < 0)
          operator delete(__p[0]);
      }
      *__error() = v10;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(v9, a2, a3);
      v14 = (_QWORD *)v3[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v3[2];
          v16 = *v15 == (_QWORD)v3;
          v3 = v15;
        }
        while (!v16);
      }
      v3 = v15;
    }
    while (v15 != v4);
  }
  return result;
}

void compactVectorIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, _DWORD *a6)
{
  NSObject *v10;
  os_signpost_id_t v11;
  NSObject *v12;
  NSObject *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  BOOL v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  int v34;
  NSObject *v35;
  _DWORD *v36;
  _QWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  void **v40;
  void **v41;
  _DWORD *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  BOOL v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  NSObject *v50;
  NSObject *v51;
  char *v52;
  char *v53;
  const char *v54;
  os_signpost_id_t spid;
  unint64_t v56;
  uint64_t v58;
  uint64_t v59;
  __int128 v61;
  __int128 v62;
  _OWORD v63[2];
  void *v64[2];
  char v65;
  void *v66[2];
  char v67;
  uint8_t buf[4];
  uint64_t v69;
  __int16 v70;
  void **v71;
  __int16 v72;
  void **v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v10 = _SILogForLogForCategory(0);
  v11 = os_signpost_id_make_with_pointer(v10, 0);
  v12 = _SILogForLogForCategory(0);
  spid = v11;
  v56 = v11 - 1;
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v13 = v12;
    if (os_signpost_enabled(v12))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1B8270000, v13, OS_SIGNPOST_INTERVAL_BEGIN, v11, "compactVectorIndex", "Start", buf, 2u);
    }
  }
  v61 = *a5;
  v62 = a5[1];
  IVFVectorIndex_s::startMerge((IVFVectorIndex_s *)(a1 + 8));
  v14 = *(_QWORD **)(a1 + 88);
  v15 = (_QWORD *)(a1 + 96);
  if (v14 != (_QWORD *)(a1 + 96))
  {
    v16 = (_QWORD *)(a2 + 96);
    v58 = a4;
    v59 = a3;
    do
    {
      v17 = v14[5];
      v18 = *(_DWORD *)(v17 + 12);
      v19 = *(_DWORD *)(v17 + 16);
      v20 = 1;
      if (v18 != 512)
        v20 = 3;
      if (v18 == 768)
        v20 = 2;
      if (v18 == 256)
        v21 = 0;
      else
        v21 = v20;
      if (v19 == 2)
        v22 = 1;
      else
        v22 = 3;
      if (v19 == 4)
        v22 = 0;
      v23 = (_QWORD *)*v16;
      if (!*v16)
        goto LABEL_30;
      v24 = *(unsigned int *)(v17 + 8);
      v25 = *(unsigned __int16 *)(v17 + 20);
      v26 = *(unsigned __int8 *)(v17 + 22);
      v27 = v26 | (2 * ((v21 << 50) | (v22 << 48) | (v25 << 32) | v24));
      v28 = v16;
      do
      {
        v29 = v23[4];
        v30 = v29 >= v27;
        if (v29 >= v27)
          v31 = v23;
        else
          v31 = v23 + 1;
        if (v30)
          v28 = v23;
        v23 = (_QWORD *)*v31;
      }
      while (*v31);
      if (v28 != v16 && v27 >= v28[4])
      {
        v32 = v28[5];
        if (*(_DWORD *)(v32 + 8) != (_DWORD)v24
          || *(unsigned __int16 *)(v32 + 20) != (_DWORD)v25
          || (v19 != 2 ? (v47 = v19 == 4) : (v47 = 1),
              !v47
           || *(_DWORD *)(v32 + 12) != vector_dimension_vec_sizes_10743[v21]
           || vector_size_elem_sizes_10742[v22] != *(_DWORD *)(v32 + 16)
           || *(unsigned __int8 *)(v32 + 22) != (_DWORD)v26))
        {
          v52 = __si_assert_copy_extra_268();
          v53 = v52;
          v54 = "";
          if (v52)
            v54 = v52;
          __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3944, "it->second->isCompatible(propertyId, vecVersion, dim, form, purgeable)", v54);
          free(v53);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        v33 = (std::__shared_weak_count *)v28[6];
        if (v33)
        {
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          do
            v49 = __ldxr(p_shared_owners);
          while (__stxr(v49 + 1, p_shared_owners));
        }
      }
      else
      {
LABEL_30:
        v32 = 0;
        v33 = 0;
      }
      v34 = *__error();
      v35 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        v36 = a6;
        v37 = v15;
        v38 = v36;
        v39 = a1 + 64;
        if (*(char *)(a1 + 87) < 0)
          v39 = *(_QWORD *)(a1 + 64);
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v17 + 312))(v66, v17, a1 + 40);
        if (v67 >= 0)
          v40 = v66;
        else
          v40 = (void **)v66[0];
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v32 + 312))(v64, v32, a2 + 40);
        v41 = v64;
        if (v65 < 0)
          v41 = (void **)v64[0];
        *(_DWORD *)buf = 136315650;
        v69 = v39;
        v70 = 2080;
        v71 = v40;
        v72 = 2080;
        v73 = v41;
        _os_log_impl(&dword_1B8270000, v35, OS_LOG_TYPE_DEFAULT, "[%s] compact %s -> %s", buf, 0x20u);
        if (v65 < 0)
          operator delete(v64[0]);
        v42 = v38;
        v15 = v37;
        if (v67 < 0)
          operator delete(v66[0]);
        a4 = v58;
        a3 = v59;
        a6 = v42;
      }
      *__error() = v34;
      v63[0] = v61;
      v63[1] = v62;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, _DWORD *))(*(_QWORD *)v17 + 144))(v17, v32, a3, a4, v63, a6);
      v16 = (_QWORD *)(a2 + 96);
      if (!v33)
        goto LABEL_48;
      v43 = (unint64_t *)&v33->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
        v45 = (_QWORD *)v14[1];
        if (!v45)
        {
          do
          {
LABEL_52:
            v46 = (_QWORD *)v14[2];
            v47 = *v46 == (_QWORD)v14;
            v14 = v46;
          }
          while (!v47);
          goto LABEL_6;
        }
      }
      else
      {
LABEL_48:
        v45 = (_QWORD *)v14[1];
        if (!v45)
          goto LABEL_52;
      }
      do
      {
        v46 = v45;
        v45 = (_QWORD *)*v45;
      }
      while (v45);
LABEL_6:
      v14 = v46;
    }
    while (v46 != v15);
  }
  IVFVectorIndex_s::endMerge((IVFVectorIndex_s *)(a1 + 8));
  if (!*a6)
  {
    IVFVectorIndex_s::flush((_QWORD *)(a2 + 8), 0);
    IVFVectorIndex_s::makeReadOnly((_QWORD *)(a2 + 8));
  }
  v50 = _SILogForLogForCategory(0);
  if (v56 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v51 = v50;
    if (os_signpost_enabled(v50))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1B8270000, v51, OS_SIGNPOST_INTERVAL_END, spid, "compactVectorIndex", "End", buf, 2u);
    }
  }
}

_QWORD *IVFVectorIndex_s::makeReadOnly(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _BYTE *v6;
  int v7;
  NSObject *v8;
  _QWORD *v9;
  void **v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  _QWORD *v17;
  __int16 v18;
  void **v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = (_QWORD *)this[10];
  v2 = this + 11;
  if (v1 != this + 11)
  {
    v3 = (uint64_t)this;
    v4 = this + 7;
    v5 = this + 4;
    do
    {
      v6 = (_BYTE *)v1[5];
      v7 = *__error();
      v8 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = v4;
        if (*(char *)(v3 + 79) < 0)
          v9 = (_QWORD *)*v4;
        (*(void (**)(void **__return_ptr, _BYTE *, _QWORD *))(*(_QWORD *)v6 + 312))(__p, v6, v5);
        v10 = __p;
        if (v15 < 0)
          v10 = (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        v17 = v9;
        v18 = 2080;
        v19 = v10;
        _os_log_impl(&dword_1B8270000, v8, OS_LOG_TYPE_DEFAULT, "[%s] makeReadOnly %s", buf, 0x16u);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      *__error() = v7;
      this = (_QWORD *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 184))(v6);
      if (v6[22])
        this = (_QWORD *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 192))(v6);
      v11 = (_QWORD *)v1[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v1[2];
          v13 = *v12 == (_QWORD)v1;
          v1 = v12;
        }
        while (!v13);
      }
      v1 = v12;
    }
    while (v12 != v2);
  }
  return this;
}

_DWORD *IVFVectorIndex_s::startMerge(IVFVectorIndex_s *this)
{
  int v2;
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  _DWORD *result;
  uint64_t v7;
  _QWORD *sibling_protected;
  unsigned __int8 v9;
  uint64_t v10;
  int v11;
  char *v12;
  char *v13;
  const char *v14;
  _BYTE buf[12];
  __int16 v16;
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *__error();
  v3 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (_QWORD *)((char *)this + 56);
    if (*((char *)this + 79) < 0)
      v4 = (_QWORD *)*v4;
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v4;
    v16 = 2080;
    v17 = v5;
    _os_log_impl(&dword_1B8270000, v3, OS_LOG_TYPE_DEFAULT, "[%s] startMerge %s", buf, 0x16u);
  }
  result = __error();
  *result = v2;
  v7 = *((_QWORD *)this + 17);
  if (v7 && *(_DWORD *)(v7 + 216) == -270471200)
  {
    if (*(_QWORD *)(v7 + 296))
    {
      v12 = __si_assert_copy_extra_268();
      v13 = v12;
      v14 = "";
      if (v12)
        v14 = v12;
      __message_assert(v12, "data_map_ext_storage.c", 2392, "data_map->offsets_clone.offsets_fd == 0", v14);
      free(v13);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    _data_map_ext_rdlock(*((_QWORD *)this + 17));
    if (*(_QWORD *)(v7 + 376) < 2uLL)
    {
      v11 = *(_DWORD *)(v7 + 488);
    }
    else
    {
      sibling_protected = *(_QWORD **)(v7 + 272);
      *(_QWORD *)(v7 + 304) = *(_QWORD *)(v7 + 280);
      if (sibling_protected)
      {
        if (*(_BYTE *)(v7 + 460))
          v9 = 3;
        else
          v9 = 0;
        *(_QWORD *)buf = 0;
        asprintf((char **)buf, "%s%s", "tmp.clone.", (const char *)sibling_protected[9]);
        sibling_protected = fd_create_sibling_protected((uint64_t)sibling_protected, *(const char **)buf, 1538, v9);
        free(*(void **)buf);
        v10 = *(_QWORD *)(v7 + 272);
      }
      else
      {
        v10 = 0;
      }
      *(_QWORD *)(v7 + 296) = sibling_protected;
      fd_copyfile(v10, (uint64_t)sibling_protected, 1);
      *(_QWORD *)(v7 + 312) = fd_mmap(*(_QWORD *)(v7 + 296));
      v11 = *(_DWORD *)(v7 + 488) + 1;
      *(_DWORD *)(v7 + 488) = v11;
    }
    result = (_DWORD *)_data_map_ext_unlock(v7);
  }
  else
  {
    v11 = 0;
  }
  *((_DWORD *)this + 32) = v11;
  *((_DWORD *)this + 26) = v11;
  return result;
}

_DWORD *IVFVectorIndex_s::endMerge(IVFVectorIndex_s *this)
{
  int v2;
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  _DWORD *result;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  NSObject *v19;
  int v20;
  uint8_t *v21;
  int v22;
  int v23;
  BOOL v24;
  const char *v25;
  uint64_t v26;
  _BYTE v27[12];
  __int16 v28;
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  int v33;
  uint8_t buf[4];
  _QWORD *v35;
  __int16 v36;
  _QWORD *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = *__error();
  v3 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (_QWORD *)((char *)this + 56);
    if (*((char *)this + 79) < 0)
      v4 = (_QWORD *)*v4;
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    *(_DWORD *)buf = 136315394;
    v35 = v4;
    v36 = 2080;
    v37 = v5;
    _os_log_impl(&dword_1B8270000, v3, OS_LOG_TYPE_DEFAULT, "[%s] endMerge %s", buf, 0x16u);
  }
  result = __error();
  *result = v2;
  v7 = *((_QWORD *)this + 17);
  if (v7)
  {
    if (*(_DWORD *)(v7 + 216) != -270471200)
    {
LABEL_19:
      *((_DWORD *)this + 32) = 0;
      goto LABEL_20;
    }
    _data_map_ext_wrlock(*((_QWORD *)this + 17));
    v8 = *(_QWORD *)(v7 + 296);
    if (!v8)
    {
LABEL_18:
      result = (_DWORD *)_data_map_ext_unlock(v7);
      goto LABEL_19;
    }
    v9 = (_OWORD *)(v7 + 296);
    v10 = *(_QWORD *)(v7 + 272);
    v26 = 0;
    v11 = _fd_acquire_fd(v8, &v26);
    if (v11 != -1)
    {
      v12 = v11;
      bzero(buf, 0x400uLL);
      v13 = fd_name(v10, (char *)buf, 0x400uLL);
      bzero(v27, 0x400uLL);
      v14 = fd_name(v8, v27, 0x400uLL);
      if (renameat(*(_DWORD *)(v8 + 44), v14, *(_DWORD *)(v10 + 44), v13) != -1)
      {
        os_unfair_lock_lock((os_unfair_lock_t)&g_name_lock);
        v15 = *(_QWORD *)(v10 + 72);
        *(_QWORD *)(v10 + 72) = *(_QWORD *)(v8 + 72);
        *(_QWORD *)(v8 + 72) = v15;
        os_unfair_lock_unlock((os_unfair_lock_t)&g_name_lock);
        _fd_release_fd((_DWORD *)v8, v12, 0, v26);
        fd_release((char *)v10);
        pthread_mutex_lock(&g_fd_lock);
        v16 = *(char **)(v8 + 80);
        if (v16)
        {
          *(_QWORD *)(v8 + 80) = 0;
          pthread_mutex_unlock(&g_fd_lock);
          fd_release(v16);
        }
        else
        {
          pthread_mutex_unlock(&g_fd_lock);
        }
LABEL_17:
        munmap(*(void **)(v7 + 288), *(_QWORD *)(v7 + 280));
        *(_OWORD *)(v7 + 272) = *v9;
        *(_QWORD *)(v7 + 288) = *(_QWORD *)(v7 + 312);
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(v7 + 304) = 0;
        *(_QWORD *)(v7 + 312) = -1;
        goto LABEL_18;
      }
      _fd_release_fd((_DWORD *)v8, v12, 0, v26);
      fd_release((char *)v10);
    }
    bzero(buf, 0x400uLL);
    v17 = *__error();
    v18 = *__error();
    v19 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_QWORD *)v27 = 0;
      v20 = _fd_acquire_fd(v8, v27);
      v21 = 0;
      if (v20 != -1)
      {
        v22 = v20;
        v21 = buf;
        v23 = fcntl(v20, 50, buf);
        if (buf[0])
          v24 = v23 < 0;
        else
          v24 = 1;
        if (v24)
          v21 = 0;
        _fd_release_fd((_DWORD *)v8, v22, 0, *(uint64_t *)v27);
      }
      v25 = "";
      *(_DWORD *)v27 = 136315906;
      *(_QWORD *)&v27[4] = "fd_rename_over_and_release";
      v28 = 1024;
      if (v21)
        v25 = (const char *)v21;
      v29 = 1134;
      v30 = 2080;
      v31 = v25;
      v32 = 1024;
      v33 = v17;
      _os_log_error_impl(&dword_1B8270000, v19, OS_LOG_TYPE_ERROR, "%s:%d: rename_over(%s) err:%d", v27, 0x22u);
    }
    *__error() = v18;
    *__error() = v17;
    goto LABEL_17;
  }
LABEL_20:
  *((_DWORD *)this + 26) = 0;
  return result;
}

void subvertVectorIndex(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  int v20;
  size_t v21;
  int v22;
  size_t v23;
  unint64_t v24;
  std::string *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  char *v39;
  const void *v40;
  int v41;
  NSObject *v42;
  std::string::size_type v43;
  void **v44;
  std::string *v45;
  std::string *v46;
  std::__shared_weak_count *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  _QWORD **v51;
  size_t v52;
  size_t v53;
  size_t v54;
  _QWORD *i;
  size_t v56;
  uint64_t v57;
  unint64_t v58;
  uint8x8_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  size_t v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  int v67;
  NSObject *v68;
  std::string::size_type v69;
  std::string *p_dst;
  void **v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  BOOL v76;
  void *v77;
  _QWORD *v78;
  IVFVectorIndex_s *v79;
  std::string *p_buf;
  const char *v81;
  std::string *v82;
  _QWORD *v83;
  _QWORD *v84;
  void *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint8x8_t v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  const void **v99;
  unsigned int *v100;
  std::string::size_type *v103;
  _QWORD *v104;
  void **v105;
  void *__p[2];
  char v107;
  std::string __dst;
  unint64_t v109;
  std::__shared_weak_count *v110;
  void *v111[2];
  void *v112[2];
  uint64_t v113;
  std::string buf;
  std::string *v115;
  __int16 v116;
  std::string *v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v100 = (unsigned int *)(a2 + 8);
  *(_OWORD *)v111 = 0u;
  *(_OWORD *)v112 = 0u;
  v113 = 1065353216;
  v2 = *(_QWORD **)(a2 + 88);
  v104 = (_QWORD *)(a2 + 96);
  v105 = (void **)(a1 + 8);
  if (v2 != (_QWORD *)(a2 + 96))
  {
    v103 = (std::string::size_type *)(a2 + 64);
    v98 = a2 + 40;
    v99 = (const void **)(a1 + 40);
    while (1)
    {
      v3 = v2[5];
      v4 = *(_DWORD *)(v3 + 12);
      switch(v4)
      {
        case 256:
          v5 = 0;
          break;
        case 768:
          v5 = 2;
          break;
        case 512:
          v5 = 1;
          break;
        default:
          v5 = 3;
          break;
      }
      v6 = *(_DWORD *)(v3 + 8);
      v7 = *(unsigned __int16 *)(v3 + 20);
      v8 = *(_DWORD *)(v3 + 16);
      if (v8 == 2)
        v9 = 1;
      else
        v9 = 3;
      if (v8 == 4)
        v10 = 0;
      else
        v10 = v9;
      v11 = *(unsigned __int8 *)(v3 + 22);
      v109 = 0;
      v110 = 0;
      IVFVectorIndex_s::getVectorIndex(&v109, (uint64_t)v105, v6, v7, v5, v10, v11);
      v12 = v109;
      if (v109)
      {
        v13 = 0x9DDFEA08EB382D69 * (((8 * v109) + 8) ^ HIDWORD(v109));
        v14 = 0x9DDFEA08EB382D69 * (HIDWORD(v109) ^ (v13 >> 47) ^ v13);
        v15 = v14 ^ (v14 >> 47);
        v16 = 0x9DDFEA08EB382D69 * v15;
        v17 = (unint64_t)v111[1];
        if (v111[1])
        {
          v18 = (uint8x8_t)vcnt_s8((int8x8_t)v111[1]);
          v18.i16[0] = vaddlv_u8(v18);
          if (v18.u32[0] > 1uLL)
          {
            v19 = 0x9DDFEA08EB382D69 * v15;
            if ((void *)v16 >= v111[1])
              v19 = v16 % (unint64_t)v111[1];
          }
          else
          {
            v19 = v16 & ((unint64_t)v111[1] - 1);
          }
          v26 = (_QWORD *)*((_QWORD *)v111[0] + v19);
          if (v26)
          {
            v27 = (_QWORD *)*v26;
            if (v27)
            {
              if (v18.u32[0] < 2uLL)
              {
                while (1)
                {
                  v29 = v27[1];
                  if (v29 == v16)
                  {
                    if (v27[2] == v109)
                      goto LABEL_137;
                  }
                  else if ((v29 & ((uint64_t)v111[1] - 1)) != v19)
                  {
                    goto LABEL_49;
                  }
                  v27 = (_QWORD *)*v27;
                  if (!v27)
                    goto LABEL_49;
                }
              }
              do
              {
                v28 = v27[1];
                if (v28 == v16)
                {
                  if (v27[2] == v109)
                    goto LABEL_137;
                }
                else
                {
                  if ((void *)v28 >= v111[1])
                    v28 %= (unint64_t)v111[1];
                  if (v28 != v19)
                    break;
                }
                v27 = (_QWORD *)*v27;
              }
              while (v27);
            }
          }
        }
        else
        {
          v19 = 0;
        }
LABEL_49:
        v30 = operator new(0x18uLL);
        *v30 = 0;
        v30[1] = v16;
        v30[2] = v12;
        v31 = (float)((unint64_t)v112[1] + 1);
        if (!v17 || (float)(*(float *)&v113 * (float)v17) < v31)
        {
          v32 = (v17 & (v17 - 1)) != 0;
          if (v17 < 3)
            v32 = 1;
          v33 = v32 | (2 * v17);
          v34 = vcvtps_u32_f32(v31 / *(float *)&v113);
          if (v33 <= v34)
            prime = v34;
          else
            prime = v33;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
            v17 = (unint64_t)v111[1];
          }
          if (prime > v17)
          {
LABEL_89:
            if (prime >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v48 = operator new(8 * prime);
            v49 = v111[0];
            v111[0] = v48;
            if (v49)
              operator delete(v49);
            v50 = 0;
            v111[1] = (void *)prime;
            do
              *((_QWORD *)v111[0] + v50++) = 0;
            while (prime != v50);
            v51 = (_QWORD **)v112[0];
            if (!v112[0])
              goto LABEL_113;
            v52 = *((_QWORD *)v112[0] + 1);
            v53 = prime - 1;
            if ((prime & (prime - 1)) == 0)
            {
              v54 = v52 & v53;
              *((_QWORD *)v111[0] + v54) = v112;
              for (i = *v51; *v51; i = *v51)
              {
                v56 = i[1] & v53;
                if (v56 == v54)
                {
                  v51 = (_QWORD **)i;
                }
                else if (*((_QWORD *)v111[0] + v56))
                {
                  *v51 = (_QWORD *)*i;
                  v57 = 8 * v56;
                  *i = **(_QWORD **)((char *)v111[0] + v57);
                  **(_QWORD **)((char *)v111[0] + v57) = i;
                }
                else
                {
                  *((_QWORD *)v111[0] + v56) = v51;
                  v51 = (_QWORD **)i;
                  v54 = v56;
                }
              }
              goto LABEL_113;
            }
            if (v52 >= prime)
              v52 %= prime;
            *((_QWORD *)v111[0] + v52) = v112;
            v61 = *v51;
            if (!*v51)
            {
LABEL_113:
              v17 = prime;
              goto LABEL_114;
            }
            while (2)
            {
              v63 = v61[1];
              if (v63 >= prime)
                v63 %= prime;
              if (v63 != v52)
              {
                if (!*((_QWORD *)v111[0] + v63))
                {
                  *((_QWORD *)v111[0] + v63) = v51;
LABEL_118:
                  v51 = (_QWORD **)v61;
                  v61 = (_QWORD *)*v61;
                  v52 = v63;
                  if (!v61)
                    goto LABEL_113;
                  continue;
                }
                *v51 = (_QWORD *)*v61;
                v62 = 8 * v63;
                *v61 = **(_QWORD **)((char *)v111[0] + v62);
                **(_QWORD **)((char *)v111[0] + v62) = v61;
                v61 = v51;
              }
              break;
            }
            v63 = v52;
            goto LABEL_118;
          }
          if (prime < v17)
          {
            v58 = vcvtps_u32_f32((float)(unint64_t)v112[1] / *(float *)&v113);
            if (v17 < 3 || (v59 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v59.i16[0] = vaddlv_u8(v59), v59.u32[0] > 1uLL))
            {
              v58 = std::__next_prime(v58);
            }
            else
            {
              v60 = 1 << -(char)__clz(v58 - 1);
              if (v58 >= 2)
                v58 = v60;
            }
            if (prime <= v58)
              prime = v58;
            if (prime >= v17)
            {
              v17 = (unint64_t)v111[1];
            }
            else
            {
              if (prime)
                goto LABEL_89;
              v77 = v111[0];
              v111[0] = 0;
              if (v77)
                operator delete(v77);
              v17 = 0;
              v111[1] = 0;
            }
          }
LABEL_114:
          if ((v17 & (v17 - 1)) != 0)
          {
            if (v16 >= v17)
              v19 = v16 % v17;
            else
              v19 = v16;
          }
          else
          {
            v19 = (v17 - 1) & v16;
          }
        }
        v64 = v111[0];
        v65 = (_QWORD *)*((_QWORD *)v111[0] + v19);
        if (v65)
        {
          *v30 = *v65;
          goto LABEL_135;
        }
        *v30 = v112[0];
        v112[0] = v30;
        v64[v19] = v112;
        if (*v30)
        {
          v66 = *(_QWORD *)(*v30 + 8);
          if ((v17 & (v17 - 1)) != 0)
          {
            if (v66 >= v17)
              v66 %= v17;
          }
          else
          {
            v66 &= v17 - 1;
          }
          v65 = (char *)v111[0] + 8 * v66;
LABEL_135:
          *v65 = v30;
        }
        ++v112[1];
LABEL_137:
        v67 = *__error();
        v68 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
        {
          v69 = (std::string::size_type)v103;
          if (*(char *)(a2 + 87) < 0)
            v69 = *v103;
          (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 312))(&__dst, v3, v98);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_dst = &__dst;
          else
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          (*(void (**)(void **__return_ptr, unint64_t, const void **))(*(_QWORD *)v12 + 312))(__p, v12, v99);
          v71 = __p;
          if (v107 < 0)
            v71 = (void **)__p[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v69;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v100;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
          v115 = p_dst;
          v116 = 2080;
          v117 = (std::string *)v71;
          _os_log_impl(&dword_1B8270000, v68, OS_LOG_TYPE_DEFAULT, "[%s] subvert %p %s -> %s", (uint8_t *)&buf, 0x2Au);
          if (v107 < 0)
          {
            operator delete(__p[0]);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_159;
          }
          else
          {
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_147;
LABEL_159:
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
        }
LABEL_147:
        *__error() = v67;
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v3 + 160))(v3, v12);
        v47 = v110;
        if (!v110)
          goto LABEL_151;
        goto LABEL_148;
      }
      memset(&__dst, 0, sizeof(__dst));
      v20 = *(char *)(a1 + 63);
      if (v20 >= 0)
        v21 = *(unsigned __int8 *)(a1 + 63);
      else
        v21 = *(_QWORD *)(a1 + 48);
      v22 = *(char *)(v3 + 47);
      if (v22 >= 0)
        v23 = *(unsigned __int8 *)(v3 + 47);
      else
        v23 = *(_QWORD *)(v3 + 32);
      v24 = v23 + v21;
      if (v23 + v21 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v24 <= 0x16)
        break;
      v36 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17)
        v36 = v24 | 7;
      v37 = v36 + 1;
      v25 = (std::string *)operator new(v36 + 1);
      __dst.__r_.__value_.__l.__size_ = v23 + v21;
      __dst.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      if (v21)
        goto LABEL_61;
LABEL_65:
      v39 = (char *)v25 + v21;
      if (v23)
      {
        if (v22 >= 0)
          v40 = (const void *)(v3 + 24);
        else
          v40 = *(const void **)(v3 + 24);
        memmove(v39, v40, v23);
      }
      v39[v23] = 0;
      v41 = *__error();
      v42 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        v43 = (std::string::size_type)v103;
        if (*(char *)(a2 + 87) < 0)
          v43 = *v103;
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 312))(__p, v3, v98);
        v44 = __p;
        if (v107 < 0)
          v44 = (void **)__p[0];
        v45 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v45 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v43;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v100;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
        v115 = (std::string *)v44;
        v116 = 2080;
        v117 = v45;
        _os_log_impl(&dword_1B8270000, v42, OS_LOG_TYPE_DEFAULT, "[%s] subvert %p %s -> %s (renamed)", (uint8_t *)&buf, 0x2Au);
        if (v107 < 0)
          operator delete(__p[0]);
      }
      *__error() = v41;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = &__dst;
      else
        v46 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v3 + 200))(v3, v46);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v47 = v110;
      if (!v110)
      {
LABEL_151:
        v74 = (_QWORD *)v2[1];
        if (!v74)
          goto LABEL_155;
        goto LABEL_152;
      }
LABEL_148:
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v73 = __ldaxr(p_shared_owners);
      while (__stlxr(v73 - 1, p_shared_owners));
      if (v73)
        goto LABEL_151;
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      v74 = (_QWORD *)v2[1];
      if (!v74)
      {
        do
        {
LABEL_155:
          v75 = (_QWORD *)v2[2];
          v76 = *v75 == (_QWORD)v2;
          v2 = v75;
        }
        while (!v76);
        goto LABEL_3;
      }
      do
      {
LABEL_152:
        v75 = v74;
        v74 = (_QWORD *)*v74;
      }
      while (v74);
LABEL_3:
      v2 = v75;
      if (v75 == v104)
        goto LABEL_169;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v23 + v21;
    v25 = &__dst;
    if (!v21)
      goto LABEL_65;
LABEL_61:
    if (v20 >= 0)
      v38 = v99;
    else
      v38 = *v99;
    memmove(v25, v38, v21);
    goto LABEL_65;
  }
LABEL_169:
  v78 = *(_QWORD **)(a1 + 88);
  if (v78 != (_QWORD *)(a1 + 96))
  {
    do
    {
      v86 = v78[5];
      if (v111[1])
      {
        v87 = 0x9DDFEA08EB382D69 * (((8 * v86) + 8) ^ HIDWORD(v86));
        v88 = 0x9DDFEA08EB382D69 * (HIDWORD(v86) ^ (v87 >> 47) ^ v87);
        v89 = 0x9DDFEA08EB382D69 * (v88 ^ (v88 >> 47));
        v90 = (uint8x8_t)vcnt_s8((int8x8_t)v111[1]);
        v90.i16[0] = vaddlv_u8(v90);
        if (v90.u32[0] > 1uLL)
        {
          v91 = v89;
          if ((void *)v89 >= v111[1])
            v91 = v89 % (unint64_t)v111[1];
        }
        else
        {
          v91 = v89 & ((unint64_t)v111[1] - 1);
        }
        v92 = (_QWORD *)*((_QWORD *)v111[0] + v91);
        if (v92)
        {
          v93 = (_QWORD *)*v92;
          if (v93)
          {
            if (v90.u32[0] < 2uLL)
            {
              while (1)
              {
                v95 = v93[1];
                if (v95 == v89)
                {
                  if (v93[2] == v86)
                    goto LABEL_205;
                }
                else if ((v95 & ((uint64_t)v111[1] - 1)) != v91)
                {
                  goto LABEL_204;
                }
                v93 = (_QWORD *)*v93;
                if (!v93)
                  goto LABEL_204;
              }
            }
            do
            {
              v94 = v93[1];
              if (v94 == v89)
              {
                if (v93[2] == v86)
                  goto LABEL_205;
              }
              else
              {
                if ((void *)v94 >= v111[1])
                  v94 %= (unint64_t)v111[1];
                if (v94 != v91)
                  break;
              }
              v93 = (_QWORD *)*v93;
            }
            while (v93);
          }
        }
      }
LABEL_204:
      (*(void (**)(unint64_t))(*(_QWORD *)v86 + 168))(v86);
LABEL_205:
      v96 = (_QWORD *)v78[1];
      if (v96)
      {
        do
        {
          v97 = v96;
          v96 = (_QWORD *)*v96;
        }
        while (v96);
      }
      else
      {
        do
        {
          v97 = (_QWORD *)v78[2];
          v76 = *v97 == (_QWORD)v78;
          v78 = v97;
        }
        while (!v76);
      }
      v78 = v97;
    }
    while (v97 != (_QWORD *)(a1 + 96));
  }
  v79 = (IVFVectorIndex_s *)*v100;
  IVFVectorIndex_s::metaFilename(&buf, (uint64_t)v100);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_buf = &buf;
  else
    p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  IVFVectorIndex_s::metaFilename(&__dst, (uint64_t)v105);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v82 = &__dst;
  else
    v82 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  IVFVectorIndex_s::rename(v79, (const char *)p_buf, (const char *)v82, v81);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_178;
  }
  else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_178;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
LABEL_178:
  std::string::operator=((std::string *)(a2 + 40), (const std::string *)(a1 + 40));
  v83 = v112[0];
  if (v112[0])
  {
    do
    {
      v84 = (_QWORD *)*v83;
      operator delete(v83);
      v83 = v84;
    }
    while (v84);
  }
  v85 = v111[0];
  v111[0] = 0;
  if (v85)
    operator delete(v85);
  IVFVectorIndex_s::~IVFVectorIndex_s(v105);
  JUMPOUT(0x1BCCB06A4);
}

_QWORD *IVFVectorIndex_s::getVectorIndex(_QWORD *result, uint64_t a2, unsigned int a3, uint64_t a4, int a5, int a6, unsigned int a7)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  const char *v21;

  v9 = *(_QWORD **)(a2 + 88);
  v7 = (_QWORD *)(a2 + 88);
  v8 = v9;
  if (!v9)
    goto LABEL_12;
  v10 = a7 | (2 * (((unint64_t)(a5 & 3) << 50) | ((unint64_t)(a6 & 3) << 48) | (a4 << 32) | a3));
  v11 = v7;
  do
  {
    v12 = v8[4];
    v13 = v12 >= v10;
    if (v12 >= v10)
      v14 = v8;
    else
      v14 = v8 + 1;
    if (v13)
      v11 = v8;
    v8 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 != v7 && v10 >= v11[4])
  {
    v15 = v11[5];
    if (*(_DWORD *)(v15 + 8) != a3
      || *(unsigned __int16 *)(v15 + 20) != (_DWORD)a4
      || a6 > 2
      || *(_DWORD *)(v15 + 12) != vector_dimension_vec_sizes_10743[a5]
      || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(v15 + 16)
      || *(unsigned __int8 *)(v15 + 22) != a7)
    {
      v19 = __si_assert_copy_extra_268();
      v20 = v19;
      v21 = "";
      if (v19)
        v21 = v19;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3936, "it->second->isCompatible(propertyId, vecVersion, dim, form, purgeable)", v21);
      free(v20);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v16 = v11[6];
    *result = v15;
    result[1] = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else
  {
LABEL_12:
    *result = 0;
    result[1] = 0;
  }
  return result;
}

void IVFVectorIndex_s::rename(IVFVectorIndex_s *this, const char *a2, const char *a3, const char *a4)
{
  char *v6;
  char *v7;
  int v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = (char *)fd_create_protected((int)this, a2, 0, 0);
  if (v6)
  {
    v7 = v6;
    if (fd_rename((uint64_t)v6, a3))
    {
      v8 = *__error();
      v9 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v12 = 136315906;
        v13 = "rename";
        v14 = 1024;
        v15 = 3814;
        v16 = 2080;
        v17 = a2;
        v18 = 2080;
        v19 = a3;
        _os_log_error_impl(&dword_1B8270000, v9, OS_LOG_TYPE_ERROR, "%s:%d: Failed to rename %s to %s", (uint8_t *)&v12, 0x26u);
      }
      *__error() = v8;
    }
    fd_release(v7);
  }
  else
  {
    v10 = *__error();
    v11 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = 136315650;
      v13 = "rename";
      v14 = 1024;
      v15 = 3818;
      v16 = 2080;
      v17 = a2;
      _os_log_error_impl(&dword_1B8270000, v11, OS_LOG_TYPE_ERROR, "%s:%d: Failed to rename %s", (uint8_t *)&v12, 0x1Cu);
    }
    *__error() = v10;
  }
}

uint64_t vectorIndexInsertForMerge(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, int a11)
{
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  char *v24;
  char *v25;
  const char *v26;
  NSObject *v27;
  _QWORD *v28;
  void **v29;
  _QWORD *v30;
  int v31;
  void *__p[2];
  char v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  void **v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a5)
  {
    v24 = __si_assert_copy_extra_268();
    v25 = v24;
    v26 = "";
    if (v24)
      v26 = v24;
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndex.cpp", 224, "vectorId > 0", v26);
    free(v25);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v34 = 0;
  v35 = 0;
  IVFVectorIndex_s::getOrCreateVectorIndex(&v34, a1 + 8, a2, a3, a7, a8, a4);
  if (dword_1EF19FCCC >= 5)
  {
    v31 = *__error();
    v27 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      v28 = (_QWORD *)(a1 + 64);
      if (*(char *)(a1 + 87) < 0)
        v28 = (_QWORD *)*v28;
      v30 = v28;
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v34 + 312))(__p, v34, a1 + 40);
      if (v33 >= 0)
        v29 = __p;
      else
        v29 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v37 = v30;
      v38 = 2080;
      v39 = v29;
      v40 = 1024;
      v41 = a11;
      _os_log_impl(&dword_1B8270000, v27, OS_LOG_TYPE_DEFAULT, "[%s] insertForMerge %s partID=%u", buf, 0x1Cu);
      if (v33 < 0)
        operator delete(__p[0]);
    }
    *__error() = v31;
  }
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float, int))(*(_QWORD *)v34 + 72))(v34, a2, a3, a5, a6, a7, a8, a10, a9, a11);
  v20 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return v19;
}

void IVFVectorIndexUpdateSet::getOrCreateVectorIndex(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  unint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  unint64_t v16;
  BOOL v17;
  uint64_t **v18;
  malloc_zone_t *v19;
  __int128 v20;
  uint64_t VectorIndexInstance;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t **v24;
  uint64_t **v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t *v33;
  uint64_t **v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  const char *v45;
  _OWORD v46[2];

  v12 = 2 * (((unint64_t)(a5 & 3) << 50) | ((unint64_t)(a6 & 3) << 48) | (a4 << 32) | a3);
  v14 = a2 + 1;
  v13 = a2[1];
  if (!v13)
    goto LABEL_12;
  v15 = a2 + 1;
  do
  {
    v16 = v13[4];
    v17 = v16 >= v12;
    if (v16 >= v12)
      v18 = (uint64_t **)v13;
    else
      v18 = (uint64_t **)(v13 + 1);
    if (v17)
      v15 = (uint64_t **)v13;
    v13 = *v18;
  }
  while (*v18);
  if (v15 != v14 && v12 >= (unint64_t)v15[4])
  {
    v42 = v15[5];
    if (*((_DWORD *)v42 + 2) != (_DWORD)a3
      || *((unsigned __int16 *)v42 + 10) != (_DWORD)a4
      || a6 > 2
      || *((_DWORD *)v42 + 3) != vector_dimension_vec_sizes_10743[a5]
      || vector_size_elem_sizes_10742[a6] != *((_DWORD *)v42 + 4))
    {
      v43 = __si_assert_copy_extra_268();
      v44 = v43;
      v45 = "";
      if (v43)
        v45 = v43;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3634, "it->second->isCompatible(propertyId, vecVersion, dim, form)", v45);
      free(v44);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v39 = v15[6];
    *a1 = v42;
    a1[1] = v39;
    if (v39)
    {
LABEL_38:
      v40 = (unint64_t *)(v39 + 1);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
  }
  else
  {
LABEL_12:
    v19 = malloc_default_zone();
    v20 = *(_OWORD *)(a2 + 5);
    v46[0] = *(_OWORD *)(a2 + 3);
    v46[1] = v20;
    VectorIndexInstance = IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::createVectorIndexInstance(a3, a4, a5, a6, v19, 0, (__int16 *)v46);
    v22 = (uint64_t *)operator new();
    *v22 = (uint64_t)&off_1E6E30970;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = VectorIndexInstance;
    v23 = a2[1];
    v24 = v14;
    v25 = v14;
    if (v23)
    {
      while (1)
      {
        while (1)
        {
          v25 = (uint64_t **)v23;
          v26 = v23[4];
          if (v12 >= v26)
            break;
          v23 = *v25;
          v24 = v25;
          if (!*v25)
            goto LABEL_19;
        }
        if (v26 >= v12)
          break;
        v23 = v25[1];
        if (!v23)
        {
          v24 = v25 + 1;
          goto LABEL_19;
        }
      }
    }
    else
    {
LABEL_19:
      v27 = (uint64_t *)v25;
      v25 = (uint64_t **)operator new(0x38uLL);
      v25[5] = 0;
      v25[6] = 0;
      v25[4] = (uint64_t *)v12;
      *v25 = 0;
      v25[1] = 0;
      v25[2] = v27;
      *v24 = (uint64_t *)v25;
      v28 = (uint64_t *)**a2;
      v29 = (uint64_t *)v25;
      if (v28)
      {
        *a2 = v28;
        v29 = *v24;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a2[1], v29);
      a2[2] = (uint64_t *)((char *)a2[2] + 1);
    }
    v30 = (std::__shared_weak_count *)v25[6];
    v25[5] = (uint64_t *)VectorIndexInstance;
    v25[6] = v22;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = *v14;
    v34 = v14;
    if (*v14)
    {
      while (1)
      {
        while (1)
        {
          v34 = (uint64_t **)v33;
          v35 = v33[4];
          if (v12 >= v35)
            break;
          v33 = *v34;
          v14 = v34;
          if (!*v34)
            goto LABEL_34;
        }
        if (v35 >= v12)
          break;
        v33 = v34[1];
        if (!v33)
        {
          v14 = v34 + 1;
          goto LABEL_34;
        }
      }
    }
    else
    {
LABEL_34:
      v36 = (uint64_t *)v34;
      v34 = (uint64_t **)operator new(0x38uLL);
      v34[5] = 0;
      v34[6] = 0;
      v34[4] = (uint64_t *)v12;
      *v34 = 0;
      v34[1] = 0;
      v34[2] = v36;
      *v14 = (uint64_t *)v34;
      v37 = (uint64_t *)**a2;
      v38 = (uint64_t *)v34;
      if (v37)
      {
        *a2 = v37;
        v38 = *v14;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a2[1], v38);
      a2[2] = (uint64_t *)((char *)a2[2] + 1);
    }
    v39 = v34[6];
    *a1 = v34[5];
    a1[1] = v39;
    if (v39)
      goto LABEL_38;
  }
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::createVectorIndexInstance(uint64_t a1, uint64_t a2, int a3, int a4, malloc_zone_t *a5, uint64_t a6, __int16 *a7)
{
  uint64_t v12;
  __int16 v13;
  int v14;
  int v15;
  __int16 v16;
  int v17;
  int v18;
  __int16 v19;
  int v20;
  int v21;
  __int16 v22;
  int v23;
  int v24;
  __int16 v25;
  int v26;
  int v27;
  __int16 v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned __int8 v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  unsigned int v84;
  _QWORD *v85;
  uint64_t v86;
  unsigned __int8 v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unsigned int v104;
  int v105;
  int v106;
  unsigned int v107;
  _QWORD *v108;
  uint64_t v109;
  unsigned __int8 v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unsigned int v127;
  int v128;
  int v129;
  unsigned int v130;
  _QWORD *v131;
  uint64_t v132;
  unsigned __int8 v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  unint64_t *p_shared_owners;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  unsigned int v150;
  int v151;
  int v152;
  unsigned int v153;
  _QWORD *v154;
  uint64_t v155;
  unsigned __int8 v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  uint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  unint64_t *v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t *v252;
  unint64_t v253;
  unint64_t *v254;
  char *v256;
  char *v257;
  const char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  uint64_t v271;
  std::__shared_weak_count *v272;
  uint64_t v273;
  std::__shared_weak_count *v274;
  uint64_t v275;
  std::__shared_weak_count *v276;

  if (!a4)
  {
    if (a3 == 2)
    {
      v12 = operator new();
      v25 = *a7;
      v269 = *((_DWORD *)a7 + 4);
      v263 = *((_QWORD *)a7 + 3);
      *(_QWORD *)v12 = off_1E6E30C80;
      *(_DWORD *)(v12 + 8) = a1;
      *(_QWORD *)(v12 + 12) = 0x400000300;
      *(_WORD *)(v12 + 20) = a2;
      *(_BYTE *)(v12 + 22) = 0;
      IVFIndexName(v12 + 24, a1, a2, 2, 0);
      *(_QWORD *)v12 = off_1E6E32E40;
      v26 = *(_DWORD *)(v12 + 12);
      switch(v26)
      {
        case 256:
          v27 = 0;
          break;
        case 768:
          v27 = 2;
          break;
        case 512:
          v27 = 1;
          break;
        default:
          v27 = 3;
          break;
      }
      *(_QWORD *)(v12 + 48) = &off_1E6E32F98;
      v124 = v12 + 48;
      v125 = *(_DWORD *)(v12 + 16);
      if (v125 == 2)
        v126 = 1;
      else
        v126 = 3;
      v127 = *(unsigned __int16 *)(v12 + 20);
      v128 = *(unsigned __int8 *)(v12 + 22);
      if (v125 == 4)
        v129 = 0;
      else
        v129 = v126;
      *(_QWORD *)(v12 + 56) = a5;
      *(_QWORD *)(v12 + 64) = a6;
      if (v128)
        v130 = v127 | 0x80000000;
      else
        v130 = v127;
      *(_DWORD *)(v12 + 72) = a1;
      *(_WORD *)(v12 + 76) = a2;
      v131 = operator new(0x58uLL);
      v131[1] = 0;
      v131[2] = 0;
      v131[3] = a5;
      *v131 = &off_1E6E32FE0;
      v131[4] = a6;
      *((_DWORD *)v131 + 12) = 0;
      v131[9] = 0;
      v131[10] = 0;
      v131[8] = 0;
      v132 = operator new();
      *(_OWORD *)(v132 + 16) = xmmword_1B8631F00;
      *(_OWORD *)(v132 + 32) = xmmword_1B8631F10;
      *(_QWORD *)v132 = a5;
      *(_QWORD *)(v132 + 8) = malloc_type_zone_malloc(a5, 0x40000uLL, 0x8176C4DFuLL);
      v131[5] = v132;
      *(_QWORD *)((char *)v131 + 52) = 0xFFFFFFFFLL;
      *(_QWORD *)(v12 + 80) = v131 + 3;
      *(_QWORD *)(v12 + 88) = v131;
      *(_OWORD *)(v12 + 96) = 0u;
      *(_OWORD *)(v12 + 112) = 0u;
      *(_OWORD *)(v12 + 128) = 0u;
      *(_DWORD *)(v12 + 144) = 0;
      *(_WORD *)(v12 + 152) = v25;
      *(_DWORD *)(v12 + 156) = v27;
      *(_DWORD *)(v12 + 160) = v129;
      *(_DWORD *)(v12 + 164) = v130;
      *(_DWORD *)(v12 + 168) = v269;
      *(_QWORD *)(v12 + 176) = v263;
      *(_QWORD *)(v12 + 184) = 0xFFFFFFFF00000000;
      *(_BYTE *)(v12 + 192) = 0;
      *(_DWORD *)(v12 + 196) = 0;
      *(_DWORD *)(v12 + 200) = 0;
      if ((v133 & 1) == 0
      {
        __cxa_atexit((void (*)(void *))std::shared_ptr<Quantizer<float,768>>::~shared_ptr[abi:nn180100], &ZeroVectorQuantizer<float,768>::sharedInstance(void)::zvq, &dword_1B8270000);
      }
      if (ZeroVectorQuantizer<float,768>::sharedInstance(void)::onceToken != -1)
        dispatch_once(&ZeroVectorQuantizer<float,768>::sharedInstance(void)::onceToken, &__block_literal_global_731_5706);
      v134 = ZeroVectorQuantizer<float,768>::sharedInstance(void)::zvq;
      v41 = (std::__shared_weak_count *)qword_1EF1AFA68;
      if (qword_1EF1AFA68)
      {
        v135 = (unint64_t *)(qword_1EF1AFA68 + 8);
        do
          v136 = __ldxr(v135);
        while (__stxr(v136 + 1, v135));
      }
      os_unfair_lock_lock((os_unfair_lock_t)(v12 + 144));
      v138 = *(_QWORD *)(v12 + 112);
      v137 = *(std::__shared_weak_count **)(v12 + 120);
      if (v137)
      {
        p_shared_owners = (unint64_t *)&v137->__shared_owners_;
        do
          v140 = __ldxr(p_shared_owners);
        while (__stxr(v140 + 1, p_shared_owners));
      }
      v141 = *(std::__shared_weak_count **)(v12 + 136);
      if (v141)
      {
        v142 = (unint64_t *)&v141->__shared_owners_;
        do
          v143 = __ldxr(v142);
        while (__stxr(v143 + 1, v142));
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 144));
      if (v138 != v134)
      {
        v275 = v134;
        v276 = v41;
        if (v41)
        {
          v144 = (unint64_t *)&v41->__shared_owners_;
          do
            v145 = __ldxr(v144);
          while (__stxr(v145 + 1, v144));
          v271 = v134;
          v272 = v41;
          do
            v146 = __ldxr(v144);
          while (__stxr(v146 + 1, v144));
        }
        else
        {
          v271 = v134;
          v272 = 0;
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v124 + 40))(&v273, v12 + 48, &v271);
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v124 + 48))(v12 + 48, &v275, &v273);
        v213 = v274;
        if (v274)
        {
          v214 = (unint64_t *)&v274->__shared_owners_;
          do
            v215 = __ldaxr(v214);
          while (__stlxr(v215 - 1, v214));
          if (!v215)
          {
            ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
            std::__shared_weak_count::__release_weak(v213);
          }
        }
        v216 = v272;
        if (v272)
        {
          v217 = (unint64_t *)&v272->__shared_owners_;
          do
            v218 = __ldaxr(v217);
          while (__stlxr(v218 - 1, v217));
          if (!v218)
          {
            ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
            std::__shared_weak_count::__release_weak(v216);
          }
        }
        v219 = v276;
        if (v276)
        {
          v220 = (unint64_t *)&v276->__shared_owners_;
          do
            v221 = __ldaxr(v220);
          while (__stlxr(v221 - 1, v220));
          if (!v221)
          {
            ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
            std::__shared_weak_count::__release_weak(v219);
          }
        }
      }
      if (v141)
      {
        v222 = (unint64_t *)&v141->__shared_owners_;
        do
          v223 = __ldaxr(v222);
        while (__stlxr(v223 - 1, v222));
        if (!v223)
        {
          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
          std::__shared_weak_count::__release_weak(v141);
        }
      }
      if (v137)
      {
        v224 = (unint64_t *)&v137->__shared_owners_;
        do
          v225 = __ldaxr(v224);
        while (__stlxr(v225 - 1, v224));
        if (!v225)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
      if (!v41)
        return v12;
      v226 = (unint64_t *)&v41->__shared_owners_;
      do
        v184 = __ldaxr(v226);
      while (__stlxr(v184 - 1, v226));
    }
    else if (a3 == 1)
    {
      v12 = operator new();
      v28 = *a7;
      v270 = *((_DWORD *)a7 + 4);
      v264 = *((_QWORD *)a7 + 3);
      *(_QWORD *)v12 = off_1E6E30C80;
      *(_DWORD *)(v12 + 8) = a1;
      *(_QWORD *)(v12 + 12) = 0x400000200;
      *(_WORD *)(v12 + 20) = a2;
      *(_BYTE *)(v12 + 22) = 0;
      IVFIndexName(v12 + 24, a1, a2, 1, 0);
      *(_QWORD *)v12 = off_1E6E32820;
      v29 = *(_DWORD *)(v12 + 12);
      switch(v29)
      {
        case 256:
          v30 = 0;
          break;
        case 768:
          v30 = 2;
          break;
        case 512:
          v30 = 1;
          break;
        default:
          v30 = 3;
          break;
      }
      *(_QWORD *)(v12 + 48) = &off_1E6E32978;
      v147 = v12 + 48;
      v148 = *(_DWORD *)(v12 + 16);
      if (v148 == 2)
        v149 = 1;
      else
        v149 = 3;
      v150 = *(unsigned __int16 *)(v12 + 20);
      v151 = *(unsigned __int8 *)(v12 + 22);
      if (v148 == 4)
        v152 = 0;
      else
        v152 = v149;
      *(_QWORD *)(v12 + 56) = a5;
      *(_QWORD *)(v12 + 64) = a6;
      if (v151)
        v153 = v150 | 0x80000000;
      else
        v153 = v150;
      *(_DWORD *)(v12 + 72) = a1;
      *(_WORD *)(v12 + 76) = a2;
      v154 = operator new(0x58uLL);
      v154[1] = 0;
      v154[2] = 0;
      v154[3] = a5;
      *v154 = &off_1E6E329C0;
      v154[4] = a6;
      *((_DWORD *)v154 + 12) = 0;
      v154[9] = 0;
      v154[10] = 0;
      v154[8] = 0;
      v155 = operator new();
      *(_OWORD *)(v155 + 16) = xmmword_1B8631F00;
      *(_OWORD *)(v155 + 32) = xmmword_1B8631F20;
      *(_QWORD *)v155 = a5;
      *(_QWORD *)(v155 + 8) = malloc_type_zone_malloc(a5, 0x40000uLL, 0x8176C4DFuLL);
      v154[5] = v155;
      *(_QWORD *)((char *)v154 + 52) = 0xFFFFFFFFLL;
      *(_QWORD *)(v12 + 80) = v154 + 3;
      *(_QWORD *)(v12 + 88) = v154;
      *(_OWORD *)(v12 + 96) = 0u;
      *(_OWORD *)(v12 + 112) = 0u;
      *(_OWORD *)(v12 + 128) = 0u;
      *(_DWORD *)(v12 + 144) = 0;
      *(_WORD *)(v12 + 152) = v28;
      *(_DWORD *)(v12 + 156) = v30;
      *(_DWORD *)(v12 + 160) = v152;
      *(_DWORD *)(v12 + 164) = v153;
      *(_DWORD *)(v12 + 168) = v270;
      *(_QWORD *)(v12 + 176) = v264;
      *(_QWORD *)(v12 + 184) = 0xFFFFFFFF00000000;
      *(_BYTE *)(v12 + 192) = 0;
      *(_DWORD *)(v12 + 196) = 0;
      *(_DWORD *)(v12 + 200) = 0;
      if ((v156 & 1) == 0
      {
        __cxa_atexit((void (*)(void *))std::shared_ptr<Quantizer<float,512>>::~shared_ptr[abi:nn180100], &ZeroVectorQuantizer<float,512>::sharedInstance(void)::zvq, &dword_1B8270000);
      }
      if (ZeroVectorQuantizer<float,512>::sharedInstance(void)::onceToken != -1)
        dispatch_once(&ZeroVectorQuantizer<float,512>::sharedInstance(void)::onceToken, &__block_literal_global_621);
      v157 = ZeroVectorQuantizer<float,512>::sharedInstance(void)::zvq;
      v41 = (std::__shared_weak_count *)qword_1EF1AF238;
      if (qword_1EF1AF238)
      {
        v158 = (unint64_t *)(qword_1EF1AF238 + 8);
        do
          v159 = __ldxr(v158);
        while (__stxr(v159 + 1, v158));
      }
      os_unfair_lock_lock((os_unfair_lock_t)(v12 + 144));
      v161 = *(_QWORD *)(v12 + 112);
      v160 = *(std::__shared_weak_count **)(v12 + 120);
      if (v160)
      {
        v162 = (unint64_t *)&v160->__shared_owners_;
        do
          v163 = __ldxr(v162);
        while (__stxr(v163 + 1, v162));
      }
      v164 = *(std::__shared_weak_count **)(v12 + 136);
      if (v164)
      {
        v165 = (unint64_t *)&v164->__shared_owners_;
        do
          v166 = __ldxr(v165);
        while (__stxr(v166 + 1, v165));
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 144));
      if (v161 != v157)
      {
        v275 = v157;
        v276 = v41;
        if (v41)
        {
          v167 = (unint64_t *)&v41->__shared_owners_;
          do
            v168 = __ldxr(v167);
          while (__stxr(v168 + 1, v167));
          v271 = v157;
          v272 = v41;
          do
            v169 = __ldxr(v167);
          while (__stxr(v169 + 1, v167));
        }
        else
        {
          v271 = v157;
          v272 = 0;
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v147 + 40))(&v273, v12 + 48, &v271);
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v147 + 48))(v12 + 48, &v275, &v273);
        v227 = v274;
        if (v274)
        {
          v228 = (unint64_t *)&v274->__shared_owners_;
          do
            v229 = __ldaxr(v228);
          while (__stlxr(v229 - 1, v228));
          if (!v229)
          {
            ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
            std::__shared_weak_count::__release_weak(v227);
          }
        }
        v230 = v272;
        if (v272)
        {
          v231 = (unint64_t *)&v272->__shared_owners_;
          do
            v232 = __ldaxr(v231);
          while (__stlxr(v232 - 1, v231));
          if (!v232)
          {
            ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
            std::__shared_weak_count::__release_weak(v230);
          }
        }
        v233 = v276;
        if (v276)
        {
          v234 = (unint64_t *)&v276->__shared_owners_;
          do
            v235 = __ldaxr(v234);
          while (__stlxr(v235 - 1, v234));
          if (!v235)
          {
            ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
            std::__shared_weak_count::__release_weak(v233);
          }
        }
      }
      if (v164)
      {
        v236 = (unint64_t *)&v164->__shared_owners_;
        do
          v237 = __ldaxr(v236);
        while (__stlxr(v237 - 1, v236));
        if (!v237)
        {
          ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
          std::__shared_weak_count::__release_weak(v164);
        }
      }
      if (v160)
      {
        v238 = (unint64_t *)&v160->__shared_owners_;
        do
          v239 = __ldaxr(v238);
        while (__stlxr(v239 - 1, v238));
        if (!v239)
        {
          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
          std::__shared_weak_count::__release_weak(v160);
        }
      }
      if (!v41)
        return v12;
      v240 = (unint64_t *)&v41->__shared_owners_;
      do
        v184 = __ldaxr(v240);
      while (__stlxr(v184 - 1, v240));
    }
    else
    {
      if (a3)
      {
LABEL_401:
        v256 = __si_assert_copy_extra_268();
        v257 = v256;
        v258 = "";
        if (v256)
          v258 = v256;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3568, "false", v258);
        free(v257);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      v12 = operator new();
      v16 = *a7;
      v266 = *((_DWORD *)a7 + 4);
      v260 = *((_QWORD *)a7 + 3);
      *(_QWORD *)v12 = off_1E6E30C80;
      *(_DWORD *)(v12 + 8) = a1;
      *(_QWORD *)(v12 + 12) = 0x400000100;
      *(_WORD *)(v12 + 20) = a2;
      *(_BYTE *)(v12 + 22) = 0;
      IVFIndexName(v12 + 24, a1, a2, 0, 0);
      *(_QWORD *)v12 = off_1E6E32200;
      v17 = *(_DWORD *)(v12 + 12);
      switch(v17)
      {
        case 256:
          v18 = 0;
          break;
        case 768:
          v18 = 2;
          break;
        case 512:
          v18 = 1;
          break;
        default:
          v18 = 3;
          break;
      }
      *(_QWORD *)(v12 + 48) = &off_1E6E32358;
      v55 = v12 + 48;
      v56 = *(_DWORD *)(v12 + 16);
      if (v56 == 2)
        v57 = 1;
      else
        v57 = 3;
      v58 = *(unsigned __int16 *)(v12 + 20);
      v59 = *(unsigned __int8 *)(v12 + 22);
      if (v56 == 4)
        v60 = 0;
      else
        v60 = v57;
      *(_QWORD *)(v12 + 56) = a5;
      *(_QWORD *)(v12 + 64) = a6;
      if (v59)
        v61 = v58 | 0x80000000;
      else
        v61 = v58;
      *(_DWORD *)(v12 + 72) = a1;
      *(_WORD *)(v12 + 76) = a2;
      v62 = operator new(0x58uLL);
      v62[1] = 0;
      v62[2] = 0;
      v62[3] = a5;
      *v62 = &off_1E6E323A0;
      v62[4] = a6;
      *((_DWORD *)v62 + 12) = 0;
      v62[9] = 0;
      v62[10] = 0;
      v62[8] = 0;
      v63 = operator new();
      *(_OWORD *)(v63 + 16) = xmmword_1B8631F00;
      *(_OWORD *)(v63 + 32) = xmmword_1B8631F30;
      *(_QWORD *)v63 = a5;
      *(_QWORD *)(v63 + 8) = malloc_type_zone_malloc(a5, 0x40000uLL, 0x8176C4DFuLL);
      v62[5] = v63;
      *(_QWORD *)((char *)v62 + 52) = 0xFFFFFFFFLL;
      *(_QWORD *)(v12 + 80) = v62 + 3;
      *(_QWORD *)(v12 + 88) = v62;
      *(_OWORD *)(v12 + 96) = 0u;
      *(_OWORD *)(v12 + 112) = 0u;
      *(_OWORD *)(v12 + 128) = 0u;
      *(_DWORD *)(v12 + 144) = 0;
      *(_WORD *)(v12 + 152) = v16;
      *(_DWORD *)(v12 + 156) = v18;
      *(_DWORD *)(v12 + 160) = v60;
      *(_DWORD *)(v12 + 164) = v61;
      *(_DWORD *)(v12 + 168) = v266;
      *(_QWORD *)(v12 + 176) = v260;
      *(_QWORD *)(v12 + 184) = 0xFFFFFFFF00000000;
      *(_BYTE *)(v12 + 192) = 0;
      *(_DWORD *)(v12 + 196) = 0;
      *(_DWORD *)(v12 + 200) = 0;
      if ((v64 & 1) == 0
      {
        __cxa_atexit((void (*)(void *))std::shared_ptr<Quantizer<float,256>>::~shared_ptr[abi:nn180100], &ZeroVectorQuantizer<float,256>::sharedInstance(void)::zvq, &dword_1B8270000);
      }
      if (ZeroVectorQuantizer<float,256>::sharedInstance(void)::onceToken != -1)
        dispatch_once(&ZeroVectorQuantizer<float,256>::sharedInstance(void)::onceToken, &__block_literal_global_511);
      v65 = ZeroVectorQuantizer<float,256>::sharedInstance(void)::zvq;
      v41 = (std::__shared_weak_count *)qword_1EF1AEE08;
      if (qword_1EF1AEE08)
      {
        v66 = (unint64_t *)(qword_1EF1AEE08 + 8);
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      os_unfair_lock_lock((os_unfair_lock_t)(v12 + 144));
      v69 = *(_QWORD *)(v12 + 112);
      v68 = *(std::__shared_weak_count **)(v12 + 120);
      if (v68)
      {
        v70 = (unint64_t *)&v68->__shared_owners_;
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
      }
      v72 = *(std::__shared_weak_count **)(v12 + 136);
      if (v72)
      {
        v73 = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 144));
      if (v69 != v65)
      {
        v275 = v65;
        v276 = v41;
        if (v41)
        {
          v75 = (unint64_t *)&v41->__shared_owners_;
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
          v271 = v65;
          v272 = v41;
          do
            v77 = __ldxr(v75);
          while (__stxr(v77 + 1, v75));
        }
        else
        {
          v271 = v65;
          v272 = 0;
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v55 + 40))(&v273, v12 + 48, &v271);
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v55 + 48))(v12 + 48, &v275, &v273);
        v170 = v274;
        if (v274)
        {
          v171 = (unint64_t *)&v274->__shared_owners_;
          do
            v172 = __ldaxr(v171);
          while (__stlxr(v172 - 1, v171));
          if (!v172)
          {
            ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
            std::__shared_weak_count::__release_weak(v170);
          }
        }
        v173 = v272;
        if (v272)
        {
          v174 = (unint64_t *)&v272->__shared_owners_;
          do
            v175 = __ldaxr(v174);
          while (__stlxr(v175 - 1, v174));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
        }
        v176 = v276;
        if (v276)
        {
          v177 = (unint64_t *)&v276->__shared_owners_;
          do
            v178 = __ldaxr(v177);
          while (__stlxr(v178 - 1, v177));
          if (!v178)
          {
            ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
            std::__shared_weak_count::__release_weak(v176);
          }
        }
      }
      if (v72)
      {
        v179 = (unint64_t *)&v72->__shared_owners_;
        do
          v180 = __ldaxr(v179);
        while (__stlxr(v180 - 1, v179));
        if (!v180)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      if (v68)
      {
        v181 = (unint64_t *)&v68->__shared_owners_;
        do
          v182 = __ldaxr(v181);
        while (__stlxr(v182 - 1, v181));
        if (!v182)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      if (!v41)
        return v12;
      v183 = (unint64_t *)&v41->__shared_owners_;
      do
        v184 = __ldaxr(v183);
      while (__stlxr(v184 - 1, v183));
    }
LABEL_398:
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    return v12;
  }
  if (a4 != 1)
    goto LABEL_401;
  if (a3 == 2)
  {
    v12 = operator new();
    v19 = *a7;
    v267 = *((_DWORD *)a7 + 4);
    v261 = *((_QWORD *)a7 + 3);
    *(_QWORD *)v12 = off_1E6E30C80;
    *(_DWORD *)(v12 + 8) = a1;
    *(_QWORD *)(v12 + 12) = 0x200000300;
    *(_WORD *)(v12 + 20) = a2;
    *(_BYTE *)(v12 + 22) = 0;
    IVFIndexName(v12 + 24, a1, a2, 2, 1);
    *(_QWORD *)v12 = off_1E6E31BA8;
    v20 = *(_DWORD *)(v12 + 12);
    switch(v20)
    {
      case 256:
        v21 = 0;
        break;
      case 768:
        v21 = 2;
        break;
      case 512:
        v21 = 1;
        break;
      default:
        v21 = 3;
        break;
    }
    *(_QWORD *)(v12 + 48) = &off_1E6E31D00;
    v78 = v12 + 48;
    v79 = *(_DWORD *)(v12 + 16);
    if (v79 == 2)
      v80 = 1;
    else
      v80 = 3;
    v81 = *(unsigned __int16 *)(v12 + 20);
    v82 = *(unsigned __int8 *)(v12 + 22);
    if (v79 == 4)
      v83 = 0;
    else
      v83 = v80;
    *(_QWORD *)(v12 + 56) = a5;
    *(_QWORD *)(v12 + 64) = a6;
    if (v82)
      v84 = v81 | 0x80000000;
    else
      v84 = v81;
    *(_DWORD *)(v12 + 72) = a1;
    *(_WORD *)(v12 + 76) = a2;
    v85 = operator new(0x58uLL);
    v85[1] = 0;
    v85[2] = 0;
    v85[3] = a5;
    *v85 = &off_1E6E31D48;
    v85[4] = a6;
    *((_DWORD *)v85 + 12) = 0;
    v85[9] = 0;
    v85[10] = 0;
    v85[8] = 0;
    v86 = operator new();
    *(_OWORD *)(v86 + 16) = xmmword_1B8631F00;
    *(_OWORD *)(v86 + 32) = xmmword_1B8631F40;
    *(_QWORD *)v86 = a5;
    *(_QWORD *)(v86 + 8) = malloc_type_zone_malloc(a5, 0x40000uLL, 0x8176C4DFuLL);
    v85[5] = v86;
    *(_QWORD *)((char *)v85 + 52) = 0xFFFFFFFFLL;
    *(_QWORD *)(v12 + 80) = v85 + 3;
    *(_QWORD *)(v12 + 88) = v85;
    *(_OWORD *)(v12 + 96) = 0u;
    *(_OWORD *)(v12 + 112) = 0u;
    *(_OWORD *)(v12 + 128) = 0u;
    *(_DWORD *)(v12 + 144) = 0;
    *(_WORD *)(v12 + 152) = v19;
    *(_DWORD *)(v12 + 156) = v21;
    *(_DWORD *)(v12 + 160) = v83;
    *(_DWORD *)(v12 + 164) = v84;
    *(_DWORD *)(v12 + 168) = v267;
    *(_QWORD *)(v12 + 176) = v261;
    *(_QWORD *)(v12 + 184) = 0xFFFFFFFF00000000;
    *(_BYTE *)(v12 + 192) = 0;
    *(_DWORD *)(v12 + 196) = 0;
    *(_DWORD *)(v12 + 200) = 0;
    v87 = atomic_load((unsigned __int8 *)&_ZGVZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq);
    if ((v87 & 1) == 0 && __cxa_guard_acquire(&_ZGVZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq))
    {
      __cxa_atexit((void (*)(void *))_ZNSt3__110shared_ptrI9QuantizerIDF16_Li768EEED1B8nn180100Ev, &_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq, &dword_1B8270000);
      __cxa_guard_release(&_ZGVZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq);
    }
    if (_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE9onceToken != -1)
      dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE9onceToken, &__block_literal_global_401);
    v88 = _ZZN19ZeroVectorQuantizerIDF16_Li768EE14sharedInstanceEvE3zvq;
    v41 = (std::__shared_weak_count *)qword_1EF1AE7D8;
    if (qword_1EF1AE7D8)
    {
      v89 = (unint64_t *)(qword_1EF1AE7D8 + 8);
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 144));
    v92 = *(_QWORD *)(v12 + 112);
    v91 = *(std::__shared_weak_count **)(v12 + 120);
    if (v91)
    {
      v93 = (unint64_t *)&v91->__shared_owners_;
      do
        v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
    }
    v95 = *(std::__shared_weak_count **)(v12 + 136);
    if (v95)
    {
      v96 = (unint64_t *)&v95->__shared_owners_;
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 144));
    if (v92 != v88)
    {
      v275 = v88;
      v276 = v41;
      if (v41)
      {
        v98 = (unint64_t *)&v41->__shared_owners_;
        do
          v99 = __ldxr(v98);
        while (__stxr(v99 + 1, v98));
        v271 = v88;
        v272 = v41;
        do
          v100 = __ldxr(v98);
        while (__stxr(v100 + 1, v98));
      }
      else
      {
        v271 = v88;
        v272 = 0;
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v78 + 40))(&v273, v12 + 48, &v271);
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v78 + 48))(v12 + 48, &v275, &v273);
      v185 = v274;
      if (v274)
      {
        v186 = (unint64_t *)&v274->__shared_owners_;
        do
          v187 = __ldaxr(v186);
        while (__stlxr(v187 - 1, v186));
        if (!v187)
        {
          ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
          std::__shared_weak_count::__release_weak(v185);
        }
      }
      v188 = v272;
      if (v272)
      {
        v189 = (unint64_t *)&v272->__shared_owners_;
        do
          v190 = __ldaxr(v189);
        while (__stlxr(v190 - 1, v189));
        if (!v190)
        {
          ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
          std::__shared_weak_count::__release_weak(v188);
        }
      }
      v191 = v276;
      if (v276)
      {
        v192 = (unint64_t *)&v276->__shared_owners_;
        do
          v193 = __ldaxr(v192);
        while (__stlxr(v193 - 1, v192));
        if (!v193)
        {
          ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
          std::__shared_weak_count::__release_weak(v191);
        }
      }
    }
    if (v95)
    {
      v194 = (unint64_t *)&v95->__shared_owners_;
      do
        v195 = __ldaxr(v194);
      while (__stlxr(v195 - 1, v194));
      if (!v195)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    if (v91)
    {
      v196 = (unint64_t *)&v91->__shared_owners_;
      do
        v197 = __ldaxr(v196);
      while (__stlxr(v197 - 1, v196));
      if (!v197)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    if (!v41)
      return v12;
    v198 = (unint64_t *)&v41->__shared_owners_;
    do
      v184 = __ldaxr(v198);
    while (__stlxr(v184 - 1, v198));
    goto LABEL_398;
  }
  if (a3 == 1)
  {
    v12 = operator new();
    v22 = *a7;
    v268 = *((_DWORD *)a7 + 4);
    v262 = *((_QWORD *)a7 + 3);
    *(_QWORD *)v12 = off_1E6E30C80;
    *(_DWORD *)(v12 + 8) = a1;
    *(_QWORD *)(v12 + 12) = 0x200000200;
    *(_WORD *)(v12 + 20) = a2;
    *(_BYTE *)(v12 + 22) = 0;
    IVFIndexName(v12 + 24, a1, a2, 1, 1);
    *(_QWORD *)v12 = off_1E6E31570;
    v23 = *(_DWORD *)(v12 + 12);
    switch(v23)
    {
      case 256:
        v24 = 0;
        break;
      case 768:
        v24 = 2;
        break;
      case 512:
        v24 = 1;
        break;
      default:
        v24 = 3;
        break;
    }
    *(_QWORD *)(v12 + 48) = &off_1E6E316C8;
    v101 = v12 + 48;
    v102 = *(_DWORD *)(v12 + 16);
    if (v102 == 2)
      v103 = 1;
    else
      v103 = 3;
    v104 = *(unsigned __int16 *)(v12 + 20);
    v105 = *(unsigned __int8 *)(v12 + 22);
    if (v102 == 4)
      v106 = 0;
    else
      v106 = v103;
    *(_QWORD *)(v12 + 56) = a5;
    *(_QWORD *)(v12 + 64) = a6;
    if (v105)
      v107 = v104 | 0x80000000;
    else
      v107 = v104;
    *(_DWORD *)(v12 + 72) = a1;
    *(_WORD *)(v12 + 76) = a2;
    v108 = operator new(0x58uLL);
    v108[1] = 0;
    v108[2] = 0;
    v108[3] = a5;
    *v108 = &off_1E6E31710;
    v108[4] = a6;
    *((_DWORD *)v108 + 12) = 0;
    v108[9] = 0;
    v108[10] = 0;
    v108[8] = 0;
    v109 = operator new();
    *(_OWORD *)(v109 + 16) = xmmword_1B8631F00;
    *(_OWORD *)(v109 + 32) = xmmword_1B8631F30;
    *(_QWORD *)v109 = a5;
    *(_QWORD *)(v109 + 8) = malloc_type_zone_malloc(a5, 0x40000uLL, 0x8176C4DFuLL);
    v108[5] = v109;
    *(_QWORD *)((char *)v108 + 52) = 0xFFFFFFFFLL;
    *(_QWORD *)(v12 + 80) = v108 + 3;
    *(_QWORD *)(v12 + 88) = v108;
    *(_OWORD *)(v12 + 96) = 0u;
    *(_OWORD *)(v12 + 112) = 0u;
    *(_OWORD *)(v12 + 128) = 0u;
    *(_DWORD *)(v12 + 144) = 0;
    *(_WORD *)(v12 + 152) = v22;
    *(_DWORD *)(v12 + 156) = v24;
    *(_DWORD *)(v12 + 160) = v106;
    *(_DWORD *)(v12 + 164) = v107;
    *(_DWORD *)(v12 + 168) = v268;
    *(_QWORD *)(v12 + 176) = v262;
    *(_QWORD *)(v12 + 184) = 0xFFFFFFFF00000000;
    *(_BYTE *)(v12 + 192) = 0;
    *(_DWORD *)(v12 + 196) = 0;
    *(_DWORD *)(v12 + 200) = 0;
    v110 = atomic_load((unsigned __int8 *)_ZGVZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq);
    if ((v110 & 1) == 0 && __cxa_guard_acquire(_ZGVZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq))
    {
      __cxa_atexit((void (*)(void *))_ZNSt3__110shared_ptrI9QuantizerIDF16_Li512EEED1B8nn180100Ev, &_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq, &dword_1B8270000);
      __cxa_guard_release(_ZGVZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq);
    }
    if (_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE9onceToken != -1)
      dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE9onceToken, &__block_literal_global_291);
    v111 = _ZZN19ZeroVectorQuantizerIDF16_Li512EE14sharedInstanceEvE3zvq;
    v41 = (std::__shared_weak_count *)qword_1EF1AD258;
    if (qword_1EF1AD258)
    {
      v112 = (unint64_t *)(qword_1EF1AD258 + 8);
      do
        v113 = __ldxr(v112);
      while (__stxr(v113 + 1, v112));
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 144));
    v115 = *(_QWORD *)(v12 + 112);
    v114 = *(std::__shared_weak_count **)(v12 + 120);
    if (v114)
    {
      v116 = (unint64_t *)&v114->__shared_owners_;
      do
        v117 = __ldxr(v116);
      while (__stxr(v117 + 1, v116));
    }
    v118 = *(std::__shared_weak_count **)(v12 + 136);
    if (v118)
    {
      v119 = (unint64_t *)&v118->__shared_owners_;
      do
        v120 = __ldxr(v119);
      while (__stxr(v120 + 1, v119));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 144));
    if (v115 != v111)
    {
      v275 = v111;
      v276 = v41;
      if (v41)
      {
        v121 = (unint64_t *)&v41->__shared_owners_;
        do
          v122 = __ldxr(v121);
        while (__stxr(v122 + 1, v121));
        v271 = v111;
        v272 = v41;
        do
          v123 = __ldxr(v121);
        while (__stxr(v123 + 1, v121));
      }
      else
      {
        v271 = v111;
        v272 = 0;
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v101 + 40))(&v273, v12 + 48, &v271);
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v101 + 48))(v12 + 48, &v275, &v273);
      v199 = v274;
      if (v274)
      {
        v200 = (unint64_t *)&v274->__shared_owners_;
        do
          v201 = __ldaxr(v200);
        while (__stlxr(v201 - 1, v200));
        if (!v201)
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
        }
      }
      v202 = v272;
      if (v272)
      {
        v203 = (unint64_t *)&v272->__shared_owners_;
        do
          v204 = __ldaxr(v203);
        while (__stlxr(v204 - 1, v203));
        if (!v204)
        {
          ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
          std::__shared_weak_count::__release_weak(v202);
        }
      }
      v205 = v276;
      if (v276)
      {
        v206 = (unint64_t *)&v276->__shared_owners_;
        do
          v207 = __ldaxr(v206);
        while (__stlxr(v207 - 1, v206));
        if (!v207)
        {
          ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
          std::__shared_weak_count::__release_weak(v205);
        }
      }
    }
    if (v118)
    {
      v208 = (unint64_t *)&v118->__shared_owners_;
      do
        v209 = __ldaxr(v208);
      while (__stlxr(v209 - 1, v208));
      if (!v209)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    if (v114)
    {
      v210 = (unint64_t *)&v114->__shared_owners_;
      do
        v211 = __ldaxr(v210);
      while (__stlxr(v211 - 1, v210));
      if (!v211)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
    if (!v41)
      return v12;
    v212 = (unint64_t *)&v41->__shared_owners_;
    do
      v184 = __ldaxr(v212);
    while (__stlxr(v184 - 1, v212));
    goto LABEL_398;
  }
  if (a3)
    goto LABEL_401;
  v12 = operator new();
  v13 = *a7;
  v265 = *((_DWORD *)a7 + 4);
  v259 = *((_QWORD *)a7 + 3);
  *(_QWORD *)v12 = off_1E6E30C80;
  *(_DWORD *)(v12 + 8) = a1;
  *(_QWORD *)(v12 + 12) = 0x200000100;
  *(_WORD *)(v12 + 20) = a2;
  *(_BYTE *)(v12 + 22) = 0;
  IVFIndexName(v12 + 24, a1, a2, 0, 1);
  *(_QWORD *)v12 = off_1E6E30B28;
  v14 = *(_DWORD *)(v12 + 12);
  switch(v14)
  {
    case 256:
      v15 = 0;
      break;
    case 768:
      v15 = 2;
      break;
    case 512:
      v15 = 1;
      break;
    default:
      v15 = 3;
      break;
  }
  *(_QWORD *)(v12 + 48) = &off_1E6E30DD8;
  v31 = v12 + 48;
  v32 = *(_DWORD *)(v12 + 16);
  if (v32 == 2)
    v33 = 1;
  else
    v33 = 3;
  v34 = *(unsigned __int16 *)(v12 + 20);
  v35 = *(unsigned __int8 *)(v12 + 22);
  if (v32 == 4)
    v36 = 0;
  else
    v36 = v33;
  *(_QWORD *)(v12 + 56) = a5;
  *(_QWORD *)(v12 + 64) = a6;
  if (v35)
    v37 = v34 | 0x80000000;
  else
    v37 = v34;
  *(_DWORD *)(v12 + 72) = a1;
  *(_WORD *)(v12 + 76) = a2;
  v38 = operator new(0x58uLL);
  v38[1] = 0;
  v38[2] = 0;
  v38[3] = a5;
  *v38 = &off_1E6E30E20;
  v38[4] = a6;
  *((_DWORD *)v38 + 12) = 0;
  v38[9] = 0;
  v38[10] = 0;
  v38[8] = 0;
  v39 = operator new();
  *(_OWORD *)(v39 + 16) = xmmword_1B8631F00;
  *(_OWORD *)(v39 + 32) = xmmword_1B8631F50;
  *(_QWORD *)v39 = a5;
  *(_QWORD *)(v39 + 8) = malloc_type_zone_malloc(a5, 0x40000uLL, 0x8176C4DFuLL);
  v38[5] = v39;
  *(_QWORD *)((char *)v38 + 52) = 0xFFFFFFFFLL;
  *(_QWORD *)(v12 + 80) = v38 + 3;
  *(_QWORD *)(v12 + 88) = v38;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_DWORD *)(v12 + 144) = 0;
  *(_WORD *)(v12 + 152) = v13;
  *(_DWORD *)(v12 + 156) = v15;
  *(_DWORD *)(v12 + 160) = v36;
  *(_DWORD *)(v12 + 164) = v37;
  *(_DWORD *)(v12 + 168) = v265;
  *(_QWORD *)(v12 + 176) = v259;
  *(_QWORD *)(v12 + 184) = 0xFFFFFFFF00000000;
  *(_BYTE *)(v12 + 192) = 0;
  *(_DWORD *)(v12 + 196) = 0;
  *(_DWORD *)(v12 + 200) = 0;
  v40 = atomic_load((unsigned __int8 *)&_ZGVZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq);
  if ((v40 & 1) == 0 && __cxa_guard_acquire(&_ZGVZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq))
  {
    __cxa_atexit((void (*)(void *))_ZNSt3__110shared_ptrI9QuantizerIDF16_Li256EEED1B8nn180100Ev, &_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq, &dword_1B8270000);
    __cxa_guard_release(&_ZGVZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq);
  }
  if (_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE9onceToken != -1)
    dispatch_once(&_ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE9onceToken, &__block_literal_global_134);
  v42 = _ZZN19ZeroVectorQuantizerIDF16_Li256EE14sharedInstanceEvE3zvq;
  v41 = (std::__shared_weak_count *)qword_1EF1AE5A8;
  if (qword_1EF1AE5A8)
  {
    v43 = (unint64_t *)(qword_1EF1AE5A8 + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v12 + 144));
  v46 = *(_QWORD *)(v12 + 112);
  v45 = *(std::__shared_weak_count **)(v12 + 120);
  if (v45)
  {
    v47 = (unint64_t *)&v45->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v49 = *(std::__shared_weak_count **)(v12 + 136);
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 144));
  if (v46 != v42)
  {
    v275 = v42;
    v276 = v41;
    if (v41)
    {
      v52 = (unint64_t *)&v41->__shared_owners_;
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
      v271 = v42;
      v272 = v41;
      do
        v54 = __ldxr(v52);
      while (__stxr(v54 + 1, v52));
    }
    else
    {
      v271 = v42;
      v272 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v31 + 40))(&v273, v12 + 48, &v271);
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v31 + 48))(v12 + 48, &v275, &v273);
    v241 = v274;
    if (v274)
    {
      v242 = (unint64_t *)&v274->__shared_owners_;
      do
        v243 = __ldaxr(v242);
      while (__stlxr(v243 - 1, v242));
      if (!v243)
      {
        ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
        std::__shared_weak_count::__release_weak(v241);
      }
    }
    v244 = v272;
    if (v272)
    {
      v245 = (unint64_t *)&v272->__shared_owners_;
      do
        v246 = __ldaxr(v245);
      while (__stlxr(v246 - 1, v245));
      if (!v246)
      {
        ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
        std::__shared_weak_count::__release_weak(v244);
      }
    }
    v247 = v276;
    if (v276)
    {
      v248 = (unint64_t *)&v276->__shared_owners_;
      do
        v249 = __ldaxr(v248);
      while (__stlxr(v249 - 1, v248));
      if (!v249)
      {
        ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
        std::__shared_weak_count::__release_weak(v247);
      }
    }
  }
  if (v49)
  {
    v250 = (unint64_t *)&v49->__shared_owners_;
    do
      v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
    if (!v251)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v45)
  {
    v252 = (unint64_t *)&v45->__shared_owners_;
    do
      v253 = __ldaxr(v252);
    while (__stlxr(v253 - 1, v252));
    if (!v253)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v41)
  {
    v254 = (unint64_t *)&v41->__shared_owners_;
    do
      v184 = __ldaxr(v254);
    while (__stlxr(v184 - 1, v254));
    goto LABEL_398;
  }
  return v12;
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E32FE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E32FE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;

  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
  {
    malloc_zone_free(*(malloc_zone_t **)v2, *(void **)(v2 + 8));
    JUMPOUT(0x1BCCB06A4);
  }
}

void IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s(_QWORD *a1)
{
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s(a1);
  JUMPOUT(0x1BCCB06A4);
}

void IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getQuantizer(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  os_unfair_lock_s *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v4 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v6 = *(_QWORD *)(a1 + 64);
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(std::__shared_weak_count **)(a1 + 88);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  os_unfair_lock_unlock(v4);
  *a2 = v6;
  a2[1] = v5;
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (!v9)
    goto LABEL_14;
  v14 = (unint64_t *)&v9->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v5)
      return;
  }
  else
  {
LABEL_14:
    if (!v5)
      return;
  }
  v16 = (unint64_t *)&v5->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  os_unfair_lock_s *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v9 = *(_QWORD *)(a1 + 80);
  v8 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v8)
  {
    os_unfair_lock_unlock(v4);
    *a2 = v9;
    a2[1] = 0;
    if (!v5)
      return;
    goto LABEL_15;
  }
  v10 = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  os_unfair_lock_unlock(v4);
  *a2 = v9;
  a2[1] = v8;
  do
    v12 = __ldxr(v10);
  while (__stxr(v12 + 1, v10));
  do
    v13 = __ldaxr(v10);
  while (__stlxr(v13 - 1, v10));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v5)
  {
LABEL_15:
    v14 = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

unint64_t IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getVectorAtOffset(uint64_t a1, unsigned int a2)
{
  return vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 16), a2, 3092);
}

void IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::newPartitions(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  os_unfair_lock_s *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  const char *v14;
  size_t v15;
  void *v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  malloc_zone_t *v20;
  uint64_t v21;
  _DWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  unint64_t Ptr;
  int v32;
  int v33;
  NSObject *v34;
  void **v35;
  int v36;
  int v37;
  char *v38;
  _QWORD *v39;
  int v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  const char *v47;
  void *v48[2];
  char v49;
  void *__dst[2];
  unint64_t v51;
  void *__p[3];
  __int16 v53;
  _QWORD *v54;
  __int16 v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v6 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v7 = *(std::__shared_weak_count **)(a1 + 72);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v11 = *(_QWORD *)(a1 + 80);
  v10 = *(std::__shared_weak_count **)(a1 + 88);
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  os_unfair_lock_unlock(v6);
  v14 = ".partitions";
  if (v11 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11))
    v14 = ".tmp.partitions";
  v15 = strlen(v14);
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
LABEL_60:
    abort();
  v16 = (void *)v15;
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v17 = (void **)operator new(v18 + 1);
    __dst[1] = v16;
    v51 = v19 | 0x8000000000000000;
    __dst[0] = v17;
    goto LABEL_17;
  }
  HIBYTE(v51) = v15;
  v17 = __dst;
  if (v15)
LABEL_17:
    memcpy(v17, v14, (size_t)v16);
  *((_BYTE *)v16 + (_QWORD)v17) = 0;
  v20 = malloc_default_zone();
  if (SHIBYTE(v51) < 0)
    operator delete(__dst[0]);
  v21 = operator new();
  v22 = (_DWORD *)v21;
  v23 = *(std::__shared_weak_count **)(a2 + 8);
  __p[0] = *(void **)a2;
  __p[1] = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionStore<vi_onefixedsize_memory_allocator>(v21, v20, 0, __p);
    do
      v26 = __ldaxr(v24);
    while (__stlxr(v26 - 1, v24));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  else
  {
    PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionStore<vi_onefixedsize_memory_allocator>(v21, v20, 0, __p);
  }
  *a3 = v22;
  v27 = (_QWORD *)operator new();
  *v27 = &off_1E6E31210;
  v27[1] = 0;
  v27[2] = 0;
  v27[3] = v22;
  a3[1] = v27;
  v28 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v28 + 24))
  {
    v29 = 0;
    do
    {
      memset(__p, 0, sizeof(__p));
      v30 = *(void **)a2;
      Ptr = vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v28 + 16), v29, 3092);
      (*(void (**)(void **__return_ptr, void *, unint64_t, uint64_t))(*(_QWORD *)v30 + 72))(__p, v30, Ptr, 1);
      (*(void (**)(_DWORD *, _QWORD, unint64_t, float))(*(_QWORD *)v22 + 56))(v22, *(unsigned int *)__p[0], v29, *((float *)__p[0] + 1));
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v29;
      v28 = *(_QWORD *)(a1 + 32);
    }
    while (v29 < *(unsigned int *)(v28 + 24));
  }
  (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v22 + 112))(v22, 0);
  v32 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 24);
  if (v32)
  {
    v33 = *__error();
    v34 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, _DWORD *))(*(_QWORD *)v22 + 144))(v48, v22);
      if (v49 >= 0)
        v35 = v48;
      else
        v35 = (void **)v48[0];
      v36 = v22[17];
      v37 = v22[18];
      v38 = *(char **)a2;
      v39 = (_QWORD *)(*(_QWORD *)a2 + 8);
      if (v38[31] < 0)
        v39 = (_QWORD *)*v39;
      v40 = (*(uint64_t (**)(char *))(*(_QWORD *)v38 + 16))(v38);
      LODWORD(__p[0]) = 136316162;
      *(void **)((char *)__p + 4) = v35;
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = v37;
      WORD1(__p[2]) = 1024;
      HIDWORD(__p[2]) = v36;
      v53 = 2080;
      v54 = v39;
      v55 = 1024;
      v56 = v40;
      _os_log_impl(&dword_1B8270000, v34, OS_LOG_TYPE_DEFAULT, "Create new partitions %s(%u/%u) for new quantizer %s(%u)", (uint8_t *)__p, 0x28u);
      if (v49 < 0)
        operator delete(v48[0]);
    }
    *__error() = v33;
    v32 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 24);
  }
  if (v22[18] != v32)
  {
    v45 = __si_assert_copy_extra_268();
    v46 = v45;
    v47 = "";
    if (v45)
      v47 = v45;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2363, "newPartitions->nVectors() == vectors->count()", v47);
    free(v46);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    goto LABEL_60;
  }
  if (v10)
  {
    v41 = (unint64_t *)&v10->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v7)
  {
    v43 = (unint64_t *)&v7->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::replaceQuantizer(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  std::__shared_weak_count *v8;
  __int128 *v9;
  char *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  _DWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  _DWORD *v18;
  NSObject *v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  void **v23;
  int v24;
  void **v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  const char *v47;
  char *v48;
  const char *v49;
  _QWORD *v50;
  _QWORD *v51;
  int v52;
  int v53;
  int v54;
  os_unfair_lock_s *v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *__p[2];
  char v61;
  void *v62[2];
  char v63;
  uint8_t buf[4];
  _QWORD *v65;
  __int16 v66;
  int v67;
  __int16 v68;
  _QWORD *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  void **v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  void **v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v6 = (os_unfair_lock_s *)(a1 + 136);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  v7 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v10 = *(char **)(a1 + 64);
  v8 = *(std::__shared_weak_count **)(a1 + 72);
  v9 = (__int128 *)(a1 + 64);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(_DWORD **)(a1 + 80);
  v13 = *(std::__shared_weak_count **)(a1 + 88);
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
  v18 = (_DWORD *)*a3;
  if (v17 != *(_DWORD *)(*a3 + 68))
  {
    v45 = __si_assert_copy_extra_268();
    v46 = v45;
    v47 = "";
    if (v45)
      v47 = v45;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2381, "newQuantizer->count() == newPartitions->nPartitions()", v47);
LABEL_64:
    free(v46);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 24) != v18[18])
  {
    v48 = __si_assert_copy_extra_268();
    v46 = v48;
    v49 = "";
    if (v48)
      v49 = v48;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2382, "vectors->count() == newPartitions->nVectors()", v49);
    goto LABEL_64;
  }
  if (v10 && v14)
  {
    v56 = *__error();
    v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = v10 + 8;
      if (v10[31] < 0)
        v20 = (_QWORD *)*v20;
      v51 = v20;
      v21 = (*(uint64_t (**)(char *))(*(_QWORD *)v10 + 16))(v10);
      v22 = (_QWORD *)(*a2 + 8);
      v55 = v6;
      v54 = v21;
      if (*(char *)(*a2 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v50 = v22;
      v53 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
      v23 = v62;
      (*(void (**)(void **__return_ptr, _DWORD *))(*(_QWORD *)v14 + 144))(v62, v14);
      if (v63 < 0)
        v23 = (void **)v62[0];
      v24 = v14[18];
      v52 = v14[17];
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a3 + 144))(__p);
      v25 = __p;
      if (v61 < 0)
        v25 = (void **)__p[0];
      v26 = *(_DWORD *)(*a3 + 68);
      v27 = *(_DWORD *)(*a3 + 72);
      *(_DWORD *)buf = 136317442;
      v65 = v51;
      v66 = 1024;
      v67 = v54;
      v68 = 2080;
      v69 = v50;
      v70 = 1024;
      v71 = v53;
      v72 = 2080;
      v73 = v23;
      v74 = 1024;
      v75 = v24;
      v76 = 1024;
      v77 = v52;
      v78 = 2080;
      v79 = v25;
      v80 = 1024;
      v81 = v27;
      v82 = 1024;
      v83 = v26;
      _os_log_impl(&dword_1B8270000, v19, OS_LOG_TYPE_DEFAULT, "Replace quantizer %s(%u) -> %s(%u), partitions %s(%u/%u) -> %s(%u/%u)", buf, 0x4Eu);
      if (v61 < 0)
        operator delete(__p[0]);
      v6 = v55;
      if (v63 < 0)
        operator delete(v62[0]);
    }
    *__error() = v56;
    v18 = (_DWORD *)*a3;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v18 + 24))(v18))
    v28 = v14 == 0;
  else
    v28 = 1;
  if (!v28 && (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v14 + 24))(v14))
    (*(void (**)(_QWORD, _DWORD *))(*(_QWORD *)*a3 + 168))(*a3, v14);
  v29 = a2[1];
  *(_QWORD *)&v57 = *a2;
  *((_QWORD *)&v57 + 1) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = (std::__shared_weak_count *)a3[1];
  v58 = *a3;
  v59 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  os_unfair_lock_lock(v7);
  std::swap[abi:nn180100]<IVFVectorIndexTemplate<float,768>::QuantizerPartitions>(v9, &v57);
  os_unfair_lock_unlock(v7);
  v35 = v59;
  if (v59)
  {
    v36 = (unint64_t *)&v59->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  os_unfair_lock_unlock(v6);
  if (v13)
  {
    v41 = (unint64_t *)&v13->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v8)
  {
    v43 = (unint64_t *)&v8->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionStore<vi_onefixedsize_memory_allocator>(uint64_t a1, malloc_zone_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string v17;
  std::string v18;

  v7 = AnyPartitionStore::AnyPartitionStore(a1, a4);
  *(_QWORD *)v7 = off_1E6E30FD8;
  *(_QWORD *)(v7 + 80) = 0;
  *(_DWORD *)(v7 + 88) = -1;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)(v7 + 112) = 0;
  *(_QWORD *)(v7 + 96) = 0;
  std::to_string(&v17, *(_DWORD *)(v7 + 76));
  v8 = std::string::insert(&v17, 0, "<memory>(");
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v18, ")");
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)(a1 + 120) = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 136) = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v17.__r_.__value_.__l.__data_);
LABEL_3:
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v12 = 4108 * (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a4 + 24))(*a4);
  v13 = operator new();
  *(_QWORD *)(v13 + 16) = v12;
  *(_OWORD *)(v13 + 24) = xmmword_1B8631F60;
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)v13 = a2;
  *(_QWORD *)(v13 + 8) = malloc_type_zone_malloc(a2, v12, 0x8176C4DFuLL);
  v14 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v13;
  if (v14)
  {
    malloc_zone_free(*(malloc_zone_t **)v14, *(void **)(v14 + 8));
    MEMORY[0x1BCCB06A4](v14, 0x10A0C40CA010D23);
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a4 + 24))(*a4))
  {
    v15 = 0;
    do
    {
      (**(void (***)(uint64_t, uint64_t))a1)(a1, v15);
      v15 = (v15 + 1);
    }
    while (v15 < (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a4 + 24))(*a4));
  }
  return a1;
}

void std::__shared_ptr_pointer<PartitionStore<vi_onefixedsize_memory_allocator,512> *,std::shared_ptr<AnyPartitionStore>::__shared_ptr_default_delete<AnyPartitionStore,PartitionStore<vi_onefixedsize_memory_allocator,512>>,std::allocator<PartitionStore<vi_onefixedsize_memory_allocator,512>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

uint64_t std::__shared_ptr_pointer<PartitionStore<vi_onefixedsize_memory_allocator,512> *,std::shared_ptr<AnyPartitionStore>::__shared_ptr_default_delete<AnyPartitionStore,PartitionStore<vi_onefixedsize_memory_allocator,512>>,std::allocator<PartitionStore<vi_onefixedsize_memory_allocator,512>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::newPartition(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  size_t OffsetFromEnd;
  unsigned int v8;
  _DWORD *Ptr;
  unint64_t v10;
  char *v11;
  _DWORD *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unsigned int *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  unsigned int v27;
  unint64_t v28;
  char *v29;
  char *v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  int v39;
  char *v41;
  char *v42;
  const char *v43;
  char *v44;
  const char *v45;
  char *v46;
  char *v47;
  const char *v48;
  char *v49;
  const char *v50;
  uint64_t v51;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
  {
    v41 = __si_assert_copy_extra_268();
    v42 = v41;
    v43 = "";
    if (v41)
      v43 = v41;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 872, "_quantizer != nullptr", v43);
LABEL_58:
    free(v42);
    if (__valid_fs(-1))
      v51 = 2989;
    else
      v51 = 3072;
    *(_DWORD *)v51 = -559038737;
    abort();
  }
  v5 = *(_DWORD *)(a1 + 68);
  if (v5 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3))
  {
    v44 = __si_assert_copy_extra_268();
    v42 = v44;
    v45 = "";
    if (v44)
      v45 = v44;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1317, "n_partitions <= quantizer()->count()", v45);
    goto LABEL_58;
  }
  v6 = *(_DWORD *)(a1 + 68);
  if (v6 > *(_DWORD *)(a1 + 88) - 1)
  {
    v46 = __si_assert_copy_extra_268();
    v47 = v46;
    v48 = "";
    if (v46)
      v48 = v46;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1318, "n_partitions <= max_partitions - 1", v48);
    free(v47);
    if (!__valid_fs(-1))
    {
      MEMORY[0xC00] = -559038737;
      abort();
    }
    MEMORY[0xBAD] = -559038737;
    goto LABEL_54;
  }
  if (v6 != (_DWORD)a2)
  {
    v49 = __si_assert_copy_extra_268();
    v42 = v49;
    v50 = "";
    if (v49)
      v50 = v49;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1320, "centOffset == partID", v50);
    goto LABEL_58;
  }
  OffsetFromEnd = vi_onefixedsize_memory_allocator::allocateOffsetFromEnd(*(_QWORD *)(a1 + 80), 0x100Cu);
  v8 = OffsetFromEnd;
  Ptr = (_DWORD *)vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(a1 + 80), OffsetFromEnd, 4108);
  bzero(Ptr, 0x100CuLL);
  Ptr[1] = a2;
  *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(a1 + 80), v8, 4108) + 12) = -1;
  ++*(_DWORD *)(a1 + 68);
  v11 = *(char **)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 112);
  if ((unint64_t)v11 >= v10)
  {
    v13 = *(char **)(a1 + 96);
    v14 = (v11 - v13) >> 2;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 62)
      goto LABEL_54;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v15)
      v15 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 62)
        goto LABEL_63;
      v18 = operator new(4 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = (unsigned int *)&v18[4 * v14];
    v20 = &v18[4 * v17];
    *v19 = v8;
    v12 = v19 + 1;
    if (v11 != v13)
    {
      v21 = v11 - v13 - 4;
      if (v21 < 0x2C)
        goto LABEL_66;
      if ((unint64_t)(v13 - v18) < 0x20)
        goto LABEL_66;
      v22 = (v21 >> 2) + 1;
      v23 = &v18[4 * v14 - 16];
      v24 = v11 - 16;
      v25 = v22 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v26 = *(_OWORD *)v24;
        *(v23 - 1) = *((_OWORD *)v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 32;
        v25 -= 8;
      }
      while (v25);
      v19 -= v22 & 0x7FFFFFFFFFFFFFF8;
      v11 -= 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
      if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_66:
        do
        {
          v27 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *--v19 = v27;
        }
        while (v11 != v13);
      }
    }
    *(_QWORD *)(a1 + 96) = v19;
    *(_QWORD *)(a1 + 104) = v12;
    *(_QWORD *)(a1 + 112) = v20;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *(_DWORD *)v11 = v8;
    v12 = v11 + 4;
  }
  *(_QWORD *)(a1 + 104) = v12;
  v29 = *(char **)(a1 + 152);
  v28 = *(_QWORD *)(a1 + 160);
  if ((unint64_t)v29 < v28)
  {
    *(_QWORD *)v29 = a1;
    *((_DWORD *)v29 + 2) = a2;
    v30 = v29 + 16;
    goto LABEL_43;
  }
  v31 = *(_BYTE **)(a1 + 144);
  v32 = (v29 - v31) >> 4;
  v33 = v32 + 1;
  if ((unint64_t)(v32 + 1) >> 60)
LABEL_54:
    abort();
  v34 = v28 - (_QWORD)v31;
  if (v34 >> 3 > v33)
    v33 = v34 >> 3;
  if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
    v35 = 0xFFFFFFFFFFFFFFFLL;
  else
    v35 = v33;
  if (!v35)
  {
    v36 = 0;
    goto LABEL_38;
  }
  if (v35 >> 60)
LABEL_63:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v36 = (char *)operator new(16 * v35);
LABEL_38:
  v37 = &v36[16 * v32];
  *(_QWORD *)v37 = a1;
  *((_DWORD *)v37 + 2) = a2;
  v30 = v37 + 16;
  if (v29 != v31)
  {
    do
    {
      v38 = *((_QWORD *)v29 - 2);
      v29 -= 16;
      v39 = *((_DWORD *)v29 + 2);
      *((_QWORD *)v37 - 2) = v38;
      v37 -= 16;
      *((_DWORD *)v37 + 2) = v39;
    }
    while (v29 != v31);
    v29 = *(char **)(a1 + 144);
  }
  *(_QWORD *)(a1 + 144) = v37;
  *(_QWORD *)(a1 + 152) = v30;
  *(_QWORD *)(a1 + 160) = &v36[16 * v35];
  if (v29)
    operator delete(v29);
LABEL_43:
  *(_QWORD *)(a1 + 152) = v30;
  return a2;
}

void PartitionStore<vi_onefixedsize_memory_allocator,512>::~PartitionStore(uint64_t a1)
{
  PartitionStore<vi_onefixedsize_memory_allocator,512>::~PartitionStore(a1);
  JUMPOUT(0x1BCCB06A4);
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::isPersistent()
{
  return 0;
}

unint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::farthestVectorInPartition(uint64_t a1, unsigned int a2)
{
  return vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(a1 + 80), *(unsigned int *)(*(_QWORD *)(a1 + 96) + 4 * a2), 4108)+ 12;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::centOffsetForPartition(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  const char *v6;

  if (*(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(a1 + 80), *(unsigned int *)(*(_QWORD *)(a1 + 96) + 4 * a2), 4108)+ 4) != (_DWORD)a2)
  {
    v4 = __si_assert_copy_extra_268();
    v5 = v4;
    v6 = "";
    if (v4)
      v6 = v4;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1257, "block->centOffset == partitionID", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a2;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::vectorCountInPartition(uint64_t a1, unsigned int a2)
{
  int v2;
  BOOL v3;
  unsigned int v4;

  v2 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(a1 + 80), *(unsigned int *)(*(_QWORD *)(a1 + 96) + 4 * a2), 4108)+ 8);
  v3 = v2 != 0;
  v4 = v2 - 1;
  if (v3)
    return v4;
  else
    return 0;
}

void PartitionStore<vi_onefixedsize_memory_allocator,512>::append(uint64_t a1, unsigned int a2, unsigned int a3, float a4)
{
  uint64_t v7;
  int v8;
  float *Ptr;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  float v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  size_t OffsetFromEnd;
  unsigned int v22;
  _DWORD *v23;
  char *v24;
  char *v25;
  const char *v26;
  _DWORD v27[2];

  v7 = *(unsigned int *)(*(_QWORD *)(a1 + 96) + 4 * a2);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  Ptr = (float *)vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(a1 + 80), v7, 4108);
  if (*((_DWORD *)Ptr + 1) != v8)
    goto LABEL_21;
  v10 = *((_DWORD *)Ptr + 2);
  if (v10)
  {
    if (Ptr[4] < a4)
    {
      *((_DWORD *)Ptr + 3) = a3;
      Ptr[4] = a4;
    }
    if (v10 >= 0x200)
    {
      *((_DWORD *)Ptr + 2) = v10 + 1;
      v11 = *(unsigned int *)Ptr;
      if ((_DWORD)v11)
        goto LABEL_17;
LABEL_16:
      OffsetFromEnd = vi_onefixedsize_memory_allocator::allocateOffsetFromEnd(*(_QWORD *)(a1 + 80), 0x100Cu);
      v22 = OffsetFromEnd;
      v23 = (_DWORD *)vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(a1 + 80), OffsetFromEnd, 4108);
      bzero(v23, 0x100CuLL);
      v23[1] = v8;
      v11 = v22;
      *(_DWORD *)vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(a1 + 80), v7, 4108) = v22;
LABEL_17:
      while (1)
      {
        Ptr = (float *)vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(a1 + 80), v11, 4108);
        if (*((_DWORD *)Ptr + 1) != v8)
          break;
        v10 = *((_DWORD *)Ptr + 2);
        if (v10 < 0x200)
          goto LABEL_9;
        *((_DWORD *)Ptr + 2) = v10 + 1;
        v7 = v11;
        v11 = *(unsigned int *)Ptr;
        if (!(_DWORD)v11)
          goto LABEL_16;
      }
LABEL_21:
      v24 = __si_assert_copy_extra_268();
      v25 = v24;
      v26 = "";
      if (v24)
        v26 = v24;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1288, "block->centOffset == centOffset", v26);
      free(v25);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
  }
  else
  {
    Ptr[4] = a4;
    v10 = 1;
    *((_DWORD *)Ptr + 2) = 1;
    *((_DWORD *)Ptr + 3) = a3;
  }
LABEL_9:
  *((_DWORD *)Ptr + 2) = v10 + 1;
  v12 = (unsigned int *)&Ptr[2 * v10];
  v12[3] = a3;
  *((float *)v12 + 4) = a4;
  if (a4 == 0.0)
  {
    v13 = 3.4028e38;
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 64);
    v15 = v14 / 0xADC8;
    v16 = 48271 * (v14 % 0xADC8);
    v15 *= 3399;
    v17 = v16 >= v15;
    v18 = v16 - v15;
    if (v17)
      v19 = 0;
    else
      v19 = 0x7FFFFFFF;
    v20 = v19 + v18;
    *(_DWORD *)(a1 + 64) = v20;
    v13 = (float)-logf((float)(v20 - 1) * 4.6566e-10) / a4;
  }
  v27[0] = a3;
  *(float *)&v27[1] = v13;
  MaxSizePriorityQueue<AnyPartitionStore::CandidateEntry,std::vector<AnyPartitionStore::CandidateEntry>,AnyPartitionStore::CandidateQueue::Lesser>::push((_QWORD *)(a1 + 24), (uint64_t)v27);
  ++*(_DWORD *)(a1 + 72);
}

void PartitionStore<vi_onefixedsize_memory_allocator,512>::enumeratePartitions(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _OWORD *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void *__p;
  void *v27;
  char *v28;

  v2 = a2;
  if (!a1[17])
  {
    v5 = 0;
    __p = 0;
    v27 = 0;
    v28 = 0;
    goto LABEL_37;
  }
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  do
  {
    if (v7 < v6)
    {
      *(_DWORD *)v7 = v4;
      v7 += 4;
      goto LABEL_4;
    }
    v8 = (v7 - v5) >> 2;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62)
      goto LABEL_42;
    if ((v6 - v5) >> 1 > v9)
      v9 = (v6 - v5) >> 1;
    if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
    {
      if (v10 >> 62)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v11 = operator new(4 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[4 * v8];
    *(_DWORD *)v12 = v4;
    v13 = v12 + 4;
    if (v7 != v5)
    {
      v14 = v7 - 4 - v5;
      if (v14 >= 0xBC)
      {
        if (&v11[v7 - v5 - 4 - (v14 & 0xFFFFFFFFFFFFFFFCLL)] > &v11[v7 - v5 - 4])
        {
          v15 = v7;
        }
        else if (&v7[-(v14 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
        {
          v15 = v7;
        }
        else if ((unint64_t)(v5 - v11) >= 0x20)
        {
          v16 = (v14 >> 2) + 1;
          v15 = &v7[-4 * (v16 & 0x7FFFFFFFFFFFFFF8)];
          v17 = &v11[4 * v8 - 16];
          v18 = v7 - 16;
          v19 = v16 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v20 = *(_OWORD *)v18;
            *(v17 - 1) = *((_OWORD *)v18 - 1);
            *v17 = v20;
            v17 -= 2;
            v18 -= 32;
            v19 -= 8;
          }
          while (v19);
          v12 -= 4 * (v16 & 0x7FFFFFFFFFFFFFF8);
          if (v16 == (v16 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_29;
        }
        else
        {
          v15 = v7;
        }
      }
      else
      {
        v15 = v7;
      }
      do
      {
        v21 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v12 - 1) = v21;
        v12 -= 4;
      }
      while (v15 != v5);
    }
LABEL_29:
    v6 = &v11[4 * v10];
    if (v5)
      operator delete(v5);
    v5 = v12;
    v7 = v13;
LABEL_4:
    ++v4;
  }
  while (v4 < a1[17]);
  __p = 0;
  v27 = 0;
  v28 = 0;
  v22 = v7 - v5;
  if (v7 != v5)
  {
    if (v22 < 0)
LABEL_42:
      abort();
    v23 = (char *)operator new(v7 - v5);
    v24 = &v23[4 * (v22 >> 2)];
    __p = v23;
    v28 = v24;
    memcpy(v23, v5, v7 - v5);
    v27 = v24;
  }
  v2 = a2;
LABEL_37:
  (*(void (**)(_DWORD *, void **, uint64_t))(*(_QWORD *)a1 + 72))(a1, &__p, v2);
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  if (v5)
    operator delete(v5);
}

void PartitionStore<vi_onefixedsize_memory_allocator,512>::enumeratePartitions(_QWORD *a1, unsigned int **a2, uint64_t a3, __n128 a4)
{
  unsigned int *v4;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __n128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  __n128 *v57;
  __n128 *v58;
  __n128 v59;
  __int128 v60;
  __n128 v61;
  __int128 v62;
  __n128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  __int128 v70;
  __n128 v71;
  __int128 v72;
  int v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  char v83;
  _OWORD v84[3];
  __n128 v85;
  __int128 v86;
  uint64_t v87;
  __n128 v88;
  __int128 v89;
  uint64_t v90;
  __n128 v91;
  __int128 v92;

  v4 = *a2;
  if (*a2 == a2[1])
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      v12 = *v4;
      if ((*(unsigned int (**)(_QWORD *, uint64_t))(*a1 + 48))(a1, v12))
      {
        v13 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v12);
        v14 = a1[18] + 16 * v12;
        memset(v84, 0, sizeof(v84));
        PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::PartitionEnumerator((uint64_t)v84, *(_QWORD *)v14, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 96) + 4 * *(unsigned int *)(v14 + 8)));
        *(_QWORD *)&v84[0] = &off_1E6E31178;
        PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::next((uint64_t)v84);
        v92 = 0uLL;
        v88 = *(__n128 *)((char *)v84 + 8);
        v89 = *(_OWORD *)((char *)&v84[1] + 8);
        v90 = *((_QWORD *)&v84[2] + 1);
        v85 = v91;
        v86 = 0uLL;
        if (v7 < v8)
        {
          *(_QWORD *)v7 = &off_1E6E311A8;
          v9 = v90;
          v10 = v88;
          *(_OWORD *)(v7 + 24) = v89;
          *(__n128 *)(v7 + 8) = v10;
          *((_QWORD *)v7 + 5) = v9;
          *((_QWORD *)v7 + 6) = &off_1E6E31178;
          *(_QWORD *)v7 = &off_1E6E31178;
          *((_QWORD *)v7 + 7) = 0;
          a4 = v85;
          v11 = v86;
          *((__n128 *)v7 + 4) = v85;
          *((_OWORD *)v7 + 5) = v11;
          *((_DWORD *)v7 + 24) = v13;
          v7 += 104;
        }
        else
        {
          v15 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v7[-v6] >> 3) + 1;
          if (v15 > 0x276276276276276)
            abort();
          if (0x9D89D89D89D89D8ALL * ((uint64_t)&v8[-v6] >> 3) > v15)
            v15 = 0x9D89D89D89D89D8ALL * ((uint64_t)&v8[-v6] >> 3);
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v8[-v6] >> 3)) >= 0x13B13B13B13B13BLL)
            v16 = 0x276276276276276;
          else
            v16 = v15;
          if (v16)
          {
            if (v16 > 0x276276276276276)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v17 = (char *)operator new(104 * v16);
          }
          else
          {
            v17 = 0;
          }
          v18 = v89;
          v19 = &v17[8 * ((uint64_t)&v7[-v6] >> 3)];
          *(__n128 *)(v19 + 8) = v88;
          *(_OWORD *)(v19 + 24) = v18;
          v20 = v90;
          *(_QWORD *)v19 = &off_1E6E31178;
          *((_QWORD *)v19 + 6) = &off_1E6E31178;
          *((_QWORD *)v19 + 7) = 0;
          a4 = v85;
          v21 = v86;
          *((__n128 *)v19 + 4) = v85;
          *((_OWORD *)v19 + 5) = v21;
          *((_QWORD *)v19 + 5) = v20;
          *((_DWORD *)v19 + 24) = v13;
          if (v7 == (char *)v6)
          {
            v27 = &v17[8 * ((uint64_t)&v7[-v6] >> 3)];
          }
          else
          {
            v22 = 0;
            do
            {
              v23 = &v19[v22];
              *((_QWORD *)v23 - 13) = &off_1E6E311A8;
              v24 = *(_OWORD *)&v7[v22 - 80];
              v25 = *(_QWORD *)&v7[v22 - 64];
              *((_OWORD *)v23 - 6) = *(_OWORD *)&v7[v22 - 96];
              *((_OWORD *)v23 - 5) = v24;
              *((_QWORD *)v23 - 13) = &off_1E6E31178;
              *((_QWORD *)v23 - 8) = v25;
              *((_QWORD *)v23 - 7) = &off_1E6E311A8;
              a4 = *(__n128 *)&v7[v22 - 48];
              v26 = *(_OWORD *)&v7[v22 - 32];
              *((_QWORD *)v23 - 2) = *(_QWORD *)&v7[v22 - 16];
              *((__n128 *)v23 - 3) = a4;
              *((_OWORD *)v23 - 2) = v26;
              *((_QWORD *)v23 - 7) = &off_1E6E31178;
              *((_DWORD *)v23 - 2) = *(_DWORD *)&v7[v22 - 8];
              v22 -= 104;
            }
            while (&v7[v22] != (char *)v6);
            v27 = &v19[v22];
          }
          v8 = &v17[104 * v16];
          v7 = v19 + 104;
          if (v6)
            operator delete((void *)v6);
          v6 = (uint64_t)v27;
        }
      }
      ++v4;
    }
    while (v4 != a2[1]);
  }
  v28 = &v7[-v6];
  if ((uint64_t)&v7[-v6] >= 105)
  {
    v29 = (uint64_t)v28 / 104;
    v30 = (unint64_t)((uint64_t)v28 / 104 - 2) >> 1;
    v31 = v30 + 1;
    v32 = v6 + 104 * v30;
    do
    {
      a4 = std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,PartitionStore<vi_onefixedsize_disk_allocator,512>::enumeratePartitions(std::vector<unsigned int>,void({block_pointer})(unsigned int,AnyPartitionStore::VectorEntry_s const&,BOOL *))::Greater &,std::__wrap_iter<std::tuple<PartitionStore<vi_onefixedsize_disk_allocator,512>::PartitionIterator,PartitionStore<vi_onefixedsize_disk_allocator,512>::PartitionIterator,unsigned int> *>>(v6, v29, v32);
      v32 -= 104;
      --v31;
    }
    while (v31);
  }
  if (v7 == (char *)v6)
  {
LABEL_54:
    if (!v6)
      return;
  }
  else
  {
    while (1)
    {
      v36 = *(_QWORD *)(v6 + 40);
      v37 = *(unsigned int *)(v6 + 96);
      v83 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, char *, __n128))(a3 + 16))(a3, v37, v36, &v83, a4);
      if (v83)
        break;
      v38 = (uint64_t)&v7[-v6];
      v39 = (uint64_t)&v7[-v6] / 104;
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      if (*(_QWORD *)(v6 + 40) == *(_QWORD *)(v6 + 88))
      {
        if (v38 >= 105)
        {
          v43 = 0;
          v44 = *(__n128 *)(v6 + 8);
          v45 = *(_OWORD *)(v6 + 24);
          v90 = *(_QWORD *)(v6 + 40);
          v88 = v44;
          v89 = v45;
          v46 = *(_OWORD *)(v6 + 72);
          v85 = *(__n128 *)(v6 + 56);
          v86 = v46;
          v87 = *(_QWORD *)(v6 + 88);
          v47 = v6;
          v48 = *(_DWORD *)(v6 + 96);
          do
          {
            v53 = v47 + 104 * v43 + 104;
            v54 = (2 * v43) | 1;
            v55 = 2 * v43 + 2;
            if (v55 < v39)
            {
              v56 = **(_DWORD **)(v53 + 40) > **(_DWORD **)(v53 + 144);
              v53 += 104 * v56;
              if (v56)
                v54 = v55;
            }
            v49 = *(_OWORD *)(v53 + 8);
            v50 = *(_OWORD *)(v53 + 24);
            *(_QWORD *)(v47 + 40) = *(_QWORD *)(v53 + 40);
            *(_OWORD *)(v47 + 24) = v50;
            *(_OWORD *)(v47 + 8) = v49;
            v51 = *(_OWORD *)(v53 + 56);
            v52 = *(_OWORD *)(v53 + 72);
            *(_QWORD *)(v47 + 88) = *(_QWORD *)(v53 + 88);
            *(_OWORD *)(v47 + 72) = v52;
            *(_OWORD *)(v47 + 56) = v51;
            *(_DWORD *)(v47 + 96) = *(_DWORD *)(v53 + 96);
            v47 = v53;
            v43 = v54;
          }
          while (v54 <= (uint64_t)((unint64_t)(v39 - 2) >> 1));
          v57 = (__n128 *)(v53 + 8);
          v58 = (__n128 *)(v53 + 56);
          if ((char *)v53 == v7 - 104)
          {
            v33 = v88;
            v34 = v89;
            *(_QWORD *)(v53 + 40) = v90;
            *v57 = v33;
            *(_OWORD *)(v53 + 24) = v34;
            a4 = v85;
            v35 = v86;
            *(_QWORD *)(v53 + 88) = v87;
            *v58 = a4;
            *(_OWORD *)(v53 + 72) = v35;
            *(_DWORD *)(v53 + 96) = v48;
          }
          else
          {
            v59 = *((__n128 *)v7 - 6);
            v60 = *((_OWORD *)v7 - 5);
            *(_QWORD *)(v53 + 40) = *((_QWORD *)v7 - 8);
            *v57 = v59;
            *(_OWORD *)(v53 + 24) = v60;
            v61 = *((__n128 *)v7 - 3);
            v62 = *((_OWORD *)v7 - 2);
            *(_QWORD *)(v53 + 88) = *((_QWORD *)v7 - 2);
            *v58 = v61;
            *(_OWORD *)(v53 + 72) = v62;
            *(_DWORD *)(v53 + 96) = *((_DWORD *)v7 - 2);
            v63 = v88;
            v64 = v89;
            *((_QWORD *)v7 - 8) = v90;
            *((__n128 *)v7 - 6) = v63;
            *((_OWORD *)v7 - 5) = v64;
            a4 = v85;
            v65 = v86;
            *((_QWORD *)v7 - 2) = v87;
            *((__n128 *)v7 - 3) = a4;
            *((_OWORD *)v7 - 2) = v65;
            *((_DWORD *)v7 - 2) = v48;
            v66 = v53 - v6 + 104;
            if (v66 >= 105)
            {
              v67 = (v66 / 0x68uLL - 2) >> 1;
              v68 = v6 + 104 * v67;
              v69 = *(_DWORD **)(v53 + 40);
              if (**(_DWORD **)(v68 + 40) > *v69)
              {
                v70 = *(_OWORD *)(v53 + 24);
                v91 = *v57;
                v92 = v70;
                v71 = *v58;
                v72 = *(_OWORD *)(v53 + 72);
                *(_QWORD *)&v84[2] = *(_QWORD *)(v53 + 88);
                v84[0] = v71;
                v84[1] = v72;
                v73 = *(_DWORD *)(v53 + 96);
                do
                {
                  v74 = v53;
                  v53 = v68;
                  v75 = *(_OWORD *)(v68 + 8);
                  v76 = *(_OWORD *)(v68 + 24);
                  *(_QWORD *)(v74 + 40) = *(_QWORD *)(v68 + 40);
                  *(_OWORD *)(v74 + 24) = v76;
                  *(_OWORD *)(v74 + 8) = v75;
                  v77 = *(_OWORD *)(v68 + 56);
                  v78 = *(_OWORD *)(v68 + 72);
                  *(_QWORD *)(v74 + 88) = *(_QWORD *)(v68 + 88);
                  *(_OWORD *)(v74 + 72) = v78;
                  *(_OWORD *)(v74 + 56) = v77;
                  *(_DWORD *)(v74 + 96) = *(_DWORD *)(v68 + 96);
                  if (!v67)
                    break;
                  v67 = (v67 - 1) >> 1;
                  v68 = v6 + 104 * v67;
                }
                while (**(_DWORD **)(v68 + 40) > *v69);
                v79 = v92;
                *(__n128 *)(v53 + 8) = v91;
                *(_OWORD *)(v53 + 24) = v79;
                *(_QWORD *)(v53 + 40) = v69;
                a4 = (__n128)v84[0];
                v80 = v84[1];
                *(_OWORD *)(v53 + 56) = v84[0];
                *(_OWORD *)(v53 + 72) = v80;
                *(_QWORD *)(v53 + 88) = *(_QWORD *)&v84[2];
                *(_DWORD *)(v53 + 96) = v73;
              }
            }
          }
        }
        v7 -= 104;
      }
      else if (v38 >= 105)
      {
        v40 = (unint64_t)(v39 - 2) >> 1;
        v41 = v40 + 1;
        v42 = v6 + 104 * v40;
        do
        {
          a4 = std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,PartitionStore<vi_onefixedsize_disk_allocator,512>::enumeratePartitions(std::vector<unsigned int>,void({block_pointer})(unsigned int,AnyPartitionStore::VectorEntry_s const&,BOOL *))::Greater &,std::__wrap_iter<std::tuple<PartitionStore<vi_onefixedsize_disk_allocator,512>::PartitionIterator,PartitionStore<vi_onefixedsize_disk_allocator,512>::PartitionIterator,unsigned int> *>>(v6, (uint64_t)&v7[-v6] / 104, v42);
          v42 -= 104;
          --v41;
        }
        while (v41);
      }
      if (v7 == (char *)v6)
        goto LABEL_54;
    }
  }
  operator delete((void *)v6);
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::enumeratePartition(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  char v10;
  _OWORD v11[2];
  __int128 v12;

  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
  v7 = a1[18] + 16 * a2;
  v12 = 0u;
  memset(v11, 0, sizeof(v11));
  PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::PartitionEnumerator((uint64_t)v11, *(_QWORD *)v7, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 96) + 4 * *(unsigned int *)(v7 + 8)));
  *(_QWORD *)&v11[0] = &off_1E6E31178;
  result = PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::next((uint64_t)v11);
  for (i = *((_QWORD *)&v12 + 1); *((_QWORD *)&v12 + 1); i = *((_QWORD *)&v12 + 1))
  {
    v10 = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(a3 + 16))(a3, v6, i, &v10);
    if (v10)
      break;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)&v11[0] + 24))((uint64_t)v11);
  }
  return result;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::vectorOffsetsInPartition@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  int *i;
  _OWORD v7[2];
  __int128 v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(a1 + 144) + 16 * a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  memset(v7, 0, sizeof(v7));
  v8 = 0u;
  PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::PartitionEnumerator((uint64_t)v7, *(_QWORD *)v4, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 96) + 4 * *(unsigned int *)(v4 + 8)));
  *(_QWORD *)&v7[0] = &off_1E6E31178;
  result = PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::next((uint64_t)v7);
  v9 = a3;
  for (i = (int *)*((_QWORD *)&v8 + 1); *((_QWORD *)&v8 + 1); i = (int *)*((_QWORD *)&v8 + 1))
  {
    std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&v9, *i);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)&v7[0] + 24))((uint64_t)v7);
  }
  return result;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::enumerator@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;

  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * a2);
  v6 = operator new(0x48uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E6E311D8;
  result = PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::PartitionEnumerator((uint64_t)(v6 + 3), a1, v5);
  *a3 = result;
  a3[1] = (uint64_t)v6;
  return result;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::dump(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  uint64_t result;
  uint64_t v19;
  const std::locale::facet *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  uint64_t v25;
  const std::locale::facet *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int v30;
  const std::locale::facet *v31;
  uint64_t v32;
  BOOL v33;
  size_t v34;
  size_t v35;
  std::locale::__imp *p_b;
  uint64_t v37;
  uint64_t v38;
  void *locale;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  int v47;
  const std::locale::facet *v48;
  uint64_t v49;
  size_t v50;
  size_t v51;
  std::locale::__imp *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  int v63;
  const std::locale::facet *v64;
  uint64_t v65;
  size_t v66;
  size_t v67;
  std::locale::__imp *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const std::locale::facet *v75;
  char *v76;
  char *v77;
  const char *v78;
  uint64_t v79;
  _QWORD *v80;
  int v81;
  uint64_t v82;
  std::locale v83[2];
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  std::locale __b;
  size_t v89;
  int64_t v90;

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"Quantizer ", 10);
  v6 = a1[1];
  if (!v6)
  {
    v76 = __si_assert_copy_extra_268();
    v77 = v76;
    v78 = "";
    if (v76)
      v78 = v76;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 872, "_quantizer != nullptr", v78);
    free(v77);
    if (__valid_fs(-1))
      v79 = 2989;
    else
      v79 = 3072;
    *(_DWORD *)v79 = -559038737;
LABEL_118:
    abort();
  }
  v9 = *(_QWORD *)(v6 + 8);
  v7 = v6 + 8;
  v8 = v9;
  v10 = *(char *)(v7 + 23);
  if (v10 >= 0)
    v11 = v7;
  else
    v11 = v8;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v7 + 23);
  else
    v12 = *(_QWORD *)(v7 + 8);
  v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)" , ", 3);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" vectors in ", 12);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" partitions:", 12);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(v83);
  std::ostream::put();
  result = std::ostream::flush();
  if (a3 >= 3)
  {
    if (*((_DWORD *)a1 + 17))
    {
      v19 = 0;
      v81 = a3;
      v80 = a1;
      while (1)
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"partition ", 10);
        v21 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)" (", 2);
        (*(void (**)(_QWORD *, uint64_t))(*a1 + 48))(a1, v19);
        v22 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)")\t<=", 4);
        (*(void (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, v19);
        v23 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
        v24 = std::locale::use_facet(v83, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
        std::locale::~locale(v83);
        std::ostream::put();
        std::ostream::flush();
        if (a3 < 4)
          goto LABEL_12;
        v82 = v19;
        v25 = a1[18] + 16 * v19;
        v84 = 0u;
        v85 = 0u;
        *(_OWORD *)&v83[0].__locale_ = 0u;
        PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::PartitionEnumerator((uint64_t)v83, *(_QWORD *)v25, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v25 + 96) + 4 * *(unsigned int *)(v25 + 8)));
        v83[0].__locale_ = (std::locale::__imp *)&off_1E6E31178;
        PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::next((uint64_t)v83);
        if (*((_QWORD *)&v85 + 1))
          break;
LABEL_11:
        std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
        v20 = std::locale::use_facet(v83, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale(v83);
        std::ostream::put();
        std::ostream::flush();
        a3 = v81;
        a1 = v80;
        v19 = v82;
LABEL_12:
        if (++v19 >= (unint64_t)*((unsigned int *)a1 + 17))
          goto LABEL_110;
      }
      while (1)
      {
        v86 = 0;
        v87 = 0;
        MEMORY[0x1BCCB04A0](&v86, a2);
        if (!(_BYTE)v86)
          goto LABEL_49;
        v27 = (char *)a2 + *(_QWORD *)(*a2 - 24);
        v28 = *((_QWORD *)v27 + 5);
        if ((*((_DWORD *)v27 + 2) & 0xB0) == 0x20)
          v29 = "";
        else
          v29 = "  ";
        v30 = *((_DWORD *)v27 + 36);
        if (v30 == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
          v31 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
          v30 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 32);
          std::locale::~locale(&__b);
          *((_DWORD *)v27 + 36) = v30;
          if (!v28)
            goto LABEL_48;
        }
        else if (!v28)
        {
          goto LABEL_48;
        }
        v32 = *((_QWORD *)v27 + 3);
        v33 = v32 <= 2;
        v34 = v32 - 2;
        if (v33)
          v35 = 0;
        else
          v35 = v34;
        if (v29 - "  " >= 1
          && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v28 + 96))(v28, "  ", v29 - "  ") != v29 - "  ")
        {
          goto LABEL_48;
        }
        if ((uint64_t)v35 >= 1)
        {
          __b.__locale_ = 0;
          v89 = 0;
          v90 = 0;
          if (v35 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_118;
          if (v35 >= 0x17)
          {
            v37 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v35 | 7) != 0x17)
              v37 = v35 | 7;
            v38 = v37 + 1;
            p_b = (std::locale::__imp *)operator new(v37 + 1);
            v89 = v35;
            v90 = v38 | 0x8000000000000000;
            __b.__locale_ = p_b;
          }
          else
          {
            HIBYTE(v90) = v35;
            p_b = (std::locale::__imp *)&__b;
          }
          memset(p_b, v30, v35);
          *((_BYTE *)p_b + v35) = 0;
          if (v90 >= 0)
            locale = &__b;
          else
            locale = __b.__locale_;
          v40 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v28 + 96))(v28, locale, v35);
          v41 = v40;
          if (SHIBYTE(v90) < 0)
          {
            operator delete(__b.__locale_);
            if (v41 != v35)
              goto LABEL_48;
          }
          else if (v40 != v35)
          {
            goto LABEL_48;
          }
        }
        v42 = "  " - v29 + 2;
        if (v42 < 1
          || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v28 + 96))(v28, v29, "  " - v29 + 2) == v42)
        {
          *((_QWORD *)v27 + 3) = 0;
          goto LABEL_49;
        }
LABEL_48:
        std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
LABEL_49:
        MEMORY[0x1BCCB04AC](&v86);
        v43 = (_QWORD *)std::ostream::operator<<();
        v86 = 0;
        v87 = 0;
        MEMORY[0x1BCCB04A0](&v86, v43);
        if (!(_BYTE)v86)
          goto LABEL_80;
        v44 = (char *)v43 + *(_QWORD *)(*v43 - 24);
        v45 = *((_QWORD *)v44 + 5);
        if ((*((_DWORD *)v44 + 2) & 0xB0) == 0x20)
          v46 = "";
        else
          v46 = "(";
        v47 = *((_DWORD *)v44 + 36);
        if (v47 == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(_QWORD *)(*v43 - 24)));
          v48 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
          v47 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 32);
          std::locale::~locale(&__b);
          *((_DWORD *)v44 + 36) = v47;
          if (!v45)
            goto LABEL_79;
        }
        else if (!v45)
        {
          goto LABEL_79;
        }
        v49 = *((_QWORD *)v44 + 3);
        v33 = v49 <= 1;
        v50 = v49 - 1;
        if (v33)
          v51 = 0;
        else
          v51 = v50;
        if (v46 - "(" >= 1
          && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v45 + 96))(v45, "(", v46 - "(") != v46 - "(")
        {
          goto LABEL_79;
        }
        if ((uint64_t)v51 >= 1)
        {
          __b.__locale_ = 0;
          v89 = 0;
          v90 = 0;
          if (v51 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_118;
          if (v51 >= 0x17)
          {
            v53 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v51 | 7) != 0x17)
              v53 = v51 | 7;
            v54 = v53 + 1;
            v52 = (std::locale::__imp *)operator new(v53 + 1);
            v89 = v51;
            v90 = v54 | 0x8000000000000000;
            __b.__locale_ = v52;
          }
          else
          {
            HIBYTE(v90) = v51;
            v52 = (std::locale::__imp *)&__b;
          }
          memset(v52, v47, v51);
          *((_BYTE *)v52 + v51) = 0;
          if (v90 >= 0)
            v55 = &__b;
          else
            v55 = __b.__locale_;
          v56 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v45 + 96))(v45, v55, v51);
          v57 = v56;
          if (SHIBYTE(v90) < 0)
          {
            operator delete(__b.__locale_);
            if (v57 != v51)
              goto LABEL_79;
          }
          else if (v56 != v51)
          {
            goto LABEL_79;
          }
        }
        v58 = "(" - v46 + 1;
        if (v58 < 1
          || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v45 + 96))(v45, v46, "(" - v46 + 1) == v58)
        {
          *((_QWORD *)v44 + 3) = 0;
          goto LABEL_80;
        }
LABEL_79:
        std::ios_base::clear((std::ios_base *)((char *)v43 + *(_QWORD *)(*v43 - 24)), *(_DWORD *)((char *)v43 + *(_QWORD *)(*v43 - 24) + 32) | 5);
LABEL_80:
        MEMORY[0x1BCCB04AC](&v86);
        v59 = (_QWORD *)std::ostream::operator<<();
        v86 = 0;
        v87 = 0;
        MEMORY[0x1BCCB04A0](&v86, v59);
        if (!(_BYTE)v86)
          goto LABEL_17;
        v60 = (char *)v59 + *(_QWORD *)(*v59 - 24);
        v61 = *((_QWORD *)v60 + 5);
        if ((*((_DWORD *)v60 + 2) & 0xB0) == 0x20)
          v62 = "";
        else
          v62 = ")";
        v63 = *((_DWORD *)v60 + 36);
        if (v63 == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(_QWORD *)(*v59 - 24)));
          v64 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
          v63 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 32);
          std::locale::~locale(&__b);
          *((_DWORD *)v60 + 36) = v63;
          if (!v61)
            goto LABEL_16;
        }
        else if (!v61)
        {
          goto LABEL_16;
        }
        v65 = *((_QWORD *)v60 + 3);
        v33 = v65 <= 1;
        v66 = v65 - 1;
        if (v33)
          v67 = 0;
        else
          v67 = v66;
        if (v62 - ")" < 1
          || (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v61 + 96))(v61, ")", v62 - ")") == v62 - ")")
        {
          if ((uint64_t)v67 < 1)
            goto LABEL_107;
          __b.__locale_ = 0;
          v89 = 0;
          v90 = 0;
          if (v67 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_118;
          if (v67 >= 0x17)
          {
            v69 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v67 | 7) != 0x17)
              v69 = v67 | 7;
            v70 = v69 + 1;
            v68 = (std::locale::__imp *)operator new(v69 + 1);
            v89 = v67;
            v90 = v70 | 0x8000000000000000;
            __b.__locale_ = v68;
          }
          else
          {
            HIBYTE(v90) = v67;
            v68 = (std::locale::__imp *)&__b;
          }
          memset(v68, v63, v67);
          *((_BYTE *)v68 + v67) = 0;
          if (v90 >= 0)
            v71 = &__b;
          else
            v71 = __b.__locale_;
          v72 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v61 + 96))(v61, v71, v67);
          v73 = v72;
          if (SHIBYTE(v90) < 0)
          {
            operator delete(__b.__locale_);
            if (v73 == v67)
            {
LABEL_107:
              v74 = ")" - v62 + 1;
              if (v74 < 1
                || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v61 + 96))(v61, v62, ")" - v62 + 1) == v74)
              {
                *((_QWORD *)v60 + 3) = 0;
                goto LABEL_17;
              }
            }
          }
          else if (v72 == v67)
          {
            goto LABEL_107;
          }
        }
LABEL_16:
        std::ios_base::clear((std::ios_base *)((char *)v59 + *(_QWORD *)(*v59 - 24)), *(_DWORD *)((char *)v59 + *(_QWORD *)(*v59 - 24) + 32) | 5);
LABEL_17:
        MEMORY[0x1BCCB04AC](&v86);
        std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(_QWORD *)(*v59 - 24)));
        v26 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
        std::locale::~locale(&__b);
        std::ostream::put();
        std::ostream::flush();
        (*((void (**)(uint64_t))v83[0].__locale_ + 3))((uint64_t)v83);
        if (!*((_QWORD *)&v85 + 1))
          goto LABEL_11;
      }
    }
LABEL_110:
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v75 = std::locale::use_facet(v83, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v75->__vftable[2].~facet_0)(v75, 10);
    std::locale::~locale(v83);
    std::ostream::put();
    return std::ostream::flush();
  }
  return result;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::flush(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 80) + 40) = 0;
  return result;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::makeReadOnly(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
}

void PartitionStore<vi_onefixedsize_memory_allocator,512>::name(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 120), *(_QWORD *)(a1 + 128));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 120);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 136);
  }
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::shadow()
{
  return 0;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::subvert(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  const char *v5;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 1) == 0)
  {
    v3 = __si_assert_copy_extra_268();
    v4 = v3;
    v5 = "";
    if (v3)
      v5 = v3;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1571, "old->isPersistent()", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return 1;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::unlink()
{
  return 1;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::storageSize(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24);
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::PartitionEnumerator(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t Ptr;
  unsigned int v5;
  char *v7;
  char *v8;
  const char *v9;

  *(_QWORD *)a1 = &off_1E6E311A8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 20) = 0x100000001;
  *(_QWORD *)(a1 + 40) = 0;
  if (!a2)
  {
    v7 = __si_assert_copy_extra_268();
    v8 = v7;
    v9 = "";
    if (v7)
      v9 = v7;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1367, "store != nullptr", v9);
    free(v8);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  Ptr = vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(a2 + 80), a3, 4108);
  v5 = *(_DWORD *)(Ptr + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(Ptr + 4);
  if (v5 > *(_DWORD *)(a1 + 24))
    *(_QWORD *)(a1 + 32) = Ptr;
  return a1;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::next(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t Ptr;
  int v9;
  NSObject *v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  double v17;
  char *v18;
  char *v19;
  const char *v20;
  char *v21;
  const char *v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  double v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (v3 = *(unsigned int **)(a1 + 32)) == 0 || (v4 = *(_DWORD *)(a1 + 24), v4 >= v3[2]))
  {
    result = 0;
    goto LABEL_7;
  }
  v5 = *(unsigned int *)(a1 + 20);
  if (v5 <= 0x1FF)
  {
    *(_DWORD *)(a1 + 20) = v5 + 1;
    *(_DWORD *)(a1 + 24) = v4 + 1;
    result = (uint64_t)&v3[2 * v5 + 3];
LABEL_7:
    *(_QWORD *)(a1 + 40) = result;
    return result;
  }
  v7 = *v3;
  if ((_DWORD)v7)
  {
    Ptr = vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v2 + 80), v7, 4108);
    if (*(_DWORD *)(Ptr + 8))
      goto LABEL_13;
    v9 = *__error();
    v10 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = *(int **)(a1 + 32);
      v12 = *v11;
      v13 = *(_DWORD *)(a1 + 16);
      v14 = *(_DWORD *)(a1 + 20);
      v15 = *(_DWORD *)(a1 + 24);
      LODWORD(v11) = v11[2];
      v16 = *(_DWORD *)(Ptr + 12);
      v17 = *(float *)(Ptr + 16);
      *(_DWORD *)buf = 136317186;
      v24 = "next";
      v25 = 1024;
      v26 = 1392;
      v27 = 1024;
      v28 = v12;
      v29 = 1024;
      v30 = v13;
      v31 = 1024;
      v32 = v14;
      v33 = 1024;
      v34 = v15;
      v35 = 1024;
      v36 = (int)v11;
      v37 = 1024;
      v38 = v16;
      v39 = 2048;
      v40 = v17;
      _os_log_error_impl(&dword_1B8270000, v10, OS_LOG_TYPE_ERROR, "%s:%d: blockAt(%u).count=0 centOffset=%u currentOffset=%u visited=%u count=%u vec[0]=%u(%f)", buf, 0x40u);
    }
    *__error() = v9;
    if (*(_DWORD *)(Ptr + 8))
    {
LABEL_13:
      if (*(_DWORD *)(Ptr + 4) == *(_DWORD *)(a1 + 16))
      {
        *(_QWORD *)(a1 + 32) = Ptr;
        result = Ptr + 12;
        *(_QWORD *)(a1 + 20) = 0x100000001;
        goto LABEL_7;
      }
      v21 = __si_assert_copy_extra_268();
      v19 = v21;
      v22 = "";
      if (v21)
        v22 = v21;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1395, "block->centOffset == centOffset", v22);
    }
    else
    {
      v18 = __si_assert_copy_extra_268();
      v19 = v18;
      v20 = "";
      if (v18)
        v20 = v18;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1394, "block->count > 0", v20);
    }
    free(v19);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return 0;
}

void PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionIterator::~PartitionIterator()
{
  JUMPOUT(0x1BCCB06A4);
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::centroidOffset(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

void PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator::~PartitionEnumerator()
{
  JUMPOUT(0x1BCCB06A4);
}

void std::__shared_ptr_emplace<PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator,std::allocator<PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E311D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator,std::allocator<PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E311D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

uint64_t std::__shared_ptr_emplace<PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator,std::allocator<PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionEnumerator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

size_t vi_onefixedsize_memory_allocator::allocateOffsetFromEnd(uint64_t a1, unsigned int a2)
{
  size_t v2;
  unint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  size_t v8;
  void *Ptr;
  char *v11;
  char *v12;
  const char *v13;

  v2 = a2;
  if (*(_QWORD *)(a1 + 32) != a2)
  {
    v11 = __si_assert_copy_extra_268();
    v12 = v11;
    v13 = "";
    if (v11)
      v13 = v11;
    __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 1381, "inSize == allocator->baseSize", v13);
    free(v12);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = v4 + a2;
  if (v6 > v5)
  {
    v7 = *(void **)(a1 + 8);
    do
    {
      *(_QWORD *)(a1 + 16) = 2 * v5;
      v7 = malloc_type_zone_realloc(*(malloc_zone_t **)a1, v7, 2 * v5, 0x92526F38uLL);
      *(_QWORD *)(a1 + 8) = v7;
      v5 = *(_QWORD *)(a1 + 16);
      v4 = *(_QWORD *)(a1 + 24);
      v6 = v4 + v2;
    }
    while (v4 + v2 > v5);
  }
  *(_QWORD *)(a1 + 24) = v6;
  v8 = v4 / v2;
  Ptr = (void *)vi_onefixedsize_memory_allocator::getPtr((_QWORD *)a1, v4 / v2, v2);
  bzero(Ptr, v2);
  return v8;
}

uint64_t PartitionStore<vi_onefixedsize_memory_allocator,512>::~PartitionStore(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(_QWORD *)a1 = off_1E6E30FD8;
  v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(_QWORD *)(a1 + 152) = v2;
    operator delete(v2);
  }
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
    v3 = *(void **)(a1 + 96);
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 120));
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
LABEL_5:
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
LABEL_6:
  v4 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v4)
  {
    malloc_zone_free(*(malloc_zone_t **)v4, *(void **)(v4 + 8));
    MEMORY[0x1BCCB06A4](v4, 0x10A0C40CA010D23);
  }
  *(_QWORD *)a1 = &unk_1E6E310A8;
  v5 = *(void **)(a1 + 32);
  if (v5)
  {
    *(_QWORD *)(a1 + 40) = v5;
    operator delete(v5);
  }
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

_QWORD *IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *a1 = &off_1E6E32F98;
  v2 = (std::__shared_weak_count *)a1[11];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[7];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[5];
    if (!v11)
      return a1;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[5];
    if (!v11)
      return a1;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return a1;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::~IVFVectorIndexInstance(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E32E40;
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s((_QWORD *)(a1 + 48));
  *(_QWORD *)a1 = off_1E6E30C80;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::~IVFVectorIndexInstance(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E32E40;
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s((_QWORD *)(a1 + 48));
  *(_QWORD *)a1 = off_1E6E30C80;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCCB06A4);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::nVectors(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1 + 48);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::nPartitions(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1 + 48);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::allExist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  float v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  char *v14;
  char *v15;
  const char *v16;
  uint8_t buf[4];
  double v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a3)
  {
    v5 = a1 + 48;
    v6 = a3;
    if (a3 <= 0x3E8)
    {
      while (IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::exists(v5, a2))
      {
        a2 += 3072;
        if (!--v6)
          return a3;
      }
    }
    else
    {
      v7 = 0;
      v8 = a3 / 0xA;
      v9 = 1.0 / (float)a3;
      while (1)
      {
        v10 = v7 + 1;
        if (!(((int)v7 + 1) % v8))
        {
          v11 = *__error();
          v12 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            v18 = (float)((float)((float)v7 * 100.0) * v9);
            _os_log_impl(&dword_1B8270000, v12, OS_LOG_TYPE_DEFAULT, "allExist: %.0f%%", buf, 0xCu);
          }
          *__error() = v11;
        }
        if (!IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::exists(v5, a2))break;
        a2 += 3072;
        ++v7;
        if (a3 == v10)
          return a3;
      }
    }
    v14 = __si_assert_copy_extra_268();
    v15 = v14;
    v16 = "";
    if (v14)
      v16 = v14;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3151, "false", v16);
    free(v15);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a3;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::validAddress()
{
  return 1;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::shadow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v6 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v7 = *(std::__shared_weak_count **)(a1 + 120);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v11 = *(_QWORD *)(a1 + 128);
  v10 = *(std::__shared_weak_count **)(a1 + 136);
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    os_unfair_lock_unlock(v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 160))(v11, a2, a3);
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    os_unfair_lock_unlock(v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 160))(v11, a2, a3);
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return 0;
}

_DWORD *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::bulkInsertForTest(_DWORD *result, char *a2, int *a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  float v12;
  int v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint8_t buf[4];
  double v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v8 = (uint64_t)(result + 12);
    v9 = a4;
    if (a4 <= 0x3E8)
    {
      do
      {
        v21 = *a5++;
        v20 = v21;
        v23 = *a3++;
        v22 = v23;
        result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v8, v20, a2, 0xFFFFFFFF, 3.4028e38);
        if (result[770])
        {
          v19 = result[769] + 1;
        }
        else
        {
          result[770] = v22;
          v19 = 1;
        }
        result[769] = v19;
        a2 += 3072;
        --v9;
      }
      while (v9);
    }
    else
    {
      v10 = 0;
      v11 = a4 / 0xA;
      v12 = 1.0 / (float)a4;
      do
      {
        v14 = v10 + 1;
        if (!(((int)v10 + 1) % v11))
        {
          v15 = *__error();
          v16 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            v25 = (float)((float)((float)v10 * 100.0) * v12);
            _os_log_impl(&dword_1B8270000, v16, OS_LOG_TYPE_DEFAULT, "bulkInsertForTest: %.0f%%", buf, 0xCu);
          }
          *__error() = v15;
        }
        v17 = a5[v10];
        v18 = a3[v10];
        result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v8, v17, a2, 0xFFFFFFFF, 3.4028e38);
        if (result[770])
        {
          v13 = result[769] + 1;
        }
        else
        {
          result[770] = v18;
          v13 = 1;
        }
        result[769] = v13;
        a2 += 3072;
        v10 = v14;
      }
      while (v9 != v14);
    }
  }
  return result;
}

char *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::insertVector(_DWORD *a1, int a2, unsigned int a3, const void *a4, int a5, int a6, int a7, uint64_t a8, char *a9)
{
  unsigned int *v11;
  char *v13;
  char *v14;
  const char *v15;

  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != a1[4])
  {
    v13 = __si_assert_copy_extra_268();
    v14 = v13;
    v15 = "";
    if (v13)
      v15 = v13;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v11 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFF, 3.4028e38)+ 768;
  return vi_memory_postings::push_posting(a9, a7, v11, a8);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::insertForMerge(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  char *v8;
  char *v9;
  const char *v10;

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a7 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a6]
    || vector_size_elem_sizes_10742[a7] != *(_DWORD *)(a1 + 16))
  {
    v8 = __si_assert_copy_extra_268();
    v9 = v8;
    v10 = "";
    if (v8)
      v10 = v8;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v10);
    free(v9);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return 1;
}

_DWORD *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::insertForTest(_DWORD *a1, int a2, unsigned int a3, const void *a4, int a5, int a6, int a7)
{
  _DWORD *result;
  int v9;
  char *v10;
  char *v11;
  const char *v12;
  uint64_t v13;

  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != a1[4])
  {
    v10 = __si_assert_copy_extra_268();
    v11 = v10;
    v12 = "";
    if (v10)
      v12 = v10;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v12);
    free(v11);
    if (__valid_fs(-1))
      v13 = 2989;
    else
      v13 = 3072;
    *(_DWORD *)v13 = -559038737;
    abort();
  }
  result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFF, 3.4028e38);
  if (result[770])
  {
    v9 = result[769] + 1;
  }
  else
  {
    result[770] = a7;
    v9 = 1;
  }
  result[769] = v9;
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::train(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  const char *v30;
  char *v31;
  char *v32;
  const char *v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;

  v3 = *(_QWORD **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  v4 = v2 - *(_QWORD *)a2;
  if (v2 == *(_QWORD *)a2)
  {
    v31 = __si_assert_copy_extra_268();
    v32 = v31;
    v33 = "";
    if (v31)
      v33 = v31;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3170, "vi.size() > 0", v33);
    goto LABEL_52;
  }
  if (*v3 != a1)
  {
    v34 = __si_assert_copy_extra_268();
    v32 = v34;
    v35 = "";
    if (v34)
      v35 = v34;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3171, "this == vi[0]", v35);
LABEL_52:
    free(v32);
    if (__valid_fs(-1))
      v36 = 2989;
    else
      v36 = 3072;
    *(_DWORD *)v36 = -559038737;
LABEL_56:
    abort();
  }
  v6 = a2;
  v7 = (char *)operator new(8uLL);
  v8 = v7;
  *(_QWORD *)v7 = a1 + 48;
  if (v4 < 9)
    goto LABEL_39;
  v9 = v7 + 8;
  v10 = 1;
  v11 = v7 + 8;
  v37 = v6;
  do
  {
    v13 = v3[v10];
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(v13 + 8)
      || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(v13 + 20)
      || *(_DWORD *)(a1 + 12) != *(_DWORD *)(v13 + 12)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(v13 + 16))
    {
      v28 = __si_assert_copy_extra_268();
      v29 = v28;
      v30 = "";
      if (v28)
        v30 = v28;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v30);
      free(v29);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v14 = v13 + 48;
    if (v9 < v11)
    {
      *(_QWORD *)v9 = v14;
      v12 = v9 + 8;
      goto LABEL_6;
    }
    v15 = (v9 - v8) >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      goto LABEL_56;
    if ((v11 - v8) >> 2 > v16)
      v16 = (v11 - v8) >> 2;
    if ((unint64_t)(v11 - v8) >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v18 = operator new(8 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = &v18[8 * v15];
    v11 = &v18[8 * v17];
    *(_QWORD *)v19 = v14;
    v12 = v19 + 8;
    if (v9 == v8)
    {
LABEL_36:
      operator delete(v8);
      goto LABEL_37;
    }
    v20 = v9 - 8 - v8;
    if (v20 < 0x168)
    {
      v21 = v9;
      goto LABEL_34;
    }
    if (&v18[v9 - v8 - 8 - (v20 & 0xFFFFFFFFFFFFFFF8)] > &v18[v9 - v8 - 8])
    {
      v21 = v9;
      goto LABEL_34;
    }
    if (&v9[-(v20 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
    {
      v21 = v9;
      do
      {
LABEL_34:
        v27 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *((_QWORD *)v19 - 1) = v27;
        v19 -= 8;
      }
      while (v21 != v8);
      goto LABEL_35;
    }
    if ((unint64_t)(v8 - v18) < 0x20)
    {
      v21 = v9;
      goto LABEL_34;
    }
    v22 = (v20 >> 3) + 1;
    v21 = &v9[-8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
    v23 = &v18[8 * v15 - 16];
    v24 = v9 - 16;
    v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v19 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_34;
LABEL_35:
    if (v8)
      goto LABEL_36;
LABEL_37:
    v8 = v19;
    v6 = v37;
LABEL_6:
    ++v10;
    v3 = *(_QWORD **)v6;
    v9 = v12;
  }
  while (v10 < (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
  if (v8)
LABEL_39:
    operator delete(v8);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::mergeUpdateSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t result;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  const char *v32;
  char *v33;
  const char *v34;
  _DWORD v35[4];
  void *__src;
  uint64_t v37;
  uint8_t buf[3080];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v33 = __si_assert_copy_extra_268();
    v31 = v33;
    v34 = "";
    if (v33)
      v34 = v33;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v34);
LABEL_36:
    free(v31);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v7 = *__error();
  v8 = _SILogForLogForCategory(16);
  v9 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v10;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v11;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v12;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&buf[22] = v13;
    _os_log_impl(&dword_1B8270000, v8, v9, "mergeUpdateSet(termIds) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v7;
  v14 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::beginMerge(a1 + 48);
  while (1)
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::next((uint64_t)v35, v14);
    if (!__src)
      break;
    v15 = v35[0];
    v16 = *(float *)&v35[1];
    v17 = v35[2];
    v18 = v37;
    memcpy(buf, __src, 0xC00uLL);
    v20 = *(_QWORD *)(a4 + 8);
    v19 = *(_QWORD *)(a4 + 16);
    v21 = v20 + 1;
    if (v20 + 1 < v19)
    {
      v22 = *(_QWORD **)a4;
      goto LABEL_16;
    }
    if (v19)
    {
      if (v21 >= v19)
        goto LABEL_13;
    }
    else
    {
      *(_QWORD *)(a4 + 16) = 1024;
      v19 = 1024;
      if (v21 >= 0x400)
      {
        do
LABEL_13:
          v19 *= 2;
        while (v21 >= v19);
        *(_QWORD *)(a4 + 16) = v19;
      }
    }
    v22 = malloc_type_realloc(*(void **)a4, 24 * v19, 0x10200409F4E64B8uLL);
    *(_QWORD *)a4 = v22;
    v20 = *(_QWORD *)(a4 + 8);
    v21 = v20 + 1;
LABEL_16:
    v22[3 * v20 + 1] = v18;
    *(_QWORD *)(a4 + 8) = v21;
    if (*(_DWORD *)(a1 + 188) == -1)
    {
      v30 = __si_assert_copy_extra_268();
      v31 = v30;
      v32 = "";
      if (v30)
        v32 = v30;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2689, "mergeBeginVectorOffset < VECTOR_NOT_FOUND", v32);
      goto LABEL_36;
    }
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(a1 + 48, v17, buf, v15, v16);
  }
  result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::endMerge(a1 + 48);
  if (v14)
  {
    std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100](v14 + 32);
    v24 = *(std::__shared_weak_count **)(v14 + 24);
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = *(std::__shared_weak_count **)(v14 + 8);
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    return MEMORY[0x1BCCB06A4](v14, 0x10A0C40B50FE552);
  }
  return result;
}

_DWORD *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::mergeUpdateSet(_DWORD *result, uint64_t a2, char *a3, unsigned int a4, uint64_t a5)
{
  _DWORD *v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int v16;
  const void *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  const char *v21;
  int v22;
  NSObject *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _DWORD __dst[768];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (result[2] != *(_DWORD *)(a2 + 8)
    || (v6 = result, *((unsigned __int16 *)result + 10) != *(unsigned __int16 *)(a2 + 20))
    || result[3] != *(_DWORD *)(a2 + 12)
    || result[4] != *(_DWORD *)(a2 + 16))
  {
    v19 = __si_assert_copy_extra_268();
    v20 = v19;
    v21 = "";
    if (v19)
      v21 = v19;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v21);
    free(v20);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (dword_1EF19FCCC >= 5)
  {
    v22 = *__error();
    v23 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
      v25 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      __dst[0] = 67109888;
      __dst[1] = v24;
      LOWORD(__dst[2]) = 1024;
      *(_DWORD *)((char *)&__dst[2] + 2) = v25;
      HIWORD(__dst[3]) = 1024;
      __dst[4] = v26;
      LOWORD(__dst[5]) = 1024;
      *(_DWORD *)((char *)&__dst[5] + 2) = v27;
      _os_log_impl(&dword_1B8270000, v23, OS_LOG_TYPE_DEFAULT, "mergeUpdateSet(DocID) %u vectors in %u partitions and %u vectors in %u partitions", (uint8_t *)__dst, 0x1Au);
    }
    result = __error();
    *result = v22;
  }
  v9 = 0;
  v10 = *(_QWORD *)(a2 + 80);
  v11 = (uint64_t)(v6 + 12);
  v12 = a4;
  while (v9 != *(_DWORD *)(v10 + 24))
  {
    v16 = *(_DWORD *)(IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v10, v9)+ 3088);
    v17 = (const void *)IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v10, v9);
    memcpy(__dst, v17, sizeof(__dst));
    v18 = IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v10, v9);
    if ((*(_BYTE *)(v18 + 3072) & 1) != 0)
    {
      if (*(_DWORD *)(v18 + 3076))
        v13 = 1;
      else
        v13 = 2;
      v14 = a5;
    }
    else
    {
      v13 = 0;
      v14 = v12;
    }
    v15 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v11, v16, __dst, 0xFFFFFFFF, 3.4028e38);
    result = vi_memory_postings::push_posting(a3, v13, v15 + 768, v14);
    ++v9;
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::mergeUpdateSetForTest(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  float v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t result;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  const char *v28;
  char *v29;
  const char *v30;
  uint8_t buf[4];
  float v32;
  _BYTE v33[6];
  __int16 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v26 = __si_assert_copy_extra_268();
    v27 = v26;
    v28 = "";
    if (v26)
      v28 = v26;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v28);
LABEL_34:
    free(v27);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  v6 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v5, v6))
  {
    LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    v32 = v7;
    *(_WORD *)v33 = 1024;
    *(_DWORD *)&v33[2] = v8;
    v34 = 1024;
    LODWORD(v35) = v9;
    WORD2(v35) = 1024;
    *(_DWORD *)((char *)&v35 + 6) = v10;
    _os_log_impl(&dword_1B8270000, v5, v6, "mergeUpdateSetForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v4;
  v11 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::beginMerge(a1 + 48);
  v14 = 0;
  while (1)
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::next((uint64_t)buf, v11);
    if (!(_QWORD)v35)
      break;
    v16 = *(_DWORD *)(*((_QWORD *)&v35 + 1) + 8);
    v17 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(a1 + 48, *(unsigned int *)v33, (const void *)v35, *(unsigned int *)buf, v32);
    v18 = v17[770];
    if (v18)
    {
      v15 = v17[769] + 1;
    }
    else
    {
      v17[770] = v16;
      v15 = 1;
    }
    v17[769] = v15;
    if (v18)
      ++v14;
  }
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::endMerge(a1 + 48);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result + v14 != v13 + v12)
  {
    v29 = __si_assert_copy_extra_268();
    v27 = v29;
    v30 = "";
    if (v29)
      v30 = v29;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3267, "nVectors() + dup == old + added", v30);
    goto LABEL_34;
  }
  if (v11)
  {
    std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100](v11 + 32);
    v20 = *(std::__shared_weak_count **)(v11 + 24);
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = *(std::__shared_weak_count **)(v11 + 8);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    return MEMORY[0x1BCCB06A4](v11, 0x10A0C40B50FE552);
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::mergeIndexForTest(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  float v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  uint64_t result;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  const char *v28;
  char *v29;
  const char *v30;
  uint8_t buf[4];
  float v32;
  _BYTE v33[6];
  __int16 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v26 = __si_assert_copy_extra_268();
    v27 = v26;
    v28 = "";
    if (v26)
      v28 = v26;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v28);
LABEL_34:
    free(v27);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  v6 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v5, v6))
  {
    LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    v32 = v7;
    *(_WORD *)v33 = 1024;
    *(_DWORD *)&v33[2] = v8;
    v34 = 1024;
    LODWORD(v35) = v9;
    WORD2(v35) = 1024;
    *(_DWORD *)((char *)&v35 + 6) = v10;
    _os_log_impl(&dword_1B8270000, v5, v6, "mergeIndexForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v4;
  v11 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator(a2 + 48);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::beginMerge(a1 + 48);
  v14 = 0;
  while (1)
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next((uint64_t)buf, v11);
    if (!(_QWORD)v35)
      break;
    v16 = **((_QWORD **)&v35 + 1);
    v17 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(a1 + 48, *(unsigned int *)v33, (const void *)v35, *(unsigned int *)buf, v32);
    v18 = v17[770];
    if (v18)
    {
      v15 = v17[769] + 1;
    }
    else
    {
      v17[770] = v16;
      v15 = 1;
    }
    v17[769] = v15;
    if (v18)
      ++v14;
  }
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::endMerge(a1 + 48);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result + v14 != v13 + v12)
  {
    v29 = __si_assert_copy_extra_268();
    v27 = v29;
    v30 = "";
    if (v29)
      v30 = v29;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3281, "nVectors() + dup == old + added", v30);
    goto LABEL_34;
  }
  if (v11)
  {
    std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100](v11 + 32);
    v20 = *(std::__shared_weak_count **)(v11 + 24);
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = *(std::__shared_weak_count **)(v11 + 8);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    return MEMORY[0x1BCCB06A4](v11, 0x10A0C40B50FE552);
  }
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::dump(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  os_unfair_lock_s *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD v37[2];
  void (*v38)();
  void *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[3];
  __int128 v48;
  __int128 v49;
  char v50;
  __int128 v51;
  __int128 v52;

  v9 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v10 = *(std::__shared_weak_count **)(a1 + 120);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(_QWORD *)(a1 + 128);
  v13 = *(std::__shared_weak_count **)(a1 + 136);
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  os_unfair_lock_unlock(v9);
  v46 = 0u;
  memset(v47, 0, sizeof(v47));
  v45 = 0u;
  v43 = v14;
  v44 = v13;
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(_QWORD *)(a1 + 80);
  v20 = *(std::__shared_weak_count **)(a1 + 88);
  v42[0] = v19;
  v42[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::enumerator_s((uint64_t)&v45, &v43, v42);
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::enumerator_s((uint64_t)&v45, &v43, v42);
  }
  v24 = v44;
  if (v44)
  {
    v25 = (unint64_t *)&v44->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 0x40000000;
  v38 = ___ZNK22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke;
  v39 = &unk_1E6E33210;
  v40 = a6;
  v41 = a4;
  v51 = 0u;
  v52 = 0u;
  v50 = 0;
  do
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::next((uint64_t)&v48, (uint64_t)&v45);
    v51 = v48;
    v52 = v49;
    if (!(_QWORD)v49)
      break;
    ((void (*)(_QWORD *, __int128 *, char *))v38)(v37, &v51, &v50);
  }
  while (!v50);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v47);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (!*((_QWORD *)&v46 + 1))
    goto LABEL_30;
  v28 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (!*((_QWORD *)&v45 + 1))
      goto LABEL_36;
  }
  else
  {
LABEL_30:
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (!*((_QWORD *)&v45 + 1))
      goto LABEL_36;
  }
  v31 = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  if (!v13)
    goto LABEL_40;
LABEL_36:
  v33 = (unint64_t *)&v13->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!v10)
      return;
  }
  else
  {
LABEL_40:
    if (!v10)
      return;
  }
  v35 = (unint64_t *)&v10->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::flush(uint64_t a1, uint64_t a2)
{
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::flush(a1 + 48, a2);
}

int *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::compact(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int *result;
  char *v12;
  char *v13;
  const char *v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  v6 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    v16 = v7;
    v17 = 1024;
    v18 = v8;
    v19 = 1024;
    v20 = v9;
    v21 = 1024;
    v22 = v10;
    _os_log_impl(&dword_1B8270000, v5, v6, "compact %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  result = __error();
  *result = v4;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v12 = __si_assert_copy_extra_268();
    v13 = v12;
    v14 = "";
    if (v12)
      v14 = v12;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v14);
    free(v13);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::compactForTest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  NSObject *v7;
  os_log_type_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  const char *v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v13 = __si_assert_copy_extra_268();
    v14 = v13;
    v15 = "";
    if (v13)
      v15 = v13;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v6 = *__error();
  v7 = _SILogForLogForCategory(16);
  v8 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    v22 = 1024;
    v23 = v12;
    _os_log_impl(&dword_1B8270000, v7, v8, "compactForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v6;
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::compactForTest<vi_onefixedsize_disk_allocator>(a1 + 48, a2 + 48, a3);
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::subvert(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  os_unfair_lock_s *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  const char *v30;

  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v28 = __si_assert_copy_extra_268();
    v29 = v28;
    v30 = "";
    if (v28)
      v30 = v28;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v30);
    free(v29);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v4 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v5 = *(std::__shared_weak_count **)(a1 + 120);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v9 = *(_QWORD *)(a1 + 128);
  v8 = *(std::__shared_weak_count **)(a1 + 136);
  if (v8)
  {
    v10 = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  os_unfair_lock_unlock(v4);
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v14 = (os_unfair_lock_s *)(a2 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 144));
  v15 = *(std::__shared_weak_count **)(a2 + 120);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v19 = *(_QWORD *)(a2 + 128);
  v18 = *(std::__shared_weak_count **)(a2 + 136);
  if (v18)
  {
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  os_unfair_lock_unlock(v14);
  if (v15)
  {
    v22 = (unint64_t *)&v15->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 168))(v9, v19);
  if (!v18)
    goto LABEL_31;
  v24 = (unint64_t *)&v18->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v8)
      return;
  }
  else
  {
LABEL_31:
    if (!v8)
      return;
  }
  v26 = (unint64_t *)&v8->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::unlink(uint64_t a1)
{
  os_unfair_lock_s *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v22;
  _QWORD *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a1 + 128);
  v6 = *(std::__shared_weak_count **)(a1 + 136);
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  os_unfair_lock_unlock(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  v10 = *(_QWORD *)(a1 + 80);
  v11 = *__error();
  v12 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = (_QWORD *)(v10 + 40);
    if (*(char *)(v10 + 63) < 0)
      v13 = (_QWORD *)*v13;
    v14 = *(_DWORD *)(v10 + 24);
    v15 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v10 + 16), 0, 3092) + 3088);
    v16 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v10 + 16), (*(_DWORD *)(v10 + 24) - 1), 3092)+ 3088);
    v22 = 136315906;
    v23 = v13;
    v24 = 1024;
    v25 = v14;
    v26 = 1024;
    v27 = v15;
    v28 = 1024;
    v29 = v16;
    _os_log_impl(&dword_1B8270000, v12, OS_LOG_TYPE_DEFAULT, "unlink VectorStore %s(%u)[%u,%u]", (uint8_t *)&v22, 0x1Eu);
  }
  *__error() = v11;
  if (v6)
  {
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v3)
  {
    v19 = (unint64_t *)&v3->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return 1;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::truncate(uint64_t a1)
{
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  os_unfair_lock_s *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint8_t v16[16];

  if (*(_BYTE *)(a1 + 192))
  {
    v1 = *__error();
    v2 = _SILogForLogForCategory(16);
    v3 = dword_1EF19FCCC < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1EF19FCCC < 3)))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1B8270000, v2, v3, "*warn* call truncate on readOnly index.", v16, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::flush(a1 + 48, 0);
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::truncate(*(_QWORD *)(a1 + 80));
    v5 = (os_unfair_lock_s *)(a1 + 144);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
    v6 = *(std::__shared_weak_count **)(a1 + 120);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v10 = *(_QWORD *)(a1 + 128);
    v9 = *(std::__shared_weak_count **)(a1 + 136);
    if (v9)
    {
      v11 = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      os_unfair_lock_unlock(v5);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      os_unfair_lock_unlock(v5);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
    }
    if (v6)
    {
      v14 = (unint64_t *)&v6->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::makeReadOnly(uint64_t a1)
{
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v5;
  int v6;
  NSObject *v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  _QWORD *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 192))
  {
    v1 = *__error();
    v2 = _SILogForLogForCategory(16);
    v3 = dword_1EF19FCCC < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1EF19FCCC < 3)))
    {
      LOWORD(v22) = 0;
      _os_log_impl(&dword_1B8270000, v2, v3, "*warn* call makeReadOnly on readOnly index.", (uint8_t *)&v22, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::flush(a1 + 48, 0);
    v5 = *(_QWORD *)(a1 + 80);
    v6 = *__error();
    v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = (_QWORD *)(v5 + 40);
      if (*(char *)(v5 + 63) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_DWORD *)(v5 + 24);
      v10 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v5 + 16), 0, 3092) + 3088);
      v11 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v5 + 16), (*(_DWORD *)(v5 + 24) - 1), 3092)+ 3088);
      v22 = 136315906;
      v23 = v8;
      v24 = 1024;
      v25 = v9;
      v26 = 1024;
      v27 = v10;
      v28 = 1024;
      v29 = v11;
      _os_log_impl(&dword_1B8270000, v7, OS_LOG_TYPE_DEFAULT, "makeReadOnly VectorStore %s(%u)[%u,%u]", (uint8_t *)&v22, 0x1Eu);
    }
    *__error() = v6;
    IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::truncate(v5);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
    v12 = *(std::__shared_weak_count **)(a1 + 120);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v16 = *(_QWORD *)(a1 + 128);
    v15 = *(std::__shared_weak_count **)(a1 + 136);
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 120))(v16);
      *(_BYTE *)(a1 + 192) = 1;
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 120))(v16);
      *(_BYTE *)(a1 + 192) = 1;
    }
    if (v12)
    {
      v20 = (unint64_t *)&v12->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::makePurgeable(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  _QWORD *v5;
  int v6;
  int v7;
  int v8;
  os_unfair_lock_s *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 80);
  v3 = *__error();
  v4 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (_QWORD *)(v2 + 40);
    if (*(char *)(v2 + 63) < 0)
      v5 = (_QWORD *)*v5;
    v6 = *(_DWORD *)(v2 + 24);
    v7 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v2 + 16), 0, 3092) + 3088);
    v8 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v2 + 16), (*(_DWORD *)(v2 + 24) - 1), 3092)+ 3088);
    v20 = 136315906;
    v21 = v5;
    v22 = 1024;
    v23 = v6;
    v24 = 1024;
    v25 = v7;
    v26 = 1024;
    v27 = v8;
    _os_log_impl(&dword_1B8270000, v4, OS_LOG_TYPE_DEFAULT, "makePurgeable VectorStore %s(%u)[%u,%u]", (uint8_t *)&v20, 0x1Eu);
  }
  *__error() = v3;
  v9 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v10 = *(std::__shared_weak_count **)(a1 + 120);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(_QWORD *)(a1 + 128);
  v13 = *(std::__shared_weak_count **)(a1 + 136);
  if (!v13)
  {
    os_unfair_lock_unlock(v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 128))(v14);
    if (!v10)
      return;
    goto LABEL_18;
  }
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  os_unfair_lock_unlock(v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 128))(v14);
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v10)
  {
LABEL_18:
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::rename(uint64_t a1, const char *a2)
{
  int v4;
  NSObject *v5;
  size_t v6;
  std::string::size_type v7;
  std::string *p_buf;
  uint64_t v9;
  uint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  _QWORD *v23;
  int v24;
  int v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::string::value_type __s[23];
  char v32;
  std::string v33;
  std::string buf;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    _os_log_impl(&dword_1B8270000, v5, OS_LOG_TYPE_DEFAULT, "rename: %s", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v4;
  v6 = strlen(a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_buf = (std::string *)operator new(v9 + 1);
    buf.__r_.__value_.__l.__size_ = v7;
    buf.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_10;
  }
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = v6;
  p_buf = &buf;
  if (v6)
LABEL_10:
    memcpy(p_buf, a2, v7);
  p_buf->__r_.__value_.__s.__data_[v7] = 0;
  v32 = 11;
  strcpy(__s, ".partitions");
  memset(&v33, 0, sizeof(v33));
  v11 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v33, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  else
    v33 = buf;
  std::string::append(&v33, __s, 0xBuLL);
  if (v32 < 0)
  {
    operator delete(*(void **)__s);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_16;
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
LABEL_16:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v12 = *(std::__shared_weak_count **)(a1 + 120);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v16 = *(_QWORD *)(a1 + 128);
  v15 = *(std::__shared_weak_count **)(a1 + 136);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v33;
  else
    v19 = (std::string *)v33.__r_.__value_.__r.__words[0];
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 152))(v16, v19);
  v20 = *(_QWORD *)(a1 + 80);
  v21 = *__error();
  v22 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v23 = (_QWORD *)(v20 + 40);
    if (*(char *)(v20 + 63) < 0)
      v23 = (_QWORD *)*v23;
    v24 = *(_DWORD *)(v20 + 24);
    v25 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v20 + 16), 0, 3092) + 3088);
    v26 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v20 + 16), (*(_DWORD *)(v20 + 24) - 1), 3092)+ 3088);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)a2;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
    v35 = v24;
    v36 = 1024;
    v37 = v25;
    v38 = 1024;
    v39 = v26;
    _os_log_impl(&dword_1B8270000, v22, OS_LOG_TYPE_DEFAULT, "rename VectorStore %s -> %s(%u)[%u,%u]", (uint8_t *)&buf, 0x28u);
  }
  *__error() = v21;
  MEMORY[0x1BCCB03B0](v20 + 40, a2);
  if (v15)
  {
    v27 = (unint64_t *)&v15->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (!v12)
    goto LABEL_38;
  v29 = (unint64_t *)&v12->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (v30)
  {
LABEL_38:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
LABEL_39:
    operator delete(v33.__r_.__value_.__l.__data_);
}

_QWORD *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::storeUpdateSet(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  _QWORD *result;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  const char *v17;
  uint64_t v18;

  result = store_stream_write_vint32_2186(a3, *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24));
  v7 = 0;
  v8 = *(_QWORD *)(a1 + 80);
  while (v7 != *(_DWORD *)(v8 + 24))
  {
    v9 = IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator*(v8, v7);
    CIWritePostings((uint64_t)a3, a2, 0, (unsigned int *)(v9 + 3072), 0, 0);
    v11 = *((_QWORD *)a3 + 4);
    v10 = *((_QWORD *)a3 + 5);
    if (v10 + 3072 >= v11)
    {
      v13 = 3072;
      v12 = (char *)v9;
      while (1)
      {
        v14 = v11 - v10;
        memcpy((void *)(*((_QWORD *)a3 + 6) + v10), v12, v11 - v10);
        *((_QWORD *)a3 + 5) += v14;
        if (store_stream_flush(a3, 0))
          break;
        v12 += v14;
        v13 -= v14;
        v11 = *((_QWORD *)a3 + 4);
        v10 = *((_QWORD *)a3 + 5);
        if (v10 + v13 < v11)
          goto LABEL_5;
      }
    }
    else
    {
      v12 = (char *)v9;
      v13 = 3072;
LABEL_5:
      memcpy((void *)(*((_QWORD *)a3 + 6) + v10), v12, v13);
      *((_QWORD *)a3 + 5) += v13;
    }
    result = store_stream_write_vint32_2186(a3, *(_DWORD *)(v9 + 3088));
    ++v7;
    if (v8 != *(_QWORD *)(a1 + 80))
    {
      v15 = __si_assert_copy_extra_268();
      v16 = v15;
      v17 = "";
      if (v15)
        v17 = v15;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1814, "store == other.store", v17);
      free(v16);
      if (__valid_fs(-1))
        v18 = 2989;
      else
        v18 = 3072;
      *(_DWORD *)v18 = -559038737;
      abort();
    }
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::restoreUpdateSet(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  int v6;
  _BYTE *v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  unsigned int vint32;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  _DWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  __int16 v25;
  int v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  int *v33;
  off_t v34;
  size_t v35;
  void *v36;
  size_t v37;
  unint64_t v38;
  uint64_t v39;
  int *v40;
  char v41;
  off_t v42;
  off_t v43;
  off_t __offseta;
  unsigned int __offsetb;
  uint64_t v46;
  int v47;
  int v49;
  _BYTE __dst[3072];
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[2];
  __int16 v54;

  result = store_stream_read_vint32((uint64_t)a3);
  v47 = result;
  if ((_DWORD)result)
  {
    v6 = 0;
    v46 = a1 + 48;
    do
    {
      v51 = 0;
      v52 = 0;
      v7 = __dst;
      bzero(__dst, 0xC00uLL);
      v49 = 0;
      CIReadPostings(a3, a2, (uint64_t)&v51, &v49);
      v8 = *((_QWORD *)a3 + 4);
      v9 = *((_QWORD *)a3 + 5);
      if (v9 + 3072 > v8)
      {
        v27 = (char *)*((_QWORD *)a3 + 6);
        v28 = v8 - v9;
        if (v8 != v9)
        {
          memcpy(__dst, &v27[v9], v8 - v9);
          *((_QWORD *)a3 + 5) = v8;
          v9 = v8;
        }
        v29 = *a3;
        __offseta = *((_QWORD *)a3 + 3);
        v30 = v27;
        while (1)
        {
          v31 = pread(v29, v30, v9, __offseta);
          if (v31 != -1)
            break;
          v32 = g_prot_error_callback;
          if (!g_prot_error_callback)
            break;
          v33 = __error();
          if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v32 + 16))(v32, v29, *v33, 4) & 1) == 0)goto LABEL_47;
        }
        if (v31 != -1)
        {
          *((_QWORD *)a3 + 4) = v31;
          *((_QWORD *)a3 + 5) = 0;
          v34 = *((_QWORD *)a3 + 3) + v31;
          *((_QWORD *)a3 + 3) = v34;
          if (!v31)
            goto LABEL_7;
          v7 = &__dst[v28];
          v10 = 3072 - v28;
          if (3072 - v28 <= v31)
          {
            v9 = 0;
            goto LABEL_6;
          }
          v43 = v34;
          v35 = v31;
          while (1)
          {
            v36 = (void *)*((_QWORD *)a3 + 6);
            memcpy(v7, v36, v35);
            v37 = v35;
            *((_QWORD *)a3 + 5) = v35;
            __offsetb = *a3;
            while (1)
            {
              v38 = pread(__offsetb, v36, v37, v43);
              if (v38 != -1)
                break;
              v39 = g_prot_error_callback;
              if (!g_prot_error_callback)
                break;
              v40 = __error();
              v41 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v39 + 16))(v39, __offsetb, *v40, 4);
              v37 = v35;
              if ((v41 & 1) == 0)
                goto LABEL_47;
            }
            if (v38 == -1)
              break;
            *((_QWORD *)a3 + 4) = v38;
            *((_QWORD *)a3 + 5) = 0;
            v42 = *((_QWORD *)a3 + 3) + v38;
            *((_QWORD *)a3 + 3) = v42;
            if (!v38)
              goto LABEL_7;
            v43 = v42;
            v9 = 0;
            v7 += v35;
            v10 -= v35;
            v35 = v38;
            if (v10 <= v38)
              goto LABEL_6;
          }
        }
LABEL_47:
        a3[4] = *__error();
      }
      else
      {
        v10 = 3072;
LABEL_6:
        memcpy(v7, (const void *)(*((_QWORD *)a3 + 6) + v9), v10);
        *((_QWORD *)a3 + 5) = v9 + v10;
      }
LABEL_7:
      vint32 = store_stream_read_vint32((uint64_t)a3);
      v12 = v51;
      v13 = v52;
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
      v14 = *(std::__shared_weak_count **)(a1 + 120);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = *(std::__shared_weak_count **)(a1 + 136);
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
        v20 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v46, vint32, __dst, 0xFFFFFFFF, 3.4028e38);
        *((_QWORD *)v20 + 384) = v12;
        *((_QWORD *)v20 + 385) = v13;
        do
          v21 = __ldaxr(v18);
        while (__stlxr(v21 - 1, v18));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      else
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
        v22 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v46, vint32, __dst, 0xFFFFFFFF, 3.4028e38);
        *((_QWORD *)v22 + 384) = v12;
        *((_QWORD *)v22 + 385) = v13;
      }
      if (v14)
      {
        v23 = (unint64_t *)&v14->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v25 = *(_WORD *)(a1 + 76);
      v26 = *(_DWORD *)(a1 + 156);
      v53[0] = *(_DWORD *)(a1 + 160);
      v53[1] = v26;
      v54 = v25;
      result = *(_QWORD *)(a1 + 176);
      if (result)
      {
        if (*(_DWORD *)(result + 216) == -270471200)
          result = data_map_ext_restore_data(result, vint32, __dst, 0xC00uLL, v53);
      }
      ++v6;
    }
    while (v6 != v47);
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::aNN(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, int a7, char a8, float a9, uint64_t a10)
{
  uint64_t v13;
  int v14;
  _QWORD *v15;
  char *v17;
  char *v18;
  const char *v19;
  _QWORD v20[5];

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(a1 + 16))
  {
    v17 = __si_assert_copy_extra_268();
    v18 = v17;
    v19 = "";
    if (v17)
      v19 = v17;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v19);
    free(v18);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v13 = a1 + 48;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 0x40000000;
  v20[2] = ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi768EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke;
  v20[3] = &unk_1E6E333F0;
  v20[4] = a10;
  if ((a7 - 10001) >= 0xFFFFD8F0)
    v14 = a7;
  else
    v14 = 10000;
  v15 = (_QWORD *)operator new();
  *(_DWORD *)v15 = v14;
  v15[2] = 0;
  v15[3] = 0;
  v15[1] = 0;
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNN(v13, a4, a8, v15, 0, a9);
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNProcessResult((uint64_t)v15, (uint64_t)v20);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::aNNForTest(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, int a7, char a8, float a9, uint64_t a10, unsigned int a11)
{
  uint64_t v14;
  int v15;
  _QWORD *v16;
  char *v18;
  char *v19;
  const char *v20;

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(a1 + 16))
  {
    v18 = __si_assert_copy_extra_268();
    v19 = v18;
    v20 = "";
    if (v18)
      v20 = v18;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v20);
    free(v19);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v14 = a1 + 48;
  if ((a7 - 10001) >= 0xFFFFD8F0)
    v15 = a7;
  else
    v15 = 10000;
  v16 = (_QWORD *)operator new();
  *(_DWORD *)v16 = v15;
  v16[2] = 0;
  v16[3] = 0;
  v16[1] = 0;
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNN(v14, a4, a8, v16, a11, a9);
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNForTestProcessResult((uint64_t)v16, a10);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::createCandidateQueue(uint64_t a1, int a2)
{
  int v2;
  uint64_t result;

  if ((a2 - 10001) >= 0xFFFFD8F0)
    v2 = a2;
  else
    v2 = 10000;
  result = operator new();
  *(_DWORD *)result = v2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::aNN(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, char a7, _QWORD *a8, float a9)
{
  char *v9;
  char *v10;
  const char *v11;

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(a1 + 16))
  {
    v9 = __si_assert_copy_extra_268();
    v10 = v9;
    v11 = "";
    if (v9)
      v11 = v9;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v11);
    free(v10);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNN(a1 + 48, a4, a7, a8, 0, a9);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::aNNProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[5];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi768EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke;
  v4[3] = &unk_1E6E33450;
  v4[4] = a3;
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNProcessResult(a2, (uint64_t)v4);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::aNNForTestProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNForTestProcessResult(a2, a3);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::aNNForDebugProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  NSObject *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  float *v15;
  BOOL v16;
  int v17;
  float *v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  int v23;
  NSObject *v24;
  void **v25;
  float *v26;
  char *v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  void **v31;
  void *v32;
  uint64_t v33;
  int v35;
  float *v36;
  CFIndex AppIntegerValue;
  float *v38;
  float *v39;
  uint64_t v40;
  uint8_t v41[4];
  void **v42;
  void *__p[2];
  uint64_t v44;
  uint64_t v45;
  __int128 buf;
  uint64_t v47;
  _QWORD v48[8];
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v5 = *__error();
  v6 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_1B8270000, v6, OS_LOG_TYPE_DEFAULT, "search return %zu results", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v5;
  LOBYTE(buf) = 0;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("IVFANNLogQueryResult"), CFSTR("com.apple.Spotlight"), (Boolean *)&buf);
  v35 = buf;
  v61 = 0u;
  v51 = 0;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v50 = 0u;
  v49 = 0u;
  memset(v48, 0, sizeof(v48));
  v8 = MEMORY[0x1E0DE4FD0] + 104;
  v52 = MEMORY[0x1E0DE4FD0] + 104;
  v9 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v10 = MEMORY[0x1E0DE4FD0] + 64;
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v47 = MEMORY[0x1E0DE4FD0] + 64;
  *(_QWORD *)&buf = v11;
  *(_QWORD *)((char *)&buf + *(_QWORD *)(v11 - 24)) = v12;
  *((_QWORD *)&buf + 1) = 0;
  v13 = (std::ios_base *)((char *)&buf + *(_QWORD *)(buf - 24));
  std::ios_base::init(v13, v48);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v14 = v9[5];
  v47 = v9[4];
  *(_QWORD *)((char *)&v48[-1] + *(_QWORD *)(v47 - 24)) = v14;
  *(_QWORD *)&buf = v9[1];
  *(_QWORD *)((char *)&buf + *(_QWORD *)(buf - 24)) = v9[6];
  v52 = v8;
  *(_QWORD *)&buf = MEMORY[0x1E0DE4FD0] + 24;
  v47 = v10;
  std::streambuf::basic_streambuf();
  v48[0] = MEMORY[0x1E0DE4FB8] + 16;
  v49 = 0u;
  v50 = 0u;
  LODWORD(v51) = 24;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::allItems(&v38, *(_BYTE **)(a2 + 8), *(_BYTE **)(a2 + 16));
  v15 = v39;
  v36 = v38;
  if (v38 != v39)
  {
    if (AppIntegerValue)
      v16 = v35 == 0;
    else
      v16 = 1;
    if (v16)
    {
      v26 = v38;
      do
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD, float))(a3 + 16))(a3, *((unsigned int *)v26 + 2), *((unsigned int *)v26 + 4), v26[5]);
        v26 += 6;
      }
      while (v26 != v15);
    }
    else
    {
      v17 = 0;
      v18 = v38;
      do
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD, float))(a3 + 16))(a3, *((unsigned int *)v18 + 2), *((unsigned int *)v18 + 4), v18[5]);
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)",", 1);
        v20 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)";", 1);
        v21 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
        if ((v21[32] & 5) == 0
          && ((*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v21 + 5)
                                                                                            + 32))(__p, *((_QWORD *)v21 + 5), 0, 1, 16), v45 > 1000)|| (++v17, HIDWORD(v22) = -1030792151 * v17 + 85899344, LODWORD(v22) = HIDWORD(v22), (v22 >> 1) < 0x51EB851))
        {
          v23 = *__error();
          v24 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            v25 = __p;
            if (v44 < 0)
              v25 = (void **)__p[0];
            *(_DWORD *)v41 = 136315138;
            v42 = v25;
            _os_log_impl(&dword_1B8270000, v24, OS_LOG_TYPE_DEFAULT, "%s", v41, 0xCu);
            if (SHIBYTE(v44) < 0)
              operator delete(__p[0]);
          }
          *__error() = v23;
          __p[0] = 0;
          __p[1] = 0;
          v44 = 0;
          std::stringbuf::str();
          if (SHIBYTE(v44) < 0)
            operator delete(__p[0]);
        }
        v18 += 6;
      }
      while (v18 != v15);
    }
  }
  v27 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
  if ((v27[32] & 5) != 0)
  {
    v28 = a2;
  }
  else
  {
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(__p, *((_QWORD *)v27 + 5), 0, 1, 16);
    v28 = a2;
    if (v45 > 0)
    {
      v29 = *__error();
      v30 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        v31 = v44 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)v41 = 136315138;
        v42 = v31;
        _os_log_impl(&dword_1B8270000, v30, OS_LOG_TYPE_DEFAULT, "%s", v41, 0xCu);
        if (SHIBYTE(v44) < 0)
          operator delete(__p[0]);
      }
      *__error() = v29;
    }
  }
  if (v28)
  {
    v32 = *(void **)(v28 + 8);
    if (v32)
    {
      *(_QWORD *)(v28 + 16) = v32;
      operator delete(v32);
    }
    MEMORY[0x1BCCB06A4](v28, 0x1020C403EC25235);
  }
  if (v36)
    operator delete(v36);
  *(_QWORD *)&buf = *MEMORY[0x1E0DE4F50];
  v33 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&buf + *(_QWORD *)(buf - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v47 = v33;
  v48[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v50) < 0)
    operator delete((void *)v49);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BCCB0650](&v52);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::storageSize(uint64_t a1)
{
  os_unfair_lock_s *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v2 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a1 + 128);
  v6 = *(std::__shared_weak_count **)(a1 + 136);
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  os_unfair_lock_unlock(v2);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 16) + 24);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 184))(v7);
  if (!v6)
    goto LABEL_11;
  v12 = (unint64_t *)&v6->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v3)
      return v11 + v10;
  }
  else
  {
LABEL_11:
    if (!v3)
      return v11 + v10;
  }
  v14 = (unint64_t *)&v3->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v11 + v10;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::setVectorStore(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 176) = a2;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::getDataForOffset(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v7;
  int v8;
  NSObject *v9;
  int *v10;
  int v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1) <= a2)
  {
    v8 = *__error();
    v9 = _SILogForLogForCategory(2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
      v12 = 136315906;
      v13 = "getDataForOffset";
      v14 = 1024;
      v15 = 3455;
      v16 = 1024;
      v17 = a2;
      v18 = 1024;
      v19 = v11;
      _os_log_error_impl(&dword_1B8270000, v9, OS_LOG_TYPE_ERROR, "%s:%d: offset out of range: %u >= %u", (uint8_t *)&v12, 0x1Eu);
    }
    v10 = __error();
    v7 = 0;
    result = 0;
    *v10 = v8;
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(a1[6] + 32))(a1 + 6, a2);
    v7 = 3072;
  }
  *a3 = v7;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::updateVectorStorageOffsets(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t i;
  uint64_t result;
  unint64_t Ptr;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  v2 = a2;
  v4 = a1 + 48;
  if (a2)
  {
    for (i = 0; ; ++i)
    {
      result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(v4);
      if (i >= result)
        break;
      Ptr = vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(a1 + 80) + 16), i, 3092);
      if (!*(_BYTE *)(v2 + 184))
      {
        v8 = *(unsigned int *)(Ptr + 3088);
        v9 = *(_DWORD *)(v2 + 24);
        if (!v9 || !((*(_QWORD *)(v2 + 16) ^ v8) >> (-4 * v9)))
        {
          v10 = *(_QWORD *)(v2 + 56 + 8 * ((v8 >> ((60 - 4 * v9) & 0xFC)) & 0xF));
          if ((v10 & 1) != 0)
          {
            v11 = v9 + 2;
            do
              v10 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v8 >> ((64 - 4 * v11++) & 0xFC)) & 0xF));
            while ((v10 & 1) != 0);
          }
          if (v10)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        }
      }
    }
  }
  else
  {
    while (1)
    {
      result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(v4);
      if (v2 >= result)
        break;
      vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(a1 + 80) + 16), v2++, 3092);
    }
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::status(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  _QWORD v38[2];
  uint64_t v39;
  _OWORD v40[4];
  void *__p[2];
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v53 = 0u;
  v43 = 0;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v42 = 0u;
  *(_OWORD *)__p = 0u;
  v4 = MEMORY[0x1E0DE4FD0];
  memset(v40, 0, sizeof(v40));
  v5 = MEMORY[0x1E0DE4FD0] + 104;
  v44 = MEMORY[0x1E0DE4FD0] + 104;
  v6 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v7 = MEMORY[0x1E0DE4FD0] + 64;
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v39 = MEMORY[0x1E0DE4FD0] + 64;
  v38[0] = v8;
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v8 - 24)) = v9;
  v38[1] = 0;
  v10 = (std::ios_base *)((char *)v38 + *(_QWORD *)(v38[0] - 24));
  std::ios_base::init(v10, v40);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v11 = v6[5];
  v39 = v6[4];
  *(uint64_t *)((char *)&v39 + *(_QWORD *)(v39 - 24)) = v11;
  v38[0] = v6[1];
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = v6[6];
  v44 = v5;
  v38[0] = v4 + 24;
  v39 = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v40[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v42 = 0u;
  LODWORD(v43) = 24;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = a2;
  else
    v14 = *(_QWORD *)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, v14, v15);
  v17 = *(char *)(a1 + 47);
  if (v17 >= 0)
    v18 = a1 + 24;
  else
    v18 = *(_QWORD *)(a1 + 24);
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a1 + 47);
  else
    v19 = *(_QWORD *)(a1 + 32);
  v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, v18, v19);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)"(", 1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v21 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"/", 1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)"v", 1);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(a1 + 48, &v36);
  if (v36)
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(a1 + 48, &v34);
    v23 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)")", 1);
    v24 = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v27 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)")", 1);
  }
  v28 = v37;
  if (v37)
  {
    v29 = (unint64_t *)&v37->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, (uint64_t)"[", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, (uint64_t)",", 1);
  v31 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"] indexId: ", 11);
  std::ostream::operator<<();
  std::stringbuf::str();
  v38[0] = *v6;
  v32 = v6[9];
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = v6[8];
  v39 = v32;
  *(_QWORD *)&v40[0] = v12 + 16;
  if (SBYTE7(v42) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BCCB0650](&v44);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,768>::diagnoseDump(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  uint64_t v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  uint64_t v44;
  std::locale *v45;
  uint64_t v46;
  const std::locale::facet *v47;
  uint64_t v48;
  _QWORD *v49;
  const char *v50;
  uint64_t v51;
  const std::locale::facet *v52;
  unint64_t v53;
  std::locale::id *v54;
  const std::locale::facet *v55;
  unint64_t Ptr;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  void *locale;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  std::locale::id *v66;
  _QWORD *v67;
  _QWORD *v68;
  const std::locale::facet *v69;
  const std::locale::facet *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::locale v82;
  std::locale v83;
  uint64_t v84;
  unsigned __int8 v85;

  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, a2, v8);
  v10 = *(char *)(a1 + 47);
  if (v10 >= 0)
    v11 = a1 + 24;
  else
    v11 = *(_QWORD *)(a1 + 24);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 47);
  else
    v12 = *(_QWORD *)(a1 + 32);
  v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" vectors ", 9);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" partitions.", 12);
  if (*(_BYTE *)(a1 + 192))
    v17 = "(readOnly)";
  else
    v17 = "(readWrite)";
  if (*(_BYTE *)(a1 + 192))
    v18 = 10;
  else
    v18 = 11;
  v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
  v20 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v21 = *(_QWORD *)(a1 + 112);
  v22 = *(std::__shared_weak_count **)(a1 + 120);
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  v25 = *(std::__shared_weak_count **)(a1 + 136);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
  if (v22)
  {
    v28 = (unint64_t *)&v22->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (!v25)
    goto LABEL_29;
  v30 = (unint64_t *)&v25->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    v32 = a1 + 48;
    if (!v22)
      goto LABEL_35;
  }
  else
  {
LABEL_29:
    v32 = a1 + 48;
    if (!v22)
      goto LABEL_35;
  }
  v33 = (unint64_t *)&v22->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_35:
  if (v21)
  {
    v35 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Quantizer: ", 11);
    v36 = *(char *)(v21 + 31);
    if (v36 >= 0)
      v37 = v21 + 8;
    else
      v37 = *(_QWORD *)(v21 + 8);
    if (v36 >= 0)
      v38 = *(unsigned __int8 *)(v21 + 31);
    else
      v38 = *(_QWORD *)(v21 + 16);
    v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, v37, v38);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)"(", 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    v40 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)") ", 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    v41 = (_QWORD *)std::ostream::operator<<();
    v42 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, (uint64_t)" centroids.", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(*v42 - 24)));
    v43 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
    std::locale::~locale(&v83);
    std::ostream::put();
    std::ostream::flush();
  }
  v80 = 0;
  v81 = 0;
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(v32, &v80);
  v44 = v80;
  if (!v80)
    goto LABEL_51;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Partition: ", 11);
  (*(void (**)(std::locale *__return_ptr, uint64_t))(*(_QWORD *)v44 + 144))(&v83, v44);
  v45 = (v85 & 0x80u) == 0 ? &v83 : (std::locale *)v83.__locale_;
  v46 = (v85 & 0x80u) == 0 ? v85 : v84;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v45, v46);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
  v47 = std::locale::use_facet(&v82, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
  std::locale::~locale(&v82);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v85 < 0)
  {
    operator delete(v83.__locale_);
    if (!a4)
      goto LABEL_84;
  }
  else
  {
LABEL_51:
    if (!a4)
      goto LABEL_84;
  }
  v78 = v44;
  v48 = *(_QWORD *)(a1 + 80);
  v49 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"offset,vid", 10);
  v79 = a4;
  if (a4 <= 1)
    v50 = ",";
  else
    v50 = ",vector";
  if (a4 <= 1)
    v51 = 1;
  else
    v51 = 7;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
  v52 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  if (*(_DWORD *)(v48 + 24))
  {
    if (a4 <= 1)
    {
      v65 = 0;
      v66 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v48 + 16), v65, 3092);
        v67 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v67, (uint64_t)",", 1);
        v68 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v68, (uint64_t)",", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
        v69 = std::locale::use_facet(&v83, v66);
        ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
        std::locale::~locale(&v83);
        std::ostream::put();
        std::ostream::flush();
        ++v65;
      }
      while (v65 < *(unsigned int *)(v48 + 24));
    }
    else
    {
      v53 = 0;
      v54 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        Ptr = vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v48 + 16), v53, 3092);
        v57 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)",", 1);
        v58 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)",", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"{length = ", 10);
        v59 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)", bytes = 0x", 12);
        data2hexString((const unsigned __int8 *)&v83, Ptr, 16);
        if ((v85 & 0x80u) == 0)
          locale = &v83;
        else
          locale = v83.__locale_;
        if ((v85 & 0x80u) == 0)
          v61 = v85;
        else
          v61 = v84;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)locale, v61);
        if ((char)v85 < 0)
          operator delete(v83.__locale_);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)" ... ", 5);
        data2hexString((const unsigned __int8 *)&v83, Ptr + 3064, 8);
        if ((v85 & 0x80u) == 0)
          v62 = &v83;
        else
          v62 = v83.__locale_;
        if ((v85 & 0x80u) == 0)
          v63 = v85;
        else
          v63 = v84;
        v64 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v62, v63);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)" }", 2);
        if ((char)v85 < 0)
          operator delete(v83.__locale_);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
        v55 = std::locale::use_facet(&v83, v54);
        ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
        std::locale::~locale(&v83);
        std::ostream::put();
        std::ostream::flush();
        ++v53;
      }
      while (v53 < *(unsigned int *)(v48 + 24));
    }
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
  v70 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  if (v78)
    (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v78 + 104))(v78, a3, v79);
LABEL_84:
  v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v72 = v81;
  if (!v81)
    goto LABEL_88;
  v73 = (unint64_t *)&v81->__shared_owners_;
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
    if (!v22)
      return v71;
  }
  else
  {
LABEL_88:
    if (!v22)
      return v71;
  }
  v75 = (unint64_t *)&v22->__shared_owners_;
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  return v71;
}

uint64_t IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(uint64_t a1)
{
  os_unfair_lock_s *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char *v15;
  char *v16;
  const char *v17;

  v2 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a1 + 80);
  v6 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v6)
  {
    os_unfair_lock_unlock(v2);
    if (v7)
    {
      v10 = *(unsigned int *)(v7 + 72);
      goto LABEL_14;
    }
LABEL_20:
    v15 = __si_assert_copy_extra_268();
    v16 = v15;
    v17 = "";
    if (v15)
      v17 = v15;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2312, "cur.partitions != nullptr", v17);
    free(v16);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v8 = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  os_unfair_lock_unlock(v2);
  if (!v7)
    goto LABEL_20;
  v10 = *(unsigned int *)(v7 + 72);
  do
    v11 = __ldaxr(v8);
  while (__stlxr(v11 - 1, v8));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_14:
  if (v3)
  {
    v12 = (unint64_t *)&v3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v10;
}

_QWORD *MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::allItems(_QWORD *result, _BYTE *a2, _BYTE *a3)
{
  int64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  int64_t v8;
  uint64_t v10;
  float *v11;
  __int128 v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  float *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  int v26;

  *result = 0;
  result[1] = 0;
  result[2] = 0;
  v3 = a3 - a2;
  if (a3 == a2)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v3 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v5 = result;
    v6 = operator new(a3 - a2);
    *v5 = v6;
    v7 = (char *)&v6[v3 >> 3];
    v5[2] = v7;
    result = memcpy(v6, a2, v3);
    v5[1] = v7;
  }
  if (v7 - (char *)v6 >= 25)
  {
    v8 = (v7 - (char *)v6) / 0x18uLL;
    do
    {
      v10 = 0;
      v23 = *(_OWORD *)v6;
      v24 = v6[2];
      v11 = (float *)v6;
      do
      {
        v13 = v11;
        v14 = v10 + 1;
        v11 += 6 * v10 + 6;
        v15 = 2 * v10;
        v10 = (2 * v10) | 1;
        v16 = v15 + 2;
        if (v16 < v8 && v13[6 * v14 + 5] < v11[11])
        {
          v11 += 6;
          v10 = v16;
        }
        v12 = *(_OWORD *)v11;
        *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
        *(_OWORD *)v13 = v12;
      }
      while (v10 <= (uint64_t)((unint64_t)(v8 - 2) >> 1));
      v7 -= 24;
      if (v11 == (float *)v7)
      {
        *((_QWORD *)v11 + 2) = v24;
        *(_OWORD *)v11 = v23;
      }
      else
      {
        v17 = *(_OWORD *)v7;
        *((_QWORD *)v11 + 2) = *((_QWORD *)v7 + 2);
        *(_OWORD *)v11 = v17;
        *(_OWORD *)v7 = v23;
        *((_QWORD *)v7 + 2) = v24;
        v18 = (char *)v11 - (char *)v6 + 24;
        if (v18 >= 25)
        {
          v19 = (v18 / 0x18uLL - 2) >> 1;
          v20 = v11[5];
          if (*((float *)&v6[3 * v19 + 2] + 1) < v20)
          {
            v26 = *((_DWORD *)v11 + 4);
            v25 = *(_OWORD *)v11;
            do
            {
              v21 = v11;
              v11 = (float *)&v6[3 * v19];
              v22 = *(_OWORD *)v11;
              *((_QWORD *)v21 + 2) = *((_QWORD *)v11 + 2);
              *(_OWORD *)v21 = v22;
              if (!v19)
                break;
              v19 = (v19 - 1) >> 1;
            }
            while (*((float *)&v6[3 * v19 + 2] + 1) < v20);
            *(_OWORD *)v11 = v25;
            *((_DWORD *)v11 + 4) = v26;
            v11[5] = v20;
          }
        }
      }
    }
    while (v8-- > 2);
  }
  return result;
}

uint64_t IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNForTestProcessResult(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  float *v14;
  BOOL v15;
  int v16;
  float *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  int v22;
  NSObject *v23;
  void **v24;
  float *v25;
  char *v26;
  uint64_t v27;
  int v28;
  NSObject *v29;
  void **v30;
  void *v31;
  uint64_t v32;
  int v34;
  float *v35;
  CFIndex AppIntegerValue;
  float *v37;
  float *v38;
  uint64_t v39;
  uint8_t v40[4];
  void **v41;
  void *__p[2];
  uint64_t v43;
  uint64_t v44;
  __int128 buf;
  uint64_t v46;
  _QWORD v47[8];
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v6;
    _os_log_impl(&dword_1B8270000, v5, OS_LOG_TYPE_DEFAULT, "search return %zu results", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v4;
  LOBYTE(buf) = 0;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("IVFANNLogQueryResult"), CFSTR("com.apple.Spotlight"), (Boolean *)&buf);
  v34 = buf;
  v60 = 0u;
  v50 = 0;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v49 = 0u;
  v48 = 0u;
  memset(v47, 0, sizeof(v47));
  v7 = MEMORY[0x1E0DE4FD0] + 104;
  v51 = MEMORY[0x1E0DE4FD0] + 104;
  v8 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v9 = MEMORY[0x1E0DE4FD0] + 64;
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v46 = MEMORY[0x1E0DE4FD0] + 64;
  *(_QWORD *)&buf = v10;
  *(_QWORD *)((char *)&buf + *(_QWORD *)(v10 - 24)) = v11;
  *((_QWORD *)&buf + 1) = 0;
  v12 = (std::ios_base *)((char *)&buf + *(_QWORD *)(buf - 24));
  std::ios_base::init(v12, v47);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v13 = v8[5];
  v46 = v8[4];
  *(_QWORD *)((char *)&v47[-1] + *(_QWORD *)(v46 - 24)) = v13;
  *(_QWORD *)&buf = v8[1];
  *(_QWORD *)((char *)&buf + *(_QWORD *)(buf - 24)) = v8[6];
  v51 = v7;
  *(_QWORD *)&buf = MEMORY[0x1E0DE4FD0] + 24;
  v46 = v9;
  std::streambuf::basic_streambuf();
  v47[0] = MEMORY[0x1E0DE4FB8] + 16;
  v48 = 0u;
  v49 = 0u;
  LODWORD(v50) = 24;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::allItems(&v37, *(_BYTE **)(a1 + 8), *(_BYTE **)(a1 + 16));
  v14 = v38;
  v35 = v37;
  if (v37 != v38)
  {
    if (AppIntegerValue)
      v15 = v34 == 0;
    else
      v15 = 1;
    if (v15)
    {
      v25 = v37;
      do
      {
        (*(void (**)(uint64_t, _QWORD, float))(a2 + 16))(a2, *((unsigned int *)v25 + 2), v25[5]);
        v25 += 6;
      }
      while (v25 != v14);
    }
    else
    {
      v16 = 0;
      v17 = v37;
      do
      {
        (*(void (**)(uint64_t, _QWORD, float))(a2 + 16))(a2, *((unsigned int *)v17 + 2), v17[5]);
        v18 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)",", 1);
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)";", 1);
        v20 = (char *)&v47[-1] + *(_QWORD *)(v46 - 24);
        if ((v20[32] & 5) == 0
          && ((*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v20 + 5)
                                                                                            + 32))(__p, *((_QWORD *)v20 + 5), 0, 1, 16), v44 > 1000)|| (++v16, HIDWORD(v21) = -1030792151 * v16 + 85899344, LODWORD(v21) = HIDWORD(v21), (v21 >> 1) < 0x51EB851))
        {
          v22 = *__error();
          v23 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            v24 = __p;
            if (v43 < 0)
              v24 = (void **)__p[0];
            *(_DWORD *)v40 = 136315138;
            v41 = v24;
            _os_log_impl(&dword_1B8270000, v23, OS_LOG_TYPE_DEFAULT, "%s", v40, 0xCu);
            if (SHIBYTE(v43) < 0)
              operator delete(__p[0]);
          }
          *__error() = v22;
          __p[0] = 0;
          __p[1] = 0;
          v43 = 0;
          std::stringbuf::str();
          if (SHIBYTE(v43) < 0)
            operator delete(__p[0]);
        }
        v17 += 6;
      }
      while (v17 != v14);
    }
  }
  v26 = (char *)&v47[-1] + *(_QWORD *)(v46 - 24);
  if ((v26[32] & 5) != 0)
  {
    v27 = a1;
  }
  else
  {
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v26 + 5) + 32))(__p, *((_QWORD *)v26 + 5), 0, 1, 16);
    v27 = a1;
    if (v44 > 0)
    {
      v28 = *__error();
      v29 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        v30 = v43 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)v40 = 136315138;
        v41 = v30;
        _os_log_impl(&dword_1B8270000, v29, OS_LOG_TYPE_DEFAULT, "%s", v40, 0xCu);
        if (SHIBYTE(v43) < 0)
          operator delete(__p[0]);
      }
      *__error() = v28;
    }
  }
  if (v27)
  {
    v31 = *(void **)(v27 + 8);
    if (v31)
    {
      *(_QWORD *)(v27 + 16) = v31;
      operator delete(v31);
    }
    MEMORY[0x1BCCB06A4](v27, 0x1020C403EC25235);
  }
  if (v35)
    operator delete(v35);
  *(_QWORD *)&buf = *MEMORY[0x1E0DE4F50];
  v32 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&buf + *(_QWORD *)(buf - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v46 = v32;
  v47[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v49) < 0)
    operator delete((void *)v48);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BCCB0650](&v51);
}

uint64_t ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi768EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNProcessResult(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  float *v14;
  BOOL v15;
  int v16;
  float *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  int v22;
  NSObject *v23;
  void **v24;
  float *v25;
  char *v26;
  int v27;
  NSObject *v28;
  void **v29;
  void *v30;
  uint64_t v31;
  int v33;
  float *v34;
  CFIndex AppIntegerValue;
  float *v36;
  float *v37;
  uint64_t v38;
  uint8_t v39[4];
  void **v40;
  void *__p[2];
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 buf;
  uint64_t v46;
  _QWORD v47[8];
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v6;
    _os_log_impl(&dword_1B8270000, v5, OS_LOG_TYPE_DEFAULT, "search return %zu results", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v4;
  LOBYTE(buf) = 0;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("IVFANNLogQueryResult"), CFSTR("com.apple.Spotlight"), (Boolean *)&buf);
  v33 = buf;
  v60 = 0u;
  v50 = 0;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v49 = 0u;
  v48 = 0u;
  memset(v47, 0, sizeof(v47));
  v7 = MEMORY[0x1E0DE4FD0] + 104;
  v51 = MEMORY[0x1E0DE4FD0] + 104;
  v8 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v9 = MEMORY[0x1E0DE4FD0] + 64;
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v46 = MEMORY[0x1E0DE4FD0] + 64;
  *(_QWORD *)&buf = v10;
  *(_QWORD *)((char *)&buf + *(_QWORD *)(v10 - 24)) = v11;
  *((_QWORD *)&buf + 1) = 0;
  v12 = (std::ios_base *)((char *)&buf + *(_QWORD *)(buf - 24));
  std::ios_base::init(v12, v47);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v13 = v8[5];
  v46 = v8[4];
  *(_QWORD *)((char *)&v47[-1] + *(_QWORD *)(v46 - 24)) = v13;
  *(_QWORD *)&buf = v8[1];
  *(_QWORD *)((char *)&buf + *(_QWORD *)(buf - 24)) = v8[6];
  v51 = v7;
  *(_QWORD *)&buf = MEMORY[0x1E0DE4FD0] + 24;
  v46 = v9;
  std::streambuf::basic_streambuf();
  v47[0] = MEMORY[0x1E0DE4FB8] + 16;
  v48 = 0u;
  v49 = 0u;
  LODWORD(v50) = 24;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::allItems(&v36, *(_BYTE **)(a1 + 8), *(_BYTE **)(a1 + 16));
  v14 = v37;
  v34 = v36;
  if (v36 != v37)
  {
    if (AppIntegerValue)
      v15 = v33 == 0;
    else
      v15 = 1;
    if (v15)
    {
      v25 = v36;
      do
      {
        v44 = *(_OWORD *)v25;
        (*(void (**)(uint64_t, __int128 *, float))(a2 + 16))(a2, &v44, v25[5]);
        v25 += 6;
      }
      while (v25 != v14);
    }
    else
    {
      v16 = 0;
      v17 = v36;
      do
      {
        v44 = *(_OWORD *)v17;
        (*(void (**)(uint64_t, __int128 *, float))(a2 + 16))(a2, &v44, v17[5]);
        v18 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)",", 1);
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)";", 1);
        v20 = (char *)&v47[-1] + *(_QWORD *)(v46 - 24);
        if ((v20[32] & 5) == 0
          && ((*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v20 + 5)
                                                                                            + 32))(__p, *((_QWORD *)v20 + 5), 0, 1, 16), v43 > 1000)|| (++v16, HIDWORD(v21) = -1030792151 * v16 + 85899344, LODWORD(v21) = HIDWORD(v21), (v21 >> 1) < 0x51EB851))
        {
          v22 = *__error();
          v23 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            v24 = __p;
            if (v42 < 0)
              v24 = (void **)__p[0];
            *(_DWORD *)v39 = 136315138;
            v40 = v24;
            _os_log_impl(&dword_1B8270000, v23, OS_LOG_TYPE_DEFAULT, "%s", v39, 0xCu);
            if (SHIBYTE(v42) < 0)
              operator delete(__p[0]);
          }
          *__error() = v22;
          __p[0] = 0;
          __p[1] = 0;
          v42 = 0;
          std::stringbuf::str();
          if (SHIBYTE(v42) < 0)
            operator delete(__p[0]);
        }
        v17 += 6;
      }
      while (v17 != v14);
    }
  }
  v26 = (char *)&v47[-1] + *(_QWORD *)(v46 - 24);
  if ((v26[32] & 5) == 0)
  {
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v26 + 5) + 32))(__p, *((_QWORD *)v26 + 5), 0, 1, 16);
    if (v43 > 0)
    {
      v27 = *__error();
      v28 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        v29 = v42 >= 0 ? __p : (void **)__p[0];
        LODWORD(v44) = 136315138;
        *(_QWORD *)((char *)&v44 + 4) = v29;
        _os_log_impl(&dword_1B8270000, v28, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v44, 0xCu);
        if (SHIBYTE(v42) < 0)
          operator delete(__p[0]);
      }
      *__error() = v27;
    }
  }
  if (a1)
  {
    v30 = *(void **)(a1 + 8);
    if (v30)
    {
      *(_QWORD *)(a1 + 16) = v30;
      operator delete(v30);
    }
    MEMORY[0x1BCCB06A4](a1, 0x1020C403EC25235);
  }
  if (v34)
    operator delete(v34);
  *(_QWORD *)&buf = *MEMORY[0x1E0DE4F50];
  v31 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&buf + *(_QWORD *)(buf - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v46 = v31;
  v47[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v49) < 0)
    operator delete((void *)v48);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BCCB0650](&v51);
}

void IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNN(uint64_t a1, unsigned __int8 *a2, char a3, _QWORD *a4, CFIndex AppIntegerValue, float a6)
{
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  double Current;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  char v32;
  char v33;
  unsigned int v34;
  char v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  NSObject *v42;
  int v43;
  int v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  int *v53;
  int *v54;
  unint64_t v55;
  int v56;
  void *v57;
  int64_t v58;
  char *v59;
  char *v60;
  int v61;
  NSObject *v62;
  int v63;
  int v64;
  double v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint8x8_t v70;
  unint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  float v75;
  int v76;
  NSObject *v77;
  int v78;
  NSObject *v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  int v88;
  NSObject *v89;
  int v90;
  int v91;
  int v92;
  int v93;
  unint64_t v94;
  CFAbsoluteTime v95;
  _QWORD *v96;
  _QWORD *v97;
  void *v98;
  char *v99;
  char *v100;
  const char *v101;
  int v102;
  int v103;
  _QWORD v105[8];
  void *v106;
  void *v107;
  _QWORD *v108;
  float v109;
  void *__p;
  void *v111;
  char *v112;
  void *v113;
  _BYTE *v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  int v126;
  void **v127;
  _BYTE keyExistsAndHasValidFormat[46];
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;
  __int16 v133;
  unint64_t v134;
  __int16 v135;
  CFAbsoluteTime v136;
  _OWORD __str[2];
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  v11 = *(_DWORD *)a4;
  memset(__str, 0, sizeof(__str));
  snprintf((char *)__str, 0x20uLL, "%02x%02x%02x%02x...%02x%02x%02x%02x", *a2, a2[1], a2[2], a2[3], a2[3068], a2[3069], a2[3070], a2[3071]);
  if (!(_DWORD)AppIntegerValue)
    AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("IVFNumberOfParitionsProbe"), CFSTR("com.apple.Spotlight"), 0);
  v103 = v11;
  v12 = 10 * v11;
  keyExistsAndHasValidFormat[0] = 0;
  v13 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeMin"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v14 = v13;
  else
    v14 = 10000;
  if (v12 <= v14)
    v15 = v14;
  else
    v15 = v12;
  v16 = v15
      * IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
  v17 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
  keyExistsAndHasValidFormat[0] = 0;
  v18 = v16 / v17;
  v19 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeMin"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v20 = v19;
  else
    v20 = 7;
  v123 = 0;
  v124 = &v123;
  if (v18 <= v20)
    v18 = v20;
  v126 = 0;
  v125 = 0x2000000000;
  v119 = 0;
  v120 = &v119;
  v122 = 0;
  v121 = 0x2000000000;
  v118 = 0;
  v116 = 0u;
  v117 = 0u;
  QuantizerManager<float,768>::aNNLogQueryVecIds((uint64_t)&v116);
  Current = CFAbsoluteTimeGetCurrent();
  if ((a3 & 1) != 0
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1) <= v18
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1) <= v15)
  {
    v61 = *__error();
    v62 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
    {
      v63 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
      v64 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
      v65 = a6;
      *(_DWORD *)keyExistsAndHasValidFormat = 136316162;
      *(_QWORD *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v103;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v63;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = v64;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 2048;
      *(double *)&keyExistsAndHasValidFormat[32] = a6;
      _os_log_impl(&dword_1B8270000, v62, OS_LOG_TYPE_DEFAULT, "brute force search %s top %u of %u vectors in %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x28u);
    }
    else
    {
      v65 = a6;
    }
    *__error() = v61;
    v102 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    v66 = 0;
    v67 = *(_QWORD *)(a1 + 32);
    do
    {
      if (v66 == *(_DWORD *)(v67 + 24))
        goto LABEL_114;
      ++*((_DWORD *)v124 + 6);
      v68 = IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator*(v67, v66);
      v69 = *(unsigned int *)(v68 + 3088);
      *(_DWORD *)keyExistsAndHasValidFormat = 2139095039;
      vDSP_distancesq((const float *)a2, 1, (const float *)v68, 1, (float *)keyExistsAndHasValidFormat, 0x300uLL);
      if (*((_QWORD *)&v116 + 1))
      {
        v70 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v116 + 8));
        v70.i16[0] = vaddlv_u8(v70);
        if (v70.u32[0] > 1uLL)
        {
          v71 = v69;
          if (*((_QWORD *)&v116 + 1) <= v69)
            v71 = v69 % *((_QWORD *)&v116 + 1);
        }
        else
        {
          v71 = (DWORD2(v116) - 1) & v69;
        }
        v72 = *(uint64_t **)(v116 + 8 * v71);
        if (v72)
        {
          v72 = (uint64_t *)*v72;
          if (v72)
          {
            if (v70.u32[0] < 2uLL)
            {
              while (1)
              {
                v74 = v72[1];
                if (v74 == v69)
                {
                  if (*((_DWORD *)v72 + 4) == (_DWORD)v69)
                    goto LABEL_83;
                }
                else if ((v74 & (*((_QWORD *)&v116 + 1) - 1)) != v71)
                {
                  goto LABEL_82;
                }
                v72 = (uint64_t *)*v72;
                if (!v72)
                  goto LABEL_83;
              }
            }
            do
            {
              v73 = v72[1];
              if (v73 == v69)
              {
                if (*((_DWORD *)v72 + 4) == (_DWORD)v69)
                  break;
              }
              else
              {
                if (v73 >= *((_QWORD *)&v116 + 1))
                  v73 %= *((_QWORD *)&v116 + 1);
                if (v73 != v71)
                  goto LABEL_82;
              }
              v72 = (uint64_t *)*v72;
            }
            while (v72);
          }
        }
      }
      else
      {
LABEL_82:
        v72 = 0;
      }
LABEL_83:
      v75 = *(float *)keyExistsAndHasValidFormat;
      if (a6 == 0.0 || *(float *)keyExistsAndHasValidFormat <= a6)
      {
        if (v72)
        {
          v78 = *__error();
          v79 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109376;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v69;
            *(_WORD *)&keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v75;
            _os_log_impl(&dword_1B8270000, v79, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", keyExistsAndHasValidFormat, 0x12u);
          }
          *__error() = v78;
        }
        *(_OWORD *)keyExistsAndHasValidFormat = *(_OWORD *)(v68 + 3072);
        *(_DWORD *)&keyExistsAndHasValidFormat[16] = v69;
        *(float *)&keyExistsAndHasValidFormat[20] = v75;
        MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::push(a4, (__int128 *)keyExistsAndHasValidFormat);
      }
      else
      {
        if (v72)
        {
          v76 = *__error();
          v77 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109632;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v69;
            *(_WORD *)&keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v75;
            *(_WORD *)&keyExistsAndHasValidFormat[18] = 2048;
            *(double *)&keyExistsAndHasValidFormat[20] = v65;
            _os_log_impl(&dword_1B8270000, v77, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", keyExistsAndHasValidFormat, 0x1Cu);
          }
          *__error() = v76;
        }
        ++*((_DWORD *)v120 + 6);
      }
      ++v66;
    }
    while (v67 == *(_QWORD *)(a1 + 32));
    v99 = __si_assert_copy_extra_268();
    v100 = v99;
    v101 = "";
    if (v99)
      v101 = v99;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1814, "store == other.store", v101);
    free(v100);
    if (!__valid_fs(-1))
    {
      MEMORY[0xC00] = -559038737;
      abort();
    }
    MEMORY[0xBAD] = -559038737;
    goto LABEL_125;
  }
  if (!(_DWORD)AppIntegerValue)
  {
    keyExistsAndHasValidFormat[0] = 0;
    v22 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeMax"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0])
      v23 = v22;
    else
      v23 = 40;
    keyExistsAndHasValidFormat[0] = 0;
    v24 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionSizeFactor"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0])
      v25 = v24;
    else
      v25 = 45;
    keyExistsAndHasValidFormat[0] = 0;
    v26 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeNumerator"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
    v27 = keyExistsAndHasValidFormat[0];
    v28 = 8 * v26;
    v29 = v25 * v25;
    keyExistsAndHasValidFormat[0] = 0;
    v30 = CFPreferencesGetAppIntegerValue(CFSTR("IVFpartitionProbeDecayExponent"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
    v31 = keyExistsAndHasValidFormat[0];
    if (v30 <= 0x12)
      v32 = 18;
    else
      v32 = v30;
    v33 = v32 - 3;
    v34 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    if (v31)
      v35 = v33;
    else
      v35 = 17;
    v36 = v34 >> v35;
    if (v36 <= 8)
      v37 = 8;
    else
      v37 = v36;
    v38 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    if (v27)
      v39 = v28;
    else
      v39 = 800;
    v40 = v39 * v38 / (v29 * v37);
    if (v23 < v40)
      v40 = v23;
    if (v40 <= v18)
      AppIntegerValue = v18;
    else
      AppIntegerValue = v40;
  }
  v41 = *__error();
  v42 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    v43 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    v44 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    *(_DWORD *)keyExistsAndHasValidFormat = 136316418;
    *(_QWORD *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v103;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v43;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[26] = AppIntegerValue;
    *(_WORD *)&keyExistsAndHasValidFormat[30] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[32] = v44;
    *(_WORD *)&keyExistsAndHasValidFormat[36] = 2048;
    *(double *)&keyExistsAndHasValidFormat[38] = a6;
    _os_log_impl(&dword_1B8270000, v42, OS_LOG_TYPE_DEFAULT, "aNN search %s top %u of %u vectors in %u of %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x2Eu);
  }
  *__error() = v41;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v46 = *(_QWORD *)(a1 + 64);
  v45 = *(std::__shared_weak_count **)(a1 + 72);
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v48 = __ldxr(p_shared_owners);
    while (__stxr(v48 + 1, p_shared_owners));
  }
  v50 = *(_QWORD *)(a1 + 80);
  v49 = *(std::__shared_weak_count **)(a1 + 88);
  if (v49)
  {
    v51 = (unint64_t *)&v49->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  memset(keyExistsAndHasValidFormat, 0, 24);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned __int8 *, CFIndex))(*(_QWORD *)v46 + 72))(keyExistsAndHasValidFormat, v46, a2, AppIntegerValue);
  v54 = *(int **)keyExistsAndHasValidFormat;
  v53 = *(int **)&keyExistsAndHasValidFormat[8];
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v127 = &v113;
  v55 = *(_QWORD *)&keyExistsAndHasValidFormat[8] - *(_QWORD *)keyExistsAndHasValidFormat;
  if (*(_QWORD *)&keyExistsAndHasValidFormat[8] == *(_QWORD *)keyExistsAndHasValidFormat)
  {
    v111 = 0;
    v112 = 0;
    __p = 0;
    goto LABEL_94;
  }
  do
  {
    v56 = *v54;
    v54 += 2;
    std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&v127, v56);
  }
  while (v54 != v53);
  v57 = v113;
  v111 = 0;
  v112 = 0;
  __p = 0;
  v58 = v114 - (_BYTE *)v113;
  if (v114 == v113)
    goto LABEL_94;
  if (v58 < 0)
LABEL_125:
    abort();
  v59 = (char *)operator new(v114 - (_BYTE *)v113);
  v60 = &v59[4 * (v58 >> 2)];
  __p = v59;
  v112 = v60;
  memcpy(v59, v57, v58);
  v111 = v60;
LABEL_94:
  v105[0] = MEMORY[0x1E0C809B0];
  v105[1] = 1174405120;
  v105[2] = ___ZNK22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE3aNNERK10CIVector_sIfLi768EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke;
  v105[3] = &unk_1E6E33418;
  v105[6] = a1;
  v105[7] = a2;
  v105[4] = &v123;
  std::unordered_set<unsigned int>::unordered_set((uint64_t)&v106, (uint64_t)&v116);
  v109 = a6;
  v105[5] = &v119;
  v108 = a4;
  (*(void (**)(uint64_t, void **, _QWORD *))(*(_QWORD *)v50 + 72))(v50, &__p, v105);
  if (__p)
  {
    v111 = __p;
    operator delete(__p);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 136));
  v80 = v107;
  if (v107)
  {
    do
    {
      v81 = (_QWORD *)*v80;
      operator delete(v80);
      v80 = v81;
    }
    while (v81);
  }
  v82 = v106;
  v106 = 0;
  if (v82)
    operator delete(v82);
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  if (*(_QWORD *)keyExistsAndHasValidFormat)
  {
    *(_QWORD *)&keyExistsAndHasValidFormat[8] = *(_QWORD *)keyExistsAndHasValidFormat;
    operator delete(*(void **)keyExistsAndHasValidFormat);
  }
  v83 = v55 >> 3;
  if (v49)
  {
    v84 = (unint64_t *)&v49->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v102 = v83;
  if (v45)
  {
    v86 = (unint64_t *)&v45->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
LABEL_114:
  v88 = *__error();
  v89 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
  {
    v90 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    v91 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    v92 = *((_DWORD *)v120 + 6);
    v93 = *((_DWORD *)v124 + 6);
    v94 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
    v95 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)keyExistsAndHasValidFormat = 136317442;
    *(_QWORD *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v103;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v90;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 2048;
    *(double *)&keyExistsAndHasValidFormat[26] = a6;
    *(_WORD *)&keyExistsAndHasValidFormat[34] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[36] = v102;
    *(_WORD *)&keyExistsAndHasValidFormat[40] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[42] = v91;
    v129 = 1024;
    v130 = v92;
    v131 = 1024;
    v132 = v93;
    v133 = 2048;
    v134 = v94;
    v135 = 2048;
    v136 = v95 - Current;
    _os_log_impl(&dword_1B8270000, v89, OS_LOG_TYPE_DEFAULT, "search %s top %u of %u vectors max_distance=%f in %u of %u partitions skip %u of %u populate %zu results in duration: %f", keyExistsAndHasValidFormat, 0x4Eu);
  }
  *__error() = v88;
  v96 = (_QWORD *)v117;
  if ((_QWORD)v117)
  {
    do
    {
      v97 = (_QWORD *)*v96;
      operator delete(v96);
      v96 = v97;
    }
    while (v97);
  }
  v98 = (void *)v116;
  *(_QWORD *)&v116 = 0;
  if (v98)
    operator delete(v98);
  _Block_object_dispose(&v119, 8);
  _Block_object_dispose(&v123, 8);
}

uint64_t IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(uint64_t a1)
{
  os_unfair_lock_s *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char *v15;
  char *v16;
  const char *v17;

  v2 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a1 + 80);
  v6 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v6)
  {
    os_unfair_lock_unlock(v2);
    if (v7)
    {
      v10 = *(unsigned int *)(v7 + 68);
      goto LABEL_14;
    }
LABEL_20:
    v15 = __si_assert_copy_extra_268();
    v16 = v15;
    v17 = "";
    if (v15)
      v17 = v15;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2306, "cur.partitions != nullptr", v17);
    free(v16);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v8 = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  os_unfair_lock_unlock(v2);
  if (!v7)
    goto LABEL_20;
  v10 = *(unsigned int *)(v7 + 68);
  do
    v11 = __ldaxr(v8);
  while (__stlxr(v11 - 1, v8));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_14:
  if (v3)
  {
    v12 = (unint64_t *)&v3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v10;
}

unint64_t IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator*(uint64_t a1, unsigned int a2)
{
  char *v3;
  char *v4;
  const char *v5;

  if (*(_DWORD *)(a1 + 24) <= a2)
  {
    v3 = __si_assert_copy_extra_268();
    v4 = v3;
    v5 = "";
    if (v3)
      v5 = v3;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1798, "offset < store->endOffset()", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(a1 + 16), a2, 3092);
}

void MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::push(_QWORD *a1, __int128 *a2)
{
  float *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  float *v9;
  uint64_t v10;
  float *v11;
  __int128 v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  float v26;
  float *v27;
  float *v28;
  __int128 v29;
  __int128 *v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  float v34;
  float *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  float *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  int v48;

  v5 = (char *)a1[1];
  v4 = (float *)a1[2];
  v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - v5) >> 3);
  if (v6 >= *(unsigned int *)a1)
  {
    if (*((float *)a2 + 5) < *((float *)v5 + 5))
    {
      if ((char *)v4 - v5 >= 25)
      {
        v10 = 0;
        v43 = *(_OWORD *)v5;
        v45 = *((_QWORD *)v5 + 2);
        v11 = (float *)a1[1];
        do
        {
          v13 = v11;
          v14 = v10 + 1;
          v11 += 6 * v10 + 6;
          v15 = 2 * v10;
          v10 = (2 * v10) | 1;
          v16 = v15 + 2;
          if (v16 < (uint64_t)v6 && v13[6 * v14 + 5] < v11[11])
          {
            v11 += 6;
            v10 = v16;
          }
          v12 = *(_OWORD *)v11;
          *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
          *(_OWORD *)v13 = v12;
        }
        while (v10 <= (uint64_t)((v6 - 2) >> 1));
        v30 = (__int128 *)(v4 - 6);
        if (v11 == v4 - 6)
        {
          *((_QWORD *)v11 + 2) = v45;
          *(_OWORD *)v11 = v43;
        }
        else
        {
          v31 = *v30;
          *((_QWORD *)v11 + 2) = *((_QWORD *)v4 - 1);
          *(_OWORD *)v11 = v31;
          *v30 = v43;
          *((_QWORD *)v4 - 1) = v45;
          v32 = (char *)v11 - v5 + 24;
          if (v32 >= 25)
          {
            v33 = (v32 / 0x18uLL - 2) >> 1;
            v34 = v11[5];
            if (*(float *)&v5[24 * v33 + 20] < v34)
            {
              v48 = *((_DWORD *)v11 + 4);
              v47 = *(_OWORD *)v11;
              do
              {
                v35 = v11;
                v11 = (float *)&v5[24 * v33];
                v36 = *(_OWORD *)v11;
                *((_QWORD *)v35 + 2) = *((_QWORD *)v11 + 2);
                *(_OWORD *)v35 = v36;
                if (!v33)
                  break;
                v33 = (v33 - 1) >> 1;
              }
              while (*(float *)&v5[24 * v33 + 20] < v34);
              *(_OWORD *)v11 = v47;
              *((_DWORD *)v11 + 4) = v48;
              v11[5] = v34;
            }
          }
        }
        v4 = (float *)a1[2];
      }
      v37 = *a2;
      *((_QWORD *)v4 - 1) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(v4 - 6) = v37;
      v38 = a1[1];
      v39 = a1[2];
      if (v39 - v38 >= 25)
      {
        v40 = ((v39 - v38) / 0x18uLL - 2) >> 1;
        v26 = *(float *)(v39 - 4);
        if (*(float *)(v38 + 24 * v40 + 20) < v26)
        {
          v27 = (float *)(v39 - 24);
          v44 = *(_OWORD *)(v39 - 24);
          v46 = *(_DWORD *)(v39 - 8);
          do
          {
            v41 = v27;
            v27 = (float *)(v38 + 24 * v40);
            v42 = *(_OWORD *)v27;
            *((_QWORD *)v41 + 2) = *((_QWORD *)v27 + 2);
            *(_OWORD *)v41 = v42;
            if (!v40)
              break;
            v40 = (v40 - 1) >> 1;
          }
          while (*(float *)(v38 + 24 * v40 + 20) < v26);
          goto LABEL_43;
        }
      }
    }
  }
  else
  {
    v7 = a1[3];
    if ((unint64_t)v4 >= v7)
    {
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v5) >> 3);
      if (2 * v17 <= v6 + 1)
        v18 = v6 + 1;
      else
        v18 = 2 * v17;
      if (v17 >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v18;
      if (v19 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v20 = 24 * v19;
      v21 = (char *)operator new(24 * v19);
      v22 = &v21[8 * (((char *)v4 - v5) >> 3)];
      *(_OWORD *)v22 = *a2;
      *((_QWORD *)v22 + 2) = *((_QWORD *)a2 + 2);
      v9 = (float *)(v22 + 24);
      if (v4 != (float *)v5)
      {
        do
        {
          v23 = *(_OWORD *)(v4 - 6);
          *((_QWORD *)v22 - 1) = *((_QWORD *)v4 - 1);
          *(_OWORD *)(v22 - 24) = v23;
          v22 -= 24;
          v4 -= 6;
        }
        while (v4 != (float *)v5);
        v4 = (float *)v5;
      }
      a1[1] = v22;
      a1[2] = v9;
      a1[3] = &v21[v20];
      if (v4)
        operator delete(v4);
    }
    else
    {
      v8 = *a2;
      *((_QWORD *)v4 + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v8;
      v9 = v4 + 6;
    }
    a1[2] = v9;
    v24 = a1[1];
    if ((uint64_t)v9 - v24 >= 25)
    {
      v25 = (((unint64_t)v9 - v24) / 0x18 - 2) >> 1;
      v26 = *(v9 - 1);
      if (*(float *)(v24 + 24 * v25 + 20) < v26)
      {
        v27 = v9 - 6;
        v44 = *(_OWORD *)(v9 - 6);
        v46 = *((_DWORD *)v9 - 2);
        do
        {
          v28 = v27;
          v27 = (float *)(v24 + 24 * v25);
          v29 = *(_OWORD *)v27;
          *((_QWORD *)v28 + 2) = *((_QWORD *)v27 + 2);
          *(_OWORD *)v28 = v29;
          if (!v25)
            break;
          v25 = (v25 - 1) >> 1;
        }
        while (*(float *)(v24 + 24 * v25 + 20) < v26);
LABEL_43:
        *(_OWORD *)v27 = v44;
        *((_DWORD *)v27 + 4) = v46;
        v27[5] = v26;
      }
    }
  }
}

void ___ZNK22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE3aNNERK10CIVector_sIfLi768EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  unint64_t Ptr;
  const float *v6;
  float v7;
  unint64_t v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  int v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  double v22;
  _BYTE v23[20];
  double v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 48);
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  Ptr = vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(v4 + 32) + 16), *a3, 3092);
  v6 = *(const float **)(a1 + 56);
  *(_DWORD *)v23 = 2139095039;
  vDSP_distancesq(v6, 1, (const float *)Ptr, 1, (float *)v23, 0x300uLL);
  v7 = *(float *)v23;
  v8 = *(unsigned int *)(Ptr + 3088);
  v9 = *(int8x8_t *)(a1 + 72);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = *(unsigned int *)(Ptr + 3088);
      if (*(_QWORD *)&v9 <= v8)
        v11 = v8 % *(_QWORD *)&v9;
    }
    else
    {
      v11 = (v9.i32[0] - 1) & v8;
    }
    v12 = *(uint64_t **)(*(_QWORD *)(a1 + 64) + 8 * v11);
    if (v12)
    {
      v12 = (uint64_t *)*v12;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          v13 = *(_QWORD *)&v9 - 1;
          while (1)
          {
            v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
                goto LABEL_22;
            }
            else if ((v15 & v13) != v11)
            {
              goto LABEL_21;
            }
            v12 = (uint64_t *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v14 = v12[1];
          if (v14 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
              break;
          }
          else
          {
            if (v14 >= *(_QWORD *)&v9)
              v14 %= *(_QWORD *)&v9;
            if (v14 != v11)
              goto LABEL_21;
          }
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
  else
  {
LABEL_21:
    v12 = 0;
  }
LABEL_22:
  v16 = *(float *)(a1 + 112);
  if (v16 == 0.0 || *(float *)v23 <= v16)
  {
    if (v12)
    {
      v18 = *__error();
      v19 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v23 = 67109376;
        *(_DWORD *)&v23[4] = v8;
        *(_WORD *)&v23[8] = 2048;
        *(double *)&v23[10] = v7;
        _os_log_impl(&dword_1B8270000, v19, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", v23, 0x12u);
      }
      *__error() = v18;
    }
    *(_OWORD *)v23 = *(_OWORD *)(Ptr + 3072);
    *(_DWORD *)&v23[16] = v8;
    *(float *)&v24 = v7;
    MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::push(*(_QWORD **)(a1 + 104), (__int128 *)v23);
  }
  else
  {
    if (v12)
    {
      v20 = *__error();
      v21 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        v22 = *(float *)(a1 + 112);
        *(_DWORD *)v23 = 67109632;
        *(_DWORD *)&v23[4] = v8;
        *(_WORD *)&v23[8] = 2048;
        *(double *)&v23[10] = v7;
        *(_WORD *)&v23[18] = 2048;
        v24 = v22;
        _os_log_impl(&dword_1B8270000, v21, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", v23, 0x1Cu);
      }
      *__error() = v20;
    }
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  }
}

uint64_t ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi768EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

_DWORD *IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(uint64_t a1, unsigned int a2, const void *a3, unsigned int a4, float a5)
{
  unsigned int Vector;
  uint64_t v9;
  _DWORD *Ptr;
  const UInt8 *data;
  int v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  _BYTE *v18;
  int v19;
  NSObject *v20;
  _BYTE *v21;
  const void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  _DWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  size_t OffsetFromEnd;
  uint64_t v32;
  int v33;
  NSObject *v34;
  _OWORD *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  NSObject *v41;
  const UInt8 *v42;
  int v43;
  NSObject *v44;
  size_t v45;
  int v46;
  NSObject *v47;
  int v48;
  NSObject *v49;
  _BYTE *v50;
  int v51;
  NSObject *v52;
  _BYTE *v53;
  NSObject *v54;
  int v55;
  NSObject *v56;
  int v58;
  int v59;
  int v60;
  char *v61;
  char *v62;
  const char *v63;
  char *v64;
  char *v65;
  const char *v66;
  char *v67;
  const char *v68;
  char *v69;
  const char *v70;
  char *v71;
  const char *v72;
  uint64_t v73;
  char *v74;
  const char *v75;
  char *v76;
  const char *v77;
  unsigned int v78;
  uint64_t v79;
  float v80;
  unsigned int v81;
  uint8_t buf[4];
  _BYTE *v83;
  _BYTE __p[12];
  __int16 v85;
  int v86;
  __int16 v87;
  _BYTE v88[14];
  __int16 v89;
  uint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v81 = a4;
  v80 = a5;
  if (*(_BYTE *)(a1 + 144))
  {
    v61 = __si_assert_copy_extra_268();
    v62 = v61;
    v63 = "";
    if (v61)
      v63 = v61;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2430, "!readOnly", v63);
    goto LABEL_104;
  }
  Vector = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::findVector(a1, (uint64_t)a3, (int *)&v81, &v80, a2);
  v9 = v81;
  if (v81 == -1)
  {
    v64 = __si_assert_copy_extra_268();
    v65 = v64;
    v66 = "";
    if (v64)
      v66 = v64;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2435, "partID != VECTOR_NOT_FOUND", v66);
    goto LABEL_94;
  }
  if (Vector != -1)
  {
    Ptr = (_DWORD *)vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 16), Vector, 3092);
    if (Ptr[772] == a2)
      return Ptr;
    v79 = 0;
    data = data_map_get_data(*(_QWORD *)(a1 + 128), a2, &v79);
    v12 = *__error();
    v13 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 136316162;
      *(_QWORD *)&__p[4] = "lookupForInsert";
      v85 = 1024;
      v86 = 2463;
      v87 = 1024;
      *(_DWORD *)v88 = a2;
      *(_WORD *)&v88[4] = 2048;
      *(_QWORD *)&v88[6] = data;
      v89 = 2048;
      v90 = v79;
      _os_log_error_impl(&dword_1B8270000, v13, OS_LOG_TYPE_ERROR, "%s:%d: vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v12;
    if (v79 < 1)
    {
      v19 = *__error();
      v41 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "lookupForInsert";
        v85 = 1024;
        v86 = 2472;
        _os_log_error_impl(&dword_1B8270000, v41, OS_LOG_TYPE_ERROR, "%s:%d: vectorId is invalid", __p, 0x12u);
      }
    }
    else
    {
      if (v79 != 3072)
      {
        v74 = __si_assert_copy_extra_268();
        v62 = v74;
        v75 = "";
        if (v74)
          v75 = v74;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2465, "size == D * sizeof(ELEM_TYPE)", v75);
        goto LABEL_104;
      }
      if (!data || !memcmp(data, a3, 0xC00uLL))
        goto LABEL_51;
      v14 = *__error();
      v15 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "lookupForInsert";
        v85 = 1024;
        v86 = 2467;
        _os_log_error_impl(&dword_1B8270000, v15, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v14;
      v16 = *__error();
      v17 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)data, v79);
        v18 = v88[3] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        v83 = v18;
        _os_log_impl(&dword_1B8270000, v17, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v88[3] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      *__error() = v16;
      v19 = *__error();
      v20 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)a3, v79);
        v21 = v88[3] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        v83 = v21;
        _os_log_impl(&dword_1B8270000, v20, OS_LOG_TYPE_DEFAULT, "vector passed in: %s", buf, 0xCu);
        if ((v88[3] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
    }
    *__error() = v19;
LABEL_51:
    v42 = data_map_get_data(*(_QWORD *)(a1 + 128), Ptr[772], &v79);
    v43 = *__error();
    v44 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      v58 = Ptr[772];
      *(_DWORD *)__p = 136316162;
      *(_QWORD *)&__p[4] = "lookupForInsert";
      v85 = 1024;
      v86 = 2475;
      v87 = 1024;
      *(_DWORD *)v88 = v58;
      *(_WORD *)&v88[4] = 2048;
      *(_QWORD *)&v88[6] = v42;
      v89 = 2048;
      v90 = v79;
      _os_log_error_impl(&dword_1B8270000, v44, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v43;
    if (v79 < 1)
    {
      v51 = *__error();
      v54 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "lookupForInsert";
        v85 = 1024;
        v86 = 2484;
        _os_log_error_impl(&dword_1B8270000, v54, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId is invalid", __p, 0x12u);
      }
      goto LABEL_73;
    }
    if (v79 == 3072)
    {
      v45 = 3072;
      if (!v42 || !memcmp(v42, Ptr, 0xC00uLL))
        goto LABEL_74;
      v46 = *__error();
      v47 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "lookupForInsert";
        v85 = 1024;
        v86 = 2479;
        _os_log_error_impl(&dword_1B8270000, v47, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v46;
      v48 = *__error();
      v49 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)v42, v79);
        v50 = v88[3] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        v83 = v50;
        _os_log_impl(&dword_1B8270000, v49, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v88[3] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      *__error() = v48;
      v51 = *__error();
      v52 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)Ptr, v79);
        v53 = v88[3] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        v83 = v53;
        _os_log_impl(&dword_1B8270000, v52, OS_LOG_TYPE_DEFAULT, "vector in vector store: %s", buf, 0xCu);
        if ((v88[3] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
LABEL_73:
      *__error() = v51;
      v45 = v79;
LABEL_74:
      if (!memcmp(a3, Ptr, v45))
      {
        v55 = *__error();
        v56 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_FAULT))
        {
          v59 = Ptr[772];
          *(_DWORD *)__p = 136315906;
          *(_QWORD *)&__p[4] = "lookupForInsert";
          v85 = 1024;
          v86 = 2487;
          v87 = 1024;
          *(_DWORD *)v88 = a2;
          *(_WORD *)&v88[4] = 1024;
          *(_DWORD *)&v88[6] = v59;
          _os_log_fault_impl(&dword_1B8270000, v56, OS_LOG_TYPE_FAULT, "%s:%d: Dup vector with new vectorId=%u old=%u", __p, 0x1Eu);
        }
        *__error() = v55;
        return Ptr;
      }
      v71 = __si_assert_copy_extra_268();
      v65 = v71;
      v72 = "";
      if (v71)
        v72 = v71;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2486, "memcmp(vec.vec, entry->vec.vec, size) == 0", v72);
LABEL_94:
      free(v65);
      if (__valid_fs(-1))
        v73 = 2989;
      else
        v73 = 3072;
      *(_DWORD *)v73 = -559038737;
      abort();
    }
    v76 = __si_assert_copy_extra_268();
    v62 = v76;
    v77 = "";
    if (v76)
      v77 = v76;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2477, "size == D * sizeof(ELEM_TYPE)", v77);
LABEL_104:
    free(v62);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v78 = a2;
  v22 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v23 = *(std::__shared_weak_count **)(a1 + 72);
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  v27 = *(_DWORD **)(a1 + 80);
  v26 = *(std::__shared_weak_count **)(a1 + 88);
  if (v26)
  {
    v28 = (unint64_t *)&v26->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  v30 = *(_QWORD *)(a1 + 32);
  OffsetFromEnd = vi_onefixedsize_memory_allocator::allocateOffsetFromEnd(*(_QWORD *)(v30 + 16), 0xC14u);
  v32 = *(unsigned int *)(v30 + 24);
  if (OffsetFromEnd != v32)
  {
    v33 = *__error();
    v34 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v60 = *(_DWORD *)(v30 + 24);
      *(_DWORD *)__p = 136315906;
      *(_QWORD *)&__p[4] = "newEntry";
      v85 = 1024;
      v86 = 1779;
      v87 = 2048;
      *(_QWORD *)v88 = OffsetFromEnd;
      *(_WORD *)&v88[8] = 1024;
      *(_DWORD *)&v88[10] = v60;
      _os_log_error_impl(&dword_1B8270000, v34, OS_LOG_TYPE_ERROR, "%s:%d: offset: %llu, nVectors: %u", __p, 0x22u);
    }
    *__error() = v33;
    v32 = *(unsigned int *)(v30 + 24);
    if (OffsetFromEnd != v32)
    {
      v69 = __si_assert_copy_extra_268();
      v62 = v69;
      v70 = "";
      if (v69)
        v70 = v69;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1782, "offset == nVectors", v70);
      goto LABEL_104;
    }
  }
  *(_DWORD *)(v30 + 24) = v32 + 1;
  v35 = (_OWORD *)vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v30 + 16), OffsetFromEnd, 3092);
  memcpy(v35, v22, 0xC00uLL);
  v35[192] = 0u;
  (*(void (**)(_DWORD *, uint64_t, size_t, float))(*(_QWORD *)v27 + 56))(v27, v9, OffsetFromEnd, v80);
  v36 = *(_QWORD *)(a1 + 32);
  if (v27[18] != *(_DWORD *)(v36 + 24))
  {
    v67 = __si_assert_copy_extra_268();
    v62 = v67;
    v68 = "";
    if (v67)
      v68 = v67;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2440, "cur.partitions->nVectors() == vectors->count()", v68);
    goto LABEL_104;
  }
  Ptr = (_DWORD *)vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v36 + 16), OffsetFromEnd, 3092);
  Ptr[772] = v78;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 24) == 1)
    *(_DWORD *)(a1 + 148) = v78;
  *(_DWORD *)(a1 + 152) = v78;
  if (v26)
  {
    v37 = (unint64_t *)&v26->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v23)
  {
    v39 = (unint64_t *)&v23->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return Ptr;
}

uint64_t IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::findVector(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, int a5)
{
  os_unfair_lock_s *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  _DWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char *v28;
  char *v29;
  const char *v30;
  char *v31;
  const char *v32;
  char *v33;
  char *v34;
  const char *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  _QWORD v40[8];
  int v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  int v45;

  v10 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v12 = *(_QWORD *)(a1 + 64);
  v11 = *(std::__shared_weak_count **)(a1 + 72);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v16 = *(_DWORD **)(a1 + 80);
  v15 = *(std::__shared_weak_count **)(a1 + 88);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  os_unfair_lock_unlock(v10);
  v19 = *a3;
  if ((_DWORD)v19 == -1)
  {
    if (*(_DWORD *)(a1 + 140) == -1)
    {
      v42 = 0;
      v43 = 0;
      v44 = 0;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 72))(&v42, v12, a2, 1);
      v20 = v42;
      if (v43 - (char *)v42 == 8)
      {
        v21 = *v42;
        *a3 = *v42;
        *a4 = v20[1];
        if (v21 >= IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1))
        {
          v33 = __si_assert_copy_extra_268();
          v34 = v33;
          if (v33)
            v35 = v33;
          else
            v35 = "";
          v36 = *a3;
          v37 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
          v38 = v16[19];
          v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          __message_assert("%s:%u: failed assertion '%s' %s Invalid partId %u >= %u (partitions: v%u quantizer v%u", "IVFVectorIndex.hh", 2403, "partID < nPartitions()", v35, v36, v37, v38, v39);
          free(v34);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if (v42)
        {
          v43 = (char *)v42;
          operator delete(v42);
        }
        v19 = *a3;
        goto LABEL_14;
      }
      v31 = __si_assert_copy_extra_268();
      v29 = v31;
      v32 = "";
      if (v31)
        v32 = v31;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2398, "topPartition.size() == 1", v32);
    }
    else
    {
      v28 = __si_assert_copy_extra_268();
      v29 = v28;
      v30 = "";
      if (v28)
        v30 = v28;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2396, "mergeBeginVectorOffset == VECTOR_NOT_FOUND", v30);
    }
    free(v29);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
LABEL_14:
  v42 = 0;
  v43 = (char *)&v42;
  v45 = -1;
  v44 = 0x2000000000;
  v40[0] = MEMORY[0x1E0C809B0];
  v40[1] = 0x40000000;
  v40[2] = ___ZN22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE10findVectorERK10CIVector_sIfLi768EERjRfj_block_invoke;
  v40[3] = &unk_1E6E331E8;
  v41 = a5;
  v40[6] = a4;
  v40[7] = a2;
  v40[4] = &v42;
  v40[5] = a1;
  (*(void (**)(_DWORD *, uint64_t, _QWORD *))(*(_QWORD *)v16 + 80))(v16, v19, v40);
  v22 = *((unsigned int *)v43 + 6);
  _Block_object_dispose(&v42, 8);
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v11)
  {
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v22;
}

unint64_t ___ZN22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE10findVectorERK10CIVector_sIfLi768EERjRfj_block_invoke(unint64_t result, uint64_t a2, float *a3, _BYTE *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  int v15;
  const void *v16;
  const void *Ptr;

  v5 = *(_QWORD *)(result + 40);
  v6 = *(unsigned int *)a3;
  if (v6 >= *(_DWORD *)(v5 + 140))
    goto LABEL_12;
  v8 = result;
  v9 = **(float **)(result + 48);
  v10 = a3[1];
  v11 = v9 == v10;
  v12 = vabds_f32(v9, v10);
  v13 = fmaxf(fminf(fabsf(v10), fabsf(v9)) * 0.000015259, 0.000015259);
  if (v11 || v12 <= v13)
  {
    v15 = *(_DWORD *)(result + 64);
    if (v15)
    {
      result = vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(v5 + 32) + 16), v6, 3092);
      if (v15 != *(_DWORD *)(result + 3088))
        return result;
      *(float *)&v6 = *a3;
    }
    v16 = *(const void **)(v8 + 56);
    Ptr = (const void *)vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(v5 + 32) + 16), v6, 3092);
    result = memcmp(v16, Ptr, 0xC00uLL);
    if (!(_DWORD)result)
    {
      *(float *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8) + 24) = *a3;
LABEL_12:
      *a4 = 1;
    }
  }
  return result;
}

size_t store_stream_read_bytes(unsigned int *a1, char *__dst)
{
  char *v2;
  size_t v4;
  uint64_t v5;
  size_t v6;
  size_t v7;
  size_t v8;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  size_t __n;

  v2 = __dst;
  v4 = *((_QWORD *)a1 + 4);
  v5 = *((_QWORD *)a1 + 5);
  if (v5 + 1 > v4)
  {
    v6 = v4 - v5;
    if (v4 != v5)
    {
      memcpy(__dst, (const void *)(*((_QWORD *)a1 + 6) + v5), v4 - v5);
      v4 = *((_QWORD *)a1 + 4);
      *((_QWORD *)a1 + 5) += v6;
    }
    v10 = prot_pread(*a1, *((void **)a1 + 6), v4, *((_QWORD *)a1 + 3));
    if (v10 == -1)
    {
      v6 = 0;
    }
    else
    {
      *((_QWORD *)a1 + 4) = v10;
      *((_QWORD *)a1 + 5) = 0;
      *((_QWORD *)a1 + 3) += v10;
      if (!v10)
      {
        v8 = 0;
        return v6 + v8;
      }
      v2 += v6;
      v7 = 1 - v6;
      if (1 - v6 <= v10)
      {
        v5 = 0;
        goto LABEL_3;
      }
      __n = v10;
      while (1)
      {
        memcpy(v2, *((const void **)a1 + 6), __n);
        v11 = (void *)*((_QWORD *)a1 + 6);
        *((_QWORD *)a1 + 5) += __n;
        v12 = prot_pread(*a1, v11, *((_QWORD *)a1 + 4), *((_QWORD *)a1 + 3));
        if (v12 == -1)
          break;
        *((_QWORD *)a1 + 4) = v12;
        *((_QWORD *)a1 + 5) = 0;
        *((_QWORD *)a1 + 3) += v12;
        if (!v12)
        {
          v8 = v6;
          v6 = __n;
          return v6 + v8;
        }
        v5 = 0;
        v2 += __n;
        v7 -= __n;
        v6 += __n;
        __n = v12;
        if (v7 <= v12)
          goto LABEL_3;
      }
    }
    a1[4] = *__error();
    v8 = v6;
    v6 = 0;
    return v6 + v8;
  }
  v6 = 0;
  v7 = 1;
LABEL_3:
  memcpy(v2, (const void *)(*((_QWORD *)a1 + 6) + v5), v7);
  *((_QWORD *)a1 + 5) += v7;
  v8 = v6;
  v6 = v7;
  return v6 + v8;
}

void IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::flush(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v3;
  os_log_type_t v4;
  os_unfair_lock_s *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint8_t v18[16];

  if (*(_BYTE *)(a1 + 144))
  {
    v2 = *__error();
    v3 = _SILogForLogForCategory(16);
    v4 = dword_1EF19FCCC < 3;
    if (os_log_type_enabled(v3, (os_log_type_t)(dword_1EF19FCCC < 3)))
    {
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1B8270000, v3, v4, "*warn* call flush on readOnly index.", v18, 2u);
    }
    *__error() = v2;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 40) = 0;
    v7 = (os_unfair_lock_s *)(a1 + 96);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
    v8 = *(std::__shared_weak_count **)(a1 + 72);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    v12 = *(_QWORD *)(a1 + 80);
    v11 = *(std::__shared_weak_count **)(a1 + 88);
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      os_unfair_lock_unlock(v7);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 112))(v12, a2);
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      os_unfair_lock_unlock(v7);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 112))(v12, a2);
    }
    if (v8)
    {
      v16 = (unint64_t *)&v8->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

int *IVFVectorIndexTemplate<float,768>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::truncate(uint64_t a1)
{
  int v2;
  NSObject *v3;
  _QWORD *v4;
  int v5;
  int v6;
  int v7;
  int *result;
  int v9;
  _QWORD *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *__error();
  v3 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (_QWORD *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v4 = (_QWORD *)*v4;
    v5 = *(_DWORD *)(a1 + 24);
    v6 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(a1 + 16), 0, 3092) + 3088);
    v7 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(a1 + 16), (*(_DWORD *)(a1 + 24) - 1), 3092)+ 3088);
    v9 = 136315906;
    v10 = v4;
    v11 = 1024;
    v12 = v5;
    v13 = 1024;
    v14 = v6;
    v15 = 1024;
    v16 = v7;
    _os_log_impl(&dword_1B8270000, v3, OS_LOG_TYPE_DEFAULT, "truncate VectorStore %s(%u)[%u,%u]", (uint8_t *)&v9, 0x1Eu);
  }
  result = __error();
  *result = v2;
  return result;
}

void ___ZNK22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke()
{
  char *v0;
  char *v1;
  const char *v2;

  v0 = __si_assert_copy_extra_268();
  v1 = v0;
  v2 = "";
  if (v0)
    v2 = v0;
  __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2544, "0", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

uint64_t IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::beginMerge(uint64_t a1)
{
  uint64_t result;
  char *v3;
  char *v4;
  const char *v5;

  if (*(_DWORD *)(a1 + 140) != -1)
  {
    v3 = __si_assert_copy_extra_268();
    v4 = v3;
    v5 = "";
    if (v3)
      v5 = v3;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2674, "mergeBeginVectorOffset == VECTOR_NOT_FOUND", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
  *(_DWORD *)(a1 + 140) = result;
  return result;
}

uint64_t IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::endMerge(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  NSObject *v20;
  os_log_type_t v21;
  void **v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char *v29;
  char *v30;
  const char *v31;
  void *__p;
  char v33;
  _QWORD v34[2];
  uint64_t v35;
  _OWORD v36[4];
  void *v37[2];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint8_t buf[4];
  void **v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 140) == -1)
  {
    v29 = __si_assert_copy_extra_268();
    v30 = v29;
    v31 = "";
    if (v29)
      v31 = v29;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2679, "mergeBeginVectorOffset < VECTOR_NOT_FOUND", v31);
    free(v30);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  *(_DWORD *)(a1 + 140) = -1;
  v49 = 0u;
  v39 = 0;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  v42 = 0u;
  v41 = 0u;
  v38 = 0u;
  *(_OWORD *)v37 = 0u;
  v2 = MEMORY[0x1E0DE4FD0];
  memset(v36, 0, sizeof(v36));
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  v40 = MEMORY[0x1E0DE4FD0] + 104;
  v4 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v5 = MEMORY[0x1E0DE4FD0] + 64;
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v35 = MEMORY[0x1E0DE4FD0] + 64;
  v34[0] = v6;
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v6 - 24)) = v7;
  v34[1] = 0;
  v8 = (std::ios_base *)((char *)v34 + *(_QWORD *)(v34[0] - 24));
  std::ios_base::init(v8, v36);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v4[5];
  v35 = v4[4];
  *(uint64_t *)((char *)&v35 + *(_QWORD *)(v35 - 24)) = v9;
  v34[0] = v4[1];
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = v4[6];
  v40 = v3;
  v34[0] = v2 + 24;
  v35 = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v37 = 0u;
  v38 = 0u;
  LODWORD(v39) = 24;
  v11 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v12 = *(std::__shared_weak_count **)(a1 + 72);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v16 = *(_QWORD *)(a1 + 80);
  v15 = *(std::__shared_weak_count **)(a1 + 88);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  os_unfair_lock_unlock(v11);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v16 + 104))(v16, &v35, 0);
  v19 = *__error();
  v20 = _SILogForLogForCategory(16);
  v21 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v20, v21))
  {
    std::stringbuf::str();
    v22 = v33 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    v51 = v22;
    _os_log_impl(&dword_1B8270000, v20, v21, "%s", buf, 0xCu);
    if (v33 < 0)
      operator delete(__p);
  }
  *__error() = v19;
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v12)
  {
    v25 = (unint64_t *)&v12->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v34[0] = *v4;
  v27 = v4[9];
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = v4[8];
  v35 = v27;
  *(_QWORD *)&v36[0] = v10 + 16;
  if (SBYTE7(v38) < 0)
    operator delete(v37[0]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BCCB0650](&v40);
}

char *vi_memory_postings::push_posting(char *result, int a2, unsigned int *__src, uint64_t a4)
{
  int v7;
  _QWORD *v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  size_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  char *v19;
  char *v20;
  const char *v21;

  v7 = *__src & 1;
  if (__src[2])
  {
    v8 = result;
    if (v7)
      v9 = 2;
    else
      v9 = 1;
    v10 = (unsigned int *)(result + 12);
    v11 = atomic_load((unsigned int *)result + 3);
    v12 = v11 + v9;
    v13 = *((unsigned int *)result + 2);
    if (v12 >= v13)
    {
      v18 = 2 * v13;
      if (!(_DWORD)v13)
        v18 = 0x4000;
      *((_DWORD *)result + 2) = v18;
      if (my_vm_reallocate((void **)result, 12 * v13, 12 * v18, 243, *((_QWORD *)result + 2)))
      {
        v19 = __si_assert_copy_extra_268();
        v20 = v19;
        v21 = "";
        if (v19)
          v21 = v19;
        __message_assert("%s:%u: failed assertion '%s' %s ", "DocPosting.h", 250, "0 == kr", v21);
        free(v20);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
    }
    do
      v14 = __ldaxr(v10);
    while (__stlxr(v14 + v9, v10));
    if (v7)
      v15 = 16;
    else
      v15 = 12;
    result = (char *)memcpy((void *)(*v8 + 12 * v14), __src, v15);
    v7 = 2 * v14;
  }
  if (a2)
  {
    v16 = v7 | 1;
    *((_QWORD *)__src + 1) = a4;
    v17 = 2 * (a2 != 2);
  }
  else
  {
    __src[2] = a4;
    v16 = v7 & 0xFFFFFFFE;
    v17 = 1;
  }
  *__src = v16;
  __src[1] = v17;
  return result;
}

BOOL IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::exists(uint64_t a1, uint64_t a2)
{
  int Vector;
  int v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD v32[8];
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unsigned int v36;
  _QWORD v37[7];
  unsigned int v38;
  float v39;
  float v40;
  unsigned int v41;
  _BYTE buf[24];
  _DWORD v43[4];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v40 = 3.4028e38;
  v41 = -1;
  Vector = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::findVector(a1, a2, (int *)&v41, &v40, 0);
  if (Vector == -1)
  {
    v6 = *__error();
    v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "exists";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2632;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v41;
      LOWORD(v43[0]) = 2048;
      *(double *)((char *)v43 + 2) = v40;
      _os_log_error_impl(&dword_1B8270000, v7, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v6;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
    v9 = *(_QWORD *)(a1 + 64);
    v8 = *(std::__shared_weak_count **)(a1 + 72);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v13 = *(_QWORD *)(a1 + 80);
    v12 = *(std::__shared_weak_count **)(a1 + 88);
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v43[0] = -1;
    *(_QWORD *)&buf[16] = 0x2000000000;
    v16 = v41;
    v17 = MEMORY[0x1E0C809B0];
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 0x40000000;
    v37[2] = ___ZN22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIfLi768EE_block_invoke;
    v37[3] = &unk_1E6E33188;
    v37[5] = a1;
    v37[6] = a2;
    v38 = v41;
    v39 = v40;
    v37[4] = buf;
    (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v13 + 80))(v13, v41, v37);
    if (*(_DWORD *)(*(_QWORD *)&buf[8] + 24) == -1)
    {
      v32[0] = v17;
      v32[1] = 1174405120;
      v32[2] = ___ZN22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIfLi768EE_block_invoke_742;
      v32[3] = &unk_1E6E331B0;
      v32[5] = a1;
      v32[6] = a2;
      v32[7] = v9;
      v33 = v8;
      if (v8)
      {
        v22 = (unint64_t *)&v8->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v34 = v13;
      v35 = v12;
      if (v12)
      {
        v24 = (unint64_t *)&v12->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v36 = v16;
      v32[4] = buf;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 64))(v13, v32);
      v26 = v35;
      if (v35)
      {
        v27 = (unint64_t *)&v35->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = v33;
      if (v33)
      {
        v30 = (unint64_t *)&v33->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
    _Block_object_dispose(buf, 8);
    if (v12)
    {
      v18 = (unint64_t *)&v12->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v8)
    {
      v20 = (unint64_t *)&v8->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  return Vector != -1;
}

void ___ZN22IVFVectorIndexTemplateIfLi768EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIfLi768EE_block_invoke_742(uint64_t a1, int a2, float *a3, _BYTE *a4)
{
  const void *v8;
  uint64_t v9;
  const void *Ptr;
  int v11;
  NSObject *v12;
  const float *v13;
  const float *v14;
  float v15;
  int v16;
  NSObject *v17;
  int v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  int v22;
  NSObject *v23;
  int v24;
  NSObject *v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  NSObject *v31;
  int v32;
  NSObject *v33;
  int v34;
  NSObject *v35;
  int v36;
  NSObject *v37;
  int v38;
  NSObject *v39;
  double v40;
  int v41;
  int v42;
  float v43;
  int v44;
  float v45;
  _BOOL4 v46;
  int v47;
  int v48;
  _BOOL4 v49;
  int v50;
  int v51;
  _BOOL4 v52;
  int v53;
  int v54;
  _BOOL4 v55;
  int v56;
  int v57;
  float v58;
  float v59;
  double v60;
  float v61;
  _BOOL4 v62;
  _BOOL4 v63;
  int v64;
  float v65;
  int v66;
  float v67;
  _BOOL4 v68;
  int v69;
  int v70;
  _BOOL4 v71;
  int v72;
  int v73;
  _BOOL4 v74;
  int v75;
  int v76;
  _BOOL4 v77;
  int v78;
  int v79;
  float v80;
  float v81;
  float v82;
  _BOOL4 v83;
  _BOOL4 v84;
  _BOOL4 v85;
  float v86;
  float v87;
  float v88;
  float v89;
  void *__p;
  void *v91;
  uint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  float __C;
  const char *v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;
  __int16 v102;
  _BYTE v103[14];
  __int16 v104;
  double v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  _BOOL4 v109;
  __int16 v110;
  _BOOL4 v111;
  __int16 v112;
  _BOOL4 v113;
  __int16 v114;
  _BOOL4 v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 40);
  v8 = *(const void **)(a1 + 48);
  Ptr = (const void *)vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(v9 + 32) + 16), *(unsigned int *)a3, 3092);
  if (!memcmp(v8, Ptr, 0xC00uLL))
  {
    v11 = *__error();
    v12 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v40 = a3[1];
      __C = 4.8153e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2647;
      v100 = 1024;
      v101 = a2;
      v102 = 2048;
      *(double *)v103 = v40;
      _os_log_error_impl(&dword_1B8270000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", (uint8_t *)&__C, 0x22u);
    }
    *__error() = v11;
    v13 = *(const float **)(a1 + 48);
    v14 = (const float *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56), *(unsigned int *)(a1 + 88));
    __C = 3.4028e38;
    vDSP_distancesq(v13, 1, v14, 1, &__C, 0x300uLL);
    v15 = __C;
    v16 = *__error();
    v17 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v41 = *(_DWORD *)(a1 + 88);
      __C = 4.8153e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2649;
      v100 = 1024;
      v101 = v41;
      v102 = 2048;
      *(double *)v103 = v15;
      _os_log_error_impl(&dword_1B8270000, v17, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", (uint8_t *)&__C, 0x22u);
    }
    *__error() = v16;
    v93 = 0;
    v94 = 0;
    v95 = 0;
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 72))(&v93, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), 2);
    v18 = *__error();
    v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v42 = *(_DWORD *)v93;
      v43 = *((float *)v93 + 1);
      v44 = *((_DWORD *)v93 + 2);
      v45 = *((float *)v93 + 3);
      v46 = v43 == v45 || vabds_f32(v43, v45) <= fmaxf(fminf(fabsf(v45), fabsf(v43)) * 0.000015259, 0.000015259);
      __C = 4.8156e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2651;
      v100 = 1024;
      v101 = v42;
      v102 = 2048;
      *(double *)v103 = v43;
      *(_WORD *)&v103[8] = 1024;
      *(_DWORD *)&v103[10] = v44;
      v104 = 2048;
      v105 = v45;
      v106 = 1024;
      LODWORD(v107) = v46;
      _os_log_error_impl(&dword_1B8270000, v19, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(vec, 2) <%u, %e>, <%u, %e>, %d", (uint8_t *)&__C, 0x38u);
    }
    *__error() = v18;
    v20 = *__error();
    v21 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v47 = *(_DWORD *)v93;
      v48 = *((_DWORD *)v93 + 2);
      v49 = *((float *)v93 + 1) == *((float *)v93 + 3);
      __C = 4.8154e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2652;
      v100 = 1024;
      v101 = v47;
      v102 = 1024;
      *(_DWORD *)v103 = v48;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v49;
      _os_log_error_impl(&dword_1B8270000, v21, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v20;
    v22 = *__error();
    v23 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v50 = *(_DWORD *)v93;
      v51 = *((_DWORD *)v93 + 2);
      v52 = *((float *)v93 + 1) < *((float *)v93 + 3);
      __C = 4.8154e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2653;
      v100 = 1024;
      v101 = v50;
      v102 = 1024;
      *(_DWORD *)v103 = v51;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v52;
      _os_log_error_impl(&dword_1B8270000, v23, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v22;
    v24 = *__error();
    v25 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v53 = *(_DWORD *)v93;
      v54 = *((_DWORD *)v93 + 2);
      v55 = *((float *)v93 + 1) > *((float *)v93 + 3);
      __C = 4.8154e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2654;
      v100 = 1024;
      v101 = v53;
      v102 = 1024;
      *(_DWORD *)v103 = v54;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v55;
      _os_log_error_impl(&dword_1B8270000, v25, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v24;
    v26 = *__error();
    v27 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      v56 = *(_DWORD *)v93;
      v57 = *((_DWORD *)v93 + 2);
      v58 = *((float *)v93 + 1);
      v59 = *((float *)v93 + 3);
      v60 = (float)(v58 - v59);
      v61 = vabds_f32(v58, v59);
      if (v58 == v59)
      {
        v62 = 1;
        v63 = 1;
      }
      else
      {
        v86 = fabsf(v58);
        v87 = fabsf(v59);
        v62 = v61 <= fmaxf(fminf(v87, v86) * 0.000015259, 0.000015259);
        v63 = v61 <= (float)(fmaxf(v86, v87) * 0.000015259);
      }
      __C = 4.8161e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2655;
      v100 = 1024;
      v101 = v56;
      v102 = 1024;
      *(_DWORD *)v103 = v57;
      *(_WORD *)&v103[4] = 2048;
      *(double *)&v103[6] = v60;
      v104 = 2048;
      v105 = 1.17549435e-38;
      v106 = 2048;
      v107 = 0x3E80000000000000;
      v108 = 1024;
      v109 = v61 < 1.1755e-38;
      v110 = 1024;
      v111 = v61 < 0.00000011921;
      v112 = 1024;
      v113 = v62;
      v114 = 1024;
      v115 = v63;
      _os_log_error_impl(&dword_1B8270000, v27, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&__C, 0x54u);
    }
    *__error() = v26;
    v91 = 0;
    v92 = 0;
    __p = 0;
    v28 = *(_QWORD *)(a1 + 56);
    v29 = vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(v9 + 32) + 16), *(unsigned int *)a3, 3092);
    (*(void (**)(void **__return_ptr, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v28 + 72))(&__p, v28, v29, 2);
    v30 = *__error();
    v31 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v64 = *(_DWORD *)__p;
      v65 = *((float *)__p + 1);
      v66 = *((_DWORD *)__p + 2);
      v67 = *((float *)__p + 3);
      v68 = v65 == v67 || vabds_f32(v65, v67) <= fmaxf(fminf(fabsf(v67), fabsf(v65)) * 0.000015259, 0.000015259);
      __C = 4.8156e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2658;
      v100 = 1024;
      v101 = v64;
      v102 = 2048;
      *(double *)v103 = v65;
      *(_WORD *)&v103[8] = 1024;
      *(_DWORD *)&v103[10] = v66;
      v104 = 2048;
      v105 = v67;
      v106 = 1024;
      LODWORD(v107) = v68;
      _os_log_error_impl(&dword_1B8270000, v31, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(entry->vec, 2) <%u, %e>, <%u, %e>, %d", (uint8_t *)&__C, 0x38u);
    }
    *__error() = v30;
    v32 = *__error();
    v33 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      v69 = *(_DWORD *)__p;
      v70 = *((_DWORD *)__p + 2);
      v71 = *((float *)__p + 1) == *((float *)__p + 3);
      __C = 4.8154e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2659;
      v100 = 1024;
      v101 = v69;
      v102 = 1024;
      *(_DWORD *)v103 = v70;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v71;
      _os_log_error_impl(&dword_1B8270000, v33, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v32;
    v34 = *__error();
    v35 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v72 = *(_DWORD *)__p;
      v73 = *((_DWORD *)__p + 2);
      v74 = *((float *)__p + 1) < *((float *)__p + 3);
      __C = 4.8154e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2660;
      v100 = 1024;
      v101 = v72;
      v102 = 1024;
      *(_DWORD *)v103 = v73;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v74;
      _os_log_error_impl(&dword_1B8270000, v35, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v34;
    v36 = *__error();
    v37 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      v75 = *(_DWORD *)__p;
      v76 = *((_DWORD *)__p + 2);
      v77 = *((float *)__p + 1) > *((float *)__p + 3);
      __C = 4.8154e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2661;
      v100 = 1024;
      v101 = v75;
      v102 = 1024;
      *(_DWORD *)v103 = v76;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v77;
      _os_log_error_impl(&dword_1B8270000, v37, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v36;
    v38 = *__error();
    v39 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      v78 = *(_DWORD *)__p;
      v79 = *((_DWORD *)__p + 2);
      v80 = *((float *)__p + 1);
      v81 = *((float *)__p + 3);
      v82 = vabds_f32(v80, v81);
      v83 = (float)(v80 - v81) < 1.1755e-38;
      if (v80 == v81)
      {
        v84 = 1;
        v85 = 1;
      }
      else
      {
        v88 = fabsf(v80);
        v89 = fabsf(v81);
        v84 = v82 <= fmaxf(fminf(v89, v88) * 0.000015259, 0.000015259);
        v85 = v82 <= (float)(fmaxf(v88, v89) * 0.000015259);
      }
      __C = 4.8161e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2662;
      v100 = 1024;
      v101 = v78;
      v102 = 1024;
      *(_DWORD *)v103 = v79;
      *(_WORD *)&v103[4] = 2048;
      *(double *)&v103[6] = v82;
      v104 = 2048;
      v105 = 1.17549435e-38;
      v106 = 2048;
      v107 = 0x3E80000000000000;
      v108 = 1024;
      v109 = v83;
      v110 = 1024;
      v111 = v82 < 0.00000011921;
      v112 = 1024;
      v113 = v84;
      v114 = 1024;
      v115 = v85;
      _os_log_error_impl(&dword_1B8270000, v39, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&__C, 0x54u);
    }
    *__error() = v38;
    *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *a3;
    *a4 = 1;
    if (__p)
    {
      v91 = __p;
      operator delete(__p);
    }
    if (v93)
    {
      v94 = v93;
      operator delete(v93);
    }
  }
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E329C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E329C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;

  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
  {
    malloc_zone_free(*(malloc_zone_t **)v2, *(void **)(v2 + 8));
    JUMPOUT(0x1BCCB06A4);
  }
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s(_QWORD *a1)
{
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s(a1);
  JUMPOUT(0x1BCCB06A4);
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getQuantizer(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  os_unfair_lock_s *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v4 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v6 = *(_QWORD *)(a1 + 64);
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(std::__shared_weak_count **)(a1 + 88);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  os_unfair_lock_unlock(v4);
  *a2 = v6;
  a2[1] = v5;
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (!v9)
    goto LABEL_14;
  v14 = (unint64_t *)&v9->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v5)
      return;
  }
  else
  {
LABEL_14:
    if (!v5)
      return;
  }
  v16 = (unint64_t *)&v5->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  os_unfair_lock_s *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v9 = *(_QWORD *)(a1 + 80);
  v8 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v8)
  {
    os_unfair_lock_unlock(v4);
    *a2 = v9;
    a2[1] = 0;
    if (!v5)
      return;
    goto LABEL_15;
  }
  v10 = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  os_unfair_lock_unlock(v4);
  *a2 = v9;
  a2[1] = v8;
  do
    v12 = __ldxr(v10);
  while (__stxr(v12 + 1, v10));
  do
    v13 = __ldaxr(v10);
  while (__stlxr(v13 - 1, v10));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v5)
  {
LABEL_15:
    v14 = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

unint64_t IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getVectorAtOffset(uint64_t a1, unsigned int a2)
{
  return vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 16), a2, 2068);
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::newPartitions(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  os_unfair_lock_s *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  const char *v14;
  size_t v15;
  void *v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  malloc_zone_t *v20;
  uint64_t v21;
  _DWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  unint64_t Ptr;
  int v32;
  int v33;
  NSObject *v34;
  void **v35;
  int v36;
  int v37;
  char *v38;
  _QWORD *v39;
  int v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  const char *v47;
  void *v48[2];
  char v49;
  void *__dst[2];
  unint64_t v51;
  void *__p[3];
  __int16 v53;
  _QWORD *v54;
  __int16 v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v6 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v7 = *(std::__shared_weak_count **)(a1 + 72);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v11 = *(_QWORD *)(a1 + 80);
  v10 = *(std::__shared_weak_count **)(a1 + 88);
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  os_unfair_lock_unlock(v6);
  v14 = ".partitions";
  if (v11 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11))
    v14 = ".tmp.partitions";
  v15 = strlen(v14);
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
LABEL_60:
    abort();
  v16 = (void *)v15;
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v17 = (void **)operator new(v18 + 1);
    __dst[1] = v16;
    v51 = v19 | 0x8000000000000000;
    __dst[0] = v17;
    goto LABEL_17;
  }
  HIBYTE(v51) = v15;
  v17 = __dst;
  if (v15)
LABEL_17:
    memcpy(v17, v14, (size_t)v16);
  *((_BYTE *)v16 + (_QWORD)v17) = 0;
  v20 = malloc_default_zone();
  if (SHIBYTE(v51) < 0)
    operator delete(__dst[0]);
  v21 = operator new();
  v22 = (_DWORD *)v21;
  v23 = *(std::__shared_weak_count **)(a2 + 8);
  __p[0] = *(void **)a2;
  __p[1] = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionStore<vi_onefixedsize_memory_allocator>(v21, v20, 0, __p);
    do
      v26 = __ldaxr(v24);
    while (__stlxr(v26 - 1, v24));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  else
  {
    PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionStore<vi_onefixedsize_memory_allocator>(v21, v20, 0, __p);
  }
  *a3 = v22;
  v27 = (_QWORD *)operator new();
  *v27 = &off_1E6E31210;
  v27[1] = 0;
  v27[2] = 0;
  v27[3] = v22;
  a3[1] = v27;
  v28 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v28 + 24))
  {
    v29 = 0;
    do
    {
      memset(__p, 0, sizeof(__p));
      v30 = *(void **)a2;
      Ptr = vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v28 + 16), v29, 2068);
      (*(void (**)(void **__return_ptr, void *, unint64_t, uint64_t))(*(_QWORD *)v30 + 72))(__p, v30, Ptr, 1);
      (*(void (**)(_DWORD *, _QWORD, unint64_t, float))(*(_QWORD *)v22 + 56))(v22, *(unsigned int *)__p[0], v29, *((float *)__p[0] + 1));
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v29;
      v28 = *(_QWORD *)(a1 + 32);
    }
    while (v29 < *(unsigned int *)(v28 + 24));
  }
  (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v22 + 112))(v22, 0);
  v32 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 24);
  if (v32)
  {
    v33 = *__error();
    v34 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, _DWORD *))(*(_QWORD *)v22 + 144))(v48, v22);
      if (v49 >= 0)
        v35 = v48;
      else
        v35 = (void **)v48[0];
      v36 = v22[17];
      v37 = v22[18];
      v38 = *(char **)a2;
      v39 = (_QWORD *)(*(_QWORD *)a2 + 8);
      if (v38[31] < 0)
        v39 = (_QWORD *)*v39;
      v40 = (*(uint64_t (**)(char *))(*(_QWORD *)v38 + 16))(v38);
      LODWORD(__p[0]) = 136316162;
      *(void **)((char *)__p + 4) = v35;
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = v37;
      WORD1(__p[2]) = 1024;
      HIDWORD(__p[2]) = v36;
      v53 = 2080;
      v54 = v39;
      v55 = 1024;
      v56 = v40;
      _os_log_impl(&dword_1B8270000, v34, OS_LOG_TYPE_DEFAULT, "Create new partitions %s(%u/%u) for new quantizer %s(%u)", (uint8_t *)__p, 0x28u);
      if (v49 < 0)
        operator delete(v48[0]);
    }
    *__error() = v33;
    v32 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 24);
  }
  if (v22[18] != v32)
  {
    v45 = __si_assert_copy_extra_268();
    v46 = v45;
    v47 = "";
    if (v45)
      v47 = v45;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2363, "newPartitions->nVectors() == vectors->count()", v47);
    free(v46);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    goto LABEL_60;
  }
  if (v10)
  {
    v41 = (unint64_t *)&v10->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v7)
  {
    v43 = (unint64_t *)&v7->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::replaceQuantizer(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  std::__shared_weak_count *v8;
  __int128 *v9;
  char *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  _DWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  _DWORD *v18;
  NSObject *v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  void **v23;
  int v24;
  void **v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  const char *v47;
  char *v48;
  const char *v49;
  _QWORD *v50;
  _QWORD *v51;
  int v52;
  int v53;
  int v54;
  os_unfair_lock_s *v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *__p[2];
  char v61;
  void *v62[2];
  char v63;
  uint8_t buf[4];
  _QWORD *v65;
  __int16 v66;
  int v67;
  __int16 v68;
  _QWORD *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  void **v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  void **v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v6 = (os_unfair_lock_s *)(a1 + 136);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  v7 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v10 = *(char **)(a1 + 64);
  v8 = *(std::__shared_weak_count **)(a1 + 72);
  v9 = (__int128 *)(a1 + 64);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(_DWORD **)(a1 + 80);
  v13 = *(std::__shared_weak_count **)(a1 + 88);
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
  v18 = (_DWORD *)*a3;
  if (v17 != *(_DWORD *)(*a3 + 68))
  {
    v45 = __si_assert_copy_extra_268();
    v46 = v45;
    v47 = "";
    if (v45)
      v47 = v45;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2381, "newQuantizer->count() == newPartitions->nPartitions()", v47);
LABEL_64:
    free(v46);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 24) != v18[18])
  {
    v48 = __si_assert_copy_extra_268();
    v46 = v48;
    v49 = "";
    if (v48)
      v49 = v48;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2382, "vectors->count() == newPartitions->nVectors()", v49);
    goto LABEL_64;
  }
  if (v10 && v14)
  {
    v56 = *__error();
    v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = v10 + 8;
      if (v10[31] < 0)
        v20 = (_QWORD *)*v20;
      v51 = v20;
      v21 = (*(uint64_t (**)(char *))(*(_QWORD *)v10 + 16))(v10);
      v22 = (_QWORD *)(*a2 + 8);
      v55 = v6;
      v54 = v21;
      if (*(char *)(*a2 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v50 = v22;
      v53 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
      v23 = v62;
      (*(void (**)(void **__return_ptr, _DWORD *))(*(_QWORD *)v14 + 144))(v62, v14);
      if (v63 < 0)
        v23 = (void **)v62[0];
      v24 = v14[18];
      v52 = v14[17];
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a3 + 144))(__p);
      v25 = __p;
      if (v61 < 0)
        v25 = (void **)__p[0];
      v26 = *(_DWORD *)(*a3 + 68);
      v27 = *(_DWORD *)(*a3 + 72);
      *(_DWORD *)buf = 136317442;
      v65 = v51;
      v66 = 1024;
      v67 = v54;
      v68 = 2080;
      v69 = v50;
      v70 = 1024;
      v71 = v53;
      v72 = 2080;
      v73 = v23;
      v74 = 1024;
      v75 = v24;
      v76 = 1024;
      v77 = v52;
      v78 = 2080;
      v79 = v25;
      v80 = 1024;
      v81 = v27;
      v82 = 1024;
      v83 = v26;
      _os_log_impl(&dword_1B8270000, v19, OS_LOG_TYPE_DEFAULT, "Replace quantizer %s(%u) -> %s(%u), partitions %s(%u/%u) -> %s(%u/%u)", buf, 0x4Eu);
      if (v61 < 0)
        operator delete(__p[0]);
      v6 = v55;
      if (v63 < 0)
        operator delete(v62[0]);
    }
    *__error() = v56;
    v18 = (_DWORD *)*a3;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v18 + 24))(v18))
    v28 = v14 == 0;
  else
    v28 = 1;
  if (!v28 && (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v14 + 24))(v14))
    (*(void (**)(_QWORD, _DWORD *))(*(_QWORD *)*a3 + 168))(*a3, v14);
  v29 = a2[1];
  *(_QWORD *)&v57 = *a2;
  *((_QWORD *)&v57 + 1) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = (std::__shared_weak_count *)a3[1];
  v58 = *a3;
  v59 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  os_unfair_lock_lock(v7);
  std::swap[abi:nn180100]<IVFVectorIndexTemplate<float,768>::QuantizerPartitions>(v9, &v57);
  os_unfair_lock_unlock(v7);
  v35 = v59;
  if (v59)
  {
    v36 = (unint64_t *)&v59->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  os_unfair_lock_unlock(v6);
  if (v13)
  {
    v41 = (unint64_t *)&v13->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v8)
  {
    v43 = (unint64_t *)&v8->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

_QWORD *IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *a1 = &off_1E6E32978;
  v2 = (std::__shared_weak_count *)a1[11];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[7];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[5];
    if (!v11)
      return a1;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[5];
    if (!v11)
      return a1;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return a1;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::~IVFVectorIndexInstance(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E32820;
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s((_QWORD *)(a1 + 48));
  *(_QWORD *)a1 = off_1E6E30C80;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::~IVFVectorIndexInstance(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E32820;
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s((_QWORD *)(a1 + 48));
  *(_QWORD *)a1 = off_1E6E30C80;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCCB06A4);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::nVectors(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1 + 48);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::nPartitions(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1 + 48);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::allExist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  float v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  char *v14;
  char *v15;
  const char *v16;
  uint8_t buf[4];
  double v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a3)
  {
    v5 = a1 + 48;
    v6 = a3;
    if (a3 <= 0x3E8)
    {
      while (IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::exists(v5, a2))
      {
        a2 += 2048;
        if (!--v6)
          return a3;
      }
    }
    else
    {
      v7 = 0;
      v8 = a3 / 0xA;
      v9 = 1.0 / (float)a3;
      while (1)
      {
        v10 = v7 + 1;
        if (!(((int)v7 + 1) % v8))
        {
          v11 = *__error();
          v12 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            v18 = (float)((float)((float)v7 * 100.0) * v9);
            _os_log_impl(&dword_1B8270000, v12, OS_LOG_TYPE_DEFAULT, "allExist: %.0f%%", buf, 0xCu);
          }
          *__error() = v11;
        }
        if (!IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::exists(v5, a2))break;
        a2 += 2048;
        ++v7;
        if (a3 == v10)
          return a3;
      }
    }
    v14 = __si_assert_copy_extra_268();
    v15 = v14;
    v16 = "";
    if (v14)
      v16 = v14;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3151, "false", v16);
    free(v15);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a3;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::validAddress()
{
  return 1;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::shadow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v6 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v7 = *(std::__shared_weak_count **)(a1 + 120);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v11 = *(_QWORD *)(a1 + 128);
  v10 = *(std::__shared_weak_count **)(a1 + 136);
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    os_unfair_lock_unlock(v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 160))(v11, a2, a3);
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    os_unfair_lock_unlock(v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 160))(v11, a2, a3);
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return 0;
}

_DWORD *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::bulkInsertForTest(_DWORD *result, char *a2, int *a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  float v12;
  int v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint8_t buf[4];
  double v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v8 = (uint64_t)(result + 12);
    v9 = a4;
    if (a4 <= 0x3E8)
    {
      do
      {
        v21 = *a5++;
        v20 = v21;
        v23 = *a3++;
        v22 = v23;
        result = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v8, v20, a2, 0xFFFFFFFF, 3.4028e38);
        if (result[514])
        {
          v19 = result[513] + 1;
        }
        else
        {
          result[514] = v22;
          v19 = 1;
        }
        result[513] = v19;
        a2 += 2048;
        --v9;
      }
      while (v9);
    }
    else
    {
      v10 = 0;
      v11 = a4 / 0xA;
      v12 = 1.0 / (float)a4;
      do
      {
        v14 = v10 + 1;
        if (!(((int)v10 + 1) % v11))
        {
          v15 = *__error();
          v16 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            v25 = (float)((float)((float)v10 * 100.0) * v12);
            _os_log_impl(&dword_1B8270000, v16, OS_LOG_TYPE_DEFAULT, "bulkInsertForTest: %.0f%%", buf, 0xCu);
          }
          *__error() = v15;
        }
        v17 = a5[v10];
        v18 = a3[v10];
        result = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v8, v17, a2, 0xFFFFFFFF, 3.4028e38);
        if (result[514])
        {
          v13 = result[513] + 1;
        }
        else
        {
          result[514] = v18;
          v13 = 1;
        }
        result[513] = v13;
        a2 += 2048;
        v10 = v14;
      }
      while (v9 != v14);
    }
  }
  return result;
}

char *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::insertVector(_DWORD *a1, int a2, unsigned int a3, const void *a4, int a5, int a6, int a7, uint64_t a8, char *a9)
{
  unsigned int *v11;
  char *v13;
  char *v14;
  const char *v15;

  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != a1[4])
  {
    v13 = __si_assert_copy_extra_268();
    v14 = v13;
    v15 = "";
    if (v13)
      v15 = v13;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v11 = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFF, 3.4028e38)+ 512;
  return vi_memory_postings::push_posting(a9, a7, v11, a8);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::insertForMerge(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  char *v8;
  char *v9;
  const char *v10;

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a7 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a6]
    || vector_size_elem_sizes_10742[a7] != *(_DWORD *)(a1 + 16))
  {
    v8 = __si_assert_copy_extra_268();
    v9 = v8;
    v10 = "";
    if (v8)
      v10 = v8;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v10);
    free(v9);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return 1;
}

_DWORD *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::insertForTest(_DWORD *a1, int a2, unsigned int a3, const void *a4, int a5, int a6, int a7)
{
  _DWORD *result;
  int v9;
  char *v10;
  char *v11;
  const char *v12;
  uint64_t v13;

  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != a1[4])
  {
    v10 = __si_assert_copy_extra_268();
    v11 = v10;
    v12 = "";
    if (v10)
      v12 = v10;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v12);
    free(v11);
    if (__valid_fs(-1))
      v13 = 2989;
    else
      v13 = 3072;
    *(_DWORD *)v13 = -559038737;
    abort();
  }
  result = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFF, 3.4028e38);
  if (result[514])
  {
    v9 = result[513] + 1;
  }
  else
  {
    result[514] = a7;
    v9 = 1;
  }
  result[513] = v9;
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::train(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  const char *v30;
  char *v31;
  char *v32;
  const char *v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;

  v3 = *(_QWORD **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  v4 = v2 - *(_QWORD *)a2;
  if (v2 == *(_QWORD *)a2)
  {
    v31 = __si_assert_copy_extra_268();
    v32 = v31;
    v33 = "";
    if (v31)
      v33 = v31;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3170, "vi.size() > 0", v33);
    goto LABEL_52;
  }
  if (*v3 != a1)
  {
    v34 = __si_assert_copy_extra_268();
    v32 = v34;
    v35 = "";
    if (v34)
      v35 = v34;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3171, "this == vi[0]", v35);
LABEL_52:
    free(v32);
    if (__valid_fs(-1))
      v36 = 2989;
    else
      v36 = 3072;
    *(_DWORD *)v36 = -559038737;
LABEL_56:
    abort();
  }
  v6 = a2;
  v7 = (char *)operator new(8uLL);
  v8 = v7;
  *(_QWORD *)v7 = a1 + 48;
  if (v4 < 9)
    goto LABEL_39;
  v9 = v7 + 8;
  v10 = 1;
  v11 = v7 + 8;
  v37 = v6;
  do
  {
    v13 = v3[v10];
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(v13 + 8)
      || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(v13 + 20)
      || *(_DWORD *)(a1 + 12) != *(_DWORD *)(v13 + 12)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(v13 + 16))
    {
      v28 = __si_assert_copy_extra_268();
      v29 = v28;
      v30 = "";
      if (v28)
        v30 = v28;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v30);
      free(v29);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v14 = v13 + 48;
    if (v9 < v11)
    {
      *(_QWORD *)v9 = v14;
      v12 = v9 + 8;
      goto LABEL_6;
    }
    v15 = (v9 - v8) >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      goto LABEL_56;
    if ((v11 - v8) >> 2 > v16)
      v16 = (v11 - v8) >> 2;
    if ((unint64_t)(v11 - v8) >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v18 = operator new(8 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = &v18[8 * v15];
    v11 = &v18[8 * v17];
    *(_QWORD *)v19 = v14;
    v12 = v19 + 8;
    if (v9 == v8)
    {
LABEL_36:
      operator delete(v8);
      goto LABEL_37;
    }
    v20 = v9 - 8 - v8;
    if (v20 < 0x168)
    {
      v21 = v9;
      goto LABEL_34;
    }
    if (&v18[v9 - v8 - 8 - (v20 & 0xFFFFFFFFFFFFFFF8)] > &v18[v9 - v8 - 8])
    {
      v21 = v9;
      goto LABEL_34;
    }
    if (&v9[-(v20 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
    {
      v21 = v9;
      do
      {
LABEL_34:
        v27 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *((_QWORD *)v19 - 1) = v27;
        v19 -= 8;
      }
      while (v21 != v8);
      goto LABEL_35;
    }
    if ((unint64_t)(v8 - v18) < 0x20)
    {
      v21 = v9;
      goto LABEL_34;
    }
    v22 = (v20 >> 3) + 1;
    v21 = &v9[-8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
    v23 = &v18[8 * v15 - 16];
    v24 = v9 - 16;
    v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v19 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_34;
LABEL_35:
    if (v8)
      goto LABEL_36;
LABEL_37:
    v8 = v19;
    v6 = v37;
LABEL_6:
    ++v10;
    v3 = *(_QWORD **)v6;
    v9 = v12;
  }
  while (v10 < (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
  if (v8)
LABEL_39:
    operator delete(v8);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::mergeUpdateSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t result;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  const char *v32;
  char *v33;
  const char *v34;
  _DWORD v35[4];
  void *__src;
  uint64_t v37;
  uint8_t buf[2056];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v33 = __si_assert_copy_extra_268();
    v31 = v33;
    v34 = "";
    if (v33)
      v34 = v33;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v34);
LABEL_36:
    free(v31);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v7 = *__error();
  v8 = _SILogForLogForCategory(16);
  v9 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v10;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v11;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v12;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&buf[22] = v13;
    _os_log_impl(&dword_1B8270000, v8, v9, "mergeUpdateSet(termIds) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v7;
  v14 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::beginMerge(a1 + 48);
  while (1)
  {
    IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::next((uint64_t)v35, v14);
    if (!__src)
      break;
    v15 = v35[0];
    v16 = *(float *)&v35[1];
    v17 = v35[2];
    v18 = v37;
    memcpy(buf, __src, 0x800uLL);
    v20 = *(_QWORD *)(a4 + 8);
    v19 = *(_QWORD *)(a4 + 16);
    v21 = v20 + 1;
    if (v20 + 1 < v19)
    {
      v22 = *(_QWORD **)a4;
      goto LABEL_16;
    }
    if (v19)
    {
      if (v21 >= v19)
        goto LABEL_13;
    }
    else
    {
      *(_QWORD *)(a4 + 16) = 1024;
      v19 = 1024;
      if (v21 >= 0x400)
      {
        do
LABEL_13:
          v19 *= 2;
        while (v21 >= v19);
        *(_QWORD *)(a4 + 16) = v19;
      }
    }
    v22 = malloc_type_realloc(*(void **)a4, 24 * v19, 0x10200409F4E64B8uLL);
    *(_QWORD *)a4 = v22;
    v20 = *(_QWORD *)(a4 + 8);
    v21 = v20 + 1;
LABEL_16:
    v22[3 * v20 + 1] = v18;
    *(_QWORD *)(a4 + 8) = v21;
    if (*(_DWORD *)(a1 + 188) == -1)
    {
      v30 = __si_assert_copy_extra_268();
      v31 = v30;
      v32 = "";
      if (v30)
        v32 = v30;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2689, "mergeBeginVectorOffset < VECTOR_NOT_FOUND", v32);
      goto LABEL_36;
    }
    IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(a1 + 48, v17, buf, v15, v16);
  }
  result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::endMerge(a1 + 48);
  if (v14)
  {
    std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100](v14 + 32);
    v24 = *(std::__shared_weak_count **)(v14 + 24);
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = *(std::__shared_weak_count **)(v14 + 8);
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    return MEMORY[0x1BCCB06A4](v14, 0x10A0C40B50FE552);
  }
  return result;
}

_DWORD *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::mergeUpdateSet(_DWORD *result, uint64_t a2, char *a3, unsigned int a4, uint64_t a5)
{
  _DWORD *v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int v16;
  const void *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  const char *v21;
  int v22;
  NSObject *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _DWORD __dst[512];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (result[2] != *(_DWORD *)(a2 + 8)
    || (v6 = result, *((unsigned __int16 *)result + 10) != *(unsigned __int16 *)(a2 + 20))
    || result[3] != *(_DWORD *)(a2 + 12)
    || result[4] != *(_DWORD *)(a2 + 16))
  {
    v19 = __si_assert_copy_extra_268();
    v20 = v19;
    v21 = "";
    if (v19)
      v21 = v19;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v21);
    free(v20);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (dword_1EF19FCCC >= 5)
  {
    v22 = *__error();
    v23 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
      v25 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      __dst[0] = 67109888;
      __dst[1] = v24;
      LOWORD(__dst[2]) = 1024;
      *(_DWORD *)((char *)&__dst[2] + 2) = v25;
      HIWORD(__dst[3]) = 1024;
      __dst[4] = v26;
      LOWORD(__dst[5]) = 1024;
      *(_DWORD *)((char *)&__dst[5] + 2) = v27;
      _os_log_impl(&dword_1B8270000, v23, OS_LOG_TYPE_DEFAULT, "mergeUpdateSet(DocID) %u vectors in %u partitions and %u vectors in %u partitions", (uint8_t *)__dst, 0x1Au);
    }
    result = __error();
    *result = v22;
  }
  v9 = 0;
  v10 = *(_QWORD *)(a2 + 80);
  v11 = (uint64_t)(v6 + 12);
  v12 = a4;
  while (v9 != *(_DWORD *)(v10 + 24))
  {
    v16 = *(_DWORD *)(IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v10, v9)+ 2064);
    v17 = (const void *)IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v10, v9);
    memcpy(__dst, v17, sizeof(__dst));
    v18 = IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v10, v9);
    if ((*(_BYTE *)(v18 + 2048) & 1) != 0)
    {
      if (*(_DWORD *)(v18 + 2052))
        v13 = 1;
      else
        v13 = 2;
      v14 = a5;
    }
    else
    {
      v13 = 0;
      v14 = v12;
    }
    v15 = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v11, v16, __dst, 0xFFFFFFFF, 3.4028e38);
    result = vi_memory_postings::push_posting(a3, v13, v15 + 512, v14);
    ++v9;
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::mergeUpdateSetForTest(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  float v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t result;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  const char *v28;
  char *v29;
  const char *v30;
  uint8_t buf[4];
  float v32;
  _BYTE v33[6];
  __int16 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v26 = __si_assert_copy_extra_268();
    v27 = v26;
    v28 = "";
    if (v26)
      v28 = v26;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v28);
LABEL_34:
    free(v27);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  v6 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v5, v6))
  {
    LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    v32 = v7;
    *(_WORD *)v33 = 1024;
    *(_DWORD *)&v33[2] = v8;
    v34 = 1024;
    LODWORD(v35) = v9;
    WORD2(v35) = 1024;
    *(_DWORD *)((char *)&v35 + 6) = v10;
    _os_log_impl(&dword_1B8270000, v5, v6, "mergeUpdateSetForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v4;
  v11 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::beginMerge(a1 + 48);
  v14 = 0;
  while (1)
  {
    IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::next((uint64_t)buf, v11);
    if (!(_QWORD)v35)
      break;
    v16 = *(_DWORD *)(*((_QWORD *)&v35 + 1) + 8);
    v17 = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(a1 + 48, *(unsigned int *)v33, (const void *)v35, *(unsigned int *)buf, v32);
    v18 = v17[514];
    if (v18)
    {
      v15 = v17[513] + 1;
    }
    else
    {
      v17[514] = v16;
      v15 = 1;
    }
    v17[513] = v15;
    if (v18)
      ++v14;
  }
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::endMerge(a1 + 48);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result + v14 != v13 + v12)
  {
    v29 = __si_assert_copy_extra_268();
    v27 = v29;
    v30 = "";
    if (v29)
      v30 = v29;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3267, "nVectors() + dup == old + added", v30);
    goto LABEL_34;
  }
  if (v11)
  {
    std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100](v11 + 32);
    v20 = *(std::__shared_weak_count **)(v11 + 24);
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = *(std::__shared_weak_count **)(v11 + 8);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    return MEMORY[0x1BCCB06A4](v11, 0x10A0C40B50FE552);
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::mergeIndexForTest(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  float v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  uint64_t result;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  const char *v28;
  char *v29;
  const char *v30;
  uint8_t buf[4];
  float v32;
  _BYTE v33[6];
  __int16 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v26 = __si_assert_copy_extra_268();
    v27 = v26;
    v28 = "";
    if (v26)
      v28 = v26;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v28);
LABEL_34:
    free(v27);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  v6 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v5, v6))
  {
    LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    v32 = v7;
    *(_WORD *)v33 = 1024;
    *(_DWORD *)&v33[2] = v8;
    v34 = 1024;
    LODWORD(v35) = v9;
    WORD2(v35) = 1024;
    *(_DWORD *)((char *)&v35 + 6) = v10;
    _os_log_impl(&dword_1B8270000, v5, v6, "mergeIndexForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v4;
  v11 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator(a2 + 48);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::beginMerge(a1 + 48);
  v14 = 0;
  while (1)
  {
    IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next((uint64_t)buf, v11);
    if (!(_QWORD)v35)
      break;
    v16 = **((_QWORD **)&v35 + 1);
    v17 = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(a1 + 48, *(unsigned int *)v33, (const void *)v35, *(unsigned int *)buf, v32);
    v18 = v17[514];
    if (v18)
    {
      v15 = v17[513] + 1;
    }
    else
    {
      v17[514] = v16;
      v15 = 1;
    }
    v17[513] = v15;
    if (v18)
      ++v14;
  }
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::endMerge(a1 + 48);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result + v14 != v13 + v12)
  {
    v29 = __si_assert_copy_extra_268();
    v27 = v29;
    v30 = "";
    if (v29)
      v30 = v29;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3281, "nVectors() + dup == old + added", v30);
    goto LABEL_34;
  }
  if (v11)
  {
    std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100](v11 + 32);
    v20 = *(std::__shared_weak_count **)(v11 + 24);
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = *(std::__shared_weak_count **)(v11 + 8);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    return MEMORY[0x1BCCB06A4](v11, 0x10A0C40B50FE552);
  }
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::dump(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  os_unfair_lock_s *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD v37[2];
  void (*v38)();
  void *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[3];
  __int128 v48;
  __int128 v49;
  char v50;
  __int128 v51;
  __int128 v52;

  v9 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v10 = *(std::__shared_weak_count **)(a1 + 120);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(_QWORD *)(a1 + 128);
  v13 = *(std::__shared_weak_count **)(a1 + 136);
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  os_unfair_lock_unlock(v9);
  v46 = 0u;
  memset(v47, 0, sizeof(v47));
  v45 = 0u;
  v43 = v14;
  v44 = v13;
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(_QWORD *)(a1 + 80);
  v20 = *(std::__shared_weak_count **)(a1 + 88);
  v42[0] = v19;
  v42[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::enumerator_s((uint64_t)&v45, &v43, v42);
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::enumerator_s((uint64_t)&v45, &v43, v42);
  }
  v24 = v44;
  if (v44)
  {
    v25 = (unint64_t *)&v44->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 0x40000000;
  v38 = ___ZNK22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke;
  v39 = &unk_1E6E32BD0;
  v40 = a6;
  v41 = a4;
  v51 = 0u;
  v52 = 0u;
  v50 = 0;
  do
  {
    IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::next((uint64_t)&v48, (uint64_t)&v45);
    v51 = v48;
    v52 = v49;
    if (!(_QWORD)v49)
      break;
    ((void (*)(_QWORD *, __int128 *, char *))v38)(v37, &v51, &v50);
  }
  while (!v50);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v47);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (!*((_QWORD *)&v46 + 1))
    goto LABEL_30;
  v28 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (!*((_QWORD *)&v45 + 1))
      goto LABEL_36;
  }
  else
  {
LABEL_30:
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (!*((_QWORD *)&v45 + 1))
      goto LABEL_36;
  }
  v31 = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  if (!v13)
    goto LABEL_40;
LABEL_36:
  v33 = (unint64_t *)&v13->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!v10)
      return;
  }
  else
  {
LABEL_40:
    if (!v10)
      return;
  }
  v35 = (unint64_t *)&v10->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::flush(uint64_t a1, uint64_t a2)
{
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::flush(a1 + 48, a2);
}

int *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::compact(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int *result;
  char *v12;
  char *v13;
  const char *v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  v6 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    v16 = v7;
    v17 = 1024;
    v18 = v8;
    v19 = 1024;
    v20 = v9;
    v21 = 1024;
    v22 = v10;
    _os_log_impl(&dword_1B8270000, v5, v6, "compact %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  result = __error();
  *result = v4;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v12 = __si_assert_copy_extra_268();
    v13 = v12;
    v14 = "";
    if (v12)
      v14 = v12;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v14);
    free(v13);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::compactForTest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  NSObject *v7;
  os_log_type_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  const char *v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v13 = __si_assert_copy_extra_268();
    v14 = v13;
    v15 = "";
    if (v13)
      v15 = v13;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v6 = *__error();
  v7 = _SILogForLogForCategory(16);
  v8 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    v22 = 1024;
    v23 = v12;
    _os_log_impl(&dword_1B8270000, v7, v8, "compactForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v6;
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::compactForTest<vi_onefixedsize_disk_allocator>(a1 + 48, a2 + 48, a3);
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::subvert(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  os_unfair_lock_s *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  const char *v30;

  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v28 = __si_assert_copy_extra_268();
    v29 = v28;
    v30 = "";
    if (v28)
      v30 = v28;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v30);
    free(v29);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v4 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v5 = *(std::__shared_weak_count **)(a1 + 120);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v9 = *(_QWORD *)(a1 + 128);
  v8 = *(std::__shared_weak_count **)(a1 + 136);
  if (v8)
  {
    v10 = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  os_unfair_lock_unlock(v4);
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v14 = (os_unfair_lock_s *)(a2 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 144));
  v15 = *(std::__shared_weak_count **)(a2 + 120);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v19 = *(_QWORD *)(a2 + 128);
  v18 = *(std::__shared_weak_count **)(a2 + 136);
  if (v18)
  {
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  os_unfair_lock_unlock(v14);
  if (v15)
  {
    v22 = (unint64_t *)&v15->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 168))(v9, v19);
  if (!v18)
    goto LABEL_31;
  v24 = (unint64_t *)&v18->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v8)
      return;
  }
  else
  {
LABEL_31:
    if (!v8)
      return;
  }
  v26 = (unint64_t *)&v8->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::unlink(uint64_t a1)
{
  os_unfair_lock_s *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v22;
  _QWORD *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a1 + 128);
  v6 = *(std::__shared_weak_count **)(a1 + 136);
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  os_unfair_lock_unlock(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  v10 = *(_QWORD *)(a1 + 80);
  v11 = *__error();
  v12 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = (_QWORD *)(v10 + 40);
    if (*(char *)(v10 + 63) < 0)
      v13 = (_QWORD *)*v13;
    v14 = *(_DWORD *)(v10 + 24);
    v15 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v10 + 16), 0, 2068) + 2064);
    v16 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v10 + 16), (*(_DWORD *)(v10 + 24) - 1), 2068)+ 2064);
    v22 = 136315906;
    v23 = v13;
    v24 = 1024;
    v25 = v14;
    v26 = 1024;
    v27 = v15;
    v28 = 1024;
    v29 = v16;
    _os_log_impl(&dword_1B8270000, v12, OS_LOG_TYPE_DEFAULT, "unlink VectorStore %s(%u)[%u,%u]", (uint8_t *)&v22, 0x1Eu);
  }
  *__error() = v11;
  if (v6)
  {
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v3)
  {
    v19 = (unint64_t *)&v3->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return 1;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::truncate(uint64_t a1)
{
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  os_unfair_lock_s *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint8_t v16[16];

  if (*(_BYTE *)(a1 + 192))
  {
    v1 = *__error();
    v2 = _SILogForLogForCategory(16);
    v3 = dword_1EF19FCCC < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1EF19FCCC < 3)))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1B8270000, v2, v3, "*warn* call truncate on readOnly index.", v16, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::flush(a1 + 48, 0);
    IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::truncate(*(_QWORD *)(a1 + 80));
    v5 = (os_unfair_lock_s *)(a1 + 144);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
    v6 = *(std::__shared_weak_count **)(a1 + 120);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v10 = *(_QWORD *)(a1 + 128);
    v9 = *(std::__shared_weak_count **)(a1 + 136);
    if (v9)
    {
      v11 = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      os_unfair_lock_unlock(v5);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      os_unfair_lock_unlock(v5);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
    }
    if (v6)
    {
      v14 = (unint64_t *)&v6->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::makeReadOnly(uint64_t a1)
{
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v5;
  int v6;
  NSObject *v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  _QWORD *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 192))
  {
    v1 = *__error();
    v2 = _SILogForLogForCategory(16);
    v3 = dword_1EF19FCCC < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1EF19FCCC < 3)))
    {
      LOWORD(v22) = 0;
      _os_log_impl(&dword_1B8270000, v2, v3, "*warn* call makeReadOnly on readOnly index.", (uint8_t *)&v22, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::flush(a1 + 48, 0);
    v5 = *(_QWORD *)(a1 + 80);
    v6 = *__error();
    v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = (_QWORD *)(v5 + 40);
      if (*(char *)(v5 + 63) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_DWORD *)(v5 + 24);
      v10 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v5 + 16), 0, 2068) + 2064);
      v11 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v5 + 16), (*(_DWORD *)(v5 + 24) - 1), 2068)+ 2064);
      v22 = 136315906;
      v23 = v8;
      v24 = 1024;
      v25 = v9;
      v26 = 1024;
      v27 = v10;
      v28 = 1024;
      v29 = v11;
      _os_log_impl(&dword_1B8270000, v7, OS_LOG_TYPE_DEFAULT, "makeReadOnly VectorStore %s(%u)[%u,%u]", (uint8_t *)&v22, 0x1Eu);
    }
    *__error() = v6;
    IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::truncate(v5);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
    v12 = *(std::__shared_weak_count **)(a1 + 120);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v16 = *(_QWORD *)(a1 + 128);
    v15 = *(std::__shared_weak_count **)(a1 + 136);
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 120))(v16);
      *(_BYTE *)(a1 + 192) = 1;
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 120))(v16);
      *(_BYTE *)(a1 + 192) = 1;
    }
    if (v12)
    {
      v20 = (unint64_t *)&v12->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::makePurgeable(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  _QWORD *v5;
  int v6;
  int v7;
  int v8;
  os_unfair_lock_s *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 80);
  v3 = *__error();
  v4 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (_QWORD *)(v2 + 40);
    if (*(char *)(v2 + 63) < 0)
      v5 = (_QWORD *)*v5;
    v6 = *(_DWORD *)(v2 + 24);
    v7 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v2 + 16), 0, 2068) + 2064);
    v8 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v2 + 16), (*(_DWORD *)(v2 + 24) - 1), 2068)+ 2064);
    v20 = 136315906;
    v21 = v5;
    v22 = 1024;
    v23 = v6;
    v24 = 1024;
    v25 = v7;
    v26 = 1024;
    v27 = v8;
    _os_log_impl(&dword_1B8270000, v4, OS_LOG_TYPE_DEFAULT, "makePurgeable VectorStore %s(%u)[%u,%u]", (uint8_t *)&v20, 0x1Eu);
  }
  *__error() = v3;
  v9 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v10 = *(std::__shared_weak_count **)(a1 + 120);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(_QWORD *)(a1 + 128);
  v13 = *(std::__shared_weak_count **)(a1 + 136);
  if (!v13)
  {
    os_unfair_lock_unlock(v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 128))(v14);
    if (!v10)
      return;
    goto LABEL_18;
  }
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  os_unfair_lock_unlock(v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 128))(v14);
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v10)
  {
LABEL_18:
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::rename(uint64_t a1, const char *a2)
{
  int v4;
  NSObject *v5;
  size_t v6;
  std::string::size_type v7;
  std::string *p_buf;
  uint64_t v9;
  uint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  _QWORD *v23;
  int v24;
  int v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::string::value_type __s[23];
  char v32;
  std::string v33;
  std::string buf;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    _os_log_impl(&dword_1B8270000, v5, OS_LOG_TYPE_DEFAULT, "rename: %s", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v4;
  v6 = strlen(a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_buf = (std::string *)operator new(v9 + 1);
    buf.__r_.__value_.__l.__size_ = v7;
    buf.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_10;
  }
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = v6;
  p_buf = &buf;
  if (v6)
LABEL_10:
    memcpy(p_buf, a2, v7);
  p_buf->__r_.__value_.__s.__data_[v7] = 0;
  v32 = 11;
  strcpy(__s, ".partitions");
  memset(&v33, 0, sizeof(v33));
  v11 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v33, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  else
    v33 = buf;
  std::string::append(&v33, __s, 0xBuLL);
  if (v32 < 0)
  {
    operator delete(*(void **)__s);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_16;
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
LABEL_16:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v12 = *(std::__shared_weak_count **)(a1 + 120);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v16 = *(_QWORD *)(a1 + 128);
  v15 = *(std::__shared_weak_count **)(a1 + 136);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v33;
  else
    v19 = (std::string *)v33.__r_.__value_.__r.__words[0];
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 152))(v16, v19);
  v20 = *(_QWORD *)(a1 + 80);
  v21 = *__error();
  v22 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v23 = (_QWORD *)(v20 + 40);
    if (*(char *)(v20 + 63) < 0)
      v23 = (_QWORD *)*v23;
    v24 = *(_DWORD *)(v20 + 24);
    v25 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v20 + 16), 0, 2068) + 2064);
    v26 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v20 + 16), (*(_DWORD *)(v20 + 24) - 1), 2068)+ 2064);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)a2;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
    v35 = v24;
    v36 = 1024;
    v37 = v25;
    v38 = 1024;
    v39 = v26;
    _os_log_impl(&dword_1B8270000, v22, OS_LOG_TYPE_DEFAULT, "rename VectorStore %s -> %s(%u)[%u,%u]", (uint8_t *)&buf, 0x28u);
  }
  *__error() = v21;
  MEMORY[0x1BCCB03B0](v20 + 40, a2);
  if (v15)
  {
    v27 = (unint64_t *)&v15->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (!v12)
    goto LABEL_38;
  v29 = (unint64_t *)&v12->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (v30)
  {
LABEL_38:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
LABEL_39:
    operator delete(v33.__r_.__value_.__l.__data_);
}

_QWORD *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::storeUpdateSet(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  _QWORD *result;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  const char *v17;
  uint64_t v18;

  result = store_stream_write_vint32_2186(a3, *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24));
  v7 = 0;
  v8 = *(_QWORD *)(a1 + 80);
  while (v7 != *(_DWORD *)(v8 + 24))
  {
    v9 = IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator*(v8, v7);
    CIWritePostings((uint64_t)a3, a2, 0, (unsigned int *)(v9 + 2048), 0, 0);
    v11 = *((_QWORD *)a3 + 4);
    v10 = *((_QWORD *)a3 + 5);
    if (v10 + 2048 >= v11)
    {
      v13 = 2048;
      v12 = (char *)v9;
      while (1)
      {
        v14 = v11 - v10;
        memcpy((void *)(*((_QWORD *)a3 + 6) + v10), v12, v11 - v10);
        *((_QWORD *)a3 + 5) += v14;
        if (store_stream_flush(a3, 0))
          break;
        v12 += v14;
        v13 -= v14;
        v11 = *((_QWORD *)a3 + 4);
        v10 = *((_QWORD *)a3 + 5);
        if (v10 + v13 < v11)
          goto LABEL_5;
      }
    }
    else
    {
      v12 = (char *)v9;
      v13 = 2048;
LABEL_5:
      memcpy((void *)(*((_QWORD *)a3 + 6) + v10), v12, v13);
      *((_QWORD *)a3 + 5) += v13;
    }
    result = store_stream_write_vint32_2186(a3, *(_DWORD *)(v9 + 2064));
    ++v7;
    if (v8 != *(_QWORD *)(a1 + 80))
    {
      v15 = __si_assert_copy_extra_268();
      v16 = v15;
      v17 = "";
      if (v15)
        v17 = v15;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1814, "store == other.store", v17);
      free(v16);
      if (__valid_fs(-1))
        v18 = 2989;
      else
        v18 = 3072;
      *(_DWORD *)v18 = -559038737;
      abort();
    }
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::restoreUpdateSet(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  int v6;
  _BYTE *v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  unsigned int vint32;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  _DWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  __int16 v25;
  int v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  int *v33;
  off_t v34;
  size_t v35;
  void *v36;
  size_t v37;
  unint64_t v38;
  uint64_t v39;
  int *v40;
  char v41;
  off_t v42;
  off_t v43;
  off_t __offseta;
  unsigned int __offsetb;
  uint64_t v46;
  int v47;
  int v49;
  _BYTE __dst[2048];
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[2];
  __int16 v54;

  result = store_stream_read_vint32((uint64_t)a3);
  v47 = result;
  if ((_DWORD)result)
  {
    v6 = 0;
    v46 = a1 + 48;
    do
    {
      v51 = 0;
      v52 = 0;
      v7 = __dst;
      bzero(__dst, 0x800uLL);
      v49 = 0;
      CIReadPostings(a3, a2, (uint64_t)&v51, &v49);
      v8 = *((_QWORD *)a3 + 4);
      v9 = *((_QWORD *)a3 + 5);
      if (v9 + 2048 > v8)
      {
        v27 = (char *)*((_QWORD *)a3 + 6);
        v28 = v8 - v9;
        if (v8 != v9)
        {
          memcpy(__dst, &v27[v9], v8 - v9);
          *((_QWORD *)a3 + 5) = v8;
          v9 = v8;
        }
        v29 = *a3;
        __offseta = *((_QWORD *)a3 + 3);
        v30 = v27;
        while (1)
        {
          v31 = pread(v29, v30, v9, __offseta);
          if (v31 != -1)
            break;
          v32 = g_prot_error_callback;
          if (!g_prot_error_callback)
            break;
          v33 = __error();
          if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v32 + 16))(v32, v29, *v33, 4) & 1) == 0)goto LABEL_47;
        }
        if (v31 != -1)
        {
          *((_QWORD *)a3 + 4) = v31;
          *((_QWORD *)a3 + 5) = 0;
          v34 = *((_QWORD *)a3 + 3) + v31;
          *((_QWORD *)a3 + 3) = v34;
          if (!v31)
            goto LABEL_7;
          v7 = &__dst[v28];
          v10 = 2048 - v28;
          if (2048 - v28 <= v31)
          {
            v9 = 0;
            goto LABEL_6;
          }
          v43 = v34;
          v35 = v31;
          while (1)
          {
            v36 = (void *)*((_QWORD *)a3 + 6);
            memcpy(v7, v36, v35);
            v37 = v35;
            *((_QWORD *)a3 + 5) = v35;
            __offsetb = *a3;
            while (1)
            {
              v38 = pread(__offsetb, v36, v37, v43);
              if (v38 != -1)
                break;
              v39 = g_prot_error_callback;
              if (!g_prot_error_callback)
                break;
              v40 = __error();
              v41 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v39 + 16))(v39, __offsetb, *v40, 4);
              v37 = v35;
              if ((v41 & 1) == 0)
                goto LABEL_47;
            }
            if (v38 == -1)
              break;
            *((_QWORD *)a3 + 4) = v38;
            *((_QWORD *)a3 + 5) = 0;
            v42 = *((_QWORD *)a3 + 3) + v38;
            *((_QWORD *)a3 + 3) = v42;
            if (!v38)
              goto LABEL_7;
            v43 = v42;
            v9 = 0;
            v7 += v35;
            v10 -= v35;
            v35 = v38;
            if (v10 <= v38)
              goto LABEL_6;
          }
        }
LABEL_47:
        a3[4] = *__error();
      }
      else
      {
        v10 = 2048;
LABEL_6:
        memcpy(v7, (const void *)(*((_QWORD *)a3 + 6) + v9), v10);
        *((_QWORD *)a3 + 5) = v9 + v10;
      }
LABEL_7:
      vint32 = store_stream_read_vint32((uint64_t)a3);
      v12 = v51;
      v13 = v52;
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
      v14 = *(std::__shared_weak_count **)(a1 + 120);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = *(std::__shared_weak_count **)(a1 + 136);
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
        v20 = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v46, vint32, __dst, 0xFFFFFFFF, 3.4028e38);
        *((_QWORD *)v20 + 256) = v12;
        *((_QWORD *)v20 + 257) = v13;
        do
          v21 = __ldaxr(v18);
        while (__stlxr(v21 - 1, v18));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      else
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
        v22 = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v46, vint32, __dst, 0xFFFFFFFF, 3.4028e38);
        *((_QWORD *)v22 + 256) = v12;
        *((_QWORD *)v22 + 257) = v13;
      }
      if (v14)
      {
        v23 = (unint64_t *)&v14->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v25 = *(_WORD *)(a1 + 76);
      v26 = *(_DWORD *)(a1 + 156);
      v53[0] = *(_DWORD *)(a1 + 160);
      v53[1] = v26;
      v54 = v25;
      result = *(_QWORD *)(a1 + 176);
      if (result)
      {
        if (*(_DWORD *)(result + 216) == -270471200)
          result = data_map_ext_restore_data(result, vint32, __dst, 0x800uLL, v53);
      }
      ++v6;
    }
    while (v6 != v47);
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::aNN(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, int a7, char a8, float a9, uint64_t a10)
{
  uint64_t v13;
  int v14;
  _QWORD *v15;
  char *v17;
  char *v18;
  const char *v19;
  _QWORD v20[5];

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(a1 + 16))
  {
    v17 = __si_assert_copy_extra_268();
    v18 = v17;
    v19 = "";
    if (v17)
      v19 = v17;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v19);
    free(v18);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v13 = a1 + 48;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 0x40000000;
  v20[2] = ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi512EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke;
  v20[3] = &unk_1E6E32DB0;
  v20[4] = a10;
  if ((a7 - 10001) >= 0xFFFFD8F0)
    v14 = a7;
  else
    v14 = 10000;
  v15 = (_QWORD *)operator new();
  *(_DWORD *)v15 = v14;
  v15[2] = 0;
  v15[3] = 0;
  v15[1] = 0;
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNN(v13, a4, a8, v15, 0, a9);
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNProcessResult((uint64_t)v15, (uint64_t)v20);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::aNNForTest(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, int a7, char a8, float a9, uint64_t a10, unsigned int a11)
{
  uint64_t v14;
  int v15;
  _QWORD *v16;
  char *v18;
  char *v19;
  const char *v20;

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(a1 + 16))
  {
    v18 = __si_assert_copy_extra_268();
    v19 = v18;
    v20 = "";
    if (v18)
      v20 = v18;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v20);
    free(v19);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v14 = a1 + 48;
  if ((a7 - 10001) >= 0xFFFFD8F0)
    v15 = a7;
  else
    v15 = 10000;
  v16 = (_QWORD *)operator new();
  *(_DWORD *)v16 = v15;
  v16[2] = 0;
  v16[3] = 0;
  v16[1] = 0;
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNN(v14, a4, a8, v16, a11, a9);
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNForTestProcessResult((uint64_t)v16, a10);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::createCandidateQueue(uint64_t a1, int a2)
{
  int v2;
  uint64_t result;

  if ((a2 - 10001) >= 0xFFFFD8F0)
    v2 = a2;
  else
    v2 = 10000;
  result = operator new();
  *(_DWORD *)result = v2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::aNN(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, char a7, _QWORD *a8, float a9)
{
  char *v9;
  char *v10;
  const char *v11;

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(a1 + 16))
  {
    v9 = __si_assert_copy_extra_268();
    v10 = v9;
    v11 = "";
    if (v9)
      v11 = v9;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v11);
    free(v10);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNN(a1 + 48, a4, a7, a8, 0, a9);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::aNNProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[5];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi512EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke;
  v4[3] = &unk_1E6E32E10;
  v4[4] = a3;
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNProcessResult(a2, (uint64_t)v4);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::aNNForTestProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNForTestProcessResult(a2, a3);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::aNNForDebugProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  NSObject *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  float *v15;
  BOOL v16;
  int v17;
  float *v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  int v23;
  NSObject *v24;
  void **v25;
  float *v26;
  char *v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  void **v31;
  void *v32;
  uint64_t v33;
  int v35;
  float *v36;
  CFIndex AppIntegerValue;
  float *v38;
  float *v39;
  uint64_t v40;
  uint8_t v41[4];
  void **v42;
  void *__p[2];
  uint64_t v44;
  uint64_t v45;
  __int128 buf;
  uint64_t v47;
  _QWORD v48[8];
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v5 = *__error();
  v6 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_1B8270000, v6, OS_LOG_TYPE_DEFAULT, "search return %zu results", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v5;
  LOBYTE(buf) = 0;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("IVFANNLogQueryResult"), CFSTR("com.apple.Spotlight"), (Boolean *)&buf);
  v35 = buf;
  v61 = 0u;
  v51 = 0;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v50 = 0u;
  v49 = 0u;
  memset(v48, 0, sizeof(v48));
  v8 = MEMORY[0x1E0DE4FD0] + 104;
  v52 = MEMORY[0x1E0DE4FD0] + 104;
  v9 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v10 = MEMORY[0x1E0DE4FD0] + 64;
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v47 = MEMORY[0x1E0DE4FD0] + 64;
  *(_QWORD *)&buf = v11;
  *(_QWORD *)((char *)&buf + *(_QWORD *)(v11 - 24)) = v12;
  *((_QWORD *)&buf + 1) = 0;
  v13 = (std::ios_base *)((char *)&buf + *(_QWORD *)(buf - 24));
  std::ios_base::init(v13, v48);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v14 = v9[5];
  v47 = v9[4];
  *(_QWORD *)((char *)&v48[-1] + *(_QWORD *)(v47 - 24)) = v14;
  *(_QWORD *)&buf = v9[1];
  *(_QWORD *)((char *)&buf + *(_QWORD *)(buf - 24)) = v9[6];
  v52 = v8;
  *(_QWORD *)&buf = MEMORY[0x1E0DE4FD0] + 24;
  v47 = v10;
  std::streambuf::basic_streambuf();
  v48[0] = MEMORY[0x1E0DE4FB8] + 16;
  v49 = 0u;
  v50 = 0u;
  LODWORD(v51) = 24;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::allItems(&v38, *(_BYTE **)(a2 + 8), *(_BYTE **)(a2 + 16));
  v15 = v39;
  v36 = v38;
  if (v38 != v39)
  {
    if (AppIntegerValue)
      v16 = v35 == 0;
    else
      v16 = 1;
    if (v16)
    {
      v26 = v38;
      do
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD, float))(a3 + 16))(a3, *((unsigned int *)v26 + 2), *((unsigned int *)v26 + 4), v26[5]);
        v26 += 6;
      }
      while (v26 != v15);
    }
    else
    {
      v17 = 0;
      v18 = v38;
      do
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD, float))(a3 + 16))(a3, *((unsigned int *)v18 + 2), *((unsigned int *)v18 + 4), v18[5]);
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)",", 1);
        v20 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)";", 1);
        v21 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
        if ((v21[32] & 5) == 0
          && ((*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v21 + 5)
                                                                                            + 32))(__p, *((_QWORD *)v21 + 5), 0, 1, 16), v45 > 1000)|| (++v17, HIDWORD(v22) = -1030792151 * v17 + 85899344, LODWORD(v22) = HIDWORD(v22), (v22 >> 1) < 0x51EB851))
        {
          v23 = *__error();
          v24 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            v25 = __p;
            if (v44 < 0)
              v25 = (void **)__p[0];
            *(_DWORD *)v41 = 136315138;
            v42 = v25;
            _os_log_impl(&dword_1B8270000, v24, OS_LOG_TYPE_DEFAULT, "%s", v41, 0xCu);
            if (SHIBYTE(v44) < 0)
              operator delete(__p[0]);
          }
          *__error() = v23;
          __p[0] = 0;
          __p[1] = 0;
          v44 = 0;
          std::stringbuf::str();
          if (SHIBYTE(v44) < 0)
            operator delete(__p[0]);
        }
        v18 += 6;
      }
      while (v18 != v15);
    }
  }
  v27 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
  if ((v27[32] & 5) != 0)
  {
    v28 = a2;
  }
  else
  {
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(__p, *((_QWORD *)v27 + 5), 0, 1, 16);
    v28 = a2;
    if (v45 > 0)
    {
      v29 = *__error();
      v30 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        v31 = v44 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)v41 = 136315138;
        v42 = v31;
        _os_log_impl(&dword_1B8270000, v30, OS_LOG_TYPE_DEFAULT, "%s", v41, 0xCu);
        if (SHIBYTE(v44) < 0)
          operator delete(__p[0]);
      }
      *__error() = v29;
    }
  }
  if (v28)
  {
    v32 = *(void **)(v28 + 8);
    if (v32)
    {
      *(_QWORD *)(v28 + 16) = v32;
      operator delete(v32);
    }
    MEMORY[0x1BCCB06A4](v28, 0x1020C403EC25235);
  }
  if (v36)
    operator delete(v36);
  *(_QWORD *)&buf = *MEMORY[0x1E0DE4F50];
  v33 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&buf + *(_QWORD *)(buf - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v47 = v33;
  v48[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v50) < 0)
    operator delete((void *)v49);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BCCB0650](&v52);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::storageSize(uint64_t a1)
{
  os_unfair_lock_s *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v2 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a1 + 128);
  v6 = *(std::__shared_weak_count **)(a1 + 136);
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  os_unfair_lock_unlock(v2);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 16) + 24);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 184))(v7);
  if (!v6)
    goto LABEL_11;
  v12 = (unint64_t *)&v6->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v3)
      return v11 + v10;
  }
  else
  {
LABEL_11:
    if (!v3)
      return v11 + v10;
  }
  v14 = (unint64_t *)&v3->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v11 + v10;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::setVectorStore(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 176) = a2;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::getDataForOffset(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v7;
  int v8;
  NSObject *v9;
  int *v10;
  int v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1) <= a2)
  {
    v8 = *__error();
    v9 = _SILogForLogForCategory(2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
      v12 = 136315906;
      v13 = "getDataForOffset";
      v14 = 1024;
      v15 = 3455;
      v16 = 1024;
      v17 = a2;
      v18 = 1024;
      v19 = v11;
      _os_log_error_impl(&dword_1B8270000, v9, OS_LOG_TYPE_ERROR, "%s:%d: offset out of range: %u >= %u", (uint8_t *)&v12, 0x1Eu);
    }
    v10 = __error();
    v7 = 0;
    result = 0;
    *v10 = v8;
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(a1[6] + 32))(a1 + 6, a2);
    v7 = 2048;
  }
  *a3 = v7;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::updateVectorStorageOffsets(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t i;
  uint64_t result;
  unint64_t Ptr;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  v2 = a2;
  v4 = a1 + 48;
  if (a2)
  {
    for (i = 0; ; ++i)
    {
      result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(v4);
      if (i >= result)
        break;
      Ptr = vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(a1 + 80) + 16), i, 2068);
      if (!*(_BYTE *)(v2 + 184))
      {
        v8 = *(unsigned int *)(Ptr + 2064);
        v9 = *(_DWORD *)(v2 + 24);
        if (!v9 || !((*(_QWORD *)(v2 + 16) ^ v8) >> (-4 * v9)))
        {
          v10 = *(_QWORD *)(v2 + 56 + 8 * ((v8 >> ((60 - 4 * v9) & 0xFC)) & 0xF));
          if ((v10 & 1) != 0)
          {
            v11 = v9 + 2;
            do
              v10 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v8 >> ((64 - 4 * v11++) & 0xFC)) & 0xF));
            while ((v10 & 1) != 0);
          }
          if (v10)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        }
      }
    }
  }
  else
  {
    while (1)
    {
      result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(v4);
      if (v2 >= result)
        break;
      vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(a1 + 80) + 16), v2++, 2068);
    }
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::status(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  _QWORD v38[2];
  uint64_t v39;
  _OWORD v40[4];
  void *__p[2];
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v53 = 0u;
  v43 = 0;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v42 = 0u;
  *(_OWORD *)__p = 0u;
  v4 = MEMORY[0x1E0DE4FD0];
  memset(v40, 0, sizeof(v40));
  v5 = MEMORY[0x1E0DE4FD0] + 104;
  v44 = MEMORY[0x1E0DE4FD0] + 104;
  v6 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v7 = MEMORY[0x1E0DE4FD0] + 64;
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v39 = MEMORY[0x1E0DE4FD0] + 64;
  v38[0] = v8;
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v8 - 24)) = v9;
  v38[1] = 0;
  v10 = (std::ios_base *)((char *)v38 + *(_QWORD *)(v38[0] - 24));
  std::ios_base::init(v10, v40);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v11 = v6[5];
  v39 = v6[4];
  *(uint64_t *)((char *)&v39 + *(_QWORD *)(v39 - 24)) = v11;
  v38[0] = v6[1];
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = v6[6];
  v44 = v5;
  v38[0] = v4 + 24;
  v39 = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v40[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v42 = 0u;
  LODWORD(v43) = 24;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = a2;
  else
    v14 = *(_QWORD *)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, v14, v15);
  v17 = *(char *)(a1 + 47);
  if (v17 >= 0)
    v18 = a1 + 24;
  else
    v18 = *(_QWORD *)(a1 + 24);
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a1 + 47);
  else
    v19 = *(_QWORD *)(a1 + 32);
  v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, v18, v19);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)"(", 1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v21 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"/", 1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)"v", 1);
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(a1 + 48, &v36);
  if (v36)
  {
    IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(a1 + 48, &v34);
    v23 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)")", 1);
    v24 = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v27 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)")", 1);
  }
  v28 = v37;
  if (v37)
  {
    v29 = (unint64_t *)&v37->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, (uint64_t)"[", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, (uint64_t)",", 1);
  v31 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"] indexId: ", 11);
  std::ostream::operator<<();
  std::stringbuf::str();
  v38[0] = *v6;
  v32 = v6[9];
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = v6[8];
  v39 = v32;
  *(_QWORD *)&v40[0] = v12 + 16;
  if (SBYTE7(v42) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BCCB0650](&v44);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,512>::diagnoseDump(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  uint64_t v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  uint64_t v44;
  std::locale *v45;
  uint64_t v46;
  const std::locale::facet *v47;
  uint64_t v48;
  _QWORD *v49;
  const char *v50;
  uint64_t v51;
  const std::locale::facet *v52;
  unint64_t v53;
  std::locale::id *v54;
  const std::locale::facet *v55;
  unint64_t Ptr;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  void *locale;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  std::locale::id *v66;
  _QWORD *v67;
  _QWORD *v68;
  const std::locale::facet *v69;
  const std::locale::facet *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::locale v82;
  std::locale v83;
  uint64_t v84;
  unsigned __int8 v85;

  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, a2, v8);
  v10 = *(char *)(a1 + 47);
  if (v10 >= 0)
    v11 = a1 + 24;
  else
    v11 = *(_QWORD *)(a1 + 24);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 47);
  else
    v12 = *(_QWORD *)(a1 + 32);
  v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" vectors ", 9);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" partitions.", 12);
  if (*(_BYTE *)(a1 + 192))
    v17 = "(readOnly)";
  else
    v17 = "(readWrite)";
  if (*(_BYTE *)(a1 + 192))
    v18 = 10;
  else
    v18 = 11;
  v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
  v20 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v21 = *(_QWORD *)(a1 + 112);
  v22 = *(std::__shared_weak_count **)(a1 + 120);
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  v25 = *(std::__shared_weak_count **)(a1 + 136);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
  if (v22)
  {
    v28 = (unint64_t *)&v22->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (!v25)
    goto LABEL_29;
  v30 = (unint64_t *)&v25->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    v32 = a1 + 48;
    if (!v22)
      goto LABEL_35;
  }
  else
  {
LABEL_29:
    v32 = a1 + 48;
    if (!v22)
      goto LABEL_35;
  }
  v33 = (unint64_t *)&v22->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_35:
  if (v21)
  {
    v35 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Quantizer: ", 11);
    v36 = *(char *)(v21 + 31);
    if (v36 >= 0)
      v37 = v21 + 8;
    else
      v37 = *(_QWORD *)(v21 + 8);
    if (v36 >= 0)
      v38 = *(unsigned __int8 *)(v21 + 31);
    else
      v38 = *(_QWORD *)(v21 + 16);
    v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, v37, v38);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)"(", 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    v40 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)") ", 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    v41 = (_QWORD *)std::ostream::operator<<();
    v42 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, (uint64_t)" centroids.", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(*v42 - 24)));
    v43 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
    std::locale::~locale(&v83);
    std::ostream::put();
    std::ostream::flush();
  }
  v80 = 0;
  v81 = 0;
  IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(v32, &v80);
  v44 = v80;
  if (!v80)
    goto LABEL_51;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Partition: ", 11);
  (*(void (**)(std::locale *__return_ptr, uint64_t))(*(_QWORD *)v44 + 144))(&v83, v44);
  v45 = (v85 & 0x80u) == 0 ? &v83 : (std::locale *)v83.__locale_;
  v46 = (v85 & 0x80u) == 0 ? v85 : v84;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v45, v46);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
  v47 = std::locale::use_facet(&v82, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
  std::locale::~locale(&v82);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v85 < 0)
  {
    operator delete(v83.__locale_);
    if (!a4)
      goto LABEL_84;
  }
  else
  {
LABEL_51:
    if (!a4)
      goto LABEL_84;
  }
  v78 = v44;
  v48 = *(_QWORD *)(a1 + 80);
  v49 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"offset,vid", 10);
  v79 = a4;
  if (a4 <= 1)
    v50 = ",";
  else
    v50 = ",vector";
  if (a4 <= 1)
    v51 = 1;
  else
    v51 = 7;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
  v52 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  if (*(_DWORD *)(v48 + 24))
  {
    if (a4 <= 1)
    {
      v65 = 0;
      v66 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v48 + 16), v65, 2068);
        v67 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v67, (uint64_t)",", 1);
        v68 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v68, (uint64_t)",", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
        v69 = std::locale::use_facet(&v83, v66);
        ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
        std::locale::~locale(&v83);
        std::ostream::put();
        std::ostream::flush();
        ++v65;
      }
      while (v65 < *(unsigned int *)(v48 + 24));
    }
    else
    {
      v53 = 0;
      v54 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        Ptr = vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v48 + 16), v53, 2068);
        v57 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)",", 1);
        v58 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)",", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"{length = ", 10);
        v59 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)", bytes = 0x", 12);
        data2hexString((const unsigned __int8 *)&v83, Ptr, 16);
        if ((v85 & 0x80u) == 0)
          locale = &v83;
        else
          locale = v83.__locale_;
        if ((v85 & 0x80u) == 0)
          v61 = v85;
        else
          v61 = v84;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)locale, v61);
        if ((char)v85 < 0)
          operator delete(v83.__locale_);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)" ... ", 5);
        data2hexString((const unsigned __int8 *)&v83, Ptr + 2040, 8);
        if ((v85 & 0x80u) == 0)
          v62 = &v83;
        else
          v62 = v83.__locale_;
        if ((v85 & 0x80u) == 0)
          v63 = v85;
        else
          v63 = v84;
        v64 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v62, v63);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)" }", 2);
        if ((char)v85 < 0)
          operator delete(v83.__locale_);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
        v55 = std::locale::use_facet(&v83, v54);
        ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
        std::locale::~locale(&v83);
        std::ostream::put();
        std::ostream::flush();
        ++v53;
      }
      while (v53 < *(unsigned int *)(v48 + 24));
    }
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
  v70 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  if (v78)
    (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v78 + 104))(v78, a3, v79);
LABEL_84:
  v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v72 = v81;
  if (!v81)
    goto LABEL_88;
  v73 = (unint64_t *)&v81->__shared_owners_;
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
    if (!v22)
      return v71;
  }
  else
  {
LABEL_88:
    if (!v22)
      return v71;
  }
  v75 = (unint64_t *)&v22->__shared_owners_;
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  return v71;
}

uint64_t ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi512EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNN(uint64_t a1, unsigned __int8 *a2, char a3, _QWORD *a4, CFIndex AppIntegerValue, float a6)
{
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  double Current;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  char v32;
  char v33;
  unsigned int v34;
  char v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  NSObject *v42;
  int v43;
  int v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  int *v53;
  int *v54;
  unint64_t v55;
  int v56;
  void *v57;
  int64_t v58;
  char *v59;
  char *v60;
  int v61;
  NSObject *v62;
  int v63;
  int v64;
  double v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint8x8_t v70;
  unint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  float v75;
  int v76;
  NSObject *v77;
  int v78;
  NSObject *v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  int v88;
  NSObject *v89;
  int v90;
  int v91;
  int v92;
  int v93;
  unint64_t v94;
  CFAbsoluteTime v95;
  _QWORD *v96;
  _QWORD *v97;
  void *v98;
  char *v99;
  char *v100;
  const char *v101;
  int v102;
  int v103;
  _QWORD v105[8];
  void *v106;
  void *v107;
  _QWORD *v108;
  float v109;
  void *__p;
  void *v111;
  char *v112;
  void *v113;
  _BYTE *v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  int v126;
  void **v127;
  _BYTE keyExistsAndHasValidFormat[46];
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;
  __int16 v133;
  unint64_t v134;
  __int16 v135;
  CFAbsoluteTime v136;
  _OWORD __str[2];
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  v11 = *(_DWORD *)a4;
  memset(__str, 0, sizeof(__str));
  snprintf((char *)__str, 0x20uLL, "%02x%02x%02x%02x...%02x%02x%02x%02x", *a2, a2[1], a2[2], a2[3], a2[2044], a2[2045], a2[2046], a2[2047]);
  if (!(_DWORD)AppIntegerValue)
    AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("IVFNumberOfParitionsProbe"), CFSTR("com.apple.Spotlight"), 0);
  v103 = v11;
  v12 = 10 * v11;
  keyExistsAndHasValidFormat[0] = 0;
  v13 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeMin"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v14 = v13;
  else
    v14 = 10000;
  if (v12 <= v14)
    v15 = v14;
  else
    v15 = v12;
  v16 = v15
      * IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
  v17 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
  keyExistsAndHasValidFormat[0] = 0;
  v18 = v16 / v17;
  v19 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeMin"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v20 = v19;
  else
    v20 = 7;
  v123 = 0;
  v124 = &v123;
  if (v18 <= v20)
    v18 = v20;
  v126 = 0;
  v125 = 0x2000000000;
  v119 = 0;
  v120 = &v119;
  v122 = 0;
  v121 = 0x2000000000;
  v118 = 0;
  v116 = 0u;
  v117 = 0u;
  QuantizerManager<float,768>::aNNLogQueryVecIds((uint64_t)&v116);
  Current = CFAbsoluteTimeGetCurrent();
  if ((a3 & 1) != 0
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1) <= v18
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1) <= v15)
  {
    v61 = *__error();
    v62 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
    {
      v63 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
      v64 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
      v65 = a6;
      *(_DWORD *)keyExistsAndHasValidFormat = 136316162;
      *(_QWORD *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v103;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v63;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = v64;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 2048;
      *(double *)&keyExistsAndHasValidFormat[32] = a6;
      _os_log_impl(&dword_1B8270000, v62, OS_LOG_TYPE_DEFAULT, "brute force search %s top %u of %u vectors in %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x28u);
    }
    else
    {
      v65 = a6;
    }
    *__error() = v61;
    v102 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    v66 = 0;
    v67 = *(_QWORD *)(a1 + 32);
    do
    {
      if (v66 == *(_DWORD *)(v67 + 24))
        goto LABEL_114;
      ++*((_DWORD *)v124 + 6);
      v68 = IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator*(v67, v66);
      v69 = *(unsigned int *)(v68 + 2064);
      *(_DWORD *)keyExistsAndHasValidFormat = 2139095039;
      vDSP_distancesq((const float *)a2, 1, (const float *)v68, 1, (float *)keyExistsAndHasValidFormat, 0x200uLL);
      if (*((_QWORD *)&v116 + 1))
      {
        v70 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v116 + 8));
        v70.i16[0] = vaddlv_u8(v70);
        if (v70.u32[0] > 1uLL)
        {
          v71 = v69;
          if (*((_QWORD *)&v116 + 1) <= v69)
            v71 = v69 % *((_QWORD *)&v116 + 1);
        }
        else
        {
          v71 = (DWORD2(v116) - 1) & v69;
        }
        v72 = *(uint64_t **)(v116 + 8 * v71);
        if (v72)
        {
          v72 = (uint64_t *)*v72;
          if (v72)
          {
            if (v70.u32[0] < 2uLL)
            {
              while (1)
              {
                v74 = v72[1];
                if (v74 == v69)
                {
                  if (*((_DWORD *)v72 + 4) == (_DWORD)v69)
                    goto LABEL_83;
                }
                else if ((v74 & (*((_QWORD *)&v116 + 1) - 1)) != v71)
                {
                  goto LABEL_82;
                }
                v72 = (uint64_t *)*v72;
                if (!v72)
                  goto LABEL_83;
              }
            }
            do
            {
              v73 = v72[1];
              if (v73 == v69)
              {
                if (*((_DWORD *)v72 + 4) == (_DWORD)v69)
                  break;
              }
              else
              {
                if (v73 >= *((_QWORD *)&v116 + 1))
                  v73 %= *((_QWORD *)&v116 + 1);
                if (v73 != v71)
                  goto LABEL_82;
              }
              v72 = (uint64_t *)*v72;
            }
            while (v72);
          }
        }
      }
      else
      {
LABEL_82:
        v72 = 0;
      }
LABEL_83:
      v75 = *(float *)keyExistsAndHasValidFormat;
      if (a6 == 0.0 || *(float *)keyExistsAndHasValidFormat <= a6)
      {
        if (v72)
        {
          v78 = *__error();
          v79 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109376;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v69;
            *(_WORD *)&keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v75;
            _os_log_impl(&dword_1B8270000, v79, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", keyExistsAndHasValidFormat, 0x12u);
          }
          *__error() = v78;
        }
        *(_OWORD *)keyExistsAndHasValidFormat = *(_OWORD *)(v68 + 2048);
        *(_DWORD *)&keyExistsAndHasValidFormat[16] = v69;
        *(float *)&keyExistsAndHasValidFormat[20] = v75;
        MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::push(a4, (__int128 *)keyExistsAndHasValidFormat);
      }
      else
      {
        if (v72)
        {
          v76 = *__error();
          v77 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109632;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v69;
            *(_WORD *)&keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v75;
            *(_WORD *)&keyExistsAndHasValidFormat[18] = 2048;
            *(double *)&keyExistsAndHasValidFormat[20] = v65;
            _os_log_impl(&dword_1B8270000, v77, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", keyExistsAndHasValidFormat, 0x1Cu);
          }
          *__error() = v76;
        }
        ++*((_DWORD *)v120 + 6);
      }
      ++v66;
    }
    while (v67 == *(_QWORD *)(a1 + 32));
    v99 = __si_assert_copy_extra_268();
    v100 = v99;
    v101 = "";
    if (v99)
      v101 = v99;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1814, "store == other.store", v101);
    free(v100);
    if (!__valid_fs(-1))
    {
      MEMORY[0xC00] = -559038737;
      abort();
    }
    MEMORY[0xBAD] = -559038737;
    goto LABEL_125;
  }
  if (!(_DWORD)AppIntegerValue)
  {
    keyExistsAndHasValidFormat[0] = 0;
    v22 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeMax"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0])
      v23 = v22;
    else
      v23 = 40;
    keyExistsAndHasValidFormat[0] = 0;
    v24 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionSizeFactor"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0])
      v25 = v24;
    else
      v25 = 45;
    keyExistsAndHasValidFormat[0] = 0;
    v26 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeNumerator"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
    v27 = keyExistsAndHasValidFormat[0];
    v28 = 8 * v26;
    v29 = v25 * v25;
    keyExistsAndHasValidFormat[0] = 0;
    v30 = CFPreferencesGetAppIntegerValue(CFSTR("IVFpartitionProbeDecayExponent"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
    v31 = keyExistsAndHasValidFormat[0];
    if (v30 <= 0x12)
      v32 = 18;
    else
      v32 = v30;
    v33 = v32 - 3;
    v34 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    if (v31)
      v35 = v33;
    else
      v35 = 17;
    v36 = v34 >> v35;
    if (v36 <= 8)
      v37 = 8;
    else
      v37 = v36;
    v38 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    if (v27)
      v39 = v28;
    else
      v39 = 800;
    v40 = v39 * v38 / (v29 * v37);
    if (v23 < v40)
      v40 = v23;
    if (v40 <= v18)
      AppIntegerValue = v18;
    else
      AppIntegerValue = v40;
  }
  v41 = *__error();
  v42 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    v43 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    v44 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    *(_DWORD *)keyExistsAndHasValidFormat = 136316418;
    *(_QWORD *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v103;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v43;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[26] = AppIntegerValue;
    *(_WORD *)&keyExistsAndHasValidFormat[30] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[32] = v44;
    *(_WORD *)&keyExistsAndHasValidFormat[36] = 2048;
    *(double *)&keyExistsAndHasValidFormat[38] = a6;
    _os_log_impl(&dword_1B8270000, v42, OS_LOG_TYPE_DEFAULT, "aNN search %s top %u of %u vectors in %u of %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x2Eu);
  }
  *__error() = v41;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v46 = *(_QWORD *)(a1 + 64);
  v45 = *(std::__shared_weak_count **)(a1 + 72);
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v48 = __ldxr(p_shared_owners);
    while (__stxr(v48 + 1, p_shared_owners));
  }
  v50 = *(_QWORD *)(a1 + 80);
  v49 = *(std::__shared_weak_count **)(a1 + 88);
  if (v49)
  {
    v51 = (unint64_t *)&v49->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  memset(keyExistsAndHasValidFormat, 0, 24);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned __int8 *, CFIndex))(*(_QWORD *)v46 + 72))(keyExistsAndHasValidFormat, v46, a2, AppIntegerValue);
  v54 = *(int **)keyExistsAndHasValidFormat;
  v53 = *(int **)&keyExistsAndHasValidFormat[8];
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v127 = &v113;
  v55 = *(_QWORD *)&keyExistsAndHasValidFormat[8] - *(_QWORD *)keyExistsAndHasValidFormat;
  if (*(_QWORD *)&keyExistsAndHasValidFormat[8] == *(_QWORD *)keyExistsAndHasValidFormat)
  {
    v111 = 0;
    v112 = 0;
    __p = 0;
    goto LABEL_94;
  }
  do
  {
    v56 = *v54;
    v54 += 2;
    std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&v127, v56);
  }
  while (v54 != v53);
  v57 = v113;
  v111 = 0;
  v112 = 0;
  __p = 0;
  v58 = v114 - (_BYTE *)v113;
  if (v114 == v113)
    goto LABEL_94;
  if (v58 < 0)
LABEL_125:
    abort();
  v59 = (char *)operator new(v114 - (_BYTE *)v113);
  v60 = &v59[4 * (v58 >> 2)];
  __p = v59;
  v112 = v60;
  memcpy(v59, v57, v58);
  v111 = v60;
LABEL_94:
  v105[0] = MEMORY[0x1E0C809B0];
  v105[1] = 1174405120;
  v105[2] = ___ZNK22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE3aNNERK10CIVector_sIfLi512EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke;
  v105[3] = &unk_1E6E32DD8;
  v105[6] = a1;
  v105[7] = a2;
  v105[4] = &v123;
  std::unordered_set<unsigned int>::unordered_set((uint64_t)&v106, (uint64_t)&v116);
  v109 = a6;
  v105[5] = &v119;
  v108 = a4;
  (*(void (**)(uint64_t, void **, _QWORD *))(*(_QWORD *)v50 + 72))(v50, &__p, v105);
  if (__p)
  {
    v111 = __p;
    operator delete(__p);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 136));
  v80 = v107;
  if (v107)
  {
    do
    {
      v81 = (_QWORD *)*v80;
      operator delete(v80);
      v80 = v81;
    }
    while (v81);
  }
  v82 = v106;
  v106 = 0;
  if (v82)
    operator delete(v82);
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  if (*(_QWORD *)keyExistsAndHasValidFormat)
  {
    *(_QWORD *)&keyExistsAndHasValidFormat[8] = *(_QWORD *)keyExistsAndHasValidFormat;
    operator delete(*(void **)keyExistsAndHasValidFormat);
  }
  v83 = v55 >> 3;
  if (v49)
  {
    v84 = (unint64_t *)&v49->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v102 = v83;
  if (v45)
  {
    v86 = (unint64_t *)&v45->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
LABEL_114:
  v88 = *__error();
  v89 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
  {
    v90 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    v91 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    v92 = *((_DWORD *)v120 + 6);
    v93 = *((_DWORD *)v124 + 6);
    v94 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
    v95 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)keyExistsAndHasValidFormat = 136317442;
    *(_QWORD *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v103;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v90;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 2048;
    *(double *)&keyExistsAndHasValidFormat[26] = a6;
    *(_WORD *)&keyExistsAndHasValidFormat[34] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[36] = v102;
    *(_WORD *)&keyExistsAndHasValidFormat[40] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[42] = v91;
    v129 = 1024;
    v130 = v92;
    v131 = 1024;
    v132 = v93;
    v133 = 2048;
    v134 = v94;
    v135 = 2048;
    v136 = v95 - Current;
    _os_log_impl(&dword_1B8270000, v89, OS_LOG_TYPE_DEFAULT, "search %s top %u of %u vectors max_distance=%f in %u of %u partitions skip %u of %u populate %zu results in duration: %f", keyExistsAndHasValidFormat, 0x4Eu);
  }
  *__error() = v88;
  v96 = (_QWORD *)v117;
  if ((_QWORD)v117)
  {
    do
    {
      v97 = (_QWORD *)*v96;
      operator delete(v96);
      v96 = v97;
    }
    while (v97);
  }
  v98 = (void *)v116;
  *(_QWORD *)&v116 = 0;
  if (v98)
    operator delete(v98);
  _Block_object_dispose(&v119, 8);
  _Block_object_dispose(&v123, 8);
}

unint64_t IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator*(uint64_t a1, unsigned int a2)
{
  char *v3;
  char *v4;
  const char *v5;

  if (*(_DWORD *)(a1 + 24) <= a2)
  {
    v3 = __si_assert_copy_extra_268();
    v4 = v3;
    v5 = "";
    if (v3)
      v5 = v3;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1798, "offset < store->endOffset()", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(a1 + 16), a2, 2068);
}

void ___ZNK22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE3aNNERK10CIVector_sIfLi512EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  unint64_t Ptr;
  const float *v6;
  float v7;
  unint64_t v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  int v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  double v22;
  _BYTE v23[20];
  double v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 48);
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  Ptr = vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(v4 + 32) + 16), *a3, 2068);
  v6 = *(const float **)(a1 + 56);
  *(_DWORD *)v23 = 2139095039;
  vDSP_distancesq(v6, 1, (const float *)Ptr, 1, (float *)v23, 0x200uLL);
  v7 = *(float *)v23;
  v8 = *(unsigned int *)(Ptr + 2064);
  v9 = *(int8x8_t *)(a1 + 72);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = *(unsigned int *)(Ptr + 2064);
      if (*(_QWORD *)&v9 <= v8)
        v11 = v8 % *(_QWORD *)&v9;
    }
    else
    {
      v11 = (v9.i32[0] - 1) & v8;
    }
    v12 = *(uint64_t **)(*(_QWORD *)(a1 + 64) + 8 * v11);
    if (v12)
    {
      v12 = (uint64_t *)*v12;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          v13 = *(_QWORD *)&v9 - 1;
          while (1)
          {
            v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
                goto LABEL_22;
            }
            else if ((v15 & v13) != v11)
            {
              goto LABEL_21;
            }
            v12 = (uint64_t *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v14 = v12[1];
          if (v14 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
              break;
          }
          else
          {
            if (v14 >= *(_QWORD *)&v9)
              v14 %= *(_QWORD *)&v9;
            if (v14 != v11)
              goto LABEL_21;
          }
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
  else
  {
LABEL_21:
    v12 = 0;
  }
LABEL_22:
  v16 = *(float *)(a1 + 112);
  if (v16 == 0.0 || *(float *)v23 <= v16)
  {
    if (v12)
    {
      v18 = *__error();
      v19 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v23 = 67109376;
        *(_DWORD *)&v23[4] = v8;
        *(_WORD *)&v23[8] = 2048;
        *(double *)&v23[10] = v7;
        _os_log_impl(&dword_1B8270000, v19, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", v23, 0x12u);
      }
      *__error() = v18;
    }
    *(_OWORD *)v23 = *(_OWORD *)(Ptr + 2048);
    *(_DWORD *)&v23[16] = v8;
    *(float *)&v24 = v7;
    MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::push(*(_QWORD **)(a1 + 104), (__int128 *)v23);
  }
  else
  {
    if (v12)
    {
      v20 = *__error();
      v21 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        v22 = *(float *)(a1 + 112);
        *(_DWORD *)v23 = 67109632;
        *(_DWORD *)&v23[4] = v8;
        *(_WORD *)&v23[8] = 2048;
        *(double *)&v23[10] = v7;
        *(_WORD *)&v23[18] = 2048;
        v24 = v22;
        _os_log_impl(&dword_1B8270000, v21, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", v23, 0x1Cu);
      }
      *__error() = v20;
    }
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  }
}

uint64_t ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi512EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

_DWORD *IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(uint64_t a1, unsigned int a2, const void *a3, unsigned int a4, float a5)
{
  unsigned int Vector;
  uint64_t v9;
  _DWORD *Ptr;
  const UInt8 *data;
  int v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  _BYTE *v18;
  int v19;
  NSObject *v20;
  _BYTE *v21;
  const void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  _DWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  size_t OffsetFromEnd;
  uint64_t v32;
  int v33;
  NSObject *v34;
  _OWORD *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  NSObject *v41;
  const UInt8 *v42;
  int v43;
  NSObject *v44;
  size_t v45;
  int v46;
  NSObject *v47;
  int v48;
  NSObject *v49;
  _BYTE *v50;
  int v51;
  NSObject *v52;
  _BYTE *v53;
  NSObject *v54;
  int v55;
  NSObject *v56;
  int v58;
  int v59;
  int v60;
  char *v61;
  char *v62;
  const char *v63;
  char *v64;
  char *v65;
  const char *v66;
  char *v67;
  const char *v68;
  char *v69;
  const char *v70;
  char *v71;
  const char *v72;
  uint64_t v73;
  char *v74;
  const char *v75;
  char *v76;
  const char *v77;
  unsigned int v78;
  uint64_t v79;
  float v80;
  unsigned int v81;
  uint8_t buf[4];
  _BYTE *v83;
  _BYTE __p[12];
  __int16 v85;
  int v86;
  __int16 v87;
  _BYTE v88[14];
  __int16 v89;
  uint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v81 = a4;
  v80 = a5;
  if (*(_BYTE *)(a1 + 144))
  {
    v61 = __si_assert_copy_extra_268();
    v62 = v61;
    v63 = "";
    if (v61)
      v63 = v61;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2430, "!readOnly", v63);
    goto LABEL_104;
  }
  Vector = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::findVector(a1, (uint64_t)a3, (int *)&v81, &v80, a2);
  v9 = v81;
  if (v81 == -1)
  {
    v64 = __si_assert_copy_extra_268();
    v65 = v64;
    v66 = "";
    if (v64)
      v66 = v64;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2435, "partID != VECTOR_NOT_FOUND", v66);
    goto LABEL_94;
  }
  if (Vector != -1)
  {
    Ptr = (_DWORD *)vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 16), Vector, 2068);
    if (Ptr[516] == a2)
      return Ptr;
    v79 = 0;
    data = data_map_get_data(*(_QWORD *)(a1 + 128), a2, &v79);
    v12 = *__error();
    v13 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 136316162;
      *(_QWORD *)&__p[4] = "lookupForInsert";
      v85 = 1024;
      v86 = 2463;
      v87 = 1024;
      *(_DWORD *)v88 = a2;
      *(_WORD *)&v88[4] = 2048;
      *(_QWORD *)&v88[6] = data;
      v89 = 2048;
      v90 = v79;
      _os_log_error_impl(&dword_1B8270000, v13, OS_LOG_TYPE_ERROR, "%s:%d: vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v12;
    if (v79 < 1)
    {
      v19 = *__error();
      v41 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "lookupForInsert";
        v85 = 1024;
        v86 = 2472;
        _os_log_error_impl(&dword_1B8270000, v41, OS_LOG_TYPE_ERROR, "%s:%d: vectorId is invalid", __p, 0x12u);
      }
    }
    else
    {
      if (v79 != 2048)
      {
        v74 = __si_assert_copy_extra_268();
        v62 = v74;
        v75 = "";
        if (v74)
          v75 = v74;
        __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2465, "size == D * sizeof(ELEM_TYPE)", v75);
        goto LABEL_104;
      }
      if (!data || !memcmp(data, a3, 0x800uLL))
        goto LABEL_51;
      v14 = *__error();
      v15 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "lookupForInsert";
        v85 = 1024;
        v86 = 2467;
        _os_log_error_impl(&dword_1B8270000, v15, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v14;
      v16 = *__error();
      v17 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)data, v79);
        v18 = v88[3] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        v83 = v18;
        _os_log_impl(&dword_1B8270000, v17, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v88[3] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      *__error() = v16;
      v19 = *__error();
      v20 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)a3, v79);
        v21 = v88[3] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        v83 = v21;
        _os_log_impl(&dword_1B8270000, v20, OS_LOG_TYPE_DEFAULT, "vector passed in: %s", buf, 0xCu);
        if ((v88[3] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
    }
    *__error() = v19;
LABEL_51:
    v42 = data_map_get_data(*(_QWORD *)(a1 + 128), Ptr[516], &v79);
    v43 = *__error();
    v44 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      v58 = Ptr[516];
      *(_DWORD *)__p = 136316162;
      *(_QWORD *)&__p[4] = "lookupForInsert";
      v85 = 1024;
      v86 = 2475;
      v87 = 1024;
      *(_DWORD *)v88 = v58;
      *(_WORD *)&v88[4] = 2048;
      *(_QWORD *)&v88[6] = v42;
      v89 = 2048;
      v90 = v79;
      _os_log_error_impl(&dword_1B8270000, v44, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId=%u in datamap: %p size=%zd", __p, 0x2Cu);
    }
    *__error() = v43;
    if (v79 < 1)
    {
      v51 = *__error();
      v54 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "lookupForInsert";
        v85 = 1024;
        v86 = 2484;
        _os_log_error_impl(&dword_1B8270000, v54, OS_LOG_TYPE_ERROR, "%s:%d: old vectorId is invalid", __p, 0x12u);
      }
      goto LABEL_73;
    }
    if (v79 == 2048)
    {
      v45 = 2048;
      if (!v42 || !memcmp(v42, Ptr, 0x800uLL))
        goto LABEL_74;
      v46 = *__error();
      v47 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "lookupForInsert";
        v85 = 1024;
        v86 = 2479;
        _os_log_error_impl(&dword_1B8270000, v47, OS_LOG_TYPE_ERROR, "%s:%d: vector in datamap is not same as vector passed in", __p, 0x12u);
      }
      *__error() = v46;
      v48 = *__error();
      v49 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)v42, v79);
        v50 = v88[3] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        v83 = v50;
        _os_log_impl(&dword_1B8270000, v49, OS_LOG_TYPE_DEFAULT, "vector in datamap: %s", buf, 0xCu);
        if ((v88[3] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      *__error() = v48;
      v51 = *__error();
      v52 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        data2hexString(__p, (uint64_t)Ptr, v79);
        v53 = v88[3] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        v83 = v53;
        _os_log_impl(&dword_1B8270000, v52, OS_LOG_TYPE_DEFAULT, "vector in vector store: %s", buf, 0xCu);
        if ((v88[3] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
LABEL_73:
      *__error() = v51;
      v45 = v79;
LABEL_74:
      if (!memcmp(a3, Ptr, v45))
      {
        v55 = *__error();
        v56 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_FAULT))
        {
          v59 = Ptr[516];
          *(_DWORD *)__p = 136315906;
          *(_QWORD *)&__p[4] = "lookupForInsert";
          v85 = 1024;
          v86 = 2487;
          v87 = 1024;
          *(_DWORD *)v88 = a2;
          *(_WORD *)&v88[4] = 1024;
          *(_DWORD *)&v88[6] = v59;
          _os_log_fault_impl(&dword_1B8270000, v56, OS_LOG_TYPE_FAULT, "%s:%d: Dup vector with new vectorId=%u old=%u", __p, 0x1Eu);
        }
        *__error() = v55;
        return Ptr;
      }
      v71 = __si_assert_copy_extra_268();
      v65 = v71;
      v72 = "";
      if (v71)
        v72 = v71;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2486, "memcmp(vec.vec, entry->vec.vec, size) == 0", v72);
LABEL_94:
      free(v65);
      if (__valid_fs(-1))
        v73 = 2989;
      else
        v73 = 3072;
      *(_DWORD *)v73 = -559038737;
      abort();
    }
    v76 = __si_assert_copy_extra_268();
    v62 = v76;
    v77 = "";
    if (v76)
      v77 = v76;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2477, "size == D * sizeof(ELEM_TYPE)", v77);
LABEL_104:
    free(v62);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v78 = a2;
  v22 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v23 = *(std::__shared_weak_count **)(a1 + 72);
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  v27 = *(_DWORD **)(a1 + 80);
  v26 = *(std::__shared_weak_count **)(a1 + 88);
  if (v26)
  {
    v28 = (unint64_t *)&v26->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  v30 = *(_QWORD *)(a1 + 32);
  OffsetFromEnd = vi_onefixedsize_memory_allocator::allocateOffsetFromEnd(*(_QWORD *)(v30 + 16), 0x814u);
  v32 = *(unsigned int *)(v30 + 24);
  if (OffsetFromEnd != v32)
  {
    v33 = *__error();
    v34 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v60 = *(_DWORD *)(v30 + 24);
      *(_DWORD *)__p = 136315906;
      *(_QWORD *)&__p[4] = "newEntry";
      v85 = 1024;
      v86 = 1779;
      v87 = 2048;
      *(_QWORD *)v88 = OffsetFromEnd;
      *(_WORD *)&v88[8] = 1024;
      *(_DWORD *)&v88[10] = v60;
      _os_log_error_impl(&dword_1B8270000, v34, OS_LOG_TYPE_ERROR, "%s:%d: offset: %llu, nVectors: %u", __p, 0x22u);
    }
    *__error() = v33;
    v32 = *(unsigned int *)(v30 + 24);
    if (OffsetFromEnd != v32)
    {
      v69 = __si_assert_copy_extra_268();
      v62 = v69;
      v70 = "";
      if (v69)
        v70 = v69;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1782, "offset == nVectors", v70);
      goto LABEL_104;
    }
  }
  *(_DWORD *)(v30 + 24) = v32 + 1;
  v35 = (_OWORD *)vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v30 + 16), OffsetFromEnd, 2068);
  memcpy(v35, v22, 0x800uLL);
  v35[128] = 0u;
  (*(void (**)(_DWORD *, uint64_t, size_t, float))(*(_QWORD *)v27 + 56))(v27, v9, OffsetFromEnd, v80);
  v36 = *(_QWORD *)(a1 + 32);
  if (v27[18] != *(_DWORD *)(v36 + 24))
  {
    v67 = __si_assert_copy_extra_268();
    v62 = v67;
    v68 = "";
    if (v67)
      v68 = v67;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2440, "cur.partitions->nVectors() == vectors->count()", v68);
    goto LABEL_104;
  }
  Ptr = (_DWORD *)vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v36 + 16), OffsetFromEnd, 2068);
  Ptr[516] = v78;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 24) == 1)
    *(_DWORD *)(a1 + 148) = v78;
  *(_DWORD *)(a1 + 152) = v78;
  if (v26)
  {
    v37 = (unint64_t *)&v26->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v23)
  {
    v39 = (unint64_t *)&v23->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return Ptr;
}

uint64_t IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::findVector(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, int a5)
{
  os_unfair_lock_s *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  _DWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char *v28;
  char *v29;
  const char *v30;
  char *v31;
  const char *v32;
  char *v33;
  char *v34;
  const char *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  _QWORD v40[8];
  int v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  int v45;

  v10 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v12 = *(_QWORD *)(a1 + 64);
  v11 = *(std::__shared_weak_count **)(a1 + 72);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v16 = *(_DWORD **)(a1 + 80);
  v15 = *(std::__shared_weak_count **)(a1 + 88);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  os_unfair_lock_unlock(v10);
  v19 = *a3;
  if ((_DWORD)v19 == -1)
  {
    if (*(_DWORD *)(a1 + 140) == -1)
    {
      v42 = 0;
      v43 = 0;
      v44 = 0;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 72))(&v42, v12, a2, 1);
      v20 = v42;
      if (v43 - (char *)v42 == 8)
      {
        v21 = *v42;
        *a3 = *v42;
        *a4 = v20[1];
        if (v21 >= IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1))
        {
          v33 = __si_assert_copy_extra_268();
          v34 = v33;
          if (v33)
            v35 = v33;
          else
            v35 = "";
          v36 = *a3;
          v37 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
          v38 = v16[19];
          v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          __message_assert("%s:%u: failed assertion '%s' %s Invalid partId %u >= %u (partitions: v%u quantizer v%u", "IVFVectorIndex.hh", 2403, "partID < nPartitions()", v35, v36, v37, v38, v39);
          free(v34);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if (v42)
        {
          v43 = (char *)v42;
          operator delete(v42);
        }
        v19 = *a3;
        goto LABEL_14;
      }
      v31 = __si_assert_copy_extra_268();
      v29 = v31;
      v32 = "";
      if (v31)
        v32 = v31;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2398, "topPartition.size() == 1", v32);
    }
    else
    {
      v28 = __si_assert_copy_extra_268();
      v29 = v28;
      v30 = "";
      if (v28)
        v30 = v28;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2396, "mergeBeginVectorOffset == VECTOR_NOT_FOUND", v30);
    }
    free(v29);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
LABEL_14:
  v42 = 0;
  v43 = (char *)&v42;
  v45 = -1;
  v44 = 0x2000000000;
  v40[0] = MEMORY[0x1E0C809B0];
  v40[1] = 0x40000000;
  v40[2] = ___ZN22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE10findVectorERK10CIVector_sIfLi512EERjRfj_block_invoke;
  v40[3] = &unk_1E6E32BA8;
  v41 = a5;
  v40[6] = a4;
  v40[7] = a2;
  v40[4] = &v42;
  v40[5] = a1;
  (*(void (**)(_DWORD *, uint64_t, _QWORD *))(*(_QWORD *)v16 + 80))(v16, v19, v40);
  v22 = *((unsigned int *)v43 + 6);
  _Block_object_dispose(&v42, 8);
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v11)
  {
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v22;
}

unint64_t ___ZN22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE10findVectorERK10CIVector_sIfLi512EERjRfj_block_invoke(unint64_t result, uint64_t a2, float *a3, _BYTE *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  int v15;
  const void *v16;
  const void *Ptr;

  v5 = *(_QWORD *)(result + 40);
  v6 = *(unsigned int *)a3;
  if (v6 >= *(_DWORD *)(v5 + 140))
    goto LABEL_12;
  v8 = result;
  v9 = **(float **)(result + 48);
  v10 = a3[1];
  v11 = v9 == v10;
  v12 = vabds_f32(v9, v10);
  v13 = fmaxf(fminf(fabsf(v10), fabsf(v9)) * 0.000015259, 0.000015259);
  if (v11 || v12 <= v13)
  {
    v15 = *(_DWORD *)(result + 64);
    if (v15)
    {
      result = vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(v5 + 32) + 16), v6, 2068);
      if (v15 != *(_DWORD *)(result + 2064))
        return result;
      *(float *)&v6 = *a3;
    }
    v16 = *(const void **)(v8 + 56);
    Ptr = (const void *)vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(v5 + 32) + 16), v6, 2068);
    result = memcmp(v16, Ptr, 0x800uLL);
    if (!(_DWORD)result)
    {
      *(float *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8) + 24) = *a3;
LABEL_12:
      *a4 = 1;
    }
  }
  return result;
}

int *IVFVectorIndexTemplate<float,512>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::truncate(uint64_t a1)
{
  int v2;
  NSObject *v3;
  _QWORD *v4;
  int v5;
  int v6;
  int v7;
  int *result;
  int v9;
  _QWORD *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *__error();
  v3 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (_QWORD *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v4 = (_QWORD *)*v4;
    v5 = *(_DWORD *)(a1 + 24);
    v6 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(a1 + 16), 0, 2068) + 2064);
    v7 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(a1 + 16), (*(_DWORD *)(a1 + 24) - 1), 2068)+ 2064);
    v9 = 136315906;
    v10 = v4;
    v11 = 1024;
    v12 = v5;
    v13 = 1024;
    v14 = v6;
    v15 = 1024;
    v16 = v7;
    _os_log_impl(&dword_1B8270000, v3, OS_LOG_TYPE_DEFAULT, "truncate VectorStore %s(%u)[%u,%u]", (uint8_t *)&v9, 0x1Eu);
  }
  result = __error();
  *result = v2;
  return result;
}

void ___ZNK22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke()
{
  char *v0;
  char *v1;
  const char *v2;

  v0 = __si_assert_copy_extra_268();
  v1 = v0;
  v2 = "";
  if (v0)
    v2 = v0;
  __message_assert("%s:%u: failed assertion '%s' %s ", "VectorIndexSupport.hh", 2544, "0", v2);
  free(v1);
  if (__valid_fs(-1))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

BOOL IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::exists(uint64_t a1, uint64_t a2)
{
  int Vector;
  int v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD v32[8];
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unsigned int v36;
  _QWORD v37[7];
  unsigned int v38;
  float v39;
  float v40;
  unsigned int v41;
  _BYTE buf[24];
  _DWORD v43[4];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v40 = 3.4028e38;
  v41 = -1;
  Vector = IVFVectorIndexTemplate<float,512>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::findVector(a1, a2, (int *)&v41, &v40, 0);
  if (Vector == -1)
  {
    v6 = *__error();
    v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "exists";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2632;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v41;
      LOWORD(v43[0]) = 2048;
      *(double *)((char *)v43 + 2) = v40;
      _os_log_error_impl(&dword_1B8270000, v7, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found partID=%u distsq=%e", buf, 0x22u);
    }
    *__error() = v6;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
    v9 = *(_QWORD *)(a1 + 64);
    v8 = *(std::__shared_weak_count **)(a1 + 72);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v13 = *(_QWORD *)(a1 + 80);
    v12 = *(std::__shared_weak_count **)(a1 + 88);
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v43[0] = -1;
    *(_QWORD *)&buf[16] = 0x2000000000;
    v16 = v41;
    v17 = MEMORY[0x1E0C809B0];
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 0x40000000;
    v37[2] = ___ZN22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIfLi512EE_block_invoke;
    v37[3] = &unk_1E6E32B48;
    v37[5] = a1;
    v37[6] = a2;
    v38 = v41;
    v39 = v40;
    v37[4] = buf;
    (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v13 + 80))(v13, v41, v37);
    if (*(_DWORD *)(*(_QWORD *)&buf[8] + 24) == -1)
    {
      v32[0] = v17;
      v32[1] = 1174405120;
      v32[2] = ___ZN22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIfLi512EE_block_invoke_632;
      v32[3] = &unk_1E6E32B70;
      v32[5] = a1;
      v32[6] = a2;
      v32[7] = v9;
      v33 = v8;
      if (v8)
      {
        v22 = (unint64_t *)&v8->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v34 = v13;
      v35 = v12;
      if (v12)
      {
        v24 = (unint64_t *)&v12->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v36 = v16;
      v32[4] = buf;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 64))(v13, v32);
      v26 = v35;
      if (v35)
      {
        v27 = (unint64_t *)&v35->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = v33;
      if (v33)
      {
        v30 = (unint64_t *)&v33->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
    _Block_object_dispose(buf, 8);
    if (v12)
    {
      v18 = (unint64_t *)&v12->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v8)
    {
      v20 = (unint64_t *)&v8->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  return Vector != -1;
}

void ___ZN22IVFVectorIndexTemplateIfLi512EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE6existsERK10CIVector_sIfLi512EE_block_invoke_632(uint64_t a1, int a2, float *a3, _BYTE *a4)
{
  const void *v8;
  uint64_t v9;
  const void *Ptr;
  int v11;
  NSObject *v12;
  const float *v13;
  const float *v14;
  float v15;
  int v16;
  NSObject *v17;
  int v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  int v22;
  NSObject *v23;
  int v24;
  NSObject *v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  NSObject *v31;
  int v32;
  NSObject *v33;
  int v34;
  NSObject *v35;
  int v36;
  NSObject *v37;
  int v38;
  NSObject *v39;
  double v40;
  int v41;
  int v42;
  float v43;
  int v44;
  float v45;
  _BOOL4 v46;
  int v47;
  int v48;
  _BOOL4 v49;
  int v50;
  int v51;
  _BOOL4 v52;
  int v53;
  int v54;
  _BOOL4 v55;
  int v56;
  int v57;
  float v58;
  float v59;
  double v60;
  float v61;
  _BOOL4 v62;
  _BOOL4 v63;
  int v64;
  float v65;
  int v66;
  float v67;
  _BOOL4 v68;
  int v69;
  int v70;
  _BOOL4 v71;
  int v72;
  int v73;
  _BOOL4 v74;
  int v75;
  int v76;
  _BOOL4 v77;
  int v78;
  int v79;
  float v80;
  float v81;
  float v82;
  _BOOL4 v83;
  _BOOL4 v84;
  _BOOL4 v85;
  float v86;
  float v87;
  float v88;
  float v89;
  void *__p;
  void *v91;
  uint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  float __C;
  const char *v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;
  __int16 v102;
  _BYTE v103[14];
  __int16 v104;
  double v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  _BOOL4 v109;
  __int16 v110;
  _BOOL4 v111;
  __int16 v112;
  _BOOL4 v113;
  __int16 v114;
  _BOOL4 v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 40);
  v8 = *(const void **)(a1 + 48);
  Ptr = (const void *)vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(v9 + 32) + 16), *(unsigned int *)a3, 2068);
  if (!memcmp(v8, Ptr, 0x800uLL))
  {
    v11 = *__error();
    v12 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v40 = a3[1];
      __C = 4.8153e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2647;
      v100 = 1024;
      v101 = a2;
      v102 = 2048;
      *(double *)v103 = v40;
      _os_log_error_impl(&dword_1B8270000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Vector not found actually in partID=%u distsq=%e", (uint8_t *)&__C, 0x22u);
    }
    *__error() = v11;
    v13 = *(const float **)(a1 + 48);
    v14 = (const float *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56), *(unsigned int *)(a1 + 88));
    __C = 3.4028e38;
    vDSP_distancesq(v13, 1, v14, 1, &__C, 0x200uLL);
    v15 = __C;
    v16 = *__error();
    v17 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v41 = *(_DWORD *)(a1 + 88);
      __C = 4.8153e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2649;
      v100 = 1024;
      v101 = v41;
      v102 = 2048;
      *(double *)v103 = v15;
      _os_log_error_impl(&dword_1B8270000, v17, OS_LOG_TYPE_ERROR, "%s:%d: Vec distance to centroid %u distsq=%e", (uint8_t *)&__C, 0x22u);
    }
    *__error() = v16;
    v93 = 0;
    v94 = 0;
    v95 = 0;
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 72))(&v93, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), 2);
    v18 = *__error();
    v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v42 = *(_DWORD *)v93;
      v43 = *((float *)v93 + 1);
      v44 = *((_DWORD *)v93 + 2);
      v45 = *((float *)v93 + 3);
      v46 = v43 == v45 || vabds_f32(v43, v45) <= fmaxf(fminf(fabsf(v45), fabsf(v43)) * 0.000015259, 0.000015259);
      __C = 4.8156e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2651;
      v100 = 1024;
      v101 = v42;
      v102 = 2048;
      *(double *)v103 = v43;
      *(_WORD *)&v103[8] = 1024;
      *(_DWORD *)&v103[10] = v44;
      v104 = 2048;
      v105 = v45;
      v106 = 1024;
      LODWORD(v107) = v46;
      _os_log_error_impl(&dword_1B8270000, v19, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(vec, 2) <%u, %e>, <%u, %e>, %d", (uint8_t *)&__C, 0x38u);
    }
    *__error() = v18;
    v20 = *__error();
    v21 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v47 = *(_DWORD *)v93;
      v48 = *((_DWORD *)v93 + 2);
      v49 = *((float *)v93 + 1) == *((float *)v93 + 3);
      __C = 4.8154e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2652;
      v100 = 1024;
      v101 = v47;
      v102 = 1024;
      *(_DWORD *)v103 = v48;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v49;
      _os_log_error_impl(&dword_1B8270000, v21, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v20;
    v22 = *__error();
    v23 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v50 = *(_DWORD *)v93;
      v51 = *((_DWORD *)v93 + 2);
      v52 = *((float *)v93 + 1) < *((float *)v93 + 3);
      __C = 4.8154e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2653;
      v100 = 1024;
      v101 = v50;
      v102 = 1024;
      *(_DWORD *)v103 = v51;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v52;
      _os_log_error_impl(&dword_1B8270000, v23, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v22;
    v24 = *__error();
    v25 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v53 = *(_DWORD *)v93;
      v54 = *((_DWORD *)v93 + 2);
      v55 = *((float *)v93 + 1) > *((float *)v93 + 3);
      __C = 4.8154e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2654;
      v100 = 1024;
      v101 = v53;
      v102 = 1024;
      *(_DWORD *)v103 = v54;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v55;
      _os_log_error_impl(&dword_1B8270000, v25, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v24;
    v26 = *__error();
    v27 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      v56 = *(_DWORD *)v93;
      v57 = *((_DWORD *)v93 + 2);
      v58 = *((float *)v93 + 1);
      v59 = *((float *)v93 + 3);
      v60 = (float)(v58 - v59);
      v61 = vabds_f32(v58, v59);
      if (v58 == v59)
      {
        v62 = 1;
        v63 = 1;
      }
      else
      {
        v86 = fabsf(v58);
        v87 = fabsf(v59);
        v62 = v61 <= fmaxf(fminf(v87, v86) * 0.000015259, 0.000015259);
        v63 = v61 <= (float)(fmaxf(v86, v87) * 0.000015259);
      }
      __C = 4.8161e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2655;
      v100 = 1024;
      v101 = v56;
      v102 = 1024;
      *(_DWORD *)v103 = v57;
      *(_WORD *)&v103[4] = 2048;
      *(double *)&v103[6] = v60;
      v104 = 2048;
      v105 = 1.17549435e-38;
      v106 = 2048;
      v107 = 0x3E80000000000000;
      v108 = 1024;
      v109 = v61 < 1.1755e-38;
      v110 = 1024;
      v111 = v61 < 0.00000011921;
      v112 = 1024;
      v113 = v62;
      v114 = 1024;
      v115 = v63;
      _os_log_error_impl(&dword_1B8270000, v27, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&__C, 0x54u);
    }
    *__error() = v26;
    v91 = 0;
    v92 = 0;
    __p = 0;
    v28 = *(_QWORD *)(a1 + 56);
    v29 = vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(v9 + 32) + 16), *(unsigned int *)a3, 2068);
    (*(void (**)(void **__return_ptr, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v28 + 72))(&__p, v28, v29, 2);
    v30 = *__error();
    v31 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v64 = *(_DWORD *)__p;
      v65 = *((float *)__p + 1);
      v66 = *((_DWORD *)__p + 2);
      v67 = *((float *)__p + 3);
      v68 = v65 == v67 || vabds_f32(v65, v67) <= fmaxf(fminf(fabsf(v67), fabsf(v65)) * 0.000015259, 0.000015259);
      __C = 4.8156e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2658;
      v100 = 1024;
      v101 = v64;
      v102 = 2048;
      *(double *)v103 = v65;
      *(_WORD *)&v103[8] = 1024;
      *(_DWORD *)&v103[10] = v66;
      v104 = 2048;
      v105 = v67;
      v106 = 1024;
      LODWORD(v107) = v68;
      _os_log_error_impl(&dword_1B8270000, v31, OS_LOG_TYPE_ERROR, "%s:%d: topKPartition(entry->vec, 2) <%u, %e>, <%u, %e>, %d", (uint8_t *)&__C, 0x38u);
    }
    *__error() = v30;
    v32 = *__error();
    v33 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      v69 = *(_DWORD *)__p;
      v70 = *((_DWORD *)__p + 2);
      v71 = *((float *)__p + 1) == *((float *)__p + 3);
      __C = 4.8154e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2659;
      v100 = 1024;
      v101 = v69;
      v102 = 1024;
      *(_DWORD *)v103 = v70;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v71;
      _os_log_error_impl(&dword_1B8270000, v33, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) == distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v32;
    v34 = *__error();
    v35 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v72 = *(_DWORD *)__p;
      v73 = *((_DWORD *)__p + 2);
      v74 = *((float *)__p + 1) < *((float *)__p + 3);
      __C = 4.8154e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2660;
      v100 = 1024;
      v101 = v72;
      v102 = 1024;
      *(_DWORD *)v103 = v73;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v74;
      _os_log_error_impl(&dword_1B8270000, v35, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) < distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v34;
    v36 = *__error();
    v37 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      v75 = *(_DWORD *)__p;
      v76 = *((_DWORD *)__p + 2);
      v77 = *((float *)__p + 1) > *((float *)__p + 3);
      __C = 4.8154e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2661;
      v100 = 1024;
      v101 = v75;
      v102 = 1024;
      *(_DWORD *)v103 = v76;
      *(_WORD *)&v103[4] = 1024;
      *(_DWORD *)&v103[6] = v77;
      _os_log_error_impl(&dword_1B8270000, v37, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) > distsq(%u) is %d", (uint8_t *)&__C, 0x24u);
    }
    *__error() = v36;
    v38 = *__error();
    v39 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      v78 = *(_DWORD *)__p;
      v79 = *((_DWORD *)__p + 2);
      v80 = *((float *)__p + 1);
      v81 = *((float *)__p + 3);
      v82 = vabds_f32(v80, v81);
      v83 = (float)(v80 - v81) < 1.1755e-38;
      if (v80 == v81)
      {
        v84 = 1;
        v85 = 1;
      }
      else
      {
        v88 = fabsf(v80);
        v89 = fabsf(v81);
        v84 = v82 <= fmaxf(fminf(v89, v88) * 0.000015259, 0.000015259);
        v85 = v82 <= (float)(fmaxf(v88, v89) * 0.000015259);
      }
      __C = 4.8161e-34;
      v97 = "exists_block_invoke";
      v98 = 1024;
      v99 = 2662;
      v100 = 1024;
      v101 = v78;
      v102 = 1024;
      *(_DWORD *)v103 = v79;
      *(_WORD *)&v103[4] = 2048;
      *(double *)&v103[6] = v82;
      v104 = 2048;
      v105 = 1.17549435e-38;
      v106 = 2048;
      v107 = 0x3E80000000000000;
      v108 = 1024;
      v109 = v83;
      v110 = 1024;
      v111 = v82 < 0.00000011921;
      v112 = 1024;
      v113 = v84;
      v114 = 1024;
      v115 = v85;
      _os_log_error_impl(&dword_1B8270000, v39, OS_LOG_TYPE_ERROR, "%s:%d: distsq(%u) - distsq(%u) = %e, FLT_MIN=%e, EPSILON=%e, %d, %d, %d, %d", (uint8_t *)&__C, 0x54u);
    }
    *__error() = v38;
    *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *a3;
    *a4 = 1;
    if (__p)
    {
      v91 = __p;
      operator delete(__p);
    }
    if (v93)
    {
      v94 = v93;
      operator delete(v93);
    }
  }
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E323A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6E323A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCB06A4);
}

void std::__shared_ptr_emplace<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;

  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
  {
    malloc_zone_free(*(malloc_zone_t **)v2, *(void **)(v2 + 8));
    JUMPOUT(0x1BCCB06A4);
  }
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s(_QWORD *a1)
{
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s(a1);
  JUMPOUT(0x1BCCB06A4);
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getQuantizer(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  os_unfair_lock_s *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v4 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v6 = *(_QWORD *)(a1 + 64);
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(std::__shared_weak_count **)(a1 + 88);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  os_unfair_lock_unlock(v4);
  *a2 = v6;
  a2[1] = v5;
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (!v9)
    goto LABEL_14;
  v14 = (unint64_t *)&v9->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v5)
      return;
  }
  else
  {
LABEL_14:
    if (!v5)
      return;
  }
  v16 = (unint64_t *)&v5->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  os_unfair_lock_s *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v9 = *(_QWORD *)(a1 + 80);
  v8 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v8)
  {
    os_unfair_lock_unlock(v4);
    *a2 = v9;
    a2[1] = 0;
    if (!v5)
      return;
    goto LABEL_15;
  }
  v10 = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  os_unfair_lock_unlock(v4);
  *a2 = v9;
  a2[1] = v8;
  do
    v12 = __ldxr(v10);
  while (__stxr(v12 + 1, v10));
  do
    v13 = __ldaxr(v10);
  while (__stlxr(v13 - 1, v10));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v5)
  {
LABEL_15:
    v14 = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

unint64_t IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getVectorAtOffset(uint64_t a1, unsigned int a2)
{
  return vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 16), a2, 1044);
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::newPartitions(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  os_unfair_lock_s *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  const char *v14;
  size_t v15;
  void *v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  malloc_zone_t *v20;
  uint64_t v21;
  _DWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  unint64_t Ptr;
  int v32;
  int v33;
  NSObject *v34;
  void **v35;
  int v36;
  int v37;
  char *v38;
  _QWORD *v39;
  int v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  const char *v47;
  void *v48[2];
  char v49;
  void *__dst[2];
  unint64_t v51;
  void *__p[3];
  __int16 v53;
  _QWORD *v54;
  __int16 v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v6 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v7 = *(std::__shared_weak_count **)(a1 + 72);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v11 = *(_QWORD *)(a1 + 80);
  v10 = *(std::__shared_weak_count **)(a1 + 88);
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  os_unfair_lock_unlock(v6);
  v14 = ".partitions";
  if (v11 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11))
    v14 = ".tmp.partitions";
  v15 = strlen(v14);
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
LABEL_60:
    abort();
  v16 = (void *)v15;
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v17 = (void **)operator new(v18 + 1);
    __dst[1] = v16;
    v51 = v19 | 0x8000000000000000;
    __dst[0] = v17;
    goto LABEL_17;
  }
  HIBYTE(v51) = v15;
  v17 = __dst;
  if (v15)
LABEL_17:
    memcpy(v17, v14, (size_t)v16);
  *((_BYTE *)v16 + (_QWORD)v17) = 0;
  v20 = malloc_default_zone();
  if (SHIBYTE(v51) < 0)
    operator delete(__dst[0]);
  v21 = operator new();
  v22 = (_DWORD *)v21;
  v23 = *(std::__shared_weak_count **)(a2 + 8);
  __p[0] = *(void **)a2;
  __p[1] = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionStore<vi_onefixedsize_memory_allocator>(v21, v20, 0, __p);
    do
      v26 = __ldaxr(v24);
    while (__stlxr(v26 - 1, v24));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  else
  {
    PartitionStore<vi_onefixedsize_memory_allocator,512>::PartitionStore<vi_onefixedsize_memory_allocator>(v21, v20, 0, __p);
  }
  *a3 = v22;
  v27 = (_QWORD *)operator new();
  *v27 = &off_1E6E31210;
  v27[1] = 0;
  v27[2] = 0;
  v27[3] = v22;
  a3[1] = v27;
  v28 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v28 + 24))
  {
    v29 = 0;
    do
    {
      memset(__p, 0, sizeof(__p));
      v30 = *(void **)a2;
      Ptr = vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v28 + 16), v29, 1044);
      (*(void (**)(void **__return_ptr, void *, unint64_t, uint64_t))(*(_QWORD *)v30 + 72))(__p, v30, Ptr, 1);
      (*(void (**)(_DWORD *, _QWORD, unint64_t, float))(*(_QWORD *)v22 + 56))(v22, *(unsigned int *)__p[0], v29, *((float *)__p[0] + 1));
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v29;
      v28 = *(_QWORD *)(a1 + 32);
    }
    while (v29 < *(unsigned int *)(v28 + 24));
  }
  (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v22 + 112))(v22, 0);
  v32 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 24);
  if (v32)
  {
    v33 = *__error();
    v34 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, _DWORD *))(*(_QWORD *)v22 + 144))(v48, v22);
      if (v49 >= 0)
        v35 = v48;
      else
        v35 = (void **)v48[0];
      v36 = v22[17];
      v37 = v22[18];
      v38 = *(char **)a2;
      v39 = (_QWORD *)(*(_QWORD *)a2 + 8);
      if (v38[31] < 0)
        v39 = (_QWORD *)*v39;
      v40 = (*(uint64_t (**)(char *))(*(_QWORD *)v38 + 16))(v38);
      LODWORD(__p[0]) = 136316162;
      *(void **)((char *)__p + 4) = v35;
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = v37;
      WORD1(__p[2]) = 1024;
      HIDWORD(__p[2]) = v36;
      v53 = 2080;
      v54 = v39;
      v55 = 1024;
      v56 = v40;
      _os_log_impl(&dword_1B8270000, v34, OS_LOG_TYPE_DEFAULT, "Create new partitions %s(%u/%u) for new quantizer %s(%u)", (uint8_t *)__p, 0x28u);
      if (v49 < 0)
        operator delete(v48[0]);
    }
    *__error() = v33;
    v32 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 24);
  }
  if (v22[18] != v32)
  {
    v45 = __si_assert_copy_extra_268();
    v46 = v45;
    v47 = "";
    if (v45)
      v47 = v45;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2363, "newPartitions->nVectors() == vectors->count()", v47);
    free(v46);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    goto LABEL_60;
  }
  if (v10)
  {
    v41 = (unint64_t *)&v10->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v7)
  {
    v43 = (unint64_t *)&v7->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::replaceQuantizer(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  std::__shared_weak_count *v8;
  __int128 *v9;
  char *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  _DWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  _DWORD *v18;
  NSObject *v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  void **v23;
  int v24;
  void **v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  const char *v47;
  char *v48;
  const char *v49;
  _QWORD *v50;
  _QWORD *v51;
  int v52;
  int v53;
  int v54;
  os_unfair_lock_s *v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *__p[2];
  char v61;
  void *v62[2];
  char v63;
  uint8_t buf[4];
  _QWORD *v65;
  __int16 v66;
  int v67;
  __int16 v68;
  _QWORD *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  void **v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  void **v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v6 = (os_unfair_lock_s *)(a1 + 136);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  v7 = (os_unfair_lock_s *)(a1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v10 = *(char **)(a1 + 64);
  v8 = *(std::__shared_weak_count **)(a1 + 72);
  v9 = (__int128 *)(a1 + 64);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(_DWORD **)(a1 + 80);
  v13 = *(std::__shared_weak_count **)(a1 + 88);
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
  v18 = (_DWORD *)*a3;
  if (v17 != *(_DWORD *)(*a3 + 68))
  {
    v45 = __si_assert_copy_extra_268();
    v46 = v45;
    v47 = "";
    if (v45)
      v47 = v45;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2381, "newQuantizer->count() == newPartitions->nPartitions()", v47);
LABEL_64:
    free(v46);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 24) != v18[18])
  {
    v48 = __si_assert_copy_extra_268();
    v46 = v48;
    v49 = "";
    if (v48)
      v49 = v48;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2382, "vectors->count() == newPartitions->nVectors()", v49);
    goto LABEL_64;
  }
  if (v10 && v14)
  {
    v56 = *__error();
    v19 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = v10 + 8;
      if (v10[31] < 0)
        v20 = (_QWORD *)*v20;
      v51 = v20;
      v21 = (*(uint64_t (**)(char *))(*(_QWORD *)v10 + 16))(v10);
      v22 = (_QWORD *)(*a2 + 8);
      v55 = v6;
      v54 = v21;
      if (*(char *)(*a2 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v50 = v22;
      v53 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
      v23 = v62;
      (*(void (**)(void **__return_ptr, _DWORD *))(*(_QWORD *)v14 + 144))(v62, v14);
      if (v63 < 0)
        v23 = (void **)v62[0];
      v24 = v14[18];
      v52 = v14[17];
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a3 + 144))(__p);
      v25 = __p;
      if (v61 < 0)
        v25 = (void **)__p[0];
      v26 = *(_DWORD *)(*a3 + 68);
      v27 = *(_DWORD *)(*a3 + 72);
      *(_DWORD *)buf = 136317442;
      v65 = v51;
      v66 = 1024;
      v67 = v54;
      v68 = 2080;
      v69 = v50;
      v70 = 1024;
      v71 = v53;
      v72 = 2080;
      v73 = v23;
      v74 = 1024;
      v75 = v24;
      v76 = 1024;
      v77 = v52;
      v78 = 2080;
      v79 = v25;
      v80 = 1024;
      v81 = v27;
      v82 = 1024;
      v83 = v26;
      _os_log_impl(&dword_1B8270000, v19, OS_LOG_TYPE_DEFAULT, "Replace quantizer %s(%u) -> %s(%u), partitions %s(%u/%u) -> %s(%u/%u)", buf, 0x4Eu);
      if (v61 < 0)
        operator delete(__p[0]);
      v6 = v55;
      if (v63 < 0)
        operator delete(v62[0]);
    }
    *__error() = v56;
    v18 = (_DWORD *)*a3;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v18 + 24))(v18))
    v28 = v14 == 0;
  else
    v28 = 1;
  if (!v28 && (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v14 + 24))(v14))
    (*(void (**)(_QWORD, _DWORD *))(*(_QWORD *)*a3 + 168))(*a3, v14);
  v29 = a2[1];
  *(_QWORD *)&v57 = *a2;
  *((_QWORD *)&v57 + 1) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = (std::__shared_weak_count *)a3[1];
  v58 = *a3;
  v59 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  os_unfair_lock_lock(v7);
  std::swap[abi:nn180100]<IVFVectorIndexTemplate<float,768>::QuantizerPartitions>(v9, &v57);
  os_unfair_lock_unlock(v7);
  v35 = v59;
  if (v59)
  {
    v36 = (unint64_t *)&v59->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  os_unfair_lock_unlock(v6);
  if (v13)
  {
    v41 = (unint64_t *)&v13->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v8)
  {
    v43 = (unint64_t *)&v8->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

_QWORD *IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *a1 = &off_1E6E32358;
  v2 = (std::__shared_weak_count *)a1[11];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[7];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[5];
    if (!v11)
      return a1;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[5];
    if (!v11)
      return a1;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return a1;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::~IVFVectorIndexInstance(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E32200;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s((_QWORD *)(a1 + 48));
  *(_QWORD *)a1 = off_1E6E30C80;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::~IVFVectorIndexInstance(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E6E32200;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::~IVFVectorIndexRoot_s((_QWORD *)(a1 + 48));
  *(_QWORD *)a1 = off_1E6E30C80;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1BCCB06A4);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::nVectors(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1 + 48);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::nPartitions(uint64_t a1)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1 + 48);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::allExist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  float v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  char *v14;
  char *v15;
  const char *v16;
  uint8_t buf[4];
  double v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a3)
  {
    v5 = a1 + 48;
    v6 = a3;
    if (a3 <= 0x3E8)
    {
      while (IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::exists(v5, a2))
      {
        a2 += 1024;
        if (!--v6)
          return a3;
      }
    }
    else
    {
      v7 = 0;
      v8 = a3 / 0xA;
      v9 = 1.0 / (float)a3;
      while (1)
      {
        v10 = v7 + 1;
        if (!(((int)v7 + 1) % v8))
        {
          v11 = *__error();
          v12 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            v18 = (float)((float)((float)v7 * 100.0) * v9);
            _os_log_impl(&dword_1B8270000, v12, OS_LOG_TYPE_DEFAULT, "allExist: %.0f%%", buf, 0xCu);
          }
          *__error() = v11;
        }
        if (!IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::exists(v5, a2))break;
        a2 += 1024;
        ++v7;
        if (a3 == v10)
          return a3;
      }
    }
    v14 = __si_assert_copy_extra_268();
    v15 = v14;
    v16 = "";
    if (v14)
      v16 = v14;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3151, "false", v16);
    free(v15);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return a3;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::validAddress()
{
  return 1;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::shadow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v6 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v7 = *(std::__shared_weak_count **)(a1 + 120);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v11 = *(_QWORD *)(a1 + 128);
  v10 = *(std::__shared_weak_count **)(a1 + 136);
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    os_unfair_lock_unlock(v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 160))(v11, a2, a3);
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    os_unfair_lock_unlock(v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 160))(v11, a2, a3);
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return 0;
}

_DWORD *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::bulkInsertForTest(_DWORD *result, char *a2, int *a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  float v12;
  int v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint8_t buf[4];
  double v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v8 = (uint64_t)(result + 12);
    v9 = a4;
    if (a4 <= 0x3E8)
    {
      do
      {
        v21 = *a5++;
        v20 = v21;
        v23 = *a3++;
        v22 = v23;
        result = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v8, v20, a2, 0xFFFFFFFF, 3.4028e38);
        if (result[258])
        {
          v19 = result[257] + 1;
        }
        else
        {
          result[258] = v22;
          v19 = 1;
        }
        result[257] = v19;
        a2 += 1024;
        --v9;
      }
      while (v9);
    }
    else
    {
      v10 = 0;
      v11 = a4 / 0xA;
      v12 = 1.0 / (float)a4;
      do
      {
        v14 = v10 + 1;
        if (!(((int)v10 + 1) % v11))
        {
          v15 = *__error();
          v16 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            v25 = (float)((float)((float)v10 * 100.0) * v12);
            _os_log_impl(&dword_1B8270000, v16, OS_LOG_TYPE_DEFAULT, "bulkInsertForTest: %.0f%%", buf, 0xCu);
          }
          *__error() = v15;
        }
        v17 = a5[v10];
        v18 = a3[v10];
        result = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v8, v17, a2, 0xFFFFFFFF, 3.4028e38);
        if (result[258])
        {
          v13 = result[257] + 1;
        }
        else
        {
          result[258] = v18;
          v13 = 1;
        }
        result[257] = v13;
        a2 += 1024;
        v10 = v14;
      }
      while (v9 != v14);
    }
  }
  return result;
}

char *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::insertVector(_DWORD *a1, int a2, unsigned int a3, const void *a4, int a5, int a6, int a7, uint64_t a8, char *a9)
{
  unsigned int *v11;
  char *v13;
  char *v14;
  const char *v15;

  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != a1[4])
  {
    v13 = __si_assert_copy_extra_268();
    v14 = v13;
    v15 = "";
    if (v13)
      v15 = v13;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v11 = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFF, 3.4028e38)+ 256;
  return vi_memory_postings::push_posting(a9, a7, v11, a8);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::insertForMerge(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  char *v8;
  char *v9;
  const char *v10;

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a7 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a6]
    || vector_size_elem_sizes_10742[a7] != *(_DWORD *)(a1 + 16))
  {
    v8 = __si_assert_copy_extra_268();
    v9 = v8;
    v10 = "";
    if (v8)
      v10 = v8;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v10);
    free(v9);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return 1;
}

_DWORD *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::insertForTest(_DWORD *a1, int a2, unsigned int a3, const void *a4, int a5, int a6, int a7)
{
  _DWORD *result;
  int v9;
  char *v10;
  char *v11;
  const char *v12;
  uint64_t v13;

  if (a1[2] != a2
    || a6 > 2
    || a1[3] != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != a1[4])
  {
    v10 = __si_assert_copy_extra_268();
    v11 = v10;
    v12 = "";
    if (v10)
      v12 = v10;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v12);
    free(v11);
    if (__valid_fs(-1))
      v13 = 2989;
    else
      v13 = 3072;
    *(_DWORD *)v13 = -559038737;
    abort();
  }
  result = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert((uint64_t)(a1 + 12), a3, a4, 0xFFFFFFFF, 3.4028e38);
  if (result[258])
  {
    v9 = result[257] + 1;
  }
  else
  {
    result[258] = a7;
    v9 = 1;
  }
  result[257] = v9;
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::train(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  const char *v30;
  char *v31;
  char *v32;
  const char *v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;

  v3 = *(_QWORD **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  v4 = v2 - *(_QWORD *)a2;
  if (v2 == *(_QWORD *)a2)
  {
    v31 = __si_assert_copy_extra_268();
    v32 = v31;
    v33 = "";
    if (v31)
      v33 = v31;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3170, "vi.size() > 0", v33);
    goto LABEL_52;
  }
  if (*v3 != a1)
  {
    v34 = __si_assert_copy_extra_268();
    v32 = v34;
    v35 = "";
    if (v34)
      v35 = v34;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3171, "this == vi[0]", v35);
LABEL_52:
    free(v32);
    if (__valid_fs(-1))
      v36 = 2989;
    else
      v36 = 3072;
    *(_DWORD *)v36 = -559038737;
LABEL_56:
    abort();
  }
  v6 = a2;
  v7 = (char *)operator new(8uLL);
  v8 = v7;
  *(_QWORD *)v7 = a1 + 48;
  if (v4 < 9)
    goto LABEL_39;
  v9 = v7 + 8;
  v10 = 1;
  v11 = v7 + 8;
  v37 = v6;
  do
  {
    v13 = v3[v10];
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(v13 + 8)
      || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(v13 + 20)
      || *(_DWORD *)(a1 + 12) != *(_DWORD *)(v13 + 12)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(v13 + 16))
    {
      v28 = __si_assert_copy_extra_268();
      v29 = v28;
      v30 = "";
      if (v28)
        v30 = v28;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v30);
      free(v29);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v14 = v13 + 48;
    if (v9 < v11)
    {
      *(_QWORD *)v9 = v14;
      v12 = v9 + 8;
      goto LABEL_6;
    }
    v15 = (v9 - v8) >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      goto LABEL_56;
    if ((v11 - v8) >> 2 > v16)
      v16 = (v11 - v8) >> 2;
    if ((unint64_t)(v11 - v8) >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v18 = operator new(8 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = &v18[8 * v15];
    v11 = &v18[8 * v17];
    *(_QWORD *)v19 = v14;
    v12 = v19 + 8;
    if (v9 == v8)
    {
LABEL_36:
      operator delete(v8);
      goto LABEL_37;
    }
    v20 = v9 - 8 - v8;
    if (v20 < 0x168)
    {
      v21 = v9;
      goto LABEL_34;
    }
    if (&v18[v9 - v8 - 8 - (v20 & 0xFFFFFFFFFFFFFFF8)] > &v18[v9 - v8 - 8])
    {
      v21 = v9;
      goto LABEL_34;
    }
    if (&v9[-(v20 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
    {
      v21 = v9;
      do
      {
LABEL_34:
        v27 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *((_QWORD *)v19 - 1) = v27;
        v19 -= 8;
      }
      while (v21 != v8);
      goto LABEL_35;
    }
    if ((unint64_t)(v8 - v18) < 0x20)
    {
      v21 = v9;
      goto LABEL_34;
    }
    v22 = (v20 >> 3) + 1;
    v21 = &v9[-8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
    v23 = &v18[8 * v15 - 16];
    v24 = v9 - 16;
    v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v19 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_34;
LABEL_35:
    if (v8)
      goto LABEL_36;
LABEL_37:
    v8 = v19;
    v6 = v37;
LABEL_6:
    ++v10;
    v3 = *(_QWORD **)v6;
    v9 = v12;
  }
  while (v10 < (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
  if (v8)
LABEL_39:
    operator delete(v8);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::mergeUpdateSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t result;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  const char *v32;
  char *v33;
  const char *v34;
  _DWORD v35[4];
  void *__src;
  uint64_t v37;
  uint8_t buf[1032];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v33 = __si_assert_copy_extra_268();
    v31 = v33;
    v34 = "";
    if (v33)
      v34 = v33;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v34);
LABEL_36:
    free(v31);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v7 = *__error();
  v8 = _SILogForLogForCategory(16);
  v9 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v10;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v11;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v12;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&buf[22] = v13;
    _os_log_impl(&dword_1B8270000, v8, v9, "mergeUpdateSet(termIds) %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v7;
  v14 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::beginMerge(a1 + 48);
  while (1)
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::next((uint64_t)v35, v14);
    if (!__src)
      break;
    v15 = v35[0];
    v16 = *(float *)&v35[1];
    v17 = v35[2];
    v18 = v37;
    memcpy(buf, __src, 0x400uLL);
    v20 = *(_QWORD *)(a4 + 8);
    v19 = *(_QWORD *)(a4 + 16);
    v21 = v20 + 1;
    if (v20 + 1 < v19)
    {
      v22 = *(_QWORD **)a4;
      goto LABEL_16;
    }
    if (v19)
    {
      if (v21 >= v19)
        goto LABEL_13;
    }
    else
    {
      *(_QWORD *)(a4 + 16) = 1024;
      v19 = 1024;
      if (v21 >= 0x400)
      {
        do
LABEL_13:
          v19 *= 2;
        while (v21 >= v19);
        *(_QWORD *)(a4 + 16) = v19;
      }
    }
    v22 = malloc_type_realloc(*(void **)a4, 24 * v19, 0x10200409F4E64B8uLL);
    *(_QWORD *)a4 = v22;
    v20 = *(_QWORD *)(a4 + 8);
    v21 = v20 + 1;
LABEL_16:
    v22[3 * v20 + 1] = v18;
    *(_QWORD *)(a4 + 8) = v21;
    if (*(_DWORD *)(a1 + 188) == -1)
    {
      v30 = __si_assert_copy_extra_268();
      v31 = v30;
      v32 = "";
      if (v30)
        v32 = v30;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 2689, "mergeBeginVectorOffset < VECTOR_NOT_FOUND", v32);
      goto LABEL_36;
    }
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(a1 + 48, v17, buf, v15, v16);
  }
  result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::endMerge(a1 + 48);
  if (v14)
  {
    std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100](v14 + 32);
    v24 = *(std::__shared_weak_count **)(v14 + 24);
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = *(std::__shared_weak_count **)(v14 + 8);
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    return MEMORY[0x1BCCB06A4](v14, 0x10A0C40B50FE552);
  }
  return result;
}

_DWORD *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::mergeUpdateSet(_DWORD *result, uint64_t a2, char *a3, unsigned int a4, uint64_t a5)
{
  _DWORD *v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int v16;
  const void *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  const char *v21;
  int v22;
  NSObject *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _DWORD __dst[256];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (result[2] != *(_DWORD *)(a2 + 8)
    || (v6 = result, *((unsigned __int16 *)result + 10) != *(unsigned __int16 *)(a2 + 20))
    || result[3] != *(_DWORD *)(a2 + 12)
    || result[4] != *(_DWORD *)(a2 + 16))
  {
    v19 = __si_assert_copy_extra_268();
    v20 = v19;
    v21 = "";
    if (v19)
      v21 = v19;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v21);
    free(v20);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (dword_1EF19FCCC >= 5)
  {
    v22 = *__error();
    v23 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
      v25 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      __dst[0] = 67109888;
      __dst[1] = v24;
      LOWORD(__dst[2]) = 1024;
      *(_DWORD *)((char *)&__dst[2] + 2) = v25;
      HIWORD(__dst[3]) = 1024;
      __dst[4] = v26;
      LOWORD(__dst[5]) = 1024;
      *(_DWORD *)((char *)&__dst[5] + 2) = v27;
      _os_log_impl(&dword_1B8270000, v23, OS_LOG_TYPE_DEFAULT, "mergeUpdateSet(DocID) %u vectors in %u partitions and %u vectors in %u partitions", (uint8_t *)__dst, 0x1Au);
    }
    result = __error();
    *result = v22;
  }
  v9 = 0;
  v10 = *(_QWORD *)(a2 + 80);
  v11 = (uint64_t)(v6 + 12);
  v12 = a4;
  while (v9 != *(_DWORD *)(v10 + 24))
  {
    v16 = *(_DWORD *)(IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v10, v9)+ 1040);
    v17 = (const void *)IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v10, v9);
    memcpy(__dst, v17, sizeof(__dst));
    v18 = IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator->(v10, v9);
    if ((*(_BYTE *)(v18 + 1024) & 1) != 0)
    {
      if (*(_DWORD *)(v18 + 1028))
        v13 = 1;
      else
        v13 = 2;
      v14 = a5;
    }
    else
    {
      v13 = 0;
      v14 = v12;
    }
    v15 = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v11, v16, __dst, 0xFFFFFFFF, 3.4028e38);
    result = vi_memory_postings::push_posting(a3, v13, v15 + 256, v14);
    ++v9;
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::mergeUpdateSetForTest(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  float v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t result;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  const char *v28;
  char *v29;
  const char *v30;
  uint8_t buf[4];
  float v32;
  _BYTE v33[6];
  __int16 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v26 = __si_assert_copy_extra_268();
    v27 = v26;
    v28 = "";
    if (v26)
      v28 = v26;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v28);
LABEL_34:
    free(v27);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  v6 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v5, v6))
  {
    LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    v32 = v7;
    *(_WORD *)v33 = 1024;
    *(_DWORD *)&v33[2] = v8;
    v34 = 1024;
    LODWORD(v35) = v9;
    WORD2(v35) = 1024;
    *(_DWORD *)((char *)&v35 + 6) = v10;
    _os_log_impl(&dword_1B8270000, v5, v6, "mergeUpdateSetForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v4;
  v11 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator(a2 + 48);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::beginMerge(a1 + 48);
  v14 = 0;
  while (1)
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::next((uint64_t)buf, v11);
    if (!(_QWORD)v35)
      break;
    v16 = *(_DWORD *)(*((_QWORD *)&v35 + 1) + 8);
    v17 = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(a1 + 48, *(unsigned int *)v33, (const void *)v35, *(unsigned int *)buf, v32);
    v18 = v17[258];
    if (v18)
    {
      v15 = v17[257] + 1;
    }
    else
    {
      v17[258] = v16;
      v15 = 1;
    }
    v17[257] = v15;
    if (v18)
      ++v14;
  }
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::endMerge(a1 + 48);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result + v14 != v13 + v12)
  {
    v29 = __si_assert_copy_extra_268();
    v27 = v29;
    v30 = "";
    if (v29)
      v30 = v29;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3267, "nVectors() + dup == old + added", v30);
    goto LABEL_34;
  }
  if (v11)
  {
    std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100](v11 + 32);
    v20 = *(std::__shared_weak_count **)(v11 + 24);
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = *(std::__shared_weak_count **)(v11 + 8);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    return MEMORY[0x1BCCB06A4](v11, 0x10A0C40B50FE552);
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::mergeIndexForTest(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  float v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  uint64_t result;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  const char *v28;
  char *v29;
  const char *v30;
  uint8_t buf[4];
  float v32;
  _BYTE v33[6];
  __int16 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v26 = __si_assert_copy_extra_268();
    v27 = v26;
    v28 = "";
    if (v26)
      v28 = v26;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v28);
LABEL_34:
    free(v27);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  v6 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v5, v6))
  {
    LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    v32 = v7;
    *(_WORD *)v33 = 1024;
    *(_DWORD *)&v33[2] = v8;
    v34 = 1024;
    LODWORD(v35) = v9;
    WORD2(v35) = 1024;
    *(_DWORD *)((char *)&v35 + 6) = v10;
    _os_log_impl(&dword_1B8270000, v5, v6, "mergeIndexForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v4;
  v11 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator(a2 + 48);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::beginMerge(a1 + 48);
  v14 = 0;
  while (1)
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::enumerator_s::next((uint64_t)buf, v11);
    if (!(_QWORD)v35)
      break;
    v16 = **((_QWORD **)&v35 + 1);
    v17 = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(a1 + 48, *(unsigned int *)v33, (const void *)v35, *(unsigned int *)buf, v32);
    v18 = v17[258];
    if (v18)
    {
      v15 = v17[257] + 1;
    }
    else
    {
      v17[258] = v16;
      v15 = 1;
    }
    v17[257] = v15;
    if (v18)
      ++v14;
  }
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::endMerge(a1 + 48);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result + v14 != v13 + v12)
  {
    v29 = __si_assert_copy_extra_268();
    v27 = v29;
    v30 = "";
    if (v29)
      v30 = v29;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3281, "nVectors() + dup == old + added", v30);
    goto LABEL_34;
  }
  if (v11)
  {
    std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100](v11 + 32);
    v20 = *(std::__shared_weak_count **)(v11 + 24);
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = *(std::__shared_weak_count **)(v11 + 8);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    return MEMORY[0x1BCCB06A4](v11, 0x10A0C40B50FE552);
  }
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::dump(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  os_unfair_lock_s *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD v37[2];
  void (*v38)();
  void *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[3];
  __int128 v48;
  __int128 v49;
  char v50;
  __int128 v51;
  __int128 v52;

  v9 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v10 = *(std::__shared_weak_count **)(a1 + 120);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(_QWORD *)(a1 + 128);
  v13 = *(std::__shared_weak_count **)(a1 + 136);
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  os_unfair_lock_unlock(v9);
  v46 = 0u;
  memset(v47, 0, sizeof(v47));
  v45 = 0u;
  v43 = v14;
  v44 = v13;
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(_QWORD *)(a1 + 80);
  v20 = *(std::__shared_weak_count **)(a1 + 88);
  v42[0] = v19;
  v42[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::enumerator_s((uint64_t)&v45, &v43, v42);
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::enumerator_s((uint64_t)&v45, &v43, v42);
  }
  v24 = v44;
  if (v44)
  {
    v25 = (unint64_t *)&v44->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 0x40000000;
  v38 = ___ZNK22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE4dumpEbbPViPvU13block_pointerFbjPKvybjfE_block_invoke;
  v39 = &unk_1E6E325B0;
  v40 = a6;
  v41 = a4;
  v51 = 0u;
  v52 = 0u;
  v50 = 0;
  do
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::enumerator_s::next((uint64_t)&v48, (uint64_t)&v45);
    v51 = v48;
    v52 = v49;
    if (!(_QWORD)v49)
      break;
    ((void (*)(_QWORD *, __int128 *, char *))v38)(v37, &v51, &v50);
  }
  while (!v50);
  std::deque<std::shared_ptr<AnyPartitionStore::Enumerator>>::~deque[abi:nn180100]((uint64_t)v47);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (!*((_QWORD *)&v46 + 1))
    goto LABEL_30;
  v28 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (!*((_QWORD *)&v45 + 1))
      goto LABEL_36;
  }
  else
  {
LABEL_30:
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (!*((_QWORD *)&v45 + 1))
      goto LABEL_36;
  }
  v31 = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  if (!v13)
    goto LABEL_40;
LABEL_36:
  v33 = (unint64_t *)&v13->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!v10)
      return;
  }
  else
  {
LABEL_40:
    if (!v10)
      return;
  }
  v35 = (unint64_t *)&v10->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::flush(uint64_t a1, uint64_t a2)
{
  IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::flush(a1 + 48, a2);
}

int *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::compact(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int *result;
  char *v12;
  char *v13;
  const char *v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  v6 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    v16 = v7;
    v17 = 1024;
    v18 = v8;
    v19 = 1024;
    v20 = v9;
    v21 = 1024;
    v22 = v10;
    _os_log_impl(&dword_1B8270000, v5, v6, "compact %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  result = __error();
  *result = v4;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v12 = __si_assert_copy_extra_268();
    v13 = v12;
    v14 = "";
    if (v12)
      v14 = v12;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v14);
    free(v13);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::compactForTest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  NSObject *v7;
  os_log_type_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  const char *v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v13 = __si_assert_copy_extra_268();
    v14 = v13;
    v15 = "";
    if (v13)
      v15 = v13;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v15);
    free(v14);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v6 = *__error();
  v7 = _SILogForLogForCategory(16);
  v8 = 2 * (dword_1EF19FCCC < 4);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 67109888;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    v22 = 1024;
    v23 = v12;
    _os_log_impl(&dword_1B8270000, v7, v8, "compactForTest %u vectors in %u partitions and %u vectors in %u partitions", buf, 0x1Au);
  }
  *__error() = v6;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_disk_allocator,vi_disk_postings>::compactForTest<vi_onefixedsize_disk_allocator>(a1 + 48, a2 + 48, a3);
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::subvert(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  os_unfair_lock_s *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  const char *v30;

  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    v28 = __si_assert_copy_extra_268();
    v29 = v28;
    v30 = "";
    if (v28)
      v30 = v28;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3075, "compatible", v30);
    free(v29);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v4 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v5 = *(std::__shared_weak_count **)(a1 + 120);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v9 = *(_QWORD *)(a1 + 128);
  v8 = *(std::__shared_weak_count **)(a1 + 136);
  if (v8)
  {
    v10 = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  os_unfair_lock_unlock(v4);
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v14 = (os_unfair_lock_s *)(a2 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 144));
  v15 = *(std::__shared_weak_count **)(a2 + 120);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v19 = *(_QWORD *)(a2 + 128);
  v18 = *(std::__shared_weak_count **)(a2 + 136);
  if (v18)
  {
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  os_unfair_lock_unlock(v14);
  if (v15)
  {
    v22 = (unint64_t *)&v15->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 168))(v9, v19);
  if (!v18)
    goto LABEL_31;
  v24 = (unint64_t *)&v18->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v8)
      return;
  }
  else
  {
LABEL_31:
    if (!v8)
      return;
  }
  v26 = (unint64_t *)&v8->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::unlink(uint64_t a1)
{
  os_unfair_lock_s *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v22;
  _QWORD *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a1 + 128);
  v6 = *(std::__shared_weak_count **)(a1 + 136);
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  os_unfair_lock_unlock(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  v10 = *(_QWORD *)(a1 + 80);
  v11 = *__error();
  v12 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = (_QWORD *)(v10 + 40);
    if (*(char *)(v10 + 63) < 0)
      v13 = (_QWORD *)*v13;
    v14 = *(_DWORD *)(v10 + 24);
    v15 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v10 + 16), 0, 1044) + 1040);
    v16 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v10 + 16), (*(_DWORD *)(v10 + 24) - 1), 1044)+ 1040);
    v22 = 136315906;
    v23 = v13;
    v24 = 1024;
    v25 = v14;
    v26 = 1024;
    v27 = v15;
    v28 = 1024;
    v29 = v16;
    _os_log_impl(&dword_1B8270000, v12, OS_LOG_TYPE_DEFAULT, "unlink VectorStore %s(%u)[%u,%u]", (uint8_t *)&v22, 0x1Eu);
  }
  *__error() = v11;
  if (v6)
  {
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v3)
  {
    v19 = (unint64_t *)&v3->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return 1;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::truncate(uint64_t a1)
{
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  os_unfair_lock_s *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint8_t v16[16];

  if (*(_BYTE *)(a1 + 192))
  {
    v1 = *__error();
    v2 = _SILogForLogForCategory(16);
    v3 = dword_1EF19FCCC < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1EF19FCCC < 3)))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1B8270000, v2, v3, "*warn* call truncate on readOnly index.", v16, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::flush(a1 + 48, 0);
    IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::truncate(*(_QWORD *)(a1 + 80));
    v5 = (os_unfair_lock_s *)(a1 + 144);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
    v6 = *(std::__shared_weak_count **)(a1 + 120);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v10 = *(_QWORD *)(a1 + 128);
    v9 = *(std::__shared_weak_count **)(a1 + 136);
    if (v9)
    {
      v11 = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      os_unfair_lock_unlock(v5);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      os_unfair_lock_unlock(v5);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
    }
    if (v6)
    {
      v14 = (unint64_t *)&v6->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::makeReadOnly(uint64_t a1)
{
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v5;
  int v6;
  NSObject *v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  _QWORD *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 192))
  {
    v1 = *__error();
    v2 = _SILogForLogForCategory(16);
    v3 = dword_1EF19FCCC < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(dword_1EF19FCCC < 3)))
    {
      LOWORD(v22) = 0;
      _os_log_impl(&dword_1B8270000, v2, v3, "*warn* call makeReadOnly on readOnly index.", (uint8_t *)&v22, 2u);
    }
    *__error() = v1;
  }
  else
  {
    IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::flush(a1 + 48, 0);
    v5 = *(_QWORD *)(a1 + 80);
    v6 = *__error();
    v7 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = (_QWORD *)(v5 + 40);
      if (*(char *)(v5 + 63) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_DWORD *)(v5 + 24);
      v10 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v5 + 16), 0, 1044) + 1040);
      v11 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v5 + 16), (*(_DWORD *)(v5 + 24) - 1), 1044)+ 1040);
      v22 = 136315906;
      v23 = v8;
      v24 = 1024;
      v25 = v9;
      v26 = 1024;
      v27 = v10;
      v28 = 1024;
      v29 = v11;
      _os_log_impl(&dword_1B8270000, v7, OS_LOG_TYPE_DEFAULT, "makeReadOnly VectorStore %s(%u)[%u,%u]", (uint8_t *)&v22, 0x1Eu);
    }
    *__error() = v6;
    IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::truncate(v5);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
    v12 = *(std::__shared_weak_count **)(a1 + 120);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v16 = *(_QWORD *)(a1 + 128);
    v15 = *(std::__shared_weak_count **)(a1 + 136);
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 120))(v16);
      *(_BYTE *)(a1 + 192) = 1;
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 120))(v16);
      *(_BYTE *)(a1 + 192) = 1;
    }
    if (v12)
    {
      v20 = (unint64_t *)&v12->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::makePurgeable(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  _QWORD *v5;
  int v6;
  int v7;
  int v8;
  os_unfair_lock_s *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 80);
  v3 = *__error();
  v4 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (_QWORD *)(v2 + 40);
    if (*(char *)(v2 + 63) < 0)
      v5 = (_QWORD *)*v5;
    v6 = *(_DWORD *)(v2 + 24);
    v7 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v2 + 16), 0, 1044) + 1040);
    v8 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v2 + 16), (*(_DWORD *)(v2 + 24) - 1), 1044)+ 1040);
    v20 = 136315906;
    v21 = v5;
    v22 = 1024;
    v23 = v6;
    v24 = 1024;
    v25 = v7;
    v26 = 1024;
    v27 = v8;
    _os_log_impl(&dword_1B8270000, v4, OS_LOG_TYPE_DEFAULT, "makePurgeable VectorStore %s(%u)[%u,%u]", (uint8_t *)&v20, 0x1Eu);
  }
  *__error() = v3;
  v9 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v10 = *(std::__shared_weak_count **)(a1 + 120);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = *(_QWORD *)(a1 + 128);
  v13 = *(std::__shared_weak_count **)(a1 + 136);
  if (!v13)
  {
    os_unfair_lock_unlock(v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 128))(v14);
    if (!v10)
      return;
    goto LABEL_18;
  }
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  os_unfair_lock_unlock(v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 128))(v14);
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v10)
  {
LABEL_18:
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::rename(uint64_t a1, const char *a2)
{
  int v4;
  NSObject *v5;
  size_t v6;
  std::string::size_type v7;
  std::string *p_buf;
  uint64_t v9;
  uint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  _QWORD *v23;
  int v24;
  int v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::string::value_type __s[23];
  char v32;
  std::string v33;
  std::string buf;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = *__error();
  v5 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    _os_log_impl(&dword_1B8270000, v5, OS_LOG_TYPE_DEFAULT, "rename: %s", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v4;
  v6 = strlen(a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_buf = (std::string *)operator new(v9 + 1);
    buf.__r_.__value_.__l.__size_ = v7;
    buf.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_10;
  }
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = v6;
  p_buf = &buf;
  if (v6)
LABEL_10:
    memcpy(p_buf, a2, v7);
  p_buf->__r_.__value_.__s.__data_[v7] = 0;
  v32 = 11;
  strcpy(__s, ".partitions");
  memset(&v33, 0, sizeof(v33));
  v11 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v33, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  else
    v33 = buf;
  std::string::append(&v33, __s, 0xBuLL);
  if (v32 < 0)
  {
    operator delete(*(void **)__s);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_16;
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
LABEL_16:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v12 = *(std::__shared_weak_count **)(a1 + 120);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v16 = *(_QWORD *)(a1 + 128);
  v15 = *(std::__shared_weak_count **)(a1 + 136);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v33;
  else
    v19 = (std::string *)v33.__r_.__value_.__r.__words[0];
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 152))(v16, v19);
  v20 = *(_QWORD *)(a1 + 80);
  v21 = *__error();
  v22 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v23 = (_QWORD *)(v20 + 40);
    if (*(char *)(v20 + 63) < 0)
      v23 = (_QWORD *)*v23;
    v24 = *(_DWORD *)(v20 + 24);
    v25 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v20 + 16), 0, 1044) + 1040);
    v26 = *(_DWORD *)(vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v20 + 16), (*(_DWORD *)(v20 + 24) - 1), 1044)+ 1040);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)a2;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
    v35 = v24;
    v36 = 1024;
    v37 = v25;
    v38 = 1024;
    v39 = v26;
    _os_log_impl(&dword_1B8270000, v22, OS_LOG_TYPE_DEFAULT, "rename VectorStore %s -> %s(%u)[%u,%u]", (uint8_t *)&buf, 0x28u);
  }
  *__error() = v21;
  MEMORY[0x1BCCB03B0](v20 + 40, a2);
  if (v15)
  {
    v27 = (unint64_t *)&v15->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (!v12)
    goto LABEL_38;
  v29 = (unint64_t *)&v12->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (v30)
  {
LABEL_38:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
LABEL_39:
    operator delete(v33.__r_.__value_.__l.__data_);
}

_QWORD *IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::storeUpdateSet(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  _QWORD *result;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  const char *v17;
  uint64_t v18;

  result = store_stream_write_vint32_2186(a3, *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24));
  v7 = 0;
  v8 = *(_QWORD *)(a1 + 80);
  while (v7 != *(_DWORD *)(v8 + 24))
  {
    v9 = IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator*(v8, v7);
    CIWritePostings((uint64_t)a3, a2, 0, (unsigned int *)(v9 + 1024), 0, 0);
    v11 = *((_QWORD *)a3 + 4);
    v10 = *((_QWORD *)a3 + 5);
    if (v10 + 1024 >= v11)
    {
      v13 = 1024;
      v12 = (char *)v9;
      while (1)
      {
        v14 = v11 - v10;
        memcpy((void *)(*((_QWORD *)a3 + 6) + v10), v12, v11 - v10);
        *((_QWORD *)a3 + 5) += v14;
        if (store_stream_flush(a3, 0))
          break;
        v12 += v14;
        v13 -= v14;
        v11 = *((_QWORD *)a3 + 4);
        v10 = *((_QWORD *)a3 + 5);
        if (v10 + v13 < v11)
          goto LABEL_5;
      }
    }
    else
    {
      v12 = (char *)v9;
      v13 = 1024;
LABEL_5:
      memcpy((void *)(*((_QWORD *)a3 + 6) + v10), v12, v13);
      *((_QWORD *)a3 + 5) += v13;
    }
    result = store_stream_write_vint32_2186(a3, *(_DWORD *)(v9 + 1040));
    ++v7;
    if (v8 != *(_QWORD *)(a1 + 80))
    {
      v15 = __si_assert_copy_extra_268();
      v16 = v15;
      v17 = "";
      if (v15)
        v17 = v15;
      __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1814, "store == other.store", v17);
      free(v16);
      if (__valid_fs(-1))
        v18 = 2989;
      else
        v18 = 3072;
      *(_DWORD *)v18 = -559038737;
      abort();
    }
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::restoreUpdateSet(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  int v6;
  _BYTE *v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  unsigned int vint32;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  _DWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  __int16 v25;
  int v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  int *v33;
  off_t v34;
  size_t v35;
  void *v36;
  size_t v37;
  unint64_t v38;
  uint64_t v39;
  int *v40;
  char v41;
  off_t v42;
  off_t v43;
  off_t __offseta;
  unsigned int __offsetb;
  uint64_t v46;
  int v47;
  int v49;
  _BYTE __dst[1024];
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[2];
  __int16 v54;

  result = store_stream_read_vint32((uint64_t)a3);
  v47 = result;
  if ((_DWORD)result)
  {
    v6 = 0;
    v46 = a1 + 48;
    do
    {
      v51 = 0;
      v52 = 0;
      v7 = __dst;
      bzero(__dst, 0x400uLL);
      v49 = 0;
      CIReadPostings(a3, a2, (uint64_t)&v51, &v49);
      v8 = *((_QWORD *)a3 + 4);
      v9 = *((_QWORD *)a3 + 5);
      if (v9 + 1024 > v8)
      {
        v27 = (char *)*((_QWORD *)a3 + 6);
        v28 = v8 - v9;
        if (v8 != v9)
        {
          memcpy(__dst, &v27[v9], v8 - v9);
          *((_QWORD *)a3 + 5) = v8;
          v9 = v8;
        }
        v29 = *a3;
        __offseta = *((_QWORD *)a3 + 3);
        v30 = v27;
        while (1)
        {
          v31 = pread(v29, v30, v9, __offseta);
          if (v31 != -1)
            break;
          v32 = g_prot_error_callback;
          if (!g_prot_error_callback)
            break;
          v33 = __error();
          if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v32 + 16))(v32, v29, *v33, 4) & 1) == 0)goto LABEL_47;
        }
        if (v31 != -1)
        {
          *((_QWORD *)a3 + 4) = v31;
          *((_QWORD *)a3 + 5) = 0;
          v34 = *((_QWORD *)a3 + 3) + v31;
          *((_QWORD *)a3 + 3) = v34;
          if (!v31)
            goto LABEL_7;
          v7 = &__dst[v28];
          v10 = 1024 - v28;
          if (1024 - v28 <= v31)
          {
            v9 = 0;
            goto LABEL_6;
          }
          v43 = v34;
          v35 = v31;
          while (1)
          {
            v36 = (void *)*((_QWORD *)a3 + 6);
            memcpy(v7, v36, v35);
            v37 = v35;
            *((_QWORD *)a3 + 5) = v35;
            __offsetb = *a3;
            while (1)
            {
              v38 = pread(__offsetb, v36, v37, v43);
              if (v38 != -1)
                break;
              v39 = g_prot_error_callback;
              if (!g_prot_error_callback)
                break;
              v40 = __error();
              v41 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v39 + 16))(v39, __offsetb, *v40, 4);
              v37 = v35;
              if ((v41 & 1) == 0)
                goto LABEL_47;
            }
            if (v38 == -1)
              break;
            *((_QWORD *)a3 + 4) = v38;
            *((_QWORD *)a3 + 5) = 0;
            v42 = *((_QWORD *)a3 + 3) + v38;
            *((_QWORD *)a3 + 3) = v42;
            if (!v38)
              goto LABEL_7;
            v43 = v42;
            v9 = 0;
            v7 += v35;
            v10 -= v35;
            v35 = v38;
            if (v10 <= v38)
              goto LABEL_6;
          }
        }
LABEL_47:
        a3[4] = *__error();
      }
      else
      {
        v10 = 1024;
LABEL_6:
        memcpy(v7, (const void *)(*((_QWORD *)a3 + 6) + v9), v10);
        *((_QWORD *)a3 + 5) = v9 + v10;
      }
LABEL_7:
      vint32 = store_stream_read_vint32((uint64_t)a3);
      v12 = v51;
      v13 = v52;
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
      v14 = *(std::__shared_weak_count **)(a1 + 120);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = *(std::__shared_weak_count **)(a1 + 136);
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
        v20 = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v46, vint32, __dst, 0xFFFFFFFF, 3.4028e38);
        *((_QWORD *)v20 + 128) = v12;
        *((_QWORD *)v20 + 129) = v13;
        do
          v21 = __ldaxr(v18);
        while (__stlxr(v21 - 1, v18));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      else
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
        v22 = IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::lookupForInsert(v46, vint32, __dst, 0xFFFFFFFF, 3.4028e38);
        *((_QWORD *)v22 + 128) = v12;
        *((_QWORD *)v22 + 129) = v13;
      }
      if (v14)
      {
        v23 = (unint64_t *)&v14->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v25 = *(_WORD *)(a1 + 76);
      v26 = *(_DWORD *)(a1 + 156);
      v53[0] = *(_DWORD *)(a1 + 160);
      v53[1] = v26;
      v54 = v25;
      result = *(_QWORD *)(a1 + 176);
      if (result)
      {
        if (*(_DWORD *)(result + 216) == -270471200)
          result = data_map_ext_restore_data(result, vint32, __dst, 0x400uLL, v53);
      }
      ++v6;
    }
    while (v6 != v47);
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::aNN(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, int a7, char a8, float a9, uint64_t a10)
{
  uint64_t v13;
  int v14;
  _QWORD *v15;
  char *v17;
  char *v18;
  const char *v19;
  _QWORD v20[5];

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(a1 + 16))
  {
    v17 = __si_assert_copy_extra_268();
    v18 = v17;
    v19 = "";
    if (v17)
      v19 = v17;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v19);
    free(v18);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v13 = a1 + 48;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 0x40000000;
  v20[2] = ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi256EE3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPvfE_block_invoke;
  v20[3] = &unk_1E6E32790;
  v20[4] = a10;
  if ((a7 - 10001) >= 0xFFFFD8F0)
    v14 = a7;
  else
    v14 = 10000;
  v15 = (_QWORD *)operator new();
  *(_DWORD *)v15 = v14;
  v15[2] = 0;
  v15[3] = 0;
  v15[1] = 0;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNN(v13, a4, a8, v15, 0, a9);
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNProcessResult((uint64_t)v15, (uint64_t)v20);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::aNNForTest(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, int a7, char a8, float a9, uint64_t a10, unsigned int a11)
{
  uint64_t v14;
  int v15;
  _QWORD *v16;
  char *v18;
  char *v19;
  const char *v20;

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(a1 + 16))
  {
    v18 = __si_assert_copy_extra_268();
    v19 = v18;
    v20 = "";
    if (v18)
      v20 = v18;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v20);
    free(v19);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v14 = a1 + 48;
  if ((a7 - 10001) >= 0xFFFFD8F0)
    v15 = a7;
  else
    v15 = 10000;
  v16 = (_QWORD *)operator new();
  *(_DWORD *)v16 = v15;
  v16[2] = 0;
  v16[3] = 0;
  v16[1] = 0;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNN(v14, a4, a8, v16, a11, a9);
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNForTestProcessResult((uint64_t)v16, a10);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::createCandidateQueue(uint64_t a1, int a2)
{
  int v2;
  uint64_t result;

  if ((a2 - 10001) >= 0xFFFFD8F0)
    v2 = a2;
  else
    v2 = 10000;
  result = operator new();
  *(_DWORD *)result = v2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

void IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::aNN(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, char a7, _QWORD *a8, float a9)
{
  char *v9;
  char *v10;
  const char *v11;

  if (*(_DWORD *)(a1 + 8) != a2
    || *(unsigned __int16 *)(a1 + 20) != a3
    || a6 > 2
    || *(_DWORD *)(a1 + 12) != vector_dimension_vec_sizes_10743[a5]
    || vector_size_elem_sizes_10742[a6] != *(_DWORD *)(a1 + 16))
  {
    v9 = __si_assert_copy_extra_268();
    v10 = v9;
    v11 = "";
    if (v9)
      v11 = v9;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3070, "compatible", v11);
    free(v10);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNN(a1 + 48, a4, a7, a8, 0, a9);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::aNNProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[5];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi256EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke;
  v4[3] = &unk_1E6E327F0;
  v4[4] = a3;
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNProcessResult(a2, (uint64_t)v4);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::aNNForTestProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNNForTestProcessResult(a2, a3);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::aNNForDebugProcessResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  NSObject *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  float *v15;
  BOOL v16;
  int v17;
  float *v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  int v23;
  NSObject *v24;
  void **v25;
  float *v26;
  char *v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  void **v31;
  void *v32;
  uint64_t v33;
  int v35;
  float *v36;
  CFIndex AppIntegerValue;
  float *v38;
  float *v39;
  uint64_t v40;
  uint8_t v41[4];
  void **v42;
  void *__p[2];
  uint64_t v44;
  uint64_t v45;
  __int128 buf;
  uint64_t v47;
  _QWORD v48[8];
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v5 = *__error();
  v6 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_1B8270000, v6, OS_LOG_TYPE_DEFAULT, "search return %zu results", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v5;
  LOBYTE(buf) = 0;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("IVFANNLogQueryResult"), CFSTR("com.apple.Spotlight"), (Boolean *)&buf);
  v35 = buf;
  v61 = 0u;
  v51 = 0;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v50 = 0u;
  v49 = 0u;
  memset(v48, 0, sizeof(v48));
  v8 = MEMORY[0x1E0DE4FD0] + 104;
  v52 = MEMORY[0x1E0DE4FD0] + 104;
  v9 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v10 = MEMORY[0x1E0DE4FD0] + 64;
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v47 = MEMORY[0x1E0DE4FD0] + 64;
  *(_QWORD *)&buf = v11;
  *(_QWORD *)((char *)&buf + *(_QWORD *)(v11 - 24)) = v12;
  *((_QWORD *)&buf + 1) = 0;
  v13 = (std::ios_base *)((char *)&buf + *(_QWORD *)(buf - 24));
  std::ios_base::init(v13, v48);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v14 = v9[5];
  v47 = v9[4];
  *(_QWORD *)((char *)&v48[-1] + *(_QWORD *)(v47 - 24)) = v14;
  *(_QWORD *)&buf = v9[1];
  *(_QWORD *)((char *)&buf + *(_QWORD *)(buf - 24)) = v9[6];
  v52 = v8;
  *(_QWORD *)&buf = MEMORY[0x1E0DE4FD0] + 24;
  v47 = v10;
  std::streambuf::basic_streambuf();
  v48[0] = MEMORY[0x1E0DE4FB8] + 16;
  v49 = 0u;
  v50 = 0u;
  LODWORD(v51) = 24;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::allItems(&v38, *(_BYTE **)(a2 + 8), *(_BYTE **)(a2 + 16));
  v15 = v39;
  v36 = v38;
  if (v38 != v39)
  {
    if (AppIntegerValue)
      v16 = v35 == 0;
    else
      v16 = 1;
    if (v16)
    {
      v26 = v38;
      do
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD, float))(a3 + 16))(a3, *((unsigned int *)v26 + 2), *((unsigned int *)v26 + 4), v26[5]);
        v26 += 6;
      }
      while (v26 != v15);
    }
    else
    {
      v17 = 0;
      v18 = v38;
      do
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD, float))(a3 + 16))(a3, *((unsigned int *)v18 + 2), *((unsigned int *)v18 + 4), v18[5]);
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)",", 1);
        v20 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)";", 1);
        v21 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
        if ((v21[32] & 5) == 0
          && ((*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v21 + 5)
                                                                                            + 32))(__p, *((_QWORD *)v21 + 5), 0, 1, 16), v45 > 1000)|| (++v17, HIDWORD(v22) = -1030792151 * v17 + 85899344, LODWORD(v22) = HIDWORD(v22), (v22 >> 1) < 0x51EB851))
        {
          v23 = *__error();
          v24 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            v25 = __p;
            if (v44 < 0)
              v25 = (void **)__p[0];
            *(_DWORD *)v41 = 136315138;
            v42 = v25;
            _os_log_impl(&dword_1B8270000, v24, OS_LOG_TYPE_DEFAULT, "%s", v41, 0xCu);
            if (SHIBYTE(v44) < 0)
              operator delete(__p[0]);
          }
          *__error() = v23;
          __p[0] = 0;
          __p[1] = 0;
          v44 = 0;
          std::stringbuf::str();
          if (SHIBYTE(v44) < 0)
            operator delete(__p[0]);
        }
        v18 += 6;
      }
      while (v18 != v15);
    }
  }
  v27 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
  if ((v27[32] & 5) != 0)
  {
    v28 = a2;
  }
  else
  {
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(__p, *((_QWORD *)v27 + 5), 0, 1, 16);
    v28 = a2;
    if (v45 > 0)
    {
      v29 = *__error();
      v30 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        v31 = v44 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)v41 = 136315138;
        v42 = v31;
        _os_log_impl(&dword_1B8270000, v30, OS_LOG_TYPE_DEFAULT, "%s", v41, 0xCu);
        if (SHIBYTE(v44) < 0)
          operator delete(__p[0]);
      }
      *__error() = v29;
    }
  }
  if (v28)
  {
    v32 = *(void **)(v28 + 8);
    if (v32)
    {
      *(_QWORD *)(v28 + 16) = v32;
      operator delete(v32);
    }
    MEMORY[0x1BCCB06A4](v28, 0x1020C403EC25235);
  }
  if (v36)
    operator delete(v36);
  *(_QWORD *)&buf = *MEMORY[0x1E0DE4F50];
  v33 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&buf + *(_QWORD *)(buf - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v47 = v33;
  v48[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v50) < 0)
    operator delete((void *)v49);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BCCB0650](&v52);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::storageSize(uint64_t a1)
{
  os_unfair_lock_s *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v2 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a1 + 128);
  v6 = *(std::__shared_weak_count **)(a1 + 136);
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  os_unfair_lock_unlock(v2);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 16) + 24);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 184))(v7);
  if (!v6)
    goto LABEL_11;
  v12 = (unint64_t *)&v6->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v3)
      return v11 + v10;
  }
  else
  {
LABEL_11:
    if (!v3)
      return v11 + v10;
  }
  v14 = (unint64_t *)&v3->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v11 + v10;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::setVectorStore(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 176) = a2;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::getDataForOffset(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v7;
  int v8;
  NSObject *v9;
  int *v10;
  int v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1) <= a2)
  {
    v8 = *__error();
    v9 = _SILogForLogForCategory(2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
      v12 = 136315906;
      v13 = "getDataForOffset";
      v14 = 1024;
      v15 = 3455;
      v16 = 1024;
      v17 = a2;
      v18 = 1024;
      v19 = v11;
      _os_log_error_impl(&dword_1B8270000, v9, OS_LOG_TYPE_ERROR, "%s:%d: offset out of range: %u >= %u", (uint8_t *)&v12, 0x1Eu);
    }
    v10 = __error();
    v7 = 0;
    result = 0;
    *v10 = v8;
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(a1[6] + 32))(a1 + 6, a2);
    v7 = 1024;
  }
  *a3 = v7;
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::updateVectorStorageOffsets(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t i;
  uint64_t result;
  unint64_t Ptr;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  v2 = a2;
  v4 = a1 + 48;
  if (a2)
  {
    for (i = 0; ; ++i)
    {
      result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(v4);
      if (i >= result)
        break;
      Ptr = vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(a1 + 80) + 16), i, 1044);
      if (!*(_BYTE *)(v2 + 184))
      {
        v8 = *(unsigned int *)(Ptr + 1040);
        v9 = *(_DWORD *)(v2 + 24);
        if (!v9 || !((*(_QWORD *)(v2 + 16) ^ v8) >> (-4 * v9)))
        {
          v10 = *(_QWORD *)(v2 + 56 + 8 * ((v8 >> ((60 - 4 * v9) & 0xFC)) & 0xF));
          if ((v10 & 1) != 0)
          {
            v11 = v9 + 2;
            do
              v10 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v8 >> ((64 - 4 * v11++) & 0xFC)) & 0xF));
            while ((v10 & 1) != 0);
          }
          if (v10)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        }
      }
    }
  }
  else
  {
    while (1)
    {
      result = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(v4);
      if (v2 >= result)
        break;
      vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(a1 + 80) + 16), v2++, 1044);
    }
  }
  return result;
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::status(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  _QWORD v38[2];
  uint64_t v39;
  _OWORD v40[4];
  void *__p[2];
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v53 = 0u;
  v43 = 0;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v42 = 0u;
  *(_OWORD *)__p = 0u;
  v4 = MEMORY[0x1E0DE4FD0];
  memset(v40, 0, sizeof(v40));
  v5 = MEMORY[0x1E0DE4FD0] + 104;
  v44 = MEMORY[0x1E0DE4FD0] + 104;
  v6 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v7 = MEMORY[0x1E0DE4FD0] + 64;
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v39 = MEMORY[0x1E0DE4FD0] + 64;
  v38[0] = v8;
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v8 - 24)) = v9;
  v38[1] = 0;
  v10 = (std::ios_base *)((char *)v38 + *(_QWORD *)(v38[0] - 24));
  std::ios_base::init(v10, v40);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v11 = v6[5];
  v39 = v6[4];
  *(uint64_t *)((char *)&v39 + *(_QWORD *)(v39 - 24)) = v11;
  v38[0] = v6[1];
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = v6[6];
  v44 = v5;
  v38[0] = v4 + 24;
  v39 = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v40[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v42 = 0u;
  LODWORD(v43) = 24;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = a2;
  else
    v14 = *(_QWORD *)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, v14, v15);
  v17 = *(char *)(a1 + 47);
  if (v17 >= 0)
    v18 = a1 + 24;
  else
    v18 = *(_QWORD *)(a1 + 24);
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a1 + 47);
  else
    v19 = *(_QWORD *)(a1 + 32);
  v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, v18, v19);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)"(", 1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v21 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"/", 1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)"v", 1);
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(a1 + 48, &v36);
  if (v36)
  {
    IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(a1 + 48, &v34);
    v23 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)")", 1);
    v24 = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v27 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)")", 1);
  }
  v28 = v37;
  if (v37)
  {
    v29 = (unint64_t *)&v37->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, (uint64_t)"[", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, (uint64_t)",", 1);
  v31 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"] indexId: ", 11);
  std::ostream::operator<<();
  std::stringbuf::str();
  v38[0] = *v6;
  v32 = v6[9];
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = v6[8];
  v39 = v32;
  *(_QWORD *)&v40[0] = v12 + 16;
  if (SBYTE7(v42) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BCCB0650](&v44);
}

uint64_t IVFVectorIndexen<vi_onefixedsize_memory_allocator,vi_memory_postings>::IVFVectorIndexInstance<float,256>::diagnoseDump(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  uint64_t v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  uint64_t v44;
  std::locale *v45;
  uint64_t v46;
  const std::locale::facet *v47;
  uint64_t v48;
  _QWORD *v49;
  const char *v50;
  uint64_t v51;
  const std::locale::facet *v52;
  unint64_t v53;
  std::locale::id *v54;
  const std::locale::facet *v55;
  unint64_t Ptr;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  void *locale;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  std::locale::id *v66;
  _QWORD *v67;
  _QWORD *v68;
  const std::locale::facet *v69;
  const std::locale::facet *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::locale v82;
  std::locale v83;
  uint64_t v84;
  unsigned __int8 v85;

  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, a2, v8);
  v10 = *(char *)(a1 + 47);
  if (v10 >= 0)
    v11 = a1 + 24;
  else
    v11 = *(_QWORD *)(a1 + 24);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 47);
  else
    v12 = *(_QWORD *)(a1 + 32);
  v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" vectors ", 9);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" partitions.", 12);
  if (*(_BYTE *)(a1 + 192))
    v17 = "(readOnly)";
  else
    v17 = "(readWrite)";
  if (*(_BYTE *)(a1 + 192))
    v18 = 10;
  else
    v18 = 11;
  v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
  v20 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v21 = *(_QWORD *)(a1 + 112);
  v22 = *(std::__shared_weak_count **)(a1 + 120);
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  v25 = *(std::__shared_weak_count **)(a1 + 136);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
  if (v22)
  {
    v28 = (unint64_t *)&v22->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (!v25)
    goto LABEL_29;
  v30 = (unint64_t *)&v25->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    v32 = a1 + 48;
    if (!v22)
      goto LABEL_35;
  }
  else
  {
LABEL_29:
    v32 = a1 + 48;
    if (!v22)
      goto LABEL_35;
  }
  v33 = (unint64_t *)&v22->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_35:
  if (v21)
  {
    v35 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Quantizer: ", 11);
    v36 = *(char *)(v21 + 31);
    if (v36 >= 0)
      v37 = v21 + 8;
    else
      v37 = *(_QWORD *)(v21 + 8);
    if (v36 >= 0)
      v38 = *(unsigned __int8 *)(v21 + 31);
    else
      v38 = *(_QWORD *)(v21 + 16);
    v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, v37, v38);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)"(", 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    v40 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)") ", 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    v41 = (_QWORD *)std::ostream::operator<<();
    v42 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, (uint64_t)" centroids.", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(*v42 - 24)));
    v43 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
    std::locale::~locale(&v83);
    std::ostream::put();
    std::ostream::flush();
  }
  v80 = 0;
  v81 = 0;
  IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::getPartitions(v32, &v80);
  v44 = v80;
  if (!v80)
    goto LABEL_51;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"Partition: ", 11);
  (*(void (**)(std::locale *__return_ptr, uint64_t))(*(_QWORD *)v44 + 144))(&v83, v44);
  v45 = (v85 & 0x80u) == 0 ? &v83 : (std::locale *)v83.__locale_;
  v46 = (v85 & 0x80u) == 0 ? v85 : v84;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v45, v46);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
  v47 = std::locale::use_facet(&v82, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
  std::locale::~locale(&v82);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v85 < 0)
  {
    operator delete(v83.__locale_);
    if (!a4)
      goto LABEL_84;
  }
  else
  {
LABEL_51:
    if (!a4)
      goto LABEL_84;
  }
  v78 = v44;
  v48 = *(_QWORD *)(a1 + 80);
  v49 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"offset,vid", 10);
  v79 = a4;
  if (a4 <= 1)
    v50 = ",";
  else
    v50 = ",vector";
  if (a4 <= 1)
    v51 = 1;
  else
    v51 = 7;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
  v52 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  if (*(_DWORD *)(v48 + 24))
  {
    if (a4 <= 1)
    {
      v65 = 0;
      v66 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v48 + 16), v65, 1044);
        v67 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v67, (uint64_t)",", 1);
        v68 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v68, (uint64_t)",", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
        v69 = std::locale::use_facet(&v83, v66);
        ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
        std::locale::~locale(&v83);
        std::ostream::put();
        std::ostream::flush();
        ++v65;
      }
      while (v65 < *(unsigned int *)(v48 + 24));
    }
    else
    {
      v53 = 0;
      v54 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        Ptr = vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(v48 + 16), v53, 1044);
        v57 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)",", 1);
        v58 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)",", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"{length = ", 10);
        v59 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)", bytes = 0x", 12);
        data2hexString((const unsigned __int8 *)&v83, Ptr, 16);
        if ((v85 & 0x80u) == 0)
          locale = &v83;
        else
          locale = v83.__locale_;
        if ((v85 & 0x80u) == 0)
          v61 = v85;
        else
          v61 = v84;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)locale, v61);
        if ((char)v85 < 0)
          operator delete(v83.__locale_);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)" ... ", 5);
        data2hexString((const unsigned __int8 *)&v83, Ptr + 1016, 8);
        if ((v85 & 0x80u) == 0)
          v62 = &v83;
        else
          v62 = v83.__locale_;
        if ((v85 & 0x80u) == 0)
          v63 = v85;
        else
          v63 = v84;
        v64 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v62, v63);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)" }", 2);
        if ((char)v85 < 0)
          operator delete(v83.__locale_);
        std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
        v55 = std::locale::use_facet(&v83, v54);
        ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
        std::locale::~locale(&v83);
        std::ostream::put();
        std::ostream::flush();
        ++v53;
      }
      while (v53 < *(unsigned int *)(v48 + 24));
    }
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a3 + *(_QWORD *)(*a3 - 24)));
  v70 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  if (v78)
    (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v78 + 104))(v78, a3, v79);
LABEL_84:
  v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v72 = v81;
  if (!v81)
    goto LABEL_88;
  v73 = (unint64_t *)&v81->__shared_owners_;
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
    if (!v22)
      return v71;
  }
  else
  {
LABEL_88:
    if (!v22)
      return v71;
  }
  v75 = (unint64_t *)&v22->__shared_owners_;
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  return v71;
}

uint64_t ___ZNK16IVFVectorIndexenI32vi_onefixedsize_memory_allocator18vi_memory_postingsE22IVFVectorIndexInstanceIfLi256EE16aNNProcessResultEPvU13block_pointerFvS5_fE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void IVFVectorIndexTemplate<float,256>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::aNN(uint64_t a1, unsigned __int8 *a2, char a3, _QWORD *a4, CFIndex AppIntegerValue, float a6)
{
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  double Current;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  char v32;
  char v33;
  unsigned int v34;
  char v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  NSObject *v42;
  int v43;
  int v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  int *v53;
  int *v54;
  unint64_t v55;
  int v56;
  void *v57;
  int64_t v58;
  char *v59;
  char *v60;
  int v61;
  NSObject *v62;
  int v63;
  int v64;
  double v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint8x8_t v70;
  unint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  float v75;
  int v76;
  NSObject *v77;
  int v78;
  NSObject *v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  int v88;
  NSObject *v89;
  int v90;
  int v91;
  int v92;
  int v93;
  unint64_t v94;
  CFAbsoluteTime v95;
  _QWORD *v96;
  _QWORD *v97;
  void *v98;
  char *v99;
  char *v100;
  const char *v101;
  int v102;
  int v103;
  _QWORD v105[8];
  void *v106;
  void *v107;
  _QWORD *v108;
  float v109;
  void *__p;
  void *v111;
  char *v112;
  void *v113;
  _BYTE *v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  int v126;
  void **v127;
  _BYTE keyExistsAndHasValidFormat[46];
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;
  __int16 v133;
  unint64_t v134;
  __int16 v135;
  CFAbsoluteTime v136;
  _OWORD __str[2];
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  v11 = *(_DWORD *)a4;
  memset(__str, 0, sizeof(__str));
  snprintf((char *)__str, 0x20uLL, "%02x%02x%02x%02x...%02x%02x%02x%02x", *a2, a2[1], a2[2], a2[3], a2[1020], a2[1021], a2[1022], a2[1023]);
  if (!(_DWORD)AppIntegerValue)
    AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("IVFNumberOfParitionsProbe"), CFSTR("com.apple.Spotlight"), 0);
  v103 = v11;
  v12 = 10 * v11;
  keyExistsAndHasValidFormat[0] = 0;
  v13 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeMin"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v14 = v13;
  else
    v14 = 10000;
  if (v12 <= v14)
    v15 = v14;
  else
    v15 = v12;
  v16 = v15
      * IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
  v17 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
  keyExistsAndHasValidFormat[0] = 0;
  v18 = v16 / v17;
  v19 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeMin"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
    v20 = v19;
  else
    v20 = 7;
  v123 = 0;
  v124 = &v123;
  if (v18 <= v20)
    v18 = v20;
  v126 = 0;
  v125 = 0x2000000000;
  v119 = 0;
  v120 = &v119;
  v122 = 0;
  v121 = 0x2000000000;
  v118 = 0;
  v116 = 0u;
  v117 = 0u;
  QuantizerManager<float,768>::aNNLogQueryVecIds((uint64_t)&v116);
  Current = CFAbsoluteTimeGetCurrent();
  if ((a3 & 1) != 0
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1) <= v18
    || IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1) <= v15)
  {
    v61 = *__error();
    v62 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
    {
      v63 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
      v64 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
      v65 = a6;
      *(_DWORD *)keyExistsAndHasValidFormat = 136316162;
      *(_QWORD *)&keyExistsAndHasValidFormat[4] = __str;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[14] = v103;
      *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[20] = v63;
      *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[26] = v64;
      *(_WORD *)&keyExistsAndHasValidFormat[30] = 2048;
      *(double *)&keyExistsAndHasValidFormat[32] = a6;
      _os_log_impl(&dword_1B8270000, v62, OS_LOG_TYPE_DEFAULT, "brute force search %s top %u of %u vectors in %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x28u);
    }
    else
    {
      v65 = a6;
    }
    *__error() = v61;
    v102 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    v66 = 0;
    v67 = *(_QWORD *)(a1 + 32);
    do
    {
      if (v66 == *(_DWORD *)(v67 + 24))
        goto LABEL_114;
      ++*((_DWORD *)v124 + 6);
      v68 = IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator*(v67, v66);
      v69 = *(unsigned int *)(v68 + 1040);
      *(_DWORD *)keyExistsAndHasValidFormat = 2139095039;
      vDSP_distancesq((const float *)a2, 1, (const float *)v68, 1, (float *)keyExistsAndHasValidFormat, 0x100uLL);
      if (*((_QWORD *)&v116 + 1))
      {
        v70 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v116 + 8));
        v70.i16[0] = vaddlv_u8(v70);
        if (v70.u32[0] > 1uLL)
        {
          v71 = v69;
          if (*((_QWORD *)&v116 + 1) <= v69)
            v71 = v69 % *((_QWORD *)&v116 + 1);
        }
        else
        {
          v71 = (DWORD2(v116) - 1) & v69;
        }
        v72 = *(uint64_t **)(v116 + 8 * v71);
        if (v72)
        {
          v72 = (uint64_t *)*v72;
          if (v72)
          {
            if (v70.u32[0] < 2uLL)
            {
              while (1)
              {
                v74 = v72[1];
                if (v74 == v69)
                {
                  if (*((_DWORD *)v72 + 4) == (_DWORD)v69)
                    goto LABEL_83;
                }
                else if ((v74 & (*((_QWORD *)&v116 + 1) - 1)) != v71)
                {
                  goto LABEL_82;
                }
                v72 = (uint64_t *)*v72;
                if (!v72)
                  goto LABEL_83;
              }
            }
            do
            {
              v73 = v72[1];
              if (v73 == v69)
              {
                if (*((_DWORD *)v72 + 4) == (_DWORD)v69)
                  break;
              }
              else
              {
                if (v73 >= *((_QWORD *)&v116 + 1))
                  v73 %= *((_QWORD *)&v116 + 1);
                if (v73 != v71)
                  goto LABEL_82;
              }
              v72 = (uint64_t *)*v72;
            }
            while (v72);
          }
        }
      }
      else
      {
LABEL_82:
        v72 = 0;
      }
LABEL_83:
      v75 = *(float *)keyExistsAndHasValidFormat;
      if (a6 == 0.0 || *(float *)keyExistsAndHasValidFormat <= a6)
      {
        if (v72)
        {
          v78 = *__error();
          v79 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109376;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v69;
            *(_WORD *)&keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v75;
            _os_log_impl(&dword_1B8270000, v79, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", keyExistsAndHasValidFormat, 0x12u);
          }
          *__error() = v78;
        }
        *(_OWORD *)keyExistsAndHasValidFormat = *(_OWORD *)(v68 + 1024);
        *(_DWORD *)&keyExistsAndHasValidFormat[16] = v69;
        *(float *)&keyExistsAndHasValidFormat[20] = v75;
        MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::push(a4, (__int128 *)keyExistsAndHasValidFormat);
      }
      else
      {
        if (v72)
        {
          v76 = *__error();
          v77 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)keyExistsAndHasValidFormat = 67109632;
            *(_DWORD *)&keyExistsAndHasValidFormat[4] = v69;
            *(_WORD *)&keyExistsAndHasValidFormat[8] = 2048;
            *(double *)&keyExistsAndHasValidFormat[10] = v75;
            *(_WORD *)&keyExistsAndHasValidFormat[18] = 2048;
            *(double *)&keyExistsAndHasValidFormat[20] = v65;
            _os_log_impl(&dword_1B8270000, v77, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", keyExistsAndHasValidFormat, 0x1Cu);
          }
          *__error() = v76;
        }
        ++*((_DWORD *)v120 + 6);
      }
      ++v66;
    }
    while (v67 == *(_QWORD *)(a1 + 32));
    v99 = __si_assert_copy_extra_268();
    v100 = v99;
    v101 = "";
    if (v99)
      v101 = v99;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1814, "store == other.store", v101);
    free(v100);
    if (!__valid_fs(-1))
    {
      MEMORY[0xC00] = -559038737;
      abort();
    }
    MEMORY[0xBAD] = -559038737;
    goto LABEL_125;
  }
  if (!(_DWORD)AppIntegerValue)
  {
    keyExistsAndHasValidFormat[0] = 0;
    v22 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeMax"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0])
      v23 = v22;
    else
      v23 = 40;
    keyExistsAndHasValidFormat[0] = 0;
    v24 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionSizeFactor"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0])
      v25 = v24;
    else
      v25 = 45;
    keyExistsAndHasValidFormat[0] = 0;
    v26 = CFPreferencesGetAppIntegerValue(CFSTR("IVFPartitionProbeNumerator"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
    v27 = keyExistsAndHasValidFormat[0];
    v28 = 8 * v26;
    v29 = v25 * v25;
    keyExistsAndHasValidFormat[0] = 0;
    v30 = CFPreferencesGetAppIntegerValue(CFSTR("IVFpartitionProbeDecayExponent"), CFSTR("com.apple.Spotlight"), keyExistsAndHasValidFormat);
    v31 = keyExistsAndHasValidFormat[0];
    if (v30 <= 0x12)
      v32 = 18;
    else
      v32 = v30;
    v33 = v32 - 3;
    v34 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    if (v31)
      v35 = v33;
    else
      v35 = 17;
    v36 = v34 >> v35;
    if (v36 <= 8)
      v37 = 8;
    else
      v37 = v36;
    v38 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    if (v27)
      v39 = v28;
    else
      v39 = 800;
    v40 = v39 * v38 / (v29 * v37);
    if (v23 < v40)
      v40 = v23;
    if (v40 <= v18)
      AppIntegerValue = v18;
    else
      AppIntegerValue = v40;
  }
  v41 = *__error();
  v42 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    v43 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    v44 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    *(_DWORD *)keyExistsAndHasValidFormat = 136316418;
    *(_QWORD *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v103;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v43;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[26] = AppIntegerValue;
    *(_WORD *)&keyExistsAndHasValidFormat[30] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[32] = v44;
    *(_WORD *)&keyExistsAndHasValidFormat[36] = 2048;
    *(double *)&keyExistsAndHasValidFormat[38] = a6;
    _os_log_impl(&dword_1B8270000, v42, OS_LOG_TYPE_DEFAULT, "aNN search %s top %u of %u vectors in %u of %u partitions max_distance=%f", keyExistsAndHasValidFormat, 0x2Eu);
  }
  *__error() = v41;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v46 = *(_QWORD *)(a1 + 64);
  v45 = *(std::__shared_weak_count **)(a1 + 72);
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v48 = __ldxr(p_shared_owners);
    while (__stxr(v48 + 1, p_shared_owners));
  }
  v50 = *(_QWORD *)(a1 + 80);
  v49 = *(std::__shared_weak_count **)(a1 + 88);
  if (v49)
  {
    v51 = (unint64_t *)&v49->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  memset(keyExistsAndHasValidFormat, 0, 24);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned __int8 *, CFIndex))(*(_QWORD *)v46 + 72))(keyExistsAndHasValidFormat, v46, a2, AppIntegerValue);
  v54 = *(int **)keyExistsAndHasValidFormat;
  v53 = *(int **)&keyExistsAndHasValidFormat[8];
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v127 = &v113;
  v55 = *(_QWORD *)&keyExistsAndHasValidFormat[8] - *(_QWORD *)keyExistsAndHasValidFormat;
  if (*(_QWORD *)&keyExistsAndHasValidFormat[8] == *(_QWORD *)keyExistsAndHasValidFormat)
  {
    v111 = 0;
    v112 = 0;
    __p = 0;
    goto LABEL_94;
  }
  do
  {
    v56 = *v54;
    v54 += 2;
    std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&v127, v56);
  }
  while (v54 != v53);
  v57 = v113;
  v111 = 0;
  v112 = 0;
  __p = 0;
  v58 = v114 - (_BYTE *)v113;
  if (v114 == v113)
    goto LABEL_94;
  if (v58 < 0)
LABEL_125:
    abort();
  v59 = (char *)operator new(v114 - (_BYTE *)v113);
  v60 = &v59[4 * (v58 >> 2)];
  __p = v59;
  v112 = v60;
  memcpy(v59, v57, v58);
  v111 = v60;
LABEL_94:
  v105[0] = MEMORY[0x1E0C809B0];
  v105[1] = 1174405120;
  v105[2] = ___ZNK22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE3aNNERK10CIVector_sIfLi256EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke;
  v105[3] = &unk_1E6E327B8;
  v105[6] = a1;
  v105[7] = a2;
  v105[4] = &v123;
  std::unordered_set<unsigned int>::unordered_set((uint64_t)&v106, (uint64_t)&v116);
  v109 = a6;
  v105[5] = &v119;
  v108 = a4;
  (*(void (**)(uint64_t, void **, _QWORD *))(*(_QWORD *)v50 + 72))(v50, &__p, v105);
  if (__p)
  {
    v111 = __p;
    operator delete(__p);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 136));
  v80 = v107;
  if (v107)
  {
    do
    {
      v81 = (_QWORD *)*v80;
      operator delete(v80);
      v80 = v81;
    }
    while (v81);
  }
  v82 = v106;
  v106 = 0;
  if (v82)
    operator delete(v82);
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  if (*(_QWORD *)keyExistsAndHasValidFormat)
  {
    *(_QWORD *)&keyExistsAndHasValidFormat[8] = *(_QWORD *)keyExistsAndHasValidFormat;
    operator delete(*(void **)keyExistsAndHasValidFormat);
  }
  v83 = v55 >> 3;
  if (v49)
  {
    v84 = (unint64_t *)&v49->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v102 = v83;
  if (v45)
  {
    v86 = (unint64_t *)&v45->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
LABEL_114:
  v88 = *__error();
  v89 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
  {
    v90 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nVectors(a1);
    v91 = IVFVectorIndexTemplate<float,768>::IVFVectorIndexRoot_s<vi_onefixedsize_memory_allocator,vi_memory_postings>::nPartitions(a1);
    v92 = *((_DWORD *)v120 + 6);
    v93 = *((_DWORD *)v124 + 6);
    v94 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
    v95 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)keyExistsAndHasValidFormat = 136317442;
    *(_QWORD *)&keyExistsAndHasValidFormat[4] = __str;
    *(_WORD *)&keyExistsAndHasValidFormat[12] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[14] = v103;
    *(_WORD *)&keyExistsAndHasValidFormat[18] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[20] = v90;
    *(_WORD *)&keyExistsAndHasValidFormat[24] = 2048;
    *(double *)&keyExistsAndHasValidFormat[26] = a6;
    *(_WORD *)&keyExistsAndHasValidFormat[34] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[36] = v102;
    *(_WORD *)&keyExistsAndHasValidFormat[40] = 1024;
    *(_DWORD *)&keyExistsAndHasValidFormat[42] = v91;
    v129 = 1024;
    v130 = v92;
    v131 = 1024;
    v132 = v93;
    v133 = 2048;
    v134 = v94;
    v135 = 2048;
    v136 = v95 - Current;
    _os_log_impl(&dword_1B8270000, v89, OS_LOG_TYPE_DEFAULT, "search %s top %u of %u vectors max_distance=%f in %u of %u partitions skip %u of %u populate %zu results in duration: %f", keyExistsAndHasValidFormat, 0x4Eu);
  }
  *__error() = v88;
  v96 = (_QWORD *)v117;
  if ((_QWORD)v117)
  {
    do
    {
      v97 = (_QWORD *)*v96;
      operator delete(v96);
      v96 = v97;
    }
    while (v97);
  }
  v98 = (void *)v116;
  *(_QWORD *)&v116 = 0;
  if (v98)
    operator delete(v98);
  _Block_object_dispose(&v119, 8);
  _Block_object_dispose(&v123, 8);
}

unint64_t IVFVectorIndexTemplate<float,256>::VectorStore<vi_onefixedsize_memory_allocator,vi_memory_postings>::Iterator::operator*(uint64_t a1, unsigned int a2)
{
  char *v3;
  char *v4;
  const char *v5;

  if (*(_DWORD *)(a1 + 24) <= a2)
  {
    v3 = __si_assert_copy_extra_268();
    v4 = v3;
    v5 = "";
    if (v3)
      v5 = v3;
    __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 1798, "offset < store->endOffset()", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(a1 + 16), a2, 1044);
}

void ___ZNK22IVFVectorIndexTemplateIfLi256EE20IVFVectorIndexRoot_sI32vi_onefixedsize_memory_allocator18vi_memory_postingsE3aNNERK10CIVector_sIfLi256EEfbP20MaxSizePriorityQueueINS0_18candidate_result_sIS3_EENSt3__16vectorISB_NSC_9allocatorISB_EEEENSC_4lessISB_EEEj_block_invoke(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  unint64_t Ptr;
  const float *v6;
  float v7;
  unint64_t v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  int v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  double v22;
  _BYTE v23[20];
  double v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 48);
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  Ptr = vi_onefixedsize_memory_allocator::getPtr(*(_QWORD **)(*(_QWORD *)(v4 + 32) + 16), *a3, 1044);
  v6 = *(const float **)(a1 + 56);
  *(_DWORD *)v23 = 2139095039;
  vDSP_distancesq(v6, 1, (const float *)Ptr, 1, (float *)v23, 0x100uLL);
  v7 = *(float *)v23;
  v8 = *(unsigned int *)(Ptr + 1040);
  v9 = *(int8x8_t *)(a1 + 72);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = *(unsigned int *)(Ptr + 1040);
      if (*(_QWORD *)&v9 <= v8)
        v11 = v8 % *(_QWORD *)&v9;
    }
    else
    {
      v11 = (v9.i32[0] - 1) & v8;
    }
    v12 = *(uint64_t **)(*(_QWORD *)(a1 + 64) + 8 * v11);
    if (v12)
    {
      v12 = (uint64_t *)*v12;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          v13 = *(_QWORD *)&v9 - 1;
          while (1)
          {
            v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
                goto LABEL_22;
            }
            else if ((v15 & v13) != v11)
            {
              goto LABEL_21;
            }
            v12 = (uint64_t *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v14 = v12[1];
          if (v14 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
              break;
          }
          else
          {
            if (v14 >= *(_QWORD *)&v9)
              v14 %= *(_QWORD *)&v9;
            if (v14 != v11)
              goto LABEL_21;
          }
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
  else
  {
LABEL_21:
    v12 = 0;
  }
LABEL_22:
  v16 = *(float *)(a1 + 112);
  if (v16 == 0.0 || *(float *)v23 <= v16)
  {
    if (v12)
    {
      v18 = *__error();
      v19 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v23 = 67109376;
        *(_DWORD *)&v23[4] = v8;
        *(_WORD *)&v23[8] = 2048;
        *(double *)&v23[10] = v7;
        _os_log_impl(&dword_1B8270000, v19, OS_LOG_TYPE_DEFAULT, "Include vec_id: %u distance %f", v23, 0x12u);
      }
      *__error() = v18;
    }
    *(_OWORD *)v23 = *(_OWORD *)(Ptr + 1024);
    *(_DWORD *)&v23[16] = v8;
    *(float *)&v24 = v7;
    MaxSizePriorityQueue<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::vector<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>,std::allocator<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>,std::less<IVFVectorIndexTemplate<float,768>::candidate_result_s<vi_memory_postings>>>::push(*(_QWORD **)(a1 + 104), (__int128 *)v23);
  }
  else
  {
    if (v12)
    {
      v20 = *__error();
      v21 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        v22 = *(float *)(a1 + 112);
        *(_DWORD *)v23 = 67109632;
        *(_DWORD *)&v23[4] = v8;
        *(_WORD *)&v23[8] = 2048;
        *(double *)&v23[10] = v7;
        *(_WORD *)&v23[18] = 2048;
        v24 = v22;
        _os_log_impl(&dword_1B8270000, v21, OS_LOG_TYPE_DEFAULT, "Skip vec_id: %u distance %f > %f", v23, 0x1Cu);
      }
      *__error() = v20;
    }
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  }
}

